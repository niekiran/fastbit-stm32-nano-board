
015_Nano_LCD_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d07c  08005b64  08005b64  00006b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022be0  08022be0  00024070  2**0
                  CONTENTS
  4 .ARM          00000008  08022be0  08022be0  00023be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022be8  08022be8  00024070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022be8  08022be8  00023be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08022bec  08022bec  00023bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08022bf0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00024070  2**0
                  CONTENTS
 10 .bss          000001d8  20000070  20000070  00024070  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20000248  20000248  00024070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00024070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000987c  00000000  00000000  000240a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f32  00000000  00000000  0002d91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002f850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c4  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001decc  00000000  00000000  0003082c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cfc9  00000000  00000000  0004e6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac45e  00000000  00000000  0005b6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00107b1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ad4  00000000  00000000  00107b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0010a638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b4c 	.word	0x08005b4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005b4c 	.word	0x08005b4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <CST816S_i2c_read>:
  * @param  reg_addr: Address of the register to read from.
  * @param  reg_data: Pointer to a buffer where the read data will be stored.
  * @param  length: Number of bytes to read.
  * @retval None
  */
static void CST816S_i2c_read(uint16_t addr, uint8_t reg_addr, uint8_t *reg_data, size_t length) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af04      	add	r7, sp, #16
 8000276:	60ba      	str	r2, [r7, #8]
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	4603      	mov	r3, r0
 800027c:	81fb      	strh	r3, [r7, #14]
 800027e:	460b      	mov	r3, r1
 8000280:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Mem_Read(&hi2c1, addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, length, HAL_MAX_DELAY);
 8000282:	89fb      	ldrh	r3, [r7, #14]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	b299      	uxth	r1, r3
 8000288:	7b7b      	ldrb	r3, [r7, #13]
 800028a:	b29a      	uxth	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	b29b      	uxth	r3, r3
 8000290:	f04f 30ff 	mov.w	r0, #4294967295
 8000294:	9002      	str	r0, [sp, #8]
 8000296:	9301      	str	r3, [sp, #4]
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	2301      	movs	r3, #1
 800029e:	4803      	ldr	r0, [pc, #12]	@ (80002ac <CST816S_i2c_read+0x3c>)
 80002a0:	f002 fd38 	bl	8002d14 <HAL_I2C_Mem_Read>
}
 80002a4:	bf00      	nop
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	200000a0 	.word	0x200000a0

080002b0 <CST816S_read_touch>:

/**
  * @brief  Reads touch data from the CST816S touch sensor.
  * @retval None
  */
void CST816S_read_touch(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
  uint8_t data_raw[8];
  uint8_t reg_addr = 0x01;
 80002b6:	2301      	movs	r3, #1
 80002b8:	73fb      	strb	r3, [r7, #15]

  CST816S_i2c_read(CST816S_ADDRESS, reg_addr, (uint8_t *)data_raw, 6);
 80002ba:	1d3a      	adds	r2, r7, #4
 80002bc:	7bf9      	ldrb	r1, [r7, #15]
 80002be:	2306      	movs	r3, #6
 80002c0:	2015      	movs	r0, #21
 80002c2:	f7ff ffd5 	bl	8000270 <CST816S_i2c_read>

  data.gestureID = data_raw[0];
 80002c6:	793a      	ldrb	r2, [r7, #4]
 80002c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000304 <CST816S_read_touch+0x54>)
 80002ca:	701a      	strb	r2, [r3, #0]
  data.points = data_raw[1];
 80002cc:	797a      	ldrb	r2, [r7, #5]
 80002ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000304 <CST816S_read_touch+0x54>)
 80002d0:	705a      	strb	r2, [r3, #1]
  data.event = data_raw[2] >> 6;
 80002d2:	79bb      	ldrb	r3, [r7, #6]
 80002d4:	099b      	lsrs	r3, r3, #6
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000304 <CST816S_read_touch+0x54>)
 80002da:	709a      	strb	r2, [r3, #2]
  data.x = ((data_raw[2] & 0xF) << 8) + data_raw[3];
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	021b      	lsls	r3, r3, #8
 80002e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80002e4:	79fa      	ldrb	r2, [r7, #7]
 80002e6:	4413      	add	r3, r2
 80002e8:	4a06      	ldr	r2, [pc, #24]	@ (8000304 <CST816S_read_touch+0x54>)
 80002ea:	6053      	str	r3, [r2, #4]
  data.y = ((data_raw[4] & 0xF) << 8) + data_raw[5];
 80002ec:	7a3b      	ldrb	r3, [r7, #8]
 80002ee:	021b      	lsls	r3, r3, #8
 80002f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80002f4:	7a7a      	ldrb	r2, [r7, #9]
 80002f6:	4413      	add	r3, r2
 80002f8:	4a02      	ldr	r2, [pc, #8]	@ (8000304 <CST816S_read_touch+0x54>)
 80002fa:	6093      	str	r3, [r2, #8]
}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000090 	.word	0x20000090

08000308 <CST816S_get_data>:

/**
  * @brief  Returns a pointer to the structure containing the latest touch data.
  * @retval Pointer to the touch_data structure containing the latest touch information.
  */
struct touch_data* CST816S_get_data(void) {
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  return &data;
 800030c:	4b02      	ldr	r3, [pc, #8]	@ (8000318 <CST816S_get_data+0x10>)
}
 800030e:	4618      	mov	r0, r3
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	20000090 	.word	0x20000090

0800031c <HAL_GPIO_EXTI_Callback>:
/**
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == TP_IN_Pin) {
 8000326:	88fb      	ldrh	r3, [r7, #6]
 8000328:	2b20      	cmp	r3, #32
 800032a:	d102      	bne.n	8000332 <HAL_GPIO_EXTI_Callback+0x16>
    is_touch_detected = 1;
 800032c:	4b04      	ldr	r3, [pc, #16]	@ (8000340 <HAL_GPIO_EXTI_Callback+0x24>)
 800032e:	2201      	movs	r2, #1
 8000330:	701a      	strb	r2, [r3, #0]
  }
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	2000008c 	.word	0x2000008c

08000344 <CST816S_hw_reset>:

void CST816S_hw_reset(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	2110      	movs	r1, #16
 800034c:	480b      	ldr	r0, [pc, #44]	@ (800037c <CST816S_hw_reset+0x38>)
 800034e:	f002 fc15 	bl	8002b7c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000352:	2032      	movs	r0, #50	@ 0x32
 8000354:	f002 f930 	bl	80025b8 <HAL_Delay>
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2110      	movs	r1, #16
 800035c:	4807      	ldr	r0, [pc, #28]	@ (800037c <CST816S_hw_reset+0x38>)
 800035e:	f002 fc0d 	bl	8002b7c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000362:	2005      	movs	r0, #5
 8000364:	f002 f928 	bl	80025b8 <HAL_Delay>
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 8000368:	2201      	movs	r2, #1
 800036a:	2110      	movs	r1, #16
 800036c:	4803      	ldr	r0, [pc, #12]	@ (800037c <CST816S_hw_reset+0x38>)
 800036e:	f002 fc05 	bl	8002b7c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000372:	2032      	movs	r0, #50	@ 0x32
 8000374:	f002 f920 	bl	80025b8 <HAL_Delay>
}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	48000400 	.word	0x48000400

08000380 <CST816S_init>:
/**
  * @brief  Performs a hardware reset of the CST816S touch sensor.
  *         This function assumes GPIO pins and delays are configured appropriately.
  * @retval None
  */
void CST816S_init(void) {
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  CST816S_hw_reset();
 8000384:	f7ff ffde 	bl	8000344 <CST816S_hw_reset>

  CST816S_i2c_read(CST816S_ADDRESS, 0x15, &data.version, 1);
 8000388:	2301      	movs	r3, #1
 800038a:	4a0f      	ldr	r2, [pc, #60]	@ (80003c8 <CST816S_init+0x48>)
 800038c:	2115      	movs	r1, #21
 800038e:	2015      	movs	r0, #21
 8000390:	f7ff ff6e 	bl	8000270 <CST816S_i2c_read>
  HAL_Delay(5);
 8000394:	2005      	movs	r0, #5
 8000396:	f002 f90f 	bl	80025b8 <HAL_Delay>
  CST816S_i2c_read(CST816S_ADDRESS, 0xA7, data.versionInfo, 3);
 800039a:	2303      	movs	r3, #3
 800039c:	4a0b      	ldr	r2, [pc, #44]	@ (80003cc <CST816S_init+0x4c>)
 800039e:	21a7      	movs	r1, #167	@ 0xa7
 80003a0:	2015      	movs	r0, #21
 80003a2:	f7ff ff65 	bl	8000270 <CST816S_i2c_read>

  if(data.versionInfo[0] == 0xB4){
 80003a6:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <CST816S_init+0x50>)
 80003a8:	7b5b      	ldrb	r3, [r3, #13]
 80003aa:	2bb4      	cmp	r3, #180	@ 0xb4
 80003ac:	d103      	bne.n	80003b6 <CST816S_init+0x36>
    printf("CST86S detected.\n\t");
 80003ae:	4809      	ldr	r0, [pc, #36]	@ (80003d4 <CST816S_init+0x54>)
 80003b0:	f004 fd50 	bl	8004e54 <iprintf>
 80003b4:	e002      	b.n	80003bc <CST816S_init+0x3c>
  } else {
    printf("CST86S not detected.\n\t");
 80003b6:	4808      	ldr	r0, [pc, #32]	@ (80003d8 <CST816S_init+0x58>)
 80003b8:	f004 fd4c 	bl	8004e54 <iprintf>
  }
  HAL_Delay(50);
 80003bc:	2032      	movs	r0, #50	@ 0x32
 80003be:	f002 f8fb 	bl	80025b8 <HAL_Delay>
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	2000009c 	.word	0x2000009c
 80003cc:	2000009d 	.word	0x2000009d
 80003d0:	20000090 	.word	0x20000090
 80003d4:	08005b64 	.word	0x08005b64
 80003d8:	08005b78 	.word	0x08005b78

080003dc <CST816S_data_available>:

/**
  * @brief  Checks if touch data is available from the CST816S touch sensor.
  * @retval 1 if touch data is available, 0 otherwise.
  */
uint8_t CST816S_data_available(void) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
  uint8_t data_flag = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	71fb      	strb	r3, [r7, #7]
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80003e6:	2017      	movs	r0, #23
 80003e8:	f002 fa33 	bl	8002852 <HAL_NVIC_DisableIRQ>
  if (is_touch_detected) {
 80003ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000418 <CST816S_data_available+0x3c>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d007      	beq.n	8000404 <CST816S_data_available+0x28>
    CST816S_read_touch();
 80003f4:	f7ff ff5c 	bl	80002b0 <CST816S_read_touch>
    is_touch_detected = 0;
 80003f8:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <CST816S_data_available+0x3c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	701a      	strb	r2, [r3, #0]
    data_flag = 1;
 80003fe:	2301      	movs	r3, #1
 8000400:	71fb      	strb	r3, [r7, #7]
 8000402:	e001      	b.n	8000408 <CST816S_data_available+0x2c>
  } else {
    data_flag = 0;
 8000404:	2300      	movs	r3, #0
 8000406:	71fb      	strb	r3, [r7, #7]
  }
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000408:	2017      	movs	r0, #23
 800040a:	f002 fa14 	bl	8002836 <HAL_NVIC_EnableIRQ>

  return data_flag;
 800040e:	79fb      	ldrb	r3, [r7, #7]
}
 8000410:	4618      	mov	r0, r3
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	2000008c 	.word	0x2000008c

0800041c <CST816S_gesture>:

/**
  * @brief  Maps gesture IDs from the CST816S touch sensor to corresponding string representations.
  * @retval Pointer to a constant string representing the gesture.
  */
const char* CST816S_gesture() {
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  switch (data.gestureID) {
 8000420:	4b1b      	ldr	r3, [pc, #108]	@ (8000490 <CST816S_gesture+0x74>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b0c      	cmp	r3, #12
 8000426:	d82d      	bhi.n	8000484 <CST816S_gesture+0x68>
 8000428:	a201      	add	r2, pc, #4	@ (adr r2, 8000430 <CST816S_gesture+0x14>)
 800042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042e:	bf00      	nop
 8000430:	08000465 	.word	0x08000465
 8000434:	08000475 	.word	0x08000475
 8000438:	08000471 	.word	0x08000471
 800043c:	0800046d 	.word	0x0800046d
 8000440:	08000469 	.word	0x08000469
 8000444:	08000479 	.word	0x08000479
 8000448:	08000485 	.word	0x08000485
 800044c:	08000485 	.word	0x08000485
 8000450:	08000485 	.word	0x08000485
 8000454:	08000485 	.word	0x08000485
 8000458:	08000485 	.word	0x08000485
 800045c:	0800047d 	.word	0x0800047d
 8000460:	08000481 	.word	0x08000481
  case NONE:
    return "NONE        ";
 8000464:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <CST816S_gesture+0x78>)
 8000466:	e00e      	b.n	8000486 <CST816S_gesture+0x6a>
  case SWIPE_DOWN:
    return "SWIPE DOWN  ";
 8000468:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <CST816S_gesture+0x7c>)
 800046a:	e00c      	b.n	8000486 <CST816S_gesture+0x6a>
  case SWIPE_UP:
    return "SWIPE UP    ";
 800046c:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <CST816S_gesture+0x80>)
 800046e:	e00a      	b.n	8000486 <CST816S_gesture+0x6a>
  case SWIPE_LEFT:
    return "SWIPE LEFT  ";
 8000470:	4b0b      	ldr	r3, [pc, #44]	@ (80004a0 <CST816S_gesture+0x84>)
 8000472:	e008      	b.n	8000486 <CST816S_gesture+0x6a>
  case SWIPE_RIGHT:
    return "SWIPE RIGHT ";
 8000474:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <CST816S_gesture+0x88>)
 8000476:	e006      	b.n	8000486 <CST816S_gesture+0x6a>
  case SINGLE_CLICK:
    return "SINGLE CLICK";
 8000478:	4b0b      	ldr	r3, [pc, #44]	@ (80004a8 <CST816S_gesture+0x8c>)
 800047a:	e004      	b.n	8000486 <CST816S_gesture+0x6a>
  case DOUBLE_CLICK:
    return "DOUBLE CLICK";
 800047c:	4b0b      	ldr	r3, [pc, #44]	@ (80004ac <CST816S_gesture+0x90>)
 800047e:	e002      	b.n	8000486 <CST816S_gesture+0x6a>
  case LONG_PRESS:
    return "LONG PRESS  ";
 8000480:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <CST816S_gesture+0x94>)
 8000482:	e000      	b.n	8000486 <CST816S_gesture+0x6a>
  default:
    return "UNKNOWN     ";
 8000484:	4b0b      	ldr	r3, [pc, #44]	@ (80004b4 <CST816S_gesture+0x98>)
  }
}
 8000486:	4618      	mov	r0, r3
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	20000090 	.word	0x20000090
 8000494:	08005b90 	.word	0x08005b90
 8000498:	08005ba0 	.word	0x08005ba0
 800049c:	08005bb0 	.word	0x08005bb0
 80004a0:	08005bc0 	.word	0x08005bc0
 80004a4:	08005bd0 	.word	0x08005bd0
 80004a8:	08005be0 	.word	0x08005be0
 80004ac:	08005bf0 	.word	0x08005bf0
 80004b0:	08005c00 	.word	0x08005c00
 80004b4:	08005c10 	.word	0x08005c10

080004b8 <gc9a01a_write_cmd>:
/**
  * @brief  Sends a command to the GC9A01A LCD display.
  * @param  cmd: The command byte to be sent to the display.
  * @retval None
  */
static void gc9a01a_write_cmd(uint8_t cmd) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
  GC9A01A_DC_CMD;
 80004c2:	2200      	movs	r2, #0
 80004c4:	2102      	movs	r1, #2
 80004c6:	4839      	ldr	r0, [pc, #228]	@ (80005ac <gc9a01a_write_cmd+0xf4>)
 80004c8:	f002 fb58 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT(cmd);
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	461a      	mov	r2, r3
 80004d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004de:	f002 fb4d 	bl	8002b7c <HAL_GPIO_WritePin>
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	105b      	asrs	r3, r3, #1
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	461a      	mov	r2, r3
 80004f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f8:	f002 fb40 	bl	8002b7c <HAL_GPIO_WritePin>
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	109b      	asrs	r3, r3, #2
 8000500:	b2db      	uxtb	r3, r3
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	b2db      	uxtb	r3, r3
 8000508:	461a      	mov	r2, r3
 800050a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800050e:	4827      	ldr	r0, [pc, #156]	@ (80005ac <gc9a01a_write_cmd+0xf4>)
 8000510:	f002 fb34 	bl	8002b7c <HAL_GPIO_WritePin>
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	10db      	asrs	r3, r3, #3
 8000518:	b2db      	uxtb	r3, r3
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	b2db      	uxtb	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000526:	4821      	ldr	r0, [pc, #132]	@ (80005ac <gc9a01a_write_cmd+0xf4>)
 8000528:	f002 fb28 	bl	8002b7c <HAL_GPIO_WritePin>
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	111b      	asrs	r3, r3, #4
 8000530:	b2db      	uxtb	r3, r3
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	b2db      	uxtb	r3, r3
 8000538:	461a      	mov	r2, r3
 800053a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800053e:	481b      	ldr	r0, [pc, #108]	@ (80005ac <gc9a01a_write_cmd+0xf4>)
 8000540:	f002 fb1c 	bl	8002b7c <HAL_GPIO_WritePin>
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	115b      	asrs	r3, r3, #5
 8000548:	b2db      	uxtb	r3, r3
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	b2db      	uxtb	r3, r3
 8000550:	461a      	mov	r2, r3
 8000552:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000556:	4815      	ldr	r0, [pc, #84]	@ (80005ac <gc9a01a_write_cmd+0xf4>)
 8000558:	f002 fb10 	bl	8002b7c <HAL_GPIO_WritePin>
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	119b      	asrs	r3, r3, #6
 8000560:	b2db      	uxtb	r3, r3
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	b2db      	uxtb	r3, r3
 8000568:	461a      	mov	r2, r3
 800056a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800056e:	480f      	ldr	r0, [pc, #60]	@ (80005ac <gc9a01a_write_cmd+0xf4>)
 8000570:	f002 fb04 	bl	8002b7c <HAL_GPIO_WritePin>
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	09db      	lsrs	r3, r3, #7
 8000578:	b2db      	uxtb	r3, r3
 800057a:	461a      	mov	r2, r3
 800057c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000580:	480a      	ldr	r0, [pc, #40]	@ (80005ac <gc9a01a_write_cmd+0xf4>)
 8000582:	f002 fafb 	bl	8002b7c <HAL_GPIO_WritePin>
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800058c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000590:	f002 faf4 	bl	8002b7c <HAL_GPIO_WritePin>
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800059a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059e:	f002 faed 	bl	8002b7c <HAL_GPIO_WritePin>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	48000400 	.word	0x48000400

080005b0 <gc9a01a_write_data>:
  * @brief  Sends a buffer of data to the GC9A01A LCD display.
  * @param  buff: Pointer to the buffer containing the data to be sent.
  * @param  buff_size: Size of the buffer.
  * @retval None
  */
static void gc9a01a_write_data(uint8_t* buff, uint32_t buff_size) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  GC9A01A_DC_DATA;
 80005ba:	2201      	movs	r2, #1
 80005bc:	2102      	movs	r1, #2
 80005be:	484b      	ldr	r0, [pc, #300]	@ (80006ec <gc9a01a_write_data+0x13c>)
 80005c0:	f002 fadc 	bl	8002b7c <HAL_GPIO_WritePin>

  for(uint32_t i = 0; i < buff_size; i++) {
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	e085      	b.n	80006d6 <gc9a01a_write_data+0x126>
    GC9A01A_WRITE_8BIT(buff[i]);
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e2:	f002 facb 	bl	8002b7c <HAL_GPIO_WritePin>
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	105b      	asrs	r3, r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000602:	f002 fabb 	bl	8002b7c <HAL_GPIO_WritePin>
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	109b      	asrs	r3, r3, #2
 8000610:	b2db      	uxtb	r3, r3
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	b2db      	uxtb	r3, r3
 8000618:	461a      	mov	r2, r3
 800061a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800061e:	4833      	ldr	r0, [pc, #204]	@ (80006ec <gc9a01a_write_data+0x13c>)
 8000620:	f002 faac 	bl	8002b7c <HAL_GPIO_WritePin>
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	10db      	asrs	r3, r3, #3
 800062e:	b2db      	uxtb	r3, r3
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	b2db      	uxtb	r3, r3
 8000636:	461a      	mov	r2, r3
 8000638:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063c:	482b      	ldr	r0, [pc, #172]	@ (80006ec <gc9a01a_write_data+0x13c>)
 800063e:	f002 fa9d 	bl	8002b7c <HAL_GPIO_WritePin>
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	111b      	asrs	r3, r3, #4
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	b2db      	uxtb	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800065a:	4824      	ldr	r0, [pc, #144]	@ (80006ec <gc9a01a_write_data+0x13c>)
 800065c:	f002 fa8e 	bl	8002b7c <HAL_GPIO_WritePin>
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	115b      	asrs	r3, r3, #5
 800066a:	b2db      	uxtb	r3, r3
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	461a      	mov	r2, r3
 8000674:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000678:	481c      	ldr	r0, [pc, #112]	@ (80006ec <gc9a01a_write_data+0x13c>)
 800067a:	f002 fa7f 	bl	8002b7c <HAL_GPIO_WritePin>
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	4413      	add	r3, r2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	119b      	asrs	r3, r3, #6
 8000688:	b2db      	uxtb	r3, r3
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000696:	4815      	ldr	r0, [pc, #84]	@ (80006ec <gc9a01a_write_data+0x13c>)
 8000698:	f002 fa70 	bl	8002b7c <HAL_GPIO_WritePin>
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4413      	add	r3, r2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	09db      	lsrs	r3, r3, #7
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	461a      	mov	r2, r3
 80006aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ae:	480f      	ldr	r0, [pc, #60]	@ (80006ec <gc9a01a_write_data+0x13c>)
 80006b0:	f002 fa64 	bl	8002b7c <HAL_GPIO_WritePin>
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006be:	f002 fa5d 	bl	8002b7c <HAL_GPIO_WritePin>
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006cc:	f002 fa56 	bl	8002b7c <HAL_GPIO_WritePin>
  for(uint32_t i = 0; i < buff_size; i++) {
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3301      	adds	r3, #1
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	429a      	cmp	r2, r3
 80006dc:	f4ff af75 	bcc.w	80005ca <gc9a01a_write_data+0x1a>
  }
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	48000400 	.word	0x48000400

080006f0 <gc9a01a_hw_reset>:
/**
  * @brief  Hardware reset for GC9A01A LCD
  * @param  None
  * @retval None
  */
static void gc9a01a_hw_reset() {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  GC9A01A_RST_HIGH  ;
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006fa:	480d      	ldr	r0, [pc, #52]	@ (8000730 <gc9a01a_hw_reset+0x40>)
 80006fc:	f002 fa3e 	bl	8002b7c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000700:	200a      	movs	r0, #10
 8000702:	f001 ff59 	bl	80025b8 <HAL_Delay>
  GC9A01A_RST_LOW;
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800070c:	4808      	ldr	r0, [pc, #32]	@ (8000730 <gc9a01a_hw_reset+0x40>)
 800070e:	f002 fa35 	bl	8002b7c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000712:	200a      	movs	r0, #10
 8000714:	f001 ff50 	bl	80025b8 <HAL_Delay>
  GC9A01A_RST_HIGH ;
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <gc9a01a_hw_reset+0x40>)
 8000720:	f002 fa2c 	bl	8002b7c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000724:	200a      	movs	r0, #10
 8000726:	f001 ff47 	bl	80025b8 <HAL_Delay>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	48000400 	.word	0x48000400

08000734 <gc9a01a_set_address_window>:
 * @param x0 start column address.
 * @param x1 end column address.
 * @param y0 start row address.
 * @param y1 end row address.
 */
void gc9a01a_set_address_window(uint16_t x0, uint16_t x1, uint16_t y0, uint16_t y1) {
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4604      	mov	r4, r0
 800073c:	4608      	mov	r0, r1
 800073e:	4611      	mov	r1, r2
 8000740:	461a      	mov	r2, r3
 8000742:	4623      	mov	r3, r4
 8000744:	80fb      	strh	r3, [r7, #6]
 8000746:	4603      	mov	r3, r0
 8000748:	80bb      	strh	r3, [r7, #4]
 800074a:	460b      	mov	r3, r1
 800074c:	807b      	strh	r3, [r7, #2]
 800074e:	4613      	mov	r3, r2
 8000750:	803b      	strh	r3, [r7, #0]
  // Send commands to set column address (x2 to x2)
  GC9A01A_DC_CMD;
 8000752:	2200      	movs	r2, #0
 8000754:	2102      	movs	r1, #2
 8000756:	48c5      	ldr	r0, [pc, #788]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 8000758:	f002 fa10 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT(GC9A01A_CASET); // Column address set command
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000766:	f002 fa09 	bl	8002b7c <HAL_GPIO_WritePin>
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000774:	f002 fa02 	bl	8002b7c <HAL_GPIO_WritePin>
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800077e:	48bb      	ldr	r0, [pc, #748]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 8000780:	f002 f9fc 	bl	8002b7c <HAL_GPIO_WritePin>
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800078a:	48b8      	ldr	r0, [pc, #736]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 800078c:	f002 f9f6 	bl	8002b7c <HAL_GPIO_WritePin>
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000796:	48b5      	ldr	r0, [pc, #724]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 8000798:	f002 f9f0 	bl	8002b7c <HAL_GPIO_WritePin>
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007a2:	48b2      	ldr	r0, [pc, #712]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 80007a4:	f002 f9ea 	bl	8002b7c <HAL_GPIO_WritePin>
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007ae:	48af      	ldr	r0, [pc, #700]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 80007b0:	f002 f9e4 	bl	8002b7c <HAL_GPIO_WritePin>
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ba:	48ac      	ldr	r0, [pc, #688]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 80007bc:	f002 f9de 	bl	8002b7c <HAL_GPIO_WritePin>
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ca:	f002 f9d7 	bl	8002b7c <HAL_GPIO_WritePin>
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d8:	f002 f9d0 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_DC_DATA;
 80007dc:	2201      	movs	r2, #1
 80007de:	2102      	movs	r1, #2
 80007e0:	48a2      	ldr	r0, [pc, #648]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 80007e2:	f002 f9cb 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT((uint8_t)(x0 >> 8));
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	461a      	mov	r2, r3
 80007f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007fe:	f002 f9bd 	bl	8002b7c <HAL_GPIO_WritePin>
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	0a1b      	lsrs	r3, r3, #8
 8000806:	b29b      	uxth	r3, r3
 8000808:	b2db      	uxtb	r3, r3
 800080a:	105b      	asrs	r3, r3, #1
 800080c:	b2db      	uxtb	r3, r3
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	461a      	mov	r2, r3
 8000816:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800081a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081e:	f002 f9ad 	bl	8002b7c <HAL_GPIO_WritePin>
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	b29b      	uxth	r3, r3
 8000828:	b2db      	uxtb	r3, r3
 800082a:	109b      	asrs	r3, r3, #2
 800082c:	b2db      	uxtb	r3, r3
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	b2db      	uxtb	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800083a:	488c      	ldr	r0, [pc, #560]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 800083c:	f002 f99e 	bl	8002b7c <HAL_GPIO_WritePin>
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b29b      	uxth	r3, r3
 8000846:	b2db      	uxtb	r3, r3
 8000848:	10db      	asrs	r3, r3, #3
 800084a:	b2db      	uxtb	r3, r3
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	461a      	mov	r2, r3
 8000854:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000858:	4884      	ldr	r0, [pc, #528]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 800085a:	f002 f98f 	bl	8002b7c <HAL_GPIO_WritePin>
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	b29b      	uxth	r3, r3
 8000864:	b2db      	uxtb	r3, r3
 8000866:	111b      	asrs	r3, r3, #4
 8000868:	b2db      	uxtb	r3, r3
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	b2db      	uxtb	r3, r3
 8000870:	461a      	mov	r2, r3
 8000872:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000876:	487d      	ldr	r0, [pc, #500]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 8000878:	f002 f980 	bl	8002b7c <HAL_GPIO_WritePin>
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	0a1b      	lsrs	r3, r3, #8
 8000880:	b29b      	uxth	r3, r3
 8000882:	b2db      	uxtb	r3, r3
 8000884:	115b      	asrs	r3, r3, #5
 8000886:	b2db      	uxtb	r3, r3
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	b2db      	uxtb	r3, r3
 800088e:	461a      	mov	r2, r3
 8000890:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000894:	4875      	ldr	r0, [pc, #468]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 8000896:	f002 f971 	bl	8002b7c <HAL_GPIO_WritePin>
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	b29b      	uxth	r3, r3
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	119b      	asrs	r3, r3, #6
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008b2:	486e      	ldr	r0, [pc, #440]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 80008b4:	f002 f962 	bl	8002b7c <HAL_GPIO_WritePin>
 80008b8:	88fb      	ldrh	r3, [r7, #6]
 80008ba:	0a1b      	lsrs	r3, r3, #8
 80008bc:	b29b      	uxth	r3, r3
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	09db      	lsrs	r3, r3, #7
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	461a      	mov	r2, r3
 80008c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008ca:	4868      	ldr	r0, [pc, #416]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 80008cc:	f002 f956 	bl	8002b7c <HAL_GPIO_WritePin>
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008da:	f002 f94f 	bl	8002b7c <HAL_GPIO_WritePin>
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e8:	f002 f948 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT((uint8_t)x0);
 80008ec:	88fb      	ldrh	r3, [r7, #6]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	461a      	mov	r2, r3
 80008f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000900:	f002 f93c 	bl	8002b7c <HAL_GPIO_WritePin>
 8000904:	88fb      	ldrh	r3, [r7, #6]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	105b      	asrs	r3, r3, #1
 800090a:	b2db      	uxtb	r3, r3
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	b2db      	uxtb	r3, r3
 8000912:	461a      	mov	r2, r3
 8000914:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091c:	f002 f92e 	bl	8002b7c <HAL_GPIO_WritePin>
 8000920:	88fb      	ldrh	r3, [r7, #6]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	109b      	asrs	r3, r3, #2
 8000926:	b2db      	uxtb	r3, r3
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	b2db      	uxtb	r3, r3
 800092e:	461a      	mov	r2, r3
 8000930:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000934:	484d      	ldr	r0, [pc, #308]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 8000936:	f002 f921 	bl	8002b7c <HAL_GPIO_WritePin>
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	b2db      	uxtb	r3, r3
 800093e:	10db      	asrs	r3, r3, #3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	b2db      	uxtb	r3, r3
 8000948:	461a      	mov	r2, r3
 800094a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800094e:	4847      	ldr	r0, [pc, #284]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 8000950:	f002 f914 	bl	8002b7c <HAL_GPIO_WritePin>
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	111b      	asrs	r3, r3, #4
 800095a:	b2db      	uxtb	r3, r3
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000968:	4840      	ldr	r0, [pc, #256]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 800096a:	f002 f907 	bl	8002b7c <HAL_GPIO_WritePin>
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	b2db      	uxtb	r3, r3
 8000972:	115b      	asrs	r3, r3, #5
 8000974:	b2db      	uxtb	r3, r3
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	b2db      	uxtb	r3, r3
 800097c:	461a      	mov	r2, r3
 800097e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000982:	483a      	ldr	r0, [pc, #232]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 8000984:	f002 f8fa 	bl	8002b7c <HAL_GPIO_WritePin>
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	119b      	asrs	r3, r3, #6
 800098e:	b2db      	uxtb	r3, r3
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	b2db      	uxtb	r3, r3
 8000996:	461a      	mov	r2, r3
 8000998:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800099c:	4833      	ldr	r0, [pc, #204]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 800099e:	f002 f8ed 	bl	8002b7c <HAL_GPIO_WritePin>
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	09db      	lsrs	r3, r3, #7
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	461a      	mov	r2, r3
 80009ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009b0:	482e      	ldr	r0, [pc, #184]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 80009b2:	f002 f8e3 	bl	8002b7c <HAL_GPIO_WritePin>
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c0:	f002 f8dc 	bl	8002b7c <HAL_GPIO_WritePin>
 80009c4:	2201      	movs	r2, #1
 80009c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ce:	f002 f8d5 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT((uint8_t)(x1 >> 8));
 80009d2:	88bb      	ldrh	r3, [r7, #4]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	461a      	mov	r2, r3
 80009e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ea:	f002 f8c7 	bl	8002b7c <HAL_GPIO_WritePin>
 80009ee:	88bb      	ldrh	r3, [r7, #4]
 80009f0:	0a1b      	lsrs	r3, r3, #8
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	105b      	asrs	r3, r3, #1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	461a      	mov	r2, r3
 8000a02:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a0a:	f002 f8b7 	bl	8002b7c <HAL_GPIO_WritePin>
 8000a0e:	88bb      	ldrh	r3, [r7, #4]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	109b      	asrs	r3, r3, #2
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	461a      	mov	r2, r3
 8000a22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a26:	4811      	ldr	r0, [pc, #68]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 8000a28:	f002 f8a8 	bl	8002b7c <HAL_GPIO_WritePin>
 8000a2c:	88bb      	ldrh	r3, [r7, #4]
 8000a2e:	0a1b      	lsrs	r3, r3, #8
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	10db      	asrs	r3, r3, #3
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	461a      	mov	r2, r3
 8000a40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a44:	4809      	ldr	r0, [pc, #36]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 8000a46:	f002 f899 	bl	8002b7c <HAL_GPIO_WritePin>
 8000a4a:	88bb      	ldrh	r3, [r7, #4]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	111b      	asrs	r3, r3, #4
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a62:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <gc9a01a_set_address_window+0x338>)
 8000a64:	f002 f88a 	bl	8002b7c <HAL_GPIO_WritePin>
 8000a68:	e002      	b.n	8000a70 <gc9a01a_set_address_window+0x33c>
 8000a6a:	bf00      	nop
 8000a6c:	48000400 	.word	0x48000400
 8000a70:	88bb      	ldrh	r3, [r7, #4]
 8000a72:	0a1b      	lsrs	r3, r3, #8
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	115b      	asrs	r3, r3, #5
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	461a      	mov	r2, r3
 8000a84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a88:	48c6      	ldr	r0, [pc, #792]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000a8a:	f002 f877 	bl	8002b7c <HAL_GPIO_WritePin>
 8000a8e:	88bb      	ldrh	r3, [r7, #4]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	119b      	asrs	r3, r3, #6
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000aa6:	48bf      	ldr	r0, [pc, #764]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000aa8:	f002 f868 	bl	8002b7c <HAL_GPIO_WritePin>
 8000aac:	88bb      	ldrh	r3, [r7, #4]
 8000aae:	0a1b      	lsrs	r3, r3, #8
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	09db      	lsrs	r3, r3, #7
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000abe:	48b9      	ldr	r0, [pc, #740]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000ac0:	f002 f85c 	bl	8002b7c <HAL_GPIO_WritePin>
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ace:	f002 f855 	bl	8002b7c <HAL_GPIO_WritePin>
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000adc:	f002 f84e 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT((uint8_t)x1);
 8000ae0:	88bb      	ldrh	r3, [r7, #4]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	461a      	mov	r2, r3
 8000aec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af4:	f002 f842 	bl	8002b7c <HAL_GPIO_WritePin>
 8000af8:	88bb      	ldrh	r3, [r7, #4]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	105b      	asrs	r3, r3, #1
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	461a      	mov	r2, r3
 8000b08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b10:	f002 f834 	bl	8002b7c <HAL_GPIO_WritePin>
 8000b14:	88bb      	ldrh	r3, [r7, #4]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	109b      	asrs	r3, r3, #2
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b28:	489e      	ldr	r0, [pc, #632]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000b2a:	f002 f827 	bl	8002b7c <HAL_GPIO_WritePin>
 8000b2e:	88bb      	ldrh	r3, [r7, #4]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	10db      	asrs	r3, r3, #3
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b42:	4898      	ldr	r0, [pc, #608]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000b44:	f002 f81a 	bl	8002b7c <HAL_GPIO_WritePin>
 8000b48:	88bb      	ldrh	r3, [r7, #4]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	111b      	asrs	r3, r3, #4
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b5c:	4891      	ldr	r0, [pc, #580]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000b5e:	f002 f80d 	bl	8002b7c <HAL_GPIO_WritePin>
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	115b      	asrs	r3, r3, #5
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	461a      	mov	r2, r3
 8000b72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b76:	488b      	ldr	r0, [pc, #556]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000b78:	f002 f800 	bl	8002b7c <HAL_GPIO_WritePin>
 8000b7c:	88bb      	ldrh	r3, [r7, #4]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	119b      	asrs	r3, r3, #6
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b90:	4884      	ldr	r0, [pc, #528]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000b92:	f001 fff3 	bl	8002b7c <HAL_GPIO_WritePin>
 8000b96:	88bb      	ldrh	r3, [r7, #4]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	09db      	lsrs	r3, r3, #7
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba4:	487f      	ldr	r0, [pc, #508]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000ba6:	f001 ffe9 	bl	8002b7c <HAL_GPIO_WritePin>
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb4:	f001 ffe2 	bl	8002b7c <HAL_GPIO_WritePin>
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc2:	f001 ffdb 	bl	8002b7c <HAL_GPIO_WritePin>

  // Send commands to set row address (y2 to y2)
  GC9A01A_DC_CMD;
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2102      	movs	r1, #2
 8000bca:	4876      	ldr	r0, [pc, #472]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000bcc:	f001 ffd6 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT(GC9A01A_RASET); // Row address set command
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bda:	f001 ffcf 	bl	8002b7c <HAL_GPIO_WritePin>
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be8:	f001 ffc8 	bl	8002b7c <HAL_GPIO_WritePin>
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bf2:	486c      	ldr	r0, [pc, #432]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000bf4:	f001 ffc2 	bl	8002b7c <HAL_GPIO_WritePin>
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bfe:	4869      	ldr	r0, [pc, #420]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000c00:	f001 ffbc 	bl	8002b7c <HAL_GPIO_WritePin>
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c0a:	4866      	ldr	r0, [pc, #408]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000c0c:	f001 ffb6 	bl	8002b7c <HAL_GPIO_WritePin>
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c16:	4863      	ldr	r0, [pc, #396]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000c18:	f001 ffb0 	bl	8002b7c <HAL_GPIO_WritePin>
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c22:	4860      	ldr	r0, [pc, #384]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000c24:	f001 ffaa 	bl	8002b7c <HAL_GPIO_WritePin>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c2e:	485d      	ldr	r0, [pc, #372]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000c30:	f001 ffa4 	bl	8002b7c <HAL_GPIO_WritePin>
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3e:	f001 ff9d 	bl	8002b7c <HAL_GPIO_WritePin>
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4c:	f001 ff96 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_DC_DATA;
 8000c50:	2201      	movs	r2, #1
 8000c52:	2102      	movs	r1, #2
 8000c54:	4853      	ldr	r0, [pc, #332]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000c56:	f001 ff91 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT((uint8_t)(y0 >> 8));
 8000c5a:	887b      	ldrh	r3, [r7, #2]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c72:	f001 ff83 	bl	8002b7c <HAL_GPIO_WritePin>
 8000c76:	887b      	ldrh	r3, [r7, #2]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	105b      	asrs	r3, r3, #1
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	461a      	mov	r2, r3
 8000c8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c92:	f001 ff73 	bl	8002b7c <HAL_GPIO_WritePin>
 8000c96:	887b      	ldrh	r3, [r7, #2]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	109b      	asrs	r3, r3, #2
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cae:	483d      	ldr	r0, [pc, #244]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000cb0:	f001 ff64 	bl	8002b7c <HAL_GPIO_WritePin>
 8000cb4:	887b      	ldrh	r3, [r7, #2]
 8000cb6:	0a1b      	lsrs	r3, r3, #8
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	10db      	asrs	r3, r3, #3
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ccc:	4835      	ldr	r0, [pc, #212]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000cce:	f001 ff55 	bl	8002b7c <HAL_GPIO_WritePin>
 8000cd2:	887b      	ldrh	r3, [r7, #2]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	111b      	asrs	r3, r3, #4
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cea:	482e      	ldr	r0, [pc, #184]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000cec:	f001 ff46 	bl	8002b7c <HAL_GPIO_WritePin>
 8000cf0:	887b      	ldrh	r3, [r7, #2]
 8000cf2:	0a1b      	lsrs	r3, r3, #8
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	115b      	asrs	r3, r3, #5
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	461a      	mov	r2, r3
 8000d04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d08:	4826      	ldr	r0, [pc, #152]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000d0a:	f001 ff37 	bl	8002b7c <HAL_GPIO_WritePin>
 8000d0e:	887b      	ldrh	r3, [r7, #2]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	119b      	asrs	r3, r3, #6
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	461a      	mov	r2, r3
 8000d22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d26:	481f      	ldr	r0, [pc, #124]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000d28:	f001 ff28 	bl	8002b7c <HAL_GPIO_WritePin>
 8000d2c:	887b      	ldrh	r3, [r7, #2]
 8000d2e:	0a1b      	lsrs	r3, r3, #8
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	09db      	lsrs	r3, r3, #7
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d3e:	4819      	ldr	r0, [pc, #100]	@ (8000da4 <gc9a01a_set_address_window+0x670>)
 8000d40:	f001 ff1c 	bl	8002b7c <HAL_GPIO_WritePin>
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4e:	f001 ff15 	bl	8002b7c <HAL_GPIO_WritePin>
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5c:	f001 ff0e 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT((uint8_t)y0);
 8000d60:	887b      	ldrh	r3, [r7, #2]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d74:	f001 ff02 	bl	8002b7c <HAL_GPIO_WritePin>
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	105b      	asrs	r3, r3, #1
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	461a      	mov	r2, r3
 8000d88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d90:	f001 fef4 	bl	8002b7c <HAL_GPIO_WritePin>
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	109b      	asrs	r3, r3, #2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	e001      	b.n	8000da8 <gc9a01a_set_address_window+0x674>
 8000da4:	48000400 	.word	0x48000400
 8000da8:	461a      	mov	r2, r3
 8000daa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dae:	48c6      	ldr	r0, [pc, #792]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8000db0:	f001 fee4 	bl	8002b7c <HAL_GPIO_WritePin>
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	10db      	asrs	r3, r3, #3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dc8:	48bf      	ldr	r0, [pc, #764]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8000dca:	f001 fed7 	bl	8002b7c <HAL_GPIO_WritePin>
 8000dce:	887b      	ldrh	r3, [r7, #2]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	111b      	asrs	r3, r3, #4
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000de2:	48b9      	ldr	r0, [pc, #740]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8000de4:	f001 feca 	bl	8002b7c <HAL_GPIO_WritePin>
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	115b      	asrs	r3, r3, #5
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	461a      	mov	r2, r3
 8000df8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dfc:	48b2      	ldr	r0, [pc, #712]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8000dfe:	f001 febd 	bl	8002b7c <HAL_GPIO_WritePin>
 8000e02:	887b      	ldrh	r3, [r7, #2]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	119b      	asrs	r3, r3, #6
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	461a      	mov	r2, r3
 8000e12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e16:	48ac      	ldr	r0, [pc, #688]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8000e18:	f001 feb0 	bl	8002b7c <HAL_GPIO_WritePin>
 8000e1c:	887b      	ldrh	r3, [r7, #2]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	09db      	lsrs	r3, r3, #7
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	461a      	mov	r2, r3
 8000e26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e2a:	48a7      	ldr	r0, [pc, #668]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8000e2c:	f001 fea6 	bl	8002b7c <HAL_GPIO_WritePin>
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3a:	f001 fe9f 	bl	8002b7c <HAL_GPIO_WritePin>
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e48:	f001 fe98 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT((uint8_t)(y1 >> 8));
 8000e4c:	883b      	ldrh	r3, [r7, #0]
 8000e4e:	0a1b      	lsrs	r3, r3, #8
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e64:	f001 fe8a 	bl	8002b7c <HAL_GPIO_WritePin>
 8000e68:	883b      	ldrh	r3, [r7, #0]
 8000e6a:	0a1b      	lsrs	r3, r3, #8
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	105b      	asrs	r3, r3, #1
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e84:	f001 fe7a 	bl	8002b7c <HAL_GPIO_WritePin>
 8000e88:	883b      	ldrh	r3, [r7, #0]
 8000e8a:	0a1b      	lsrs	r3, r3, #8
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	109b      	asrs	r3, r3, #2
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ea0:	4889      	ldr	r0, [pc, #548]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8000ea2:	f001 fe6b 	bl	8002b7c <HAL_GPIO_WritePin>
 8000ea6:	883b      	ldrh	r3, [r7, #0]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	10db      	asrs	r3, r3, #3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	461a      	mov	r2, r3
 8000eba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ebe:	4882      	ldr	r0, [pc, #520]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8000ec0:	f001 fe5c 	bl	8002b7c <HAL_GPIO_WritePin>
 8000ec4:	883b      	ldrh	r3, [r7, #0]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	111b      	asrs	r3, r3, #4
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000edc:	487a      	ldr	r0, [pc, #488]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8000ede:	f001 fe4d 	bl	8002b7c <HAL_GPIO_WritePin>
 8000ee2:	883b      	ldrh	r3, [r7, #0]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	115b      	asrs	r3, r3, #5
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000efa:	4873      	ldr	r0, [pc, #460]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8000efc:	f001 fe3e 	bl	8002b7c <HAL_GPIO_WritePin>
 8000f00:	883b      	ldrh	r3, [r7, #0]
 8000f02:	0a1b      	lsrs	r3, r3, #8
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	119b      	asrs	r3, r3, #6
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	461a      	mov	r2, r3
 8000f14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f18:	486b      	ldr	r0, [pc, #428]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8000f1a:	f001 fe2f 	bl	8002b7c <HAL_GPIO_WritePin>
 8000f1e:	883b      	ldrh	r3, [r7, #0]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	09db      	lsrs	r3, r3, #7
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f30:	4865      	ldr	r0, [pc, #404]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8000f32:	f001 fe23 	bl	8002b7c <HAL_GPIO_WritePin>
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f40:	f001 fe1c 	bl	8002b7c <HAL_GPIO_WritePin>
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4e:	f001 fe15 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT((uint8_t)y1);
 8000f52:	883b      	ldrh	r3, [r7, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f66:	f001 fe09 	bl	8002b7c <HAL_GPIO_WritePin>
 8000f6a:	883b      	ldrh	r3, [r7, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	105b      	asrs	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f82:	f001 fdfb 	bl	8002b7c <HAL_GPIO_WritePin>
 8000f86:	883b      	ldrh	r3, [r7, #0]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	109b      	asrs	r3, r3, #2
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	461a      	mov	r2, r3
 8000f96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f9a:	484b      	ldr	r0, [pc, #300]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8000f9c:	f001 fdee 	bl	8002b7c <HAL_GPIO_WritePin>
 8000fa0:	883b      	ldrh	r3, [r7, #0]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	10db      	asrs	r3, r3, #3
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fb4:	4844      	ldr	r0, [pc, #272]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8000fb6:	f001 fde1 	bl	8002b7c <HAL_GPIO_WritePin>
 8000fba:	883b      	ldrh	r3, [r7, #0]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	111b      	asrs	r3, r3, #4
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fce:	483e      	ldr	r0, [pc, #248]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8000fd0:	f001 fdd4 	bl	8002b7c <HAL_GPIO_WritePin>
 8000fd4:	883b      	ldrh	r3, [r7, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	115b      	asrs	r3, r3, #5
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fe8:	4837      	ldr	r0, [pc, #220]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8000fea:	f001 fdc7 	bl	8002b7c <HAL_GPIO_WritePin>
 8000fee:	883b      	ldrh	r3, [r7, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	119b      	asrs	r3, r3, #6
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001002:	4831      	ldr	r0, [pc, #196]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8001004:	f001 fdba 	bl	8002b7c <HAL_GPIO_WritePin>
 8001008:	883b      	ldrh	r3, [r7, #0]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	09db      	lsrs	r3, r3, #7
 800100e:	b2db      	uxtb	r3, r3
 8001010:	461a      	mov	r2, r3
 8001012:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001016:	482c      	ldr	r0, [pc, #176]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8001018:	f001 fdb0 	bl	8002b7c <HAL_GPIO_WritePin>
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001022:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001026:	f001 fda9 	bl	8002b7c <HAL_GPIO_WritePin>
 800102a:	2201      	movs	r2, #1
 800102c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001030:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001034:	f001 fda2 	bl	8002b7c <HAL_GPIO_WritePin>

  // Send command to write to RAM
  GC9A01A_DC_CMD;
 8001038:	2200      	movs	r2, #0
 800103a:	2102      	movs	r1, #2
 800103c:	4822      	ldr	r0, [pc, #136]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 800103e:	f001 fd9d 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT(GC9A01A_RAMWR); // Write to RAM command
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104c:	f001 fd96 	bl	8002b7c <HAL_GPIO_WritePin>
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001056:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105a:	f001 fd8f 	bl	8002b7c <HAL_GPIO_WritePin>
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001064:	4818      	ldr	r0, [pc, #96]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8001066:	f001 fd89 	bl	8002b7c <HAL_GPIO_WritePin>
 800106a:	2201      	movs	r2, #1
 800106c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001070:	4815      	ldr	r0, [pc, #84]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8001072:	f001 fd83 	bl	8002b7c <HAL_GPIO_WritePin>
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800107c:	4812      	ldr	r0, [pc, #72]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 800107e:	f001 fd7d 	bl	8002b7c <HAL_GPIO_WritePin>
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001088:	480f      	ldr	r0, [pc, #60]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 800108a:	f001 fd77 	bl	8002b7c <HAL_GPIO_WritePin>
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 8001096:	f001 fd71 	bl	8002b7c <HAL_GPIO_WritePin>
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010a0:	4809      	ldr	r0, [pc, #36]	@ (80010c8 <gc9a01a_set_address_window+0x994>)
 80010a2:	f001 fd6b 	bl	8002b7c <HAL_GPIO_WritePin>
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b0:	f001 fd64 	bl	8002b7c <HAL_GPIO_WritePin>
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010be:	f001 fd5d 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_DC_DATA;
 80010c2:	2201      	movs	r2, #1
 80010c4:	2102      	movs	r1, #2
 80010c6:	e001      	b.n	80010cc <gc9a01a_set_address_window+0x998>
 80010c8:	48000400 	.word	0x48000400
 80010cc:	4803      	ldr	r0, [pc, #12]	@ (80010dc <gc9a01a_set_address_window+0x9a8>)
 80010ce:	f001 fd55 	bl	8002b7c <HAL_GPIO_WritePin>
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd90      	pop	{r4, r7, pc}
 80010da:	bf00      	nop
 80010dc:	48000400 	.word	0x48000400

080010e0 <gc9a01a_init>:
/**
  * @brief  Initialize the GC9A01A LCD
  * @param  None
  * @retval None
  */
static void gc9a01a_init() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
  uint8_t params[15];
  GC9A01A_CS_LOW;
 80010e6:	2200      	movs	r2, #0
 80010e8:	2108      	movs	r1, #8
 80010ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ee:	f001 fd45 	bl	8002b7c <HAL_GPIO_WritePin>

  gc9a01a_write_cmd(GC9A01A_INREGEN1);      ///< Inter register enable 1
 80010f2:	20fe      	movs	r0, #254	@ 0xfe
 80010f4:	f7ff f9e0 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_cmd(GC9A01A_INREGEN2);      ///< Inter register enable 2
 80010f8:	20ef      	movs	r0, #239	@ 0xef
 80010fa:	f7ff f9dd 	bl	80004b8 <gc9a01a_write_cmd>

  params[0] = 0x14;
 80010fe:	2314      	movs	r3, #20
 8001100:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xEB);
 8001102:	20eb      	movs	r0, #235	@ 0xeb
 8001104:	f7ff f9d8 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001108:	463b      	mov	r3, r7
 800110a:	2101      	movs	r1, #1
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa4f 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x60;
 8001112:	2360      	movs	r3, #96	@ 0x60
 8001114:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x84);
 8001116:	2084      	movs	r0, #132	@ 0x84
 8001118:	f7ff f9ce 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800111c:	463b      	mov	r3, r7
 800111e:	2101      	movs	r1, #1
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fa45 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0xFF;
 8001126:	23ff      	movs	r3, #255	@ 0xff
 8001128:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x85);
 800112a:	2085      	movs	r0, #133	@ 0x85
 800112c:	f7ff f9c4 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001130:	463b      	mov	r3, r7
 8001132:	2101      	movs	r1, #1
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fa3b 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0xFF;
 800113a:	23ff      	movs	r3, #255	@ 0xff
 800113c:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x86);
 800113e:	2086      	movs	r0, #134	@ 0x86
 8001140:	f7ff f9ba 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001144:	463b      	mov	r3, r7
 8001146:	2101      	movs	r1, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fa31 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0xFF;
 800114e:	23ff      	movs	r3, #255	@ 0xff
 8001150:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x87);
 8001152:	2087      	movs	r0, #135	@ 0x87
 8001154:	f7ff f9b0 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001158:	463b      	mov	r3, r7
 800115a:	2101      	movs	r1, #1
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fa27 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0xFF;
 8001162:	23ff      	movs	r3, #255	@ 0xff
 8001164:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8E);
 8001166:	208e      	movs	r0, #142	@ 0x8e
 8001168:	f7ff f9a6 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800116c:	463b      	mov	r3, r7
 800116e:	2101      	movs	r1, #1
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fa1d 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0xFF;
 8001176:	23ff      	movs	r3, #255	@ 0xff
 8001178:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8F);
 800117a:	208f      	movs	r0, #143	@ 0x8f
 800117c:	f7ff f99c 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001180:	463b      	mov	r3, r7
 8001182:	2101      	movs	r1, #1
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fa13 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x0A;
 800118a:	230a      	movs	r3, #10
 800118c:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x88);
 800118e:	2088      	movs	r0, #136	@ 0x88
 8001190:	f7ff f992 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001194:	463b      	mov	r3, r7
 8001196:	2101      	movs	r1, #1
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fa09 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x21;
 800119e:	2321      	movs	r3, #33	@ 0x21
 80011a0:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x89);
 80011a2:	2089      	movs	r0, #137	@ 0x89
 80011a4:	f7ff f988 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80011a8:	463b      	mov	r3, r7
 80011aa:	2101      	movs	r1, #1
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9ff 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x00;
 80011b2:	2300      	movs	r3, #0
 80011b4:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8A);
 80011b6:	208a      	movs	r0, #138	@ 0x8a
 80011b8:	f7ff f97e 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80011bc:	463b      	mov	r3, r7
 80011be:	2101      	movs	r1, #1
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9f5 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x80;
 80011c6:	2380      	movs	r3, #128	@ 0x80
 80011c8:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8B);
 80011ca:	208b      	movs	r0, #139	@ 0x8b
 80011cc:	f7ff f974 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80011d0:	463b      	mov	r3, r7
 80011d2:	2101      	movs	r1, #1
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f9eb 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x01;
 80011da:	2301      	movs	r3, #1
 80011dc:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8C);
 80011de:	208c      	movs	r0, #140	@ 0x8c
 80011e0:	f7ff f96a 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80011e4:	463b      	mov	r3, r7
 80011e6:	2101      	movs	r1, #1
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f9e1 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x03;
 80011ee:	2303      	movs	r3, #3
 80011f0:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8D);
 80011f2:	208d      	movs	r0, #141	@ 0x8d
 80011f4:	f7ff f960 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80011f8:	463b      	mov	r3, r7
 80011fa:	2101      	movs	r1, #1
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9d7 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x08;
 8001202:	2308      	movs	r3, #8
 8001204:	703b      	strb	r3, [r7, #0]
  params[1] = 0x09;
 8001206:	2309      	movs	r3, #9
 8001208:	707b      	strb	r3, [r7, #1]
  params[2] = 0x14;
 800120a:	2314      	movs	r3, #20
 800120c:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x08;
 800120e:	2308      	movs	r3, #8
 8001210:	70fb      	strb	r3, [r7, #3]
  gc9a01a_write_cmd(0xB5);
 8001212:	20b5      	movs	r0, #181	@ 0xb5
 8001214:	f7ff f950 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 4);
 8001218:	463b      	mov	r3, r7
 800121a:	2104      	movs	r1, #4
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f9c7 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x00;
 8001222:	2300      	movs	r3, #0
 8001224:	703b      	strb	r3, [r7, #0]
  params[1] = 0x00;
 8001226:	2300      	movs	r3, #0
 8001228:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(GC9A01A_DISP_CTRL);     ///<Display Function Control
 800122a:	20b6      	movs	r0, #182	@ 0xb6
 800122c:	f7ff f944 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 8001230:	463b      	mov	r3, r7
 8001232:	2102      	movs	r1, #2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f9bb 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x48;
 800123a:	2348      	movs	r3, #72	@ 0x48
 800123c:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A_MADCTL);        ///< Memory Access Control
 800123e:	2036      	movs	r0, #54	@ 0x36
 8001240:	f7ff f93a 	bl	80004b8 <gc9a01a_write_cmd>

  gc9a01a_write_data(params, 1);
 8001244:	463b      	mov	r3, r7
 8001246:	2101      	movs	r1, #1
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f9b1 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x05;
 800124e:	2305      	movs	r3, #5
 8001250:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A_COLMOD);        ///< Pixel Format Set
 8001252:	203a      	movs	r0, #58	@ 0x3a
 8001254:	f7ff f930 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001258:	463b      	mov	r3, r7
 800125a:	2101      	movs	r1, #1
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f9a7 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x08;
 8001262:	2308      	movs	r3, #8
 8001264:	703b      	strb	r3, [r7, #0]
  params[1] = 0x08;
 8001266:	2308      	movs	r3, #8
 8001268:	707b      	strb	r3, [r7, #1]
  params[2] = 0x08;
 800126a:	2308      	movs	r3, #8
 800126c:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x08;
 800126e:	2308      	movs	r3, #8
 8001270:	70fb      	strb	r3, [r7, #3]
  gc9a01a_write_cmd(0x90);
 8001272:	2090      	movs	r0, #144	@ 0x90
 8001274:	f7ff f920 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 4);
 8001278:	463b      	mov	r3, r7
 800127a:	2104      	movs	r1, #4
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f997 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x06;
 8001282:	2306      	movs	r3, #6
 8001284:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xBD);
 8001286:	20bd      	movs	r0, #189	@ 0xbd
 8001288:	f7ff f916 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800128c:	463b      	mov	r3, r7
 800128e:	2101      	movs	r1, #1
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f98d 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x01;
 8001296:	2301      	movs	r3, #1
 8001298:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xBA);
 800129a:	20ba      	movs	r0, #186	@ 0xba
 800129c:	f7ff f90c 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80012a0:	463b      	mov	r3, r7
 80012a2:	2101      	movs	r1, #1
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f983 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x00;
 80012aa:	2300      	movs	r3, #0
 80012ac:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xBC);
 80012ae:	20bc      	movs	r0, #188	@ 0xbc
 80012b0:	f7ff f902 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80012b4:	463b      	mov	r3, r7
 80012b6:	2101      	movs	r1, #1
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f979 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x60;
 80012be:	2360      	movs	r3, #96	@ 0x60
 80012c0:	703b      	strb	r3, [r7, #0]
  params[1] = 0x01;
 80012c2:	2301      	movs	r3, #1
 80012c4:	707b      	strb	r3, [r7, #1]
  params[2] = 0x04;
 80012c6:	2304      	movs	r3, #4
 80012c8:	70bb      	strb	r3, [r7, #2]
  gc9a01a_write_cmd(0xFF);
 80012ca:	20ff      	movs	r0, #255	@ 0xff
 80012cc:	f7ff f8f4 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 3);
 80012d0:	463b      	mov	r3, r7
 80012d2:	2103      	movs	r1, #3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f96b 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x14;
 80012da:	2314      	movs	r3, #20
 80012dc:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A1_POWER2);       ///< Power Control 2
 80012de:	20c3      	movs	r0, #195	@ 0xc3
 80012e0:	f7ff f8ea 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80012e4:	463b      	mov	r3, r7
 80012e6:	2101      	movs	r1, #1
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f961 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x14;
 80012ee:	2314      	movs	r3, #20
 80012f0:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A1_POWER3);       ///< Power Control 3
 80012f2:	20c4      	movs	r0, #196	@ 0xc4
 80012f4:	f7ff f8e0 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80012f8:	463b      	mov	r3, r7
 80012fa:	2101      	movs	r1, #1
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f957 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x25;
 8001302:	2325      	movs	r3, #37	@ 0x25
 8001304:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A1_POWER4);       ///< Power Control 4
 8001306:	20c9      	movs	r0, #201	@ 0xc9
 8001308:	f7ff f8d6 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800130c:	463b      	mov	r3, r7
 800130e:	2101      	movs	r1, #1
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f94d 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x11;
 8001316:	2311      	movs	r3, #17
 8001318:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xBE);
 800131a:	20be      	movs	r0, #190	@ 0xbe
 800131c:	f7ff f8cc 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001320:	463b      	mov	r3, r7
 8001322:	2101      	movs	r1, #1
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f943 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x10;
 800132a:	2310      	movs	r3, #16
 800132c:	703b      	strb	r3, [r7, #0]
  params[1] = 0x0e;
 800132e:	230e      	movs	r3, #14
 8001330:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(0xE1);
 8001332:	20e1      	movs	r0, #225	@ 0xe1
 8001334:	f7ff f8c0 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 8001338:	463b      	mov	r3, r7
 800133a:	2102      	movs	r1, #2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f937 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x21;
 8001342:	2321      	movs	r3, #33	@ 0x21
 8001344:	703b      	strb	r3, [r7, #0]
  params[1] = 0x0c;
 8001346:	230c      	movs	r3, #12
 8001348:	707b      	strb	r3, [r7, #1]
  params[2] = 0x02;
 800134a:	2302      	movs	r3, #2
 800134c:	70bb      	strb	r3, [r7, #2]
  gc9a01a_write_cmd(0xDF);
 800134e:	20df      	movs	r0, #223	@ 0xdf
 8001350:	f7ff f8b2 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 3);
 8001354:	463b      	mov	r3, r7
 8001356:	2103      	movs	r1, #3
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f929 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x45;
 800135e:	2345      	movs	r3, #69	@ 0x45
 8001360:	703b      	strb	r3, [r7, #0]
  params[1] = 0x09;
 8001362:	2309      	movs	r3, #9
 8001364:	707b      	strb	r3, [r7, #1]
  params[2] = 0x08;
 8001366:	2308      	movs	r3, #8
 8001368:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x08;
 800136a:	2308      	movs	r3, #8
 800136c:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x26;
 800136e:	2326      	movs	r3, #38	@ 0x26
 8001370:	713b      	strb	r3, [r7, #4]
  params[5] = 0x2A;
 8001372:	232a      	movs	r3, #42	@ 0x2a
 8001374:	717b      	strb	r3, [r7, #5]
  gc9a01a_write_cmd(GC9A01A_GAMMA1);        ///< Set gamma 1
 8001376:	20f0      	movs	r0, #240	@ 0xf0
 8001378:	f7ff f89e 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 6);
 800137c:	463b      	mov	r3, r7
 800137e:	2106      	movs	r1, #6
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f915 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x43;
 8001386:	2343      	movs	r3, #67	@ 0x43
 8001388:	703b      	strb	r3, [r7, #0]
  params[1] = 0x70;
 800138a:	2370      	movs	r3, #112	@ 0x70
 800138c:	707b      	strb	r3, [r7, #1]
  params[2] = 0x72;
 800138e:	2372      	movs	r3, #114	@ 0x72
 8001390:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x36;
 8001392:	2336      	movs	r3, #54	@ 0x36
 8001394:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x37;
 8001396:	2337      	movs	r3, #55	@ 0x37
 8001398:	713b      	strb	r3, [r7, #4]
  params[5] = 0x6F;
 800139a:	236f      	movs	r3, #111	@ 0x6f
 800139c:	717b      	strb	r3, [r7, #5]
  gc9a01a_write_cmd(GC9A01A_GAMMA2);        ///< Set gamma 2
 800139e:	20f1      	movs	r0, #241	@ 0xf1
 80013a0:	f7ff f88a 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 6);
 80013a4:	463b      	mov	r3, r7
 80013a6:	2106      	movs	r1, #6
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f901 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x45;
 80013ae:	2345      	movs	r3, #69	@ 0x45
 80013b0:	703b      	strb	r3, [r7, #0]
  params[1] = 0x09;
 80013b2:	2309      	movs	r3, #9
 80013b4:	707b      	strb	r3, [r7, #1]
  params[2] = 0x08;
 80013b6:	2308      	movs	r3, #8
 80013b8:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x08;
 80013ba:	2308      	movs	r3, #8
 80013bc:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x26;
 80013be:	2326      	movs	r3, #38	@ 0x26
 80013c0:	713b      	strb	r3, [r7, #4]
  params[5] = 0x2A;
 80013c2:	232a      	movs	r3, #42	@ 0x2a
 80013c4:	717b      	strb	r3, [r7, #5]
  gc9a01a_write_cmd(GC9A01A_GAMMA3);        ///< Set gamma 3
 80013c6:	20f2      	movs	r0, #242	@ 0xf2
 80013c8:	f7ff f876 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 6);
 80013cc:	463b      	mov	r3, r7
 80013ce:	2106      	movs	r1, #6
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8ed 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x43;
 80013d6:	2343      	movs	r3, #67	@ 0x43
 80013d8:	703b      	strb	r3, [r7, #0]
  params[1] = 0x70;
 80013da:	2370      	movs	r3, #112	@ 0x70
 80013dc:	707b      	strb	r3, [r7, #1]
  params[2] = 0x72;
 80013de:	2372      	movs	r3, #114	@ 0x72
 80013e0:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x36;
 80013e2:	2336      	movs	r3, #54	@ 0x36
 80013e4:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x37;
 80013e6:	2337      	movs	r3, #55	@ 0x37
 80013e8:	713b      	strb	r3, [r7, #4]
  params[5] = 0x6F;
 80013ea:	236f      	movs	r3, #111	@ 0x6f
 80013ec:	717b      	strb	r3, [r7, #5]
  gc9a01a_write_cmd(GC9A01A_GAMMA4);        ///< Set gamma 4
 80013ee:	20f3      	movs	r0, #243	@ 0xf3
 80013f0:	f7ff f862 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 6);
 80013f4:	463b      	mov	r3, r7
 80013f6:	2106      	movs	r1, #6
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f8d9 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x1B;
 80013fe:	231b      	movs	r3, #27
 8001400:	703b      	strb	r3, [r7, #0]
  params[1] = 0x0B;
 8001402:	230b      	movs	r3, #11
 8001404:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(0xED);
 8001406:	20ed      	movs	r0, #237	@ 0xed
 8001408:	f7ff f856 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 800140c:	463b      	mov	r3, r7
 800140e:	2102      	movs	r1, #2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f8cd 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x77;
 8001416:	2377      	movs	r3, #119	@ 0x77
 8001418:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xAE);
 800141a:	20ae      	movs	r0, #174	@ 0xae
 800141c:	f7ff f84c 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001420:	463b      	mov	r3, r7
 8001422:	2101      	movs	r1, #1
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f8c3 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x63;
 800142a:	2363      	movs	r3, #99	@ 0x63
 800142c:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xCD);
 800142e:	20cd      	movs	r0, #205	@ 0xcd
 8001430:	f7ff f842 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001434:	463b      	mov	r3, r7
 8001436:	2101      	movs	r1, #1
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f8b9 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x07;
 800143e:	2307      	movs	r3, #7
 8001440:	703b      	strb	r3, [r7, #0]
  params[1] = 0x07;
 8001442:	2307      	movs	r3, #7
 8001444:	707b      	strb	r3, [r7, #1]
  params[2] = 0x04;
 8001446:	2304      	movs	r3, #4
 8001448:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x0E;
 800144a:	230e      	movs	r3, #14
 800144c:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x0F;
 800144e:	230f      	movs	r3, #15
 8001450:	713b      	strb	r3, [r7, #4]
  params[5] = 0x09;
 8001452:	2309      	movs	r3, #9
 8001454:	717b      	strb	r3, [r7, #5]
  params[6] = 0x07;
 8001456:	2307      	movs	r3, #7
 8001458:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x08;
 800145a:	2308      	movs	r3, #8
 800145c:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x03;
 800145e:	2303      	movs	r3, #3
 8001460:	723b      	strb	r3, [r7, #8]
  gc9a01a_write_cmd(0x70);
 8001462:	2070      	movs	r0, #112	@ 0x70
 8001464:	f7ff f828 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 9);
 8001468:	463b      	mov	r3, r7
 800146a:	2109      	movs	r1, #9
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f89f 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x34;
 8001472:	2334      	movs	r3, #52	@ 0x34
 8001474:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A_FRAMERATE);     ///< Frame rate control
 8001476:	20e8      	movs	r0, #232	@ 0xe8
 8001478:	f7ff f81e 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800147c:	463b      	mov	r3, r7
 800147e:	2101      	movs	r1, #1
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f895 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x18;
 8001486:	2318      	movs	r3, #24
 8001488:	703b      	strb	r3, [r7, #0]
  params[1] = 0x0D;
 800148a:	230d      	movs	r3, #13
 800148c:	707b      	strb	r3, [r7, #1]
  params[2] = 0x71;
 800148e:	2371      	movs	r3, #113	@ 0x71
 8001490:	70bb      	strb	r3, [r7, #2]
  params[3] = 0xED;
 8001492:	23ed      	movs	r3, #237	@ 0xed
 8001494:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x70;
 8001496:	2370      	movs	r3, #112	@ 0x70
 8001498:	713b      	strb	r3, [r7, #4]
  params[5] = 0x70;
 800149a:	2370      	movs	r3, #112	@ 0x70
 800149c:	717b      	strb	r3, [r7, #5]
  params[6] = 0x18;
 800149e:	2318      	movs	r3, #24
 80014a0:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x0F;
 80014a2:	230f      	movs	r3, #15
 80014a4:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x71;
 80014a6:	2371      	movs	r3, #113	@ 0x71
 80014a8:	723b      	strb	r3, [r7, #8]
  params[9] = 0xEF;
 80014aa:	23ef      	movs	r3, #239	@ 0xef
 80014ac:	727b      	strb	r3, [r7, #9]
  params[10] = 0x70;
 80014ae:	2370      	movs	r3, #112	@ 0x70
 80014b0:	72bb      	strb	r3, [r7, #10]
  params[11] = 0x70;
 80014b2:	2370      	movs	r3, #112	@ 0x70
 80014b4:	72fb      	strb	r3, [r7, #11]
  gc9a01a_write_cmd(0x62);
 80014b6:	2062      	movs	r0, #98	@ 0x62
 80014b8:	f7fe fffe 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 12);
 80014bc:	463b      	mov	r3, r7
 80014be:	210c      	movs	r1, #12
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f875 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x18;
 80014c6:	2318      	movs	r3, #24
 80014c8:	703b      	strb	r3, [r7, #0]
  params[1] = 0x11;
 80014ca:	2311      	movs	r3, #17
 80014cc:	707b      	strb	r3, [r7, #1]
  params[2] = 0x71;
 80014ce:	2371      	movs	r3, #113	@ 0x71
 80014d0:	70bb      	strb	r3, [r7, #2]
  params[3] = 0xF1;
 80014d2:	23f1      	movs	r3, #241	@ 0xf1
 80014d4:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x70;
 80014d6:	2370      	movs	r3, #112	@ 0x70
 80014d8:	713b      	strb	r3, [r7, #4]
  params[5] = 0x70;
 80014da:	2370      	movs	r3, #112	@ 0x70
 80014dc:	717b      	strb	r3, [r7, #5]
  params[6] = 0x18;
 80014de:	2318      	movs	r3, #24
 80014e0:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x13;
 80014e2:	2313      	movs	r3, #19
 80014e4:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x71;
 80014e6:	2371      	movs	r3, #113	@ 0x71
 80014e8:	723b      	strb	r3, [r7, #8]
  params[9] = 0xF3;
 80014ea:	23f3      	movs	r3, #243	@ 0xf3
 80014ec:	727b      	strb	r3, [r7, #9]
  params[10] = 0x70;
 80014ee:	2370      	movs	r3, #112	@ 0x70
 80014f0:	72bb      	strb	r3, [r7, #10]
  params[11] = 0x70;
 80014f2:	2370      	movs	r3, #112	@ 0x70
 80014f4:	72fb      	strb	r3, [r7, #11]
  gc9a01a_write_cmd(0x63);
 80014f6:	2063      	movs	r0, #99	@ 0x63
 80014f8:	f7fe ffde 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 12);
 80014fc:	463b      	mov	r3, r7
 80014fe:	210c      	movs	r1, #12
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f855 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x28;
 8001506:	2328      	movs	r3, #40	@ 0x28
 8001508:	703b      	strb	r3, [r7, #0]
  params[1] = 0x29;
 800150a:	2329      	movs	r3, #41	@ 0x29
 800150c:	707b      	strb	r3, [r7, #1]
  params[2] = 0xF1;
 800150e:	23f1      	movs	r3, #241	@ 0xf1
 8001510:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x01;
 8001512:	2301      	movs	r3, #1
 8001514:	70fb      	strb	r3, [r7, #3]
  params[4] = 0xF1;
 8001516:	23f1      	movs	r3, #241	@ 0xf1
 8001518:	713b      	strb	r3, [r7, #4]
  params[5] = 0x00;
 800151a:	2300      	movs	r3, #0
 800151c:	717b      	strb	r3, [r7, #5]
  params[6] = 0x07;
 800151e:	2307      	movs	r3, #7
 8001520:	71bb      	strb	r3, [r7, #6]
  gc9a01a_write_cmd(0x64);
 8001522:	2064      	movs	r0, #100	@ 0x64
 8001524:	f7fe ffc8 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 7);
 8001528:	463b      	mov	r3, r7
 800152a:	2107      	movs	r1, #7
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f83f 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x3C;
 8001532:	233c      	movs	r3, #60	@ 0x3c
 8001534:	703b      	strb	r3, [r7, #0]
  params[1] = 0x00;
 8001536:	2300      	movs	r3, #0
 8001538:	707b      	strb	r3, [r7, #1]
  params[2] = 0xCD;
 800153a:	23cd      	movs	r3, #205	@ 0xcd
 800153c:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x67;
 800153e:	2367      	movs	r3, #103	@ 0x67
 8001540:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x45;
 8001542:	2345      	movs	r3, #69	@ 0x45
 8001544:	713b      	strb	r3, [r7, #4]
  params[5] = 0x45;
 8001546:	2345      	movs	r3, #69	@ 0x45
 8001548:	717b      	strb	r3, [r7, #5]
  params[6] = 0x10;
 800154a:	2310      	movs	r3, #16
 800154c:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x00;
 800154e:	2300      	movs	r3, #0
 8001550:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x00;
 8001552:	2300      	movs	r3, #0
 8001554:	723b      	strb	r3, [r7, #8]
  params[9] = 0x00;
 8001556:	2300      	movs	r3, #0
 8001558:	727b      	strb	r3, [r7, #9]
  gc9a01a_write_cmd(0x66);
 800155a:	2066      	movs	r0, #102	@ 0x66
 800155c:	f7fe ffac 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 10);
 8001560:	463b      	mov	r3, r7
 8001562:	210a      	movs	r1, #10
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff f823 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x00;
 800156a:	2300      	movs	r3, #0
 800156c:	703b      	strb	r3, [r7, #0]
  params[1] = 0x3C;
 800156e:	233c      	movs	r3, #60	@ 0x3c
 8001570:	707b      	strb	r3, [r7, #1]
  params[2] = 0x00;
 8001572:	2300      	movs	r3, #0
 8001574:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x00;
 8001576:	2300      	movs	r3, #0
 8001578:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x00;
 800157a:	2300      	movs	r3, #0
 800157c:	713b      	strb	r3, [r7, #4]
  params[5] = 0x01;
 800157e:	2301      	movs	r3, #1
 8001580:	717b      	strb	r3, [r7, #5]
  params[6] = 0x54;
 8001582:	2354      	movs	r3, #84	@ 0x54
 8001584:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x10;
 8001586:	2310      	movs	r3, #16
 8001588:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x32;
 800158a:	2332      	movs	r3, #50	@ 0x32
 800158c:	723b      	strb	r3, [r7, #8]
  params[9] = 0x98;
 800158e:	2398      	movs	r3, #152	@ 0x98
 8001590:	727b      	strb	r3, [r7, #9]
  gc9a01a_write_cmd(0x67);
 8001592:	2067      	movs	r0, #103	@ 0x67
 8001594:	f7fe ff90 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 10);
 8001598:	463b      	mov	r3, r7
 800159a:	210a      	movs	r1, #10
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff f807 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x10;
 80015a2:	2310      	movs	r3, #16
 80015a4:	703b      	strb	r3, [r7, #0]
  params[1] = 0x85;
 80015a6:	2385      	movs	r3, #133	@ 0x85
 80015a8:	707b      	strb	r3, [r7, #1]
  params[2] = 0x80;
 80015aa:	2380      	movs	r3, #128	@ 0x80
 80015ac:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x00;
 80015ae:	2300      	movs	r3, #0
 80015b0:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x00;
 80015b2:	2300      	movs	r3, #0
 80015b4:	713b      	strb	r3, [r7, #4]
  params[5] = 0x4E;
 80015b6:	234e      	movs	r3, #78	@ 0x4e
 80015b8:	717b      	strb	r3, [r7, #5]
  params[6] = 0x00;
 80015ba:	2300      	movs	r3, #0
 80015bc:	71bb      	strb	r3, [r7, #6]
  gc9a01a_write_cmd(0x74);
 80015be:	2074      	movs	r0, #116	@ 0x74
 80015c0:	f7fe ff7a 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 7);
 80015c4:	463b      	mov	r3, r7
 80015c6:	2107      	movs	r1, #7
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe fff1 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x3E;
 80015ce:	233e      	movs	r3, #62	@ 0x3e
 80015d0:	703b      	strb	r3, [r7, #0]
  params[1] = 0x07;
 80015d2:	2307      	movs	r3, #7
 80015d4:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(0x98);
 80015d6:	2098      	movs	r0, #152	@ 0x98
 80015d8:	f7fe ff6e 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 80015dc:	463b      	mov	r3, r7
 80015de:	2102      	movs	r1, #2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ffe5 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x3E;
 80015e6:	233e      	movs	r3, #62	@ 0x3e
 80015e8:	703b      	strb	r3, [r7, #0]
  params[1] = 0x07;
 80015ea:	2307      	movs	r3, #7
 80015ec:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(0x99);
 80015ee:	2099      	movs	r0, #153	@ 0x99
 80015f0:	f7fe ff62 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 80015f4:	463b      	mov	r3, r7
 80015f6:	2102      	movs	r1, #2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ffd9 	bl	80005b0 <gc9a01a_write_data>

  params[0] = 0x00;
 80015fe:	2300      	movs	r3, #0
 8001600:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A_TEON);          ///< Tearing Effect Line ON
 8001602:	2035      	movs	r0, #53	@ 0x35
 8001604:	f7fe ff58 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001608:	463b      	mov	r3, r7
 800160a:	2101      	movs	r1, #1
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ffcf 	bl	80005b0 <gc9a01a_write_data>

  gc9a01a_write_cmd(GC9A01A_INVON);         ///< Display Inversion ON
 8001612:	2021      	movs	r0, #33	@ 0x21
 8001614:	f7fe ff50 	bl	80004b8 <gc9a01a_write_cmd>
  HAL_Delay(120);
 8001618:	2078      	movs	r0, #120	@ 0x78
 800161a:	f000 ffcd 	bl	80025b8 <HAL_Delay>
  gc9a01a_write_cmd(GC9A01A_SLPOUT);        ///< Sleep Out
 800161e:	2011      	movs	r0, #17
 8001620:	f7fe ff4a 	bl	80004b8 <gc9a01a_write_cmd>
  HAL_Delay(120);
 8001624:	2078      	movs	r0, #120	@ 0x78
 8001626:	f000 ffc7 	bl	80025b8 <HAL_Delay>
  gc9a01a_write_cmd(GC9A01A_DISPON);        ///< Display ON
 800162a:	2029      	movs	r0, #41	@ 0x29
 800162c:	f7fe ff44 	bl	80004b8 <gc9a01a_write_cmd>
  HAL_Delay(20);
 8001630:	2014      	movs	r0, #20
 8001632:	f000 ffc1 	bl	80025b8 <HAL_Delay>


  GC9A01A_CS_HIGH;
 8001636:	2201      	movs	r2, #1
 8001638:	2108      	movs	r1, #8
 800163a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800163e:	f001 fa9d 	bl	8002b7c <HAL_GPIO_WritePin>
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <bsp_lcd_init>:



void bsp_lcd_init() {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  GC9A01A_CS_HIGH;
 8001650:	2201      	movs	r2, #1
 8001652:	2108      	movs	r1, #8
 8001654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001658:	f001 fa90 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_BL_ON;
 800165c:	2201      	movs	r2, #1
 800165e:	2110      	movs	r1, #16
 8001660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001664:	f001 fa8a 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_TE_LOW;
 8001668:	2200      	movs	r2, #0
 800166a:	2102      	movs	r1, #2
 800166c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001670:	f001 fa84 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_RD_HIGH;
 8001674:	2201      	movs	r2, #1
 8001676:	2101      	movs	r1, #1
 8001678:	480a      	ldr	r0, [pc, #40]	@ (80016a4 <bsp_lcd_init+0x58>)
 800167a:	f001 fa7f 	bl	8002b7c <HAL_GPIO_WritePin>
  GC9A01A_CS_LOW;
 800167e:	2200      	movs	r2, #0
 8001680:	2108      	movs	r1, #8
 8001682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001686:	f001 fa79 	bl	8002b7c <HAL_GPIO_WritePin>

  gc9a01a_hw_reset();
 800168a:	f7ff f831 	bl	80006f0 <gc9a01a_hw_reset>
  gc9a01a_init();
 800168e:	f7ff fd27 	bl	80010e0 <gc9a01a_init>
  gc9a01a_set_orientation(LANDSCAPE);
 8001692:	2001      	movs	r0, #1
 8001694:	f000 fa0a 	bl	8001aac <gc9a01a_set_orientation>
  gc9a01a_fill_screen(WHITE);
 8001698:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800169c:	f000 fa63 	bl	8001b66 <gc9a01a_fill_screen>
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	48000400 	.word	0x48000400

080016a8 <gc9a01a_write_char>:
  * @param  font: Font definition structure
  * @param  color: Color of the character (RGB565 format)
  * @param  bgcolor: Background color of the character (RGB565 format)
  * @retval None
  */
static void gc9a01a_write_char(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80016a8:	b082      	sub	sp, #8
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b088      	sub	sp, #32
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
 80016b6:	460b      	mov	r3, r1
 80016b8:	80bb      	strh	r3, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	70fb      	strb	r3, [r7, #3]
  uint32_t i, b, j;

  gc9a01a_set_address_window(x, x+font.width-1, y, y+font.height-1);
 80016be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016c2:	461a      	mov	r2, r3
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	4413      	add	r3, r2
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	3b01      	subs	r3, #1
 80016cc:	b299      	uxth	r1, r3
 80016ce:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80016d2:	461a      	mov	r2, r3
 80016d4:	88bb      	ldrh	r3, [r7, #4]
 80016d6:	4413      	add	r3, r2
 80016d8:	b29b      	uxth	r3, r3
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29b      	uxth	r3, r3
 80016de:	88ba      	ldrh	r2, [r7, #4]
 80016e0:	88f8      	ldrh	r0, [r7, #6]
 80016e2:	f7ff f827 	bl	8000734 <gc9a01a_set_address_window>

  for(i = 0; i < font.height; i++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	e041      	b.n	8001770 <gc9a01a_write_char+0xc8>
    b = font.data[(ch - 32) * font.height + i];
 80016ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	3b20      	subs	r3, #32
 80016f2:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80016f6:	fb01 f303 	mul.w	r3, r1, r3
 80016fa:	4619      	mov	r1, r3
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	440b      	add	r3, r1
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	617b      	str	r3, [r7, #20]
    for(j = 0; j < font.width; j++) {
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	e027      	b.n	800175e <gc9a01a_write_char+0xb6>
      if((b << j) & 0x8000)  {
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00e      	beq.n	800173c <gc9a01a_write_char+0x94>
        uint8_t data[] = { color >> 8, color & 0xFF };
 800171e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	b29b      	uxth	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	743b      	strb	r3, [r7, #16]
 8001728:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800172a:	b2db      	uxtb	r3, r3
 800172c:	747b      	strb	r3, [r7, #17]
        gc9a01a_write_data(data, sizeof(data));
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	2102      	movs	r1, #2
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe ff3b 	bl	80005b0 <gc9a01a_write_data>
 800173a:	e00d      	b.n	8001758 <gc9a01a_write_char+0xb0>
      } else {
        uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800173c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	b29b      	uxth	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	733b      	strb	r3, [r7, #12]
 8001746:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001748:	b2db      	uxtb	r3, r3
 800174a:	737b      	strb	r3, [r7, #13]
        gc9a01a_write_data(data, sizeof(data));
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	2102      	movs	r1, #2
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe ff2c 	bl	80005b0 <gc9a01a_write_data>
    for(j = 0; j < font.width; j++) {
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	3301      	adds	r3, #1
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001762:	461a      	mov	r2, r3
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	4293      	cmp	r3, r2
 8001768:	d3d1      	bcc.n	800170e <gc9a01a_write_char+0x66>
  for(i = 0; i < font.height; i++) {
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3301      	adds	r3, #1
 800176e:	61fb      	str	r3, [r7, #28]
 8001770:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001774:	461a      	mov	r2, r3
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	4293      	cmp	r3, r2
 800177a:	d3b7      	bcc.n	80016ec <gc9a01a_write_char+0x44>
      }
    }
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3720      	adds	r7, #32
 8001782:	46bd      	mov	sp, r7
 8001784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001788:	b002      	add	sp, #8
 800178a:	4770      	bx	lr

0800178c <gc9a01a_write_string>:
  * @param  font: Font definition structure
  * @param  color: Text color (RGB565 format)
  * @param  bgcolor: Background color (RGB565 format)
  * @retval None
  */
void gc9a01a_write_string(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800178c:	b082      	sub	sp, #8
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af04      	add	r7, sp, #16
 8001794:	603a      	str	r2, [r7, #0]
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	4603      	mov	r3, r0
 800179a:	80fb      	strh	r3, [r7, #6]
 800179c:	460b      	mov	r3, r1
 800179e:	80bb      	strh	r3, [r7, #4]
  GC9A01A_CS_LOW;
 80017a0:	2200      	movs	r2, #0
 80017a2:	2108      	movs	r1, #8
 80017a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017a8:	f001 f9e8 	bl	8002b7c <HAL_GPIO_WritePin>

  while(*str) {
 80017ac:	e02d      	b.n	800180a <gc9a01a_write_string+0x7e>
    if(x + font.width >= GC9A01A_WIDTH) {
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	7d3a      	ldrb	r2, [r7, #20]
 80017b2:	4413      	add	r3, r2
 80017b4:	2bef      	cmp	r3, #239	@ 0xef
 80017b6:	dd13      	ble.n	80017e0 <gc9a01a_write_string+0x54>
      x = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	80fb      	strh	r3, [r7, #6]
      y += font.height;
 80017bc:	7d7b      	ldrb	r3, [r7, #21]
 80017be:	461a      	mov	r2, r3
 80017c0:	88bb      	ldrh	r3, [r7, #4]
 80017c2:	4413      	add	r3, r2
 80017c4:	80bb      	strh	r3, [r7, #4]
      if(y + font.height >= GC9A01A_HEIGHT) {
 80017c6:	88bb      	ldrh	r3, [r7, #4]
 80017c8:	7d7a      	ldrb	r2, [r7, #21]
 80017ca:	4413      	add	r3, r2
 80017cc:	2bef      	cmp	r3, #239	@ 0xef
 80017ce:	dc21      	bgt.n	8001814 <gc9a01a_write_string+0x88>
        break;
      }

      if(*str == ' ') {
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b20      	cmp	r3, #32
 80017d6:	d103      	bne.n	80017e0 <gc9a01a_write_string+0x54>
        // skip spaces in the beginning of the new line
        str++;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	3301      	adds	r3, #1
 80017dc:	603b      	str	r3, [r7, #0]
        continue;
 80017de:	e014      	b.n	800180a <gc9a01a_write_string+0x7e>
      }
    }

    gc9a01a_write_char(x, y, *str, font, color, bgcolor);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	781a      	ldrb	r2, [r3, #0]
 80017e4:	88b9      	ldrh	r1, [r7, #4]
 80017e6:	88f8      	ldrh	r0, [r7, #6]
 80017e8:	8c3b      	ldrh	r3, [r7, #32]
 80017ea:	9302      	str	r3, [sp, #8]
 80017ec:	8bbb      	ldrh	r3, [r7, #28]
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f7ff ff57 	bl	80016a8 <gc9a01a_write_char>
    x += font.width;
 80017fa:	7d3b      	ldrb	r3, [r7, #20]
 80017fc:	461a      	mov	r2, r3
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	4413      	add	r3, r2
 8001802:	80fb      	strh	r3, [r7, #6]
    str++;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	3301      	adds	r3, #1
 8001808:	603b      	str	r3, [r7, #0]
  while(*str) {
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1cd      	bne.n	80017ae <gc9a01a_write_string+0x22>
 8001812:	e000      	b.n	8001816 <gc9a01a_write_string+0x8a>
        break;
 8001814:	bf00      	nop
  }

  GC9A01A_CS_HIGH;
 8001816:	2201      	movs	r2, #1
 8001818:	2108      	movs	r1, #8
 800181a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800181e:	f001 f9ad 	bl	8002b7c <HAL_GPIO_WritePin>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800182c:	b002      	add	sp, #8
 800182e:	4770      	bx	lr

08001830 <gc9a01a_fill_rect>:
  * @param  y: Y-coordinate of the top-left corner of the rectangle.
  * @param  h: Height of the rectangle.
  * @param  color: Color to fill the rectangle with.
  * @retval None
  */
void gc9a01a_fill_rect(uint16_t x, uint16_t w, uint16_t y, uint16_t h, uint16_t color) {
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	4604      	mov	r4, r0
 8001838:	4608      	mov	r0, r1
 800183a:	4611      	mov	r1, r2
 800183c:	461a      	mov	r2, r3
 800183e:	4623      	mov	r3, r4
 8001840:	80fb      	strh	r3, [r7, #6]
 8001842:	4603      	mov	r3, r0
 8001844:	80bb      	strh	r3, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	807b      	strh	r3, [r7, #2]
 800184a:	4613      	mov	r3, r2
 800184c:	803b      	strh	r3, [r7, #0]
  if((x >= BSP_LCD_ACTIVE_WIDTH) || (y >= BSP_LCD_ACTIVE_HEIGHT)) return;
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	2bef      	cmp	r3, #239	@ 0xef
 8001852:	f200 8125 	bhi.w	8001aa0 <gc9a01a_fill_rect+0x270>
 8001856:	887b      	ldrh	r3, [r7, #2]
 8001858:	2bef      	cmp	r3, #239	@ 0xef
 800185a:	f200 8121 	bhi.w	8001aa0 <gc9a01a_fill_rect+0x270>
  if((x + w - 1) >= BSP_LCD_ACTIVE_WIDTH) w = BSP_LCD_ACTIVE_WIDTH - x;
 800185e:	88fa      	ldrh	r2, [r7, #6]
 8001860:	88bb      	ldrh	r3, [r7, #4]
 8001862:	4413      	add	r3, r2
 8001864:	2bf0      	cmp	r3, #240	@ 0xf0
 8001866:	dd03      	ble.n	8001870 <gc9a01a_fill_rect+0x40>
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800186e:	80bb      	strh	r3, [r7, #4]
  if((y + h - 1) >= BSP_LCD_ACTIVE_HEIGHT) h = BSP_LCD_ACTIVE_HEIGHT - y;
 8001870:	887a      	ldrh	r2, [r7, #2]
 8001872:	883b      	ldrh	r3, [r7, #0]
 8001874:	4413      	add	r3, r2
 8001876:	2bf0      	cmp	r3, #240	@ 0xf0
 8001878:	dd03      	ble.n	8001882 <gc9a01a_fill_rect+0x52>
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001880:	803b      	strh	r3, [r7, #0]
  GC9A01A_CS_LOW;
 8001882:	2200      	movs	r2, #0
 8001884:	2108      	movs	r1, #8
 8001886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800188a:	f001 f977 	bl	8002b7c <HAL_GPIO_WritePin>
  gc9a01a_set_address_window(x,(x+w-1), y, (y+h-1));
 800188e:	88fa      	ldrh	r2, [r7, #6]
 8001890:	88bb      	ldrh	r3, [r7, #4]
 8001892:	4413      	add	r3, r2
 8001894:	b29b      	uxth	r3, r3
 8001896:	3b01      	subs	r3, #1
 8001898:	b299      	uxth	r1, r3
 800189a:	887a      	ldrh	r2, [r7, #2]
 800189c:	883b      	ldrh	r3, [r7, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	3b01      	subs	r3, #1
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	88f8      	ldrh	r0, [r7, #6]
 80018aa:	f7fe ff43 	bl	8000734 <gc9a01a_set_address_window>
  uint8_t data[] = { color >> 8, color & 0xFF };
 80018ae:	8c3b      	ldrh	r3, [r7, #32]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	733b      	strb	r3, [r7, #12]
 80018b8:	8c3b      	ldrh	r3, [r7, #32]
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	737b      	strb	r3, [r7, #13]

  for(y = h; y > 0; y--) {
 80018be:	883b      	ldrh	r3, [r7, #0]
 80018c0:	807b      	strh	r3, [r7, #2]
 80018c2:	e0e2      	b.n	8001a8a <gc9a01a_fill_rect+0x25a>
    for(x = w; x > 0; x--) {
 80018c4:	88bb      	ldrh	r3, [r7, #4]
 80018c6:	80fb      	strh	r3, [r7, #6]
 80018c8:	e0d8      	b.n	8001a7c <gc9a01a_fill_rect+0x24c>
      GC9A01A_WRITE_8BIT(data[0]);
 80018ca:	7b3b      	ldrb	r3, [r7, #12]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018dc:	f001 f94e 	bl	8002b7c <HAL_GPIO_WritePin>
 80018e0:	7b3b      	ldrb	r3, [r7, #12]
 80018e2:	105b      	asrs	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f6:	f001 f941 	bl	8002b7c <HAL_GPIO_WritePin>
 80018fa:	7b3b      	ldrb	r3, [r7, #12]
 80018fc:	109b      	asrs	r3, r3, #2
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800190c:	4866      	ldr	r0, [pc, #408]	@ (8001aa8 <gc9a01a_fill_rect+0x278>)
 800190e:	f001 f935 	bl	8002b7c <HAL_GPIO_WritePin>
 8001912:	7b3b      	ldrb	r3, [r7, #12]
 8001914:	10db      	asrs	r3, r3, #3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	461a      	mov	r2, r3
 8001920:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001924:	4860      	ldr	r0, [pc, #384]	@ (8001aa8 <gc9a01a_fill_rect+0x278>)
 8001926:	f001 f929 	bl	8002b7c <HAL_GPIO_WritePin>
 800192a:	7b3b      	ldrb	r3, [r7, #12]
 800192c:	111b      	asrs	r3, r3, #4
 800192e:	b2db      	uxtb	r3, r3
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800193c:	485a      	ldr	r0, [pc, #360]	@ (8001aa8 <gc9a01a_fill_rect+0x278>)
 800193e:	f001 f91d 	bl	8002b7c <HAL_GPIO_WritePin>
 8001942:	7b3b      	ldrb	r3, [r7, #12]
 8001944:	115b      	asrs	r3, r3, #5
 8001946:	b2db      	uxtb	r3, r3
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	b2db      	uxtb	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001954:	4854      	ldr	r0, [pc, #336]	@ (8001aa8 <gc9a01a_fill_rect+0x278>)
 8001956:	f001 f911 	bl	8002b7c <HAL_GPIO_WritePin>
 800195a:	7b3b      	ldrb	r3, [r7, #12]
 800195c:	119b      	asrs	r3, r3, #6
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	b2db      	uxtb	r3, r3
 8001966:	461a      	mov	r2, r3
 8001968:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800196c:	484e      	ldr	r0, [pc, #312]	@ (8001aa8 <gc9a01a_fill_rect+0x278>)
 800196e:	f001 f905 	bl	8002b7c <HAL_GPIO_WritePin>
 8001972:	7b3b      	ldrb	r3, [r7, #12]
 8001974:	09db      	lsrs	r3, r3, #7
 8001976:	b2db      	uxtb	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800197e:	484a      	ldr	r0, [pc, #296]	@ (8001aa8 <gc9a01a_fill_rect+0x278>)
 8001980:	f001 f8fc 	bl	8002b7c <HAL_GPIO_WritePin>
 8001984:	2200      	movs	r2, #0
 8001986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800198a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800198e:	f001 f8f5 	bl	8002b7c <HAL_GPIO_WritePin>
 8001992:	2201      	movs	r2, #1
 8001994:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001998:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800199c:	f001 f8ee 	bl	8002b7c <HAL_GPIO_WritePin>
      GC9A01A_WRITE_8BIT(data[1]);
 80019a0:	7b7b      	ldrb	r3, [r7, #13]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b2:	f001 f8e3 	bl	8002b7c <HAL_GPIO_WritePin>
 80019b6:	7b7b      	ldrb	r3, [r7, #13]
 80019b8:	105b      	asrs	r3, r3, #1
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019cc:	f001 f8d6 	bl	8002b7c <HAL_GPIO_WritePin>
 80019d0:	7b7b      	ldrb	r3, [r7, #13]
 80019d2:	109b      	asrs	r3, r3, #2
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019e2:	4831      	ldr	r0, [pc, #196]	@ (8001aa8 <gc9a01a_fill_rect+0x278>)
 80019e4:	f001 f8ca 	bl	8002b7c <HAL_GPIO_WritePin>
 80019e8:	7b7b      	ldrb	r3, [r7, #13]
 80019ea:	10db      	asrs	r3, r3, #3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019fa:	482b      	ldr	r0, [pc, #172]	@ (8001aa8 <gc9a01a_fill_rect+0x278>)
 80019fc:	f001 f8be 	bl	8002b7c <HAL_GPIO_WritePin>
 8001a00:	7b7b      	ldrb	r3, [r7, #13]
 8001a02:	111b      	asrs	r3, r3, #4
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a12:	4825      	ldr	r0, [pc, #148]	@ (8001aa8 <gc9a01a_fill_rect+0x278>)
 8001a14:	f001 f8b2 	bl	8002b7c <HAL_GPIO_WritePin>
 8001a18:	7b7b      	ldrb	r3, [r7, #13]
 8001a1a:	115b      	asrs	r3, r3, #5
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a2a:	481f      	ldr	r0, [pc, #124]	@ (8001aa8 <gc9a01a_fill_rect+0x278>)
 8001a2c:	f001 f8a6 	bl	8002b7c <HAL_GPIO_WritePin>
 8001a30:	7b7b      	ldrb	r3, [r7, #13]
 8001a32:	119b      	asrs	r3, r3, #6
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a42:	4819      	ldr	r0, [pc, #100]	@ (8001aa8 <gc9a01a_fill_rect+0x278>)
 8001a44:	f001 f89a 	bl	8002b7c <HAL_GPIO_WritePin>
 8001a48:	7b7b      	ldrb	r3, [r7, #13]
 8001a4a:	09db      	lsrs	r3, r3, #7
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a54:	4814      	ldr	r0, [pc, #80]	@ (8001aa8 <gc9a01a_fill_rect+0x278>)
 8001a56:	f001 f891 	bl	8002b7c <HAL_GPIO_WritePin>
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a64:	f001 f88a 	bl	8002b7c <HAL_GPIO_WritePin>
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a72:	f001 f883 	bl	8002b7c <HAL_GPIO_WritePin>
    for(x = w; x > 0; x--) {
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	80fb      	strh	r3, [r7, #6]
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f47f af23 	bne.w	80018ca <gc9a01a_fill_rect+0x9a>
  for(y = h; y > 0; y--) {
 8001a84:	887b      	ldrh	r3, [r7, #2]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	807b      	strh	r3, [r7, #2]
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f47f af19 	bne.w	80018c4 <gc9a01a_fill_rect+0x94>
    }
  }
  GC9A01A_CS_HIGH;
 8001a92:	2201      	movs	r2, #1
 8001a94:	2108      	movs	r1, #8
 8001a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a9a:	f001 f86f 	bl	8002b7c <HAL_GPIO_WritePin>
 8001a9e:	e000      	b.n	8001aa2 <gc9a01a_fill_rect+0x272>
  if((x >= BSP_LCD_ACTIVE_WIDTH) || (y >= BSP_LCD_ACTIVE_HEIGHT)) return;
 8001aa0:	bf00      	nop
}
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd90      	pop	{r4, r7, pc}
 8001aa8:	48000400 	.word	0x48000400

08001aac <gc9a01a_set_orientation>:
/**
  * @brief  Set the orientation of the GC9A01A LCD display
  * @param  orientation: Orientation mode (LANDSCAPE or PORTRAIT)
  * @retval None
  */
void gc9a01a_set_orientation(uint8_t orientation) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  uint8_t params[4];
  GC9A01A_CS_LOW;
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2108      	movs	r1, #8
 8001aba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001abe:	f001 f85d 	bl	8002b7c <HAL_GPIO_WritePin>
  if (orientation == LANDSCAPE) {
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d11c      	bne.n	8001b02 <gc9a01a_set_orientation+0x56>
    // Set column address for landscape orientation
    gc9a01a_write_cmd(GC9A01A_CASET);
 8001ac8:	202a      	movs	r0, #42	@ 0x2a
 8001aca:	f7fe fcf5 	bl	80004b8 <gc9a01a_write_cmd>
    params[0] = 0x00;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	733b      	strb	r3, [r7, #12]
    params[1] = 0x00;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	737b      	strb	r3, [r7, #13]
    params[2] = 0x00;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73bb      	strb	r3, [r7, #14]
    params[3] = 0xf0;
 8001ada:	23f0      	movs	r3, #240	@ 0xf0
 8001adc:	73fb      	strb	r3, [r7, #15]
    gc9a01a_write_data(params, 4);
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	2104      	movs	r1, #4
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd63 	bl	80005b0 <gc9a01a_write_data>

    // Set row address for landscape orientation
    gc9a01a_write_cmd(GC9A01A_RASET);
 8001aea:	202b      	movs	r0, #43	@ 0x2b
 8001aec:	f7fe fce4 	bl	80004b8 <gc9a01a_write_cmd>
    gc9a01a_write_data(params, 4);
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2104      	movs	r1, #4
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fd5a 	bl	80005b0 <gc9a01a_write_data>

    // Set orientation parameters for landscape mode
    params[0] = MADCTL_MV | MADCTL_BGR;
 8001afc:	2328      	movs	r3, #40	@ 0x28
 8001afe:	733b      	strb	r3, [r7, #12]
 8001b00:	e01e      	b.n	8001b40 <gc9a01a_set_orientation+0x94>
  } else if (orientation == PORTRAIT) {
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d11b      	bne.n	8001b40 <gc9a01a_set_orientation+0x94>
    // Set column address for portrait orientation
    gc9a01a_write_cmd(GC9A01A_CASET);
 8001b08:	202a      	movs	r0, #42	@ 0x2a
 8001b0a:	f7fe fcd5 	bl	80004b8 <gc9a01a_write_cmd>
    params[0] = 0x00;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	733b      	strb	r3, [r7, #12]
    params[1] = 0x00;
 8001b12:	2300      	movs	r3, #0
 8001b14:	737b      	strb	r3, [r7, #13]
    params[2] = 0x00;
 8001b16:	2300      	movs	r3, #0
 8001b18:	73bb      	strb	r3, [r7, #14]
    params[3] = 0xf0;
 8001b1a:	23f0      	movs	r3, #240	@ 0xf0
 8001b1c:	73fb      	strb	r3, [r7, #15]
    gc9a01a_write_data(params, 4);
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	2104      	movs	r1, #4
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fd43 	bl	80005b0 <gc9a01a_write_data>

    // Set row address for portrait orientation
    gc9a01a_write_cmd(GC9A01A_RASET);
 8001b2a:	202b      	movs	r0, #43	@ 0x2b
 8001b2c:	f7fe fcc4 	bl	80004b8 <gc9a01a_write_cmd>
    gc9a01a_write_data(params, 4);
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	2104      	movs	r1, #4
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fd3a 	bl	80005b0 <gc9a01a_write_data>

    // Set orientation parameters for portrait mode
    params[0] =  MADCTL_MX | MADCTL_BGR;
 8001b3c:	2348      	movs	r3, #72	@ 0x48
 8001b3e:	733b      	strb	r3, [r7, #12]
  }

  // Set MADCTL register with the configured parameters
  gc9a01a_write_cmd(GC9A01A_MADCTL);
 8001b40:	2036      	movs	r0, #54	@ 0x36
 8001b42:	f7fe fcb9 	bl	80004b8 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fd2f 	bl	80005b0 <gc9a01a_write_data>
  GC9A01A_CS_HIGH;
 8001b52:	2201      	movs	r2, #1
 8001b54:	2108      	movs	r1, #8
 8001b56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b5a:	f001 f80f 	bl	8002b7c <HAL_GPIO_WritePin>
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <gc9a01a_fill_screen>:
/**
  * @brief  Fill the entire background of the GC9A01A LCD with a specified color
  * @param  color: Color to fill the background (RGB565 format)
  * @retval None
  */
void gc9a01a_fill_screen(uint16_t color) {
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af02      	add	r7, sp, #8
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	80fb      	strh	r3, [r7, #6]
  gc9a01a_fill_rect(0, GC9A01A_WIDTH, 0, GC9A01A_HEIGHT, color);
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	23f0      	movs	r3, #240	@ 0xf0
 8001b76:	2200      	movs	r2, #0
 8001b78:	21f0      	movs	r1, #240	@ 0xf0
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff fe58 	bl	8001830 <gc9a01a_fill_rect>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <gc9a01a_draw_image>:
  * @param  y: Start row address
  * @param  h: Height of the image
  * @param  data: Pointer to the image data (RGB565 format)
  * @retval None
  */
void gc9a01a_draw_image(uint16_t x, uint16_t w, uint16_t y, uint16_t h, const uint16_t* data) {
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4604      	mov	r4, r0
 8001b90:	4608      	mov	r0, r1
 8001b92:	4611      	mov	r1, r2
 8001b94:	461a      	mov	r2, r3
 8001b96:	4623      	mov	r3, r4
 8001b98:	80fb      	strh	r3, [r7, #6]
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	80bb      	strh	r3, [r7, #4]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	807b      	strh	r3, [r7, #2]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	803b      	strh	r3, [r7, #0]
  if ((x >= GC9A01A_WIDTH) || (y >= GC9A01A_HEIGHT)) return;
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	2bef      	cmp	r3, #239	@ 0xef
 8001baa:	f200 8126 	bhi.w	8001dfa <gc9a01a_draw_image+0x272>
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	2bef      	cmp	r3, #239	@ 0xef
 8001bb2:	f200 8122 	bhi.w	8001dfa <gc9a01a_draw_image+0x272>
  if ((x + w - 1) >= GC9A01A_WIDTH) w = GC9A01A_HEIGHT - x;
 8001bb6:	88fa      	ldrh	r2, [r7, #6]
 8001bb8:	88bb      	ldrh	r3, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	2bf0      	cmp	r3, #240	@ 0xf0
 8001bbe:	dd03      	ble.n	8001bc8 <gc9a01a_draw_image+0x40>
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001bc6:	80bb      	strh	r3, [r7, #4]
  if ((y + h - 1) >= GC9A01A_WIDTH) h = GC9A01A_HEIGHT - y;
 8001bc8:	887a      	ldrh	r2, [r7, #2]
 8001bca:	883b      	ldrh	r3, [r7, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	2bf0      	cmp	r3, #240	@ 0xf0
 8001bd0:	dd03      	ble.n	8001bda <gc9a01a_draw_image+0x52>
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001bd8:	803b      	strh	r3, [r7, #0]
  GC9A01A_CS_LOW;
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2108      	movs	r1, #8
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be2:	f000 ffcb 	bl	8002b7c <HAL_GPIO_WritePin>
  gc9a01a_set_address_window(x, (x+w-1), y, (y+h-1));
 8001be6:	88fa      	ldrh	r2, [r7, #6]
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	4413      	add	r3, r2
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b299      	uxth	r1, r3
 8001bf2:	887a      	ldrh	r2, [r7, #2]
 8001bf4:	883b      	ldrh	r3, [r7, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	88f8      	ldrh	r0, [r7, #6]
 8001c02:	f7fe fd97 	bl	8000734 <gc9a01a_set_address_window>

  for (uint32_t i = 0; i < w * h; i++) {
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	e0e6      	b.n	8001dda <gc9a01a_draw_image+0x252>
    uint8_t color_high = (data[i] >> 8) & 0xFF;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	6a3a      	ldr	r2, [r7, #32]
 8001c12:	4413      	add	r3, r2
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	72fb      	strb	r3, [r7, #11]
    uint8_t color_low = data[i] & 0xFF;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	6a3a      	ldr	r2, [r7, #32]
 8001c22:	4413      	add	r3, r2
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	72bb      	strb	r3, [r7, #10]
    GC9A01A_WRITE_8BIT(color_high);
 8001c28:	7afb      	ldrb	r3, [r7, #11]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c3a:	f000 ff9f 	bl	8002b7c <HAL_GPIO_WritePin>
 8001c3e:	7afb      	ldrb	r3, [r7, #11]
 8001c40:	105b      	asrs	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c54:	f000 ff92 	bl	8002b7c <HAL_GPIO_WritePin>
 8001c58:	7afb      	ldrb	r3, [r7, #11]
 8001c5a:	109b      	asrs	r3, r3, #2
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c6a:	4866      	ldr	r0, [pc, #408]	@ (8001e04 <gc9a01a_draw_image+0x27c>)
 8001c6c:	f000 ff86 	bl	8002b7c <HAL_GPIO_WritePin>
 8001c70:	7afb      	ldrb	r3, [r7, #11]
 8001c72:	10db      	asrs	r3, r3, #3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c82:	4860      	ldr	r0, [pc, #384]	@ (8001e04 <gc9a01a_draw_image+0x27c>)
 8001c84:	f000 ff7a 	bl	8002b7c <HAL_GPIO_WritePin>
 8001c88:	7afb      	ldrb	r3, [r7, #11]
 8001c8a:	111b      	asrs	r3, r3, #4
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c9a:	485a      	ldr	r0, [pc, #360]	@ (8001e04 <gc9a01a_draw_image+0x27c>)
 8001c9c:	f000 ff6e 	bl	8002b7c <HAL_GPIO_WritePin>
 8001ca0:	7afb      	ldrb	r3, [r7, #11]
 8001ca2:	115b      	asrs	r3, r3, #5
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cb2:	4854      	ldr	r0, [pc, #336]	@ (8001e04 <gc9a01a_draw_image+0x27c>)
 8001cb4:	f000 ff62 	bl	8002b7c <HAL_GPIO_WritePin>
 8001cb8:	7afb      	ldrb	r3, [r7, #11]
 8001cba:	119b      	asrs	r3, r3, #6
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cca:	484e      	ldr	r0, [pc, #312]	@ (8001e04 <gc9a01a_draw_image+0x27c>)
 8001ccc:	f000 ff56 	bl	8002b7c <HAL_GPIO_WritePin>
 8001cd0:	7afb      	ldrb	r3, [r7, #11]
 8001cd2:	09db      	lsrs	r3, r3, #7
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cdc:	4849      	ldr	r0, [pc, #292]	@ (8001e04 <gc9a01a_draw_image+0x27c>)
 8001cde:	f000 ff4d 	bl	8002b7c <HAL_GPIO_WritePin>
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ce8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cec:	f000 ff46 	bl	8002b7c <HAL_GPIO_WritePin>
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cfa:	f000 ff3f 	bl	8002b7c <HAL_GPIO_WritePin>
    GC9A01A_WRITE_8BIT(color_low);
 8001cfe:	7abb      	ldrb	r3, [r7, #10]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d10:	f000 ff34 	bl	8002b7c <HAL_GPIO_WritePin>
 8001d14:	7abb      	ldrb	r3, [r7, #10]
 8001d16:	105b      	asrs	r3, r3, #1
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d2a:	f000 ff27 	bl	8002b7c <HAL_GPIO_WritePin>
 8001d2e:	7abb      	ldrb	r3, [r7, #10]
 8001d30:	109b      	asrs	r3, r3, #2
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d40:	4830      	ldr	r0, [pc, #192]	@ (8001e04 <gc9a01a_draw_image+0x27c>)
 8001d42:	f000 ff1b 	bl	8002b7c <HAL_GPIO_WritePin>
 8001d46:	7abb      	ldrb	r3, [r7, #10]
 8001d48:	10db      	asrs	r3, r3, #3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d58:	482a      	ldr	r0, [pc, #168]	@ (8001e04 <gc9a01a_draw_image+0x27c>)
 8001d5a:	f000 ff0f 	bl	8002b7c <HAL_GPIO_WritePin>
 8001d5e:	7abb      	ldrb	r3, [r7, #10]
 8001d60:	111b      	asrs	r3, r3, #4
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d70:	4824      	ldr	r0, [pc, #144]	@ (8001e04 <gc9a01a_draw_image+0x27c>)
 8001d72:	f000 ff03 	bl	8002b7c <HAL_GPIO_WritePin>
 8001d76:	7abb      	ldrb	r3, [r7, #10]
 8001d78:	115b      	asrs	r3, r3, #5
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d88:	481e      	ldr	r0, [pc, #120]	@ (8001e04 <gc9a01a_draw_image+0x27c>)
 8001d8a:	f000 fef7 	bl	8002b7c <HAL_GPIO_WritePin>
 8001d8e:	7abb      	ldrb	r3, [r7, #10]
 8001d90:	119b      	asrs	r3, r3, #6
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001da0:	4818      	ldr	r0, [pc, #96]	@ (8001e04 <gc9a01a_draw_image+0x27c>)
 8001da2:	f000 feeb 	bl	8002b7c <HAL_GPIO_WritePin>
 8001da6:	7abb      	ldrb	r3, [r7, #10]
 8001da8:	09db      	lsrs	r3, r3, #7
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001db2:	4814      	ldr	r0, [pc, #80]	@ (8001e04 <gc9a01a_draw_image+0x27c>)
 8001db4:	f000 fee2 	bl	8002b7c <HAL_GPIO_WritePin>
 8001db8:	2200      	movs	r2, #0
 8001dba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dc2:	f000 fedb 	bl	8002b7c <HAL_GPIO_WritePin>
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd0:	f000 fed4 	bl	8002b7c <HAL_GPIO_WritePin>
  for (uint32_t i = 0; i < w * h; i++) {
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	88bb      	ldrh	r3, [r7, #4]
 8001ddc:	883a      	ldrh	r2, [r7, #0]
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4293      	cmp	r3, r2
 8001de8:	f4ff af10 	bcc.w	8001c0c <gc9a01a_draw_image+0x84>
  }
  GC9A01A_CS_HIGH;
 8001dec:	2201      	movs	r2, #1
 8001dee:	2108      	movs	r1, #8
 8001df0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001df4:	f000 fec2 	bl	8002b7c <HAL_GPIO_WritePin>
 8001df8:	e000      	b.n	8001dfc <gc9a01a_draw_image+0x274>
  if ((x >= GC9A01A_WIDTH) || (y >= GC9A01A_HEIGHT)) return;
 8001dfa:	bf00      	nop
}
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd90      	pop	{r4, r7, pc}
 8001e02:	bf00      	nop
 8001e04:	48000400 	.word	0x48000400

08001e08 <gc9a01a_lcd_fill_image>:
/**
  * @brief  Draw an full scale image on the GC9A01A LCD(240 x 240)
  * @param  data: Pointer to the image data (RGB565 format)
  * @retval None
  */
void gc9a01a_lcd_fill_image(const uint16_t* data){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	6078      	str	r0, [r7, #4]
  gc9a01a_draw_image(0, GC9A01A_WIDTH, 0, GC9A01A_HEIGHT, data);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	23f0      	movs	r3, #240	@ 0xf0
 8001e16:	2200      	movs	r2, #0
 8001e18:	21f0      	movs	r1, #240	@ 0xf0
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f7ff feb4 	bl	8001b88 <gc9a01a_draw_image>
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e2c:	f000 fb5e 	bl	80024ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e30:	f000 f816 	bl	8001e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e34:	f000 f8b0 	bl	8001f98 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e38:	f000 f86e 	bl	8001f18 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  bsp_lcd_init();
 8001e3c:	f7ff fc06 	bl	800164c <bsp_lcd_init>
  CST816S_init();
 8001e40:	f7fe fa9e 	bl	8000380 <CST816S_init>

  display_vibgyor_sequence();
 8001e44:	f000 f920 	bl	8002088 <display_vibgyor_sequence>
  HAL_Delay(1000);
 8001e48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e4c:	f000 fbb4 	bl	80025b8 <HAL_Delay>
  gc9a01a_lcd_fill_image(image);
 8001e50:	4802      	ldr	r0, [pc, #8]	@ (8001e5c <main+0x34>)
 8001e52:	f7ff ffd9 	bl	8001e08 <gc9a01a_lcd_fill_image>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    display_gesture();
 8001e56:	f000 f9a7 	bl	80021a8 <display_gesture>
 8001e5a:	e7fc      	b.n	8001e56 <main+0x2e>
 8001e5c:	0800697c 	.word	0x0800697c

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b09e      	sub	sp, #120	@ 0x78
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001e6a:	2228      	movs	r2, #40	@ 0x28
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 f845 	bl	8004efe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e84:	463b      	mov	r3, r7
 8001e86:	223c      	movs	r2, #60	@ 0x3c
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 f837 	bl	8004efe <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001e90:	2303      	movs	r3, #3
 8001e92:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e98:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ea2:	2310      	movs	r3, #16
 8001ea4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eaa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001eae:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001eb0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001eb4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f001 fb4a 	bl	8003554 <HAL_RCC_OscConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001ec6:	f000 f98c 	bl	80021e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eca:	230f      	movs	r3, #15
 8001ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ee0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f002 fb72 	bl	80045d0 <HAL_RCC_ClockConfig>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001ef2:	f000 f976 	bl	80021e2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001efe:	463b      	mov	r3, r7
 8001f00:	4618      	mov	r0, r3
 8001f02:	f002 fd35 	bl	8004970 <HAL_RCCEx_PeriphCLKConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001f0c:	f000 f969 	bl	80021e2 <Error_Handler>
  }
}
 8001f10:	bf00      	nop
 8001f12:	3778      	adds	r7, #120	@ 0x78
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001f90 <MX_I2C1_Init+0x78>)
 8001f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001f22:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f24:	4a1b      	ldr	r2, [pc, #108]	@ (8001f94 <MX_I2C1_Init+0x7c>)
 8001f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f28:	4b18      	ldr	r3, [pc, #96]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f2e:	4b17      	ldr	r3, [pc, #92]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f34:	4b15      	ldr	r3, [pc, #84]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f3a:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f40:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f46:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f52:	480e      	ldr	r0, [pc, #56]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f54:	f000 fe42 	bl	8002bdc <HAL_I2C_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f5e:	f000 f940 	bl	80021e2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f62:	2100      	movs	r1, #0
 8001f64:	4809      	ldr	r0, [pc, #36]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f66:	f001 fa5d 	bl	8003424 <HAL_I2CEx_ConfigAnalogFilter>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f70:	f000 f937 	bl	80021e2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f74:	2100      	movs	r1, #0
 8001f76:	4805      	ldr	r0, [pc, #20]	@ (8001f8c <MX_I2C1_Init+0x74>)
 8001f78:	f001 fa9f 	bl	80034ba <HAL_I2CEx_ConfigDigitalFilter>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f82:	f000 f92e 	bl	80021e2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200000a0 	.word	0x200000a0
 8001f90:	40005400 	.word	0x40005400
 8001f94:	2000090e 	.word	0x2000090e

08001f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
 8001fac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fae:	4b34      	ldr	r3, [pc, #208]	@ (8002080 <MX_GPIO_Init+0xe8>)
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	4a33      	ldr	r2, [pc, #204]	@ (8002080 <MX_GPIO_Init+0xe8>)
 8001fb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fb8:	6153      	str	r3, [r2, #20]
 8001fba:	4b31      	ldr	r3, [pc, #196]	@ (8002080 <MX_GPIO_Init+0xe8>)
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8002080 <MX_GPIO_Init+0xe8>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	4a2d      	ldr	r2, [pc, #180]	@ (8002080 <MX_GPIO_Init+0xe8>)
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fd0:	6153      	str	r3, [r2, #20]
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002080 <MX_GPIO_Init+0xe8>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	4b28      	ldr	r3, [pc, #160]	@ (8002080 <MX_GPIO_Init+0xe8>)
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	4a27      	ldr	r2, [pc, #156]	@ (8002080 <MX_GPIO_Init+0xe8>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe8:	6153      	str	r3, [r2, #20]
 8001fea:	4b25      	ldr	r3, [pc, #148]	@ (8002080 <MX_GPIO_Init+0xe8>)
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_TE_Pin|LCD_CSX_Pin|BL_A_Pin|BD1_Pin
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f248 611a 	movw	r1, #34330	@ 0x861a
 8001ffc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002000:	f000 fdbc 	bl	8002b7c <HAL_GPIO_WritePin>
                          |BD0_Pin|WRD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RDX_Pin|DCX_Pin|BD7_Pin|BD6_Pin
 8002004:	2200      	movs	r2, #0
 8002006:	f64f 5113 	movw	r1, #64787	@ 0xfd13
 800200a:	481e      	ldr	r0, [pc, #120]	@ (8002084 <MX_GPIO_Init+0xec>)
 800200c:	f000 fdb6 	bl	8002b7c <HAL_GPIO_WritePin>
                          |BD5_Pin|BD4_Pin|BD3_Pin|BD2_Pin
                          |TP_RST_Pin|LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_TE_Pin LCD_CSX_Pin BL_A_Pin BD1_Pin
                           BD0_Pin WRD_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin|LCD_CSX_Pin|BL_A_Pin|BD1_Pin
 8002010:	f248 631a 	movw	r3, #34330	@ 0x861a
 8002014:	60fb      	str	r3, [r7, #12]
                          |BD0_Pin|WRD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002016:	2301      	movs	r3, #1
 8002018:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	4619      	mov	r1, r3
 8002028:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800202c:	f000 fc2c 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RDX_Pin DCX_Pin BD7_Pin BD6_Pin
                           BD5_Pin BD4_Pin BD3_Pin BD2_Pin
                           TP_RST_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RDX_Pin|DCX_Pin|BD7_Pin|BD6_Pin
 8002030:	f64f 5313 	movw	r3, #64787	@ 0xfd13
 8002034:	60fb      	str	r3, [r7, #12]
                          |BD5_Pin|BD4_Pin|BD3_Pin|BD2_Pin
                          |TP_RST_Pin|LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002036:	2301      	movs	r3, #1
 8002038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	4619      	mov	r1, r3
 8002048:	480e      	ldr	r0, [pc, #56]	@ (8002084 <MX_GPIO_Init+0xec>)
 800204a:	f000 fc1d 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IN_Pin */
  GPIO_InitStruct.Pin = TP_IN_Pin;
 800204e:	2320      	movs	r3, #32
 8002050:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002052:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002056:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_IN_GPIO_Port, &GPIO_InitStruct);
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	4619      	mov	r1, r3
 8002062:	4808      	ldr	r0, [pc, #32]	@ (8002084 <MX_GPIO_Init+0xec>)
 8002064:	f000 fc10 	bl	8002888 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002068:	2200      	movs	r2, #0
 800206a:	2100      	movs	r1, #0
 800206c:	2017      	movs	r0, #23
 800206e:	f000 fbc6 	bl	80027fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002072:	2017      	movs	r0, #23
 8002074:	f000 fbdf 	bl	8002836 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002078:	bf00      	nop
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	48000400 	.word	0x48000400

08002088 <display_vibgyor_sequence>:
/**
  * @brief  Displays a VIBGYOR color sequence on the LCD.
  *         This function assumes VIOLET, INDIGO, BLUE, GREEN, YELLOW, ORANGE, and RED are defined color values.
  * @retval None
  */
static void display_vibgyor_sequence() {
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b085      	sub	sp, #20
 800208c:	af02      	add	r7, sp, #8
  uint8_t x_start = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	71fb      	strb	r3, [r7, #7]
  //uint8_t y_start = 0;
  uint8_t x_width = 240;
 8002092:	23f0      	movs	r3, #240	@ 0xf0
 8002094:	71bb      	strb	r3, [r7, #6]
  uint8_t y_height = 34;
 8002096:	2322      	movs	r3, #34	@ 0x22
 8002098:	717b      	strb	r3, [r7, #5]
  gc9a01a_fill_rect(x_start, x_width, y_height*0, y_height, VIOLET);
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	b298      	uxth	r0, r3
 800209e:	79bb      	ldrb	r3, [r7, #6]
 80020a0:	b299      	uxth	r1, r3
 80020a2:	797b      	ldrb	r3, [r7, #5]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	f248 021f 	movw	r2, #32799	@ 0x801f
 80020aa:	9200      	str	r2, [sp, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f7ff fbbf 	bl	8001830 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start, x_width, y_height*1, y_height, INDIGO);
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	b298      	uxth	r0, r3
 80020b6:	79bb      	ldrb	r3, [r7, #6]
 80020b8:	b299      	uxth	r1, r3
 80020ba:	797b      	ldrb	r3, [r7, #5]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	797b      	ldrb	r3, [r7, #5]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	f644 040f 	movw	r4, #18447	@ 0x480f
 80020c6:	9400      	str	r4, [sp, #0]
 80020c8:	f7ff fbb2 	bl	8001830 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start, x_width, y_height*2, y_height, BLUE);
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	b298      	uxth	r0, r3
 80020d0:	79bb      	ldrb	r3, [r7, #6]
 80020d2:	b299      	uxth	r1, r3
 80020d4:	797b      	ldrb	r3, [r7, #5]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	b29a      	uxth	r2, r3
 80020dc:	797b      	ldrb	r3, [r7, #5]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	241f      	movs	r4, #31
 80020e2:	9400      	str	r4, [sp, #0]
 80020e4:	f7ff fba4 	bl	8001830 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start, x_width, y_height*3, y_height, GREEN);
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	b298      	uxth	r0, r3
 80020ec:	79bb      	ldrb	r3, [r7, #6]
 80020ee:	b299      	uxth	r1, r3
 80020f0:	797b      	ldrb	r3, [r7, #5]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	0052      	lsls	r2, r2, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	797b      	ldrb	r3, [r7, #5]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 8002104:	9400      	str	r4, [sp, #0]
 8002106:	f7ff fb93 	bl	8001830 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start, x_width, y_height*4, y_height, YELLOW);
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	b298      	uxth	r0, r3
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	b299      	uxth	r1, r3
 8002112:	797b      	ldrb	r3, [r7, #5]
 8002114:	b29b      	uxth	r3, r3
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	b29a      	uxth	r2, r3
 800211a:	797b      	ldrb	r3, [r7, #5]
 800211c:	b29b      	uxth	r3, r3
 800211e:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8002122:	9400      	str	r4, [sp, #0]
 8002124:	f7ff fb84 	bl	8001830 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start, x_width, y_height*5, y_height, ORANGE );
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	b298      	uxth	r0, r3
 800212c:	79bb      	ldrb	r3, [r7, #6]
 800212e:	b299      	uxth	r1, r3
 8002130:	797b      	ldrb	r3, [r7, #5]
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	0092      	lsls	r2, r2, #2
 8002138:	4413      	add	r3, r2
 800213a:	b29a      	uxth	r2, r3
 800213c:	797b      	ldrb	r3, [r7, #5]
 800213e:	b29b      	uxth	r3, r3
 8002140:	f44f 447c 	mov.w	r4, #64512	@ 0xfc00
 8002144:	9400      	str	r4, [sp, #0]
 8002146:	f7ff fb73 	bl	8001830 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start, x_width, y_height*6, y_height, RED);
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	b298      	uxth	r0, r3
 800214e:	79bb      	ldrb	r3, [r7, #6]
 8002150:	b299      	uxth	r1, r3
 8002152:	797b      	ldrb	r3, [r7, #5]
 8002154:	b29b      	uxth	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	0052      	lsls	r2, r2, #1
 800215a:	4413      	add	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	797b      	ldrb	r3, [r7, #5]
 8002162:	b29b      	uxth	r3, r3
 8002164:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 8002168:	9400      	str	r4, [sp, #0]
 800216a:	f7ff fb61 	bl	8001830 <gc9a01a_fill_rect>
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}
	...

08002178 <bsp_lcd_print>:
/**
  * @brief  Prints a string on the LCD at a specified position and with specified colors.
  * @param  str: Pointer to the null-terminated string to be printed.
  * @retval None
  */
static void bsp_lcd_print(const char* str) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af04      	add	r7, sp, #16
 800217e:	6078      	str	r0, [r7, #4]
  gc9a01a_write_string(34, 111, str, Font_11x18, RED, BLACK);
 8002180:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <bsp_lcd_print+0x2c>)
 8002182:	2200      	movs	r2, #0
 8002184:	9202      	str	r2, [sp, #8]
 8002186:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800218a:	9201      	str	r2, [sp, #4]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	9200      	str	r2, [sp, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	216f      	movs	r1, #111	@ 0x6f
 8002196:	2022      	movs	r0, #34	@ 0x22
 8002198:	f7ff faf8 	bl	800178c <gc9a01a_write_string>
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000000 	.word	0x20000000

080021a8 <display_gesture>:

/**
  * @brief  Continuously reads and displays gestures from the CST816S touch sensor on the LCD.
  * @retval None
  */
static void display_gesture(void) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0

  CST816S_init();
 80021ae:	f7fe f8e7 	bl	8000380 <CST816S_init>

  struct touch_data data;
  while(1) {
    if(CST816S_data_available()) {
 80021b2:	f7fe f913 	bl	80003dc <CST816S_data_available>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0fa      	beq.n	80021b2 <display_gesture+0xa>
      memcpy(&data, CST816S_get_data(), sizeof(struct touch_data));
 80021bc:	f7fe f8a4 	bl	8000308 <CST816S_get_data>
 80021c0:	4601      	mov	r1, r0
 80021c2:	463b      	mov	r3, r7
 80021c4:	2210      	movs	r2, #16
 80021c6:	4618      	mov	r0, r3
 80021c8:	f002 ff15 	bl	8004ff6 <memcpy>
      UNUSED(data);

      bsp_lcd_print(CST816S_gesture());
 80021cc:	f7fe f926 	bl	800041c <CST816S_gesture>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ffd0 	bl	8002178 <bsp_lcd_print>

      HAL_Delay(300);
 80021d8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80021dc:	f000 f9ec 	bl	80025b8 <HAL_Delay>
    if(CST816S_data_available()) {
 80021e0:	e7e7      	b.n	80021b2 <display_gesture+0xa>

080021e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e6:	b672      	cpsid	i
}
 80021e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021ea:	bf00      	nop
 80021ec:	e7fd      	b.n	80021ea <Error_Handler+0x8>
	...

080021f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <HAL_MspInit+0x44>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002234 <HAL_MspInit+0x44>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6193      	str	r3, [r2, #24]
 8002202:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <HAL_MspInit+0x44>)
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <HAL_MspInit+0x44>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4a08      	ldr	r2, [pc, #32]	@ (8002234 <HAL_MspInit+0x44>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002218:	61d3      	str	r3, [r2, #28]
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <HAL_MspInit+0x44>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000

08002238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	@ 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a17      	ldr	r2, [pc, #92]	@ (80022b4 <HAL_I2C_MspInit+0x7c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d127      	bne.n	80022aa <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225a:	4b17      	ldr	r3, [pc, #92]	@ (80022b8 <HAL_I2C_MspInit+0x80>)
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	4a16      	ldr	r2, [pc, #88]	@ (80022b8 <HAL_I2C_MspInit+0x80>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002264:	6153      	str	r3, [r2, #20]
 8002266:	4b14      	ldr	r3, [pc, #80]	@ (80022b8 <HAL_I2C_MspInit+0x80>)
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TP_SCL_Pin|TP_SDA_Pin;
 8002272:	23c0      	movs	r3, #192	@ 0xc0
 8002274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002276:	2312      	movs	r3, #18
 8002278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002282:	2304      	movs	r3, #4
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	480b      	ldr	r0, [pc, #44]	@ (80022bc <HAL_I2C_MspInit+0x84>)
 800228e:	f000 fafb 	bl	8002888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002292:	4b09      	ldr	r3, [pc, #36]	@ (80022b8 <HAL_I2C_MspInit+0x80>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4a08      	ldr	r2, [pc, #32]	@ (80022b8 <HAL_I2C_MspInit+0x80>)
 8002298:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800229c:	61d3      	str	r3, [r2, #28]
 800229e:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <HAL_I2C_MspInit+0x80>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022aa:	bf00      	nop
 80022ac:	3728      	adds	r7, #40	@ 0x28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40005400 	.word	0x40005400
 80022b8:	40021000 	.word	0x40021000
 80022bc:	48000400 	.word	0x48000400

080022c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <NMI_Handler+0x4>

080022c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <HardFault_Handler+0x4>

080022d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <MemManage_Handler+0x4>

080022d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022dc:	bf00      	nop
 80022de:	e7fd      	b.n	80022dc <BusFault_Handler+0x4>

080022e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <UsageFault_Handler+0x4>

080022e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002316:	f000 f92f 	bl	8002578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}

0800231e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IN_Pin);
 8002322:	2020      	movs	r0, #32
 8002324:	f000 fc42 	bl	8002bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e00a      	b.n	8002354 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800233e:	f3af 8000 	nop.w
 8002342:	4601      	mov	r1, r0
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	60ba      	str	r2, [r7, #8]
 800234a:	b2ca      	uxtb	r2, r1
 800234c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	dbf0      	blt.n	800233e <_read+0x12>
  }

  return len;
 800235c:	687b      	ldr	r3, [r7, #4]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e009      	b.n	800238c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	60ba      	str	r2, [r7, #8]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	dbf1      	blt.n	8002378 <_write+0x12>
  }
  return len;
 8002394:	687b      	ldr	r3, [r7, #4]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_close>:

int _close(int file)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023c6:	605a      	str	r2, [r3, #4]
  return 0;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_isatty>:

int _isatty(int file)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023de:	2301      	movs	r3, #1
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002410:	4a14      	ldr	r2, [pc, #80]	@ (8002464 <_sbrk+0x5c>)
 8002412:	4b15      	ldr	r3, [pc, #84]	@ (8002468 <_sbrk+0x60>)
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800241c:	4b13      	ldr	r3, [pc, #76]	@ (800246c <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002424:	4b11      	ldr	r3, [pc, #68]	@ (800246c <_sbrk+0x64>)
 8002426:	4a12      	ldr	r2, [pc, #72]	@ (8002470 <_sbrk+0x68>)
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242a:	4b10      	ldr	r3, [pc, #64]	@ (800246c <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	429a      	cmp	r2, r3
 8002436:	d207      	bcs.n	8002448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002438:	f002 fdb0 	bl	8004f9c <__errno>
 800243c:	4603      	mov	r3, r0
 800243e:	220c      	movs	r2, #12
 8002440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	e009      	b.n	800245c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002448:	4b08      	ldr	r3, [pc, #32]	@ (800246c <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244e:	4b07      	ldr	r3, [pc, #28]	@ (800246c <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	4a05      	ldr	r2, [pc, #20]	@ (800246c <_sbrk+0x64>)
 8002458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	2000a000 	.word	0x2000a000
 8002468:	00000600 	.word	0x00000600
 800246c:	200000f4 	.word	0x200000f4
 8002470:	20000248 	.word	0x20000248

08002474 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002478:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <SystemInit+0x20>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247e:	4a05      	ldr	r2, [pc, #20]	@ (8002494 <SystemInit+0x20>)
 8002480:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002484:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002498:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800249c:	f7ff ffea 	bl	8002474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a0:	480c      	ldr	r0, [pc, #48]	@ (80024d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80024a2:	490d      	ldr	r1, [pc, #52]	@ (80024d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024a4:	4a0d      	ldr	r2, [pc, #52]	@ (80024dc <LoopForever+0xe>)
  movs r3, #0
 80024a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a8:	e002      	b.n	80024b0 <LoopCopyDataInit>

080024aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ae:	3304      	adds	r3, #4

080024b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b4:	d3f9      	bcc.n	80024aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b6:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024b8:	4c0a      	ldr	r4, [pc, #40]	@ (80024e4 <LoopForever+0x16>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024bc:	e001      	b.n	80024c2 <LoopFillZerobss>

080024be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c0:	3204      	adds	r2, #4

080024c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c4:	d3fb      	bcc.n	80024be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024c6:	f002 fd6f 	bl	8004fa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ca:	f7ff fcad 	bl	8001e28 <main>

080024ce <LoopForever>:

LoopForever:
    b LoopForever
 80024ce:	e7fe      	b.n	80024ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024d0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80024d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80024dc:	08022bf0 	.word	0x08022bf0
  ldr r2, =_sbss
 80024e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80024e4:	20000248 	.word	0x20000248

080024e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024e8:	e7fe      	b.n	80024e8 <ADC1_2_IRQHandler>
	...

080024ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f0:	4b08      	ldr	r3, [pc, #32]	@ (8002514 <HAL_Init+0x28>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a07      	ldr	r2, [pc, #28]	@ (8002514 <HAL_Init+0x28>)
 80024f6:	f043 0310 	orr.w	r3, r3, #16
 80024fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024fc:	2003      	movs	r0, #3
 80024fe:	f000 f973 	bl	80027e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002502:	200f      	movs	r0, #15
 8002504:	f000 f808 	bl	8002518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002508:	f7ff fe72 	bl	80021f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40022000 	.word	0x40022000

08002518 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002520:	4b12      	ldr	r3, [pc, #72]	@ (800256c <HAL_InitTick+0x54>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b12      	ldr	r3, [pc, #72]	@ (8002570 <HAL_InitTick+0x58>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	4619      	mov	r1, r3
 800252a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800252e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f999 	bl	800286e <HAL_SYSTICK_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e00e      	b.n	8002564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b0f      	cmp	r3, #15
 800254a:	d80a      	bhi.n	8002562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800254c:	2200      	movs	r2, #0
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	f000 f953 	bl	80027fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002558:	4a06      	ldr	r2, [pc, #24]	@ (8002574 <HAL_InitTick+0x5c>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e000      	b.n	8002564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000008 	.word	0x20000008
 8002570:	20000010 	.word	0x20000010
 8002574:	2000000c 	.word	0x2000000c

08002578 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <HAL_IncTick+0x20>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	4b06      	ldr	r3, [pc, #24]	@ (800259c <HAL_IncTick+0x24>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4413      	add	r3, r2
 8002588:	4a04      	ldr	r2, [pc, #16]	@ (800259c <HAL_IncTick+0x24>)
 800258a:	6013      	str	r3, [r2, #0]
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000010 	.word	0x20000010
 800259c:	200000f8 	.word	0x200000f8

080025a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80025a4:	4b03      	ldr	r3, [pc, #12]	@ (80025b4 <HAL_GetTick+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	200000f8 	.word	0x200000f8

080025b8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff ffee 	bl	80025a0 <HAL_GetTick>
 80025c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d0:	d005      	beq.n	80025de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025d2:	4b0a      	ldr	r3, [pc, #40]	@ (80025fc <HAL_Delay+0x44>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80025de:	bf00      	nop
 80025e0:	f7ff ffde 	bl	80025a0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d8f7      	bhi.n	80025e0 <HAL_Delay+0x28>
  {
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000010 	.word	0x20000010

08002600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002610:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800261c:	4013      	ands	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002628:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800262c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002632:	4a04      	ldr	r2, [pc, #16]	@ (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	60d3      	str	r3, [r2, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800264c:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <__NVIC_GetPriorityGrouping+0x18>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 0307 	and.w	r3, r3, #7
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	2b00      	cmp	r3, #0
 8002674:	db0b      	blt.n	800268e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4907      	ldr	r1, [pc, #28]	@ (800269c <__NVIC_EnableIRQ+0x38>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2001      	movs	r0, #1
 8002686:	fa00 f202 	lsl.w	r2, r0, r2
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000e100 	.word	0xe000e100

080026a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	db12      	blt.n	80026d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	490a      	ldr	r1, [pc, #40]	@ (80026e4 <__NVIC_DisableIRQ+0x44>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2001      	movs	r0, #1
 80026c2:	fa00 f202 	lsl.w	r2, r0, r2
 80026c6:	3320      	adds	r3, #32
 80026c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026cc:	f3bf 8f4f 	dsb	sy
}
 80026d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026d2:	f3bf 8f6f 	isb	sy
}
 80026d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000e100 	.word	0xe000e100

080026e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	6039      	str	r1, [r7, #0]
 80026f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	db0a      	blt.n	8002712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	490c      	ldr	r1, [pc, #48]	@ (8002734 <__NVIC_SetPriority+0x4c>)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	0112      	lsls	r2, r2, #4
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	440b      	add	r3, r1
 800270c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002710:	e00a      	b.n	8002728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4908      	ldr	r1, [pc, #32]	@ (8002738 <__NVIC_SetPriority+0x50>)
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	3b04      	subs	r3, #4
 8002720:	0112      	lsls	r2, r2, #4
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	440b      	add	r3, r1
 8002726:	761a      	strb	r2, [r3, #24]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000e100 	.word	0xe000e100
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	@ 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f1c3 0307 	rsb	r3, r3, #7
 8002756:	2b04      	cmp	r3, #4
 8002758:	bf28      	it	cs
 800275a:	2304      	movcs	r3, #4
 800275c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3304      	adds	r3, #4
 8002762:	2b06      	cmp	r3, #6
 8002764:	d902      	bls.n	800276c <NVIC_EncodePriority+0x30>
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3b03      	subs	r3, #3
 800276a:	e000      	b.n	800276e <NVIC_EncodePriority+0x32>
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	f04f 32ff 	mov.w	r2, #4294967295
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43da      	mvns	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	401a      	ands	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002784:	f04f 31ff 	mov.w	r1, #4294967295
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	fa01 f303 	lsl.w	r3, r1, r3
 800278e:	43d9      	mvns	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	4313      	orrs	r3, r2
         );
}
 8002796:	4618      	mov	r0, r3
 8002798:	3724      	adds	r7, #36	@ 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027b4:	d301      	bcc.n	80027ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00f      	b.n	80027da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ba:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <SysTick_Config+0x40>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c2:	210f      	movs	r1, #15
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
 80027c8:	f7ff ff8e 	bl	80026e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027cc:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <SysTick_Config+0x40>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d2:	4b04      	ldr	r3, [pc, #16]	@ (80027e4 <SysTick_Config+0x40>)
 80027d4:	2207      	movs	r2, #7
 80027d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ff05 	bl	8002600 <__NVIC_SetPriorityGrouping>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002810:	f7ff ff1a 	bl	8002648 <__NVIC_GetPriorityGrouping>
 8002814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7ff ff8e 	bl	800273c <NVIC_EncodePriority>
 8002820:	4602      	mov	r2, r0
 8002822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff5d 	bl	80026e8 <__NVIC_SetPriority>
}
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff0d 	bl	8002664 <__NVIC_EnableIRQ>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff1d 	bl	80026a0 <__NVIC_DisableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ff94 	bl	80027a4 <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002896:	e154      	b.n	8002b42 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2101      	movs	r1, #1
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	fa01 f303 	lsl.w	r3, r1, r3
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8146 	beq.w	8002b3c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d005      	beq.n	80028c8 <HAL_GPIO_Init+0x40>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d130      	bne.n	800292a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4013      	ands	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028fe:	2201      	movs	r2, #1
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	f003 0201 	and.w	r2, r3, #1
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b03      	cmp	r3, #3
 8002934:	d017      	beq.n	8002966 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	2203      	movs	r2, #3
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d123      	bne.n	80029ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	08da      	lsrs	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3208      	adds	r2, #8
 800297a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	220f      	movs	r2, #15
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	08da      	lsrs	r2, r3, #3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3208      	adds	r2, #8
 80029b4:	6939      	ldr	r1, [r7, #16]
 80029b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	2203      	movs	r2, #3
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0203 	and.w	r2, r3, #3
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80a0 	beq.w	8002b3c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fc:	4b58      	ldr	r3, [pc, #352]	@ (8002b60 <HAL_GPIO_Init+0x2d8>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	4a57      	ldr	r2, [pc, #348]	@ (8002b60 <HAL_GPIO_Init+0x2d8>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6193      	str	r3, [r2, #24]
 8002a08:	4b55      	ldr	r3, [pc, #340]	@ (8002b60 <HAL_GPIO_Init+0x2d8>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a14:	4a53      	ldr	r2, [pc, #332]	@ (8002b64 <HAL_GPIO_Init+0x2dc>)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	089b      	lsrs	r3, r3, #2
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	220f      	movs	r2, #15
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a3e:	d019      	beq.n	8002a74 <HAL_GPIO_Init+0x1ec>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a49      	ldr	r2, [pc, #292]	@ (8002b68 <HAL_GPIO_Init+0x2e0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d013      	beq.n	8002a70 <HAL_GPIO_Init+0x1e8>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a48      	ldr	r2, [pc, #288]	@ (8002b6c <HAL_GPIO_Init+0x2e4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00d      	beq.n	8002a6c <HAL_GPIO_Init+0x1e4>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a47      	ldr	r2, [pc, #284]	@ (8002b70 <HAL_GPIO_Init+0x2e8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d007      	beq.n	8002a68 <HAL_GPIO_Init+0x1e0>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a46      	ldr	r2, [pc, #280]	@ (8002b74 <HAL_GPIO_Init+0x2ec>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d101      	bne.n	8002a64 <HAL_GPIO_Init+0x1dc>
 8002a60:	2304      	movs	r3, #4
 8002a62:	e008      	b.n	8002a76 <HAL_GPIO_Init+0x1ee>
 8002a64:	2305      	movs	r3, #5
 8002a66:	e006      	b.n	8002a76 <HAL_GPIO_Init+0x1ee>
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e004      	b.n	8002a76 <HAL_GPIO_Init+0x1ee>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e002      	b.n	8002a76 <HAL_GPIO_Init+0x1ee>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <HAL_GPIO_Init+0x1ee>
 8002a74:	2300      	movs	r3, #0
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	f002 0203 	and.w	r2, r2, #3
 8002a7c:	0092      	lsls	r2, r2, #2
 8002a7e:	4093      	lsls	r3, r2
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a86:	4937      	ldr	r1, [pc, #220]	@ (8002b64 <HAL_GPIO_Init+0x2dc>)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a94:	4b38      	ldr	r3, [pc, #224]	@ (8002b78 <HAL_GPIO_Init+0x2f0>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ab8:	4a2f      	ldr	r2, [pc, #188]	@ (8002b78 <HAL_GPIO_Init+0x2f0>)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002abe:	4b2e      	ldr	r3, [pc, #184]	@ (8002b78 <HAL_GPIO_Init+0x2f0>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ae2:	4a25      	ldr	r2, [pc, #148]	@ (8002b78 <HAL_GPIO_Init+0x2f0>)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ae8:	4b23      	ldr	r3, [pc, #140]	@ (8002b78 <HAL_GPIO_Init+0x2f0>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b0c:	4a1a      	ldr	r2, [pc, #104]	@ (8002b78 <HAL_GPIO_Init+0x2f0>)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b12:	4b19      	ldr	r3, [pc, #100]	@ (8002b78 <HAL_GPIO_Init+0x2f0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b36:	4a10      	ldr	r2, [pc, #64]	@ (8002b78 <HAL_GPIO_Init+0x2f0>)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f47f aea3 	bne.w	8002898 <HAL_GPIO_Init+0x10>
  }
}
 8002b52:	bf00      	nop
 8002b54:	bf00      	nop
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40010000 	.word	0x40010000
 8002b68:	48000400 	.word	0x48000400
 8002b6c:	48000800 	.word	0x48000800
 8002b70:	48000c00 	.word	0x48000c00
 8002b74:	48001000 	.word	0x48001000
 8002b78:	40010400 	.word	0x40010400

08002b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b8c:	787b      	ldrb	r3, [r7, #1]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b98:	e002      	b.n	8002ba0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b9a:	887a      	ldrh	r2, [r7, #2]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bb6:	4b08      	ldr	r3, [pc, #32]	@ (8002bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d006      	beq.n	8002bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bc2:	4a05      	ldr	r2, [pc, #20]	@ (8002bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bc8:	88fb      	ldrh	r3, [r7, #6]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fba6 	bl	800031c <HAL_GPIO_EXTI_Callback>
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40010400 	.word	0x40010400

08002bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e08d      	b.n	8002d0a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff fb18 	bl	8002238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2224      	movs	r2, #36	@ 0x24
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	e006      	b.n	8002c64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002c62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d108      	bne.n	8002c7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c7a:	605a      	str	r2, [r3, #4]
 8002c7c:	e007      	b.n	8002c8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ca0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69d9      	ldr	r1, [r3, #28]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1a      	ldr	r2, [r3, #32]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	4608      	mov	r0, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	461a      	mov	r2, r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	817b      	strh	r3, [r7, #10]
 8002d26:	460b      	mov	r3, r1
 8002d28:	813b      	strh	r3, [r7, #8]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	f040 80fd 	bne.w	8002f36 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_I2C_Mem_Read+0x34>
 8002d42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d105      	bne.n	8002d54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d4e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0f1      	b.n	8002f38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_I2C_Mem_Read+0x4e>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e0ea      	b.n	8002f38 <HAL_I2C_Mem_Read+0x224>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d6a:	f7ff fc19 	bl	80025a0 <HAL_GetTick>
 8002d6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2319      	movs	r3, #25
 8002d76:	2201      	movs	r2, #1
 8002d78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f95b 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0d5      	b.n	8002f38 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2222      	movs	r2, #34	@ 0x22
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2240      	movs	r2, #64	@ 0x40
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002db4:	88f8      	ldrh	r0, [r7, #6]
 8002db6:	893a      	ldrh	r2, [r7, #8]
 8002db8:	8979      	ldrh	r1, [r7, #10]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f8bf 	bl	8002f48 <I2C_RequestMemoryRead>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0ad      	b.n	8002f38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2bff      	cmp	r3, #255	@ 0xff
 8002de4:	d90e      	bls.n	8002e04 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	8979      	ldrh	r1, [r7, #10]
 8002df4:	4b52      	ldr	r3, [pc, #328]	@ (8002f40 <HAL_I2C_Mem_Read+0x22c>)
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fadf 	bl	80033c0 <I2C_TransferConfig>
 8002e02:	e00f      	b.n	8002e24 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	8979      	ldrh	r1, [r7, #10]
 8002e16:	4b4a      	ldr	r3, [pc, #296]	@ (8002f40 <HAL_I2C_Mem_Read+0x22c>)
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 face 	bl	80033c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2104      	movs	r1, #4
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f902 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e07c      	b.n	8002f38 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d034      	beq.n	8002ee4 <HAL_I2C_Mem_Read+0x1d0>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d130      	bne.n	8002ee4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2180      	movs	r1, #128	@ 0x80
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f8d3 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e04d      	b.n	8002f38 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2bff      	cmp	r3, #255	@ 0xff
 8002ea4:	d90e      	bls.n	8002ec4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	8979      	ldrh	r1, [r7, #10]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 fa7f 	bl	80033c0 <I2C_TransferConfig>
 8002ec2:	e00f      	b.n	8002ee4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	8979      	ldrh	r1, [r7, #10]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 fa6e 	bl	80033c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d19a      	bne.n	8002e24 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f940 	bl	8003178 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e01a      	b.n	8002f38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2220      	movs	r2, #32
 8002f08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <HAL_I2C_Mem_Read+0x230>)
 8002f16:	400b      	ands	r3, r1
 8002f18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	e000      	b.n	8002f38 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
  }
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	80002400 	.word	0x80002400
 8002f44:	fe00e800 	.word	0xfe00e800

08002f48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	4608      	mov	r0, r1
 8002f52:	4611      	mov	r1, r2
 8002f54:	461a      	mov	r2, r3
 8002f56:	4603      	mov	r3, r0
 8002f58:	817b      	strh	r3, [r7, #10]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	813b      	strh	r3, [r7, #8]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	8979      	ldrh	r1, [r7, #10]
 8002f68:	4b20      	ldr	r3, [pc, #128]	@ (8002fec <I2C_RequestMemoryRead+0xa4>)
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fa26 	bl	80033c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	69b9      	ldr	r1, [r7, #24]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f8b6 	bl	80030ea <I2C_WaitOnTXISFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e02c      	b.n	8002fe2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d105      	bne.n	8002f9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f8e:	893b      	ldrh	r3, [r7, #8]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f98:	e015      	b.n	8002fc6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f9a:	893b      	ldrh	r3, [r7, #8]
 8002f9c:	0a1b      	lsrs	r3, r3, #8
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	69b9      	ldr	r1, [r7, #24]
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f89c 	bl	80030ea <I2C_WaitOnTXISFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e012      	b.n	8002fe2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fbc:	893b      	ldrh	r3, [r7, #8]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2140      	movs	r1, #64	@ 0x40
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f831 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	80002000 	.word	0x80002000

08002ff0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b02      	cmp	r3, #2
 8003004:	d103      	bne.n	800300e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2200      	movs	r2, #0
 800300c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d007      	beq.n	800302c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	619a      	str	r2, [r3, #24]
  }
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003048:	e03b      	b.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	6839      	ldr	r1, [r7, #0]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f8d6 	bl	8003200 <I2C_IsErrorOccurred>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e041      	b.n	80030e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d02d      	beq.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7ff fa9b 	bl	80025a0 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d122      	bne.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	4013      	ands	r3, r2
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	429a      	cmp	r2, r3
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	429a      	cmp	r2, r3
 8003098:	d113      	bne.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309e:	f043 0220 	orr.w	r2, r3, #32
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e00f      	b.n	80030e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699a      	ldr	r2, [r3, #24]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4013      	ands	r3, r2
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	bf0c      	ite	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	2300      	movne	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d0b4      	beq.n	800304a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030f6:	e033      	b.n	8003160 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f87f 	bl	8003200 <I2C_IsErrorOccurred>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e031      	b.n	8003170 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003112:	d025      	beq.n	8003160 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003114:	f7ff fa44 	bl	80025a0 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	429a      	cmp	r2, r3
 8003122:	d302      	bcc.n	800312a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d11a      	bne.n	8003160 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b02      	cmp	r3, #2
 8003136:	d013      	beq.n	8003160 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313c:	f043 0220 	orr.w	r2, r3, #32
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e007      	b.n	8003170 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d1c4      	bne.n	80030f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003184:	e02f      	b.n	80031e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f838 	bl	8003200 <I2C_IsErrorOccurred>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e02d      	b.n	80031f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7ff fa01 	bl	80025a0 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11a      	bne.n	80031e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d013      	beq.n	80031e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c2:	f043 0220 	orr.w	r2, r3, #32
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e007      	b.n	80031f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d1c8      	bne.n	8003186 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08a      	sub	sp, #40	@ 0x28
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b00      	cmp	r3, #0
 800322a:	d068      	beq.n	80032fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2210      	movs	r2, #16
 8003232:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003234:	e049      	b.n	80032ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d045      	beq.n	80032ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800323e:	f7ff f9af 	bl	80025a0 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	429a      	cmp	r2, r3
 800324c:	d302      	bcc.n	8003254 <I2C_IsErrorOccurred+0x54>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d13a      	bne.n	80032ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800325e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003266:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003272:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003276:	d121      	bne.n	80032bc <I2C_IsErrorOccurred+0xbc>
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800327e:	d01d      	beq.n	80032bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003280:	7cfb      	ldrb	r3, [r7, #19]
 8003282:	2b20      	cmp	r3, #32
 8003284:	d01a      	beq.n	80032bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003294:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003296:	f7ff f983 	bl	80025a0 <HAL_GetTick>
 800329a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800329c:	e00e      	b.n	80032bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800329e:	f7ff f97f 	bl	80025a0 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b19      	cmp	r3, #25
 80032aa:	d907      	bls.n	80032bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	f043 0320 	orr.w	r3, r3, #32
 80032b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80032ba:	e006      	b.n	80032ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	d1e9      	bne.n	800329e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d003      	beq.n	80032e0 <I2C_IsErrorOccurred+0xe0>
 80032d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0aa      	beq.n	8003236 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d103      	bne.n	80032f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2220      	movs	r2, #32
 80032ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	f043 0304 	orr.w	r3, r3, #4
 80032f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00b      	beq.n	8003328 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003320:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00b      	beq.n	800334a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	f043 0308 	orr.w	r3, r3, #8
 8003338:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003342:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00b      	beq.n	800336c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	f043 0302 	orr.w	r3, r3, #2
 800335a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003364:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800336c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003370:	2b00      	cmp	r3, #0
 8003372:	d01c      	beq.n	80033ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f7ff fe3b 	bl	8002ff0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6859      	ldr	r1, [r3, #4]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4b0d      	ldr	r3, [pc, #52]	@ (80033bc <I2C_IsErrorOccurred+0x1bc>)
 8003386:	400b      	ands	r3, r1
 8003388:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	431a      	orrs	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80033ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3728      	adds	r7, #40	@ 0x28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	fe00e800 	.word	0xfe00e800

080033c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	817b      	strh	r3, [r7, #10]
 80033ce:	4613      	mov	r3, r2
 80033d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033d2:	897b      	ldrh	r3, [r7, #10]
 80033d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033d8:	7a7b      	ldrb	r3, [r7, #9]
 80033da:	041b      	lsls	r3, r3, #16
 80033dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	0d5b      	lsrs	r3, r3, #21
 80033fa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80033fe:	4b08      	ldr	r3, [pc, #32]	@ (8003420 <I2C_TransferConfig+0x60>)
 8003400:	430b      	orrs	r3, r1
 8003402:	43db      	mvns	r3, r3
 8003404:	ea02 0103 	and.w	r1, r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	03ff63ff 	.word	0x03ff63ff

08003424 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b20      	cmp	r3, #32
 8003438:	d138      	bne.n	80034ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003444:	2302      	movs	r3, #2
 8003446:	e032      	b.n	80034ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2224      	movs	r2, #36	@ 0x24
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0201 	bic.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003476:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6819      	ldr	r1, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e000      	b.n	80034ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034ac:	2302      	movs	r3, #2
  }
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d139      	bne.n	8003544 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034da:	2302      	movs	r3, #2
 80034dc:	e033      	b.n	8003546 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2224      	movs	r2, #36	@ 0x24
 80034ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800350c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	021b      	lsls	r3, r3, #8
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	e000      	b.n	8003546 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003544:	2302      	movs	r3, #2
  }
}
 8003546:	4618      	mov	r0, r3
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800355a:	af00      	add	r7, sp, #0
 800355c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003560:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003564:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800356a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	f001 b823 	b.w	80045c0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800357a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 817d 	beq.w	800388a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003590:	4bbc      	ldr	r3, [pc, #752]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b04      	cmp	r3, #4
 800359a:	d00c      	beq.n	80035b6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800359c:	4bb9      	ldr	r3, [pc, #740]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 030c 	and.w	r3, r3, #12
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d15c      	bne.n	8003662 <HAL_RCC_OscConfig+0x10e>
 80035a8:	4bb6      	ldr	r3, [pc, #728]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b4:	d155      	bne.n	8003662 <HAL_RCC_OscConfig+0x10e>
 80035b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035ba:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d102      	bne.n	80035e8 <HAL_RCC_OscConfig+0x94>
 80035e2:	4ba8      	ldr	r3, [pc, #672]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	e015      	b.n	8003614 <HAL_RCC_OscConfig+0xc0>
 80035e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035ec:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80035fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003600:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003604:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003608:	fa93 f3a3 	rbit	r3, r3
 800360c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003610:	4b9c      	ldr	r3, [pc, #624]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003618:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800361c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003620:	fa92 f2a2 	rbit	r2, r2
 8003624:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003628:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800362c:	fab2 f282 	clz	r2, r2
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	f042 0220 	orr.w	r2, r2, #32
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	f002 021f 	and.w	r2, r2, #31
 800363c:	2101      	movs	r1, #1
 800363e:	fa01 f202 	lsl.w	r2, r1, r2
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 811f 	beq.w	8003888 <HAL_RCC_OscConfig+0x334>
 800364a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	f040 8116 	bne.w	8003888 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	f000 bfaf 	b.w	80045c0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003666:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003672:	d106      	bne.n	8003682 <HAL_RCC_OscConfig+0x12e>
 8003674:	4b83      	ldr	r3, [pc, #524]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a82      	ldr	r2, [pc, #520]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 800367a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800367e:	6013      	str	r3, [r2, #0]
 8003680:	e036      	b.n	80036f0 <HAL_RCC_OscConfig+0x19c>
 8003682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003686:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x158>
 8003692:	4b7c      	ldr	r3, [pc, #496]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7b      	ldr	r2, [pc, #492]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 8003698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	4b79      	ldr	r3, [pc, #484]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a78      	ldr	r2, [pc, #480]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 80036a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e021      	b.n	80036f0 <HAL_RCC_OscConfig+0x19c>
 80036ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x184>
 80036be:	4b71      	ldr	r3, [pc, #452]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a70      	ldr	r2, [pc, #448]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 80036c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4b6e      	ldr	r3, [pc, #440]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6d      	ldr	r2, [pc, #436]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 80036d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e00b      	b.n	80036f0 <HAL_RCC_OscConfig+0x19c>
 80036d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a69      	ldr	r2, [pc, #420]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 80036de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	4b67      	ldr	r3, [pc, #412]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a66      	ldr	r2, [pc, #408]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 80036ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ee:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036f0:	4b64      	ldr	r3, [pc, #400]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 80036f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f4:	f023 020f 	bic.w	r2, r3, #15
 80036f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	495f      	ldr	r1, [pc, #380]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 8003706:	4313      	orrs	r3, r2
 8003708:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800370a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800370e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d059      	beq.n	80037ce <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7fe ff41 	bl	80025a0 <HAL_GetTick>
 800371e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	e00a      	b.n	800373a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003724:	f7fe ff3c 	bl	80025a0 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b64      	cmp	r3, #100	@ 0x64
 8003732:	d902      	bls.n	800373a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	f000 bf43 	b.w	80045c0 <HAL_RCC_OscConfig+0x106c>
 800373a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800373e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800374e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b01      	cmp	r3, #1
 8003764:	d102      	bne.n	800376c <HAL_RCC_OscConfig+0x218>
 8003766:	4b47      	ldr	r3, [pc, #284]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	e015      	b.n	8003798 <HAL_RCC_OscConfig+0x244>
 800376c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003770:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003780:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003784:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003788:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800378c:	fa93 f3a3 	rbit	r3, r3
 8003790:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003794:	4b3b      	ldr	r3, [pc, #236]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800379c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80037a0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80037a4:	fa92 f2a2 	rbit	r2, r2
 80037a8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80037ac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80037b0:	fab2 f282 	clz	r2, r2
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	f042 0220 	orr.w	r2, r2, #32
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	f002 021f 	and.w	r2, r2, #31
 80037c0:	2101      	movs	r1, #1
 80037c2:	fa01 f202 	lsl.w	r2, r1, r2
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0ab      	beq.n	8003724 <HAL_RCC_OscConfig+0x1d0>
 80037cc:	e05d      	b.n	800388a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ce:	f7fe fee7 	bl	80025a0 <HAL_GetTick>
 80037d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d6:	e00a      	b.n	80037ee <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fe fee2 	bl	80025a0 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b64      	cmp	r3, #100	@ 0x64
 80037e6:	d902      	bls.n	80037ee <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	f000 bee9 	b.w	80045c0 <HAL_RCC_OscConfig+0x106c>
 80037ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037f2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80037fa:	fa93 f3a3 	rbit	r3, r3
 80037fe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003802:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003806:	fab3 f383 	clz	r3, r3
 800380a:	b2db      	uxtb	r3, r3
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b01      	cmp	r3, #1
 8003818:	d102      	bne.n	8003820 <HAL_RCC_OscConfig+0x2cc>
 800381a:	4b1a      	ldr	r3, [pc, #104]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	e015      	b.n	800384c <HAL_RCC_OscConfig+0x2f8>
 8003820:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003824:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800382c:	fa93 f3a3 	rbit	r3, r3
 8003830:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003834:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003838:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800383c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003840:	fa93 f3a3 	rbit	r3, r3
 8003844:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003848:	4b0e      	ldr	r3, [pc, #56]	@ (8003884 <HAL_RCC_OscConfig+0x330>)
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003850:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003854:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003858:	fa92 f2a2 	rbit	r2, r2
 800385c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003860:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003864:	fab2 f282 	clz	r2, r2
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	f042 0220 	orr.w	r2, r2, #32
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	f002 021f 	and.w	r2, r2, #31
 8003874:	2101      	movs	r1, #1
 8003876:	fa01 f202 	lsl.w	r2, r1, r2
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1ab      	bne.n	80037d8 <HAL_RCC_OscConfig+0x284>
 8003880:	e003      	b.n	800388a <HAL_RCC_OscConfig+0x336>
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 817d 	beq.w	8003b9a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80038a0:	4ba6      	ldr	r3, [pc, #664]	@ (8003b3c <HAL_RCC_OscConfig+0x5e8>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00b      	beq.n	80038c4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80038ac:	4ba3      	ldr	r3, [pc, #652]	@ (8003b3c <HAL_RCC_OscConfig+0x5e8>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d172      	bne.n	800399e <HAL_RCC_OscConfig+0x44a>
 80038b8:	4ba0      	ldr	r3, [pc, #640]	@ (8003b3c <HAL_RCC_OscConfig+0x5e8>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d16c      	bne.n	800399e <HAL_RCC_OscConfig+0x44a>
 80038c4:	2302      	movs	r3, #2
 80038c6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80038d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	095b      	lsrs	r3, r3, #5
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d102      	bne.n	80038f4 <HAL_RCC_OscConfig+0x3a0>
 80038ee:	4b93      	ldr	r3, [pc, #588]	@ (8003b3c <HAL_RCC_OscConfig+0x5e8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	e013      	b.n	800391c <HAL_RCC_OscConfig+0x3c8>
 80038f4:	2302      	movs	r3, #2
 80038f6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003906:	2302      	movs	r3, #2
 8003908:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800390c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003910:	fa93 f3a3 	rbit	r3, r3
 8003914:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003918:	4b88      	ldr	r3, [pc, #544]	@ (8003b3c <HAL_RCC_OscConfig+0x5e8>)
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	2202      	movs	r2, #2
 800391e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003922:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003926:	fa92 f2a2 	rbit	r2, r2
 800392a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800392e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003932:	fab2 f282 	clz	r2, r2
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	f042 0220 	orr.w	r2, r2, #32
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	f002 021f 	and.w	r2, r2, #31
 8003942:	2101      	movs	r1, #1
 8003944:	fa01 f202 	lsl.w	r2, r1, r2
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_RCC_OscConfig+0x410>
 800394e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003952:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d002      	beq.n	8003964 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f000 be2e 	b.w	80045c0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003964:	4b75      	ldr	r3, [pc, #468]	@ (8003b3c <HAL_RCC_OscConfig+0x5e8>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800396c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003970:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	21f8      	movs	r1, #248	@ 0xf8
 800397a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003982:	fa91 f1a1 	rbit	r1, r1
 8003986:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800398a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800398e:	fab1 f181 	clz	r1, r1
 8003992:	b2c9      	uxtb	r1, r1
 8003994:	408b      	lsls	r3, r1
 8003996:	4969      	ldr	r1, [pc, #420]	@ (8003b3c <HAL_RCC_OscConfig+0x5e8>)
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399c:	e0fd      	b.n	8003b9a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800399e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8088 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x56c>
 80039b0:	2301      	movs	r3, #1
 80039b2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80039c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c6:	fab3 f383 	clz	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80039d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	461a      	mov	r2, r3
 80039d8:	2301      	movs	r3, #1
 80039da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039dc:	f7fe fde0 	bl	80025a0 <HAL_GetTick>
 80039e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e4:	e00a      	b.n	80039fc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e6:	f7fe fddb 	bl	80025a0 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d902      	bls.n	80039fc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	f000 bde2 	b.w	80045c0 <HAL_RCC_OscConfig+0x106c>
 80039fc:	2302      	movs	r3, #2
 80039fe:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003a0e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a12:	fab3 f383 	clz	r3, r3
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	095b      	lsrs	r3, r3, #5
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d102      	bne.n	8003a2c <HAL_RCC_OscConfig+0x4d8>
 8003a26:	4b45      	ldr	r3, [pc, #276]	@ (8003b3c <HAL_RCC_OscConfig+0x5e8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	e013      	b.n	8003a54 <HAL_RCC_OscConfig+0x500>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003a36:	fa93 f3a3 	rbit	r3, r3
 8003a3a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003a3e:	2302      	movs	r3, #2
 8003a40:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003a44:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003a48:	fa93 f3a3 	rbit	r3, r3
 8003a4c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003a50:	4b3a      	ldr	r3, [pc, #232]	@ (8003b3c <HAL_RCC_OscConfig+0x5e8>)
 8003a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a54:	2202      	movs	r2, #2
 8003a56:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003a5a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003a5e:	fa92 f2a2 	rbit	r2, r2
 8003a62:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003a66:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003a6a:	fab2 f282 	clz	r2, r2
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	f042 0220 	orr.w	r2, r2, #32
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	f002 021f 	and.w	r2, r2, #31
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0af      	beq.n	80039e6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a86:	4b2d      	ldr	r3, [pc, #180]	@ (8003b3c <HAL_RCC_OscConfig+0x5e8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	21f8      	movs	r1, #248	@ 0xf8
 8003a9c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003aa4:	fa91 f1a1 	rbit	r1, r1
 8003aa8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003aac:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003ab0:	fab1 f181 	clz	r1, r1
 8003ab4:	b2c9      	uxtb	r1, r1
 8003ab6:	408b      	lsls	r3, r1
 8003ab8:	4920      	ldr	r1, [pc, #128]	@ (8003b3c <HAL_RCC_OscConfig+0x5e8>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
 8003abe:	e06c      	b.n	8003b9a <HAL_RCC_OscConfig+0x646>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003aca:	fa93 f3a3 	rbit	r3, r3
 8003ace:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003ad2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ad6:	fab3 f383 	clz	r3, r3
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ae0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	2300      	movs	r3, #0
 8003aea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7fe fd58 	bl	80025a0 <HAL_GetTick>
 8003af0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003af4:	e00a      	b.n	8003b0c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003af6:	f7fe fd53 	bl	80025a0 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d902      	bls.n	8003b0c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	f000 bd5a 	b.w	80045c0 <HAL_RCC_OscConfig+0x106c>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d104      	bne.n	8003b40 <HAL_RCC_OscConfig+0x5ec>
 8003b36:	4b01      	ldr	r3, [pc, #4]	@ (8003b3c <HAL_RCC_OscConfig+0x5e8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	e015      	b.n	8003b68 <HAL_RCC_OscConfig+0x614>
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	2302      	movs	r3, #2
 8003b42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003b4a:	fa93 f3a3 	rbit	r3, r3
 8003b4e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003b52:	2302      	movs	r3, #2
 8003b54:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003b58:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b5c:	fa93 f3a3 	rbit	r3, r3
 8003b60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003b64:	4bc8      	ldr	r3, [pc, #800]	@ (8003e88 <HAL_RCC_OscConfig+0x934>)
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	2202      	movs	r2, #2
 8003b6a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003b6e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003b72:	fa92 f2a2 	rbit	r2, r2
 8003b76:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003b7a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003b7e:	fab2 f282 	clz	r2, r2
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	f042 0220 	orr.w	r2, r2, #32
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	f002 021f 	and.w	r2, r2, #31
 8003b8e:	2101      	movs	r1, #1
 8003b90:	fa01 f202 	lsl.w	r2, r1, r2
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1ad      	bne.n	8003af6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8110 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d079      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x760>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003bca:	fa93 f3a3 	rbit	r3, r3
 8003bce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd6:	fab3 f383 	clz	r3, r3
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4bab      	ldr	r3, [pc, #684]	@ (8003e8c <HAL_RCC_OscConfig+0x938>)
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	461a      	mov	r2, r3
 8003be6:	2301      	movs	r3, #1
 8003be8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bea:	f7fe fcd9 	bl	80025a0 <HAL_GetTick>
 8003bee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf2:	e00a      	b.n	8003c0a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bf4:	f7fe fcd4 	bl	80025a0 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d902      	bls.n	8003c0a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	f000 bcdb 	b.w	80045c0 <HAL_RCC_OscConfig+0x106c>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003c14:	fa93 f3a3 	rbit	r3, r3
 8003c18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c20:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003c24:	2202      	movs	r2, #2
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c2c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	fa93 f2a3 	rbit	r2, r3
 8003c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c48:	2202      	movs	r2, #2
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	fa93 f2a3 	rbit	r2, r3
 8003c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003c62:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c64:	4b88      	ldr	r3, [pc, #544]	@ (8003e88 <HAL_RCC_OscConfig+0x934>)
 8003c66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003c70:	2102      	movs	r1, #2
 8003c72:	6019      	str	r1, [r3, #0]
 8003c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	fa93 f1a3 	rbit	r1, r3
 8003c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c86:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003c8a:	6019      	str	r1, [r3, #0]
  return result;
 8003c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c90:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	fab3 f383 	clz	r3, r3
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0a0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x6a0>
 8003cb2:	e08d      	b.n	8003dd0 <HAL_RCC_OscConfig+0x87c>
 8003cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	fa93 f2a3 	rbit	r2, r3
 8003cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003cd6:	601a      	str	r2, [r3, #0]
  return result;
 8003cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cdc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003ce0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce2:	fab3 f383 	clz	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b68      	ldr	r3, [pc, #416]	@ (8003e8c <HAL_RCC_OscConfig+0x938>)
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf6:	f7fe fc53 	bl	80025a0 <HAL_GetTick>
 8003cfa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d00:	f7fe fc4e 	bl	80025a0 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d902      	bls.n	8003d16 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	f000 bc55 	b.w	80045c0 <HAL_RCC_OscConfig+0x106c>
 8003d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d1a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003d1e:	2202      	movs	r2, #2
 8003d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d26:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	fa93 f2a3 	rbit	r2, r3
 8003d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d34:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d3e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003d42:	2202      	movs	r2, #2
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d4a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	fa93 f2a3 	rbit	r2, r3
 8003d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d62:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003d66:	2202      	movs	r2, #2
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	fa93 f2a3 	rbit	r2, r3
 8003d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d7c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003d80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d82:	4b41      	ldr	r3, [pc, #260]	@ (8003e88 <HAL_RCC_OscConfig+0x934>)
 8003d84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003d8e:	2102      	movs	r1, #2
 8003d90:	6019      	str	r1, [r3, #0]
 8003d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d96:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	fa93 f1a3 	rbit	r1, r3
 8003da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003da8:	6019      	str	r1, [r3, #0]
  return result;
 8003daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	fab3 f383 	clz	r3, r3
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d197      	bne.n	8003d00 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 81a1 	beq.w	8004128 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de6:	2300      	movs	r3, #0
 8003de8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dec:	4b26      	ldr	r3, [pc, #152]	@ (8003e88 <HAL_RCC_OscConfig+0x934>)
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d116      	bne.n	8003e26 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df8:	4b23      	ldr	r3, [pc, #140]	@ (8003e88 <HAL_RCC_OscConfig+0x934>)
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	4a22      	ldr	r2, [pc, #136]	@ (8003e88 <HAL_RCC_OscConfig+0x934>)
 8003dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e02:	61d3      	str	r3, [r2, #28]
 8003e04:	4b20      	ldr	r3, [pc, #128]	@ (8003e88 <HAL_RCC_OscConfig+0x934>)
 8003e06:	69db      	ldr	r3, [r3, #28]
 8003e08:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e10:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e1a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003e1e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e26:	4b1a      	ldr	r3, [pc, #104]	@ (8003e90 <HAL_RCC_OscConfig+0x93c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d11a      	bne.n	8003e68 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e32:	4b17      	ldr	r3, [pc, #92]	@ (8003e90 <HAL_RCC_OscConfig+0x93c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a16      	ldr	r2, [pc, #88]	@ (8003e90 <HAL_RCC_OscConfig+0x93c>)
 8003e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3e:	f7fe fbaf 	bl	80025a0 <HAL_GetTick>
 8003e42:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e46:	e009      	b.n	8003e5c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e48:	f7fe fbaa 	bl	80025a0 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b64      	cmp	r3, #100	@ 0x64
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e3b1      	b.n	80045c0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e90 <HAL_RCC_OscConfig+0x93c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0ef      	beq.n	8003e48 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d10d      	bne.n	8003e94 <HAL_RCC_OscConfig+0x940>
 8003e78:	4b03      	ldr	r3, [pc, #12]	@ (8003e88 <HAL_RCC_OscConfig+0x934>)
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	4a02      	ldr	r2, [pc, #8]	@ (8003e88 <HAL_RCC_OscConfig+0x934>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	6213      	str	r3, [r2, #32]
 8003e84:	e03c      	b.n	8003f00 <HAL_RCC_OscConfig+0x9ac>
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	10908120 	.word	0x10908120
 8003e90:	40007000 	.word	0x40007000
 8003e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10c      	bne.n	8003ebe <HAL_RCC_OscConfig+0x96a>
 8003ea4:	4bc1      	ldr	r3, [pc, #772]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4ac0      	ldr	r2, [pc, #768]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 8003eaa:	f023 0301 	bic.w	r3, r3, #1
 8003eae:	6213      	str	r3, [r2, #32]
 8003eb0:	4bbe      	ldr	r3, [pc, #760]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	4abd      	ldr	r2, [pc, #756]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 8003eb6:	f023 0304 	bic.w	r3, r3, #4
 8003eba:	6213      	str	r3, [r2, #32]
 8003ebc:	e020      	b.n	8003f00 <HAL_RCC_OscConfig+0x9ac>
 8003ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	2b05      	cmp	r3, #5
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x994>
 8003ece:	4bb7      	ldr	r3, [pc, #732]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	4ab6      	ldr	r2, [pc, #728]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 8003ed4:	f043 0304 	orr.w	r3, r3, #4
 8003ed8:	6213      	str	r3, [r2, #32]
 8003eda:	4bb4      	ldr	r3, [pc, #720]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	4ab3      	ldr	r2, [pc, #716]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	6213      	str	r3, [r2, #32]
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0x9ac>
 8003ee8:	4bb0      	ldr	r3, [pc, #704]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	4aaf      	ldr	r2, [pc, #700]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	6213      	str	r3, [r2, #32]
 8003ef4:	4bad      	ldr	r3, [pc, #692]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	4aac      	ldr	r2, [pc, #688]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 8003efa:	f023 0304 	bic.w	r3, r3, #4
 8003efe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8081 	beq.w	8004014 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f12:	f7fe fb45 	bl	80025a0 <HAL_GetTick>
 8003f16:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f1c:	f7fe fb40 	bl	80025a0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e345      	b.n	80045c0 <HAL_RCC_OscConfig+0x106c>
 8003f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f38:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f44:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	fa93 f2a3 	rbit	r2, r3
 8003f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f52:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003f60:	2202      	movs	r2, #2
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f68:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	fa93 f2a3 	rbit	r2, r3
 8003f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f76:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003f7a:	601a      	str	r2, [r3, #0]
  return result;
 8003f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f80:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003f84:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f86:	fab3 f383 	clz	r3, r3
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f043 0302 	orr.w	r3, r3, #2
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d102      	bne.n	8003fa0 <HAL_RCC_OscConfig+0xa4c>
 8003f9a:	4b84      	ldr	r3, [pc, #528]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	e013      	b.n	8003fc8 <HAL_RCC_OscConfig+0xa74>
 8003fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003fa8:	2202      	movs	r2, #2
 8003faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	fa93 f2a3 	rbit	r2, r3
 8003fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fbe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	4b79      	ldr	r3, [pc, #484]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fcc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	6011      	str	r1, [r2, #0]
 8003fd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fd8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	fa92 f1a2 	rbit	r1, r2
 8003fe2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fe6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003fea:	6011      	str	r1, [r2, #0]
  return result;
 8003fec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ff0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	fab2 f282 	clz	r2, r2
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	f002 021f 	and.w	r2, r2, #31
 8004006:	2101      	movs	r1, #1
 8004008:	fa01 f202 	lsl.w	r2, r1, r2
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d084      	beq.n	8003f1c <HAL_RCC_OscConfig+0x9c8>
 8004012:	e07f      	b.n	8004114 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004014:	f7fe fac4 	bl	80025a0 <HAL_GetTick>
 8004018:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401c:	e00b      	b.n	8004036 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800401e:	f7fe fabf 	bl	80025a0 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e2c4      	b.n	80045c0 <HAL_RCC_OscConfig+0x106c>
 8004036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800403e:	2202      	movs	r2, #2
 8004040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004046:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	fa93 f2a3 	rbit	r2, r3
 8004050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004054:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800405e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004062:	2202      	movs	r2, #2
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800406a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	fa93 f2a3 	rbit	r2, r3
 8004074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004078:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800407c:	601a      	str	r2, [r3, #0]
  return result;
 800407e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004082:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004086:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004088:	fab3 f383 	clz	r3, r3
 800408c:	b2db      	uxtb	r3, r3
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f043 0302 	orr.w	r3, r3, #2
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d102      	bne.n	80040a2 <HAL_RCC_OscConfig+0xb4e>
 800409c:	4b43      	ldr	r3, [pc, #268]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	e013      	b.n	80040ca <HAL_RCC_OscConfig+0xb76>
 80040a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80040aa:	2202      	movs	r2, #2
 80040ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	fa93 f2a3 	rbit	r2, r3
 80040bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	4b39      	ldr	r3, [pc, #228]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040ce:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80040d2:	2102      	movs	r1, #2
 80040d4:	6011      	str	r1, [r2, #0]
 80040d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040da:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	fa92 f1a2 	rbit	r1, r2
 80040e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040e8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80040ec:	6011      	str	r1, [r2, #0]
  return result;
 80040ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040f2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	fab2 f282 	clz	r2, r2
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	f002 021f 	and.w	r2, r2, #31
 8004108:	2101      	movs	r1, #1
 800410a:	fa01 f202 	lsl.w	r2, r1, r2
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d184      	bne.n	800401e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004114:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004118:	2b01      	cmp	r3, #1
 800411a:	d105      	bne.n	8004128 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800411c:	4b23      	ldr	r3, [pc, #140]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	4a22      	ldr	r2, [pc, #136]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 8004122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004126:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800412c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8242 	beq.w	80045be <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800413a:	4b1c      	ldr	r3, [pc, #112]	@ (80041ac <HAL_RCC_OscConfig+0xc58>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f003 030c 	and.w	r3, r3, #12
 8004142:	2b08      	cmp	r3, #8
 8004144:	f000 8213 	beq.w	800456e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800414c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	2b02      	cmp	r3, #2
 8004156:	f040 8162 	bne.w	800441e <HAL_RCC_OscConfig+0xeca>
 800415a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800415e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004162:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800416c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	fa93 f2a3 	rbit	r2, r3
 8004176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800417a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800417e:	601a      	str	r2, [r3, #0]
  return result;
 8004180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004184:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004188:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004194:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	461a      	mov	r2, r3
 800419c:	2300      	movs	r3, #0
 800419e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a0:	f7fe f9fe 	bl	80025a0 <HAL_GetTick>
 80041a4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a8:	e00c      	b.n	80041c4 <HAL_RCC_OscConfig+0xc70>
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b0:	f7fe f9f6 	bl	80025a0 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e1fd      	b.n	80045c0 <HAL_RCC_OscConfig+0x106c>
 80041c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80041cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	fa93 f2a3 	rbit	r2, r3
 80041e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80041e8:	601a      	str	r2, [r3, #0]
  return result;
 80041ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ee:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80041f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041f4:	fab3 f383 	clz	r3, r3
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	d102      	bne.n	800420e <HAL_RCC_OscConfig+0xcba>
 8004208:	4bb0      	ldr	r3, [pc, #704]	@ (80044cc <HAL_RCC_OscConfig+0xf78>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	e027      	b.n	800425e <HAL_RCC_OscConfig+0xd0a>
 800420e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004212:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004216:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800421a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004220:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	fa93 f2a3 	rbit	r2, r3
 800422a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800422e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004238:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800423c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004246:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	fa93 f2a3 	rbit	r2, r3
 8004250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004254:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	4b9c      	ldr	r3, [pc, #624]	@ (80044cc <HAL_RCC_OscConfig+0xf78>)
 800425c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004262:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004266:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800426a:	6011      	str	r1, [r2, #0]
 800426c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004270:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	fa92 f1a2 	rbit	r1, r2
 800427a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800427e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004282:	6011      	str	r1, [r2, #0]
  return result;
 8004284:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004288:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	fab2 f282 	clz	r2, r2
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	f042 0220 	orr.w	r2, r2, #32
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	f002 021f 	and.w	r2, r2, #31
 800429e:	2101      	movs	r1, #1
 80042a0:	fa01 f202 	lsl.w	r2, r1, r2
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d182      	bne.n	80041b0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042aa:	4b88      	ldr	r3, [pc, #544]	@ (80044cc <HAL_RCC_OscConfig+0xf78>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80042b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80042be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	430b      	orrs	r3, r1
 80042cc:	497f      	ldr	r1, [pc, #508]	@ (80044cc <HAL_RCC_OscConfig+0xf78>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	604b      	str	r3, [r1, #4]
 80042d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80042da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	fa93 f2a3 	rbit	r2, r3
 80042ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80042f6:	601a      	str	r2, [r3, #0]
  return result;
 80042f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042fc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004300:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004302:	fab3 f383 	clz	r3, r3
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800430c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	461a      	mov	r2, r3
 8004314:	2301      	movs	r3, #1
 8004316:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7fe f942 	bl	80025a0 <HAL_GetTick>
 800431c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004320:	e009      	b.n	8004336 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004322:	f7fe f93d 	bl	80025a0 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e144      	b.n	80045c0 <HAL_RCC_OscConfig+0x106c>
 8004336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800433a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800433e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004348:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	fa93 f2a3 	rbit	r2, r3
 8004352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004356:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800435a:	601a      	str	r2, [r3, #0]
  return result;
 800435c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004360:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004364:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004366:	fab3 f383 	clz	r3, r3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	b2db      	uxtb	r3, r3
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b01      	cmp	r3, #1
 8004378:	d102      	bne.n	8004380 <HAL_RCC_OscConfig+0xe2c>
 800437a:	4b54      	ldr	r3, [pc, #336]	@ (80044cc <HAL_RCC_OscConfig+0xf78>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	e027      	b.n	80043d0 <HAL_RCC_OscConfig+0xe7c>
 8004380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004384:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004388:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800438c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004392:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	fa93 f2a3 	rbit	r2, r3
 800439c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043aa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80043ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	fa93 f2a3 	rbit	r2, r3
 80043c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	4b3f      	ldr	r3, [pc, #252]	@ (80044cc <HAL_RCC_OscConfig+0xf78>)
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043d4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80043d8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80043dc:	6011      	str	r1, [r2, #0]
 80043de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043e2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80043e6:	6812      	ldr	r2, [r2, #0]
 80043e8:	fa92 f1a2 	rbit	r1, r2
 80043ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043f0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80043f4:	6011      	str	r1, [r2, #0]
  return result;
 80043f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043fa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80043fe:	6812      	ldr	r2, [r2, #0]
 8004400:	fab2 f282 	clz	r2, r2
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	f042 0220 	orr.w	r2, r2, #32
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	f002 021f 	and.w	r2, r2, #31
 8004410:	2101      	movs	r1, #1
 8004412:	fa01 f202 	lsl.w	r2, r1, r2
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d082      	beq.n	8004322 <HAL_RCC_OscConfig+0xdce>
 800441c:	e0cf      	b.n	80045be <HAL_RCC_OscConfig+0x106a>
 800441e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004422:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004426:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800442a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004430:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	fa93 f2a3 	rbit	r2, r3
 800443a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800443e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004442:	601a      	str	r2, [r3, #0]
  return result;
 8004444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004448:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800444c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444e:	fab3 f383 	clz	r3, r3
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004458:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	461a      	mov	r2, r3
 8004460:	2300      	movs	r3, #0
 8004462:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7fe f89c 	bl	80025a0 <HAL_GetTick>
 8004468:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800446c:	e009      	b.n	8004482 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800446e:	f7fe f897 	bl	80025a0 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e09e      	b.n	80045c0 <HAL_RCC_OscConfig+0x106c>
 8004482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004486:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800448a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800448e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004494:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	fa93 f2a3 	rbit	r2, r3
 800449e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044a2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80044a6:	601a      	str	r2, [r3, #0]
  return result;
 80044a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ac:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80044b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044b2:	fab3 f383 	clz	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d104      	bne.n	80044d0 <HAL_RCC_OscConfig+0xf7c>
 80044c6:	4b01      	ldr	r3, [pc, #4]	@ (80044cc <HAL_RCC_OscConfig+0xf78>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	e029      	b.n	8004520 <HAL_RCC_OscConfig+0xfcc>
 80044cc:	40021000 	.word	0x40021000
 80044d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80044d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044e2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	fa93 f2a3 	rbit	r2, r3
 80044ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044fa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80044fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004508:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	fa93 f2a3 	rbit	r2, r3
 8004512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004516:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	4b2b      	ldr	r3, [pc, #172]	@ (80045cc <HAL_RCC_OscConfig+0x1078>)
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004524:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004528:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800452c:	6011      	str	r1, [r2, #0]
 800452e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004532:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	fa92 f1a2 	rbit	r1, r2
 800453c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004540:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004544:	6011      	str	r1, [r2, #0]
  return result;
 8004546:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800454a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	fab2 f282 	clz	r2, r2
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	f042 0220 	orr.w	r2, r2, #32
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	f002 021f 	and.w	r2, r2, #31
 8004560:	2101      	movs	r1, #1
 8004562:	fa01 f202 	lsl.w	r2, r1, r2
 8004566:	4013      	ands	r3, r2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d180      	bne.n	800446e <HAL_RCC_OscConfig+0xf1a>
 800456c:	e027      	b.n	80045be <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800456e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004572:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e01e      	b.n	80045c0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004582:	4b12      	ldr	r3, [pc, #72]	@ (80045cc <HAL_RCC_OscConfig+0x1078>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800458a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800458e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004596:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d10b      	bne.n	80045ba <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80045a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80045a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80045aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d001      	beq.n	80045be <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000

080045d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b09e      	sub	sp, #120	@ 0x78
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e162      	b.n	80048ae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e8:	4b90      	ldr	r3, [pc, #576]	@ (800482c <HAL_RCC_ClockConfig+0x25c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d910      	bls.n	8004618 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f6:	4b8d      	ldr	r3, [pc, #564]	@ (800482c <HAL_RCC_ClockConfig+0x25c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f023 0207 	bic.w	r2, r3, #7
 80045fe:	498b      	ldr	r1, [pc, #556]	@ (800482c <HAL_RCC_ClockConfig+0x25c>)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	4313      	orrs	r3, r2
 8004604:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004606:	4b89      	ldr	r3, [pc, #548]	@ (800482c <HAL_RCC_ClockConfig+0x25c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d001      	beq.n	8004618 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e14a      	b.n	80048ae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004624:	4b82      	ldr	r3, [pc, #520]	@ (8004830 <HAL_RCC_ClockConfig+0x260>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	497f      	ldr	r1, [pc, #508]	@ (8004830 <HAL_RCC_ClockConfig+0x260>)
 8004632:	4313      	orrs	r3, r2
 8004634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 80dc 	beq.w	80047fc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d13c      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xf6>
 800464c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004650:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004654:	fa93 f3a3 	rbit	r3, r3
 8004658:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800465a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465c:	fab3 f383 	clz	r3, r3
 8004660:	b2db      	uxtb	r3, r3
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	d102      	bne.n	8004676 <HAL_RCC_ClockConfig+0xa6>
 8004670:	4b6f      	ldr	r3, [pc, #444]	@ (8004830 <HAL_RCC_ClockConfig+0x260>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	e00f      	b.n	8004696 <HAL_RCC_ClockConfig+0xc6>
 8004676:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800467a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800467e:	fa93 f3a3 	rbit	r3, r3
 8004682:	667b      	str	r3, [r7, #100]	@ 0x64
 8004684:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004688:	663b      	str	r3, [r7, #96]	@ 0x60
 800468a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800468c:	fa93 f3a3 	rbit	r3, r3
 8004690:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004692:	4b67      	ldr	r3, [pc, #412]	@ (8004830 <HAL_RCC_ClockConfig+0x260>)
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800469a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800469c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800469e:	fa92 f2a2 	rbit	r2, r2
 80046a2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80046a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046a6:	fab2 f282 	clz	r2, r2
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	f042 0220 	orr.w	r2, r2, #32
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	f002 021f 	and.w	r2, r2, #31
 80046b6:	2101      	movs	r1, #1
 80046b8:	fa01 f202 	lsl.w	r2, r1, r2
 80046bc:	4013      	ands	r3, r2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d17b      	bne.n	80047ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e0f3      	b.n	80048ae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d13c      	bne.n	8004748 <HAL_RCC_ClockConfig+0x178>
 80046ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046d2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046d6:	fa93 f3a3 	rbit	r3, r3
 80046da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80046dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046de:	fab3 f383 	clz	r3, r3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d102      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x128>
 80046f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004830 <HAL_RCC_ClockConfig+0x260>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	e00f      	b.n	8004718 <HAL_RCC_ClockConfig+0x148>
 80046f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004700:	fa93 f3a3 	rbit	r3, r3
 8004704:	647b      	str	r3, [r7, #68]	@ 0x44
 8004706:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800470a:	643b      	str	r3, [r7, #64]	@ 0x40
 800470c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800470e:	fa93 f3a3 	rbit	r3, r3
 8004712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004714:	4b46      	ldr	r3, [pc, #280]	@ (8004830 <HAL_RCC_ClockConfig+0x260>)
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800471c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800471e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004720:	fa92 f2a2 	rbit	r2, r2
 8004724:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004726:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004728:	fab2 f282 	clz	r2, r2
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	f042 0220 	orr.w	r2, r2, #32
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	f002 021f 	and.w	r2, r2, #31
 8004738:	2101      	movs	r1, #1
 800473a:	fa01 f202 	lsl.w	r2, r1, r2
 800473e:	4013      	ands	r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d13a      	bne.n	80047ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0b2      	b.n	80048ae <HAL_RCC_ClockConfig+0x2de>
 8004748:	2302      	movs	r3, #2
 800474a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474e:	fa93 f3a3 	rbit	r3, r3
 8004752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004756:	fab3 f383 	clz	r3, r3
 800475a:	b2db      	uxtb	r3, r3
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b01      	cmp	r3, #1
 8004768:	d102      	bne.n	8004770 <HAL_RCC_ClockConfig+0x1a0>
 800476a:	4b31      	ldr	r3, [pc, #196]	@ (8004830 <HAL_RCC_ClockConfig+0x260>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	e00d      	b.n	800478c <HAL_RCC_ClockConfig+0x1bc>
 8004770:	2302      	movs	r3, #2
 8004772:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004776:	fa93 f3a3 	rbit	r3, r3
 800477a:	627b      	str	r3, [r7, #36]	@ 0x24
 800477c:	2302      	movs	r3, #2
 800477e:	623b      	str	r3, [r7, #32]
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	fa93 f3a3 	rbit	r3, r3
 8004786:	61fb      	str	r3, [r7, #28]
 8004788:	4b29      	ldr	r3, [pc, #164]	@ (8004830 <HAL_RCC_ClockConfig+0x260>)
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	2202      	movs	r2, #2
 800478e:	61ba      	str	r2, [r7, #24]
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	fa92 f2a2 	rbit	r2, r2
 8004796:	617a      	str	r2, [r7, #20]
  return result;
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	fab2 f282 	clz	r2, r2
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	f042 0220 	orr.w	r2, r2, #32
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	f002 021f 	and.w	r2, r2, #31
 80047aa:	2101      	movs	r1, #1
 80047ac:	fa01 f202 	lsl.w	r2, r1, r2
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e079      	b.n	80048ae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004830 <HAL_RCC_ClockConfig+0x260>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f023 0203 	bic.w	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	491a      	ldr	r1, [pc, #104]	@ (8004830 <HAL_RCC_ClockConfig+0x260>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047cc:	f7fd fee8 	bl	80025a0 <HAL_GetTick>
 80047d0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d4:	f7fd fee4 	bl	80025a0 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e061      	b.n	80048ae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ea:	4b11      	ldr	r3, [pc, #68]	@ (8004830 <HAL_RCC_ClockConfig+0x260>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f003 020c 	and.w	r2, r3, #12
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d1eb      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047fc:	4b0b      	ldr	r3, [pc, #44]	@ (800482c <HAL_RCC_ClockConfig+0x25c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d214      	bcs.n	8004834 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b08      	ldr	r3, [pc, #32]	@ (800482c <HAL_RCC_ClockConfig+0x25c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 0207 	bic.w	r2, r3, #7
 8004812:	4906      	ldr	r1, [pc, #24]	@ (800482c <HAL_RCC_ClockConfig+0x25c>)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800481a:	4b04      	ldr	r3, [pc, #16]	@ (800482c <HAL_RCC_ClockConfig+0x25c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d005      	beq.n	8004834 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e040      	b.n	80048ae <HAL_RCC_ClockConfig+0x2de>
 800482c:	40022000 	.word	0x40022000
 8004830:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004840:	4b1d      	ldr	r3, [pc, #116]	@ (80048b8 <HAL_RCC_ClockConfig+0x2e8>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	491a      	ldr	r1, [pc, #104]	@ (80048b8 <HAL_RCC_ClockConfig+0x2e8>)
 800484e:	4313      	orrs	r3, r2
 8004850:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800485e:	4b16      	ldr	r3, [pc, #88]	@ (80048b8 <HAL_RCC_ClockConfig+0x2e8>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	4912      	ldr	r1, [pc, #72]	@ (80048b8 <HAL_RCC_ClockConfig+0x2e8>)
 800486e:	4313      	orrs	r3, r2
 8004870:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004872:	f000 f829 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8004876:	4601      	mov	r1, r0
 8004878:	4b0f      	ldr	r3, [pc, #60]	@ (80048b8 <HAL_RCC_ClockConfig+0x2e8>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004880:	22f0      	movs	r2, #240	@ 0xf0
 8004882:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	fa92 f2a2 	rbit	r2, r2
 800488a:	60fa      	str	r2, [r7, #12]
  return result;
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	fab2 f282 	clz	r2, r2
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	40d3      	lsrs	r3, r2
 8004896:	4a09      	ldr	r2, [pc, #36]	@ (80048bc <HAL_RCC_ClockConfig+0x2ec>)
 8004898:	5cd3      	ldrb	r3, [r2, r3]
 800489a:	fa21 f303 	lsr.w	r3, r1, r3
 800489e:	4a08      	ldr	r2, [pc, #32]	@ (80048c0 <HAL_RCC_ClockConfig+0x2f0>)
 80048a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80048a2:	4b08      	ldr	r3, [pc, #32]	@ (80048c4 <HAL_RCC_ClockConfig+0x2f4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fd fe36 	bl	8002518 <HAL_InitTick>
  
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3778      	adds	r7, #120	@ 0x78
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40021000 	.word	0x40021000
 80048bc:	08022b7c 	.word	0x08022b7c
 80048c0:	20000008 	.word	0x20000008
 80048c4:	2000000c 	.word	0x2000000c

080048c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	2300      	movs	r3, #0
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	2300      	movs	r3, #0
 80048dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80048e2:	4b1e      	ldr	r3, [pc, #120]	@ (800495c <HAL_RCC_GetSysClockFreq+0x94>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d002      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x30>
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d003      	beq.n	80048fe <HAL_RCC_GetSysClockFreq+0x36>
 80048f6:	e026      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048f8:	4b19      	ldr	r3, [pc, #100]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x98>)
 80048fa:	613b      	str	r3, [r7, #16]
      break;
 80048fc:	e026      	b.n	800494c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	0c9b      	lsrs	r3, r3, #18
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	4a17      	ldr	r2, [pc, #92]	@ (8004964 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004908:	5cd3      	ldrb	r3, [r2, r3]
 800490a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800490c:	4b13      	ldr	r3, [pc, #76]	@ (800495c <HAL_RCC_GetSysClockFreq+0x94>)
 800490e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	4a14      	ldr	r2, [pc, #80]	@ (8004968 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004916:	5cd3      	ldrb	r3, [r2, r3]
 8004918:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004924:	4a0e      	ldr	r2, [pc, #56]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x98>)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	fbb2 f2f3 	udiv	r2, r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	e004      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a0c      	ldr	r2, [pc, #48]	@ (800496c <HAL_RCC_GetSysClockFreq+0xa4>)
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	613b      	str	r3, [r7, #16]
      break;
 8004944:	e002      	b.n	800494c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004946:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x98>)
 8004948:	613b      	str	r3, [r7, #16]
      break;
 800494a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800494c:	693b      	ldr	r3, [r7, #16]
}
 800494e:	4618      	mov	r0, r3
 8004950:	371c      	adds	r7, #28
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40021000 	.word	0x40021000
 8004960:	007a1200 	.word	0x007a1200
 8004964:	08022b8c 	.word	0x08022b8c
 8004968:	08022b9c 	.word	0x08022b9c
 800496c:	003d0900 	.word	0x003d0900

08004970 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b092      	sub	sp, #72	@ 0x48
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004980:	2300      	movs	r3, #0
 8004982:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 80d4 	beq.w	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004994:	4b4e      	ldr	r3, [pc, #312]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10e      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049a0:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	4a4a      	ldr	r2, [pc, #296]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049aa:	61d3      	str	r3, [r2, #28]
 80049ac:	4b48      	ldr	r3, [pc, #288]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049b8:	2301      	movs	r3, #1
 80049ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049be:	4b45      	ldr	r3, [pc, #276]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d118      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ca:	4b42      	ldr	r3, [pc, #264]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a41      	ldr	r2, [pc, #260]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049d6:	f7fd fde3 	bl	80025a0 <HAL_GetTick>
 80049da:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049dc:	e008      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049de:	f7fd fddf 	bl	80025a0 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b64      	cmp	r3, #100	@ 0x64
 80049ea:	d901      	bls.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e169      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f0:	4b38      	ldr	r3, [pc, #224]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049fc:	4b34      	ldr	r3, [pc, #208]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8084 	beq.w	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d07c      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a2a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2e:	fa93 f3a3 	rbit	r3, r3
 8004a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a36:	fab3 f383 	clz	r3, r3
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4b26      	ldr	r3, [pc, #152]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	461a      	mov	r2, r3
 8004a46:	2301      	movs	r3, #1
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a52:	fa93 f3a3 	rbit	r3, r3
 8004a56:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a5a:	fab3 f383 	clz	r3, r3
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	461a      	mov	r2, r3
 8004a62:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	461a      	mov	r2, r3
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a6e:	4a18      	ldr	r2, [pc, #96]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a72:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d04b      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7e:	f7fd fd8f 	bl	80025a0 <HAL_GetTick>
 8004a82:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a84:	e00a      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a86:	f7fd fd8b 	bl	80025a0 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e113      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa2:	fa93 f3a3 	rbit	r3, r3
 8004aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	623b      	str	r3, [r7, #32]
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	fa93 f3a3 	rbit	r3, r3
 8004ab2:	61fb      	str	r3, [r7, #28]
  return result;
 8004ab4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab6:	fab3 f383 	clz	r3, r3
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	f043 0302 	orr.w	r3, r3, #2
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d108      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004aca:	4b01      	ldr	r3, [pc, #4]	@ (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	e00d      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40007000 	.word	0x40007000
 8004ad8:	10908100 	.word	0x10908100
 8004adc:	2302      	movs	r3, #2
 8004ade:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	fa93 f3a3 	rbit	r3, r3
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	4b78      	ldr	r3, [pc, #480]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	2202      	movs	r2, #2
 8004aee:	613a      	str	r2, [r7, #16]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	fa92 f2a2 	rbit	r2, r2
 8004af6:	60fa      	str	r2, [r7, #12]
  return result;
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	fab2 f282 	clz	r2, r2
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	f002 021f 	and.w	r2, r2, #31
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0b7      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004b16:	4b6d      	ldr	r3, [pc, #436]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	496a      	ldr	r1, [pc, #424]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b28:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d105      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b30:	4b66      	ldr	r3, [pc, #408]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	4a65      	ldr	r2, [pc, #404]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b48:	4b60      	ldr	r3, [pc, #384]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4c:	f023 0203 	bic.w	r2, r3, #3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	495d      	ldr	r1, [pc, #372]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d008      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b66:	4b59      	ldr	r3, [pc, #356]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	4956      	ldr	r1, [pc, #344]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b84:	4b51      	ldr	r3, [pc, #324]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	494e      	ldr	r1, [pc, #312]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d008      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba6:	f023 0210 	bic.w	r2, r3, #16
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	4947      	ldr	r1, [pc, #284]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004bc0:	4b42      	ldr	r3, [pc, #264]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bcc:	493f      	ldr	r1, [pc, #252]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d008      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bde:	4b3b      	ldr	r3, [pc, #236]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be2:	f023 0220 	bic.w	r2, r3, #32
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	4938      	ldr	r1, [pc, #224]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d008      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bfc:	4b33      	ldr	r3, [pc, #204]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c00:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	4930      	ldr	r1, [pc, #192]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0310 	and.w	r3, r3, #16
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d008      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	4929      	ldr	r1, [pc, #164]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d008      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c38:	4b24      	ldr	r3, [pc, #144]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c44:	4921      	ldr	r1, [pc, #132]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d008      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c56:	4b1d      	ldr	r3, [pc, #116]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c62:	491a      	ldr	r1, [pc, #104]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d008      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004c74:	4b15      	ldr	r3, [pc, #84]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c80:	4912      	ldr	r1, [pc, #72]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d008      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c92:	4b0e      	ldr	r3, [pc, #56]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9e:	490b      	ldr	r1, [pc, #44]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004cb0:	4b06      	ldr	r3, [pc, #24]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cbc:	4903      	ldr	r1, [pc, #12]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3748      	adds	r7, #72	@ 0x48
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40021000 	.word	0x40021000

08004cd0 <std>:
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	b510      	push	{r4, lr}
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8004cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cde:	6083      	str	r3, [r0, #8]
 8004ce0:	8181      	strh	r1, [r0, #12]
 8004ce2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ce4:	81c2      	strh	r2, [r0, #14]
 8004ce6:	6183      	str	r3, [r0, #24]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	2208      	movs	r2, #8
 8004cec:	305c      	adds	r0, #92	@ 0x5c
 8004cee:	f000 f906 	bl	8004efe <memset>
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d28 <std+0x58>)
 8004cf4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d2c <std+0x5c>)
 8004cf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004d30 <std+0x60>)
 8004cfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004d34 <std+0x64>)
 8004d00:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d02:	4b0d      	ldr	r3, [pc, #52]	@ (8004d38 <std+0x68>)
 8004d04:	6224      	str	r4, [r4, #32]
 8004d06:	429c      	cmp	r4, r3
 8004d08:	d006      	beq.n	8004d18 <std+0x48>
 8004d0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d0e:	4294      	cmp	r4, r2
 8004d10:	d002      	beq.n	8004d18 <std+0x48>
 8004d12:	33d0      	adds	r3, #208	@ 0xd0
 8004d14:	429c      	cmp	r4, r3
 8004d16:	d105      	bne.n	8004d24 <std+0x54>
 8004d18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d20:	f000 b966 	b.w	8004ff0 <__retarget_lock_init_recursive>
 8004d24:	bd10      	pop	{r4, pc}
 8004d26:	bf00      	nop
 8004d28:	08004e79 	.word	0x08004e79
 8004d2c:	08004e9b 	.word	0x08004e9b
 8004d30:	08004ed3 	.word	0x08004ed3
 8004d34:	08004ef7 	.word	0x08004ef7
 8004d38:	200000fc 	.word	0x200000fc

08004d3c <stdio_exit_handler>:
 8004d3c:	4a02      	ldr	r2, [pc, #8]	@ (8004d48 <stdio_exit_handler+0xc>)
 8004d3e:	4903      	ldr	r1, [pc, #12]	@ (8004d4c <stdio_exit_handler+0x10>)
 8004d40:	4803      	ldr	r0, [pc, #12]	@ (8004d50 <stdio_exit_handler+0x14>)
 8004d42:	f000 b869 	b.w	8004e18 <_fwalk_sglue>
 8004d46:	bf00      	nop
 8004d48:	20000014 	.word	0x20000014
 8004d4c:	080058ad 	.word	0x080058ad
 8004d50:	20000024 	.word	0x20000024

08004d54 <cleanup_stdio>:
 8004d54:	6841      	ldr	r1, [r0, #4]
 8004d56:	4b0c      	ldr	r3, [pc, #48]	@ (8004d88 <cleanup_stdio+0x34>)
 8004d58:	4299      	cmp	r1, r3
 8004d5a:	b510      	push	{r4, lr}
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	d001      	beq.n	8004d64 <cleanup_stdio+0x10>
 8004d60:	f000 fda4 	bl	80058ac <_fflush_r>
 8004d64:	68a1      	ldr	r1, [r4, #8]
 8004d66:	4b09      	ldr	r3, [pc, #36]	@ (8004d8c <cleanup_stdio+0x38>)
 8004d68:	4299      	cmp	r1, r3
 8004d6a:	d002      	beq.n	8004d72 <cleanup_stdio+0x1e>
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f000 fd9d 	bl	80058ac <_fflush_r>
 8004d72:	68e1      	ldr	r1, [r4, #12]
 8004d74:	4b06      	ldr	r3, [pc, #24]	@ (8004d90 <cleanup_stdio+0x3c>)
 8004d76:	4299      	cmp	r1, r3
 8004d78:	d004      	beq.n	8004d84 <cleanup_stdio+0x30>
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d80:	f000 bd94 	b.w	80058ac <_fflush_r>
 8004d84:	bd10      	pop	{r4, pc}
 8004d86:	bf00      	nop
 8004d88:	200000fc 	.word	0x200000fc
 8004d8c:	20000164 	.word	0x20000164
 8004d90:	200001cc 	.word	0x200001cc

08004d94 <global_stdio_init.part.0>:
 8004d94:	b510      	push	{r4, lr}
 8004d96:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <global_stdio_init.part.0+0x30>)
 8004d98:	4c0b      	ldr	r4, [pc, #44]	@ (8004dc8 <global_stdio_init.part.0+0x34>)
 8004d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8004dcc <global_stdio_init.part.0+0x38>)
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	4620      	mov	r0, r4
 8004da0:	2200      	movs	r2, #0
 8004da2:	2104      	movs	r1, #4
 8004da4:	f7ff ff94 	bl	8004cd0 <std>
 8004da8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004dac:	2201      	movs	r2, #1
 8004dae:	2109      	movs	r1, #9
 8004db0:	f7ff ff8e 	bl	8004cd0 <std>
 8004db4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004db8:	2202      	movs	r2, #2
 8004dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dbe:	2112      	movs	r1, #18
 8004dc0:	f7ff bf86 	b.w	8004cd0 <std>
 8004dc4:	20000234 	.word	0x20000234
 8004dc8:	200000fc 	.word	0x200000fc
 8004dcc:	08004d3d 	.word	0x08004d3d

08004dd0 <__sfp_lock_acquire>:
 8004dd0:	4801      	ldr	r0, [pc, #4]	@ (8004dd8 <__sfp_lock_acquire+0x8>)
 8004dd2:	f000 b90e 	b.w	8004ff2 <__retarget_lock_acquire_recursive>
 8004dd6:	bf00      	nop
 8004dd8:	2000023d 	.word	0x2000023d

08004ddc <__sfp_lock_release>:
 8004ddc:	4801      	ldr	r0, [pc, #4]	@ (8004de4 <__sfp_lock_release+0x8>)
 8004dde:	f000 b909 	b.w	8004ff4 <__retarget_lock_release_recursive>
 8004de2:	bf00      	nop
 8004de4:	2000023d 	.word	0x2000023d

08004de8 <__sinit>:
 8004de8:	b510      	push	{r4, lr}
 8004dea:	4604      	mov	r4, r0
 8004dec:	f7ff fff0 	bl	8004dd0 <__sfp_lock_acquire>
 8004df0:	6a23      	ldr	r3, [r4, #32]
 8004df2:	b11b      	cbz	r3, 8004dfc <__sinit+0x14>
 8004df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df8:	f7ff bff0 	b.w	8004ddc <__sfp_lock_release>
 8004dfc:	4b04      	ldr	r3, [pc, #16]	@ (8004e10 <__sinit+0x28>)
 8004dfe:	6223      	str	r3, [r4, #32]
 8004e00:	4b04      	ldr	r3, [pc, #16]	@ (8004e14 <__sinit+0x2c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1f5      	bne.n	8004df4 <__sinit+0xc>
 8004e08:	f7ff ffc4 	bl	8004d94 <global_stdio_init.part.0>
 8004e0c:	e7f2      	b.n	8004df4 <__sinit+0xc>
 8004e0e:	bf00      	nop
 8004e10:	08004d55 	.word	0x08004d55
 8004e14:	20000234 	.word	0x20000234

08004e18 <_fwalk_sglue>:
 8004e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	4688      	mov	r8, r1
 8004e20:	4614      	mov	r4, r2
 8004e22:	2600      	movs	r6, #0
 8004e24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e28:	f1b9 0901 	subs.w	r9, r9, #1
 8004e2c:	d505      	bpl.n	8004e3a <_fwalk_sglue+0x22>
 8004e2e:	6824      	ldr	r4, [r4, #0]
 8004e30:	2c00      	cmp	r4, #0
 8004e32:	d1f7      	bne.n	8004e24 <_fwalk_sglue+0xc>
 8004e34:	4630      	mov	r0, r6
 8004e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e3a:	89ab      	ldrh	r3, [r5, #12]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d907      	bls.n	8004e50 <_fwalk_sglue+0x38>
 8004e40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e44:	3301      	adds	r3, #1
 8004e46:	d003      	beq.n	8004e50 <_fwalk_sglue+0x38>
 8004e48:	4629      	mov	r1, r5
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	47c0      	blx	r8
 8004e4e:	4306      	orrs	r6, r0
 8004e50:	3568      	adds	r5, #104	@ 0x68
 8004e52:	e7e9      	b.n	8004e28 <_fwalk_sglue+0x10>

08004e54 <iprintf>:
 8004e54:	b40f      	push	{r0, r1, r2, r3}
 8004e56:	b507      	push	{r0, r1, r2, lr}
 8004e58:	4906      	ldr	r1, [pc, #24]	@ (8004e74 <iprintf+0x20>)
 8004e5a:	ab04      	add	r3, sp, #16
 8004e5c:	6808      	ldr	r0, [r1, #0]
 8004e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e62:	6881      	ldr	r1, [r0, #8]
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	f000 f9f7 	bl	8005258 <_vfiprintf_r>
 8004e6a:	b003      	add	sp, #12
 8004e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e70:	b004      	add	sp, #16
 8004e72:	4770      	bx	lr
 8004e74:	20000020 	.word	0x20000020

08004e78 <__sread>:
 8004e78:	b510      	push	{r4, lr}
 8004e7a:	460c      	mov	r4, r1
 8004e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e80:	f000 f868 	bl	8004f54 <_read_r>
 8004e84:	2800      	cmp	r0, #0
 8004e86:	bfab      	itete	ge
 8004e88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e8c:	181b      	addge	r3, r3, r0
 8004e8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e92:	bfac      	ite	ge
 8004e94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e96:	81a3      	strhlt	r3, [r4, #12]
 8004e98:	bd10      	pop	{r4, pc}

08004e9a <__swrite>:
 8004e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9e:	461f      	mov	r7, r3
 8004ea0:	898b      	ldrh	r3, [r1, #12]
 8004ea2:	05db      	lsls	r3, r3, #23
 8004ea4:	4605      	mov	r5, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	4616      	mov	r6, r2
 8004eaa:	d505      	bpl.n	8004eb8 <__swrite+0x1e>
 8004eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f000 f83c 	bl	8004f30 <_lseek_r>
 8004eb8:	89a3      	ldrh	r3, [r4, #12]
 8004eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ebe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ec2:	81a3      	strh	r3, [r4, #12]
 8004ec4:	4632      	mov	r2, r6
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	4628      	mov	r0, r5
 8004eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ece:	f000 b853 	b.w	8004f78 <_write_r>

08004ed2 <__sseek>:
 8004ed2:	b510      	push	{r4, lr}
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eda:	f000 f829 	bl	8004f30 <_lseek_r>
 8004ede:	1c43      	adds	r3, r0, #1
 8004ee0:	89a3      	ldrh	r3, [r4, #12]
 8004ee2:	bf15      	itete	ne
 8004ee4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ee6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004eea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004eee:	81a3      	strheq	r3, [r4, #12]
 8004ef0:	bf18      	it	ne
 8004ef2:	81a3      	strhne	r3, [r4, #12]
 8004ef4:	bd10      	pop	{r4, pc}

08004ef6 <__sclose>:
 8004ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004efa:	f000 b809 	b.w	8004f10 <_close_r>

08004efe <memset>:
 8004efe:	4402      	add	r2, r0
 8004f00:	4603      	mov	r3, r0
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d100      	bne.n	8004f08 <memset+0xa>
 8004f06:	4770      	bx	lr
 8004f08:	f803 1b01 	strb.w	r1, [r3], #1
 8004f0c:	e7f9      	b.n	8004f02 <memset+0x4>
	...

08004f10 <_close_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	4d06      	ldr	r5, [pc, #24]	@ (8004f2c <_close_r+0x1c>)
 8004f14:	2300      	movs	r3, #0
 8004f16:	4604      	mov	r4, r0
 8004f18:	4608      	mov	r0, r1
 8004f1a:	602b      	str	r3, [r5, #0]
 8004f1c:	f7fd fa3f 	bl	800239e <_close>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	d102      	bne.n	8004f2a <_close_r+0x1a>
 8004f24:	682b      	ldr	r3, [r5, #0]
 8004f26:	b103      	cbz	r3, 8004f2a <_close_r+0x1a>
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	bd38      	pop	{r3, r4, r5, pc}
 8004f2c:	20000238 	.word	0x20000238

08004f30 <_lseek_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4d07      	ldr	r5, [pc, #28]	@ (8004f50 <_lseek_r+0x20>)
 8004f34:	4604      	mov	r4, r0
 8004f36:	4608      	mov	r0, r1
 8004f38:	4611      	mov	r1, r2
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	602a      	str	r2, [r5, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f7fd fa54 	bl	80023ec <_lseek>
 8004f44:	1c43      	adds	r3, r0, #1
 8004f46:	d102      	bne.n	8004f4e <_lseek_r+0x1e>
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	b103      	cbz	r3, 8004f4e <_lseek_r+0x1e>
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
 8004f50:	20000238 	.word	0x20000238

08004f54 <_read_r>:
 8004f54:	b538      	push	{r3, r4, r5, lr}
 8004f56:	4d07      	ldr	r5, [pc, #28]	@ (8004f74 <_read_r+0x20>)
 8004f58:	4604      	mov	r4, r0
 8004f5a:	4608      	mov	r0, r1
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	2200      	movs	r2, #0
 8004f60:	602a      	str	r2, [r5, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	f7fd f9e2 	bl	800232c <_read>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	d102      	bne.n	8004f72 <_read_r+0x1e>
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	b103      	cbz	r3, 8004f72 <_read_r+0x1e>
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	20000238 	.word	0x20000238

08004f78 <_write_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4d07      	ldr	r5, [pc, #28]	@ (8004f98 <_write_r+0x20>)
 8004f7c:	4604      	mov	r4, r0
 8004f7e:	4608      	mov	r0, r1
 8004f80:	4611      	mov	r1, r2
 8004f82:	2200      	movs	r2, #0
 8004f84:	602a      	str	r2, [r5, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	f7fd f9ed 	bl	8002366 <_write>
 8004f8c:	1c43      	adds	r3, r0, #1
 8004f8e:	d102      	bne.n	8004f96 <_write_r+0x1e>
 8004f90:	682b      	ldr	r3, [r5, #0]
 8004f92:	b103      	cbz	r3, 8004f96 <_write_r+0x1e>
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	bd38      	pop	{r3, r4, r5, pc}
 8004f98:	20000238 	.word	0x20000238

08004f9c <__errno>:
 8004f9c:	4b01      	ldr	r3, [pc, #4]	@ (8004fa4 <__errno+0x8>)
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	20000020 	.word	0x20000020

08004fa8 <__libc_init_array>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	4d0d      	ldr	r5, [pc, #52]	@ (8004fe0 <__libc_init_array+0x38>)
 8004fac:	4c0d      	ldr	r4, [pc, #52]	@ (8004fe4 <__libc_init_array+0x3c>)
 8004fae:	1b64      	subs	r4, r4, r5
 8004fb0:	10a4      	asrs	r4, r4, #2
 8004fb2:	2600      	movs	r6, #0
 8004fb4:	42a6      	cmp	r6, r4
 8004fb6:	d109      	bne.n	8004fcc <__libc_init_array+0x24>
 8004fb8:	4d0b      	ldr	r5, [pc, #44]	@ (8004fe8 <__libc_init_array+0x40>)
 8004fba:	4c0c      	ldr	r4, [pc, #48]	@ (8004fec <__libc_init_array+0x44>)
 8004fbc:	f000 fdc6 	bl	8005b4c <_init>
 8004fc0:	1b64      	subs	r4, r4, r5
 8004fc2:	10a4      	asrs	r4, r4, #2
 8004fc4:	2600      	movs	r6, #0
 8004fc6:	42a6      	cmp	r6, r4
 8004fc8:	d105      	bne.n	8004fd6 <__libc_init_array+0x2e>
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd0:	4798      	blx	r3
 8004fd2:	3601      	adds	r6, #1
 8004fd4:	e7ee      	b.n	8004fb4 <__libc_init_array+0xc>
 8004fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fda:	4798      	blx	r3
 8004fdc:	3601      	adds	r6, #1
 8004fde:	e7f2      	b.n	8004fc6 <__libc_init_array+0x1e>
 8004fe0:	08022be8 	.word	0x08022be8
 8004fe4:	08022be8 	.word	0x08022be8
 8004fe8:	08022be8 	.word	0x08022be8
 8004fec:	08022bec 	.word	0x08022bec

08004ff0 <__retarget_lock_init_recursive>:
 8004ff0:	4770      	bx	lr

08004ff2 <__retarget_lock_acquire_recursive>:
 8004ff2:	4770      	bx	lr

08004ff4 <__retarget_lock_release_recursive>:
 8004ff4:	4770      	bx	lr

08004ff6 <memcpy>:
 8004ff6:	440a      	add	r2, r1
 8004ff8:	4291      	cmp	r1, r2
 8004ffa:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ffe:	d100      	bne.n	8005002 <memcpy+0xc>
 8005000:	4770      	bx	lr
 8005002:	b510      	push	{r4, lr}
 8005004:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005008:	f803 4f01 	strb.w	r4, [r3, #1]!
 800500c:	4291      	cmp	r1, r2
 800500e:	d1f9      	bne.n	8005004 <memcpy+0xe>
 8005010:	bd10      	pop	{r4, pc}
	...

08005014 <_free_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4605      	mov	r5, r0
 8005018:	2900      	cmp	r1, #0
 800501a:	d041      	beq.n	80050a0 <_free_r+0x8c>
 800501c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005020:	1f0c      	subs	r4, r1, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	bfb8      	it	lt
 8005026:	18e4      	addlt	r4, r4, r3
 8005028:	f000 f8e0 	bl	80051ec <__malloc_lock>
 800502c:	4a1d      	ldr	r2, [pc, #116]	@ (80050a4 <_free_r+0x90>)
 800502e:	6813      	ldr	r3, [r2, #0]
 8005030:	b933      	cbnz	r3, 8005040 <_free_r+0x2c>
 8005032:	6063      	str	r3, [r4, #4]
 8005034:	6014      	str	r4, [r2, #0]
 8005036:	4628      	mov	r0, r5
 8005038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800503c:	f000 b8dc 	b.w	80051f8 <__malloc_unlock>
 8005040:	42a3      	cmp	r3, r4
 8005042:	d908      	bls.n	8005056 <_free_r+0x42>
 8005044:	6820      	ldr	r0, [r4, #0]
 8005046:	1821      	adds	r1, r4, r0
 8005048:	428b      	cmp	r3, r1
 800504a:	bf01      	itttt	eq
 800504c:	6819      	ldreq	r1, [r3, #0]
 800504e:	685b      	ldreq	r3, [r3, #4]
 8005050:	1809      	addeq	r1, r1, r0
 8005052:	6021      	streq	r1, [r4, #0]
 8005054:	e7ed      	b.n	8005032 <_free_r+0x1e>
 8005056:	461a      	mov	r2, r3
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	b10b      	cbz	r3, 8005060 <_free_r+0x4c>
 800505c:	42a3      	cmp	r3, r4
 800505e:	d9fa      	bls.n	8005056 <_free_r+0x42>
 8005060:	6811      	ldr	r1, [r2, #0]
 8005062:	1850      	adds	r0, r2, r1
 8005064:	42a0      	cmp	r0, r4
 8005066:	d10b      	bne.n	8005080 <_free_r+0x6c>
 8005068:	6820      	ldr	r0, [r4, #0]
 800506a:	4401      	add	r1, r0
 800506c:	1850      	adds	r0, r2, r1
 800506e:	4283      	cmp	r3, r0
 8005070:	6011      	str	r1, [r2, #0]
 8005072:	d1e0      	bne.n	8005036 <_free_r+0x22>
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	6053      	str	r3, [r2, #4]
 800507a:	4408      	add	r0, r1
 800507c:	6010      	str	r0, [r2, #0]
 800507e:	e7da      	b.n	8005036 <_free_r+0x22>
 8005080:	d902      	bls.n	8005088 <_free_r+0x74>
 8005082:	230c      	movs	r3, #12
 8005084:	602b      	str	r3, [r5, #0]
 8005086:	e7d6      	b.n	8005036 <_free_r+0x22>
 8005088:	6820      	ldr	r0, [r4, #0]
 800508a:	1821      	adds	r1, r4, r0
 800508c:	428b      	cmp	r3, r1
 800508e:	bf04      	itt	eq
 8005090:	6819      	ldreq	r1, [r3, #0]
 8005092:	685b      	ldreq	r3, [r3, #4]
 8005094:	6063      	str	r3, [r4, #4]
 8005096:	bf04      	itt	eq
 8005098:	1809      	addeq	r1, r1, r0
 800509a:	6021      	streq	r1, [r4, #0]
 800509c:	6054      	str	r4, [r2, #4]
 800509e:	e7ca      	b.n	8005036 <_free_r+0x22>
 80050a0:	bd38      	pop	{r3, r4, r5, pc}
 80050a2:	bf00      	nop
 80050a4:	20000244 	.word	0x20000244

080050a8 <sbrk_aligned>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	4e0f      	ldr	r6, [pc, #60]	@ (80050e8 <sbrk_aligned+0x40>)
 80050ac:	460c      	mov	r4, r1
 80050ae:	6831      	ldr	r1, [r6, #0]
 80050b0:	4605      	mov	r5, r0
 80050b2:	b911      	cbnz	r1, 80050ba <sbrk_aligned+0x12>
 80050b4:	f000 fcb6 	bl	8005a24 <_sbrk_r>
 80050b8:	6030      	str	r0, [r6, #0]
 80050ba:	4621      	mov	r1, r4
 80050bc:	4628      	mov	r0, r5
 80050be:	f000 fcb1 	bl	8005a24 <_sbrk_r>
 80050c2:	1c43      	adds	r3, r0, #1
 80050c4:	d103      	bne.n	80050ce <sbrk_aligned+0x26>
 80050c6:	f04f 34ff 	mov.w	r4, #4294967295
 80050ca:	4620      	mov	r0, r4
 80050cc:	bd70      	pop	{r4, r5, r6, pc}
 80050ce:	1cc4      	adds	r4, r0, #3
 80050d0:	f024 0403 	bic.w	r4, r4, #3
 80050d4:	42a0      	cmp	r0, r4
 80050d6:	d0f8      	beq.n	80050ca <sbrk_aligned+0x22>
 80050d8:	1a21      	subs	r1, r4, r0
 80050da:	4628      	mov	r0, r5
 80050dc:	f000 fca2 	bl	8005a24 <_sbrk_r>
 80050e0:	3001      	adds	r0, #1
 80050e2:	d1f2      	bne.n	80050ca <sbrk_aligned+0x22>
 80050e4:	e7ef      	b.n	80050c6 <sbrk_aligned+0x1e>
 80050e6:	bf00      	nop
 80050e8:	20000240 	.word	0x20000240

080050ec <_malloc_r>:
 80050ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050f0:	1ccd      	adds	r5, r1, #3
 80050f2:	f025 0503 	bic.w	r5, r5, #3
 80050f6:	3508      	adds	r5, #8
 80050f8:	2d0c      	cmp	r5, #12
 80050fa:	bf38      	it	cc
 80050fc:	250c      	movcc	r5, #12
 80050fe:	2d00      	cmp	r5, #0
 8005100:	4606      	mov	r6, r0
 8005102:	db01      	blt.n	8005108 <_malloc_r+0x1c>
 8005104:	42a9      	cmp	r1, r5
 8005106:	d904      	bls.n	8005112 <_malloc_r+0x26>
 8005108:	230c      	movs	r3, #12
 800510a:	6033      	str	r3, [r6, #0]
 800510c:	2000      	movs	r0, #0
 800510e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005112:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051e8 <_malloc_r+0xfc>
 8005116:	f000 f869 	bl	80051ec <__malloc_lock>
 800511a:	f8d8 3000 	ldr.w	r3, [r8]
 800511e:	461c      	mov	r4, r3
 8005120:	bb44      	cbnz	r4, 8005174 <_malloc_r+0x88>
 8005122:	4629      	mov	r1, r5
 8005124:	4630      	mov	r0, r6
 8005126:	f7ff ffbf 	bl	80050a8 <sbrk_aligned>
 800512a:	1c43      	adds	r3, r0, #1
 800512c:	4604      	mov	r4, r0
 800512e:	d158      	bne.n	80051e2 <_malloc_r+0xf6>
 8005130:	f8d8 4000 	ldr.w	r4, [r8]
 8005134:	4627      	mov	r7, r4
 8005136:	2f00      	cmp	r7, #0
 8005138:	d143      	bne.n	80051c2 <_malloc_r+0xd6>
 800513a:	2c00      	cmp	r4, #0
 800513c:	d04b      	beq.n	80051d6 <_malloc_r+0xea>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	4639      	mov	r1, r7
 8005142:	4630      	mov	r0, r6
 8005144:	eb04 0903 	add.w	r9, r4, r3
 8005148:	f000 fc6c 	bl	8005a24 <_sbrk_r>
 800514c:	4581      	cmp	r9, r0
 800514e:	d142      	bne.n	80051d6 <_malloc_r+0xea>
 8005150:	6821      	ldr	r1, [r4, #0]
 8005152:	1a6d      	subs	r5, r5, r1
 8005154:	4629      	mov	r1, r5
 8005156:	4630      	mov	r0, r6
 8005158:	f7ff ffa6 	bl	80050a8 <sbrk_aligned>
 800515c:	3001      	adds	r0, #1
 800515e:	d03a      	beq.n	80051d6 <_malloc_r+0xea>
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	442b      	add	r3, r5
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	f8d8 3000 	ldr.w	r3, [r8]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	bb62      	cbnz	r2, 80051c8 <_malloc_r+0xdc>
 800516e:	f8c8 7000 	str.w	r7, [r8]
 8005172:	e00f      	b.n	8005194 <_malloc_r+0xa8>
 8005174:	6822      	ldr	r2, [r4, #0]
 8005176:	1b52      	subs	r2, r2, r5
 8005178:	d420      	bmi.n	80051bc <_malloc_r+0xd0>
 800517a:	2a0b      	cmp	r2, #11
 800517c:	d917      	bls.n	80051ae <_malloc_r+0xc2>
 800517e:	1961      	adds	r1, r4, r5
 8005180:	42a3      	cmp	r3, r4
 8005182:	6025      	str	r5, [r4, #0]
 8005184:	bf18      	it	ne
 8005186:	6059      	strne	r1, [r3, #4]
 8005188:	6863      	ldr	r3, [r4, #4]
 800518a:	bf08      	it	eq
 800518c:	f8c8 1000 	streq.w	r1, [r8]
 8005190:	5162      	str	r2, [r4, r5]
 8005192:	604b      	str	r3, [r1, #4]
 8005194:	4630      	mov	r0, r6
 8005196:	f000 f82f 	bl	80051f8 <__malloc_unlock>
 800519a:	f104 000b 	add.w	r0, r4, #11
 800519e:	1d23      	adds	r3, r4, #4
 80051a0:	f020 0007 	bic.w	r0, r0, #7
 80051a4:	1ac2      	subs	r2, r0, r3
 80051a6:	bf1c      	itt	ne
 80051a8:	1a1b      	subne	r3, r3, r0
 80051aa:	50a3      	strne	r3, [r4, r2]
 80051ac:	e7af      	b.n	800510e <_malloc_r+0x22>
 80051ae:	6862      	ldr	r2, [r4, #4]
 80051b0:	42a3      	cmp	r3, r4
 80051b2:	bf0c      	ite	eq
 80051b4:	f8c8 2000 	streq.w	r2, [r8]
 80051b8:	605a      	strne	r2, [r3, #4]
 80051ba:	e7eb      	b.n	8005194 <_malloc_r+0xa8>
 80051bc:	4623      	mov	r3, r4
 80051be:	6864      	ldr	r4, [r4, #4]
 80051c0:	e7ae      	b.n	8005120 <_malloc_r+0x34>
 80051c2:	463c      	mov	r4, r7
 80051c4:	687f      	ldr	r7, [r7, #4]
 80051c6:	e7b6      	b.n	8005136 <_malloc_r+0x4a>
 80051c8:	461a      	mov	r2, r3
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	d1fb      	bne.n	80051c8 <_malloc_r+0xdc>
 80051d0:	2300      	movs	r3, #0
 80051d2:	6053      	str	r3, [r2, #4]
 80051d4:	e7de      	b.n	8005194 <_malloc_r+0xa8>
 80051d6:	230c      	movs	r3, #12
 80051d8:	6033      	str	r3, [r6, #0]
 80051da:	4630      	mov	r0, r6
 80051dc:	f000 f80c 	bl	80051f8 <__malloc_unlock>
 80051e0:	e794      	b.n	800510c <_malloc_r+0x20>
 80051e2:	6005      	str	r5, [r0, #0]
 80051e4:	e7d6      	b.n	8005194 <_malloc_r+0xa8>
 80051e6:	bf00      	nop
 80051e8:	20000244 	.word	0x20000244

080051ec <__malloc_lock>:
 80051ec:	4801      	ldr	r0, [pc, #4]	@ (80051f4 <__malloc_lock+0x8>)
 80051ee:	f7ff bf00 	b.w	8004ff2 <__retarget_lock_acquire_recursive>
 80051f2:	bf00      	nop
 80051f4:	2000023c 	.word	0x2000023c

080051f8 <__malloc_unlock>:
 80051f8:	4801      	ldr	r0, [pc, #4]	@ (8005200 <__malloc_unlock+0x8>)
 80051fa:	f7ff befb 	b.w	8004ff4 <__retarget_lock_release_recursive>
 80051fe:	bf00      	nop
 8005200:	2000023c 	.word	0x2000023c

08005204 <__sfputc_r>:
 8005204:	6893      	ldr	r3, [r2, #8]
 8005206:	3b01      	subs	r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	b410      	push	{r4}
 800520c:	6093      	str	r3, [r2, #8]
 800520e:	da08      	bge.n	8005222 <__sfputc_r+0x1e>
 8005210:	6994      	ldr	r4, [r2, #24]
 8005212:	42a3      	cmp	r3, r4
 8005214:	db01      	blt.n	800521a <__sfputc_r+0x16>
 8005216:	290a      	cmp	r1, #10
 8005218:	d103      	bne.n	8005222 <__sfputc_r+0x1e>
 800521a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800521e:	f000 bb6d 	b.w	80058fc <__swbuf_r>
 8005222:	6813      	ldr	r3, [r2, #0]
 8005224:	1c58      	adds	r0, r3, #1
 8005226:	6010      	str	r0, [r2, #0]
 8005228:	7019      	strb	r1, [r3, #0]
 800522a:	4608      	mov	r0, r1
 800522c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005230:	4770      	bx	lr

08005232 <__sfputs_r>:
 8005232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005234:	4606      	mov	r6, r0
 8005236:	460f      	mov	r7, r1
 8005238:	4614      	mov	r4, r2
 800523a:	18d5      	adds	r5, r2, r3
 800523c:	42ac      	cmp	r4, r5
 800523e:	d101      	bne.n	8005244 <__sfputs_r+0x12>
 8005240:	2000      	movs	r0, #0
 8005242:	e007      	b.n	8005254 <__sfputs_r+0x22>
 8005244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005248:	463a      	mov	r2, r7
 800524a:	4630      	mov	r0, r6
 800524c:	f7ff ffda 	bl	8005204 <__sfputc_r>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d1f3      	bne.n	800523c <__sfputs_r+0xa>
 8005254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005258 <_vfiprintf_r>:
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	460d      	mov	r5, r1
 800525e:	b09d      	sub	sp, #116	@ 0x74
 8005260:	4614      	mov	r4, r2
 8005262:	4698      	mov	r8, r3
 8005264:	4606      	mov	r6, r0
 8005266:	b118      	cbz	r0, 8005270 <_vfiprintf_r+0x18>
 8005268:	6a03      	ldr	r3, [r0, #32]
 800526a:	b90b      	cbnz	r3, 8005270 <_vfiprintf_r+0x18>
 800526c:	f7ff fdbc 	bl	8004de8 <__sinit>
 8005270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005272:	07d9      	lsls	r1, r3, #31
 8005274:	d405      	bmi.n	8005282 <_vfiprintf_r+0x2a>
 8005276:	89ab      	ldrh	r3, [r5, #12]
 8005278:	059a      	lsls	r2, r3, #22
 800527a:	d402      	bmi.n	8005282 <_vfiprintf_r+0x2a>
 800527c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800527e:	f7ff feb8 	bl	8004ff2 <__retarget_lock_acquire_recursive>
 8005282:	89ab      	ldrh	r3, [r5, #12]
 8005284:	071b      	lsls	r3, r3, #28
 8005286:	d501      	bpl.n	800528c <_vfiprintf_r+0x34>
 8005288:	692b      	ldr	r3, [r5, #16]
 800528a:	b99b      	cbnz	r3, 80052b4 <_vfiprintf_r+0x5c>
 800528c:	4629      	mov	r1, r5
 800528e:	4630      	mov	r0, r6
 8005290:	f000 fb72 	bl	8005978 <__swsetup_r>
 8005294:	b170      	cbz	r0, 80052b4 <_vfiprintf_r+0x5c>
 8005296:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005298:	07dc      	lsls	r4, r3, #31
 800529a:	d504      	bpl.n	80052a6 <_vfiprintf_r+0x4e>
 800529c:	f04f 30ff 	mov.w	r0, #4294967295
 80052a0:	b01d      	add	sp, #116	@ 0x74
 80052a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a6:	89ab      	ldrh	r3, [r5, #12]
 80052a8:	0598      	lsls	r0, r3, #22
 80052aa:	d4f7      	bmi.n	800529c <_vfiprintf_r+0x44>
 80052ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80052ae:	f7ff fea1 	bl	8004ff4 <__retarget_lock_release_recursive>
 80052b2:	e7f3      	b.n	800529c <_vfiprintf_r+0x44>
 80052b4:	2300      	movs	r3, #0
 80052b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80052b8:	2320      	movs	r3, #32
 80052ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052be:	f8cd 800c 	str.w	r8, [sp, #12]
 80052c2:	2330      	movs	r3, #48	@ 0x30
 80052c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005474 <_vfiprintf_r+0x21c>
 80052c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052cc:	f04f 0901 	mov.w	r9, #1
 80052d0:	4623      	mov	r3, r4
 80052d2:	469a      	mov	sl, r3
 80052d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052d8:	b10a      	cbz	r2, 80052de <_vfiprintf_r+0x86>
 80052da:	2a25      	cmp	r2, #37	@ 0x25
 80052dc:	d1f9      	bne.n	80052d2 <_vfiprintf_r+0x7a>
 80052de:	ebba 0b04 	subs.w	fp, sl, r4
 80052e2:	d00b      	beq.n	80052fc <_vfiprintf_r+0xa4>
 80052e4:	465b      	mov	r3, fp
 80052e6:	4622      	mov	r2, r4
 80052e8:	4629      	mov	r1, r5
 80052ea:	4630      	mov	r0, r6
 80052ec:	f7ff ffa1 	bl	8005232 <__sfputs_r>
 80052f0:	3001      	adds	r0, #1
 80052f2:	f000 80a7 	beq.w	8005444 <_vfiprintf_r+0x1ec>
 80052f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052f8:	445a      	add	r2, fp
 80052fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80052fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 809f 	beq.w	8005444 <_vfiprintf_r+0x1ec>
 8005306:	2300      	movs	r3, #0
 8005308:	f04f 32ff 	mov.w	r2, #4294967295
 800530c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005310:	f10a 0a01 	add.w	sl, sl, #1
 8005314:	9304      	str	r3, [sp, #16]
 8005316:	9307      	str	r3, [sp, #28]
 8005318:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800531c:	931a      	str	r3, [sp, #104]	@ 0x68
 800531e:	4654      	mov	r4, sl
 8005320:	2205      	movs	r2, #5
 8005322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005326:	4853      	ldr	r0, [pc, #332]	@ (8005474 <_vfiprintf_r+0x21c>)
 8005328:	f7fa ff52 	bl	80001d0 <memchr>
 800532c:	9a04      	ldr	r2, [sp, #16]
 800532e:	b9d8      	cbnz	r0, 8005368 <_vfiprintf_r+0x110>
 8005330:	06d1      	lsls	r1, r2, #27
 8005332:	bf44      	itt	mi
 8005334:	2320      	movmi	r3, #32
 8005336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800533a:	0713      	lsls	r3, r2, #28
 800533c:	bf44      	itt	mi
 800533e:	232b      	movmi	r3, #43	@ 0x2b
 8005340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005344:	f89a 3000 	ldrb.w	r3, [sl]
 8005348:	2b2a      	cmp	r3, #42	@ 0x2a
 800534a:	d015      	beq.n	8005378 <_vfiprintf_r+0x120>
 800534c:	9a07      	ldr	r2, [sp, #28]
 800534e:	4654      	mov	r4, sl
 8005350:	2000      	movs	r0, #0
 8005352:	f04f 0c0a 	mov.w	ip, #10
 8005356:	4621      	mov	r1, r4
 8005358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800535c:	3b30      	subs	r3, #48	@ 0x30
 800535e:	2b09      	cmp	r3, #9
 8005360:	d94b      	bls.n	80053fa <_vfiprintf_r+0x1a2>
 8005362:	b1b0      	cbz	r0, 8005392 <_vfiprintf_r+0x13a>
 8005364:	9207      	str	r2, [sp, #28]
 8005366:	e014      	b.n	8005392 <_vfiprintf_r+0x13a>
 8005368:	eba0 0308 	sub.w	r3, r0, r8
 800536c:	fa09 f303 	lsl.w	r3, r9, r3
 8005370:	4313      	orrs	r3, r2
 8005372:	9304      	str	r3, [sp, #16]
 8005374:	46a2      	mov	sl, r4
 8005376:	e7d2      	b.n	800531e <_vfiprintf_r+0xc6>
 8005378:	9b03      	ldr	r3, [sp, #12]
 800537a:	1d19      	adds	r1, r3, #4
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	9103      	str	r1, [sp, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	bfbb      	ittet	lt
 8005384:	425b      	neglt	r3, r3
 8005386:	f042 0202 	orrlt.w	r2, r2, #2
 800538a:	9307      	strge	r3, [sp, #28]
 800538c:	9307      	strlt	r3, [sp, #28]
 800538e:	bfb8      	it	lt
 8005390:	9204      	strlt	r2, [sp, #16]
 8005392:	7823      	ldrb	r3, [r4, #0]
 8005394:	2b2e      	cmp	r3, #46	@ 0x2e
 8005396:	d10a      	bne.n	80053ae <_vfiprintf_r+0x156>
 8005398:	7863      	ldrb	r3, [r4, #1]
 800539a:	2b2a      	cmp	r3, #42	@ 0x2a
 800539c:	d132      	bne.n	8005404 <_vfiprintf_r+0x1ac>
 800539e:	9b03      	ldr	r3, [sp, #12]
 80053a0:	1d1a      	adds	r2, r3, #4
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	9203      	str	r2, [sp, #12]
 80053a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053aa:	3402      	adds	r4, #2
 80053ac:	9305      	str	r3, [sp, #20]
 80053ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005484 <_vfiprintf_r+0x22c>
 80053b2:	7821      	ldrb	r1, [r4, #0]
 80053b4:	2203      	movs	r2, #3
 80053b6:	4650      	mov	r0, sl
 80053b8:	f7fa ff0a 	bl	80001d0 <memchr>
 80053bc:	b138      	cbz	r0, 80053ce <_vfiprintf_r+0x176>
 80053be:	9b04      	ldr	r3, [sp, #16]
 80053c0:	eba0 000a 	sub.w	r0, r0, sl
 80053c4:	2240      	movs	r2, #64	@ 0x40
 80053c6:	4082      	lsls	r2, r0
 80053c8:	4313      	orrs	r3, r2
 80053ca:	3401      	adds	r4, #1
 80053cc:	9304      	str	r3, [sp, #16]
 80053ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053d2:	4829      	ldr	r0, [pc, #164]	@ (8005478 <_vfiprintf_r+0x220>)
 80053d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053d8:	2206      	movs	r2, #6
 80053da:	f7fa fef9 	bl	80001d0 <memchr>
 80053de:	2800      	cmp	r0, #0
 80053e0:	d03f      	beq.n	8005462 <_vfiprintf_r+0x20a>
 80053e2:	4b26      	ldr	r3, [pc, #152]	@ (800547c <_vfiprintf_r+0x224>)
 80053e4:	bb1b      	cbnz	r3, 800542e <_vfiprintf_r+0x1d6>
 80053e6:	9b03      	ldr	r3, [sp, #12]
 80053e8:	3307      	adds	r3, #7
 80053ea:	f023 0307 	bic.w	r3, r3, #7
 80053ee:	3308      	adds	r3, #8
 80053f0:	9303      	str	r3, [sp, #12]
 80053f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053f4:	443b      	add	r3, r7
 80053f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80053f8:	e76a      	b.n	80052d0 <_vfiprintf_r+0x78>
 80053fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80053fe:	460c      	mov	r4, r1
 8005400:	2001      	movs	r0, #1
 8005402:	e7a8      	b.n	8005356 <_vfiprintf_r+0xfe>
 8005404:	2300      	movs	r3, #0
 8005406:	3401      	adds	r4, #1
 8005408:	9305      	str	r3, [sp, #20]
 800540a:	4619      	mov	r1, r3
 800540c:	f04f 0c0a 	mov.w	ip, #10
 8005410:	4620      	mov	r0, r4
 8005412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005416:	3a30      	subs	r2, #48	@ 0x30
 8005418:	2a09      	cmp	r2, #9
 800541a:	d903      	bls.n	8005424 <_vfiprintf_r+0x1cc>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0c6      	beq.n	80053ae <_vfiprintf_r+0x156>
 8005420:	9105      	str	r1, [sp, #20]
 8005422:	e7c4      	b.n	80053ae <_vfiprintf_r+0x156>
 8005424:	fb0c 2101 	mla	r1, ip, r1, r2
 8005428:	4604      	mov	r4, r0
 800542a:	2301      	movs	r3, #1
 800542c:	e7f0      	b.n	8005410 <_vfiprintf_r+0x1b8>
 800542e:	ab03      	add	r3, sp, #12
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	462a      	mov	r2, r5
 8005434:	4b12      	ldr	r3, [pc, #72]	@ (8005480 <_vfiprintf_r+0x228>)
 8005436:	a904      	add	r1, sp, #16
 8005438:	4630      	mov	r0, r6
 800543a:	f3af 8000 	nop.w
 800543e:	4607      	mov	r7, r0
 8005440:	1c78      	adds	r0, r7, #1
 8005442:	d1d6      	bne.n	80053f2 <_vfiprintf_r+0x19a>
 8005444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005446:	07d9      	lsls	r1, r3, #31
 8005448:	d405      	bmi.n	8005456 <_vfiprintf_r+0x1fe>
 800544a:	89ab      	ldrh	r3, [r5, #12]
 800544c:	059a      	lsls	r2, r3, #22
 800544e:	d402      	bmi.n	8005456 <_vfiprintf_r+0x1fe>
 8005450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005452:	f7ff fdcf 	bl	8004ff4 <__retarget_lock_release_recursive>
 8005456:	89ab      	ldrh	r3, [r5, #12]
 8005458:	065b      	lsls	r3, r3, #25
 800545a:	f53f af1f 	bmi.w	800529c <_vfiprintf_r+0x44>
 800545e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005460:	e71e      	b.n	80052a0 <_vfiprintf_r+0x48>
 8005462:	ab03      	add	r3, sp, #12
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	462a      	mov	r2, r5
 8005468:	4b05      	ldr	r3, [pc, #20]	@ (8005480 <_vfiprintf_r+0x228>)
 800546a:	a904      	add	r1, sp, #16
 800546c:	4630      	mov	r0, r6
 800546e:	f000 f879 	bl	8005564 <_printf_i>
 8005472:	e7e4      	b.n	800543e <_vfiprintf_r+0x1e6>
 8005474:	08022bac 	.word	0x08022bac
 8005478:	08022bb6 	.word	0x08022bb6
 800547c:	00000000 	.word	0x00000000
 8005480:	08005233 	.word	0x08005233
 8005484:	08022bb2 	.word	0x08022bb2

08005488 <_printf_common>:
 8005488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800548c:	4616      	mov	r6, r2
 800548e:	4698      	mov	r8, r3
 8005490:	688a      	ldr	r2, [r1, #8]
 8005492:	690b      	ldr	r3, [r1, #16]
 8005494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005498:	4293      	cmp	r3, r2
 800549a:	bfb8      	it	lt
 800549c:	4613      	movlt	r3, r2
 800549e:	6033      	str	r3, [r6, #0]
 80054a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054a4:	4607      	mov	r7, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	b10a      	cbz	r2, 80054ae <_printf_common+0x26>
 80054aa:	3301      	adds	r3, #1
 80054ac:	6033      	str	r3, [r6, #0]
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	0699      	lsls	r1, r3, #26
 80054b2:	bf42      	ittt	mi
 80054b4:	6833      	ldrmi	r3, [r6, #0]
 80054b6:	3302      	addmi	r3, #2
 80054b8:	6033      	strmi	r3, [r6, #0]
 80054ba:	6825      	ldr	r5, [r4, #0]
 80054bc:	f015 0506 	ands.w	r5, r5, #6
 80054c0:	d106      	bne.n	80054d0 <_printf_common+0x48>
 80054c2:	f104 0a19 	add.w	sl, r4, #25
 80054c6:	68e3      	ldr	r3, [r4, #12]
 80054c8:	6832      	ldr	r2, [r6, #0]
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	42ab      	cmp	r3, r5
 80054ce:	dc26      	bgt.n	800551e <_printf_common+0x96>
 80054d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80054d4:	6822      	ldr	r2, [r4, #0]
 80054d6:	3b00      	subs	r3, #0
 80054d8:	bf18      	it	ne
 80054da:	2301      	movne	r3, #1
 80054dc:	0692      	lsls	r2, r2, #26
 80054de:	d42b      	bmi.n	8005538 <_printf_common+0xb0>
 80054e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80054e4:	4641      	mov	r1, r8
 80054e6:	4638      	mov	r0, r7
 80054e8:	47c8      	blx	r9
 80054ea:	3001      	adds	r0, #1
 80054ec:	d01e      	beq.n	800552c <_printf_common+0xa4>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	6922      	ldr	r2, [r4, #16]
 80054f2:	f003 0306 	and.w	r3, r3, #6
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	bf02      	ittt	eq
 80054fa:	68e5      	ldreq	r5, [r4, #12]
 80054fc:	6833      	ldreq	r3, [r6, #0]
 80054fe:	1aed      	subeq	r5, r5, r3
 8005500:	68a3      	ldr	r3, [r4, #8]
 8005502:	bf0c      	ite	eq
 8005504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005508:	2500      	movne	r5, #0
 800550a:	4293      	cmp	r3, r2
 800550c:	bfc4      	itt	gt
 800550e:	1a9b      	subgt	r3, r3, r2
 8005510:	18ed      	addgt	r5, r5, r3
 8005512:	2600      	movs	r6, #0
 8005514:	341a      	adds	r4, #26
 8005516:	42b5      	cmp	r5, r6
 8005518:	d11a      	bne.n	8005550 <_printf_common+0xc8>
 800551a:	2000      	movs	r0, #0
 800551c:	e008      	b.n	8005530 <_printf_common+0xa8>
 800551e:	2301      	movs	r3, #1
 8005520:	4652      	mov	r2, sl
 8005522:	4641      	mov	r1, r8
 8005524:	4638      	mov	r0, r7
 8005526:	47c8      	blx	r9
 8005528:	3001      	adds	r0, #1
 800552a:	d103      	bne.n	8005534 <_printf_common+0xac>
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005534:	3501      	adds	r5, #1
 8005536:	e7c6      	b.n	80054c6 <_printf_common+0x3e>
 8005538:	18e1      	adds	r1, r4, r3
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	2030      	movs	r0, #48	@ 0x30
 800553e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005542:	4422      	add	r2, r4
 8005544:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005548:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800554c:	3302      	adds	r3, #2
 800554e:	e7c7      	b.n	80054e0 <_printf_common+0x58>
 8005550:	2301      	movs	r3, #1
 8005552:	4622      	mov	r2, r4
 8005554:	4641      	mov	r1, r8
 8005556:	4638      	mov	r0, r7
 8005558:	47c8      	blx	r9
 800555a:	3001      	adds	r0, #1
 800555c:	d0e6      	beq.n	800552c <_printf_common+0xa4>
 800555e:	3601      	adds	r6, #1
 8005560:	e7d9      	b.n	8005516 <_printf_common+0x8e>
	...

08005564 <_printf_i>:
 8005564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005568:	7e0f      	ldrb	r7, [r1, #24]
 800556a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800556c:	2f78      	cmp	r7, #120	@ 0x78
 800556e:	4691      	mov	r9, r2
 8005570:	4680      	mov	r8, r0
 8005572:	460c      	mov	r4, r1
 8005574:	469a      	mov	sl, r3
 8005576:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800557a:	d807      	bhi.n	800558c <_printf_i+0x28>
 800557c:	2f62      	cmp	r7, #98	@ 0x62
 800557e:	d80a      	bhi.n	8005596 <_printf_i+0x32>
 8005580:	2f00      	cmp	r7, #0
 8005582:	f000 80d2 	beq.w	800572a <_printf_i+0x1c6>
 8005586:	2f58      	cmp	r7, #88	@ 0x58
 8005588:	f000 80b9 	beq.w	80056fe <_printf_i+0x19a>
 800558c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005590:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005594:	e03a      	b.n	800560c <_printf_i+0xa8>
 8005596:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800559a:	2b15      	cmp	r3, #21
 800559c:	d8f6      	bhi.n	800558c <_printf_i+0x28>
 800559e:	a101      	add	r1, pc, #4	@ (adr r1, 80055a4 <_printf_i+0x40>)
 80055a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055a4:	080055fd 	.word	0x080055fd
 80055a8:	08005611 	.word	0x08005611
 80055ac:	0800558d 	.word	0x0800558d
 80055b0:	0800558d 	.word	0x0800558d
 80055b4:	0800558d 	.word	0x0800558d
 80055b8:	0800558d 	.word	0x0800558d
 80055bc:	08005611 	.word	0x08005611
 80055c0:	0800558d 	.word	0x0800558d
 80055c4:	0800558d 	.word	0x0800558d
 80055c8:	0800558d 	.word	0x0800558d
 80055cc:	0800558d 	.word	0x0800558d
 80055d0:	08005711 	.word	0x08005711
 80055d4:	0800563b 	.word	0x0800563b
 80055d8:	080056cb 	.word	0x080056cb
 80055dc:	0800558d 	.word	0x0800558d
 80055e0:	0800558d 	.word	0x0800558d
 80055e4:	08005733 	.word	0x08005733
 80055e8:	0800558d 	.word	0x0800558d
 80055ec:	0800563b 	.word	0x0800563b
 80055f0:	0800558d 	.word	0x0800558d
 80055f4:	0800558d 	.word	0x0800558d
 80055f8:	080056d3 	.word	0x080056d3
 80055fc:	6833      	ldr	r3, [r6, #0]
 80055fe:	1d1a      	adds	r2, r3, #4
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6032      	str	r2, [r6, #0]
 8005604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005608:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800560c:	2301      	movs	r3, #1
 800560e:	e09d      	b.n	800574c <_printf_i+0x1e8>
 8005610:	6833      	ldr	r3, [r6, #0]
 8005612:	6820      	ldr	r0, [r4, #0]
 8005614:	1d19      	adds	r1, r3, #4
 8005616:	6031      	str	r1, [r6, #0]
 8005618:	0606      	lsls	r6, r0, #24
 800561a:	d501      	bpl.n	8005620 <_printf_i+0xbc>
 800561c:	681d      	ldr	r5, [r3, #0]
 800561e:	e003      	b.n	8005628 <_printf_i+0xc4>
 8005620:	0645      	lsls	r5, r0, #25
 8005622:	d5fb      	bpl.n	800561c <_printf_i+0xb8>
 8005624:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005628:	2d00      	cmp	r5, #0
 800562a:	da03      	bge.n	8005634 <_printf_i+0xd0>
 800562c:	232d      	movs	r3, #45	@ 0x2d
 800562e:	426d      	negs	r5, r5
 8005630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005634:	4859      	ldr	r0, [pc, #356]	@ (800579c <_printf_i+0x238>)
 8005636:	230a      	movs	r3, #10
 8005638:	e011      	b.n	800565e <_printf_i+0xfa>
 800563a:	6821      	ldr	r1, [r4, #0]
 800563c:	6833      	ldr	r3, [r6, #0]
 800563e:	0608      	lsls	r0, r1, #24
 8005640:	f853 5b04 	ldr.w	r5, [r3], #4
 8005644:	d402      	bmi.n	800564c <_printf_i+0xe8>
 8005646:	0649      	lsls	r1, r1, #25
 8005648:	bf48      	it	mi
 800564a:	b2ad      	uxthmi	r5, r5
 800564c:	2f6f      	cmp	r7, #111	@ 0x6f
 800564e:	4853      	ldr	r0, [pc, #332]	@ (800579c <_printf_i+0x238>)
 8005650:	6033      	str	r3, [r6, #0]
 8005652:	bf14      	ite	ne
 8005654:	230a      	movne	r3, #10
 8005656:	2308      	moveq	r3, #8
 8005658:	2100      	movs	r1, #0
 800565a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800565e:	6866      	ldr	r6, [r4, #4]
 8005660:	60a6      	str	r6, [r4, #8]
 8005662:	2e00      	cmp	r6, #0
 8005664:	bfa2      	ittt	ge
 8005666:	6821      	ldrge	r1, [r4, #0]
 8005668:	f021 0104 	bicge.w	r1, r1, #4
 800566c:	6021      	strge	r1, [r4, #0]
 800566e:	b90d      	cbnz	r5, 8005674 <_printf_i+0x110>
 8005670:	2e00      	cmp	r6, #0
 8005672:	d04b      	beq.n	800570c <_printf_i+0x1a8>
 8005674:	4616      	mov	r6, r2
 8005676:	fbb5 f1f3 	udiv	r1, r5, r3
 800567a:	fb03 5711 	mls	r7, r3, r1, r5
 800567e:	5dc7      	ldrb	r7, [r0, r7]
 8005680:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005684:	462f      	mov	r7, r5
 8005686:	42bb      	cmp	r3, r7
 8005688:	460d      	mov	r5, r1
 800568a:	d9f4      	bls.n	8005676 <_printf_i+0x112>
 800568c:	2b08      	cmp	r3, #8
 800568e:	d10b      	bne.n	80056a8 <_printf_i+0x144>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	07df      	lsls	r7, r3, #31
 8005694:	d508      	bpl.n	80056a8 <_printf_i+0x144>
 8005696:	6923      	ldr	r3, [r4, #16]
 8005698:	6861      	ldr	r1, [r4, #4]
 800569a:	4299      	cmp	r1, r3
 800569c:	bfde      	ittt	le
 800569e:	2330      	movle	r3, #48	@ 0x30
 80056a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056a8:	1b92      	subs	r2, r2, r6
 80056aa:	6122      	str	r2, [r4, #16]
 80056ac:	f8cd a000 	str.w	sl, [sp]
 80056b0:	464b      	mov	r3, r9
 80056b2:	aa03      	add	r2, sp, #12
 80056b4:	4621      	mov	r1, r4
 80056b6:	4640      	mov	r0, r8
 80056b8:	f7ff fee6 	bl	8005488 <_printf_common>
 80056bc:	3001      	adds	r0, #1
 80056be:	d14a      	bne.n	8005756 <_printf_i+0x1f2>
 80056c0:	f04f 30ff 	mov.w	r0, #4294967295
 80056c4:	b004      	add	sp, #16
 80056c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	f043 0320 	orr.w	r3, r3, #32
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	4833      	ldr	r0, [pc, #204]	@ (80057a0 <_printf_i+0x23c>)
 80056d4:	2778      	movs	r7, #120	@ 0x78
 80056d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	6831      	ldr	r1, [r6, #0]
 80056de:	061f      	lsls	r7, r3, #24
 80056e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80056e4:	d402      	bmi.n	80056ec <_printf_i+0x188>
 80056e6:	065f      	lsls	r7, r3, #25
 80056e8:	bf48      	it	mi
 80056ea:	b2ad      	uxthmi	r5, r5
 80056ec:	6031      	str	r1, [r6, #0]
 80056ee:	07d9      	lsls	r1, r3, #31
 80056f0:	bf44      	itt	mi
 80056f2:	f043 0320 	orrmi.w	r3, r3, #32
 80056f6:	6023      	strmi	r3, [r4, #0]
 80056f8:	b11d      	cbz	r5, 8005702 <_printf_i+0x19e>
 80056fa:	2310      	movs	r3, #16
 80056fc:	e7ac      	b.n	8005658 <_printf_i+0xf4>
 80056fe:	4827      	ldr	r0, [pc, #156]	@ (800579c <_printf_i+0x238>)
 8005700:	e7e9      	b.n	80056d6 <_printf_i+0x172>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	f023 0320 	bic.w	r3, r3, #32
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	e7f6      	b.n	80056fa <_printf_i+0x196>
 800570c:	4616      	mov	r6, r2
 800570e:	e7bd      	b.n	800568c <_printf_i+0x128>
 8005710:	6833      	ldr	r3, [r6, #0]
 8005712:	6825      	ldr	r5, [r4, #0]
 8005714:	6961      	ldr	r1, [r4, #20]
 8005716:	1d18      	adds	r0, r3, #4
 8005718:	6030      	str	r0, [r6, #0]
 800571a:	062e      	lsls	r6, r5, #24
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	d501      	bpl.n	8005724 <_printf_i+0x1c0>
 8005720:	6019      	str	r1, [r3, #0]
 8005722:	e002      	b.n	800572a <_printf_i+0x1c6>
 8005724:	0668      	lsls	r0, r5, #25
 8005726:	d5fb      	bpl.n	8005720 <_printf_i+0x1bc>
 8005728:	8019      	strh	r1, [r3, #0]
 800572a:	2300      	movs	r3, #0
 800572c:	6123      	str	r3, [r4, #16]
 800572e:	4616      	mov	r6, r2
 8005730:	e7bc      	b.n	80056ac <_printf_i+0x148>
 8005732:	6833      	ldr	r3, [r6, #0]
 8005734:	1d1a      	adds	r2, r3, #4
 8005736:	6032      	str	r2, [r6, #0]
 8005738:	681e      	ldr	r6, [r3, #0]
 800573a:	6862      	ldr	r2, [r4, #4]
 800573c:	2100      	movs	r1, #0
 800573e:	4630      	mov	r0, r6
 8005740:	f7fa fd46 	bl	80001d0 <memchr>
 8005744:	b108      	cbz	r0, 800574a <_printf_i+0x1e6>
 8005746:	1b80      	subs	r0, r0, r6
 8005748:	6060      	str	r0, [r4, #4]
 800574a:	6863      	ldr	r3, [r4, #4]
 800574c:	6123      	str	r3, [r4, #16]
 800574e:	2300      	movs	r3, #0
 8005750:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005754:	e7aa      	b.n	80056ac <_printf_i+0x148>
 8005756:	6923      	ldr	r3, [r4, #16]
 8005758:	4632      	mov	r2, r6
 800575a:	4649      	mov	r1, r9
 800575c:	4640      	mov	r0, r8
 800575e:	47d0      	blx	sl
 8005760:	3001      	adds	r0, #1
 8005762:	d0ad      	beq.n	80056c0 <_printf_i+0x15c>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	079b      	lsls	r3, r3, #30
 8005768:	d413      	bmi.n	8005792 <_printf_i+0x22e>
 800576a:	68e0      	ldr	r0, [r4, #12]
 800576c:	9b03      	ldr	r3, [sp, #12]
 800576e:	4298      	cmp	r0, r3
 8005770:	bfb8      	it	lt
 8005772:	4618      	movlt	r0, r3
 8005774:	e7a6      	b.n	80056c4 <_printf_i+0x160>
 8005776:	2301      	movs	r3, #1
 8005778:	4632      	mov	r2, r6
 800577a:	4649      	mov	r1, r9
 800577c:	4640      	mov	r0, r8
 800577e:	47d0      	blx	sl
 8005780:	3001      	adds	r0, #1
 8005782:	d09d      	beq.n	80056c0 <_printf_i+0x15c>
 8005784:	3501      	adds	r5, #1
 8005786:	68e3      	ldr	r3, [r4, #12]
 8005788:	9903      	ldr	r1, [sp, #12]
 800578a:	1a5b      	subs	r3, r3, r1
 800578c:	42ab      	cmp	r3, r5
 800578e:	dcf2      	bgt.n	8005776 <_printf_i+0x212>
 8005790:	e7eb      	b.n	800576a <_printf_i+0x206>
 8005792:	2500      	movs	r5, #0
 8005794:	f104 0619 	add.w	r6, r4, #25
 8005798:	e7f5      	b.n	8005786 <_printf_i+0x222>
 800579a:	bf00      	nop
 800579c:	08022bbd 	.word	0x08022bbd
 80057a0:	08022bce 	.word	0x08022bce

080057a4 <__sflush_r>:
 80057a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ac:	0716      	lsls	r6, r2, #28
 80057ae:	4605      	mov	r5, r0
 80057b0:	460c      	mov	r4, r1
 80057b2:	d454      	bmi.n	800585e <__sflush_r+0xba>
 80057b4:	684b      	ldr	r3, [r1, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	dc02      	bgt.n	80057c0 <__sflush_r+0x1c>
 80057ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80057bc:	2b00      	cmp	r3, #0
 80057be:	dd48      	ble.n	8005852 <__sflush_r+0xae>
 80057c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80057c2:	2e00      	cmp	r6, #0
 80057c4:	d045      	beq.n	8005852 <__sflush_r+0xae>
 80057c6:	2300      	movs	r3, #0
 80057c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80057cc:	682f      	ldr	r7, [r5, #0]
 80057ce:	6a21      	ldr	r1, [r4, #32]
 80057d0:	602b      	str	r3, [r5, #0]
 80057d2:	d030      	beq.n	8005836 <__sflush_r+0x92>
 80057d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	0759      	lsls	r1, r3, #29
 80057da:	d505      	bpl.n	80057e8 <__sflush_r+0x44>
 80057dc:	6863      	ldr	r3, [r4, #4]
 80057de:	1ad2      	subs	r2, r2, r3
 80057e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80057e2:	b10b      	cbz	r3, 80057e8 <__sflush_r+0x44>
 80057e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80057e6:	1ad2      	subs	r2, r2, r3
 80057e8:	2300      	movs	r3, #0
 80057ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80057ec:	6a21      	ldr	r1, [r4, #32]
 80057ee:	4628      	mov	r0, r5
 80057f0:	47b0      	blx	r6
 80057f2:	1c43      	adds	r3, r0, #1
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	d106      	bne.n	8005806 <__sflush_r+0x62>
 80057f8:	6829      	ldr	r1, [r5, #0]
 80057fa:	291d      	cmp	r1, #29
 80057fc:	d82b      	bhi.n	8005856 <__sflush_r+0xb2>
 80057fe:	4a2a      	ldr	r2, [pc, #168]	@ (80058a8 <__sflush_r+0x104>)
 8005800:	410a      	asrs	r2, r1
 8005802:	07d6      	lsls	r6, r2, #31
 8005804:	d427      	bmi.n	8005856 <__sflush_r+0xb2>
 8005806:	2200      	movs	r2, #0
 8005808:	6062      	str	r2, [r4, #4]
 800580a:	04d9      	lsls	r1, r3, #19
 800580c:	6922      	ldr	r2, [r4, #16]
 800580e:	6022      	str	r2, [r4, #0]
 8005810:	d504      	bpl.n	800581c <__sflush_r+0x78>
 8005812:	1c42      	adds	r2, r0, #1
 8005814:	d101      	bne.n	800581a <__sflush_r+0x76>
 8005816:	682b      	ldr	r3, [r5, #0]
 8005818:	b903      	cbnz	r3, 800581c <__sflush_r+0x78>
 800581a:	6560      	str	r0, [r4, #84]	@ 0x54
 800581c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800581e:	602f      	str	r7, [r5, #0]
 8005820:	b1b9      	cbz	r1, 8005852 <__sflush_r+0xae>
 8005822:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005826:	4299      	cmp	r1, r3
 8005828:	d002      	beq.n	8005830 <__sflush_r+0x8c>
 800582a:	4628      	mov	r0, r5
 800582c:	f7ff fbf2 	bl	8005014 <_free_r>
 8005830:	2300      	movs	r3, #0
 8005832:	6363      	str	r3, [r4, #52]	@ 0x34
 8005834:	e00d      	b.n	8005852 <__sflush_r+0xae>
 8005836:	2301      	movs	r3, #1
 8005838:	4628      	mov	r0, r5
 800583a:	47b0      	blx	r6
 800583c:	4602      	mov	r2, r0
 800583e:	1c50      	adds	r0, r2, #1
 8005840:	d1c9      	bne.n	80057d6 <__sflush_r+0x32>
 8005842:	682b      	ldr	r3, [r5, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0c6      	beq.n	80057d6 <__sflush_r+0x32>
 8005848:	2b1d      	cmp	r3, #29
 800584a:	d001      	beq.n	8005850 <__sflush_r+0xac>
 800584c:	2b16      	cmp	r3, #22
 800584e:	d11e      	bne.n	800588e <__sflush_r+0xea>
 8005850:	602f      	str	r7, [r5, #0]
 8005852:	2000      	movs	r0, #0
 8005854:	e022      	b.n	800589c <__sflush_r+0xf8>
 8005856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800585a:	b21b      	sxth	r3, r3
 800585c:	e01b      	b.n	8005896 <__sflush_r+0xf2>
 800585e:	690f      	ldr	r7, [r1, #16]
 8005860:	2f00      	cmp	r7, #0
 8005862:	d0f6      	beq.n	8005852 <__sflush_r+0xae>
 8005864:	0793      	lsls	r3, r2, #30
 8005866:	680e      	ldr	r6, [r1, #0]
 8005868:	bf08      	it	eq
 800586a:	694b      	ldreq	r3, [r1, #20]
 800586c:	600f      	str	r7, [r1, #0]
 800586e:	bf18      	it	ne
 8005870:	2300      	movne	r3, #0
 8005872:	eba6 0807 	sub.w	r8, r6, r7
 8005876:	608b      	str	r3, [r1, #8]
 8005878:	f1b8 0f00 	cmp.w	r8, #0
 800587c:	dde9      	ble.n	8005852 <__sflush_r+0xae>
 800587e:	6a21      	ldr	r1, [r4, #32]
 8005880:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005882:	4643      	mov	r3, r8
 8005884:	463a      	mov	r2, r7
 8005886:	4628      	mov	r0, r5
 8005888:	47b0      	blx	r6
 800588a:	2800      	cmp	r0, #0
 800588c:	dc08      	bgt.n	80058a0 <__sflush_r+0xfc>
 800588e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005896:	81a3      	strh	r3, [r4, #12]
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058a0:	4407      	add	r7, r0
 80058a2:	eba8 0800 	sub.w	r8, r8, r0
 80058a6:	e7e7      	b.n	8005878 <__sflush_r+0xd4>
 80058a8:	dfbffffe 	.word	0xdfbffffe

080058ac <_fflush_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	690b      	ldr	r3, [r1, #16]
 80058b0:	4605      	mov	r5, r0
 80058b2:	460c      	mov	r4, r1
 80058b4:	b913      	cbnz	r3, 80058bc <_fflush_r+0x10>
 80058b6:	2500      	movs	r5, #0
 80058b8:	4628      	mov	r0, r5
 80058ba:	bd38      	pop	{r3, r4, r5, pc}
 80058bc:	b118      	cbz	r0, 80058c6 <_fflush_r+0x1a>
 80058be:	6a03      	ldr	r3, [r0, #32]
 80058c0:	b90b      	cbnz	r3, 80058c6 <_fflush_r+0x1a>
 80058c2:	f7ff fa91 	bl	8004de8 <__sinit>
 80058c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0f3      	beq.n	80058b6 <_fflush_r+0xa>
 80058ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80058d0:	07d0      	lsls	r0, r2, #31
 80058d2:	d404      	bmi.n	80058de <_fflush_r+0x32>
 80058d4:	0599      	lsls	r1, r3, #22
 80058d6:	d402      	bmi.n	80058de <_fflush_r+0x32>
 80058d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058da:	f7ff fb8a 	bl	8004ff2 <__retarget_lock_acquire_recursive>
 80058de:	4628      	mov	r0, r5
 80058e0:	4621      	mov	r1, r4
 80058e2:	f7ff ff5f 	bl	80057a4 <__sflush_r>
 80058e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058e8:	07da      	lsls	r2, r3, #31
 80058ea:	4605      	mov	r5, r0
 80058ec:	d4e4      	bmi.n	80058b8 <_fflush_r+0xc>
 80058ee:	89a3      	ldrh	r3, [r4, #12]
 80058f0:	059b      	lsls	r3, r3, #22
 80058f2:	d4e1      	bmi.n	80058b8 <_fflush_r+0xc>
 80058f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058f6:	f7ff fb7d 	bl	8004ff4 <__retarget_lock_release_recursive>
 80058fa:	e7dd      	b.n	80058b8 <_fflush_r+0xc>

080058fc <__swbuf_r>:
 80058fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fe:	460e      	mov	r6, r1
 8005900:	4614      	mov	r4, r2
 8005902:	4605      	mov	r5, r0
 8005904:	b118      	cbz	r0, 800590e <__swbuf_r+0x12>
 8005906:	6a03      	ldr	r3, [r0, #32]
 8005908:	b90b      	cbnz	r3, 800590e <__swbuf_r+0x12>
 800590a:	f7ff fa6d 	bl	8004de8 <__sinit>
 800590e:	69a3      	ldr	r3, [r4, #24]
 8005910:	60a3      	str	r3, [r4, #8]
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	071a      	lsls	r2, r3, #28
 8005916:	d501      	bpl.n	800591c <__swbuf_r+0x20>
 8005918:	6923      	ldr	r3, [r4, #16]
 800591a:	b943      	cbnz	r3, 800592e <__swbuf_r+0x32>
 800591c:	4621      	mov	r1, r4
 800591e:	4628      	mov	r0, r5
 8005920:	f000 f82a 	bl	8005978 <__swsetup_r>
 8005924:	b118      	cbz	r0, 800592e <__swbuf_r+0x32>
 8005926:	f04f 37ff 	mov.w	r7, #4294967295
 800592a:	4638      	mov	r0, r7
 800592c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	6922      	ldr	r2, [r4, #16]
 8005932:	1a98      	subs	r0, r3, r2
 8005934:	6963      	ldr	r3, [r4, #20]
 8005936:	b2f6      	uxtb	r6, r6
 8005938:	4283      	cmp	r3, r0
 800593a:	4637      	mov	r7, r6
 800593c:	dc05      	bgt.n	800594a <__swbuf_r+0x4e>
 800593e:	4621      	mov	r1, r4
 8005940:	4628      	mov	r0, r5
 8005942:	f7ff ffb3 	bl	80058ac <_fflush_r>
 8005946:	2800      	cmp	r0, #0
 8005948:	d1ed      	bne.n	8005926 <__swbuf_r+0x2a>
 800594a:	68a3      	ldr	r3, [r4, #8]
 800594c:	3b01      	subs	r3, #1
 800594e:	60a3      	str	r3, [r4, #8]
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	6022      	str	r2, [r4, #0]
 8005956:	701e      	strb	r6, [r3, #0]
 8005958:	6962      	ldr	r2, [r4, #20]
 800595a:	1c43      	adds	r3, r0, #1
 800595c:	429a      	cmp	r2, r3
 800595e:	d004      	beq.n	800596a <__swbuf_r+0x6e>
 8005960:	89a3      	ldrh	r3, [r4, #12]
 8005962:	07db      	lsls	r3, r3, #31
 8005964:	d5e1      	bpl.n	800592a <__swbuf_r+0x2e>
 8005966:	2e0a      	cmp	r6, #10
 8005968:	d1df      	bne.n	800592a <__swbuf_r+0x2e>
 800596a:	4621      	mov	r1, r4
 800596c:	4628      	mov	r0, r5
 800596e:	f7ff ff9d 	bl	80058ac <_fflush_r>
 8005972:	2800      	cmp	r0, #0
 8005974:	d0d9      	beq.n	800592a <__swbuf_r+0x2e>
 8005976:	e7d6      	b.n	8005926 <__swbuf_r+0x2a>

08005978 <__swsetup_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4b29      	ldr	r3, [pc, #164]	@ (8005a20 <__swsetup_r+0xa8>)
 800597c:	4605      	mov	r5, r0
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	460c      	mov	r4, r1
 8005982:	b118      	cbz	r0, 800598c <__swsetup_r+0x14>
 8005984:	6a03      	ldr	r3, [r0, #32]
 8005986:	b90b      	cbnz	r3, 800598c <__swsetup_r+0x14>
 8005988:	f7ff fa2e 	bl	8004de8 <__sinit>
 800598c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005990:	0719      	lsls	r1, r3, #28
 8005992:	d422      	bmi.n	80059da <__swsetup_r+0x62>
 8005994:	06da      	lsls	r2, r3, #27
 8005996:	d407      	bmi.n	80059a8 <__swsetup_r+0x30>
 8005998:	2209      	movs	r2, #9
 800599a:	602a      	str	r2, [r5, #0]
 800599c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059a0:	81a3      	strh	r3, [r4, #12]
 80059a2:	f04f 30ff 	mov.w	r0, #4294967295
 80059a6:	e033      	b.n	8005a10 <__swsetup_r+0x98>
 80059a8:	0758      	lsls	r0, r3, #29
 80059aa:	d512      	bpl.n	80059d2 <__swsetup_r+0x5a>
 80059ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059ae:	b141      	cbz	r1, 80059c2 <__swsetup_r+0x4a>
 80059b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059b4:	4299      	cmp	r1, r3
 80059b6:	d002      	beq.n	80059be <__swsetup_r+0x46>
 80059b8:	4628      	mov	r0, r5
 80059ba:	f7ff fb2b 	bl	8005014 <_free_r>
 80059be:	2300      	movs	r3, #0
 80059c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80059c8:	81a3      	strh	r3, [r4, #12]
 80059ca:	2300      	movs	r3, #0
 80059cc:	6063      	str	r3, [r4, #4]
 80059ce:	6923      	ldr	r3, [r4, #16]
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	89a3      	ldrh	r3, [r4, #12]
 80059d4:	f043 0308 	orr.w	r3, r3, #8
 80059d8:	81a3      	strh	r3, [r4, #12]
 80059da:	6923      	ldr	r3, [r4, #16]
 80059dc:	b94b      	cbnz	r3, 80059f2 <__swsetup_r+0x7a>
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80059e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059e8:	d003      	beq.n	80059f2 <__swsetup_r+0x7a>
 80059ea:	4621      	mov	r1, r4
 80059ec:	4628      	mov	r0, r5
 80059ee:	f000 f84f 	bl	8005a90 <__smakebuf_r>
 80059f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059f6:	f013 0201 	ands.w	r2, r3, #1
 80059fa:	d00a      	beq.n	8005a12 <__swsetup_r+0x9a>
 80059fc:	2200      	movs	r2, #0
 80059fe:	60a2      	str	r2, [r4, #8]
 8005a00:	6962      	ldr	r2, [r4, #20]
 8005a02:	4252      	negs	r2, r2
 8005a04:	61a2      	str	r2, [r4, #24]
 8005a06:	6922      	ldr	r2, [r4, #16]
 8005a08:	b942      	cbnz	r2, 8005a1c <__swsetup_r+0xa4>
 8005a0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a0e:	d1c5      	bne.n	800599c <__swsetup_r+0x24>
 8005a10:	bd38      	pop	{r3, r4, r5, pc}
 8005a12:	0799      	lsls	r1, r3, #30
 8005a14:	bf58      	it	pl
 8005a16:	6962      	ldrpl	r2, [r4, #20]
 8005a18:	60a2      	str	r2, [r4, #8]
 8005a1a:	e7f4      	b.n	8005a06 <__swsetup_r+0x8e>
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	e7f7      	b.n	8005a10 <__swsetup_r+0x98>
 8005a20:	20000020 	.word	0x20000020

08005a24 <_sbrk_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	4d06      	ldr	r5, [pc, #24]	@ (8005a40 <_sbrk_r+0x1c>)
 8005a28:	2300      	movs	r3, #0
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	4608      	mov	r0, r1
 8005a2e:	602b      	str	r3, [r5, #0]
 8005a30:	f7fc fcea 	bl	8002408 <_sbrk>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	d102      	bne.n	8005a3e <_sbrk_r+0x1a>
 8005a38:	682b      	ldr	r3, [r5, #0]
 8005a3a:	b103      	cbz	r3, 8005a3e <_sbrk_r+0x1a>
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	bd38      	pop	{r3, r4, r5, pc}
 8005a40:	20000238 	.word	0x20000238

08005a44 <__swhatbuf_r>:
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	460c      	mov	r4, r1
 8005a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	b096      	sub	sp, #88	@ 0x58
 8005a50:	4615      	mov	r5, r2
 8005a52:	461e      	mov	r6, r3
 8005a54:	da0d      	bge.n	8005a72 <__swhatbuf_r+0x2e>
 8005a56:	89a3      	ldrh	r3, [r4, #12]
 8005a58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a5c:	f04f 0100 	mov.w	r1, #0
 8005a60:	bf14      	ite	ne
 8005a62:	2340      	movne	r3, #64	@ 0x40
 8005a64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a68:	2000      	movs	r0, #0
 8005a6a:	6031      	str	r1, [r6, #0]
 8005a6c:	602b      	str	r3, [r5, #0]
 8005a6e:	b016      	add	sp, #88	@ 0x58
 8005a70:	bd70      	pop	{r4, r5, r6, pc}
 8005a72:	466a      	mov	r2, sp
 8005a74:	f000 f848 	bl	8005b08 <_fstat_r>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	dbec      	blt.n	8005a56 <__swhatbuf_r+0x12>
 8005a7c:	9901      	ldr	r1, [sp, #4]
 8005a7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a86:	4259      	negs	r1, r3
 8005a88:	4159      	adcs	r1, r3
 8005a8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a8e:	e7eb      	b.n	8005a68 <__swhatbuf_r+0x24>

08005a90 <__smakebuf_r>:
 8005a90:	898b      	ldrh	r3, [r1, #12]
 8005a92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a94:	079d      	lsls	r5, r3, #30
 8005a96:	4606      	mov	r6, r0
 8005a98:	460c      	mov	r4, r1
 8005a9a:	d507      	bpl.n	8005aac <__smakebuf_r+0x1c>
 8005a9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	6123      	str	r3, [r4, #16]
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	6163      	str	r3, [r4, #20]
 8005aa8:	b003      	add	sp, #12
 8005aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aac:	ab01      	add	r3, sp, #4
 8005aae:	466a      	mov	r2, sp
 8005ab0:	f7ff ffc8 	bl	8005a44 <__swhatbuf_r>
 8005ab4:	9f00      	ldr	r7, [sp, #0]
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	4639      	mov	r1, r7
 8005aba:	4630      	mov	r0, r6
 8005abc:	f7ff fb16 	bl	80050ec <_malloc_r>
 8005ac0:	b948      	cbnz	r0, 8005ad6 <__smakebuf_r+0x46>
 8005ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ac6:	059a      	lsls	r2, r3, #22
 8005ac8:	d4ee      	bmi.n	8005aa8 <__smakebuf_r+0x18>
 8005aca:	f023 0303 	bic.w	r3, r3, #3
 8005ace:	f043 0302 	orr.w	r3, r3, #2
 8005ad2:	81a3      	strh	r3, [r4, #12]
 8005ad4:	e7e2      	b.n	8005a9c <__smakebuf_r+0xc>
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	6020      	str	r0, [r4, #0]
 8005ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ade:	81a3      	strh	r3, [r4, #12]
 8005ae0:	9b01      	ldr	r3, [sp, #4]
 8005ae2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005ae6:	b15b      	cbz	r3, 8005b00 <__smakebuf_r+0x70>
 8005ae8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aec:	4630      	mov	r0, r6
 8005aee:	f000 f81d 	bl	8005b2c <_isatty_r>
 8005af2:	b128      	cbz	r0, 8005b00 <__smakebuf_r+0x70>
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	f023 0303 	bic.w	r3, r3, #3
 8005afa:	f043 0301 	orr.w	r3, r3, #1
 8005afe:	81a3      	strh	r3, [r4, #12]
 8005b00:	89a3      	ldrh	r3, [r4, #12]
 8005b02:	431d      	orrs	r5, r3
 8005b04:	81a5      	strh	r5, [r4, #12]
 8005b06:	e7cf      	b.n	8005aa8 <__smakebuf_r+0x18>

08005b08 <_fstat_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4d07      	ldr	r5, [pc, #28]	@ (8005b28 <_fstat_r+0x20>)
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4604      	mov	r4, r0
 8005b10:	4608      	mov	r0, r1
 8005b12:	4611      	mov	r1, r2
 8005b14:	602b      	str	r3, [r5, #0]
 8005b16:	f7fc fc4e 	bl	80023b6 <_fstat>
 8005b1a:	1c43      	adds	r3, r0, #1
 8005b1c:	d102      	bne.n	8005b24 <_fstat_r+0x1c>
 8005b1e:	682b      	ldr	r3, [r5, #0]
 8005b20:	b103      	cbz	r3, 8005b24 <_fstat_r+0x1c>
 8005b22:	6023      	str	r3, [r4, #0]
 8005b24:	bd38      	pop	{r3, r4, r5, pc}
 8005b26:	bf00      	nop
 8005b28:	20000238 	.word	0x20000238

08005b2c <_isatty_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d06      	ldr	r5, [pc, #24]	@ (8005b48 <_isatty_r+0x1c>)
 8005b30:	2300      	movs	r3, #0
 8005b32:	4604      	mov	r4, r0
 8005b34:	4608      	mov	r0, r1
 8005b36:	602b      	str	r3, [r5, #0]
 8005b38:	f7fc fc4d 	bl	80023d6 <_isatty>
 8005b3c:	1c43      	adds	r3, r0, #1
 8005b3e:	d102      	bne.n	8005b46 <_isatty_r+0x1a>
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	b103      	cbz	r3, 8005b46 <_isatty_r+0x1a>
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	bd38      	pop	{r3, r4, r5, pc}
 8005b48:	20000238 	.word	0x20000238

08005b4c <_init>:
 8005b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4e:	bf00      	nop
 8005b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b52:	bc08      	pop	{r3}
 8005b54:	469e      	mov	lr, r3
 8005b56:	4770      	bx	lr

08005b58 <_fini>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	bf00      	nop
 8005b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5e:	bc08      	pop	{r3}
 8005b60:	469e      	mov	lr, r3
 8005b62:	4770      	bx	lr
