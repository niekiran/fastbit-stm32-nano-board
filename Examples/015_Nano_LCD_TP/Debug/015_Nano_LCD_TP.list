
015_Nano_LCD_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005618  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001c320  080057a8  080057a8  000067a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021ac8  08021ac8  00023068  2**0
                  CONTENTS
  4 .ARM          00000008  08021ac8  08021ac8  00022ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021ad0  08021ad0  00023068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021ad0  08021ad0  00022ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021ad4  08021ad4  00022ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08021ad8  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00023068  2**0
                  CONTENTS
 10 .bss          000001d8  20000068  20000068  00023068  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20000240  20000240  00023068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00023068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009708  00000000  00000000  00023098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e7f  00000000  00000000  0002c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000900  00000000  00000000  0002e620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c4  00000000  00000000  0002ef20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001de5f  00000000  00000000  0002f5e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cbb7  00000000  00000000  0004d443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac427  00000000  00000000  00059ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00106421  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002aac  00000000  00000000  00106464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00108f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005790 	.word	0x08005790

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005790 	.word	0x08005790

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <CST816S_i2c_read>:
  * @param  reg_addr: Address of the register to read from.
  * @param  reg_data: Pointer to a buffer where the read data will be stored.
  * @param  length: Number of bytes to read.
  * @retval None
  */
static void CST816S_i2c_read(uint16_t addr, uint8_t reg_addr, uint8_t *reg_data, size_t length) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af04      	add	r7, sp, #16
 8000276:	60ba      	str	r2, [r7, #8]
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	4603      	mov	r3, r0
 800027c:	81fb      	strh	r3, [r7, #14]
 800027e:	460b      	mov	r3, r1
 8000280:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Mem_Read(&hi2c1, addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, length, HAL_MAX_DELAY);
 8000282:	89fb      	ldrh	r3, [r7, #14]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	b299      	uxth	r1, r3
 8000288:	7b7b      	ldrb	r3, [r7, #13]
 800028a:	b29a      	uxth	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	b29b      	uxth	r3, r3
 8000290:	f04f 30ff 	mov.w	r0, #4294967295
 8000294:	9002      	str	r0, [sp, #8]
 8000296:	9301      	str	r3, [sp, #4]
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	2301      	movs	r3, #1
 800029e:	4803      	ldr	r0, [pc, #12]	@ (80002ac <CST816S_i2c_read+0x3c>)
 80002a0:	f002 fb68 	bl	8002974 <HAL_I2C_Mem_Read>
}
 80002a4:	bf00      	nop
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000098 	.word	0x20000098

080002b0 <HAL_GPIO_EXTI_Callback>:
/**
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == TP_IN_Pin) {
 80002ba:	88fb      	ldrh	r3, [r7, #6]
 80002bc:	2b20      	cmp	r3, #32
 80002be:	d102      	bne.n	80002c6 <HAL_GPIO_EXTI_Callback+0x16>
    is_touch_detected = 1;
 80002c0:	4b04      	ldr	r3, [pc, #16]	@ (80002d4 <HAL_GPIO_EXTI_Callback+0x24>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	701a      	strb	r2, [r3, #0]
  }
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	20000084 	.word	0x20000084

080002d8 <CST816S_hw_reset>:

void CST816S_hw_reset(void) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 80002dc:	2201      	movs	r2, #1
 80002de:	2110      	movs	r1, #16
 80002e0:	480b      	ldr	r0, [pc, #44]	@ (8000310 <CST816S_hw_reset+0x38>)
 80002e2:	f002 fa7b 	bl	80027dc <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80002e6:	2032      	movs	r0, #50	@ 0x32
 80002e8:	f001 ffc8 	bl	800227c <HAL_Delay>
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	2110      	movs	r1, #16
 80002f0:	4807      	ldr	r0, [pc, #28]	@ (8000310 <CST816S_hw_reset+0x38>)
 80002f2:	f002 fa73 	bl	80027dc <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80002f6:	2005      	movs	r0, #5
 80002f8:	f001 ffc0 	bl	800227c <HAL_Delay>
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2110      	movs	r1, #16
 8000300:	4803      	ldr	r0, [pc, #12]	@ (8000310 <CST816S_hw_reset+0x38>)
 8000302:	f002 fa6b 	bl	80027dc <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000306:	2032      	movs	r0, #50	@ 0x32
 8000308:	f001 ffb8 	bl	800227c <HAL_Delay>
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	48000400 	.word	0x48000400

08000314 <CST816S_init>:
/**
  * @brief  Performs a hardware reset of the CST816S touch sensor.
  *         This function assumes GPIO pins and delays are configured appropriately.
  * @retval None
  */
void CST816S_init(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  CST816S_hw_reset();
 8000318:	f7ff ffde 	bl	80002d8 <CST816S_hw_reset>

  CST816S_i2c_read(CST816S_ADDRESS, 0x15, &data.version, 1);
 800031c:	2301      	movs	r3, #1
 800031e:	4a0f      	ldr	r2, [pc, #60]	@ (800035c <CST816S_init+0x48>)
 8000320:	2115      	movs	r1, #21
 8000322:	2015      	movs	r0, #21
 8000324:	f7ff ffa4 	bl	8000270 <CST816S_i2c_read>
  HAL_Delay(5);
 8000328:	2005      	movs	r0, #5
 800032a:	f001 ffa7 	bl	800227c <HAL_Delay>
  CST816S_i2c_read(CST816S_ADDRESS, 0xA7, data.versionInfo, 3);
 800032e:	2303      	movs	r3, #3
 8000330:	4a0b      	ldr	r2, [pc, #44]	@ (8000360 <CST816S_init+0x4c>)
 8000332:	21a7      	movs	r1, #167	@ 0xa7
 8000334:	2015      	movs	r0, #21
 8000336:	f7ff ff9b 	bl	8000270 <CST816S_i2c_read>

  if(data.versionInfo[0] == 0xB4){
 800033a:	4b0a      	ldr	r3, [pc, #40]	@ (8000364 <CST816S_init+0x50>)
 800033c:	7b5b      	ldrb	r3, [r3, #13]
 800033e:	2bb4      	cmp	r3, #180	@ 0xb4
 8000340:	d103      	bne.n	800034a <CST816S_init+0x36>
    printf("CST86S detected.\n\t");
 8000342:	4809      	ldr	r0, [pc, #36]	@ (8000368 <CST816S_init+0x54>)
 8000344:	f004 fbb6 	bl	8004ab4 <iprintf>
 8000348:	e002      	b.n	8000350 <CST816S_init+0x3c>
  } else {
    printf("CST86S not detected.\n\t");
 800034a:	4808      	ldr	r0, [pc, #32]	@ (800036c <CST816S_init+0x58>)
 800034c:	f004 fbb2 	bl	8004ab4 <iprintf>
  }
  HAL_Delay(50);
 8000350:	2032      	movs	r0, #50	@ 0x32
 8000352:	f001 ff93 	bl	800227c <HAL_Delay>
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000094 	.word	0x20000094
 8000360:	20000095 	.word	0x20000095
 8000364:	20000088 	.word	0x20000088
 8000368:	080057a8 	.word	0x080057a8
 800036c:	080057bc 	.word	0x080057bc

08000370 <gc9a01a_write_cmd>:
/**
  * @brief  Sends a command to the GC9A01A LCD display.
  * @param  cmd: The command byte to be sent to the display.
  * @retval None
  */
static void gc9a01a_write_cmd(uint8_t cmd) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
  GC9A01A_DC_CMD;
 800037a:	2200      	movs	r2, #0
 800037c:	2102      	movs	r1, #2
 800037e:	4839      	ldr	r0, [pc, #228]	@ (8000464 <gc9a01a_write_cmd+0xf4>)
 8000380:	f002 fa2c 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT(cmd);
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	b2db      	uxtb	r3, r3
 800038c:	461a      	mov	r2, r3
 800038e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000392:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000396:	f002 fa21 	bl	80027dc <HAL_GPIO_WritePin>
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	105b      	asrs	r3, r3, #1
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	461a      	mov	r2, r3
 80003a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003b0:	f002 fa14 	bl	80027dc <HAL_GPIO_WritePin>
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	109b      	asrs	r3, r3, #2
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	461a      	mov	r2, r3
 80003c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003c6:	4827      	ldr	r0, [pc, #156]	@ (8000464 <gc9a01a_write_cmd+0xf4>)
 80003c8:	f002 fa08 	bl	80027dc <HAL_GPIO_WritePin>
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	10db      	asrs	r3, r3, #3
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	461a      	mov	r2, r3
 80003da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003de:	4821      	ldr	r0, [pc, #132]	@ (8000464 <gc9a01a_write_cmd+0xf4>)
 80003e0:	f002 f9fc 	bl	80027dc <HAL_GPIO_WritePin>
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	111b      	asrs	r3, r3, #4
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	461a      	mov	r2, r3
 80003f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003f6:	481b      	ldr	r0, [pc, #108]	@ (8000464 <gc9a01a_write_cmd+0xf4>)
 80003f8:	f002 f9f0 	bl	80027dc <HAL_GPIO_WritePin>
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	115b      	asrs	r3, r3, #5
 8000400:	b2db      	uxtb	r3, r3
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	b2db      	uxtb	r3, r3
 8000408:	461a      	mov	r2, r3
 800040a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800040e:	4815      	ldr	r0, [pc, #84]	@ (8000464 <gc9a01a_write_cmd+0xf4>)
 8000410:	f002 f9e4 	bl	80027dc <HAL_GPIO_WritePin>
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	119b      	asrs	r3, r3, #6
 8000418:	b2db      	uxtb	r3, r3
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	b2db      	uxtb	r3, r3
 8000420:	461a      	mov	r2, r3
 8000422:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000426:	480f      	ldr	r0, [pc, #60]	@ (8000464 <gc9a01a_write_cmd+0xf4>)
 8000428:	f002 f9d8 	bl	80027dc <HAL_GPIO_WritePin>
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	09db      	lsrs	r3, r3, #7
 8000430:	b2db      	uxtb	r3, r3
 8000432:	461a      	mov	r2, r3
 8000434:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000438:	480a      	ldr	r0, [pc, #40]	@ (8000464 <gc9a01a_write_cmd+0xf4>)
 800043a:	f002 f9cf 	bl	80027dc <HAL_GPIO_WritePin>
 800043e:	2200      	movs	r2, #0
 8000440:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000444:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000448:	f002 f9c8 	bl	80027dc <HAL_GPIO_WritePin>
 800044c:	2201      	movs	r2, #1
 800044e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000452:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000456:	f002 f9c1 	bl	80027dc <HAL_GPIO_WritePin>
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	48000400 	.word	0x48000400

08000468 <gc9a01a_write_data>:
  * @brief  Sends a buffer of data to the GC9A01A LCD display.
  * @param  buff: Pointer to the buffer containing the data to be sent.
  * @param  buff_size: Size of the buffer.
  * @retval None
  */
static void gc9a01a_write_data(uint8_t* buff, uint32_t buff_size) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
  GC9A01A_DC_DATA;
 8000472:	2201      	movs	r2, #1
 8000474:	2102      	movs	r1, #2
 8000476:	484b      	ldr	r0, [pc, #300]	@ (80005a4 <gc9a01a_write_data+0x13c>)
 8000478:	f002 f9b0 	bl	80027dc <HAL_GPIO_WritePin>

  for(uint32_t i = 0; i < buff_size; i++) {
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	e085      	b.n	800058e <gc9a01a_write_data+0x126>
    GC9A01A_WRITE_8BIT(buff[i]);
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	4413      	add	r3, r2
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	b2db      	uxtb	r3, r3
 8000490:	461a      	mov	r2, r3
 8000492:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000496:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800049a:	f002 f99f 	bl	80027dc <HAL_GPIO_WritePin>
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	4413      	add	r3, r2
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	105b      	asrs	r3, r3, #1
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	461a      	mov	r2, r3
 80004b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ba:	f002 f98f 	bl	80027dc <HAL_GPIO_WritePin>
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	4413      	add	r3, r2
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	109b      	asrs	r3, r3, #2
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	461a      	mov	r2, r3
 80004d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004d6:	4833      	ldr	r0, [pc, #204]	@ (80005a4 <gc9a01a_write_data+0x13c>)
 80004d8:	f002 f980 	bl	80027dc <HAL_GPIO_WritePin>
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	4413      	add	r3, r2
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	10db      	asrs	r3, r3, #3
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	461a      	mov	r2, r3
 80004f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004f4:	482b      	ldr	r0, [pc, #172]	@ (80005a4 <gc9a01a_write_data+0x13c>)
 80004f6:	f002 f971 	bl	80027dc <HAL_GPIO_WritePin>
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	4413      	add	r3, r2
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	111b      	asrs	r3, r3, #4
 8000504:	b2db      	uxtb	r3, r3
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	b2db      	uxtb	r3, r3
 800050c:	461a      	mov	r2, r3
 800050e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000512:	4824      	ldr	r0, [pc, #144]	@ (80005a4 <gc9a01a_write_data+0x13c>)
 8000514:	f002 f962 	bl	80027dc <HAL_GPIO_WritePin>
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	4413      	add	r3, r2
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	115b      	asrs	r3, r3, #5
 8000522:	b2db      	uxtb	r3, r3
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	b2db      	uxtb	r3, r3
 800052a:	461a      	mov	r2, r3
 800052c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000530:	481c      	ldr	r0, [pc, #112]	@ (80005a4 <gc9a01a_write_data+0x13c>)
 8000532:	f002 f953 	bl	80027dc <HAL_GPIO_WritePin>
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	4413      	add	r3, r2
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	119b      	asrs	r3, r3, #6
 8000540:	b2db      	uxtb	r3, r3
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	461a      	mov	r2, r3
 800054a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800054e:	4815      	ldr	r0, [pc, #84]	@ (80005a4 <gc9a01a_write_data+0x13c>)
 8000550:	f002 f944 	bl	80027dc <HAL_GPIO_WritePin>
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	4413      	add	r3, r2
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	09db      	lsrs	r3, r3, #7
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000566:	480f      	ldr	r0, [pc, #60]	@ (80005a4 <gc9a01a_write_data+0x13c>)
 8000568:	f002 f938 	bl	80027dc <HAL_GPIO_WritePin>
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f002 f931 	bl	80027dc <HAL_GPIO_WritePin>
 800057a:	2201      	movs	r2, #1
 800057c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000580:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000584:	f002 f92a 	bl	80027dc <HAL_GPIO_WritePin>
  for(uint32_t i = 0; i < buff_size; i++) {
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3301      	adds	r3, #1
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	429a      	cmp	r2, r3
 8000594:	f4ff af75 	bcc.w	8000482 <gc9a01a_write_data+0x1a>
  }
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	48000400 	.word	0x48000400

080005a8 <gc9a01a_hw_reset>:
/**
  * @brief  Hardware reset for GC9A01A LCD
  * @param  None
  * @retval None
  */
static void gc9a01a_hw_reset() {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  GC9A01A_RST_HIGH  ;
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005b2:	480d      	ldr	r0, [pc, #52]	@ (80005e8 <gc9a01a_hw_reset+0x40>)
 80005b4:	f002 f912 	bl	80027dc <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80005b8:	200a      	movs	r0, #10
 80005ba:	f001 fe5f 	bl	800227c <HAL_Delay>
  GC9A01A_RST_LOW;
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005c4:	4808      	ldr	r0, [pc, #32]	@ (80005e8 <gc9a01a_hw_reset+0x40>)
 80005c6:	f002 f909 	bl	80027dc <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80005ca:	200a      	movs	r0, #10
 80005cc:	f001 fe56 	bl	800227c <HAL_Delay>
  GC9A01A_RST_HIGH ;
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d6:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <gc9a01a_hw_reset+0x40>)
 80005d8:	f002 f900 	bl	80027dc <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80005dc:	200a      	movs	r0, #10
 80005de:	f001 fe4d 	bl	800227c <HAL_Delay>
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	48000400 	.word	0x48000400

080005ec <gc9a01a_set_address_window>:
 * @param x0 start column address.
 * @param x1 end column address.
 * @param y0 start row address.
 * @param y1 end row address.
 */
void gc9a01a_set_address_window(uint16_t x0, uint16_t x1, uint16_t y0, uint16_t y1) {
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4604      	mov	r4, r0
 80005f4:	4608      	mov	r0, r1
 80005f6:	4611      	mov	r1, r2
 80005f8:	461a      	mov	r2, r3
 80005fa:	4623      	mov	r3, r4
 80005fc:	80fb      	strh	r3, [r7, #6]
 80005fe:	4603      	mov	r3, r0
 8000600:	80bb      	strh	r3, [r7, #4]
 8000602:	460b      	mov	r3, r1
 8000604:	807b      	strh	r3, [r7, #2]
 8000606:	4613      	mov	r3, r2
 8000608:	803b      	strh	r3, [r7, #0]
  // Send commands to set column address (x2 to x2)
  GC9A01A_DC_CMD;
 800060a:	2200      	movs	r2, #0
 800060c:	2102      	movs	r1, #2
 800060e:	48c5      	ldr	r0, [pc, #788]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 8000610:	f002 f8e4 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT(GC9A01A_CASET); // Column address set command
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800061a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061e:	f002 f8dd 	bl	80027dc <HAL_GPIO_WritePin>
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062c:	f002 f8d6 	bl	80027dc <HAL_GPIO_WritePin>
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000636:	48bb      	ldr	r0, [pc, #748]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 8000638:	f002 f8d0 	bl	80027dc <HAL_GPIO_WritePin>
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000642:	48b8      	ldr	r0, [pc, #736]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 8000644:	f002 f8ca 	bl	80027dc <HAL_GPIO_WritePin>
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800064e:	48b5      	ldr	r0, [pc, #724]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 8000650:	f002 f8c4 	bl	80027dc <HAL_GPIO_WritePin>
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800065a:	48b2      	ldr	r0, [pc, #712]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 800065c:	f002 f8be 	bl	80027dc <HAL_GPIO_WritePin>
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000666:	48af      	ldr	r0, [pc, #700]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 8000668:	f002 f8b8 	bl	80027dc <HAL_GPIO_WritePin>
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000672:	48ac      	ldr	r0, [pc, #688]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 8000674:	f002 f8b2 	bl	80027dc <HAL_GPIO_WritePin>
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800067e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000682:	f002 f8ab 	bl	80027dc <HAL_GPIO_WritePin>
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800068c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000690:	f002 f8a4 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_DC_DATA;
 8000694:	2201      	movs	r2, #1
 8000696:	2102      	movs	r1, #2
 8000698:	48a2      	ldr	r0, [pc, #648]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 800069a:	f002 f89f 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT((uint8_t)(x0 >> 8));
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	0a1b      	lsrs	r3, r3, #8
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b6:	f002 f891 	bl	80027dc <HAL_GPIO_WritePin>
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	b29b      	uxth	r3, r3
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	105b      	asrs	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	461a      	mov	r2, r3
 80006ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d6:	f002 f881 	bl	80027dc <HAL_GPIO_WritePin>
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	b29b      	uxth	r3, r3
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	109b      	asrs	r3, r3, #2
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	461a      	mov	r2, r3
 80006ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006f2:	488c      	ldr	r0, [pc, #560]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 80006f4:	f002 f872 	bl	80027dc <HAL_GPIO_WritePin>
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	0a1b      	lsrs	r3, r3, #8
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	10db      	asrs	r3, r3, #3
 8000702:	b2db      	uxtb	r3, r3
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	b2db      	uxtb	r3, r3
 800070a:	461a      	mov	r2, r3
 800070c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000710:	4884      	ldr	r0, [pc, #528]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 8000712:	f002 f863 	bl	80027dc <HAL_GPIO_WritePin>
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	111b      	asrs	r3, r3, #4
 8000720:	b2db      	uxtb	r3, r3
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	b2db      	uxtb	r3, r3
 8000728:	461a      	mov	r2, r3
 800072a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800072e:	487d      	ldr	r0, [pc, #500]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 8000730:	f002 f854 	bl	80027dc <HAL_GPIO_WritePin>
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	0a1b      	lsrs	r3, r3, #8
 8000738:	b29b      	uxth	r3, r3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	115b      	asrs	r3, r3, #5
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	461a      	mov	r2, r3
 8000748:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800074c:	4875      	ldr	r0, [pc, #468]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 800074e:	f002 f845 	bl	80027dc <HAL_GPIO_WritePin>
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	b29b      	uxth	r3, r3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	119b      	asrs	r3, r3, #6
 800075c:	b2db      	uxtb	r3, r3
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	b2db      	uxtb	r3, r3
 8000764:	461a      	mov	r2, r3
 8000766:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800076a:	486e      	ldr	r0, [pc, #440]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 800076c:	f002 f836 	bl	80027dc <HAL_GPIO_WritePin>
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	0a1b      	lsrs	r3, r3, #8
 8000774:	b29b      	uxth	r3, r3
 8000776:	b2db      	uxtb	r3, r3
 8000778:	09db      	lsrs	r3, r3, #7
 800077a:	b2db      	uxtb	r3, r3
 800077c:	461a      	mov	r2, r3
 800077e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000782:	4868      	ldr	r0, [pc, #416]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 8000784:	f002 f82a 	bl	80027dc <HAL_GPIO_WritePin>
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800078e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000792:	f002 f823 	bl	80027dc <HAL_GPIO_WritePin>
 8000796:	2201      	movs	r2, #1
 8000798:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800079c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a0:	f002 f81c 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT((uint8_t)x0);
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b8:	f002 f810 	bl	80027dc <HAL_GPIO_WritePin>
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	105b      	asrs	r3, r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	461a      	mov	r2, r3
 80007cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d4:	f002 f802 	bl	80027dc <HAL_GPIO_WritePin>
 80007d8:	88fb      	ldrh	r3, [r7, #6]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	109b      	asrs	r3, r3, #2
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	461a      	mov	r2, r3
 80007e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ec:	484d      	ldr	r0, [pc, #308]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 80007ee:	f001 fff5 	bl	80027dc <HAL_GPIO_WritePin>
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	10db      	asrs	r3, r3, #3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	461a      	mov	r2, r3
 8000802:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000806:	4847      	ldr	r0, [pc, #284]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 8000808:	f001 ffe8 	bl	80027dc <HAL_GPIO_WritePin>
 800080c:	88fb      	ldrh	r3, [r7, #6]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	111b      	asrs	r3, r3, #4
 8000812:	b2db      	uxtb	r3, r3
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	b2db      	uxtb	r3, r3
 800081a:	461a      	mov	r2, r3
 800081c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000820:	4840      	ldr	r0, [pc, #256]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 8000822:	f001 ffdb 	bl	80027dc <HAL_GPIO_WritePin>
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	115b      	asrs	r3, r3, #5
 800082c:	b2db      	uxtb	r3, r3
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	b2db      	uxtb	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800083a:	483a      	ldr	r0, [pc, #232]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 800083c:	f001 ffce 	bl	80027dc <HAL_GPIO_WritePin>
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	119b      	asrs	r3, r3, #6
 8000846:	b2db      	uxtb	r3, r3
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000854:	4833      	ldr	r0, [pc, #204]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 8000856:	f001 ffc1 	bl	80027dc <HAL_GPIO_WritePin>
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	09db      	lsrs	r3, r3, #7
 8000860:	b2db      	uxtb	r3, r3
 8000862:	461a      	mov	r2, r3
 8000864:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000868:	482e      	ldr	r0, [pc, #184]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 800086a:	f001 ffb7 	bl	80027dc <HAL_GPIO_WritePin>
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000874:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000878:	f001 ffb0 	bl	80027dc <HAL_GPIO_WritePin>
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000882:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000886:	f001 ffa9 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT((uint8_t)(x1 >> 8));
 800088a:	88bb      	ldrh	r3, [r7, #4]
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	b29b      	uxth	r3, r3
 8000890:	b2db      	uxtb	r3, r3
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	b2db      	uxtb	r3, r3
 8000898:	461a      	mov	r2, r3
 800089a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800089e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a2:	f001 ff9b 	bl	80027dc <HAL_GPIO_WritePin>
 80008a6:	88bb      	ldrh	r3, [r7, #4]
 80008a8:	0a1b      	lsrs	r3, r3, #8
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	105b      	asrs	r3, r3, #1
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	461a      	mov	r2, r3
 80008ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c2:	f001 ff8b 	bl	80027dc <HAL_GPIO_WritePin>
 80008c6:	88bb      	ldrh	r3, [r7, #4]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	109b      	asrs	r3, r3, #2
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	461a      	mov	r2, r3
 80008da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008de:	4811      	ldr	r0, [pc, #68]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 80008e0:	f001 ff7c 	bl	80027dc <HAL_GPIO_WritePin>
 80008e4:	88bb      	ldrh	r3, [r7, #4]
 80008e6:	0a1b      	lsrs	r3, r3, #8
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	10db      	asrs	r3, r3, #3
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	461a      	mov	r2, r3
 80008f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008fc:	4809      	ldr	r0, [pc, #36]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 80008fe:	f001 ff6d 	bl	80027dc <HAL_GPIO_WritePin>
 8000902:	88bb      	ldrh	r3, [r7, #4]
 8000904:	0a1b      	lsrs	r3, r3, #8
 8000906:	b29b      	uxth	r3, r3
 8000908:	b2db      	uxtb	r3, r3
 800090a:	111b      	asrs	r3, r3, #4
 800090c:	b2db      	uxtb	r3, r3
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	461a      	mov	r2, r3
 8000916:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800091a:	4802      	ldr	r0, [pc, #8]	@ (8000924 <gc9a01a_set_address_window+0x338>)
 800091c:	f001 ff5e 	bl	80027dc <HAL_GPIO_WritePin>
 8000920:	e002      	b.n	8000928 <gc9a01a_set_address_window+0x33c>
 8000922:	bf00      	nop
 8000924:	48000400 	.word	0x48000400
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	0a1b      	lsrs	r3, r3, #8
 800092c:	b29b      	uxth	r3, r3
 800092e:	b2db      	uxtb	r3, r3
 8000930:	115b      	asrs	r3, r3, #5
 8000932:	b2db      	uxtb	r3, r3
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	b2db      	uxtb	r3, r3
 800093a:	461a      	mov	r2, r3
 800093c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000940:	48c6      	ldr	r0, [pc, #792]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000942:	f001 ff4b 	bl	80027dc <HAL_GPIO_WritePin>
 8000946:	88bb      	ldrh	r3, [r7, #4]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	b29b      	uxth	r3, r3
 800094c:	b2db      	uxtb	r3, r3
 800094e:	119b      	asrs	r3, r3, #6
 8000950:	b2db      	uxtb	r3, r3
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	b2db      	uxtb	r3, r3
 8000958:	461a      	mov	r2, r3
 800095a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800095e:	48bf      	ldr	r0, [pc, #764]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000960:	f001 ff3c 	bl	80027dc <HAL_GPIO_WritePin>
 8000964:	88bb      	ldrh	r3, [r7, #4]
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	b29b      	uxth	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	09db      	lsrs	r3, r3, #7
 800096e:	b2db      	uxtb	r3, r3
 8000970:	461a      	mov	r2, r3
 8000972:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000976:	48b9      	ldr	r0, [pc, #740]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000978:	f001 ff30 	bl	80027dc <HAL_GPIO_WritePin>
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000982:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000986:	f001 ff29 	bl	80027dc <HAL_GPIO_WritePin>
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000990:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000994:	f001 ff22 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT((uint8_t)x1);
 8000998:	88bb      	ldrh	r3, [r7, #4]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ac:	f001 ff16 	bl	80027dc <HAL_GPIO_WritePin>
 80009b0:	88bb      	ldrh	r3, [r7, #4]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	105b      	asrs	r3, r3, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	461a      	mov	r2, r3
 80009c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c8:	f001 ff08 	bl	80027dc <HAL_GPIO_WritePin>
 80009cc:	88bb      	ldrh	r3, [r7, #4]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	109b      	asrs	r3, r3, #2
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	461a      	mov	r2, r3
 80009dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009e0:	489e      	ldr	r0, [pc, #632]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 80009e2:	f001 fefb 	bl	80027dc <HAL_GPIO_WritePin>
 80009e6:	88bb      	ldrh	r3, [r7, #4]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	10db      	asrs	r3, r3, #3
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	461a      	mov	r2, r3
 80009f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009fa:	4898      	ldr	r0, [pc, #608]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 80009fc:	f001 feee 	bl	80027dc <HAL_GPIO_WritePin>
 8000a00:	88bb      	ldrh	r3, [r7, #4]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	111b      	asrs	r3, r3, #4
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	461a      	mov	r2, r3
 8000a10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a14:	4891      	ldr	r0, [pc, #580]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000a16:	f001 fee1 	bl	80027dc <HAL_GPIO_WritePin>
 8000a1a:	88bb      	ldrh	r3, [r7, #4]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	115b      	asrs	r3, r3, #5
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a2e:	488b      	ldr	r0, [pc, #556]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000a30:	f001 fed4 	bl	80027dc <HAL_GPIO_WritePin>
 8000a34:	88bb      	ldrh	r3, [r7, #4]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	119b      	asrs	r3, r3, #6
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	461a      	mov	r2, r3
 8000a44:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a48:	4884      	ldr	r0, [pc, #528]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000a4a:	f001 fec7 	bl	80027dc <HAL_GPIO_WritePin>
 8000a4e:	88bb      	ldrh	r3, [r7, #4]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	09db      	lsrs	r3, r3, #7
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	461a      	mov	r2, r3
 8000a58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a5c:	487f      	ldr	r0, [pc, #508]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000a5e:	f001 febd 	bl	80027dc <HAL_GPIO_WritePin>
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6c:	f001 feb6 	bl	80027dc <HAL_GPIO_WritePin>
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7a:	f001 feaf 	bl	80027dc <HAL_GPIO_WritePin>

  // Send commands to set row address (y2 to y2)
  GC9A01A_DC_CMD;
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2102      	movs	r1, #2
 8000a82:	4876      	ldr	r0, [pc, #472]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000a84:	f001 feaa 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT(GC9A01A_RASET); // Row address set command
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a92:	f001 fea3 	bl	80027dc <HAL_GPIO_WritePin>
 8000a96:	2201      	movs	r2, #1
 8000a98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa0:	f001 fe9c 	bl	80027dc <HAL_GPIO_WritePin>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aaa:	486c      	ldr	r0, [pc, #432]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000aac:	f001 fe96 	bl	80027dc <HAL_GPIO_WritePin>
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ab6:	4869      	ldr	r0, [pc, #420]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000ab8:	f001 fe90 	bl	80027dc <HAL_GPIO_WritePin>
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac2:	4866      	ldr	r0, [pc, #408]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000ac4:	f001 fe8a 	bl	80027dc <HAL_GPIO_WritePin>
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ace:	4863      	ldr	r0, [pc, #396]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000ad0:	f001 fe84 	bl	80027dc <HAL_GPIO_WritePin>
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ada:	4860      	ldr	r0, [pc, #384]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000adc:	f001 fe7e 	bl	80027dc <HAL_GPIO_WritePin>
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ae6:	485d      	ldr	r0, [pc, #372]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000ae8:	f001 fe78 	bl	80027dc <HAL_GPIO_WritePin>
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af6:	f001 fe71 	bl	80027dc <HAL_GPIO_WritePin>
 8000afa:	2201      	movs	r2, #1
 8000afc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b04:	f001 fe6a 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_DC_DATA;
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	4853      	ldr	r0, [pc, #332]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000b0e:	f001 fe65 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT((uint8_t)(y0 >> 8));
 8000b12:	887b      	ldrh	r3, [r7, #2]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	461a      	mov	r2, r3
 8000b22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2a:	f001 fe57 	bl	80027dc <HAL_GPIO_WritePin>
 8000b2e:	887b      	ldrh	r3, [r7, #2]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	105b      	asrs	r3, r3, #1
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	461a      	mov	r2, r3
 8000b42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4a:	f001 fe47 	bl	80027dc <HAL_GPIO_WritePin>
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	109b      	asrs	r3, r3, #2
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b66:	483d      	ldr	r0, [pc, #244]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000b68:	f001 fe38 	bl	80027dc <HAL_GPIO_WritePin>
 8000b6c:	887b      	ldrh	r3, [r7, #2]
 8000b6e:	0a1b      	lsrs	r3, r3, #8
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	10db      	asrs	r3, r3, #3
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b84:	4835      	ldr	r0, [pc, #212]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000b86:	f001 fe29 	bl	80027dc <HAL_GPIO_WritePin>
 8000b8a:	887b      	ldrh	r3, [r7, #2]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	111b      	asrs	r3, r3, #4
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ba2:	482e      	ldr	r0, [pc, #184]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000ba4:	f001 fe1a 	bl	80027dc <HAL_GPIO_WritePin>
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	0a1b      	lsrs	r3, r3, #8
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	115b      	asrs	r3, r3, #5
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bc0:	4826      	ldr	r0, [pc, #152]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000bc2:	f001 fe0b 	bl	80027dc <HAL_GPIO_WritePin>
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	119b      	asrs	r3, r3, #6
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	461a      	mov	r2, r3
 8000bda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bde:	481f      	ldr	r0, [pc, #124]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000be0:	f001 fdfc 	bl	80027dc <HAL_GPIO_WritePin>
 8000be4:	887b      	ldrh	r3, [r7, #2]
 8000be6:	0a1b      	lsrs	r3, r3, #8
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	09db      	lsrs	r3, r3, #7
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bf6:	4819      	ldr	r0, [pc, #100]	@ (8000c5c <gc9a01a_set_address_window+0x670>)
 8000bf8:	f001 fdf0 	bl	80027dc <HAL_GPIO_WritePin>
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c06:	f001 fde9 	bl	80027dc <HAL_GPIO_WritePin>
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c14:	f001 fde2 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT((uint8_t)y0);
 8000c18:	887b      	ldrh	r3, [r7, #2]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2c:	f001 fdd6 	bl	80027dc <HAL_GPIO_WritePin>
 8000c30:	887b      	ldrh	r3, [r7, #2]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	105b      	asrs	r3, r3, #1
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	461a      	mov	r2, r3
 8000c40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c48:	f001 fdc8 	bl	80027dc <HAL_GPIO_WritePin>
 8000c4c:	887b      	ldrh	r3, [r7, #2]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	109b      	asrs	r3, r3, #2
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	e001      	b.n	8000c60 <gc9a01a_set_address_window+0x674>
 8000c5c:	48000400 	.word	0x48000400
 8000c60:	461a      	mov	r2, r3
 8000c62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c66:	48c6      	ldr	r0, [pc, #792]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000c68:	f001 fdb8 	bl	80027dc <HAL_GPIO_WritePin>
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	10db      	asrs	r3, r3, #3
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c80:	48bf      	ldr	r0, [pc, #764]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000c82:	f001 fdab 	bl	80027dc <HAL_GPIO_WritePin>
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	111b      	asrs	r3, r3, #4
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c9a:	48b9      	ldr	r0, [pc, #740]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000c9c:	f001 fd9e 	bl	80027dc <HAL_GPIO_WritePin>
 8000ca0:	887b      	ldrh	r3, [r7, #2]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	115b      	asrs	r3, r3, #5
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb4:	48b2      	ldr	r0, [pc, #712]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000cb6:	f001 fd91 	bl	80027dc <HAL_GPIO_WritePin>
 8000cba:	887b      	ldrh	r3, [r7, #2]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	119b      	asrs	r3, r3, #6
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cce:	48ac      	ldr	r0, [pc, #688]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000cd0:	f001 fd84 	bl	80027dc <HAL_GPIO_WritePin>
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	09db      	lsrs	r3, r3, #7
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	461a      	mov	r2, r3
 8000cde:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ce2:	48a7      	ldr	r0, [pc, #668]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000ce4:	f001 fd7a 	bl	80027dc <HAL_GPIO_WritePin>
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf2:	f001 fd73 	bl	80027dc <HAL_GPIO_WritePin>
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d00:	f001 fd6c 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT((uint8_t)(y1 >> 8));
 8000d04:	883b      	ldrh	r3, [r7, #0]
 8000d06:	0a1b      	lsrs	r3, r3, #8
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1c:	f001 fd5e 	bl	80027dc <HAL_GPIO_WritePin>
 8000d20:	883b      	ldrh	r3, [r7, #0]
 8000d22:	0a1b      	lsrs	r3, r3, #8
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	105b      	asrs	r3, r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	461a      	mov	r2, r3
 8000d34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3c:	f001 fd4e 	bl	80027dc <HAL_GPIO_WritePin>
 8000d40:	883b      	ldrh	r3, [r7, #0]
 8000d42:	0a1b      	lsrs	r3, r3, #8
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	109b      	asrs	r3, r3, #2
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	461a      	mov	r2, r3
 8000d54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d58:	4889      	ldr	r0, [pc, #548]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000d5a:	f001 fd3f 	bl	80027dc <HAL_GPIO_WritePin>
 8000d5e:	883b      	ldrh	r3, [r7, #0]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	10db      	asrs	r3, r3, #3
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d76:	4882      	ldr	r0, [pc, #520]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000d78:	f001 fd30 	bl	80027dc <HAL_GPIO_WritePin>
 8000d7c:	883b      	ldrh	r3, [r7, #0]
 8000d7e:	0a1b      	lsrs	r3, r3, #8
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	111b      	asrs	r3, r3, #4
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	461a      	mov	r2, r3
 8000d90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d94:	487a      	ldr	r0, [pc, #488]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000d96:	f001 fd21 	bl	80027dc <HAL_GPIO_WritePin>
 8000d9a:	883b      	ldrh	r3, [r7, #0]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	115b      	asrs	r3, r3, #5
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	461a      	mov	r2, r3
 8000dae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000db2:	4873      	ldr	r0, [pc, #460]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000db4:	f001 fd12 	bl	80027dc <HAL_GPIO_WritePin>
 8000db8:	883b      	ldrh	r3, [r7, #0]
 8000dba:	0a1b      	lsrs	r3, r3, #8
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	119b      	asrs	r3, r3, #6
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dd0:	486b      	ldr	r0, [pc, #428]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000dd2:	f001 fd03 	bl	80027dc <HAL_GPIO_WritePin>
 8000dd6:	883b      	ldrh	r3, [r7, #0]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	09db      	lsrs	r3, r3, #7
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	461a      	mov	r2, r3
 8000de4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000de8:	4865      	ldr	r0, [pc, #404]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000dea:	f001 fcf7 	bl	80027dc <HAL_GPIO_WritePin>
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df8:	f001 fcf0 	bl	80027dc <HAL_GPIO_WritePin>
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e06:	f001 fce9 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT((uint8_t)y1);
 8000e0a:	883b      	ldrh	r3, [r7, #0]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	461a      	mov	r2, r3
 8000e16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1e:	f001 fcdd 	bl	80027dc <HAL_GPIO_WritePin>
 8000e22:	883b      	ldrh	r3, [r7, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	105b      	asrs	r3, r3, #1
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	461a      	mov	r2, r3
 8000e32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3a:	f001 fccf 	bl	80027dc <HAL_GPIO_WritePin>
 8000e3e:	883b      	ldrh	r3, [r7, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	109b      	asrs	r3, r3, #2
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e52:	484b      	ldr	r0, [pc, #300]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000e54:	f001 fcc2 	bl	80027dc <HAL_GPIO_WritePin>
 8000e58:	883b      	ldrh	r3, [r7, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	10db      	asrs	r3, r3, #3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	461a      	mov	r2, r3
 8000e68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e6c:	4844      	ldr	r0, [pc, #272]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000e6e:	f001 fcb5 	bl	80027dc <HAL_GPIO_WritePin>
 8000e72:	883b      	ldrh	r3, [r7, #0]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	111b      	asrs	r3, r3, #4
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e86:	483e      	ldr	r0, [pc, #248]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000e88:	f001 fca8 	bl	80027dc <HAL_GPIO_WritePin>
 8000e8c:	883b      	ldrh	r3, [r7, #0]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	115b      	asrs	r3, r3, #5
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ea0:	4837      	ldr	r0, [pc, #220]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000ea2:	f001 fc9b 	bl	80027dc <HAL_GPIO_WritePin>
 8000ea6:	883b      	ldrh	r3, [r7, #0]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	119b      	asrs	r3, r3, #6
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eba:	4831      	ldr	r0, [pc, #196]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000ebc:	f001 fc8e 	bl	80027dc <HAL_GPIO_WritePin>
 8000ec0:	883b      	ldrh	r3, [r7, #0]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	09db      	lsrs	r3, r3, #7
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	461a      	mov	r2, r3
 8000eca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ece:	482c      	ldr	r0, [pc, #176]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000ed0:	f001 fc84 	bl	80027dc <HAL_GPIO_WritePin>
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ede:	f001 fc7d 	bl	80027dc <HAL_GPIO_WritePin>
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eec:	f001 fc76 	bl	80027dc <HAL_GPIO_WritePin>

  // Send command to write to RAM
  GC9A01A_DC_CMD;
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	4822      	ldr	r0, [pc, #136]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000ef6:	f001 fc71 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_WRITE_8BIT(GC9A01A_RAMWR); // Write to RAM command
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f04:	f001 fc6a 	bl	80027dc <HAL_GPIO_WritePin>
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f12:	f001 fc63 	bl	80027dc <HAL_GPIO_WritePin>
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f1c:	4818      	ldr	r0, [pc, #96]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000f1e:	f001 fc5d 	bl	80027dc <HAL_GPIO_WritePin>
 8000f22:	2201      	movs	r2, #1
 8000f24:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f28:	4815      	ldr	r0, [pc, #84]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000f2a:	f001 fc57 	bl	80027dc <HAL_GPIO_WritePin>
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f34:	4812      	ldr	r0, [pc, #72]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000f36:	f001 fc51 	bl	80027dc <HAL_GPIO_WritePin>
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f40:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000f42:	f001 fc4b 	bl	80027dc <HAL_GPIO_WritePin>
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f4c:	480c      	ldr	r0, [pc, #48]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000f4e:	f001 fc45 	bl	80027dc <HAL_GPIO_WritePin>
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f58:	4809      	ldr	r0, [pc, #36]	@ (8000f80 <gc9a01a_set_address_window+0x994>)
 8000f5a:	f001 fc3f 	bl	80027dc <HAL_GPIO_WritePin>
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f68:	f001 fc38 	bl	80027dc <HAL_GPIO_WritePin>
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f76:	f001 fc31 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_DC_DATA;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	e001      	b.n	8000f84 <gc9a01a_set_address_window+0x998>
 8000f80:	48000400 	.word	0x48000400
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <gc9a01a_set_address_window+0x9a8>)
 8000f86:	f001 fc29 	bl	80027dc <HAL_GPIO_WritePin>
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd90      	pop	{r4, r7, pc}
 8000f92:	bf00      	nop
 8000f94:	48000400 	.word	0x48000400

08000f98 <gc9a01a_init>:
/**
  * @brief  Initialize the GC9A01A LCD
  * @param  None
  * @retval None
  */
static void gc9a01a_init() {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
  uint8_t params[15];
  GC9A01A_CS_LOW;
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2108      	movs	r1, #8
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa6:	f001 fc19 	bl	80027dc <HAL_GPIO_WritePin>

  gc9a01a_write_cmd(GC9A01A_INREGEN1);      ///< Inter register enable 1
 8000faa:	20fe      	movs	r0, #254	@ 0xfe
 8000fac:	f7ff f9e0 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_cmd(GC9A01A_INREGEN2);      ///< Inter register enable 2
 8000fb0:	20ef      	movs	r0, #239	@ 0xef
 8000fb2:	f7ff f9dd 	bl	8000370 <gc9a01a_write_cmd>

  params[0] = 0x14;
 8000fb6:	2314      	movs	r3, #20
 8000fb8:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xEB);
 8000fba:	20eb      	movs	r0, #235	@ 0xeb
 8000fbc:	f7ff f9d8 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fa4f 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x60;
 8000fca:	2360      	movs	r3, #96	@ 0x60
 8000fcc:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x84);
 8000fce:	2084      	movs	r0, #132	@ 0x84
 8000fd0:	f7ff f9ce 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa45 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0xFF;
 8000fde:	23ff      	movs	r3, #255	@ 0xff
 8000fe0:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x85);
 8000fe2:	2085      	movs	r0, #133	@ 0x85
 8000fe4:	f7ff f9c4 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2101      	movs	r1, #1
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fa3b 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0xFF;
 8000ff2:	23ff      	movs	r3, #255	@ 0xff
 8000ff4:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x86);
 8000ff6:	2086      	movs	r0, #134	@ 0x86
 8000ff8:	f7ff f9ba 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	2101      	movs	r1, #1
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fa31 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0xFF;
 8001006:	23ff      	movs	r3, #255	@ 0xff
 8001008:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x87);
 800100a:	2087      	movs	r0, #135	@ 0x87
 800100c:	f7ff f9b0 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001010:	463b      	mov	r3, r7
 8001012:	2101      	movs	r1, #1
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fa27 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0xFF;
 800101a:	23ff      	movs	r3, #255	@ 0xff
 800101c:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8E);
 800101e:	208e      	movs	r0, #142	@ 0x8e
 8001020:	f7ff f9a6 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001024:	463b      	mov	r3, r7
 8001026:	2101      	movs	r1, #1
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fa1d 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0xFF;
 800102e:	23ff      	movs	r3, #255	@ 0xff
 8001030:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8F);
 8001032:	208f      	movs	r0, #143	@ 0x8f
 8001034:	f7ff f99c 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001038:	463b      	mov	r3, r7
 800103a:	2101      	movs	r1, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa13 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x0A;
 8001042:	230a      	movs	r3, #10
 8001044:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x88);
 8001046:	2088      	movs	r0, #136	@ 0x88
 8001048:	f7ff f992 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800104c:	463b      	mov	r3, r7
 800104e:	2101      	movs	r1, #1
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa09 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x21;
 8001056:	2321      	movs	r3, #33	@ 0x21
 8001058:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x89);
 800105a:	2089      	movs	r0, #137	@ 0x89
 800105c:	f7ff f988 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001060:	463b      	mov	r3, r7
 8001062:	2101      	movs	r1, #1
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff f9ff 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x00;
 800106a:	2300      	movs	r3, #0
 800106c:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8A);
 800106e:	208a      	movs	r0, #138	@ 0x8a
 8001070:	f7ff f97e 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001074:	463b      	mov	r3, r7
 8001076:	2101      	movs	r1, #1
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f9f5 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x80;
 800107e:	2380      	movs	r3, #128	@ 0x80
 8001080:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8B);
 8001082:	208b      	movs	r0, #139	@ 0x8b
 8001084:	f7ff f974 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001088:	463b      	mov	r3, r7
 800108a:	2101      	movs	r1, #1
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f9eb 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x01;
 8001092:	2301      	movs	r3, #1
 8001094:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8C);
 8001096:	208c      	movs	r0, #140	@ 0x8c
 8001098:	f7ff f96a 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800109c:	463b      	mov	r3, r7
 800109e:	2101      	movs	r1, #1
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f9e1 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x03;
 80010a6:	2303      	movs	r3, #3
 80010a8:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8D);
 80010aa:	208d      	movs	r0, #141	@ 0x8d
 80010ac:	f7ff f960 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80010b0:	463b      	mov	r3, r7
 80010b2:	2101      	movs	r1, #1
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f9d7 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x08;
 80010ba:	2308      	movs	r3, #8
 80010bc:	703b      	strb	r3, [r7, #0]
  params[1] = 0x09;
 80010be:	2309      	movs	r3, #9
 80010c0:	707b      	strb	r3, [r7, #1]
  params[2] = 0x14;
 80010c2:	2314      	movs	r3, #20
 80010c4:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x08;
 80010c6:	2308      	movs	r3, #8
 80010c8:	70fb      	strb	r3, [r7, #3]
  gc9a01a_write_cmd(0xB5);
 80010ca:	20b5      	movs	r0, #181	@ 0xb5
 80010cc:	f7ff f950 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 4);
 80010d0:	463b      	mov	r3, r7
 80010d2:	2104      	movs	r1, #4
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f9c7 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x00;
 80010da:	2300      	movs	r3, #0
 80010dc:	703b      	strb	r3, [r7, #0]
  params[1] = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(GC9A01A_DISP_CTRL);     ///<Display Function Control
 80010e2:	20b6      	movs	r0, #182	@ 0xb6
 80010e4:	f7ff f944 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 80010e8:	463b      	mov	r3, r7
 80010ea:	2102      	movs	r1, #2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f9bb 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x48;
 80010f2:	2348      	movs	r3, #72	@ 0x48
 80010f4:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A_MADCTL);        ///< Memory Access Control
 80010f6:	2036      	movs	r0, #54	@ 0x36
 80010f8:	f7ff f93a 	bl	8000370 <gc9a01a_write_cmd>

  gc9a01a_write_data(params, 1);
 80010fc:	463b      	mov	r3, r7
 80010fe:	2101      	movs	r1, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f9b1 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x05;
 8001106:	2305      	movs	r3, #5
 8001108:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A_COLMOD);        ///< Pixel Format Set
 800110a:	203a      	movs	r0, #58	@ 0x3a
 800110c:	f7ff f930 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001110:	463b      	mov	r3, r7
 8001112:	2101      	movs	r1, #1
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f9a7 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x08;
 800111a:	2308      	movs	r3, #8
 800111c:	703b      	strb	r3, [r7, #0]
  params[1] = 0x08;
 800111e:	2308      	movs	r3, #8
 8001120:	707b      	strb	r3, [r7, #1]
  params[2] = 0x08;
 8001122:	2308      	movs	r3, #8
 8001124:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x08;
 8001126:	2308      	movs	r3, #8
 8001128:	70fb      	strb	r3, [r7, #3]
  gc9a01a_write_cmd(0x90);
 800112a:	2090      	movs	r0, #144	@ 0x90
 800112c:	f7ff f920 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 4);
 8001130:	463b      	mov	r3, r7
 8001132:	2104      	movs	r1, #4
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f997 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x06;
 800113a:	2306      	movs	r3, #6
 800113c:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xBD);
 800113e:	20bd      	movs	r0, #189	@ 0xbd
 8001140:	f7ff f916 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001144:	463b      	mov	r3, r7
 8001146:	2101      	movs	r1, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f98d 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x01;
 800114e:	2301      	movs	r3, #1
 8001150:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xBA);
 8001152:	20ba      	movs	r0, #186	@ 0xba
 8001154:	f7ff f90c 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001158:	463b      	mov	r3, r7
 800115a:	2101      	movs	r1, #1
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f983 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x00;
 8001162:	2300      	movs	r3, #0
 8001164:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xBC);
 8001166:	20bc      	movs	r0, #188	@ 0xbc
 8001168:	f7ff f902 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800116c:	463b      	mov	r3, r7
 800116e:	2101      	movs	r1, #1
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f979 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x60;
 8001176:	2360      	movs	r3, #96	@ 0x60
 8001178:	703b      	strb	r3, [r7, #0]
  params[1] = 0x01;
 800117a:	2301      	movs	r3, #1
 800117c:	707b      	strb	r3, [r7, #1]
  params[2] = 0x04;
 800117e:	2304      	movs	r3, #4
 8001180:	70bb      	strb	r3, [r7, #2]
  gc9a01a_write_cmd(0xFF);
 8001182:	20ff      	movs	r0, #255	@ 0xff
 8001184:	f7ff f8f4 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 3);
 8001188:	463b      	mov	r3, r7
 800118a:	2103      	movs	r1, #3
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f96b 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x14;
 8001192:	2314      	movs	r3, #20
 8001194:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A1_POWER2);       ///< Power Control 2
 8001196:	20c3      	movs	r0, #195	@ 0xc3
 8001198:	f7ff f8ea 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800119c:	463b      	mov	r3, r7
 800119e:	2101      	movs	r1, #1
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f961 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x14;
 80011a6:	2314      	movs	r3, #20
 80011a8:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A1_POWER3);       ///< Power Control 3
 80011aa:	20c4      	movs	r0, #196	@ 0xc4
 80011ac:	f7ff f8e0 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80011b0:	463b      	mov	r3, r7
 80011b2:	2101      	movs	r1, #1
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f957 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x25;
 80011ba:	2325      	movs	r3, #37	@ 0x25
 80011bc:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A1_POWER4);       ///< Power Control 4
 80011be:	20c9      	movs	r0, #201	@ 0xc9
 80011c0:	f7ff f8d6 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80011c4:	463b      	mov	r3, r7
 80011c6:	2101      	movs	r1, #1
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f94d 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x11;
 80011ce:	2311      	movs	r3, #17
 80011d0:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xBE);
 80011d2:	20be      	movs	r0, #190	@ 0xbe
 80011d4:	f7ff f8cc 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80011d8:	463b      	mov	r3, r7
 80011da:	2101      	movs	r1, #1
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f943 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x10;
 80011e2:	2310      	movs	r3, #16
 80011e4:	703b      	strb	r3, [r7, #0]
  params[1] = 0x0e;
 80011e6:	230e      	movs	r3, #14
 80011e8:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(0xE1);
 80011ea:	20e1      	movs	r0, #225	@ 0xe1
 80011ec:	f7ff f8c0 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 80011f0:	463b      	mov	r3, r7
 80011f2:	2102      	movs	r1, #2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f937 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x21;
 80011fa:	2321      	movs	r3, #33	@ 0x21
 80011fc:	703b      	strb	r3, [r7, #0]
  params[1] = 0x0c;
 80011fe:	230c      	movs	r3, #12
 8001200:	707b      	strb	r3, [r7, #1]
  params[2] = 0x02;
 8001202:	2302      	movs	r3, #2
 8001204:	70bb      	strb	r3, [r7, #2]
  gc9a01a_write_cmd(0xDF);
 8001206:	20df      	movs	r0, #223	@ 0xdf
 8001208:	f7ff f8b2 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 3);
 800120c:	463b      	mov	r3, r7
 800120e:	2103      	movs	r1, #3
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f929 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x45;
 8001216:	2345      	movs	r3, #69	@ 0x45
 8001218:	703b      	strb	r3, [r7, #0]
  params[1] = 0x09;
 800121a:	2309      	movs	r3, #9
 800121c:	707b      	strb	r3, [r7, #1]
  params[2] = 0x08;
 800121e:	2308      	movs	r3, #8
 8001220:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x08;
 8001222:	2308      	movs	r3, #8
 8001224:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x26;
 8001226:	2326      	movs	r3, #38	@ 0x26
 8001228:	713b      	strb	r3, [r7, #4]
  params[5] = 0x2A;
 800122a:	232a      	movs	r3, #42	@ 0x2a
 800122c:	717b      	strb	r3, [r7, #5]
  gc9a01a_write_cmd(GC9A01A_GAMMA1);        ///< Set gamma 1
 800122e:	20f0      	movs	r0, #240	@ 0xf0
 8001230:	f7ff f89e 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 6);
 8001234:	463b      	mov	r3, r7
 8001236:	2106      	movs	r1, #6
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f915 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x43;
 800123e:	2343      	movs	r3, #67	@ 0x43
 8001240:	703b      	strb	r3, [r7, #0]
  params[1] = 0x70;
 8001242:	2370      	movs	r3, #112	@ 0x70
 8001244:	707b      	strb	r3, [r7, #1]
  params[2] = 0x72;
 8001246:	2372      	movs	r3, #114	@ 0x72
 8001248:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x36;
 800124a:	2336      	movs	r3, #54	@ 0x36
 800124c:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x37;
 800124e:	2337      	movs	r3, #55	@ 0x37
 8001250:	713b      	strb	r3, [r7, #4]
  params[5] = 0x6F;
 8001252:	236f      	movs	r3, #111	@ 0x6f
 8001254:	717b      	strb	r3, [r7, #5]
  gc9a01a_write_cmd(GC9A01A_GAMMA2);        ///< Set gamma 2
 8001256:	20f1      	movs	r0, #241	@ 0xf1
 8001258:	f7ff f88a 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 6);
 800125c:	463b      	mov	r3, r7
 800125e:	2106      	movs	r1, #6
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f901 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x45;
 8001266:	2345      	movs	r3, #69	@ 0x45
 8001268:	703b      	strb	r3, [r7, #0]
  params[1] = 0x09;
 800126a:	2309      	movs	r3, #9
 800126c:	707b      	strb	r3, [r7, #1]
  params[2] = 0x08;
 800126e:	2308      	movs	r3, #8
 8001270:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x08;
 8001272:	2308      	movs	r3, #8
 8001274:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x26;
 8001276:	2326      	movs	r3, #38	@ 0x26
 8001278:	713b      	strb	r3, [r7, #4]
  params[5] = 0x2A;
 800127a:	232a      	movs	r3, #42	@ 0x2a
 800127c:	717b      	strb	r3, [r7, #5]
  gc9a01a_write_cmd(GC9A01A_GAMMA3);        ///< Set gamma 3
 800127e:	20f2      	movs	r0, #242	@ 0xf2
 8001280:	f7ff f876 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 6);
 8001284:	463b      	mov	r3, r7
 8001286:	2106      	movs	r1, #6
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f8ed 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x43;
 800128e:	2343      	movs	r3, #67	@ 0x43
 8001290:	703b      	strb	r3, [r7, #0]
  params[1] = 0x70;
 8001292:	2370      	movs	r3, #112	@ 0x70
 8001294:	707b      	strb	r3, [r7, #1]
  params[2] = 0x72;
 8001296:	2372      	movs	r3, #114	@ 0x72
 8001298:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x36;
 800129a:	2336      	movs	r3, #54	@ 0x36
 800129c:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x37;
 800129e:	2337      	movs	r3, #55	@ 0x37
 80012a0:	713b      	strb	r3, [r7, #4]
  params[5] = 0x6F;
 80012a2:	236f      	movs	r3, #111	@ 0x6f
 80012a4:	717b      	strb	r3, [r7, #5]
  gc9a01a_write_cmd(GC9A01A_GAMMA4);        ///< Set gamma 4
 80012a6:	20f3      	movs	r0, #243	@ 0xf3
 80012a8:	f7ff f862 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 6);
 80012ac:	463b      	mov	r3, r7
 80012ae:	2106      	movs	r1, #6
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f8d9 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x1B;
 80012b6:	231b      	movs	r3, #27
 80012b8:	703b      	strb	r3, [r7, #0]
  params[1] = 0x0B;
 80012ba:	230b      	movs	r3, #11
 80012bc:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(0xED);
 80012be:	20ed      	movs	r0, #237	@ 0xed
 80012c0:	f7ff f856 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 80012c4:	463b      	mov	r3, r7
 80012c6:	2102      	movs	r1, #2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f8cd 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x77;
 80012ce:	2377      	movs	r3, #119	@ 0x77
 80012d0:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xAE);
 80012d2:	20ae      	movs	r0, #174	@ 0xae
 80012d4:	f7ff f84c 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80012d8:	463b      	mov	r3, r7
 80012da:	2101      	movs	r1, #1
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f8c3 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x63;
 80012e2:	2363      	movs	r3, #99	@ 0x63
 80012e4:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xCD);
 80012e6:	20cd      	movs	r0, #205	@ 0xcd
 80012e8:	f7ff f842 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80012ec:	463b      	mov	r3, r7
 80012ee:	2101      	movs	r1, #1
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f8b9 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x07;
 80012f6:	2307      	movs	r3, #7
 80012f8:	703b      	strb	r3, [r7, #0]
  params[1] = 0x07;
 80012fa:	2307      	movs	r3, #7
 80012fc:	707b      	strb	r3, [r7, #1]
  params[2] = 0x04;
 80012fe:	2304      	movs	r3, #4
 8001300:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x0E;
 8001302:	230e      	movs	r3, #14
 8001304:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x0F;
 8001306:	230f      	movs	r3, #15
 8001308:	713b      	strb	r3, [r7, #4]
  params[5] = 0x09;
 800130a:	2309      	movs	r3, #9
 800130c:	717b      	strb	r3, [r7, #5]
  params[6] = 0x07;
 800130e:	2307      	movs	r3, #7
 8001310:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x08;
 8001312:	2308      	movs	r3, #8
 8001314:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x03;
 8001316:	2303      	movs	r3, #3
 8001318:	723b      	strb	r3, [r7, #8]
  gc9a01a_write_cmd(0x70);
 800131a:	2070      	movs	r0, #112	@ 0x70
 800131c:	f7ff f828 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 9);
 8001320:	463b      	mov	r3, r7
 8001322:	2109      	movs	r1, #9
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f89f 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x34;
 800132a:	2334      	movs	r3, #52	@ 0x34
 800132c:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A_FRAMERATE);     ///< Frame rate control
 800132e:	20e8      	movs	r0, #232	@ 0xe8
 8001330:	f7ff f81e 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001334:	463b      	mov	r3, r7
 8001336:	2101      	movs	r1, #1
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f895 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x18;
 800133e:	2318      	movs	r3, #24
 8001340:	703b      	strb	r3, [r7, #0]
  params[1] = 0x0D;
 8001342:	230d      	movs	r3, #13
 8001344:	707b      	strb	r3, [r7, #1]
  params[2] = 0x71;
 8001346:	2371      	movs	r3, #113	@ 0x71
 8001348:	70bb      	strb	r3, [r7, #2]
  params[3] = 0xED;
 800134a:	23ed      	movs	r3, #237	@ 0xed
 800134c:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x70;
 800134e:	2370      	movs	r3, #112	@ 0x70
 8001350:	713b      	strb	r3, [r7, #4]
  params[5] = 0x70;
 8001352:	2370      	movs	r3, #112	@ 0x70
 8001354:	717b      	strb	r3, [r7, #5]
  params[6] = 0x18;
 8001356:	2318      	movs	r3, #24
 8001358:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x0F;
 800135a:	230f      	movs	r3, #15
 800135c:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x71;
 800135e:	2371      	movs	r3, #113	@ 0x71
 8001360:	723b      	strb	r3, [r7, #8]
  params[9] = 0xEF;
 8001362:	23ef      	movs	r3, #239	@ 0xef
 8001364:	727b      	strb	r3, [r7, #9]
  params[10] = 0x70;
 8001366:	2370      	movs	r3, #112	@ 0x70
 8001368:	72bb      	strb	r3, [r7, #10]
  params[11] = 0x70;
 800136a:	2370      	movs	r3, #112	@ 0x70
 800136c:	72fb      	strb	r3, [r7, #11]
  gc9a01a_write_cmd(0x62);
 800136e:	2062      	movs	r0, #98	@ 0x62
 8001370:	f7fe fffe 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 12);
 8001374:	463b      	mov	r3, r7
 8001376:	210c      	movs	r1, #12
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f875 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x18;
 800137e:	2318      	movs	r3, #24
 8001380:	703b      	strb	r3, [r7, #0]
  params[1] = 0x11;
 8001382:	2311      	movs	r3, #17
 8001384:	707b      	strb	r3, [r7, #1]
  params[2] = 0x71;
 8001386:	2371      	movs	r3, #113	@ 0x71
 8001388:	70bb      	strb	r3, [r7, #2]
  params[3] = 0xF1;
 800138a:	23f1      	movs	r3, #241	@ 0xf1
 800138c:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x70;
 800138e:	2370      	movs	r3, #112	@ 0x70
 8001390:	713b      	strb	r3, [r7, #4]
  params[5] = 0x70;
 8001392:	2370      	movs	r3, #112	@ 0x70
 8001394:	717b      	strb	r3, [r7, #5]
  params[6] = 0x18;
 8001396:	2318      	movs	r3, #24
 8001398:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x13;
 800139a:	2313      	movs	r3, #19
 800139c:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x71;
 800139e:	2371      	movs	r3, #113	@ 0x71
 80013a0:	723b      	strb	r3, [r7, #8]
  params[9] = 0xF3;
 80013a2:	23f3      	movs	r3, #243	@ 0xf3
 80013a4:	727b      	strb	r3, [r7, #9]
  params[10] = 0x70;
 80013a6:	2370      	movs	r3, #112	@ 0x70
 80013a8:	72bb      	strb	r3, [r7, #10]
  params[11] = 0x70;
 80013aa:	2370      	movs	r3, #112	@ 0x70
 80013ac:	72fb      	strb	r3, [r7, #11]
  gc9a01a_write_cmd(0x63);
 80013ae:	2063      	movs	r0, #99	@ 0x63
 80013b0:	f7fe ffde 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 12);
 80013b4:	463b      	mov	r3, r7
 80013b6:	210c      	movs	r1, #12
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f855 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x28;
 80013be:	2328      	movs	r3, #40	@ 0x28
 80013c0:	703b      	strb	r3, [r7, #0]
  params[1] = 0x29;
 80013c2:	2329      	movs	r3, #41	@ 0x29
 80013c4:	707b      	strb	r3, [r7, #1]
  params[2] = 0xF1;
 80013c6:	23f1      	movs	r3, #241	@ 0xf1
 80013c8:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x01;
 80013ca:	2301      	movs	r3, #1
 80013cc:	70fb      	strb	r3, [r7, #3]
  params[4] = 0xF1;
 80013ce:	23f1      	movs	r3, #241	@ 0xf1
 80013d0:	713b      	strb	r3, [r7, #4]
  params[5] = 0x00;
 80013d2:	2300      	movs	r3, #0
 80013d4:	717b      	strb	r3, [r7, #5]
  params[6] = 0x07;
 80013d6:	2307      	movs	r3, #7
 80013d8:	71bb      	strb	r3, [r7, #6]
  gc9a01a_write_cmd(0x64);
 80013da:	2064      	movs	r0, #100	@ 0x64
 80013dc:	f7fe ffc8 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 7);
 80013e0:	463b      	mov	r3, r7
 80013e2:	2107      	movs	r1, #7
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f83f 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x3C;
 80013ea:	233c      	movs	r3, #60	@ 0x3c
 80013ec:	703b      	strb	r3, [r7, #0]
  params[1] = 0x00;
 80013ee:	2300      	movs	r3, #0
 80013f0:	707b      	strb	r3, [r7, #1]
  params[2] = 0xCD;
 80013f2:	23cd      	movs	r3, #205	@ 0xcd
 80013f4:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x67;
 80013f6:	2367      	movs	r3, #103	@ 0x67
 80013f8:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x45;
 80013fa:	2345      	movs	r3, #69	@ 0x45
 80013fc:	713b      	strb	r3, [r7, #4]
  params[5] = 0x45;
 80013fe:	2345      	movs	r3, #69	@ 0x45
 8001400:	717b      	strb	r3, [r7, #5]
  params[6] = 0x10;
 8001402:	2310      	movs	r3, #16
 8001404:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x00;
 8001406:	2300      	movs	r3, #0
 8001408:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x00;
 800140a:	2300      	movs	r3, #0
 800140c:	723b      	strb	r3, [r7, #8]
  params[9] = 0x00;
 800140e:	2300      	movs	r3, #0
 8001410:	727b      	strb	r3, [r7, #9]
  gc9a01a_write_cmd(0x66);
 8001412:	2066      	movs	r0, #102	@ 0x66
 8001414:	f7fe ffac 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 10);
 8001418:	463b      	mov	r3, r7
 800141a:	210a      	movs	r1, #10
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f823 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x00;
 8001422:	2300      	movs	r3, #0
 8001424:	703b      	strb	r3, [r7, #0]
  params[1] = 0x3C;
 8001426:	233c      	movs	r3, #60	@ 0x3c
 8001428:	707b      	strb	r3, [r7, #1]
  params[2] = 0x00;
 800142a:	2300      	movs	r3, #0
 800142c:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x00;
 800142e:	2300      	movs	r3, #0
 8001430:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x00;
 8001432:	2300      	movs	r3, #0
 8001434:	713b      	strb	r3, [r7, #4]
  params[5] = 0x01;
 8001436:	2301      	movs	r3, #1
 8001438:	717b      	strb	r3, [r7, #5]
  params[6] = 0x54;
 800143a:	2354      	movs	r3, #84	@ 0x54
 800143c:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x10;
 800143e:	2310      	movs	r3, #16
 8001440:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x32;
 8001442:	2332      	movs	r3, #50	@ 0x32
 8001444:	723b      	strb	r3, [r7, #8]
  params[9] = 0x98;
 8001446:	2398      	movs	r3, #152	@ 0x98
 8001448:	727b      	strb	r3, [r7, #9]
  gc9a01a_write_cmd(0x67);
 800144a:	2067      	movs	r0, #103	@ 0x67
 800144c:	f7fe ff90 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 10);
 8001450:	463b      	mov	r3, r7
 8001452:	210a      	movs	r1, #10
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f807 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x10;
 800145a:	2310      	movs	r3, #16
 800145c:	703b      	strb	r3, [r7, #0]
  params[1] = 0x85;
 800145e:	2385      	movs	r3, #133	@ 0x85
 8001460:	707b      	strb	r3, [r7, #1]
  params[2] = 0x80;
 8001462:	2380      	movs	r3, #128	@ 0x80
 8001464:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x00;
 8001466:	2300      	movs	r3, #0
 8001468:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x00;
 800146a:	2300      	movs	r3, #0
 800146c:	713b      	strb	r3, [r7, #4]
  params[5] = 0x4E;
 800146e:	234e      	movs	r3, #78	@ 0x4e
 8001470:	717b      	strb	r3, [r7, #5]
  params[6] = 0x00;
 8001472:	2300      	movs	r3, #0
 8001474:	71bb      	strb	r3, [r7, #6]
  gc9a01a_write_cmd(0x74);
 8001476:	2074      	movs	r0, #116	@ 0x74
 8001478:	f7fe ff7a 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 7);
 800147c:	463b      	mov	r3, r7
 800147e:	2107      	movs	r1, #7
 8001480:	4618      	mov	r0, r3
 8001482:	f7fe fff1 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x3E;
 8001486:	233e      	movs	r3, #62	@ 0x3e
 8001488:	703b      	strb	r3, [r7, #0]
  params[1] = 0x07;
 800148a:	2307      	movs	r3, #7
 800148c:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(0x98);
 800148e:	2098      	movs	r0, #152	@ 0x98
 8001490:	f7fe ff6e 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 8001494:	463b      	mov	r3, r7
 8001496:	2102      	movs	r1, #2
 8001498:	4618      	mov	r0, r3
 800149a:	f7fe ffe5 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x3E;
 800149e:	233e      	movs	r3, #62	@ 0x3e
 80014a0:	703b      	strb	r3, [r7, #0]
  params[1] = 0x07;
 80014a2:	2307      	movs	r3, #7
 80014a4:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(0x99);
 80014a6:	2099      	movs	r0, #153	@ 0x99
 80014a8:	f7fe ff62 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 80014ac:	463b      	mov	r3, r7
 80014ae:	2102      	movs	r1, #2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe ffd9 	bl	8000468 <gc9a01a_write_data>

  params[0] = 0x00;
 80014b6:	2300      	movs	r3, #0
 80014b8:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A_TEON);          ///< Tearing Effect Line ON
 80014ba:	2035      	movs	r0, #53	@ 0x35
 80014bc:	f7fe ff58 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80014c0:	463b      	mov	r3, r7
 80014c2:	2101      	movs	r1, #1
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe ffcf 	bl	8000468 <gc9a01a_write_data>

  gc9a01a_write_cmd(GC9A01A_INVON);         ///< Display Inversion ON
 80014ca:	2021      	movs	r0, #33	@ 0x21
 80014cc:	f7fe ff50 	bl	8000370 <gc9a01a_write_cmd>
  HAL_Delay(120);
 80014d0:	2078      	movs	r0, #120	@ 0x78
 80014d2:	f000 fed3 	bl	800227c <HAL_Delay>
  gc9a01a_write_cmd(GC9A01A_SLPOUT);        ///< Sleep Out
 80014d6:	2011      	movs	r0, #17
 80014d8:	f7fe ff4a 	bl	8000370 <gc9a01a_write_cmd>
  HAL_Delay(120);
 80014dc:	2078      	movs	r0, #120	@ 0x78
 80014de:	f000 fecd 	bl	800227c <HAL_Delay>
  gc9a01a_write_cmd(GC9A01A_DISPON);        ///< Display ON
 80014e2:	2029      	movs	r0, #41	@ 0x29
 80014e4:	f7fe ff44 	bl	8000370 <gc9a01a_write_cmd>
  HAL_Delay(20);
 80014e8:	2014      	movs	r0, #20
 80014ea:	f000 fec7 	bl	800227c <HAL_Delay>


  GC9A01A_CS_HIGH;
 80014ee:	2201      	movs	r2, #1
 80014f0:	2108      	movs	r1, #8
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f6:	f001 f971 	bl	80027dc <HAL_GPIO_WritePin>
}
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <bsp_lcd_init>:



void bsp_lcd_init() {
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  GC9A01A_CS_HIGH;
 8001508:	2201      	movs	r2, #1
 800150a:	2108      	movs	r1, #8
 800150c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001510:	f001 f964 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_BL_ON;
 8001514:	2201      	movs	r2, #1
 8001516:	2110      	movs	r1, #16
 8001518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151c:	f001 f95e 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_TE_LOW;
 8001520:	2200      	movs	r2, #0
 8001522:	2102      	movs	r1, #2
 8001524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001528:	f001 f958 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_RD_HIGH;
 800152c:	2201      	movs	r2, #1
 800152e:	2101      	movs	r1, #1
 8001530:	480a      	ldr	r0, [pc, #40]	@ (800155c <bsp_lcd_init+0x58>)
 8001532:	f001 f953 	bl	80027dc <HAL_GPIO_WritePin>
  GC9A01A_CS_LOW;
 8001536:	2200      	movs	r2, #0
 8001538:	2108      	movs	r1, #8
 800153a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153e:	f001 f94d 	bl	80027dc <HAL_GPIO_WritePin>

  gc9a01a_hw_reset();
 8001542:	f7ff f831 	bl	80005a8 <gc9a01a_hw_reset>
  gc9a01a_init();
 8001546:	f7ff fd27 	bl	8000f98 <gc9a01a_init>
  gc9a01a_set_orientation(LANDSCAPE);
 800154a:	2001      	movs	r0, #1
 800154c:	f000 f946 	bl	80017dc <gc9a01a_set_orientation>
  gc9a01a_fill_screen(WHITE);
 8001550:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001554:	f000 f99f 	bl	8001896 <gc9a01a_fill_screen>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	48000400 	.word	0x48000400

08001560 <gc9a01a_fill_rect>:
  * @param  y: Y-coordinate of the top-left corner of the rectangle.
  * @param  h: Height of the rectangle.
  * @param  color: Color to fill the rectangle with.
  * @retval None
  */
void gc9a01a_fill_rect(uint16_t x, uint16_t w, uint16_t y, uint16_t h, uint16_t color) {
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	4604      	mov	r4, r0
 8001568:	4608      	mov	r0, r1
 800156a:	4611      	mov	r1, r2
 800156c:	461a      	mov	r2, r3
 800156e:	4623      	mov	r3, r4
 8001570:	80fb      	strh	r3, [r7, #6]
 8001572:	4603      	mov	r3, r0
 8001574:	80bb      	strh	r3, [r7, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	807b      	strh	r3, [r7, #2]
 800157a:	4613      	mov	r3, r2
 800157c:	803b      	strh	r3, [r7, #0]
  if((x >= BSP_LCD_ACTIVE_WIDTH) || (y >= BSP_LCD_ACTIVE_HEIGHT)) return;
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	2bef      	cmp	r3, #239	@ 0xef
 8001582:	f200 8125 	bhi.w	80017d0 <gc9a01a_fill_rect+0x270>
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	2bef      	cmp	r3, #239	@ 0xef
 800158a:	f200 8121 	bhi.w	80017d0 <gc9a01a_fill_rect+0x270>
  if((x + w - 1) >= BSP_LCD_ACTIVE_WIDTH) w = BSP_LCD_ACTIVE_WIDTH - x;
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	88bb      	ldrh	r3, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	2bf0      	cmp	r3, #240	@ 0xf0
 8001596:	dd03      	ble.n	80015a0 <gc9a01a_fill_rect+0x40>
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800159e:	80bb      	strh	r3, [r7, #4]
  if((y + h - 1) >= BSP_LCD_ACTIVE_HEIGHT) h = BSP_LCD_ACTIVE_HEIGHT - y;
 80015a0:	887a      	ldrh	r2, [r7, #2]
 80015a2:	883b      	ldrh	r3, [r7, #0]
 80015a4:	4413      	add	r3, r2
 80015a6:	2bf0      	cmp	r3, #240	@ 0xf0
 80015a8:	dd03      	ble.n	80015b2 <gc9a01a_fill_rect+0x52>
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80015b0:	803b      	strh	r3, [r7, #0]
  GC9A01A_CS_LOW;
 80015b2:	2200      	movs	r2, #0
 80015b4:	2108      	movs	r1, #8
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ba:	f001 f90f 	bl	80027dc <HAL_GPIO_WritePin>
  gc9a01a_set_address_window(x,(x+w-1), y, (y+h-1));
 80015be:	88fa      	ldrh	r2, [r7, #6]
 80015c0:	88bb      	ldrh	r3, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b299      	uxth	r1, r3
 80015ca:	887a      	ldrh	r2, [r7, #2]
 80015cc:	883b      	ldrh	r3, [r7, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	3b01      	subs	r3, #1
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	887a      	ldrh	r2, [r7, #2]
 80015d8:	88f8      	ldrh	r0, [r7, #6]
 80015da:	f7ff f807 	bl	80005ec <gc9a01a_set_address_window>
  uint8_t data[] = { color >> 8, color & 0xFF };
 80015de:	8c3b      	ldrh	r3, [r7, #32]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	733b      	strb	r3, [r7, #12]
 80015e8:	8c3b      	ldrh	r3, [r7, #32]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	737b      	strb	r3, [r7, #13]

  for(y = h; y > 0; y--) {
 80015ee:	883b      	ldrh	r3, [r7, #0]
 80015f0:	807b      	strh	r3, [r7, #2]
 80015f2:	e0e2      	b.n	80017ba <gc9a01a_fill_rect+0x25a>
    for(x = w; x > 0; x--) {
 80015f4:	88bb      	ldrh	r3, [r7, #4]
 80015f6:	80fb      	strh	r3, [r7, #6]
 80015f8:	e0d8      	b.n	80017ac <gc9a01a_fill_rect+0x24c>
      GC9A01A_WRITE_8BIT(data[0]);
 80015fa:	7b3b      	ldrb	r3, [r7, #12]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	b2db      	uxtb	r3, r3
 8001602:	461a      	mov	r2, r3
 8001604:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800160c:	f001 f8e6 	bl	80027dc <HAL_GPIO_WritePin>
 8001610:	7b3b      	ldrb	r3, [r7, #12]
 8001612:	105b      	asrs	r3, r3, #1
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001626:	f001 f8d9 	bl	80027dc <HAL_GPIO_WritePin>
 800162a:	7b3b      	ldrb	r3, [r7, #12]
 800162c:	109b      	asrs	r3, r3, #2
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	b2db      	uxtb	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800163c:	4866      	ldr	r0, [pc, #408]	@ (80017d8 <gc9a01a_fill_rect+0x278>)
 800163e:	f001 f8cd 	bl	80027dc <HAL_GPIO_WritePin>
 8001642:	7b3b      	ldrb	r3, [r7, #12]
 8001644:	10db      	asrs	r3, r3, #3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	b2db      	uxtb	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001654:	4860      	ldr	r0, [pc, #384]	@ (80017d8 <gc9a01a_fill_rect+0x278>)
 8001656:	f001 f8c1 	bl	80027dc <HAL_GPIO_WritePin>
 800165a:	7b3b      	ldrb	r3, [r7, #12]
 800165c:	111b      	asrs	r3, r3, #4
 800165e:	b2db      	uxtb	r3, r3
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	b2db      	uxtb	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800166c:	485a      	ldr	r0, [pc, #360]	@ (80017d8 <gc9a01a_fill_rect+0x278>)
 800166e:	f001 f8b5 	bl	80027dc <HAL_GPIO_WritePin>
 8001672:	7b3b      	ldrb	r3, [r7, #12]
 8001674:	115b      	asrs	r3, r3, #5
 8001676:	b2db      	uxtb	r3, r3
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	461a      	mov	r2, r3
 8001680:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001684:	4854      	ldr	r0, [pc, #336]	@ (80017d8 <gc9a01a_fill_rect+0x278>)
 8001686:	f001 f8a9 	bl	80027dc <HAL_GPIO_WritePin>
 800168a:	7b3b      	ldrb	r3, [r7, #12]
 800168c:	119b      	asrs	r3, r3, #6
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	461a      	mov	r2, r3
 8001698:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800169c:	484e      	ldr	r0, [pc, #312]	@ (80017d8 <gc9a01a_fill_rect+0x278>)
 800169e:	f001 f89d 	bl	80027dc <HAL_GPIO_WritePin>
 80016a2:	7b3b      	ldrb	r3, [r7, #12]
 80016a4:	09db      	lsrs	r3, r3, #7
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016ae:	484a      	ldr	r0, [pc, #296]	@ (80017d8 <gc9a01a_fill_rect+0x278>)
 80016b0:	f001 f894 	bl	80027dc <HAL_GPIO_WritePin>
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016be:	f001 f88d 	bl	80027dc <HAL_GPIO_WritePin>
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016cc:	f001 f886 	bl	80027dc <HAL_GPIO_WritePin>
      GC9A01A_WRITE_8BIT(data[1]);
 80016d0:	7b7b      	ldrb	r3, [r7, #13]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e2:	f001 f87b 	bl	80027dc <HAL_GPIO_WritePin>
 80016e6:	7b7b      	ldrb	r3, [r7, #13]
 80016e8:	105b      	asrs	r3, r3, #1
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016fc:	f001 f86e 	bl	80027dc <HAL_GPIO_WritePin>
 8001700:	7b7b      	ldrb	r3, [r7, #13]
 8001702:	109b      	asrs	r3, r3, #2
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	b2db      	uxtb	r3, r3
 800170c:	461a      	mov	r2, r3
 800170e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001712:	4831      	ldr	r0, [pc, #196]	@ (80017d8 <gc9a01a_fill_rect+0x278>)
 8001714:	f001 f862 	bl	80027dc <HAL_GPIO_WritePin>
 8001718:	7b7b      	ldrb	r3, [r7, #13]
 800171a:	10db      	asrs	r3, r3, #3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	b2db      	uxtb	r3, r3
 8001724:	461a      	mov	r2, r3
 8001726:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800172a:	482b      	ldr	r0, [pc, #172]	@ (80017d8 <gc9a01a_fill_rect+0x278>)
 800172c:	f001 f856 	bl	80027dc <HAL_GPIO_WritePin>
 8001730:	7b7b      	ldrb	r3, [r7, #13]
 8001732:	111b      	asrs	r3, r3, #4
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001742:	4825      	ldr	r0, [pc, #148]	@ (80017d8 <gc9a01a_fill_rect+0x278>)
 8001744:	f001 f84a 	bl	80027dc <HAL_GPIO_WritePin>
 8001748:	7b7b      	ldrb	r3, [r7, #13]
 800174a:	115b      	asrs	r3, r3, #5
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800175a:	481f      	ldr	r0, [pc, #124]	@ (80017d8 <gc9a01a_fill_rect+0x278>)
 800175c:	f001 f83e 	bl	80027dc <HAL_GPIO_WritePin>
 8001760:	7b7b      	ldrb	r3, [r7, #13]
 8001762:	119b      	asrs	r3, r3, #6
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	b2db      	uxtb	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001772:	4819      	ldr	r0, [pc, #100]	@ (80017d8 <gc9a01a_fill_rect+0x278>)
 8001774:	f001 f832 	bl	80027dc <HAL_GPIO_WritePin>
 8001778:	7b7b      	ldrb	r3, [r7, #13]
 800177a:	09db      	lsrs	r3, r3, #7
 800177c:	b2db      	uxtb	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001784:	4814      	ldr	r0, [pc, #80]	@ (80017d8 <gc9a01a_fill_rect+0x278>)
 8001786:	f001 f829 	bl	80027dc <HAL_GPIO_WritePin>
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001790:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001794:	f001 f822 	bl	80027dc <HAL_GPIO_WritePin>
 8001798:	2201      	movs	r2, #1
 800179a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800179e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017a2:	f001 f81b 	bl	80027dc <HAL_GPIO_WritePin>
    for(x = w; x > 0; x--) {
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	80fb      	strh	r3, [r7, #6]
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f47f af23 	bne.w	80015fa <gc9a01a_fill_rect+0x9a>
  for(y = h; y > 0; y--) {
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	807b      	strh	r3, [r7, #2]
 80017ba:	887b      	ldrh	r3, [r7, #2]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f47f af19 	bne.w	80015f4 <gc9a01a_fill_rect+0x94>
    }
  }
  GC9A01A_CS_HIGH;
 80017c2:	2201      	movs	r2, #1
 80017c4:	2108      	movs	r1, #8
 80017c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ca:	f001 f807 	bl	80027dc <HAL_GPIO_WritePin>
 80017ce:	e000      	b.n	80017d2 <gc9a01a_fill_rect+0x272>
  if((x >= BSP_LCD_ACTIVE_WIDTH) || (y >= BSP_LCD_ACTIVE_HEIGHT)) return;
 80017d0:	bf00      	nop
}
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}
 80017d8:	48000400 	.word	0x48000400

080017dc <gc9a01a_set_orientation>:
/**
  * @brief  Set the orientation of the GC9A01A LCD display
  * @param  orientation: Orientation mode (LANDSCAPE or PORTRAIT)
  * @retval None
  */
void gc9a01a_set_orientation(uint8_t orientation) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  uint8_t params[4];
  GC9A01A_CS_LOW;
 80017e6:	2200      	movs	r2, #0
 80017e8:	2108      	movs	r1, #8
 80017ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ee:	f000 fff5 	bl	80027dc <HAL_GPIO_WritePin>
  if (orientation == LANDSCAPE) {
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d11c      	bne.n	8001832 <gc9a01a_set_orientation+0x56>
    // Set column address for landscape orientation
    gc9a01a_write_cmd(GC9A01A_CASET);
 80017f8:	202a      	movs	r0, #42	@ 0x2a
 80017fa:	f7fe fdb9 	bl	8000370 <gc9a01a_write_cmd>
    params[0] = 0x00;
 80017fe:	2300      	movs	r3, #0
 8001800:	733b      	strb	r3, [r7, #12]
    params[1] = 0x00;
 8001802:	2300      	movs	r3, #0
 8001804:	737b      	strb	r3, [r7, #13]
    params[2] = 0x00;
 8001806:	2300      	movs	r3, #0
 8001808:	73bb      	strb	r3, [r7, #14]
    params[3] = 0xf0;
 800180a:	23f0      	movs	r3, #240	@ 0xf0
 800180c:	73fb      	strb	r3, [r7, #15]
    gc9a01a_write_data(params, 4);
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	2104      	movs	r1, #4
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe27 	bl	8000468 <gc9a01a_write_data>

    // Set row address for landscape orientation
    gc9a01a_write_cmd(GC9A01A_RASET);
 800181a:	202b      	movs	r0, #43	@ 0x2b
 800181c:	f7fe fda8 	bl	8000370 <gc9a01a_write_cmd>
    gc9a01a_write_data(params, 4);
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	2104      	movs	r1, #4
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe1e 	bl	8000468 <gc9a01a_write_data>

    // Set orientation parameters for landscape mode
    params[0] = MADCTL_MV | MADCTL_BGR;
 800182c:	2328      	movs	r3, #40	@ 0x28
 800182e:	733b      	strb	r3, [r7, #12]
 8001830:	e01e      	b.n	8001870 <gc9a01a_set_orientation+0x94>
  } else if (orientation == PORTRAIT) {
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d11b      	bne.n	8001870 <gc9a01a_set_orientation+0x94>
    // Set column address for portrait orientation
    gc9a01a_write_cmd(GC9A01A_CASET);
 8001838:	202a      	movs	r0, #42	@ 0x2a
 800183a:	f7fe fd99 	bl	8000370 <gc9a01a_write_cmd>
    params[0] = 0x00;
 800183e:	2300      	movs	r3, #0
 8001840:	733b      	strb	r3, [r7, #12]
    params[1] = 0x00;
 8001842:	2300      	movs	r3, #0
 8001844:	737b      	strb	r3, [r7, #13]
    params[2] = 0x00;
 8001846:	2300      	movs	r3, #0
 8001848:	73bb      	strb	r3, [r7, #14]
    params[3] = 0xf0;
 800184a:	23f0      	movs	r3, #240	@ 0xf0
 800184c:	73fb      	strb	r3, [r7, #15]
    gc9a01a_write_data(params, 4);
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	2104      	movs	r1, #4
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe07 	bl	8000468 <gc9a01a_write_data>

    // Set row address for portrait orientation
    gc9a01a_write_cmd(GC9A01A_RASET);
 800185a:	202b      	movs	r0, #43	@ 0x2b
 800185c:	f7fe fd88 	bl	8000370 <gc9a01a_write_cmd>
    gc9a01a_write_data(params, 4);
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	2104      	movs	r1, #4
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fdfe 	bl	8000468 <gc9a01a_write_data>

    // Set orientation parameters for portrait mode
    params[0] =  MADCTL_MX | MADCTL_BGR;
 800186c:	2348      	movs	r3, #72	@ 0x48
 800186e:	733b      	strb	r3, [r7, #12]
  }

  // Set MADCTL register with the configured parameters
  gc9a01a_write_cmd(GC9A01A_MADCTL);
 8001870:	2036      	movs	r0, #54	@ 0x36
 8001872:	f7fe fd7d 	bl	8000370 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	2101      	movs	r1, #1
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fdf3 	bl	8000468 <gc9a01a_write_data>
  GC9A01A_CS_HIGH;
 8001882:	2201      	movs	r2, #1
 8001884:	2108      	movs	r1, #8
 8001886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800188a:	f000 ffa7 	bl	80027dc <HAL_GPIO_WritePin>
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <gc9a01a_fill_screen>:
/**
  * @brief  Fill the entire background of the GC9A01A LCD with a specified color
  * @param  color: Color to fill the background (RGB565 format)
  * @retval None
  */
void gc9a01a_fill_screen(uint16_t color) {
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af02      	add	r7, sp, #8
 800189c:	4603      	mov	r3, r0
 800189e:	80fb      	strh	r3, [r7, #6]
  gc9a01a_fill_rect(0, GC9A01A_WIDTH, 0, GC9A01A_HEIGHT, color);
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	23f0      	movs	r3, #240	@ 0xf0
 80018a6:	2200      	movs	r2, #0
 80018a8:	21f0      	movs	r1, #240	@ 0xf0
 80018aa:	2000      	movs	r0, #0
 80018ac:	f7ff fe58 	bl	8001560 <gc9a01a_fill_rect>
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <gc9a01a_draw_image>:
  * @param  y: Start row address
  * @param  h: Height of the image
  * @param  data: Pointer to the image data (RGB565 format)
  * @retval None
  */
void gc9a01a_draw_image(uint16_t x, uint16_t w, uint16_t y, uint16_t h, const uint16_t* data) {
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4604      	mov	r4, r0
 80018c0:	4608      	mov	r0, r1
 80018c2:	4611      	mov	r1, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	4623      	mov	r3, r4
 80018c8:	80fb      	strh	r3, [r7, #6]
 80018ca:	4603      	mov	r3, r0
 80018cc:	80bb      	strh	r3, [r7, #4]
 80018ce:	460b      	mov	r3, r1
 80018d0:	807b      	strh	r3, [r7, #2]
 80018d2:	4613      	mov	r3, r2
 80018d4:	803b      	strh	r3, [r7, #0]
  if ((x >= GC9A01A_WIDTH) || (y >= GC9A01A_HEIGHT)) return;
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	2bef      	cmp	r3, #239	@ 0xef
 80018da:	f200 8126 	bhi.w	8001b2a <gc9a01a_draw_image+0x272>
 80018de:	887b      	ldrh	r3, [r7, #2]
 80018e0:	2bef      	cmp	r3, #239	@ 0xef
 80018e2:	f200 8122 	bhi.w	8001b2a <gc9a01a_draw_image+0x272>
  if ((x + w - 1) >= GC9A01A_WIDTH) w = GC9A01A_HEIGHT - x;
 80018e6:	88fa      	ldrh	r2, [r7, #6]
 80018e8:	88bb      	ldrh	r3, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	2bf0      	cmp	r3, #240	@ 0xf0
 80018ee:	dd03      	ble.n	80018f8 <gc9a01a_draw_image+0x40>
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80018f6:	80bb      	strh	r3, [r7, #4]
  if ((y + h - 1) >= GC9A01A_WIDTH) h = GC9A01A_HEIGHT - y;
 80018f8:	887a      	ldrh	r2, [r7, #2]
 80018fa:	883b      	ldrh	r3, [r7, #0]
 80018fc:	4413      	add	r3, r2
 80018fe:	2bf0      	cmp	r3, #240	@ 0xf0
 8001900:	dd03      	ble.n	800190a <gc9a01a_draw_image+0x52>
 8001902:	887b      	ldrh	r3, [r7, #2]
 8001904:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001908:	803b      	strh	r3, [r7, #0]
  GC9A01A_CS_LOW;
 800190a:	2200      	movs	r2, #0
 800190c:	2108      	movs	r1, #8
 800190e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001912:	f000 ff63 	bl	80027dc <HAL_GPIO_WritePin>
  gc9a01a_set_address_window(x, (x+w-1), y, (y+h-1));
 8001916:	88fa      	ldrh	r2, [r7, #6]
 8001918:	88bb      	ldrh	r3, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	b29b      	uxth	r3, r3
 800191e:	3b01      	subs	r3, #1
 8001920:	b299      	uxth	r1, r3
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	883b      	ldrh	r3, [r7, #0]
 8001926:	4413      	add	r3, r2
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b29b      	uxth	r3, r3
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	88f8      	ldrh	r0, [r7, #6]
 8001932:	f7fe fe5b 	bl	80005ec <gc9a01a_set_address_window>

  for (uint32_t i = 0; i < w * h; i++) {
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e0e6      	b.n	8001b0a <gc9a01a_draw_image+0x252>
    uint8_t color_high = (data[i] >> 8) & 0xFF;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	6a3a      	ldr	r2, [r7, #32]
 8001942:	4413      	add	r3, r2
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	b29b      	uxth	r3, r3
 800194a:	72fb      	strb	r3, [r7, #11]
    uint8_t color_low = data[i] & 0xFF;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	6a3a      	ldr	r2, [r7, #32]
 8001952:	4413      	add	r3, r2
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	72bb      	strb	r3, [r7, #10]
    GC9A01A_WRITE_8BIT(color_high);
 8001958:	7afb      	ldrb	r3, [r7, #11]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800196a:	f000 ff37 	bl	80027dc <HAL_GPIO_WritePin>
 800196e:	7afb      	ldrb	r3, [r7, #11]
 8001970:	105b      	asrs	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001980:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001984:	f000 ff2a 	bl	80027dc <HAL_GPIO_WritePin>
 8001988:	7afb      	ldrb	r3, [r7, #11]
 800198a:	109b      	asrs	r3, r3, #2
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	b2db      	uxtb	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800199a:	4866      	ldr	r0, [pc, #408]	@ (8001b34 <gc9a01a_draw_image+0x27c>)
 800199c:	f000 ff1e 	bl	80027dc <HAL_GPIO_WritePin>
 80019a0:	7afb      	ldrb	r3, [r7, #11]
 80019a2:	10db      	asrs	r3, r3, #3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019b2:	4860      	ldr	r0, [pc, #384]	@ (8001b34 <gc9a01a_draw_image+0x27c>)
 80019b4:	f000 ff12 	bl	80027dc <HAL_GPIO_WritePin>
 80019b8:	7afb      	ldrb	r3, [r7, #11]
 80019ba:	111b      	asrs	r3, r3, #4
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019ca:	485a      	ldr	r0, [pc, #360]	@ (8001b34 <gc9a01a_draw_image+0x27c>)
 80019cc:	f000 ff06 	bl	80027dc <HAL_GPIO_WritePin>
 80019d0:	7afb      	ldrb	r3, [r7, #11]
 80019d2:	115b      	asrs	r3, r3, #5
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019e2:	4854      	ldr	r0, [pc, #336]	@ (8001b34 <gc9a01a_draw_image+0x27c>)
 80019e4:	f000 fefa 	bl	80027dc <HAL_GPIO_WritePin>
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	119b      	asrs	r3, r3, #6
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019fa:	484e      	ldr	r0, [pc, #312]	@ (8001b34 <gc9a01a_draw_image+0x27c>)
 80019fc:	f000 feee 	bl	80027dc <HAL_GPIO_WritePin>
 8001a00:	7afb      	ldrb	r3, [r7, #11]
 8001a02:	09db      	lsrs	r3, r3, #7
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a0c:	4849      	ldr	r0, [pc, #292]	@ (8001b34 <gc9a01a_draw_image+0x27c>)
 8001a0e:	f000 fee5 	bl	80027dc <HAL_GPIO_WritePin>
 8001a12:	2200      	movs	r2, #0
 8001a14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a1c:	f000 fede 	bl	80027dc <HAL_GPIO_WritePin>
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a2a:	f000 fed7 	bl	80027dc <HAL_GPIO_WritePin>
    GC9A01A_WRITE_8BIT(color_low);
 8001a2e:	7abb      	ldrb	r3, [r7, #10]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a40:	f000 fecc 	bl	80027dc <HAL_GPIO_WritePin>
 8001a44:	7abb      	ldrb	r3, [r7, #10]
 8001a46:	105b      	asrs	r3, r3, #1
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a5a:	f000 febf 	bl	80027dc <HAL_GPIO_WritePin>
 8001a5e:	7abb      	ldrb	r3, [r7, #10]
 8001a60:	109b      	asrs	r3, r3, #2
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a70:	4830      	ldr	r0, [pc, #192]	@ (8001b34 <gc9a01a_draw_image+0x27c>)
 8001a72:	f000 feb3 	bl	80027dc <HAL_GPIO_WritePin>
 8001a76:	7abb      	ldrb	r3, [r7, #10]
 8001a78:	10db      	asrs	r3, r3, #3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a88:	482a      	ldr	r0, [pc, #168]	@ (8001b34 <gc9a01a_draw_image+0x27c>)
 8001a8a:	f000 fea7 	bl	80027dc <HAL_GPIO_WritePin>
 8001a8e:	7abb      	ldrb	r3, [r7, #10]
 8001a90:	111b      	asrs	r3, r3, #4
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aa0:	4824      	ldr	r0, [pc, #144]	@ (8001b34 <gc9a01a_draw_image+0x27c>)
 8001aa2:	f000 fe9b 	bl	80027dc <HAL_GPIO_WritePin>
 8001aa6:	7abb      	ldrb	r3, [r7, #10]
 8001aa8:	115b      	asrs	r3, r3, #5
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ab8:	481e      	ldr	r0, [pc, #120]	@ (8001b34 <gc9a01a_draw_image+0x27c>)
 8001aba:	f000 fe8f 	bl	80027dc <HAL_GPIO_WritePin>
 8001abe:	7abb      	ldrb	r3, [r7, #10]
 8001ac0:	119b      	asrs	r3, r3, #6
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ad0:	4818      	ldr	r0, [pc, #96]	@ (8001b34 <gc9a01a_draw_image+0x27c>)
 8001ad2:	f000 fe83 	bl	80027dc <HAL_GPIO_WritePin>
 8001ad6:	7abb      	ldrb	r3, [r7, #10]
 8001ad8:	09db      	lsrs	r3, r3, #7
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ae2:	4814      	ldr	r0, [pc, #80]	@ (8001b34 <gc9a01a_draw_image+0x27c>)
 8001ae4:	f000 fe7a 	bl	80027dc <HAL_GPIO_WritePin>
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001af2:	f000 fe73 	bl	80027dc <HAL_GPIO_WritePin>
 8001af6:	2201      	movs	r2, #1
 8001af8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001afc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b00:	f000 fe6c 	bl	80027dc <HAL_GPIO_WritePin>
  for (uint32_t i = 0; i < w * h; i++) {
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3301      	adds	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	88bb      	ldrh	r3, [r7, #4]
 8001b0c:	883a      	ldrh	r2, [r7, #0]
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4293      	cmp	r3, r2
 8001b18:	f4ff af10 	bcc.w	800193c <gc9a01a_draw_image+0x84>
  }
  GC9A01A_CS_HIGH;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2108      	movs	r1, #8
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b24:	f000 fe5a 	bl	80027dc <HAL_GPIO_WritePin>
 8001b28:	e000      	b.n	8001b2c <gc9a01a_draw_image+0x274>
  if ((x >= GC9A01A_WIDTH) || (y >= GC9A01A_HEIGHT)) return;
 8001b2a:	bf00      	nop
}
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd90      	pop	{r4, r7, pc}
 8001b32:	bf00      	nop
 8001b34:	48000400 	.word	0x48000400

08001b38 <gc9a01a_lcd_fill_image>:
/**
  * @brief  Draw an full scale image on the GC9A01A LCD(240 x 240)
  * @param  data: Pointer to the image data (RGB565 format)
  * @retval None
  */
void gc9a01a_lcd_fill_image(const uint16_t* data){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	6078      	str	r0, [r7, #4]
  gc9a01a_draw_image(0, GC9A01A_WIDTH, 0, GC9A01A_HEIGHT, data);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	23f0      	movs	r3, #240	@ 0xf0
 8001b46:	2200      	movs	r2, #0
 8001b48:	21f0      	movs	r1, #240	@ 0xf0
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff feb4 	bl	80018b8 <gc9a01a_draw_image>
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b5c:	f000 fb28 	bl	80021b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b60:	f000 f816 	bl	8001b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b64:	f000 f8b0 	bl	8001cc8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b68:	f000 f86e 	bl	8001c48 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  bsp_lcd_init();
 8001b6c:	f7ff fcca 	bl	8001504 <bsp_lcd_init>
  CST816S_init();
 8001b70:	f7fe fbd0 	bl	8000314 <CST816S_init>

  display_vibgyor_sequence();
 8001b74:	f000 f920 	bl	8001db8 <display_vibgyor_sequence>
  HAL_Delay(1000);
 8001b78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b7c:	f000 fb7e 	bl	800227c <HAL_Delay>
  //gc9a01a_lcd_fill_image(image);
  //gc9a01a_lcd_fill_image(image2);
  gc9a01a_lcd_fill_image(image1);
 8001b80:	4802      	ldr	r0, [pc, #8]	@ (8001b8c <main+0x34>)
 8001b82:	f7ff ffd9 	bl	8001b38 <gc9a01a_lcd_fill_image>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b86:	bf00      	nop
 8001b88:	e7fd      	b.n	8001b86 <main+0x2e>
 8001b8a:	bf00      	nop
 8001b8c:	08005864 	.word	0x08005864

08001b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b09e      	sub	sp, #120	@ 0x78
 8001b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b96:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b9a:	2228      	movs	r2, #40	@ 0x28
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f002 ffdd 	bl	8004b5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	223c      	movs	r2, #60	@ 0x3c
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 ffcf 	bl	8004b5e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bc8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bd2:	2310      	movs	r3, #16
 8001bd4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bde:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001be0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001be4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001bea:	4618      	mov	r0, r3
 8001bec:	f001 fae2 	bl	80031b4 <HAL_RCC_OscConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001bf6:	f000 f956 	bl	8001ea6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c10:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c14:	2102      	movs	r1, #2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 fb0a 	bl	8004230 <HAL_RCC_ClockConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c22:	f000 f940 	bl	8001ea6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c26:	2320      	movs	r3, #32
 8001c28:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c2e:	463b      	mov	r3, r7
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fccd 	bl	80045d0 <HAL_RCCEx_PeriphCLKConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001c3c:	f000 f933 	bl	8001ea6 <Error_Handler>
  }
}
 8001c40:	bf00      	nop
 8001c42:	3778      	adds	r7, #120	@ 0x78
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc0 <MX_I2C1_Init+0x78>)
 8001c50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c54:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc4 <MX_I2C1_Init+0x7c>)
 8001c56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c58:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c5e:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c64:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c70:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c82:	480e      	ldr	r0, [pc, #56]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c84:	f000 fdda 	bl	800283c <HAL_I2C_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c8e:	f000 f90a 	bl	8001ea6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c92:	2100      	movs	r1, #0
 8001c94:	4809      	ldr	r0, [pc, #36]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001c96:	f001 f9f5 	bl	8003084 <HAL_I2CEx_ConfigAnalogFilter>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ca0:	f000 f901 	bl	8001ea6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4805      	ldr	r0, [pc, #20]	@ (8001cbc <MX_I2C1_Init+0x74>)
 8001ca8:	f001 fa37 	bl	800311a <HAL_I2CEx_ConfigDigitalFilter>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cb2:	f000 f8f8 	bl	8001ea6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000098 	.word	0x20000098
 8001cc0:	40005400 	.word	0x40005400
 8001cc4:	2000090e 	.word	0x2000090e

08001cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cde:	4b34      	ldr	r3, [pc, #208]	@ (8001db0 <MX_GPIO_Init+0xe8>)
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	4a33      	ldr	r2, [pc, #204]	@ (8001db0 <MX_GPIO_Init+0xe8>)
 8001ce4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ce8:	6153      	str	r3, [r2, #20]
 8001cea:	4b31      	ldr	r3, [pc, #196]	@ (8001db0 <MX_GPIO_Init+0xe8>)
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	4b2e      	ldr	r3, [pc, #184]	@ (8001db0 <MX_GPIO_Init+0xe8>)
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	4a2d      	ldr	r2, [pc, #180]	@ (8001db0 <MX_GPIO_Init+0xe8>)
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d00:	6153      	str	r3, [r2, #20]
 8001d02:	4b2b      	ldr	r3, [pc, #172]	@ (8001db0 <MX_GPIO_Init+0xe8>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	4b28      	ldr	r3, [pc, #160]	@ (8001db0 <MX_GPIO_Init+0xe8>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	4a27      	ldr	r2, [pc, #156]	@ (8001db0 <MX_GPIO_Init+0xe8>)
 8001d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d18:	6153      	str	r3, [r2, #20]
 8001d1a:	4b25      	ldr	r3, [pc, #148]	@ (8001db0 <MX_GPIO_Init+0xe8>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_TE_Pin|LCD_CSX_Pin|BL_A_Pin|BD1_Pin
 8001d26:	2200      	movs	r2, #0
 8001d28:	f248 611a 	movw	r1, #34330	@ 0x861a
 8001d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d30:	f000 fd54 	bl	80027dc <HAL_GPIO_WritePin>
                          |BD0_Pin|WRD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RDX_Pin|DCX_Pin|BD7_Pin|BD6_Pin
 8001d34:	2200      	movs	r2, #0
 8001d36:	f64f 5113 	movw	r1, #64787	@ 0xfd13
 8001d3a:	481e      	ldr	r0, [pc, #120]	@ (8001db4 <MX_GPIO_Init+0xec>)
 8001d3c:	f000 fd4e 	bl	80027dc <HAL_GPIO_WritePin>
                          |BD5_Pin|BD4_Pin|BD3_Pin|BD2_Pin
                          |TP_RST_Pin|LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_TE_Pin LCD_CSX_Pin BL_A_Pin BD1_Pin
                           BD0_Pin WRD_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin|LCD_CSX_Pin|BL_A_Pin|BD1_Pin
 8001d40:	f248 631a 	movw	r3, #34330	@ 0x861a
 8001d44:	60fb      	str	r3, [r7, #12]
                          |BD0_Pin|WRD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d46:	2301      	movs	r3, #1
 8001d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	4619      	mov	r1, r3
 8001d58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d5c:	f000 fbc4 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RDX_Pin DCX_Pin BD7_Pin BD6_Pin
                           BD5_Pin BD4_Pin BD3_Pin BD2_Pin
                           TP_RST_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RDX_Pin|DCX_Pin|BD7_Pin|BD6_Pin
 8001d60:	f64f 5313 	movw	r3, #64787	@ 0xfd13
 8001d64:	60fb      	str	r3, [r7, #12]
                          |BD5_Pin|BD4_Pin|BD3_Pin|BD2_Pin
                          |TP_RST_Pin|LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d66:	2301      	movs	r3, #1
 8001d68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	4619      	mov	r1, r3
 8001d78:	480e      	ldr	r0, [pc, #56]	@ (8001db4 <MX_GPIO_Init+0xec>)
 8001d7a:	f000 fbb5 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IN_Pin */
  GPIO_InitStruct.Pin = TP_IN_Pin;
 8001d7e:	2320      	movs	r3, #32
 8001d80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_IN_GPIO_Port, &GPIO_InitStruct);
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	4619      	mov	r1, r3
 8001d92:	4808      	ldr	r0, [pc, #32]	@ (8001db4 <MX_GPIO_Init+0xec>)
 8001d94:	f000 fba8 	bl	80024e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2017      	movs	r0, #23
 8001d9e:	f000 fb6c 	bl	800247a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001da2:	2017      	movs	r0, #23
 8001da4:	f000 fb85 	bl	80024b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001da8:	bf00      	nop
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000
 8001db4:	48000400 	.word	0x48000400

08001db8 <display_vibgyor_sequence>:
/**
  * @brief  Displays a VIBGYOR color sequence on the LCD.
  *         This function assumes VIOLET, INDIGO, BLUE, GREEN, YELLOW, ORANGE, and RED are defined color values.
  * @retval None
  */
static void display_vibgyor_sequence() {
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af02      	add	r7, sp, #8
  uint8_t x_start = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  //uint8_t y_start = 0;
  uint8_t x_width = 240;
 8001dc2:	23f0      	movs	r3, #240	@ 0xf0
 8001dc4:	71bb      	strb	r3, [r7, #6]
  uint8_t y_height = 34;
 8001dc6:	2322      	movs	r3, #34	@ 0x22
 8001dc8:	717b      	strb	r3, [r7, #5]
  gc9a01a_fill_rect(x_start, x_width, y_height*0, y_height, VIOLET);
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	b298      	uxth	r0, r3
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	b299      	uxth	r1, r3
 8001dd2:	797b      	ldrb	r3, [r7, #5]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	f248 021f 	movw	r2, #32799	@ 0x801f
 8001dda:	9200      	str	r2, [sp, #0]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f7ff fbbf 	bl	8001560 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start, x_width, y_height*1, y_height, INDIGO);
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	b298      	uxth	r0, r3
 8001de6:	79bb      	ldrb	r3, [r7, #6]
 8001de8:	b299      	uxth	r1, r3
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	797b      	ldrb	r3, [r7, #5]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	f644 040f 	movw	r4, #18447	@ 0x480f
 8001df6:	9400      	str	r4, [sp, #0]
 8001df8:	f7ff fbb2 	bl	8001560 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start, x_width, y_height*2, y_height, BLUE);
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	b298      	uxth	r0, r3
 8001e00:	79bb      	ldrb	r3, [r7, #6]
 8001e02:	b299      	uxth	r1, r3
 8001e04:	797b      	ldrb	r3, [r7, #5]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	797b      	ldrb	r3, [r7, #5]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	241f      	movs	r4, #31
 8001e12:	9400      	str	r4, [sp, #0]
 8001e14:	f7ff fba4 	bl	8001560 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start, x_width, y_height*3, y_height, GREEN);
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	b298      	uxth	r0, r3
 8001e1c:	79bb      	ldrb	r3, [r7, #6]
 8001e1e:	b299      	uxth	r1, r3
 8001e20:	797b      	ldrb	r3, [r7, #5]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	0052      	lsls	r2, r2, #1
 8001e28:	4413      	add	r3, r2
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	797b      	ldrb	r3, [r7, #5]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 8001e34:	9400      	str	r4, [sp, #0]
 8001e36:	f7ff fb93 	bl	8001560 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start, x_width, y_height*4, y_height, YELLOW);
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	b298      	uxth	r0, r3
 8001e3e:	79bb      	ldrb	r3, [r7, #6]
 8001e40:	b299      	uxth	r1, r3
 8001e42:	797b      	ldrb	r3, [r7, #5]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	797b      	ldrb	r3, [r7, #5]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	f64f 74e0 	movw	r4, #65504	@ 0xffe0
 8001e52:	9400      	str	r4, [sp, #0]
 8001e54:	f7ff fb84 	bl	8001560 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start, x_width, y_height*5, y_height, ORANGE );
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	b298      	uxth	r0, r3
 8001e5c:	79bb      	ldrb	r3, [r7, #6]
 8001e5e:	b299      	uxth	r1, r3
 8001e60:	797b      	ldrb	r3, [r7, #5]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	0092      	lsls	r2, r2, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	797b      	ldrb	r3, [r7, #5]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	f44f 447c 	mov.w	r4, #64512	@ 0xfc00
 8001e74:	9400      	str	r4, [sp, #0]
 8001e76:	f7ff fb73 	bl	8001560 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start, x_width, y_height*6, y_height, RED);
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	b298      	uxth	r0, r3
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	b299      	uxth	r1, r3
 8001e82:	797b      	ldrb	r3, [r7, #5]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	0052      	lsls	r2, r2, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	797b      	ldrb	r3, [r7, #5]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 8001e98:	9400      	str	r4, [sp, #0]
 8001e9a:	f7ff fb61 	bl	8001560 <gc9a01a_fill_rect>
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd90      	pop	{r4, r7, pc}

08001ea6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eaa:	b672      	cpsid	i
}
 8001eac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eae:	bf00      	nop
 8001eb0:	e7fd      	b.n	8001eae <Error_Handler+0x8>
	...

08001eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6193      	str	r3, [r2, #24]
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a08      	ldr	r2, [pc, #32]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001edc:	61d3      	str	r3, [r2, #28]
 8001ede:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_MspInit+0x44>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000

08001efc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	@ 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a17      	ldr	r2, [pc, #92]	@ (8001f78 <HAL_I2C_MspInit+0x7c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d127      	bne.n	8001f6e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	4b17      	ldr	r3, [pc, #92]	@ (8001f7c <HAL_I2C_MspInit+0x80>)
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	4a16      	ldr	r2, [pc, #88]	@ (8001f7c <HAL_I2C_MspInit+0x80>)
 8001f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f28:	6153      	str	r3, [r2, #20]
 8001f2a:	4b14      	ldr	r3, [pc, #80]	@ (8001f7c <HAL_I2C_MspInit+0x80>)
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TP_SCL_Pin|TP_SDA_Pin;
 8001f36:	23c0      	movs	r3, #192	@ 0xc0
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3a:	2312      	movs	r3, #18
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f46:	2304      	movs	r3, #4
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480b      	ldr	r0, [pc, #44]	@ (8001f80 <HAL_I2C_MspInit+0x84>)
 8001f52:	f000 fac9 	bl	80024e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f56:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_I2C_MspInit+0x80>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4a08      	ldr	r2, [pc, #32]	@ (8001f7c <HAL_I2C_MspInit+0x80>)
 8001f5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f60:	61d3      	str	r3, [r2, #28]
 8001f62:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_I2C_MspInit+0x80>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	@ 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40005400 	.word	0x40005400
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	48000400 	.word	0x48000400

08001f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <NMI_Handler+0x4>

08001f8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <HardFault_Handler+0x4>

08001f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <MemManage_Handler+0x4>

08001f9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <BusFault_Handler+0x4>

08001fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <UsageFault_Handler+0x4>

08001fac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fda:	f000 f92f 	bl	800223c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IN_Pin);
 8001fe6:	2020      	movs	r0, #32
 8001fe8:	f000 fc10 	bl	800280c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	e00a      	b.n	8002018 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002002:	f3af 8000 	nop.w
 8002006:	4601      	mov	r1, r0
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	60ba      	str	r2, [r7, #8]
 800200e:	b2ca      	uxtb	r2, r1
 8002010:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3301      	adds	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	dbf0      	blt.n	8002002 <_read+0x12>
  }

  return len;
 8002020:	687b      	ldr	r3, [r7, #4]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	e009      	b.n	8002050 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	60ba      	str	r2, [r7, #8]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3301      	adds	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	429a      	cmp	r2, r3
 8002056:	dbf1      	blt.n	800203c <_write+0x12>
  }
  return len;
 8002058:	687b      	ldr	r3, [r7, #4]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <_close>:

int _close(int file)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800208a:	605a      	str	r2, [r3, #4]
  return 0;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <_isatty>:

int _isatty(int file)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020a2:	2301      	movs	r3, #1
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d4:	4a14      	ldr	r2, [pc, #80]	@ (8002128 <_sbrk+0x5c>)
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <_sbrk+0x60>)
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e0:	4b13      	ldr	r3, [pc, #76]	@ (8002130 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e8:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <_sbrk+0x64>)
 80020ea:	4a12      	ldr	r2, [pc, #72]	@ (8002134 <_sbrk+0x68>)
 80020ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ee:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <_sbrk+0x64>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d207      	bcs.n	800210c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020fc:	f002 fd7e 	bl	8004bfc <__errno>
 8002100:	4603      	mov	r3, r0
 8002102:	220c      	movs	r2, #12
 8002104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002106:	f04f 33ff 	mov.w	r3, #4294967295
 800210a:	e009      	b.n	8002120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800210c:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002112:	4b07      	ldr	r3, [pc, #28]	@ (8002130 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	4a05      	ldr	r2, [pc, #20]	@ (8002130 <_sbrk+0x64>)
 800211c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800211e:	68fb      	ldr	r3, [r7, #12]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	2000a000 	.word	0x2000a000
 800212c:	00000600 	.word	0x00000600
 8002130:	200000ec 	.word	0x200000ec
 8002134:	20000240 	.word	0x20000240

08002138 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <SystemInit+0x20>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002142:	4a05      	ldr	r2, [pc, #20]	@ (8002158 <SystemInit+0x20>)
 8002144:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002148:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800215c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002194 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002160:	f7ff ffea 	bl	8002138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002164:	480c      	ldr	r0, [pc, #48]	@ (8002198 <LoopForever+0x6>)
  ldr r1, =_edata
 8002166:	490d      	ldr	r1, [pc, #52]	@ (800219c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002168:	4a0d      	ldr	r2, [pc, #52]	@ (80021a0 <LoopForever+0xe>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800216c:	e002      	b.n	8002174 <LoopCopyDataInit>

0800216e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002172:	3304      	adds	r3, #4

08002174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002178:	d3f9      	bcc.n	800216e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217a:	4a0a      	ldr	r2, [pc, #40]	@ (80021a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800217c:	4c0a      	ldr	r4, [pc, #40]	@ (80021a8 <LoopForever+0x16>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002180:	e001      	b.n	8002186 <LoopFillZerobss>

08002182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002184:	3204      	adds	r2, #4

08002186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002188:	d3fb      	bcc.n	8002182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800218a:	f002 fd3d 	bl	8004c08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800218e:	f7ff fce3 	bl	8001b58 <main>

08002192 <LoopForever>:

LoopForever:
    b LoopForever
 8002192:	e7fe      	b.n	8002192 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002194:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800219c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80021a0:	08021ad8 	.word	0x08021ad8
  ldr r2, =_sbss
 80021a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80021a8:	20000240 	.word	0x20000240

080021ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021ac:	e7fe      	b.n	80021ac <ADC1_2_IRQHandler>
	...

080021b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b4:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <HAL_Init+0x28>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a07      	ldr	r2, [pc, #28]	@ (80021d8 <HAL_Init+0x28>)
 80021ba:	f043 0310 	orr.w	r3, r3, #16
 80021be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c0:	2003      	movs	r0, #3
 80021c2:	f000 f94f 	bl	8002464 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021c6:	200f      	movs	r0, #15
 80021c8:	f000 f808 	bl	80021dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021cc:	f7ff fe72 	bl	8001eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40022000 	.word	0x40022000

080021dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e4:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <HAL_InitTick+0x54>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_InitTick+0x58>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4619      	mov	r1, r3
 80021ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f967 	bl	80024ce <HAL_SYSTICK_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e00e      	b.n	8002228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b0f      	cmp	r3, #15
 800220e:	d80a      	bhi.n	8002226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002210:	2200      	movs	r2, #0
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f000 f92f 	bl	800247a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800221c:	4a06      	ldr	r2, [pc, #24]	@ (8002238 <HAL_InitTick+0x5c>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e000      	b.n	8002228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000000 	.word	0x20000000
 8002234:	20000008 	.word	0x20000008
 8002238:	20000004 	.word	0x20000004

0800223c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <HAL_IncTick+0x20>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_IncTick+0x24>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4413      	add	r3, r2
 800224c:	4a04      	ldr	r2, [pc, #16]	@ (8002260 <HAL_IncTick+0x24>)
 800224e:	6013      	str	r3, [r2, #0]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000008 	.word	0x20000008
 8002260:	200000f0 	.word	0x200000f0

08002264 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return uwTick;  
 8002268:	4b03      	ldr	r3, [pc, #12]	@ (8002278 <HAL_GetTick+0x14>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	200000f0 	.word	0x200000f0

0800227c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002284:	f7ff ffee 	bl	8002264 <HAL_GetTick>
 8002288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d005      	beq.n	80022a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002296:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <HAL_Delay+0x44>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4413      	add	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80022a2:	bf00      	nop
 80022a4:	f7ff ffde 	bl	8002264 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d8f7      	bhi.n	80022a4 <HAL_Delay+0x28>
  {
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000008 	.word	0x20000008

080022c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022e0:	4013      	ands	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f6:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <__NVIC_SetPriorityGrouping+0x44>)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	60d3      	str	r3, [r2, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002310:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <__NVIC_GetPriorityGrouping+0x18>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 0307 	and.w	r3, r3, #7
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	2b00      	cmp	r3, #0
 8002338:	db0b      	blt.n	8002352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	f003 021f 	and.w	r2, r3, #31
 8002340:	4907      	ldr	r1, [pc, #28]	@ (8002360 <__NVIC_EnableIRQ+0x38>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	2001      	movs	r0, #1
 800234a:	fa00 f202 	lsl.w	r2, r0, r2
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000e100 	.word	0xe000e100

08002364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db0a      	blt.n	800238e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	490c      	ldr	r1, [pc, #48]	@ (80023b0 <__NVIC_SetPriority+0x4c>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	440b      	add	r3, r1
 8002388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800238c:	e00a      	b.n	80023a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4908      	ldr	r1, [pc, #32]	@ (80023b4 <__NVIC_SetPriority+0x50>)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	3b04      	subs	r3, #4
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	440b      	add	r3, r1
 80023a2:	761a      	strb	r2, [r3, #24]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000e100 	.word	0xe000e100
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	@ 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f1c3 0307 	rsb	r3, r3, #7
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf28      	it	cs
 80023d6:	2304      	movcs	r3, #4
 80023d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3304      	adds	r3, #4
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d902      	bls.n	80023e8 <NVIC_EncodePriority+0x30>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3b03      	subs	r3, #3
 80023e6:	e000      	b.n	80023ea <NVIC_EncodePriority+0x32>
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	401a      	ands	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43d9      	mvns	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	4313      	orrs	r3, r2
         );
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	@ 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002430:	d301      	bcc.n	8002436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002432:	2301      	movs	r3, #1
 8002434:	e00f      	b.n	8002456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002436:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <SysTick_Config+0x40>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243e:	210f      	movs	r1, #15
 8002440:	f04f 30ff 	mov.w	r0, #4294967295
 8002444:	f7ff ff8e 	bl	8002364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <SysTick_Config+0x40>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244e:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <SysTick_Config+0x40>)
 8002450:	2207      	movs	r2, #7
 8002452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	e000e010 	.word	0xe000e010

08002464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff29 	bl	80022c4 <__NVIC_SetPriorityGrouping>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800248c:	f7ff ff3e 	bl	800230c <__NVIC_GetPriorityGrouping>
 8002490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	6978      	ldr	r0, [r7, #20]
 8002498:	f7ff ff8e 	bl	80023b8 <NVIC_EncodePriority>
 800249c:	4602      	mov	r2, r0
 800249e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff5d 	bl	8002364 <__NVIC_SetPriority>
}
 80024aa:	bf00      	nop
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff31 	bl	8002328 <__NVIC_EnableIRQ>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ffa2 	bl	8002420 <SysTick_Config>
 80024dc:	4603      	mov	r3, r0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b087      	sub	sp, #28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f6:	e154      	b.n	80027a2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2101      	movs	r1, #1
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8146 	beq.w	800279c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d005      	beq.n	8002528 <HAL_GPIO_Init+0x40>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d130      	bne.n	800258a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800255e:	2201      	movs	r2, #1
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	f003 0201 	and.w	r2, r3, #1
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b03      	cmp	r3, #3
 8002594:	d017      	beq.n	80025c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2203      	movs	r2, #3
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d123      	bne.n	800261a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	08da      	lsrs	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3208      	adds	r2, #8
 80025da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	220f      	movs	r2, #15
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	08da      	lsrs	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3208      	adds	r2, #8
 8002614:	6939      	ldr	r1, [r7, #16]
 8002616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	2203      	movs	r2, #3
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4013      	ands	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0203 	and.w	r2, r3, #3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80a0 	beq.w	800279c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265c:	4b58      	ldr	r3, [pc, #352]	@ (80027c0 <HAL_GPIO_Init+0x2d8>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	4a57      	ldr	r2, [pc, #348]	@ (80027c0 <HAL_GPIO_Init+0x2d8>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6193      	str	r3, [r2, #24]
 8002668:	4b55      	ldr	r3, [pc, #340]	@ (80027c0 <HAL_GPIO_Init+0x2d8>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002674:	4a53      	ldr	r2, [pc, #332]	@ (80027c4 <HAL_GPIO_Init+0x2dc>)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	220f      	movs	r2, #15
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800269e:	d019      	beq.n	80026d4 <HAL_GPIO_Init+0x1ec>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a49      	ldr	r2, [pc, #292]	@ (80027c8 <HAL_GPIO_Init+0x2e0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d013      	beq.n	80026d0 <HAL_GPIO_Init+0x1e8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a48      	ldr	r2, [pc, #288]	@ (80027cc <HAL_GPIO_Init+0x2e4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00d      	beq.n	80026cc <HAL_GPIO_Init+0x1e4>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a47      	ldr	r2, [pc, #284]	@ (80027d0 <HAL_GPIO_Init+0x2e8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d007      	beq.n	80026c8 <HAL_GPIO_Init+0x1e0>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a46      	ldr	r2, [pc, #280]	@ (80027d4 <HAL_GPIO_Init+0x2ec>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d101      	bne.n	80026c4 <HAL_GPIO_Init+0x1dc>
 80026c0:	2304      	movs	r3, #4
 80026c2:	e008      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026c4:	2305      	movs	r3, #5
 80026c6:	e006      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026c8:	2303      	movs	r3, #3
 80026ca:	e004      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e002      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_GPIO_Init+0x1ee>
 80026d4:	2300      	movs	r3, #0
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	f002 0203 	and.w	r2, r2, #3
 80026dc:	0092      	lsls	r2, r2, #2
 80026de:	4093      	lsls	r3, r2
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026e6:	4937      	ldr	r1, [pc, #220]	@ (80027c4 <HAL_GPIO_Init+0x2dc>)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f4:	4b38      	ldr	r3, [pc, #224]	@ (80027d8 <HAL_GPIO_Init+0x2f0>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002718:	4a2f      	ldr	r2, [pc, #188]	@ (80027d8 <HAL_GPIO_Init+0x2f0>)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800271e:	4b2e      	ldr	r3, [pc, #184]	@ (80027d8 <HAL_GPIO_Init+0x2f0>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	43db      	mvns	r3, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002742:	4a25      	ldr	r2, [pc, #148]	@ (80027d8 <HAL_GPIO_Init+0x2f0>)
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002748:	4b23      	ldr	r3, [pc, #140]	@ (80027d8 <HAL_GPIO_Init+0x2f0>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800276c:	4a1a      	ldr	r2, [pc, #104]	@ (80027d8 <HAL_GPIO_Init+0x2f0>)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002772:	4b19      	ldr	r3, [pc, #100]	@ (80027d8 <HAL_GPIO_Init+0x2f0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002796:	4a10      	ldr	r2, [pc, #64]	@ (80027d8 <HAL_GPIO_Init+0x2f0>)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3301      	adds	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f47f aea3 	bne.w	80024f8 <HAL_GPIO_Init+0x10>
  }
}
 80027b2:	bf00      	nop
 80027b4:	bf00      	nop
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40010000 	.word	0x40010000
 80027c8:	48000400 	.word	0x48000400
 80027cc:	48000800 	.word	0x48000800
 80027d0:	48000c00 	.word	0x48000c00
 80027d4:	48001000 	.word	0x48001000
 80027d8:	40010400 	.word	0x40010400

080027dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
 80027e8:	4613      	mov	r3, r2
 80027ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027ec:	787b      	ldrb	r3, [r7, #1]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027f8:	e002      	b.n	8002800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002816:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d006      	beq.n	8002830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002822:	4a05      	ldr	r2, [pc, #20]	@ (8002838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	4618      	mov	r0, r3
 800282c:	f7fd fd40 	bl	80002b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40010400 	.word	0x40010400

0800283c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e08d      	b.n	800296a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff fb4a 	bl	8001efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2224      	movs	r2, #36	@ 0x24
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800288c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800289c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d107      	bne.n	80028b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	e006      	b.n	80028c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80028c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d108      	bne.n	80028de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	e007      	b.n	80028ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002900:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002910:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69d9      	ldr	r1, [r3, #28]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1a      	ldr	r2, [r3, #32]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	4608      	mov	r0, r1
 800297e:	4611      	mov	r1, r2
 8002980:	461a      	mov	r2, r3
 8002982:	4603      	mov	r3, r0
 8002984:	817b      	strh	r3, [r7, #10]
 8002986:	460b      	mov	r3, r1
 8002988:	813b      	strh	r3, [r7, #8]
 800298a:	4613      	mov	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b20      	cmp	r3, #32
 8002998:	f040 80fd 	bne.w	8002b96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_I2C_Mem_Read+0x34>
 80029a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0f1      	b.n	8002b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_I2C_Mem_Read+0x4e>
 80029be:	2302      	movs	r3, #2
 80029c0:	e0ea      	b.n	8002b98 <HAL_I2C_Mem_Read+0x224>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029ca:	f7ff fc4b 	bl	8002264 <HAL_GetTick>
 80029ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2319      	movs	r3, #25
 80029d6:	2201      	movs	r2, #1
 80029d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f95b 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0d5      	b.n	8002b98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2222      	movs	r2, #34	@ 0x22
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2240      	movs	r2, #64	@ 0x40
 80029f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a3a      	ldr	r2, [r7, #32]
 8002a06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a14:	88f8      	ldrh	r0, [r7, #6]
 8002a16:	893a      	ldrh	r2, [r7, #8]
 8002a18:	8979      	ldrh	r1, [r7, #10]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	4603      	mov	r3, r0
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f8bf 	bl	8002ba8 <I2C_RequestMemoryRead>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0ad      	b.n	8002b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2bff      	cmp	r3, #255	@ 0xff
 8002a44:	d90e      	bls.n	8002a64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	8979      	ldrh	r1, [r7, #10]
 8002a54:	4b52      	ldr	r3, [pc, #328]	@ (8002ba0 <HAL_I2C_Mem_Read+0x22c>)
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fadf 	bl	8003020 <I2C_TransferConfig>
 8002a62:	e00f      	b.n	8002a84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	8979      	ldrh	r1, [r7, #10]
 8002a76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba0 <HAL_I2C_Mem_Read+0x22c>)
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 face 	bl	8003020 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2104      	movs	r1, #4
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f902 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e07c      	b.n	8002b98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d034      	beq.n	8002b44 <HAL_I2C_Mem_Read+0x1d0>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d130      	bne.n	8002b44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2180      	movs	r1, #128	@ 0x80
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f8d3 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e04d      	b.n	8002b98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2bff      	cmp	r3, #255	@ 0xff
 8002b04:	d90e      	bls.n	8002b24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	8979      	ldrh	r1, [r7, #10]
 8002b14:	2300      	movs	r3, #0
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 fa7f 	bl	8003020 <I2C_TransferConfig>
 8002b22:	e00f      	b.n	8002b44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	8979      	ldrh	r1, [r7, #10]
 8002b36:	2300      	movs	r3, #0
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fa6e 	bl	8003020 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d19a      	bne.n	8002a84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f940 	bl	8002dd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e01a      	b.n	8002b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2220      	movs	r2, #32
 8002b68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba4 <HAL_I2C_Mem_Read+0x230>)
 8002b76:	400b      	ands	r3, r1
 8002b78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e000      	b.n	8002b98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b96:	2302      	movs	r3, #2
  }
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	80002400 	.word	0x80002400
 8002ba4:	fe00e800 	.word	0xfe00e800

08002ba8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	4608      	mov	r0, r1
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	817b      	strh	r3, [r7, #10]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	813b      	strh	r3, [r7, #8]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	8979      	ldrh	r1, [r7, #10]
 8002bc8:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <I2C_RequestMemoryRead+0xa4>)
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fa26 	bl	8003020 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	69b9      	ldr	r1, [r7, #24]
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f8b6 	bl	8002d4a <I2C_WaitOnTXISFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e02c      	b.n	8002c42 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002be8:	88fb      	ldrh	r3, [r7, #6]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d105      	bne.n	8002bfa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bee:	893b      	ldrh	r3, [r7, #8]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bf8:	e015      	b.n	8002c26 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bfa:	893b      	ldrh	r3, [r7, #8]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	69b9      	ldr	r1, [r7, #24]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f89c 	bl	8002d4a <I2C_WaitOnTXISFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e012      	b.n	8002c42 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c1c:	893b      	ldrh	r3, [r7, #8]
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2140      	movs	r1, #64	@ 0x40
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f831 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	80002000 	.word	0x80002000

08002c50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d103      	bne.n	8002c6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d007      	beq.n	8002c8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	619a      	str	r2, [r3, #24]
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca8:	e03b      	b.n	8002d22 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	6839      	ldr	r1, [r7, #0]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f8d6 	bl	8002e60 <I2C_IsErrorOccurred>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e041      	b.n	8002d42 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d02d      	beq.n	8002d22 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc6:	f7ff facd 	bl	8002264 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d302      	bcc.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0x44>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d122      	bne.n	8002d22 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d113      	bne.n	8002d22 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfe:	f043 0220 	orr.w	r2, r3, #32
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00f      	b.n	8002d42 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699a      	ldr	r2, [r3, #24]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	bf0c      	ite	eq
 8002d32:	2301      	moveq	r3, #1
 8002d34:	2300      	movne	r3, #0
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d0b4      	beq.n	8002caa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d56:	e033      	b.n	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f87f 	bl	8002e60 <I2C_IsErrorOccurred>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e031      	b.n	8002dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d72:	d025      	beq.n	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d74:	f7ff fa76 	bl	8002264 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d302      	bcc.n	8002d8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d11a      	bne.n	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d013      	beq.n	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9c:	f043 0220 	orr.w	r2, r3, #32
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e007      	b.n	8002dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d1c4      	bne.n	8002d58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002de4:	e02f      	b.n	8002e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f838 	bl	8002e60 <I2C_IsErrorOccurred>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e02d      	b.n	8002e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfa:	f7ff fa33 	bl	8002264 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d11a      	bne.n	8002e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f003 0320 	and.w	r3, r3, #32
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	d013      	beq.n	8002e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e22:	f043 0220 	orr.w	r2, r3, #32
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e007      	b.n	8002e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d1c8      	bne.n	8002de6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	@ 0x28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d068      	beq.n	8002f5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2210      	movs	r2, #16
 8002e92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e94:	e049      	b.n	8002f2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d045      	beq.n	8002f2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e9e:	f7ff f9e1 	bl	8002264 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d302      	bcc.n	8002eb4 <I2C_IsErrorOccurred+0x54>
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d13a      	bne.n	8002f2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ebe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ec6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ed2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ed6:	d121      	bne.n	8002f1c <I2C_IsErrorOccurred+0xbc>
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ede:	d01d      	beq.n	8002f1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d01a      	beq.n	8002f1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ef4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ef6:	f7ff f9b5 	bl	8002264 <HAL_GetTick>
 8002efa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002efc:	e00e      	b.n	8002f1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002efe:	f7ff f9b1 	bl	8002264 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b19      	cmp	r3, #25
 8002f0a:	d907      	bls.n	8002f1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	f043 0320 	orr.w	r3, r3, #32
 8002f12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002f1a:	e006      	b.n	8002f2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	d1e9      	bne.n	8002efe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d003      	beq.n	8002f40 <I2C_IsErrorOccurred+0xe0>
 8002f38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0aa      	beq.n	8002e96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d103      	bne.n	8002f50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	f043 0304 	orr.w	r3, r3, #4
 8002f56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	f043 0301 	orr.w	r3, r3, #1
 8002f76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	f043 0308 	orr.w	r3, r3, #8
 8002f98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fa2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00b      	beq.n	8002fcc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	f043 0302 	orr.w	r3, r3, #2
 8002fba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01c      	beq.n	800300e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7ff fe3b 	bl	8002c50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6859      	ldr	r1, [r3, #4]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800301c <I2C_IsErrorOccurred+0x1bc>)
 8002fe6:	400b      	ands	r3, r1
 8002fe8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800300e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003012:	4618      	mov	r0, r3
 8003014:	3728      	adds	r7, #40	@ 0x28
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	fe00e800 	.word	0xfe00e800

08003020 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	460b      	mov	r3, r1
 800302c:	817b      	strh	r3, [r7, #10]
 800302e:	4613      	mov	r3, r2
 8003030:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003032:	897b      	ldrh	r3, [r7, #10]
 8003034:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003038:	7a7b      	ldrb	r3, [r7, #9]
 800303a:	041b      	lsls	r3, r3, #16
 800303c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003040:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	4313      	orrs	r3, r2
 800304a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800304e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	0d5b      	lsrs	r3, r3, #21
 800305a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800305e:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <I2C_TransferConfig+0x60>)
 8003060:	430b      	orrs	r3, r1
 8003062:	43db      	mvns	r3, r3
 8003064:	ea02 0103 	and.w	r1, r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003072:	bf00      	nop
 8003074:	371c      	adds	r7, #28
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	03ff63ff 	.word	0x03ff63ff

08003084 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b20      	cmp	r3, #32
 8003098:	d138      	bne.n	800310c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e032      	b.n	800310e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2224      	movs	r2, #36	@ 0x24
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6819      	ldr	r1, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	e000      	b.n	800310e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800310c:	2302      	movs	r3, #2
  }
}
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b20      	cmp	r3, #32
 800312e:	d139      	bne.n	80031a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800313a:	2302      	movs	r3, #2
 800313c:	e033      	b.n	80031a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2224      	movs	r2, #36	@ 0x24
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800316c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e000      	b.n	80031a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
  }
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f001 b823 	b.w	8004220 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 817d 	beq.w	80034ea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031f0:	4bbc      	ldr	r3, [pc, #752]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d00c      	beq.n	8003216 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031fc:	4bb9      	ldr	r3, [pc, #740]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 030c 	and.w	r3, r3, #12
 8003204:	2b08      	cmp	r3, #8
 8003206:	d15c      	bne.n	80032c2 <HAL_RCC_OscConfig+0x10e>
 8003208:	4bb6      	ldr	r3, [pc, #728]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003214:	d155      	bne.n	80032c2 <HAL_RCC_OscConfig+0x10e>
 8003216:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800321a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800322a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d102      	bne.n	8003248 <HAL_RCC_OscConfig+0x94>
 8003242:	4ba8      	ldr	r3, [pc, #672]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	e015      	b.n	8003274 <HAL_RCC_OscConfig+0xc0>
 8003248:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800324c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003254:	fa93 f3a3 	rbit	r3, r3
 8003258:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800325c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003260:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003264:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003270:	4b9c      	ldr	r3, [pc, #624]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003278:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800327c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003280:	fa92 f2a2 	rbit	r2, r2
 8003284:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003288:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800328c:	fab2 f282 	clz	r2, r2
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	f042 0220 	orr.w	r2, r2, #32
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	f002 021f 	and.w	r2, r2, #31
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f202 	lsl.w	r2, r1, r2
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 811f 	beq.w	80034e8 <HAL_RCC_OscConfig+0x334>
 80032aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f040 8116 	bne.w	80034e8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	f000 bfaf 	b.w	8004220 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d2:	d106      	bne.n	80032e2 <HAL_RCC_OscConfig+0x12e>
 80032d4:	4b83      	ldr	r3, [pc, #524]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a82      	ldr	r2, [pc, #520]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 80032da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	e036      	b.n	8003350 <HAL_RCC_OscConfig+0x19c>
 80032e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0x158>
 80032f2:	4b7c      	ldr	r3, [pc, #496]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a7b      	ldr	r2, [pc, #492]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 80032f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	4b79      	ldr	r3, [pc, #484]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a78      	ldr	r2, [pc, #480]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 8003304:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e021      	b.n	8003350 <HAL_RCC_OscConfig+0x19c>
 800330c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003310:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x184>
 800331e:	4b71      	ldr	r3, [pc, #452]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a70      	ldr	r2, [pc, #448]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 8003324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b6e      	ldr	r3, [pc, #440]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6d      	ldr	r2, [pc, #436]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e00b      	b.n	8003350 <HAL_RCC_OscConfig+0x19c>
 8003338:	4b6a      	ldr	r3, [pc, #424]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a69      	ldr	r2, [pc, #420]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 800333e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b67      	ldr	r3, [pc, #412]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a66      	ldr	r2, [pc, #408]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 800334a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800334e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003350:	4b64      	ldr	r3, [pc, #400]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 8003352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003354:	f023 020f 	bic.w	r2, r3, #15
 8003358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	495f      	ldr	r1, [pc, #380]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 8003366:	4313      	orrs	r3, r2
 8003368:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800336a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d059      	beq.n	800342e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337a:	f7fe ff73 	bl	8002264 <HAL_GetTick>
 800337e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	e00a      	b.n	800339a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe ff6e 	bl	8002264 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b64      	cmp	r3, #100	@ 0x64
 8003392:	d902      	bls.n	800339a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	f000 bf43 	b.w	8004220 <HAL_RCC_OscConfig+0x106c>
 800339a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800339e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80033ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d102      	bne.n	80033cc <HAL_RCC_OscConfig+0x218>
 80033c6:	4b47      	ldr	r3, [pc, #284]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	e015      	b.n	80033f8 <HAL_RCC_OscConfig+0x244>
 80033cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033d0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80033d8:	fa93 f3a3 	rbit	r3, r3
 80033dc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80033e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033e4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80033e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80033f4:	4b3b      	ldr	r3, [pc, #236]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80033fc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003400:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003404:	fa92 f2a2 	rbit	r2, r2
 8003408:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800340c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003410:	fab2 f282 	clz	r2, r2
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	f042 0220 	orr.w	r2, r2, #32
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	f002 021f 	and.w	r2, r2, #31
 8003420:	2101      	movs	r1, #1
 8003422:	fa01 f202 	lsl.w	r2, r1, r2
 8003426:	4013      	ands	r3, r2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ab      	beq.n	8003384 <HAL_RCC_OscConfig+0x1d0>
 800342c:	e05d      	b.n	80034ea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342e:	f7fe ff19 	bl	8002264 <HAL_GetTick>
 8003432:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	e00a      	b.n	800344e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003438:	f7fe ff14 	bl	8002264 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b64      	cmp	r3, #100	@ 0x64
 8003446:	d902      	bls.n	800344e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	f000 bee9 	b.w	8004220 <HAL_RCC_OscConfig+0x106c>
 800344e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003452:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003462:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d102      	bne.n	8003480 <HAL_RCC_OscConfig+0x2cc>
 800347a:	4b1a      	ldr	r3, [pc, #104]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	e015      	b.n	80034ac <HAL_RCC_OscConfig+0x2f8>
 8003480:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003484:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003488:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003494:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003498:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800349c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80034a8:	4b0e      	ldr	r3, [pc, #56]	@ (80034e4 <HAL_RCC_OscConfig+0x330>)
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034b0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80034b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80034b8:	fa92 f2a2 	rbit	r2, r2
 80034bc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80034c0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80034c4:	fab2 f282 	clz	r2, r2
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	f042 0220 	orr.w	r2, r2, #32
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	f002 021f 	and.w	r2, r2, #31
 80034d4:	2101      	movs	r1, #1
 80034d6:	fa01 f202 	lsl.w	r2, r1, r2
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1ab      	bne.n	8003438 <HAL_RCC_OscConfig+0x284>
 80034e0:	e003      	b.n	80034ea <HAL_RCC_OscConfig+0x336>
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 817d 	beq.w	80037fa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003500:	4ba6      	ldr	r3, [pc, #664]	@ (800379c <HAL_RCC_OscConfig+0x5e8>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 030c 	and.w	r3, r3, #12
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800350c:	4ba3      	ldr	r3, [pc, #652]	@ (800379c <HAL_RCC_OscConfig+0x5e8>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	2b08      	cmp	r3, #8
 8003516:	d172      	bne.n	80035fe <HAL_RCC_OscConfig+0x44a>
 8003518:	4ba0      	ldr	r3, [pc, #640]	@ (800379c <HAL_RCC_OscConfig+0x5e8>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d16c      	bne.n	80035fe <HAL_RCC_OscConfig+0x44a>
 8003524:	2302      	movs	r3, #2
 8003526:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003536:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d102      	bne.n	8003554 <HAL_RCC_OscConfig+0x3a0>
 800354e:	4b93      	ldr	r3, [pc, #588]	@ (800379c <HAL_RCC_OscConfig+0x5e8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	e013      	b.n	800357c <HAL_RCC_OscConfig+0x3c8>
 8003554:	2302      	movs	r3, #2
 8003556:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003566:	2302      	movs	r3, #2
 8003568:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800356c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003570:	fa93 f3a3 	rbit	r3, r3
 8003574:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003578:	4b88      	ldr	r3, [pc, #544]	@ (800379c <HAL_RCC_OscConfig+0x5e8>)
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	2202      	movs	r2, #2
 800357e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003582:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003586:	fa92 f2a2 	rbit	r2, r2
 800358a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800358e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003592:	fab2 f282 	clz	r2, r2
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	f042 0220 	orr.w	r2, r2, #32
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	f002 021f 	and.w	r2, r2, #31
 80035a2:	2101      	movs	r1, #1
 80035a4:	fa01 f202 	lsl.w	r2, r1, r2
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCC_OscConfig+0x410>
 80035ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d002      	beq.n	80035c4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f000 be2e 	b.w	8004220 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c4:	4b75      	ldr	r3, [pc, #468]	@ (800379c <HAL_RCC_OscConfig+0x5e8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	21f8      	movs	r1, #248	@ 0xf8
 80035da:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80035e2:	fa91 f1a1 	rbit	r1, r1
 80035e6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80035ea:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80035ee:	fab1 f181 	clz	r1, r1
 80035f2:	b2c9      	uxtb	r1, r1
 80035f4:	408b      	lsls	r3, r1
 80035f6:	4969      	ldr	r1, [pc, #420]	@ (800379c <HAL_RCC_OscConfig+0x5e8>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fc:	e0fd      	b.n	80037fa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003602:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8088 	beq.w	8003720 <HAL_RCC_OscConfig+0x56c>
 8003610:	2301      	movs	r3, #1
 8003612:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800361a:	fa93 f3a3 	rbit	r3, r3
 800361e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003622:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003630:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	461a      	mov	r2, r3
 8003638:	2301      	movs	r3, #1
 800363a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fe fe12 	bl	8002264 <HAL_GetTick>
 8003640:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003646:	f7fe fe0d 	bl	8002264 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d902      	bls.n	800365c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	f000 bde2 	b.w	8004220 <HAL_RCC_OscConfig+0x106c>
 800365c:	2302      	movs	r3, #2
 800365e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800366e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b01      	cmp	r3, #1
 8003684:	d102      	bne.n	800368c <HAL_RCC_OscConfig+0x4d8>
 8003686:	4b45      	ldr	r3, [pc, #276]	@ (800379c <HAL_RCC_OscConfig+0x5e8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	e013      	b.n	80036b4 <HAL_RCC_OscConfig+0x500>
 800368c:	2302      	movs	r3, #2
 800368e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003696:	fa93 f3a3 	rbit	r3, r3
 800369a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800369e:	2302      	movs	r3, #2
 80036a0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80036a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80036b0:	4b3a      	ldr	r3, [pc, #232]	@ (800379c <HAL_RCC_OscConfig+0x5e8>)
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	2202      	movs	r2, #2
 80036b6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80036ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80036be:	fa92 f2a2 	rbit	r2, r2
 80036c2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80036c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80036ca:	fab2 f282 	clz	r2, r2
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	f042 0220 	orr.w	r2, r2, #32
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	f002 021f 	and.w	r2, r2, #31
 80036da:	2101      	movs	r1, #1
 80036dc:	fa01 f202 	lsl.w	r2, r1, r2
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0af      	beq.n	8003646 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e6:	4b2d      	ldr	r3, [pc, #180]	@ (800379c <HAL_RCC_OscConfig+0x5e8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	21f8      	movs	r1, #248	@ 0xf8
 80036fc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003704:	fa91 f1a1 	rbit	r1, r1
 8003708:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800370c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003710:	fab1 f181 	clz	r1, r1
 8003714:	b2c9      	uxtb	r1, r1
 8003716:	408b      	lsls	r3, r1
 8003718:	4920      	ldr	r1, [pc, #128]	@ (800379c <HAL_RCC_OscConfig+0x5e8>)
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]
 800371e:	e06c      	b.n	80037fa <HAL_RCC_OscConfig+0x646>
 8003720:	2301      	movs	r3, #1
 8003722:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003732:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003740:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	461a      	mov	r2, r3
 8003748:	2300      	movs	r3, #0
 800374a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7fe fd8a 	bl	8002264 <HAL_GetTick>
 8003750:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003754:	e00a      	b.n	800376c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003756:	f7fe fd85 	bl	8002264 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d902      	bls.n	800376c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	f000 bd5a 	b.w	8004220 <HAL_RCC_OscConfig+0x106c>
 800376c:	2302      	movs	r3, #2
 800376e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800377e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b01      	cmp	r3, #1
 8003794:	d104      	bne.n	80037a0 <HAL_RCC_OscConfig+0x5ec>
 8003796:	4b01      	ldr	r3, [pc, #4]	@ (800379c <HAL_RCC_OscConfig+0x5e8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	e015      	b.n	80037c8 <HAL_RCC_OscConfig+0x614>
 800379c:	40021000 	.word	0x40021000
 80037a0:	2302      	movs	r3, #2
 80037a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80037b2:	2302      	movs	r3, #2
 80037b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80037b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80037bc:	fa93 f3a3 	rbit	r3, r3
 80037c0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80037c4:	4bc8      	ldr	r3, [pc, #800]	@ (8003ae8 <HAL_RCC_OscConfig+0x934>)
 80037c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c8:	2202      	movs	r2, #2
 80037ca:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80037ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80037d2:	fa92 f2a2 	rbit	r2, r2
 80037d6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80037da:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80037de:	fab2 f282 	clz	r2, r2
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	f042 0220 	orr.w	r2, r2, #32
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	f002 021f 	and.w	r2, r2, #31
 80037ee:	2101      	movs	r1, #1
 80037f0:	fa01 f202 	lsl.w	r2, r1, r2
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1ad      	bne.n	8003756 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 8110 	beq.w	8003a30 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003814:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d079      	beq.n	8003914 <HAL_RCC_OscConfig+0x760>
 8003820:	2301      	movs	r3, #1
 8003822:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003826:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	461a      	mov	r2, r3
 800383e:	4bab      	ldr	r3, [pc, #684]	@ (8003aec <HAL_RCC_OscConfig+0x938>)
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	461a      	mov	r2, r3
 8003846:	2301      	movs	r3, #1
 8003848:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384a:	f7fe fd0b 	bl	8002264 <HAL_GetTick>
 800384e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003852:	e00a      	b.n	800386a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003854:	f7fe fd06 	bl	8002264 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d902      	bls.n	800386a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	f000 bcdb 	b.w	8004220 <HAL_RCC_OscConfig+0x106c>
 800386a:	2302      	movs	r3, #2
 800386c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003870:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003874:	fa93 f3a3 	rbit	r3, r3
 8003878:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800387c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003880:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003884:	2202      	movs	r2, #2
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	fa93 f2a3 	rbit	r2, r3
 8003896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800389a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038a8:	2202      	movs	r2, #2
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	fa93 f2a3 	rbit	r2, r3
 80038ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80038c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c4:	4b88      	ldr	r3, [pc, #544]	@ (8003ae8 <HAL_RCC_OscConfig+0x934>)
 80038c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80038d0:	2102      	movs	r1, #2
 80038d2:	6019      	str	r1, [r3, #0]
 80038d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	fa93 f1a3 	rbit	r1, r3
 80038e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80038ea:	6019      	str	r1, [r3, #0]
  return result;
 80038ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	2101      	movs	r1, #1
 8003908:	fa01 f303 	lsl.w	r3, r1, r3
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0a0      	beq.n	8003854 <HAL_RCC_OscConfig+0x6a0>
 8003912:	e08d      	b.n	8003a30 <HAL_RCC_OscConfig+0x87c>
 8003914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003918:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003924:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	fa93 f2a3 	rbit	r2, r3
 800392e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003932:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003936:	601a      	str	r2, [r3, #0]
  return result;
 8003938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003940:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	4b68      	ldr	r3, [pc, #416]	@ (8003aec <HAL_RCC_OscConfig+0x938>)
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	461a      	mov	r2, r3
 8003952:	2300      	movs	r3, #0
 8003954:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003956:	f7fe fc85 	bl	8002264 <HAL_GetTick>
 800395a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800395e:	e00a      	b.n	8003976 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003960:	f7fe fc80 	bl	8002264 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d902      	bls.n	8003976 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	f000 bc55 	b.w	8004220 <HAL_RCC_OscConfig+0x106c>
 8003976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800397e:	2202      	movs	r2, #2
 8003980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003986:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	fa93 f2a3 	rbit	r2, r3
 8003990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003994:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800399e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80039a2:	2202      	movs	r2, #2
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	fa93 f2a3 	rbit	r2, r3
 80039b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80039c6:	2202      	movs	r2, #2
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	fa93 f2a3 	rbit	r2, r3
 80039d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80039e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e2:	4b41      	ldr	r3, [pc, #260]	@ (8003ae8 <HAL_RCC_OscConfig+0x934>)
 80039e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80039ee:	2102      	movs	r1, #2
 80039f0:	6019      	str	r1, [r3, #0]
 80039f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	fa93 f1a3 	rbit	r1, r3
 8003a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a04:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003a08:	6019      	str	r1, [r3, #0]
  return result;
 8003a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a0e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	fab3 f383 	clz	r3, r3
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	2101      	movs	r1, #1
 8003a26:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d197      	bne.n	8003960 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 81a1 	beq.w	8003d88 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a4c:	4b26      	ldr	r3, [pc, #152]	@ (8003ae8 <HAL_RCC_OscConfig+0x934>)
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d116      	bne.n	8003a86 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a58:	4b23      	ldr	r3, [pc, #140]	@ (8003ae8 <HAL_RCC_OscConfig+0x934>)
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	4a22      	ldr	r2, [pc, #136]	@ (8003ae8 <HAL_RCC_OscConfig+0x934>)
 8003a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a62:	61d3      	str	r3, [r2, #28]
 8003a64:	4b20      	ldr	r3, [pc, #128]	@ (8003ae8 <HAL_RCC_OscConfig+0x934>)
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a70:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003a7e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a80:	2301      	movs	r3, #1
 8003a82:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a86:	4b1a      	ldr	r3, [pc, #104]	@ (8003af0 <HAL_RCC_OscConfig+0x93c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d11a      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a92:	4b17      	ldr	r3, [pc, #92]	@ (8003af0 <HAL_RCC_OscConfig+0x93c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a16      	ldr	r2, [pc, #88]	@ (8003af0 <HAL_RCC_OscConfig+0x93c>)
 8003a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a9e:	f7fe fbe1 	bl	8002264 <HAL_GetTick>
 8003aa2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa6:	e009      	b.n	8003abc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa8:	f7fe fbdc 	bl	8002264 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b64      	cmp	r3, #100	@ 0x64
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e3b1      	b.n	8004220 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	4b0c      	ldr	r3, [pc, #48]	@ (8003af0 <HAL_RCC_OscConfig+0x93c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ef      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003acc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d10d      	bne.n	8003af4 <HAL_RCC_OscConfig+0x940>
 8003ad8:	4b03      	ldr	r3, [pc, #12]	@ (8003ae8 <HAL_RCC_OscConfig+0x934>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	4a02      	ldr	r2, [pc, #8]	@ (8003ae8 <HAL_RCC_OscConfig+0x934>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6213      	str	r3, [r2, #32]
 8003ae4:	e03c      	b.n	8003b60 <HAL_RCC_OscConfig+0x9ac>
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	10908120 	.word	0x10908120
 8003af0:	40007000 	.word	0x40007000
 8003af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10c      	bne.n	8003b1e <HAL_RCC_OscConfig+0x96a>
 8003b04:	4bc1      	ldr	r3, [pc, #772]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	4ac0      	ldr	r2, [pc, #768]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	6213      	str	r3, [r2, #32]
 8003b10:	4bbe      	ldr	r3, [pc, #760]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	4abd      	ldr	r2, [pc, #756]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003b16:	f023 0304 	bic.w	r3, r3, #4
 8003b1a:	6213      	str	r3, [r2, #32]
 8003b1c:	e020      	b.n	8003b60 <HAL_RCC_OscConfig+0x9ac>
 8003b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b05      	cmp	r3, #5
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCC_OscConfig+0x994>
 8003b2e:	4bb7      	ldr	r3, [pc, #732]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	4ab6      	ldr	r2, [pc, #728]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003b34:	f043 0304 	orr.w	r3, r3, #4
 8003b38:	6213      	str	r3, [r2, #32]
 8003b3a:	4bb4      	ldr	r3, [pc, #720]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4ab3      	ldr	r2, [pc, #716]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	6213      	str	r3, [r2, #32]
 8003b46:	e00b      	b.n	8003b60 <HAL_RCC_OscConfig+0x9ac>
 8003b48:	4bb0      	ldr	r3, [pc, #704]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	4aaf      	ldr	r2, [pc, #700]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	6213      	str	r3, [r2, #32]
 8003b54:	4bad      	ldr	r3, [pc, #692]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	4aac      	ldr	r2, [pc, #688]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003b5a:	f023 0304 	bic.w	r3, r3, #4
 8003b5e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8081 	beq.w	8003c74 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b72:	f7fe fb77 	bl	8002264 <HAL_GetTick>
 8003b76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	e00b      	b.n	8003b94 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fe fb72 	bl	8002264 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e345      	b.n	8004220 <HAL_RCC_OscConfig+0x106c>
 8003b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b98:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	fa93 f2a3 	rbit	r2, r3
 8003bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bbc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bc8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	fa93 f2a3 	rbit	r2, r3
 8003bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003bda:	601a      	str	r2, [r3, #0]
  return result;
 8003bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003be4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be6:	fab3 f383 	clz	r3, r3
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f043 0302 	orr.w	r3, r3, #2
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d102      	bne.n	8003c00 <HAL_RCC_OscConfig+0xa4c>
 8003bfa:	4b84      	ldr	r3, [pc, #528]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	e013      	b.n	8003c28 <HAL_RCC_OscConfig+0xa74>
 8003c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c04:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003c08:	2202      	movs	r2, #2
 8003c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c10:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	fa93 f2a3 	rbit	r2, r3
 8003c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	4b79      	ldr	r3, [pc, #484]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c2c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003c30:	2102      	movs	r1, #2
 8003c32:	6011      	str	r1, [r2, #0]
 8003c34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c38:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	fa92 f1a2 	rbit	r1, r2
 8003c42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c46:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003c4a:	6011      	str	r1, [r2, #0]
  return result;
 8003c4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c50:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	fab2 f282 	clz	r2, r2
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	f002 021f 	and.w	r2, r2, #31
 8003c66:	2101      	movs	r1, #1
 8003c68:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d084      	beq.n	8003b7c <HAL_RCC_OscConfig+0x9c8>
 8003c72:	e07f      	b.n	8003d74 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c74:	f7fe faf6 	bl	8002264 <HAL_GetTick>
 8003c78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7c:	e00b      	b.n	8003c96 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fe faf1 	bl	8002264 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e2c4      	b.n	8004220 <HAL_RCC_OscConfig+0x106c>
 8003c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c9a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	fa93 f2a3 	rbit	r2, r3
 8003cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cbe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	fa93 f2a3 	rbit	r2, r3
 8003cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003cdc:	601a      	str	r2, [r3, #0]
  return result;
 8003cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003ce6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	f043 0302 	orr.w	r3, r3, #2
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d102      	bne.n	8003d02 <HAL_RCC_OscConfig+0xb4e>
 8003cfc:	4b43      	ldr	r3, [pc, #268]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	e013      	b.n	8003d2a <HAL_RCC_OscConfig+0xb76>
 8003d02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d06:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d12:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	fa93 f2a3 	rbit	r2, r3
 8003d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d20:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	4b39      	ldr	r3, [pc, #228]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d2e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003d32:	2102      	movs	r1, #2
 8003d34:	6011      	str	r1, [r2, #0]
 8003d36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d3a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	fa92 f1a2 	rbit	r1, r2
 8003d44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d48:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003d4c:	6011      	str	r1, [r2, #0]
  return result;
 8003d4e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d52:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	fab2 f282 	clz	r2, r2
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	f002 021f 	and.w	r2, r2, #31
 8003d68:	2101      	movs	r1, #1
 8003d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d184      	bne.n	8003c7e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d74:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7c:	4b23      	ldr	r3, [pc, #140]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	4a22      	ldr	r2, [pc, #136]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d86:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8242 	beq.w	800421e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003e0c <HAL_RCC_OscConfig+0xc58>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	f000 8213 	beq.w	80041ce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	f040 8162 	bne.w	800407e <HAL_RCC_OscConfig+0xeca>
 8003dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dbe:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003dc2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dcc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	fa93 f2a3 	rbit	r2, r3
 8003dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dda:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003dde:	601a      	str	r2, [r3, #0]
  return result;
 8003de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003de8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dea:	fab3 f383 	clz	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003df4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fe fa30 	bl	8002264 <HAL_GetTick>
 8003e04:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e08:	e00c      	b.n	8003e24 <HAL_RCC_OscConfig+0xc70>
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e10:	f7fe fa28 	bl	8002264 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e1fd      	b.n	8004220 <HAL_RCC_OscConfig+0x106c>
 8003e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e28:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003e2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e36:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	fa93 f2a3 	rbit	r2, r3
 8003e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e44:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003e48:	601a      	str	r2, [r3, #0]
  return result;
 8003e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e4e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003e52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e54:	fab3 f383 	clz	r3, r3
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d102      	bne.n	8003e6e <HAL_RCC_OscConfig+0xcba>
 8003e68:	4bb0      	ldr	r3, [pc, #704]	@ (800412c <HAL_RCC_OscConfig+0xf78>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	e027      	b.n	8003ebe <HAL_RCC_OscConfig+0xd0a>
 8003e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e72:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003e76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e80:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	fa93 f2a3 	rbit	r2, r3
 8003e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e8e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e98:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003e9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	fa93 f2a3 	rbit	r2, r3
 8003eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	4b9c      	ldr	r3, [pc, #624]	@ (800412c <HAL_RCC_OscConfig+0xf78>)
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ec2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003ec6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003eca:	6011      	str	r1, [r2, #0]
 8003ecc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ed0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	fa92 f1a2 	rbit	r1, r2
 8003eda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ede:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003ee2:	6011      	str	r1, [r2, #0]
  return result;
 8003ee4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ee8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	fab2 f282 	clz	r2, r2
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	f042 0220 	orr.w	r2, r2, #32
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	f002 021f 	and.w	r2, r2, #31
 8003efe:	2101      	movs	r1, #1
 8003f00:	fa01 f202 	lsl.w	r2, r1, r2
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d182      	bne.n	8003e10 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f0a:	4b88      	ldr	r3, [pc, #544]	@ (800412c <HAL_RCC_OscConfig+0xf78>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	497f      	ldr	r1, [pc, #508]	@ (800412c <HAL_RCC_OscConfig+0xf78>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	604b      	str	r3, [r1, #4]
 8003f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f36:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003f3a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f44:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	fa93 f2a3 	rbit	r2, r3
 8003f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f52:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003f56:	601a      	str	r2, [r3, #0]
  return result;
 8003f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003f60:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f62:	fab3 f383 	clz	r3, r3
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003f6c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	461a      	mov	r2, r3
 8003f74:	2301      	movs	r3, #1
 8003f76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7fe f974 	bl	8002264 <HAL_GetTick>
 8003f7c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f80:	e009      	b.n	8003f96 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f82:	f7fe f96f 	bl	8002264 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e144      	b.n	8004220 <HAL_RCC_OscConfig+0x106c>
 8003f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f9a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003f9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	fa93 f2a3 	rbit	r2, r3
 8003fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003fba:	601a      	str	r2, [r3, #0]
  return result;
 8003fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003fc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fc6:	fab3 f383 	clz	r3, r3
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d102      	bne.n	8003fe0 <HAL_RCC_OscConfig+0xe2c>
 8003fda:	4b54      	ldr	r3, [pc, #336]	@ (800412c <HAL_RCC_OscConfig+0xf78>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	e027      	b.n	8004030 <HAL_RCC_OscConfig+0xe7c>
 8003fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003fe8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	fa93 f2a3 	rbit	r2, r3
 8003ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004000:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800400a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800400e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004018:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	fa93 f2a3 	rbit	r2, r3
 8004022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004026:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	4b3f      	ldr	r3, [pc, #252]	@ (800412c <HAL_RCC_OscConfig+0xf78>)
 800402e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004030:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004034:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004038:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800403c:	6011      	str	r1, [r2, #0]
 800403e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004042:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	fa92 f1a2 	rbit	r1, r2
 800404c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004050:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004054:	6011      	str	r1, [r2, #0]
  return result;
 8004056:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800405a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	fab2 f282 	clz	r2, r2
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	f042 0220 	orr.w	r2, r2, #32
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	f002 021f 	and.w	r2, r2, #31
 8004070:	2101      	movs	r1, #1
 8004072:	fa01 f202 	lsl.w	r2, r1, r2
 8004076:	4013      	ands	r3, r2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d082      	beq.n	8003f82 <HAL_RCC_OscConfig+0xdce>
 800407c:	e0cf      	b.n	800421e <HAL_RCC_OscConfig+0x106a>
 800407e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004082:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004086:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800408a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004090:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	fa93 f2a3 	rbit	r2, r3
 800409a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800409e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80040a2:	601a      	str	r2, [r3, #0]
  return result;
 80040a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80040ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040b8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	461a      	mov	r2, r3
 80040c0:	2300      	movs	r3, #0
 80040c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7fe f8ce 	bl	8002264 <HAL_GetTick>
 80040c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040cc:	e009      	b.n	80040e2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ce:	f7fe f8c9 	bl	8002264 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e09e      	b.n	8004220 <HAL_RCC_OscConfig+0x106c>
 80040e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040e6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80040ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	fa93 f2a3 	rbit	r2, r3
 80040fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004102:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004106:	601a      	str	r2, [r3, #0]
  return result;
 8004108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800410c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004110:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b01      	cmp	r3, #1
 8004124:	d104      	bne.n	8004130 <HAL_RCC_OscConfig+0xf7c>
 8004126:	4b01      	ldr	r3, [pc, #4]	@ (800412c <HAL_RCC_OscConfig+0xf78>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	e029      	b.n	8004180 <HAL_RCC_OscConfig+0xfcc>
 800412c:	40021000 	.word	0x40021000
 8004130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004134:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004138:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800413c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004142:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	fa93 f2a3 	rbit	r2, r3
 800414c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004150:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800415a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800415e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004168:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	fa93 f2a3 	rbit	r2, r3
 8004172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004176:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	4b2b      	ldr	r3, [pc, #172]	@ (800422c <HAL_RCC_OscConfig+0x1078>)
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004184:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004188:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800418c:	6011      	str	r1, [r2, #0]
 800418e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004192:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	fa92 f1a2 	rbit	r1, r2
 800419c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041a0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80041a4:	6011      	str	r1, [r2, #0]
  return result;
 80041a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041aa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	fab2 f282 	clz	r2, r2
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	f042 0220 	orr.w	r2, r2, #32
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	f002 021f 	and.w	r2, r2, #31
 80041c0:	2101      	movs	r1, #1
 80041c2:	fa01 f202 	lsl.w	r2, r1, r2
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d180      	bne.n	80040ce <HAL_RCC_OscConfig+0xf1a>
 80041cc:	e027      	b.n	800421e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e01e      	b.n	8004220 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041e2:	4b12      	ldr	r3, [pc, #72]	@ (800422c <HAL_RCC_OscConfig+0x1078>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80041ee:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d10b      	bne.n	800421a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004202:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004206:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800420a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800420e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004216:	429a      	cmp	r2, r3
 8004218:	d001      	beq.n	800421e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000

08004230 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b09e      	sub	sp, #120	@ 0x78
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e162      	b.n	800450e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004248:	4b90      	ldr	r3, [pc, #576]	@ (800448c <HAL_RCC_ClockConfig+0x25c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d910      	bls.n	8004278 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004256:	4b8d      	ldr	r3, [pc, #564]	@ (800448c <HAL_RCC_ClockConfig+0x25c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 0207 	bic.w	r2, r3, #7
 800425e:	498b      	ldr	r1, [pc, #556]	@ (800448c <HAL_RCC_ClockConfig+0x25c>)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	4313      	orrs	r3, r2
 8004264:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004266:	4b89      	ldr	r3, [pc, #548]	@ (800448c <HAL_RCC_ClockConfig+0x25c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e14a      	b.n	800450e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d008      	beq.n	8004296 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004284:	4b82      	ldr	r3, [pc, #520]	@ (8004490 <HAL_RCC_ClockConfig+0x260>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	497f      	ldr	r1, [pc, #508]	@ (8004490 <HAL_RCC_ClockConfig+0x260>)
 8004292:	4313      	orrs	r3, r2
 8004294:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 80dc 	beq.w	800445c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d13c      	bne.n	8004326 <HAL_RCC_ClockConfig+0xf6>
 80042ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042b0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042b4:	fa93 f3a3 	rbit	r3, r3
 80042b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80042ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042bc:	fab3 f383 	clz	r3, r3
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d102      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xa6>
 80042d0:	4b6f      	ldr	r3, [pc, #444]	@ (8004490 <HAL_RCC_ClockConfig+0x260>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	e00f      	b.n	80042f6 <HAL_RCC_ClockConfig+0xc6>
 80042d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042de:	fa93 f3a3 	rbit	r3, r3
 80042e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80042e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80042ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042ec:	fa93 f3a3 	rbit	r3, r3
 80042f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042f2:	4b67      	ldr	r3, [pc, #412]	@ (8004490 <HAL_RCC_ClockConfig+0x260>)
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80042fa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80042fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042fe:	fa92 f2a2 	rbit	r2, r2
 8004302:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004304:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004306:	fab2 f282 	clz	r2, r2
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	f042 0220 	orr.w	r2, r2, #32
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	f002 021f 	and.w	r2, r2, #31
 8004316:	2101      	movs	r1, #1
 8004318:	fa01 f202 	lsl.w	r2, r1, r2
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d17b      	bne.n	800441a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e0f3      	b.n	800450e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d13c      	bne.n	80043a8 <HAL_RCC_ClockConfig+0x178>
 800432e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004332:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004336:	fa93 f3a3 	rbit	r3, r3
 800433a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800433c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433e:	fab3 f383 	clz	r3, r3
 8004342:	b2db      	uxtb	r3, r3
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b01      	cmp	r3, #1
 8004350:	d102      	bne.n	8004358 <HAL_RCC_ClockConfig+0x128>
 8004352:	4b4f      	ldr	r3, [pc, #316]	@ (8004490 <HAL_RCC_ClockConfig+0x260>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	e00f      	b.n	8004378 <HAL_RCC_ClockConfig+0x148>
 8004358:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800435c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004360:	fa93 f3a3 	rbit	r3, r3
 8004364:	647b      	str	r3, [r7, #68]	@ 0x44
 8004366:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800436a:	643b      	str	r3, [r7, #64]	@ 0x40
 800436c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800436e:	fa93 f3a3 	rbit	r3, r3
 8004372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004374:	4b46      	ldr	r3, [pc, #280]	@ (8004490 <HAL_RCC_ClockConfig+0x260>)
 8004376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004378:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800437c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800437e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004380:	fa92 f2a2 	rbit	r2, r2
 8004384:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004386:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004388:	fab2 f282 	clz	r2, r2
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	f042 0220 	orr.w	r2, r2, #32
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	f002 021f 	and.w	r2, r2, #31
 8004398:	2101      	movs	r1, #1
 800439a:	fa01 f202 	lsl.w	r2, r1, r2
 800439e:	4013      	ands	r3, r2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d13a      	bne.n	800441a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0b2      	b.n	800450e <HAL_RCC_ClockConfig+0x2de>
 80043a8:	2302      	movs	r3, #2
 80043aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ae:	fa93 f3a3 	rbit	r3, r3
 80043b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80043b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b6:	fab3 f383 	clz	r3, r3
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d102      	bne.n	80043d0 <HAL_RCC_ClockConfig+0x1a0>
 80043ca:	4b31      	ldr	r3, [pc, #196]	@ (8004490 <HAL_RCC_ClockConfig+0x260>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	e00d      	b.n	80043ec <HAL_RCC_ClockConfig+0x1bc>
 80043d0:	2302      	movs	r3, #2
 80043d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d6:	fa93 f3a3 	rbit	r3, r3
 80043da:	627b      	str	r3, [r7, #36]	@ 0x24
 80043dc:	2302      	movs	r3, #2
 80043de:	623b      	str	r3, [r7, #32]
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	61fb      	str	r3, [r7, #28]
 80043e8:	4b29      	ldr	r3, [pc, #164]	@ (8004490 <HAL_RCC_ClockConfig+0x260>)
 80043ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ec:	2202      	movs	r2, #2
 80043ee:	61ba      	str	r2, [r7, #24]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	fa92 f2a2 	rbit	r2, r2
 80043f6:	617a      	str	r2, [r7, #20]
  return result;
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	fab2 f282 	clz	r2, r2
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	f042 0220 	orr.w	r2, r2, #32
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	f002 021f 	and.w	r2, r2, #31
 800440a:	2101      	movs	r1, #1
 800440c:	fa01 f202 	lsl.w	r2, r1, r2
 8004410:	4013      	ands	r3, r2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e079      	b.n	800450e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441a:	4b1d      	ldr	r3, [pc, #116]	@ (8004490 <HAL_RCC_ClockConfig+0x260>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f023 0203 	bic.w	r2, r3, #3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	491a      	ldr	r1, [pc, #104]	@ (8004490 <HAL_RCC_ClockConfig+0x260>)
 8004428:	4313      	orrs	r3, r2
 800442a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800442c:	f7fd ff1a 	bl	8002264 <HAL_GetTick>
 8004430:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004432:	e00a      	b.n	800444a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004434:	f7fd ff16 	bl	8002264 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e061      	b.n	800450e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444a:	4b11      	ldr	r3, [pc, #68]	@ (8004490 <HAL_RCC_ClockConfig+0x260>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 020c 	and.w	r2, r3, #12
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	429a      	cmp	r2, r3
 800445a:	d1eb      	bne.n	8004434 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800445c:	4b0b      	ldr	r3, [pc, #44]	@ (800448c <HAL_RCC_ClockConfig+0x25c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d214      	bcs.n	8004494 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446a:	4b08      	ldr	r3, [pc, #32]	@ (800448c <HAL_RCC_ClockConfig+0x25c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 0207 	bic.w	r2, r3, #7
 8004472:	4906      	ldr	r1, [pc, #24]	@ (800448c <HAL_RCC_ClockConfig+0x25c>)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447a:	4b04      	ldr	r3, [pc, #16]	@ (800448c <HAL_RCC_ClockConfig+0x25c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d005      	beq.n	8004494 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e040      	b.n	800450e <HAL_RCC_ClockConfig+0x2de>
 800448c:	40022000 	.word	0x40022000
 8004490:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004518 <HAL_RCC_ClockConfig+0x2e8>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	491a      	ldr	r1, [pc, #104]	@ (8004518 <HAL_RCC_ClockConfig+0x2e8>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d009      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044be:	4b16      	ldr	r3, [pc, #88]	@ (8004518 <HAL_RCC_ClockConfig+0x2e8>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4912      	ldr	r1, [pc, #72]	@ (8004518 <HAL_RCC_ClockConfig+0x2e8>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044d2:	f000 f829 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 80044d6:	4601      	mov	r1, r0
 80044d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004518 <HAL_RCC_ClockConfig+0x2e8>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044e0:	22f0      	movs	r2, #240	@ 0xf0
 80044e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	fa92 f2a2 	rbit	r2, r2
 80044ea:	60fa      	str	r2, [r7, #12]
  return result;
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	fab2 f282 	clz	r2, r2
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	40d3      	lsrs	r3, r2
 80044f6:	4a09      	ldr	r2, [pc, #36]	@ (800451c <HAL_RCC_ClockConfig+0x2ec>)
 80044f8:	5cd3      	ldrb	r3, [r2, r3]
 80044fa:	fa21 f303 	lsr.w	r3, r1, r3
 80044fe:	4a08      	ldr	r2, [pc, #32]	@ (8004520 <HAL_RCC_ClockConfig+0x2f0>)
 8004500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004502:	4b08      	ldr	r3, [pc, #32]	@ (8004524 <HAL_RCC_ClockConfig+0x2f4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fd fe68 	bl	80021dc <HAL_InitTick>
  
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3778      	adds	r7, #120	@ 0x78
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000
 800451c:	08021a64 	.word	0x08021a64
 8004520:	20000000 	.word	0x20000000
 8004524:	20000004 	.word	0x20000004

08004528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	2300      	movs	r3, #0
 800453c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004542:	4b1e      	ldr	r3, [pc, #120]	@ (80045bc <HAL_RCC_GetSysClockFreq+0x94>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b04      	cmp	r3, #4
 8004550:	d002      	beq.n	8004558 <HAL_RCC_GetSysClockFreq+0x30>
 8004552:	2b08      	cmp	r3, #8
 8004554:	d003      	beq.n	800455e <HAL_RCC_GetSysClockFreq+0x36>
 8004556:	e026      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004558:	4b19      	ldr	r3, [pc, #100]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800455a:	613b      	str	r3, [r7, #16]
      break;
 800455c:	e026      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	0c9b      	lsrs	r3, r3, #18
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	4a17      	ldr	r2, [pc, #92]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004568:	5cd3      	ldrb	r3, [r2, r3]
 800456a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800456c:	4b13      	ldr	r3, [pc, #76]	@ (80045bc <HAL_RCC_GetSysClockFreq+0x94>)
 800456e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	4a14      	ldr	r2, [pc, #80]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004576:	5cd3      	ldrb	r3, [r2, r3]
 8004578:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004584:	4a0e      	ldr	r2, [pc, #56]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	fbb2 f2f3 	udiv	r2, r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	fb02 f303 	mul.w	r3, r2, r3
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	e004      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a0c      	ldr	r2, [pc, #48]	@ (80045cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	613b      	str	r3, [r7, #16]
      break;
 80045a4:	e002      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045a6:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80045a8:	613b      	str	r3, [r7, #16]
      break;
 80045aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ac:	693b      	ldr	r3, [r7, #16]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	371c      	adds	r7, #28
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40021000 	.word	0x40021000
 80045c0:	007a1200 	.word	0x007a1200
 80045c4:	08021a74 	.word	0x08021a74
 80045c8:	08021a84 	.word	0x08021a84
 80045cc:	003d0900 	.word	0x003d0900

080045d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b092      	sub	sp, #72	@ 0x48
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80045e0:	2300      	movs	r3, #0
 80045e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 80d4 	beq.w	800479c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f4:	4b4e      	ldr	r3, [pc, #312]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10e      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004600:	4b4b      	ldr	r3, [pc, #300]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	4a4a      	ldr	r2, [pc, #296]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800460a:	61d3      	str	r3, [r2, #28]
 800460c:	4b48      	ldr	r3, [pc, #288]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004618:	2301      	movs	r3, #1
 800461a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461e:	4b45      	ldr	r3, [pc, #276]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d118      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800462a:	4b42      	ldr	r3, [pc, #264]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a41      	ldr	r2, [pc, #260]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004634:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004636:	f7fd fe15 	bl	8002264 <HAL_GetTick>
 800463a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463c:	e008      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463e:	f7fd fe11 	bl	8002264 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b64      	cmp	r3, #100	@ 0x64
 800464a:	d901      	bls.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e169      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004650:	4b38      	ldr	r3, [pc, #224]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800465c:	4b34      	ldr	r3, [pc, #208]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004664:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 8084 	beq.w	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004676:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004678:	429a      	cmp	r2, r3
 800467a:	d07c      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800467c:	4b2c      	ldr	r3, [pc, #176]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004686:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800468a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468e:	fa93 f3a3 	rbit	r3, r3
 8004692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004696:	fab3 f383 	clz	r3, r3
 800469a:	b2db      	uxtb	r3, r3
 800469c:	461a      	mov	r2, r3
 800469e:	4b26      	ldr	r3, [pc, #152]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	461a      	mov	r2, r3
 80046a6:	2301      	movs	r3, #1
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80046ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b2:	fa93 f3a3 	rbit	r3, r3
 80046b6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80046b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ba:	fab3 f383 	clz	r3, r3
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	461a      	mov	r2, r3
 80046ca:	2300      	movs	r3, #0
 80046cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046ce:	4a18      	ldr	r2, [pc, #96]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d04b      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046de:	f7fd fdc1 	bl	8002264 <HAL_GetTick>
 80046e2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e4:	e00a      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e6:	f7fd fdbd 	bl	8002264 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d901      	bls.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e113      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80046fc:	2302      	movs	r3, #2
 80046fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004702:	fa93 f3a3 	rbit	r3, r3
 8004706:	627b      	str	r3, [r7, #36]	@ 0x24
 8004708:	2302      	movs	r3, #2
 800470a:	623b      	str	r3, [r7, #32]
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	fa93 f3a3 	rbit	r3, r3
 8004712:	61fb      	str	r3, [r7, #28]
  return result;
 8004714:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004716:	fab3 f383 	clz	r3, r3
 800471a:	b2db      	uxtb	r3, r3
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	b2db      	uxtb	r3, r3
 8004720:	f043 0302 	orr.w	r3, r3, #2
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d108      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800472a:	4b01      	ldr	r3, [pc, #4]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	e00d      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004730:	40021000 	.word	0x40021000
 8004734:	40007000 	.word	0x40007000
 8004738:	10908100 	.word	0x10908100
 800473c:	2302      	movs	r3, #2
 800473e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	fa93 f3a3 	rbit	r3, r3
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	4b78      	ldr	r3, [pc, #480]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	2202      	movs	r2, #2
 800474e:	613a      	str	r2, [r7, #16]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	fa92 f2a2 	rbit	r2, r2
 8004756:	60fa      	str	r2, [r7, #12]
  return result;
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	fab2 f282 	clz	r2, r2
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	f002 021f 	and.w	r2, r2, #31
 800476a:	2101      	movs	r1, #1
 800476c:	fa01 f202 	lsl.w	r2, r1, r2
 8004770:	4013      	ands	r3, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0b7      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004776:	4b6d      	ldr	r3, [pc, #436]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	496a      	ldr	r1, [pc, #424]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004784:	4313      	orrs	r3, r2
 8004786:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004788:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800478c:	2b01      	cmp	r3, #1
 800478e:	d105      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004790:	4b66      	ldr	r3, [pc, #408]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	4a65      	ldr	r2, [pc, #404]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004796:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800479a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047a8:	4b60      	ldr	r3, [pc, #384]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ac:	f023 0203 	bic.w	r2, r3, #3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	495d      	ldr	r1, [pc, #372]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047c6:	4b59      	ldr	r3, [pc, #356]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	4956      	ldr	r1, [pc, #344]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047e4:	4b51      	ldr	r3, [pc, #324]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	494e      	ldr	r1, [pc, #312]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004802:	4b4a      	ldr	r3, [pc, #296]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004806:	f023 0210 	bic.w	r2, r3, #16
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	4947      	ldr	r1, [pc, #284]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004810:	4313      	orrs	r3, r2
 8004812:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d008      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004820:	4b42      	ldr	r3, [pc, #264]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482c:	493f      	ldr	r1, [pc, #252]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800482e:	4313      	orrs	r3, r2
 8004830:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	d008      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800483e:	4b3b      	ldr	r3, [pc, #236]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004842:	f023 0220 	bic.w	r2, r3, #32
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	4938      	ldr	r1, [pc, #224]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800484c:	4313      	orrs	r3, r2
 800484e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800485c:	4b33      	ldr	r3, [pc, #204]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800485e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004860:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	4930      	ldr	r1, [pc, #192]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800486a:	4313      	orrs	r3, r2
 800486c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800487a:	4b2c      	ldr	r3, [pc, #176]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800487e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	4929      	ldr	r1, [pc, #164]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004888:	4313      	orrs	r3, r2
 800488a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004898:	4b24      	ldr	r3, [pc, #144]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a4:	4921      	ldr	r1, [pc, #132]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048b6:	4b1d      	ldr	r3, [pc, #116]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ba:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	491a      	ldr	r1, [pc, #104]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80048d4:	4b15      	ldr	r3, [pc, #84]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d8:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e0:	4912      	ldr	r1, [pc, #72]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80048f2:	4b0e      	ldr	r3, [pc, #56]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fe:	490b      	ldr	r1, [pc, #44]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004900:	4313      	orrs	r3, r2
 8004902:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004910:	4b06      	ldr	r3, [pc, #24]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004914:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800491c:	4903      	ldr	r1, [pc, #12]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800491e:	4313      	orrs	r3, r2
 8004920:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3748      	adds	r7, #72	@ 0x48
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40021000 	.word	0x40021000

08004930 <std>:
 8004930:	2300      	movs	r3, #0
 8004932:	b510      	push	{r4, lr}
 8004934:	4604      	mov	r4, r0
 8004936:	e9c0 3300 	strd	r3, r3, [r0]
 800493a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800493e:	6083      	str	r3, [r0, #8]
 8004940:	8181      	strh	r1, [r0, #12]
 8004942:	6643      	str	r3, [r0, #100]	@ 0x64
 8004944:	81c2      	strh	r2, [r0, #14]
 8004946:	6183      	str	r3, [r0, #24]
 8004948:	4619      	mov	r1, r3
 800494a:	2208      	movs	r2, #8
 800494c:	305c      	adds	r0, #92	@ 0x5c
 800494e:	f000 f906 	bl	8004b5e <memset>
 8004952:	4b0d      	ldr	r3, [pc, #52]	@ (8004988 <std+0x58>)
 8004954:	6263      	str	r3, [r4, #36]	@ 0x24
 8004956:	4b0d      	ldr	r3, [pc, #52]	@ (800498c <std+0x5c>)
 8004958:	62a3      	str	r3, [r4, #40]	@ 0x28
 800495a:	4b0d      	ldr	r3, [pc, #52]	@ (8004990 <std+0x60>)
 800495c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800495e:	4b0d      	ldr	r3, [pc, #52]	@ (8004994 <std+0x64>)
 8004960:	6323      	str	r3, [r4, #48]	@ 0x30
 8004962:	4b0d      	ldr	r3, [pc, #52]	@ (8004998 <std+0x68>)
 8004964:	6224      	str	r4, [r4, #32]
 8004966:	429c      	cmp	r4, r3
 8004968:	d006      	beq.n	8004978 <std+0x48>
 800496a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800496e:	4294      	cmp	r4, r2
 8004970:	d002      	beq.n	8004978 <std+0x48>
 8004972:	33d0      	adds	r3, #208	@ 0xd0
 8004974:	429c      	cmp	r4, r3
 8004976:	d105      	bne.n	8004984 <std+0x54>
 8004978:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800497c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004980:	f000 b966 	b.w	8004c50 <__retarget_lock_init_recursive>
 8004984:	bd10      	pop	{r4, pc}
 8004986:	bf00      	nop
 8004988:	08004ad9 	.word	0x08004ad9
 800498c:	08004afb 	.word	0x08004afb
 8004990:	08004b33 	.word	0x08004b33
 8004994:	08004b57 	.word	0x08004b57
 8004998:	200000f4 	.word	0x200000f4

0800499c <stdio_exit_handler>:
 800499c:	4a02      	ldr	r2, [pc, #8]	@ (80049a8 <stdio_exit_handler+0xc>)
 800499e:	4903      	ldr	r1, [pc, #12]	@ (80049ac <stdio_exit_handler+0x10>)
 80049a0:	4803      	ldr	r0, [pc, #12]	@ (80049b0 <stdio_exit_handler+0x14>)
 80049a2:	f000 b869 	b.w	8004a78 <_fwalk_sglue>
 80049a6:	bf00      	nop
 80049a8:	2000000c 	.word	0x2000000c
 80049ac:	080054f1 	.word	0x080054f1
 80049b0:	2000001c 	.word	0x2000001c

080049b4 <cleanup_stdio>:
 80049b4:	6841      	ldr	r1, [r0, #4]
 80049b6:	4b0c      	ldr	r3, [pc, #48]	@ (80049e8 <cleanup_stdio+0x34>)
 80049b8:	4299      	cmp	r1, r3
 80049ba:	b510      	push	{r4, lr}
 80049bc:	4604      	mov	r4, r0
 80049be:	d001      	beq.n	80049c4 <cleanup_stdio+0x10>
 80049c0:	f000 fd96 	bl	80054f0 <_fflush_r>
 80049c4:	68a1      	ldr	r1, [r4, #8]
 80049c6:	4b09      	ldr	r3, [pc, #36]	@ (80049ec <cleanup_stdio+0x38>)
 80049c8:	4299      	cmp	r1, r3
 80049ca:	d002      	beq.n	80049d2 <cleanup_stdio+0x1e>
 80049cc:	4620      	mov	r0, r4
 80049ce:	f000 fd8f 	bl	80054f0 <_fflush_r>
 80049d2:	68e1      	ldr	r1, [r4, #12]
 80049d4:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <cleanup_stdio+0x3c>)
 80049d6:	4299      	cmp	r1, r3
 80049d8:	d004      	beq.n	80049e4 <cleanup_stdio+0x30>
 80049da:	4620      	mov	r0, r4
 80049dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049e0:	f000 bd86 	b.w	80054f0 <_fflush_r>
 80049e4:	bd10      	pop	{r4, pc}
 80049e6:	bf00      	nop
 80049e8:	200000f4 	.word	0x200000f4
 80049ec:	2000015c 	.word	0x2000015c
 80049f0:	200001c4 	.word	0x200001c4

080049f4 <global_stdio_init.part.0>:
 80049f4:	b510      	push	{r4, lr}
 80049f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <global_stdio_init.part.0+0x30>)
 80049f8:	4c0b      	ldr	r4, [pc, #44]	@ (8004a28 <global_stdio_init.part.0+0x34>)
 80049fa:	4a0c      	ldr	r2, [pc, #48]	@ (8004a2c <global_stdio_init.part.0+0x38>)
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	4620      	mov	r0, r4
 8004a00:	2200      	movs	r2, #0
 8004a02:	2104      	movs	r1, #4
 8004a04:	f7ff ff94 	bl	8004930 <std>
 8004a08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	2109      	movs	r1, #9
 8004a10:	f7ff ff8e 	bl	8004930 <std>
 8004a14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004a18:	2202      	movs	r2, #2
 8004a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a1e:	2112      	movs	r1, #18
 8004a20:	f7ff bf86 	b.w	8004930 <std>
 8004a24:	2000022c 	.word	0x2000022c
 8004a28:	200000f4 	.word	0x200000f4
 8004a2c:	0800499d 	.word	0x0800499d

08004a30 <__sfp_lock_acquire>:
 8004a30:	4801      	ldr	r0, [pc, #4]	@ (8004a38 <__sfp_lock_acquire+0x8>)
 8004a32:	f000 b90e 	b.w	8004c52 <__retarget_lock_acquire_recursive>
 8004a36:	bf00      	nop
 8004a38:	20000235 	.word	0x20000235

08004a3c <__sfp_lock_release>:
 8004a3c:	4801      	ldr	r0, [pc, #4]	@ (8004a44 <__sfp_lock_release+0x8>)
 8004a3e:	f000 b909 	b.w	8004c54 <__retarget_lock_release_recursive>
 8004a42:	bf00      	nop
 8004a44:	20000235 	.word	0x20000235

08004a48 <__sinit>:
 8004a48:	b510      	push	{r4, lr}
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	f7ff fff0 	bl	8004a30 <__sfp_lock_acquire>
 8004a50:	6a23      	ldr	r3, [r4, #32]
 8004a52:	b11b      	cbz	r3, 8004a5c <__sinit+0x14>
 8004a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a58:	f7ff bff0 	b.w	8004a3c <__sfp_lock_release>
 8004a5c:	4b04      	ldr	r3, [pc, #16]	@ (8004a70 <__sinit+0x28>)
 8004a5e:	6223      	str	r3, [r4, #32]
 8004a60:	4b04      	ldr	r3, [pc, #16]	@ (8004a74 <__sinit+0x2c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f5      	bne.n	8004a54 <__sinit+0xc>
 8004a68:	f7ff ffc4 	bl	80049f4 <global_stdio_init.part.0>
 8004a6c:	e7f2      	b.n	8004a54 <__sinit+0xc>
 8004a6e:	bf00      	nop
 8004a70:	080049b5 	.word	0x080049b5
 8004a74:	2000022c 	.word	0x2000022c

08004a78 <_fwalk_sglue>:
 8004a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a7c:	4607      	mov	r7, r0
 8004a7e:	4688      	mov	r8, r1
 8004a80:	4614      	mov	r4, r2
 8004a82:	2600      	movs	r6, #0
 8004a84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a88:	f1b9 0901 	subs.w	r9, r9, #1
 8004a8c:	d505      	bpl.n	8004a9a <_fwalk_sglue+0x22>
 8004a8e:	6824      	ldr	r4, [r4, #0]
 8004a90:	2c00      	cmp	r4, #0
 8004a92:	d1f7      	bne.n	8004a84 <_fwalk_sglue+0xc>
 8004a94:	4630      	mov	r0, r6
 8004a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a9a:	89ab      	ldrh	r3, [r5, #12]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d907      	bls.n	8004ab0 <_fwalk_sglue+0x38>
 8004aa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	d003      	beq.n	8004ab0 <_fwalk_sglue+0x38>
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	4638      	mov	r0, r7
 8004aac:	47c0      	blx	r8
 8004aae:	4306      	orrs	r6, r0
 8004ab0:	3568      	adds	r5, #104	@ 0x68
 8004ab2:	e7e9      	b.n	8004a88 <_fwalk_sglue+0x10>

08004ab4 <iprintf>:
 8004ab4:	b40f      	push	{r0, r1, r2, r3}
 8004ab6:	b507      	push	{r0, r1, r2, lr}
 8004ab8:	4906      	ldr	r1, [pc, #24]	@ (8004ad4 <iprintf+0x20>)
 8004aba:	ab04      	add	r3, sp, #16
 8004abc:	6808      	ldr	r0, [r1, #0]
 8004abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ac2:	6881      	ldr	r1, [r0, #8]
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	f000 f9e9 	bl	8004e9c <_vfiprintf_r>
 8004aca:	b003      	add	sp, #12
 8004acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ad0:	b004      	add	sp, #16
 8004ad2:	4770      	bx	lr
 8004ad4:	20000018 	.word	0x20000018

08004ad8 <__sread>:
 8004ad8:	b510      	push	{r4, lr}
 8004ada:	460c      	mov	r4, r1
 8004adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae0:	f000 f868 	bl	8004bb4 <_read_r>
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	bfab      	itete	ge
 8004ae8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004aea:	89a3      	ldrhlt	r3, [r4, #12]
 8004aec:	181b      	addge	r3, r3, r0
 8004aee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004af2:	bfac      	ite	ge
 8004af4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004af6:	81a3      	strhlt	r3, [r4, #12]
 8004af8:	bd10      	pop	{r4, pc}

08004afa <__swrite>:
 8004afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afe:	461f      	mov	r7, r3
 8004b00:	898b      	ldrh	r3, [r1, #12]
 8004b02:	05db      	lsls	r3, r3, #23
 8004b04:	4605      	mov	r5, r0
 8004b06:	460c      	mov	r4, r1
 8004b08:	4616      	mov	r6, r2
 8004b0a:	d505      	bpl.n	8004b18 <__swrite+0x1e>
 8004b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b10:	2302      	movs	r3, #2
 8004b12:	2200      	movs	r2, #0
 8004b14:	f000 f83c 	bl	8004b90 <_lseek_r>
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b22:	81a3      	strh	r3, [r4, #12]
 8004b24:	4632      	mov	r2, r6
 8004b26:	463b      	mov	r3, r7
 8004b28:	4628      	mov	r0, r5
 8004b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b2e:	f000 b853 	b.w	8004bd8 <_write_r>

08004b32 <__sseek>:
 8004b32:	b510      	push	{r4, lr}
 8004b34:	460c      	mov	r4, r1
 8004b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b3a:	f000 f829 	bl	8004b90 <_lseek_r>
 8004b3e:	1c43      	adds	r3, r0, #1
 8004b40:	89a3      	ldrh	r3, [r4, #12]
 8004b42:	bf15      	itete	ne
 8004b44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b4e:	81a3      	strheq	r3, [r4, #12]
 8004b50:	bf18      	it	ne
 8004b52:	81a3      	strhne	r3, [r4, #12]
 8004b54:	bd10      	pop	{r4, pc}

08004b56 <__sclose>:
 8004b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b5a:	f000 b809 	b.w	8004b70 <_close_r>

08004b5e <memset>:
 8004b5e:	4402      	add	r2, r0
 8004b60:	4603      	mov	r3, r0
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d100      	bne.n	8004b68 <memset+0xa>
 8004b66:	4770      	bx	lr
 8004b68:	f803 1b01 	strb.w	r1, [r3], #1
 8004b6c:	e7f9      	b.n	8004b62 <memset+0x4>
	...

08004b70 <_close_r>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	4d06      	ldr	r5, [pc, #24]	@ (8004b8c <_close_r+0x1c>)
 8004b74:	2300      	movs	r3, #0
 8004b76:	4604      	mov	r4, r0
 8004b78:	4608      	mov	r0, r1
 8004b7a:	602b      	str	r3, [r5, #0]
 8004b7c:	f7fd fa71 	bl	8002062 <_close>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d102      	bne.n	8004b8a <_close_r+0x1a>
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	b103      	cbz	r3, 8004b8a <_close_r+0x1a>
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	20000230 	.word	0x20000230

08004b90 <_lseek_r>:
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	4d07      	ldr	r5, [pc, #28]	@ (8004bb0 <_lseek_r+0x20>)
 8004b94:	4604      	mov	r4, r0
 8004b96:	4608      	mov	r0, r1
 8004b98:	4611      	mov	r1, r2
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	602a      	str	r2, [r5, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f7fd fa86 	bl	80020b0 <_lseek>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d102      	bne.n	8004bae <_lseek_r+0x1e>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	b103      	cbz	r3, 8004bae <_lseek_r+0x1e>
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	20000230 	.word	0x20000230

08004bb4 <_read_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	4d07      	ldr	r5, [pc, #28]	@ (8004bd4 <_read_r+0x20>)
 8004bb8:	4604      	mov	r4, r0
 8004bba:	4608      	mov	r0, r1
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	602a      	str	r2, [r5, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f7fd fa14 	bl	8001ff0 <_read>
 8004bc8:	1c43      	adds	r3, r0, #1
 8004bca:	d102      	bne.n	8004bd2 <_read_r+0x1e>
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	b103      	cbz	r3, 8004bd2 <_read_r+0x1e>
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}
 8004bd4:	20000230 	.word	0x20000230

08004bd8 <_write_r>:
 8004bd8:	b538      	push	{r3, r4, r5, lr}
 8004bda:	4d07      	ldr	r5, [pc, #28]	@ (8004bf8 <_write_r+0x20>)
 8004bdc:	4604      	mov	r4, r0
 8004bde:	4608      	mov	r0, r1
 8004be0:	4611      	mov	r1, r2
 8004be2:	2200      	movs	r2, #0
 8004be4:	602a      	str	r2, [r5, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	f7fd fa1f 	bl	800202a <_write>
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	d102      	bne.n	8004bf6 <_write_r+0x1e>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	b103      	cbz	r3, 8004bf6 <_write_r+0x1e>
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	bd38      	pop	{r3, r4, r5, pc}
 8004bf8:	20000230 	.word	0x20000230

08004bfc <__errno>:
 8004bfc:	4b01      	ldr	r3, [pc, #4]	@ (8004c04 <__errno+0x8>)
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000018 	.word	0x20000018

08004c08 <__libc_init_array>:
 8004c08:	b570      	push	{r4, r5, r6, lr}
 8004c0a:	4d0d      	ldr	r5, [pc, #52]	@ (8004c40 <__libc_init_array+0x38>)
 8004c0c:	4c0d      	ldr	r4, [pc, #52]	@ (8004c44 <__libc_init_array+0x3c>)
 8004c0e:	1b64      	subs	r4, r4, r5
 8004c10:	10a4      	asrs	r4, r4, #2
 8004c12:	2600      	movs	r6, #0
 8004c14:	42a6      	cmp	r6, r4
 8004c16:	d109      	bne.n	8004c2c <__libc_init_array+0x24>
 8004c18:	4d0b      	ldr	r5, [pc, #44]	@ (8004c48 <__libc_init_array+0x40>)
 8004c1a:	4c0c      	ldr	r4, [pc, #48]	@ (8004c4c <__libc_init_array+0x44>)
 8004c1c:	f000 fdb8 	bl	8005790 <_init>
 8004c20:	1b64      	subs	r4, r4, r5
 8004c22:	10a4      	asrs	r4, r4, #2
 8004c24:	2600      	movs	r6, #0
 8004c26:	42a6      	cmp	r6, r4
 8004c28:	d105      	bne.n	8004c36 <__libc_init_array+0x2e>
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}
 8004c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c30:	4798      	blx	r3
 8004c32:	3601      	adds	r6, #1
 8004c34:	e7ee      	b.n	8004c14 <__libc_init_array+0xc>
 8004c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c3a:	4798      	blx	r3
 8004c3c:	3601      	adds	r6, #1
 8004c3e:	e7f2      	b.n	8004c26 <__libc_init_array+0x1e>
 8004c40:	08021ad0 	.word	0x08021ad0
 8004c44:	08021ad0 	.word	0x08021ad0
 8004c48:	08021ad0 	.word	0x08021ad0
 8004c4c:	08021ad4 	.word	0x08021ad4

08004c50 <__retarget_lock_init_recursive>:
 8004c50:	4770      	bx	lr

08004c52 <__retarget_lock_acquire_recursive>:
 8004c52:	4770      	bx	lr

08004c54 <__retarget_lock_release_recursive>:
 8004c54:	4770      	bx	lr
	...

08004c58 <_free_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4605      	mov	r5, r0
 8004c5c:	2900      	cmp	r1, #0
 8004c5e:	d041      	beq.n	8004ce4 <_free_r+0x8c>
 8004c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c64:	1f0c      	subs	r4, r1, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bfb8      	it	lt
 8004c6a:	18e4      	addlt	r4, r4, r3
 8004c6c:	f000 f8e0 	bl	8004e30 <__malloc_lock>
 8004c70:	4a1d      	ldr	r2, [pc, #116]	@ (8004ce8 <_free_r+0x90>)
 8004c72:	6813      	ldr	r3, [r2, #0]
 8004c74:	b933      	cbnz	r3, 8004c84 <_free_r+0x2c>
 8004c76:	6063      	str	r3, [r4, #4]
 8004c78:	6014      	str	r4, [r2, #0]
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c80:	f000 b8dc 	b.w	8004e3c <__malloc_unlock>
 8004c84:	42a3      	cmp	r3, r4
 8004c86:	d908      	bls.n	8004c9a <_free_r+0x42>
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	1821      	adds	r1, r4, r0
 8004c8c:	428b      	cmp	r3, r1
 8004c8e:	bf01      	itttt	eq
 8004c90:	6819      	ldreq	r1, [r3, #0]
 8004c92:	685b      	ldreq	r3, [r3, #4]
 8004c94:	1809      	addeq	r1, r1, r0
 8004c96:	6021      	streq	r1, [r4, #0]
 8004c98:	e7ed      	b.n	8004c76 <_free_r+0x1e>
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	b10b      	cbz	r3, 8004ca4 <_free_r+0x4c>
 8004ca0:	42a3      	cmp	r3, r4
 8004ca2:	d9fa      	bls.n	8004c9a <_free_r+0x42>
 8004ca4:	6811      	ldr	r1, [r2, #0]
 8004ca6:	1850      	adds	r0, r2, r1
 8004ca8:	42a0      	cmp	r0, r4
 8004caa:	d10b      	bne.n	8004cc4 <_free_r+0x6c>
 8004cac:	6820      	ldr	r0, [r4, #0]
 8004cae:	4401      	add	r1, r0
 8004cb0:	1850      	adds	r0, r2, r1
 8004cb2:	4283      	cmp	r3, r0
 8004cb4:	6011      	str	r1, [r2, #0]
 8004cb6:	d1e0      	bne.n	8004c7a <_free_r+0x22>
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	6053      	str	r3, [r2, #4]
 8004cbe:	4408      	add	r0, r1
 8004cc0:	6010      	str	r0, [r2, #0]
 8004cc2:	e7da      	b.n	8004c7a <_free_r+0x22>
 8004cc4:	d902      	bls.n	8004ccc <_free_r+0x74>
 8004cc6:	230c      	movs	r3, #12
 8004cc8:	602b      	str	r3, [r5, #0]
 8004cca:	e7d6      	b.n	8004c7a <_free_r+0x22>
 8004ccc:	6820      	ldr	r0, [r4, #0]
 8004cce:	1821      	adds	r1, r4, r0
 8004cd0:	428b      	cmp	r3, r1
 8004cd2:	bf04      	itt	eq
 8004cd4:	6819      	ldreq	r1, [r3, #0]
 8004cd6:	685b      	ldreq	r3, [r3, #4]
 8004cd8:	6063      	str	r3, [r4, #4]
 8004cda:	bf04      	itt	eq
 8004cdc:	1809      	addeq	r1, r1, r0
 8004cde:	6021      	streq	r1, [r4, #0]
 8004ce0:	6054      	str	r4, [r2, #4]
 8004ce2:	e7ca      	b.n	8004c7a <_free_r+0x22>
 8004ce4:	bd38      	pop	{r3, r4, r5, pc}
 8004ce6:	bf00      	nop
 8004ce8:	2000023c 	.word	0x2000023c

08004cec <sbrk_aligned>:
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	4e0f      	ldr	r6, [pc, #60]	@ (8004d2c <sbrk_aligned+0x40>)
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	6831      	ldr	r1, [r6, #0]
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	b911      	cbnz	r1, 8004cfe <sbrk_aligned+0x12>
 8004cf8:	f000 fcb6 	bl	8005668 <_sbrk_r>
 8004cfc:	6030      	str	r0, [r6, #0]
 8004cfe:	4621      	mov	r1, r4
 8004d00:	4628      	mov	r0, r5
 8004d02:	f000 fcb1 	bl	8005668 <_sbrk_r>
 8004d06:	1c43      	adds	r3, r0, #1
 8004d08:	d103      	bne.n	8004d12 <sbrk_aligned+0x26>
 8004d0a:	f04f 34ff 	mov.w	r4, #4294967295
 8004d0e:	4620      	mov	r0, r4
 8004d10:	bd70      	pop	{r4, r5, r6, pc}
 8004d12:	1cc4      	adds	r4, r0, #3
 8004d14:	f024 0403 	bic.w	r4, r4, #3
 8004d18:	42a0      	cmp	r0, r4
 8004d1a:	d0f8      	beq.n	8004d0e <sbrk_aligned+0x22>
 8004d1c:	1a21      	subs	r1, r4, r0
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f000 fca2 	bl	8005668 <_sbrk_r>
 8004d24:	3001      	adds	r0, #1
 8004d26:	d1f2      	bne.n	8004d0e <sbrk_aligned+0x22>
 8004d28:	e7ef      	b.n	8004d0a <sbrk_aligned+0x1e>
 8004d2a:	bf00      	nop
 8004d2c:	20000238 	.word	0x20000238

08004d30 <_malloc_r>:
 8004d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d34:	1ccd      	adds	r5, r1, #3
 8004d36:	f025 0503 	bic.w	r5, r5, #3
 8004d3a:	3508      	adds	r5, #8
 8004d3c:	2d0c      	cmp	r5, #12
 8004d3e:	bf38      	it	cc
 8004d40:	250c      	movcc	r5, #12
 8004d42:	2d00      	cmp	r5, #0
 8004d44:	4606      	mov	r6, r0
 8004d46:	db01      	blt.n	8004d4c <_malloc_r+0x1c>
 8004d48:	42a9      	cmp	r1, r5
 8004d4a:	d904      	bls.n	8004d56 <_malloc_r+0x26>
 8004d4c:	230c      	movs	r3, #12
 8004d4e:	6033      	str	r3, [r6, #0]
 8004d50:	2000      	movs	r0, #0
 8004d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e2c <_malloc_r+0xfc>
 8004d5a:	f000 f869 	bl	8004e30 <__malloc_lock>
 8004d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d62:	461c      	mov	r4, r3
 8004d64:	bb44      	cbnz	r4, 8004db8 <_malloc_r+0x88>
 8004d66:	4629      	mov	r1, r5
 8004d68:	4630      	mov	r0, r6
 8004d6a:	f7ff ffbf 	bl	8004cec <sbrk_aligned>
 8004d6e:	1c43      	adds	r3, r0, #1
 8004d70:	4604      	mov	r4, r0
 8004d72:	d158      	bne.n	8004e26 <_malloc_r+0xf6>
 8004d74:	f8d8 4000 	ldr.w	r4, [r8]
 8004d78:	4627      	mov	r7, r4
 8004d7a:	2f00      	cmp	r7, #0
 8004d7c:	d143      	bne.n	8004e06 <_malloc_r+0xd6>
 8004d7e:	2c00      	cmp	r4, #0
 8004d80:	d04b      	beq.n	8004e1a <_malloc_r+0xea>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	4639      	mov	r1, r7
 8004d86:	4630      	mov	r0, r6
 8004d88:	eb04 0903 	add.w	r9, r4, r3
 8004d8c:	f000 fc6c 	bl	8005668 <_sbrk_r>
 8004d90:	4581      	cmp	r9, r0
 8004d92:	d142      	bne.n	8004e1a <_malloc_r+0xea>
 8004d94:	6821      	ldr	r1, [r4, #0]
 8004d96:	1a6d      	subs	r5, r5, r1
 8004d98:	4629      	mov	r1, r5
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	f7ff ffa6 	bl	8004cec <sbrk_aligned>
 8004da0:	3001      	adds	r0, #1
 8004da2:	d03a      	beq.n	8004e1a <_malloc_r+0xea>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	442b      	add	r3, r5
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	f8d8 3000 	ldr.w	r3, [r8]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	bb62      	cbnz	r2, 8004e0c <_malloc_r+0xdc>
 8004db2:	f8c8 7000 	str.w	r7, [r8]
 8004db6:	e00f      	b.n	8004dd8 <_malloc_r+0xa8>
 8004db8:	6822      	ldr	r2, [r4, #0]
 8004dba:	1b52      	subs	r2, r2, r5
 8004dbc:	d420      	bmi.n	8004e00 <_malloc_r+0xd0>
 8004dbe:	2a0b      	cmp	r2, #11
 8004dc0:	d917      	bls.n	8004df2 <_malloc_r+0xc2>
 8004dc2:	1961      	adds	r1, r4, r5
 8004dc4:	42a3      	cmp	r3, r4
 8004dc6:	6025      	str	r5, [r4, #0]
 8004dc8:	bf18      	it	ne
 8004dca:	6059      	strne	r1, [r3, #4]
 8004dcc:	6863      	ldr	r3, [r4, #4]
 8004dce:	bf08      	it	eq
 8004dd0:	f8c8 1000 	streq.w	r1, [r8]
 8004dd4:	5162      	str	r2, [r4, r5]
 8004dd6:	604b      	str	r3, [r1, #4]
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f000 f82f 	bl	8004e3c <__malloc_unlock>
 8004dde:	f104 000b 	add.w	r0, r4, #11
 8004de2:	1d23      	adds	r3, r4, #4
 8004de4:	f020 0007 	bic.w	r0, r0, #7
 8004de8:	1ac2      	subs	r2, r0, r3
 8004dea:	bf1c      	itt	ne
 8004dec:	1a1b      	subne	r3, r3, r0
 8004dee:	50a3      	strne	r3, [r4, r2]
 8004df0:	e7af      	b.n	8004d52 <_malloc_r+0x22>
 8004df2:	6862      	ldr	r2, [r4, #4]
 8004df4:	42a3      	cmp	r3, r4
 8004df6:	bf0c      	ite	eq
 8004df8:	f8c8 2000 	streq.w	r2, [r8]
 8004dfc:	605a      	strne	r2, [r3, #4]
 8004dfe:	e7eb      	b.n	8004dd8 <_malloc_r+0xa8>
 8004e00:	4623      	mov	r3, r4
 8004e02:	6864      	ldr	r4, [r4, #4]
 8004e04:	e7ae      	b.n	8004d64 <_malloc_r+0x34>
 8004e06:	463c      	mov	r4, r7
 8004e08:	687f      	ldr	r7, [r7, #4]
 8004e0a:	e7b6      	b.n	8004d7a <_malloc_r+0x4a>
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	42a3      	cmp	r3, r4
 8004e12:	d1fb      	bne.n	8004e0c <_malloc_r+0xdc>
 8004e14:	2300      	movs	r3, #0
 8004e16:	6053      	str	r3, [r2, #4]
 8004e18:	e7de      	b.n	8004dd8 <_malloc_r+0xa8>
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	6033      	str	r3, [r6, #0]
 8004e1e:	4630      	mov	r0, r6
 8004e20:	f000 f80c 	bl	8004e3c <__malloc_unlock>
 8004e24:	e794      	b.n	8004d50 <_malloc_r+0x20>
 8004e26:	6005      	str	r5, [r0, #0]
 8004e28:	e7d6      	b.n	8004dd8 <_malloc_r+0xa8>
 8004e2a:	bf00      	nop
 8004e2c:	2000023c 	.word	0x2000023c

08004e30 <__malloc_lock>:
 8004e30:	4801      	ldr	r0, [pc, #4]	@ (8004e38 <__malloc_lock+0x8>)
 8004e32:	f7ff bf0e 	b.w	8004c52 <__retarget_lock_acquire_recursive>
 8004e36:	bf00      	nop
 8004e38:	20000234 	.word	0x20000234

08004e3c <__malloc_unlock>:
 8004e3c:	4801      	ldr	r0, [pc, #4]	@ (8004e44 <__malloc_unlock+0x8>)
 8004e3e:	f7ff bf09 	b.w	8004c54 <__retarget_lock_release_recursive>
 8004e42:	bf00      	nop
 8004e44:	20000234 	.word	0x20000234

08004e48 <__sfputc_r>:
 8004e48:	6893      	ldr	r3, [r2, #8]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	b410      	push	{r4}
 8004e50:	6093      	str	r3, [r2, #8]
 8004e52:	da08      	bge.n	8004e66 <__sfputc_r+0x1e>
 8004e54:	6994      	ldr	r4, [r2, #24]
 8004e56:	42a3      	cmp	r3, r4
 8004e58:	db01      	blt.n	8004e5e <__sfputc_r+0x16>
 8004e5a:	290a      	cmp	r1, #10
 8004e5c:	d103      	bne.n	8004e66 <__sfputc_r+0x1e>
 8004e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e62:	f000 bb6d 	b.w	8005540 <__swbuf_r>
 8004e66:	6813      	ldr	r3, [r2, #0]
 8004e68:	1c58      	adds	r0, r3, #1
 8004e6a:	6010      	str	r0, [r2, #0]
 8004e6c:	7019      	strb	r1, [r3, #0]
 8004e6e:	4608      	mov	r0, r1
 8004e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <__sfputs_r>:
 8004e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e78:	4606      	mov	r6, r0
 8004e7a:	460f      	mov	r7, r1
 8004e7c:	4614      	mov	r4, r2
 8004e7e:	18d5      	adds	r5, r2, r3
 8004e80:	42ac      	cmp	r4, r5
 8004e82:	d101      	bne.n	8004e88 <__sfputs_r+0x12>
 8004e84:	2000      	movs	r0, #0
 8004e86:	e007      	b.n	8004e98 <__sfputs_r+0x22>
 8004e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e8c:	463a      	mov	r2, r7
 8004e8e:	4630      	mov	r0, r6
 8004e90:	f7ff ffda 	bl	8004e48 <__sfputc_r>
 8004e94:	1c43      	adds	r3, r0, #1
 8004e96:	d1f3      	bne.n	8004e80 <__sfputs_r+0xa>
 8004e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e9c <_vfiprintf_r>:
 8004e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea0:	460d      	mov	r5, r1
 8004ea2:	b09d      	sub	sp, #116	@ 0x74
 8004ea4:	4614      	mov	r4, r2
 8004ea6:	4698      	mov	r8, r3
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	b118      	cbz	r0, 8004eb4 <_vfiprintf_r+0x18>
 8004eac:	6a03      	ldr	r3, [r0, #32]
 8004eae:	b90b      	cbnz	r3, 8004eb4 <_vfiprintf_r+0x18>
 8004eb0:	f7ff fdca 	bl	8004a48 <__sinit>
 8004eb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004eb6:	07d9      	lsls	r1, r3, #31
 8004eb8:	d405      	bmi.n	8004ec6 <_vfiprintf_r+0x2a>
 8004eba:	89ab      	ldrh	r3, [r5, #12]
 8004ebc:	059a      	lsls	r2, r3, #22
 8004ebe:	d402      	bmi.n	8004ec6 <_vfiprintf_r+0x2a>
 8004ec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ec2:	f7ff fec6 	bl	8004c52 <__retarget_lock_acquire_recursive>
 8004ec6:	89ab      	ldrh	r3, [r5, #12]
 8004ec8:	071b      	lsls	r3, r3, #28
 8004eca:	d501      	bpl.n	8004ed0 <_vfiprintf_r+0x34>
 8004ecc:	692b      	ldr	r3, [r5, #16]
 8004ece:	b99b      	cbnz	r3, 8004ef8 <_vfiprintf_r+0x5c>
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	f000 fb72 	bl	80055bc <__swsetup_r>
 8004ed8:	b170      	cbz	r0, 8004ef8 <_vfiprintf_r+0x5c>
 8004eda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004edc:	07dc      	lsls	r4, r3, #31
 8004ede:	d504      	bpl.n	8004eea <_vfiprintf_r+0x4e>
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	b01d      	add	sp, #116	@ 0x74
 8004ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eea:	89ab      	ldrh	r3, [r5, #12]
 8004eec:	0598      	lsls	r0, r3, #22
 8004eee:	d4f7      	bmi.n	8004ee0 <_vfiprintf_r+0x44>
 8004ef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ef2:	f7ff feaf 	bl	8004c54 <__retarget_lock_release_recursive>
 8004ef6:	e7f3      	b.n	8004ee0 <_vfiprintf_r+0x44>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8004efc:	2320      	movs	r3, #32
 8004efe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f06:	2330      	movs	r3, #48	@ 0x30
 8004f08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80050b8 <_vfiprintf_r+0x21c>
 8004f0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f10:	f04f 0901 	mov.w	r9, #1
 8004f14:	4623      	mov	r3, r4
 8004f16:	469a      	mov	sl, r3
 8004f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f1c:	b10a      	cbz	r2, 8004f22 <_vfiprintf_r+0x86>
 8004f1e:	2a25      	cmp	r2, #37	@ 0x25
 8004f20:	d1f9      	bne.n	8004f16 <_vfiprintf_r+0x7a>
 8004f22:	ebba 0b04 	subs.w	fp, sl, r4
 8004f26:	d00b      	beq.n	8004f40 <_vfiprintf_r+0xa4>
 8004f28:	465b      	mov	r3, fp
 8004f2a:	4622      	mov	r2, r4
 8004f2c:	4629      	mov	r1, r5
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f7ff ffa1 	bl	8004e76 <__sfputs_r>
 8004f34:	3001      	adds	r0, #1
 8004f36:	f000 80a7 	beq.w	8005088 <_vfiprintf_r+0x1ec>
 8004f3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f3c:	445a      	add	r2, fp
 8004f3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f40:	f89a 3000 	ldrb.w	r3, [sl]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 809f 	beq.w	8005088 <_vfiprintf_r+0x1ec>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f54:	f10a 0a01 	add.w	sl, sl, #1
 8004f58:	9304      	str	r3, [sp, #16]
 8004f5a:	9307      	str	r3, [sp, #28]
 8004f5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f60:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f62:	4654      	mov	r4, sl
 8004f64:	2205      	movs	r2, #5
 8004f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f6a:	4853      	ldr	r0, [pc, #332]	@ (80050b8 <_vfiprintf_r+0x21c>)
 8004f6c:	f7fb f930 	bl	80001d0 <memchr>
 8004f70:	9a04      	ldr	r2, [sp, #16]
 8004f72:	b9d8      	cbnz	r0, 8004fac <_vfiprintf_r+0x110>
 8004f74:	06d1      	lsls	r1, r2, #27
 8004f76:	bf44      	itt	mi
 8004f78:	2320      	movmi	r3, #32
 8004f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f7e:	0713      	lsls	r3, r2, #28
 8004f80:	bf44      	itt	mi
 8004f82:	232b      	movmi	r3, #43	@ 0x2b
 8004f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f88:	f89a 3000 	ldrb.w	r3, [sl]
 8004f8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f8e:	d015      	beq.n	8004fbc <_vfiprintf_r+0x120>
 8004f90:	9a07      	ldr	r2, [sp, #28]
 8004f92:	4654      	mov	r4, sl
 8004f94:	2000      	movs	r0, #0
 8004f96:	f04f 0c0a 	mov.w	ip, #10
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fa0:	3b30      	subs	r3, #48	@ 0x30
 8004fa2:	2b09      	cmp	r3, #9
 8004fa4:	d94b      	bls.n	800503e <_vfiprintf_r+0x1a2>
 8004fa6:	b1b0      	cbz	r0, 8004fd6 <_vfiprintf_r+0x13a>
 8004fa8:	9207      	str	r2, [sp, #28]
 8004faa:	e014      	b.n	8004fd6 <_vfiprintf_r+0x13a>
 8004fac:	eba0 0308 	sub.w	r3, r0, r8
 8004fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	9304      	str	r3, [sp, #16]
 8004fb8:	46a2      	mov	sl, r4
 8004fba:	e7d2      	b.n	8004f62 <_vfiprintf_r+0xc6>
 8004fbc:	9b03      	ldr	r3, [sp, #12]
 8004fbe:	1d19      	adds	r1, r3, #4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	9103      	str	r1, [sp, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	bfbb      	ittet	lt
 8004fc8:	425b      	neglt	r3, r3
 8004fca:	f042 0202 	orrlt.w	r2, r2, #2
 8004fce:	9307      	strge	r3, [sp, #28]
 8004fd0:	9307      	strlt	r3, [sp, #28]
 8004fd2:	bfb8      	it	lt
 8004fd4:	9204      	strlt	r2, [sp, #16]
 8004fd6:	7823      	ldrb	r3, [r4, #0]
 8004fd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fda:	d10a      	bne.n	8004ff2 <_vfiprintf_r+0x156>
 8004fdc:	7863      	ldrb	r3, [r4, #1]
 8004fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fe0:	d132      	bne.n	8005048 <_vfiprintf_r+0x1ac>
 8004fe2:	9b03      	ldr	r3, [sp, #12]
 8004fe4:	1d1a      	adds	r2, r3, #4
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	9203      	str	r2, [sp, #12]
 8004fea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004fee:	3402      	adds	r4, #2
 8004ff0:	9305      	str	r3, [sp, #20]
 8004ff2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80050c8 <_vfiprintf_r+0x22c>
 8004ff6:	7821      	ldrb	r1, [r4, #0]
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	4650      	mov	r0, sl
 8004ffc:	f7fb f8e8 	bl	80001d0 <memchr>
 8005000:	b138      	cbz	r0, 8005012 <_vfiprintf_r+0x176>
 8005002:	9b04      	ldr	r3, [sp, #16]
 8005004:	eba0 000a 	sub.w	r0, r0, sl
 8005008:	2240      	movs	r2, #64	@ 0x40
 800500a:	4082      	lsls	r2, r0
 800500c:	4313      	orrs	r3, r2
 800500e:	3401      	adds	r4, #1
 8005010:	9304      	str	r3, [sp, #16]
 8005012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005016:	4829      	ldr	r0, [pc, #164]	@ (80050bc <_vfiprintf_r+0x220>)
 8005018:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800501c:	2206      	movs	r2, #6
 800501e:	f7fb f8d7 	bl	80001d0 <memchr>
 8005022:	2800      	cmp	r0, #0
 8005024:	d03f      	beq.n	80050a6 <_vfiprintf_r+0x20a>
 8005026:	4b26      	ldr	r3, [pc, #152]	@ (80050c0 <_vfiprintf_r+0x224>)
 8005028:	bb1b      	cbnz	r3, 8005072 <_vfiprintf_r+0x1d6>
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	3307      	adds	r3, #7
 800502e:	f023 0307 	bic.w	r3, r3, #7
 8005032:	3308      	adds	r3, #8
 8005034:	9303      	str	r3, [sp, #12]
 8005036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005038:	443b      	add	r3, r7
 800503a:	9309      	str	r3, [sp, #36]	@ 0x24
 800503c:	e76a      	b.n	8004f14 <_vfiprintf_r+0x78>
 800503e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005042:	460c      	mov	r4, r1
 8005044:	2001      	movs	r0, #1
 8005046:	e7a8      	b.n	8004f9a <_vfiprintf_r+0xfe>
 8005048:	2300      	movs	r3, #0
 800504a:	3401      	adds	r4, #1
 800504c:	9305      	str	r3, [sp, #20]
 800504e:	4619      	mov	r1, r3
 8005050:	f04f 0c0a 	mov.w	ip, #10
 8005054:	4620      	mov	r0, r4
 8005056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800505a:	3a30      	subs	r2, #48	@ 0x30
 800505c:	2a09      	cmp	r2, #9
 800505e:	d903      	bls.n	8005068 <_vfiprintf_r+0x1cc>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0c6      	beq.n	8004ff2 <_vfiprintf_r+0x156>
 8005064:	9105      	str	r1, [sp, #20]
 8005066:	e7c4      	b.n	8004ff2 <_vfiprintf_r+0x156>
 8005068:	fb0c 2101 	mla	r1, ip, r1, r2
 800506c:	4604      	mov	r4, r0
 800506e:	2301      	movs	r3, #1
 8005070:	e7f0      	b.n	8005054 <_vfiprintf_r+0x1b8>
 8005072:	ab03      	add	r3, sp, #12
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	462a      	mov	r2, r5
 8005078:	4b12      	ldr	r3, [pc, #72]	@ (80050c4 <_vfiprintf_r+0x228>)
 800507a:	a904      	add	r1, sp, #16
 800507c:	4630      	mov	r0, r6
 800507e:	f3af 8000 	nop.w
 8005082:	4607      	mov	r7, r0
 8005084:	1c78      	adds	r0, r7, #1
 8005086:	d1d6      	bne.n	8005036 <_vfiprintf_r+0x19a>
 8005088:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800508a:	07d9      	lsls	r1, r3, #31
 800508c:	d405      	bmi.n	800509a <_vfiprintf_r+0x1fe>
 800508e:	89ab      	ldrh	r3, [r5, #12]
 8005090:	059a      	lsls	r2, r3, #22
 8005092:	d402      	bmi.n	800509a <_vfiprintf_r+0x1fe>
 8005094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005096:	f7ff fddd 	bl	8004c54 <__retarget_lock_release_recursive>
 800509a:	89ab      	ldrh	r3, [r5, #12]
 800509c:	065b      	lsls	r3, r3, #25
 800509e:	f53f af1f 	bmi.w	8004ee0 <_vfiprintf_r+0x44>
 80050a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050a4:	e71e      	b.n	8004ee4 <_vfiprintf_r+0x48>
 80050a6:	ab03      	add	r3, sp, #12
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	462a      	mov	r2, r5
 80050ac:	4b05      	ldr	r3, [pc, #20]	@ (80050c4 <_vfiprintf_r+0x228>)
 80050ae:	a904      	add	r1, sp, #16
 80050b0:	4630      	mov	r0, r6
 80050b2:	f000 f879 	bl	80051a8 <_printf_i>
 80050b6:	e7e4      	b.n	8005082 <_vfiprintf_r+0x1e6>
 80050b8:	08021a94 	.word	0x08021a94
 80050bc:	08021a9e 	.word	0x08021a9e
 80050c0:	00000000 	.word	0x00000000
 80050c4:	08004e77 	.word	0x08004e77
 80050c8:	08021a9a 	.word	0x08021a9a

080050cc <_printf_common>:
 80050cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d0:	4616      	mov	r6, r2
 80050d2:	4698      	mov	r8, r3
 80050d4:	688a      	ldr	r2, [r1, #8]
 80050d6:	690b      	ldr	r3, [r1, #16]
 80050d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050dc:	4293      	cmp	r3, r2
 80050de:	bfb8      	it	lt
 80050e0:	4613      	movlt	r3, r2
 80050e2:	6033      	str	r3, [r6, #0]
 80050e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050e8:	4607      	mov	r7, r0
 80050ea:	460c      	mov	r4, r1
 80050ec:	b10a      	cbz	r2, 80050f2 <_printf_common+0x26>
 80050ee:	3301      	adds	r3, #1
 80050f0:	6033      	str	r3, [r6, #0]
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	0699      	lsls	r1, r3, #26
 80050f6:	bf42      	ittt	mi
 80050f8:	6833      	ldrmi	r3, [r6, #0]
 80050fa:	3302      	addmi	r3, #2
 80050fc:	6033      	strmi	r3, [r6, #0]
 80050fe:	6825      	ldr	r5, [r4, #0]
 8005100:	f015 0506 	ands.w	r5, r5, #6
 8005104:	d106      	bne.n	8005114 <_printf_common+0x48>
 8005106:	f104 0a19 	add.w	sl, r4, #25
 800510a:	68e3      	ldr	r3, [r4, #12]
 800510c:	6832      	ldr	r2, [r6, #0]
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	42ab      	cmp	r3, r5
 8005112:	dc26      	bgt.n	8005162 <_printf_common+0x96>
 8005114:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005118:	6822      	ldr	r2, [r4, #0]
 800511a:	3b00      	subs	r3, #0
 800511c:	bf18      	it	ne
 800511e:	2301      	movne	r3, #1
 8005120:	0692      	lsls	r2, r2, #26
 8005122:	d42b      	bmi.n	800517c <_printf_common+0xb0>
 8005124:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005128:	4641      	mov	r1, r8
 800512a:	4638      	mov	r0, r7
 800512c:	47c8      	blx	r9
 800512e:	3001      	adds	r0, #1
 8005130:	d01e      	beq.n	8005170 <_printf_common+0xa4>
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	6922      	ldr	r2, [r4, #16]
 8005136:	f003 0306 	and.w	r3, r3, #6
 800513a:	2b04      	cmp	r3, #4
 800513c:	bf02      	ittt	eq
 800513e:	68e5      	ldreq	r5, [r4, #12]
 8005140:	6833      	ldreq	r3, [r6, #0]
 8005142:	1aed      	subeq	r5, r5, r3
 8005144:	68a3      	ldr	r3, [r4, #8]
 8005146:	bf0c      	ite	eq
 8005148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800514c:	2500      	movne	r5, #0
 800514e:	4293      	cmp	r3, r2
 8005150:	bfc4      	itt	gt
 8005152:	1a9b      	subgt	r3, r3, r2
 8005154:	18ed      	addgt	r5, r5, r3
 8005156:	2600      	movs	r6, #0
 8005158:	341a      	adds	r4, #26
 800515a:	42b5      	cmp	r5, r6
 800515c:	d11a      	bne.n	8005194 <_printf_common+0xc8>
 800515e:	2000      	movs	r0, #0
 8005160:	e008      	b.n	8005174 <_printf_common+0xa8>
 8005162:	2301      	movs	r3, #1
 8005164:	4652      	mov	r2, sl
 8005166:	4641      	mov	r1, r8
 8005168:	4638      	mov	r0, r7
 800516a:	47c8      	blx	r9
 800516c:	3001      	adds	r0, #1
 800516e:	d103      	bne.n	8005178 <_printf_common+0xac>
 8005170:	f04f 30ff 	mov.w	r0, #4294967295
 8005174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005178:	3501      	adds	r5, #1
 800517a:	e7c6      	b.n	800510a <_printf_common+0x3e>
 800517c:	18e1      	adds	r1, r4, r3
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	2030      	movs	r0, #48	@ 0x30
 8005182:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005186:	4422      	add	r2, r4
 8005188:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800518c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005190:	3302      	adds	r3, #2
 8005192:	e7c7      	b.n	8005124 <_printf_common+0x58>
 8005194:	2301      	movs	r3, #1
 8005196:	4622      	mov	r2, r4
 8005198:	4641      	mov	r1, r8
 800519a:	4638      	mov	r0, r7
 800519c:	47c8      	blx	r9
 800519e:	3001      	adds	r0, #1
 80051a0:	d0e6      	beq.n	8005170 <_printf_common+0xa4>
 80051a2:	3601      	adds	r6, #1
 80051a4:	e7d9      	b.n	800515a <_printf_common+0x8e>
	...

080051a8 <_printf_i>:
 80051a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051ac:	7e0f      	ldrb	r7, [r1, #24]
 80051ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051b0:	2f78      	cmp	r7, #120	@ 0x78
 80051b2:	4691      	mov	r9, r2
 80051b4:	4680      	mov	r8, r0
 80051b6:	460c      	mov	r4, r1
 80051b8:	469a      	mov	sl, r3
 80051ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051be:	d807      	bhi.n	80051d0 <_printf_i+0x28>
 80051c0:	2f62      	cmp	r7, #98	@ 0x62
 80051c2:	d80a      	bhi.n	80051da <_printf_i+0x32>
 80051c4:	2f00      	cmp	r7, #0
 80051c6:	f000 80d2 	beq.w	800536e <_printf_i+0x1c6>
 80051ca:	2f58      	cmp	r7, #88	@ 0x58
 80051cc:	f000 80b9 	beq.w	8005342 <_printf_i+0x19a>
 80051d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051d8:	e03a      	b.n	8005250 <_printf_i+0xa8>
 80051da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051de:	2b15      	cmp	r3, #21
 80051e0:	d8f6      	bhi.n	80051d0 <_printf_i+0x28>
 80051e2:	a101      	add	r1, pc, #4	@ (adr r1, 80051e8 <_printf_i+0x40>)
 80051e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051e8:	08005241 	.word	0x08005241
 80051ec:	08005255 	.word	0x08005255
 80051f0:	080051d1 	.word	0x080051d1
 80051f4:	080051d1 	.word	0x080051d1
 80051f8:	080051d1 	.word	0x080051d1
 80051fc:	080051d1 	.word	0x080051d1
 8005200:	08005255 	.word	0x08005255
 8005204:	080051d1 	.word	0x080051d1
 8005208:	080051d1 	.word	0x080051d1
 800520c:	080051d1 	.word	0x080051d1
 8005210:	080051d1 	.word	0x080051d1
 8005214:	08005355 	.word	0x08005355
 8005218:	0800527f 	.word	0x0800527f
 800521c:	0800530f 	.word	0x0800530f
 8005220:	080051d1 	.word	0x080051d1
 8005224:	080051d1 	.word	0x080051d1
 8005228:	08005377 	.word	0x08005377
 800522c:	080051d1 	.word	0x080051d1
 8005230:	0800527f 	.word	0x0800527f
 8005234:	080051d1 	.word	0x080051d1
 8005238:	080051d1 	.word	0x080051d1
 800523c:	08005317 	.word	0x08005317
 8005240:	6833      	ldr	r3, [r6, #0]
 8005242:	1d1a      	adds	r2, r3, #4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6032      	str	r2, [r6, #0]
 8005248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800524c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005250:	2301      	movs	r3, #1
 8005252:	e09d      	b.n	8005390 <_printf_i+0x1e8>
 8005254:	6833      	ldr	r3, [r6, #0]
 8005256:	6820      	ldr	r0, [r4, #0]
 8005258:	1d19      	adds	r1, r3, #4
 800525a:	6031      	str	r1, [r6, #0]
 800525c:	0606      	lsls	r6, r0, #24
 800525e:	d501      	bpl.n	8005264 <_printf_i+0xbc>
 8005260:	681d      	ldr	r5, [r3, #0]
 8005262:	e003      	b.n	800526c <_printf_i+0xc4>
 8005264:	0645      	lsls	r5, r0, #25
 8005266:	d5fb      	bpl.n	8005260 <_printf_i+0xb8>
 8005268:	f9b3 5000 	ldrsh.w	r5, [r3]
 800526c:	2d00      	cmp	r5, #0
 800526e:	da03      	bge.n	8005278 <_printf_i+0xd0>
 8005270:	232d      	movs	r3, #45	@ 0x2d
 8005272:	426d      	negs	r5, r5
 8005274:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005278:	4859      	ldr	r0, [pc, #356]	@ (80053e0 <_printf_i+0x238>)
 800527a:	230a      	movs	r3, #10
 800527c:	e011      	b.n	80052a2 <_printf_i+0xfa>
 800527e:	6821      	ldr	r1, [r4, #0]
 8005280:	6833      	ldr	r3, [r6, #0]
 8005282:	0608      	lsls	r0, r1, #24
 8005284:	f853 5b04 	ldr.w	r5, [r3], #4
 8005288:	d402      	bmi.n	8005290 <_printf_i+0xe8>
 800528a:	0649      	lsls	r1, r1, #25
 800528c:	bf48      	it	mi
 800528e:	b2ad      	uxthmi	r5, r5
 8005290:	2f6f      	cmp	r7, #111	@ 0x6f
 8005292:	4853      	ldr	r0, [pc, #332]	@ (80053e0 <_printf_i+0x238>)
 8005294:	6033      	str	r3, [r6, #0]
 8005296:	bf14      	ite	ne
 8005298:	230a      	movne	r3, #10
 800529a:	2308      	moveq	r3, #8
 800529c:	2100      	movs	r1, #0
 800529e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052a2:	6866      	ldr	r6, [r4, #4]
 80052a4:	60a6      	str	r6, [r4, #8]
 80052a6:	2e00      	cmp	r6, #0
 80052a8:	bfa2      	ittt	ge
 80052aa:	6821      	ldrge	r1, [r4, #0]
 80052ac:	f021 0104 	bicge.w	r1, r1, #4
 80052b0:	6021      	strge	r1, [r4, #0]
 80052b2:	b90d      	cbnz	r5, 80052b8 <_printf_i+0x110>
 80052b4:	2e00      	cmp	r6, #0
 80052b6:	d04b      	beq.n	8005350 <_printf_i+0x1a8>
 80052b8:	4616      	mov	r6, r2
 80052ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80052be:	fb03 5711 	mls	r7, r3, r1, r5
 80052c2:	5dc7      	ldrb	r7, [r0, r7]
 80052c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052c8:	462f      	mov	r7, r5
 80052ca:	42bb      	cmp	r3, r7
 80052cc:	460d      	mov	r5, r1
 80052ce:	d9f4      	bls.n	80052ba <_printf_i+0x112>
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d10b      	bne.n	80052ec <_printf_i+0x144>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	07df      	lsls	r7, r3, #31
 80052d8:	d508      	bpl.n	80052ec <_printf_i+0x144>
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	6861      	ldr	r1, [r4, #4]
 80052de:	4299      	cmp	r1, r3
 80052e0:	bfde      	ittt	le
 80052e2:	2330      	movle	r3, #48	@ 0x30
 80052e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052ec:	1b92      	subs	r2, r2, r6
 80052ee:	6122      	str	r2, [r4, #16]
 80052f0:	f8cd a000 	str.w	sl, [sp]
 80052f4:	464b      	mov	r3, r9
 80052f6:	aa03      	add	r2, sp, #12
 80052f8:	4621      	mov	r1, r4
 80052fa:	4640      	mov	r0, r8
 80052fc:	f7ff fee6 	bl	80050cc <_printf_common>
 8005300:	3001      	adds	r0, #1
 8005302:	d14a      	bne.n	800539a <_printf_i+0x1f2>
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	b004      	add	sp, #16
 800530a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	f043 0320 	orr.w	r3, r3, #32
 8005314:	6023      	str	r3, [r4, #0]
 8005316:	4833      	ldr	r0, [pc, #204]	@ (80053e4 <_printf_i+0x23c>)
 8005318:	2778      	movs	r7, #120	@ 0x78
 800531a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	6831      	ldr	r1, [r6, #0]
 8005322:	061f      	lsls	r7, r3, #24
 8005324:	f851 5b04 	ldr.w	r5, [r1], #4
 8005328:	d402      	bmi.n	8005330 <_printf_i+0x188>
 800532a:	065f      	lsls	r7, r3, #25
 800532c:	bf48      	it	mi
 800532e:	b2ad      	uxthmi	r5, r5
 8005330:	6031      	str	r1, [r6, #0]
 8005332:	07d9      	lsls	r1, r3, #31
 8005334:	bf44      	itt	mi
 8005336:	f043 0320 	orrmi.w	r3, r3, #32
 800533a:	6023      	strmi	r3, [r4, #0]
 800533c:	b11d      	cbz	r5, 8005346 <_printf_i+0x19e>
 800533e:	2310      	movs	r3, #16
 8005340:	e7ac      	b.n	800529c <_printf_i+0xf4>
 8005342:	4827      	ldr	r0, [pc, #156]	@ (80053e0 <_printf_i+0x238>)
 8005344:	e7e9      	b.n	800531a <_printf_i+0x172>
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	f023 0320 	bic.w	r3, r3, #32
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	e7f6      	b.n	800533e <_printf_i+0x196>
 8005350:	4616      	mov	r6, r2
 8005352:	e7bd      	b.n	80052d0 <_printf_i+0x128>
 8005354:	6833      	ldr	r3, [r6, #0]
 8005356:	6825      	ldr	r5, [r4, #0]
 8005358:	6961      	ldr	r1, [r4, #20]
 800535a:	1d18      	adds	r0, r3, #4
 800535c:	6030      	str	r0, [r6, #0]
 800535e:	062e      	lsls	r6, r5, #24
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	d501      	bpl.n	8005368 <_printf_i+0x1c0>
 8005364:	6019      	str	r1, [r3, #0]
 8005366:	e002      	b.n	800536e <_printf_i+0x1c6>
 8005368:	0668      	lsls	r0, r5, #25
 800536a:	d5fb      	bpl.n	8005364 <_printf_i+0x1bc>
 800536c:	8019      	strh	r1, [r3, #0]
 800536e:	2300      	movs	r3, #0
 8005370:	6123      	str	r3, [r4, #16]
 8005372:	4616      	mov	r6, r2
 8005374:	e7bc      	b.n	80052f0 <_printf_i+0x148>
 8005376:	6833      	ldr	r3, [r6, #0]
 8005378:	1d1a      	adds	r2, r3, #4
 800537a:	6032      	str	r2, [r6, #0]
 800537c:	681e      	ldr	r6, [r3, #0]
 800537e:	6862      	ldr	r2, [r4, #4]
 8005380:	2100      	movs	r1, #0
 8005382:	4630      	mov	r0, r6
 8005384:	f7fa ff24 	bl	80001d0 <memchr>
 8005388:	b108      	cbz	r0, 800538e <_printf_i+0x1e6>
 800538a:	1b80      	subs	r0, r0, r6
 800538c:	6060      	str	r0, [r4, #4]
 800538e:	6863      	ldr	r3, [r4, #4]
 8005390:	6123      	str	r3, [r4, #16]
 8005392:	2300      	movs	r3, #0
 8005394:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005398:	e7aa      	b.n	80052f0 <_printf_i+0x148>
 800539a:	6923      	ldr	r3, [r4, #16]
 800539c:	4632      	mov	r2, r6
 800539e:	4649      	mov	r1, r9
 80053a0:	4640      	mov	r0, r8
 80053a2:	47d0      	blx	sl
 80053a4:	3001      	adds	r0, #1
 80053a6:	d0ad      	beq.n	8005304 <_printf_i+0x15c>
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	079b      	lsls	r3, r3, #30
 80053ac:	d413      	bmi.n	80053d6 <_printf_i+0x22e>
 80053ae:	68e0      	ldr	r0, [r4, #12]
 80053b0:	9b03      	ldr	r3, [sp, #12]
 80053b2:	4298      	cmp	r0, r3
 80053b4:	bfb8      	it	lt
 80053b6:	4618      	movlt	r0, r3
 80053b8:	e7a6      	b.n	8005308 <_printf_i+0x160>
 80053ba:	2301      	movs	r3, #1
 80053bc:	4632      	mov	r2, r6
 80053be:	4649      	mov	r1, r9
 80053c0:	4640      	mov	r0, r8
 80053c2:	47d0      	blx	sl
 80053c4:	3001      	adds	r0, #1
 80053c6:	d09d      	beq.n	8005304 <_printf_i+0x15c>
 80053c8:	3501      	adds	r5, #1
 80053ca:	68e3      	ldr	r3, [r4, #12]
 80053cc:	9903      	ldr	r1, [sp, #12]
 80053ce:	1a5b      	subs	r3, r3, r1
 80053d0:	42ab      	cmp	r3, r5
 80053d2:	dcf2      	bgt.n	80053ba <_printf_i+0x212>
 80053d4:	e7eb      	b.n	80053ae <_printf_i+0x206>
 80053d6:	2500      	movs	r5, #0
 80053d8:	f104 0619 	add.w	r6, r4, #25
 80053dc:	e7f5      	b.n	80053ca <_printf_i+0x222>
 80053de:	bf00      	nop
 80053e0:	08021aa5 	.word	0x08021aa5
 80053e4:	08021ab6 	.word	0x08021ab6

080053e8 <__sflush_r>:
 80053e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f0:	0716      	lsls	r6, r2, #28
 80053f2:	4605      	mov	r5, r0
 80053f4:	460c      	mov	r4, r1
 80053f6:	d454      	bmi.n	80054a2 <__sflush_r+0xba>
 80053f8:	684b      	ldr	r3, [r1, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	dc02      	bgt.n	8005404 <__sflush_r+0x1c>
 80053fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	dd48      	ble.n	8005496 <__sflush_r+0xae>
 8005404:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005406:	2e00      	cmp	r6, #0
 8005408:	d045      	beq.n	8005496 <__sflush_r+0xae>
 800540a:	2300      	movs	r3, #0
 800540c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005410:	682f      	ldr	r7, [r5, #0]
 8005412:	6a21      	ldr	r1, [r4, #32]
 8005414:	602b      	str	r3, [r5, #0]
 8005416:	d030      	beq.n	800547a <__sflush_r+0x92>
 8005418:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800541a:	89a3      	ldrh	r3, [r4, #12]
 800541c:	0759      	lsls	r1, r3, #29
 800541e:	d505      	bpl.n	800542c <__sflush_r+0x44>
 8005420:	6863      	ldr	r3, [r4, #4]
 8005422:	1ad2      	subs	r2, r2, r3
 8005424:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005426:	b10b      	cbz	r3, 800542c <__sflush_r+0x44>
 8005428:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800542a:	1ad2      	subs	r2, r2, r3
 800542c:	2300      	movs	r3, #0
 800542e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005430:	6a21      	ldr	r1, [r4, #32]
 8005432:	4628      	mov	r0, r5
 8005434:	47b0      	blx	r6
 8005436:	1c43      	adds	r3, r0, #1
 8005438:	89a3      	ldrh	r3, [r4, #12]
 800543a:	d106      	bne.n	800544a <__sflush_r+0x62>
 800543c:	6829      	ldr	r1, [r5, #0]
 800543e:	291d      	cmp	r1, #29
 8005440:	d82b      	bhi.n	800549a <__sflush_r+0xb2>
 8005442:	4a2a      	ldr	r2, [pc, #168]	@ (80054ec <__sflush_r+0x104>)
 8005444:	410a      	asrs	r2, r1
 8005446:	07d6      	lsls	r6, r2, #31
 8005448:	d427      	bmi.n	800549a <__sflush_r+0xb2>
 800544a:	2200      	movs	r2, #0
 800544c:	6062      	str	r2, [r4, #4]
 800544e:	04d9      	lsls	r1, r3, #19
 8005450:	6922      	ldr	r2, [r4, #16]
 8005452:	6022      	str	r2, [r4, #0]
 8005454:	d504      	bpl.n	8005460 <__sflush_r+0x78>
 8005456:	1c42      	adds	r2, r0, #1
 8005458:	d101      	bne.n	800545e <__sflush_r+0x76>
 800545a:	682b      	ldr	r3, [r5, #0]
 800545c:	b903      	cbnz	r3, 8005460 <__sflush_r+0x78>
 800545e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005460:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005462:	602f      	str	r7, [r5, #0]
 8005464:	b1b9      	cbz	r1, 8005496 <__sflush_r+0xae>
 8005466:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800546a:	4299      	cmp	r1, r3
 800546c:	d002      	beq.n	8005474 <__sflush_r+0x8c>
 800546e:	4628      	mov	r0, r5
 8005470:	f7ff fbf2 	bl	8004c58 <_free_r>
 8005474:	2300      	movs	r3, #0
 8005476:	6363      	str	r3, [r4, #52]	@ 0x34
 8005478:	e00d      	b.n	8005496 <__sflush_r+0xae>
 800547a:	2301      	movs	r3, #1
 800547c:	4628      	mov	r0, r5
 800547e:	47b0      	blx	r6
 8005480:	4602      	mov	r2, r0
 8005482:	1c50      	adds	r0, r2, #1
 8005484:	d1c9      	bne.n	800541a <__sflush_r+0x32>
 8005486:	682b      	ldr	r3, [r5, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0c6      	beq.n	800541a <__sflush_r+0x32>
 800548c:	2b1d      	cmp	r3, #29
 800548e:	d001      	beq.n	8005494 <__sflush_r+0xac>
 8005490:	2b16      	cmp	r3, #22
 8005492:	d11e      	bne.n	80054d2 <__sflush_r+0xea>
 8005494:	602f      	str	r7, [r5, #0]
 8005496:	2000      	movs	r0, #0
 8005498:	e022      	b.n	80054e0 <__sflush_r+0xf8>
 800549a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800549e:	b21b      	sxth	r3, r3
 80054a0:	e01b      	b.n	80054da <__sflush_r+0xf2>
 80054a2:	690f      	ldr	r7, [r1, #16]
 80054a4:	2f00      	cmp	r7, #0
 80054a6:	d0f6      	beq.n	8005496 <__sflush_r+0xae>
 80054a8:	0793      	lsls	r3, r2, #30
 80054aa:	680e      	ldr	r6, [r1, #0]
 80054ac:	bf08      	it	eq
 80054ae:	694b      	ldreq	r3, [r1, #20]
 80054b0:	600f      	str	r7, [r1, #0]
 80054b2:	bf18      	it	ne
 80054b4:	2300      	movne	r3, #0
 80054b6:	eba6 0807 	sub.w	r8, r6, r7
 80054ba:	608b      	str	r3, [r1, #8]
 80054bc:	f1b8 0f00 	cmp.w	r8, #0
 80054c0:	dde9      	ble.n	8005496 <__sflush_r+0xae>
 80054c2:	6a21      	ldr	r1, [r4, #32]
 80054c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80054c6:	4643      	mov	r3, r8
 80054c8:	463a      	mov	r2, r7
 80054ca:	4628      	mov	r0, r5
 80054cc:	47b0      	blx	r6
 80054ce:	2800      	cmp	r0, #0
 80054d0:	dc08      	bgt.n	80054e4 <__sflush_r+0xfc>
 80054d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054da:	81a3      	strh	r3, [r4, #12]
 80054dc:	f04f 30ff 	mov.w	r0, #4294967295
 80054e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054e4:	4407      	add	r7, r0
 80054e6:	eba8 0800 	sub.w	r8, r8, r0
 80054ea:	e7e7      	b.n	80054bc <__sflush_r+0xd4>
 80054ec:	dfbffffe 	.word	0xdfbffffe

080054f0 <_fflush_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	690b      	ldr	r3, [r1, #16]
 80054f4:	4605      	mov	r5, r0
 80054f6:	460c      	mov	r4, r1
 80054f8:	b913      	cbnz	r3, 8005500 <_fflush_r+0x10>
 80054fa:	2500      	movs	r5, #0
 80054fc:	4628      	mov	r0, r5
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	b118      	cbz	r0, 800550a <_fflush_r+0x1a>
 8005502:	6a03      	ldr	r3, [r0, #32]
 8005504:	b90b      	cbnz	r3, 800550a <_fflush_r+0x1a>
 8005506:	f7ff fa9f 	bl	8004a48 <__sinit>
 800550a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f3      	beq.n	80054fa <_fflush_r+0xa>
 8005512:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005514:	07d0      	lsls	r0, r2, #31
 8005516:	d404      	bmi.n	8005522 <_fflush_r+0x32>
 8005518:	0599      	lsls	r1, r3, #22
 800551a:	d402      	bmi.n	8005522 <_fflush_r+0x32>
 800551c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800551e:	f7ff fb98 	bl	8004c52 <__retarget_lock_acquire_recursive>
 8005522:	4628      	mov	r0, r5
 8005524:	4621      	mov	r1, r4
 8005526:	f7ff ff5f 	bl	80053e8 <__sflush_r>
 800552a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800552c:	07da      	lsls	r2, r3, #31
 800552e:	4605      	mov	r5, r0
 8005530:	d4e4      	bmi.n	80054fc <_fflush_r+0xc>
 8005532:	89a3      	ldrh	r3, [r4, #12]
 8005534:	059b      	lsls	r3, r3, #22
 8005536:	d4e1      	bmi.n	80054fc <_fflush_r+0xc>
 8005538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800553a:	f7ff fb8b 	bl	8004c54 <__retarget_lock_release_recursive>
 800553e:	e7dd      	b.n	80054fc <_fflush_r+0xc>

08005540 <__swbuf_r>:
 8005540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005542:	460e      	mov	r6, r1
 8005544:	4614      	mov	r4, r2
 8005546:	4605      	mov	r5, r0
 8005548:	b118      	cbz	r0, 8005552 <__swbuf_r+0x12>
 800554a:	6a03      	ldr	r3, [r0, #32]
 800554c:	b90b      	cbnz	r3, 8005552 <__swbuf_r+0x12>
 800554e:	f7ff fa7b 	bl	8004a48 <__sinit>
 8005552:	69a3      	ldr	r3, [r4, #24]
 8005554:	60a3      	str	r3, [r4, #8]
 8005556:	89a3      	ldrh	r3, [r4, #12]
 8005558:	071a      	lsls	r2, r3, #28
 800555a:	d501      	bpl.n	8005560 <__swbuf_r+0x20>
 800555c:	6923      	ldr	r3, [r4, #16]
 800555e:	b943      	cbnz	r3, 8005572 <__swbuf_r+0x32>
 8005560:	4621      	mov	r1, r4
 8005562:	4628      	mov	r0, r5
 8005564:	f000 f82a 	bl	80055bc <__swsetup_r>
 8005568:	b118      	cbz	r0, 8005572 <__swbuf_r+0x32>
 800556a:	f04f 37ff 	mov.w	r7, #4294967295
 800556e:	4638      	mov	r0, r7
 8005570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	6922      	ldr	r2, [r4, #16]
 8005576:	1a98      	subs	r0, r3, r2
 8005578:	6963      	ldr	r3, [r4, #20]
 800557a:	b2f6      	uxtb	r6, r6
 800557c:	4283      	cmp	r3, r0
 800557e:	4637      	mov	r7, r6
 8005580:	dc05      	bgt.n	800558e <__swbuf_r+0x4e>
 8005582:	4621      	mov	r1, r4
 8005584:	4628      	mov	r0, r5
 8005586:	f7ff ffb3 	bl	80054f0 <_fflush_r>
 800558a:	2800      	cmp	r0, #0
 800558c:	d1ed      	bne.n	800556a <__swbuf_r+0x2a>
 800558e:	68a3      	ldr	r3, [r4, #8]
 8005590:	3b01      	subs	r3, #1
 8005592:	60a3      	str	r3, [r4, #8]
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	6022      	str	r2, [r4, #0]
 800559a:	701e      	strb	r6, [r3, #0]
 800559c:	6962      	ldr	r2, [r4, #20]
 800559e:	1c43      	adds	r3, r0, #1
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d004      	beq.n	80055ae <__swbuf_r+0x6e>
 80055a4:	89a3      	ldrh	r3, [r4, #12]
 80055a6:	07db      	lsls	r3, r3, #31
 80055a8:	d5e1      	bpl.n	800556e <__swbuf_r+0x2e>
 80055aa:	2e0a      	cmp	r6, #10
 80055ac:	d1df      	bne.n	800556e <__swbuf_r+0x2e>
 80055ae:	4621      	mov	r1, r4
 80055b0:	4628      	mov	r0, r5
 80055b2:	f7ff ff9d 	bl	80054f0 <_fflush_r>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d0d9      	beq.n	800556e <__swbuf_r+0x2e>
 80055ba:	e7d6      	b.n	800556a <__swbuf_r+0x2a>

080055bc <__swsetup_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	4b29      	ldr	r3, [pc, #164]	@ (8005664 <__swsetup_r+0xa8>)
 80055c0:	4605      	mov	r5, r0
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	460c      	mov	r4, r1
 80055c6:	b118      	cbz	r0, 80055d0 <__swsetup_r+0x14>
 80055c8:	6a03      	ldr	r3, [r0, #32]
 80055ca:	b90b      	cbnz	r3, 80055d0 <__swsetup_r+0x14>
 80055cc:	f7ff fa3c 	bl	8004a48 <__sinit>
 80055d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055d4:	0719      	lsls	r1, r3, #28
 80055d6:	d422      	bmi.n	800561e <__swsetup_r+0x62>
 80055d8:	06da      	lsls	r2, r3, #27
 80055da:	d407      	bmi.n	80055ec <__swsetup_r+0x30>
 80055dc:	2209      	movs	r2, #9
 80055de:	602a      	str	r2, [r5, #0]
 80055e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055e4:	81a3      	strh	r3, [r4, #12]
 80055e6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ea:	e033      	b.n	8005654 <__swsetup_r+0x98>
 80055ec:	0758      	lsls	r0, r3, #29
 80055ee:	d512      	bpl.n	8005616 <__swsetup_r+0x5a>
 80055f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055f2:	b141      	cbz	r1, 8005606 <__swsetup_r+0x4a>
 80055f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055f8:	4299      	cmp	r1, r3
 80055fa:	d002      	beq.n	8005602 <__swsetup_r+0x46>
 80055fc:	4628      	mov	r0, r5
 80055fe:	f7ff fb2b 	bl	8004c58 <_free_r>
 8005602:	2300      	movs	r3, #0
 8005604:	6363      	str	r3, [r4, #52]	@ 0x34
 8005606:	89a3      	ldrh	r3, [r4, #12]
 8005608:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800560c:	81a3      	strh	r3, [r4, #12]
 800560e:	2300      	movs	r3, #0
 8005610:	6063      	str	r3, [r4, #4]
 8005612:	6923      	ldr	r3, [r4, #16]
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	89a3      	ldrh	r3, [r4, #12]
 8005618:	f043 0308 	orr.w	r3, r3, #8
 800561c:	81a3      	strh	r3, [r4, #12]
 800561e:	6923      	ldr	r3, [r4, #16]
 8005620:	b94b      	cbnz	r3, 8005636 <__swsetup_r+0x7a>
 8005622:	89a3      	ldrh	r3, [r4, #12]
 8005624:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800562c:	d003      	beq.n	8005636 <__swsetup_r+0x7a>
 800562e:	4621      	mov	r1, r4
 8005630:	4628      	mov	r0, r5
 8005632:	f000 f84f 	bl	80056d4 <__smakebuf_r>
 8005636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800563a:	f013 0201 	ands.w	r2, r3, #1
 800563e:	d00a      	beq.n	8005656 <__swsetup_r+0x9a>
 8005640:	2200      	movs	r2, #0
 8005642:	60a2      	str	r2, [r4, #8]
 8005644:	6962      	ldr	r2, [r4, #20]
 8005646:	4252      	negs	r2, r2
 8005648:	61a2      	str	r2, [r4, #24]
 800564a:	6922      	ldr	r2, [r4, #16]
 800564c:	b942      	cbnz	r2, 8005660 <__swsetup_r+0xa4>
 800564e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005652:	d1c5      	bne.n	80055e0 <__swsetup_r+0x24>
 8005654:	bd38      	pop	{r3, r4, r5, pc}
 8005656:	0799      	lsls	r1, r3, #30
 8005658:	bf58      	it	pl
 800565a:	6962      	ldrpl	r2, [r4, #20]
 800565c:	60a2      	str	r2, [r4, #8]
 800565e:	e7f4      	b.n	800564a <__swsetup_r+0x8e>
 8005660:	2000      	movs	r0, #0
 8005662:	e7f7      	b.n	8005654 <__swsetup_r+0x98>
 8005664:	20000018 	.word	0x20000018

08005668 <_sbrk_r>:
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	4d06      	ldr	r5, [pc, #24]	@ (8005684 <_sbrk_r+0x1c>)
 800566c:	2300      	movs	r3, #0
 800566e:	4604      	mov	r4, r0
 8005670:	4608      	mov	r0, r1
 8005672:	602b      	str	r3, [r5, #0]
 8005674:	f7fc fd2a 	bl	80020cc <_sbrk>
 8005678:	1c43      	adds	r3, r0, #1
 800567a:	d102      	bne.n	8005682 <_sbrk_r+0x1a>
 800567c:	682b      	ldr	r3, [r5, #0]
 800567e:	b103      	cbz	r3, 8005682 <_sbrk_r+0x1a>
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	bd38      	pop	{r3, r4, r5, pc}
 8005684:	20000230 	.word	0x20000230

08005688 <__swhatbuf_r>:
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	460c      	mov	r4, r1
 800568c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005690:	2900      	cmp	r1, #0
 8005692:	b096      	sub	sp, #88	@ 0x58
 8005694:	4615      	mov	r5, r2
 8005696:	461e      	mov	r6, r3
 8005698:	da0d      	bge.n	80056b6 <__swhatbuf_r+0x2e>
 800569a:	89a3      	ldrh	r3, [r4, #12]
 800569c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80056a0:	f04f 0100 	mov.w	r1, #0
 80056a4:	bf14      	ite	ne
 80056a6:	2340      	movne	r3, #64	@ 0x40
 80056a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80056ac:	2000      	movs	r0, #0
 80056ae:	6031      	str	r1, [r6, #0]
 80056b0:	602b      	str	r3, [r5, #0]
 80056b2:	b016      	add	sp, #88	@ 0x58
 80056b4:	bd70      	pop	{r4, r5, r6, pc}
 80056b6:	466a      	mov	r2, sp
 80056b8:	f000 f848 	bl	800574c <_fstat_r>
 80056bc:	2800      	cmp	r0, #0
 80056be:	dbec      	blt.n	800569a <__swhatbuf_r+0x12>
 80056c0:	9901      	ldr	r1, [sp, #4]
 80056c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80056c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80056ca:	4259      	negs	r1, r3
 80056cc:	4159      	adcs	r1, r3
 80056ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056d2:	e7eb      	b.n	80056ac <__swhatbuf_r+0x24>

080056d4 <__smakebuf_r>:
 80056d4:	898b      	ldrh	r3, [r1, #12]
 80056d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056d8:	079d      	lsls	r5, r3, #30
 80056da:	4606      	mov	r6, r0
 80056dc:	460c      	mov	r4, r1
 80056de:	d507      	bpl.n	80056f0 <__smakebuf_r+0x1c>
 80056e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	6123      	str	r3, [r4, #16]
 80056e8:	2301      	movs	r3, #1
 80056ea:	6163      	str	r3, [r4, #20]
 80056ec:	b003      	add	sp, #12
 80056ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056f0:	ab01      	add	r3, sp, #4
 80056f2:	466a      	mov	r2, sp
 80056f4:	f7ff ffc8 	bl	8005688 <__swhatbuf_r>
 80056f8:	9f00      	ldr	r7, [sp, #0]
 80056fa:	4605      	mov	r5, r0
 80056fc:	4639      	mov	r1, r7
 80056fe:	4630      	mov	r0, r6
 8005700:	f7ff fb16 	bl	8004d30 <_malloc_r>
 8005704:	b948      	cbnz	r0, 800571a <__smakebuf_r+0x46>
 8005706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800570a:	059a      	lsls	r2, r3, #22
 800570c:	d4ee      	bmi.n	80056ec <__smakebuf_r+0x18>
 800570e:	f023 0303 	bic.w	r3, r3, #3
 8005712:	f043 0302 	orr.w	r3, r3, #2
 8005716:	81a3      	strh	r3, [r4, #12]
 8005718:	e7e2      	b.n	80056e0 <__smakebuf_r+0xc>
 800571a:	89a3      	ldrh	r3, [r4, #12]
 800571c:	6020      	str	r0, [r4, #0]
 800571e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005722:	81a3      	strh	r3, [r4, #12]
 8005724:	9b01      	ldr	r3, [sp, #4]
 8005726:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800572a:	b15b      	cbz	r3, 8005744 <__smakebuf_r+0x70>
 800572c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005730:	4630      	mov	r0, r6
 8005732:	f000 f81d 	bl	8005770 <_isatty_r>
 8005736:	b128      	cbz	r0, 8005744 <__smakebuf_r+0x70>
 8005738:	89a3      	ldrh	r3, [r4, #12]
 800573a:	f023 0303 	bic.w	r3, r3, #3
 800573e:	f043 0301 	orr.w	r3, r3, #1
 8005742:	81a3      	strh	r3, [r4, #12]
 8005744:	89a3      	ldrh	r3, [r4, #12]
 8005746:	431d      	orrs	r5, r3
 8005748:	81a5      	strh	r5, [r4, #12]
 800574a:	e7cf      	b.n	80056ec <__smakebuf_r+0x18>

0800574c <_fstat_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	4d07      	ldr	r5, [pc, #28]	@ (800576c <_fstat_r+0x20>)
 8005750:	2300      	movs	r3, #0
 8005752:	4604      	mov	r4, r0
 8005754:	4608      	mov	r0, r1
 8005756:	4611      	mov	r1, r2
 8005758:	602b      	str	r3, [r5, #0]
 800575a:	f7fc fc8e 	bl	800207a <_fstat>
 800575e:	1c43      	adds	r3, r0, #1
 8005760:	d102      	bne.n	8005768 <_fstat_r+0x1c>
 8005762:	682b      	ldr	r3, [r5, #0]
 8005764:	b103      	cbz	r3, 8005768 <_fstat_r+0x1c>
 8005766:	6023      	str	r3, [r4, #0]
 8005768:	bd38      	pop	{r3, r4, r5, pc}
 800576a:	bf00      	nop
 800576c:	20000230 	.word	0x20000230

08005770 <_isatty_r>:
 8005770:	b538      	push	{r3, r4, r5, lr}
 8005772:	4d06      	ldr	r5, [pc, #24]	@ (800578c <_isatty_r+0x1c>)
 8005774:	2300      	movs	r3, #0
 8005776:	4604      	mov	r4, r0
 8005778:	4608      	mov	r0, r1
 800577a:	602b      	str	r3, [r5, #0]
 800577c:	f7fc fc8d 	bl	800209a <_isatty>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d102      	bne.n	800578a <_isatty_r+0x1a>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	b103      	cbz	r3, 800578a <_isatty_r+0x1a>
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	20000230 	.word	0x20000230

08005790 <_init>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	bf00      	nop
 8005794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005796:	bc08      	pop	{r3}
 8005798:	469e      	mov	lr, r3
 800579a:	4770      	bx	lr

0800579c <_fini>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	bf00      	nop
 80057a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a2:	bc08      	pop	{r3}
 80057a4:	469e      	mov	lr, r3
 80057a6:	4770      	bx	lr
