
007_Tilt_LED_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005270  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08005400  08005400  00006400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800559c  0800559c  00007078  2**0
                  CONTENTS
  4 .ARM          00000008  0800559c  0800559c  0000659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055a4  080055a4  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055a4  080055a4  000065a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055a8  080055a8  000065a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080055ac  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007078  2**0
                  CONTENTS
 10 .bss          000001d8  20000078  20000078  00007078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000250  20000250  00007078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008a5c  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b4f  00000000  00000000  0000fb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  00011658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000637  00000000  00000000  00011ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dcce  00000000  00000000  000124df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c596  00000000  00000000  000301ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000abb9d  00000000  00000000  0003c743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e82e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002aec  00000000  00000000  000e8324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  000eae10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053e8 	.word	0x080053e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080053e8 	.word	0x080053e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <led_on>:
  * @brief Turns on or off LEDs based on the condition of degree x and y.
  * @param None
  * @retval None
  */
void led_on()
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Turn on LED on pin PA2 if degreey is greater than 10 */
  if(degreey > 10) {
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <led_on+0xb0>)
 8000b4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b52:	f04f 0200 	mov.w	r2, #0
 8000b56:	4b29      	ldr	r3, [pc, #164]	@ (8000bfc <led_on+0xb4>)
 8000b58:	f7ff ffd6 	bl	8000b08 <__aeabi_dcmpgt>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d006      	beq.n	8000b70 <led_on+0x28>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	2104      	movs	r1, #4
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b6a:	f000 ff65 	bl	8001a38 <HAL_GPIO_WritePin>
 8000b6e:	e005      	b.n	8000b7c <led_on+0x34>
  } else {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2104      	movs	r1, #4
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b78:	f000 ff5e 	bl	8001a38 <HAL_GPIO_WritePin>
  }
  /* Turn on LED on pin PA3 if degreex is greater than 25 or less than -25 */
  if( (degreex > 25) || (degreex < -25)) {
 8000b7c:	4b20      	ldr	r3, [pc, #128]	@ (8000c00 <led_on+0xb8>)
 8000b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b82:	f04f 0200 	mov.w	r2, #0
 8000b86:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <led_on+0xbc>)
 8000b88:	f7ff ffbe 	bl	8000b08 <__aeabi_dcmpgt>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d10a      	bne.n	8000ba8 <led_on+0x60>
 8000b92:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <led_on+0xb8>)
 8000b94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b98:	f04f 0200 	mov.w	r2, #0
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <led_on+0xc0>)
 8000b9e:	f7ff ff95 	bl	8000acc <__aeabi_dcmplt>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d006      	beq.n	8000bb6 <led_on+0x6e>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2108      	movs	r1, #8
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb0:	f000 ff42 	bl	8001a38 <HAL_GPIO_WritePin>
 8000bb4:	e005      	b.n	8000bc2 <led_on+0x7a>
  } else {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2108      	movs	r1, #8
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bbe:	f000 ff3b 	bl	8001a38 <HAL_GPIO_WritePin>
  }
  /* Turn on LED on pin PA1 if degreey is less than -10 */
  if(degreey < -10) {
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <led_on+0xb0>)
 8000bc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bc8:	f04f 0200 	mov.w	r2, #0
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <led_on+0xc4>)
 8000bce:	f7ff ff7d 	bl	8000acc <__aeabi_dcmplt>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d006      	beq.n	8000be6 <led_on+0x9e>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2102      	movs	r1, #2
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be0:	f000 ff2a 	bl	8001a38 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
  }
}
 8000be4:	e005      	b.n	8000bf2 <led_on+0xaa>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2102      	movs	r1, #2
 8000bea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bee:	f000 ff23 	bl	8001a38 <HAL_GPIO_WritePin>
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000f0 	.word	0x200000f0
 8000bfc:	40240000 	.word	0x40240000
 8000c00:	200000e8 	.word	0x200000e8
 8000c04:	40390000 	.word	0x40390000
 8000c08:	c0390000 	.word	0xc0390000
 8000c0c:	c0240000 	.word	0xc0240000

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c14:	f000 fc4a 	bl	80014ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c18:	f000 f80c 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1c:	f000 f8ac 	bl	8000d78 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c20:	f000 f864 	bl	8000cec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the MPU6050 sensor */
  mpu6050_init();
 8000c24:	f000 f8f8 	bl	8000e18 <mpu6050_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* Read sensor data from the MPU6050 */
    mpu6050_read();
 8000c28:	f000 f97a 	bl	8000f20 <mpu6050_read>
    /* Check conditions to turn on/off LEDs based on sensor readings */
    led_on();
 8000c2c:	f7ff ff8c 	bl	8000b48 <led_on>
    mpu6050_read();
 8000c30:	bf00      	nop
 8000c32:	e7f9      	b.n	8000c28 <main+0x18>

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b09e      	sub	sp, #120	@ 0x78
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c3e:	2228      	movs	r2, #40	@ 0x28
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 fafc 	bl	8004240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c58:	463b      	mov	r3, r7
 8000c5a:	223c      	movs	r2, #60	@ 0x3c
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 faee 	bl	8004240 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c64:	2303      	movs	r3, #3
 8000c66:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c6c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c72:	2301      	movs	r3, #1
 8000c74:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c76:	2310      	movs	r3, #16
 8000c78:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c82:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c84:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c88:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fd0e 	bl	80026b0 <HAL_RCC_OscConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c9a:	f000 f8b7 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9e:	230f      	movs	r3, #15
 8000ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000cb8:	2102      	movs	r1, #2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f002 fd36 	bl	800372c <HAL_RCC_ClockConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cc6:	f000 f8a1 	bl	8000e0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cca:	2320      	movs	r3, #32
 8000ccc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 fef9 	bl	8003acc <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000ce0:	f000 f894 	bl	8000e0c <Error_Handler>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3778      	adds	r7, #120	@ 0x78
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d6c <MX_I2C1_Init+0x80>)
 8000cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8000d70 <MX_I2C1_Init+0x84>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000001;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <MX_I2C1_Init+0x80>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d6c <MX_I2C1_Init+0x80>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <MX_I2C1_Init+0x80>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d08:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <MX_I2C1_Init+0x80>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <MX_I2C1_Init+0x80>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <MX_I2C1_Init+0x80>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <MX_I2C1_Init+0x80>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <MX_I2C1_Init+0x80>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d26:	4811      	ldr	r0, [pc, #68]	@ (8000d6c <MX_I2C1_Init+0x80>)
 8000d28:	f000 fe9e 	bl	8001a68 <HAL_I2C_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d32:	f000 f86b 	bl	8000e0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d36:	2100      	movs	r1, #0
 8000d38:	480c      	ldr	r0, [pc, #48]	@ (8000d6c <MX_I2C1_Init+0x80>)
 8000d3a:	f001 fc21 	bl	8002580 <HAL_I2CEx_ConfigAnalogFilter>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d44:	f000 f862 	bl	8000e0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4808      	ldr	r0, [pc, #32]	@ (8000d6c <MX_I2C1_Init+0x80>)
 8000d4c:	f001 fc63 	bl	8002616 <HAL_I2CEx_ConfigDigitalFilter>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f000 f859 	bl	8000e0c <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <MX_I2C1_Init+0x88>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <MX_I2C1_Init+0x88>)
 8000d60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d64:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000094 	.word	0x20000094
 8000d70:	40005400 	.word	0x40005400
 8000d74:	40010000 	.word	0x40010000

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e08 <MX_GPIO_Init+0x90>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	4a1d      	ldr	r2, [pc, #116]	@ (8000e08 <MX_GPIO_Init+0x90>)
 8000d94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d98:	6153      	str	r3, [r2, #20]
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <MX_GPIO_Init+0x90>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <MX_GPIO_Init+0x90>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	4a17      	ldr	r2, [pc, #92]	@ (8000e08 <MX_GPIO_Init+0x90>)
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db0:	6153      	str	r3, [r2, #20]
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <MX_GPIO_Init+0x90>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <MX_GPIO_Init+0x90>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	4a11      	ldr	r2, [pc, #68]	@ (8000e08 <MX_GPIO_Init+0x90>)
 8000dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dc8:	6153      	str	r3, [r2, #20]
 8000dca:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <MX_GPIO_Init+0x90>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	210e      	movs	r1, #14
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dde:	f000 fe2b 	bl	8001a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000de2:	230e      	movs	r3, #14
 8000de4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfc:	f000 fca2 	bl	8001744 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e00:	bf00      	nop
 8000e02:	3720      	adds	r7, #32
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40021000 	.word	0x40021000

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <Error_Handler+0x8>

08000e18 <mpu6050_init>:
/**
  * @brief Initializes the MPU6050 sensor by configuring power management, gyroscope, and accelerometer.
  * @param None
  * @retval None
  */
void mpu6050_init() {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  PowerManagement_Config();
 8000e1c:	f000 f806 	bl	8000e2c <PowerManagement_Config>
  Gyro_Config();
 8000e20:	f000 f82c 	bl	8000e7c <Gyro_Config>
  Accelerometer_Config();
 8000e24:	f000 f852 	bl	8000ecc <Accelerometer_Config>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <PowerManagement_Config>:
  * @brief Configures the power management settings of the MPU6050 sensor to exit sleep mode.
  * @param None
  * @retval None
  */
void PowerManagement_Config()
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af04      	add	r7, sp, #16
  /* Set the value to be written to the power management register */
  temp_data = 0x00;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <PowerManagement_Config+0x40>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]

  /* Write the value to the power management register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_USR_CTRL, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3c:	9302      	str	r3, [sp, #8]
 8000e3e:	2301      	movs	r3, #1
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <PowerManagement_Config+0x40>)
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2301      	movs	r3, #1
 8000e48:	226b      	movs	r2, #107	@ 0x6b
 8000e4a:	21d0      	movs	r1, #208	@ 0xd0
 8000e4c:	4808      	ldr	r0, [pc, #32]	@ (8000e70 <PowerManagement_Config+0x44>)
 8000e4e:	f000 fea7 	bl	8001ba0 <HAL_I2C_Mem_Write>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d103      	bne.n	8000e60 <PowerManagement_Config+0x34>
    /*print in SWV terminal*/
    printf("Exiting from sleep mode...\n");
 8000e58:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <PowerManagement_Config+0x48>)
 8000e5a:	f003 f911 	bl	8004080 <puts>
  } else {
    printf("Failed to exit from sleep mode...\n");
  }
}
 8000e5e:	e002      	b.n	8000e66 <PowerManagement_Config+0x3a>
    printf("Failed to exit from sleep mode...\n");
 8000e60:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <PowerManagement_Config+0x4c>)
 8000e62:	f003 f90d 	bl	8004080 <puts>
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200000f8 	.word	0x200000f8
 8000e70:	20000094 	.word	0x20000094
 8000e74:	08005400 	.word	0x08005400
 8000e78:	0800541c 	.word	0x0800541c

08000e7c <Gyro_Config>:
  * @brief Configures the gyroscope settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Gyro_Config()
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af04      	add	r7, sp, #16
  /* Set the value to be written to the gyroscope configuration register */
  temp_data = FS_GYRO_500;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <Gyro_Config+0x40>)
 8000e84:	2208      	movs	r2, #8
 8000e86:	701a      	strb	r2, [r3, #0]

  /* Write the value to the gyroscope configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_GYRO, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8c:	9302      	str	r3, [sp, #8]
 8000e8e:	2301      	movs	r3, #1
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <Gyro_Config+0x40>)
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2301      	movs	r3, #1
 8000e98:	221b      	movs	r2, #27
 8000e9a:	21d0      	movs	r1, #208	@ 0xd0
 8000e9c:	4808      	ldr	r0, [pc, #32]	@ (8000ec0 <Gyro_Config+0x44>)
 8000e9e:	f000 fe7f 	bl	8001ba0 <HAL_I2C_Mem_Write>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d103      	bne.n	8000eb0 <Gyro_Config+0x34>
    printf("Configuring gyroscope...\n");
 8000ea8:	4806      	ldr	r0, [pc, #24]	@ (8000ec4 <Gyro_Config+0x48>)
 8000eaa:	f003 f8e9 	bl	8004080 <puts>
  } else {
    printf("Failed to configure gyroscope...\n");
  }
}
 8000eae:	e002      	b.n	8000eb6 <Gyro_Config+0x3a>
    printf("Failed to configure gyroscope...\n");
 8000eb0:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <Gyro_Config+0x4c>)
 8000eb2:	f003 f8e5 	bl	8004080 <puts>
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200000f8 	.word	0x200000f8
 8000ec0:	20000094 	.word	0x20000094
 8000ec4:	08005440 	.word	0x08005440
 8000ec8:	0800545c 	.word	0x0800545c

08000ecc <Accelerometer_Config>:
  * @brief Configures the accelerometer settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Accelerometer_Config()
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af04      	add	r7, sp, #16
  /* Set the value to be written to the accelerometer configuration register */
  temp_data = FS_ACC_4G;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <Accelerometer_Config+0x40>)
 8000ed4:	2208      	movs	r2, #8
 8000ed6:	701a      	strb	r2, [r3, #0]

  /* Write the value to the accelerometer configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_ACC, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <Accelerometer_Config+0x40>)
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	221c      	movs	r2, #28
 8000eea:	21d0      	movs	r1, #208	@ 0xd0
 8000eec:	4808      	ldr	r0, [pc, #32]	@ (8000f10 <Accelerometer_Config+0x44>)
 8000eee:	f000 fe57 	bl	8001ba0 <HAL_I2C_Mem_Write>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d103      	bne.n	8000f00 <Accelerometer_Config+0x34>
    printf("Configuring accelerometer...\n");
 8000ef8:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <Accelerometer_Config+0x48>)
 8000efa:	f003 f8c1 	bl	8004080 <puts>
  } else {
    printf("Failed to configure accelerometer...\n");
  }
}
 8000efe:	e002      	b.n	8000f06 <Accelerometer_Config+0x3a>
    printf("Failed to configure accelerometer...\n");
 8000f00:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <Accelerometer_Config+0x4c>)
 8000f02:	f003 f8bd 	bl	8004080 <puts>
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200000f8 	.word	0x200000f8
 8000f10:	20000094 	.word	0x20000094
 8000f14:	08005480 	.word	0x08005480
 8000f18:	080054a0 	.word	0x080054a0
 8000f1c:	00000000 	.word	0x00000000

08000f20 <mpu6050_read>:
  * @brief Reads data from the MPU6050 sensor, including accelerometer and gyroscope values,
  *        and calculates roll and pitch angles using the accelerometer data.
  * @param None
  * @retval None
  */
void mpu6050_read() {
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b0a2      	sub	sp, #136	@ 0x88
 8000f24:	af0a      	add	r7, sp, #40	@ 0x28
  int16_t x_gyro, y_gyro, z_gyro;           // Gyroscope data for x, y, and z axes
  double accx,accy,accz,gyrox,gyroy,gyroz;
  double radianx, radiany;

  /* Read all sensor data from the MPU6050 */
  HAL_I2C_Mem_Read(&hi2c1, (MPU6050_ADDR << 1), REG_DATA, 1, data, 14, HAL_MAX_DELAY);
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	230e      	movs	r3, #14
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	463b      	mov	r3, r7
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2301      	movs	r3, #1
 8000f36:	223b      	movs	r2, #59	@ 0x3b
 8000f38:	21d0      	movs	r1, #208	@ 0xd0
 8000f3a:	489b      	ldr	r0, [pc, #620]	@ (80011a8 <mpu6050_read+0x288>)
 8000f3c:	f000 ff44 	bl	8001dc8 <HAL_I2C_Mem_Read>

  /* Extract accelerometer data (16-bit 2's complement format, high byte first) */
  x_acc = (int16_t)((data[0] << 8) | data[1]);
 8000f40:	783b      	ldrb	r3, [r7, #0]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	787b      	ldrb	r3, [r7, #1]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  y_acc = (int16_t)((data[2] << 8) | data[3]);
 8000f50:	78bb      	ldrb	r3, [r7, #2]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	78fb      	ldrb	r3, [r7, #3]
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  z_acc = (int16_t)((data[4] << 8) | data[5]);
 8000f60:	793b      	ldrb	r3, [r7, #4]
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	797b      	ldrb	r3, [r7, #5]
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

  /* Extract gyroscope data (16-bit 2's complement format, high byte first) */
  x_gyro = (int16_t)((data[8] << 8) | data[9]);
 8000f70:	7a3b      	ldrb	r3, [r7, #8]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	7a7b      	ldrb	r3, [r7, #9]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  y_gyro = (int16_t)((data[10] << 8) | data[11]);
 8000f80:	7abb      	ldrb	r3, [r7, #10]
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	7afb      	ldrb	r3, [r7, #11]
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  z_gyro = (int16_t)((data[12] << 8) | data[13]);
 8000f90:	7b3b      	ldrb	r3, [r7, #12]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	7b7b      	ldrb	r3, [r7, #13]
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

  /*Convert accelerometer raw values in to 'g'(acceleration due to gravity) values */
  accx = (double)x_acc / ACC_FS_SENSITIVITY_3;
 8000fa0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fab5 	bl	8000514 <__aeabi_i2d>
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	4b7f      	ldr	r3, [pc, #508]	@ (80011ac <mpu6050_read+0x28c>)
 8000fb0:	f7ff fc44 	bl	800083c <__aeabi_ddiv>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  accy = (double)y_acc / ACC_FS_SENSITIVITY_3;
 8000fbc:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff faa7 	bl	8000514 <__aeabi_i2d>
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b78      	ldr	r3, [pc, #480]	@ (80011ac <mpu6050_read+0x28c>)
 8000fcc:	f7ff fc36 	bl	800083c <__aeabi_ddiv>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  accz = (double)z_acc / ACC_FS_SENSITIVITY_3;
 8000fd8:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fa99 	bl	8000514 <__aeabi_i2d>
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b71      	ldr	r3, [pc, #452]	@ (80011ac <mpu6050_read+0x28c>)
 8000fe8:	f7ff fc28 	bl	800083c <__aeabi_ddiv>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  /* Convert gyroscope raw values to degrees per second ('°/s') */
  gyrox = (double)x_gyro / GYR_FS_SENSITIVITY_3;
 8000ff4:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fa8b 	bl	8000514 <__aeabi_i2d>
 8000ffe:	a366      	add	r3, pc, #408	@ (adr r3, 8001198 <mpu6050_read+0x278>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	f7ff fc1a 	bl	800083c <__aeabi_ddiv>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  gyroy = (double)y_gyro / GYR_FS_SENSITIVITY_3;
 8001010:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fa7d 	bl	8000514 <__aeabi_i2d>
 800101a:	a35f      	add	r3, pc, #380	@ (adr r3, 8001198 <mpu6050_read+0x278>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	f7ff fc0c 	bl	800083c <__aeabi_ddiv>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  gyroz = (double)z_gyro / GYR_FS_SENSITIVITY_3;
 800102c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa6f 	bl	8000514 <__aeabi_i2d>
 8001036:	a358      	add	r3, pc, #352	@ (adr r3, 8001198 <mpu6050_read+0x278>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fbfe 	bl	800083c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	e9c7 2308 	strd	r2, r3, [r7, #32]

  /* Calculate roll and pitch angles using accelerometer data */
  radianx = asin(accx / sqrt(accx * accx + accz * accz)); // Fix the arguments passed to asin
 8001048:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800104c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001050:	f7ff faca 	bl	80005e8 <__aeabi_dmul>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4614      	mov	r4, r2
 800105a:	461d      	mov	r5, r3
 800105c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001060:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001064:	f7ff fac0 	bl	80005e8 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4620      	mov	r0, r4
 800106e:	4629      	mov	r1, r5
 8001070:	f7ff f904 	bl	800027c <__adddf3>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	ec43 2b17 	vmov	d7, r2, r3
 800107c:	eeb0 0a47 	vmov.f32	s0, s14
 8001080:	eef0 0a67 	vmov.f32	s1, s15
 8001084:	f003 fe94 	bl	8004db0 <sqrt>
 8001088:	ec53 2b10 	vmov	r2, r3, d0
 800108c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001090:	f7ff fbd4 	bl	800083c <__aeabi_ddiv>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	ec43 2b17 	vmov	d7, r2, r3
 800109c:	eeb0 0a47 	vmov.f32	s0, s14
 80010a0:	eef0 0a67 	vmov.f32	s1, s15
 80010a4:	f003 fe50 	bl	8004d48 <asin>
 80010a8:	ed87 0b06 	vstr	d0, [r7, #24]
  radiany = asin(accy / sqrt(accy * accy + accz * accz)); // Fix the arguments passed to asin
 80010ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80010b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80010b4:	f7ff fa98 	bl	80005e8 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4614      	mov	r4, r2
 80010be:	461d      	mov	r5, r3
 80010c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80010c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80010c8:	f7ff fa8e 	bl	80005e8 <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4620      	mov	r0, r4
 80010d2:	4629      	mov	r1, r5
 80010d4:	f7ff f8d2 	bl	800027c <__adddf3>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	ec43 2b17 	vmov	d7, r2, r3
 80010e0:	eeb0 0a47 	vmov.f32	s0, s14
 80010e4:	eef0 0a67 	vmov.f32	s1, s15
 80010e8:	f003 fe62 	bl	8004db0 <sqrt>
 80010ec:	ec53 2b10 	vmov	r2, r3, d0
 80010f0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80010f4:	f7ff fba2 	bl	800083c <__aeabi_ddiv>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	ec43 2b17 	vmov	d7, r2, r3
 8001100:	eeb0 0a47 	vmov.f32	s0, s14
 8001104:	eef0 0a67 	vmov.f32	s1, s15
 8001108:	f003 fe1e 	bl	8004d48 <asin>
 800110c:	ed87 0b04 	vstr	d0, [r7, #16]

  /* Convert roll and pitch angles from radians to degrees */
  degreex = radianx * (180.0 / M_PI); // Roll
 8001110:	a323      	add	r3, pc, #140	@ (adr r3, 80011a0 <mpu6050_read+0x280>)
 8001112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001116:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800111a:	f7ff fa65 	bl	80005e8 <__aeabi_dmul>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4923      	ldr	r1, [pc, #140]	@ (80011b0 <mpu6050_read+0x290>)
 8001124:	e9c1 2300 	strd	r2, r3, [r1]
  degreey = radiany * (180.0 / M_PI); // Pitch
 8001128:	a31d      	add	r3, pc, #116	@ (adr r3, 80011a0 <mpu6050_read+0x280>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001132:	f7ff fa59 	bl	80005e8 <__aeabi_dmul>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	491e      	ldr	r1, [pc, #120]	@ (80011b4 <mpu6050_read+0x294>)
 800113c:	e9c1 2300 	strd	r2, r3, [r1]

  /* Print out the accelerometer and gyroscope values along with roll and pitch angles in SWV terminal */
  printf("Acc(g)=> X:%.2f Y:%.2f Z:%.2f   Gyro(dps)=> X:%.2f Y:%.2f Z:%.2f\n", accx, accy, accz, gyrox, gyroy, gyroz);
 8001140:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001144:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001148:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800114c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001150:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001154:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001158:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800115c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001160:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001164:	e9cd 2300 	strd	r2, r3, [sp]
 8001168:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800116c:	4812      	ldr	r0, [pc, #72]	@ (80011b8 <mpu6050_read+0x298>)
 800116e:	f002 ff1f 	bl	8003fb0 <iprintf>
  printf("Roll: %.2f degrees, Pitch: %.2f degrees\n", degreex, degreey);
 8001172:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <mpu6050_read+0x290>)
 8001174:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <mpu6050_read+0x294>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	e9cd 2300 	strd	r2, r3, [sp]
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	480d      	ldr	r0, [pc, #52]	@ (80011bc <mpu6050_read+0x29c>)
 8001188:	f002 ff12 	bl	8003fb0 <iprintf>
}
 800118c:	bf00      	nop
 800118e:	3760      	adds	r7, #96	@ 0x60
 8001190:	46bd      	mov	sp, r7
 8001192:	bdb0      	pop	{r4, r5, r7, pc}
 8001194:	f3af 8000 	nop.w
 8001198:	66666666 	.word	0x66666666
 800119c:	40306666 	.word	0x40306666
 80011a0:	1a63c1f8 	.word	0x1a63c1f8
 80011a4:	404ca5dc 	.word	0x404ca5dc
 80011a8:	20000094 	.word	0x20000094
 80011ac:	40a00000 	.word	0x40a00000
 80011b0:	200000e8 	.word	0x200000e8
 80011b4:	200000f0 	.word	0x200000f0
 80011b8:	080054c8 	.word	0x080054c8
 80011bc:	0800550c 	.word	0x0800550c

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <HAL_MspInit+0x44>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <HAL_MspInit+0x44>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6193      	str	r3, [r2, #24]
 80011d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <HAL_MspInit+0x44>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <HAL_MspInit+0x44>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <HAL_MspInit+0x44>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_MspInit+0x44>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000

08001208 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a17      	ldr	r2, [pc, #92]	@ (8001284 <HAL_I2C_MspInit+0x7c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d127      	bne.n	800127a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <HAL_I2C_MspInit+0x80>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	4a16      	ldr	r2, [pc, #88]	@ (8001288 <HAL_I2C_MspInit+0x80>)
 8001230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001234:	6153      	str	r3, [r2, #20]
 8001236:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <HAL_I2C_MspInit+0x80>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001242:	23c0      	movs	r3, #192	@ 0xc0
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001246:	2312      	movs	r3, #18
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001252:	2304      	movs	r3, #4
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	480b      	ldr	r0, [pc, #44]	@ (800128c <HAL_I2C_MspInit+0x84>)
 800125e:	f000 fa71 	bl	8001744 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001262:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <HAL_I2C_MspInit+0x80>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4a08      	ldr	r2, [pc, #32]	@ (8001288 <HAL_I2C_MspInit+0x80>)
 8001268:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800126c:	61d3      	str	r3, [r2, #28]
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_I2C_MspInit+0x80>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	@ 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40005400 	.word	0x40005400
 8001288:	40021000 	.word	0x40021000
 800128c:	48000400 	.word	0x48000400

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <NMI_Handler+0x4>

08001298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <MemManage_Handler+0x4>

080012a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e6:	f000 f927 	bl	8001538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e00a      	b.n	8001316 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001300:	f3af 8000 	nop.w
 8001304:	4601      	mov	r1, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	60ba      	str	r2, [r7, #8]
 800130c:	b2ca      	uxtb	r2, r1
 800130e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3301      	adds	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	429a      	cmp	r2, r3
 800131c:	dbf0      	blt.n	8001300 <_read+0x12>
  }

  return len;
 800131e:	687b      	ldr	r3, [r7, #4]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e009      	b.n	800134e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	60ba      	str	r2, [r7, #8]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	429a      	cmp	r2, r3
 8001354:	dbf1      	blt.n	800133a <_write+0x12>
  }
  return len;
 8001356:	687b      	ldr	r3, [r7, #4]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <_close>:

int _close(int file)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001388:	605a      	str	r2, [r3, #4]
  return 0;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <_isatty>:

int _isatty(int file)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013a0:	2301      	movs	r3, #1
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b085      	sub	sp, #20
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d0:	4a14      	ldr	r2, [pc, #80]	@ (8001424 <_sbrk+0x5c>)
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <_sbrk+0x60>)
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013dc:	4b13      	ldr	r3, [pc, #76]	@ (800142c <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <_sbrk+0x64>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <_sbrk+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d207      	bcs.n	8001408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f8:	f002 ff70 	bl	80042dc <__errno>
 80013fc:	4603      	mov	r3, r0
 80013fe:	220c      	movs	r2, #12
 8001400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e009      	b.n	800141c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001408:	4b08      	ldr	r3, [pc, #32]	@ (800142c <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140e:	4b07      	ldr	r3, [pc, #28]	@ (800142c <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	4a05      	ldr	r2, [pc, #20]	@ (800142c <_sbrk+0x64>)
 8001418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141a:	68fb      	ldr	r3, [r7, #12]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000a000 	.word	0x2000a000
 8001428:	00000400 	.word	0x00000400
 800142c:	200000fc 	.word	0x200000fc
 8001430:	20000250 	.word	0x20000250

08001434 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <SystemInit+0x20>)
 800143a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800143e:	4a05      	ldr	r2, [pc, #20]	@ (8001454 <SystemInit+0x20>)
 8001440:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001444:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001458:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001490 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800145c:	f7ff ffea 	bl	8001434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001460:	480c      	ldr	r0, [pc, #48]	@ (8001494 <LoopForever+0x6>)
  ldr r1, =_edata
 8001462:	490d      	ldr	r1, [pc, #52]	@ (8001498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001464:	4a0d      	ldr	r2, [pc, #52]	@ (800149c <LoopForever+0xe>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001468:	e002      	b.n	8001470 <LoopCopyDataInit>

0800146a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800146c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146e:	3304      	adds	r3, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001474:	d3f9      	bcc.n	800146a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001476:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001478:	4c0a      	ldr	r4, [pc, #40]	@ (80014a4 <LoopForever+0x16>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800147c:	e001      	b.n	8001482 <LoopFillZerobss>

0800147e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001480:	3204      	adds	r2, #4

08001482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001484:	d3fb      	bcc.n	800147e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001486:	f002 ff2f 	bl	80042e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800148a:	f7ff fbc1 	bl	8000c10 <main>

0800148e <LoopForever>:

LoopForever:
    b LoopForever
 800148e:	e7fe      	b.n	800148e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001490:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001498:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800149c:	080055ac 	.word	0x080055ac
  ldr r2, =_sbss
 80014a0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80014a4:	20000250 	.word	0x20000250

080014a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014a8:	e7fe      	b.n	80014a8 <ADC1_2_IRQHandler>
	...

080014ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <HAL_Init+0x28>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a07      	ldr	r2, [pc, #28]	@ (80014d4 <HAL_Init+0x28>)
 80014b6:	f043 0310 	orr.w	r3, r3, #16
 80014ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014bc:	2003      	movs	r0, #3
 80014be:	f000 f90d 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c2:	200f      	movs	r0, #15
 80014c4:	f000 f808 	bl	80014d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c8:	f7ff fe7a 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40022000 	.word	0x40022000

080014d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_InitTick+0x54>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_InitTick+0x58>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f917 	bl	800172a <HAL_SYSTICK_Config>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e00e      	b.n	8001524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d80a      	bhi.n	8001522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800150c:	2200      	movs	r2, #0
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f000 f8ed 	bl	80016f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001518:	4a06      	ldr	r2, [pc, #24]	@ (8001534 <HAL_InitTick+0x5c>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	e000      	b.n	8001524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000000 	.word	0x20000000
 8001530:	20000008 	.word	0x20000008
 8001534:	20000004 	.word	0x20000004

08001538 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_IncTick+0x20>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_IncTick+0x24>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4413      	add	r3, r2
 8001548:	4a04      	ldr	r2, [pc, #16]	@ (800155c <HAL_IncTick+0x24>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000008 	.word	0x20000008
 800155c:	20000100 	.word	0x20000100

08001560 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;  
 8001564:	4b03      	ldr	r3, [pc, #12]	@ (8001574 <HAL_GetTick+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000100 	.word	0x20000100

08001578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001594:	4013      	ands	r3, r2
 8001596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015aa:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	60d3      	str	r3, [r2, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c4:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <__NVIC_GetPriorityGrouping+0x18>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	f003 0307 	and.w	r3, r3, #7
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	@ (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	@ (800162c <__NVIC_SetPriority+0x50>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	@ 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	@ 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016a8:	d301      	bcc.n	80016ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00f      	b.n	80016ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ae:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <SysTick_Config+0x40>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b6:	210f      	movs	r1, #15
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f7ff ff8e 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c0:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <SysTick_Config+0x40>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c6:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <SysTick_Config+0x40>)
 80016c8:	2207      	movs	r2, #7
 80016ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff47 	bl	8001578 <__NVIC_SetPriorityGrouping>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001704:	f7ff ff5c 	bl	80015c0 <__NVIC_GetPriorityGrouping>
 8001708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f7ff ff8e 	bl	8001630 <NVIC_EncodePriority>
 8001714:	4602      	mov	r2, r0
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff5d 	bl	80015dc <__NVIC_SetPriority>
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ffb0 	bl	8001698 <SysTick_Config>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001752:	e154      	b.n	80019fe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2101      	movs	r1, #1
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	4013      	ands	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8146 	beq.w	80019f8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b01      	cmp	r3, #1
 8001776:	d005      	beq.n	8001784 <HAL_GPIO_Init+0x40>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d130      	bne.n	80017e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ba:	2201      	movs	r2, #1
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	f003 0201 	and.w	r2, r3, #1
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d017      	beq.n	8001822 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	2203      	movs	r2, #3
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d123      	bne.n	8001876 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	08da      	lsrs	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3208      	adds	r2, #8
 8001836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	220f      	movs	r2, #15
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	691a      	ldr	r2, [r3, #16]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	08da      	lsrs	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3208      	adds	r2, #8
 8001870:	6939      	ldr	r1, [r7, #16]
 8001872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	2203      	movs	r2, #3
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0203 	and.w	r2, r3, #3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 80a0 	beq.w	80019f8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b8:	4b58      	ldr	r3, [pc, #352]	@ (8001a1c <HAL_GPIO_Init+0x2d8>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a57      	ldr	r2, [pc, #348]	@ (8001a1c <HAL_GPIO_Init+0x2d8>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b55      	ldr	r3, [pc, #340]	@ (8001a1c <HAL_GPIO_Init+0x2d8>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018d0:	4a53      	ldr	r2, [pc, #332]	@ (8001a20 <HAL_GPIO_Init+0x2dc>)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	3302      	adds	r3, #2
 80018d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018fa:	d019      	beq.n	8001930 <HAL_GPIO_Init+0x1ec>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a49      	ldr	r2, [pc, #292]	@ (8001a24 <HAL_GPIO_Init+0x2e0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d013      	beq.n	800192c <HAL_GPIO_Init+0x1e8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a48      	ldr	r2, [pc, #288]	@ (8001a28 <HAL_GPIO_Init+0x2e4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d00d      	beq.n	8001928 <HAL_GPIO_Init+0x1e4>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a47      	ldr	r2, [pc, #284]	@ (8001a2c <HAL_GPIO_Init+0x2e8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d007      	beq.n	8001924 <HAL_GPIO_Init+0x1e0>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a46      	ldr	r2, [pc, #280]	@ (8001a30 <HAL_GPIO_Init+0x2ec>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d101      	bne.n	8001920 <HAL_GPIO_Init+0x1dc>
 800191c:	2304      	movs	r3, #4
 800191e:	e008      	b.n	8001932 <HAL_GPIO_Init+0x1ee>
 8001920:	2305      	movs	r3, #5
 8001922:	e006      	b.n	8001932 <HAL_GPIO_Init+0x1ee>
 8001924:	2303      	movs	r3, #3
 8001926:	e004      	b.n	8001932 <HAL_GPIO_Init+0x1ee>
 8001928:	2302      	movs	r3, #2
 800192a:	e002      	b.n	8001932 <HAL_GPIO_Init+0x1ee>
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <HAL_GPIO_Init+0x1ee>
 8001930:	2300      	movs	r3, #0
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	f002 0203 	and.w	r2, r2, #3
 8001938:	0092      	lsls	r2, r2, #2
 800193a:	4093      	lsls	r3, r2
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001942:	4937      	ldr	r1, [pc, #220]	@ (8001a20 <HAL_GPIO_Init+0x2dc>)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	089b      	lsrs	r3, r3, #2
 8001948:	3302      	adds	r3, #2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001950:	4b38      	ldr	r3, [pc, #224]	@ (8001a34 <HAL_GPIO_Init+0x2f0>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001974:	4a2f      	ldr	r2, [pc, #188]	@ (8001a34 <HAL_GPIO_Init+0x2f0>)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800197a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a34 <HAL_GPIO_Init+0x2f0>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800199e:	4a25      	ldr	r2, [pc, #148]	@ (8001a34 <HAL_GPIO_Init+0x2f0>)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019a4:	4b23      	ldr	r3, [pc, #140]	@ (8001a34 <HAL_GPIO_Init+0x2f0>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001a34 <HAL_GPIO_Init+0x2f0>)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ce:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <HAL_GPIO_Init+0x2f0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019f2:	4a10      	ldr	r2, [pc, #64]	@ (8001a34 <HAL_GPIO_Init+0x2f0>)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f47f aea3 	bne.w	8001754 <HAL_GPIO_Init+0x10>
  }
}
 8001a0e:	bf00      	nop
 8001a10:	bf00      	nop
 8001a12:	371c      	adds	r7, #28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010000 	.word	0x40010000
 8001a24:	48000400 	.word	0x48000400
 8001a28:	48000800 	.word	0x48000800
 8001a2c:	48000c00 	.word	0x48000c00
 8001a30:	48001000 	.word	0x48001000
 8001a34:	40010400 	.word	0x40010400

08001a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
 8001a44:	4613      	mov	r3, r2
 8001a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a48:	787b      	ldrb	r3, [r7, #1]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a54:	e002      	b.n	8001a5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e08d      	b.n	8001b96 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fbba 	bl	8001208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2224      	movs	r2, #36	@ 0x24
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ab8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ac8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d107      	bne.n	8001ae2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	e006      	b.n	8001af0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001aee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d108      	bne.n	8001b0a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	e007      	b.n	8001b1a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69d9      	ldr	r1, [r3, #28]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1a      	ldr	r2, [r3, #32]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2220      	movs	r2, #32
 8001b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	4608      	mov	r0, r1
 8001baa:	4611      	mov	r1, r2
 8001bac:	461a      	mov	r2, r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	817b      	strh	r3, [r7, #10]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	813b      	strh	r3, [r7, #8]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b20      	cmp	r3, #32
 8001bc4:	f040 80f9 	bne.w	8001dba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <HAL_I2C_Mem_Write+0x34>
 8001bce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d105      	bne.n	8001be0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bda:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0ed      	b.n	8001dbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_I2C_Mem_Write+0x4e>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e0e6      	b.n	8001dbc <HAL_I2C_Mem_Write+0x21c>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bf6:	f7ff fcb3 	bl	8001560 <HAL_GetTick>
 8001bfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2319      	movs	r3, #25
 8001c02:	2201      	movs	r2, #1
 8001c04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 fac3 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0d1      	b.n	8001dbc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2221      	movs	r2, #33	@ 0x21
 8001c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2240      	movs	r2, #64	@ 0x40
 8001c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a3a      	ldr	r2, [r7, #32]
 8001c32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c40:	88f8      	ldrh	r0, [r7, #6]
 8001c42:	893a      	ldrh	r2, [r7, #8]
 8001c44:	8979      	ldrh	r1, [r7, #10]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	4603      	mov	r3, r0
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 f9d3 	bl	8001ffc <I2C_RequestMemoryWrite>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0a9      	b.n	8001dbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2bff      	cmp	r3, #255	@ 0xff
 8001c70:	d90e      	bls.n	8001c90 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	22ff      	movs	r2, #255	@ 0xff
 8001c76:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	8979      	ldrh	r1, [r7, #10]
 8001c80:	2300      	movs	r3, #0
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 fc47 	bl	800251c <I2C_TransferConfig>
 8001c8e:	e00f      	b.n	8001cb0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	8979      	ldrh	r1, [r7, #10]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 fc36 	bl	800251c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 fac6 	bl	8002246 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e07b      	b.n	8001dbc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc8:	781a      	ldrb	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cec:	3b01      	subs	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d034      	beq.n	8001d68 <HAL_I2C_Mem_Write+0x1c8>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d130      	bne.n	8001d68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2180      	movs	r1, #128	@ 0x80
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f000 fa3f 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e04d      	b.n	8001dbc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2bff      	cmp	r3, #255	@ 0xff
 8001d28:	d90e      	bls.n	8001d48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	22ff      	movs	r2, #255	@ 0xff
 8001d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	8979      	ldrh	r1, [r7, #10]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f000 fbeb 	bl	800251c <I2C_TransferConfig>
 8001d46:	e00f      	b.n	8001d68 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	8979      	ldrh	r1, [r7, #10]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 fbda 	bl	800251c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d19e      	bne.n	8001cb0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 faac 	bl	80022d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e01a      	b.n	8001dbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <HAL_I2C_Mem_Write+0x224>)
 8001d9a:	400b      	ands	r3, r1
 8001d9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2220      	movs	r2, #32
 8001da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e000      	b.n	8001dbc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001dba:	2302      	movs	r3, #2
  }
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	fe00e800 	.word	0xfe00e800

08001dc8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	817b      	strh	r3, [r7, #10]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	813b      	strh	r3, [r7, #8]
 8001dde:	4613      	mov	r3, r2
 8001de0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	f040 80fd 	bne.w	8001fea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_I2C_Mem_Read+0x34>
 8001df6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e02:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0f1      	b.n	8001fec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_I2C_Mem_Read+0x4e>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e0ea      	b.n	8001fec <HAL_I2C_Mem_Read+0x224>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e1e:	f7ff fb9f 	bl	8001560 <HAL_GetTick>
 8001e22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2319      	movs	r3, #25
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 f9af 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0d5      	b.n	8001fec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2222      	movs	r2, #34	@ 0x22
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2240      	movs	r2, #64	@ 0x40
 8001e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a3a      	ldr	r2, [r7, #32]
 8001e5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e68:	88f8      	ldrh	r0, [r7, #6]
 8001e6a:	893a      	ldrh	r2, [r7, #8]
 8001e6c:	8979      	ldrh	r1, [r7, #10]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	4603      	mov	r3, r0
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 f913 	bl	80020a4 <I2C_RequestMemoryRead>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0ad      	b.n	8001fec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2bff      	cmp	r3, #255	@ 0xff
 8001e98:	d90e      	bls.n	8001eb8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	8979      	ldrh	r1, [r7, #10]
 8001ea8:	4b52      	ldr	r3, [pc, #328]	@ (8001ff4 <HAL_I2C_Mem_Read+0x22c>)
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 fb33 	bl	800251c <I2C_TransferConfig>
 8001eb6:	e00f      	b.n	8001ed8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	8979      	ldrh	r1, [r7, #10]
 8001eca:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff4 <HAL_I2C_Mem_Read+0x22c>)
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fb22 	bl	800251c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2104      	movs	r1, #4
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f956 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e07c      	b.n	8001fec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d034      	beq.n	8001f98 <HAL_I2C_Mem_Read+0x1d0>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d130      	bne.n	8001f98 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2180      	movs	r1, #128	@ 0x80
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 f927 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e04d      	b.n	8001fec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2bff      	cmp	r3, #255	@ 0xff
 8001f58:	d90e      	bls.n	8001f78 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	8979      	ldrh	r1, [r7, #10]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 fad3 	bl	800251c <I2C_TransferConfig>
 8001f76:	e00f      	b.n	8001f98 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	8979      	ldrh	r1, [r7, #10]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fac2 	bl	800251c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d19a      	bne.n	8001ed8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f994 	bl	80022d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e01a      	b.n	8001fec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <HAL_I2C_Mem_Read+0x230>)
 8001fca:	400b      	ands	r3, r1
 8001fcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001fea:	2302      	movs	r3, #2
  }
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	80002400 	.word	0x80002400
 8001ff8:	fe00e800 	.word	0xfe00e800

08001ffc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	461a      	mov	r2, r3
 800200a:	4603      	mov	r3, r0
 800200c:	817b      	strh	r3, [r7, #10]
 800200e:	460b      	mov	r3, r1
 8002010:	813b      	strh	r3, [r7, #8]
 8002012:	4613      	mov	r3, r2
 8002014:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	8979      	ldrh	r1, [r7, #10]
 800201c:	4b20      	ldr	r3, [pc, #128]	@ (80020a0 <I2C_RequestMemoryWrite+0xa4>)
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 fa79 	bl	800251c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f909 	bl	8002246 <I2C_WaitOnTXISFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e02c      	b.n	8002098 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d105      	bne.n	8002050 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002044:	893b      	ldrh	r3, [r7, #8]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	629a      	str	r2, [r3, #40]	@ 0x28
 800204e:	e015      	b.n	800207c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002050:	893b      	ldrh	r3, [r7, #8]
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	b29b      	uxth	r3, r3
 8002056:	b2da      	uxtb	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	69b9      	ldr	r1, [r7, #24]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f8ef 	bl	8002246 <I2C_WaitOnTXISFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e012      	b.n	8002098 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002072:	893b      	ldrh	r3, [r7, #8]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2200      	movs	r2, #0
 8002084:	2180      	movs	r1, #128	@ 0x80
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f884 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	80002000 	.word	0x80002000

080020a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	4608      	mov	r0, r1
 80020ae:	4611      	mov	r1, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	817b      	strh	r3, [r7, #10]
 80020b6:	460b      	mov	r3, r1
 80020b8:	813b      	strh	r3, [r7, #8]
 80020ba:	4613      	mov	r3, r2
 80020bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	8979      	ldrh	r1, [r7, #10]
 80020c4:	4b20      	ldr	r3, [pc, #128]	@ (8002148 <I2C_RequestMemoryRead+0xa4>)
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2300      	movs	r3, #0
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fa26 	bl	800251c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	69b9      	ldr	r1, [r7, #24]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 f8b6 	bl	8002246 <I2C_WaitOnTXISFlagUntilTimeout>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e02c      	b.n	800213e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d105      	bne.n	80020f6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020ea:	893b      	ldrh	r3, [r7, #8]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80020f4:	e015      	b.n	8002122 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020f6:	893b      	ldrh	r3, [r7, #8]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	69b9      	ldr	r1, [r7, #24]
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 f89c 	bl	8002246 <I2C_WaitOnTXISFlagUntilTimeout>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e012      	b.n	800213e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002118:	893b      	ldrh	r3, [r7, #8]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	2200      	movs	r2, #0
 800212a:	2140      	movs	r1, #64	@ 0x40
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f831 	bl	8002194 <I2C_WaitOnFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	80002000 	.word	0x80002000

0800214c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b02      	cmp	r3, #2
 8002160:	d103      	bne.n	800216a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	d007      	beq.n	8002188 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	619a      	str	r2, [r3, #24]
  }
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	4613      	mov	r3, r2
 80021a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021a4:	e03b      	b.n	800221e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	6839      	ldr	r1, [r7, #0]
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f8d6 	bl	800235c <I2C_IsErrorOccurred>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e041      	b.n	800223e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c0:	d02d      	beq.n	800221e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021c2:	f7ff f9cd 	bl	8001560 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d302      	bcc.n	80021d8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d122      	bne.n	800221e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	4013      	ands	r3, r2
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d113      	bne.n	800221e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fa:	f043 0220 	orr.w	r2, r3, #32
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e00f      	b.n	800223e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699a      	ldr	r2, [r3, #24]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4013      	ands	r3, r2
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	429a      	cmp	r2, r3
 800222c:	bf0c      	ite	eq
 800222e:	2301      	moveq	r3, #1
 8002230:	2300      	movne	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	429a      	cmp	r2, r3
 800223a:	d0b4      	beq.n	80021a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002252:	e033      	b.n	80022bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f87f 	bl	800235c <I2C_IsErrorOccurred>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e031      	b.n	80022cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226e:	d025      	beq.n	80022bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002270:	f7ff f976 	bl	8001560 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	429a      	cmp	r2, r3
 800227e:	d302      	bcc.n	8002286 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d11a      	bne.n	80022bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b02      	cmp	r3, #2
 8002292:	d013      	beq.n	80022bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002298:	f043 0220 	orr.w	r2, r3, #32
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e007      	b.n	80022cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d1c4      	bne.n	8002254 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022e0:	e02f      	b.n	8002342 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f838 	bl	800235c <I2C_IsErrorOccurred>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e02d      	b.n	8002352 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f6:	f7ff f933 	bl	8001560 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	429a      	cmp	r2, r3
 8002304:	d302      	bcc.n	800230c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d11a      	bne.n	8002342 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b20      	cmp	r3, #32
 8002318:	d013      	beq.n	8002342 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231e:	f043 0220 	orr.w	r2, r3, #32
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e007      	b.n	8002352 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	2b20      	cmp	r3, #32
 800234e:	d1c8      	bne.n	80022e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	@ 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b00      	cmp	r3, #0
 8002386:	d068      	beq.n	800245a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2210      	movs	r2, #16
 800238e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002390:	e049      	b.n	8002426 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d045      	beq.n	8002426 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800239a:	f7ff f8e1 	bl	8001560 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d302      	bcc.n	80023b0 <I2C_IsErrorOccurred+0x54>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d13a      	bne.n	8002426 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023d2:	d121      	bne.n	8002418 <I2C_IsErrorOccurred+0xbc>
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023da:	d01d      	beq.n	8002418 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d01a      	beq.n	8002418 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023f2:	f7ff f8b5 	bl	8001560 <HAL_GetTick>
 80023f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023f8:	e00e      	b.n	8002418 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023fa:	f7ff f8b1 	bl	8001560 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b19      	cmp	r3, #25
 8002406:	d907      	bls.n	8002418 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	f043 0320 	orr.w	r3, r3, #32
 800240e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002416:	e006      	b.n	8002426 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b20      	cmp	r3, #32
 8002424:	d1e9      	bne.n	80023fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f003 0320 	and.w	r3, r3, #32
 8002430:	2b20      	cmp	r3, #32
 8002432:	d003      	beq.n	800243c <I2C_IsErrorOccurred+0xe0>
 8002434:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0aa      	beq.n	8002392 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800243c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002440:	2b00      	cmp	r3, #0
 8002442:	d103      	bne.n	800244c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2220      	movs	r2, #32
 800244a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	f043 0304 	orr.w	r3, r3, #4
 8002452:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00b      	beq.n	8002484 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800247c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	f043 0308 	orr.w	r3, r3, #8
 8002494:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800249e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00b      	beq.n	80024c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	f043 0302 	orr.w	r3, r3, #2
 80024b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80024c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01c      	beq.n	800250a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff fe3b 	bl	800214c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6859      	ldr	r1, [r3, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <I2C_IsErrorOccurred+0x1bc>)
 80024e2:	400b      	ands	r3, r1
 80024e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800250a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800250e:	4618      	mov	r0, r3
 8002510:	3728      	adds	r7, #40	@ 0x28
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	fe00e800 	.word	0xfe00e800

0800251c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	460b      	mov	r3, r1
 8002528:	817b      	strh	r3, [r7, #10]
 800252a:	4613      	mov	r3, r2
 800252c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800252e:	897b      	ldrh	r3, [r7, #10]
 8002530:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002534:	7a7b      	ldrb	r3, [r7, #9]
 8002536:	041b      	lsls	r3, r3, #16
 8002538:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800253c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	4313      	orrs	r3, r2
 8002546:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800254a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	0d5b      	lsrs	r3, r3, #21
 8002556:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800255a:	4b08      	ldr	r3, [pc, #32]	@ (800257c <I2C_TransferConfig+0x60>)
 800255c:	430b      	orrs	r3, r1
 800255e:	43db      	mvns	r3, r3
 8002560:	ea02 0103 	and.w	r1, r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	03ff63ff 	.word	0x03ff63ff

08002580 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b20      	cmp	r3, #32
 8002594:	d138      	bne.n	8002608 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e032      	b.n	800260a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2224      	movs	r2, #36	@ 0x24
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0201 	bic.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e000      	b.n	800260a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002608:	2302      	movs	r3, #2
  }
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002616:	b480      	push	{r7}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b20      	cmp	r3, #32
 800262a:	d139      	bne.n	80026a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002636:	2302      	movs	r3, #2
 8002638:	e033      	b.n	80026a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2224      	movs	r2, #36	@ 0x24
 8002646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002668:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e000      	b.n	80026a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
  }
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f001 b823 	b.w	800371c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 817d 	beq.w	80029e6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026ec:	4bbc      	ldr	r3, [pc, #752]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d00c      	beq.n	8002712 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026f8:	4bb9      	ldr	r3, [pc, #740]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d15c      	bne.n	80027be <HAL_RCC_OscConfig+0x10e>
 8002704:	4bb6      	ldr	r3, [pc, #728]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800270c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002710:	d155      	bne.n	80027be <HAL_RCC_OscConfig+0x10e>
 8002712:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002716:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002726:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b01      	cmp	r3, #1
 800273c:	d102      	bne.n	8002744 <HAL_RCC_OscConfig+0x94>
 800273e:	4ba8      	ldr	r3, [pc, #672]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	e015      	b.n	8002770 <HAL_RCC_OscConfig+0xc0>
 8002744:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002748:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002750:	fa93 f3a3 	rbit	r3, r3
 8002754:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002758:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800275c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002760:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800276c:	4b9c      	ldr	r3, [pc, #624]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 800276e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002770:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002774:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002778:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800277c:	fa92 f2a2 	rbit	r2, r2
 8002780:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002784:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002788:	fab2 f282 	clz	r2, r2
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	f042 0220 	orr.w	r2, r2, #32
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	f002 021f 	and.w	r2, r2, #31
 8002798:	2101      	movs	r1, #1
 800279a:	fa01 f202 	lsl.w	r2, r1, r2
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 811f 	beq.w	80029e4 <HAL_RCC_OscConfig+0x334>
 80027a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 8116 	bne.w	80029e4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	f000 bfaf 	b.w	800371c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ce:	d106      	bne.n	80027de <HAL_RCC_OscConfig+0x12e>
 80027d0:	4b83      	ldr	r3, [pc, #524]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a82      	ldr	r2, [pc, #520]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	e036      	b.n	800284c <HAL_RCC_OscConfig+0x19c>
 80027de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x158>
 80027ee:	4b7c      	ldr	r3, [pc, #496]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a7b      	ldr	r2, [pc, #492]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 80027f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b79      	ldr	r3, [pc, #484]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a78      	ldr	r2, [pc, #480]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 8002800:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e021      	b.n	800284c <HAL_RCC_OscConfig+0x19c>
 8002808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x184>
 800281a:	4b71      	ldr	r3, [pc, #452]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a70      	ldr	r2, [pc, #448]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 8002820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b6e      	ldr	r3, [pc, #440]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a6d      	ldr	r2, [pc, #436]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e00b      	b.n	800284c <HAL_RCC_OscConfig+0x19c>
 8002834:	4b6a      	ldr	r3, [pc, #424]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a69      	ldr	r2, [pc, #420]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 800283a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b67      	ldr	r3, [pc, #412]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a66      	ldr	r2, [pc, #408]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 8002846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800284a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800284c:	4b64      	ldr	r3, [pc, #400]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 800284e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002850:	f023 020f 	bic.w	r2, r3, #15
 8002854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002858:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	495f      	ldr	r1, [pc, #380]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 8002862:	4313      	orrs	r3, r2
 8002864:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d059      	beq.n	800292a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7fe fe73 	bl	8001560 <HAL_GetTick>
 800287a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002880:	f7fe fe6e 	bl	8001560 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	@ 0x64
 800288e:	d902      	bls.n	8002896 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	f000 bf43 	b.w	800371c <HAL_RCC_OscConfig+0x106c>
 8002896:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800289a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80028aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d102      	bne.n	80028c8 <HAL_RCC_OscConfig+0x218>
 80028c2:	4b47      	ldr	r3, [pc, #284]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	e015      	b.n	80028f4 <HAL_RCC_OscConfig+0x244>
 80028c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028cc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80028dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028e0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80028e4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80028f0:	4b3b      	ldr	r3, [pc, #236]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028f8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80028fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002900:	fa92 f2a2 	rbit	r2, r2
 8002904:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002908:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800290c:	fab2 f282 	clz	r2, r2
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	f042 0220 	orr.w	r2, r2, #32
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	f002 021f 	and.w	r2, r2, #31
 800291c:	2101      	movs	r1, #1
 800291e:	fa01 f202 	lsl.w	r2, r1, r2
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ab      	beq.n	8002880 <HAL_RCC_OscConfig+0x1d0>
 8002928:	e05d      	b.n	80029e6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7fe fe19 	bl	8001560 <HAL_GetTick>
 800292e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002932:	e00a      	b.n	800294a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002934:	f7fe fe14 	bl	8001560 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b64      	cmp	r3, #100	@ 0x64
 8002942:	d902      	bls.n	800294a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	f000 bee9 	b.w	800371c <HAL_RCC_OscConfig+0x106c>
 800294a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800294e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800295e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	095b      	lsrs	r3, r3, #5
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b01      	cmp	r3, #1
 8002974:	d102      	bne.n	800297c <HAL_RCC_OscConfig+0x2cc>
 8002976:	4b1a      	ldr	r3, [pc, #104]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	e015      	b.n	80029a8 <HAL_RCC_OscConfig+0x2f8>
 800297c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002980:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002990:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002994:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002998:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80029a4:	4b0e      	ldr	r3, [pc, #56]	@ (80029e0 <HAL_RCC_OscConfig+0x330>)
 80029a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029ac:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80029b0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80029b4:	fa92 f2a2 	rbit	r2, r2
 80029b8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80029bc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80029c0:	fab2 f282 	clz	r2, r2
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	f042 0220 	orr.w	r2, r2, #32
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	f002 021f 	and.w	r2, r2, #31
 80029d0:	2101      	movs	r1, #1
 80029d2:	fa01 f202 	lsl.w	r2, r1, r2
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ab      	bne.n	8002934 <HAL_RCC_OscConfig+0x284>
 80029dc:	e003      	b.n	80029e6 <HAL_RCC_OscConfig+0x336>
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 817d 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029fc:	4ba6      	ldr	r3, [pc, #664]	@ (8002c98 <HAL_RCC_OscConfig+0x5e8>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 030c 	and.w	r3, r3, #12
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00b      	beq.n	8002a20 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a08:	4ba3      	ldr	r3, [pc, #652]	@ (8002c98 <HAL_RCC_OscConfig+0x5e8>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d172      	bne.n	8002afa <HAL_RCC_OscConfig+0x44a>
 8002a14:	4ba0      	ldr	r3, [pc, #640]	@ (8002c98 <HAL_RCC_OscConfig+0x5e8>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d16c      	bne.n	8002afa <HAL_RCC_OscConfig+0x44a>
 8002a20:	2302      	movs	r3, #2
 8002a22:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002a32:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d102      	bne.n	8002a50 <HAL_RCC_OscConfig+0x3a0>
 8002a4a:	4b93      	ldr	r3, [pc, #588]	@ (8002c98 <HAL_RCC_OscConfig+0x5e8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	e013      	b.n	8002a78 <HAL_RCC_OscConfig+0x3c8>
 8002a50:	2302      	movs	r3, #2
 8002a52:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002a62:	2302      	movs	r3, #2
 8002a64:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002a68:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002a6c:	fa93 f3a3 	rbit	r3, r3
 8002a70:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002a74:	4b88      	ldr	r3, [pc, #544]	@ (8002c98 <HAL_RCC_OscConfig+0x5e8>)
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	2202      	movs	r2, #2
 8002a7a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002a7e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002a82:	fa92 f2a2 	rbit	r2, r2
 8002a86:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002a8a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002a8e:	fab2 f282 	clz	r2, r2
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	f042 0220 	orr.w	r2, r2, #32
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	f002 021f 	and.w	r2, r2, #31
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x410>
 8002aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d002      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f000 be2e 	b.w	800371c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac0:	4b75      	ldr	r3, [pc, #468]	@ (8002c98 <HAL_RCC_OscConfig+0x5e8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002acc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	21f8      	movs	r1, #248	@ 0xf8
 8002ad6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002ade:	fa91 f1a1 	rbit	r1, r1
 8002ae2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002ae6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002aea:	fab1 f181 	clz	r1, r1
 8002aee:	b2c9      	uxtb	r1, r1
 8002af0:	408b      	lsls	r3, r1
 8002af2:	4969      	ldr	r1, [pc, #420]	@ (8002c98 <HAL_RCC_OscConfig+0x5e8>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af8:	e0fd      	b.n	8002cf6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8088 	beq.w	8002c1c <HAL_RCC_OscConfig+0x56c>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002b1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b2c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	461a      	mov	r2, r3
 8002b34:	2301      	movs	r3, #1
 8002b36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7fe fd12 	bl	8001560 <HAL_GetTick>
 8002b3c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b42:	f7fe fd0d 	bl	8001560 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d902      	bls.n	8002b58 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	f000 bde2 	b.w	800371c <HAL_RCC_OscConfig+0x106c>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002b6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d102      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4d8>
 8002b82:	4b45      	ldr	r3, [pc, #276]	@ (8002c98 <HAL_RCC_OscConfig+0x5e8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	e013      	b.n	8002bb0 <HAL_RCC_OscConfig+0x500>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002ba0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002bac:	4b3a      	ldr	r3, [pc, #232]	@ (8002c98 <HAL_RCC_OscConfig+0x5e8>)
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002bb6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002bba:	fa92 f2a2 	rbit	r2, r2
 8002bbe:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002bc2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002bc6:	fab2 f282 	clz	r2, r2
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	f042 0220 	orr.w	r2, r2, #32
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	f002 021f 	and.w	r2, r2, #31
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0af      	beq.n	8002b42 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be2:	4b2d      	ldr	r3, [pc, #180]	@ (8002c98 <HAL_RCC_OscConfig+0x5e8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	21f8      	movs	r1, #248	@ 0xf8
 8002bf8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002c00:	fa91 f1a1 	rbit	r1, r1
 8002c04:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002c08:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002c0c:	fab1 f181 	clz	r1, r1
 8002c10:	b2c9      	uxtb	r1, r1
 8002c12:	408b      	lsls	r3, r1
 8002c14:	4920      	ldr	r1, [pc, #128]	@ (8002c98 <HAL_RCC_OscConfig+0x5e8>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]
 8002c1a:	e06c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x646>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002c2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c3c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	461a      	mov	r2, r3
 8002c44:	2300      	movs	r3, #0
 8002c46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fe fc8a 	bl	8001560 <HAL_GetTick>
 8002c4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c52:	f7fe fc85 	bl	8001560 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d902      	bls.n	8002c68 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	f000 bd5a 	b.w	800371c <HAL_RCC_OscConfig+0x106c>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d104      	bne.n	8002c9c <HAL_RCC_OscConfig+0x5ec>
 8002c92:	4b01      	ldr	r3, [pc, #4]	@ (8002c98 <HAL_RCC_OscConfig+0x5e8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	e015      	b.n	8002cc4 <HAL_RCC_OscConfig+0x614>
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002cae:	2302      	movs	r3, #2
 8002cb0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002cb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002cc0:	4bc8      	ldr	r3, [pc, #800]	@ (8002fe4 <HAL_RCC_OscConfig+0x934>)
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002cca:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002cce:	fa92 f2a2 	rbit	r2, r2
 8002cd2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002cd6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002cda:	fab2 f282 	clz	r2, r2
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	f042 0220 	orr.w	r2, r2, #32
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	f002 021f 	and.w	r2, r2, #31
 8002cea:	2101      	movs	r1, #1
 8002cec:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1ad      	bne.n	8002c52 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8110 	beq.w	8002f2c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d079      	beq.n	8002e10 <HAL_RCC_OscConfig+0x760>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4bab      	ldr	r3, [pc, #684]	@ (8002fe8 <HAL_RCC_OscConfig+0x938>)
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	461a      	mov	r2, r3
 8002d42:	2301      	movs	r3, #1
 8002d44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d46:	f7fe fc0b 	bl	8001560 <HAL_GetTick>
 8002d4a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d50:	f7fe fc06 	bl	8001560 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d902      	bls.n	8002d66 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	f000 bcdb 	b.w	800371c <HAL_RCC_OscConfig+0x106c>
 8002d66:	2302      	movs	r3, #2
 8002d68:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002d80:	2202      	movs	r2, #2
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d88:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	fa93 f2a3 	rbit	r2, r3
 8002d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002da4:	2202      	movs	r2, #2
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	fa93 f2a3 	rbit	r2, r3
 8002db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002dbe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc0:	4b88      	ldr	r3, [pc, #544]	@ (8002fe4 <HAL_RCC_OscConfig+0x934>)
 8002dc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002dcc:	2102      	movs	r1, #2
 8002dce:	6019      	str	r1, [r3, #0]
 8002dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	fa93 f1a3 	rbit	r1, r3
 8002dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002de6:	6019      	str	r1, [r3, #0]
  return result;
 8002de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	2101      	movs	r1, #1
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0a0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x6a0>
 8002e0e:	e08d      	b.n	8002f2c <HAL_RCC_OscConfig+0x87c>
 8002e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e14:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e20:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	fa93 f2a3 	rbit	r2, r3
 8002e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e32:	601a      	str	r2, [r3, #0]
  return result;
 8002e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e38:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e3c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b68      	ldr	r3, [pc, #416]	@ (8002fe8 <HAL_RCC_OscConfig+0x938>)
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2300      	movs	r3, #0
 8002e50:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e52:	f7fe fb85 	bl	8001560 <HAL_GetTick>
 8002e56:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e5c:	f7fe fb80 	bl	8001560 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d902      	bls.n	8002e72 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	f000 bc55 	b.w	800371c <HAL_RCC_OscConfig+0x106c>
 8002e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e76:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e82:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	fa93 f2a3 	rbit	r2, r3
 8002e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e90:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	fa93 f2a3 	rbit	r2, r3
 8002eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ebe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	fa93 f2a3 	rbit	r2, r3
 8002ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002edc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ede:	4b41      	ldr	r3, [pc, #260]	@ (8002fe4 <HAL_RCC_OscConfig+0x934>)
 8002ee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002eea:	2102      	movs	r1, #2
 8002eec:	6019      	str	r1, [r3, #0]
 8002eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	fa93 f1a3 	rbit	r1, r3
 8002efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f00:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f04:	6019      	str	r1, [r3, #0]
  return result;
 8002f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f003 031f 	and.w	r3, r3, #31
 8002f20:	2101      	movs	r1, #1
 8002f22:	fa01 f303 	lsl.w	r3, r1, r3
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d197      	bne.n	8002e5c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 81a1 	beq.w	8003284 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f48:	4b26      	ldr	r3, [pc, #152]	@ (8002fe4 <HAL_RCC_OscConfig+0x934>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d116      	bne.n	8002f82 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f54:	4b23      	ldr	r3, [pc, #140]	@ (8002fe4 <HAL_RCC_OscConfig+0x934>)
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	4a22      	ldr	r2, [pc, #136]	@ (8002fe4 <HAL_RCC_OscConfig+0x934>)
 8002f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f5e:	61d3      	str	r3, [r2, #28]
 8002f60:	4b20      	ldr	r3, [pc, #128]	@ (8002fe4 <HAL_RCC_OscConfig+0x934>)
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f76:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002f7a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f82:	4b1a      	ldr	r3, [pc, #104]	@ (8002fec <HAL_RCC_OscConfig+0x93c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d11a      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8e:	4b17      	ldr	r3, [pc, #92]	@ (8002fec <HAL_RCC_OscConfig+0x93c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a16      	ldr	r2, [pc, #88]	@ (8002fec <HAL_RCC_OscConfig+0x93c>)
 8002f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9a:	f7fe fae1 	bl	8001560 <HAL_GetTick>
 8002f9e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa2:	e009      	b.n	8002fb8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa4:	f7fe fadc 	bl	8001560 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b64      	cmp	r3, #100	@ 0x64
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e3b1      	b.n	800371c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002fec <HAL_RCC_OscConfig+0x93c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ef      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d10d      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x940>
 8002fd4:	4b03      	ldr	r3, [pc, #12]	@ (8002fe4 <HAL_RCC_OscConfig+0x934>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	4a02      	ldr	r2, [pc, #8]	@ (8002fe4 <HAL_RCC_OscConfig+0x934>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6213      	str	r3, [r2, #32]
 8002fe0:	e03c      	b.n	800305c <HAL_RCC_OscConfig+0x9ac>
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	10908120 	.word	0x10908120
 8002fec:	40007000 	.word	0x40007000
 8002ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10c      	bne.n	800301a <HAL_RCC_OscConfig+0x96a>
 8003000:	4bc1      	ldr	r3, [pc, #772]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	4ac0      	ldr	r2, [pc, #768]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	6213      	str	r3, [r2, #32]
 800300c:	4bbe      	ldr	r3, [pc, #760]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	4abd      	ldr	r2, [pc, #756]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 8003012:	f023 0304 	bic.w	r3, r3, #4
 8003016:	6213      	str	r3, [r2, #32]
 8003018:	e020      	b.n	800305c <HAL_RCC_OscConfig+0x9ac>
 800301a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b05      	cmp	r3, #5
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0x994>
 800302a:	4bb7      	ldr	r3, [pc, #732]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	4ab6      	ldr	r2, [pc, #728]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 8003030:	f043 0304 	orr.w	r3, r3, #4
 8003034:	6213      	str	r3, [r2, #32]
 8003036:	4bb4      	ldr	r3, [pc, #720]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	4ab3      	ldr	r2, [pc, #716]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6213      	str	r3, [r2, #32]
 8003042:	e00b      	b.n	800305c <HAL_RCC_OscConfig+0x9ac>
 8003044:	4bb0      	ldr	r3, [pc, #704]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	4aaf      	ldr	r2, [pc, #700]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	6213      	str	r3, [r2, #32]
 8003050:	4bad      	ldr	r3, [pc, #692]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4aac      	ldr	r2, [pc, #688]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 8003056:	f023 0304 	bic.w	r3, r3, #4
 800305a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800305c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003060:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 8081 	beq.w	8003170 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306e:	f7fe fa77 	bl	8001560 <HAL_GetTick>
 8003072:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003078:	f7fe fa72 	bl	8001560 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e345      	b.n	800371c <HAL_RCC_OscConfig+0x106c>
 8003090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003094:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003098:	2202      	movs	r2, #2
 800309a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	fa93 f2a3 	rbit	r2, r3
 80030aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80030bc:	2202      	movs	r2, #2
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	fa93 f2a3 	rbit	r2, r3
 80030ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80030d6:	601a      	str	r2, [r3, #0]
  return result;
 80030d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030dc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80030e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d102      	bne.n	80030fc <HAL_RCC_OscConfig+0xa4c>
 80030f6:	4b84      	ldr	r3, [pc, #528]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	e013      	b.n	8003124 <HAL_RCC_OscConfig+0xa74>
 80030fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003100:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003104:	2202      	movs	r2, #2
 8003106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	fa93 f2a3 	rbit	r2, r3
 8003116:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	4b79      	ldr	r3, [pc, #484]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003128:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800312c:	2102      	movs	r1, #2
 800312e:	6011      	str	r1, [r2, #0]
 8003130:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003134:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	fa92 f1a2 	rbit	r1, r2
 800313e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003142:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003146:	6011      	str	r1, [r2, #0]
  return result;
 8003148:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800314c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	fab2 f282 	clz	r2, r2
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	f002 021f 	and.w	r2, r2, #31
 8003162:	2101      	movs	r1, #1
 8003164:	fa01 f202 	lsl.w	r2, r1, r2
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d084      	beq.n	8003078 <HAL_RCC_OscConfig+0x9c8>
 800316e:	e07f      	b.n	8003270 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003170:	f7fe f9f6 	bl	8001560 <HAL_GetTick>
 8003174:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003178:	e00b      	b.n	8003192 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317a:	f7fe f9f1 	bl	8001560 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e2c4      	b.n	800371c <HAL_RCC_OscConfig+0x106c>
 8003192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003196:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800319a:	2202      	movs	r2, #2
 800319c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	fa93 f2a3 	rbit	r2, r3
 80031ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80031be:	2202      	movs	r2, #2
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	fa93 f2a3 	rbit	r2, r3
 80031d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80031d8:	601a      	str	r2, [r3, #0]
  return result;
 80031da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031de:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80031e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f043 0302 	orr.w	r3, r3, #2
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d102      	bne.n	80031fe <HAL_RCC_OscConfig+0xb4e>
 80031f8:	4b43      	ldr	r3, [pc, #268]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	e013      	b.n	8003226 <HAL_RCC_OscConfig+0xb76>
 80031fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003202:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003206:	2202      	movs	r2, #2
 8003208:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	fa93 f2a3 	rbit	r2, r3
 8003218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	4b39      	ldr	r3, [pc, #228]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800322a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800322e:	2102      	movs	r1, #2
 8003230:	6011      	str	r1, [r2, #0]
 8003232:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003236:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	fa92 f1a2 	rbit	r1, r2
 8003240:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003244:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003248:	6011      	str	r1, [r2, #0]
  return result;
 800324a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800324e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	fab2 f282 	clz	r2, r2
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	f002 021f 	and.w	r2, r2, #31
 8003264:	2101      	movs	r1, #1
 8003266:	fa01 f202 	lsl.w	r2, r1, r2
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d184      	bne.n	800317a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003270:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003278:	4b23      	ldr	r3, [pc, #140]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	4a22      	ldr	r2, [pc, #136]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 800327e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003282:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003288:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8242 	beq.w	800371a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003296:	4b1c      	ldr	r3, [pc, #112]	@ (8003308 <HAL_RCC_OscConfig+0xc58>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b08      	cmp	r3, #8
 80032a0:	f000 8213 	beq.w	80036ca <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	f040 8162 	bne.w	800357a <HAL_RCC_OscConfig+0xeca>
 80032b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ba:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80032be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	fa93 f2a3 	rbit	r2, r3
 80032d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80032da:	601a      	str	r2, [r3, #0]
  return result;
 80032dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80032e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	461a      	mov	r2, r3
 80032f8:	2300      	movs	r3, #0
 80032fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fc:	f7fe f930 	bl	8001560 <HAL_GetTick>
 8003300:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003304:	e00c      	b.n	8003320 <HAL_RCC_OscConfig+0xc70>
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330c:	f7fe f928 	bl	8001560 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e1fd      	b.n	800371c <HAL_RCC_OscConfig+0x106c>
 8003320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003324:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003328:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800332c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003332:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	fa93 f2a3 	rbit	r2, r3
 800333c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003340:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003344:	601a      	str	r2, [r3, #0]
  return result;
 8003346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800334e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003350:	fab3 f383 	clz	r3, r3
 8003354:	b2db      	uxtb	r3, r3
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	d102      	bne.n	800336a <HAL_RCC_OscConfig+0xcba>
 8003364:	4bb0      	ldr	r3, [pc, #704]	@ (8003628 <HAL_RCC_OscConfig+0xf78>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	e027      	b.n	80033ba <HAL_RCC_OscConfig+0xd0a>
 800336a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003372:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003376:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	fa93 f2a3 	rbit	r2, r3
 8003386:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800338a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003394:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003398:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	fa93 f2a3 	rbit	r2, r3
 80033ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	4b9c      	ldr	r3, [pc, #624]	@ (8003628 <HAL_RCC_OscConfig+0xf78>)
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033be:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80033c2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80033c6:	6011      	str	r1, [r2, #0]
 80033c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033cc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	fa92 f1a2 	rbit	r1, r2
 80033d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033da:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80033de:	6011      	str	r1, [r2, #0]
  return result;
 80033e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033e4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	fab2 f282 	clz	r2, r2
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	f042 0220 	orr.w	r2, r2, #32
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	f002 021f 	and.w	r2, r2, #31
 80033fa:	2101      	movs	r1, #1
 80033fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d182      	bne.n	800330c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003406:	4b88      	ldr	r3, [pc, #544]	@ (8003628 <HAL_RCC_OscConfig+0xf78>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800340e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003412:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800341a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	430b      	orrs	r3, r1
 8003428:	497f      	ldr	r1, [pc, #508]	@ (8003628 <HAL_RCC_OscConfig+0xf78>)
 800342a:	4313      	orrs	r3, r2
 800342c:	604b      	str	r3, [r1, #4]
 800342e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003432:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003436:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800343a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003440:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	fa93 f2a3 	rbit	r2, r3
 800344a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003452:	601a      	str	r2, [r3, #0]
  return result;
 8003454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003458:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800345c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003468:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	461a      	mov	r2, r3
 8003470:	2301      	movs	r3, #1
 8003472:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fe f874 	bl	8001560 <HAL_GetTick>
 8003478:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800347c:	e009      	b.n	8003492 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347e:	f7fe f86f 	bl	8001560 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e144      	b.n	800371c <HAL_RCC_OscConfig+0x106c>
 8003492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003496:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800349a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800349e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	fa93 f2a3 	rbit	r2, r3
 80034ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80034b6:	601a      	str	r2, [r3, #0]
  return result;
 80034b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034bc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80034c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d102      	bne.n	80034dc <HAL_RCC_OscConfig+0xe2c>
 80034d6:	4b54      	ldr	r3, [pc, #336]	@ (8003628 <HAL_RCC_OscConfig+0xf78>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	e027      	b.n	800352c <HAL_RCC_OscConfig+0xe7c>
 80034dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80034e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ee:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	fa93 f2a3 	rbit	r2, r3
 80034f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003506:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800350a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003514:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	fa93 f2a3 	rbit	r2, r3
 800351e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003522:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	4b3f      	ldr	r3, [pc, #252]	@ (8003628 <HAL_RCC_OscConfig+0xf78>)
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003530:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003534:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003538:	6011      	str	r1, [r2, #0]
 800353a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800353e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	fa92 f1a2 	rbit	r1, r2
 8003548:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800354c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003550:	6011      	str	r1, [r2, #0]
  return result;
 8003552:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003556:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	fab2 f282 	clz	r2, r2
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	f042 0220 	orr.w	r2, r2, #32
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	f002 021f 	and.w	r2, r2, #31
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f202 	lsl.w	r2, r1, r2
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d082      	beq.n	800347e <HAL_RCC_OscConfig+0xdce>
 8003578:	e0cf      	b.n	800371a <HAL_RCC_OscConfig+0x106a>
 800357a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003582:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003586:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	fa93 f2a3 	rbit	r2, r3
 8003596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800359e:	601a      	str	r2, [r3, #0]
  return result;
 80035a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80035a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035aa:	fab3 f383 	clz	r3, r3
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	461a      	mov	r2, r3
 80035bc:	2300      	movs	r3, #0
 80035be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7fd ffce 	bl	8001560 <HAL_GetTick>
 80035c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c8:	e009      	b.n	80035de <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ca:	f7fd ffc9 	bl	8001560 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e09e      	b.n	800371c <HAL_RCC_OscConfig+0x106c>
 80035de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80035e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	fa93 f2a3 	rbit	r2, r3
 80035fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fe:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003602:	601a      	str	r2, [r3, #0]
  return result;
 8003604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003608:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800360c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360e:	fab3 f383 	clz	r3, r3
 8003612:	b2db      	uxtb	r3, r3
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	b2db      	uxtb	r3, r3
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b01      	cmp	r3, #1
 8003620:	d104      	bne.n	800362c <HAL_RCC_OscConfig+0xf7c>
 8003622:	4b01      	ldr	r3, [pc, #4]	@ (8003628 <HAL_RCC_OscConfig+0xf78>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	e029      	b.n	800367c <HAL_RCC_OscConfig+0xfcc>
 8003628:	40021000 	.word	0x40021000
 800362c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003630:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003634:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003638:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800363e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	fa93 f2a3 	rbit	r2, r3
 8003648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003656:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800365a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003664:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	fa93 f2a3 	rbit	r2, r3
 800366e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003672:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	4b2b      	ldr	r3, [pc, #172]	@ (8003728 <HAL_RCC_OscConfig+0x1078>)
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003680:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003684:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003688:	6011      	str	r1, [r2, #0]
 800368a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800368e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	fa92 f1a2 	rbit	r1, r2
 8003698:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800369c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80036a0:	6011      	str	r1, [r2, #0]
  return result;
 80036a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036a6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	fab2 f282 	clz	r2, r2
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	f042 0220 	orr.w	r2, r2, #32
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	f002 021f 	and.w	r2, r2, #31
 80036bc:	2101      	movs	r1, #1
 80036be:	fa01 f202 	lsl.w	r2, r1, r2
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d180      	bne.n	80035ca <HAL_RCC_OscConfig+0xf1a>
 80036c8:	e027      	b.n	800371a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e01e      	b.n	800371c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036de:	4b12      	ldr	r3, [pc, #72]	@ (8003728 <HAL_RCC_OscConfig+0x1078>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80036ea:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d10b      	bne.n	8003716 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80036fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003702:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800370a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003712:	429a      	cmp	r2, r3
 8003714:	d001      	beq.n	800371a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40021000 	.word	0x40021000

0800372c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b09e      	sub	sp, #120	@ 0x78
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e162      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003744:	4b90      	ldr	r3, [pc, #576]	@ (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d910      	bls.n	8003774 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b8d      	ldr	r3, [pc, #564]	@ (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 0207 	bic.w	r2, r3, #7
 800375a:	498b      	ldr	r1, [pc, #556]	@ (8003988 <HAL_RCC_ClockConfig+0x25c>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b89      	ldr	r3, [pc, #548]	@ (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e14a      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003780:	4b82      	ldr	r3, [pc, #520]	@ (800398c <HAL_RCC_ClockConfig+0x260>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	497f      	ldr	r1, [pc, #508]	@ (800398c <HAL_RCC_ClockConfig+0x260>)
 800378e:	4313      	orrs	r3, r2
 8003790:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 80dc 	beq.w	8003958 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d13c      	bne.n	8003822 <HAL_RCC_ClockConfig+0xf6>
 80037a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037ac:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80037b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b8:	fab3 f383 	clz	r3, r3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d102      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xa6>
 80037cc:	4b6f      	ldr	r3, [pc, #444]	@ (800398c <HAL_RCC_ClockConfig+0x260>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	e00f      	b.n	80037f2 <HAL_RCC_ClockConfig+0xc6>
 80037d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	667b      	str	r3, [r7, #100]	@ 0x64
 80037e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80037e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037ee:	4b67      	ldr	r3, [pc, #412]	@ (800398c <HAL_RCC_ClockConfig+0x260>)
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037f6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037fa:	fa92 f2a2 	rbit	r2, r2
 80037fe:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003800:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003802:	fab2 f282 	clz	r2, r2
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	f042 0220 	orr.w	r2, r2, #32
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	f002 021f 	and.w	r2, r2, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d17b      	bne.n	8003916 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0f3      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d13c      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x178>
 800382a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800382e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	fab3 f383 	clz	r3, r3
 800383e:	b2db      	uxtb	r3, r3
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	b2db      	uxtb	r3, r3
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d102      	bne.n	8003854 <HAL_RCC_ClockConfig+0x128>
 800384e:	4b4f      	ldr	r3, [pc, #316]	@ (800398c <HAL_RCC_ClockConfig+0x260>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	e00f      	b.n	8003874 <HAL_RCC_ClockConfig+0x148>
 8003854:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003858:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	647b      	str	r3, [r7, #68]	@ 0x44
 8003862:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003866:	643b      	str	r3, [r7, #64]	@ 0x40
 8003868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003870:	4b46      	ldr	r3, [pc, #280]	@ (800398c <HAL_RCC_ClockConfig+0x260>)
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003878:	63ba      	str	r2, [r7, #56]	@ 0x38
 800387a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800387c:	fa92 f2a2 	rbit	r2, r2
 8003880:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003882:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003884:	fab2 f282 	clz	r2, r2
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f042 0220 	orr.w	r2, r2, #32
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	f002 021f 	and.w	r2, r2, #31
 8003894:	2101      	movs	r1, #1
 8003896:	fa01 f202 	lsl.w	r2, r1, r2
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d13a      	bne.n	8003916 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b2      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
 80038a4:	2302      	movs	r3, #2
 80038a6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80038b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d102      	bne.n	80038cc <HAL_RCC_ClockConfig+0x1a0>
 80038c6:	4b31      	ldr	r3, [pc, #196]	@ (800398c <HAL_RCC_ClockConfig+0x260>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	e00d      	b.n	80038e8 <HAL_RCC_ClockConfig+0x1bc>
 80038cc:	2302      	movs	r3, #2
 80038ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d8:	2302      	movs	r3, #2
 80038da:	623b      	str	r3, [r7, #32]
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	61fb      	str	r3, [r7, #28]
 80038e4:	4b29      	ldr	r3, [pc, #164]	@ (800398c <HAL_RCC_ClockConfig+0x260>)
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	2202      	movs	r2, #2
 80038ea:	61ba      	str	r2, [r7, #24]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	fa92 f2a2 	rbit	r2, r2
 80038f2:	617a      	str	r2, [r7, #20]
  return result;
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	fab2 f282 	clz	r2, r2
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	f042 0220 	orr.w	r2, r2, #32
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	f002 021f 	and.w	r2, r2, #31
 8003906:	2101      	movs	r1, #1
 8003908:	fa01 f202 	lsl.w	r2, r1, r2
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e079      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b1d      	ldr	r3, [pc, #116]	@ (800398c <HAL_RCC_ClockConfig+0x260>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	491a      	ldr	r1, [pc, #104]	@ (800398c <HAL_RCC_ClockConfig+0x260>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003928:	f7fd fe1a 	bl	8001560 <HAL_GetTick>
 800392c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fd fe16 	bl	8001560 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e061      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b11      	ldr	r3, [pc, #68]	@ (800398c <HAL_RCC_ClockConfig+0x260>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003958:	4b0b      	ldr	r3, [pc, #44]	@ (8003988 <HAL_RCC_ClockConfig+0x25c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d214      	bcs.n	8003990 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b08      	ldr	r3, [pc, #32]	@ (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 0207 	bic.w	r2, r3, #7
 800396e:	4906      	ldr	r1, [pc, #24]	@ (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b04      	ldr	r3, [pc, #16]	@ (8003988 <HAL_RCC_ClockConfig+0x25c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d005      	beq.n	8003990 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e040      	b.n	8003a0a <HAL_RCC_ClockConfig+0x2de>
 8003988:	40022000 	.word	0x40022000
 800398c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800399c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	491a      	ldr	r1, [pc, #104]	@ (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ba:	4b16      	ldr	r3, [pc, #88]	@ (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4912      	ldr	r1, [pc, #72]	@ (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039ce:	f000 f829 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80039d2:	4601      	mov	r1, r0
 80039d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a14 <HAL_RCC_ClockConfig+0x2e8>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039dc:	22f0      	movs	r2, #240	@ 0xf0
 80039de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	fa92 f2a2 	rbit	r2, r2
 80039e6:	60fa      	str	r2, [r7, #12]
  return result;
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	fab2 f282 	clz	r2, r2
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	40d3      	lsrs	r3, r2
 80039f2:	4a09      	ldr	r2, [pc, #36]	@ (8003a18 <HAL_RCC_ClockConfig+0x2ec>)
 80039f4:	5cd3      	ldrb	r3, [r2, r3]
 80039f6:	fa21 f303 	lsr.w	r3, r1, r3
 80039fa:	4a08      	ldr	r2, [pc, #32]	@ (8003a1c <HAL_RCC_ClockConfig+0x2f0>)
 80039fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80039fe:	4b08      	ldr	r3, [pc, #32]	@ (8003a20 <HAL_RCC_ClockConfig+0x2f4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd fd68 	bl	80014d8 <HAL_InitTick>
  
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3778      	adds	r7, #120	@ 0x78
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000
 8003a18:	08005538 	.word	0x08005538
 8003a1c:	20000000 	.word	0x20000000
 8003a20:	20000004 	.word	0x20000004

08003a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	2300      	movs	r3, #0
 8003a38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d002      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0x30>
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d003      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0x36>
 8003a52:	e026      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a54:	4b19      	ldr	r3, [pc, #100]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x98>)
 8003a56:	613b      	str	r3, [r7, #16]
      break;
 8003a58:	e026      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	0c9b      	lsrs	r3, r3, #18
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	4a17      	ldr	r2, [pc, #92]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a64:	5cd3      	ldrb	r3, [r2, r3]
 8003a66:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003a68:	4b13      	ldr	r3, [pc, #76]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	4a14      	ldr	r2, [pc, #80]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a72:	5cd3      	ldrb	r3, [r2, r3]
 8003a74:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a80:	4a0e      	ldr	r2, [pc, #56]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x98>)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e004      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a0c      	ldr	r2, [pc, #48]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a96:	fb02 f303 	mul.w	r3, r2, r3
 8003a9a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	613b      	str	r3, [r7, #16]
      break;
 8003aa0:	e002      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x98>)
 8003aa4:	613b      	str	r3, [r7, #16]
      break;
 8003aa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aa8:	693b      	ldr	r3, [r7, #16]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	007a1200 	.word	0x007a1200
 8003ac0:	08005548 	.word	0x08005548
 8003ac4:	08005558 	.word	0x08005558
 8003ac8:	003d0900 	.word	0x003d0900

08003acc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b092      	sub	sp, #72	@ 0x48
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80d4 	beq.w	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af0:	4b4e      	ldr	r3, [pc, #312]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10e      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afc:	4b4b      	ldr	r3, [pc, #300]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	4a4a      	ldr	r2, [pc, #296]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	61d3      	str	r3, [r2, #28]
 8003b08:	4b48      	ldr	r3, [pc, #288]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1a:	4b45      	ldr	r3, [pc, #276]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d118      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b26:	4b42      	ldr	r3, [pc, #264]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a41      	ldr	r2, [pc, #260]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b32:	f7fd fd15 	bl	8001560 <HAL_GetTick>
 8003b36:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b38:	e008      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3a:	f7fd fd11 	bl	8001560 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b64      	cmp	r3, #100	@ 0x64
 8003b46:	d901      	bls.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e169      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4c:	4b38      	ldr	r3, [pc, #224]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b58:	4b34      	ldr	r3, [pc, #208]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 8084 	beq.w	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b72:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d07c      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b78:	4b2c      	ldr	r3, [pc, #176]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b86:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8a:	fa93 f3a3 	rbit	r3, r3
 8003b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b92:	fab3 f383 	clz	r3, r3
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4b26      	ldr	r3, [pc, #152]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003baa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bca:	4a18      	ldr	r2, [pc, #96]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d04b      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bda:	f7fd fcc1 	bl	8001560 <HAL_GetTick>
 8003bde:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be0:	e00a      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be2:	f7fd fcbd 	bl	8001560 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e113      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c04:	2302      	movs	r3, #2
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	61fb      	str	r3, [r7, #28]
  return result;
 8003c10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f043 0302 	orr.w	r3, r3, #2
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d108      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c26:	4b01      	ldr	r3, [pc, #4]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	e00d      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40007000 	.word	0x40007000
 8003c34:	10908100 	.word	0x10908100
 8003c38:	2302      	movs	r3, #2
 8003c3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	fa93 f3a3 	rbit	r3, r3
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	4b78      	ldr	r3, [pc, #480]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	2202      	movs	r2, #2
 8003c4a:	613a      	str	r2, [r7, #16]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	fa92 f2a2 	rbit	r2, r2
 8003c52:	60fa      	str	r2, [r7, #12]
  return result;
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	fab2 f282 	clz	r2, r2
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	f002 021f 	and.w	r2, r2, #31
 8003c66:	2101      	movs	r1, #1
 8003c68:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0b7      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c72:	4b6d      	ldr	r3, [pc, #436]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	496a      	ldr	r1, [pc, #424]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d105      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8c:	4b66      	ldr	r3, [pc, #408]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	4a65      	ldr	r2, [pc, #404]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ca4:	4b60      	ldr	r3, [pc, #384]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca8:	f023 0203 	bic.w	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	495d      	ldr	r1, [pc, #372]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d008      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cc2:	4b59      	ldr	r3, [pc, #356]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	4956      	ldr	r1, [pc, #344]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ce0:	4b51      	ldr	r3, [pc, #324]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	494e      	ldr	r1, [pc, #312]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d02:	f023 0210 	bic.w	r2, r3, #16
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	4947      	ldr	r1, [pc, #284]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d1c:	4b42      	ldr	r3, [pc, #264]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d28:	493f      	ldr	r1, [pc, #252]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	f023 0220 	bic.w	r2, r3, #32
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	4938      	ldr	r1, [pc, #224]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d58:	4b33      	ldr	r3, [pc, #204]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	4930      	ldr	r1, [pc, #192]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d76:	4b2c      	ldr	r3, [pc, #176]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	4929      	ldr	r1, [pc, #164]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d94:	4b24      	ldr	r3, [pc, #144]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	4921      	ldr	r1, [pc, #132]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003db2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbe:	491a      	ldr	r1, [pc, #104]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003dd0:	4b15      	ldr	r3, [pc, #84]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd4:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ddc:	4912      	ldr	r1, [pc, #72]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003dee:	4b0e      	ldr	r3, [pc, #56]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	490b      	ldr	r1, [pc, #44]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003e0c:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e10:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e18:	4903      	ldr	r1, [pc, #12]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3748      	adds	r7, #72	@ 0x48
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40021000 	.word	0x40021000

08003e2c <std>:
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	b510      	push	{r4, lr}
 8003e30:	4604      	mov	r4, r0
 8003e32:	e9c0 3300 	strd	r3, r3, [r0]
 8003e36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e3a:	6083      	str	r3, [r0, #8]
 8003e3c:	8181      	strh	r1, [r0, #12]
 8003e3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e40:	81c2      	strh	r2, [r0, #14]
 8003e42:	6183      	str	r3, [r0, #24]
 8003e44:	4619      	mov	r1, r3
 8003e46:	2208      	movs	r2, #8
 8003e48:	305c      	adds	r0, #92	@ 0x5c
 8003e4a:	f000 f9f9 	bl	8004240 <memset>
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e84 <std+0x58>)
 8003e50:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e52:	4b0d      	ldr	r3, [pc, #52]	@ (8003e88 <std+0x5c>)
 8003e54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e56:	4b0d      	ldr	r3, [pc, #52]	@ (8003e8c <std+0x60>)
 8003e58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e90 <std+0x64>)
 8003e5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e94 <std+0x68>)
 8003e60:	6224      	str	r4, [r4, #32]
 8003e62:	429c      	cmp	r4, r3
 8003e64:	d006      	beq.n	8003e74 <std+0x48>
 8003e66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e6a:	4294      	cmp	r4, r2
 8003e6c:	d002      	beq.n	8003e74 <std+0x48>
 8003e6e:	33d0      	adds	r3, #208	@ 0xd0
 8003e70:	429c      	cmp	r4, r3
 8003e72:	d105      	bne.n	8003e80 <std+0x54>
 8003e74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e7c:	f000 ba58 	b.w	8004330 <__retarget_lock_init_recursive>
 8003e80:	bd10      	pop	{r4, pc}
 8003e82:	bf00      	nop
 8003e84:	08004091 	.word	0x08004091
 8003e88:	080040b3 	.word	0x080040b3
 8003e8c:	080040eb 	.word	0x080040eb
 8003e90:	0800410f 	.word	0x0800410f
 8003e94:	20000104 	.word	0x20000104

08003e98 <stdio_exit_handler>:
 8003e98:	4a02      	ldr	r2, [pc, #8]	@ (8003ea4 <stdio_exit_handler+0xc>)
 8003e9a:	4903      	ldr	r1, [pc, #12]	@ (8003ea8 <stdio_exit_handler+0x10>)
 8003e9c:	4803      	ldr	r0, [pc, #12]	@ (8003eac <stdio_exit_handler+0x14>)
 8003e9e:	f000 b869 	b.w	8003f74 <_fwalk_sglue>
 8003ea2:	bf00      	nop
 8003ea4:	2000000c 	.word	0x2000000c
 8003ea8:	08004bd1 	.word	0x08004bd1
 8003eac:	2000001c 	.word	0x2000001c

08003eb0 <cleanup_stdio>:
 8003eb0:	6841      	ldr	r1, [r0, #4]
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee4 <cleanup_stdio+0x34>)
 8003eb4:	4299      	cmp	r1, r3
 8003eb6:	b510      	push	{r4, lr}
 8003eb8:	4604      	mov	r4, r0
 8003eba:	d001      	beq.n	8003ec0 <cleanup_stdio+0x10>
 8003ebc:	f000 fe88 	bl	8004bd0 <_fflush_r>
 8003ec0:	68a1      	ldr	r1, [r4, #8]
 8003ec2:	4b09      	ldr	r3, [pc, #36]	@ (8003ee8 <cleanup_stdio+0x38>)
 8003ec4:	4299      	cmp	r1, r3
 8003ec6:	d002      	beq.n	8003ece <cleanup_stdio+0x1e>
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f000 fe81 	bl	8004bd0 <_fflush_r>
 8003ece:	68e1      	ldr	r1, [r4, #12]
 8003ed0:	4b06      	ldr	r3, [pc, #24]	@ (8003eec <cleanup_stdio+0x3c>)
 8003ed2:	4299      	cmp	r1, r3
 8003ed4:	d004      	beq.n	8003ee0 <cleanup_stdio+0x30>
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003edc:	f000 be78 	b.w	8004bd0 <_fflush_r>
 8003ee0:	bd10      	pop	{r4, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000104 	.word	0x20000104
 8003ee8:	2000016c 	.word	0x2000016c
 8003eec:	200001d4 	.word	0x200001d4

08003ef0 <global_stdio_init.part.0>:
 8003ef0:	b510      	push	{r4, lr}
 8003ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8003f20 <global_stdio_init.part.0+0x30>)
 8003ef4:	4c0b      	ldr	r4, [pc, #44]	@ (8003f24 <global_stdio_init.part.0+0x34>)
 8003ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8003f28 <global_stdio_init.part.0+0x38>)
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	4620      	mov	r0, r4
 8003efc:	2200      	movs	r2, #0
 8003efe:	2104      	movs	r1, #4
 8003f00:	f7ff ff94 	bl	8003e2c <std>
 8003f04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f08:	2201      	movs	r2, #1
 8003f0a:	2109      	movs	r1, #9
 8003f0c:	f7ff ff8e 	bl	8003e2c <std>
 8003f10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f14:	2202      	movs	r2, #2
 8003f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f1a:	2112      	movs	r1, #18
 8003f1c:	f7ff bf86 	b.w	8003e2c <std>
 8003f20:	2000023c 	.word	0x2000023c
 8003f24:	20000104 	.word	0x20000104
 8003f28:	08003e99 	.word	0x08003e99

08003f2c <__sfp_lock_acquire>:
 8003f2c:	4801      	ldr	r0, [pc, #4]	@ (8003f34 <__sfp_lock_acquire+0x8>)
 8003f2e:	f000 ba00 	b.w	8004332 <__retarget_lock_acquire_recursive>
 8003f32:	bf00      	nop
 8003f34:	20000245 	.word	0x20000245

08003f38 <__sfp_lock_release>:
 8003f38:	4801      	ldr	r0, [pc, #4]	@ (8003f40 <__sfp_lock_release+0x8>)
 8003f3a:	f000 b9fb 	b.w	8004334 <__retarget_lock_release_recursive>
 8003f3e:	bf00      	nop
 8003f40:	20000245 	.word	0x20000245

08003f44 <__sinit>:
 8003f44:	b510      	push	{r4, lr}
 8003f46:	4604      	mov	r4, r0
 8003f48:	f7ff fff0 	bl	8003f2c <__sfp_lock_acquire>
 8003f4c:	6a23      	ldr	r3, [r4, #32]
 8003f4e:	b11b      	cbz	r3, 8003f58 <__sinit+0x14>
 8003f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f54:	f7ff bff0 	b.w	8003f38 <__sfp_lock_release>
 8003f58:	4b04      	ldr	r3, [pc, #16]	@ (8003f6c <__sinit+0x28>)
 8003f5a:	6223      	str	r3, [r4, #32]
 8003f5c:	4b04      	ldr	r3, [pc, #16]	@ (8003f70 <__sinit+0x2c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1f5      	bne.n	8003f50 <__sinit+0xc>
 8003f64:	f7ff ffc4 	bl	8003ef0 <global_stdio_init.part.0>
 8003f68:	e7f2      	b.n	8003f50 <__sinit+0xc>
 8003f6a:	bf00      	nop
 8003f6c:	08003eb1 	.word	0x08003eb1
 8003f70:	2000023c 	.word	0x2000023c

08003f74 <_fwalk_sglue>:
 8003f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f78:	4607      	mov	r7, r0
 8003f7a:	4688      	mov	r8, r1
 8003f7c:	4614      	mov	r4, r2
 8003f7e:	2600      	movs	r6, #0
 8003f80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f84:	f1b9 0901 	subs.w	r9, r9, #1
 8003f88:	d505      	bpl.n	8003f96 <_fwalk_sglue+0x22>
 8003f8a:	6824      	ldr	r4, [r4, #0]
 8003f8c:	2c00      	cmp	r4, #0
 8003f8e:	d1f7      	bne.n	8003f80 <_fwalk_sglue+0xc>
 8003f90:	4630      	mov	r0, r6
 8003f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f96:	89ab      	ldrh	r3, [r5, #12]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d907      	bls.n	8003fac <_fwalk_sglue+0x38>
 8003f9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	d003      	beq.n	8003fac <_fwalk_sglue+0x38>
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	4638      	mov	r0, r7
 8003fa8:	47c0      	blx	r8
 8003faa:	4306      	orrs	r6, r0
 8003fac:	3568      	adds	r5, #104	@ 0x68
 8003fae:	e7e9      	b.n	8003f84 <_fwalk_sglue+0x10>

08003fb0 <iprintf>:
 8003fb0:	b40f      	push	{r0, r1, r2, r3}
 8003fb2:	b507      	push	{r0, r1, r2, lr}
 8003fb4:	4906      	ldr	r1, [pc, #24]	@ (8003fd0 <iprintf+0x20>)
 8003fb6:	ab04      	add	r3, sp, #16
 8003fb8:	6808      	ldr	r0, [r1, #0]
 8003fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fbe:	6881      	ldr	r1, [r0, #8]
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	f000 fadb 	bl	800457c <_vfiprintf_r>
 8003fc6:	b003      	add	sp, #12
 8003fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fcc:	b004      	add	sp, #16
 8003fce:	4770      	bx	lr
 8003fd0:	20000018 	.word	0x20000018

08003fd4 <_puts_r>:
 8003fd4:	6a03      	ldr	r3, [r0, #32]
 8003fd6:	b570      	push	{r4, r5, r6, lr}
 8003fd8:	6884      	ldr	r4, [r0, #8]
 8003fda:	4605      	mov	r5, r0
 8003fdc:	460e      	mov	r6, r1
 8003fde:	b90b      	cbnz	r3, 8003fe4 <_puts_r+0x10>
 8003fe0:	f7ff ffb0 	bl	8003f44 <__sinit>
 8003fe4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003fe6:	07db      	lsls	r3, r3, #31
 8003fe8:	d405      	bmi.n	8003ff6 <_puts_r+0x22>
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	0598      	lsls	r0, r3, #22
 8003fee:	d402      	bmi.n	8003ff6 <_puts_r+0x22>
 8003ff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ff2:	f000 f99e 	bl	8004332 <__retarget_lock_acquire_recursive>
 8003ff6:	89a3      	ldrh	r3, [r4, #12]
 8003ff8:	0719      	lsls	r1, r3, #28
 8003ffa:	d502      	bpl.n	8004002 <_puts_r+0x2e>
 8003ffc:	6923      	ldr	r3, [r4, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d135      	bne.n	800406e <_puts_r+0x9a>
 8004002:	4621      	mov	r1, r4
 8004004:	4628      	mov	r0, r5
 8004006:	f000 f8c5 	bl	8004194 <__swsetup_r>
 800400a:	b380      	cbz	r0, 800406e <_puts_r+0x9a>
 800400c:	f04f 35ff 	mov.w	r5, #4294967295
 8004010:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004012:	07da      	lsls	r2, r3, #31
 8004014:	d405      	bmi.n	8004022 <_puts_r+0x4e>
 8004016:	89a3      	ldrh	r3, [r4, #12]
 8004018:	059b      	lsls	r3, r3, #22
 800401a:	d402      	bmi.n	8004022 <_puts_r+0x4e>
 800401c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800401e:	f000 f989 	bl	8004334 <__retarget_lock_release_recursive>
 8004022:	4628      	mov	r0, r5
 8004024:	bd70      	pop	{r4, r5, r6, pc}
 8004026:	2b00      	cmp	r3, #0
 8004028:	da04      	bge.n	8004034 <_puts_r+0x60>
 800402a:	69a2      	ldr	r2, [r4, #24]
 800402c:	429a      	cmp	r2, r3
 800402e:	dc17      	bgt.n	8004060 <_puts_r+0x8c>
 8004030:	290a      	cmp	r1, #10
 8004032:	d015      	beq.n	8004060 <_puts_r+0x8c>
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	6022      	str	r2, [r4, #0]
 800403a:	7019      	strb	r1, [r3, #0]
 800403c:	68a3      	ldr	r3, [r4, #8]
 800403e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004042:	3b01      	subs	r3, #1
 8004044:	60a3      	str	r3, [r4, #8]
 8004046:	2900      	cmp	r1, #0
 8004048:	d1ed      	bne.n	8004026 <_puts_r+0x52>
 800404a:	2b00      	cmp	r3, #0
 800404c:	da11      	bge.n	8004072 <_puts_r+0x9e>
 800404e:	4622      	mov	r2, r4
 8004050:	210a      	movs	r1, #10
 8004052:	4628      	mov	r0, r5
 8004054:	f000 f85f 	bl	8004116 <__swbuf_r>
 8004058:	3001      	adds	r0, #1
 800405a:	d0d7      	beq.n	800400c <_puts_r+0x38>
 800405c:	250a      	movs	r5, #10
 800405e:	e7d7      	b.n	8004010 <_puts_r+0x3c>
 8004060:	4622      	mov	r2, r4
 8004062:	4628      	mov	r0, r5
 8004064:	f000 f857 	bl	8004116 <__swbuf_r>
 8004068:	3001      	adds	r0, #1
 800406a:	d1e7      	bne.n	800403c <_puts_r+0x68>
 800406c:	e7ce      	b.n	800400c <_puts_r+0x38>
 800406e:	3e01      	subs	r6, #1
 8004070:	e7e4      	b.n	800403c <_puts_r+0x68>
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	6022      	str	r2, [r4, #0]
 8004078:	220a      	movs	r2, #10
 800407a:	701a      	strb	r2, [r3, #0]
 800407c:	e7ee      	b.n	800405c <_puts_r+0x88>
	...

08004080 <puts>:
 8004080:	4b02      	ldr	r3, [pc, #8]	@ (800408c <puts+0xc>)
 8004082:	4601      	mov	r1, r0
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	f7ff bfa5 	b.w	8003fd4 <_puts_r>
 800408a:	bf00      	nop
 800408c:	20000018 	.word	0x20000018

08004090 <__sread>:
 8004090:	b510      	push	{r4, lr}
 8004092:	460c      	mov	r4, r1
 8004094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004098:	f000 f8fc 	bl	8004294 <_read_r>
 800409c:	2800      	cmp	r0, #0
 800409e:	bfab      	itete	ge
 80040a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80040a2:	89a3      	ldrhlt	r3, [r4, #12]
 80040a4:	181b      	addge	r3, r3, r0
 80040a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80040aa:	bfac      	ite	ge
 80040ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80040ae:	81a3      	strhlt	r3, [r4, #12]
 80040b0:	bd10      	pop	{r4, pc}

080040b2 <__swrite>:
 80040b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b6:	461f      	mov	r7, r3
 80040b8:	898b      	ldrh	r3, [r1, #12]
 80040ba:	05db      	lsls	r3, r3, #23
 80040bc:	4605      	mov	r5, r0
 80040be:	460c      	mov	r4, r1
 80040c0:	4616      	mov	r6, r2
 80040c2:	d505      	bpl.n	80040d0 <__swrite+0x1e>
 80040c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040c8:	2302      	movs	r3, #2
 80040ca:	2200      	movs	r2, #0
 80040cc:	f000 f8d0 	bl	8004270 <_lseek_r>
 80040d0:	89a3      	ldrh	r3, [r4, #12]
 80040d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040da:	81a3      	strh	r3, [r4, #12]
 80040dc:	4632      	mov	r2, r6
 80040de:	463b      	mov	r3, r7
 80040e0:	4628      	mov	r0, r5
 80040e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040e6:	f000 b8e7 	b.w	80042b8 <_write_r>

080040ea <__sseek>:
 80040ea:	b510      	push	{r4, lr}
 80040ec:	460c      	mov	r4, r1
 80040ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040f2:	f000 f8bd 	bl	8004270 <_lseek_r>
 80040f6:	1c43      	adds	r3, r0, #1
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	bf15      	itete	ne
 80040fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80040fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004102:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004106:	81a3      	strheq	r3, [r4, #12]
 8004108:	bf18      	it	ne
 800410a:	81a3      	strhne	r3, [r4, #12]
 800410c:	bd10      	pop	{r4, pc}

0800410e <__sclose>:
 800410e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004112:	f000 b89d 	b.w	8004250 <_close_r>

08004116 <__swbuf_r>:
 8004116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004118:	460e      	mov	r6, r1
 800411a:	4614      	mov	r4, r2
 800411c:	4605      	mov	r5, r0
 800411e:	b118      	cbz	r0, 8004128 <__swbuf_r+0x12>
 8004120:	6a03      	ldr	r3, [r0, #32]
 8004122:	b90b      	cbnz	r3, 8004128 <__swbuf_r+0x12>
 8004124:	f7ff ff0e 	bl	8003f44 <__sinit>
 8004128:	69a3      	ldr	r3, [r4, #24]
 800412a:	60a3      	str	r3, [r4, #8]
 800412c:	89a3      	ldrh	r3, [r4, #12]
 800412e:	071a      	lsls	r2, r3, #28
 8004130:	d501      	bpl.n	8004136 <__swbuf_r+0x20>
 8004132:	6923      	ldr	r3, [r4, #16]
 8004134:	b943      	cbnz	r3, 8004148 <__swbuf_r+0x32>
 8004136:	4621      	mov	r1, r4
 8004138:	4628      	mov	r0, r5
 800413a:	f000 f82b 	bl	8004194 <__swsetup_r>
 800413e:	b118      	cbz	r0, 8004148 <__swbuf_r+0x32>
 8004140:	f04f 37ff 	mov.w	r7, #4294967295
 8004144:	4638      	mov	r0, r7
 8004146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	6922      	ldr	r2, [r4, #16]
 800414c:	1a98      	subs	r0, r3, r2
 800414e:	6963      	ldr	r3, [r4, #20]
 8004150:	b2f6      	uxtb	r6, r6
 8004152:	4283      	cmp	r3, r0
 8004154:	4637      	mov	r7, r6
 8004156:	dc05      	bgt.n	8004164 <__swbuf_r+0x4e>
 8004158:	4621      	mov	r1, r4
 800415a:	4628      	mov	r0, r5
 800415c:	f000 fd38 	bl	8004bd0 <_fflush_r>
 8004160:	2800      	cmp	r0, #0
 8004162:	d1ed      	bne.n	8004140 <__swbuf_r+0x2a>
 8004164:	68a3      	ldr	r3, [r4, #8]
 8004166:	3b01      	subs	r3, #1
 8004168:	60a3      	str	r3, [r4, #8]
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	6022      	str	r2, [r4, #0]
 8004170:	701e      	strb	r6, [r3, #0]
 8004172:	6962      	ldr	r2, [r4, #20]
 8004174:	1c43      	adds	r3, r0, #1
 8004176:	429a      	cmp	r2, r3
 8004178:	d004      	beq.n	8004184 <__swbuf_r+0x6e>
 800417a:	89a3      	ldrh	r3, [r4, #12]
 800417c:	07db      	lsls	r3, r3, #31
 800417e:	d5e1      	bpl.n	8004144 <__swbuf_r+0x2e>
 8004180:	2e0a      	cmp	r6, #10
 8004182:	d1df      	bne.n	8004144 <__swbuf_r+0x2e>
 8004184:	4621      	mov	r1, r4
 8004186:	4628      	mov	r0, r5
 8004188:	f000 fd22 	bl	8004bd0 <_fflush_r>
 800418c:	2800      	cmp	r0, #0
 800418e:	d0d9      	beq.n	8004144 <__swbuf_r+0x2e>
 8004190:	e7d6      	b.n	8004140 <__swbuf_r+0x2a>
	...

08004194 <__swsetup_r>:
 8004194:	b538      	push	{r3, r4, r5, lr}
 8004196:	4b29      	ldr	r3, [pc, #164]	@ (800423c <__swsetup_r+0xa8>)
 8004198:	4605      	mov	r5, r0
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	460c      	mov	r4, r1
 800419e:	b118      	cbz	r0, 80041a8 <__swsetup_r+0x14>
 80041a0:	6a03      	ldr	r3, [r0, #32]
 80041a2:	b90b      	cbnz	r3, 80041a8 <__swsetup_r+0x14>
 80041a4:	f7ff fece 	bl	8003f44 <__sinit>
 80041a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ac:	0719      	lsls	r1, r3, #28
 80041ae:	d422      	bmi.n	80041f6 <__swsetup_r+0x62>
 80041b0:	06da      	lsls	r2, r3, #27
 80041b2:	d407      	bmi.n	80041c4 <__swsetup_r+0x30>
 80041b4:	2209      	movs	r2, #9
 80041b6:	602a      	str	r2, [r5, #0]
 80041b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041bc:	81a3      	strh	r3, [r4, #12]
 80041be:	f04f 30ff 	mov.w	r0, #4294967295
 80041c2:	e033      	b.n	800422c <__swsetup_r+0x98>
 80041c4:	0758      	lsls	r0, r3, #29
 80041c6:	d512      	bpl.n	80041ee <__swsetup_r+0x5a>
 80041c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80041ca:	b141      	cbz	r1, 80041de <__swsetup_r+0x4a>
 80041cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80041d0:	4299      	cmp	r1, r3
 80041d2:	d002      	beq.n	80041da <__swsetup_r+0x46>
 80041d4:	4628      	mov	r0, r5
 80041d6:	f000 f8af 	bl	8004338 <_free_r>
 80041da:	2300      	movs	r3, #0
 80041dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80041de:	89a3      	ldrh	r3, [r4, #12]
 80041e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80041e4:	81a3      	strh	r3, [r4, #12]
 80041e6:	2300      	movs	r3, #0
 80041e8:	6063      	str	r3, [r4, #4]
 80041ea:	6923      	ldr	r3, [r4, #16]
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	89a3      	ldrh	r3, [r4, #12]
 80041f0:	f043 0308 	orr.w	r3, r3, #8
 80041f4:	81a3      	strh	r3, [r4, #12]
 80041f6:	6923      	ldr	r3, [r4, #16]
 80041f8:	b94b      	cbnz	r3, 800420e <__swsetup_r+0x7a>
 80041fa:	89a3      	ldrh	r3, [r4, #12]
 80041fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004204:	d003      	beq.n	800420e <__swsetup_r+0x7a>
 8004206:	4621      	mov	r1, r4
 8004208:	4628      	mov	r0, r5
 800420a:	f000 fd2f 	bl	8004c6c <__smakebuf_r>
 800420e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004212:	f013 0201 	ands.w	r2, r3, #1
 8004216:	d00a      	beq.n	800422e <__swsetup_r+0x9a>
 8004218:	2200      	movs	r2, #0
 800421a:	60a2      	str	r2, [r4, #8]
 800421c:	6962      	ldr	r2, [r4, #20]
 800421e:	4252      	negs	r2, r2
 8004220:	61a2      	str	r2, [r4, #24]
 8004222:	6922      	ldr	r2, [r4, #16]
 8004224:	b942      	cbnz	r2, 8004238 <__swsetup_r+0xa4>
 8004226:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800422a:	d1c5      	bne.n	80041b8 <__swsetup_r+0x24>
 800422c:	bd38      	pop	{r3, r4, r5, pc}
 800422e:	0799      	lsls	r1, r3, #30
 8004230:	bf58      	it	pl
 8004232:	6962      	ldrpl	r2, [r4, #20]
 8004234:	60a2      	str	r2, [r4, #8]
 8004236:	e7f4      	b.n	8004222 <__swsetup_r+0x8e>
 8004238:	2000      	movs	r0, #0
 800423a:	e7f7      	b.n	800422c <__swsetup_r+0x98>
 800423c:	20000018 	.word	0x20000018

08004240 <memset>:
 8004240:	4402      	add	r2, r0
 8004242:	4603      	mov	r3, r0
 8004244:	4293      	cmp	r3, r2
 8004246:	d100      	bne.n	800424a <memset+0xa>
 8004248:	4770      	bx	lr
 800424a:	f803 1b01 	strb.w	r1, [r3], #1
 800424e:	e7f9      	b.n	8004244 <memset+0x4>

08004250 <_close_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4d06      	ldr	r5, [pc, #24]	@ (800426c <_close_r+0x1c>)
 8004254:	2300      	movs	r3, #0
 8004256:	4604      	mov	r4, r0
 8004258:	4608      	mov	r0, r1
 800425a:	602b      	str	r3, [r5, #0]
 800425c:	f7fd f880 	bl	8001360 <_close>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d102      	bne.n	800426a <_close_r+0x1a>
 8004264:	682b      	ldr	r3, [r5, #0]
 8004266:	b103      	cbz	r3, 800426a <_close_r+0x1a>
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	bd38      	pop	{r3, r4, r5, pc}
 800426c:	20000240 	.word	0x20000240

08004270 <_lseek_r>:
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	4d07      	ldr	r5, [pc, #28]	@ (8004290 <_lseek_r+0x20>)
 8004274:	4604      	mov	r4, r0
 8004276:	4608      	mov	r0, r1
 8004278:	4611      	mov	r1, r2
 800427a:	2200      	movs	r2, #0
 800427c:	602a      	str	r2, [r5, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	f7fd f895 	bl	80013ae <_lseek>
 8004284:	1c43      	adds	r3, r0, #1
 8004286:	d102      	bne.n	800428e <_lseek_r+0x1e>
 8004288:	682b      	ldr	r3, [r5, #0]
 800428a:	b103      	cbz	r3, 800428e <_lseek_r+0x1e>
 800428c:	6023      	str	r3, [r4, #0]
 800428e:	bd38      	pop	{r3, r4, r5, pc}
 8004290:	20000240 	.word	0x20000240

08004294 <_read_r>:
 8004294:	b538      	push	{r3, r4, r5, lr}
 8004296:	4d07      	ldr	r5, [pc, #28]	@ (80042b4 <_read_r+0x20>)
 8004298:	4604      	mov	r4, r0
 800429a:	4608      	mov	r0, r1
 800429c:	4611      	mov	r1, r2
 800429e:	2200      	movs	r2, #0
 80042a0:	602a      	str	r2, [r5, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	f7fd f823 	bl	80012ee <_read>
 80042a8:	1c43      	adds	r3, r0, #1
 80042aa:	d102      	bne.n	80042b2 <_read_r+0x1e>
 80042ac:	682b      	ldr	r3, [r5, #0]
 80042ae:	b103      	cbz	r3, 80042b2 <_read_r+0x1e>
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	bd38      	pop	{r3, r4, r5, pc}
 80042b4:	20000240 	.word	0x20000240

080042b8 <_write_r>:
 80042b8:	b538      	push	{r3, r4, r5, lr}
 80042ba:	4d07      	ldr	r5, [pc, #28]	@ (80042d8 <_write_r+0x20>)
 80042bc:	4604      	mov	r4, r0
 80042be:	4608      	mov	r0, r1
 80042c0:	4611      	mov	r1, r2
 80042c2:	2200      	movs	r2, #0
 80042c4:	602a      	str	r2, [r5, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	f7fd f82e 	bl	8001328 <_write>
 80042cc:	1c43      	adds	r3, r0, #1
 80042ce:	d102      	bne.n	80042d6 <_write_r+0x1e>
 80042d0:	682b      	ldr	r3, [r5, #0]
 80042d2:	b103      	cbz	r3, 80042d6 <_write_r+0x1e>
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	bd38      	pop	{r3, r4, r5, pc}
 80042d8:	20000240 	.word	0x20000240

080042dc <__errno>:
 80042dc:	4b01      	ldr	r3, [pc, #4]	@ (80042e4 <__errno+0x8>)
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20000018 	.word	0x20000018

080042e8 <__libc_init_array>:
 80042e8:	b570      	push	{r4, r5, r6, lr}
 80042ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004320 <__libc_init_array+0x38>)
 80042ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004324 <__libc_init_array+0x3c>)
 80042ee:	1b64      	subs	r4, r4, r5
 80042f0:	10a4      	asrs	r4, r4, #2
 80042f2:	2600      	movs	r6, #0
 80042f4:	42a6      	cmp	r6, r4
 80042f6:	d109      	bne.n	800430c <__libc_init_array+0x24>
 80042f8:	4d0b      	ldr	r5, [pc, #44]	@ (8004328 <__libc_init_array+0x40>)
 80042fa:	4c0c      	ldr	r4, [pc, #48]	@ (800432c <__libc_init_array+0x44>)
 80042fc:	f001 f874 	bl	80053e8 <_init>
 8004300:	1b64      	subs	r4, r4, r5
 8004302:	10a4      	asrs	r4, r4, #2
 8004304:	2600      	movs	r6, #0
 8004306:	42a6      	cmp	r6, r4
 8004308:	d105      	bne.n	8004316 <__libc_init_array+0x2e>
 800430a:	bd70      	pop	{r4, r5, r6, pc}
 800430c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004310:	4798      	blx	r3
 8004312:	3601      	adds	r6, #1
 8004314:	e7ee      	b.n	80042f4 <__libc_init_array+0xc>
 8004316:	f855 3b04 	ldr.w	r3, [r5], #4
 800431a:	4798      	blx	r3
 800431c:	3601      	adds	r6, #1
 800431e:	e7f2      	b.n	8004306 <__libc_init_array+0x1e>
 8004320:	080055a4 	.word	0x080055a4
 8004324:	080055a4 	.word	0x080055a4
 8004328:	080055a4 	.word	0x080055a4
 800432c:	080055a8 	.word	0x080055a8

08004330 <__retarget_lock_init_recursive>:
 8004330:	4770      	bx	lr

08004332 <__retarget_lock_acquire_recursive>:
 8004332:	4770      	bx	lr

08004334 <__retarget_lock_release_recursive>:
 8004334:	4770      	bx	lr
	...

08004338 <_free_r>:
 8004338:	b538      	push	{r3, r4, r5, lr}
 800433a:	4605      	mov	r5, r0
 800433c:	2900      	cmp	r1, #0
 800433e:	d041      	beq.n	80043c4 <_free_r+0x8c>
 8004340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004344:	1f0c      	subs	r4, r1, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	bfb8      	it	lt
 800434a:	18e4      	addlt	r4, r4, r3
 800434c:	f000 f8e0 	bl	8004510 <__malloc_lock>
 8004350:	4a1d      	ldr	r2, [pc, #116]	@ (80043c8 <_free_r+0x90>)
 8004352:	6813      	ldr	r3, [r2, #0]
 8004354:	b933      	cbnz	r3, 8004364 <_free_r+0x2c>
 8004356:	6063      	str	r3, [r4, #4]
 8004358:	6014      	str	r4, [r2, #0]
 800435a:	4628      	mov	r0, r5
 800435c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004360:	f000 b8dc 	b.w	800451c <__malloc_unlock>
 8004364:	42a3      	cmp	r3, r4
 8004366:	d908      	bls.n	800437a <_free_r+0x42>
 8004368:	6820      	ldr	r0, [r4, #0]
 800436a:	1821      	adds	r1, r4, r0
 800436c:	428b      	cmp	r3, r1
 800436e:	bf01      	itttt	eq
 8004370:	6819      	ldreq	r1, [r3, #0]
 8004372:	685b      	ldreq	r3, [r3, #4]
 8004374:	1809      	addeq	r1, r1, r0
 8004376:	6021      	streq	r1, [r4, #0]
 8004378:	e7ed      	b.n	8004356 <_free_r+0x1e>
 800437a:	461a      	mov	r2, r3
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	b10b      	cbz	r3, 8004384 <_free_r+0x4c>
 8004380:	42a3      	cmp	r3, r4
 8004382:	d9fa      	bls.n	800437a <_free_r+0x42>
 8004384:	6811      	ldr	r1, [r2, #0]
 8004386:	1850      	adds	r0, r2, r1
 8004388:	42a0      	cmp	r0, r4
 800438a:	d10b      	bne.n	80043a4 <_free_r+0x6c>
 800438c:	6820      	ldr	r0, [r4, #0]
 800438e:	4401      	add	r1, r0
 8004390:	1850      	adds	r0, r2, r1
 8004392:	4283      	cmp	r3, r0
 8004394:	6011      	str	r1, [r2, #0]
 8004396:	d1e0      	bne.n	800435a <_free_r+0x22>
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	6053      	str	r3, [r2, #4]
 800439e:	4408      	add	r0, r1
 80043a0:	6010      	str	r0, [r2, #0]
 80043a2:	e7da      	b.n	800435a <_free_r+0x22>
 80043a4:	d902      	bls.n	80043ac <_free_r+0x74>
 80043a6:	230c      	movs	r3, #12
 80043a8:	602b      	str	r3, [r5, #0]
 80043aa:	e7d6      	b.n	800435a <_free_r+0x22>
 80043ac:	6820      	ldr	r0, [r4, #0]
 80043ae:	1821      	adds	r1, r4, r0
 80043b0:	428b      	cmp	r3, r1
 80043b2:	bf04      	itt	eq
 80043b4:	6819      	ldreq	r1, [r3, #0]
 80043b6:	685b      	ldreq	r3, [r3, #4]
 80043b8:	6063      	str	r3, [r4, #4]
 80043ba:	bf04      	itt	eq
 80043bc:	1809      	addeq	r1, r1, r0
 80043be:	6021      	streq	r1, [r4, #0]
 80043c0:	6054      	str	r4, [r2, #4]
 80043c2:	e7ca      	b.n	800435a <_free_r+0x22>
 80043c4:	bd38      	pop	{r3, r4, r5, pc}
 80043c6:	bf00      	nop
 80043c8:	2000024c 	.word	0x2000024c

080043cc <sbrk_aligned>:
 80043cc:	b570      	push	{r4, r5, r6, lr}
 80043ce:	4e0f      	ldr	r6, [pc, #60]	@ (800440c <sbrk_aligned+0x40>)
 80043d0:	460c      	mov	r4, r1
 80043d2:	6831      	ldr	r1, [r6, #0]
 80043d4:	4605      	mov	r5, r0
 80043d6:	b911      	cbnz	r1, 80043de <sbrk_aligned+0x12>
 80043d8:	f000 fca6 	bl	8004d28 <_sbrk_r>
 80043dc:	6030      	str	r0, [r6, #0]
 80043de:	4621      	mov	r1, r4
 80043e0:	4628      	mov	r0, r5
 80043e2:	f000 fca1 	bl	8004d28 <_sbrk_r>
 80043e6:	1c43      	adds	r3, r0, #1
 80043e8:	d103      	bne.n	80043f2 <sbrk_aligned+0x26>
 80043ea:	f04f 34ff 	mov.w	r4, #4294967295
 80043ee:	4620      	mov	r0, r4
 80043f0:	bd70      	pop	{r4, r5, r6, pc}
 80043f2:	1cc4      	adds	r4, r0, #3
 80043f4:	f024 0403 	bic.w	r4, r4, #3
 80043f8:	42a0      	cmp	r0, r4
 80043fa:	d0f8      	beq.n	80043ee <sbrk_aligned+0x22>
 80043fc:	1a21      	subs	r1, r4, r0
 80043fe:	4628      	mov	r0, r5
 8004400:	f000 fc92 	bl	8004d28 <_sbrk_r>
 8004404:	3001      	adds	r0, #1
 8004406:	d1f2      	bne.n	80043ee <sbrk_aligned+0x22>
 8004408:	e7ef      	b.n	80043ea <sbrk_aligned+0x1e>
 800440a:	bf00      	nop
 800440c:	20000248 	.word	0x20000248

08004410 <_malloc_r>:
 8004410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004414:	1ccd      	adds	r5, r1, #3
 8004416:	f025 0503 	bic.w	r5, r5, #3
 800441a:	3508      	adds	r5, #8
 800441c:	2d0c      	cmp	r5, #12
 800441e:	bf38      	it	cc
 8004420:	250c      	movcc	r5, #12
 8004422:	2d00      	cmp	r5, #0
 8004424:	4606      	mov	r6, r0
 8004426:	db01      	blt.n	800442c <_malloc_r+0x1c>
 8004428:	42a9      	cmp	r1, r5
 800442a:	d904      	bls.n	8004436 <_malloc_r+0x26>
 800442c:	230c      	movs	r3, #12
 800442e:	6033      	str	r3, [r6, #0]
 8004430:	2000      	movs	r0, #0
 8004432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004436:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800450c <_malloc_r+0xfc>
 800443a:	f000 f869 	bl	8004510 <__malloc_lock>
 800443e:	f8d8 3000 	ldr.w	r3, [r8]
 8004442:	461c      	mov	r4, r3
 8004444:	bb44      	cbnz	r4, 8004498 <_malloc_r+0x88>
 8004446:	4629      	mov	r1, r5
 8004448:	4630      	mov	r0, r6
 800444a:	f7ff ffbf 	bl	80043cc <sbrk_aligned>
 800444e:	1c43      	adds	r3, r0, #1
 8004450:	4604      	mov	r4, r0
 8004452:	d158      	bne.n	8004506 <_malloc_r+0xf6>
 8004454:	f8d8 4000 	ldr.w	r4, [r8]
 8004458:	4627      	mov	r7, r4
 800445a:	2f00      	cmp	r7, #0
 800445c:	d143      	bne.n	80044e6 <_malloc_r+0xd6>
 800445e:	2c00      	cmp	r4, #0
 8004460:	d04b      	beq.n	80044fa <_malloc_r+0xea>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	4639      	mov	r1, r7
 8004466:	4630      	mov	r0, r6
 8004468:	eb04 0903 	add.w	r9, r4, r3
 800446c:	f000 fc5c 	bl	8004d28 <_sbrk_r>
 8004470:	4581      	cmp	r9, r0
 8004472:	d142      	bne.n	80044fa <_malloc_r+0xea>
 8004474:	6821      	ldr	r1, [r4, #0]
 8004476:	1a6d      	subs	r5, r5, r1
 8004478:	4629      	mov	r1, r5
 800447a:	4630      	mov	r0, r6
 800447c:	f7ff ffa6 	bl	80043cc <sbrk_aligned>
 8004480:	3001      	adds	r0, #1
 8004482:	d03a      	beq.n	80044fa <_malloc_r+0xea>
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	442b      	add	r3, r5
 8004488:	6023      	str	r3, [r4, #0]
 800448a:	f8d8 3000 	ldr.w	r3, [r8]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	bb62      	cbnz	r2, 80044ec <_malloc_r+0xdc>
 8004492:	f8c8 7000 	str.w	r7, [r8]
 8004496:	e00f      	b.n	80044b8 <_malloc_r+0xa8>
 8004498:	6822      	ldr	r2, [r4, #0]
 800449a:	1b52      	subs	r2, r2, r5
 800449c:	d420      	bmi.n	80044e0 <_malloc_r+0xd0>
 800449e:	2a0b      	cmp	r2, #11
 80044a0:	d917      	bls.n	80044d2 <_malloc_r+0xc2>
 80044a2:	1961      	adds	r1, r4, r5
 80044a4:	42a3      	cmp	r3, r4
 80044a6:	6025      	str	r5, [r4, #0]
 80044a8:	bf18      	it	ne
 80044aa:	6059      	strne	r1, [r3, #4]
 80044ac:	6863      	ldr	r3, [r4, #4]
 80044ae:	bf08      	it	eq
 80044b0:	f8c8 1000 	streq.w	r1, [r8]
 80044b4:	5162      	str	r2, [r4, r5]
 80044b6:	604b      	str	r3, [r1, #4]
 80044b8:	4630      	mov	r0, r6
 80044ba:	f000 f82f 	bl	800451c <__malloc_unlock>
 80044be:	f104 000b 	add.w	r0, r4, #11
 80044c2:	1d23      	adds	r3, r4, #4
 80044c4:	f020 0007 	bic.w	r0, r0, #7
 80044c8:	1ac2      	subs	r2, r0, r3
 80044ca:	bf1c      	itt	ne
 80044cc:	1a1b      	subne	r3, r3, r0
 80044ce:	50a3      	strne	r3, [r4, r2]
 80044d0:	e7af      	b.n	8004432 <_malloc_r+0x22>
 80044d2:	6862      	ldr	r2, [r4, #4]
 80044d4:	42a3      	cmp	r3, r4
 80044d6:	bf0c      	ite	eq
 80044d8:	f8c8 2000 	streq.w	r2, [r8]
 80044dc:	605a      	strne	r2, [r3, #4]
 80044de:	e7eb      	b.n	80044b8 <_malloc_r+0xa8>
 80044e0:	4623      	mov	r3, r4
 80044e2:	6864      	ldr	r4, [r4, #4]
 80044e4:	e7ae      	b.n	8004444 <_malloc_r+0x34>
 80044e6:	463c      	mov	r4, r7
 80044e8:	687f      	ldr	r7, [r7, #4]
 80044ea:	e7b6      	b.n	800445a <_malloc_r+0x4a>
 80044ec:	461a      	mov	r2, r3
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	42a3      	cmp	r3, r4
 80044f2:	d1fb      	bne.n	80044ec <_malloc_r+0xdc>
 80044f4:	2300      	movs	r3, #0
 80044f6:	6053      	str	r3, [r2, #4]
 80044f8:	e7de      	b.n	80044b8 <_malloc_r+0xa8>
 80044fa:	230c      	movs	r3, #12
 80044fc:	6033      	str	r3, [r6, #0]
 80044fe:	4630      	mov	r0, r6
 8004500:	f000 f80c 	bl	800451c <__malloc_unlock>
 8004504:	e794      	b.n	8004430 <_malloc_r+0x20>
 8004506:	6005      	str	r5, [r0, #0]
 8004508:	e7d6      	b.n	80044b8 <_malloc_r+0xa8>
 800450a:	bf00      	nop
 800450c:	2000024c 	.word	0x2000024c

08004510 <__malloc_lock>:
 8004510:	4801      	ldr	r0, [pc, #4]	@ (8004518 <__malloc_lock+0x8>)
 8004512:	f7ff bf0e 	b.w	8004332 <__retarget_lock_acquire_recursive>
 8004516:	bf00      	nop
 8004518:	20000244 	.word	0x20000244

0800451c <__malloc_unlock>:
 800451c:	4801      	ldr	r0, [pc, #4]	@ (8004524 <__malloc_unlock+0x8>)
 800451e:	f7ff bf09 	b.w	8004334 <__retarget_lock_release_recursive>
 8004522:	bf00      	nop
 8004524:	20000244 	.word	0x20000244

08004528 <__sfputc_r>:
 8004528:	6893      	ldr	r3, [r2, #8]
 800452a:	3b01      	subs	r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	b410      	push	{r4}
 8004530:	6093      	str	r3, [r2, #8]
 8004532:	da08      	bge.n	8004546 <__sfputc_r+0x1e>
 8004534:	6994      	ldr	r4, [r2, #24]
 8004536:	42a3      	cmp	r3, r4
 8004538:	db01      	blt.n	800453e <__sfputc_r+0x16>
 800453a:	290a      	cmp	r1, #10
 800453c:	d103      	bne.n	8004546 <__sfputc_r+0x1e>
 800453e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004542:	f7ff bde8 	b.w	8004116 <__swbuf_r>
 8004546:	6813      	ldr	r3, [r2, #0]
 8004548:	1c58      	adds	r0, r3, #1
 800454a:	6010      	str	r0, [r2, #0]
 800454c:	7019      	strb	r1, [r3, #0]
 800454e:	4608      	mov	r0, r1
 8004550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004554:	4770      	bx	lr

08004556 <__sfputs_r>:
 8004556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004558:	4606      	mov	r6, r0
 800455a:	460f      	mov	r7, r1
 800455c:	4614      	mov	r4, r2
 800455e:	18d5      	adds	r5, r2, r3
 8004560:	42ac      	cmp	r4, r5
 8004562:	d101      	bne.n	8004568 <__sfputs_r+0x12>
 8004564:	2000      	movs	r0, #0
 8004566:	e007      	b.n	8004578 <__sfputs_r+0x22>
 8004568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800456c:	463a      	mov	r2, r7
 800456e:	4630      	mov	r0, r6
 8004570:	f7ff ffda 	bl	8004528 <__sfputc_r>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	d1f3      	bne.n	8004560 <__sfputs_r+0xa>
 8004578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800457c <_vfiprintf_r>:
 800457c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004580:	460d      	mov	r5, r1
 8004582:	b09d      	sub	sp, #116	@ 0x74
 8004584:	4614      	mov	r4, r2
 8004586:	4698      	mov	r8, r3
 8004588:	4606      	mov	r6, r0
 800458a:	b118      	cbz	r0, 8004594 <_vfiprintf_r+0x18>
 800458c:	6a03      	ldr	r3, [r0, #32]
 800458e:	b90b      	cbnz	r3, 8004594 <_vfiprintf_r+0x18>
 8004590:	f7ff fcd8 	bl	8003f44 <__sinit>
 8004594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004596:	07d9      	lsls	r1, r3, #31
 8004598:	d405      	bmi.n	80045a6 <_vfiprintf_r+0x2a>
 800459a:	89ab      	ldrh	r3, [r5, #12]
 800459c:	059a      	lsls	r2, r3, #22
 800459e:	d402      	bmi.n	80045a6 <_vfiprintf_r+0x2a>
 80045a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045a2:	f7ff fec6 	bl	8004332 <__retarget_lock_acquire_recursive>
 80045a6:	89ab      	ldrh	r3, [r5, #12]
 80045a8:	071b      	lsls	r3, r3, #28
 80045aa:	d501      	bpl.n	80045b0 <_vfiprintf_r+0x34>
 80045ac:	692b      	ldr	r3, [r5, #16]
 80045ae:	b99b      	cbnz	r3, 80045d8 <_vfiprintf_r+0x5c>
 80045b0:	4629      	mov	r1, r5
 80045b2:	4630      	mov	r0, r6
 80045b4:	f7ff fdee 	bl	8004194 <__swsetup_r>
 80045b8:	b170      	cbz	r0, 80045d8 <_vfiprintf_r+0x5c>
 80045ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045bc:	07dc      	lsls	r4, r3, #31
 80045be:	d504      	bpl.n	80045ca <_vfiprintf_r+0x4e>
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	b01d      	add	sp, #116	@ 0x74
 80045c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ca:	89ab      	ldrh	r3, [r5, #12]
 80045cc:	0598      	lsls	r0, r3, #22
 80045ce:	d4f7      	bmi.n	80045c0 <_vfiprintf_r+0x44>
 80045d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045d2:	f7ff feaf 	bl	8004334 <__retarget_lock_release_recursive>
 80045d6:	e7f3      	b.n	80045c0 <_vfiprintf_r+0x44>
 80045d8:	2300      	movs	r3, #0
 80045da:	9309      	str	r3, [sp, #36]	@ 0x24
 80045dc:	2320      	movs	r3, #32
 80045de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80045e6:	2330      	movs	r3, #48	@ 0x30
 80045e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004798 <_vfiprintf_r+0x21c>
 80045ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045f0:	f04f 0901 	mov.w	r9, #1
 80045f4:	4623      	mov	r3, r4
 80045f6:	469a      	mov	sl, r3
 80045f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045fc:	b10a      	cbz	r2, 8004602 <_vfiprintf_r+0x86>
 80045fe:	2a25      	cmp	r2, #37	@ 0x25
 8004600:	d1f9      	bne.n	80045f6 <_vfiprintf_r+0x7a>
 8004602:	ebba 0b04 	subs.w	fp, sl, r4
 8004606:	d00b      	beq.n	8004620 <_vfiprintf_r+0xa4>
 8004608:	465b      	mov	r3, fp
 800460a:	4622      	mov	r2, r4
 800460c:	4629      	mov	r1, r5
 800460e:	4630      	mov	r0, r6
 8004610:	f7ff ffa1 	bl	8004556 <__sfputs_r>
 8004614:	3001      	adds	r0, #1
 8004616:	f000 80a7 	beq.w	8004768 <_vfiprintf_r+0x1ec>
 800461a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800461c:	445a      	add	r2, fp
 800461e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004620:	f89a 3000 	ldrb.w	r3, [sl]
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 809f 	beq.w	8004768 <_vfiprintf_r+0x1ec>
 800462a:	2300      	movs	r3, #0
 800462c:	f04f 32ff 	mov.w	r2, #4294967295
 8004630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004634:	f10a 0a01 	add.w	sl, sl, #1
 8004638:	9304      	str	r3, [sp, #16]
 800463a:	9307      	str	r3, [sp, #28]
 800463c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004640:	931a      	str	r3, [sp, #104]	@ 0x68
 8004642:	4654      	mov	r4, sl
 8004644:	2205      	movs	r2, #5
 8004646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800464a:	4853      	ldr	r0, [pc, #332]	@ (8004798 <_vfiprintf_r+0x21c>)
 800464c:	f7fb fdc0 	bl	80001d0 <memchr>
 8004650:	9a04      	ldr	r2, [sp, #16]
 8004652:	b9d8      	cbnz	r0, 800468c <_vfiprintf_r+0x110>
 8004654:	06d1      	lsls	r1, r2, #27
 8004656:	bf44      	itt	mi
 8004658:	2320      	movmi	r3, #32
 800465a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800465e:	0713      	lsls	r3, r2, #28
 8004660:	bf44      	itt	mi
 8004662:	232b      	movmi	r3, #43	@ 0x2b
 8004664:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004668:	f89a 3000 	ldrb.w	r3, [sl]
 800466c:	2b2a      	cmp	r3, #42	@ 0x2a
 800466e:	d015      	beq.n	800469c <_vfiprintf_r+0x120>
 8004670:	9a07      	ldr	r2, [sp, #28]
 8004672:	4654      	mov	r4, sl
 8004674:	2000      	movs	r0, #0
 8004676:	f04f 0c0a 	mov.w	ip, #10
 800467a:	4621      	mov	r1, r4
 800467c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004680:	3b30      	subs	r3, #48	@ 0x30
 8004682:	2b09      	cmp	r3, #9
 8004684:	d94b      	bls.n	800471e <_vfiprintf_r+0x1a2>
 8004686:	b1b0      	cbz	r0, 80046b6 <_vfiprintf_r+0x13a>
 8004688:	9207      	str	r2, [sp, #28]
 800468a:	e014      	b.n	80046b6 <_vfiprintf_r+0x13a>
 800468c:	eba0 0308 	sub.w	r3, r0, r8
 8004690:	fa09 f303 	lsl.w	r3, r9, r3
 8004694:	4313      	orrs	r3, r2
 8004696:	9304      	str	r3, [sp, #16]
 8004698:	46a2      	mov	sl, r4
 800469a:	e7d2      	b.n	8004642 <_vfiprintf_r+0xc6>
 800469c:	9b03      	ldr	r3, [sp, #12]
 800469e:	1d19      	adds	r1, r3, #4
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	9103      	str	r1, [sp, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bfbb      	ittet	lt
 80046a8:	425b      	neglt	r3, r3
 80046aa:	f042 0202 	orrlt.w	r2, r2, #2
 80046ae:	9307      	strge	r3, [sp, #28]
 80046b0:	9307      	strlt	r3, [sp, #28]
 80046b2:	bfb8      	it	lt
 80046b4:	9204      	strlt	r2, [sp, #16]
 80046b6:	7823      	ldrb	r3, [r4, #0]
 80046b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80046ba:	d10a      	bne.n	80046d2 <_vfiprintf_r+0x156>
 80046bc:	7863      	ldrb	r3, [r4, #1]
 80046be:	2b2a      	cmp	r3, #42	@ 0x2a
 80046c0:	d132      	bne.n	8004728 <_vfiprintf_r+0x1ac>
 80046c2:	9b03      	ldr	r3, [sp, #12]
 80046c4:	1d1a      	adds	r2, r3, #4
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	9203      	str	r2, [sp, #12]
 80046ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80046ce:	3402      	adds	r4, #2
 80046d0:	9305      	str	r3, [sp, #20]
 80046d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80047a8 <_vfiprintf_r+0x22c>
 80046d6:	7821      	ldrb	r1, [r4, #0]
 80046d8:	2203      	movs	r2, #3
 80046da:	4650      	mov	r0, sl
 80046dc:	f7fb fd78 	bl	80001d0 <memchr>
 80046e0:	b138      	cbz	r0, 80046f2 <_vfiprintf_r+0x176>
 80046e2:	9b04      	ldr	r3, [sp, #16]
 80046e4:	eba0 000a 	sub.w	r0, r0, sl
 80046e8:	2240      	movs	r2, #64	@ 0x40
 80046ea:	4082      	lsls	r2, r0
 80046ec:	4313      	orrs	r3, r2
 80046ee:	3401      	adds	r4, #1
 80046f0:	9304      	str	r3, [sp, #16]
 80046f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f6:	4829      	ldr	r0, [pc, #164]	@ (800479c <_vfiprintf_r+0x220>)
 80046f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046fc:	2206      	movs	r2, #6
 80046fe:	f7fb fd67 	bl	80001d0 <memchr>
 8004702:	2800      	cmp	r0, #0
 8004704:	d03f      	beq.n	8004786 <_vfiprintf_r+0x20a>
 8004706:	4b26      	ldr	r3, [pc, #152]	@ (80047a0 <_vfiprintf_r+0x224>)
 8004708:	bb1b      	cbnz	r3, 8004752 <_vfiprintf_r+0x1d6>
 800470a:	9b03      	ldr	r3, [sp, #12]
 800470c:	3307      	adds	r3, #7
 800470e:	f023 0307 	bic.w	r3, r3, #7
 8004712:	3308      	adds	r3, #8
 8004714:	9303      	str	r3, [sp, #12]
 8004716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004718:	443b      	add	r3, r7
 800471a:	9309      	str	r3, [sp, #36]	@ 0x24
 800471c:	e76a      	b.n	80045f4 <_vfiprintf_r+0x78>
 800471e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004722:	460c      	mov	r4, r1
 8004724:	2001      	movs	r0, #1
 8004726:	e7a8      	b.n	800467a <_vfiprintf_r+0xfe>
 8004728:	2300      	movs	r3, #0
 800472a:	3401      	adds	r4, #1
 800472c:	9305      	str	r3, [sp, #20]
 800472e:	4619      	mov	r1, r3
 8004730:	f04f 0c0a 	mov.w	ip, #10
 8004734:	4620      	mov	r0, r4
 8004736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800473a:	3a30      	subs	r2, #48	@ 0x30
 800473c:	2a09      	cmp	r2, #9
 800473e:	d903      	bls.n	8004748 <_vfiprintf_r+0x1cc>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0c6      	beq.n	80046d2 <_vfiprintf_r+0x156>
 8004744:	9105      	str	r1, [sp, #20]
 8004746:	e7c4      	b.n	80046d2 <_vfiprintf_r+0x156>
 8004748:	fb0c 2101 	mla	r1, ip, r1, r2
 800474c:	4604      	mov	r4, r0
 800474e:	2301      	movs	r3, #1
 8004750:	e7f0      	b.n	8004734 <_vfiprintf_r+0x1b8>
 8004752:	ab03      	add	r3, sp, #12
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	462a      	mov	r2, r5
 8004758:	4b12      	ldr	r3, [pc, #72]	@ (80047a4 <_vfiprintf_r+0x228>)
 800475a:	a904      	add	r1, sp, #16
 800475c:	4630      	mov	r0, r6
 800475e:	f3af 8000 	nop.w
 8004762:	4607      	mov	r7, r0
 8004764:	1c78      	adds	r0, r7, #1
 8004766:	d1d6      	bne.n	8004716 <_vfiprintf_r+0x19a>
 8004768:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800476a:	07d9      	lsls	r1, r3, #31
 800476c:	d405      	bmi.n	800477a <_vfiprintf_r+0x1fe>
 800476e:	89ab      	ldrh	r3, [r5, #12]
 8004770:	059a      	lsls	r2, r3, #22
 8004772:	d402      	bmi.n	800477a <_vfiprintf_r+0x1fe>
 8004774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004776:	f7ff fddd 	bl	8004334 <__retarget_lock_release_recursive>
 800477a:	89ab      	ldrh	r3, [r5, #12]
 800477c:	065b      	lsls	r3, r3, #25
 800477e:	f53f af1f 	bmi.w	80045c0 <_vfiprintf_r+0x44>
 8004782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004784:	e71e      	b.n	80045c4 <_vfiprintf_r+0x48>
 8004786:	ab03      	add	r3, sp, #12
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	462a      	mov	r2, r5
 800478c:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <_vfiprintf_r+0x228>)
 800478e:	a904      	add	r1, sp, #16
 8004790:	4630      	mov	r0, r6
 8004792:	f000 f879 	bl	8004888 <_printf_i>
 8004796:	e7e4      	b.n	8004762 <_vfiprintf_r+0x1e6>
 8004798:	08005568 	.word	0x08005568
 800479c:	08005572 	.word	0x08005572
 80047a0:	00000000 	.word	0x00000000
 80047a4:	08004557 	.word	0x08004557
 80047a8:	0800556e 	.word	0x0800556e

080047ac <_printf_common>:
 80047ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b0:	4616      	mov	r6, r2
 80047b2:	4698      	mov	r8, r3
 80047b4:	688a      	ldr	r2, [r1, #8]
 80047b6:	690b      	ldr	r3, [r1, #16]
 80047b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047bc:	4293      	cmp	r3, r2
 80047be:	bfb8      	it	lt
 80047c0:	4613      	movlt	r3, r2
 80047c2:	6033      	str	r3, [r6, #0]
 80047c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047c8:	4607      	mov	r7, r0
 80047ca:	460c      	mov	r4, r1
 80047cc:	b10a      	cbz	r2, 80047d2 <_printf_common+0x26>
 80047ce:	3301      	adds	r3, #1
 80047d0:	6033      	str	r3, [r6, #0]
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	0699      	lsls	r1, r3, #26
 80047d6:	bf42      	ittt	mi
 80047d8:	6833      	ldrmi	r3, [r6, #0]
 80047da:	3302      	addmi	r3, #2
 80047dc:	6033      	strmi	r3, [r6, #0]
 80047de:	6825      	ldr	r5, [r4, #0]
 80047e0:	f015 0506 	ands.w	r5, r5, #6
 80047e4:	d106      	bne.n	80047f4 <_printf_common+0x48>
 80047e6:	f104 0a19 	add.w	sl, r4, #25
 80047ea:	68e3      	ldr	r3, [r4, #12]
 80047ec:	6832      	ldr	r2, [r6, #0]
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	42ab      	cmp	r3, r5
 80047f2:	dc26      	bgt.n	8004842 <_printf_common+0x96>
 80047f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047f8:	6822      	ldr	r2, [r4, #0]
 80047fa:	3b00      	subs	r3, #0
 80047fc:	bf18      	it	ne
 80047fe:	2301      	movne	r3, #1
 8004800:	0692      	lsls	r2, r2, #26
 8004802:	d42b      	bmi.n	800485c <_printf_common+0xb0>
 8004804:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004808:	4641      	mov	r1, r8
 800480a:	4638      	mov	r0, r7
 800480c:	47c8      	blx	r9
 800480e:	3001      	adds	r0, #1
 8004810:	d01e      	beq.n	8004850 <_printf_common+0xa4>
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	6922      	ldr	r2, [r4, #16]
 8004816:	f003 0306 	and.w	r3, r3, #6
 800481a:	2b04      	cmp	r3, #4
 800481c:	bf02      	ittt	eq
 800481e:	68e5      	ldreq	r5, [r4, #12]
 8004820:	6833      	ldreq	r3, [r6, #0]
 8004822:	1aed      	subeq	r5, r5, r3
 8004824:	68a3      	ldr	r3, [r4, #8]
 8004826:	bf0c      	ite	eq
 8004828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800482c:	2500      	movne	r5, #0
 800482e:	4293      	cmp	r3, r2
 8004830:	bfc4      	itt	gt
 8004832:	1a9b      	subgt	r3, r3, r2
 8004834:	18ed      	addgt	r5, r5, r3
 8004836:	2600      	movs	r6, #0
 8004838:	341a      	adds	r4, #26
 800483a:	42b5      	cmp	r5, r6
 800483c:	d11a      	bne.n	8004874 <_printf_common+0xc8>
 800483e:	2000      	movs	r0, #0
 8004840:	e008      	b.n	8004854 <_printf_common+0xa8>
 8004842:	2301      	movs	r3, #1
 8004844:	4652      	mov	r2, sl
 8004846:	4641      	mov	r1, r8
 8004848:	4638      	mov	r0, r7
 800484a:	47c8      	blx	r9
 800484c:	3001      	adds	r0, #1
 800484e:	d103      	bne.n	8004858 <_printf_common+0xac>
 8004850:	f04f 30ff 	mov.w	r0, #4294967295
 8004854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004858:	3501      	adds	r5, #1
 800485a:	e7c6      	b.n	80047ea <_printf_common+0x3e>
 800485c:	18e1      	adds	r1, r4, r3
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	2030      	movs	r0, #48	@ 0x30
 8004862:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004866:	4422      	add	r2, r4
 8004868:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800486c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004870:	3302      	adds	r3, #2
 8004872:	e7c7      	b.n	8004804 <_printf_common+0x58>
 8004874:	2301      	movs	r3, #1
 8004876:	4622      	mov	r2, r4
 8004878:	4641      	mov	r1, r8
 800487a:	4638      	mov	r0, r7
 800487c:	47c8      	blx	r9
 800487e:	3001      	adds	r0, #1
 8004880:	d0e6      	beq.n	8004850 <_printf_common+0xa4>
 8004882:	3601      	adds	r6, #1
 8004884:	e7d9      	b.n	800483a <_printf_common+0x8e>
	...

08004888 <_printf_i>:
 8004888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800488c:	7e0f      	ldrb	r7, [r1, #24]
 800488e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004890:	2f78      	cmp	r7, #120	@ 0x78
 8004892:	4691      	mov	r9, r2
 8004894:	4680      	mov	r8, r0
 8004896:	460c      	mov	r4, r1
 8004898:	469a      	mov	sl, r3
 800489a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800489e:	d807      	bhi.n	80048b0 <_printf_i+0x28>
 80048a0:	2f62      	cmp	r7, #98	@ 0x62
 80048a2:	d80a      	bhi.n	80048ba <_printf_i+0x32>
 80048a4:	2f00      	cmp	r7, #0
 80048a6:	f000 80d2 	beq.w	8004a4e <_printf_i+0x1c6>
 80048aa:	2f58      	cmp	r7, #88	@ 0x58
 80048ac:	f000 80b9 	beq.w	8004a22 <_printf_i+0x19a>
 80048b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80048b8:	e03a      	b.n	8004930 <_printf_i+0xa8>
 80048ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048be:	2b15      	cmp	r3, #21
 80048c0:	d8f6      	bhi.n	80048b0 <_printf_i+0x28>
 80048c2:	a101      	add	r1, pc, #4	@ (adr r1, 80048c8 <_printf_i+0x40>)
 80048c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048c8:	08004921 	.word	0x08004921
 80048cc:	08004935 	.word	0x08004935
 80048d0:	080048b1 	.word	0x080048b1
 80048d4:	080048b1 	.word	0x080048b1
 80048d8:	080048b1 	.word	0x080048b1
 80048dc:	080048b1 	.word	0x080048b1
 80048e0:	08004935 	.word	0x08004935
 80048e4:	080048b1 	.word	0x080048b1
 80048e8:	080048b1 	.word	0x080048b1
 80048ec:	080048b1 	.word	0x080048b1
 80048f0:	080048b1 	.word	0x080048b1
 80048f4:	08004a35 	.word	0x08004a35
 80048f8:	0800495f 	.word	0x0800495f
 80048fc:	080049ef 	.word	0x080049ef
 8004900:	080048b1 	.word	0x080048b1
 8004904:	080048b1 	.word	0x080048b1
 8004908:	08004a57 	.word	0x08004a57
 800490c:	080048b1 	.word	0x080048b1
 8004910:	0800495f 	.word	0x0800495f
 8004914:	080048b1 	.word	0x080048b1
 8004918:	080048b1 	.word	0x080048b1
 800491c:	080049f7 	.word	0x080049f7
 8004920:	6833      	ldr	r3, [r6, #0]
 8004922:	1d1a      	adds	r2, r3, #4
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6032      	str	r2, [r6, #0]
 8004928:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800492c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004930:	2301      	movs	r3, #1
 8004932:	e09d      	b.n	8004a70 <_printf_i+0x1e8>
 8004934:	6833      	ldr	r3, [r6, #0]
 8004936:	6820      	ldr	r0, [r4, #0]
 8004938:	1d19      	adds	r1, r3, #4
 800493a:	6031      	str	r1, [r6, #0]
 800493c:	0606      	lsls	r6, r0, #24
 800493e:	d501      	bpl.n	8004944 <_printf_i+0xbc>
 8004940:	681d      	ldr	r5, [r3, #0]
 8004942:	e003      	b.n	800494c <_printf_i+0xc4>
 8004944:	0645      	lsls	r5, r0, #25
 8004946:	d5fb      	bpl.n	8004940 <_printf_i+0xb8>
 8004948:	f9b3 5000 	ldrsh.w	r5, [r3]
 800494c:	2d00      	cmp	r5, #0
 800494e:	da03      	bge.n	8004958 <_printf_i+0xd0>
 8004950:	232d      	movs	r3, #45	@ 0x2d
 8004952:	426d      	negs	r5, r5
 8004954:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004958:	4859      	ldr	r0, [pc, #356]	@ (8004ac0 <_printf_i+0x238>)
 800495a:	230a      	movs	r3, #10
 800495c:	e011      	b.n	8004982 <_printf_i+0xfa>
 800495e:	6821      	ldr	r1, [r4, #0]
 8004960:	6833      	ldr	r3, [r6, #0]
 8004962:	0608      	lsls	r0, r1, #24
 8004964:	f853 5b04 	ldr.w	r5, [r3], #4
 8004968:	d402      	bmi.n	8004970 <_printf_i+0xe8>
 800496a:	0649      	lsls	r1, r1, #25
 800496c:	bf48      	it	mi
 800496e:	b2ad      	uxthmi	r5, r5
 8004970:	2f6f      	cmp	r7, #111	@ 0x6f
 8004972:	4853      	ldr	r0, [pc, #332]	@ (8004ac0 <_printf_i+0x238>)
 8004974:	6033      	str	r3, [r6, #0]
 8004976:	bf14      	ite	ne
 8004978:	230a      	movne	r3, #10
 800497a:	2308      	moveq	r3, #8
 800497c:	2100      	movs	r1, #0
 800497e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004982:	6866      	ldr	r6, [r4, #4]
 8004984:	60a6      	str	r6, [r4, #8]
 8004986:	2e00      	cmp	r6, #0
 8004988:	bfa2      	ittt	ge
 800498a:	6821      	ldrge	r1, [r4, #0]
 800498c:	f021 0104 	bicge.w	r1, r1, #4
 8004990:	6021      	strge	r1, [r4, #0]
 8004992:	b90d      	cbnz	r5, 8004998 <_printf_i+0x110>
 8004994:	2e00      	cmp	r6, #0
 8004996:	d04b      	beq.n	8004a30 <_printf_i+0x1a8>
 8004998:	4616      	mov	r6, r2
 800499a:	fbb5 f1f3 	udiv	r1, r5, r3
 800499e:	fb03 5711 	mls	r7, r3, r1, r5
 80049a2:	5dc7      	ldrb	r7, [r0, r7]
 80049a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049a8:	462f      	mov	r7, r5
 80049aa:	42bb      	cmp	r3, r7
 80049ac:	460d      	mov	r5, r1
 80049ae:	d9f4      	bls.n	800499a <_printf_i+0x112>
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d10b      	bne.n	80049cc <_printf_i+0x144>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	07df      	lsls	r7, r3, #31
 80049b8:	d508      	bpl.n	80049cc <_printf_i+0x144>
 80049ba:	6923      	ldr	r3, [r4, #16]
 80049bc:	6861      	ldr	r1, [r4, #4]
 80049be:	4299      	cmp	r1, r3
 80049c0:	bfde      	ittt	le
 80049c2:	2330      	movle	r3, #48	@ 0x30
 80049c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049cc:	1b92      	subs	r2, r2, r6
 80049ce:	6122      	str	r2, [r4, #16]
 80049d0:	f8cd a000 	str.w	sl, [sp]
 80049d4:	464b      	mov	r3, r9
 80049d6:	aa03      	add	r2, sp, #12
 80049d8:	4621      	mov	r1, r4
 80049da:	4640      	mov	r0, r8
 80049dc:	f7ff fee6 	bl	80047ac <_printf_common>
 80049e0:	3001      	adds	r0, #1
 80049e2:	d14a      	bne.n	8004a7a <_printf_i+0x1f2>
 80049e4:	f04f 30ff 	mov.w	r0, #4294967295
 80049e8:	b004      	add	sp, #16
 80049ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	f043 0320 	orr.w	r3, r3, #32
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	4833      	ldr	r0, [pc, #204]	@ (8004ac4 <_printf_i+0x23c>)
 80049f8:	2778      	movs	r7, #120	@ 0x78
 80049fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	6831      	ldr	r1, [r6, #0]
 8004a02:	061f      	lsls	r7, r3, #24
 8004a04:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a08:	d402      	bmi.n	8004a10 <_printf_i+0x188>
 8004a0a:	065f      	lsls	r7, r3, #25
 8004a0c:	bf48      	it	mi
 8004a0e:	b2ad      	uxthmi	r5, r5
 8004a10:	6031      	str	r1, [r6, #0]
 8004a12:	07d9      	lsls	r1, r3, #31
 8004a14:	bf44      	itt	mi
 8004a16:	f043 0320 	orrmi.w	r3, r3, #32
 8004a1a:	6023      	strmi	r3, [r4, #0]
 8004a1c:	b11d      	cbz	r5, 8004a26 <_printf_i+0x19e>
 8004a1e:	2310      	movs	r3, #16
 8004a20:	e7ac      	b.n	800497c <_printf_i+0xf4>
 8004a22:	4827      	ldr	r0, [pc, #156]	@ (8004ac0 <_printf_i+0x238>)
 8004a24:	e7e9      	b.n	80049fa <_printf_i+0x172>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	f023 0320 	bic.w	r3, r3, #32
 8004a2c:	6023      	str	r3, [r4, #0]
 8004a2e:	e7f6      	b.n	8004a1e <_printf_i+0x196>
 8004a30:	4616      	mov	r6, r2
 8004a32:	e7bd      	b.n	80049b0 <_printf_i+0x128>
 8004a34:	6833      	ldr	r3, [r6, #0]
 8004a36:	6825      	ldr	r5, [r4, #0]
 8004a38:	6961      	ldr	r1, [r4, #20]
 8004a3a:	1d18      	adds	r0, r3, #4
 8004a3c:	6030      	str	r0, [r6, #0]
 8004a3e:	062e      	lsls	r6, r5, #24
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	d501      	bpl.n	8004a48 <_printf_i+0x1c0>
 8004a44:	6019      	str	r1, [r3, #0]
 8004a46:	e002      	b.n	8004a4e <_printf_i+0x1c6>
 8004a48:	0668      	lsls	r0, r5, #25
 8004a4a:	d5fb      	bpl.n	8004a44 <_printf_i+0x1bc>
 8004a4c:	8019      	strh	r1, [r3, #0]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	6123      	str	r3, [r4, #16]
 8004a52:	4616      	mov	r6, r2
 8004a54:	e7bc      	b.n	80049d0 <_printf_i+0x148>
 8004a56:	6833      	ldr	r3, [r6, #0]
 8004a58:	1d1a      	adds	r2, r3, #4
 8004a5a:	6032      	str	r2, [r6, #0]
 8004a5c:	681e      	ldr	r6, [r3, #0]
 8004a5e:	6862      	ldr	r2, [r4, #4]
 8004a60:	2100      	movs	r1, #0
 8004a62:	4630      	mov	r0, r6
 8004a64:	f7fb fbb4 	bl	80001d0 <memchr>
 8004a68:	b108      	cbz	r0, 8004a6e <_printf_i+0x1e6>
 8004a6a:	1b80      	subs	r0, r0, r6
 8004a6c:	6060      	str	r0, [r4, #4]
 8004a6e:	6863      	ldr	r3, [r4, #4]
 8004a70:	6123      	str	r3, [r4, #16]
 8004a72:	2300      	movs	r3, #0
 8004a74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a78:	e7aa      	b.n	80049d0 <_printf_i+0x148>
 8004a7a:	6923      	ldr	r3, [r4, #16]
 8004a7c:	4632      	mov	r2, r6
 8004a7e:	4649      	mov	r1, r9
 8004a80:	4640      	mov	r0, r8
 8004a82:	47d0      	blx	sl
 8004a84:	3001      	adds	r0, #1
 8004a86:	d0ad      	beq.n	80049e4 <_printf_i+0x15c>
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	079b      	lsls	r3, r3, #30
 8004a8c:	d413      	bmi.n	8004ab6 <_printf_i+0x22e>
 8004a8e:	68e0      	ldr	r0, [r4, #12]
 8004a90:	9b03      	ldr	r3, [sp, #12]
 8004a92:	4298      	cmp	r0, r3
 8004a94:	bfb8      	it	lt
 8004a96:	4618      	movlt	r0, r3
 8004a98:	e7a6      	b.n	80049e8 <_printf_i+0x160>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	4632      	mov	r2, r6
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	4640      	mov	r0, r8
 8004aa2:	47d0      	blx	sl
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d09d      	beq.n	80049e4 <_printf_i+0x15c>
 8004aa8:	3501      	adds	r5, #1
 8004aaa:	68e3      	ldr	r3, [r4, #12]
 8004aac:	9903      	ldr	r1, [sp, #12]
 8004aae:	1a5b      	subs	r3, r3, r1
 8004ab0:	42ab      	cmp	r3, r5
 8004ab2:	dcf2      	bgt.n	8004a9a <_printf_i+0x212>
 8004ab4:	e7eb      	b.n	8004a8e <_printf_i+0x206>
 8004ab6:	2500      	movs	r5, #0
 8004ab8:	f104 0619 	add.w	r6, r4, #25
 8004abc:	e7f5      	b.n	8004aaa <_printf_i+0x222>
 8004abe:	bf00      	nop
 8004ac0:	08005579 	.word	0x08005579
 8004ac4:	0800558a 	.word	0x0800558a

08004ac8 <__sflush_r>:
 8004ac8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ad0:	0716      	lsls	r6, r2, #28
 8004ad2:	4605      	mov	r5, r0
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	d454      	bmi.n	8004b82 <__sflush_r+0xba>
 8004ad8:	684b      	ldr	r3, [r1, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	dc02      	bgt.n	8004ae4 <__sflush_r+0x1c>
 8004ade:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	dd48      	ble.n	8004b76 <__sflush_r+0xae>
 8004ae4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ae6:	2e00      	cmp	r6, #0
 8004ae8:	d045      	beq.n	8004b76 <__sflush_r+0xae>
 8004aea:	2300      	movs	r3, #0
 8004aec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004af0:	682f      	ldr	r7, [r5, #0]
 8004af2:	6a21      	ldr	r1, [r4, #32]
 8004af4:	602b      	str	r3, [r5, #0]
 8004af6:	d030      	beq.n	8004b5a <__sflush_r+0x92>
 8004af8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004afa:	89a3      	ldrh	r3, [r4, #12]
 8004afc:	0759      	lsls	r1, r3, #29
 8004afe:	d505      	bpl.n	8004b0c <__sflush_r+0x44>
 8004b00:	6863      	ldr	r3, [r4, #4]
 8004b02:	1ad2      	subs	r2, r2, r3
 8004b04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b06:	b10b      	cbz	r3, 8004b0c <__sflush_r+0x44>
 8004b08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b0a:	1ad2      	subs	r2, r2, r3
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b10:	6a21      	ldr	r1, [r4, #32]
 8004b12:	4628      	mov	r0, r5
 8004b14:	47b0      	blx	r6
 8004b16:	1c43      	adds	r3, r0, #1
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	d106      	bne.n	8004b2a <__sflush_r+0x62>
 8004b1c:	6829      	ldr	r1, [r5, #0]
 8004b1e:	291d      	cmp	r1, #29
 8004b20:	d82b      	bhi.n	8004b7a <__sflush_r+0xb2>
 8004b22:	4a2a      	ldr	r2, [pc, #168]	@ (8004bcc <__sflush_r+0x104>)
 8004b24:	410a      	asrs	r2, r1
 8004b26:	07d6      	lsls	r6, r2, #31
 8004b28:	d427      	bmi.n	8004b7a <__sflush_r+0xb2>
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	6062      	str	r2, [r4, #4]
 8004b2e:	04d9      	lsls	r1, r3, #19
 8004b30:	6922      	ldr	r2, [r4, #16]
 8004b32:	6022      	str	r2, [r4, #0]
 8004b34:	d504      	bpl.n	8004b40 <__sflush_r+0x78>
 8004b36:	1c42      	adds	r2, r0, #1
 8004b38:	d101      	bne.n	8004b3e <__sflush_r+0x76>
 8004b3a:	682b      	ldr	r3, [r5, #0]
 8004b3c:	b903      	cbnz	r3, 8004b40 <__sflush_r+0x78>
 8004b3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004b40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b42:	602f      	str	r7, [r5, #0]
 8004b44:	b1b9      	cbz	r1, 8004b76 <__sflush_r+0xae>
 8004b46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b4a:	4299      	cmp	r1, r3
 8004b4c:	d002      	beq.n	8004b54 <__sflush_r+0x8c>
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f7ff fbf2 	bl	8004338 <_free_r>
 8004b54:	2300      	movs	r3, #0
 8004b56:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b58:	e00d      	b.n	8004b76 <__sflush_r+0xae>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	47b0      	blx	r6
 8004b60:	4602      	mov	r2, r0
 8004b62:	1c50      	adds	r0, r2, #1
 8004b64:	d1c9      	bne.n	8004afa <__sflush_r+0x32>
 8004b66:	682b      	ldr	r3, [r5, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0c6      	beq.n	8004afa <__sflush_r+0x32>
 8004b6c:	2b1d      	cmp	r3, #29
 8004b6e:	d001      	beq.n	8004b74 <__sflush_r+0xac>
 8004b70:	2b16      	cmp	r3, #22
 8004b72:	d11e      	bne.n	8004bb2 <__sflush_r+0xea>
 8004b74:	602f      	str	r7, [r5, #0]
 8004b76:	2000      	movs	r0, #0
 8004b78:	e022      	b.n	8004bc0 <__sflush_r+0xf8>
 8004b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b7e:	b21b      	sxth	r3, r3
 8004b80:	e01b      	b.n	8004bba <__sflush_r+0xf2>
 8004b82:	690f      	ldr	r7, [r1, #16]
 8004b84:	2f00      	cmp	r7, #0
 8004b86:	d0f6      	beq.n	8004b76 <__sflush_r+0xae>
 8004b88:	0793      	lsls	r3, r2, #30
 8004b8a:	680e      	ldr	r6, [r1, #0]
 8004b8c:	bf08      	it	eq
 8004b8e:	694b      	ldreq	r3, [r1, #20]
 8004b90:	600f      	str	r7, [r1, #0]
 8004b92:	bf18      	it	ne
 8004b94:	2300      	movne	r3, #0
 8004b96:	eba6 0807 	sub.w	r8, r6, r7
 8004b9a:	608b      	str	r3, [r1, #8]
 8004b9c:	f1b8 0f00 	cmp.w	r8, #0
 8004ba0:	dde9      	ble.n	8004b76 <__sflush_r+0xae>
 8004ba2:	6a21      	ldr	r1, [r4, #32]
 8004ba4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ba6:	4643      	mov	r3, r8
 8004ba8:	463a      	mov	r2, r7
 8004baa:	4628      	mov	r0, r5
 8004bac:	47b0      	blx	r6
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	dc08      	bgt.n	8004bc4 <__sflush_r+0xfc>
 8004bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bba:	81a3      	strh	r3, [r4, #12]
 8004bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc4:	4407      	add	r7, r0
 8004bc6:	eba8 0800 	sub.w	r8, r8, r0
 8004bca:	e7e7      	b.n	8004b9c <__sflush_r+0xd4>
 8004bcc:	dfbffffe 	.word	0xdfbffffe

08004bd0 <_fflush_r>:
 8004bd0:	b538      	push	{r3, r4, r5, lr}
 8004bd2:	690b      	ldr	r3, [r1, #16]
 8004bd4:	4605      	mov	r5, r0
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	b913      	cbnz	r3, 8004be0 <_fflush_r+0x10>
 8004bda:	2500      	movs	r5, #0
 8004bdc:	4628      	mov	r0, r5
 8004bde:	bd38      	pop	{r3, r4, r5, pc}
 8004be0:	b118      	cbz	r0, 8004bea <_fflush_r+0x1a>
 8004be2:	6a03      	ldr	r3, [r0, #32]
 8004be4:	b90b      	cbnz	r3, 8004bea <_fflush_r+0x1a>
 8004be6:	f7ff f9ad 	bl	8003f44 <__sinit>
 8004bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f3      	beq.n	8004bda <_fflush_r+0xa>
 8004bf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004bf4:	07d0      	lsls	r0, r2, #31
 8004bf6:	d404      	bmi.n	8004c02 <_fflush_r+0x32>
 8004bf8:	0599      	lsls	r1, r3, #22
 8004bfa:	d402      	bmi.n	8004c02 <_fflush_r+0x32>
 8004bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bfe:	f7ff fb98 	bl	8004332 <__retarget_lock_acquire_recursive>
 8004c02:	4628      	mov	r0, r5
 8004c04:	4621      	mov	r1, r4
 8004c06:	f7ff ff5f 	bl	8004ac8 <__sflush_r>
 8004c0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c0c:	07da      	lsls	r2, r3, #31
 8004c0e:	4605      	mov	r5, r0
 8004c10:	d4e4      	bmi.n	8004bdc <_fflush_r+0xc>
 8004c12:	89a3      	ldrh	r3, [r4, #12]
 8004c14:	059b      	lsls	r3, r3, #22
 8004c16:	d4e1      	bmi.n	8004bdc <_fflush_r+0xc>
 8004c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c1a:	f7ff fb8b 	bl	8004334 <__retarget_lock_release_recursive>
 8004c1e:	e7dd      	b.n	8004bdc <_fflush_r+0xc>

08004c20 <__swhatbuf_r>:
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	460c      	mov	r4, r1
 8004c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c28:	2900      	cmp	r1, #0
 8004c2a:	b096      	sub	sp, #88	@ 0x58
 8004c2c:	4615      	mov	r5, r2
 8004c2e:	461e      	mov	r6, r3
 8004c30:	da0d      	bge.n	8004c4e <__swhatbuf_r+0x2e>
 8004c32:	89a3      	ldrh	r3, [r4, #12]
 8004c34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c38:	f04f 0100 	mov.w	r1, #0
 8004c3c:	bf14      	ite	ne
 8004c3e:	2340      	movne	r3, #64	@ 0x40
 8004c40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c44:	2000      	movs	r0, #0
 8004c46:	6031      	str	r1, [r6, #0]
 8004c48:	602b      	str	r3, [r5, #0]
 8004c4a:	b016      	add	sp, #88	@ 0x58
 8004c4c:	bd70      	pop	{r4, r5, r6, pc}
 8004c4e:	466a      	mov	r2, sp
 8004c50:	f000 f848 	bl	8004ce4 <_fstat_r>
 8004c54:	2800      	cmp	r0, #0
 8004c56:	dbec      	blt.n	8004c32 <__swhatbuf_r+0x12>
 8004c58:	9901      	ldr	r1, [sp, #4]
 8004c5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c62:	4259      	negs	r1, r3
 8004c64:	4159      	adcs	r1, r3
 8004c66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c6a:	e7eb      	b.n	8004c44 <__swhatbuf_r+0x24>

08004c6c <__smakebuf_r>:
 8004c6c:	898b      	ldrh	r3, [r1, #12]
 8004c6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c70:	079d      	lsls	r5, r3, #30
 8004c72:	4606      	mov	r6, r0
 8004c74:	460c      	mov	r4, r1
 8004c76:	d507      	bpl.n	8004c88 <__smakebuf_r+0x1c>
 8004c78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	6123      	str	r3, [r4, #16]
 8004c80:	2301      	movs	r3, #1
 8004c82:	6163      	str	r3, [r4, #20]
 8004c84:	b003      	add	sp, #12
 8004c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c88:	ab01      	add	r3, sp, #4
 8004c8a:	466a      	mov	r2, sp
 8004c8c:	f7ff ffc8 	bl	8004c20 <__swhatbuf_r>
 8004c90:	9f00      	ldr	r7, [sp, #0]
 8004c92:	4605      	mov	r5, r0
 8004c94:	4639      	mov	r1, r7
 8004c96:	4630      	mov	r0, r6
 8004c98:	f7ff fbba 	bl	8004410 <_malloc_r>
 8004c9c:	b948      	cbnz	r0, 8004cb2 <__smakebuf_r+0x46>
 8004c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca2:	059a      	lsls	r2, r3, #22
 8004ca4:	d4ee      	bmi.n	8004c84 <__smakebuf_r+0x18>
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	f043 0302 	orr.w	r3, r3, #2
 8004cae:	81a3      	strh	r3, [r4, #12]
 8004cb0:	e7e2      	b.n	8004c78 <__smakebuf_r+0xc>
 8004cb2:	89a3      	ldrh	r3, [r4, #12]
 8004cb4:	6020      	str	r0, [r4, #0]
 8004cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cba:	81a3      	strh	r3, [r4, #12]
 8004cbc:	9b01      	ldr	r3, [sp, #4]
 8004cbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004cc2:	b15b      	cbz	r3, 8004cdc <__smakebuf_r+0x70>
 8004cc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f000 f81d 	bl	8004d08 <_isatty_r>
 8004cce:	b128      	cbz	r0, 8004cdc <__smakebuf_r+0x70>
 8004cd0:	89a3      	ldrh	r3, [r4, #12]
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	f043 0301 	orr.w	r3, r3, #1
 8004cda:	81a3      	strh	r3, [r4, #12]
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	431d      	orrs	r5, r3
 8004ce0:	81a5      	strh	r5, [r4, #12]
 8004ce2:	e7cf      	b.n	8004c84 <__smakebuf_r+0x18>

08004ce4 <_fstat_r>:
 8004ce4:	b538      	push	{r3, r4, r5, lr}
 8004ce6:	4d07      	ldr	r5, [pc, #28]	@ (8004d04 <_fstat_r+0x20>)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	4604      	mov	r4, r0
 8004cec:	4608      	mov	r0, r1
 8004cee:	4611      	mov	r1, r2
 8004cf0:	602b      	str	r3, [r5, #0]
 8004cf2:	f7fc fb41 	bl	8001378 <_fstat>
 8004cf6:	1c43      	adds	r3, r0, #1
 8004cf8:	d102      	bne.n	8004d00 <_fstat_r+0x1c>
 8004cfa:	682b      	ldr	r3, [r5, #0]
 8004cfc:	b103      	cbz	r3, 8004d00 <_fstat_r+0x1c>
 8004cfe:	6023      	str	r3, [r4, #0]
 8004d00:	bd38      	pop	{r3, r4, r5, pc}
 8004d02:	bf00      	nop
 8004d04:	20000240 	.word	0x20000240

08004d08 <_isatty_r>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	4d06      	ldr	r5, [pc, #24]	@ (8004d24 <_isatty_r+0x1c>)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4604      	mov	r4, r0
 8004d10:	4608      	mov	r0, r1
 8004d12:	602b      	str	r3, [r5, #0]
 8004d14:	f7fc fb40 	bl	8001398 <_isatty>
 8004d18:	1c43      	adds	r3, r0, #1
 8004d1a:	d102      	bne.n	8004d22 <_isatty_r+0x1a>
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	b103      	cbz	r3, 8004d22 <_isatty_r+0x1a>
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	bd38      	pop	{r3, r4, r5, pc}
 8004d24:	20000240 	.word	0x20000240

08004d28 <_sbrk_r>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4d06      	ldr	r5, [pc, #24]	@ (8004d44 <_sbrk_r+0x1c>)
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	4604      	mov	r4, r0
 8004d30:	4608      	mov	r0, r1
 8004d32:	602b      	str	r3, [r5, #0]
 8004d34:	f7fc fb48 	bl	80013c8 <_sbrk>
 8004d38:	1c43      	adds	r3, r0, #1
 8004d3a:	d102      	bne.n	8004d42 <_sbrk_r+0x1a>
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	b103      	cbz	r3, 8004d42 <_sbrk_r+0x1a>
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	bd38      	pop	{r3, r4, r5, pc}
 8004d44:	20000240 	.word	0x20000240

08004d48 <asin>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	ed2d 8b02 	vpush	{d8}
 8004d4e:	ec55 4b10 	vmov	r4, r5, d0
 8004d52:	f000 f945 	bl	8004fe0 <__ieee754_asin>
 8004d56:	4622      	mov	r2, r4
 8004d58:	462b      	mov	r3, r5
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	eeb0 8a40 	vmov.f32	s16, s0
 8004d62:	eef0 8a60 	vmov.f32	s17, s1
 8004d66:	f7fb fed9 	bl	8000b1c <__aeabi_dcmpun>
 8004d6a:	b9a8      	cbnz	r0, 8004d98 <asin+0x50>
 8004d6c:	ec45 4b10 	vmov	d0, r4, r5
 8004d70:	f000 f84a 	bl	8004e08 <fabs>
 8004d74:	4b0c      	ldr	r3, [pc, #48]	@ (8004da8 <asin+0x60>)
 8004d76:	ec51 0b10 	vmov	r0, r1, d0
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f7fb fec4 	bl	8000b08 <__aeabi_dcmpgt>
 8004d80:	b150      	cbz	r0, 8004d98 <asin+0x50>
 8004d82:	f7ff faab 	bl	80042dc <__errno>
 8004d86:	ecbd 8b02 	vpop	{d8}
 8004d8a:	2321      	movs	r3, #33	@ 0x21
 8004d8c:	6003      	str	r3, [r0, #0]
 8004d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d92:	4806      	ldr	r0, [pc, #24]	@ (8004dac <asin+0x64>)
 8004d94:	f000 b840 	b.w	8004e18 <nan>
 8004d98:	eeb0 0a48 	vmov.f32	s0, s16
 8004d9c:	eef0 0a68 	vmov.f32	s1, s17
 8004da0:	ecbd 8b02 	vpop	{d8}
 8004da4:	bd38      	pop	{r3, r4, r5, pc}
 8004da6:	bf00      	nop
 8004da8:	3ff00000 	.word	0x3ff00000
 8004dac:	0800556d 	.word	0x0800556d

08004db0 <sqrt>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	ed2d 8b02 	vpush	{d8}
 8004db6:	ec55 4b10 	vmov	r4, r5, d0
 8004dba:	f000 f835 	bl	8004e28 <__ieee754_sqrt>
 8004dbe:	4622      	mov	r2, r4
 8004dc0:	462b      	mov	r3, r5
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	eeb0 8a40 	vmov.f32	s16, s0
 8004dca:	eef0 8a60 	vmov.f32	s17, s1
 8004dce:	f7fb fea5 	bl	8000b1c <__aeabi_dcmpun>
 8004dd2:	b990      	cbnz	r0, 8004dfa <sqrt+0x4a>
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	4620      	mov	r0, r4
 8004dda:	4629      	mov	r1, r5
 8004ddc:	f7fb fe76 	bl	8000acc <__aeabi_dcmplt>
 8004de0:	b158      	cbz	r0, 8004dfa <sqrt+0x4a>
 8004de2:	f7ff fa7b 	bl	80042dc <__errno>
 8004de6:	2321      	movs	r3, #33	@ 0x21
 8004de8:	6003      	str	r3, [r0, #0]
 8004dea:	2200      	movs	r2, #0
 8004dec:	2300      	movs	r3, #0
 8004dee:	4610      	mov	r0, r2
 8004df0:	4619      	mov	r1, r3
 8004df2:	f7fb fd23 	bl	800083c <__aeabi_ddiv>
 8004df6:	ec41 0b18 	vmov	d8, r0, r1
 8004dfa:	eeb0 0a48 	vmov.f32	s0, s16
 8004dfe:	eef0 0a68 	vmov.f32	s1, s17
 8004e02:	ecbd 8b02 	vpop	{d8}
 8004e06:	bd38      	pop	{r3, r4, r5, pc}

08004e08 <fabs>:
 8004e08:	ec51 0b10 	vmov	r0, r1, d0
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004e12:	ec43 2b10 	vmov	d0, r2, r3
 8004e16:	4770      	bx	lr

08004e18 <nan>:
 8004e18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004e20 <nan+0x8>
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	00000000 	.word	0x00000000
 8004e24:	7ff80000 	.word	0x7ff80000

08004e28 <__ieee754_sqrt>:
 8004e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2c:	4a68      	ldr	r2, [pc, #416]	@ (8004fd0 <__ieee754_sqrt+0x1a8>)
 8004e2e:	ec55 4b10 	vmov	r4, r5, d0
 8004e32:	43aa      	bics	r2, r5
 8004e34:	462b      	mov	r3, r5
 8004e36:	4621      	mov	r1, r4
 8004e38:	d110      	bne.n	8004e5c <__ieee754_sqrt+0x34>
 8004e3a:	4622      	mov	r2, r4
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	4629      	mov	r1, r5
 8004e40:	f7fb fbd2 	bl	80005e8 <__aeabi_dmul>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4620      	mov	r0, r4
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	f7fb fa16 	bl	800027c <__adddf3>
 8004e50:	4604      	mov	r4, r0
 8004e52:	460d      	mov	r5, r1
 8004e54:	ec45 4b10 	vmov	d0, r4, r5
 8004e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5c:	2d00      	cmp	r5, #0
 8004e5e:	dc0e      	bgt.n	8004e7e <__ieee754_sqrt+0x56>
 8004e60:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004e64:	4322      	orrs	r2, r4
 8004e66:	d0f5      	beq.n	8004e54 <__ieee754_sqrt+0x2c>
 8004e68:	b19d      	cbz	r5, 8004e92 <__ieee754_sqrt+0x6a>
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	4629      	mov	r1, r5
 8004e70:	f7fb fa02 	bl	8000278 <__aeabi_dsub>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	f7fb fce0 	bl	800083c <__aeabi_ddiv>
 8004e7c:	e7e8      	b.n	8004e50 <__ieee754_sqrt+0x28>
 8004e7e:	152a      	asrs	r2, r5, #20
 8004e80:	d115      	bne.n	8004eae <__ieee754_sqrt+0x86>
 8004e82:	2000      	movs	r0, #0
 8004e84:	e009      	b.n	8004e9a <__ieee754_sqrt+0x72>
 8004e86:	0acb      	lsrs	r3, r1, #11
 8004e88:	3a15      	subs	r2, #21
 8004e8a:	0549      	lsls	r1, r1, #21
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0fa      	beq.n	8004e86 <__ieee754_sqrt+0x5e>
 8004e90:	e7f7      	b.n	8004e82 <__ieee754_sqrt+0x5a>
 8004e92:	462a      	mov	r2, r5
 8004e94:	e7fa      	b.n	8004e8c <__ieee754_sqrt+0x64>
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	3001      	adds	r0, #1
 8004e9a:	02dc      	lsls	r4, r3, #11
 8004e9c:	d5fb      	bpl.n	8004e96 <__ieee754_sqrt+0x6e>
 8004e9e:	1e44      	subs	r4, r0, #1
 8004ea0:	1b12      	subs	r2, r2, r4
 8004ea2:	f1c0 0420 	rsb	r4, r0, #32
 8004ea6:	fa21 f404 	lsr.w	r4, r1, r4
 8004eaa:	4323      	orrs	r3, r4
 8004eac:	4081      	lsls	r1, r0
 8004eae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eb2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8004eb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eba:	07d2      	lsls	r2, r2, #31
 8004ebc:	bf5c      	itt	pl
 8004ebe:	005b      	lslpl	r3, r3, #1
 8004ec0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8004ec4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004ec8:	bf58      	it	pl
 8004eca:	0049      	lslpl	r1, r1, #1
 8004ecc:	2600      	movs	r6, #0
 8004ece:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8004ed2:	106d      	asrs	r5, r5, #1
 8004ed4:	0049      	lsls	r1, r1, #1
 8004ed6:	2016      	movs	r0, #22
 8004ed8:	4632      	mov	r2, r6
 8004eda:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8004ede:	1917      	adds	r7, r2, r4
 8004ee0:	429f      	cmp	r7, r3
 8004ee2:	bfde      	ittt	le
 8004ee4:	193a      	addle	r2, r7, r4
 8004ee6:	1bdb      	suble	r3, r3, r7
 8004ee8:	1936      	addle	r6, r6, r4
 8004eea:	0fcf      	lsrs	r7, r1, #31
 8004eec:	3801      	subs	r0, #1
 8004eee:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004ef2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004ef6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004efa:	d1f0      	bne.n	8004ede <__ieee754_sqrt+0xb6>
 8004efc:	4604      	mov	r4, r0
 8004efe:	2720      	movs	r7, #32
 8004f00:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8004f04:	429a      	cmp	r2, r3
 8004f06:	eb00 0e0c 	add.w	lr, r0, ip
 8004f0a:	db02      	blt.n	8004f12 <__ieee754_sqrt+0xea>
 8004f0c:	d113      	bne.n	8004f36 <__ieee754_sqrt+0x10e>
 8004f0e:	458e      	cmp	lr, r1
 8004f10:	d811      	bhi.n	8004f36 <__ieee754_sqrt+0x10e>
 8004f12:	f1be 0f00 	cmp.w	lr, #0
 8004f16:	eb0e 000c 	add.w	r0, lr, ip
 8004f1a:	da42      	bge.n	8004fa2 <__ieee754_sqrt+0x17a>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	db40      	blt.n	8004fa2 <__ieee754_sqrt+0x17a>
 8004f20:	f102 0801 	add.w	r8, r2, #1
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	458e      	cmp	lr, r1
 8004f28:	bf88      	it	hi
 8004f2a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004f2e:	eba1 010e 	sub.w	r1, r1, lr
 8004f32:	4464      	add	r4, ip
 8004f34:	4642      	mov	r2, r8
 8004f36:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8004f3a:	3f01      	subs	r7, #1
 8004f3c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8004f40:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004f44:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004f48:	d1dc      	bne.n	8004f04 <__ieee754_sqrt+0xdc>
 8004f4a:	4319      	orrs	r1, r3
 8004f4c:	d01b      	beq.n	8004f86 <__ieee754_sqrt+0x15e>
 8004f4e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8004fd4 <__ieee754_sqrt+0x1ac>
 8004f52:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004fd8 <__ieee754_sqrt+0x1b0>
 8004f56:	e9da 0100 	ldrd	r0, r1, [sl]
 8004f5a:	e9db 2300 	ldrd	r2, r3, [fp]
 8004f5e:	f7fb f98b 	bl	8000278 <__aeabi_dsub>
 8004f62:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4640      	mov	r0, r8
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	f7fb fdb7 	bl	8000ae0 <__aeabi_dcmple>
 8004f72:	b140      	cbz	r0, 8004f86 <__ieee754_sqrt+0x15e>
 8004f74:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004f78:	e9da 0100 	ldrd	r0, r1, [sl]
 8004f7c:	e9db 2300 	ldrd	r2, r3, [fp]
 8004f80:	d111      	bne.n	8004fa6 <__ieee754_sqrt+0x17e>
 8004f82:	3601      	adds	r6, #1
 8004f84:	463c      	mov	r4, r7
 8004f86:	1072      	asrs	r2, r6, #1
 8004f88:	0863      	lsrs	r3, r4, #1
 8004f8a:	07f1      	lsls	r1, r6, #31
 8004f8c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8004f90:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8004f94:	bf48      	it	mi
 8004f96:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8004f9a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	e756      	b.n	8004e50 <__ieee754_sqrt+0x28>
 8004fa2:	4690      	mov	r8, r2
 8004fa4:	e7be      	b.n	8004f24 <__ieee754_sqrt+0xfc>
 8004fa6:	f7fb f969 	bl	800027c <__adddf3>
 8004faa:	e9da 8900 	ldrd	r8, r9, [sl]
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4640      	mov	r0, r8
 8004fb4:	4649      	mov	r1, r9
 8004fb6:	f7fb fd89 	bl	8000acc <__aeabi_dcmplt>
 8004fba:	b120      	cbz	r0, 8004fc6 <__ieee754_sqrt+0x19e>
 8004fbc:	1ca0      	adds	r0, r4, #2
 8004fbe:	bf08      	it	eq
 8004fc0:	3601      	addeq	r6, #1
 8004fc2:	3402      	adds	r4, #2
 8004fc4:	e7df      	b.n	8004f86 <__ieee754_sqrt+0x15e>
 8004fc6:	1c63      	adds	r3, r4, #1
 8004fc8:	f023 0401 	bic.w	r4, r3, #1
 8004fcc:	e7db      	b.n	8004f86 <__ieee754_sqrt+0x15e>
 8004fce:	bf00      	nop
 8004fd0:	7ff00000 	.word	0x7ff00000
 8004fd4:	20000070 	.word	0x20000070
 8004fd8:	20000068 	.word	0x20000068
 8004fdc:	00000000 	.word	0x00000000

08004fe0 <__ieee754_asin>:
 8004fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe4:	ec55 4b10 	vmov	r4, r5, d0
 8004fe8:	4bc7      	ldr	r3, [pc, #796]	@ (8005308 <__ieee754_asin+0x328>)
 8004fea:	b087      	sub	sp, #28
 8004fec:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8004ff0:	429e      	cmp	r6, r3
 8004ff2:	9501      	str	r5, [sp, #4]
 8004ff4:	d92d      	bls.n	8005052 <__ieee754_asin+0x72>
 8004ff6:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8004ffa:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8004ffe:	4326      	orrs	r6, r4
 8005000:	d116      	bne.n	8005030 <__ieee754_asin+0x50>
 8005002:	a3a7      	add	r3, pc, #668	@ (adr r3, 80052a0 <__ieee754_asin+0x2c0>)
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	4620      	mov	r0, r4
 800500a:	4629      	mov	r1, r5
 800500c:	f7fb faec 	bl	80005e8 <__aeabi_dmul>
 8005010:	a3a5      	add	r3, pc, #660	@ (adr r3, 80052a8 <__ieee754_asin+0x2c8>)
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	4606      	mov	r6, r0
 8005018:	460f      	mov	r7, r1
 800501a:	4620      	mov	r0, r4
 800501c:	4629      	mov	r1, r5
 800501e:	f7fb fae3 	bl	80005e8 <__aeabi_dmul>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4630      	mov	r0, r6
 8005028:	4639      	mov	r1, r7
 800502a:	f7fb f927 	bl	800027c <__adddf3>
 800502e:	e009      	b.n	8005044 <__ieee754_asin+0x64>
 8005030:	4622      	mov	r2, r4
 8005032:	462b      	mov	r3, r5
 8005034:	4620      	mov	r0, r4
 8005036:	4629      	mov	r1, r5
 8005038:	f7fb f91e 	bl	8000278 <__aeabi_dsub>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	f7fb fbfc 	bl	800083c <__aeabi_ddiv>
 8005044:	4604      	mov	r4, r0
 8005046:	460d      	mov	r5, r1
 8005048:	ec45 4b10 	vmov	d0, r4, r5
 800504c:	b007      	add	sp, #28
 800504e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005052:	4bae      	ldr	r3, [pc, #696]	@ (800530c <__ieee754_asin+0x32c>)
 8005054:	429e      	cmp	r6, r3
 8005056:	d810      	bhi.n	800507a <__ieee754_asin+0x9a>
 8005058:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800505c:	f080 80ad 	bcs.w	80051ba <__ieee754_asin+0x1da>
 8005060:	a393      	add	r3, pc, #588	@ (adr r3, 80052b0 <__ieee754_asin+0x2d0>)
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	4620      	mov	r0, r4
 8005068:	4629      	mov	r1, r5
 800506a:	f7fb f907 	bl	800027c <__adddf3>
 800506e:	4ba8      	ldr	r3, [pc, #672]	@ (8005310 <__ieee754_asin+0x330>)
 8005070:	2200      	movs	r2, #0
 8005072:	f7fb fd49 	bl	8000b08 <__aeabi_dcmpgt>
 8005076:	2800      	cmp	r0, #0
 8005078:	d1e6      	bne.n	8005048 <__ieee754_asin+0x68>
 800507a:	ec45 4b10 	vmov	d0, r4, r5
 800507e:	f7ff fec3 	bl	8004e08 <fabs>
 8005082:	49a3      	ldr	r1, [pc, #652]	@ (8005310 <__ieee754_asin+0x330>)
 8005084:	ec53 2b10 	vmov	r2, r3, d0
 8005088:	2000      	movs	r0, #0
 800508a:	f7fb f8f5 	bl	8000278 <__aeabi_dsub>
 800508e:	4ba1      	ldr	r3, [pc, #644]	@ (8005314 <__ieee754_asin+0x334>)
 8005090:	2200      	movs	r2, #0
 8005092:	f7fb faa9 	bl	80005e8 <__aeabi_dmul>
 8005096:	a388      	add	r3, pc, #544	@ (adr r3, 80052b8 <__ieee754_asin+0x2d8>)
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	4604      	mov	r4, r0
 800509e:	460d      	mov	r5, r1
 80050a0:	f7fb faa2 	bl	80005e8 <__aeabi_dmul>
 80050a4:	a386      	add	r3, pc, #536	@ (adr r3, 80052c0 <__ieee754_asin+0x2e0>)
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f7fb f8e7 	bl	800027c <__adddf3>
 80050ae:	4622      	mov	r2, r4
 80050b0:	462b      	mov	r3, r5
 80050b2:	f7fb fa99 	bl	80005e8 <__aeabi_dmul>
 80050b6:	a384      	add	r3, pc, #528	@ (adr r3, 80052c8 <__ieee754_asin+0x2e8>)
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f7fb f8dc 	bl	8000278 <__aeabi_dsub>
 80050c0:	4622      	mov	r2, r4
 80050c2:	462b      	mov	r3, r5
 80050c4:	f7fb fa90 	bl	80005e8 <__aeabi_dmul>
 80050c8:	a381      	add	r3, pc, #516	@ (adr r3, 80052d0 <__ieee754_asin+0x2f0>)
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	f7fb f8d5 	bl	800027c <__adddf3>
 80050d2:	4622      	mov	r2, r4
 80050d4:	462b      	mov	r3, r5
 80050d6:	f7fb fa87 	bl	80005e8 <__aeabi_dmul>
 80050da:	a37f      	add	r3, pc, #508	@ (adr r3, 80052d8 <__ieee754_asin+0x2f8>)
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	f7fb f8ca 	bl	8000278 <__aeabi_dsub>
 80050e4:	4622      	mov	r2, r4
 80050e6:	462b      	mov	r3, r5
 80050e8:	f7fb fa7e 	bl	80005e8 <__aeabi_dmul>
 80050ec:	a37c      	add	r3, pc, #496	@ (adr r3, 80052e0 <__ieee754_asin+0x300>)
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	f7fb f8c3 	bl	800027c <__adddf3>
 80050f6:	4622      	mov	r2, r4
 80050f8:	462b      	mov	r3, r5
 80050fa:	f7fb fa75 	bl	80005e8 <__aeabi_dmul>
 80050fe:	a37a      	add	r3, pc, #488	@ (adr r3, 80052e8 <__ieee754_asin+0x308>)
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005108:	4620      	mov	r0, r4
 800510a:	4629      	mov	r1, r5
 800510c:	f7fb fa6c 	bl	80005e8 <__aeabi_dmul>
 8005110:	a377      	add	r3, pc, #476	@ (adr r3, 80052f0 <__ieee754_asin+0x310>)
 8005112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005116:	f7fb f8af 	bl	8000278 <__aeabi_dsub>
 800511a:	4622      	mov	r2, r4
 800511c:	462b      	mov	r3, r5
 800511e:	f7fb fa63 	bl	80005e8 <__aeabi_dmul>
 8005122:	a375      	add	r3, pc, #468	@ (adr r3, 80052f8 <__ieee754_asin+0x318>)
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	f7fb f8a8 	bl	800027c <__adddf3>
 800512c:	4622      	mov	r2, r4
 800512e:	462b      	mov	r3, r5
 8005130:	f7fb fa5a 	bl	80005e8 <__aeabi_dmul>
 8005134:	a372      	add	r3, pc, #456	@ (adr r3, 8005300 <__ieee754_asin+0x320>)
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	f7fb f89d 	bl	8000278 <__aeabi_dsub>
 800513e:	4622      	mov	r2, r4
 8005140:	462b      	mov	r3, r5
 8005142:	f7fb fa51 	bl	80005e8 <__aeabi_dmul>
 8005146:	4b72      	ldr	r3, [pc, #456]	@ (8005310 <__ieee754_asin+0x330>)
 8005148:	2200      	movs	r2, #0
 800514a:	f7fb f897 	bl	800027c <__adddf3>
 800514e:	ec45 4b10 	vmov	d0, r4, r5
 8005152:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005156:	f7ff fe67 	bl	8004e28 <__ieee754_sqrt>
 800515a:	4b6f      	ldr	r3, [pc, #444]	@ (8005318 <__ieee754_asin+0x338>)
 800515c:	429e      	cmp	r6, r3
 800515e:	ec5b ab10 	vmov	sl, fp, d0
 8005162:	f240 80db 	bls.w	800531c <__ieee754_asin+0x33c>
 8005166:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800516a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800516e:	f7fb fb65 	bl	800083c <__aeabi_ddiv>
 8005172:	4652      	mov	r2, sl
 8005174:	465b      	mov	r3, fp
 8005176:	f7fb fa37 	bl	80005e8 <__aeabi_dmul>
 800517a:	4652      	mov	r2, sl
 800517c:	465b      	mov	r3, fp
 800517e:	f7fb f87d 	bl	800027c <__adddf3>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	f7fb f879 	bl	800027c <__adddf3>
 800518a:	a347      	add	r3, pc, #284	@ (adr r3, 80052a8 <__ieee754_asin+0x2c8>)
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	f7fb f872 	bl	8000278 <__aeabi_dsub>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	a141      	add	r1, pc, #260	@ (adr r1, 80052a0 <__ieee754_asin+0x2c0>)
 800519a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800519e:	f7fb f86b 	bl	8000278 <__aeabi_dsub>
 80051a2:	9b01      	ldr	r3, [sp, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	bfdc      	itt	le
 80051a8:	4602      	movle	r2, r0
 80051aa:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 80051ae:	4604      	mov	r4, r0
 80051b0:	460d      	mov	r5, r1
 80051b2:	bfdc      	itt	le
 80051b4:	4614      	movle	r4, r2
 80051b6:	461d      	movle	r5, r3
 80051b8:	e746      	b.n	8005048 <__ieee754_asin+0x68>
 80051ba:	4622      	mov	r2, r4
 80051bc:	462b      	mov	r3, r5
 80051be:	4620      	mov	r0, r4
 80051c0:	4629      	mov	r1, r5
 80051c2:	f7fb fa11 	bl	80005e8 <__aeabi_dmul>
 80051c6:	a33c      	add	r3, pc, #240	@ (adr r3, 80052b8 <__ieee754_asin+0x2d8>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	4606      	mov	r6, r0
 80051ce:	460f      	mov	r7, r1
 80051d0:	f7fb fa0a 	bl	80005e8 <__aeabi_dmul>
 80051d4:	a33a      	add	r3, pc, #232	@ (adr r3, 80052c0 <__ieee754_asin+0x2e0>)
 80051d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051da:	f7fb f84f 	bl	800027c <__adddf3>
 80051de:	4632      	mov	r2, r6
 80051e0:	463b      	mov	r3, r7
 80051e2:	f7fb fa01 	bl	80005e8 <__aeabi_dmul>
 80051e6:	a338      	add	r3, pc, #224	@ (adr r3, 80052c8 <__ieee754_asin+0x2e8>)
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	f7fb f844 	bl	8000278 <__aeabi_dsub>
 80051f0:	4632      	mov	r2, r6
 80051f2:	463b      	mov	r3, r7
 80051f4:	f7fb f9f8 	bl	80005e8 <__aeabi_dmul>
 80051f8:	a335      	add	r3, pc, #212	@ (adr r3, 80052d0 <__ieee754_asin+0x2f0>)
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f7fb f83d 	bl	800027c <__adddf3>
 8005202:	4632      	mov	r2, r6
 8005204:	463b      	mov	r3, r7
 8005206:	f7fb f9ef 	bl	80005e8 <__aeabi_dmul>
 800520a:	a333      	add	r3, pc, #204	@ (adr r3, 80052d8 <__ieee754_asin+0x2f8>)
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f7fb f832 	bl	8000278 <__aeabi_dsub>
 8005214:	4632      	mov	r2, r6
 8005216:	463b      	mov	r3, r7
 8005218:	f7fb f9e6 	bl	80005e8 <__aeabi_dmul>
 800521c:	a330      	add	r3, pc, #192	@ (adr r3, 80052e0 <__ieee754_asin+0x300>)
 800521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005222:	f7fb f82b 	bl	800027c <__adddf3>
 8005226:	4632      	mov	r2, r6
 8005228:	463b      	mov	r3, r7
 800522a:	f7fb f9dd 	bl	80005e8 <__aeabi_dmul>
 800522e:	a32e      	add	r3, pc, #184	@ (adr r3, 80052e8 <__ieee754_asin+0x308>)
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	4680      	mov	r8, r0
 8005236:	4689      	mov	r9, r1
 8005238:	4630      	mov	r0, r6
 800523a:	4639      	mov	r1, r7
 800523c:	f7fb f9d4 	bl	80005e8 <__aeabi_dmul>
 8005240:	a32b      	add	r3, pc, #172	@ (adr r3, 80052f0 <__ieee754_asin+0x310>)
 8005242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005246:	f7fb f817 	bl	8000278 <__aeabi_dsub>
 800524a:	4632      	mov	r2, r6
 800524c:	463b      	mov	r3, r7
 800524e:	f7fb f9cb 	bl	80005e8 <__aeabi_dmul>
 8005252:	a329      	add	r3, pc, #164	@ (adr r3, 80052f8 <__ieee754_asin+0x318>)
 8005254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005258:	f7fb f810 	bl	800027c <__adddf3>
 800525c:	4632      	mov	r2, r6
 800525e:	463b      	mov	r3, r7
 8005260:	f7fb f9c2 	bl	80005e8 <__aeabi_dmul>
 8005264:	a326      	add	r3, pc, #152	@ (adr r3, 8005300 <__ieee754_asin+0x320>)
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	f7fb f805 	bl	8000278 <__aeabi_dsub>
 800526e:	4632      	mov	r2, r6
 8005270:	463b      	mov	r3, r7
 8005272:	f7fb f9b9 	bl	80005e8 <__aeabi_dmul>
 8005276:	4b26      	ldr	r3, [pc, #152]	@ (8005310 <__ieee754_asin+0x330>)
 8005278:	2200      	movs	r2, #0
 800527a:	f7fa ffff 	bl	800027c <__adddf3>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4640      	mov	r0, r8
 8005284:	4649      	mov	r1, r9
 8005286:	f7fb fad9 	bl	800083c <__aeabi_ddiv>
 800528a:	4622      	mov	r2, r4
 800528c:	462b      	mov	r3, r5
 800528e:	f7fb f9ab 	bl	80005e8 <__aeabi_dmul>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4620      	mov	r0, r4
 8005298:	4629      	mov	r1, r5
 800529a:	e6c6      	b.n	800502a <__ieee754_asin+0x4a>
 800529c:	f3af 8000 	nop.w
 80052a0:	54442d18 	.word	0x54442d18
 80052a4:	3ff921fb 	.word	0x3ff921fb
 80052a8:	33145c07 	.word	0x33145c07
 80052ac:	3c91a626 	.word	0x3c91a626
 80052b0:	8800759c 	.word	0x8800759c
 80052b4:	7e37e43c 	.word	0x7e37e43c
 80052b8:	0dfdf709 	.word	0x0dfdf709
 80052bc:	3f023de1 	.word	0x3f023de1
 80052c0:	7501b288 	.word	0x7501b288
 80052c4:	3f49efe0 	.word	0x3f49efe0
 80052c8:	b5688f3b 	.word	0xb5688f3b
 80052cc:	3fa48228 	.word	0x3fa48228
 80052d0:	0e884455 	.word	0x0e884455
 80052d4:	3fc9c155 	.word	0x3fc9c155
 80052d8:	03eb6f7d 	.word	0x03eb6f7d
 80052dc:	3fd4d612 	.word	0x3fd4d612
 80052e0:	55555555 	.word	0x55555555
 80052e4:	3fc55555 	.word	0x3fc55555
 80052e8:	b12e9282 	.word	0xb12e9282
 80052ec:	3fb3b8c5 	.word	0x3fb3b8c5
 80052f0:	1b8d0159 	.word	0x1b8d0159
 80052f4:	3fe6066c 	.word	0x3fe6066c
 80052f8:	9c598ac8 	.word	0x9c598ac8
 80052fc:	40002ae5 	.word	0x40002ae5
 8005300:	1c8a2d4b 	.word	0x1c8a2d4b
 8005304:	40033a27 	.word	0x40033a27
 8005308:	3fefffff 	.word	0x3fefffff
 800530c:	3fdfffff 	.word	0x3fdfffff
 8005310:	3ff00000 	.word	0x3ff00000
 8005314:	3fe00000 	.word	0x3fe00000
 8005318:	3fef3332 	.word	0x3fef3332
 800531c:	4652      	mov	r2, sl
 800531e:	465b      	mov	r3, fp
 8005320:	4650      	mov	r0, sl
 8005322:	4659      	mov	r1, fp
 8005324:	f7fa ffaa 	bl	800027c <__adddf3>
 8005328:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800532c:	4606      	mov	r6, r0
 800532e:	460f      	mov	r7, r1
 8005330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005334:	f7fb fa82 	bl	800083c <__aeabi_ddiv>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4630      	mov	r0, r6
 800533e:	4639      	mov	r1, r7
 8005340:	f7fb f952 	bl	80005e8 <__aeabi_dmul>
 8005344:	f04f 0800 	mov.w	r8, #0
 8005348:	4606      	mov	r6, r0
 800534a:	460f      	mov	r7, r1
 800534c:	4642      	mov	r2, r8
 800534e:	465b      	mov	r3, fp
 8005350:	4640      	mov	r0, r8
 8005352:	4659      	mov	r1, fp
 8005354:	f7fb f948 	bl	80005e8 <__aeabi_dmul>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4620      	mov	r0, r4
 800535e:	4629      	mov	r1, r5
 8005360:	f7fa ff8a 	bl	8000278 <__aeabi_dsub>
 8005364:	4642      	mov	r2, r8
 8005366:	4604      	mov	r4, r0
 8005368:	460d      	mov	r5, r1
 800536a:	465b      	mov	r3, fp
 800536c:	4650      	mov	r0, sl
 800536e:	4659      	mov	r1, fp
 8005370:	f7fa ff84 	bl	800027c <__adddf3>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4620      	mov	r0, r4
 800537a:	4629      	mov	r1, r5
 800537c:	f7fb fa5e 	bl	800083c <__aeabi_ddiv>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	f7fa ff7a 	bl	800027c <__adddf3>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	a112      	add	r1, pc, #72	@ (adr r1, 80053d8 <__ieee754_asin+0x3f8>)
 800538e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005392:	f7fa ff71 	bl	8000278 <__aeabi_dsub>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4630      	mov	r0, r6
 800539c:	4639      	mov	r1, r7
 800539e:	f7fa ff6b 	bl	8000278 <__aeabi_dsub>
 80053a2:	4642      	mov	r2, r8
 80053a4:	4604      	mov	r4, r0
 80053a6:	460d      	mov	r5, r1
 80053a8:	465b      	mov	r3, fp
 80053aa:	4640      	mov	r0, r8
 80053ac:	4659      	mov	r1, fp
 80053ae:	f7fa ff65 	bl	800027c <__adddf3>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	a10a      	add	r1, pc, #40	@ (adr r1, 80053e0 <__ieee754_asin+0x400>)
 80053b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053bc:	f7fa ff5c 	bl	8000278 <__aeabi_dsub>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4620      	mov	r0, r4
 80053c6:	4629      	mov	r1, r5
 80053c8:	f7fa ff56 	bl	8000278 <__aeabi_dsub>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	a103      	add	r1, pc, #12	@ (adr r1, 80053e0 <__ieee754_asin+0x400>)
 80053d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053d6:	e6e2      	b.n	800519e <__ieee754_asin+0x1be>
 80053d8:	33145c07 	.word	0x33145c07
 80053dc:	3c91a626 	.word	0x3c91a626
 80053e0:	54442d18 	.word	0x54442d18
 80053e4:	3fe921fb 	.word	0x3fe921fb

080053e8 <_init>:
 80053e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ea:	bf00      	nop
 80053ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ee:	bc08      	pop	{r3}
 80053f0:	469e      	mov	lr, r3
 80053f2:	4770      	bx	lr

080053f4 <_fini>:
 80053f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f6:	bf00      	nop
 80053f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fa:	bc08      	pop	{r3}
 80053fc:	469e      	mov	lr, r3
 80053fe:	4770      	bx	lr
