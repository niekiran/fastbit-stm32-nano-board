
017_SD_Card_Read_Write.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b6c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08009cfc  08009cfc  0000acfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f98  08009f98  0000b080  2**0
                  CONTENTS
  4 .ARM          00000008  08009f98  08009f98  0000af98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fa0  08009fa0  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fa0  08009fa0  0000afa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fa4  08009fa4  0000afa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08009fa8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b080  2**0
                  CONTENTS
 10 .bss          00001418  20000080  20000080  0000b080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001498  20001498  0000b080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f3c  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002da9  00000000  00000000  0001bfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  0001ed98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a59  00000000  00000000  0001fb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f080  00000000  00000000  00020569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014685  00000000  00000000  0003f5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b14df  00000000  00000000  00053c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010514d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003afc  00000000  00000000  00105190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00108c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ce4 	.word	0x08009ce4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08009ce4 	.word	0x08009ce4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SELECT>:
/***************************************
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800028a:	4804      	ldr	r0, [pc, #16]	@ (800029c <SELECT+0x1c>)
 800028c:	f001 ffd4 	bl	8002238 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000290:	2001      	movs	r0, #1
 8000292:	f001 fadb 	bl	800184c <HAL_Delay>
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	48000800 	.word	0x48000800

080002a0 <DESELECT>:

/* slave deselect */
static void DESELECT(void) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80002a4:	2201      	movs	r2, #1
 80002a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002aa:	4804      	ldr	r0, [pc, #16]	@ (80002bc <DESELECT+0x1c>)
 80002ac:	f001 ffc4 	bl	8002238 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80002b0:	2001      	movs	r0, #1
 80002b2:	f001 facb 	bl	800184c <HAL_Delay>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	48000800 	.word	0x48000800

080002c0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
  while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE))
 80002ca:	bf00      	nop
 80002cc:	4b08      	ldr	r3, [pc, #32]	@ (80002f0 <SPI_TxByte+0x30>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	f003 0302 	and.w	r3, r3, #2
 80002d6:	2b02      	cmp	r3, #2
 80002d8:	d1f8      	bne.n	80002cc <SPI_TxByte+0xc>
    ;
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, HAL_MAX_DELAY);
 80002da:	1df9      	adds	r1, r7, #7
 80002dc:	f04f 33ff 	mov.w	r3, #4294967295
 80002e0:	2201      	movs	r2, #1
 80002e2:	4803      	ldr	r0, [pc, #12]	@ (80002f0 <SPI_TxByte+0x30>)
 80002e4:	f003 fc91 	bl	8003c0a <HAL_SPI_Transmit>
}
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	200000a4 	.word	0x200000a4

080002f4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	807b      	strh	r3, [r7, #2]
  while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE))
 8000300:	bf00      	nop
 8000302:	4b09      	ldr	r3, [pc, #36]	@ (8000328 <SPI_TxBuffer+0x34>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	f003 0302 	and.w	r3, r3, #2
 800030c:	2b02      	cmp	r3, #2
 800030e:	d1f8      	bne.n	8000302 <SPI_TxBuffer+0xe>
    ;
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, HAL_MAX_DELAY);
 8000310:	887a      	ldrh	r2, [r7, #2]
 8000312:	f04f 33ff 	mov.w	r3, #4294967295
 8000316:	6879      	ldr	r1, [r7, #4]
 8000318:	4803      	ldr	r0, [pc, #12]	@ (8000328 <SPI_TxBuffer+0x34>)
 800031a:	f003 fc76 	bl	8003c0a <HAL_SPI_Transmit>
}
 800031e:	bf00      	nop
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	200000a4 	.word	0x200000a4

0800032c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000332:	23ff      	movs	r3, #255	@ 0xff
 8000334:	71fb      	strb	r3, [r7, #7]

  while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE))
 8000336:	bf00      	nop
 8000338:	4b0a      	ldr	r3, [pc, #40]	@ (8000364 <SPI_RxByte+0x38>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	f003 0302 	and.w	r3, r3, #2
 8000342:	2b02      	cmp	r3, #2
 8000344:	d1f8      	bne.n	8000338 <SPI_RxByte+0xc>
    ;
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, HAL_MAX_DELAY);
 8000346:	1dba      	adds	r2, r7, #6
 8000348:	1df9      	adds	r1, r7, #7
 800034a:	f04f 33ff 	mov.w	r3, #4294967295
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	2301      	movs	r3, #1
 8000352:	4804      	ldr	r0, [pc, #16]	@ (8000364 <SPI_RxByte+0x38>)
 8000354:	f003 fdce 	bl	8003ef4 <HAL_SPI_TransmitReceive>

  return data;
 8000358:	79bb      	ldrb	r3, [r7, #6]
}
 800035a:	4618      	mov	r0, r3
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	200000a4 	.word	0x200000a4

08000368 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) { *buff = SPI_RxByte(); }
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	f7ff ffdc 	bl	800032c <SPI_RxByte>
 8000374:	4603      	mov	r3, r0
 8000376:	461a      	mov	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	701a      	strb	r2, [r3, #0]
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 800038a:	4b0a      	ldr	r3, [pc, #40]	@ (80003b4 <SD_ReadyWait+0x30>)
 800038c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000390:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000392:	f7ff ffcb 	bl	800032c <SPI_RxByte>
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2bff      	cmp	r3, #255	@ 0xff
 800039e:	d003      	beq.n	80003a8 <SD_ReadyWait+0x24>
 80003a0:	4b04      	ldr	r3, [pc, #16]	@ (80003b4 <SD_ReadyWait+0x30>)
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d1f4      	bne.n	8000392 <SD_ReadyWait+0xe>

  return res;
 80003a8:	79fb      	ldrb	r3, [r7, #7]
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	2000009e 	.word	0x2000009e

080003b8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80003be:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80003c2:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80003c4:	f7ff ff6c 	bl	80002a0 <DESELECT>
  for (int i = 0; i < 10; i++) {
 80003c8:	2300      	movs	r3, #0
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	e005      	b.n	80003da <SD_PowerOn+0x22>
    SPI_TxByte(0xFF);
 80003ce:	20ff      	movs	r0, #255	@ 0xff
 80003d0:	f7ff ff76 	bl	80002c0 <SPI_TxByte>
  for (int i = 0; i < 10; i++) {
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	3301      	adds	r3, #1
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	2b09      	cmp	r3, #9
 80003de:	ddf6      	ble.n	80003ce <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80003e0:	f7ff ff4e 	bl	8000280 <SELECT>

  /* make idle state */
  args[0] = CMD0; /* CMD0:GO_IDLE_STATE */
 80003e4:	2340      	movs	r3, #64	@ 0x40
 80003e6:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95; /* CRC */
 80003f8:	2395      	movs	r3, #149	@ 0x95
 80003fa:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 80003fc:	463b      	mov	r3, r7
 80003fe:	2106      	movs	r1, #6
 8000400:	4618      	mov	r0, r3
 8000402:	f7ff ff77 	bl	80002f4 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt) {
 8000406:	e002      	b.n	800040e <SD_PowerOn+0x56>
    cnt--;
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	3b01      	subs	r3, #1
 800040c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt) {
 800040e:	f7ff ff8d 	bl	800032c <SPI_RxByte>
 8000412:	4603      	mov	r3, r0
 8000414:	2b01      	cmp	r3, #1
 8000416:	d002      	beq.n	800041e <SD_PowerOn+0x66>
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d1f4      	bne.n	8000408 <SD_PowerOn+0x50>
  }

  DESELECT();
 800041e:	f7ff ff3f 	bl	80002a0 <DESELECT>
  SPI_TxByte(0XFF);
 8000422:	20ff      	movs	r0, #255	@ 0xff
 8000424:	f7ff ff4c 	bl	80002c0 <SPI_TxByte>

  PowerFlag = 1;
 8000428:	4b03      	ldr	r3, [pc, #12]	@ (8000438 <SD_PowerOn+0x80>)
 800042a:	2201      	movs	r2, #1
 800042c:	701a      	strb	r2, [r3, #0]
}
 800042e:	bf00      	nop
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	200000a1 	.word	0x200000a1

0800043c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) { PowerFlag = 0; }
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
 8000440:	4b03      	ldr	r3, [pc, #12]	@ (8000450 <SD_PowerOff+0x14>)
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]
 8000446:	bf00      	nop
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	200000a1 	.word	0x200000a1

08000454 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) { return PowerFlag; }
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
 8000458:	4b03      	ldr	r3, [pc, #12]	@ (8000468 <SD_CheckPower+0x14>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	4618      	mov	r0, r3
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	200000a1 	.word	0x200000a1

0800046c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8000476:	4b13      	ldr	r3, [pc, #76]	@ (80004c4 <SD_RxDataBlock+0x58>)
 8000478:	22c8      	movs	r2, #200	@ 0xc8
 800047a:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800047c:	f7ff ff56 	bl	800032c <SPI_RxByte>
 8000480:	4603      	mov	r3, r0
 8000482:	73fb      	strb	r3, [r7, #15]
  } while ((token == 0xFF) && Timer1);
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	2bff      	cmp	r3, #255	@ 0xff
 8000488:	d103      	bne.n	8000492 <SD_RxDataBlock+0x26>
 800048a:	4b0e      	ldr	r3, [pc, #56]	@ (80004c4 <SD_RxDataBlock+0x58>)
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d1f4      	bne.n	800047c <SD_RxDataBlock+0x10>

  /* invalid response */
  if (token != 0xFE)
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	2bfe      	cmp	r3, #254	@ 0xfe
 8000496:	d001      	beq.n	800049c <SD_RxDataBlock+0x30>
    return FALSE;
 8000498:	2300      	movs	r3, #0
 800049a:	e00f      	b.n	80004bc <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	607a      	str	r2, [r7, #4]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ff60 	bl	8000368 <SPI_RxBytePtr>
  } while (len--);
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	1e5a      	subs	r2, r3, #1
 80004ac:	603a      	str	r2, [r7, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1f4      	bne.n	800049c <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80004b2:	f7ff ff3b 	bl	800032c <SPI_RxByte>
  SPI_RxByte();
 80004b6:	f7ff ff39 	bl	800032c <SPI_RxByte>

  return TRUE;
 80004ba:	2301      	movs	r3, #1
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	2000009c 	.word	0x2000009c

080004c8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF)
 80004d8:	f7ff ff54 	bl	8000384 <SD_ReadyWait>
 80004dc:	4603      	mov	r3, r0
 80004de:	2bff      	cmp	r3, #255	@ 0xff
 80004e0:	d001      	beq.n	80004e6 <SD_TxDataBlock+0x1e>
    return FALSE;
 80004e2:	2300      	movs	r3, #0
 80004e4:	e02f      	b.n	8000546 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80004e6:	78fb      	ldrb	r3, [r7, #3]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff fee9 	bl	80002c0 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD) {
 80004ee:	78fb      	ldrb	r3, [r7, #3]
 80004f0:	2bfd      	cmp	r3, #253	@ 0xfd
 80004f2:	d020      	beq.n	8000536 <SD_TxDataBlock+0x6e>
    SPI_TxBuffer((uint8_t *)buff, 512);
 80004f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f7ff fefb 	bl	80002f4 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 80004fe:	f7ff ff15 	bl	800032c <SPI_RxByte>
    SPI_RxByte();
 8000502:	f7ff ff13 	bl	800032c <SPI_RxByte>

    /* receive response */
    while (i <= 64) {
 8000506:	e00b      	b.n	8000520 <SD_TxDataBlock+0x58>
      resp = SPI_RxByte();
 8000508:	f7ff ff10 	bl	800032c <SPI_RxByte>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05)
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	f003 031f 	and.w	r3, r3, #31
 8000516:	2b05      	cmp	r3, #5
 8000518:	d006      	beq.n	8000528 <SD_TxDataBlock+0x60>
        break;
      i++;
 800051a:	7bbb      	ldrb	r3, [r7, #14]
 800051c:	3301      	adds	r3, #1
 800051e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64) {
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	2b40      	cmp	r3, #64	@ 0x40
 8000524:	d9f0      	bls.n	8000508 <SD_TxDataBlock+0x40>
 8000526:	e000      	b.n	800052a <SD_TxDataBlock+0x62>
        break;
 8000528:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0)
 800052a:	bf00      	nop
 800052c:	f7ff fefe 	bl	800032c <SPI_RxByte>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0fa      	beq.n	800052c <SD_TxDataBlock+0x64>
      ;
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05)
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	f003 031f 	and.w	r3, r3, #31
 800053c:	2b05      	cmp	r3, #5
 800053e:	d101      	bne.n	8000544 <SD_TxDataBlock+0x7c>
    return TRUE;
 8000540:	2301      	movs	r3, #1
 8000542:	e000      	b.n	8000546 <SD_TxDataBlock+0x7e>

  return FALSE;
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg) {
 800054e:	b580      	push	{r7, lr}
 8000550:	b084      	sub	sp, #16
 8000552:	af00      	add	r7, sp, #0
 8000554:	4603      	mov	r3, r0
 8000556:	6039      	str	r1, [r7, #0]
 8000558:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF)
 800055a:	f7ff ff13 	bl	8000384 <SD_ReadyWait>
 800055e:	4603      	mov	r3, r0
 8000560:	2bff      	cmp	r3, #255	@ 0xff
 8000562:	d001      	beq.n	8000568 <SD_SendCmd+0x1a>
    return 0xFF;
 8000564:	23ff      	movs	r3, #255	@ 0xff
 8000566:	e042      	b.n	80005ee <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);                  /* Command */
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff fea8 	bl	80002c0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24)); /* Argument[31..24] */
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	0e1b      	lsrs	r3, r3, #24
 8000574:	b2db      	uxtb	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fea2 	bl	80002c0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16)); /* Argument[23..16] */
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	0c1b      	lsrs	r3, r3, #16
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fe9c 	bl	80002c0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	0a1b      	lsrs	r3, r3, #8
 800058c:	b2db      	uxtb	r3, r3
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fe96 	bl	80002c0 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);         /* Argument[7..0] */
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff fe91 	bl	80002c0 <SPI_TxByte>

  /* prepare CRC */
  if (cmd == CMD0)
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b40      	cmp	r3, #64	@ 0x40
 80005a2:	d102      	bne.n	80005aa <SD_SendCmd+0x5c>
    crc = 0x95; /* CRC for CMD0(0) */
 80005a4:	2395      	movs	r3, #149	@ 0x95
 80005a6:	73fb      	strb	r3, [r7, #15]
 80005a8:	e007      	b.n	80005ba <SD_SendCmd+0x6c>
  else if (cmd == CMD8)
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b48      	cmp	r3, #72	@ 0x48
 80005ae:	d102      	bne.n	80005b6 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80005b0:	2387      	movs	r3, #135	@ 0x87
 80005b2:	73fb      	strb	r3, [r7, #15]
 80005b4:	e001      	b.n	80005ba <SD_SendCmd+0x6c>
  else
    crc = 1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe7f 	bl	80002c0 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12)
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2b4c      	cmp	r3, #76	@ 0x4c
 80005c6:	d101      	bne.n	80005cc <SD_SendCmd+0x7e>
    SPI_RxByte();
 80005c8:	f7ff feb0 	bl	800032c <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80005cc:	230a      	movs	r3, #10
 80005ce:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80005d0:	f7ff feac 	bl	800032c <SPI_RxByte>
 80005d4:	4603      	mov	r3, r0
 80005d6:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80005d8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	da05      	bge.n	80005ec <SD_SendCmd+0x9e>
 80005e0:	7bbb      	ldrb	r3, [r7, #14]
 80005e2:	3b01      	subs	r3, #1
 80005e4:	73bb      	strb	r3, [r7, #14]
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1f1      	bne.n	80005d0 <SD_SendCmd+0x82>

  return res;
 80005ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <SD_disk_initialize>:
/***************************************
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) {
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if (drv)
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000608:	2301      	movs	r3, #1
 800060a:	e0d1      	b.n	80007b0 <SD_disk_initialize+0x1b8>

  /* no disk */
  if (Stat & STA_NODISK)
 800060c:	4b6a      	ldr	r3, [pc, #424]	@ (80007b8 <SD_disk_initialize+0x1c0>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	2b00      	cmp	r3, #0
 8000618:	d003      	beq.n	8000622 <SD_disk_initialize+0x2a>
    return Stat;
 800061a:	4b67      	ldr	r3, [pc, #412]	@ (80007b8 <SD_disk_initialize+0x1c0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	e0c6      	b.n	80007b0 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000622:	f7ff fec9 	bl	80003b8 <SD_PowerOn>

  /* slave select */
  SELECT();
 8000626:	f7ff fe2b 	bl	8000280 <SELECT>

  /* check disk type */
  type = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1) {
 800062e:	2100      	movs	r1, #0
 8000630:	2040      	movs	r0, #64	@ 0x40
 8000632:	f7ff ff8c 	bl	800054e <SD_SendCmd>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	f040 80a1 	bne.w	8000780 <SD_disk_initialize+0x188>
    /* timeout 1 sec */
    Timer1 = 1000;
 800063e:	4b5f      	ldr	r3, [pc, #380]	@ (80007bc <SD_disk_initialize+0x1c4>)
 8000640:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000644:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) {
 8000646:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800064a:	2048      	movs	r0, #72	@ 0x48
 800064c:	f7ff ff7f 	bl	800054e <SD_SendCmd>
 8000650:	4603      	mov	r3, r0
 8000652:	2b01      	cmp	r3, #1
 8000654:	d155      	bne.n	8000702 <SD_disk_initialize+0x10a>
      /* operation condition register */
      for (n = 0; n < 4; n++) {
 8000656:	2300      	movs	r3, #0
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	e00c      	b.n	8000676 <SD_disk_initialize+0x7e>
        ocr[n] = SPI_RxByte();
 800065c:	7bfc      	ldrb	r4, [r7, #15]
 800065e:	f7ff fe65 	bl	800032c <SPI_RxByte>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	f104 0310 	add.w	r3, r4, #16
 800066a:	443b      	add	r3, r7
 800066c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++) {
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	3301      	adds	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	2b03      	cmp	r3, #3
 800067a:	d9ef      	bls.n	800065c <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {
 800067c:	7abb      	ldrb	r3, [r7, #10]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d17e      	bne.n	8000780 <SD_disk_initialize+0x188>
 8000682:	7afb      	ldrb	r3, [r7, #11]
 8000684:	2baa      	cmp	r3, #170	@ 0xaa
 8000686:	d17b      	bne.n	8000780 <SD_disk_initialize+0x188>
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000688:	2100      	movs	r1, #0
 800068a:	2077      	movs	r0, #119	@ 0x77
 800068c:	f7ff ff5f 	bl	800054e <SD_SendCmd>
 8000690:	4603      	mov	r3, r0
 8000692:	2b01      	cmp	r3, #1
 8000694:	d807      	bhi.n	80006a6 <SD_disk_initialize+0xae>
 8000696:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800069a:	2069      	movs	r0, #105	@ 0x69
 800069c:	f7ff ff57 	bl	800054e <SD_SendCmd>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d004      	beq.n	80006b0 <SD_disk_initialize+0xb8>
            break;
        } while (Timer1);
 80006a6:	4b45      	ldr	r3, [pc, #276]	@ (80007bc <SD_disk_initialize+0x1c4>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1ec      	bne.n	8000688 <SD_disk_initialize+0x90>
 80006ae:	e000      	b.n	80006b2 <SD_disk_initialize+0xba>
            break;
 80006b0:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) {
 80006b2:	4b42      	ldr	r3, [pc, #264]	@ (80007bc <SD_disk_initialize+0x1c4>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d062      	beq.n	8000780 <SD_disk_initialize+0x188>
 80006ba:	2100      	movs	r1, #0
 80006bc:	207a      	movs	r0, #122	@ 0x7a
 80006be:	f7ff ff46 	bl	800054e <SD_SendCmd>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d15b      	bne.n	8000780 <SD_disk_initialize+0x188>
          /* Check CCS bit */
          for (n = 0; n < 4; n++) {
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]
 80006cc:	e00c      	b.n	80006e8 <SD_disk_initialize+0xf0>
            ocr[n] = SPI_RxByte();
 80006ce:	7bfc      	ldrb	r4, [r7, #15]
 80006d0:	f7ff fe2c 	bl	800032c <SPI_RxByte>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	f104 0310 	add.w	r3, r4, #16
 80006dc:	443b      	add	r3, r7
 80006de:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++) {
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	3301      	adds	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d9ef      	bls.n	80006ce <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80006ee:	7a3b      	ldrb	r3, [r7, #8]
 80006f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SD_disk_initialize+0x104>
 80006f8:	230c      	movs	r3, #12
 80006fa:	e000      	b.n	80006fe <SD_disk_initialize+0x106>
 80006fc:	2304      	movs	r3, #4
 80006fe:	73bb      	strb	r3, [r7, #14]
 8000700:	e03e      	b.n	8000780 <SD_disk_initialize+0x188>
        }
      }
    } else {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1
 8000702:	2100      	movs	r1, #0
 8000704:	2077      	movs	r0, #119	@ 0x77
 8000706:	f7ff ff22 	bl	800054e <SD_SendCmd>
 800070a:	4603      	mov	r3, r0
 800070c:	2b01      	cmp	r3, #1
 800070e:	d808      	bhi.n	8000722 <SD_disk_initialize+0x12a>
 8000710:	2100      	movs	r1, #0
 8000712:	2069      	movs	r0, #105	@ 0x69
 8000714:	f7ff ff1b 	bl	800054e <SD_SendCmd>
 8000718:	4603      	mov	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	d801      	bhi.n	8000722 <SD_disk_initialize+0x12a>
 800071e:	2302      	movs	r3, #2
 8000720:	e000      	b.n	8000724 <SD_disk_initialize+0x12c>
 8000722:	2301      	movs	r3, #1
 8000724:	73bb      	strb	r3, [r7, #14]
                                                                      : CT_MMC;

      do {
        if (type == CT_SD1) {
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	2b02      	cmp	r3, #2
 800072a:	d10e      	bne.n	800074a <SD_disk_initialize+0x152>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800072c:	2100      	movs	r1, #0
 800072e:	2077      	movs	r0, #119	@ 0x77
 8000730:	f7ff ff0d 	bl	800054e <SD_SendCmd>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d80e      	bhi.n	8000758 <SD_disk_initialize+0x160>
 800073a:	2100      	movs	r1, #0
 800073c:	2069      	movs	r0, #105	@ 0x69
 800073e:	f7ff ff06 	bl	800054e <SD_SendCmd>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d107      	bne.n	8000758 <SD_disk_initialize+0x160>
            break; /* ACMD41 */
 8000748:	e00c      	b.n	8000764 <SD_disk_initialize+0x16c>
        } else {
          if (SD_SendCmd(CMD1, 0) == 0)
 800074a:	2100      	movs	r1, #0
 800074c:	2041      	movs	r0, #65	@ 0x41
 800074e:	f7ff fefe 	bl	800054e <SD_SendCmd>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d004      	beq.n	8000762 <SD_disk_initialize+0x16a>
            break; /* CMD1 */
        }

      } while (Timer1);
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <SD_disk_initialize+0x1c4>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1e2      	bne.n	8000726 <SD_disk_initialize+0x12e>
 8000760:	e000      	b.n	8000764 <SD_disk_initialize+0x16c>
            break; /* CMD1 */
 8000762:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000764:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <SD_disk_initialize+0x1c4>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d007      	beq.n	800077c <SD_disk_initialize+0x184>
 800076c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000770:	2050      	movs	r0, #80	@ 0x50
 8000772:	f7ff feec 	bl	800054e <SD_SendCmd>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SD_disk_initialize+0x188>
        type = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8000780:	4a0f      	ldr	r2, [pc, #60]	@ (80007c0 <SD_disk_initialize+0x1c8>)
 8000782:	7bbb      	ldrb	r3, [r7, #14]
 8000784:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8000786:	f7ff fd8b 	bl	80002a0 <DESELECT>
  SPI_RxByte();
 800078a:	f7ff fdcf 	bl	800032c <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type) {
 800078e:	7bbb      	ldrb	r3, [r7, #14]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d008      	beq.n	80007a6 <SD_disk_initialize+0x1ae>
    Stat &= ~STA_NOINIT;
 8000794:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <SD_disk_initialize+0x1c0>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	f023 0301 	bic.w	r3, r3, #1
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <SD_disk_initialize+0x1c0>)
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	e001      	b.n	80007aa <SD_disk_initialize+0x1b2>
  } else {
    /* Initialization failed */
    SD_PowerOff();
 80007a6:	f7ff fe49 	bl	800043c <SD_PowerOff>
  }

  return Stat;
 80007aa:	4b03      	ldr	r3, [pc, #12]	@ (80007b8 <SD_disk_initialize+0x1c0>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd90      	pop	{r4, r7, pc}
 80007b8:	20000000 	.word	0x20000000
 80007bc:	2000009c 	.word	0x2000009c
 80007c0:	200000a0 	.word	0x200000a0

080007c4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) {
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SD_disk_status+0x14>
    return STA_NOINIT;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e002      	b.n	80007de <SD_disk_status+0x1a>
  return Stat;
 80007d8:	4b04      	ldr	r3, [pc, #16]	@ (80007ec <SD_disk_status+0x28>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b2db      	uxtb	r3, r3
}
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000000 	.word	0x20000000

080007f0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	4603      	mov	r3, r0
 80007fe:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count)
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d102      	bne.n	800080c <SD_disk_read+0x1c>
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d101      	bne.n	8000810 <SD_disk_read+0x20>
    return RES_PARERR;
 800080c:	2304      	movs	r3, #4
 800080e:	e051      	b.n	80008b4 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT)
 8000810:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <SD_disk_read+0xcc>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800081e:	2303      	movs	r3, #3
 8000820:	e048      	b.n	80008b4 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2))
 8000822:	4b27      	ldr	r3, [pc, #156]	@ (80008c0 <SD_disk_read+0xd0>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	2b00      	cmp	r3, #0
 800082c:	d102      	bne.n	8000834 <SD_disk_read+0x44>
    sector *= 512;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	025b      	lsls	r3, r3, #9
 8000832:	607b      	str	r3, [r7, #4]

  SELECT();
 8000834:	f7ff fd24 	bl	8000280 <SELECT>

  if (count == 1) {
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d111      	bne.n	8000862 <SD_disk_read+0x72>
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	2051      	movs	r0, #81	@ 0x51
 8000842:	f7ff fe84 	bl	800054e <SD_SendCmd>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d129      	bne.n	80008a0 <SD_disk_read+0xb0>
 800084c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000850:	68b8      	ldr	r0, [r7, #8]
 8000852:	f7ff fe0b 	bl	800046c <SD_RxDataBlock>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d021      	beq.n	80008a0 <SD_disk_read+0xb0>
      count = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	e01e      	b.n	80008a0 <SD_disk_read+0xb0>
  } else {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0) {
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	2052      	movs	r0, #82	@ 0x52
 8000866:	f7ff fe72 	bl	800054e <SD_SendCmd>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d117      	bne.n	80008a0 <SD_disk_read+0xb0>
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000870:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000874:	68b8      	ldr	r0, [r7, #8]
 8000876:	f7ff fdf9 	bl	800046c <SD_RxDataBlock>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d00a      	beq.n	8000896 <SD_disk_read+0xa6>
          break;
        buff += 512;
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000886:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	3b01      	subs	r3, #1
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1ed      	bne.n	8000870 <SD_disk_read+0x80>
 8000894:	e000      	b.n	8000898 <SD_disk_read+0xa8>
          break;
 8000896:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000898:	2100      	movs	r1, #0
 800089a:	204c      	movs	r0, #76	@ 0x4c
 800089c:	f7ff fe57 	bl	800054e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80008a0:	f7ff fcfe 	bl	80002a0 <DESELECT>
  SPI_RxByte();
 80008a4:	f7ff fd42 	bl	800032c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	bf14      	ite	ne
 80008ae:	2301      	movne	r3, #1
 80008b0:	2300      	moveq	r3, #0
 80008b2:	b2db      	uxtb	r3, r3
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000000 	.word	0x20000000
 80008c0:	200000a0 	.word	0x200000a0

080008c4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	607a      	str	r2, [r7, #4]
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	4603      	mov	r3, r0
 80008d2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count)
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d102      	bne.n	80008e0 <SD_disk_write+0x1c>
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d101      	bne.n	80008e4 <SD_disk_write+0x20>
    return RES_PARERR;
 80008e0:	2304      	movs	r3, #4
 80008e2:	e06b      	b.n	80009bc <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT)
 80008e4:	4b37      	ldr	r3, [pc, #220]	@ (80009c4 <SD_disk_write+0x100>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80008f2:	2303      	movs	r3, #3
 80008f4:	e062      	b.n	80009bc <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT)
 80008f6:	4b33      	ldr	r3, [pc, #204]	@ (80009c4 <SD_disk_write+0x100>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000904:	2302      	movs	r3, #2
 8000906:	e059      	b.n	80009bc <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2))
 8000908:	4b2f      	ldr	r3, [pc, #188]	@ (80009c8 <SD_disk_write+0x104>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	2b00      	cmp	r3, #0
 8000912:	d102      	bne.n	800091a <SD_disk_write+0x56>
    sector *= 512;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	025b      	lsls	r3, r3, #9
 8000918:	607b      	str	r3, [r7, #4]

  SELECT();
 800091a:	f7ff fcb1 	bl	8000280 <SELECT>

  if (count == 1) {
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d110      	bne.n	8000946 <SD_disk_write+0x82>
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000924:	6879      	ldr	r1, [r7, #4]
 8000926:	2058      	movs	r0, #88	@ 0x58
 8000928:	f7ff fe11 	bl	800054e <SD_SendCmd>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d13a      	bne.n	80009a8 <SD_disk_write+0xe4>
 8000932:	21fe      	movs	r1, #254	@ 0xfe
 8000934:	68b8      	ldr	r0, [r7, #8]
 8000936:	f7ff fdc7 	bl	80004c8 <SD_TxDataBlock>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d033      	beq.n	80009a8 <SD_disk_write+0xe4>
      count = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	e030      	b.n	80009a8 <SD_disk_write+0xe4>
  } else {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1) {
 8000946:	4b20      	ldr	r3, [pc, #128]	@ (80009c8 <SD_disk_write+0x104>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	2b00      	cmp	r3, #0
 8000950:	d007      	beq.n	8000962 <SD_disk_write+0x9e>
      SD_SendCmd(CMD55, 0);
 8000952:	2100      	movs	r1, #0
 8000954:	2077      	movs	r0, #119	@ 0x77
 8000956:	f7ff fdfa 	bl	800054e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800095a:	6839      	ldr	r1, [r7, #0]
 800095c:	2057      	movs	r0, #87	@ 0x57
 800095e:	f7ff fdf6 	bl	800054e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0) {
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	2059      	movs	r0, #89	@ 0x59
 8000966:	f7ff fdf2 	bl	800054e <SD_SendCmd>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d11b      	bne.n	80009a8 <SD_disk_write+0xe4>
      do {
        if (!SD_TxDataBlock(buff, 0xFC))
 8000970:	21fc      	movs	r1, #252	@ 0xfc
 8000972:	68b8      	ldr	r0, [r7, #8]
 8000974:	f7ff fda8 	bl	80004c8 <SD_TxDataBlock>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d00a      	beq.n	8000994 <SD_disk_write+0xd0>
          break;
        buff += 512;
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000984:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	3b01      	subs	r3, #1
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1ee      	bne.n	8000970 <SD_disk_write+0xac>
 8000992:	e000      	b.n	8000996 <SD_disk_write+0xd2>
          break;
 8000994:	bf00      	nop

      /* STOP_TRAN token */
      if (!SD_TxDataBlock(0, 0xFD)) {
 8000996:	21fd      	movs	r1, #253	@ 0xfd
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff fd95 	bl	80004c8 <SD_TxDataBlock>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d101      	bne.n	80009a8 <SD_disk_write+0xe4>
        count = 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80009a8:	f7ff fc7a 	bl	80002a0 <DESELECT>
  SPI_RxByte();
 80009ac:	f7ff fcbe 	bl	800032c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bf14      	ite	ne
 80009b6:	2301      	movne	r3, #1
 80009b8:	2300      	moveq	r3, #0
 80009ba:	b2db      	uxtb	r3, r3
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000000 	.word	0x20000000
 80009c8:	200000a0 	.word	0x200000a0

080009cc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) {
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b08b      	sub	sp, #44	@ 0x2c
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	603a      	str	r2, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	460b      	mov	r3, r1
 80009da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80009e6:	2304      	movs	r3, #4
 80009e8:	e113      	b.n	8000c12 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER) {
 80009f0:	79bb      	ldrb	r3, [r7, #6]
 80009f2:	2b05      	cmp	r3, #5
 80009f4:	d124      	bne.n	8000a40 <SD_disk_ioctl+0x74>
    switch (*ptr) {
 80009f6:	6a3b      	ldr	r3, [r7, #32]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d012      	beq.n	8000a24 <SD_disk_ioctl+0x58>
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	dc1a      	bgt.n	8000a38 <SD_disk_ioctl+0x6c>
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <SD_disk_ioctl+0x40>
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d006      	beq.n	8000a18 <SD_disk_ioctl+0x4c>
 8000a0a:	e015      	b.n	8000a38 <SD_disk_ioctl+0x6c>
    case 0:
      SD_PowerOff(); /* Power Off */
 8000a0c:	f7ff fd16 	bl	800043c <SD_PowerOff>
      res = RES_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000a16:	e0fa      	b.n	8000c0e <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn(); /* Power On */
 8000a18:	f7ff fcce 	bl	80003b8 <SD_PowerOn>
      res = RES_OK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000a22:	e0f4      	b.n	8000c0e <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8000a24:	6a3b      	ldr	r3, [r7, #32]
 8000a26:	1c5c      	adds	r4, r3, #1
 8000a28:	f7ff fd14 	bl	8000454 <SD_CheckPower>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	7023      	strb	r3, [r4, #0]
      res = RES_OK; /* Power Check */
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000a36:	e0ea      	b.n	8000c0e <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000a3e:	e0e6      	b.n	8000c0e <SD_disk_ioctl+0x242>
    }
  } else {
    /* no disk */
    if (Stat & STA_NOINIT)
 8000a40:	4b76      	ldr	r3, [pc, #472]	@ (8000c1c <SD_disk_ioctl+0x250>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SD_disk_ioctl+0x86>
      return RES_NOTRDY;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	e0df      	b.n	8000c12 <SD_disk_ioctl+0x246>

    SELECT();
 8000a52:	f7ff fc15 	bl	8000280 <SELECT>

    switch (ctrl) {
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	2b0d      	cmp	r3, #13
 8000a5a:	f200 80c9 	bhi.w	8000bf0 <SD_disk_ioctl+0x224>
 8000a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000a64 <SD_disk_ioctl+0x98>)
 8000a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a64:	08000b5b 	.word	0x08000b5b
 8000a68:	08000a9d 	.word	0x08000a9d
 8000a6c:	08000b4b 	.word	0x08000b4b
 8000a70:	08000bf1 	.word	0x08000bf1
 8000a74:	08000bf1 	.word	0x08000bf1
 8000a78:	08000bf1 	.word	0x08000bf1
 8000a7c:	08000bf1 	.word	0x08000bf1
 8000a80:	08000bf1 	.word	0x08000bf1
 8000a84:	08000bf1 	.word	0x08000bf1
 8000a88:	08000bf1 	.word	0x08000bf1
 8000a8c:	08000bf1 	.word	0x08000bf1
 8000a90:	08000b6d 	.word	0x08000b6d
 8000a94:	08000b91 	.word	0x08000b91
 8000a98:	08000bb5 	.word	0x08000bb5
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) {
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2049      	movs	r0, #73	@ 0x49
 8000aa0:	f7ff fd55 	bl	800054e <SD_SendCmd>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f040 80a6 	bne.w	8000bf8 <SD_disk_ioctl+0x22c>
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fcda 	bl	800046c <SD_RxDataBlock>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f000 809c 	beq.w	8000bf8 <SD_disk_ioctl+0x22c>
        if ((csd[0] >> 6) == 1) {
 8000ac0:	7b3b      	ldrb	r3, [r7, #12]
 8000ac2:	099b      	lsrs	r3, r3, #6
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d10d      	bne.n	8000ae6 <SD_disk_ioctl+0x11a>
          /* SDC V2 */
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
 8000aca:	7d7b      	ldrb	r3, [r7, #21]
 8000acc:	461a      	mov	r2, r3
 8000ace:	7d3b      	ldrb	r3, [r7, #20]
 8000ad0:	021b      	lsls	r3, r3, #8
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	3301      	adds	r3, #1
 8000ada:	83fb      	strh	r3, [r7, #30]
          *(DWORD *)buff = (DWORD)csize << 10;
 8000adc:	8bfb      	ldrh	r3, [r7, #30]
 8000ade:	029a      	lsls	r2, r3, #10
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	e02d      	b.n	8000b42 <SD_disk_ioctl+0x176>
        } else {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000ae6:	7c7b      	ldrb	r3, [r7, #17]
 8000ae8:	f003 030f 	and.w	r3, r3, #15
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	7dbb      	ldrb	r3, [r7, #22]
 8000af0:	09db      	lsrs	r3, r3, #7
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	4413      	add	r3, r2
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	7d7b      	ldrb	r3, [r7, #21]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	f003 0306 	and.w	r3, r3, #6
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	4413      	add	r3, r2
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	3302      	adds	r3, #2
 8000b0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) +
 8000b0e:	7d3b      	ldrb	r3, [r7, #20]
 8000b10:	099b      	lsrs	r3, r3, #6
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	7cfb      	ldrb	r3, [r7, #19]
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	4413      	add	r3, r2
 8000b1e:	b29a      	uxth	r2, r3
                  ((WORD)(csd[6] & 3) << 10) + 1;
 8000b20:	7cbb      	ldrb	r3, [r7, #18]
 8000b22:	029b      	lsls	r3, r3, #10
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000b2a:	b29b      	uxth	r3, r3
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) +
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	3301      	adds	r3, #1
 8000b32:	83fb      	strh	r3, [r7, #30]
          *(DWORD *)buff = (DWORD)csize << (n - 9);
 8000b34:	8bfa      	ldrh	r2, [r7, #30]
 8000b36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000b3a:	3b09      	subs	r3, #9
 8000b3c:	409a      	lsls	r2, r3
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000b48:	e056      	b.n	8000bf8 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD *)buff = 512;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b50:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000b58:	e055      	b.n	8000c06 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF)
 8000b5a:	f7ff fc13 	bl	8000384 <SD_ReadyWait>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2bff      	cmp	r3, #255	@ 0xff
 8000b62:	d14b      	bne.n	8000bfc <SD_disk_ioctl+0x230>
        res = RES_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000b6a:	e047      	b.n	8000bfc <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2049      	movs	r0, #73	@ 0x49
 8000b70:	f7ff fced 	bl	800054e <SD_SendCmd>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d142      	bne.n	8000c00 <SD_disk_ioctl+0x234>
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	6a38      	ldr	r0, [r7, #32]
 8000b7e:	f7ff fc75 	bl	800046c <SD_RxDataBlock>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d03b      	beq.n	8000c00 <SD_disk_ioctl+0x234>
        res = RES_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000b8e:	e037      	b.n	8000c00 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000b90:	2100      	movs	r1, #0
 8000b92:	204a      	movs	r0, #74	@ 0x4a
 8000b94:	f7ff fcdb 	bl	800054e <SD_SendCmd>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d132      	bne.n	8000c04 <SD_disk_ioctl+0x238>
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	6a38      	ldr	r0, [r7, #32]
 8000ba2:	f7ff fc63 	bl	800046c <SD_RxDataBlock>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d02b      	beq.n	8000c04 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000bb2:	e027      	b.n	8000c04 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0) {
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	207a      	movs	r0, #122	@ 0x7a
 8000bb8:	f7ff fcc9 	bl	800054e <SD_SendCmd>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d116      	bne.n	8000bf0 <SD_disk_ioctl+0x224>
        for (n = 0; n < 4; n++) {
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000bc8:	e00b      	b.n	8000be2 <SD_disk_ioctl+0x216>
          *ptr++ = SPI_RxByte();
 8000bca:	6a3c      	ldr	r4, [r7, #32]
 8000bcc:	1c63      	adds	r3, r4, #1
 8000bce:	623b      	str	r3, [r7, #32]
 8000bd0:	f7ff fbac 	bl	800032c <SPI_RxByte>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++) {
 8000bd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000bdc:	3301      	adds	r3, #1
 8000bde:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000be2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	d9ef      	bls.n	8000bca <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000bf6:	e006      	b.n	8000c06 <SD_disk_ioctl+0x23a>
      break;
 8000bf8:	bf00      	nop
 8000bfa:	e004      	b.n	8000c06 <SD_disk_ioctl+0x23a>
      break;
 8000bfc:	bf00      	nop
 8000bfe:	e002      	b.n	8000c06 <SD_disk_ioctl+0x23a>
      break;
 8000c00:	bf00      	nop
 8000c02:	e000      	b.n	8000c06 <SD_disk_ioctl+0x23a>
      break;
 8000c04:	bf00      	nop
    }

    DESELECT();
 8000c06:	f7ff fb4b 	bl	80002a0 <DESELECT>
    SPI_RxByte();
 8000c0a:	f7ff fb8f 	bl	800032c <SPI_RxByte>
  }

  return res;
 8000c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	372c      	adds	r7, #44	@ 0x2c
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000000 	.word	0x20000000

08000c20 <printmsg>:
  * @param format Pointer to the format string.
  * @param ... Additional arguments to format.
  * @retval None
  */
void printmsg(char *format,...)
{
 8000c20:	b40f      	push	{r0, r1, r2, r3}
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b09a      	sub	sp, #104	@ 0x68
 8000c26:	af00      	add	r7, sp, #0
  char str[100];

  /*Extract the the argument list using VA apis */
  va_list args;
  va_start(args, format);
 8000c28:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000c2c:	603b      	str	r3, [r7, #0]
  vsprintf(str, format,args);
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000c34:	4618      	mov	r0, r3
 8000c36:	f008 fbcb 	bl	80093d0 <vsiprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fac7 	bl	80001d0 <strlen>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	1d39      	adds	r1, r7, #4
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <printmsg+0x40>)
 8000c4e:	f003 fd25 	bl	800469c <HAL_UART_Transmit>
  va_end(args);
}
 8000c52:	bf00      	nop
 8000c54:	3768      	adds	r7, #104	@ 0x68
 8000c56:	46bd      	mov	sp, r7
 8000c58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c5c:	b004      	add	sp, #16
 8000c5e:	4770      	bx	lr
 8000c60:	20000108 	.word	0x20000108

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c68:	f000 fd8a 	bl	8001780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6c:	f000 f83e 	bl	8000cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c70:	f000 f92a 	bl	8000ec8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c74:	f000 f902 	bl	8000e7c <MX_DMA_Init>
  MX_SPI1_Init();
 8000c78:	f000 f892 	bl	8000da0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c7c:	f000 f8ce 	bl	8000e1c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000c80:	f004 feea 	bl	8005a58 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	// Wait for SD card detection
	while (!check_sd_card_status()) {
 8000c84:	e006      	b.n	8000c94 <main+0x30>
		printmsg("Insert the SD card!!!\r\n");
 8000c86:	4813      	ldr	r0, [pc, #76]	@ (8000cd4 <main+0x70>)
 8000c88:	f7ff ffca 	bl	8000c20 <printmsg>
		HAL_Delay(1000);
 8000c8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c90:	f000 fddc 	bl	800184c <HAL_Delay>
	while (!check_sd_card_status()) {
 8000c94:	f000 f9f4 	bl	8001080 <check_sd_card_status>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d0f3      	beq.n	8000c86 <main+0x22>
	}

	printmsg("Please enter the data to be written to the SD card.\r\n");
 8000c9e:	480e      	ldr	r0, [pc, #56]	@ (8000cd8 <main+0x74>)
 8000ca0:	f7ff ffbe 	bl	8000c20 <printmsg>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, current_rx_buff, RX_BUF_SIZE);
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <main+0x78>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2264      	movs	r2, #100	@ 0x64
 8000caa:	4619      	mov	r1, r3
 8000cac:	480c      	ldr	r0, [pc, #48]	@ (8000ce0 <main+0x7c>)
 8000cae:	f004 fe7e 	bl	80059ae <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <main+0x80>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <main+0x80>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 0204 	bic.w	r2, r2, #4
 8000cc0:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    set_filename("test.txt");
 8000cc2:	4809      	ldr	r0, [pc, #36]	@ (8000ce8 <main+0x84>)
 8000cc4:	f000 f9f6 	bl	80010b4 <set_filename>
    store_received_data();
 8000cc8:	f000 fb48 	bl	800135c <store_received_data>
    display_stored_data();
 8000ccc:	f000 fb62 	bl	8001394 <display_stored_data>
    set_filename("test.txt");
 8000cd0:	bf00      	nop
 8000cd2:	e7f6      	b.n	8000cc2 <main+0x5e>
 8000cd4:	08009d08 	.word	0x08009d08
 8000cd8:	08009d20 	.word	0x08009d20
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000108 	.word	0x20000108
 8000ce4:	20000190 	.word	0x20000190
 8000ce8:	08009d58 	.word	0x08009d58

08000cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b09e      	sub	sp, #120	@ 0x78
 8000cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000cf6:	2228      	movs	r2, #40	@ 0x28
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f008 fb72 	bl	80093e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d00:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d10:	463b      	mov	r3, r7
 8000d12:	223c      	movs	r2, #60	@ 0x3c
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f008 fb64 	bl	80093e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d24:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d36:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d38:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d3c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 faa8 	bl	8002298 <HAL_RCC_OscConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d4e:	f000 f991 	bl	8001074 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d52:	230f      	movs	r3, #15
 8000d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d56:	2302      	movs	r3, #2
 8000d58:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d68:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 fad0 	bl	8003314 <HAL_RCC_ClockConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d7a:	f000 f97b 	bl	8001074 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d86:	463b      	mov	r3, r7
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f002 fce3 	bl	8003754 <HAL_RCCEx_PeriphCLKConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d94:	f000 f96e 	bl	8001074 <Error_Handler>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3778      	adds	r7, #120	@ 0x78
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e14 <MX_SPI1_Init+0x74>)
 8000da6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e18 <MX_SPI1_Init+0x78>)
 8000da8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_SPI1_Init+0x74>)
 8000dac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000db0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000db2:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <MX_SPI1_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000db8:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <MX_SPI1_Init+0x74>)
 8000dba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000dbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_SPI1_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <MX_SPI1_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_SPI1_Init+0x74>)
 8000dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_SPI1_Init+0x74>)
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <MX_SPI1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <MX_SPI1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <MX_SPI1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dec:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <MX_SPI1_Init+0x74>)
 8000dee:	2207      	movs	r2, #7
 8000df0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <MX_SPI1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <MX_SPI1_Init+0x74>)
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_SPI1_Init+0x74>)
 8000e00:	f002 fe58 	bl	8003ab4 <HAL_SPI_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e0a:	f000 f933 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200000a4 	.word	0x200000a4
 8000e18:	40013000 	.word	0x40013000

08000e1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e20:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e22:	4a15      	ldr	r2, [pc, #84]	@ (8000e78 <MX_USART1_UART_Init+0x5c>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e26:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <MX_USART1_UART_Init+0x58>)
 8000e60:	f003 fbce 	bl	8004600 <HAL_UART_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e6a:	f000 f903 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000108 	.word	0x20000108
 8000e78:	40013800 	.word	0x40013800

08000e7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e82:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <MX_DMA_Init+0x48>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec4 <MX_DMA_Init+0x48>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6153      	str	r3, [r2, #20]
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <MX_DMA_Init+0x48>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	200e      	movs	r0, #14
 8000ea0:	f000 fdd3 	bl	8001a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ea4:	200e      	movs	r0, #14
 8000ea6:	f000 fdec 	bl	8001a82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	200f      	movs	r0, #15
 8000eb0:	f000 fdcb 	bl	8001a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000eb4:	200f      	movs	r0, #15
 8000eb6:	f000 fde4 	bl	8001a82 <HAL_NVIC_EnableIRQ>

}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	@ 0x28
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	4b36      	ldr	r3, [pc, #216]	@ (8000fb8 <MX_GPIO_Init+0xf0>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	4a35      	ldr	r2, [pc, #212]	@ (8000fb8 <MX_GPIO_Init+0xf0>)
 8000ee4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ee8:	6153      	str	r3, [r2, #20]
 8000eea:	4b33      	ldr	r3, [pc, #204]	@ (8000fb8 <MX_GPIO_Init+0xf0>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ef6:	4b30      	ldr	r3, [pc, #192]	@ (8000fb8 <MX_GPIO_Init+0xf0>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb8 <MX_GPIO_Init+0xf0>)
 8000efc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f00:	6153      	str	r3, [r2, #20]
 8000f02:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb8 <MX_GPIO_Init+0xf0>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb8 <MX_GPIO_Init+0xf0>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	4a29      	ldr	r2, [pc, #164]	@ (8000fb8 <MX_GPIO_Init+0xf0>)
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f18:	6153      	str	r3, [r2, #20]
 8000f1a:	4b27      	ldr	r3, [pc, #156]	@ (8000fb8 <MX_GPIO_Init+0xf0>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	4b24      	ldr	r3, [pc, #144]	@ (8000fb8 <MX_GPIO_Init+0xf0>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	4a23      	ldr	r2, [pc, #140]	@ (8000fb8 <MX_GPIO_Init+0xf0>)
 8000f2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f30:	6153      	str	r3, [r2, #20]
 8000f32:	4b21      	ldr	r3, [pc, #132]	@ (8000fb8 <MX_GPIO_Init+0xf0>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f44:	481d      	ldr	r0, [pc, #116]	@ (8000fbc <MX_GPIO_Init+0xf4>)
 8000f46:	f001 f977 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000f4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4816      	ldr	r0, [pc, #88]	@ (8000fbc <MX_GPIO_Init+0xf4>)
 8000f64:	f000 ffd6 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_btn_Pin */
  GPIO_InitStruct.Pin = User_btn_Pin;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_btn_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f80:	f000 ffc8 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8000f84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4619      	mov	r1, r3
 8000f98:	4809      	ldr	r0, [pc, #36]	@ (8000fc0 <MX_GPIO_Init+0xf8>)
 8000f9a:	f000 ffbb 	bl	8001f14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2006      	movs	r0, #6
 8000fa4:	f000 fd51 	bl	8001a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fa8:	2006      	movs	r0, #6
 8000faa:	f000 fd6a 	bl	8001a82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fae:	bf00      	nop
 8000fb0:	3728      	adds	r7, #40	@ 0x28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000800 	.word	0x48000800
 8000fc0:	48000400 	.word	0x48000400

08000fc4 <HAL_UARTEx_RxEventCallback>:
  * @param  huart UART handle
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART1) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a15      	ldr	r2, [pc, #84]	@ (800102c <HAL_UARTEx_RxEventCallback+0x68>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d123      	bne.n	8001022 <HAL_UARTEx_RxEventCallback+0x5e>
    // Swap buffers
    if (current_rx_buff == uart_rx_buff1) {
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a15      	ldr	r2, [pc, #84]	@ (8001034 <HAL_UARTEx_RxEventCallback+0x70>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d106      	bne.n	8000ff2 <HAL_UARTEx_RxEventCallback+0x2e>
      current_rx_buff = uart_rx_buff2;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000fe6:	4a14      	ldr	r2, [pc, #80]	@ (8001038 <HAL_UARTEx_RxEventCallback+0x74>)
 8000fe8:	601a      	str	r2, [r3, #0]
      processing_buff = uart_rx_buff1;
 8000fea:	4b14      	ldr	r3, [pc, #80]	@ (800103c <HAL_UARTEx_RxEventCallback+0x78>)
 8000fec:	4a11      	ldr	r2, [pc, #68]	@ (8001034 <HAL_UARTEx_RxEventCallback+0x70>)
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	e005      	b.n	8000ffe <HAL_UARTEx_RxEventCallback+0x3a>
    } else {
      current_rx_buff = uart_rx_buff1;
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000ff4:	4a0f      	ldr	r2, [pc, #60]	@ (8001034 <HAL_UARTEx_RxEventCallback+0x70>)
 8000ff6:	601a      	str	r2, [r3, #0]
      processing_buff = uart_rx_buff2;
 8000ff8:	4b10      	ldr	r3, [pc, #64]	@ (800103c <HAL_UARTEx_RxEventCallback+0x78>)
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <HAL_UARTEx_RxEventCallback+0x74>)
 8000ffc:	601a      	str	r2, [r3, #0]
    }

    // Set flag to process data
    data_received = true;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <HAL_UARTEx_RxEventCallback+0x7c>)
 8001000:	2201      	movs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]

    // Re-initiate DMA reception
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, current_rx_buff, RX_BUF_SIZE);
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2264      	movs	r2, #100	@ 0x64
 800100a:	4619      	mov	r1, r3
 800100c:	480d      	ldr	r0, [pc, #52]	@ (8001044 <HAL_UARTEx_RxEventCallback+0x80>)
 800100e:	f004 fcce 	bl	80059ae <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HAL_UARTEx_RxEventCallback+0x84>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <HAL_UARTEx_RxEventCallback+0x84>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0204 	bic.w	r2, r2, #4
 8001020:	601a      	str	r2, [r3, #0]
  }
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40013800 	.word	0x40013800
 8001030:	20000008 	.word	0x20000008
 8001034:	2000124c 	.word	0x2000124c
 8001038:	200012b0 	.word	0x200012b0
 800103c:	2000000c 	.word	0x2000000c
 8001040:	20001248 	.word	0x20001248
 8001044:	20000108 	.word	0x20000108
 8001048:	20000190 	.word	0x20000190

0800104c <HAL_GPIO_EXTI_Callback>:
/**
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == User_btn_Pin) {
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d102      	bne.n	8001062 <HAL_GPIO_EXTI_Callback+0x16>
    button_press = true;
 800105c:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <HAL_GPIO_EXTI_Callback+0x24>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20001249 	.word	0x20001249

08001074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001078:	b672      	cpsid	i
}
 800107a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <Error_Handler+0x8>

08001080 <check_sd_card_status>:
extern const char *filename ;
/**
 * @brief  Check SD card insertion status.
 * @retval true if SD card is inserted, false otherwise.
 */
uint8_t check_sd_card_status(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
  HAL_Delay(10);
 8001086:	200a      	movs	r0, #10
 8001088:	f000 fbe0 	bl	800184c <HAL_Delay>
  SD_status status = HAL_GPIO_ReadPin(SD_DET_GPIO_Port, SD_DET_Pin);
 800108c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001090:	4807      	ldr	r0, [pc, #28]	@ (80010b0 <check_sd_card_status+0x30>)
 8001092:	f001 f8b9 	bl	8002208 <HAL_GPIO_ReadPin>
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]

  /* Check if SD card is inserted or not */
  if (status == SD_CARD_INSERTED) {
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <check_sd_card_status+0x24>
    return true;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <check_sd_card_status+0x26>
  }
  return false;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	48000400 	.word	0x48000400

080010b4 <set_filename>:
/**
 * @brief  Sets the global filename variable.
 * @param  new_filename: New filename to set.
 * @retval None
 */
void set_filename(const char *new_filename) {
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  filename = new_filename;
 80010bc:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <set_filename+0x1c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000004 	.word	0x20000004

080010d4 <write_to_sd_card>:
 * @brief  Writes data to a file on the SD card using the global filename.
 * @param  data: Pointer to the data buffer to write.
 * @param  length: Length of data to write in bytes.
 * @retval None
 */
void write_to_sd_card(const char *data, uint16_t length) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 80010da:	af00      	add	r7, sp, #0
 80010dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010e0:	f843 0c3c 	str.w	r0, [r3, #-60]
 80010e4:	460a      	mov	r2, r1
 80010e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010ea:	f823 2c3e 	strh.w	r2, [r3, #-62]
  FRESULT res;
  UINT bytes_written;
  FIL file;

  res = f_mount(&fs, "", 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	4943      	ldr	r1, [pc, #268]	@ (8001200 <write_to_sd_card+0x12c>)
 80010f2:	4844      	ldr	r0, [pc, #272]	@ (8001204 <write_to_sd_card+0x130>)
 80010f4:	f006 fda2 	bl	8007c3c <f_mount>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80010fe:	f102 021f 	add.w	r2, r2, #31
 8001102:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) {
 8001104:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001108:	f103 031f 	add.w	r3, r3, #31
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d009      	beq.n	8001126 <write_to_sd_card+0x52>
    printmsg("Failed to mount file system. Error code: %d\r\n", res);
 8001112:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001116:	f103 031f 	add.w	r3, r3, #31
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	483a      	ldr	r0, [pc, #232]	@ (8001208 <write_to_sd_card+0x134>)
 8001120:	f7ff fd7e 	bl	8000c20 <printmsg>
 8001124:	e068      	b.n	80011f8 <write_to_sd_card+0x124>
    return;
  }

  res = f_open(&file, filename, FA_OPEN_ALWAYS | FA_WRITE);
 8001126:	4b39      	ldr	r3, [pc, #228]	@ (800120c <write_to_sd_card+0x138>)
 8001128:	6819      	ldr	r1, [r3, #0]
 800112a:	f107 0320 	add.w	r3, r7, #32
 800112e:	3b14      	subs	r3, #20
 8001130:	2212      	movs	r2, #18
 8001132:	4618      	mov	r0, r3
 8001134:	f006 fdcc 	bl	8007cd0 <f_open>
 8001138:	4603      	mov	r3, r0
 800113a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800113e:	f102 021f 	add.w	r2, r2, #31
 8001142:	7013      	strb	r3, [r2, #0]
  if (res == FR_OK) {
 8001144:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001148:	f103 031f 	add.w	r3, r3, #31
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d138      	bne.n	80011c4 <write_to_sd_card+0xf0>
    // Move to the end of the file
    f_lseek(&file, f_size(&file));
 8001152:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001156:	f8d3 2fd8 	ldr.w	r2, [r3, #4056]	@ 0xfd8
 800115a:	f107 0320 	add.w	r3, r7, #32
 800115e:	3b14      	subs	r3, #20
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f007 fdd0 	bl	8008d08 <f_lseek>
    // Write data to file
    res = f_write(&file, data, length, &bytes_written);
 8001168:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800116c:	f833 2c3e 	ldrh.w	r2, [r3, #-62]
 8001170:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001174:	f103 0318 	add.w	r3, r3, #24
 8001178:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800117c:	f107 0020 	add.w	r0, r7, #32
 8001180:	3814      	subs	r0, #20
 8001182:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8001186:	f007 fa8d 	bl	80086a4 <f_write>
 800118a:	4603      	mov	r3, r0
 800118c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001190:	f102 021f 	add.w	r2, r2, #31
 8001194:	7013      	strb	r3, [r2, #0]

    if (res != FR_OK) {
 8001196:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800119a:	f103 031f 	add.w	r3, r3, #31
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d008      	beq.n	80011b6 <write_to_sd_card+0xe2>
      printmsg("Failed to write to SD card. Error code: %d\r\n", res);
 80011a4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80011a8:	f103 031f 	add.w	r3, r3, #31
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	4619      	mov	r1, r3
 80011b0:	4817      	ldr	r0, [pc, #92]	@ (8001210 <write_to_sd_card+0x13c>)
 80011b2:	f7ff fd35 	bl	8000c20 <printmsg>
    }

    f_close(&file);
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	3b14      	subs	r3, #20
 80011bc:	4618      	mov	r0, r3
 80011be:	f007 fd78 	bl	8008cb2 <f_close>
 80011c2:	e008      	b.n	80011d6 <write_to_sd_card+0x102>
  } else {
    printmsg("Failed to open SD card file. Error code: %d\r\n", res);
 80011c4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80011c8:	f103 031f 	add.w	r3, r3, #31
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4810      	ldr	r0, [pc, #64]	@ (8001214 <write_to_sd_card+0x140>)
 80011d2:	f7ff fd25 	bl	8000c20 <printmsg>
  }
  printmsg("\r\n");
 80011d6:	4810      	ldr	r0, [pc, #64]	@ (8001218 <write_to_sd_card+0x144>)
 80011d8:	f7ff fd22 	bl	8000c20 <printmsg>
  printmsg("Continue SD card write or\r\n");
 80011dc:	480f      	ldr	r0, [pc, #60]	@ (800121c <write_to_sd_card+0x148>)
 80011de:	f7ff fd1f 	bl	8000c20 <printmsg>
  printmsg("press the user button to read from the SD card.\r\n");
 80011e2:	480f      	ldr	r0, [pc, #60]	@ (8001220 <write_to_sd_card+0x14c>)
 80011e4:	f7ff fd1c 	bl	8000c20 <printmsg>
  printmsg("\r\n");
 80011e8:	480b      	ldr	r0, [pc, #44]	@ (8001218 <write_to_sd_card+0x144>)
 80011ea:	f7ff fd19 	bl	8000c20 <printmsg>
  f_mount(NULL, "", 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	4903      	ldr	r1, [pc, #12]	@ (8001200 <write_to_sd_card+0x12c>)
 80011f2:	2000      	movs	r0, #0
 80011f4:	f006 fd22 	bl	8007c3c <f_mount>
}
 80011f8:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	08009d64 	.word	0x08009d64
 8001204:	20000218 	.word	0x20000218
 8001208:	08009d68 	.word	0x08009d68
 800120c:	20000004 	.word	0x20000004
 8001210:	08009d98 	.word	0x08009d98
 8001214:	08009dc8 	.word	0x08009dc8
 8001218:	08009df8 	.word	0x08009df8
 800121c:	08009dfc 	.word	0x08009dfc
 8001220:	08009e18 	.word	0x08009e18

08001224 <read_sd_card_file>:

/**
 * @brief  Reads and transmits the content of a file from the SD card over UART using the global filename.
 * @retval None
 */
void read_sd_card_file(void) {
 8001224:	b580      	push	{r7, lr}
 8001226:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
  FRESULT res;
  char buffer[30];
  UINT bytes_read;
  FIL file;

  res = f_mount(&fs, "", 0);
 800122e:	2200      	movs	r2, #0
 8001230:	4942      	ldr	r1, [pc, #264]	@ (800133c <read_sd_card_file+0x118>)
 8001232:	4843      	ldr	r0, [pc, #268]	@ (8001340 <read_sd_card_file+0x11c>)
 8001234:	f006 fd02 	bl	8007c3c <f_mount>
 8001238:	4603      	mov	r3, r0
 800123a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800123e:	f102 020f 	add.w	r2, r2, #15
 8001242:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) {
 8001244:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001248:	f103 030f 	add.w	r3, r3, #15
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d009      	beq.n	8001266 <read_sd_card_file+0x42>
    printmsg("Failed to mount file system. Error code: %d\r\n", res);
 8001252:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001256:	f103 030f 	add.w	r3, r3, #15
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	4839      	ldr	r0, [pc, #228]	@ (8001344 <read_sd_card_file+0x120>)
 8001260:	f7ff fcde 	bl	8000c20 <printmsg>
 8001264:	e064      	b.n	8001330 <read_sd_card_file+0x10c>
    return;
  }

  res = f_open(&file, filename, FA_READ);
 8001266:	4b38      	ldr	r3, [pc, #224]	@ (8001348 <read_sd_card_file+0x124>)
 8001268:	6819      	ldr	r1, [r3, #0]
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	3b10      	subs	r3, #16
 8001270:	2201      	movs	r2, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f006 fd2c 	bl	8007cd0 <f_open>
 8001278:	4603      	mov	r3, r0
 800127a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800127e:	f102 020f 	add.w	r2, r2, #15
 8001282:	7013      	strb	r3, [r2, #0]
  if (res == FR_OK) {
 8001284:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001288:	f103 030f 	add.w	r3, r3, #15
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d13d      	bne.n	800130e <read_sd_card_file+0xea>
    printmsg("\r\n");
 8001292:	482e      	ldr	r0, [pc, #184]	@ (800134c <read_sd_card_file+0x128>)
 8001294:	f7ff fcc4 	bl	8000c20 <printmsg>

    printmsg("Read data from '%s':\r\n", filename);
 8001298:	4b2b      	ldr	r3, [pc, #172]	@ (8001348 <read_sd_card_file+0x124>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	482c      	ldr	r0, [pc, #176]	@ (8001350 <read_sd_card_file+0x12c>)
 80012a0:	f7ff fcbe 	bl	8000c20 <printmsg>
    while (f_read(&file, buffer, sizeof(buffer) - 1, &bytes_read) == FR_OK && bytes_read > 0) {
 80012a4:	e014      	b.n	80012d0 <read_sd_card_file+0xac>
      buffer[bytes_read] = '\0'; // Null-terminate the buffer
 80012a6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80012aa:	f103 030c 	add.w	r3, r3, #12
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 80012b4:	f103 0310 	add.w	r3, r3, #16
 80012b8:	443b      	add	r3, r7
 80012ba:	2200      	movs	r2, #0
 80012bc:	f803 2c20 	strb.w	r2, [r3, #-32]
      //HAL_UART_Transmit(&huart1, (uint8_t *)buffer, bytes_read, HAL_MAX_DELAY);
      printmsg("%s",buffer );
 80012c0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80012c4:	f103 0310 	add.w	r3, r3, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	4822      	ldr	r0, [pc, #136]	@ (8001354 <read_sd_card_file+0x130>)
 80012cc:	f7ff fca8 	bl	8000c20 <printmsg>
    while (f_read(&file, buffer, sizeof(buffer) - 1, &bytes_read) == FR_OK && bytes_read > 0) {
 80012d0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80012d4:	f103 030c 	add.w	r3, r3, #12
 80012d8:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 80012dc:	f101 0110 	add.w	r1, r1, #16
 80012e0:	f107 0010 	add.w	r0, r7, #16
 80012e4:	3810      	subs	r0, #16
 80012e6:	221d      	movs	r2, #29
 80012e8:	f006 fff4 	bl	80082d4 <f_read>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d106      	bne.n	8001300 <read_sd_card_file+0xdc>
 80012f2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80012f6:	f103 030c 	add.w	r3, r3, #12
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1d2      	bne.n	80012a6 <read_sd_card_file+0x82>
    }

    f_close(&file);
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	3b10      	subs	r3, #16
 8001306:	4618      	mov	r0, r3
 8001308:	f007 fcd3 	bl	8008cb2 <f_close>
 800130c:	e008      	b.n	8001320 <read_sd_card_file+0xfc>
  } else {
    printmsg("Failed to open SD card file. Error code: %d\r\n", res);
 800130e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001312:	f103 030f 	add.w	r3, r3, #15
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	480f      	ldr	r0, [pc, #60]	@ (8001358 <read_sd_card_file+0x134>)
 800131c:	f7ff fc80 	bl	8000c20 <printmsg>
  }
  printmsg("\r\n");
 8001320:	480a      	ldr	r0, [pc, #40]	@ (800134c <read_sd_card_file+0x128>)
 8001322:	f7ff fc7d 	bl	8000c20 <printmsg>

  f_mount(NULL, "", 0);
 8001326:	2200      	movs	r2, #0
 8001328:	4904      	ldr	r1, [pc, #16]	@ (800133c <read_sd_card_file+0x118>)
 800132a:	2000      	movs	r0, #0
 800132c:	f006 fc86 	bl	8007c3c <f_mount>
}
 8001330:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	08009d64 	.word	0x08009d64
 8001340:	20000218 	.word	0x20000218
 8001344:	08009d68 	.word	0x08009d68
 8001348:	20000004 	.word	0x20000004
 800134c:	08009df8 	.word	0x08009df8
 8001350:	08009e4c 	.word	0x08009e4c
 8001354:	08009e64 	.word	0x08009e64
 8001358:	08009dc8 	.word	0x08009dc8

0800135c <store_received_data>:

/**
  * @brief  Store data received via UART in SD card.
  * @retval None
  */
void store_received_data(void) {
 800135c:	b598      	push	{r3, r4, r7, lr}
 800135e:	af00      	add	r7, sp, #0
  if (data_received == true) {
 8001360:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <store_received_data+0x30>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d10f      	bne.n	8001388 <store_received_data+0x2c>
    write_to_sd_card((const char *)processing_buff, strlen((const char *)processing_buff));
 8001368:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <store_received_data+0x34>)
 800136a:	681c      	ldr	r4, [r3, #0]
 800136c:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <store_received_data+0x34>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7fe ff2d 	bl	80001d0 <strlen>
 8001376:	4603      	mov	r3, r0
 8001378:	b29b      	uxth	r3, r3
 800137a:	4619      	mov	r1, r3
 800137c:	4620      	mov	r0, r4
 800137e:	f7ff fea9 	bl	80010d4 <write_to_sd_card>
    data_received = false;
 8001382:	4b02      	ldr	r3, [pc, #8]	@ (800138c <store_received_data+0x30>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
  }
}
 8001388:	bf00      	nop
 800138a:	bd98      	pop	{r3, r4, r7, pc}
 800138c:	20001248 	.word	0x20001248
 8001390:	2000000c 	.word	0x2000000c

08001394 <display_stored_data>:

/**
  * @brief  display stored data.
  * @retval None
  */
void display_stored_data(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  if (button_press == true) {
 8001398:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <display_stored_data+0x1c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d104      	bne.n	80013aa <display_stored_data+0x16>
    read_sd_card_file();
 80013a0:	f7ff ff40 	bl	8001224 <read_sd_card_file>
    button_press = false;
 80013a4:	4b02      	ldr	r3, [pc, #8]	@ (80013b0 <display_stored_data+0x1c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
  }
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20001249 	.word	0x20001249

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <HAL_MspInit+0x44>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4a0e      	ldr	r2, [pc, #56]	@ (80013f8 <HAL_MspInit+0x44>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6193      	str	r3, [r2, #24]
 80013c6:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <HAL_MspInit+0x44>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <HAL_MspInit+0x44>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a08      	ldr	r2, [pc, #32]	@ (80013f8 <HAL_MspInit+0x44>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_MspInit+0x44>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	@ 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a17      	ldr	r2, [pc, #92]	@ (8001478 <HAL_SPI_MspInit+0x7c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d128      	bne.n	8001470 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800141e:	4b17      	ldr	r3, [pc, #92]	@ (800147c <HAL_SPI_MspInit+0x80>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	4a16      	ldr	r2, [pc, #88]	@ (800147c <HAL_SPI_MspInit+0x80>)
 8001424:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001428:	6193      	str	r3, [r2, #24]
 800142a:	4b14      	ldr	r3, [pc, #80]	@ (800147c <HAL_SPI_MspInit+0x80>)
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <HAL_SPI_MspInit+0x80>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	4a10      	ldr	r2, [pc, #64]	@ (800147c <HAL_SPI_MspInit+0x80>)
 800143c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001440:	6153      	str	r3, [r2, #20]
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <HAL_SPI_MspInit+0x80>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCL_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 800144e:	23e0      	movs	r3, #224	@ 0xe0
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800145e:	2305      	movs	r3, #5
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800146c:	f000 fd52 	bl	8001f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	@ 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40013000 	.word	0x40013000
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	@ 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a42      	ldr	r2, [pc, #264]	@ (80015a8 <HAL_UART_MspInit+0x128>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d17d      	bne.n	800159e <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a2:	4b42      	ldr	r3, [pc, #264]	@ (80015ac <HAL_UART_MspInit+0x12c>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4a41      	ldr	r2, [pc, #260]	@ (80015ac <HAL_UART_MspInit+0x12c>)
 80014a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ac:	6193      	str	r3, [r2, #24]
 80014ae:	4b3f      	ldr	r3, [pc, #252]	@ (80015ac <HAL_UART_MspInit+0x12c>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	4b3c      	ldr	r3, [pc, #240]	@ (80015ac <HAL_UART_MspInit+0x12c>)
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	4a3b      	ldr	r2, [pc, #236]	@ (80015ac <HAL_UART_MspInit+0x12c>)
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c4:	6153      	str	r3, [r2, #20]
 80014c6:	4b39      	ldr	r3, [pc, #228]	@ (80015ac <HAL_UART_MspInit+0x12c>)
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014d2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014e4:	2307      	movs	r3, #7
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f2:	f000 fd0f 	bl	8001f14 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80014f6:	4b2e      	ldr	r3, [pc, #184]	@ (80015b0 <HAL_UART_MspInit+0x130>)
 80014f8:	4a2e      	ldr	r2, [pc, #184]	@ (80015b4 <HAL_UART_MspInit+0x134>)
 80014fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014fc:	4b2c      	ldr	r3, [pc, #176]	@ (80015b0 <HAL_UART_MspInit+0x130>)
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001502:	4b2b      	ldr	r3, [pc, #172]	@ (80015b0 <HAL_UART_MspInit+0x130>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001508:	4b29      	ldr	r3, [pc, #164]	@ (80015b0 <HAL_UART_MspInit+0x130>)
 800150a:	2280      	movs	r2, #128	@ 0x80
 800150c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800150e:	4b28      	ldr	r3, [pc, #160]	@ (80015b0 <HAL_UART_MspInit+0x130>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001514:	4b26      	ldr	r3, [pc, #152]	@ (80015b0 <HAL_UART_MspInit+0x130>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800151a:	4b25      	ldr	r3, [pc, #148]	@ (80015b0 <HAL_UART_MspInit+0x130>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001520:	4b23      	ldr	r3, [pc, #140]	@ (80015b0 <HAL_UART_MspInit+0x130>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001526:	4822      	ldr	r0, [pc, #136]	@ (80015b0 <HAL_UART_MspInit+0x130>)
 8001528:	f000 fac5 	bl	8001ab6 <HAL_DMA_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8001532:	f7ff fd9f 	bl	8001074 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a1d      	ldr	r2, [pc, #116]	@ (80015b0 <HAL_UART_MspInit+0x130>)
 800153a:	675a      	str	r2, [r3, #116]	@ 0x74
 800153c:	4a1c      	ldr	r2, [pc, #112]	@ (80015b0 <HAL_UART_MspInit+0x130>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001542:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <HAL_UART_MspInit+0x138>)
 8001544:	4a1d      	ldr	r2, [pc, #116]	@ (80015bc <HAL_UART_MspInit+0x13c>)
 8001546:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001548:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <HAL_UART_MspInit+0x138>)
 800154a:	2210      	movs	r2, #16
 800154c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154e:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <HAL_UART_MspInit+0x138>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001554:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <HAL_UART_MspInit+0x138>)
 8001556:	2280      	movs	r2, #128	@ 0x80
 8001558:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800155a:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <HAL_UART_MspInit+0x138>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001560:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <HAL_UART_MspInit+0x138>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_UART_MspInit+0x138>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_UART_MspInit+0x138>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001572:	4811      	ldr	r0, [pc, #68]	@ (80015b8 <HAL_UART_MspInit+0x138>)
 8001574:	f000 fa9f 	bl	8001ab6 <HAL_DMA_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 800157e:	f7ff fd79 	bl	8001074 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a0c      	ldr	r2, [pc, #48]	@ (80015b8 <HAL_UART_MspInit+0x138>)
 8001586:	671a      	str	r2, [r3, #112]	@ 0x70
 8001588:	4a0b      	ldr	r2, [pc, #44]	@ (80015b8 <HAL_UART_MspInit+0x138>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2025      	movs	r0, #37	@ 0x25
 8001594:	f000 fa59 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001598:	2025      	movs	r0, #37	@ 0x25
 800159a:	f000 fa72 	bl	8001a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	@ 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40013800 	.word	0x40013800
 80015ac:	40021000 	.word	0x40021000
 80015b0:	20000190 	.word	0x20000190
 80015b4:	40020058 	.word	0x40020058
 80015b8:	200001d4 	.word	0x200001d4
 80015bc:	40020044 	.word	0x40020044

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <NMI_Handler+0x4>

080015c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <MemManage_Handler+0x4>

080015d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001618:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <SysTick_Handler+0x34>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <SysTick_Handler+0x18>
		Timer1--;
 8001620:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <SysTick_Handler+0x34>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	3b01      	subs	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <SysTick_Handler+0x34>)
 800162a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 800162c:	4b07      	ldr	r3, [pc, #28]	@ (800164c <SysTick_Handler+0x38>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <SysTick_Handler+0x2c>
		Timer2--;
 8001634:	4b05      	ldr	r3, [pc, #20]	@ (800164c <SysTick_Handler+0x38>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	3b01      	subs	r3, #1
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <SysTick_Handler+0x38>)
 800163e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001640:	f000 f8e4 	bl	800180c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	2000009c 	.word	0x2000009c
 800164c:	2000009e 	.word	0x2000009e

08001650 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_btn_Pin);
 8001654:	2001      	movs	r0, #1
 8001656:	f000 fe07 	bl	8002268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <DMA1_Channel4_IRQHandler+0x10>)
 8001666:	f000 fb48 	bl	8001cfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200001d4 	.word	0x200001d4

08001674 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <DMA1_Channel5_IRQHandler+0x10>)
 800167a:	f000 fb3e 	bl	8001cfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000190 	.word	0x20000190

08001688 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <USART1_IRQHandler+0x10>)
 800168e:	f003 f88f 	bl	80047b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000108 	.word	0x20000108

0800169c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a4:	4a14      	ldr	r2, [pc, #80]	@ (80016f8 <_sbrk+0x5c>)
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <_sbrk+0x60>)
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b0:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <_sbrk+0x64>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	@ (8001704 <_sbrk+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d207      	bcs.n	80016dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016cc:	f007 fe92 	bl	80093f4 <__errno>
 80016d0:	4603      	mov	r3, r0
 80016d2:	220c      	movs	r2, #12
 80016d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	e009      	b.n	80016f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e2:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	4a05      	ldr	r2, [pc, #20]	@ (8001700 <_sbrk+0x64>)
 80016ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000a000 	.word	0x2000a000
 80016fc:	00000400 	.word	0x00000400
 8001700:	20001314 	.word	0x20001314
 8001704:	20001498 	.word	0x20001498

08001708 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <SystemInit+0x20>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001712:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <SystemInit+0x20>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001764 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001730:	f7ff ffea 	bl	8001708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001734:	480c      	ldr	r0, [pc, #48]	@ (8001768 <LoopForever+0x6>)
  ldr r1, =_edata
 8001736:	490d      	ldr	r1, [pc, #52]	@ (800176c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001738:	4a0d      	ldr	r2, [pc, #52]	@ (8001770 <LoopForever+0xe>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800174c:	4c0a      	ldr	r4, [pc, #40]	@ (8001778 <LoopForever+0x16>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175a:	f007 fe51 	bl	8009400 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800175e:	f7ff fa81 	bl	8000c64 <main>

08001762 <LoopForever>:

LoopForever:
    b LoopForever
 8001762:	e7fe      	b.n	8001762 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001764:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001770:	08009fa8 	.word	0x08009fa8
  ldr r2, =_sbss
 8001774:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001778:	20001498 	.word	0x20001498

0800177c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC1_2_IRQHandler>
	...

08001780 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001784:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <HAL_Init+0x28>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a07      	ldr	r2, [pc, #28]	@ (80017a8 <HAL_Init+0x28>)
 800178a:	f043 0310 	orr.w	r3, r3, #16
 800178e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001790:	2003      	movs	r0, #3
 8001792:	f000 f94f 	bl	8001a34 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001796:	200f      	movs	r0, #15
 8001798:	f000 f808 	bl	80017ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800179c:	f7ff fe0a 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40022000 	.word	0x40022000

080017ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b4:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <HAL_InitTick+0x54>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <HAL_InitTick+0x58>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 f967 	bl	8001a9e <HAL_SYSTICK_Config>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00e      	b.n	80017f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b0f      	cmp	r3, #15
 80017de:	d80a      	bhi.n	80017f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e0:	2200      	movs	r2, #0
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f000 f92f 	bl	8001a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ec:	4a06      	ldr	r2, [pc, #24]	@ (8001808 <HAL_InitTick+0x5c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e000      	b.n	80017f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000010 	.word	0x20000010
 8001804:	20000018 	.word	0x20000018
 8001808:	20000014 	.word	0x20000014

0800180c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <HAL_IncTick+0x20>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_IncTick+0x24>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <HAL_IncTick+0x24>)
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000018 	.word	0x20000018
 8001830:	20001318 	.word	0x20001318

08001834 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;  
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <HAL_GetTick+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20001318 	.word	0x20001318

0800184c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff ffee 	bl	8001834 <HAL_GetTick>
 8001858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001864:	d005      	beq.n	8001872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001866:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <HAL_Delay+0x44>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001872:	bf00      	nop
 8001874:	f7ff ffde 	bl	8001834 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	429a      	cmp	r2, r3
 8001882:	d8f7      	bhi.n	8001874 <HAL_Delay+0x28>
  {
  }
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000018 	.word	0x20000018

08001894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b0:	4013      	ands	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c6:	4a04      	ldr	r2, [pc, #16]	@ (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	60d3      	str	r3, [r2, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e0:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <__NVIC_GetPriorityGrouping+0x18>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	f003 0307 	and.w	r3, r3, #7
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	2b00      	cmp	r3, #0
 8001908:	db0b      	blt.n	8001922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	f003 021f 	and.w	r2, r3, #31
 8001910:	4907      	ldr	r1, [pc, #28]	@ (8001930 <__NVIC_EnableIRQ+0x38>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	2001      	movs	r0, #1
 800191a:	fa00 f202 	lsl.w	r2, r0, r2
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000e100 	.word	0xe000e100

08001934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	2b00      	cmp	r3, #0
 8001946:	db0a      	blt.n	800195e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	b2da      	uxtb	r2, r3
 800194c:	490c      	ldr	r1, [pc, #48]	@ (8001980 <__NVIC_SetPriority+0x4c>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	0112      	lsls	r2, r2, #4
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	440b      	add	r3, r1
 8001958:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800195c:	e00a      	b.n	8001974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4908      	ldr	r1, [pc, #32]	@ (8001984 <__NVIC_SetPriority+0x50>)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	3b04      	subs	r3, #4
 800196c:	0112      	lsls	r2, r2, #4
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	440b      	add	r3, r1
 8001972:	761a      	strb	r2, [r3, #24]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000e100 	.word	0xe000e100
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	@ 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f1c3 0307 	rsb	r3, r3, #7
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	bf28      	it	cs
 80019a6:	2304      	movcs	r3, #4
 80019a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3304      	adds	r3, #4
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d902      	bls.n	80019b8 <NVIC_EncodePriority+0x30>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3b03      	subs	r3, #3
 80019b6:	e000      	b.n	80019ba <NVIC_EncodePriority+0x32>
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43da      	mvns	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	401a      	ands	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d0:	f04f 31ff 	mov.w	r1, #4294967295
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	43d9      	mvns	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	4313      	orrs	r3, r2
         );
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3724      	adds	r7, #36	@ 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a00:	d301      	bcc.n	8001a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00f      	b.n	8001a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a06:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <SysTick_Config+0x40>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0e:	210f      	movs	r1, #15
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f7ff ff8e 	bl	8001934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <SysTick_Config+0x40>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1e:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <SysTick_Config+0x40>)
 8001a20:	2207      	movs	r2, #7
 8001a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	e000e010 	.word	0xe000e010

08001a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff29 	bl	8001894 <__NVIC_SetPriorityGrouping>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5c:	f7ff ff3e 	bl	80018dc <__NVIC_GetPriorityGrouping>
 8001a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	6978      	ldr	r0, [r7, #20]
 8001a68:	f7ff ff8e 	bl	8001988 <NVIC_EncodePriority>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff5d 	bl	8001934 <__NVIC_SetPriority>
}
 8001a7a:	bf00      	nop
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff31 	bl	80018f8 <__NVIC_EnableIRQ>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffa2 	bl	80019f0 <SysTick_Config>
 8001aac:	4603      	mov	r3, r0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e037      	b.n	8001b3c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ae2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001ae6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f9bc 	bl	8001e9c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_DMA_Start_IT+0x20>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e04a      	b.n	8001bfa <HAL_DMA_Start_IT+0xb6>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d13a      	bne.n	8001bec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f950 	bl	8001e40 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d008      	beq.n	8001bba <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 020e 	orr.w	r2, r2, #14
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e00f      	b.n	8001bda <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 020a 	orr.w	r2, r2, #10
 8001bc8:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0204 	bic.w	r2, r2, #4
 8001bd8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0201 	orr.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e005      	b.n	8001bf8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e02e      	b.n	8001c72 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d008      	beq.n	8001c30 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2204      	movs	r2, #4
 8001c22:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e020      	b.n	8001c72 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 020e 	bic.w	r2, r2, #14
 8001c3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c58:	2101      	movs	r1, #1
 8001c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d005      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2204      	movs	r2, #4
 8001c98:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	e027      	b.n	8001cf0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 020e 	bic.w	r2, r2, #14
 8001cae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc8:	2101      	movs	r1, #1
 8001cca:	fa01 f202 	lsl.w	r2, r1, r2
 8001cce:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	4798      	blx	r3
    }
  }
  return status;
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	2204      	movs	r2, #4
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d024      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x72>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01f      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0320 	and.w	r3, r3, #32
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d107      	bne.n	8001d4a <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0204 	bic.w	r2, r2, #4
 8001d48:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d52:	2104      	movs	r1, #4
 8001d54:	fa01 f202 	lsl.w	r2, r1, r2
 8001d58:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d06a      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d6a:	e065      	b.n	8001e38 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d70:	2202      	movs	r2, #2
 8001d72:	409a      	lsls	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d02c      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xdc>
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d027      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10b      	bne.n	8001dac <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 020a 	bic.w	r2, r2, #10
 8001da2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db4:	2102      	movs	r1, #2
 8001db6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d035      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001dd4:	e030      	b.n	8001e38 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	2208      	movs	r2, #8
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d028      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x13e>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d023      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 020e 	bic.w	r2, r2, #14
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e08:	2101      	movs	r1, #1
 8001e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
    }
  }
}
 8001e36:	e7ff      	b.n	8001e38 <HAL_DMA_IRQHandler+0x13e>
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b10      	cmp	r3, #16
 8001e6c:	d108      	bne.n	8001e80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e7e:	e007      	b.n	8001e90 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	60da      	str	r2, [r3, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <DMA_CalcBaseAndBitshift+0x60>)
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d80f      	bhi.n	8001ed0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b12      	ldr	r3, [pc, #72]	@ (8001f00 <DMA_CalcBaseAndBitshift+0x64>)
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <DMA_CalcBaseAndBitshift+0x68>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	009a      	lsls	r2, r3, #2
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a0f      	ldr	r2, [pc, #60]	@ (8001f08 <DMA_CalcBaseAndBitshift+0x6c>)
 8001ecc:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001ece:	e00e      	b.n	8001eee <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f0c <DMA_CalcBaseAndBitshift+0x70>)
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <DMA_CalcBaseAndBitshift+0x68>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	009a      	lsls	r2, r3, #2
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a09      	ldr	r2, [pc, #36]	@ (8001f10 <DMA_CalcBaseAndBitshift+0x74>)
 8001eec:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40020407 	.word	0x40020407
 8001f00:	bffdfff8 	.word	0xbffdfff8
 8001f04:	cccccccd 	.word	0xcccccccd
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	bffdfbf8 	.word	0xbffdfbf8
 8001f10:	40020400 	.word	0x40020400

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f22:	e154      	b.n	80021ce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	2101      	movs	r1, #1
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	4013      	ands	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8146 	beq.w	80021c8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d005      	beq.n	8001f54 <HAL_GPIO_Init+0x40>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d130      	bne.n	8001fb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2203      	movs	r2, #3
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	f003 0201 	and.w	r2, r3, #1
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d017      	beq.n	8001ff2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	2203      	movs	r2, #3
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d123      	bne.n	8002046 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	08da      	lsrs	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3208      	adds	r2, #8
 8002006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	220f      	movs	r2, #15
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	691a      	ldr	r2, [r3, #16]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3208      	adds	r2, #8
 8002040:	6939      	ldr	r1, [r7, #16]
 8002042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	2203      	movs	r2, #3
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0203 	and.w	r2, r3, #3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 80a0 	beq.w	80021c8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002088:	4b58      	ldr	r3, [pc, #352]	@ (80021ec <HAL_GPIO_Init+0x2d8>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	4a57      	ldr	r2, [pc, #348]	@ (80021ec <HAL_GPIO_Init+0x2d8>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6193      	str	r3, [r2, #24]
 8002094:	4b55      	ldr	r3, [pc, #340]	@ (80021ec <HAL_GPIO_Init+0x2d8>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020a0:	4a53      	ldr	r2, [pc, #332]	@ (80021f0 <HAL_GPIO_Init+0x2dc>)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020ca:	d019      	beq.n	8002100 <HAL_GPIO_Init+0x1ec>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a49      	ldr	r2, [pc, #292]	@ (80021f4 <HAL_GPIO_Init+0x2e0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <HAL_GPIO_Init+0x1e8>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a48      	ldr	r2, [pc, #288]	@ (80021f8 <HAL_GPIO_Init+0x2e4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d00d      	beq.n	80020f8 <HAL_GPIO_Init+0x1e4>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a47      	ldr	r2, [pc, #284]	@ (80021fc <HAL_GPIO_Init+0x2e8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d007      	beq.n	80020f4 <HAL_GPIO_Init+0x1e0>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a46      	ldr	r2, [pc, #280]	@ (8002200 <HAL_GPIO_Init+0x2ec>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d101      	bne.n	80020f0 <HAL_GPIO_Init+0x1dc>
 80020ec:	2304      	movs	r3, #4
 80020ee:	e008      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020f0:	2305      	movs	r3, #5
 80020f2:	e006      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020f4:	2303      	movs	r3, #3
 80020f6:	e004      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e002      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 8002100:	2300      	movs	r3, #0
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	f002 0203 	and.w	r2, r2, #3
 8002108:	0092      	lsls	r2, r2, #2
 800210a:	4093      	lsls	r3, r2
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002112:	4937      	ldr	r1, [pc, #220]	@ (80021f0 <HAL_GPIO_Init+0x2dc>)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	3302      	adds	r3, #2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002120:	4b38      	ldr	r3, [pc, #224]	@ (8002204 <HAL_GPIO_Init+0x2f0>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002144:	4a2f      	ldr	r2, [pc, #188]	@ (8002204 <HAL_GPIO_Init+0x2f0>)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800214a:	4b2e      	ldr	r3, [pc, #184]	@ (8002204 <HAL_GPIO_Init+0x2f0>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	43db      	mvns	r3, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800216e:	4a25      	ldr	r2, [pc, #148]	@ (8002204 <HAL_GPIO_Init+0x2f0>)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002174:	4b23      	ldr	r3, [pc, #140]	@ (8002204 <HAL_GPIO_Init+0x2f0>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	43db      	mvns	r3, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002198:	4a1a      	ldr	r2, [pc, #104]	@ (8002204 <HAL_GPIO_Init+0x2f0>)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800219e:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_GPIO_Init+0x2f0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021c2:	4a10      	ldr	r2, [pc, #64]	@ (8002204 <HAL_GPIO_Init+0x2f0>)
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3301      	adds	r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	fa22 f303 	lsr.w	r3, r2, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f47f aea3 	bne.w	8001f24 <HAL_GPIO_Init+0x10>
  }
}
 80021de:	bf00      	nop
 80021e0:	bf00      	nop
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010000 	.word	0x40010000
 80021f4:	48000400 	.word	0x48000400
 80021f8:	48000800 	.word	0x48000800
 80021fc:	48000c00 	.word	0x48000c00
 8002200:	48001000 	.word	0x48001000
 8002204:	40010400 	.word	0x40010400

08002208 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	e001      	b.n	800222a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
 8002244:	4613      	mov	r3, r2
 8002246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002248:	787b      	ldrb	r3, [r7, #1]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002254:	e002      	b.n	800225c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002272:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800227e:	4a05      	ldr	r2, [pc, #20]	@ (8002294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fee0 	bl	800104c <HAL_GPIO_EXTI_Callback>
  }
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40010400 	.word	0x40010400

08002298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800229e:	af00      	add	r7, sp, #0
 80022a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022a8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d102      	bne.n	80022be <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f001 b823 	b.w	8003304 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 817d 	beq.w	80025ce <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022d4:	4bbc      	ldr	r3, [pc, #752]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d00c      	beq.n	80022fa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022e0:	4bb9      	ldr	r3, [pc, #740]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d15c      	bne.n	80023a6 <HAL_RCC_OscConfig+0x10e>
 80022ec:	4bb6      	ldr	r3, [pc, #728]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022f8:	d155      	bne.n	80023a6 <HAL_RCC_OscConfig+0x10e>
 80022fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022fe:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800230e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d102      	bne.n	800232c <HAL_RCC_OscConfig+0x94>
 8002326:	4ba8      	ldr	r3, [pc, #672]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	e015      	b.n	8002358 <HAL_RCC_OscConfig+0xc0>
 800232c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002330:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002340:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002344:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002348:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002354:	4b9c      	ldr	r3, [pc, #624]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 8002356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002358:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800235c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002360:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002364:	fa92 f2a2 	rbit	r2, r2
 8002368:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800236c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002370:	fab2 f282 	clz	r2, r2
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	f042 0220 	orr.w	r2, r2, #32
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	f002 021f 	and.w	r2, r2, #31
 8002380:	2101      	movs	r1, #1
 8002382:	fa01 f202 	lsl.w	r2, r1, r2
 8002386:	4013      	ands	r3, r2
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 811f 	beq.w	80025cc <HAL_RCC_OscConfig+0x334>
 800238e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002392:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	f040 8116 	bne.w	80025cc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f000 bfaf 	b.w	8003304 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x12e>
 80023b8:	4b83      	ldr	r3, [pc, #524]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a82      	ldr	r2, [pc, #520]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 80023be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	e036      	b.n	8002434 <HAL_RCC_OscConfig+0x19c>
 80023c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x158>
 80023d6:	4b7c      	ldr	r3, [pc, #496]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a7b      	ldr	r2, [pc, #492]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 80023dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b79      	ldr	r3, [pc, #484]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a78      	ldr	r2, [pc, #480]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 80023e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e021      	b.n	8002434 <HAL_RCC_OscConfig+0x19c>
 80023f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0x184>
 8002402:	4b71      	ldr	r3, [pc, #452]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a70      	ldr	r2, [pc, #448]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 8002408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	4b6e      	ldr	r3, [pc, #440]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a6d      	ldr	r2, [pc, #436]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e00b      	b.n	8002434 <HAL_RCC_OscConfig+0x19c>
 800241c:	4b6a      	ldr	r3, [pc, #424]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a69      	ldr	r2, [pc, #420]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 8002422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b67      	ldr	r3, [pc, #412]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a66      	ldr	r2, [pc, #408]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 800242e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002432:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002434:	4b64      	ldr	r3, [pc, #400]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 8002436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002438:	f023 020f 	bic.w	r2, r3, #15
 800243c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002440:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	495f      	ldr	r1, [pc, #380]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 800244a:	4313      	orrs	r3, r2
 800244c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800244e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002452:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d059      	beq.n	8002512 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7ff f9e9 	bl	8001834 <HAL_GetTick>
 8002462:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	e00a      	b.n	800247e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002468:	f7ff f9e4 	bl	8001834 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b64      	cmp	r3, #100	@ 0x64
 8002476:	d902      	bls.n	800247e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	f000 bf43 	b.w	8003304 <HAL_RCC_OscConfig+0x106c>
 800247e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002482:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002492:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d102      	bne.n	80024b0 <HAL_RCC_OscConfig+0x218>
 80024aa:	4b47      	ldr	r3, [pc, #284]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	e015      	b.n	80024dc <HAL_RCC_OscConfig+0x244>
 80024b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024b4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80024c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024c8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80024cc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80024d8:	4b3b      	ldr	r3, [pc, #236]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 80024da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024e0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80024e4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80024e8:	fa92 f2a2 	rbit	r2, r2
 80024ec:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80024f0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80024f4:	fab2 f282 	clz	r2, r2
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	f042 0220 	orr.w	r2, r2, #32
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	f002 021f 	and.w	r2, r2, #31
 8002504:	2101      	movs	r1, #1
 8002506:	fa01 f202 	lsl.w	r2, r1, r2
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0ab      	beq.n	8002468 <HAL_RCC_OscConfig+0x1d0>
 8002510:	e05d      	b.n	80025ce <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002512:	f7ff f98f 	bl	8001834 <HAL_GetTick>
 8002516:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	e00a      	b.n	8002532 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251c:	f7ff f98a 	bl	8001834 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b64      	cmp	r3, #100	@ 0x64
 800252a:	d902      	bls.n	8002532 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	f000 bee9 	b.w	8003304 <HAL_RCC_OscConfig+0x106c>
 8002532:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002536:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002546:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d102      	bne.n	8002564 <HAL_RCC_OscConfig+0x2cc>
 800255e:	4b1a      	ldr	r3, [pc, #104]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	e015      	b.n	8002590 <HAL_RCC_OscConfig+0x2f8>
 8002564:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002568:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002578:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800257c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002580:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800258c:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <HAL_RCC_OscConfig+0x330>)
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002594:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002598:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800259c:	fa92 f2a2 	rbit	r2, r2
 80025a0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80025a4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f002 021f 	and.w	r2, r2, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1ab      	bne.n	800251c <HAL_RCC_OscConfig+0x284>
 80025c4:	e003      	b.n	80025ce <HAL_RCC_OscConfig+0x336>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 817d 	beq.w	80028de <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025e4:	4ba6      	ldr	r3, [pc, #664]	@ (8002880 <HAL_RCC_OscConfig+0x5e8>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00b      	beq.n	8002608 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025f0:	4ba3      	ldr	r3, [pc, #652]	@ (8002880 <HAL_RCC_OscConfig+0x5e8>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d172      	bne.n	80026e2 <HAL_RCC_OscConfig+0x44a>
 80025fc:	4ba0      	ldr	r3, [pc, #640]	@ (8002880 <HAL_RCC_OscConfig+0x5e8>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d16c      	bne.n	80026e2 <HAL_RCC_OscConfig+0x44a>
 8002608:	2302      	movs	r3, #2
 800260a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800261a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	095b      	lsrs	r3, r3, #5
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b01      	cmp	r3, #1
 8002630:	d102      	bne.n	8002638 <HAL_RCC_OscConfig+0x3a0>
 8002632:	4b93      	ldr	r3, [pc, #588]	@ (8002880 <HAL_RCC_OscConfig+0x5e8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	e013      	b.n	8002660 <HAL_RCC_OscConfig+0x3c8>
 8002638:	2302      	movs	r3, #2
 800263a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800264a:	2302      	movs	r3, #2
 800264c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002650:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800265c:	4b88      	ldr	r3, [pc, #544]	@ (8002880 <HAL_RCC_OscConfig+0x5e8>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	2202      	movs	r2, #2
 8002662:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002666:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800266a:	fa92 f2a2 	rbit	r2, r2
 800266e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002672:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002676:	fab2 f282 	clz	r2, r2
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	f042 0220 	orr.w	r2, r2, #32
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	f002 021f 	and.w	r2, r2, #31
 8002686:	2101      	movs	r1, #1
 8002688:	fa01 f202 	lsl.w	r2, r1, r2
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCC_OscConfig+0x410>
 8002692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002696:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d002      	beq.n	80026a8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f000 be2e 	b.w	8003304 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a8:	4b75      	ldr	r3, [pc, #468]	@ (8002880 <HAL_RCC_OscConfig+0x5e8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	21f8      	movs	r1, #248	@ 0xf8
 80026be:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80026c6:	fa91 f1a1 	rbit	r1, r1
 80026ca:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80026ce:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80026d2:	fab1 f181 	clz	r1, r1
 80026d6:	b2c9      	uxtb	r1, r1
 80026d8:	408b      	lsls	r3, r1
 80026da:	4969      	ldr	r1, [pc, #420]	@ (8002880 <HAL_RCC_OscConfig+0x5e8>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e0:	e0fd      	b.n	80028de <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 8088 	beq.w	8002804 <HAL_RCC_OscConfig+0x56c>
 80026f4:	2301      	movs	r3, #1
 80026f6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002706:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002714:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	461a      	mov	r2, r3
 800271c:	2301      	movs	r3, #1
 800271e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7ff f888 	bl	8001834 <HAL_GetTick>
 8002724:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800272a:	f7ff f883 	bl	8001834 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d902      	bls.n	8002740 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	f000 bde2 	b.w	8003304 <HAL_RCC_OscConfig+0x106c>
 8002740:	2302      	movs	r3, #2
 8002742:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002752:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d102      	bne.n	8002770 <HAL_RCC_OscConfig+0x4d8>
 800276a:	4b45      	ldr	r3, [pc, #276]	@ (8002880 <HAL_RCC_OscConfig+0x5e8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	e013      	b.n	8002798 <HAL_RCC_OscConfig+0x500>
 8002770:	2302      	movs	r3, #2
 8002772:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002782:	2302      	movs	r3, #2
 8002784:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002788:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002794:	4b3a      	ldr	r3, [pc, #232]	@ (8002880 <HAL_RCC_OscConfig+0x5e8>)
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	2202      	movs	r2, #2
 800279a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800279e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80027a2:	fa92 f2a2 	rbit	r2, r2
 80027a6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80027aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80027ae:	fab2 f282 	clz	r2, r2
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	f042 0220 	orr.w	r2, r2, #32
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	f002 021f 	and.w	r2, r2, #31
 80027be:	2101      	movs	r1, #1
 80027c0:	fa01 f202 	lsl.w	r2, r1, r2
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0af      	beq.n	800272a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002880 <HAL_RCC_OscConfig+0x5e8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	21f8      	movs	r1, #248	@ 0xf8
 80027e0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80027e8:	fa91 f1a1 	rbit	r1, r1
 80027ec:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80027f0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80027f4:	fab1 f181 	clz	r1, r1
 80027f8:	b2c9      	uxtb	r1, r1
 80027fa:	408b      	lsls	r3, r1
 80027fc:	4920      	ldr	r1, [pc, #128]	@ (8002880 <HAL_RCC_OscConfig+0x5e8>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]
 8002802:	e06c      	b.n	80028de <HAL_RCC_OscConfig+0x646>
 8002804:	2301      	movs	r3, #1
 8002806:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002816:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002824:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	461a      	mov	r2, r3
 800282c:	2300      	movs	r3, #0
 800282e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7ff f800 	bl	8001834 <HAL_GetTick>
 8002834:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283a:	f7fe fffb 	bl	8001834 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d902      	bls.n	8002850 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	f000 bd5a 	b.w	8003304 <HAL_RCC_OscConfig+0x106c>
 8002850:	2302      	movs	r3, #2
 8002852:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002862:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d104      	bne.n	8002884 <HAL_RCC_OscConfig+0x5ec>
 800287a:	4b01      	ldr	r3, [pc, #4]	@ (8002880 <HAL_RCC_OscConfig+0x5e8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	e015      	b.n	80028ac <HAL_RCC_OscConfig+0x614>
 8002880:	40021000 	.word	0x40021000
 8002884:	2302      	movs	r3, #2
 8002886:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002896:	2302      	movs	r3, #2
 8002898:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800289c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80028a8:	4bc8      	ldr	r3, [pc, #800]	@ (8002bcc <HAL_RCC_OscConfig+0x934>)
 80028aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ac:	2202      	movs	r2, #2
 80028ae:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80028b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80028b6:	fa92 f2a2 	rbit	r2, r2
 80028ba:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80028be:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80028c2:	fab2 f282 	clz	r2, r2
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	f042 0220 	orr.w	r2, r2, #32
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	f002 021f 	and.w	r2, r2, #31
 80028d2:	2101      	movs	r1, #1
 80028d4:	fa01 f202 	lsl.w	r2, r1, r2
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ad      	bne.n	800283a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8110 	beq.w	8002b14 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d079      	beq.n	80029f8 <HAL_RCC_OscConfig+0x760>
 8002904:	2301      	movs	r3, #1
 8002906:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002916:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	4bab      	ldr	r3, [pc, #684]	@ (8002bd0 <HAL_RCC_OscConfig+0x938>)
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	461a      	mov	r2, r3
 800292a:	2301      	movs	r3, #1
 800292c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292e:	f7fe ff81 	bl	8001834 <HAL_GetTick>
 8002932:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002938:	f7fe ff7c 	bl	8001834 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d902      	bls.n	800294e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	f000 bcdb 	b.w	8003304 <HAL_RCC_OscConfig+0x106c>
 800294e:	2302      	movs	r3, #2
 8002950:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002964:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002968:	2202      	movs	r2, #2
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002970:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	fa93 f2a3 	rbit	r2, r3
 800297a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800298c:	2202      	movs	r2, #2
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	fa93 f2a3 	rbit	r2, r3
 800299e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80029a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a8:	4b88      	ldr	r3, [pc, #544]	@ (8002bcc <HAL_RCC_OscConfig+0x934>)
 80029aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029b4:	2102      	movs	r1, #2
 80029b6:	6019      	str	r1, [r3, #0]
 80029b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	fa93 f1a3 	rbit	r1, r3
 80029c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029ce:	6019      	str	r1, [r3, #0]
  return result;
 80029d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0a0      	beq.n	8002938 <HAL_RCC_OscConfig+0x6a0>
 80029f6:	e08d      	b.n	8002b14 <HAL_RCC_OscConfig+0x87c>
 80029f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a08:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	fa93 f2a3 	rbit	r2, r3
 8002a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a16:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a1a:	601a      	str	r2, [r3, #0]
  return result;
 8002a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a20:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a24:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4b68      	ldr	r3, [pc, #416]	@ (8002bd0 <HAL_RCC_OscConfig+0x938>)
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	461a      	mov	r2, r3
 8002a36:	2300      	movs	r3, #0
 8002a38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe fefb 	bl	8001834 <HAL_GetTick>
 8002a3e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a44:	f7fe fef6 	bl	8001834 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d902      	bls.n	8002a5a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	f000 bc55 	b.w	8003304 <HAL_RCC_OscConfig+0x106c>
 8002a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a62:	2202      	movs	r2, #2
 8002a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	fa93 f2a3 	rbit	r2, r3
 8002a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a78:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a82:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a86:	2202      	movs	r2, #2
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	fa93 f2a3 	rbit	r2, r3
 8002a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002aaa:	2202      	movs	r2, #2
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	fa93 f2a3 	rbit	r2, r3
 8002abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002ac4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac6:	4b41      	ldr	r3, [pc, #260]	@ (8002bcc <HAL_RCC_OscConfig+0x934>)
 8002ac8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ace:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	6019      	str	r1, [r3, #0]
 8002ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ada:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	fa93 f1a3 	rbit	r1, r3
 8002ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002aec:	6019      	str	r1, [r3, #0]
  return result;
 8002aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	fab3 f383 	clz	r3, r3
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	2101      	movs	r1, #1
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d197      	bne.n	8002a44 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 81a1 	beq.w	8002e6c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b30:	4b26      	ldr	r3, [pc, #152]	@ (8002bcc <HAL_RCC_OscConfig+0x934>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d116      	bne.n	8002b6a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3c:	4b23      	ldr	r3, [pc, #140]	@ (8002bcc <HAL_RCC_OscConfig+0x934>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	4a22      	ldr	r2, [pc, #136]	@ (8002bcc <HAL_RCC_OscConfig+0x934>)
 8002b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b46:	61d3      	str	r3, [r2, #28]
 8002b48:	4b20      	ldr	r3, [pc, #128]	@ (8002bcc <HAL_RCC_OscConfig+0x934>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b54:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002b62:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b64:	2301      	movs	r3, #1
 8002b66:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd4 <HAL_RCC_OscConfig+0x93c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d11a      	bne.n	8002bac <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b76:	4b17      	ldr	r3, [pc, #92]	@ (8002bd4 <HAL_RCC_OscConfig+0x93c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a16      	ldr	r2, [pc, #88]	@ (8002bd4 <HAL_RCC_OscConfig+0x93c>)
 8002b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b82:	f7fe fe57 	bl	8001834 <HAL_GetTick>
 8002b86:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	e009      	b.n	8002ba0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8c:	f7fe fe52 	bl	8001834 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b64      	cmp	r3, #100	@ 0x64
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e3b1      	b.n	8003304 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <HAL_RCC_OscConfig+0x93c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0ef      	beq.n	8002b8c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d10d      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x940>
 8002bbc:	4b03      	ldr	r3, [pc, #12]	@ (8002bcc <HAL_RCC_OscConfig+0x934>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	4a02      	ldr	r2, [pc, #8]	@ (8002bcc <HAL_RCC_OscConfig+0x934>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6213      	str	r3, [r2, #32]
 8002bc8:	e03c      	b.n	8002c44 <HAL_RCC_OscConfig+0x9ac>
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	10908120 	.word	0x10908120
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bdc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10c      	bne.n	8002c02 <HAL_RCC_OscConfig+0x96a>
 8002be8:	4bc1      	ldr	r3, [pc, #772]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4ac0      	ldr	r2, [pc, #768]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	6213      	str	r3, [r2, #32]
 8002bf4:	4bbe      	ldr	r3, [pc, #760]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4abd      	ldr	r2, [pc, #756]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002bfa:	f023 0304 	bic.w	r3, r3, #4
 8002bfe:	6213      	str	r3, [r2, #32]
 8002c00:	e020      	b.n	8002c44 <HAL_RCC_OscConfig+0x9ac>
 8002c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b05      	cmp	r3, #5
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x994>
 8002c12:	4bb7      	ldr	r3, [pc, #732]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	4ab6      	ldr	r2, [pc, #728]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002c18:	f043 0304 	orr.w	r3, r3, #4
 8002c1c:	6213      	str	r3, [r2, #32]
 8002c1e:	4bb4      	ldr	r3, [pc, #720]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	4ab3      	ldr	r2, [pc, #716]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6213      	str	r3, [r2, #32]
 8002c2a:	e00b      	b.n	8002c44 <HAL_RCC_OscConfig+0x9ac>
 8002c2c:	4bb0      	ldr	r3, [pc, #704]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	4aaf      	ldr	r2, [pc, #700]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	6213      	str	r3, [r2, #32]
 8002c38:	4bad      	ldr	r3, [pc, #692]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	4aac      	ldr	r2, [pc, #688]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002c3e:	f023 0304 	bic.w	r3, r3, #4
 8002c42:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8081 	beq.w	8002d58 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c56:	f7fe fded 	bl	8001834 <HAL_GetTick>
 8002c5a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c60:	f7fe fde8 	bl	8001834 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e345      	b.n	8003304 <HAL_RCC_OscConfig+0x106c>
 8002c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c80:	2202      	movs	r2, #2
 8002c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c88:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	fa93 f2a3 	rbit	r2, r3
 8002c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c96:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	fa93 f2a3 	rbit	r2, r3
 8002cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cba:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002cbe:	601a      	str	r2, [r3, #0]
  return result;
 8002cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002cc8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	f043 0302 	orr.w	r3, r3, #2
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d102      	bne.n	8002ce4 <HAL_RCC_OscConfig+0xa4c>
 8002cde:	4b84      	ldr	r3, [pc, #528]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	e013      	b.n	8002d0c <HAL_RCC_OscConfig+0xa74>
 8002ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002cec:	2202      	movs	r2, #2
 8002cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	fa93 f2a3 	rbit	r2, r3
 8002cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d02:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	4b79      	ldr	r3, [pc, #484]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d10:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002d14:	2102      	movs	r1, #2
 8002d16:	6011      	str	r1, [r2, #0]
 8002d18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d1c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	fa92 f1a2 	rbit	r1, r2
 8002d26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d2a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d2e:	6011      	str	r1, [r2, #0]
  return result;
 8002d30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002d34:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	fab2 f282 	clz	r2, r2
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f002 021f 	and.w	r2, r2, #31
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d084      	beq.n	8002c60 <HAL_RCC_OscConfig+0x9c8>
 8002d56:	e07f      	b.n	8002e58 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d58:	f7fe fd6c 	bl	8001834 <HAL_GetTick>
 8002d5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d60:	e00b      	b.n	8002d7a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d62:	f7fe fd67 	bl	8001834 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e2c4      	b.n	8003304 <HAL_RCC_OscConfig+0x106c>
 8002d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002d82:	2202      	movs	r2, #2
 8002d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	fa93 f2a3 	rbit	r2, r3
 8002d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d98:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002da6:	2202      	movs	r2, #2
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dae:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	fa93 f2a3 	rbit	r2, r3
 8002db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002dc0:	601a      	str	r2, [r3, #0]
  return result;
 8002dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002dca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	f043 0302 	orr.w	r3, r3, #2
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d102      	bne.n	8002de6 <HAL_RCC_OscConfig+0xb4e>
 8002de0:	4b43      	ldr	r3, [pc, #268]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	e013      	b.n	8002e0e <HAL_RCC_OscConfig+0xb76>
 8002de6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dea:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002dee:	2202      	movs	r2, #2
 8002df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	fa93 f2a3 	rbit	r2, r3
 8002e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e04:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	4b39      	ldr	r3, [pc, #228]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e12:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002e16:	2102      	movs	r1, #2
 8002e18:	6011      	str	r1, [r2, #0]
 8002e1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e1e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	fa92 f1a2 	rbit	r1, r2
 8002e28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e2c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e30:	6011      	str	r1, [r2, #0]
  return result;
 8002e32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e36:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	fab2 f282 	clz	r2, r2
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	f002 021f 	and.w	r2, r2, #31
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d184      	bne.n	8002d62 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e58:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e60:	4b23      	ldr	r3, [pc, #140]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	4a22      	ldr	r2, [pc, #136]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002e66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e6a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8242 	beq.w	8003302 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef0 <HAL_RCC_OscConfig+0xc58>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	f000 8213 	beq.w	80032b2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	f040 8162 	bne.w	8003162 <HAL_RCC_OscConfig+0xeca>
 8002e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002ea6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f2a3 	rbit	r2, r3
 8002eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ebe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ec2:	601a      	str	r2, [r3, #0]
  return result;
 8002ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002ecc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ed8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	461a      	mov	r2, r3
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7fe fca6 	bl	8001834 <HAL_GetTick>
 8002ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eec:	e00c      	b.n	8002f08 <HAL_RCC_OscConfig+0xc70>
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe fc9e 	bl	8001834 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e1fd      	b.n	8003304 <HAL_RCC_OscConfig+0x106c>
 8002f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	fa93 f2a3 	rbit	r2, r3
 8002f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f28:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f2c:	601a      	str	r2, [r3, #0]
  return result;
 8002f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f32:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002f36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d102      	bne.n	8002f52 <HAL_RCC_OscConfig+0xcba>
 8002f4c:	4bb0      	ldr	r3, [pc, #704]	@ (8003210 <HAL_RCC_OscConfig+0xf78>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	e027      	b.n	8002fa2 <HAL_RCC_OscConfig+0xd0a>
 8002f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f56:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f64:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	fa93 f2a3 	rbit	r2, r3
 8002f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f72:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	fa93 f2a3 	rbit	r2, r3
 8002f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f98:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	4b9c      	ldr	r3, [pc, #624]	@ (8003210 <HAL_RCC_OscConfig+0xf78>)
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fa6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002faa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002fae:	6011      	str	r1, [r2, #0]
 8002fb0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fb4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	fa92 f1a2 	rbit	r1, r2
 8002fbe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fc2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002fc6:	6011      	str	r1, [r2, #0]
  return result;
 8002fc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fcc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	fab2 f282 	clz	r2, r2
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	f042 0220 	orr.w	r2, r2, #32
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	f002 021f 	and.w	r2, r2, #31
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d182      	bne.n	8002ef4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fee:	4b88      	ldr	r3, [pc, #544]	@ (8003210 <HAL_RCC_OscConfig+0xf78>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003006:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	430b      	orrs	r3, r1
 8003010:	497f      	ldr	r1, [pc, #508]	@ (8003210 <HAL_RCC_OscConfig+0xf78>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
 8003016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800301e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003028:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	fa93 f2a3 	rbit	r2, r3
 8003032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003036:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800303a:	601a      	str	r2, [r3, #0]
  return result;
 800303c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003040:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003044:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003050:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	461a      	mov	r2, r3
 8003058:	2301      	movs	r3, #1
 800305a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe fbea 	bl	8001834 <HAL_GetTick>
 8003060:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003064:	e009      	b.n	800307a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003066:	f7fe fbe5 	bl	8001834 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e144      	b.n	8003304 <HAL_RCC_OscConfig+0x106c>
 800307a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003082:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	fa93 f2a3 	rbit	r2, r3
 8003096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800309e:	601a      	str	r2, [r3, #0]
  return result;
 80030a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80030a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d102      	bne.n	80030c4 <HAL_RCC_OscConfig+0xe2c>
 80030be:	4b54      	ldr	r3, [pc, #336]	@ (8003210 <HAL_RCC_OscConfig+0xf78>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	e027      	b.n	8003114 <HAL_RCC_OscConfig+0xe7c>
 80030c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80030cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	fa93 f2a3 	rbit	r2, r3
 80030e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ee:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80030f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	fa93 f2a3 	rbit	r2, r3
 8003106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	4b3f      	ldr	r3, [pc, #252]	@ (8003210 <HAL_RCC_OscConfig+0xf78>)
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003118:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800311c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003120:	6011      	str	r1, [r2, #0]
 8003122:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003126:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	fa92 f1a2 	rbit	r1, r2
 8003130:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003134:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003138:	6011      	str	r1, [r2, #0]
  return result;
 800313a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800313e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	fab2 f282 	clz	r2, r2
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	f042 0220 	orr.w	r2, r2, #32
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	f002 021f 	and.w	r2, r2, #31
 8003154:	2101      	movs	r1, #1
 8003156:	fa01 f202 	lsl.w	r2, r1, r2
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d082      	beq.n	8003066 <HAL_RCC_OscConfig+0xdce>
 8003160:	e0cf      	b.n	8003302 <HAL_RCC_OscConfig+0x106a>
 8003162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003166:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800316a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800316e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003174:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	fa93 f2a3 	rbit	r2, r3
 800317e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003182:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003186:	601a      	str	r2, [r3, #0]
  return result;
 8003188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003190:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800319c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	461a      	mov	r2, r3
 80031a4:	2300      	movs	r3, #0
 80031a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7fe fb44 	bl	8001834 <HAL_GetTick>
 80031ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b0:	e009      	b.n	80031c6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b2:	f7fe fb3f 	bl	8001834 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e09e      	b.n	8003304 <HAL_RCC_OscConfig+0x106c>
 80031c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ca:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80031ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	fa93 f2a3 	rbit	r2, r3
 80031e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80031ea:	601a      	str	r2, [r3, #0]
  return result;
 80031ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80031f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f6:	fab3 f383 	clz	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b01      	cmp	r3, #1
 8003208:	d104      	bne.n	8003214 <HAL_RCC_OscConfig+0xf7c>
 800320a:	4b01      	ldr	r3, [pc, #4]	@ (8003210 <HAL_RCC_OscConfig+0xf78>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	e029      	b.n	8003264 <HAL_RCC_OscConfig+0xfcc>
 8003210:	40021000 	.word	0x40021000
 8003214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003218:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800321c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003226:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	fa93 f2a3 	rbit	r2, r3
 8003230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003234:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003242:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	fa93 f2a3 	rbit	r2, r3
 8003256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	4b2b      	ldr	r3, [pc, #172]	@ (8003310 <HAL_RCC_OscConfig+0x1078>)
 8003262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003264:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003268:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800326c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003270:	6011      	str	r1, [r2, #0]
 8003272:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003276:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	fa92 f1a2 	rbit	r1, r2
 8003280:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003284:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003288:	6011      	str	r1, [r2, #0]
  return result;
 800328a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800328e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	fab2 f282 	clz	r2, r2
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	f042 0220 	orr.w	r2, r2, #32
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	f002 021f 	and.w	r2, r2, #31
 80032a4:	2101      	movs	r1, #1
 80032a6:	fa01 f202 	lsl.w	r2, r1, r2
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d180      	bne.n	80031b2 <HAL_RCC_OscConfig+0xf1a>
 80032b0:	e027      	b.n	8003302 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e01e      	b.n	8003304 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032c6:	4b12      	ldr	r3, [pc, #72]	@ (8003310 <HAL_RCC_OscConfig+0x1078>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80032d2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d10b      	bne.n	80032fe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80032e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80032ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000

08003314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b09e      	sub	sp, #120	@ 0x78
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e162      	b.n	80035f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800332c:	4b90      	ldr	r3, [pc, #576]	@ (8003570 <HAL_RCC_ClockConfig+0x25c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d910      	bls.n	800335c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333a:	4b8d      	ldr	r3, [pc, #564]	@ (8003570 <HAL_RCC_ClockConfig+0x25c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 0207 	bic.w	r2, r3, #7
 8003342:	498b      	ldr	r1, [pc, #556]	@ (8003570 <HAL_RCC_ClockConfig+0x25c>)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	4313      	orrs	r3, r2
 8003348:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334a:	4b89      	ldr	r3, [pc, #548]	@ (8003570 <HAL_RCC_ClockConfig+0x25c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e14a      	b.n	80035f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003368:	4b82      	ldr	r3, [pc, #520]	@ (8003574 <HAL_RCC_ClockConfig+0x260>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	497f      	ldr	r1, [pc, #508]	@ (8003574 <HAL_RCC_ClockConfig+0x260>)
 8003376:	4313      	orrs	r3, r2
 8003378:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80dc 	beq.w	8003540 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d13c      	bne.n	800340a <HAL_RCC_ClockConfig+0xf6>
 8003390:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003394:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800339e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d102      	bne.n	80033ba <HAL_RCC_ClockConfig+0xa6>
 80033b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003574 <HAL_RCC_ClockConfig+0x260>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	e00f      	b.n	80033da <HAL_RCC_ClockConfig+0xc6>
 80033ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033c2:	fa93 f3a3 	rbit	r3, r3
 80033c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80033c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80033ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033d0:	fa93 f3a3 	rbit	r3, r3
 80033d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033d6:	4b67      	ldr	r3, [pc, #412]	@ (8003574 <HAL_RCC_ClockConfig+0x260>)
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80033de:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033e2:	fa92 f2a2 	rbit	r2, r2
 80033e6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80033e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80033ea:	fab2 f282 	clz	r2, r2
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	f042 0220 	orr.w	r2, r2, #32
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	f002 021f 	and.w	r2, r2, #31
 80033fa:	2101      	movs	r1, #1
 80033fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d17b      	bne.n	80034fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e0f3      	b.n	80035f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d13c      	bne.n	800348c <HAL_RCC_ClockConfig+0x178>
 8003412:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003416:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b01      	cmp	r3, #1
 8003434:	d102      	bne.n	800343c <HAL_RCC_ClockConfig+0x128>
 8003436:	4b4f      	ldr	r3, [pc, #316]	@ (8003574 <HAL_RCC_ClockConfig+0x260>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	e00f      	b.n	800345c <HAL_RCC_ClockConfig+0x148>
 800343c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003440:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	647b      	str	r3, [r7, #68]	@ 0x44
 800344a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800344e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003458:	4b46      	ldr	r3, [pc, #280]	@ (8003574 <HAL_RCC_ClockConfig+0x260>)
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003460:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003462:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003464:	fa92 f2a2 	rbit	r2, r2
 8003468:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800346a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800346c:	fab2 f282 	clz	r2, r2
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	f042 0220 	orr.w	r2, r2, #32
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	f002 021f 	and.w	r2, r2, #31
 800347c:	2101      	movs	r1, #1
 800347e:	fa01 f202 	lsl.w	r2, r1, r2
 8003482:	4013      	ands	r3, r2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d13a      	bne.n	80034fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0b2      	b.n	80035f2 <HAL_RCC_ClockConfig+0x2de>
 800348c:	2302      	movs	r3, #2
 800348e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	095b      	lsrs	r3, r3, #5
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d102      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x1a0>
 80034ae:	4b31      	ldr	r3, [pc, #196]	@ (8003574 <HAL_RCC_ClockConfig+0x260>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	e00d      	b.n	80034d0 <HAL_RCC_ClockConfig+0x1bc>
 80034b4:	2302      	movs	r3, #2
 80034b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
 80034c0:	2302      	movs	r3, #2
 80034c2:	623b      	str	r3, [r7, #32]
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	4b29      	ldr	r3, [pc, #164]	@ (8003574 <HAL_RCC_ClockConfig+0x260>)
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	2202      	movs	r2, #2
 80034d2:	61ba      	str	r2, [r7, #24]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	fa92 f2a2 	rbit	r2, r2
 80034da:	617a      	str	r2, [r7, #20]
  return result;
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	fab2 f282 	clz	r2, r2
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	f042 0220 	orr.w	r2, r2, #32
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	f002 021f 	and.w	r2, r2, #31
 80034ee:	2101      	movs	r1, #1
 80034f0:	fa01 f202 	lsl.w	r2, r1, r2
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e079      	b.n	80035f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003574 <HAL_RCC_ClockConfig+0x260>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f023 0203 	bic.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	491a      	ldr	r1, [pc, #104]	@ (8003574 <HAL_RCC_ClockConfig+0x260>)
 800350c:	4313      	orrs	r3, r2
 800350e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003510:	f7fe f990 	bl	8001834 <HAL_GetTick>
 8003514:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	e00a      	b.n	800352e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003518:	f7fe f98c 	bl	8001834 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e061      	b.n	80035f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <HAL_RCC_ClockConfig+0x260>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 020c 	and.w	r2, r3, #12
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	429a      	cmp	r2, r3
 800353e:	d1eb      	bne.n	8003518 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003540:	4b0b      	ldr	r3, [pc, #44]	@ (8003570 <HAL_RCC_ClockConfig+0x25c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d214      	bcs.n	8003578 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b08      	ldr	r3, [pc, #32]	@ (8003570 <HAL_RCC_ClockConfig+0x25c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f023 0207 	bic.w	r2, r3, #7
 8003556:	4906      	ldr	r1, [pc, #24]	@ (8003570 <HAL_RCC_ClockConfig+0x25c>)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355e:	4b04      	ldr	r3, [pc, #16]	@ (8003570 <HAL_RCC_ClockConfig+0x25c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d005      	beq.n	8003578 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e040      	b.n	80035f2 <HAL_RCC_ClockConfig+0x2de>
 8003570:	40022000 	.word	0x40022000
 8003574:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003584:	4b1d      	ldr	r3, [pc, #116]	@ (80035fc <HAL_RCC_ClockConfig+0x2e8>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	491a      	ldr	r1, [pc, #104]	@ (80035fc <HAL_RCC_ClockConfig+0x2e8>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035a2:	4b16      	ldr	r3, [pc, #88]	@ (80035fc <HAL_RCC_ClockConfig+0x2e8>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4912      	ldr	r1, [pc, #72]	@ (80035fc <HAL_RCC_ClockConfig+0x2e8>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035b6:	f000 f829 	bl	800360c <HAL_RCC_GetSysClockFreq>
 80035ba:	4601      	mov	r1, r0
 80035bc:	4b0f      	ldr	r3, [pc, #60]	@ (80035fc <HAL_RCC_ClockConfig+0x2e8>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035c4:	22f0      	movs	r2, #240	@ 0xf0
 80035c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	fa92 f2a2 	rbit	r2, r2
 80035ce:	60fa      	str	r2, [r7, #12]
  return result;
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	fab2 f282 	clz	r2, r2
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	40d3      	lsrs	r3, r2
 80035da:	4a09      	ldr	r2, [pc, #36]	@ (8003600 <HAL_RCC_ClockConfig+0x2ec>)
 80035dc:	5cd3      	ldrb	r3, [r2, r3]
 80035de:	fa21 f303 	lsr.w	r3, r1, r3
 80035e2:	4a08      	ldr	r2, [pc, #32]	@ (8003604 <HAL_RCC_ClockConfig+0x2f0>)
 80035e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035e6:	4b08      	ldr	r3, [pc, #32]	@ (8003608 <HAL_RCC_ClockConfig+0x2f4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe f8de 	bl	80017ac <HAL_InitTick>
  
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3778      	adds	r7, #120	@ 0x78
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000
 8003600:	08009eac 	.word	0x08009eac
 8003604:	20000010 	.word	0x20000010
 8003608:	20000014 	.word	0x20000014

0800360c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	2300      	movs	r3, #0
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	2300      	movs	r3, #0
 8003620:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003626:	4b1e      	ldr	r3, [pc, #120]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b04      	cmp	r3, #4
 8003634:	d002      	beq.n	800363c <HAL_RCC_GetSysClockFreq+0x30>
 8003636:	2b08      	cmp	r3, #8
 8003638:	d003      	beq.n	8003642 <HAL_RCC_GetSysClockFreq+0x36>
 800363a:	e026      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800363c:	4b19      	ldr	r3, [pc, #100]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800363e:	613b      	str	r3, [r7, #16]
      break;
 8003640:	e026      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	0c9b      	lsrs	r3, r3, #18
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	4a17      	ldr	r2, [pc, #92]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800364c:	5cd3      	ldrb	r3, [r2, r3]
 800364e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003650:	4b13      	ldr	r3, [pc, #76]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	4a14      	ldr	r2, [pc, #80]	@ (80036ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800365a:	5cd3      	ldrb	r3, [r2, r3]
 800365c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003668:	4a0e      	ldr	r2, [pc, #56]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	fb02 f303 	mul.w	r3, r2, r3
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	e004      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a0c      	ldr	r2, [pc, #48]	@ (80036b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	613b      	str	r3, [r7, #16]
      break;
 8003688:	e002      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800368a:	4b06      	ldr	r3, [pc, #24]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800368c:	613b      	str	r3, [r7, #16]
      break;
 800368e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003690:	693b      	ldr	r3, [r7, #16]
}
 8003692:	4618      	mov	r0, r3
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	007a1200 	.word	0x007a1200
 80036a8:	08009ec4 	.word	0x08009ec4
 80036ac:	08009ed4 	.word	0x08009ed4
 80036b0:	003d0900 	.word	0x003d0900

080036b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b8:	4b03      	ldr	r3, [pc, #12]	@ (80036c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000010 	.word	0x20000010

080036cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80036d2:	f7ff ffef 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 80036d6:	4601      	mov	r1, r0
 80036d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036e0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80036e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	fa92 f2a2 	rbit	r2, r2
 80036ec:	603a      	str	r2, [r7, #0]
  return result;
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	fab2 f282 	clz	r2, r2
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	40d3      	lsrs	r3, r2
 80036f8:	4a04      	ldr	r2, [pc, #16]	@ (800370c <HAL_RCC_GetPCLK1Freq+0x40>)
 80036fa:	5cd3      	ldrb	r3, [r2, r3]
 80036fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003700:	4618      	mov	r0, r3
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40021000 	.word	0x40021000
 800370c:	08009ebc 	.word	0x08009ebc

08003710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003716:	f7ff ffcd 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 800371a:	4601      	mov	r1, r0
 800371c:	4b0b      	ldr	r3, [pc, #44]	@ (800374c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003724:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003728:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	fa92 f2a2 	rbit	r2, r2
 8003730:	603a      	str	r2, [r7, #0]
  return result;
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	fab2 f282 	clz	r2, r2
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	40d3      	lsrs	r3, r2
 800373c:	4a04      	ldr	r2, [pc, #16]	@ (8003750 <HAL_RCC_GetPCLK2Freq+0x40>)
 800373e:	5cd3      	ldrb	r3, [r2, r3]
 8003740:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	08009ebc 	.word	0x08009ebc

08003754 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b092      	sub	sp, #72	@ 0x48
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003764:	2300      	movs	r3, #0
 8003766:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80d4 	beq.w	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003778:	4b4e      	ldr	r3, [pc, #312]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10e      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003784:	4b4b      	ldr	r3, [pc, #300]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	4a4a      	ldr	r2, [pc, #296]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800378e:	61d3      	str	r3, [r2, #28]
 8003790:	4b48      	ldr	r3, [pc, #288]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a2:	4b45      	ldr	r3, [pc, #276]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d118      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ae:	4b42      	ldr	r3, [pc, #264]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a41      	ldr	r2, [pc, #260]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ba:	f7fe f83b 	bl	8001834 <HAL_GetTick>
 80037be:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	e008      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c2:	f7fe f837 	bl	8001834 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b64      	cmp	r3, #100	@ 0x64
 80037ce:	d901      	bls.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e169      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	4b38      	ldr	r3, [pc, #224]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037e0:	4b34      	ldr	r3, [pc, #208]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8084 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d07c      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003800:	4b2c      	ldr	r3, [pc, #176]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003808:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800380a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800380e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003812:	fa93 f3a3 	rbit	r3, r3
 8003816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800381a:	fab3 f383 	clz	r3, r3
 800381e:	b2db      	uxtb	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	4b26      	ldr	r3, [pc, #152]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	461a      	mov	r2, r3
 800382a:	2301      	movs	r3, #1
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003832:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800383c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800383e:	fab3 f383 	clz	r3, r3
 8003842:	b2db      	uxtb	r3, r3
 8003844:	461a      	mov	r2, r3
 8003846:	4b1d      	ldr	r3, [pc, #116]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	461a      	mov	r2, r3
 800384e:	2300      	movs	r3, #0
 8003850:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003852:	4a18      	ldr	r2, [pc, #96]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003856:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d04b      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003862:	f7fd ffe7 	bl	8001834 <HAL_GetTick>
 8003866:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003868:	e00a      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386a:	f7fd ffe3 	bl	8001834 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003878:	4293      	cmp	r3, r2
 800387a:	d901      	bls.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e113      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003880:	2302      	movs	r3, #2
 8003882:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003886:	fa93 f3a3 	rbit	r3, r3
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
 800388c:	2302      	movs	r3, #2
 800388e:	623b      	str	r3, [r7, #32]
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	fa93 f3a3 	rbit	r3, r3
 8003896:	61fb      	str	r3, [r7, #28]
  return result;
 8003898:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f043 0302 	orr.w	r3, r3, #2
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d108      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80038ae:	4b01      	ldr	r3, [pc, #4]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	e00d      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40007000 	.word	0x40007000
 80038bc:	10908100 	.word	0x10908100
 80038c0:	2302      	movs	r3, #2
 80038c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	4b78      	ldr	r3, [pc, #480]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	2202      	movs	r2, #2
 80038d2:	613a      	str	r2, [r7, #16]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	fa92 f2a2 	rbit	r2, r2
 80038da:	60fa      	str	r2, [r7, #12]
  return result;
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	fab2 f282 	clz	r2, r2
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	f002 021f 	and.w	r2, r2, #31
 80038ee:	2101      	movs	r1, #1
 80038f0:	fa01 f202 	lsl.w	r2, r1, r2
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0b7      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80038fa:	4b6d      	ldr	r3, [pc, #436]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	496a      	ldr	r1, [pc, #424]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003908:	4313      	orrs	r3, r2
 800390a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800390c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003910:	2b01      	cmp	r3, #1
 8003912:	d105      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003914:	4b66      	ldr	r3, [pc, #408]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	4a65      	ldr	r2, [pc, #404]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800391a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800391e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800392c:	4b60      	ldr	r3, [pc, #384]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003930:	f023 0203 	bic.w	r2, r3, #3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	495d      	ldr	r1, [pc, #372]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800393a:	4313      	orrs	r3, r2
 800393c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800394a:	4b59      	ldr	r3, [pc, #356]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	4956      	ldr	r1, [pc, #344]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003958:	4313      	orrs	r3, r2
 800395a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003968:	4b51      	ldr	r3, [pc, #324]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800396a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	494e      	ldr	r1, [pc, #312]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003976:	4313      	orrs	r3, r2
 8003978:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b00      	cmp	r3, #0
 8003984:	d008      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003986:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	f023 0210 	bic.w	r2, r3, #16
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	4947      	ldr	r1, [pc, #284]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003994:	4313      	orrs	r3, r2
 8003996:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80039a4:	4b42      	ldr	r3, [pc, #264]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b0:	493f      	ldr	r1, [pc, #252]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039c2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c6:	f023 0220 	bic.w	r2, r3, #32
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	4938      	ldr	r1, [pc, #224]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039e0:	4b33      	ldr	r3, [pc, #204]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	4930      	ldr	r1, [pc, #192]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d008      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039fe:	4b2c      	ldr	r3, [pc, #176]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	4929      	ldr	r1, [pc, #164]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a1c:	4b24      	ldr	r3, [pc, #144]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a28:	4921      	ldr	r1, [pc, #132]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d008      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	491a      	ldr	r1, [pc, #104]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003a58:	4b15      	ldr	r3, [pc, #84]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a64:	4912      	ldr	r1, [pc, #72]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a76:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a82:	490b      	ldr	r1, [pc, #44]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003a94:	4b06      	ldr	r3, [pc, #24]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a98:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa0:	4903      	ldr	r1, [pc, #12]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3748      	adds	r7, #72	@ 0x48
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000

08003ab4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e09d      	b.n	8003c02 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d108      	bne.n	8003ae0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ad6:	d009      	beq.n	8003aec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	61da      	str	r2, [r3, #28]
 8003ade:	e005      	b.n	8003aec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fd fc78 	bl	80013fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b2c:	d902      	bls.n	8003b34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	e002      	b.n	8003b3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003b42:	d007      	beq.n	8003b54 <HAL_SPI_Init+0xa0>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b4c:	d002      	beq.n	8003b54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b96:	ea42 0103 	orr.w	r1, r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	0c1b      	lsrs	r3, r3, #16
 8003bb0:	f003 0204 	and.w	r2, r3, #4
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003bd0:	ea42 0103 	orr.w	r1, r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69da      	ldr	r2, [r3, #28]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bf0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b088      	sub	sp, #32
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	603b      	str	r3, [r7, #0]
 8003c16:	4613      	mov	r3, r2
 8003c18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_SPI_Transmit+0x22>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e15f      	b.n	8003eec <HAL_SPI_Transmit+0x2e2>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c34:	f7fd fdfe 	bl	8001834 <HAL_GetTick>
 8003c38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d002      	beq.n	8003c50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c4e:	e148      	b.n	8003ee2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <HAL_SPI_Transmit+0x52>
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d102      	bne.n	8003c62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c60:	e13f      	b.n	8003ee2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2203      	movs	r2, #3
 8003c66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	88fa      	ldrh	r2, [r7, #6]
 8003c7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	88fa      	ldrh	r2, [r7, #6]
 8003c80:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cac:	d10f      	bne.n	8003cce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ccc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd8:	2b40      	cmp	r3, #64	@ 0x40
 8003cda:	d007      	beq.n	8003cec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cf4:	d94f      	bls.n	8003d96 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_SPI_Transmit+0xfa>
 8003cfe:	8afb      	ldrh	r3, [r7, #22]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d142      	bne.n	8003d8a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d08:	881a      	ldrh	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d14:	1c9a      	adds	r2, r3, #2
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d28:	e02f      	b.n	8003d8a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d112      	bne.n	8003d5e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3c:	881a      	ldrh	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d48:	1c9a      	adds	r2, r3, #2
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d5c:	e015      	b.n	8003d8a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d5e:	f7fd fd69 	bl	8001834 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d803      	bhi.n	8003d76 <HAL_SPI_Transmit+0x16c>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d102      	bne.n	8003d7c <HAL_SPI_Transmit+0x172>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d106      	bne.n	8003d8a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003d88:	e0ab      	b.n	8003ee2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1ca      	bne.n	8003d2a <HAL_SPI_Transmit+0x120>
 8003d94:	e080      	b.n	8003e98 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <HAL_SPI_Transmit+0x19a>
 8003d9e:	8afb      	ldrh	r3, [r7, #22]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d174      	bne.n	8003e8e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d912      	bls.n	8003dd4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db2:	881a      	ldrh	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbe:	1c9a      	adds	r2, r3, #2
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b02      	subs	r3, #2
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003dd2:	e05c      	b.n	8003e8e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	330c      	adds	r3, #12
 8003dde:	7812      	ldrb	r2, [r2, #0]
 8003de0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003dfa:	e048      	b.n	8003e8e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d12b      	bne.n	8003e62 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d912      	bls.n	8003e3a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e18:	881a      	ldrh	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e24:	1c9a      	adds	r2, r3, #2
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b02      	subs	r3, #2
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e38:	e029      	b.n	8003e8e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	330c      	adds	r3, #12
 8003e44:	7812      	ldrb	r2, [r2, #0]
 8003e46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e60:	e015      	b.n	8003e8e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e62:	f7fd fce7 	bl	8001834 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d803      	bhi.n	8003e7a <HAL_SPI_Transmit+0x270>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d102      	bne.n	8003e80 <HAL_SPI_Transmit+0x276>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d106      	bne.n	8003e8e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003e8c:	e029      	b.n	8003ee2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1b1      	bne.n	8003dfc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	6839      	ldr	r1, [r7, #0]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 fb69 	bl	8004574 <SPI_EndRxTxTransaction>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e003      	b.n	8003ee2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003eea:	7ffb      	ldrb	r3, [r7, #31]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3720      	adds	r7, #32
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	@ 0x28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f02:	2301      	movs	r3, #1
 8003f04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_SPI_TransmitReceive+0x26>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e20a      	b.n	8004330 <HAL_SPI_TransmitReceive+0x43c>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f22:	f7fd fc87 	bl	8001834 <HAL_GetTick>
 8003f26:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f2e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f36:	887b      	ldrh	r3, [r7, #2]
 8003f38:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003f3a:	887b      	ldrh	r3, [r7, #2]
 8003f3c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f3e:	7efb      	ldrb	r3, [r7, #27]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d00e      	beq.n	8003f62 <HAL_SPI_TransmitReceive+0x6e>
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f4a:	d106      	bne.n	8003f5a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <HAL_SPI_TransmitReceive+0x66>
 8003f54:	7efb      	ldrb	r3, [r7, #27]
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d003      	beq.n	8003f62 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003f60:	e1e0      	b.n	8004324 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_SPI_TransmitReceive+0x80>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <HAL_SPI_TransmitReceive+0x80>
 8003f6e:	887b      	ldrh	r3, [r7, #2]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d103      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003f7a:	e1d3      	b.n	8004324 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d003      	beq.n	8003f90 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2205      	movs	r2, #5
 8003f8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	887a      	ldrh	r2, [r7, #2]
 8003fa0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	887a      	ldrh	r2, [r7, #2]
 8003fa8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	887a      	ldrh	r2, [r7, #2]
 8003fb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fd2:	d802      	bhi.n	8003fda <HAL_SPI_TransmitReceive+0xe6>
 8003fd4:	8a3b      	ldrh	r3, [r7, #16]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d908      	bls.n	8003fec <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	e007      	b.n	8003ffc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ffa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004006:	2b40      	cmp	r3, #64	@ 0x40
 8004008:	d007      	beq.n	800401a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004018:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004022:	f240 8081 	bls.w	8004128 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_SPI_TransmitReceive+0x140>
 800402e:	8a7b      	ldrh	r3, [r7, #18]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d16d      	bne.n	8004110 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004038:	881a      	ldrh	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004044:	1c9a      	adds	r2, r3, #2
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004058:	e05a      	b.n	8004110 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b02      	cmp	r3, #2
 8004066:	d11b      	bne.n	80040a0 <HAL_SPI_TransmitReceive+0x1ac>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d016      	beq.n	80040a0 <HAL_SPI_TransmitReceive+0x1ac>
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	2b01      	cmp	r3, #1
 8004076:	d113      	bne.n	80040a0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407c:	881a      	ldrh	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004088:	1c9a      	adds	r2, r3, #2
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d11c      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x1f4>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d016      	beq.n	80040e8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	b292      	uxth	r2, r2
 80040c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	1c9a      	adds	r2, r3, #2
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040e4:	2301      	movs	r3, #1
 80040e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040e8:	f7fd fba4 	bl	8001834 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d80b      	bhi.n	8004110 <HAL_SPI_TransmitReceive+0x21c>
 80040f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d007      	beq.n	8004110 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800410e:	e109      	b.n	8004324 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d19f      	bne.n	800405a <HAL_SPI_TransmitReceive+0x166>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d199      	bne.n	800405a <HAL_SPI_TransmitReceive+0x166>
 8004126:	e0e3      	b.n	80042f0 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_SPI_TransmitReceive+0x244>
 8004130:	8a7b      	ldrh	r3, [r7, #18]
 8004132:	2b01      	cmp	r3, #1
 8004134:	f040 80cf 	bne.w	80042d6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d912      	bls.n	8004168 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004146:	881a      	ldrh	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004152:	1c9a      	adds	r2, r3, #2
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b02      	subs	r3, #2
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004166:	e0b6      	b.n	80042d6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	7812      	ldrb	r2, [r2, #0]
 8004174:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800418e:	e0a2      	b.n	80042d6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b02      	cmp	r3, #2
 800419c:	d134      	bne.n	8004208 <HAL_SPI_TransmitReceive+0x314>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d02f      	beq.n	8004208 <HAL_SPI_TransmitReceive+0x314>
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d12c      	bne.n	8004208 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d912      	bls.n	80041de <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041bc:	881a      	ldrh	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c8:	1c9a      	adds	r2, r3, #2
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b02      	subs	r3, #2
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041dc:	e012      	b.n	8004204 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	330c      	adds	r3, #12
 80041e8:	7812      	ldrb	r2, [r2, #0]
 80041ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b01      	cmp	r3, #1
 8004214:	d148      	bne.n	80042a8 <HAL_SPI_TransmitReceive+0x3b4>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d042      	beq.n	80042a8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b01      	cmp	r3, #1
 800422c:	d923      	bls.n	8004276 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	b292      	uxth	r2, r2
 800423a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004240:	1c9a      	adds	r2, r3, #2
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b02      	subs	r3, #2
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800425e:	b29b      	uxth	r3, r3
 8004260:	2b01      	cmp	r3, #1
 8004262:	d81f      	bhi.n	80042a4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004272:	605a      	str	r2, [r3, #4]
 8004274:	e016      	b.n	80042a4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f103 020c 	add.w	r2, r3, #12
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	7812      	ldrb	r2, [r2, #0]
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004298:	b29b      	uxth	r3, r3
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042a4:	2301      	movs	r3, #1
 80042a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042a8:	f7fd fac4 	bl	8001834 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d803      	bhi.n	80042c0 <HAL_SPI_TransmitReceive+0x3cc>
 80042b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042be:	d102      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x3d2>
 80042c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d107      	bne.n	80042d6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80042d4:	e026      	b.n	8004324 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f47f af57 	bne.w	8004190 <HAL_SPI_TransmitReceive+0x29c>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f47f af50 	bne.w	8004190 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f93d 	bl	8004574 <SPI_EndRxTxTransaction>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800431a:	e003      	b.n	8004324 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800432c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004330:	4618      	mov	r0, r3
 8004332:	3728      	adds	r7, #40	@ 0x28
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004348:	f7fd fa74 	bl	8001834 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	4413      	add	r3, r2
 8004356:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004358:	f7fd fa6c 	bl	8001834 <HAL_GetTick>
 800435c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800435e:	4b39      	ldr	r3, [pc, #228]	@ (8004444 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	015b      	lsls	r3, r3, #5
 8004364:	0d1b      	lsrs	r3, r3, #20
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	fb02 f303 	mul.w	r3, r2, r3
 800436c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800436e:	e054      	b.n	800441a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004376:	d050      	beq.n	800441a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004378:	f7fd fa5c 	bl	8001834 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	429a      	cmp	r2, r3
 8004386:	d902      	bls.n	800438e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d13d      	bne.n	800440a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800439c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043a6:	d111      	bne.n	80043cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043b0:	d004      	beq.n	80043bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ba:	d107      	bne.n	80043cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043d4:	d10f      	bne.n	80043f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e017      	b.n	800443a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	3b01      	subs	r3, #1
 8004418:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4013      	ands	r3, r2
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	429a      	cmp	r2, r3
 8004428:	bf0c      	ite	eq
 800442a:	2301      	moveq	r3, #1
 800442c:	2300      	movne	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	461a      	mov	r2, r3
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	429a      	cmp	r2, r3
 8004436:	d19b      	bne.n	8004370 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000010 	.word	0x20000010

08004448 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	@ 0x28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800445a:	f7fd f9eb 	bl	8001834 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	4413      	add	r3, r2
 8004468:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800446a:	f7fd f9e3 	bl	8001834 <HAL_GetTick>
 800446e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	330c      	adds	r3, #12
 8004476:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004478:	4b3d      	ldr	r3, [pc, #244]	@ (8004570 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	00da      	lsls	r2, r3, #3
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	0d1b      	lsrs	r3, r3, #20
 8004488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800448a:	fb02 f303 	mul.w	r3, r2, r3
 800448e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004490:	e060      	b.n	8004554 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004498:	d107      	bne.n	80044aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b0:	d050      	beq.n	8004554 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044b2:	f7fd f9bf 	bl	8001834 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044be:	429a      	cmp	r2, r3
 80044c0:	d902      	bls.n	80044c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d13d      	bne.n	8004544 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044e0:	d111      	bne.n	8004506 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044ea:	d004      	beq.n	80044f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044f4:	d107      	bne.n	8004506 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004504:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800450e:	d10f      	bne.n	8004530 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800452e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e010      	b.n	8004566 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	3b01      	subs	r3, #1
 8004552:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4013      	ands	r3, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	429a      	cmp	r2, r3
 8004562:	d196      	bne.n	8004492 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3728      	adds	r7, #40	@ 0x28
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20000010 	.word	0x20000010

08004574 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2200      	movs	r2, #0
 8004588:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7ff ff5b 	bl	8004448 <SPI_WaitFifoStateUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e027      	b.n	80045f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2200      	movs	r2, #0
 80045b0:	2180      	movs	r1, #128	@ 0x80
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f7ff fec0 	bl	8004338 <SPI_WaitFlagStateUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c2:	f043 0220 	orr.w	r2, r3, #32
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e014      	b.n	80045f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f7ff ff34 	bl	8004448 <SPI_WaitFifoStateUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ea:	f043 0220 	orr.w	r2, r3, #32
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e000      	b.n	80045f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e040      	b.n	8004694 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fc ff2c 	bl	8001480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2224      	movs	r2, #36	@ 0x24
 800462c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fd94 	bl	8005174 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fbbd 	bl	8004dcc <UART_SetConfig>
 8004652:	4603      	mov	r3, r0
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e01b      	b.n	8004694 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800466a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800467a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0201 	orr.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 fe13 	bl	80052b8 <UART_CheckIdleState>
 8004692:	4603      	mov	r3, r0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08a      	sub	sp, #40	@ 0x28
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d177      	bne.n	80047a4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_UART_Transmit+0x24>
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e070      	b.n	80047a6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2221      	movs	r2, #33	@ 0x21
 80046d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046d2:	f7fd f8af 	bl	8001834 <HAL_GetTick>
 80046d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	88fa      	ldrh	r2, [r7, #6]
 80046dc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	88fa      	ldrh	r2, [r7, #6]
 80046e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046f0:	d108      	bne.n	8004704 <HAL_UART_Transmit+0x68>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d104      	bne.n	8004704 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	61bb      	str	r3, [r7, #24]
 8004702:	e003      	b.n	800470c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004708:	2300      	movs	r3, #0
 800470a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800470c:	e02f      	b.n	800476e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2200      	movs	r2, #0
 8004716:	2180      	movs	r1, #128	@ 0x80
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fe75 	bl	8005408 <UART_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e03b      	b.n	80047a6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10b      	bne.n	800474c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	881a      	ldrh	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004740:	b292      	uxth	r2, r2
 8004742:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	3302      	adds	r3, #2
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	e007      	b.n	800475c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	781a      	ldrb	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	3301      	adds	r3, #1
 800475a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1c9      	bne.n	800470e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2200      	movs	r2, #0
 8004782:	2140      	movs	r1, #64	@ 0x40
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 fe3f 	bl	8005408 <UART_WaitOnFlagUntilTimeout>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d004      	beq.n	800479a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e005      	b.n	80047a6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e000      	b.n	80047a6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
  }
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b0ba      	sub	sp, #232	@ 0xe8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80047da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80047de:	4013      	ands	r3, r2
 80047e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80047e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d115      	bne.n	8004818 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00f      	beq.n	8004818 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d009      	beq.n	8004818 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 82ab 	beq.w	8004d64 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
      }
      return;
 8004816:	e2a5      	b.n	8004d64 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004818:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8117 	beq.w	8004a50 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800482e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004832:	4b85      	ldr	r3, [pc, #532]	@ (8004a48 <HAL_UART_IRQHandler+0x298>)
 8004834:	4013      	ands	r3, r2
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 810a 	beq.w	8004a50 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800483c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d011      	beq.n	800486c <HAL_UART_IRQHandler+0xbc>
 8004848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800484c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2201      	movs	r2, #1
 800485a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004862:	f043 0201 	orr.w	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800486c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d011      	beq.n	800489c <HAL_UART_IRQHandler+0xec>
 8004878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00b      	beq.n	800489c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2202      	movs	r2, #2
 800488a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004892:	f043 0204 	orr.w	r2, r3, #4
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800489c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d011      	beq.n	80048cc <HAL_UART_IRQHandler+0x11c>
 80048a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00b      	beq.n	80048cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2204      	movs	r2, #4
 80048ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048c2:	f043 0202 	orr.w	r2, r3, #2
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d017      	beq.n	8004908 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d105      	bne.n	80048f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2208      	movs	r2, #8
 80048f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048fe:	f043 0208 	orr.w	r2, r3, #8
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800490c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004910:	2b00      	cmp	r3, #0
 8004912:	d012      	beq.n	800493a <HAL_UART_IRQHandler+0x18a>
 8004914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004918:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00c      	beq.n	800493a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004928:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004930:	f043 0220 	orr.w	r2, r3, #32
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 8211 	beq.w	8004d68 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004974:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004982:	2b40      	cmp	r3, #64	@ 0x40
 8004984:	d005      	beq.n	8004992 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800498a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800498e:	2b00      	cmp	r3, #0
 8004990:	d04f      	beq.n	8004a32 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fe6c 	bl	8005670 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a2:	2b40      	cmp	r3, #64	@ 0x40
 80049a4:	d141      	bne.n	8004a2a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3308      	adds	r3, #8
 80049ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3308      	adds	r3, #8
 80049ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049e2:	e841 2300 	strex	r3, r2, [r1]
 80049e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1d9      	bne.n	80049a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d013      	beq.n	8004a22 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049fe:	4a13      	ldr	r2, [pc, #76]	@ (8004a4c <HAL_UART_IRQHandler+0x29c>)
 8004a00:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fd f939 	bl	8001c7e <HAL_DMA_Abort_IT>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d017      	beq.n	8004a42 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a20:	e00f      	b.n	8004a42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f9c8 	bl	8004db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a28:	e00b      	b.n	8004a42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f9c4 	bl	8004db8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a30:	e007      	b.n	8004a42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f9c0 	bl	8004db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004a40:	e192      	b.n	8004d68 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a42:	bf00      	nop
    return;
 8004a44:	e190      	b.n	8004d68 <HAL_UART_IRQHandler+0x5b8>
 8004a46:	bf00      	nop
 8004a48:	04000120 	.word	0x04000120
 8004a4c:	0800591b 	.word	0x0800591b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	f040 814b 	bne.w	8004cf0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8144 	beq.w	8004cf0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 813d 	beq.w	8004cf0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2210      	movs	r2, #16
 8004a7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a88:	2b40      	cmp	r3, #64	@ 0x40
 8004a8a:	f040 80b5 	bne.w	8004bf8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8164 	beq.w	8004d6c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004aaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	f080 815c 	bcs.w	8004d6c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	f000 8086 	beq.w	8004bd6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ade:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ae2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ae6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004af4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004af8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b00:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1da      	bne.n	8004aca <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3308      	adds	r3, #8
 8004b1a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b26:	f023 0301 	bic.w	r3, r3, #1
 8004b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3308      	adds	r3, #8
 8004b34:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b38:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b40:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e1      	bne.n	8004b14 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3308      	adds	r3, #8
 8004b56:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3308      	adds	r3, #8
 8004b70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b74:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b76:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b7a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b7c:	e841 2300 	strex	r3, r2, [r1]
 8004b80:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e3      	bne.n	8004b50 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b9e:	e853 3f00 	ldrex	r3, [r3]
 8004ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ba6:	f023 0310 	bic.w	r3, r3, #16
 8004baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bba:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e4      	bne.n	8004b96 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fd f816 	bl	8001c02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7fc f9e7 	bl	8000fc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bf6:	e0b9      	b.n	8004d6c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80ab 	beq.w	8004d70 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004c1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 80a6 	beq.w	8004d70 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c48:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e4      	bne.n	8004c24 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3308      	adds	r3, #8
 8004c60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	623b      	str	r3, [r7, #32]
   return(result);
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3308      	adds	r3, #8
 8004c7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e3      	bne.n	8004c5a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0310 	bic.w	r3, r3, #16
 8004cba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	69b9      	ldr	r1, [r7, #24]
 8004cce:	69fa      	ldr	r2, [r7, #28]
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e4      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ce2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7fc f96b 	bl	8000fc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cee:	e03f      	b.n	8004d70 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00e      	beq.n	8004d1a <HAL_UART_IRQHandler+0x56a>
 8004cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fe41 	bl	800599a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d18:	e02d      	b.n	8004d76 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00e      	beq.n	8004d44 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d008      	beq.n	8004d44 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01c      	beq.n	8004d74 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	4798      	blx	r3
    }
    return;
 8004d42:	e017      	b.n	8004d74 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d012      	beq.n	8004d76 <HAL_UART_IRQHandler+0x5c6>
 8004d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00c      	beq.n	8004d76 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 fdf2 	bl	8005946 <UART_EndTransmit_IT>
    return;
 8004d62:	e008      	b.n	8004d76 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004d64:	bf00      	nop
 8004d66:	e006      	b.n	8004d76 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004d68:	bf00      	nop
 8004d6a:	e004      	b.n	8004d76 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004d6c:	bf00      	nop
 8004d6e:	e002      	b.n	8004d76 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004d70:	bf00      	nop
 8004d72:	e000      	b.n	8004d76 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004d74:	bf00      	nop
  }

}
 8004d76:	37e8      	adds	r7, #232	@ 0xe8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004dfa:	f023 030c 	bic.w	r3, r3, #12
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	6979      	ldr	r1, [r7, #20]
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4aa7      	ldr	r2, [pc, #668]	@ (80050e4 <UART_SetConfig+0x318>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d120      	bne.n	8004e8e <UART_SetConfig+0xc2>
 8004e4c:	4ba6      	ldr	r3, [pc, #664]	@ (80050e8 <UART_SetConfig+0x31c>)
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d817      	bhi.n	8004e88 <UART_SetConfig+0xbc>
 8004e58:	a201      	add	r2, pc, #4	@ (adr r2, 8004e60 <UART_SetConfig+0x94>)
 8004e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5e:	bf00      	nop
 8004e60:	08004e71 	.word	0x08004e71
 8004e64:	08004e7d 	.word	0x08004e7d
 8004e68:	08004e83 	.word	0x08004e83
 8004e6c:	08004e77 	.word	0x08004e77
 8004e70:	2301      	movs	r3, #1
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e0b5      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004e76:	2302      	movs	r3, #2
 8004e78:	77fb      	strb	r3, [r7, #31]
 8004e7a:	e0b2      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e0af      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004e82:	2308      	movs	r3, #8
 8004e84:	77fb      	strb	r3, [r7, #31]
 8004e86:	e0ac      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e0a9      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a96      	ldr	r2, [pc, #600]	@ (80050ec <UART_SetConfig+0x320>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d124      	bne.n	8004ee2 <UART_SetConfig+0x116>
 8004e98:	4b93      	ldr	r3, [pc, #588]	@ (80050e8 <UART_SetConfig+0x31c>)
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ea0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ea4:	d011      	beq.n	8004eca <UART_SetConfig+0xfe>
 8004ea6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004eaa:	d817      	bhi.n	8004edc <UART_SetConfig+0x110>
 8004eac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004eb0:	d011      	beq.n	8004ed6 <UART_SetConfig+0x10a>
 8004eb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004eb6:	d811      	bhi.n	8004edc <UART_SetConfig+0x110>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <UART_SetConfig+0xf8>
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec0:	d006      	beq.n	8004ed0 <UART_SetConfig+0x104>
 8004ec2:	e00b      	b.n	8004edc <UART_SetConfig+0x110>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e08b      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	77fb      	strb	r3, [r7, #31]
 8004ece:	e088      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	77fb      	strb	r3, [r7, #31]
 8004ed4:	e085      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004ed6:	2308      	movs	r3, #8
 8004ed8:	77fb      	strb	r3, [r7, #31]
 8004eda:	e082      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004edc:	2310      	movs	r3, #16
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	e07f      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a82      	ldr	r2, [pc, #520]	@ (80050f0 <UART_SetConfig+0x324>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d124      	bne.n	8004f36 <UART_SetConfig+0x16a>
 8004eec:	4b7e      	ldr	r3, [pc, #504]	@ (80050e8 <UART_SetConfig+0x31c>)
 8004eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004ef4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ef8:	d011      	beq.n	8004f1e <UART_SetConfig+0x152>
 8004efa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004efe:	d817      	bhi.n	8004f30 <UART_SetConfig+0x164>
 8004f00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f04:	d011      	beq.n	8004f2a <UART_SetConfig+0x15e>
 8004f06:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f0a:	d811      	bhi.n	8004f30 <UART_SetConfig+0x164>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <UART_SetConfig+0x14c>
 8004f10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f14:	d006      	beq.n	8004f24 <UART_SetConfig+0x158>
 8004f16:	e00b      	b.n	8004f30 <UART_SetConfig+0x164>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	e061      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	77fb      	strb	r3, [r7, #31]
 8004f22:	e05e      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004f24:	2304      	movs	r3, #4
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e05b      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004f2a:	2308      	movs	r3, #8
 8004f2c:	77fb      	strb	r3, [r7, #31]
 8004f2e:	e058      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004f30:	2310      	movs	r3, #16
 8004f32:	77fb      	strb	r3, [r7, #31]
 8004f34:	e055      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a6e      	ldr	r2, [pc, #440]	@ (80050f4 <UART_SetConfig+0x328>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d124      	bne.n	8004f8a <UART_SetConfig+0x1be>
 8004f40:	4b69      	ldr	r3, [pc, #420]	@ (80050e8 <UART_SetConfig+0x31c>)
 8004f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f44:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004f48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f4c:	d011      	beq.n	8004f72 <UART_SetConfig+0x1a6>
 8004f4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f52:	d817      	bhi.n	8004f84 <UART_SetConfig+0x1b8>
 8004f54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f58:	d011      	beq.n	8004f7e <UART_SetConfig+0x1b2>
 8004f5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f5e:	d811      	bhi.n	8004f84 <UART_SetConfig+0x1b8>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <UART_SetConfig+0x1a0>
 8004f64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f68:	d006      	beq.n	8004f78 <UART_SetConfig+0x1ac>
 8004f6a:	e00b      	b.n	8004f84 <UART_SetConfig+0x1b8>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e037      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004f72:	2302      	movs	r3, #2
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	e034      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004f78:	2304      	movs	r3, #4
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	e031      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004f7e:	2308      	movs	r3, #8
 8004f80:	77fb      	strb	r3, [r7, #31]
 8004f82:	e02e      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004f84:	2310      	movs	r3, #16
 8004f86:	77fb      	strb	r3, [r7, #31]
 8004f88:	e02b      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a5a      	ldr	r2, [pc, #360]	@ (80050f8 <UART_SetConfig+0x32c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d124      	bne.n	8004fde <UART_SetConfig+0x212>
 8004f94:	4b54      	ldr	r3, [pc, #336]	@ (80050e8 <UART_SetConfig+0x31c>)
 8004f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f98:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004f9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fa0:	d011      	beq.n	8004fc6 <UART_SetConfig+0x1fa>
 8004fa2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004fa6:	d817      	bhi.n	8004fd8 <UART_SetConfig+0x20c>
 8004fa8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fac:	d011      	beq.n	8004fd2 <UART_SetConfig+0x206>
 8004fae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fb2:	d811      	bhi.n	8004fd8 <UART_SetConfig+0x20c>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <UART_SetConfig+0x1f4>
 8004fb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fbc:	d006      	beq.n	8004fcc <UART_SetConfig+0x200>
 8004fbe:	e00b      	b.n	8004fd8 <UART_SetConfig+0x20c>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	77fb      	strb	r3, [r7, #31]
 8004fc4:	e00d      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	77fb      	strb	r3, [r7, #31]
 8004fca:	e00a      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004fcc:	2304      	movs	r3, #4
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	e007      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	77fb      	strb	r3, [r7, #31]
 8004fd6:	e004      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004fd8:	2310      	movs	r3, #16
 8004fda:	77fb      	strb	r3, [r7, #31]
 8004fdc:	e001      	b.n	8004fe2 <UART_SetConfig+0x216>
 8004fde:	2310      	movs	r3, #16
 8004fe0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fea:	d15b      	bne.n	80050a4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004fec:	7ffb      	ldrb	r3, [r7, #31]
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d827      	bhi.n	8005042 <UART_SetConfig+0x276>
 8004ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff8 <UART_SetConfig+0x22c>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	0800501d 	.word	0x0800501d
 8004ffc:	08005025 	.word	0x08005025
 8005000:	0800502d 	.word	0x0800502d
 8005004:	08005043 	.word	0x08005043
 8005008:	08005033 	.word	0x08005033
 800500c:	08005043 	.word	0x08005043
 8005010:	08005043 	.word	0x08005043
 8005014:	08005043 	.word	0x08005043
 8005018:	0800503b 	.word	0x0800503b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800501c:	f7fe fb56 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 8005020:	61b8      	str	r0, [r7, #24]
        break;
 8005022:	e013      	b.n	800504c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005024:	f7fe fb74 	bl	8003710 <HAL_RCC_GetPCLK2Freq>
 8005028:	61b8      	str	r0, [r7, #24]
        break;
 800502a:	e00f      	b.n	800504c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800502c:	4b33      	ldr	r3, [pc, #204]	@ (80050fc <UART_SetConfig+0x330>)
 800502e:	61bb      	str	r3, [r7, #24]
        break;
 8005030:	e00c      	b.n	800504c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005032:	f7fe faeb 	bl	800360c <HAL_RCC_GetSysClockFreq>
 8005036:	61b8      	str	r0, [r7, #24]
        break;
 8005038:	e008      	b.n	800504c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800503a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800503e:	61bb      	str	r3, [r7, #24]
        break;
 8005040:	e004      	b.n	800504c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	77bb      	strb	r3, [r7, #30]
        break;
 800504a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 8082 	beq.w	8005158 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	005a      	lsls	r2, r3, #1
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	441a      	add	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	fbb2 f3f3 	udiv	r3, r2, r3
 8005068:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b0f      	cmp	r3, #15
 800506e:	d916      	bls.n	800509e <UART_SetConfig+0x2d2>
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005076:	d212      	bcs.n	800509e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	b29b      	uxth	r3, r3
 800507c:	f023 030f 	bic.w	r3, r3, #15
 8005080:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	085b      	lsrs	r3, r3, #1
 8005086:	b29b      	uxth	r3, r3
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	b29a      	uxth	r2, r3
 800508e:	89fb      	ldrh	r3, [r7, #14]
 8005090:	4313      	orrs	r3, r2
 8005092:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	89fa      	ldrh	r2, [r7, #14]
 800509a:	60da      	str	r2, [r3, #12]
 800509c:	e05c      	b.n	8005158 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	77bb      	strb	r3, [r7, #30]
 80050a2:	e059      	b.n	8005158 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050a4:	7ffb      	ldrb	r3, [r7, #31]
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d835      	bhi.n	8005116 <UART_SetConfig+0x34a>
 80050aa:	a201      	add	r2, pc, #4	@ (adr r2, 80050b0 <UART_SetConfig+0x2e4>)
 80050ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b0:	080050d5 	.word	0x080050d5
 80050b4:	080050dd 	.word	0x080050dd
 80050b8:	08005101 	.word	0x08005101
 80050bc:	08005117 	.word	0x08005117
 80050c0:	08005107 	.word	0x08005107
 80050c4:	08005117 	.word	0x08005117
 80050c8:	08005117 	.word	0x08005117
 80050cc:	08005117 	.word	0x08005117
 80050d0:	0800510f 	.word	0x0800510f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d4:	f7fe fafa 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 80050d8:	61b8      	str	r0, [r7, #24]
        break;
 80050da:	e021      	b.n	8005120 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050dc:	f7fe fb18 	bl	8003710 <HAL_RCC_GetPCLK2Freq>
 80050e0:	61b8      	str	r0, [r7, #24]
        break;
 80050e2:	e01d      	b.n	8005120 <UART_SetConfig+0x354>
 80050e4:	40013800 	.word	0x40013800
 80050e8:	40021000 	.word	0x40021000
 80050ec:	40004400 	.word	0x40004400
 80050f0:	40004800 	.word	0x40004800
 80050f4:	40004c00 	.word	0x40004c00
 80050f8:	40005000 	.word	0x40005000
 80050fc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005100:	4b1b      	ldr	r3, [pc, #108]	@ (8005170 <UART_SetConfig+0x3a4>)
 8005102:	61bb      	str	r3, [r7, #24]
        break;
 8005104:	e00c      	b.n	8005120 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005106:	f7fe fa81 	bl	800360c <HAL_RCC_GetSysClockFreq>
 800510a:	61b8      	str	r0, [r7, #24]
        break;
 800510c:	e008      	b.n	8005120 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005112:	61bb      	str	r3, [r7, #24]
        break;
 8005114:	e004      	b.n	8005120 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	77bb      	strb	r3, [r7, #30]
        break;
 800511e:	bf00      	nop
    }

    if (pclk != 0U)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d018      	beq.n	8005158 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	085a      	lsrs	r2, r3, #1
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	441a      	add	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	fbb2 f3f3 	udiv	r3, r2, r3
 8005138:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2b0f      	cmp	r3, #15
 800513e:	d909      	bls.n	8005154 <UART_SetConfig+0x388>
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005146:	d205      	bcs.n	8005154 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	b29a      	uxth	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	60da      	str	r2, [r3, #12]
 8005152:	e001      	b.n	8005158 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005164:	7fbb      	ldrb	r3, [r7, #30]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	007a1200 	.word	0x007a1200

08005174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01a      	beq.n	800528a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005272:	d10a      	bne.n	800528a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	605a      	str	r2, [r3, #4]
  }
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b098      	sub	sp, #96	@ 0x60
 80052bc:	af02      	add	r7, sp, #8
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052c8:	f7fc fab4 	bl	8001834 <HAL_GetTick>
 80052cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d12e      	bne.n	800533a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e4:	2200      	movs	r2, #0
 80052e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f88c 	bl	8005408 <UART_WaitOnFlagUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d021      	beq.n	800533a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005306:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800530a:	653b      	str	r3, [r7, #80]	@ 0x50
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005314:	647b      	str	r3, [r7, #68]	@ 0x44
 8005316:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005318:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800531a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800531c:	e841 2300 	strex	r3, r2, [r1]
 8005320:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e6      	bne.n	80052f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e062      	b.n	8005400 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b04      	cmp	r3, #4
 8005346:	d149      	bne.n	80053dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005348:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005350:	2200      	movs	r2, #0
 8005352:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f856 	bl	8005408 <UART_WaitOnFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d03c      	beq.n	80053dc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	623b      	str	r3, [r7, #32]
   return(result);
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	461a      	mov	r2, r3
 800537e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005380:	633b      	str	r3, [r7, #48]	@ 0x30
 8005382:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800538e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e6      	bne.n	8005362 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3308      	adds	r3, #8
 800539a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0301 	bic.w	r3, r3, #1
 80053aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3308      	adds	r3, #8
 80053b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053b4:	61fa      	str	r2, [r7, #28]
 80053b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	69b9      	ldr	r1, [r7, #24]
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	617b      	str	r3, [r7, #20]
   return(result);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e5      	bne.n	8005394 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e011      	b.n	8005400 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3758      	adds	r7, #88	@ 0x58
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005418:	e04f      	b.n	80054ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005420:	d04b      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005422:	f7fc fa07 	bl	8001834 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	429a      	cmp	r2, r3
 8005430:	d302      	bcc.n	8005438 <UART_WaitOnFlagUntilTimeout+0x30>
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e04e      	b.n	80054da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b00      	cmp	r3, #0
 8005448:	d037      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b80      	cmp	r3, #128	@ 0x80
 800544e:	d034      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b40      	cmp	r3, #64	@ 0x40
 8005454:	d031      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b08      	cmp	r3, #8
 8005462:	d110      	bne.n	8005486 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2208      	movs	r2, #8
 800546a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 f8ff 	bl	8005670 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2208      	movs	r2, #8
 8005476:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e029      	b.n	80054da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005490:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005494:	d111      	bne.n	80054ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800549e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 f8e5 	bl	8005670 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e00f      	b.n	80054da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69da      	ldr	r2, [r3, #28]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4013      	ands	r3, r2
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	bf0c      	ite	eq
 80054ca:	2301      	moveq	r3, #1
 80054cc:	2300      	movne	r3, #0
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	79fb      	ldrb	r3, [r7, #7]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d0a0      	beq.n	800541a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b096      	sub	sp, #88	@ 0x58
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	4613      	mov	r3, r2
 80054f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	88fa      	ldrh	r2, [r7, #6]
 80054fc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2222      	movs	r2, #34	@ 0x22
 800550c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005514:	2b00      	cmp	r3, #0
 8005516:	d028      	beq.n	800556a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800551c:	4a3e      	ldr	r2, [pc, #248]	@ (8005618 <UART_Start_Receive_DMA+0x134>)
 800551e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005524:	4a3d      	ldr	r2, [pc, #244]	@ (800561c <UART_Start_Receive_DMA+0x138>)
 8005526:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800552c:	4a3c      	ldr	r2, [pc, #240]	@ (8005620 <UART_Start_Receive_DMA+0x13c>)
 800552e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005534:	2200      	movs	r2, #0
 8005536:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3324      	adds	r3, #36	@ 0x24
 8005542:	4619      	mov	r1, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005548:	461a      	mov	r2, r3
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	f7fc fafa 	bl	8001b44 <HAL_DMA_Start_IT>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d009      	beq.n	800556a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2210      	movs	r2, #16
 800555a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e051      	b.n	800560e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d018      	beq.n	80055a4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800557a:	e853 3f00 	ldrex	r3, [r3]
 800557e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005586:	657b      	str	r3, [r7, #84]	@ 0x54
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005590:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005592:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005594:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005596:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005598:	e841 2300 	strex	r3, r2, [r1]
 800559c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800559e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1e6      	bne.n	8005572 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3308      	adds	r3, #8
 80055aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	f043 0301 	orr.w	r3, r3, #1
 80055ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80055c4:	637a      	str	r2, [r7, #52]	@ 0x34
 80055c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80055d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e5      	bne.n	80055a4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3308      	adds	r3, #8
 80055de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	613b      	str	r3, [r7, #16]
   return(result);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3308      	adds	r3, #8
 80055f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055f8:	623a      	str	r2, [r7, #32]
 80055fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	69f9      	ldr	r1, [r7, #28]
 80055fe:	6a3a      	ldr	r2, [r7, #32]
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	61bb      	str	r3, [r7, #24]
   return(result);
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e5      	bne.n	80055d8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3758      	adds	r7, #88	@ 0x58
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	08005739 	.word	0x08005739
 800561c:	0800585f 	.word	0x0800585f
 8005620:	0800589d 	.word	0x0800589d

08005624 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005624:	b480      	push	{r7}
 8005626:	b089      	sub	sp, #36	@ 0x24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	60bb      	str	r3, [r7, #8]
   return(result);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	61bb      	str	r3, [r7, #24]
 800564c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6979      	ldr	r1, [r7, #20]
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	613b      	str	r3, [r7, #16]
   return(result);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e6      	bne.n	800562c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005664:	bf00      	nop
 8005666:	3724      	adds	r7, #36	@ 0x24
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005670:	b480      	push	{r7}
 8005672:	b095      	sub	sp, #84	@ 0x54
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800568c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005696:	643b      	str	r3, [r7, #64]	@ 0x40
 8005698:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800569c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e6      	bne.n	8005678 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3308      	adds	r3, #8
 80056b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	f023 0301 	bic.w	r3, r3, #1
 80056c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3308      	adds	r3, #8
 80056c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e5      	bne.n	80056aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d118      	bne.n	8005718 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	e853 3f00 	ldrex	r3, [r3]
 80056f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f023 0310 	bic.w	r3, r3, #16
 80056fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005708:	6979      	ldr	r1, [r7, #20]
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	e841 2300 	strex	r3, r2, [r1]
 8005710:	613b      	str	r3, [r7, #16]
   return(result);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e6      	bne.n	80056e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800572c:	bf00      	nop
 800572e:	3754      	adds	r7, #84	@ 0x54
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b09c      	sub	sp, #112	@ 0x70
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005744:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	2b20      	cmp	r3, #32
 800574c:	d071      	beq.n	8005832 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800574e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005750:	2200      	movs	r2, #0
 8005752:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005766:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800576a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800576c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005774:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005776:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800577a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800577c:	e841 2300 	strex	r3, r2, [r1]
 8005780:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005782:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e6      	bne.n	8005756 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005788:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3308      	adds	r3, #8
 800578e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800579a:	f023 0301 	bic.w	r3, r3, #1
 800579e:	667b      	str	r3, [r7, #100]	@ 0x64
 80057a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3308      	adds	r3, #8
 80057a6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80057a8:	647a      	str	r2, [r7, #68]	@ 0x44
 80057aa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e5      	bne.n	8005788 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3308      	adds	r3, #8
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	623b      	str	r3, [r7, #32]
   return(result);
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80057d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3308      	adds	r3, #8
 80057da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80057dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80057de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e5      	bne.n	80057bc <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057f2:	2220      	movs	r2, #32
 80057f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d118      	bne.n	8005832 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005800:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	60fb      	str	r3, [r7, #12]
   return(result);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f023 0310 	bic.w	r3, r3, #16
 8005814:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005816:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800581e:	61fb      	str	r3, [r7, #28]
 8005820:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	69b9      	ldr	r1, [r7, #24]
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	e841 2300 	strex	r3, r2, [r1]
 800582a:	617b      	str	r3, [r7, #20]
   return(result);
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e6      	bne.n	8005800 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005834:	2200      	movs	r2, #0
 8005836:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800583a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800583c:	2b01      	cmp	r3, #1
 800583e:	d107      	bne.n	8005850 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005842:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005846:	4619      	mov	r1, r3
 8005848:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800584a:	f7fb fbbb 	bl	8000fc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800584e:	e002      	b.n	8005856 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005850:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005852:	f7ff fa9d 	bl	8004d90 <HAL_UART_RxCpltCallback>
}
 8005856:	bf00      	nop
 8005858:	3770      	adds	r7, #112	@ 0x70
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2201      	movs	r2, #1
 8005870:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005876:	2b01      	cmp	r3, #1
 8005878:	d109      	bne.n	800588e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005880:	085b      	lsrs	r3, r3, #1
 8005882:	b29b      	uxth	r3, r3
 8005884:	4619      	mov	r1, r3
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f7fb fb9c 	bl	8000fc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800588c:	e002      	b.n	8005894 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f7ff fa88 	bl	8004da4 <HAL_UART_RxHalfCpltCallback>
}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c2:	2b80      	cmp	r3, #128	@ 0x80
 80058c4:	d109      	bne.n	80058da <UART_DMAError+0x3e>
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2b21      	cmp	r3, #33	@ 0x21
 80058ca:	d106      	bne.n	80058da <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80058d4:	6978      	ldr	r0, [r7, #20]
 80058d6:	f7ff fea5 	bl	8005624 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e4:	2b40      	cmp	r3, #64	@ 0x40
 80058e6:	d109      	bne.n	80058fc <UART_DMAError+0x60>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b22      	cmp	r3, #34	@ 0x22
 80058ec:	d106      	bne.n	80058fc <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80058f6:	6978      	ldr	r0, [r7, #20]
 80058f8:	f7ff feba 	bl	8005670 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005902:	f043 0210 	orr.w	r2, r3, #16
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800590c:	6978      	ldr	r0, [r7, #20]
 800590e:	f7ff fa53 	bl	8004db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005912:	bf00      	nop
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005926:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7ff fa3d 	bl	8004db8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800593e:	bf00      	nop
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b088      	sub	sp, #32
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	e853 3f00 	ldrex	r3, [r3]
 800595a:	60bb      	str	r3, [r7, #8]
   return(result);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	6979      	ldr	r1, [r7, #20]
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	613b      	str	r3, [r7, #16]
   return(result);
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e6      	bne.n	800594e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff f9f5 	bl	8004d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005992:	bf00      	nop
 8005994:	3720      	adds	r7, #32
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059a2:	bf00      	nop
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b08c      	sub	sp, #48	@ 0x30
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	4613      	mov	r3, r2
 80059ba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	d142      	bne.n	8005a4c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e03b      	b.n	8005a4e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80059e2:	88fb      	ldrh	r3, [r7, #6]
 80059e4:	461a      	mov	r2, r3
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff fd7b 	bl	80054e4 <UART_Start_Receive_DMA>
 80059ee:	4603      	mov	r3, r0
 80059f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80059f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d124      	bne.n	8005a46 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d11d      	bne.n	8005a40 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2210      	movs	r2, #16
 8005a0a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	617b      	str	r3, [r7, #20]
   return(result);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f043 0310 	orr.w	r3, r3, #16
 8005a20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a2c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	6a39      	ldr	r1, [r7, #32]
 8005a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e6      	bne.n	8005a0c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8005a3e:	e002      	b.n	8005a46 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005a46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a4a:	e000      	b.n	8005a4e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005a4c:	2302      	movs	r3, #2
  }
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3730      	adds	r7, #48	@ 0x30
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005a5c:	4904      	ldr	r1, [pc, #16]	@ (8005a70 <MX_FATFS_Init+0x18>)
 8005a5e:	4805      	ldr	r0, [pc, #20]	@ (8005a74 <MX_FATFS_Init+0x1c>)
 8005a60:	f003 fc90 	bl	8009384 <FATFS_LinkDriver>
 8005a64:	4603      	mov	r3, r0
 8005a66:	461a      	mov	r2, r3
 8005a68:	4b03      	ldr	r3, [pc, #12]	@ (8005a78 <MX_FATFS_Init+0x20>)
 8005a6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005a6c:	bf00      	nop
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20001320 	.word	0x20001320
 8005a74:	2000001c 	.word	0x2000001c
 8005a78:	2000131c 	.word	0x2000131c

08005a7c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005a80:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return SD_disk_initialize(pdrv);
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fa fdad 	bl	80005f8 <SD_disk_initialize>
 8005a9e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return SD_disk_status(pdrv);
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fa fe85 	bl	80007c4 <SD_disk_status>
 8005aba:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	607a      	str	r2, [r7, #4]
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return SD_disk_read(pdrv, buff, sector, count);
 8005ad4:	7bf8      	ldrb	r0, [r7, #15]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	68b9      	ldr	r1, [r7, #8]
 8005adc:	f7fa fe88 	bl	80007f0 <SD_disk_read>
 8005ae0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]
 8005af6:	4603      	mov	r3, r0
 8005af8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return SD_disk_write(pdrv, buff, sector, count);
 8005afa:	7bf8      	ldrb	r0, [r7, #15]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	f7fa fedf 	bl	80008c4 <SD_disk_write>
 8005b06:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	603a      	str	r2, [r7, #0]
 8005b1a:	71fb      	strb	r3, [r7, #7]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return SD_disk_ioctl(pdrv, cmd, buff);
 8005b20:	79b9      	ldrb	r1, [r7, #6]
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fa ff50 	bl	80009cc <SD_disk_ioctl>
 8005b2c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005b42:	79fb      	ldrb	r3, [r7, #7]
 8005b44:	4a08      	ldr	r2, [pc, #32]	@ (8005b68 <disk_status+0x30>)
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	79fa      	ldrb	r2, [r7, #7]
 8005b50:	4905      	ldr	r1, [pc, #20]	@ (8005b68 <disk_status+0x30>)
 8005b52:	440a      	add	r2, r1
 8005b54:	7a12      	ldrb	r2, [r2, #8]
 8005b56:	4610      	mov	r0, r2
 8005b58:	4798      	blx	r3
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	20001344 	.word	0x20001344

08005b6c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8005bb4 <disk_initialize+0x48>)
 8005b7e:	5cd3      	ldrb	r3, [r2, r3]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d111      	bne.n	8005ba8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	4a0b      	ldr	r2, [pc, #44]	@ (8005bb4 <disk_initialize+0x48>)
 8005b88:	2101      	movs	r1, #1
 8005b8a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b8c:	79fb      	ldrb	r3, [r7, #7]
 8005b8e:	4a09      	ldr	r2, [pc, #36]	@ (8005bb4 <disk_initialize+0x48>)
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	79fa      	ldrb	r2, [r7, #7]
 8005b9a:	4906      	ldr	r1, [pc, #24]	@ (8005bb4 <disk_initialize+0x48>)
 8005b9c:	440a      	add	r2, r1
 8005b9e:	7a12      	ldrb	r2, [r2, #8]
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	4798      	blx	r3
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20001344 	.word	0x20001344

08005bb8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005bb8:	b590      	push	{r4, r7, lr}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
 8005bca:	4a0a      	ldr	r2, [pc, #40]	@ (8005bf4 <disk_read+0x3c>)
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	689c      	ldr	r4, [r3, #8]
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	4a07      	ldr	r2, [pc, #28]	@ (8005bf4 <disk_read+0x3c>)
 8005bd8:	4413      	add	r3, r2
 8005bda:	7a18      	ldrb	r0, [r3, #8]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	47a0      	blx	r4
 8005be4:	4603      	mov	r3, r0
 8005be6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd90      	pop	{r4, r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20001344 	.word	0x20001344

08005bf8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005bf8:	b590      	push	{r4, r7, lr}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	4603      	mov	r3, r0
 8005c06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c34 <disk_write+0x3c>)
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	68dc      	ldr	r4, [r3, #12]
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	4a07      	ldr	r2, [pc, #28]	@ (8005c34 <disk_write+0x3c>)
 8005c18:	4413      	add	r3, r2
 8005c1a:	7a18      	ldrb	r0, [r3, #8]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	47a0      	blx	r4
 8005c24:	4603      	mov	r3, r0
 8005c26:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd90      	pop	{r4, r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20001344 	.word	0x20001344

08005c38 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	4603      	mov	r3, r0
 8005c40:	603a      	str	r2, [r7, #0]
 8005c42:	71fb      	strb	r3, [r7, #7]
 8005c44:	460b      	mov	r3, r1
 8005c46:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005c48:	79fb      	ldrb	r3, [r7, #7]
 8005c4a:	4a09      	ldr	r2, [pc, #36]	@ (8005c70 <disk_ioctl+0x38>)
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	79fa      	ldrb	r2, [r7, #7]
 8005c56:	4906      	ldr	r1, [pc, #24]	@ (8005c70 <disk_ioctl+0x38>)
 8005c58:	440a      	add	r2, r1
 8005c5a:	7a10      	ldrb	r0, [r2, #8]
 8005c5c:	79b9      	ldrb	r1, [r7, #6]
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	4798      	blx	r3
 8005c62:	4603      	mov	r3, r0
 8005c64:	73fb      	strb	r3, [r7, #15]
  return res;
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20001344 	.word	0x20001344

08005c74 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005c88:	e007      	b.n	8005c9a <mem_cpy+0x26>
		*d++ = *s++;
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	1c53      	adds	r3, r2, #1
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	1c59      	adds	r1, r3, #1
 8005c94:	6179      	str	r1, [r7, #20]
 8005c96:	7812      	ldrb	r2, [r2, #0]
 8005c98:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	1e5a      	subs	r2, r3, #1
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f2      	bne.n	8005c8a <mem_cpy+0x16>
}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005cb2:	b480      	push	{r7}
 8005cb4:	b087      	sub	sp, #28
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005cc2:	e005      	b.n	8005cd0 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	617a      	str	r2, [r7, #20]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	1e5a      	subs	r2, r3, #1
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f4      	bne.n	8005cc4 <mem_set+0x12>
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	371c      	adds	r7, #28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005ce8:	b480      	push	{r7}
 8005cea:	b089      	sub	sp, #36	@ 0x24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005d00:	bf00      	nop
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	1e5a      	subs	r2, r3, #1
 8005d06:	607a      	str	r2, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00d      	beq.n	8005d28 <mem_cmp+0x40>
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	61fa      	str	r2, [r7, #28]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	4619      	mov	r1, r3
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	61ba      	str	r2, [r7, #24]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	1acb      	subs	r3, r1, r3
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0ec      	beq.n	8005d02 <mem_cmp+0x1a>
	return r;
 8005d28:	697b      	ldr	r3, [r7, #20]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3724      	adds	r7, #36	@ 0x24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005d40:	e002      	b.n	8005d48 <chk_chr+0x12>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3301      	adds	r3, #1
 8005d46:	607b      	str	r3, [r7, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d005      	beq.n	8005d5c <chk_chr+0x26>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	461a      	mov	r2, r3
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d1f2      	bne.n	8005d42 <chk_chr+0xc>
	return *str;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005d76:	2300      	movs	r3, #0
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	e03b      	b.n	8005df8 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8005d80:	4931      	ldr	r1, [pc, #196]	@ (8005e48 <chk_lock+0xdc>)
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4613      	mov	r3, r2
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	440b      	add	r3, r1
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d02c      	beq.n	8005dee <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005d94:	492c      	ldr	r1, [pc, #176]	@ (8005e48 <chk_lock+0xdc>)
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d120      	bne.n	8005df2 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8005db0:	4925      	ldr	r1, [pc, #148]	@ (8005e48 <chk_lock+0xdc>)
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4613      	mov	r3, r2
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dc8:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d111      	bne.n	8005df2 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005dce:	491e      	ldr	r1, [pc, #120]	@ (8005e48 <chk_lock+0xdc>)
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	440b      	add	r3, r1
 8005ddc:	3308      	adds	r3, #8
 8005dde:	881a      	ldrh	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005de6:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d102      	bne.n	8005df2 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005dec:	e007      	b.n	8005dfe <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8005dee:	2301      	movs	r3, #1
 8005df0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3301      	adds	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d9c0      	bls.n	8005d80 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d109      	bne.n	8005e18 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d102      	bne.n	8005e10 <chk_lock+0xa4>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d101      	bne.n	8005e14 <chk_lock+0xa8>
 8005e10:	2300      	movs	r3, #0
 8005e12:	e013      	b.n	8005e3c <chk_lock+0xd0>
 8005e14:	2312      	movs	r3, #18
 8005e16:	e011      	b.n	8005e3c <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10b      	bne.n	8005e36 <chk_lock+0xca>
 8005e1e:	490a      	ldr	r1, [pc, #40]	@ (8005e48 <chk_lock+0xdc>)
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4613      	mov	r3, r2
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	330a      	adds	r3, #10
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e34:	d101      	bne.n	8005e3a <chk_lock+0xce>
 8005e36:	2310      	movs	r3, #16
 8005e38:	e000      	b.n	8005e3c <chk_lock+0xd0>
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	2000132c 	.word	0x2000132c

08005e4c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005e52:	2300      	movs	r3, #0
 8005e54:	607b      	str	r3, [r7, #4]
 8005e56:	e002      	b.n	8005e5e <enq_lock+0x12>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d809      	bhi.n	8005e78 <enq_lock+0x2c>
 8005e64:	490a      	ldr	r1, [pc, #40]	@ (8005e90 <enq_lock+0x44>)
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	440b      	add	r3, r1
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1ef      	bne.n	8005e58 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	bf14      	ite	ne
 8005e7e:	2301      	movne	r3, #1
 8005e80:	2300      	moveq	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	2000132c 	.word	0x2000132c

08005e94 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	e02e      	b.n	8005f02 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8005ea4:	4959      	ldr	r1, [pc, #356]	@ (800600c <inc_lock+0x178>)
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	4413      	add	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d11d      	bne.n	8005efc <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8005ec0:	4952      	ldr	r1, [pc, #328]	@ (800600c <inc_lock+0x178>)
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	3304      	adds	r3, #4
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ed8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d10e      	bne.n	8005efc <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8005ede:	494b      	ldr	r1, [pc, #300]	@ (800600c <inc_lock+0x178>)
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	3308      	adds	r3, #8
 8005eee:	881a      	ldrh	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ef6:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d006      	beq.n	8005f0a <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3301      	adds	r3, #1
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d9cd      	bls.n	8005ea4 <inc_lock+0x10>
 8005f08:	e000      	b.n	8005f0c <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8005f0a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d148      	bne.n	8005fa4 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	e002      	b.n	8005f1e <inc_lock+0x8a>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d809      	bhi.n	8005f38 <inc_lock+0xa4>
 8005f24:	4939      	ldr	r1, [pc, #228]	@ (800600c <inc_lock+0x178>)
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1ef      	bne.n	8005f18 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d101      	bne.n	8005f42 <inc_lock+0xae>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e05d      	b.n	8005ffe <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f48:	6819      	ldr	r1, [r3, #0]
 8005f4a:	4830      	ldr	r0, [pc, #192]	@ (800600c <inc_lock+0x178>)
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4403      	add	r3, r0
 8005f58:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f60:	6899      	ldr	r1, [r3, #8]
 8005f62:	482a      	ldr	r0, [pc, #168]	@ (800600c <inc_lock+0x178>)
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4613      	mov	r3, r2
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	4413      	add	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4403      	add	r3, r0
 8005f70:	3304      	adds	r3, #4
 8005f72:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f7a:	88d8      	ldrh	r0, [r3, #6]
 8005f7c:	4923      	ldr	r1, [pc, #140]	@ (800600c <inc_lock+0x178>)
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4613      	mov	r3, r2
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	4413      	add	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005f90:	491e      	ldr	r1, [pc, #120]	@ (800600c <inc_lock+0x178>)
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4613      	mov	r3, r2
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	330a      	adds	r3, #10
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00c      	beq.n	8005fc4 <inc_lock+0x130>
 8005faa:	4918      	ldr	r1, [pc, #96]	@ (800600c <inc_lock+0x178>)
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	330a      	adds	r3, #10
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <inc_lock+0x130>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e01c      	b.n	8005ffe <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10b      	bne.n	8005fe2 <inc_lock+0x14e>
 8005fca:	4910      	ldr	r1, [pc, #64]	@ (800600c <inc_lock+0x178>)
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	4413      	add	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	330a      	adds	r3, #10
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	b299      	uxth	r1, r3
 8005fe0:	e001      	b.n	8005fe6 <inc_lock+0x152>
 8005fe2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005fe6:	4809      	ldr	r0, [pc, #36]	@ (800600c <inc_lock+0x178>)
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4613      	mov	r3, r2
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4403      	add	r3, r0
 8005ff4:	330a      	adds	r3, #10
 8005ff6:	460a      	mov	r2, r1
 8005ff8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3301      	adds	r3, #1
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	2000132c 	.word	0x2000132c

08006010 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3b01      	subs	r3, #1
 800601c:	607b      	str	r3, [r7, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d82e      	bhi.n	8006082 <dec_lock+0x72>
		n = Files[i].ctr;
 8006024:	491b      	ldr	r1, [pc, #108]	@ (8006094 <dec_lock+0x84>)
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	4613      	mov	r3, r2
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	330a      	adds	r3, #10
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006038:	89fb      	ldrh	r3, [r7, #14]
 800603a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800603e:	d101      	bne.n	8006044 <dec_lock+0x34>
 8006040:	2300      	movs	r3, #0
 8006042:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8006044:	89fb      	ldrh	r3, [r7, #14]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <dec_lock+0x40>
 800604a:	89fb      	ldrh	r3, [r7, #14]
 800604c:	3b01      	subs	r3, #1
 800604e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006050:	4910      	ldr	r1, [pc, #64]	@ (8006094 <dec_lock+0x84>)
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	4613      	mov	r3, r2
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	330a      	adds	r3, #10
 8006060:	89fa      	ldrh	r2, [r7, #14]
 8006062:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006064:	89fb      	ldrh	r3, [r7, #14]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d108      	bne.n	800607c <dec_lock+0x6c>
 800606a:	490a      	ldr	r1, [pc, #40]	@ (8006094 <dec_lock+0x84>)
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	4613      	mov	r3, r2
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	737b      	strb	r3, [r7, #13]
 8006080:	e001      	b.n	8006086 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006082:	2302      	movs	r3, #2
 8006084:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006086:	7b7b      	ldrb	r3, [r7, #13]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	2000132c 	.word	0x2000132c

08006098 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80060a0:	2300      	movs	r3, #0
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	e016      	b.n	80060d4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80060a6:	4910      	ldr	r1, [pc, #64]	@ (80060e8 <clear_lock+0x50>)
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4613      	mov	r3, r2
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d108      	bne.n	80060ce <clear_lock+0x36>
 80060bc:	490a      	ldr	r1, [pc, #40]	@ (80060e8 <clear_lock+0x50>)
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4613      	mov	r3, r2
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	2200      	movs	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3301      	adds	r3, #1
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d9e5      	bls.n	80060a6 <clear_lock+0xe>
	}
}
 80060da:	bf00      	nop
 80060dc:	bf00      	nop
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	2000132c 	.word	0x2000132c

080060ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060fe:	791b      	ldrb	r3, [r3, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d040      	beq.n	8006186 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006114:	7858      	ldrb	r0, [r3, #1]
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	2301      	movs	r3, #1
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	f7ff fd6c 	bl	8005bf8 <disk_write>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <sync_window+0x40>
			res = FR_DISK_ERR;
 8006126:	2301      	movs	r3, #1
 8006128:	73fb      	strb	r3, [r7, #15]
 800612a:	e02c      	b.n	8006186 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006132:	2200      	movs	r2, #0
 8006134:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	1ad2      	subs	r2, r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	429a      	cmp	r2, r3
 800614c:	d21b      	bcs.n	8006186 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006154:	78db      	ldrb	r3, [r3, #3]
 8006156:	613b      	str	r3, [r7, #16]
 8006158:	e012      	b.n	8006180 <sync_window+0x94>
					wsect += fs->fsize;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4413      	add	r3, r2
 8006166:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800616e:	7858      	ldrb	r0, [r3, #1]
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	2301      	movs	r3, #1
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	f7ff fd3f 	bl	8005bf8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	3b01      	subs	r3, #1
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d8e9      	bhi.n	800615a <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8006186:	7bfb      	ldrb	r3, [r7, #15]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d01e      	beq.n	80061ea <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff ff9d 	bl	80060ec <sync_window>
 80061b2:	4603      	mov	r3, r0
 80061b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d116      	bne.n	80061ea <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061c2:	7858      	ldrb	r0, [r3, #1]
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	2301      	movs	r3, #1
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	f7ff fcf5 	bl	8005bb8 <disk_read>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d004      	beq.n	80061de <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80061d4:	f04f 33ff 	mov.w	r3, #4294967295
 80061d8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80061da:	2301      	movs	r3, #1
 80061dc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061e4:	461a      	mov	r2, r3
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff ff75 	bl	80060ec <sync_window>
 8006202:	4603      	mov	r3, r0
 8006204:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006206:	7bfb      	ldrb	r3, [r7, #15]
 8006208:	2b00      	cmp	r3, #0
 800620a:	f040 80ad 	bne.w	8006368 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b03      	cmp	r3, #3
 8006218:	f040 8098 	bne.w	800634c <sync_fs+0x158>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006222:	795b      	ldrb	r3, [r3, #5]
 8006224:	2b01      	cmp	r3, #1
 8006226:	f040 8091 	bne.w	800634c <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006232:	895b      	ldrh	r3, [r3, #10]
 8006234:	461a      	mov	r2, r3
 8006236:	2100      	movs	r1, #0
 8006238:	f7ff fd3b 	bl	8005cb2 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2255      	movs	r2, #85	@ 0x55
 8006240:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	22aa      	movs	r2, #170	@ 0xaa
 8006248:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2252      	movs	r2, #82	@ 0x52
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2252      	movs	r2, #82	@ 0x52
 8006256:	705a      	strb	r2, [r3, #1]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2261      	movs	r2, #97	@ 0x61
 800625c:	709a      	strb	r2, [r3, #2]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2241      	movs	r2, #65	@ 0x41
 8006262:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2272      	movs	r2, #114	@ 0x72
 8006268:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2272      	movs	r2, #114	@ 0x72
 8006270:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2241      	movs	r2, #65	@ 0x41
 8006278:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2261      	movs	r2, #97	@ 0x61
 8006280:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	b2da      	uxtb	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	b29b      	uxth	r3, r3
 800629e:	0a1b      	lsrs	r3, r3, #8
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	0c1b      	lsrs	r3, r3, #16
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	0e1b      	lsrs	r3, r3, #24
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	0a1b      	lsrs	r3, r3, #8
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	0c1b      	lsrs	r3, r3, #16
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	0e1b      	lsrs	r3, r3, #24
 8006310:	b2da      	uxtb	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	3301      	adds	r3, #1
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006328:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006330:	7858      	ldrb	r0, [r3, #1]
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800633a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800633c:	2301      	movs	r3, #1
 800633e:	f7ff fc5b 	bl	8005bf8 <disk_write>
			fs->fsi_flag = 0;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006348:	2200      	movs	r2, #0
 800634a:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006352:	785b      	ldrb	r3, [r3, #1]
 8006354:	2200      	movs	r2, #0
 8006356:	2100      	movs	r1, #0
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff fc6d 	bl	8005c38 <disk_ioctl>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006368:	7bfb      	ldrb	r3, [r7, #15]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006372:	b480      	push	{r7}
 8006374:	b083      	sub	sp, #12
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	3b02      	subs	r3, #2
 8006380:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	3b02      	subs	r3, #2
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d301      	bcc.n	8006396 <clust2sect+0x24>
 8006392:	2300      	movs	r3, #0
 8006394:	e00c      	b.n	80063b0 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800639c:	789b      	ldrb	r3, [r3, #2]
 800639e:	461a      	mov	r2, r3
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	fb03 f202 	mul.w	r2, r3, r2
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ae:	4413      	add	r3, r2
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d906      	bls.n	80063da <get_fat+0x1e>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d302      	bcc.n	80063e0 <get_fat+0x24>
		val = 1;	/* Internal error */
 80063da:	2301      	movs	r3, #1
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	e0e3      	b.n	80065a8 <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80063e0:	f04f 33ff 	mov.w	r3, #4294967295
 80063e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	f000 8097 	beq.w	8006522 <get_fat+0x166>
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	f300 80cd 	bgt.w	8006594 <get_fat+0x1d8>
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d002      	beq.n	8006404 <get_fat+0x48>
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d05e      	beq.n	80064c0 <get_fat+0x104>
 8006402:	e0c7      	b.n	8006594 <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	085b      	lsrs	r3, r3, #1
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006418:	6a1a      	ldr	r2, [r3, #32]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006420:	895b      	ldrh	r3, [r3, #10]
 8006422:	4619      	mov	r1, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	fbb3 f3f1 	udiv	r3, r3, r1
 800642a:	4413      	add	r3, r2
 800642c:	4619      	mov	r1, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7ff feae 	bl	8006190 <move_window>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	f040 80af 	bne.w	800659a <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	60fa      	str	r2, [r7, #12]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006448:	8952      	ldrh	r2, [r2, #10]
 800644a:	fbb3 f1f2 	udiv	r1, r3, r2
 800644e:	fb01 f202 	mul.w	r2, r1, r2
 8006452:	1a9b      	subs	r3, r3, r2
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	5cd3      	ldrb	r3, [r2, r3]
 8006458:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006460:	6a1a      	ldr	r2, [r3, #32]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006468:	895b      	ldrh	r3, [r3, #10]
 800646a:	4619      	mov	r1, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006472:	4413      	add	r3, r2
 8006474:	4619      	mov	r1, r3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff fe8a 	bl	8006190 <move_window>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	f040 808d 	bne.w	800659e <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800648a:	895b      	ldrh	r3, [r3, #10]
 800648c:	461a      	mov	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	fbb3 f1f2 	udiv	r1, r3, r2
 8006494:	fb01 f202 	mul.w	r2, r1, r2
 8006498:	1a9b      	subs	r3, r3, r2
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	5cd3      	ldrb	r3, [r2, r3]
 800649e:	021b      	lsls	r3, r3, #8
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <get_fat+0xfa>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	091b      	lsrs	r3, r3, #4
 80064b4:	e002      	b.n	80064bc <get_fat+0x100>
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064bc:	617b      	str	r3, [r7, #20]
			break;
 80064be:	e073      	b.n	80065a8 <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064c6:	6a1a      	ldr	r2, [r3, #32]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ce:	895b      	ldrh	r3, [r3, #10]
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	4619      	mov	r1, r3
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80064dc:	4413      	add	r3, r2
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff fe55 	bl	8006190 <move_window>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d15a      	bne.n	80065a2 <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80064f6:	8952      	ldrh	r2, [r2, #10]
 80064f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80064fc:	fb01 f202 	mul.w	r2, r1, r2
 8006500:	1a9b      	subs	r3, r3, r2
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	4413      	add	r3, r2
 8006506:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	3301      	adds	r3, #1
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	021b      	lsls	r3, r3, #8
 8006510:	b21a      	sxth	r2, r3
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	b21b      	sxth	r3, r3
 8006518:	4313      	orrs	r3, r2
 800651a:	b21b      	sxth	r3, r3
 800651c:	b29b      	uxth	r3, r3
 800651e:	617b      	str	r3, [r7, #20]
			break;
 8006520:	e042      	b.n	80065a8 <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006528:	6a1a      	ldr	r2, [r3, #32]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006530:	895b      	ldrh	r3, [r3, #10]
 8006532:	089b      	lsrs	r3, r3, #2
 8006534:	b29b      	uxth	r3, r3
 8006536:	4619      	mov	r1, r3
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	fbb3 f3f1 	udiv	r3, r3, r1
 800653e:	4413      	add	r3, r2
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7ff fe24 	bl	8006190 <move_window>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d12b      	bne.n	80065a6 <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006558:	8952      	ldrh	r2, [r2, #10]
 800655a:	fbb3 f1f2 	udiv	r1, r3, r2
 800655e:	fb01 f202 	mul.w	r2, r1, r2
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	4413      	add	r3, r2
 8006568:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	3303      	adds	r3, #3
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	061a      	lsls	r2, r3, #24
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	3302      	adds	r3, #2
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	041b      	lsls	r3, r3, #16
 800657a:	431a      	orrs	r2, r3
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	3301      	adds	r3, #1
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	4313      	orrs	r3, r2
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	7812      	ldrb	r2, [r2, #0]
 800658a:	4313      	orrs	r3, r2
 800658c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006590:	617b      	str	r3, [r7, #20]
			break;
 8006592:	e009      	b.n	80065a8 <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 8006594:	2301      	movs	r3, #1
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e006      	b.n	80065a8 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800659a:	bf00      	nop
 800659c:	e004      	b.n	80065a8 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800659e:	bf00      	nop
 80065a0:	e002      	b.n	80065a8 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80065a2:	bf00      	nop
 80065a4:	e000      	b.n	80065a8 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80065a6:	bf00      	nop
		}
	}

	return val;
 80065a8:	697b      	ldr	r3, [r7, #20]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b088      	sub	sp, #32
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d906      	bls.n	80065d2 <put_fat+0x20>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d302      	bcc.n	80065d8 <put_fat+0x26>
		res = FR_INT_ERR;
 80065d2:	2302      	movs	r3, #2
 80065d4:	77fb      	strb	r3, [r7, #31]
 80065d6:	e13a      	b.n	800684e <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	f000 80d0 	beq.w	8006786 <put_fat+0x1d4>
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	f300 8127 	bgt.w	800683a <put_fat+0x288>
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d003      	beq.n	80065f8 <put_fat+0x46>
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	f000 808f 	beq.w	8006714 <put_fat+0x162>
 80065f6:	e120      	b.n	800683a <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	085b      	lsrs	r3, r3, #1
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	4413      	add	r3, r2
 8006604:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800660c:	6a1a      	ldr	r2, [r3, #32]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006614:	895b      	ldrh	r3, [r3, #10]
 8006616:	4619      	mov	r1, r3
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	fbb3 f3f1 	udiv	r3, r3, r1
 800661e:	4413      	add	r3, r2
 8006620:	4619      	mov	r1, r3
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f7ff fdb4 	bl	8006190 <move_window>
 8006628:	4603      	mov	r3, r0
 800662a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800662c:	7ffb      	ldrb	r3, [r7, #31]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f040 8106 	bne.w	8006840 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	617a      	str	r2, [r7, #20]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006640:	8952      	ldrh	r2, [r2, #10]
 8006642:	fbb3 f1f2 	udiv	r1, r3, r2
 8006646:	fb01 f202 	mul.w	r2, r1, r2
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00d      	beq.n	8006678 <put_fat+0xc6>
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	b25b      	sxtb	r3, r3
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	b25a      	sxtb	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	b2db      	uxtb	r3, r3
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	b25b      	sxtb	r3, r3
 8006670:	4313      	orrs	r3, r2
 8006672:	b25b      	sxtb	r3, r3
 8006674:	b2db      	uxtb	r3, r3
 8006676:	e001      	b.n	800667c <put_fat+0xca>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006686:	2201      	movs	r2, #1
 8006688:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006690:	6a1a      	ldr	r2, [r3, #32]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006698:	895b      	ldrh	r3, [r3, #10]
 800669a:	4619      	mov	r1, r3
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	fbb3 f3f1 	udiv	r3, r3, r1
 80066a2:	4413      	add	r3, r2
 80066a4:	4619      	mov	r1, r3
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f7ff fd72 	bl	8006190 <move_window>
 80066ac:	4603      	mov	r3, r0
 80066ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066b0:	7ffb      	ldrb	r3, [r7, #31]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f040 80c6 	bne.w	8006844 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066be:	895b      	ldrh	r3, [r3, #10]
 80066c0:	461a      	mov	r2, r3
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80066c8:	fb01 f202 	mul.w	r2, r1, r2
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4413      	add	r3, r2
 80066d2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <put_fat+0x134>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	091b      	lsrs	r3, r3, #4
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	e00e      	b.n	8006704 <put_fat+0x152>
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	b25b      	sxtb	r3, r3
 80066ec:	f023 030f 	bic.w	r3, r3, #15
 80066f0:	b25a      	sxtb	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	0a1b      	lsrs	r3, r3, #8
 80066f6:	b25b      	sxtb	r3, r3
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	b25b      	sxtb	r3, r3
 80066fe:	4313      	orrs	r3, r2
 8006700:	b25b      	sxtb	r3, r3
 8006702:	b2db      	uxtb	r3, r3
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800670e:	2201      	movs	r2, #1
 8006710:	711a      	strb	r2, [r3, #4]
			break;
 8006712:	e09c      	b.n	800684e <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800671a:	6a1a      	ldr	r2, [r3, #32]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006722:	895b      	ldrh	r3, [r3, #10]
 8006724:	085b      	lsrs	r3, r3, #1
 8006726:	b29b      	uxth	r3, r3
 8006728:	4619      	mov	r1, r3
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006730:	4413      	add	r3, r2
 8006732:	4619      	mov	r1, r3
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff fd2b 	bl	8006190 <move_window>
 800673a:	4603      	mov	r3, r0
 800673c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800673e:	7ffb      	ldrb	r3, [r7, #31]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f040 8081 	bne.w	8006848 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006750:	8952      	ldrh	r2, [r2, #10]
 8006752:	fbb3 f1f2 	udiv	r1, r3, r2
 8006756:	fb01 f202 	mul.w	r2, r1, r2
 800675a:	1a9b      	subs	r3, r3, r2
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	b2da      	uxtb	r2, r3
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	b29b      	uxth	r3, r3
 800676e:	0a1b      	lsrs	r3, r3, #8
 8006770:	b29a      	uxth	r2, r3
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	3301      	adds	r3, #1
 8006776:	b2d2      	uxtb	r2, r2
 8006778:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006780:	2201      	movs	r2, #1
 8006782:	711a      	strb	r2, [r3, #4]
			break;
 8006784:	e063      	b.n	800684e <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800678c:	6a1a      	ldr	r2, [r3, #32]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006794:	895b      	ldrh	r3, [r3, #10]
 8006796:	089b      	lsrs	r3, r3, #2
 8006798:	b29b      	uxth	r3, r3
 800679a:	4619      	mov	r1, r3
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	fbb3 f3f1 	udiv	r3, r3, r1
 80067a2:	4413      	add	r3, r2
 80067a4:	4619      	mov	r1, r3
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f7ff fcf2 	bl	8006190 <move_window>
 80067ac:	4603      	mov	r3, r0
 80067ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067b0:	7ffb      	ldrb	r3, [r7, #31]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d14a      	bne.n	800684c <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80067c0:	8952      	ldrh	r2, [r2, #10]
 80067c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80067c6:	fb01 f202 	mul.w	r2, r1, r2
 80067ca:	1a9b      	subs	r3, r3, r2
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	3303      	adds	r3, #3
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	061a      	lsls	r2, r3, #24
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	3302      	adds	r3, #2
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	041b      	lsls	r3, r3, #16
 80067e2:	431a      	orrs	r2, r3
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	3301      	adds	r3, #1
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	021b      	lsls	r3, r3, #8
 80067ec:	4313      	orrs	r3, r2
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	7812      	ldrb	r2, [r2, #0]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	b2da      	uxtb	r2, r3
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	b29b      	uxth	r3, r3
 800680a:	0a1b      	lsrs	r3, r3, #8
 800680c:	b29a      	uxth	r2, r3
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	3301      	adds	r3, #1
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	0c1a      	lsrs	r2, r3, #16
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	3302      	adds	r3, #2
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	0e1a      	lsrs	r2, r3, #24
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	3303      	adds	r3, #3
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006834:	2201      	movs	r2, #1
 8006836:	711a      	strb	r2, [r3, #4]
			break;
 8006838:	e009      	b.n	800684e <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 800683a:	2302      	movs	r3, #2
 800683c:	77fb      	strb	r3, [r7, #31]
 800683e:	e006      	b.n	800684e <put_fat+0x29c>
			if (res != FR_OK) break;
 8006840:	bf00      	nop
 8006842:	e004      	b.n	800684e <put_fat+0x29c>
			if (res != FR_OK) break;
 8006844:	bf00      	nop
 8006846:	e002      	b.n	800684e <put_fat+0x29c>
			if (res != FR_OK) break;
 8006848:	bf00      	nop
 800684a:	e000      	b.n	800684e <put_fat+0x29c>
			if (res != FR_OK) break;
 800684c:	bf00      	nop
		}
	}

	return res;
 800684e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3720      	adds	r7, #32
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d906      	bls.n	8006876 <remove_chain+0x1e>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d302      	bcc.n	800687c <remove_chain+0x24>
		res = FR_INT_ERR;
 8006876:	2302      	movs	r3, #2
 8006878:	73fb      	strb	r3, [r7, #15]
 800687a:	e049      	b.n	8006910 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006880:	e03b      	b.n	80068fa <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff fd99 	bl	80063bc <get_fat>
 800688a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d03b      	beq.n	800690a <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d102      	bne.n	800689e <remove_chain+0x46>
 8006898:	2302      	movs	r3, #2
 800689a:	73fb      	strb	r3, [r7, #15]
 800689c:	e038      	b.n	8006910 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a4:	d102      	bne.n	80068ac <remove_chain+0x54>
 80068a6:	2301      	movs	r3, #1
 80068a8:	73fb      	strb	r3, [r7, #15]
 80068aa:	e031      	b.n	8006910 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80068ac:	2200      	movs	r2, #0
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff fe7e 	bl	80065b2 <put_fat>
 80068b6:	4603      	mov	r3, r0
 80068b8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d126      	bne.n	800690e <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068cc:	d013      	beq.n	80068f6 <remove_chain+0x9e>
				fs->free_clust++;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	3301      	adds	r3, #1
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80068de:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068e6:	795b      	ldrb	r3, [r3, #5]
 80068e8:	f043 0301 	orr.w	r3, r3, #1
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f4:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	d3bc      	bcc.n	8006882 <remove_chain+0x2a>
 8006908:	e002      	b.n	8006910 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800690a:	bf00      	nop
 800690c:	e000      	b.n	8006910 <remove_chain+0xb8>
			if (res != FR_OK) break;
 800690e:	bf00      	nop
		}
	}

	return res;
 8006910:	7bfb      	ldrb	r3, [r7, #15]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b086      	sub	sp, #24
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d111      	bne.n	800694e <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d006      	beq.n	8006948 <create_chain+0x2e>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	429a      	cmp	r2, r3
 8006946:	d31d      	bcc.n	8006984 <create_chain+0x6a>
 8006948:	2301      	movs	r3, #1
 800694a:	613b      	str	r3, [r7, #16]
 800694c:	e01a      	b.n	8006984 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff fd33 	bl	80063bc <get_fat>
 8006956:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d801      	bhi.n	8006962 <create_chain+0x48>
 800695e:	2301      	movs	r3, #1
 8006960:	e07f      	b.n	8006a62 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d101      	bne.n	800696e <create_chain+0x54>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	e079      	b.n	8006a62 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	429a      	cmp	r2, r3
 800697a:	d201      	bcs.n	8006980 <create_chain+0x66>
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	e070      	b.n	8006a62 <create_chain+0x148>
		scl = clst;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	3301      	adds	r3, #1
 800698c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	429a      	cmp	r2, r3
 800699a:	d307      	bcc.n	80069ac <create_chain+0x92>
			ncl = 2;
 800699c:	2302      	movs	r3, #2
 800699e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d901      	bls.n	80069ac <create_chain+0x92>
 80069a8:	2300      	movs	r3, #0
 80069aa:	e05a      	b.n	8006a62 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80069ac:	6979      	ldr	r1, [r7, #20]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff fd04 	bl	80063bc <get_fat>
 80069b4:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00e      	beq.n	80069da <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c2:	d002      	beq.n	80069ca <create_chain+0xb0>
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d101      	bne.n	80069ce <create_chain+0xb4>
			return cs;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	e049      	b.n	8006a62 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d1d8      	bne.n	8006988 <create_chain+0x6e>
 80069d6:	2300      	movs	r3, #0
 80069d8:	e043      	b.n	8006a62 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 80069da:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80069dc:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 80069e0:	6979      	ldr	r1, [r7, #20]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff fde5 	bl	80065b2 <put_fat>
 80069e8:	4603      	mov	r3, r0
 80069ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d109      	bne.n	8006a06 <create_chain+0xec>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d006      	beq.n	8006a06 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff fdd8 	bl	80065b2 <put_fat>
 8006a02:	4603      	mov	r3, r0
 8006a04:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d121      	bne.n	8006a50 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a12:	461a      	mov	r2, r3
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a24:	d01c      	beq.n	8006a60 <create_chain+0x146>
			fs->free_clust--;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006a36:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a3e:	795b      	ldrb	r3, [r3, #5]
 8006a40:	f043 0301 	orr.w	r3, r3, #1
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a4c:	715a      	strb	r2, [r3, #5]
 8006a4e:	e007      	b.n	8006a60 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d102      	bne.n	8006a5c <create_chain+0x142>
 8006a56:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5a:	e000      	b.n	8006a5e <create_chain+0x144>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006a60:	697b      	ldr	r3, [r7, #20]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b087      	sub	sp, #28
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a8c:	895b      	ldrh	r3, [r3, #10]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006a9c:	6812      	ldr	r2, [r2, #0]
 8006a9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006aa2:	7892      	ldrb	r2, [r2, #2]
 8006aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	1d1a      	adds	r2, r3, #4
 8006aae:	613a      	str	r2, [r7, #16]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <clmt_clust+0x54>
 8006aba:	2300      	movs	r3, #0
 8006abc:	e010      	b.n	8006ae0 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d307      	bcc.n	8006ad6 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006ad4:	e7e9      	b.n	8006aaa <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8006ad6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	4413      	add	r3, r2
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	371c      	adds	r7, #28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b00:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d009      	beq.n	8006b26 <dir_sdi+0x3a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d301      	bcc.n	8006b2a <dir_sdi+0x3e>
		return FR_INT_ERR;
 8006b26:	2302      	movs	r3, #2
 8006b28:	e0aa      	b.n	8006c80 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d110      	bne.n	8006b52 <dir_sdi+0x66>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d107      	bne.n	8006b52 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b50:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d115      	bne.n	8006b84 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b64:	891b      	ldrh	r3, [r3, #8]
 8006b66:	461a      	mov	r2, r3
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d301      	bcc.n	8006b72 <dir_sdi+0x86>
			return FR_INT_ERR;
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e086      	b.n	8006c80 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b80:	613b      	str	r3, [r7, #16]
 8006b82:	e043      	b.n	8006c0c <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b90:	895b      	ldrh	r3, [r3, #10]
 8006b92:	095b      	lsrs	r3, r3, #5
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	461a      	mov	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ba4:	789b      	ldrb	r3, [r3, #2]
 8006ba6:	fb02 f303 	mul.w	r3, r2, r3
 8006baa:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006bac:	e021      	b.n	8006bf2 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6979      	ldr	r1, [r7, #20]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff fbff 	bl	80063bc <get_fat>
 8006bbe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc6:	d101      	bne.n	8006bcc <dir_sdi+0xe0>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e059      	b.n	8006c80 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d909      	bls.n	8006be6 <dir_sdi+0xfa>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d301      	bcc.n	8006bea <dir_sdi+0xfe>
				return FR_INT_ERR;
 8006be6:	2302      	movs	r3, #2
 8006be8:	e04a      	b.n	8006c80 <dir_sdi+0x194>
			idx -= ic;
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d2d9      	bcs.n	8006bae <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6979      	ldr	r1, [r7, #20]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7ff fbb4 	bl	8006372 <clust2sect>
 8006c0a:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c12:	461a      	mov	r2, r3
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <dir_sdi+0x136>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e02e      	b.n	8006c80 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c2e:	895b      	ldrh	r3, [r3, #10]
 8006c30:	095b      	lsrs	r3, r3, #5
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	4413      	add	r3, r2
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006c46:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4618      	mov	r0, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c5e:	895b      	ldrh	r3, [r3, #10]
 8006c60:	095b      	lsrs	r3, r3, #5
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	461a      	mov	r2, r3
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c6c:	fb01 f202 	mul.w	r2, r1, r2
 8006c70:	1a9b      	subs	r3, r3, r2
 8006c72:	015b      	lsls	r3, r3, #5
 8006c74:	4403      	add	r3, r0
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006c7c:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006c88:	b590      	push	{r4, r7, lr}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c98:	88db      	ldrh	r3, [r3, #6]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <dir_next+0x2a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <dir_next+0x2e>
		return FR_NO_FILE;
 8006cb2:	2304      	movs	r3, #4
 8006cb4:	e12e      	b.n	8006f14 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cc2:	895b      	ldrh	r3, [r3, #10]
 8006cc4:	095b      	lsrs	r3, r3, #5
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	461a      	mov	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cd0:	fb01 f202 	mul.w	r2, r1, r2
 8006cd4:	1a9b      	subs	r3, r3, r2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f040 80fa 	bne.w	8006ed0 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006cec:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10d      	bne.n	8006d16 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d06:	891b      	ldrh	r3, [r3, #8]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	f0c0 80df 	bcc.w	8006ed0 <dir_next+0x248>
				return FR_NO_FILE;
 8006d12:	2304      	movs	r3, #4
 8006d14:	e0fe      	b.n	8006f14 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d22:	895b      	ldrh	r3, [r3, #10]
 8006d24:	095b      	lsrs	r3, r3, #5
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d36:	6812      	ldr	r2, [r2, #0]
 8006d38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006d3c:	7892      	ldrb	r2, [r2, #2]
 8006d3e:	3a01      	subs	r2, #1
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f040 80c4 	bne.w	8006ed0 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	f7ff fb2e 	bl	80063bc <get_fat>
 8006d60:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d801      	bhi.n	8006d6c <dir_next+0xe4>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e0d3      	b.n	8006f14 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d72:	d101      	bne.n	8006d78 <dir_next+0xf0>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e0cd      	b.n	8006f14 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	f0c0 808e 	bcc.w	8006eaa <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <dir_next+0x110>
 8006d94:	2304      	movs	r3, #4
 8006d96:	e0bd      	b.n	8006f14 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	4619      	mov	r1, r3
 8006daa:	4610      	mov	r0, r2
 8006dac:	f7ff fdb5 	bl	800691a <create_chain>
 8006db0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <dir_next+0x134>
 8006db8:	2307      	movs	r3, #7
 8006dba:	e0ab      	b.n	8006f14 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d101      	bne.n	8006dc6 <dir_next+0x13e>
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	e0a6      	b.n	8006f14 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dcc:	d101      	bne.n	8006dd2 <dir_next+0x14a>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e0a0      	b.n	8006f14 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff f986 	bl	80060ec <sync_window>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <dir_next+0x162>
 8006de6:	2301      	movs	r3, #1
 8006de8:	e094      	b.n	8006f14 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4618      	mov	r0, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e00:	895b      	ldrh	r3, [r3, #10]
 8006e02:	461a      	mov	r2, r3
 8006e04:	2100      	movs	r1, #0
 8006e06:	f7fe ff54 	bl	8005cb2 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e18:	681c      	ldr	r4, [r3, #0]
 8006e1a:	6979      	ldr	r1, [r7, #20]
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	f7ff faa8 	bl	8006372 <clust2sect>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8006e28:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	e021      	b.n	8006e74 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7ff f94f 	bl	80060ec <sync_window>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <dir_next+0x1d0>
 8006e54:	2301      	movs	r3, #1
 8006e56:	e05d      	b.n	8006f14 <dir_next+0x28c>
						dp->fs->winsect++;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8006e64:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006e66:	3201      	adds	r2, #1
 8006e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	3301      	adds	r3, #1
 8006e72:	613b      	str	r3, [r7, #16]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e80:	789b      	ldrb	r3, [r3, #2]
 8006e82:	461a      	mov	r2, r3
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d3d2      	bcc.n	8006e30 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	1acb      	subs	r3, r1, r3
 8006ea4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6979      	ldr	r1, [r7, #20]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff fa56 	bl	8006372 <clust2sect>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ece:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eda:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ef2:	895b      	ldrh	r3, [r3, #10]
 8006ef4:	095b      	lsrs	r3, r3, #5
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	461a      	mov	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f00:	fb01 f202 	mul.w	r2, r1, r2
 8006f04:	1a9b      	subs	r3, r3, r2
 8006f06:	015b      	lsls	r3, r3, #5
 8006f08:	4403      	add	r3, r0
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f10:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	371c      	adds	r7, #28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd90      	pop	{r4, r7, pc}

08006f1c <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006f26:	2100      	movs	r1, #0
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7ff fddf 	bl	8006aec <dir_sdi>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d135      	bne.n	8006fa4 <dir_alloc+0x88>
		n = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4610      	mov	r0, r2
 8006f50:	f7ff f91e 	bl	8006190 <move_window>
 8006f54:	4603      	mov	r3, r0
 8006f56:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d121      	bne.n	8006fa2 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2be5      	cmp	r3, #229	@ 0xe5
 8006f6a:	d006      	beq.n	8006f7a <dir_alloc+0x5e>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d107      	bne.n	8006f8a <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	60bb      	str	r3, [r7, #8]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d102      	bne.n	8006f8e <dir_alloc+0x72>
 8006f88:	e00c      	b.n	8006fa4 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006f8e:	2101      	movs	r1, #1
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff fe79 	bl	8006c88 <dir_next>
 8006f96:	4603      	mov	r3, r0
 8006f98:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d0cd      	beq.n	8006f3c <dir_alloc+0x20>
 8006fa0:	e000      	b.n	8006fa4 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8006fa2:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d101      	bne.n	8006fae <dir_alloc+0x92>
 8006faa:	2307      	movs	r3, #7
 8006fac:	73fb      	strb	r3, [r7, #15]
	return res;
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	331b      	adds	r3, #27
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	021b      	lsls	r3, r3, #8
 8006fca:	b21a      	sxth	r2, r3
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	331a      	adds	r3, #26
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	b21b      	sxth	r3, r3
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	b21b      	sxth	r3, r3
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b03      	cmp	r3, #3
 8006fe6:	d10f      	bne.n	8007008 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	3315      	adds	r3, #21
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	b21a      	sxth	r2, r3
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	3314      	adds	r3, #20
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	b21b      	sxth	r3, r3
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	b21b      	sxth	r3, r3
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	041b      	lsls	r3, r3, #16
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	4313      	orrs	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]

	return cl;
 8007008:	68fb      	ldr	r3, [r7, #12]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	331a      	adds	r3, #26
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	b2d2      	uxtb	r2, r2
 8007028:	701a      	strb	r2, [r3, #0]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	0a1b      	lsrs	r3, r3, #8
 8007030:	b29a      	uxth	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	331b      	adds	r3, #27
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	0c1a      	lsrs	r2, r3, #16
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3314      	adds	r3, #20
 8007042:	b2d2      	uxtb	r2, r2
 8007044:	701a      	strb	r2, [r3, #0]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	0c1b      	lsrs	r3, r3, #16
 800704a:	b29b      	uxth	r3, r3
 800704c:	0a1b      	lsrs	r3, r3, #8
 800704e:	b29a      	uxth	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3315      	adds	r3, #21
 8007054:	b2d2      	uxtb	r2, r2
 8007056:	701a      	strb	r2, [r3, #0]
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800706c:	2100      	movs	r1, #0
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff fd3c 	bl	8006aec <dir_sdi>
 8007074:	4603      	mov	r3, r0
 8007076:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <dir_find+0x1e>
 800707e:	7dfb      	ldrb	r3, [r7, #23]
 8007080:	e03f      	b.n	8007102 <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	4619      	mov	r1, r3
 8007094:	4610      	mov	r0, r2
 8007096:	f7ff f87b 	bl	8006190 <move_window>
 800709a:	4603      	mov	r3, r0
 800709c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800709e:	7dfb      	ldrb	r3, [r7, #23]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d12a      	bne.n	80070fa <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d102      	bne.n	80070c0 <dir_find+0x5c>
 80070ba:	2304      	movs	r3, #4
 80070bc:	75fb      	strb	r3, [r7, #23]
 80070be:	e01f      	b.n	8007100 <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	330b      	adds	r3, #11
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10b      	bne.n	80070e6 <dir_find+0x82>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	220b      	movs	r2, #11
 80070d8:	4619      	mov	r1, r3
 80070da:	6938      	ldr	r0, [r7, #16]
 80070dc:	f7fe fe04 	bl	8005ce8 <mem_cmp>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00b      	beq.n	80070fe <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80070e6:	2100      	movs	r1, #0
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff fdcd 	bl	8006c88 <dir_next>
 80070ee:	4603      	mov	r3, r0
 80070f0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0c4      	beq.n	8007082 <dir_find+0x1e>
 80070f8:	e002      	b.n	8007100 <dir_find+0x9c>
		if (res != FR_OK) break;
 80070fa:	bf00      	nop
 80070fc:	e000      	b.n	8007100 <dir_find+0x9c>
			break;
 80070fe:	bf00      	nop

	return res;
 8007100:	7dfb      	ldrb	r3, [r7, #23]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b084      	sub	sp, #16
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007112:	2101      	movs	r1, #1
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff ff01 	bl	8006f1c <dir_alloc>
 800711a:	4603      	mov	r3, r0
 800711c:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800711e:	7bfb      	ldrb	r3, [r7, #15]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d12d      	bne.n	8007180 <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	4619      	mov	r1, r3
 8007136:	4610      	mov	r0, r2
 8007138:	f7ff f82a 	bl	8006190 <move_window>
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d11c      	bne.n	8007180 <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	2220      	movs	r2, #32
 8007150:	2100      	movs	r1, #0
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe fdad 	bl	8005cb2 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800715e:	6958      	ldr	r0, [r3, #20]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	220b      	movs	r2, #11
 800716a:	4619      	mov	r1, r3
 800716c:	f7fe fd82 	bl	8005c74 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800717c:	2201      	movs	r2, #1
 800717e:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8007180:	7bfb      	ldrb	r3, [r7, #15]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	e002      	b.n	80071a4 <create_name+0x18>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	3301      	adds	r3, #1
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80071aa:	d0f8      	beq.n	800719e <create_name+0x12>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80071b2:	d0f4      	beq.n	800719e <create_name+0x12>
	sfn = dp->fn;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80071be:	220b      	movs	r2, #11
 80071c0:	2120      	movs	r1, #32
 80071c2:	68b8      	ldr	r0, [r7, #8]
 80071c4:	f7fe fd75 	bl	8005cb2 <mem_set>
	si = i = b = 0; ni = 8;
 80071c8:	2300      	movs	r3, #0
 80071ca:	77fb      	strb	r3, [r7, #31]
 80071cc:	2300      	movs	r3, #0
 80071ce:	613b      	str	r3, [r7, #16]
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	2308      	movs	r3, #8
 80071d6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	617a      	str	r2, [r7, #20]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4413      	add	r3, r2
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80071e6:	7fbb      	ldrb	r3, [r7, #30]
 80071e8:	2b20      	cmp	r3, #32
 80071ea:	d953      	bls.n	8007294 <create_name+0x108>
 80071ec:	7fbb      	ldrb	r3, [r7, #30]
 80071ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80071f0:	d050      	beq.n	8007294 <create_name+0x108>
 80071f2:	7fbb      	ldrb	r3, [r7, #30]
 80071f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80071f6:	d04d      	beq.n	8007294 <create_name+0x108>
		if (c == '.' || i >= ni) {
 80071f8:	7fbb      	ldrb	r3, [r7, #30]
 80071fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80071fc:	d003      	beq.n	8007206 <create_name+0x7a>
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	429a      	cmp	r2, r3
 8007204:	d30f      	bcc.n	8007226 <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b08      	cmp	r3, #8
 800720a:	d102      	bne.n	8007212 <create_name+0x86>
 800720c:	7fbb      	ldrb	r3, [r7, #30]
 800720e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007210:	d001      	beq.n	8007216 <create_name+0x8a>
 8007212:	2306      	movs	r3, #6
 8007214:	e073      	b.n	80072fe <create_name+0x172>
			i = 8; ni = 11;
 8007216:	2308      	movs	r3, #8
 8007218:	613b      	str	r3, [r7, #16]
 800721a:	230b      	movs	r3, #11
 800721c:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800721e:	7ffb      	ldrb	r3, [r7, #31]
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	77fb      	strb	r3, [r7, #31]
 8007224:	e035      	b.n	8007292 <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007226:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800722a:	2b00      	cmp	r3, #0
 800722c:	da08      	bge.n	8007240 <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 800722e:	7ffb      	ldrb	r3, [r7, #31]
 8007230:	f043 0303 	orr.w	r3, r3, #3
 8007234:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007236:	7fbb      	ldrb	r3, [r7, #30]
 8007238:	3b80      	subs	r3, #128	@ 0x80
 800723a:	4a33      	ldr	r2, [pc, #204]	@ (8007308 <create_name+0x17c>)
 800723c:	5cd3      	ldrb	r3, [r2, r3]
 800723e:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8007240:	7fbb      	ldrb	r3, [r7, #30]
 8007242:	4619      	mov	r1, r3
 8007244:	4831      	ldr	r0, [pc, #196]	@ (800730c <create_name+0x180>)
 8007246:	f7fe fd76 	bl	8005d36 <chk_chr>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <create_name+0xc8>
				return FR_INVALID_NAME;
 8007250:	2306      	movs	r3, #6
 8007252:	e054      	b.n	80072fe <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8007254:	7fbb      	ldrb	r3, [r7, #30]
 8007256:	2b40      	cmp	r3, #64	@ 0x40
 8007258:	d907      	bls.n	800726a <create_name+0xde>
 800725a:	7fbb      	ldrb	r3, [r7, #30]
 800725c:	2b5a      	cmp	r3, #90	@ 0x5a
 800725e:	d804      	bhi.n	800726a <create_name+0xde>
				b |= 2;
 8007260:	7ffb      	ldrb	r3, [r7, #31]
 8007262:	f043 0302 	orr.w	r3, r3, #2
 8007266:	77fb      	strb	r3, [r7, #31]
 8007268:	e00c      	b.n	8007284 <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800726a:	7fbb      	ldrb	r3, [r7, #30]
 800726c:	2b60      	cmp	r3, #96	@ 0x60
 800726e:	d909      	bls.n	8007284 <create_name+0xf8>
 8007270:	7fbb      	ldrb	r3, [r7, #30]
 8007272:	2b7a      	cmp	r3, #122	@ 0x7a
 8007274:	d806      	bhi.n	8007284 <create_name+0xf8>
					b |= 1; c -= 0x20;
 8007276:	7ffb      	ldrb	r3, [r7, #31]
 8007278:	f043 0301 	orr.w	r3, r3, #1
 800727c:	77fb      	strb	r3, [r7, #31]
 800727e:	7fbb      	ldrb	r3, [r7, #30]
 8007280:	3b20      	subs	r3, #32
 8007282:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	613a      	str	r2, [r7, #16]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	4413      	add	r3, r2
 800728e:	7fba      	ldrb	r2, [r7, #30]
 8007290:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007292:	e7a1      	b.n	80071d8 <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	441a      	add	r2, r3
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800729e:	7fbb      	ldrb	r3, [r7, #30]
 80072a0:	2b20      	cmp	r3, #32
 80072a2:	d801      	bhi.n	80072a8 <create_name+0x11c>
 80072a4:	2304      	movs	r3, #4
 80072a6:	e000      	b.n	80072aa <create_name+0x11e>
 80072a8:	2300      	movs	r3, #0
 80072aa:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <create_name+0x12a>
 80072b2:	2306      	movs	r3, #6
 80072b4:	e023      	b.n	80072fe <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	2be5      	cmp	r3, #229	@ 0xe5
 80072bc:	d102      	bne.n	80072c4 <create_name+0x138>
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2205      	movs	r2, #5
 80072c2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	2b08      	cmp	r3, #8
 80072c8:	d102      	bne.n	80072d0 <create_name+0x144>
 80072ca:	7ffb      	ldrb	r3, [r7, #31]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80072d0:	7ffb      	ldrb	r3, [r7, #31]
 80072d2:	f003 0303 	and.w	r3, r3, #3
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d103      	bne.n	80072e2 <create_name+0x156>
 80072da:	7fbb      	ldrb	r3, [r7, #30]
 80072dc:	f043 0310 	orr.w	r3, r3, #16
 80072e0:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80072e2:	7ffb      	ldrb	r3, [r7, #31]
 80072e4:	f003 030c 	and.w	r3, r3, #12
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	d103      	bne.n	80072f4 <create_name+0x168>
 80072ec:	7fbb      	ldrb	r3, [r7, #30]
 80072ee:	f043 0308 	orr.w	r3, r3, #8
 80072f2:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	330b      	adds	r3, #11
 80072f8:	7fba      	ldrb	r2, [r7, #30]
 80072fa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80072fc:	2300      	movs	r3, #0
#endif
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3720      	adds	r7, #32
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	08009ee4 	.word	0x08009ee4
 800730c:	08009e68 	.word	0x08009e68

08007310 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007320:	d003      	beq.n	800732a <follow_path+0x1a>
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b5c      	cmp	r3, #92	@ 0x5c
 8007328:	d102      	bne.n	8007330 <follow_path+0x20>
		path++;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	3301      	adds	r3, #1
 800732e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007336:	461a      	mov	r2, r3
 8007338:	2300      	movs	r3, #0
 800733a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b1f      	cmp	r3, #31
 8007342:	d80c      	bhi.n	800735e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8007344:	2100      	movs	r1, #0
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff fbd0 	bl	8006aec <dir_sdi>
 800734c:	4603      	mov	r3, r0
 800734e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007356:	461a      	mov	r2, r3
 8007358:	2300      	movs	r3, #0
 800735a:	6153      	str	r3, [r2, #20]
 800735c:	e049      	b.n	80073f2 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800735e:	463b      	mov	r3, r7
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7ff ff12 	bl	800718c <create_name>
 8007368:	4603      	mov	r3, r0
 800736a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d13a      	bne.n	80073e8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff fe76 	bl	8007064 <dir_find>
 8007378:	4603      	mov	r3, r0
 800737a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	7adb      	ldrb	r3, [r3, #11]
 8007386:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00a      	beq.n	80073a4 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	2b04      	cmp	r3, #4
 8007392:	d12b      	bne.n	80073ec <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	2b00      	cmp	r3, #0
 800739c:	d126      	bne.n	80073ec <follow_path+0xdc>
 800739e:	2305      	movs	r3, #5
 80073a0:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80073a2:	e023      	b.n	80073ec <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	f003 0304 	and.w	r3, r3, #4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d120      	bne.n	80073f0 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	330b      	adds	r3, #11
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	f003 0310 	and.w	r3, r3, #16
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d102      	bne.n	80073cc <follow_path+0xbc>
				res = FR_NO_PATH; break;
 80073c6:	2305      	movs	r3, #5
 80073c8:	73fb      	strb	r3, [r7, #15]
 80073ca:	e012      	b.n	80073f2 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff fdee 	bl	8006fb8 <ld_clust>
 80073dc:	4602      	mov	r2, r0
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073e4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80073e6:	e7ba      	b.n	800735e <follow_path+0x4e>
			if (res != FR_OK) break;
 80073e8:	bf00      	nop
 80073ea:	e002      	b.n	80073f2 <follow_path+0xe2>
				break;
 80073ec:	bf00      	nop
 80073ee:	e000      	b.n	80073f2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80073f0:	bf00      	nop
		}
	}

	return res;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007404:	f04f 33ff 	mov.w	r3, #4294967295
 8007408:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d031      	beq.n	8007476 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	e002      	b.n	8007420 <get_ldnumber+0x24>
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	3301      	adds	r3, #1
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b20      	cmp	r3, #32
 8007426:	d903      	bls.n	8007430 <get_ldnumber+0x34>
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b3a      	cmp	r3, #58	@ 0x3a
 800742e:	d1f4      	bne.n	800741a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	2b3a      	cmp	r3, #58	@ 0x3a
 8007436:	d11c      	bne.n	8007472 <get_ldnumber+0x76>
			tp = *path;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	60fa      	str	r2, [r7, #12]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	3b30      	subs	r3, #48	@ 0x30
 8007448:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b09      	cmp	r3, #9
 800744e:	d80e      	bhi.n	800746e <get_ldnumber+0x72>
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	429a      	cmp	r2, r3
 8007456:	d10a      	bne.n	800746e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d107      	bne.n	800746e <get_ldnumber+0x72>
					vol = (int)i;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	3301      	adds	r3, #1
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	e002      	b.n	8007478 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007472:	2300      	movs	r3, #0
 8007474:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007476:	693b      	ldr	r3, [r7, #16]
}
 8007478:	4618      	mov	r0, r3
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007494:	2200      	movs	r2, #0
 8007496:	711a      	strb	r2, [r3, #4]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800749e:	461a      	mov	r2, r3
 80074a0:	f04f 33ff 	mov.w	r3, #4294967295
 80074a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7fe fe71 	bl	8006190 <move_window>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <check_fs+0x34>
		return 3;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e04a      	b.n	800754e <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80074be:	3301      	adds	r3, #1
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	b21a      	sxth	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 80074cc:	b21b      	sxth	r3, r3
 80074ce:	4313      	orrs	r3, r2
 80074d0:	b21b      	sxth	r3, r3
 80074d2:	4a21      	ldr	r2, [pc, #132]	@ (8007558 <check_fs+0xd4>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d001      	beq.n	80074dc <check_fs+0x58>
		return 2;
 80074d8:	2302      	movs	r3, #2
 80074da:	e038      	b.n	800754e <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3336      	adds	r3, #54	@ 0x36
 80074e0:	3303      	adds	r3, #3
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	061a      	lsls	r2, r3, #24
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3336      	adds	r3, #54	@ 0x36
 80074ea:	3302      	adds	r3, #2
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	041b      	lsls	r3, r3, #16
 80074f0:	431a      	orrs	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	3336      	adds	r3, #54	@ 0x36
 80074f6:	3301      	adds	r3, #1
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	021b      	lsls	r3, r3, #8
 80074fc:	4313      	orrs	r3, r2
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8007504:	4313      	orrs	r3, r2
 8007506:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800750a:	4a14      	ldr	r2, [pc, #80]	@ (800755c <check_fs+0xd8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d101      	bne.n	8007514 <check_fs+0x90>
		return 0;
 8007510:	2300      	movs	r3, #0
 8007512:	e01c      	b.n	800754e <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3352      	adds	r3, #82	@ 0x52
 8007518:	3303      	adds	r3, #3
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	061a      	lsls	r2, r3, #24
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3352      	adds	r3, #82	@ 0x52
 8007522:	3302      	adds	r3, #2
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	041b      	lsls	r3, r3, #16
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3352      	adds	r3, #82	@ 0x52
 800752e:	3301      	adds	r3, #1
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	021b      	lsls	r3, r3, #8
 8007534:	4313      	orrs	r3, r2
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800753c:	4313      	orrs	r3, r2
 800753e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007542:	4a06      	ldr	r2, [pc, #24]	@ (800755c <check_fs+0xd8>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d101      	bne.n	800754c <check_fs+0xc8>
		return 0;
 8007548:	2300      	movs	r3, #0
 800754a:	e000      	b.n	800754e <check_fs+0xca>

	return 1;
 800754c:	2301      	movs	r3, #1
}
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	ffffaa55 	.word	0xffffaa55
 800755c:	00544146 	.word	0x00544146

08007560 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b096      	sub	sp, #88	@ 0x58
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	4613      	mov	r3, r2
 800756c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007574:	68b8      	ldr	r0, [r7, #8]
 8007576:	f7ff ff41 	bl	80073fc <get_ldnumber>
 800757a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800757c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800757e:	2b00      	cmp	r3, #0
 8007580:	da01      	bge.n	8007586 <find_volume+0x26>
 8007582:	230b      	movs	r3, #11
 8007584:	e311      	b.n	8007baa <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007586:	4a98      	ldr	r2, [pc, #608]	@ (80077e8 <find_volume+0x288>)
 8007588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800758a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800758e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <find_volume+0x3a>
 8007596:	230c      	movs	r3, #12
 8007598:	e307      	b.n	8007baa <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800759e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80075a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d01c      	beq.n	80075e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80075ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075b2:	785b      	ldrb	r3, [r3, #1]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fe fabf 	bl	8005b38 <disk_status>
 80075ba:	4603      	mov	r3, r0
 80075bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80075c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10c      	bne.n	80075e6 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80075cc:	79fb      	ldrb	r3, [r7, #7]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d007      	beq.n	80075e2 <find_volume+0x82>
 80075d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80075d6:	f003 0304 	and.w	r3, r3, #4
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80075de:	230a      	movs	r3, #10
 80075e0:	e2e3      	b.n	8007baa <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 80075e2:	2300      	movs	r3, #0
 80075e4:	e2e1      	b.n	8007baa <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80075e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075ec:	2200      	movs	r2, #0
 80075ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80075f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80075fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007602:	785b      	ldrb	r3, [r3, #1]
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe fab1 	bl	8005b6c <disk_initialize>
 800760a:	4603      	mov	r3, r0
 800760c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007610:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800761c:	2303      	movs	r3, #3
 800761e:	e2c4      	b.n	8007baa <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d007      	beq.n	8007636 <find_volume+0xd6>
 8007626:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8007632:	230a      	movs	r3, #10
 8007634:	e2b9      	b.n	8007baa <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800763c:	7858      	ldrb	r0, [r3, #1]
 800763e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007640:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007644:	330a      	adds	r3, #10
 8007646:	461a      	mov	r2, r3
 8007648:	2102      	movs	r1, #2
 800764a:	f7fe faf5 	bl	8005c38 <disk_ioctl>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10d      	bne.n	8007670 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800765a:	895b      	ldrh	r3, [r3, #10]
 800765c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007660:	d306      	bcc.n	8007670 <find_volume+0x110>
 8007662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007668:	895b      	ldrh	r3, [r3, #10]
 800766a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800766e:	d901      	bls.n	8007674 <find_volume+0x114>
 8007670:	2301      	movs	r3, #1
 8007672:	e29a      	b.n	8007baa <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007674:	2300      	movs	r3, #0
 8007676:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007678:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800767a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800767c:	f7ff ff02 	bl	8007484 <check_fs>
 8007680:	4603      	mov	r3, r0
 8007682:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007686:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800768a:	2b01      	cmp	r3, #1
 800768c:	d153      	bne.n	8007736 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800768e:	2300      	movs	r3, #0
 8007690:	643b      	str	r3, [r7, #64]	@ 0x40
 8007692:	e028      	b.n	80076e6 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007694:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800769e:	4413      	add	r3, r2
 80076a0:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80076a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a4:	3304      	adds	r3, #4
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d012      	beq.n	80076d2 <find_volume+0x172>
 80076ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ae:	330b      	adds	r3, #11
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	061a      	lsls	r2, r3, #24
 80076b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b6:	330a      	adds	r3, #10
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	041b      	lsls	r3, r3, #16
 80076bc:	431a      	orrs	r2, r3
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	3309      	adds	r3, #9
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	4313      	orrs	r3, r2
 80076c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ca:	3208      	adds	r2, #8
 80076cc:	7812      	ldrb	r2, [r2, #0]
 80076ce:	431a      	orrs	r2, r3
 80076d0:	e000      	b.n	80076d4 <find_volume+0x174>
 80076d2:	2200      	movs	r2, #0
 80076d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	3358      	adds	r3, #88	@ 0x58
 80076da:	443b      	add	r3, r7
 80076dc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80076e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076e2:	3301      	adds	r3, #1
 80076e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80076e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d9d3      	bls.n	8007694 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80076ec:	2300      	movs	r3, #0
 80076ee:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80076f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <find_volume+0x19c>
 80076f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076f8:	3b01      	subs	r3, #1
 80076fa:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80076fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	3358      	adds	r3, #88	@ 0x58
 8007702:	443b      	add	r3, r7
 8007704:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007708:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800770a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <find_volume+0x1bc>
 8007710:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007712:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007714:	f7ff feb6 	bl	8007484 <check_fs>
 8007718:	4603      	mov	r3, r0
 800771a:	e000      	b.n	800771e <find_volume+0x1be>
 800771c:	2302      	movs	r3, #2
 800771e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007722:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <find_volume+0x1d6>
 800772a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800772c:	3301      	adds	r3, #1
 800772e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007732:	2b03      	cmp	r3, #3
 8007734:	d9e2      	bls.n	80076fc <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007736:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800773a:	2b03      	cmp	r3, #3
 800773c:	d101      	bne.n	8007742 <find_volume+0x1e2>
 800773e:	2301      	movs	r3, #1
 8007740:	e233      	b.n	8007baa <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007742:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007746:	2b00      	cmp	r3, #0
 8007748:	d001      	beq.n	800774e <find_volume+0x1ee>
 800774a:	230d      	movs	r3, #13
 800774c:	e22d      	b.n	8007baa <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800774e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007750:	7b1b      	ldrb	r3, [r3, #12]
 8007752:	021b      	lsls	r3, r3, #8
 8007754:	b21a      	sxth	r2, r3
 8007756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007758:	7adb      	ldrb	r3, [r3, #11]
 800775a:	b21b      	sxth	r3, r3
 800775c:	4313      	orrs	r3, r2
 800775e:	b21a      	sxth	r2, r3
 8007760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007762:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007766:	895b      	ldrh	r3, [r3, #10]
 8007768:	b21b      	sxth	r3, r3
 800776a:	429a      	cmp	r2, r3
 800776c:	d001      	beq.n	8007772 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800776e:	230d      	movs	r3, #13
 8007770:	e21b      	b.n	8007baa <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007774:	7ddb      	ldrb	r3, [r3, #23]
 8007776:	021b      	lsls	r3, r3, #8
 8007778:	b21a      	sxth	r2, r3
 800777a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777c:	7d9b      	ldrb	r3, [r3, #22]
 800777e:	b21b      	sxth	r3, r3
 8007780:	4313      	orrs	r3, r2
 8007782:	b21b      	sxth	r3, r3
 8007784:	b29b      	uxth	r3, r3
 8007786:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800778a:	2b00      	cmp	r3, #0
 800778c:	d112      	bne.n	80077b4 <find_volume+0x254>
 800778e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007790:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8007794:	061a      	lsls	r2, r3, #24
 8007796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007798:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800779c:	041b      	lsls	r3, r3, #16
 800779e:	431a      	orrs	r2, r3
 80077a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	4313      	orrs	r3, r2
 80077aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077ac:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80077b0:	4313      	orrs	r3, r2
 80077b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 80077b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077ba:	461a      	mov	r2, r3
 80077bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077be:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80077c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c2:	7c1a      	ldrb	r2, [r3, #16]
 80077c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077ca:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80077cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077d2:	78db      	ldrb	r3, [r3, #3]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d009      	beq.n	80077ec <find_volume+0x28c>
 80077d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077de:	78db      	ldrb	r3, [r3, #3]
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d003      	beq.n	80077ec <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 80077e4:	230d      	movs	r3, #13
 80077e6:	e1e0      	b.n	8007baa <find_volume+0x64a>
 80077e8:	20001324 	.word	0x20001324
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80077ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077f2:	78db      	ldrb	r3, [r3, #3]
 80077f4:	461a      	mov	r2, r3
 80077f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077f8:	fb02 f303 	mul.w	r3, r2, r3
 80077fc:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80077fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007800:	7b5a      	ldrb	r2, [r3, #13]
 8007802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007804:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007808:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800780a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007810:	789b      	ldrb	r3, [r3, #2]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00c      	beq.n	8007830 <find_volume+0x2d0>
 8007816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007818:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800781c:	789b      	ldrb	r3, [r3, #2]
 800781e:	461a      	mov	r2, r3
 8007820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007826:	789b      	ldrb	r3, [r3, #2]
 8007828:	3b01      	subs	r3, #1
 800782a:	4013      	ands	r3, r2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8007830:	230d      	movs	r3, #13
 8007832:	e1ba      	b.n	8007baa <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007836:	7c9b      	ldrb	r3, [r3, #18]
 8007838:	021b      	lsls	r3, r3, #8
 800783a:	b21a      	sxth	r2, r3
 800783c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783e:	7c5b      	ldrb	r3, [r3, #17]
 8007840:	b21b      	sxth	r3, r3
 8007842:	4313      	orrs	r3, r2
 8007844:	b21b      	sxth	r3, r3
 8007846:	b29a      	uxth	r2, r3
 8007848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800784e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007856:	891b      	ldrh	r3, [r3, #8]
 8007858:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800785a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800785e:	8952      	ldrh	r2, [r2, #10]
 8007860:	0952      	lsrs	r2, r2, #5
 8007862:	b292      	uxth	r2, r2
 8007864:	fbb3 f1f2 	udiv	r1, r3, r2
 8007868:	fb01 f202 	mul.w	r2, r1, r2
 800786c:	1a9b      	subs	r3, r3, r2
 800786e:	b29b      	uxth	r3, r3
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8007874:	230d      	movs	r3, #13
 8007876:	e198      	b.n	8007baa <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787a:	7d1b      	ldrb	r3, [r3, #20]
 800787c:	021b      	lsls	r3, r3, #8
 800787e:	b21a      	sxth	r2, r3
 8007880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007882:	7cdb      	ldrb	r3, [r3, #19]
 8007884:	b21b      	sxth	r3, r3
 8007886:	4313      	orrs	r3, r2
 8007888:	b21b      	sxth	r3, r3
 800788a:	b29b      	uxth	r3, r3
 800788c:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800788e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007890:	2b00      	cmp	r3, #0
 8007892:	d112      	bne.n	80078ba <find_volume+0x35a>
 8007894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007896:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800789a:	061a      	lsls	r2, r3, #24
 800789c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80078a2:	041b      	lsls	r3, r3, #16
 80078a4:	431a      	orrs	r2, r3
 80078a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	4313      	orrs	r3, r2
 80078b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078b2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80078ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078bc:	7bdb      	ldrb	r3, [r3, #15]
 80078be:	021b      	lsls	r3, r3, #8
 80078c0:	b21a      	sxth	r2, r3
 80078c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c4:	7b9b      	ldrb	r3, [r3, #14]
 80078c6:	b21b      	sxth	r3, r3
 80078c8:	4313      	orrs	r3, r2
 80078ca:	b21b      	sxth	r3, r3
 80078cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80078ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <find_volume+0x378>
 80078d4:	230d      	movs	r3, #13
 80078d6:	e168      	b.n	8007baa <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80078d8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80078da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078dc:	4413      	add	r3, r2
 80078de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80078e4:	8911      	ldrh	r1, [r2, #8]
 80078e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80078ec:	8952      	ldrh	r2, [r2, #10]
 80078ee:	0952      	lsrs	r2, r2, #5
 80078f0:	b292      	uxth	r2, r2
 80078f2:	fbb1 f2f2 	udiv	r2, r1, r2
 80078f6:	b292      	uxth	r2, r2
 80078f8:	4413      	add	r3, r2
 80078fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80078fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007900:	429a      	cmp	r2, r3
 8007902:	d201      	bcs.n	8007908 <find_volume+0x3a8>
 8007904:	230d      	movs	r3, #13
 8007906:	e150      	b.n	8007baa <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007908:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800790a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007910:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007914:	7892      	ldrb	r2, [r2, #2]
 8007916:	fbb3 f3f2 	udiv	r3, r3, r2
 800791a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800791c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <find_volume+0x3c6>
 8007922:	230d      	movs	r3, #13
 8007924:	e141      	b.n	8007baa <find_volume+0x64a>
	fmt = FS_FAT12;
 8007926:	2301      	movs	r3, #1
 8007928:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800792c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007932:	4293      	cmp	r3, r2
 8007934:	d902      	bls.n	800793c <find_volume+0x3dc>
 8007936:	2302      	movs	r3, #2
 8007938:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800793c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007942:	4293      	cmp	r3, r2
 8007944:	d902      	bls.n	800794c <find_volume+0x3ec>
 8007946:	2303      	movs	r3, #3
 8007948:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	3302      	adds	r3, #2
 8007950:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007952:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007956:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8007958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800795e:	461a      	mov	r2, r3
 8007960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007962:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007964:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007966:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007968:	4413      	add	r3, r2
 800796a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800796c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007970:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8007972:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007976:	4413      	add	r3, r2
 8007978:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800797a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800797e:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8007980:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007984:	2b03      	cmp	r3, #3
 8007986:	d124      	bne.n	80079d2 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800798e:	891b      	ldrh	r3, [r3, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <find_volume+0x438>
 8007994:	230d      	movs	r3, #13
 8007996:	e108      	b.n	8007baa <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800799e:	061a      	lsls	r2, r3, #24
 80079a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80079a6:	041b      	lsls	r3, r3, #16
 80079a8:	431a      	orrs	r2, r3
 80079aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80079b0:	021b      	lsls	r3, r3, #8
 80079b2:	4313      	orrs	r3, r2
 80079b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079b6:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80079ba:	4313      	orrs	r3, r2
 80079bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80079c2:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80079c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80079d0:	e02b      	b.n	8007a2a <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80079d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079d8:	891b      	ldrh	r3, [r3, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <find_volume+0x482>
 80079de:	230d      	movs	r3, #13
 80079e0:	e0e3      	b.n	8007baa <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80079e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079e8:	6a1a      	ldr	r2, [r3, #32]
 80079ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079ec:	4413      	add	r3, r2
 80079ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80079f4:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80079f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d105      	bne.n	8007a0a <find_volume+0x4aa>
 80079fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	005b      	lsls	r3, r3, #1
 8007a08:	e00e      	b.n	8007a28 <find_volume+0x4c8>
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a10:	695a      	ldr	r2, [r3, #20]
 8007a12:	4613      	mov	r3, r2
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	4413      	add	r3, r2
 8007a18:	085a      	lsrs	r2, r3, #1
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007a28:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a30:	699a      	ldr	r2, [r3, #24]
 8007a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a38:	895b      	ldrh	r3, [r3, #10]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a3e:	440b      	add	r3, r1
 8007a40:	3b01      	subs	r3, #1
 8007a42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a44:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8007a48:	8949      	ldrh	r1, [r1, #10]
 8007a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d201      	bcs.n	8007a56 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8007a52:	230d      	movs	r3, #13
 8007a54:	e0a9      	b.n	8007baa <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a62:	6113      	str	r3, [r2, #16]
 8007a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007a72:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a7a:	2280      	movs	r2, #128	@ 0x80
 8007a7c:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007a7e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d17a      	bne.n	8007b7c <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a88:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	b21a      	sxth	r2, r3
 8007a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a96:	b21b      	sxth	r3, r3
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	b21b      	sxth	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d16d      	bne.n	8007b7c <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007aa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007aa8:	f7fe fb72 	bl	8006190 <move_window>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d164      	bne.n	8007b7c <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ab8:	2200      	movs	r2, #0
 8007aba:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007abe:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8007ac2:	021b      	lsls	r3, r3, #8
 8007ac4:	b21a      	sxth	r2, r3
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac8:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8007acc:	b21b      	sxth	r3, r3
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	b21b      	sxth	r3, r3
 8007ad2:	4a38      	ldr	r2, [pc, #224]	@ (8007bb4 <find_volume+0x654>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d151      	bne.n	8007b7c <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ada:	78db      	ldrb	r3, [r3, #3]
 8007adc:	061a      	lsls	r2, r3, #24
 8007ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae0:	789b      	ldrb	r3, [r3, #2]
 8007ae2:	041b      	lsls	r3, r3, #16
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae8:	785b      	ldrb	r3, [r3, #1]
 8007aea:	021b      	lsls	r3, r3, #8
 8007aec:	4313      	orrs	r3, r2
 8007aee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007af0:	7812      	ldrb	r2, [r2, #0]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	4a30      	ldr	r2, [pc, #192]	@ (8007bb8 <find_volume+0x658>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d140      	bne.n	8007b7c <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afc:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8007b00:	061a      	lsls	r2, r3, #24
 8007b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b04:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8007b08:	041b      	lsls	r3, r3, #16
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0e:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	4313      	orrs	r3, r2
 8007b16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b18:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	4a27      	ldr	r2, [pc, #156]	@ (8007bbc <find_volume+0x65c>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d12b      	bne.n	8007b7c <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b26:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8007b2a:	061a      	lsls	r2, r3, #24
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2e:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8007b32:	041b      	lsls	r3, r3, #16
 8007b34:	431a      	orrs	r2, r3
 8007b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b38:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8007b3c:	021b      	lsls	r3, r3, #8
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b42:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8007b46:	4313      	orrs	r3, r2
 8007b48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007b4e:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b52:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8007b56:	061a      	lsls	r2, r3, #24
 8007b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5a:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8007b5e:	041b      	lsls	r3, r3, #16
 8007b60:	431a      	orrs	r2, r3
 8007b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b64:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8007b68:	021b      	lsls	r3, r3, #8
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b6e:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8007b72:	4313      	orrs	r3, r2
 8007b74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007b7a:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b82:	461a      	mov	r2, r3
 8007b84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b88:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8007b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc0 <find_volume+0x660>)
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	4b0b      	ldr	r3, [pc, #44]	@ (8007bc0 <find_volume+0x660>)
 8007b94:	801a      	strh	r2, [r3, #0]
 8007b96:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc0 <find_volume+0x660>)
 8007b98:	881a      	ldrh	r2, [r3, #0]
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ba0:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007ba2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007ba4:	f7fe fa78 	bl	8006098 <clear_lock>
#endif

	return FR_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3758      	adds	r7, #88	@ 0x58
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	ffffaa55 	.word	0xffffaa55
 8007bb8:	41615252 	.word	0x41615252
 8007bbc:	61417272 	.word	0x61417272
 8007bc0:	20001328 	.word	0x20001328

08007bc4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d02a      	beq.n	8007c2c <validate+0x68>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d024      	beq.n	8007c2c <validate+0x68>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d01b      	beq.n	8007c2c <validate+0x68>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c00:	88da      	ldrh	r2, [r3, #6]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c08:	889b      	ldrh	r3, [r3, #4]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d10e      	bne.n	8007c2c <validate+0x68>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c1a:	785b      	ldrb	r3, [r3, #1]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fd ff8b 	bl	8005b38 <disk_status>
 8007c22:	4603      	mov	r3, r0
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8007c2c:	2309      	movs	r3, #9
 8007c2e:	e000      	b.n	8007c32 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b088      	sub	sp, #32
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	4613      	mov	r3, r2
 8007c48:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007c4e:	f107 0310 	add.w	r3, r7, #16
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff fbd2 	bl	80073fc <get_ldnumber>
 8007c58:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	da01      	bge.n	8007c64 <f_mount+0x28>
 8007c60:	230b      	movs	r3, #11
 8007c62:	e02f      	b.n	8007cc4 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007c64:	4a19      	ldr	r2, [pc, #100]	@ (8007ccc <f_mount+0x90>)
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c6c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d007      	beq.n	8007c84 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8007c74:	69b8      	ldr	r0, [r7, #24]
 8007c76:	f7fe fa0f 	bl	8006098 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c80:	2200      	movs	r2, #0
 8007c82:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d004      	beq.n	8007c94 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c90:	2200      	movs	r2, #0
 8007c92:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	490d      	ldr	r1, [pc, #52]	@ (8007ccc <f_mount+0x90>)
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <f_mount+0x6e>
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d001      	beq.n	8007cae <f_mount+0x72>
 8007caa:	2300      	movs	r3, #0
 8007cac:	e00a      	b.n	8007cc4 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007cae:	f107 0108 	add.w	r1, r7, #8
 8007cb2:	f107 030c 	add.w	r3, r7, #12
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7ff fc51 	bl	8007560 <find_volume>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3720      	adds	r7, #32
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	20001324 	.word	0x20001324

08007cd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007cde:	f843 0c44 	str.w	r0, [r3, #-68]
 8007ce2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007ce6:	f843 1c48 	str.w	r1, [r3, #-72]
 8007cea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007cee:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007cf2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007cf6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <f_open+0x32>
 8007cfe:	2309      	movs	r3, #9
 8007d00:	e2e2      	b.n	80082c8 <f_open+0x5f8>
	fp->fs = 0;			/* Clear file object */
 8007d02:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007d06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007d0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d0e:	461a      	mov	r2, r3
 8007d10:	2300      	movs	r3, #0
 8007d12:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007d14:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007d18:	461a      	mov	r2, r3
 8007d1a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007d1e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007d22:	f003 031f 	and.w	r3, r3, #31
 8007d26:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007d2a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007d2e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007d32:	f023 0301 	bic.w	r3, r3, #1
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	f107 0110 	add.w	r1, r7, #16
 8007d3c:	3908      	subs	r1, #8
 8007d3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007d42:	3b10      	subs	r3, #16
 8007d44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff fc09 	bl	8007560 <find_volume>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007d54:	f102 020f 	add.w	r2, r2, #15
 8007d58:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007d5a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007d5e:	f103 030f 	add.w	r3, r3, #15
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f040 82aa 	bne.w	80082be <f_open+0x5ee>
		INIT_BUF(dj);
 8007d6a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007d74:	3b1c      	subs	r3, #28
 8007d76:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8007d7a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007d7e:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8007d82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007d86:	3b10      	subs	r3, #16
 8007d88:	4611      	mov	r1, r2
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7ff fac0 	bl	8007310 <follow_path>
 8007d90:	4603      	mov	r3, r0
 8007d92:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007d96:	f102 020f 	add.w	r2, r2, #15
 8007d9a:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8007d9c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007da0:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 8007da4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007da8:	f102 0208 	add.w	r2, r2, #8
 8007dac:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007dae:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007db2:	f103 030f 	add.w	r3, r3, #15
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d124      	bne.n	8007e06 <f_open+0x136>
			if (!dir)	/* Default directory itself */
 8007dbc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007dc0:	f103 0308 	add.w	r3, r3, #8
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d106      	bne.n	8007dd8 <f_open+0x108>
				res = FR_INVALID_NAME;
 8007dca:	2306      	movs	r3, #6
 8007dcc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007dd0:	f102 020f 	add.w	r2, r2, #15
 8007dd4:	7013      	strb	r3, [r2, #0]
 8007dd6:	e016      	b.n	8007e06 <f_open+0x136>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007dd8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007ddc:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	bf8c      	ite	hi
 8007de4:	2301      	movhi	r3, #1
 8007de6:	2300      	movls	r3, #0
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	461a      	mov	r2, r3
 8007dec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007df0:	3b10      	subs	r3, #16
 8007df2:	4611      	mov	r1, r2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fd ffb9 	bl	8005d6c <chk_lock>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007e00:	f102 020f 	add.w	r2, r2, #15
 8007e04:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007e06:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007e0a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007e0e:	f003 031c 	and.w	r3, r3, #28
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 8134 	beq.w	8008080 <f_open+0x3b0>
			if (res != FR_OK) {					/* No file, create new */
 8007e18:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007e1c:	f103 030f 	add.w	r3, r3, #15
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d02e      	beq.n	8007e84 <f_open+0x1b4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007e26:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007e2a:	f103 030f 	add.w	r3, r3, #15
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	2b04      	cmp	r3, #4
 8007e32:	d112      	bne.n	8007e5a <f_open+0x18a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007e34:	f7fe f80a 	bl	8005e4c <enq_lock>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d007      	beq.n	8007e4e <f_open+0x17e>
 8007e3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007e42:	3b10      	subs	r3, #16
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7ff f960 	bl	800710a <dir_register>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	e000      	b.n	8007e50 <f_open+0x180>
 8007e4e:	2312      	movs	r3, #18
 8007e50:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007e54:	f102 020f 	add.w	r2, r2, #15
 8007e58:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007e5a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007e64:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007e68:	f043 0308 	orr.w	r3, r3, #8
 8007e6c:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 8007e70:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007e74:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	@ 0xfe4
 8007e78:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007e7c:	f102 0208 	add.w	r2, r2, #8
 8007e80:	6013      	str	r3, [r2, #0]
 8007e82:	e01f      	b.n	8007ec4 <f_open+0x1f4>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007e84:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007e88:	f103 0308 	add.w	r3, r3, #8
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	330b      	adds	r3, #11
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	f003 0311 	and.w	r3, r3, #17
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d006      	beq.n	8007ea8 <f_open+0x1d8>
					res = FR_DENIED;
 8007e9a:	2307      	movs	r3, #7
 8007e9c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007ea0:	f102 020f 	add.w	r2, r2, #15
 8007ea4:	7013      	strb	r3, [r2, #0]
 8007ea6:	e00d      	b.n	8007ec4 <f_open+0x1f4>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007ea8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007eac:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007eb0:	f003 0304 	and.w	r3, r3, #4
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <f_open+0x1f4>
						res = FR_EXIST;
 8007eb8:	2308      	movs	r3, #8
 8007eba:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007ebe:	f102 020f 	add.w	r2, r2, #15
 8007ec2:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007ec4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007ec8:	f103 030f 	add.w	r3, r3, #15
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f040 8108 	bne.w	80080e4 <f_open+0x414>
 8007ed4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007ed8:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8007edc:	f003 0308 	and.w	r3, r3, #8
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 80ff 	beq.w	80080e4 <f_open+0x414>
				dw = GET_FATTIME();				/* Created time */
 8007ee6:	f7fd fdc9 	bl	8005a7c <get_fattime>
 8007eea:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007eee:	f103 0304 	add.w	r3, r3, #4
 8007ef2:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007ef4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007ef8:	f103 0308 	add.w	r3, r3, #8
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	330e      	adds	r3, #14
 8007f00:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007f04:	f102 0204 	add.w	r2, r2, #4
 8007f08:	6812      	ldr	r2, [r2, #0]
 8007f0a:	b2d2      	uxtb	r2, r2
 8007f0c:	701a      	strb	r2, [r3, #0]
 8007f0e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007f12:	f103 0304 	add.w	r3, r3, #4
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	0a1b      	lsrs	r3, r3, #8
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007f22:	f103 0308 	add.w	r3, r3, #8
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	330f      	adds	r3, #15
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	701a      	strb	r2, [r3, #0]
 8007f2e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007f32:	f103 0304 	add.w	r3, r3, #4
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	0c1a      	lsrs	r2, r3, #16
 8007f3a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007f3e:	f103 0308 	add.w	r3, r3, #8
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3310      	adds	r3, #16
 8007f46:	b2d2      	uxtb	r2, r2
 8007f48:	701a      	strb	r2, [r3, #0]
 8007f4a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007f4e:	f103 0304 	add.w	r3, r3, #4
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	0e1a      	lsrs	r2, r3, #24
 8007f56:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007f5a:	f103 0308 	add.w	r3, r3, #8
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3311      	adds	r3, #17
 8007f62:	b2d2      	uxtb	r2, r2
 8007f64:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007f66:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007f6a:	f103 0308 	add.w	r3, r3, #8
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	330b      	adds	r3, #11
 8007f72:	2200      	movs	r2, #0
 8007f74:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007f76:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007f7a:	f103 0308 	add.w	r3, r3, #8
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	331c      	adds	r3, #28
 8007f82:	2200      	movs	r2, #0
 8007f84:	701a      	strb	r2, [r3, #0]
 8007f86:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007f8a:	f103 0308 	add.w	r3, r3, #8
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	331d      	adds	r3, #29
 8007f92:	2200      	movs	r2, #0
 8007f94:	701a      	strb	r2, [r3, #0]
 8007f96:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007f9a:	f103 0308 	add.w	r3, r3, #8
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	331e      	adds	r3, #30
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007faa:	f103 0308 	add.w	r3, r3, #8
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	331f      	adds	r3, #31
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007fb6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007fba:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 8007fbe:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8007fc2:	f102 0208 	add.w	r2, r2, #8
 8007fc6:	6811      	ldr	r1, [r2, #0]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fe fff5 	bl	8006fb8 <ld_clust>
 8007fce:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007fd2:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007fda:	f103 0308 	add.w	r3, r3, #8
 8007fde:	6818      	ldr	r0, [r3, #0]
 8007fe0:	f7ff f819 	bl	8007016 <st_clust>
				dj.fs->wflag = 1;
 8007fe4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007fe8:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 8007fec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8007ff4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d072      	beq.n	80080e4 <f_open+0x414>
					dw = dj.fs->winsect;
 8007ffe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008002:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 8008006:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800800a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800800c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8008010:	f102 0204 	add.w	r2, r2, #4
 8008014:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8008016:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800801a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 800801e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8008022:	6811      	ldr	r1, [r2, #0]
 8008024:	4618      	mov	r0, r3
 8008026:	f7fe fc17 	bl	8006858 <remove_chain>
 800802a:	4603      	mov	r3, r0
 800802c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8008030:	f102 020f 	add.w	r2, r2, #15
 8008034:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8008036:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800803a:	f103 030f 	add.w	r3, r3, #15
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d14f      	bne.n	80080e4 <f_open+0x414>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008044:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008048:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	@ 0xfd0
 800804c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3b01      	subs	r3, #1
 8008054:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008058:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800805a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800805e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 8008062:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8008066:	f102 0204 	add.w	r2, r2, #4
 800806a:	6811      	ldr	r1, [r2, #0]
 800806c:	4618      	mov	r0, r3
 800806e:	f7fe f88f 	bl	8006190 <move_window>
 8008072:	4603      	mov	r3, r0
 8008074:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8008078:	f102 020f 	add.w	r2, r2, #15
 800807c:	7013      	strb	r3, [r2, #0]
 800807e:	e031      	b.n	80080e4 <f_open+0x414>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8008080:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008084:	f103 030f 	add.w	r3, r3, #15
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d12a      	bne.n	80080e4 <f_open+0x414>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800808e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008092:	f103 0308 	add.w	r3, r3, #8
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	330b      	adds	r3, #11
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	f003 0310 	and.w	r3, r3, #16
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d006      	beq.n	80080b2 <f_open+0x3e2>
					res = FR_NO_FILE;
 80080a4:	2304      	movs	r3, #4
 80080a6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80080aa:	f102 020f 	add.w	r2, r2, #15
 80080ae:	7013      	strb	r3, [r2, #0]
 80080b0:	e018      	b.n	80080e4 <f_open+0x414>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80080b2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80080b6:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d010      	beq.n	80080e4 <f_open+0x414>
 80080c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80080c6:	f103 0308 	add.w	r3, r3, #8
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	330b      	adds	r3, #11
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d005      	beq.n	80080e4 <f_open+0x414>
						res = FR_DENIED;
 80080d8:	2307      	movs	r3, #7
 80080da:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80080de:	f102 020f 	add.w	r2, r2, #15
 80080e2:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 80080e4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80080e8:	f103 030f 	add.w	r3, r3, #15
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d155      	bne.n	800819e <f_open+0x4ce>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80080f2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80080f6:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80080fa:	f003 0308 	and.w	r3, r3, #8
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <f_open+0x448>
				mode |= FA__WRITTEN;
 8008102:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008106:	461a      	mov	r2, r3
 8008108:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800810c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008110:	f043 0320 	orr.w	r3, r3, #32
 8008114:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008118:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800811c:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 8008120:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008126:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800812a:	f852 2c44 	ldr.w	r2, [r2, #-68]
 800812e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008132:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8008134:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008138:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800813c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008140:	461a      	mov	r2, r3
 8008142:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008146:	f103 0308 	add.w	r3, r3, #8
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800814e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008152:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008156:	2b01      	cmp	r3, #1
 8008158:	bf8c      	ite	hi
 800815a:	2301      	movhi	r3, #1
 800815c:	2300      	movls	r3, #0
 800815e:	b2db      	uxtb	r3, r3
 8008160:	461a      	mov	r2, r3
 8008162:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008166:	3b10      	subs	r3, #16
 8008168:	4611      	mov	r1, r2
 800816a:	4618      	mov	r0, r3
 800816c:	f7fd fe92 	bl	8005e94 <inc_lock>
 8008170:	4602      	mov	r2, r0
 8008172:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008176:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800817a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800817e:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8008180:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008184:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800818c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818e:	2b00      	cmp	r3, #0
 8008190:	d105      	bne.n	800819e <f_open+0x4ce>
 8008192:	2302      	movs	r3, #2
 8008194:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8008198:	f102 020f 	add.w	r2, r2, #15
 800819c:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800819e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80081a2:	f103 030f 	add.w	r3, r3, #15
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f040 8088 	bne.w	80082be <f_open+0x5ee>
			fp->flag = mode;					/* File access mode */
 80081ae:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80081b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80081b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081ba:	461a      	mov	r2, r3
 80081bc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80081c0:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80081c4:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 80081c6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80081ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80081ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081d2:	2200      	movs	r2, #0
 80081d4:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80081d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80081da:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 80081de:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80081e2:	f102 0208 	add.w	r2, r2, #8
 80081e6:	6811      	ldr	r1, [r2, #0]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fe fee5 	bl	8006fb8 <ld_clust>
 80081ee:	4602      	mov	r2, r0
 80081f0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80081f4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80081f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081fc:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80081fe:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008202:	f103 0308 	add.w	r3, r3, #8
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	331f      	adds	r3, #31
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	061a      	lsls	r2, r3, #24
 800820e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008212:	f103 0308 	add.w	r3, r3, #8
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	331e      	adds	r3, #30
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	041b      	lsls	r3, r3, #16
 800821e:	431a      	orrs	r2, r3
 8008220:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8008224:	f103 0308 	add.w	r3, r3, #8
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	331d      	adds	r3, #29
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	021b      	lsls	r3, r3, #8
 8008230:	4313      	orrs	r3, r2
 8008232:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8008236:	f102 0208 	add.w	r2, r2, #8
 800823a:	6812      	ldr	r2, [r2, #0]
 800823c:	321c      	adds	r2, #28
 800823e:	7812      	ldrb	r2, [r2, #0]
 8008240:	4313      	orrs	r3, r2
 8008242:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8008246:	f852 2c44 	ldr.w	r2, [r2, #-68]
 800824a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800824e:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8008250:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008254:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008258:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800825c:	461a      	mov	r2, r3
 800825e:	2300      	movs	r3, #0
 8008260:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8008262:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008266:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800826a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800826e:	461a      	mov	r2, r3
 8008270:	2300      	movs	r3, #0
 8008272:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8008274:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008278:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800827c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008280:	461a      	mov	r2, r3
 8008282:	2300      	movs	r3, #0
 8008284:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8008286:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800828a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	@ 0xfd0
 800828e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8008292:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8008296:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800829a:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800829c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80082a0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80082a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082ae:	88da      	ldrh	r2, [r3, #6]
 80082b0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80082b4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80082b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082bc:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 80082be:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80082c2:	f103 030f 	add.w	r3, r3, #15
 80082c6:	781b      	ldrb	r3, [r3, #0]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08c      	sub	sp, #48	@ 0x30
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
 80082e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2200      	movs	r2, #0
 80082ea:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f7ff fc69 	bl	8007bc4 <validate>
 80082f2:	4603      	mov	r3, r0
 80082f4:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80082f6:	7ffb      	ldrb	r3, [r7, #31]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <f_read+0x2c>
 80082fc:	7ffb      	ldrb	r3, [r7, #31]
 80082fe:	e1cd      	b.n	800869c <f_read+0x3c8>
	if (fp->err)								/* Check error */
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008306:	79db      	ldrb	r3, [r3, #7]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d004      	beq.n	8008316 <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008312:	79db      	ldrb	r3, [r3, #7]
 8008314:	e1c2      	b.n	800869c <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800831c:	799b      	ldrb	r3, [r3, #6]
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008326:	2307      	movs	r3, #7
 8008328:	e1b8      	b.n	800869c <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	429a      	cmp	r2, r3
 8008344:	f240 81a5 	bls.w	8008692 <f_read+0x3be>
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800834c:	e1a1      	b.n	8008692 <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800835c:	6812      	ldr	r2, [r2, #0]
 800835e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008362:	8952      	ldrh	r2, [r2, #10]
 8008364:	fbb3 f1f2 	udiv	r1, r3, r2
 8008368:	fb01 f202 	mul.w	r2, r1, r2
 800836c:	1a9b      	subs	r3, r3, r2
 800836e:	2b00      	cmp	r3, #0
 8008370:	f040 8140 	bne.w	80085f4 <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008382:	6812      	ldr	r2, [r2, #0]
 8008384:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008388:	8952      	ldrh	r2, [r2, #10]
 800838a:	fbb3 f3f2 	udiv	r3, r3, r2
 800838e:	b2da      	uxtb	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800839c:	789b      	ldrb	r3, [r3, #2]
 800839e:	3b01      	subs	r3, #1
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	4013      	ands	r3, r2
 80083a4:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80083a6:	7dfb      	ldrb	r3, [r7, #23]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d143      	bne.n	8008434 <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d105      	bne.n	80083c4 <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083c2:	e01c      	b.n	80083fe <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d009      	beq.n	80083e4 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	4619      	mov	r1, r3
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f7fe fb45 	bl	8006a6a <clmt_clust>
 80083e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80083e2:	e00c      	b.n	80083fe <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	4619      	mov	r1, r3
 80083f6:	4610      	mov	r0, r2
 80083f8:	f7fd ffe0 	bl	80063bc <get_fat>
 80083fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80083fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008400:	2b01      	cmp	r3, #1
 8008402:	d806      	bhi.n	8008412 <f_read+0x13e>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800840a:	2202      	movs	r2, #2
 800840c:	71da      	strb	r2, [r3, #7]
 800840e:	2302      	movs	r3, #2
 8008410:	e144      	b.n	800869c <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008418:	d106      	bne.n	8008428 <f_read+0x154>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008420:	2201      	movs	r2, #1
 8008422:	71da      	strb	r2, [r3, #7]
 8008424:	2301      	movs	r3, #1
 8008426:	e139      	b.n	800869c <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800842e:	461a      	mov	r2, r3
 8008430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008432:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	4619      	mov	r1, r3
 8008446:	4610      	mov	r0, r2
 8008448:	f7fd ff93 	bl	8006372 <clust2sect>
 800844c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d106      	bne.n	8008462 <f_read+0x18e>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800845a:	2202      	movs	r2, #2
 800845c:	71da      	strb	r2, [r3, #7]
 800845e:	2302      	movs	r3, #2
 8008460:	e11c      	b.n	800869c <f_read+0x3c8>
			sect += csect;
 8008462:	7dfb      	ldrb	r3, [r7, #23]
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	4413      	add	r3, r2
 8008468:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008476:	895b      	ldrh	r3, [r3, #10]
 8008478:	461a      	mov	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008480:	627b      	str	r3, [r7, #36]	@ 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008484:	2b00      	cmp	r3, #0
 8008486:	d066      	beq.n	8008556 <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008488:	7dfa      	ldrb	r2, [r7, #23]
 800848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848c:	4413      	add	r3, r2
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008494:	6812      	ldr	r2, [r2, #0]
 8008496:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800849a:	7892      	ldrb	r2, [r2, #2]
 800849c:	4293      	cmp	r3, r2
 800849e:	d90a      	bls.n	80084b6 <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084ac:	789b      	ldrb	r3, [r3, #2]
 80084ae:	461a      	mov	r2, r3
 80084b0:	7dfb      	ldrb	r3, [r7, #23]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	627b      	str	r3, [r7, #36]	@ 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084c2:	7858      	ldrb	r0, [r3, #1]
 80084c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	6a39      	ldr	r1, [r7, #32]
 80084ca:	f7fd fb75 	bl	8005bb8 <disk_read>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d006      	beq.n	80084e2 <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084da:	2201      	movs	r2, #1
 80084dc:	71da      	strb	r2, [r3, #7]
 80084de:	2301      	movs	r3, #1
 80084e0:	e0dc      	b.n	800869c <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084e8:	799b      	ldrb	r3, [r3, #6]
 80084ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d024      	beq.n	800853c <f_read+0x268>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084f8:	699a      	ldr	r2, [r3, #24]
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008500:	429a      	cmp	r2, r3
 8008502:	d91b      	bls.n	800853c <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800850a:	699a      	ldr	r2, [r3, #24]
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008516:	6812      	ldr	r2, [r2, #0]
 8008518:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800851c:	8952      	ldrh	r2, [r2, #10]
 800851e:	fb02 f303 	mul.w	r3, r2, r3
 8008522:	6a3a      	ldr	r2, [r7, #32]
 8008524:	18d0      	adds	r0, r2, r3
 8008526:	68f9      	ldr	r1, [r7, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008534:	895b      	ldrh	r3, [r3, #10]
 8008536:	461a      	mov	r2, r3
 8008538:	f7fd fb9c 	bl	8005c74 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008548:	895b      	ldrh	r3, [r3, #10]
 800854a:	461a      	mov	r2, r3
 800854c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854e:	fb02 f303 	mul.w	r3, r2, r3
 8008552:	62bb      	str	r3, [r7, #40]	@ 0x28
				continue;
 8008554:	e085      	b.n	8008662 <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	429a      	cmp	r2, r3
 8008562:	d041      	beq.n	80085e8 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800856a:	799b      	ldrb	r3, [r3, #6]
 800856c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008570:	2b00      	cmp	r3, #0
 8008572:	d023      	beq.n	80085bc <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008580:	7858      	ldrb	r0, [r3, #1]
 8008582:	68f9      	ldr	r1, [r7, #12]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800858a:	699a      	ldr	r2, [r3, #24]
 800858c:	2301      	movs	r3, #1
 800858e:	f7fd fb33 	bl	8005bf8 <disk_write>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d006      	beq.n	80085a6 <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800859e:	2201      	movs	r2, #1
 80085a0:	71da      	strb	r2, [r3, #7]
 80085a2:	2301      	movs	r3, #1
 80085a4:	e07a      	b.n	800869c <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085ac:	799b      	ldrb	r3, [r3, #6]
 80085ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085ba:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085c8:	7858      	ldrb	r0, [r3, #1]
 80085ca:	68f9      	ldr	r1, [r7, #12]
 80085cc:	2301      	movs	r3, #1
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	f7fd faf2 	bl	8005bb8 <disk_read>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d006      	beq.n	80085e8 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085e0:	2201      	movs	r2, #1
 80085e2:	71da      	strb	r2, [r3, #7]
 80085e4:	2301      	movs	r3, #1
 80085e6:	e059      	b.n	800869c <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085ee:	461a      	mov	r2, r3
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008600:	895b      	ldrh	r3, [r3, #10]
 8008602:	4618      	mov	r0, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008612:	6812      	ldr	r2, [r2, #0]
 8008614:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008618:	8952      	ldrh	r2, [r2, #10]
 800861a:	fbb3 f1f2 	udiv	r1, r3, r2
 800861e:	fb01 f202 	mul.w	r2, r1, r2
 8008622:	1a9b      	subs	r3, r3, r2
 8008624:	1ac3      	subs	r3, r0, r3
 8008626:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (rcnt > btr) rcnt = btr;
 8008628:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	429a      	cmp	r2, r3
 800862e:	d901      	bls.n	8008634 <f_read+0x360>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	62bb      	str	r3, [r7, #40]	@ 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008642:	6812      	ldr	r2, [r2, #0]
 8008644:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008648:	8952      	ldrh	r2, [r2, #10]
 800864a:	fbb3 f1f2 	udiv	r1, r3, r2
 800864e:	fb01 f202 	mul.w	r2, r1, r2
 8008652:	1a9b      	subs	r3, r3, r2
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	4413      	add	r3, r2
 8008658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800865a:	4619      	mov	r1, r3
 800865c:	6a38      	ldr	r0, [r7, #32]
 800865e:	f7fd fb09 	bl	8005c74 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008662:	6a3a      	ldr	r2, [r7, #32]
 8008664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008666:	4413      	add	r3, r2
 8008668:	623b      	str	r3, [r7, #32]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008670:	689a      	ldr	r2, [r3, #8]
 8008672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008674:	4413      	add	r3, r2
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800867c:	6093      	str	r3, [r2, #8]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008684:	441a      	add	r2, r3
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	f47f ae5a 	bne.w	800834e <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3730      	adds	r7, #48	@ 0x30
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08a      	sub	sp, #40	@ 0x28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	2200      	movs	r2, #0
 80086ba:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f7ff fa81 	bl	8007bc4 <validate>
 80086c2:	4603      	mov	r3, r0
 80086c4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <f_write+0x2c>
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	e21e      	b.n	8008b0e <f_write+0x46a>
	if (fp->err)							/* Check error */
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086d6:	79db      	ldrb	r3, [r3, #7]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d004      	beq.n	80086e6 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086e2:	79db      	ldrb	r3, [r3, #7]
 80086e4:	e213      	b.n	8008b0e <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086ec:	799b      	ldrb	r3, [r3, #6]
 80086ee:	f003 0302 	and.w	r3, r3, #2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80086f6:	2307      	movs	r3, #7
 80086f8:	e209      	b.n	8008b0e <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008700:	689a      	ldr	r2, [r3, #8]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	441a      	add	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	429a      	cmp	r2, r3
 8008710:	f080 81d9 	bcs.w	8008ac6 <f_write+0x422>
 8008714:	2300      	movs	r3, #0
 8008716:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8008718:	e1d5      	b.n	8008ac6 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008728:	6812      	ldr	r2, [r2, #0]
 800872a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800872e:	8952      	ldrh	r2, [r2, #10]
 8008730:	fbb3 f1f2 	udiv	r1, r3, r2
 8008734:	fb01 f202 	mul.w	r2, r1, r2
 8008738:	1a9b      	subs	r3, r3, r2
 800873a:	2b00      	cmp	r3, #0
 800873c:	f040 8169 	bne.w	8008a12 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800874e:	6812      	ldr	r2, [r2, #0]
 8008750:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008754:	8952      	ldrh	r2, [r2, #10]
 8008756:	fbb3 f3f2 	udiv	r3, r3, r2
 800875a:	b2da      	uxtb	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008768:	789b      	ldrb	r3, [r3, #2]
 800876a:	3b01      	subs	r3, #1
 800876c:	b2db      	uxtb	r3, r3
 800876e:	4013      	ands	r3, r2
 8008770:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8008772:	7dbb      	ldrb	r3, [r7, #22]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d15f      	bne.n	8008838 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d111      	bne.n	80087a8 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008790:	2b00      	cmp	r3, #0
 8008792:	d126      	bne.n	80087e2 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2100      	movs	r1, #0
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe f8bb 	bl	800691a <create_chain>
 80087a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80087a6:	e01c      	b.n	80087e2 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d009      	beq.n	80087c8 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	4619      	mov	r1, r3
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f7fe f953 	bl	8006a6a <clmt_clust>
 80087c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80087c6:	e00c      	b.n	80087e2 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	4619      	mov	r1, r3
 80087da:	4610      	mov	r0, r2
 80087dc:	f7fe f89d 	bl	800691a <create_chain>
 80087e0:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80087e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 8173 	beq.w	8008ad0 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80087ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d106      	bne.n	80087fe <f_write+0x15a>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087f6:	2202      	movs	r2, #2
 80087f8:	71da      	strb	r2, [r3, #7]
 80087fa:	2302      	movs	r3, #2
 80087fc:	e187      	b.n	8008b0e <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80087fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008804:	d106      	bne.n	8008814 <f_write+0x170>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800880c:	2201      	movs	r2, #1
 800880e:	71da      	strb	r2, [r3, #7]
 8008810:	2301      	movs	r3, #1
 8008812:	e17c      	b.n	8008b0e <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800881a:	461a      	mov	r2, r3
 800881c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881e:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d105      	bne.n	8008838 <f_write+0x194>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008832:	461a      	mov	r2, r3
 8008834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008836:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800883e:	799b      	ldrb	r3, [r3, #6]
 8008840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008844:	2b00      	cmp	r3, #0
 8008846:	d023      	beq.n	8008890 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008854:	7858      	ldrb	r0, [r3, #1]
 8008856:	68f9      	ldr	r1, [r7, #12]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800885e:	699a      	ldr	r2, [r3, #24]
 8008860:	2301      	movs	r3, #1
 8008862:	f7fd f9c9 	bl	8005bf8 <disk_write>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d006      	beq.n	800887a <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008872:	2201      	movs	r2, #1
 8008874:	71da      	strb	r2, [r3, #7]
 8008876:	2301      	movs	r3, #1
 8008878:	e149      	b.n	8008b0e <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008880:	799b      	ldrb	r3, [r3, #6]
 8008882:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008886:	b2da      	uxtb	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800888e:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	4619      	mov	r1, r3
 80088a2:	4610      	mov	r0, r2
 80088a4:	f7fd fd65 	bl	8006372 <clust2sect>
 80088a8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d106      	bne.n	80088be <f_write+0x21a>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088b6:	2202      	movs	r2, #2
 80088b8:	71da      	strb	r2, [r3, #7]
 80088ba:	2302      	movs	r3, #2
 80088bc:	e127      	b.n	8008b0e <f_write+0x46a>
			sect += csect;
 80088be:	7dbb      	ldrb	r3, [r7, #22]
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	4413      	add	r3, r2
 80088c4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088d2:	895b      	ldrh	r3, [r3, #10]
 80088d4:	461a      	mov	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80088dc:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d069      	beq.n	80089b8 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80088e4:	7dba      	ldrb	r2, [r7, #22]
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	4413      	add	r3, r2
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80088f0:	6812      	ldr	r2, [r2, #0]
 80088f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80088f6:	7892      	ldrb	r2, [r2, #2]
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d90a      	bls.n	8008912 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008908:	789b      	ldrb	r3, [r3, #2]
 800890a:	461a      	mov	r2, r3
 800890c:	7dbb      	ldrb	r3, [r7, #22]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800891e:	7858      	ldrb	r0, [r3, #1]
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	69b9      	ldr	r1, [r7, #24]
 8008926:	f7fd f967 	bl	8005bf8 <disk_write>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d006      	beq.n	800893e <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008936:	2201      	movs	r2, #1
 8008938:	71da      	strb	r2, [r3, #7]
 800893a:	2301      	movs	r3, #1
 800893c:	e0e7      	b.n	8008b0e <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008944:	699a      	ldr	r2, [r3, #24]
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	69fa      	ldr	r2, [r7, #28]
 800894c:	429a      	cmp	r2, r3
 800894e:	d926      	bls.n	800899e <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008958:	699a      	ldr	r2, [r3, #24]
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008964:	6812      	ldr	r2, [r2, #0]
 8008966:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800896a:	8952      	ldrh	r2, [r2, #10]
 800896c:	fb02 f303 	mul.w	r3, r2, r3
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	18d1      	adds	r1, r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008980:	895b      	ldrh	r3, [r3, #10]
 8008982:	461a      	mov	r2, r3
 8008984:	f7fd f976 	bl	8005c74 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800898e:	799b      	ldrb	r3, [r3, #6]
 8008990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008994:	b2da      	uxtb	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800899c:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089aa:	895b      	ldrh	r3, [r3, #10]
 80089ac:	461a      	mov	r2, r3
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	fb02 f303 	mul.w	r3, r2, r3
 80089b4:	623b      	str	r3, [r7, #32]
				continue;
 80089b6:	e06e      	b.n	8008a96 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d01f      	beq.n	8008a06 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089cc:	689a      	ldr	r2, [r3, #8]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d215      	bcs.n	8008a06 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089e6:	7858      	ldrb	r0, [r3, #1]
 80089e8:	68f9      	ldr	r1, [r7, #12]
 80089ea:	2301      	movs	r3, #1
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	f7fd f8e3 	bl	8005bb8 <disk_read>
 80089f2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d006      	beq.n	8008a06 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089fe:	2201      	movs	r2, #1
 8008a00:	71da      	strb	r2, [r3, #7]
 8008a02:	2301      	movs	r3, #1
 8008a04:	e083      	b.n	8008b0e <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a1e:	895b      	ldrh	r3, [r3, #10]
 8008a20:	4618      	mov	r0, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008a30:	6812      	ldr	r2, [r2, #0]
 8008a32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008a36:	8952      	ldrh	r2, [r2, #10]
 8008a38:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a3c:	fb01 f202 	mul.w	r2, r1, r2
 8008a40:	1a9b      	subs	r3, r3, r2
 8008a42:	1ac3      	subs	r3, r0, r3
 8008a44:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8008a46:	6a3a      	ldr	r2, [r7, #32]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d901      	bls.n	8008a52 <f_write+0x3ae>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008a60:	6812      	ldr	r2, [r2, #0]
 8008a62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008a66:	8952      	ldrh	r2, [r2, #10]
 8008a68:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a6c:	fb01 f202 	mul.w	r2, r1, r2
 8008a70:	1a9b      	subs	r3, r3, r2
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	4413      	add	r3, r2
 8008a76:	6a3a      	ldr	r2, [r7, #32]
 8008a78:	69b9      	ldr	r1, [r7, #24]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fd f8fa 	bl	8005c74 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a86:	799b      	ldrb	r3, [r3, #6]
 8008a88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a94:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	61bb      	str	r3, [r7, #24]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008aa4:	689a      	ldr	r2, [r3, #8]
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008ab0:	6093      	str	r3, [r2, #8]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	441a      	add	r2, r3
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f47f ae26 	bne.w	800871a <f_write+0x76>
 8008ace:	e000      	b.n	8008ad2 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008ad0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ad8:	689a      	ldr	r2, [r3, #8]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d907      	bls.n	8008af6 <f_write+0x452>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008af4:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008afc:	799b      	ldrb	r3, [r3, #6]
 8008afe:	f043 0320 	orr.w	r3, r3, #32
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b0a:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3728      	adds	r7, #40	@ 0x28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b086      	sub	sp, #24
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f7ff f850 	bl	8007bc4 <validate>
 8008b24:	4603      	mov	r3, r0
 8008b26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b28:	7dfb      	ldrb	r3, [r7, #23]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f040 80bc 	bne.w	8008ca8 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b36:	799b      	ldrb	r3, [r3, #6]
 8008b38:	f003 0320 	and.w	r3, r3, #32
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 80b3 	beq.w	8008ca8 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b48:	799b      	ldrb	r3, [r3, #6]
 8008b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d01e      	beq.n	8008b90 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b5e:	7858      	ldrb	r0, [r3, #1]
 8008b60:	6879      	ldr	r1, [r7, #4]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b68:	699a      	ldr	r2, [r3, #24]
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	f7fd f844 	bl	8005bf8 <disk_write>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008b76:	2301      	movs	r3, #1
 8008b78:	e097      	b.n	8008caa <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b80:	799b      	ldrb	r3, [r3, #6]
 8008b82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b8e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	f7fd faf4 	bl	8006190 <move_window>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d17a      	bne.n	8008ca8 <f_sync+0x192>
				dir = fp->dir_ptr;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	330b      	adds	r3, #11
 8008bc0:	781a      	ldrb	r2, [r3, #0]
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	330b      	adds	r3, #11
 8008bc6:	f042 0220 	orr.w	r2, r2, #32
 8008bca:	b2d2      	uxtb	r2, r2
 8008bcc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bd4:	68da      	ldr	r2, [r3, #12]
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	331c      	adds	r3, #28
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	701a      	strb	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	0a1b      	lsrs	r3, r3, #8
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	331d      	adds	r3, #29
 8008bf0:	b2d2      	uxtb	r2, r2
 8008bf2:	701a      	strb	r2, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	0c1a      	lsrs	r2, r3, #16
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	331e      	adds	r3, #30
 8008c02:	b2d2      	uxtb	r2, r2
 8008c04:	701a      	strb	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	0e1a      	lsrs	r2, r3, #24
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	331f      	adds	r3, #31
 8008c14:	b2d2      	uxtb	r2, r2
 8008c16:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	4619      	mov	r1, r3
 8008c22:	6938      	ldr	r0, [r7, #16]
 8008c24:	f7fe f9f7 	bl	8007016 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008c28:	f7fc ff28 	bl	8005a7c <get_fattime>
 8008c2c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	3316      	adds	r3, #22
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	b2d2      	uxtb	r2, r2
 8008c36:	701a      	strb	r2, [r3, #0]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	0a1b      	lsrs	r3, r3, #8
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	3317      	adds	r3, #23
 8008c44:	b2d2      	uxtb	r2, r2
 8008c46:	701a      	strb	r2, [r3, #0]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	0c1a      	lsrs	r2, r3, #16
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	3318      	adds	r3, #24
 8008c50:	b2d2      	uxtb	r2, r2
 8008c52:	701a      	strb	r2, [r3, #0]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	0e1a      	lsrs	r2, r3, #24
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	3319      	adds	r3, #25
 8008c5c:	b2d2      	uxtb	r2, r2
 8008c5e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	3312      	adds	r3, #18
 8008c64:	2200      	movs	r2, #0
 8008c66:	701a      	strb	r2, [r3, #0]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	3313      	adds	r3, #19
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c76:	799b      	ldrb	r3, [r3, #6]
 8008c78:	f023 0320 	bic.w	r3, r3, #32
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c84:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c92:	2201      	movs	r2, #1
 8008c94:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fd faa8 	bl	80061f4 <sync_fs>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff ff2b 	bl	8008b16 <f_sync>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d119      	bne.n	8008cfe <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7fe ff7a 	bl	8007bc4 <validate>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d111      	bne.n	8008cfe <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fd f994 	bl	8006010 <dec_lock>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d105      	bne.n	8008cfe <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b090      	sub	sp, #64	@ 0x40
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7fe ff56 	bl	8007bc4 <validate>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008d1e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d002      	beq.n	8008d2c <f_lseek+0x24>
 8008d26:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008d2a:	e2da      	b.n	80092e2 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d32:	79db      	ldrb	r3, [r3, #7]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d004      	beq.n	8008d42 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d3e:	79db      	ldrb	r3, [r3, #7]
 8008d40:	e2cf      	b.n	80092e2 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 8124 	beq.w	8008f98 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d56:	d16c      	bne.n	8008e32 <f_lseek+0x12a>
			tbl = fp->cltbl;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d60:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d64:	1d1a      	adds	r2, r3, #4
 8008d66:	627a      	str	r2, [r7, #36]	@ 0x24
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	617b      	str	r3, [r7, #20]
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d046      	beq.n	8008e0e <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d82:	613b      	str	r3, [r7, #16]
 8008d84:	2300      	movs	r3, #0
 8008d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8a:	3302      	adds	r3, #2
 8008d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d94:	3301      	adds	r3, #1
 8008d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fd fb0a 	bl	80063bc <get_fat>
 8008da8:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d806      	bhi.n	8008dbe <f_lseek+0xb6>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008db6:	2202      	movs	r2, #2
 8008db8:	71da      	strb	r2, [r3, #7]
 8008dba:	2302      	movs	r3, #2
 8008dbc:	e291      	b.n	80092e2 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc4:	d106      	bne.n	8008dd4 <f_lseek+0xcc>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008dcc:	2201      	movs	r2, #1
 8008dce:	71da      	strb	r2, [r3, #7]
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e286      	b.n	80092e2 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d0d7      	beq.n	8008d8e <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008dde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d809      	bhi.n	8008dfa <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8008de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de8:	1d1a      	adds	r2, r3, #4
 8008dea:	627a      	str	r2, [r7, #36]	@ 0x24
 8008dec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df2:	1d1a      	adds	r2, r3, #4
 8008df4:	627a      	str	r2, [r7, #36]	@ 0x24
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d3b8      	bcc.n	8008d80 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e18:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8008e1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d803      	bhi.n	8008e2a <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8008e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	e259      	b.n	80092de <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008e2a:	2311      	movs	r3, #17
 8008e2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008e30:	e255      	b.n	80092de <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	683a      	ldr	r2, [r7, #0]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d904      	bls.n	8008e4a <f_lseek+0x142>
				ofs = fp->fsize;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e50:	461a      	mov	r2, r3
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 8240 	beq.w	80092de <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7fd fe00 	bl	8006a6a <clmt_clust>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e72:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	4619      	mov	r1, r3
 8008e86:	4610      	mov	r0, r2
 8008e88:	f7fd fa73 	bl	8006372 <clust2sect>
 8008e8c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d106      	bne.n	8008ea2 <f_lseek+0x19a>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	71da      	strb	r2, [r3, #7]
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	e21f      	b.n	80092e2 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008eac:	6812      	ldr	r2, [r2, #0]
 8008eae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008eb2:	8952      	ldrh	r2, [r2, #10]
 8008eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008ebe:	6812      	ldr	r2, [r2, #0]
 8008ec0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008ec4:	7892      	ldrb	r2, [r2, #2]
 8008ec6:	3a01      	subs	r2, #1
 8008ec8:	4013      	ands	r3, r2
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	4413      	add	r3, r2
 8008ece:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008ede:	6812      	ldr	r2, [r2, #0]
 8008ee0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008ee4:	8952      	ldrh	r2, [r2, #10]
 8008ee6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008eea:	fb01 f202 	mul.w	r2, r1, r2
 8008eee:	1a9b      	subs	r3, r3, r2
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 81f4 	beq.w	80092de <f_lseek+0x5d6>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	69ba      	ldr	r2, [r7, #24]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	f000 81ec 	beq.w	80092de <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f0c:	799b      	ldrb	r3, [r3, #6]
 8008f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d023      	beq.n	8008f5e <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f22:	7858      	ldrb	r0, [r3, #1]
 8008f24:	6879      	ldr	r1, [r7, #4]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f2c:	699a      	ldr	r2, [r3, #24]
 8008f2e:	2301      	movs	r3, #1
 8008f30:	f7fc fe62 	bl	8005bf8 <disk_write>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d006      	beq.n	8008f48 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f40:	2201      	movs	r2, #1
 8008f42:	71da      	strb	r2, [r3, #7]
 8008f44:	2301      	movs	r3, #1
 8008f46:	e1cc      	b.n	80092e2 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f4e:	799b      	ldrb	r3, [r3, #6]
 8008f50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f5c:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f6a:	7858      	ldrb	r0, [r3, #1]
 8008f6c:	6879      	ldr	r1, [r7, #4]
 8008f6e:	2301      	movs	r3, #1
 8008f70:	69ba      	ldr	r2, [r7, #24]
 8008f72:	f7fc fe21 	bl	8005bb8 <disk_read>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d006      	beq.n	8008f8a <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f82:	2201      	movs	r2, #1
 8008f84:	71da      	strb	r2, [r3, #7]
 8008f86:	2301      	movs	r3, #1
 8008f88:	e1ab      	b.n	80092e2 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f90:	461a      	mov	r2, r3
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	6193      	str	r3, [r2, #24]
 8008f96:	e1a2      	b.n	80092de <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d90c      	bls.n	8008fc0 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fac:	799b      	ldrb	r3, [r3, #6]
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d104      	bne.n	8008fc0 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd8:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 8100 	beq.w	80091e2 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fee:	789b      	ldrb	r3, [r3, #2]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ffe:	895b      	ldrh	r3, [r3, #10]
 8009000:	fb02 f303 	mul.w	r3, r2, r3
 8009004:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009006:	6a3b      	ldr	r3, [r7, #32]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d021      	beq.n	8009050 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	1e5a      	subs	r2, r3, #1
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	fbb2 f2f3 	udiv	r2, r2, r3
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	1e59      	subs	r1, r3, #1
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009020:	429a      	cmp	r2, r3
 8009022:	d315      	bcc.n	8009050 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009024:	6a3b      	ldr	r3, [r7, #32]
 8009026:	1e5a      	subs	r2, r3, #1
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	425b      	negs	r3, r3
 800902c:	4013      	ands	r3, r2
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009034:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800904a:	695b      	ldr	r3, [r3, #20]
 800904c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800904e:	e031      	b.n	80090b4 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800905a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800905c:	2b00      	cmp	r3, #0
 800905e:	d123      	bne.n	80090a8 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2100      	movs	r1, #0
 800906a:	4618      	mov	r0, r3
 800906c:	f7fd fc55 	bl	800691a <create_chain>
 8009070:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009074:	2b01      	cmp	r3, #1
 8009076:	d106      	bne.n	8009086 <f_lseek+0x37e>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800907e:	2202      	movs	r2, #2
 8009080:	71da      	strb	r2, [r3, #7]
 8009082:	2302      	movs	r3, #2
 8009084:	e12d      	b.n	80092e2 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908c:	d106      	bne.n	800909c <f_lseek+0x394>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009094:	2201      	movs	r2, #1
 8009096:	71da      	strb	r2, [r3, #7]
 8009098:	2301      	movs	r3, #1
 800909a:	e122      	b.n	80092e2 <f_lseek+0x5da>
					fp->sclust = clst;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090a2:	461a      	mov	r2, r3
 80090a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a6:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090ae:	461a      	mov	r2, r3
 80090b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b2:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 80090b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f000 8093 	beq.w	80091e2 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 80090bc:	e052      	b.n	8009164 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090c4:	799b      	ldrb	r3, [r3, #6]
 80090c6:	f003 0302 	and.w	r3, r3, #2
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00e      	beq.n	80090ec <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fd fc1e 	bl	800691a <create_chain>
 80090de:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 80090e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10b      	bne.n	80090fe <f_lseek+0x3f6>
							ofs = bcs; break;
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	603b      	str	r3, [r7, #0]
 80090ea:	e03f      	b.n	800916c <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fd f960 	bl	80063bc <get_fat>
 80090fc:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80090fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009104:	d106      	bne.n	8009114 <f_lseek+0x40c>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800910c:	2201      	movs	r2, #1
 800910e:	71da      	strb	r2, [r3, #7]
 8009110:	2301      	movs	r3, #1
 8009112:	e0e6      	b.n	80092e2 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8009114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009116:	2b01      	cmp	r3, #1
 8009118:	d909      	bls.n	800912e <f_lseek+0x426>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800912a:	429a      	cmp	r2, r3
 800912c:	d306      	bcc.n	800913c <f_lseek+0x434>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009134:	2202      	movs	r2, #2
 8009136:	71da      	strb	r2, [r3, #7]
 8009138:	2302      	movs	r3, #2
 800913a:	e0d2      	b.n	80092e2 <f_lseek+0x5da>
					fp->clust = clst;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009142:	461a      	mov	r2, r3
 8009144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009146:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800914e:	689a      	ldr	r2, [r3, #8]
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	4413      	add	r3, r2
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800915a:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	429a      	cmp	r2, r3
 800916a:	d8a8      	bhi.n	80090be <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009172:	689a      	ldr	r2, [r3, #8]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	4413      	add	r3, r2
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800917e:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800918c:	895b      	ldrh	r3, [r3, #10]
 800918e:	461a      	mov	r2, r3
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	fbb3 f1f2 	udiv	r1, r3, r2
 8009196:	fb01 f202 	mul.w	r2, r1, r2
 800919a:	1a9b      	subs	r3, r3, r2
 800919c:	2b00      	cmp	r3, #0
 800919e:	d020      	beq.n	80091e2 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fd f8e1 	bl	8006372 <clust2sect>
 80091b0:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80091b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d106      	bne.n	80091c6 <f_lseek+0x4be>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091be:	2202      	movs	r2, #2
 80091c0:	71da      	strb	r2, [r3, #7]
 80091c2:	2302      	movs	r3, #2
 80091c4:	e08d      	b.n	80092e2 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091d2:	895b      	ldrh	r3, [r3, #10]
 80091d4:	461a      	mov	r2, r3
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80091dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091de:	4413      	add	r3, r2
 80091e0:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80091f0:	6812      	ldr	r2, [r2, #0]
 80091f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80091f6:	8952      	ldrh	r2, [r2, #10]
 80091f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80091fc:	fb01 f202 	mul.w	r2, r1, r2
 8009200:	1a9b      	subs	r3, r3, r2
 8009202:	2b00      	cmp	r3, #0
 8009204:	d04e      	beq.n	80092a4 <f_lseek+0x59c>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800920c:	699b      	ldr	r3, [r3, #24]
 800920e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009210:	429a      	cmp	r2, r3
 8009212:	d047      	beq.n	80092a4 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800921a:	799b      	ldrb	r3, [r3, #6]
 800921c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009220:	2b00      	cmp	r3, #0
 8009222:	d023      	beq.n	800926c <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009230:	7858      	ldrb	r0, [r3, #1]
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800923a:	699a      	ldr	r2, [r3, #24]
 800923c:	2301      	movs	r3, #1
 800923e:	f7fc fcdb 	bl	8005bf8 <disk_write>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d006      	beq.n	8009256 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800924e:	2201      	movs	r2, #1
 8009250:	71da      	strb	r2, [r3, #7]
 8009252:	2301      	movs	r3, #1
 8009254:	e045      	b.n	80092e2 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800925c:	799b      	ldrb	r3, [r3, #6]
 800925e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009262:	b2da      	uxtb	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800926a:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009278:	7858      	ldrb	r0, [r3, #1]
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	2301      	movs	r3, #1
 800927e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009280:	f7fc fc9a 	bl	8005bb8 <disk_read>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d006      	beq.n	8009298 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009290:	2201      	movs	r2, #1
 8009292:	71da      	strb	r2, [r3, #7]
 8009294:	2301      	movs	r3, #1
 8009296:	e024      	b.n	80092e2 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800929e:	461a      	mov	r2, r3
 80092a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092a2:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092aa:	689a      	ldr	r2, [r3, #8]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d912      	bls.n	80092de <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80092c6:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092ce:	799b      	ldrb	r3, [r3, #6]
 80092d0:	f043 0320 	orr.w	r3, r3, #32
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092dc:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 80092de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3740      	adds	r7, #64	@ 0x40
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
	...

080092ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b087      	sub	sp, #28
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	4613      	mov	r3, r2
 80092f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80092fa:	2301      	movs	r3, #1
 80092fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009302:	4b1f      	ldr	r3, [pc, #124]	@ (8009380 <FATFS_LinkDriverEx+0x94>)
 8009304:	7a5b      	ldrb	r3, [r3, #9]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b01      	cmp	r3, #1
 800930a:	d831      	bhi.n	8009370 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800930c:	4b1c      	ldr	r3, [pc, #112]	@ (8009380 <FATFS_LinkDriverEx+0x94>)
 800930e:	7a5b      	ldrb	r3, [r3, #9]
 8009310:	b2db      	uxtb	r3, r3
 8009312:	461a      	mov	r2, r3
 8009314:	4b1a      	ldr	r3, [pc, #104]	@ (8009380 <FATFS_LinkDriverEx+0x94>)
 8009316:	2100      	movs	r1, #0
 8009318:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800931a:	4b19      	ldr	r3, [pc, #100]	@ (8009380 <FATFS_LinkDriverEx+0x94>)
 800931c:	7a5b      	ldrb	r3, [r3, #9]
 800931e:	b2db      	uxtb	r3, r3
 8009320:	4a17      	ldr	r2, [pc, #92]	@ (8009380 <FATFS_LinkDriverEx+0x94>)
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800932a:	4b15      	ldr	r3, [pc, #84]	@ (8009380 <FATFS_LinkDriverEx+0x94>)
 800932c:	7a5b      	ldrb	r3, [r3, #9]
 800932e:	b2db      	uxtb	r3, r3
 8009330:	461a      	mov	r2, r3
 8009332:	4b13      	ldr	r3, [pc, #76]	@ (8009380 <FATFS_LinkDriverEx+0x94>)
 8009334:	4413      	add	r3, r2
 8009336:	79fa      	ldrb	r2, [r7, #7]
 8009338:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800933a:	4b11      	ldr	r3, [pc, #68]	@ (8009380 <FATFS_LinkDriverEx+0x94>)
 800933c:	7a5b      	ldrb	r3, [r3, #9]
 800933e:	b2db      	uxtb	r3, r3
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	b2d1      	uxtb	r1, r2
 8009344:	4a0e      	ldr	r2, [pc, #56]	@ (8009380 <FATFS_LinkDriverEx+0x94>)
 8009346:	7251      	strb	r1, [r2, #9]
 8009348:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800934a:	7dbb      	ldrb	r3, [r7, #22]
 800934c:	3330      	adds	r3, #48	@ 0x30
 800934e:	b2da      	uxtb	r2, r3
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	3301      	adds	r3, #1
 8009358:	223a      	movs	r2, #58	@ 0x3a
 800935a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	3302      	adds	r3, #2
 8009360:	222f      	movs	r2, #47	@ 0x2f
 8009362:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	3303      	adds	r3, #3
 8009368:	2200      	movs	r2, #0
 800936a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800936c:	2300      	movs	r3, #0
 800936e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009370:	7dfb      	ldrb	r3, [r7, #23]
}
 8009372:	4618      	mov	r0, r3
 8009374:	371c      	adds	r7, #28
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	20001344 	.word	0x20001344

08009384 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800938e:	2200      	movs	r2, #0
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7ff ffaa 	bl	80092ec <FATFS_LinkDriverEx>
 8009398:	4603      	mov	r3, r0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <_vsiprintf_r>:
 80093a4:	b500      	push	{lr}
 80093a6:	b09b      	sub	sp, #108	@ 0x6c
 80093a8:	9100      	str	r1, [sp, #0]
 80093aa:	9104      	str	r1, [sp, #16]
 80093ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80093b0:	9105      	str	r1, [sp, #20]
 80093b2:	9102      	str	r1, [sp, #8]
 80093b4:	4905      	ldr	r1, [pc, #20]	@ (80093cc <_vsiprintf_r+0x28>)
 80093b6:	9103      	str	r1, [sp, #12]
 80093b8:	4669      	mov	r1, sp
 80093ba:	f000 f99b 	bl	80096f4 <_svfiprintf_r>
 80093be:	9b00      	ldr	r3, [sp, #0]
 80093c0:	2200      	movs	r2, #0
 80093c2:	701a      	strb	r2, [r3, #0]
 80093c4:	b01b      	add	sp, #108	@ 0x6c
 80093c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80093ca:	bf00      	nop
 80093cc:	ffff0208 	.word	0xffff0208

080093d0 <vsiprintf>:
 80093d0:	4613      	mov	r3, r2
 80093d2:	460a      	mov	r2, r1
 80093d4:	4601      	mov	r1, r0
 80093d6:	4802      	ldr	r0, [pc, #8]	@ (80093e0 <vsiprintf+0x10>)
 80093d8:	6800      	ldr	r0, [r0, #0]
 80093da:	f7ff bfe3 	b.w	80093a4 <_vsiprintf_r>
 80093de:	bf00      	nop
 80093e0:	20000030 	.word	0x20000030

080093e4 <memset>:
 80093e4:	4402      	add	r2, r0
 80093e6:	4603      	mov	r3, r0
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d100      	bne.n	80093ee <memset+0xa>
 80093ec:	4770      	bx	lr
 80093ee:	f803 1b01 	strb.w	r1, [r3], #1
 80093f2:	e7f9      	b.n	80093e8 <memset+0x4>

080093f4 <__errno>:
 80093f4:	4b01      	ldr	r3, [pc, #4]	@ (80093fc <__errno+0x8>)
 80093f6:	6818      	ldr	r0, [r3, #0]
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	20000030 	.word	0x20000030

08009400 <__libc_init_array>:
 8009400:	b570      	push	{r4, r5, r6, lr}
 8009402:	4d0d      	ldr	r5, [pc, #52]	@ (8009438 <__libc_init_array+0x38>)
 8009404:	4c0d      	ldr	r4, [pc, #52]	@ (800943c <__libc_init_array+0x3c>)
 8009406:	1b64      	subs	r4, r4, r5
 8009408:	10a4      	asrs	r4, r4, #2
 800940a:	2600      	movs	r6, #0
 800940c:	42a6      	cmp	r6, r4
 800940e:	d109      	bne.n	8009424 <__libc_init_array+0x24>
 8009410:	4d0b      	ldr	r5, [pc, #44]	@ (8009440 <__libc_init_array+0x40>)
 8009412:	4c0c      	ldr	r4, [pc, #48]	@ (8009444 <__libc_init_array+0x44>)
 8009414:	f000 fc66 	bl	8009ce4 <_init>
 8009418:	1b64      	subs	r4, r4, r5
 800941a:	10a4      	asrs	r4, r4, #2
 800941c:	2600      	movs	r6, #0
 800941e:	42a6      	cmp	r6, r4
 8009420:	d105      	bne.n	800942e <__libc_init_array+0x2e>
 8009422:	bd70      	pop	{r4, r5, r6, pc}
 8009424:	f855 3b04 	ldr.w	r3, [r5], #4
 8009428:	4798      	blx	r3
 800942a:	3601      	adds	r6, #1
 800942c:	e7ee      	b.n	800940c <__libc_init_array+0xc>
 800942e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009432:	4798      	blx	r3
 8009434:	3601      	adds	r6, #1
 8009436:	e7f2      	b.n	800941e <__libc_init_array+0x1e>
 8009438:	08009fa0 	.word	0x08009fa0
 800943c:	08009fa0 	.word	0x08009fa0
 8009440:	08009fa0 	.word	0x08009fa0
 8009444:	08009fa4 	.word	0x08009fa4

08009448 <__retarget_lock_acquire_recursive>:
 8009448:	4770      	bx	lr

0800944a <__retarget_lock_release_recursive>:
 800944a:	4770      	bx	lr

0800944c <_free_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4605      	mov	r5, r0
 8009450:	2900      	cmp	r1, #0
 8009452:	d041      	beq.n	80094d8 <_free_r+0x8c>
 8009454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009458:	1f0c      	subs	r4, r1, #4
 800945a:	2b00      	cmp	r3, #0
 800945c:	bfb8      	it	lt
 800945e:	18e4      	addlt	r4, r4, r3
 8009460:	f000 f8e0 	bl	8009624 <__malloc_lock>
 8009464:	4a1d      	ldr	r2, [pc, #116]	@ (80094dc <_free_r+0x90>)
 8009466:	6813      	ldr	r3, [r2, #0]
 8009468:	b933      	cbnz	r3, 8009478 <_free_r+0x2c>
 800946a:	6063      	str	r3, [r4, #4]
 800946c:	6014      	str	r4, [r2, #0]
 800946e:	4628      	mov	r0, r5
 8009470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009474:	f000 b8dc 	b.w	8009630 <__malloc_unlock>
 8009478:	42a3      	cmp	r3, r4
 800947a:	d908      	bls.n	800948e <_free_r+0x42>
 800947c:	6820      	ldr	r0, [r4, #0]
 800947e:	1821      	adds	r1, r4, r0
 8009480:	428b      	cmp	r3, r1
 8009482:	bf01      	itttt	eq
 8009484:	6819      	ldreq	r1, [r3, #0]
 8009486:	685b      	ldreq	r3, [r3, #4]
 8009488:	1809      	addeq	r1, r1, r0
 800948a:	6021      	streq	r1, [r4, #0]
 800948c:	e7ed      	b.n	800946a <_free_r+0x1e>
 800948e:	461a      	mov	r2, r3
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	b10b      	cbz	r3, 8009498 <_free_r+0x4c>
 8009494:	42a3      	cmp	r3, r4
 8009496:	d9fa      	bls.n	800948e <_free_r+0x42>
 8009498:	6811      	ldr	r1, [r2, #0]
 800949a:	1850      	adds	r0, r2, r1
 800949c:	42a0      	cmp	r0, r4
 800949e:	d10b      	bne.n	80094b8 <_free_r+0x6c>
 80094a0:	6820      	ldr	r0, [r4, #0]
 80094a2:	4401      	add	r1, r0
 80094a4:	1850      	adds	r0, r2, r1
 80094a6:	4283      	cmp	r3, r0
 80094a8:	6011      	str	r1, [r2, #0]
 80094aa:	d1e0      	bne.n	800946e <_free_r+0x22>
 80094ac:	6818      	ldr	r0, [r3, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	6053      	str	r3, [r2, #4]
 80094b2:	4408      	add	r0, r1
 80094b4:	6010      	str	r0, [r2, #0]
 80094b6:	e7da      	b.n	800946e <_free_r+0x22>
 80094b8:	d902      	bls.n	80094c0 <_free_r+0x74>
 80094ba:	230c      	movs	r3, #12
 80094bc:	602b      	str	r3, [r5, #0]
 80094be:	e7d6      	b.n	800946e <_free_r+0x22>
 80094c0:	6820      	ldr	r0, [r4, #0]
 80094c2:	1821      	adds	r1, r4, r0
 80094c4:	428b      	cmp	r3, r1
 80094c6:	bf04      	itt	eq
 80094c8:	6819      	ldreq	r1, [r3, #0]
 80094ca:	685b      	ldreq	r3, [r3, #4]
 80094cc:	6063      	str	r3, [r4, #4]
 80094ce:	bf04      	itt	eq
 80094d0:	1809      	addeq	r1, r1, r0
 80094d2:	6021      	streq	r1, [r4, #0]
 80094d4:	6054      	str	r4, [r2, #4]
 80094d6:	e7ca      	b.n	800946e <_free_r+0x22>
 80094d8:	bd38      	pop	{r3, r4, r5, pc}
 80094da:	bf00      	nop
 80094dc:	20001494 	.word	0x20001494

080094e0 <sbrk_aligned>:
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	4e0f      	ldr	r6, [pc, #60]	@ (8009520 <sbrk_aligned+0x40>)
 80094e4:	460c      	mov	r4, r1
 80094e6:	6831      	ldr	r1, [r6, #0]
 80094e8:	4605      	mov	r5, r0
 80094ea:	b911      	cbnz	r1, 80094f2 <sbrk_aligned+0x12>
 80094ec:	f000 fba6 	bl	8009c3c <_sbrk_r>
 80094f0:	6030      	str	r0, [r6, #0]
 80094f2:	4621      	mov	r1, r4
 80094f4:	4628      	mov	r0, r5
 80094f6:	f000 fba1 	bl	8009c3c <_sbrk_r>
 80094fa:	1c43      	adds	r3, r0, #1
 80094fc:	d103      	bne.n	8009506 <sbrk_aligned+0x26>
 80094fe:	f04f 34ff 	mov.w	r4, #4294967295
 8009502:	4620      	mov	r0, r4
 8009504:	bd70      	pop	{r4, r5, r6, pc}
 8009506:	1cc4      	adds	r4, r0, #3
 8009508:	f024 0403 	bic.w	r4, r4, #3
 800950c:	42a0      	cmp	r0, r4
 800950e:	d0f8      	beq.n	8009502 <sbrk_aligned+0x22>
 8009510:	1a21      	subs	r1, r4, r0
 8009512:	4628      	mov	r0, r5
 8009514:	f000 fb92 	bl	8009c3c <_sbrk_r>
 8009518:	3001      	adds	r0, #1
 800951a:	d1f2      	bne.n	8009502 <sbrk_aligned+0x22>
 800951c:	e7ef      	b.n	80094fe <sbrk_aligned+0x1e>
 800951e:	bf00      	nop
 8009520:	20001490 	.word	0x20001490

08009524 <_malloc_r>:
 8009524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009528:	1ccd      	adds	r5, r1, #3
 800952a:	f025 0503 	bic.w	r5, r5, #3
 800952e:	3508      	adds	r5, #8
 8009530:	2d0c      	cmp	r5, #12
 8009532:	bf38      	it	cc
 8009534:	250c      	movcc	r5, #12
 8009536:	2d00      	cmp	r5, #0
 8009538:	4606      	mov	r6, r0
 800953a:	db01      	blt.n	8009540 <_malloc_r+0x1c>
 800953c:	42a9      	cmp	r1, r5
 800953e:	d904      	bls.n	800954a <_malloc_r+0x26>
 8009540:	230c      	movs	r3, #12
 8009542:	6033      	str	r3, [r6, #0]
 8009544:	2000      	movs	r0, #0
 8009546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800954a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009620 <_malloc_r+0xfc>
 800954e:	f000 f869 	bl	8009624 <__malloc_lock>
 8009552:	f8d8 3000 	ldr.w	r3, [r8]
 8009556:	461c      	mov	r4, r3
 8009558:	bb44      	cbnz	r4, 80095ac <_malloc_r+0x88>
 800955a:	4629      	mov	r1, r5
 800955c:	4630      	mov	r0, r6
 800955e:	f7ff ffbf 	bl	80094e0 <sbrk_aligned>
 8009562:	1c43      	adds	r3, r0, #1
 8009564:	4604      	mov	r4, r0
 8009566:	d158      	bne.n	800961a <_malloc_r+0xf6>
 8009568:	f8d8 4000 	ldr.w	r4, [r8]
 800956c:	4627      	mov	r7, r4
 800956e:	2f00      	cmp	r7, #0
 8009570:	d143      	bne.n	80095fa <_malloc_r+0xd6>
 8009572:	2c00      	cmp	r4, #0
 8009574:	d04b      	beq.n	800960e <_malloc_r+0xea>
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	4639      	mov	r1, r7
 800957a:	4630      	mov	r0, r6
 800957c:	eb04 0903 	add.w	r9, r4, r3
 8009580:	f000 fb5c 	bl	8009c3c <_sbrk_r>
 8009584:	4581      	cmp	r9, r0
 8009586:	d142      	bne.n	800960e <_malloc_r+0xea>
 8009588:	6821      	ldr	r1, [r4, #0]
 800958a:	1a6d      	subs	r5, r5, r1
 800958c:	4629      	mov	r1, r5
 800958e:	4630      	mov	r0, r6
 8009590:	f7ff ffa6 	bl	80094e0 <sbrk_aligned>
 8009594:	3001      	adds	r0, #1
 8009596:	d03a      	beq.n	800960e <_malloc_r+0xea>
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	442b      	add	r3, r5
 800959c:	6023      	str	r3, [r4, #0]
 800959e:	f8d8 3000 	ldr.w	r3, [r8]
 80095a2:	685a      	ldr	r2, [r3, #4]
 80095a4:	bb62      	cbnz	r2, 8009600 <_malloc_r+0xdc>
 80095a6:	f8c8 7000 	str.w	r7, [r8]
 80095aa:	e00f      	b.n	80095cc <_malloc_r+0xa8>
 80095ac:	6822      	ldr	r2, [r4, #0]
 80095ae:	1b52      	subs	r2, r2, r5
 80095b0:	d420      	bmi.n	80095f4 <_malloc_r+0xd0>
 80095b2:	2a0b      	cmp	r2, #11
 80095b4:	d917      	bls.n	80095e6 <_malloc_r+0xc2>
 80095b6:	1961      	adds	r1, r4, r5
 80095b8:	42a3      	cmp	r3, r4
 80095ba:	6025      	str	r5, [r4, #0]
 80095bc:	bf18      	it	ne
 80095be:	6059      	strne	r1, [r3, #4]
 80095c0:	6863      	ldr	r3, [r4, #4]
 80095c2:	bf08      	it	eq
 80095c4:	f8c8 1000 	streq.w	r1, [r8]
 80095c8:	5162      	str	r2, [r4, r5]
 80095ca:	604b      	str	r3, [r1, #4]
 80095cc:	4630      	mov	r0, r6
 80095ce:	f000 f82f 	bl	8009630 <__malloc_unlock>
 80095d2:	f104 000b 	add.w	r0, r4, #11
 80095d6:	1d23      	adds	r3, r4, #4
 80095d8:	f020 0007 	bic.w	r0, r0, #7
 80095dc:	1ac2      	subs	r2, r0, r3
 80095de:	bf1c      	itt	ne
 80095e0:	1a1b      	subne	r3, r3, r0
 80095e2:	50a3      	strne	r3, [r4, r2]
 80095e4:	e7af      	b.n	8009546 <_malloc_r+0x22>
 80095e6:	6862      	ldr	r2, [r4, #4]
 80095e8:	42a3      	cmp	r3, r4
 80095ea:	bf0c      	ite	eq
 80095ec:	f8c8 2000 	streq.w	r2, [r8]
 80095f0:	605a      	strne	r2, [r3, #4]
 80095f2:	e7eb      	b.n	80095cc <_malloc_r+0xa8>
 80095f4:	4623      	mov	r3, r4
 80095f6:	6864      	ldr	r4, [r4, #4]
 80095f8:	e7ae      	b.n	8009558 <_malloc_r+0x34>
 80095fa:	463c      	mov	r4, r7
 80095fc:	687f      	ldr	r7, [r7, #4]
 80095fe:	e7b6      	b.n	800956e <_malloc_r+0x4a>
 8009600:	461a      	mov	r2, r3
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	42a3      	cmp	r3, r4
 8009606:	d1fb      	bne.n	8009600 <_malloc_r+0xdc>
 8009608:	2300      	movs	r3, #0
 800960a:	6053      	str	r3, [r2, #4]
 800960c:	e7de      	b.n	80095cc <_malloc_r+0xa8>
 800960e:	230c      	movs	r3, #12
 8009610:	6033      	str	r3, [r6, #0]
 8009612:	4630      	mov	r0, r6
 8009614:	f000 f80c 	bl	8009630 <__malloc_unlock>
 8009618:	e794      	b.n	8009544 <_malloc_r+0x20>
 800961a:	6005      	str	r5, [r0, #0]
 800961c:	e7d6      	b.n	80095cc <_malloc_r+0xa8>
 800961e:	bf00      	nop
 8009620:	20001494 	.word	0x20001494

08009624 <__malloc_lock>:
 8009624:	4801      	ldr	r0, [pc, #4]	@ (800962c <__malloc_lock+0x8>)
 8009626:	f7ff bf0f 	b.w	8009448 <__retarget_lock_acquire_recursive>
 800962a:	bf00      	nop
 800962c:	2000148c 	.word	0x2000148c

08009630 <__malloc_unlock>:
 8009630:	4801      	ldr	r0, [pc, #4]	@ (8009638 <__malloc_unlock+0x8>)
 8009632:	f7ff bf0a 	b.w	800944a <__retarget_lock_release_recursive>
 8009636:	bf00      	nop
 8009638:	2000148c 	.word	0x2000148c

0800963c <__ssputs_r>:
 800963c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009640:	688e      	ldr	r6, [r1, #8]
 8009642:	461f      	mov	r7, r3
 8009644:	42be      	cmp	r6, r7
 8009646:	680b      	ldr	r3, [r1, #0]
 8009648:	4682      	mov	sl, r0
 800964a:	460c      	mov	r4, r1
 800964c:	4690      	mov	r8, r2
 800964e:	d82d      	bhi.n	80096ac <__ssputs_r+0x70>
 8009650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009654:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009658:	d026      	beq.n	80096a8 <__ssputs_r+0x6c>
 800965a:	6965      	ldr	r5, [r4, #20]
 800965c:	6909      	ldr	r1, [r1, #16]
 800965e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009662:	eba3 0901 	sub.w	r9, r3, r1
 8009666:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800966a:	1c7b      	adds	r3, r7, #1
 800966c:	444b      	add	r3, r9
 800966e:	106d      	asrs	r5, r5, #1
 8009670:	429d      	cmp	r5, r3
 8009672:	bf38      	it	cc
 8009674:	461d      	movcc	r5, r3
 8009676:	0553      	lsls	r3, r2, #21
 8009678:	d527      	bpl.n	80096ca <__ssputs_r+0x8e>
 800967a:	4629      	mov	r1, r5
 800967c:	f7ff ff52 	bl	8009524 <_malloc_r>
 8009680:	4606      	mov	r6, r0
 8009682:	b360      	cbz	r0, 80096de <__ssputs_r+0xa2>
 8009684:	6921      	ldr	r1, [r4, #16]
 8009686:	464a      	mov	r2, r9
 8009688:	f000 fae8 	bl	8009c5c <memcpy>
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009696:	81a3      	strh	r3, [r4, #12]
 8009698:	6126      	str	r6, [r4, #16]
 800969a:	6165      	str	r5, [r4, #20]
 800969c:	444e      	add	r6, r9
 800969e:	eba5 0509 	sub.w	r5, r5, r9
 80096a2:	6026      	str	r6, [r4, #0]
 80096a4:	60a5      	str	r5, [r4, #8]
 80096a6:	463e      	mov	r6, r7
 80096a8:	42be      	cmp	r6, r7
 80096aa:	d900      	bls.n	80096ae <__ssputs_r+0x72>
 80096ac:	463e      	mov	r6, r7
 80096ae:	6820      	ldr	r0, [r4, #0]
 80096b0:	4632      	mov	r2, r6
 80096b2:	4641      	mov	r1, r8
 80096b4:	f000 faa8 	bl	8009c08 <memmove>
 80096b8:	68a3      	ldr	r3, [r4, #8]
 80096ba:	1b9b      	subs	r3, r3, r6
 80096bc:	60a3      	str	r3, [r4, #8]
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	4433      	add	r3, r6
 80096c2:	6023      	str	r3, [r4, #0]
 80096c4:	2000      	movs	r0, #0
 80096c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ca:	462a      	mov	r2, r5
 80096cc:	f000 fad4 	bl	8009c78 <_realloc_r>
 80096d0:	4606      	mov	r6, r0
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d1e0      	bne.n	8009698 <__ssputs_r+0x5c>
 80096d6:	6921      	ldr	r1, [r4, #16]
 80096d8:	4650      	mov	r0, sl
 80096da:	f7ff feb7 	bl	800944c <_free_r>
 80096de:	230c      	movs	r3, #12
 80096e0:	f8ca 3000 	str.w	r3, [sl]
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096ea:	81a3      	strh	r3, [r4, #12]
 80096ec:	f04f 30ff 	mov.w	r0, #4294967295
 80096f0:	e7e9      	b.n	80096c6 <__ssputs_r+0x8a>
	...

080096f4 <_svfiprintf_r>:
 80096f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f8:	4698      	mov	r8, r3
 80096fa:	898b      	ldrh	r3, [r1, #12]
 80096fc:	061b      	lsls	r3, r3, #24
 80096fe:	b09d      	sub	sp, #116	@ 0x74
 8009700:	4607      	mov	r7, r0
 8009702:	460d      	mov	r5, r1
 8009704:	4614      	mov	r4, r2
 8009706:	d510      	bpl.n	800972a <_svfiprintf_r+0x36>
 8009708:	690b      	ldr	r3, [r1, #16]
 800970a:	b973      	cbnz	r3, 800972a <_svfiprintf_r+0x36>
 800970c:	2140      	movs	r1, #64	@ 0x40
 800970e:	f7ff ff09 	bl	8009524 <_malloc_r>
 8009712:	6028      	str	r0, [r5, #0]
 8009714:	6128      	str	r0, [r5, #16]
 8009716:	b930      	cbnz	r0, 8009726 <_svfiprintf_r+0x32>
 8009718:	230c      	movs	r3, #12
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	b01d      	add	sp, #116	@ 0x74
 8009722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009726:	2340      	movs	r3, #64	@ 0x40
 8009728:	616b      	str	r3, [r5, #20]
 800972a:	2300      	movs	r3, #0
 800972c:	9309      	str	r3, [sp, #36]	@ 0x24
 800972e:	2320      	movs	r3, #32
 8009730:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009734:	f8cd 800c 	str.w	r8, [sp, #12]
 8009738:	2330      	movs	r3, #48	@ 0x30
 800973a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80098d8 <_svfiprintf_r+0x1e4>
 800973e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009742:	f04f 0901 	mov.w	r9, #1
 8009746:	4623      	mov	r3, r4
 8009748:	469a      	mov	sl, r3
 800974a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800974e:	b10a      	cbz	r2, 8009754 <_svfiprintf_r+0x60>
 8009750:	2a25      	cmp	r2, #37	@ 0x25
 8009752:	d1f9      	bne.n	8009748 <_svfiprintf_r+0x54>
 8009754:	ebba 0b04 	subs.w	fp, sl, r4
 8009758:	d00b      	beq.n	8009772 <_svfiprintf_r+0x7e>
 800975a:	465b      	mov	r3, fp
 800975c:	4622      	mov	r2, r4
 800975e:	4629      	mov	r1, r5
 8009760:	4638      	mov	r0, r7
 8009762:	f7ff ff6b 	bl	800963c <__ssputs_r>
 8009766:	3001      	adds	r0, #1
 8009768:	f000 80a7 	beq.w	80098ba <_svfiprintf_r+0x1c6>
 800976c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800976e:	445a      	add	r2, fp
 8009770:	9209      	str	r2, [sp, #36]	@ 0x24
 8009772:	f89a 3000 	ldrb.w	r3, [sl]
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 809f 	beq.w	80098ba <_svfiprintf_r+0x1c6>
 800977c:	2300      	movs	r3, #0
 800977e:	f04f 32ff 	mov.w	r2, #4294967295
 8009782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009786:	f10a 0a01 	add.w	sl, sl, #1
 800978a:	9304      	str	r3, [sp, #16]
 800978c:	9307      	str	r3, [sp, #28]
 800978e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009792:	931a      	str	r3, [sp, #104]	@ 0x68
 8009794:	4654      	mov	r4, sl
 8009796:	2205      	movs	r2, #5
 8009798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800979c:	484e      	ldr	r0, [pc, #312]	@ (80098d8 <_svfiprintf_r+0x1e4>)
 800979e:	f7f6 fd1f 	bl	80001e0 <memchr>
 80097a2:	9a04      	ldr	r2, [sp, #16]
 80097a4:	b9d8      	cbnz	r0, 80097de <_svfiprintf_r+0xea>
 80097a6:	06d0      	lsls	r0, r2, #27
 80097a8:	bf44      	itt	mi
 80097aa:	2320      	movmi	r3, #32
 80097ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097b0:	0711      	lsls	r1, r2, #28
 80097b2:	bf44      	itt	mi
 80097b4:	232b      	movmi	r3, #43	@ 0x2b
 80097b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097ba:	f89a 3000 	ldrb.w	r3, [sl]
 80097be:	2b2a      	cmp	r3, #42	@ 0x2a
 80097c0:	d015      	beq.n	80097ee <_svfiprintf_r+0xfa>
 80097c2:	9a07      	ldr	r2, [sp, #28]
 80097c4:	4654      	mov	r4, sl
 80097c6:	2000      	movs	r0, #0
 80097c8:	f04f 0c0a 	mov.w	ip, #10
 80097cc:	4621      	mov	r1, r4
 80097ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097d2:	3b30      	subs	r3, #48	@ 0x30
 80097d4:	2b09      	cmp	r3, #9
 80097d6:	d94b      	bls.n	8009870 <_svfiprintf_r+0x17c>
 80097d8:	b1b0      	cbz	r0, 8009808 <_svfiprintf_r+0x114>
 80097da:	9207      	str	r2, [sp, #28]
 80097dc:	e014      	b.n	8009808 <_svfiprintf_r+0x114>
 80097de:	eba0 0308 	sub.w	r3, r0, r8
 80097e2:	fa09 f303 	lsl.w	r3, r9, r3
 80097e6:	4313      	orrs	r3, r2
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	46a2      	mov	sl, r4
 80097ec:	e7d2      	b.n	8009794 <_svfiprintf_r+0xa0>
 80097ee:	9b03      	ldr	r3, [sp, #12]
 80097f0:	1d19      	adds	r1, r3, #4
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	9103      	str	r1, [sp, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bfbb      	ittet	lt
 80097fa:	425b      	neglt	r3, r3
 80097fc:	f042 0202 	orrlt.w	r2, r2, #2
 8009800:	9307      	strge	r3, [sp, #28]
 8009802:	9307      	strlt	r3, [sp, #28]
 8009804:	bfb8      	it	lt
 8009806:	9204      	strlt	r2, [sp, #16]
 8009808:	7823      	ldrb	r3, [r4, #0]
 800980a:	2b2e      	cmp	r3, #46	@ 0x2e
 800980c:	d10a      	bne.n	8009824 <_svfiprintf_r+0x130>
 800980e:	7863      	ldrb	r3, [r4, #1]
 8009810:	2b2a      	cmp	r3, #42	@ 0x2a
 8009812:	d132      	bne.n	800987a <_svfiprintf_r+0x186>
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	1d1a      	adds	r2, r3, #4
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	9203      	str	r2, [sp, #12]
 800981c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009820:	3402      	adds	r4, #2
 8009822:	9305      	str	r3, [sp, #20]
 8009824:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80098e8 <_svfiprintf_r+0x1f4>
 8009828:	7821      	ldrb	r1, [r4, #0]
 800982a:	2203      	movs	r2, #3
 800982c:	4650      	mov	r0, sl
 800982e:	f7f6 fcd7 	bl	80001e0 <memchr>
 8009832:	b138      	cbz	r0, 8009844 <_svfiprintf_r+0x150>
 8009834:	9b04      	ldr	r3, [sp, #16]
 8009836:	eba0 000a 	sub.w	r0, r0, sl
 800983a:	2240      	movs	r2, #64	@ 0x40
 800983c:	4082      	lsls	r2, r0
 800983e:	4313      	orrs	r3, r2
 8009840:	3401      	adds	r4, #1
 8009842:	9304      	str	r3, [sp, #16]
 8009844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009848:	4824      	ldr	r0, [pc, #144]	@ (80098dc <_svfiprintf_r+0x1e8>)
 800984a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800984e:	2206      	movs	r2, #6
 8009850:	f7f6 fcc6 	bl	80001e0 <memchr>
 8009854:	2800      	cmp	r0, #0
 8009856:	d036      	beq.n	80098c6 <_svfiprintf_r+0x1d2>
 8009858:	4b21      	ldr	r3, [pc, #132]	@ (80098e0 <_svfiprintf_r+0x1ec>)
 800985a:	bb1b      	cbnz	r3, 80098a4 <_svfiprintf_r+0x1b0>
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	3307      	adds	r3, #7
 8009860:	f023 0307 	bic.w	r3, r3, #7
 8009864:	3308      	adds	r3, #8
 8009866:	9303      	str	r3, [sp, #12]
 8009868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800986a:	4433      	add	r3, r6
 800986c:	9309      	str	r3, [sp, #36]	@ 0x24
 800986e:	e76a      	b.n	8009746 <_svfiprintf_r+0x52>
 8009870:	fb0c 3202 	mla	r2, ip, r2, r3
 8009874:	460c      	mov	r4, r1
 8009876:	2001      	movs	r0, #1
 8009878:	e7a8      	b.n	80097cc <_svfiprintf_r+0xd8>
 800987a:	2300      	movs	r3, #0
 800987c:	3401      	adds	r4, #1
 800987e:	9305      	str	r3, [sp, #20]
 8009880:	4619      	mov	r1, r3
 8009882:	f04f 0c0a 	mov.w	ip, #10
 8009886:	4620      	mov	r0, r4
 8009888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800988c:	3a30      	subs	r2, #48	@ 0x30
 800988e:	2a09      	cmp	r2, #9
 8009890:	d903      	bls.n	800989a <_svfiprintf_r+0x1a6>
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0c6      	beq.n	8009824 <_svfiprintf_r+0x130>
 8009896:	9105      	str	r1, [sp, #20]
 8009898:	e7c4      	b.n	8009824 <_svfiprintf_r+0x130>
 800989a:	fb0c 2101 	mla	r1, ip, r1, r2
 800989e:	4604      	mov	r4, r0
 80098a0:	2301      	movs	r3, #1
 80098a2:	e7f0      	b.n	8009886 <_svfiprintf_r+0x192>
 80098a4:	ab03      	add	r3, sp, #12
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	462a      	mov	r2, r5
 80098aa:	4b0e      	ldr	r3, [pc, #56]	@ (80098e4 <_svfiprintf_r+0x1f0>)
 80098ac:	a904      	add	r1, sp, #16
 80098ae:	4638      	mov	r0, r7
 80098b0:	f3af 8000 	nop.w
 80098b4:	1c42      	adds	r2, r0, #1
 80098b6:	4606      	mov	r6, r0
 80098b8:	d1d6      	bne.n	8009868 <_svfiprintf_r+0x174>
 80098ba:	89ab      	ldrh	r3, [r5, #12]
 80098bc:	065b      	lsls	r3, r3, #25
 80098be:	f53f af2d 	bmi.w	800971c <_svfiprintf_r+0x28>
 80098c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098c4:	e72c      	b.n	8009720 <_svfiprintf_r+0x2c>
 80098c6:	ab03      	add	r3, sp, #12
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	462a      	mov	r2, r5
 80098cc:	4b05      	ldr	r3, [pc, #20]	@ (80098e4 <_svfiprintf_r+0x1f0>)
 80098ce:	a904      	add	r1, sp, #16
 80098d0:	4638      	mov	r0, r7
 80098d2:	f000 f879 	bl	80099c8 <_printf_i>
 80098d6:	e7ed      	b.n	80098b4 <_svfiprintf_r+0x1c0>
 80098d8:	08009f64 	.word	0x08009f64
 80098dc:	08009f6e 	.word	0x08009f6e
 80098e0:	00000000 	.word	0x00000000
 80098e4:	0800963d 	.word	0x0800963d
 80098e8:	08009f6a 	.word	0x08009f6a

080098ec <_printf_common>:
 80098ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f0:	4616      	mov	r6, r2
 80098f2:	4698      	mov	r8, r3
 80098f4:	688a      	ldr	r2, [r1, #8]
 80098f6:	690b      	ldr	r3, [r1, #16]
 80098f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80098fc:	4293      	cmp	r3, r2
 80098fe:	bfb8      	it	lt
 8009900:	4613      	movlt	r3, r2
 8009902:	6033      	str	r3, [r6, #0]
 8009904:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009908:	4607      	mov	r7, r0
 800990a:	460c      	mov	r4, r1
 800990c:	b10a      	cbz	r2, 8009912 <_printf_common+0x26>
 800990e:	3301      	adds	r3, #1
 8009910:	6033      	str	r3, [r6, #0]
 8009912:	6823      	ldr	r3, [r4, #0]
 8009914:	0699      	lsls	r1, r3, #26
 8009916:	bf42      	ittt	mi
 8009918:	6833      	ldrmi	r3, [r6, #0]
 800991a:	3302      	addmi	r3, #2
 800991c:	6033      	strmi	r3, [r6, #0]
 800991e:	6825      	ldr	r5, [r4, #0]
 8009920:	f015 0506 	ands.w	r5, r5, #6
 8009924:	d106      	bne.n	8009934 <_printf_common+0x48>
 8009926:	f104 0a19 	add.w	sl, r4, #25
 800992a:	68e3      	ldr	r3, [r4, #12]
 800992c:	6832      	ldr	r2, [r6, #0]
 800992e:	1a9b      	subs	r3, r3, r2
 8009930:	42ab      	cmp	r3, r5
 8009932:	dc26      	bgt.n	8009982 <_printf_common+0x96>
 8009934:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009938:	6822      	ldr	r2, [r4, #0]
 800993a:	3b00      	subs	r3, #0
 800993c:	bf18      	it	ne
 800993e:	2301      	movne	r3, #1
 8009940:	0692      	lsls	r2, r2, #26
 8009942:	d42b      	bmi.n	800999c <_printf_common+0xb0>
 8009944:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009948:	4641      	mov	r1, r8
 800994a:	4638      	mov	r0, r7
 800994c:	47c8      	blx	r9
 800994e:	3001      	adds	r0, #1
 8009950:	d01e      	beq.n	8009990 <_printf_common+0xa4>
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	6922      	ldr	r2, [r4, #16]
 8009956:	f003 0306 	and.w	r3, r3, #6
 800995a:	2b04      	cmp	r3, #4
 800995c:	bf02      	ittt	eq
 800995e:	68e5      	ldreq	r5, [r4, #12]
 8009960:	6833      	ldreq	r3, [r6, #0]
 8009962:	1aed      	subeq	r5, r5, r3
 8009964:	68a3      	ldr	r3, [r4, #8]
 8009966:	bf0c      	ite	eq
 8009968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800996c:	2500      	movne	r5, #0
 800996e:	4293      	cmp	r3, r2
 8009970:	bfc4      	itt	gt
 8009972:	1a9b      	subgt	r3, r3, r2
 8009974:	18ed      	addgt	r5, r5, r3
 8009976:	2600      	movs	r6, #0
 8009978:	341a      	adds	r4, #26
 800997a:	42b5      	cmp	r5, r6
 800997c:	d11a      	bne.n	80099b4 <_printf_common+0xc8>
 800997e:	2000      	movs	r0, #0
 8009980:	e008      	b.n	8009994 <_printf_common+0xa8>
 8009982:	2301      	movs	r3, #1
 8009984:	4652      	mov	r2, sl
 8009986:	4641      	mov	r1, r8
 8009988:	4638      	mov	r0, r7
 800998a:	47c8      	blx	r9
 800998c:	3001      	adds	r0, #1
 800998e:	d103      	bne.n	8009998 <_printf_common+0xac>
 8009990:	f04f 30ff 	mov.w	r0, #4294967295
 8009994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009998:	3501      	adds	r5, #1
 800999a:	e7c6      	b.n	800992a <_printf_common+0x3e>
 800999c:	18e1      	adds	r1, r4, r3
 800999e:	1c5a      	adds	r2, r3, #1
 80099a0:	2030      	movs	r0, #48	@ 0x30
 80099a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80099a6:	4422      	add	r2, r4
 80099a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80099ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80099b0:	3302      	adds	r3, #2
 80099b2:	e7c7      	b.n	8009944 <_printf_common+0x58>
 80099b4:	2301      	movs	r3, #1
 80099b6:	4622      	mov	r2, r4
 80099b8:	4641      	mov	r1, r8
 80099ba:	4638      	mov	r0, r7
 80099bc:	47c8      	blx	r9
 80099be:	3001      	adds	r0, #1
 80099c0:	d0e6      	beq.n	8009990 <_printf_common+0xa4>
 80099c2:	3601      	adds	r6, #1
 80099c4:	e7d9      	b.n	800997a <_printf_common+0x8e>
	...

080099c8 <_printf_i>:
 80099c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099cc:	7e0f      	ldrb	r7, [r1, #24]
 80099ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80099d0:	2f78      	cmp	r7, #120	@ 0x78
 80099d2:	4691      	mov	r9, r2
 80099d4:	4680      	mov	r8, r0
 80099d6:	460c      	mov	r4, r1
 80099d8:	469a      	mov	sl, r3
 80099da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80099de:	d807      	bhi.n	80099f0 <_printf_i+0x28>
 80099e0:	2f62      	cmp	r7, #98	@ 0x62
 80099e2:	d80a      	bhi.n	80099fa <_printf_i+0x32>
 80099e4:	2f00      	cmp	r7, #0
 80099e6:	f000 80d2 	beq.w	8009b8e <_printf_i+0x1c6>
 80099ea:	2f58      	cmp	r7, #88	@ 0x58
 80099ec:	f000 80b9 	beq.w	8009b62 <_printf_i+0x19a>
 80099f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80099f8:	e03a      	b.n	8009a70 <_printf_i+0xa8>
 80099fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80099fe:	2b15      	cmp	r3, #21
 8009a00:	d8f6      	bhi.n	80099f0 <_printf_i+0x28>
 8009a02:	a101      	add	r1, pc, #4	@ (adr r1, 8009a08 <_printf_i+0x40>)
 8009a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a08:	08009a61 	.word	0x08009a61
 8009a0c:	08009a75 	.word	0x08009a75
 8009a10:	080099f1 	.word	0x080099f1
 8009a14:	080099f1 	.word	0x080099f1
 8009a18:	080099f1 	.word	0x080099f1
 8009a1c:	080099f1 	.word	0x080099f1
 8009a20:	08009a75 	.word	0x08009a75
 8009a24:	080099f1 	.word	0x080099f1
 8009a28:	080099f1 	.word	0x080099f1
 8009a2c:	080099f1 	.word	0x080099f1
 8009a30:	080099f1 	.word	0x080099f1
 8009a34:	08009b75 	.word	0x08009b75
 8009a38:	08009a9f 	.word	0x08009a9f
 8009a3c:	08009b2f 	.word	0x08009b2f
 8009a40:	080099f1 	.word	0x080099f1
 8009a44:	080099f1 	.word	0x080099f1
 8009a48:	08009b97 	.word	0x08009b97
 8009a4c:	080099f1 	.word	0x080099f1
 8009a50:	08009a9f 	.word	0x08009a9f
 8009a54:	080099f1 	.word	0x080099f1
 8009a58:	080099f1 	.word	0x080099f1
 8009a5c:	08009b37 	.word	0x08009b37
 8009a60:	6833      	ldr	r3, [r6, #0]
 8009a62:	1d1a      	adds	r2, r3, #4
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	6032      	str	r2, [r6, #0]
 8009a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a70:	2301      	movs	r3, #1
 8009a72:	e09d      	b.n	8009bb0 <_printf_i+0x1e8>
 8009a74:	6833      	ldr	r3, [r6, #0]
 8009a76:	6820      	ldr	r0, [r4, #0]
 8009a78:	1d19      	adds	r1, r3, #4
 8009a7a:	6031      	str	r1, [r6, #0]
 8009a7c:	0606      	lsls	r6, r0, #24
 8009a7e:	d501      	bpl.n	8009a84 <_printf_i+0xbc>
 8009a80:	681d      	ldr	r5, [r3, #0]
 8009a82:	e003      	b.n	8009a8c <_printf_i+0xc4>
 8009a84:	0645      	lsls	r5, r0, #25
 8009a86:	d5fb      	bpl.n	8009a80 <_printf_i+0xb8>
 8009a88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a8c:	2d00      	cmp	r5, #0
 8009a8e:	da03      	bge.n	8009a98 <_printf_i+0xd0>
 8009a90:	232d      	movs	r3, #45	@ 0x2d
 8009a92:	426d      	negs	r5, r5
 8009a94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a98:	4859      	ldr	r0, [pc, #356]	@ (8009c00 <_printf_i+0x238>)
 8009a9a:	230a      	movs	r3, #10
 8009a9c:	e011      	b.n	8009ac2 <_printf_i+0xfa>
 8009a9e:	6821      	ldr	r1, [r4, #0]
 8009aa0:	6833      	ldr	r3, [r6, #0]
 8009aa2:	0608      	lsls	r0, r1, #24
 8009aa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009aa8:	d402      	bmi.n	8009ab0 <_printf_i+0xe8>
 8009aaa:	0649      	lsls	r1, r1, #25
 8009aac:	bf48      	it	mi
 8009aae:	b2ad      	uxthmi	r5, r5
 8009ab0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ab2:	4853      	ldr	r0, [pc, #332]	@ (8009c00 <_printf_i+0x238>)
 8009ab4:	6033      	str	r3, [r6, #0]
 8009ab6:	bf14      	ite	ne
 8009ab8:	230a      	movne	r3, #10
 8009aba:	2308      	moveq	r3, #8
 8009abc:	2100      	movs	r1, #0
 8009abe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009ac2:	6866      	ldr	r6, [r4, #4]
 8009ac4:	60a6      	str	r6, [r4, #8]
 8009ac6:	2e00      	cmp	r6, #0
 8009ac8:	bfa2      	ittt	ge
 8009aca:	6821      	ldrge	r1, [r4, #0]
 8009acc:	f021 0104 	bicge.w	r1, r1, #4
 8009ad0:	6021      	strge	r1, [r4, #0]
 8009ad2:	b90d      	cbnz	r5, 8009ad8 <_printf_i+0x110>
 8009ad4:	2e00      	cmp	r6, #0
 8009ad6:	d04b      	beq.n	8009b70 <_printf_i+0x1a8>
 8009ad8:	4616      	mov	r6, r2
 8009ada:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ade:	fb03 5711 	mls	r7, r3, r1, r5
 8009ae2:	5dc7      	ldrb	r7, [r0, r7]
 8009ae4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ae8:	462f      	mov	r7, r5
 8009aea:	42bb      	cmp	r3, r7
 8009aec:	460d      	mov	r5, r1
 8009aee:	d9f4      	bls.n	8009ada <_printf_i+0x112>
 8009af0:	2b08      	cmp	r3, #8
 8009af2:	d10b      	bne.n	8009b0c <_printf_i+0x144>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	07df      	lsls	r7, r3, #31
 8009af8:	d508      	bpl.n	8009b0c <_printf_i+0x144>
 8009afa:	6923      	ldr	r3, [r4, #16]
 8009afc:	6861      	ldr	r1, [r4, #4]
 8009afe:	4299      	cmp	r1, r3
 8009b00:	bfde      	ittt	le
 8009b02:	2330      	movle	r3, #48	@ 0x30
 8009b04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b0c:	1b92      	subs	r2, r2, r6
 8009b0e:	6122      	str	r2, [r4, #16]
 8009b10:	f8cd a000 	str.w	sl, [sp]
 8009b14:	464b      	mov	r3, r9
 8009b16:	aa03      	add	r2, sp, #12
 8009b18:	4621      	mov	r1, r4
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	f7ff fee6 	bl	80098ec <_printf_common>
 8009b20:	3001      	adds	r0, #1
 8009b22:	d14a      	bne.n	8009bba <_printf_i+0x1f2>
 8009b24:	f04f 30ff 	mov.w	r0, #4294967295
 8009b28:	b004      	add	sp, #16
 8009b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	f043 0320 	orr.w	r3, r3, #32
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	4833      	ldr	r0, [pc, #204]	@ (8009c04 <_printf_i+0x23c>)
 8009b38:	2778      	movs	r7, #120	@ 0x78
 8009b3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	6831      	ldr	r1, [r6, #0]
 8009b42:	061f      	lsls	r7, r3, #24
 8009b44:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b48:	d402      	bmi.n	8009b50 <_printf_i+0x188>
 8009b4a:	065f      	lsls	r7, r3, #25
 8009b4c:	bf48      	it	mi
 8009b4e:	b2ad      	uxthmi	r5, r5
 8009b50:	6031      	str	r1, [r6, #0]
 8009b52:	07d9      	lsls	r1, r3, #31
 8009b54:	bf44      	itt	mi
 8009b56:	f043 0320 	orrmi.w	r3, r3, #32
 8009b5a:	6023      	strmi	r3, [r4, #0]
 8009b5c:	b11d      	cbz	r5, 8009b66 <_printf_i+0x19e>
 8009b5e:	2310      	movs	r3, #16
 8009b60:	e7ac      	b.n	8009abc <_printf_i+0xf4>
 8009b62:	4827      	ldr	r0, [pc, #156]	@ (8009c00 <_printf_i+0x238>)
 8009b64:	e7e9      	b.n	8009b3a <_printf_i+0x172>
 8009b66:	6823      	ldr	r3, [r4, #0]
 8009b68:	f023 0320 	bic.w	r3, r3, #32
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	e7f6      	b.n	8009b5e <_printf_i+0x196>
 8009b70:	4616      	mov	r6, r2
 8009b72:	e7bd      	b.n	8009af0 <_printf_i+0x128>
 8009b74:	6833      	ldr	r3, [r6, #0]
 8009b76:	6825      	ldr	r5, [r4, #0]
 8009b78:	6961      	ldr	r1, [r4, #20]
 8009b7a:	1d18      	adds	r0, r3, #4
 8009b7c:	6030      	str	r0, [r6, #0]
 8009b7e:	062e      	lsls	r6, r5, #24
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	d501      	bpl.n	8009b88 <_printf_i+0x1c0>
 8009b84:	6019      	str	r1, [r3, #0]
 8009b86:	e002      	b.n	8009b8e <_printf_i+0x1c6>
 8009b88:	0668      	lsls	r0, r5, #25
 8009b8a:	d5fb      	bpl.n	8009b84 <_printf_i+0x1bc>
 8009b8c:	8019      	strh	r1, [r3, #0]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	6123      	str	r3, [r4, #16]
 8009b92:	4616      	mov	r6, r2
 8009b94:	e7bc      	b.n	8009b10 <_printf_i+0x148>
 8009b96:	6833      	ldr	r3, [r6, #0]
 8009b98:	1d1a      	adds	r2, r3, #4
 8009b9a:	6032      	str	r2, [r6, #0]
 8009b9c:	681e      	ldr	r6, [r3, #0]
 8009b9e:	6862      	ldr	r2, [r4, #4]
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	f7f6 fb1c 	bl	80001e0 <memchr>
 8009ba8:	b108      	cbz	r0, 8009bae <_printf_i+0x1e6>
 8009baa:	1b80      	subs	r0, r0, r6
 8009bac:	6060      	str	r0, [r4, #4]
 8009bae:	6863      	ldr	r3, [r4, #4]
 8009bb0:	6123      	str	r3, [r4, #16]
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bb8:	e7aa      	b.n	8009b10 <_printf_i+0x148>
 8009bba:	6923      	ldr	r3, [r4, #16]
 8009bbc:	4632      	mov	r2, r6
 8009bbe:	4649      	mov	r1, r9
 8009bc0:	4640      	mov	r0, r8
 8009bc2:	47d0      	blx	sl
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	d0ad      	beq.n	8009b24 <_printf_i+0x15c>
 8009bc8:	6823      	ldr	r3, [r4, #0]
 8009bca:	079b      	lsls	r3, r3, #30
 8009bcc:	d413      	bmi.n	8009bf6 <_printf_i+0x22e>
 8009bce:	68e0      	ldr	r0, [r4, #12]
 8009bd0:	9b03      	ldr	r3, [sp, #12]
 8009bd2:	4298      	cmp	r0, r3
 8009bd4:	bfb8      	it	lt
 8009bd6:	4618      	movlt	r0, r3
 8009bd8:	e7a6      	b.n	8009b28 <_printf_i+0x160>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	4632      	mov	r2, r6
 8009bde:	4649      	mov	r1, r9
 8009be0:	4640      	mov	r0, r8
 8009be2:	47d0      	blx	sl
 8009be4:	3001      	adds	r0, #1
 8009be6:	d09d      	beq.n	8009b24 <_printf_i+0x15c>
 8009be8:	3501      	adds	r5, #1
 8009bea:	68e3      	ldr	r3, [r4, #12]
 8009bec:	9903      	ldr	r1, [sp, #12]
 8009bee:	1a5b      	subs	r3, r3, r1
 8009bf0:	42ab      	cmp	r3, r5
 8009bf2:	dcf2      	bgt.n	8009bda <_printf_i+0x212>
 8009bf4:	e7eb      	b.n	8009bce <_printf_i+0x206>
 8009bf6:	2500      	movs	r5, #0
 8009bf8:	f104 0619 	add.w	r6, r4, #25
 8009bfc:	e7f5      	b.n	8009bea <_printf_i+0x222>
 8009bfe:	bf00      	nop
 8009c00:	08009f75 	.word	0x08009f75
 8009c04:	08009f86 	.word	0x08009f86

08009c08 <memmove>:
 8009c08:	4288      	cmp	r0, r1
 8009c0a:	b510      	push	{r4, lr}
 8009c0c:	eb01 0402 	add.w	r4, r1, r2
 8009c10:	d902      	bls.n	8009c18 <memmove+0x10>
 8009c12:	4284      	cmp	r4, r0
 8009c14:	4623      	mov	r3, r4
 8009c16:	d807      	bhi.n	8009c28 <memmove+0x20>
 8009c18:	1e43      	subs	r3, r0, #1
 8009c1a:	42a1      	cmp	r1, r4
 8009c1c:	d008      	beq.n	8009c30 <memmove+0x28>
 8009c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c26:	e7f8      	b.n	8009c1a <memmove+0x12>
 8009c28:	4402      	add	r2, r0
 8009c2a:	4601      	mov	r1, r0
 8009c2c:	428a      	cmp	r2, r1
 8009c2e:	d100      	bne.n	8009c32 <memmove+0x2a>
 8009c30:	bd10      	pop	{r4, pc}
 8009c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c3a:	e7f7      	b.n	8009c2c <memmove+0x24>

08009c3c <_sbrk_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4d06      	ldr	r5, [pc, #24]	@ (8009c58 <_sbrk_r+0x1c>)
 8009c40:	2300      	movs	r3, #0
 8009c42:	4604      	mov	r4, r0
 8009c44:	4608      	mov	r0, r1
 8009c46:	602b      	str	r3, [r5, #0]
 8009c48:	f7f7 fd28 	bl	800169c <_sbrk>
 8009c4c:	1c43      	adds	r3, r0, #1
 8009c4e:	d102      	bne.n	8009c56 <_sbrk_r+0x1a>
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	b103      	cbz	r3, 8009c56 <_sbrk_r+0x1a>
 8009c54:	6023      	str	r3, [r4, #0]
 8009c56:	bd38      	pop	{r3, r4, r5, pc}
 8009c58:	20001488 	.word	0x20001488

08009c5c <memcpy>:
 8009c5c:	440a      	add	r2, r1
 8009c5e:	4291      	cmp	r1, r2
 8009c60:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c64:	d100      	bne.n	8009c68 <memcpy+0xc>
 8009c66:	4770      	bx	lr
 8009c68:	b510      	push	{r4, lr}
 8009c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c72:	4291      	cmp	r1, r2
 8009c74:	d1f9      	bne.n	8009c6a <memcpy+0xe>
 8009c76:	bd10      	pop	{r4, pc}

08009c78 <_realloc_r>:
 8009c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c7c:	4680      	mov	r8, r0
 8009c7e:	4615      	mov	r5, r2
 8009c80:	460c      	mov	r4, r1
 8009c82:	b921      	cbnz	r1, 8009c8e <_realloc_r+0x16>
 8009c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c88:	4611      	mov	r1, r2
 8009c8a:	f7ff bc4b 	b.w	8009524 <_malloc_r>
 8009c8e:	b92a      	cbnz	r2, 8009c9c <_realloc_r+0x24>
 8009c90:	f7ff fbdc 	bl	800944c <_free_r>
 8009c94:	2400      	movs	r4, #0
 8009c96:	4620      	mov	r0, r4
 8009c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c9c:	f000 f81a 	bl	8009cd4 <_malloc_usable_size_r>
 8009ca0:	4285      	cmp	r5, r0
 8009ca2:	4606      	mov	r6, r0
 8009ca4:	d802      	bhi.n	8009cac <_realloc_r+0x34>
 8009ca6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009caa:	d8f4      	bhi.n	8009c96 <_realloc_r+0x1e>
 8009cac:	4629      	mov	r1, r5
 8009cae:	4640      	mov	r0, r8
 8009cb0:	f7ff fc38 	bl	8009524 <_malloc_r>
 8009cb4:	4607      	mov	r7, r0
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d0ec      	beq.n	8009c94 <_realloc_r+0x1c>
 8009cba:	42b5      	cmp	r5, r6
 8009cbc:	462a      	mov	r2, r5
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	bf28      	it	cs
 8009cc2:	4632      	movcs	r2, r6
 8009cc4:	f7ff ffca 	bl	8009c5c <memcpy>
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4640      	mov	r0, r8
 8009ccc:	f7ff fbbe 	bl	800944c <_free_r>
 8009cd0:	463c      	mov	r4, r7
 8009cd2:	e7e0      	b.n	8009c96 <_realloc_r+0x1e>

08009cd4 <_malloc_usable_size_r>:
 8009cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cd8:	1f18      	subs	r0, r3, #4
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	bfbc      	itt	lt
 8009cde:	580b      	ldrlt	r3, [r1, r0]
 8009ce0:	18c0      	addlt	r0, r0, r3
 8009ce2:	4770      	bx	lr

08009ce4 <_init>:
 8009ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce6:	bf00      	nop
 8009ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cea:	bc08      	pop	{r3}
 8009cec:	469e      	mov	lr, r3
 8009cee:	4770      	bx	lr

08009cf0 <_fini>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	bf00      	nop
 8009cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cf6:	bc08      	pop	{r3}
 8009cf8:	469e      	mov	lr, r3
 8009cfa:	4770      	bx	lr
