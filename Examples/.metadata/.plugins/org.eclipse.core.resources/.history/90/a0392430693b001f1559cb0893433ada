/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "GC9A01A.h"
#include "CST816S.h"
#include "fatfs_sd.h"
#include "cordinates.h"
#include "font.h"
#include <stdio.h>
#include <string.h>
#include "moon.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
FATFS fs;
FIL file;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
int display_image_file(const char* fname);
void display_text_file(const char* fname);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  gc9a01a_init();
  CST816S_init();
  gc9a01a_set_orientation(LANDSCAPE); // Set orientation
  background_fill(BLACK);
  touch_key(36, "OPEN TEXT");
  touch_key(79, "FOX");
  touch_key(122, "MOON");
  touch_key(165, "BIRD");


//  //gc9a01a_WriteString(64, 40, "FastBit Embedded", Font_7x10, RED, NAVY);
//  gc9a01a_write_string(32, 40, "FastBit Embedded", Font_11x18, RED, NAVY);
//  gc9a01a_rect_fill(60, 120,100, 40, MAROON);
//  gc9a01a_write_string(64, 107, "READ SD", Font_16x26, OLIVE, MAROON);

  //tp_cordinates();
  //read_sd();
  //read_sd_card_file();
  //display_image_file("moon16.bmp");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	//render_lcd();
  	//gc9a01a_draw_image(0, 240, 0, 240, moon);
  	HAL_Delay(1000);
  	gc9a01a_rect_fill(0, 240,0, 240, MAROON);
  	display_image_file("moon.bmp");
  	gc9a01a_rect_fill(0, 240,0, 240, MAROON);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_TE_Pin|LCD_CSX_Pin|BL_A_Pin|BD1_Pin
                          |BD0_Pin|WRD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RDX_Pin|DCX_Pin|BD7_Pin|BD6_Pin
                          |BD5_Pin|BD4_Pin|BD3_Pin|BD2_Pin
                          |TP_RST_Pin|LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_TE_Pin LCD_CSX_Pin BL_A_Pin BD1_Pin
                           BD0_Pin WRD_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin|LCD_CSX_Pin|BL_A_Pin|BD1_Pin
                          |BD0_Pin|WRD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_RDX_Pin DCX_Pin BD7_Pin BD6_Pin
                           BD5_Pin BD4_Pin BD3_Pin BD2_Pin
                           TP_RST_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RDX_Pin|DCX_Pin|BD7_Pin|BD6_Pin
                          |BD5_Pin|BD4_Pin|BD3_Pin|BD2_Pin
                          |TP_RST_Pin|LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : TP_IN_Pin */
  GPIO_InitStruct.Pin = TP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TP_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void display_text_file(const char* fname)
{
  FRESULT res;
  char buffer[100];

  f_mount(&fs, "", 0) ;
  res = f_open(&file, fname, FA_READ);
  background_fill(BLACK);
  if (res == FR_OK)
  {
  	//*buffer = "SD card detected..\r\n";
  	gc9a01a_write_string(32, 40, "SD card detected..\r\n" , Font_11x18, WHITE, BLACK);
    //printmsg("SD card detected..\r\n");
    while (f_gets(buffer, sizeof(buffer), &file))
    {
      // Transmit the content over UART
    	gc9a01a_write_string(32, 60, (char *)buffer , Font_11x18, WHITE, BLACK);
    	//gc9a01a_draw_image(0, 240, 0 , 240, (char *)buffer);
      memset(buffer, 0, sizeof(buffer));
    }

    // Close the filee
    f_close(&file);
  }
  else
  {
    //printmsg("Please insert the SD card properly!!!\r\n");
    //*buffer = "no";
    gc9a01a_write_string(25, 60, "Please insert the    SD card properly!!!" , Font_11x18, WHITE, NAVY);
  }
}

/**
  * @brief  Display an image from a BMP file on the GC9A01A LCD display.
  * @param  fname: Pointer to the filename of the BMP image to display
  * @retval  0 if successful, -1 if file open error, -2 if header read error,
  *         -3 if BMP signature error, -4 if dimensions mismatch, -5 if format error,
  *         -6 if seek error, -7 if pixel data read error, -8 if file close error
  */
//int display_image_file(const char* fname) {
//	FIL file;
//	FRESULT res;
//	FATFS fs;
//
//	unsigned int bytesRead;
//	uint8_t header[34];
//	uint8_t imageRow[(BSP_LCD_ACTIVE_WIDTH * 2)];
//
//	// Mount the file system
//	f_mount(&fs, "", 0);
//
//	// Open the BMP file
//	res = f_open(&file, fname, FA_READ);
//	if (res != FR_OK) {
//		return -1;
//	}
//
//	// Read the BMP header
//	res = f_read(&file, header, sizeof(header), &bytesRead);
//	if (res != FR_OK || bytesRead != sizeof(header)) {
//		f_close(&file);
//		return -2;
//	}
//
//	// Check BMP signature
//	if ((header[0] != 0x42) || (header[1] != 0x4D)) {
//		f_close(&file);
//		return -3;
//	}
//
//	// Extract BMP information
//	uint32_t imageOffset = header[10] | (header[11] << 8) | (header[12] << 16) | (header[13] << 24);
//	uint32_t imageWidth = header[18] | (header[19] << 8) | (header[20] << 16) | (header[21] << 24);
//	uint32_t imageHeight = header[22] | (header[23] << 8) | (header[24] << 16) | (header[25] << 24);
//	uint16_t imagePlanes = header[26] | (header[27] << 8);
//	uint16_t imageBitsPerPixel = header[28] | (header[29] << 8);
//	uint32_t imageCompression = header[30] | (header[31] << 8) | (header[32] << 16) | (header[33] << 24);
//
//	// Check BMP dimensions and format
//	if ((imageWidth != BSP_LCD_ACTIVE_WIDTH) || (imageHeight != BSP_LCD_ACTIVE_HEIGHT)) {
//		f_close(&file);
//		return -4;
//	}
//	if ((imagePlanes != 1) || (imageBitsPerPixel != 16) || (imageCompression != 0)) {
//		f_close(&file);
//		return -5;
//	}
//
//	// Seek to the pixel data
//	res = f_lseek(&file, imageOffset);
//	if (res != FR_OK) {
//		f_close(&file);
//		return -6;
//	}
//
//	// Read and display the pixel data
//	for (uint32_t y = 0; y < imageHeight; y++) {
//		uint32_t rowIdx = 0;
//		res = f_read(&file, imageRow, sizeof(imageRow), &bytesRead);
//		if (res != FR_OK) {
//			f_close(&file);
//			return -7;
//		}
//
//		for (uint32_t x = 0; x < imageWidth; x++) {
//			uint8_t r = imageRow[rowIdx++];
//			uint8_t g = imageRow[rowIdx++];
//			uint8_t b = imageRow[rowIdx++];
//
//
////			uint16_t color565 = GC9A01A_COLOR565(r, g, b);
//			uint16_t color565 = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
//			gc9a01a_draw_pixel(x, imageHeight - y - 1, color565);
//		}
//	}
//
//	// Close the BMP file
//	res = f_close(&file);
//	if (res != FR_OK) {
//		 return -8;
//	}
//
//	return 0;
//}

int display_image_file(const char* fname) {
    FIL file;
    FRESULT res;
    FATFS fs;

    unsigned int bytesRead;
    uint8_t header[54]; // Increase header size to 54 for BMP headers
    uint16_t imageBuffer[BSP_LCD_ACTIVE_WIDTH * BSP_LCD_ACTIVE_HEIGHT]; // Assuming 16-bit color

    // Mount the file system
    f_mount(&fs, "", 0);

    // Open the BMP file
    res = f_open(&file, fname, FA_READ);
    if (res != FR_OK) {
        return -1;
    }

    // Read the BMP header
    res = f_read(&file, header, sizeof(header), &bytesRead);
    if (res != FR_OK || bytesRead != sizeof(header)) {
        f_close(&file);
        return -2;
    }

    // Check BMP signature
    if (header[0] != 'B' || header[1] != 'M') {
        f_close(&file);
        return -3;
    }

    // Extract BMP information
    uint32_t imageOffset = *(uint32_t*)&header[10];
    uint32_t imageWidth = *(uint32_t*)&header[18];
    uint32_t imageHeight = *(uint32_t*)&header[22];
    uint16_t imageBitsPerPixel = *(uint16_t*)&header[28];

    // Check BMP dimensions and format
    if (imageWidth != BSP_LCD_ACTIVE_WIDTH || imageHeight != BSP_LCD_ACTIVE_HEIGHT ||
        imageBitsPerPixel != 16) {
        f_close(&file);
        return -4;
    }

    // Seek to the pixel data
    res = f_lseek(&file, imageOffset);
    if (res != FR_OK) {
        f_close(&file);
        return -5;
    }

    // Read pixel data into buffer
    res = f_read(&file, imageBuffer, sizeof(imageBuffer), &bytesRead);
    if (res != FR_OK) {
        f_close(&file);
        return -6;
    }

    // Close the BMP file
    res = f_close(&file);
    if (res != FR_OK) {
        return -7;
    }

    // Display the image from the buffer
    for (uint32_t y = 0; y < imageHeight; y++) {
        for (uint32_t x = 0; x < imageWidth; x++) {
            uint16_t color565 = imageBuffer[y * imageWidth + x];
            gc9a01a_draw_pixel(x, y, color565);
        }
    }

    return 0;
}




/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
