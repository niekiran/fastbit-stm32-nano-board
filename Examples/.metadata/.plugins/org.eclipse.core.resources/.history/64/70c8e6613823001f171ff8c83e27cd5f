/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "usbd_hid.h"
#include "mpu6050.h"
#include "mouse_click.h"
#include <stdio.h>
#include <math.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
//typedef struct {
//  uint8_t button;
//  int8_t mouse_x;
//  int8_t mouse_y;
//  int8_t wheel;
//} mouseHID;
mouseHID mouse_hid = {0, 0, 0, 0};
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define REPORT_DELAY_MS     5
#define DEBOUNCE_DELAY_MS   50
#define THRESHOLD           1
#define CLICK_CASE
//#define ENABLE_MOUSE_CLICK

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
extern USBD_HandleTypeDef hUsbDeviceFS;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void update_mouse_movement(double gyroz_thresh, double gyroy_thresh, mouseHID *mouse_hid);
void handle_mouse_click(mouseHID *mouse_hid);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char     data[120];
//uint8_t button_flag = 0;

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USB_DEVICE_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  mpu6050_init();

  double gyroz_thresh = 0.0;
  double gyroy_thresh = 0.0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //mpu6050_read(&gyroz_thresh, &gyroy_thresh);
#ifdef CLICK
    //printf("%.2f   %.2f\n", gyroz_thresh, gyroy_thresh);
    //handle_mouse_click(&mouse_hid);
    GPIO_PinState l_pin_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
    GPIO_PinState r_pin_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
    if (l_pin_state == GPIO_PIN_SET)
    {
      mouse_hid.button = 1;
      USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mouse_hid, sizeof(mouse_hid));
      HAL_Delay(50);

      mouse_hid.button = 0;
      USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mouse_hid, sizeof(mouse_hid));
      // button_flag = 0;
    }else if (r_pin_state == GPIO_PIN_SET)
    {
      mouse_hid.button = 2;
      USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mouse_hid, sizeof(mouse_hid));
      HAL_Delay(50);

      mouse_hid.button = 0;
      USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mouse_hid, sizeof(mouse_hid));
      // button_flag = 0;
    } else {
#endif
//    update_mouse_movement(gyroz_thresh, gyroy_thresh, &mouse_hid);
//    //printf("%d   %d\n", mouse_hid.mouse_x, mouse_hid.mouse_y);
//    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mouse_hid, sizeof(mouse_hid));
// //   }
//    HAL_Delay(REPORT_DELAY_MS);

   mpu6050_read(&gyroz_thresh, &gyroy_thresh);
#ifdef CLICK_CASE
    GPIO_PinState l_pin_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
    GPIO_PinState r_pin_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);

    if (l_pin_state == GPIO_PIN_SET)
    {
//      HAL_Delay(DEBOUNCE_DELAY_MS); // Debounce delay
//      if (l_pin_state == GPIO_PIN_SET) {
        mouse_hid.button |= 1;  // Set the left button pressed state
//     }
    } else {
      mouse_hid.button &= ~1; // Clear the left button pressed state
    }

    if (r_pin_state == GPIO_PIN_SET) {
//      HAL_Delay(DEBOUNCE_DELAY_MS); // Debounce delay
//      if (r_pin_state == GPIO_PIN_SET) {
        mouse_hid.button |= 2;  // Set the right button pressed state
//      }
    } else {
      mouse_hid.button &= ~2;
    }
#endif


    printf("%d   %d\n", mouse_hid.mouse_x, mouse_hid.mouse_y);
    update_mouse_movement(gyroz_thresh, gyroy_thresh, &mouse_hid);
    //printf("%d   %d\n", mouse_hid.mouse_x, mouse_hid.mouse_y);
    //HAL_UART_Transmit(&huart1, (uint8_t *)data, sprintf(data, "%1.0f, %1.0f\n",mouse_hid.mouse_x, mouse_hid.mouse_y), HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, (uint8_t *)data, sprintf(data, "%d\n",mouse_hid.mouse_x), HAL_MAX_DELAY);
    //char buffer[50]; // Adjust size as needed
    //snprintf(buffer, sizeof(buffer), "%d,%d,%d\n", mouse_hid.mouse_x, mouse_hid.mouse_y, mouse_hid.button);

    // Send the data over UART
    //HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

  //    HAL_UART_Transmit(&huart1, (uint8_t *)data, sprintf(data, "%1.0f\n",gyroy_thresh), HAL_MAX_DELAY);
    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mouse_hid, sizeof(mouse_hid));

    HAL_Delay(REPORT_DELAY_MS);

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 38400;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void update_mouse_movement(double gyroz_thresh, double gyroy_thresh, mouseHID *mouse_hid)
{
  if ( (gyroz_thresh > THRESHOLD) || (gyroz_thresh < -THRESHOLD) )  {
    mouse_hid->mouse_x = -(gyroz_thresh/15);
  } else {
    mouse_hid->mouse_x = 0;
  }

  if ( (gyroy_thresh > THRESHOLD) || (gyroy_thresh < -THRESHOLD) ) {
    mouse_hid->mouse_y = -(gyroy_thresh/15);
  } else {
    mouse_hid->mouse_y = 0;
  }
//  printf("%d   %d\n", mouse_hid->mouse_x, mouse_hid->mouse_y);
}
//void update_mouse_movement(double gyrox_thresh, double gyroy_thresh, mouseHID *mouse_hid)
//{
//  if (gyrox_thresh == 0 && gyroy_thresh == 0)
//  {
//    mouse_hid->mouse_x = 0;
//    mouse_hid->mouse_y = 0;
//  }
//  else if (gyrox_thresh > THRESHOLD && gyroy_thresh == 0)
//  {
//    mouse_hid->mouse_x = -1*(gyrox_thresh/4);
//    mouse_hid->mouse_y = 0;
//  }
//  else if (gyrox_thresh < -THRESHOLD && gyroy_thresh == 0)
//  {
//    //mouse_hid->mouse_x = 1*(gyrox_thresh/2);
//    mouse_hid->mouse_x = -1*(gyrox_thresh/4);
//    mouse_hid->mouse_y = 0;
//  }
//  else if (gyrox_thresh == 0 && gyroy_thresh > THRESHOLD)
//  {
//    mouse_hid->mouse_x = 0;
//    mouse_hid->mouse_y = -1*(gyroy_thresh/4);
//  }
//  else if (gyrox_thresh == 0 && gyroy_thresh < -THRESHOLD)
//  {
//    mouse_hid->mouse_x = 0;
//    mouse_hid->mouse_y = -1*(gyroy_thresh/4);
//    //mouse_hid->mouse_y = 1*(gyroy_thresh/4);
//  }
//  else if (gyrox_thresh > THRESHOLD && gyroy_thresh > THRESHOLD)
//  {
//    mouse_hid->mouse_x = -1*(gyrox_thresh/4);
//    mouse_hid->mouse_y = -1*(gyroy_thresh/4);
//  }
//  else if (gyrox_thresh < -THRESHOLD && gyroy_thresh > THRESHOLD)
//  {
//    //mouse_hid->mouse_x = 1*(gyrox_thresh/4);
//    mouse_hid->mouse_x = -1*(gyrox_thresh/4);
//    mouse_hid->mouse_y = -1*(gyroy_thresh/4);
//  }
//  else if (gyrox_thresh < -THRESHOLD && gyroy_thresh < -THRESHOLD)
//  {
//    mouse_hid->mouse_x = -1*(gyrox_thresh/4);
//    mouse_hid->mouse_y = -1*(gyroy_thresh/4);
////    mouse_hid->mouse_x = 1*(gyrox_thresh/4);
////    mouse_hid->mouse_y = 1*(gyroy_thresh/4);
//  }
//  else if (gyrox_thresh > THRESHOLD && gyroy_thresh < -THRESHOLD)
//  {
//    mouse_hid->mouse_x = -1*(gyrox_thresh/4);
//    mouse_hid->mouse_y = -1*(gyroy_thresh/4);
//    //mouse_hid->mouse_y = 1*(gyroy_thresh/4);
//  }
////  printf("%d   %d\n", mouse_hid->mouse_x, mouse_hid->mouse_y);
//}
void handle_mouse_click(mouseHID *mouse_hid) {
  GPIO_PinState l_pin_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
  if (l_pin_state == GPIO_PIN_SET)
  {
    mouse_hid->button = 1;
    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mouse_hid, sizeof(mouse_hid));
    HAL_Delay(50);

    mouse_hid->button = 0;
    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mouse_hid, sizeof(mouse_hid));
    // button_flag = 0;
  }
  GPIO_PinState r_pin_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
  if (r_pin_state == GPIO_PIN_SET)
  {
    mouse_hid->button = 2;
    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mouse_hid, sizeof(mouse_hid));
    HAL_Delay(50);

    mouse_hid->button = 0;
    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mouse_hid, sizeof(mouse_hid));
    // button_flag = 0;
  }
}
//void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
//{
//  if (GPIO_Pin == GPIO_PIN_7)
//  {
//    button_flag = 1;
//  }
//}




/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
