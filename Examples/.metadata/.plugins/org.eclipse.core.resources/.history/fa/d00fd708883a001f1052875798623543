/*
 * GC9A01A.c
 *
 *  Created on: Jun 26, 2024
 *      Author: Shreyas Acharya, BHARATI SOFTWARE
 */
#include "GC9A01A.h"

/**
 * Set an area for drawing on the display with start row, col and end row, col.
 * User don't need to call it usually, call it only before some functions who don't call it by default.
 * @param x1 start column address.
 * @param x2 end column address.
 * @param y1 start row address.
 * @param y2 end row address.
 */
void gc9a01a_set_address_window(uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2){
	// Send commands to set column address (x2 to x2)
	GC9A01A_DC_CMD;
	GC9A01A_WRITE_8BIT(GC9A01A_CASET); // Column address set command
	GC9A01A_DC_DAT;
	GC9A01A_WRITE_8BIT((uint8_t)(x1 >> 8));
	GC9A01A_WRITE_8BIT((uint8_t)x1);
	GC9A01A_WRITE_8BIT((uint8_t)(x2 >> 8));
	GC9A01A_WRITE_8BIT((uint8_t)x2);

	// Send commands to set row address (y2 to y2)
	GC9A01A_DC_CMD;
	GC9A01A_WRITE_8BIT(GC9A01A_RASET); // Row address set command
	GC9A01A_DC_DAT;
	GC9A01A_WRITE_8BIT((uint8_t)(y1 >> 8));
	GC9A01A_WRITE_8BIT((uint8_t)y1);
	GC9A01A_WRITE_8BIT((uint8_t)(y2 >> 8));
	GC9A01A_WRITE_8BIT((uint8_t)y2);

	// Send command to write to RAM
	GC9A01A_DC_CMD;
	GC9A01A_WRITE_8BIT(GC9A01A_RAMWR); // Write to RAM command
	GC9A01A_DC_DAT;
}

/**
  * @brief  Set the orientation of the GC9A01A LCD display
  * @param  orientation: Orientation mode (LANDSCAPE or PORTRAIT)
  * @retval None
  */
void gc9a01a_set_orientation(uint8_t orientation) {
	uint8_t params[4];

	if (orientation == LANDSCAPE) {
		// Set column address for landscape orientation
		_gc9a01a_write_cmd_8bit(GC9A01A_CASET);
		params[0] = 0x00;
		params[1] = 0x00;
		params[2] = 0x00;
		params[3] = 0xf0;
		for (int i = 0; i < 4; i++) {
			_gc9a01a_write_data_8bit(params[i]);
		}

		// Set row address for landscape orientation
		_gc9a01a_write_cmd_8bit(GC9A01A_RASET);
		for (int i = 0; i < 4; i++) {
			_gc9a01a_write_data_8bit(params[i]);
		}

		// Set orientation parameters for landscape mode
		params[0] = MADCTL_MV | MADCTL_BGR;
	} else if (orientation == PORTRAIT) {
		// Set column address for portrait orientation
		_gc9a01a_write_cmd_8bit(GC9A01A_CASET);
		params[0] = 0x00;
		params[1] = 0x00;
		params[2] = 0x00;
		params[3] = 0xf0;
		for (int i = 0; i < 4; i++) {
			_gc9a01a_write_data_8bit(params[i]);
		}

		// Set row address for portrait orientation
		_gc9a01a_write_cmd_8bit(GC9A01A_RASET);
		for (int i = 0; i < 4; i++) {
			_gc9a01a_write_data_8bit(params[i]);
		}

		// Set orientation parameters for portrait mode
		params[0] =  MADCTL_MX | MADCTL_BGR;
	}

	// Set MADCTL register with the configured parameters
	_gc9a01a_write_cmd_8bit(GC9A01A_MADCTL);
	_gc9a01a_write_data_8bit(params[0]);
}

/**
  * @brief  Write an 8-bit command to the GC9A01A LCD controller
  * @param  cmd: Command byte to be sent
  * @retval None
  */
void _gc9a01a_write_cmd_8bit(uint8_t cmd)
{
	//CS_ACTIVE;
	GC9A01A_DC_CMD;
	GC9A01A_WRITE_8BIT(cmd);
}

/**
  * @brief  Write an 8-bit data byte to the GC9A01A LCD controller
  * @param  data: Data byte to be sent
  * @retval None
  */
void _gc9a01a_write_data_8bit(uint8_t data)
{
	//CS_ACTIVE;
	GC9A01A_DC_DAT;
	GC9A01A_WRITE_8BIT(data);
}

/**
  * @brief  Write a character on the GC9A01A LCD
  * @param  x: Start column address
  * @param  y: Start row address
  * @param  ch: Character to be displayed
  * @param  font: Font definition structure
  * @param  color: Color of the character (RGB565 format)
  * @param  bgcolor: Background color of the character (RGB565 format)
  * @retval None
  */
void gc9a01a_write_char(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
	uint32_t i, b, j;

	gc9a01a_set_address_window(x, (x + font.width - 1), y, (y + font.height - 1));

	for (i = 0; i < font.height; i++) {
		b = font.data[(ch - 32) * font.height + i];
		for (j = 0; j < font.width; j++) {
			if ((b << j) & 0x8000) {
				uint8_t data[] = { color >> 8, color & 0xFF };
				GC9A01A_WRITE_8BIT(data[0]);
				GC9A01A_WRITE_8BIT(data[1]);
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
				GC9A01A_WRITE_8BIT(data[0]);
				GC9A01A_WRITE_8BIT(data[1]);
			}
		}
	}
}

/**
  * @brief  Write a string on the GC9A01A LCD
  * @param  x: Start column address
  * @param  y: Start row address
  * @param  str: Pointer to the string to be displayed
  * @param  font: Font definition structure
  * @param  color: Text color (RGB565 format)
  * @param  bgcolor: Background color (RGB565 format)
  * @retval None
  */
void gc9a01a_write_string(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
	while (*str) {
		if (x + font.width >= BSP_LCD_ACTIVE_WIDTH) {
			x = 0;
			y += font.height;
			if (y + font.height >= BSP_LCD_ACTIVE_HEIGHT) {
				break;
			}

			if (*str == ' ') {
				// skip spaces at the beginning of the new line
				str++;
				continue;
			}
		}

		gc9a01a_write_char(x, y, *str, font, color, bgcolor);
		x += font.width;
		str++;
	}
}

/**
  * @brief  Draw an image on the GC9A01A LCD
  * @param  x: Start column address
  * @param  y: Start row address
  * @param  w: Width of the image
  * @param  h: Height of the image
  * @param  data: Pointer to the image data (RGB565 format)
  * @retval None
  */
void gc9a01a_draw_pixel(uint16_t x, uint16_t w, uint16_t y, uint16_t h, const uint16_t* data) {
	if ((x >= BSP_LCD_ACTIVE_WIDTH) || (y >= BSP_LCD_ACTIVE_HEIGHT)) return;
	if ((x + w - 1) >= BSP_LCD_ACTIVE_WIDTH) w = BSP_LCD_ACTIVE_HEIGHT - x;
	if ((y + h - 1) >= BSP_LCD_ACTIVE_WIDTH) h = BSP_LCD_ACTIVE_HEIGHT - y;

	gc9a01a_set_address_window(x, (x+w-1), y, (y+h-1));

	for (uint32_t i = 0; i < w * h; i++) {
		uint8_t color_high = (data[i] >> 8) & 0xFF;
		uint8_t color_low = data[i] & 0xFF;
		GC9A01A_WRITE_8BIT(color_high);
		GC9A01A_WRITE_8BIT(color_low);
	}
}

void GC9A01A_draw_pixel(uint16_t x, uint16_t y, uint16_t color) {
    if((x >= BSP_LCD_ACTIVE_WIDTH) || (y >= BSP_LCD_ACTIVE_HEIGHT))
        return;
    gc9a01a_set_address_window(x, y, x+1, y+1);
    ILI9341_WriteData(color);
    uint8_t color_high = (color >> 8) & 0xFF;
		uint8_t color_low = color & 0xFF;
		GC9A01A_WRITE_8BIT(color_high);
		GC9A01A_WRITE_8BIT(color_low);
}
/**
  * @brief  Fill a rectangle on the GC9A01A LCD
  * @param  x: Start column address
  * @param  y: Start row address
  * @param  w: Width of the rectangle
  * @param  h: Height of the rectangle
  * @param  color: Color of the rectangle (RGB565 format)
  * @retval None
  */
void gc9a01a_rect_fill(uint16_t x, uint16_t w, uint16_t y, uint16_t h, uint16_t color) {
	// clipping
	if((x >= BSP_LCD_ACTIVE_WIDTH) || (y >= BSP_LCD_ACTIVE_HEIGHT)) return;
	if((x + w - 1) >= BSP_LCD_ACTIVE_WIDTH) w = BSP_LCD_ACTIVE_WIDTH - x;
	if((y + h - 1) >= BSP_LCD_ACTIVE_HEIGHT) h = BSP_LCD_ACTIVE_HEIGHT - y;

	gc9a01a_set_address_window(x,(x+w-1), y, (y+h-1));
	uint8_t data[] = { color >> 8, color & 0xFF };

	for(y = h; y > 0; y--) {
		for(x = w; x > 0; x--) {
			GC9A01A_WRITE_8BIT(data[0]);
			GC9A01A_WRITE_8BIT(data[1]);
		}
	}
}

/**
  * @brief  Fill the entire background of the GC9A01A LCD with a specified color
  * @param  color: Color to fill the background (RGB565 format)
  * @retval None
  */
void background_fill(uint16_t color) {
	gc9a01a_rect_fill(0, BSP_LCD_ACTIVE_WIDTH,0, BSP_LCD_ACTIVE_HEIGHT, color);
}
/**
  * @brief  Hardware reset for GC9A01A LCD
  * @param  None
  * @retval None
  */
void gc9a01a_hw_reset() {
    GC9A01A_RST_IDLE  ;
    HAL_Delay(10);
    GC9A01A_RST_ACTIVE;
    HAL_Delay(10);
    GC9A01A_RST_IDLE  ;
    HAL_Delay(10);
}

//void GC9A01A_Init()
//{
//  HAL_GPIO_WritePin(BL_A_GPIO_Port, BL_A_Pin, GPIO_PIN_SET);
//  GC9A01A_CS_ACTIVE;
//  gc9a01a_hw_reset();
//
//    _gc9a01a_write_cmd_8bit(0xEF);
//    _gc9a01a_write_data_8bit(0x03);
//    _gc9a01a_write_data_8bit(0x80);
//    _gc9a01a_write_data_8bit(0x02);
//
//    _gc9a01a_write_cmd_8bit(0xCF);
//    _gc9a01a_write_data_8bit(0x00);
//    _gc9a01a_write_data_8bit(0xC1);
//    _gc9a01a_write_data_8bit(0x30);
//
//    _gc9a01a_write_cmd_8bit(0xED);
//    _gc9a01a_write_data_8bit(0x64);
//    _gc9a01a_write_data_8bit(0x03);
//    _gc9a01a_write_data_8bit(0x12);
//    _gc9a01a_write_data_8bit(0x81);
//
//    _gc9a01a_write_cmd_8bit(0xE8);
//    _gc9a01a_write_data_8bit(0x85);
//    _gc9a01a_write_data_8bit(0x00);
//    _gc9a01a_write_data_8bit(0x78);
//
//    _gc9a01a_write_cmd_8bit(0xCB);
//    _gc9a01a_write_data_8bit(0x39);
//    _gc9a01a_write_data_8bit(0x2C);
//    _gc9a01a_write_data_8bit(0x00);
//    _gc9a01a_write_data_8bit(0x34);
//    _gc9a01a_write_data_8bit(0x02);
//
//    _gc9a01a_write_cmd_8bit(0xF7);
//    _gc9a01a_write_data_8bit(0x20);
//
//    _gc9a01a_write_cmd_8bit(0xEA);
//    _gc9a01a_write_data_8bit(0x00);
//    _gc9a01a_write_data_8bit(0x00);
//
//    _gc9a01a_write_cmd_8bit(0xC0); // Power control 1
//    _gc9a01a_write_data_8bit(0x23);    // VRH[5:0]
//
//    _gc9a01a_write_cmd_8bit(0xC1); // Power control 2
//    _gc9a01a_write_data_8bit(0x10);    // SAP[2:0]; BT[3:0]
//
//    _gc9a01a_write_cmd_8bit(0xC5); // VCM control 1
//    _gc9a01a_write_data_8bit(0x3e);
//    _gc9a01a_write_data_8bit(0x28);
//
//    _gc9a01a_write_cmd_8bit(0xC7); // VCM control 2
//    _gc9a01a_write_data_8bit(0x86);
//
//    _gc9a01a_write_cmd_8bit(0x36); // Memory Access Control
//    _gc9a01a_write_data_8bit(0x48);    // Rotation 0 (landscape mode)
//
//    _gc9a01a_write_cmd_8bit(0x3A); // Pixel format
//    _gc9a01a_write_data_8bit(0x05);
//
//    _gc9a01a_write_cmd_8bit(0xB1); // Frame rate control
//    _gc9a01a_write_data_8bit(0x00);
//    _gc9a01a_write_data_8bit(0x1B);    // 70Hz
//
//    _gc9a01a_write_cmd_8bit(0xB6); // Display function control
//    _gc9a01a_write_data_8bit(0x0A);
//    _gc9a01a_write_data_8bit(0x82);
//    _gc9a01a_write_data_8bit(0x27);
//
//    _gc9a01a_write_cmd_8bit(0xF2); // 3Gamma function disable
//    _gc9a01a_write_data_8bit(0x00);
//
//    _gc9a01a_write_cmd_8bit(0x26); // Gamma curve selected
//    _gc9a01a_write_data_8bit(0x01);
//
//    _gc9a01a_write_cmd_8bit(0xE0); // Set Gamma
//    _gc9a01a_write_data_8bit(0x0F);
//    _gc9a01a_write_data_8bit(0x31);
//    _gc9a01a_write_data_8bit(0x2B);
//    _gc9a01a_write_data_8bit(0x0C);
//    _gc9a01a_write_data_8bit(0x0E);
//    _gc9a01a_write_data_8bit(0x08);
//    _gc9a01a_write_data_8bit(0x4E);
//    _gc9a01a_write_data_8bit(0xF1);
//    _gc9a01a_write_data_8bit(0x37);
//    _gc9a01a_write_data_8bit(0x07);
//    _gc9a01a_write_data_8bit(0x10);
//    _gc9a01a_write_data_8bit(0x03);
//    _gc9a01a_write_data_8bit(0x0E);
//    _gc9a01a_write_data_8bit(0x09);
//    _gc9a01a_write_data_8bit(0x00);
//
//    _gc9a01a_write_cmd_8bit(0xE1); // Set Gamma
//    _gc9a01a_write_data_8bit(0x00);
//    _gc9a01a_write_data_8bit(0x0E);
//    _gc9a01a_write_data_8bit(0x14);
//    _gc9a01a_write_data_8bit(0x03);
//    _gc9a01a_write_data_8bit(0x11);
//    _gc9a01a_write_data_8bit(0x07);
//    _gc9a01a_write_data_8bit(0x31);
//    _gc9a01a_write_data_8bit(0xC1);
//    _gc9a01a_write_data_8bit(0x48);
//    _gc9a01a_write_data_8bit(0x08);
//    _gc9a01a_write_data_8bit(0x0F);
//    _gc9a01a_write_data_8bit(0x0C);
//    _gc9a01a_write_data_8bit(0x31);
//    _gc9a01a_write_data_8bit(0x36);
//    _gc9a01a_write_data_8bit(0x0F);
//
//    _gc9a01a_write_cmd_8bit(0x11); // Exit sleep mode
//    HAL_Delay(150);                // Delay 150ms
//
//    _gc9a01a_write_cmd_8bit(0x29); // Display on
//    HAL_Delay(150);                // Delay 150ms
//
//}

/**
  * @brief  Initialize the GC9A01A LCD
  * @param  None
  * @retval None
  */
void gc9a01a_init()
{
	GC9A01A_CS_IDLE;
	GC9A01A_BL_ACTIVE;
	GC9A01A_TE_IDLE;
	GC9A01A_RD_IDLE;
	GC9A01A_CS_ACTIVE;
	gc9a01a_hw_reset();


	_gc9a01a_write_cmd_8bit(0xFE);

	_gc9a01a_write_cmd_8bit(0xEF);

	_gc9a01a_write_cmd_8bit(0xEB);
	_gc9a01a_write_data_8bit(0x14);

	_gc9a01a_write_cmd_8bit(0x84);
	_gc9a01a_write_data_8bit(0x60);

	_gc9a01a_write_cmd_8bit(0x85);
	_gc9a01a_write_data_8bit(0xFF);

	_gc9a01a_write_cmd_8bit(0x86);
	_gc9a01a_write_data_8bit(0xFF);

	_gc9a01a_write_cmd_8bit(0x87);
	_gc9a01a_write_data_8bit(0xFF);

	_gc9a01a_write_cmd_8bit(0x8E);
	_gc9a01a_write_data_8bit(0xFF);

	_gc9a01a_write_cmd_8bit(0x8F);
	_gc9a01a_write_data_8bit(0xFF);

	_gc9a01a_write_cmd_8bit(0x88);
	_gc9a01a_write_data_8bit(0x0A);

	_gc9a01a_write_cmd_8bit(0x89);
	_gc9a01a_write_data_8bit(0x21);

	_gc9a01a_write_cmd_8bit(0x8A);
	_gc9a01a_write_data_8bit(0x00);

	_gc9a01a_write_cmd_8bit(0x8B);
	_gc9a01a_write_data_8bit(0x80);

	_gc9a01a_write_cmd_8bit(0x8C);
	_gc9a01a_write_data_8bit(0x01);

	_gc9a01a_write_cmd_8bit(0x8D);
	_gc9a01a_write_data_8bit(0x03);

	_gc9a01a_write_cmd_8bit(0xB5);
	_gc9a01a_write_data_8bit(0x08);
	_gc9a01a_write_data_8bit(0x09);
	_gc9a01a_write_data_8bit(0x14);
	_gc9a01a_write_data_8bit(0x08);

	_gc9a01a_write_cmd_8bit(0xB6);
	_gc9a01a_write_data_8bit(0x00);
	_gc9a01a_write_data_8bit(0x00);

	_gc9a01a_write_cmd_8bit(0x36);
	_gc9a01a_write_data_8bit(0x48);

	_gc9a01a_write_cmd_8bit(0x3A);
	_gc9a01a_write_data_8bit(0x05);

	_gc9a01a_write_cmd_8bit(0x90);
	_gc9a01a_write_data_8bit(0x08);
	_gc9a01a_write_data_8bit(0x08);
	_gc9a01a_write_data_8bit(0x08);
	_gc9a01a_write_data_8bit(0x08);

	_gc9a01a_write_cmd_8bit(0xBD);
	_gc9a01a_write_data_8bit(0x06);

	_gc9a01a_write_cmd_8bit(0xBA);
	_gc9a01a_write_data_8bit(0x01);

	_gc9a01a_write_cmd_8bit(0xBC);
	_gc9a01a_write_data_8bit(0x00);

	_gc9a01a_write_cmd_8bit(0xFF);
	_gc9a01a_write_data_8bit(0x60);
	_gc9a01a_write_data_8bit(0x01);
	_gc9a01a_write_data_8bit(0x04);

	_gc9a01a_write_cmd_8bit(0xC3);
	_gc9a01a_write_data_8bit(0x14);

	_gc9a01a_write_cmd_8bit(0xC4);
	_gc9a01a_write_data_8bit(0x14);

	_gc9a01a_write_cmd_8bit(0xC9);
	_gc9a01a_write_data_8bit(0x25);

	_gc9a01a_write_cmd_8bit(0xBE);
	_gc9a01a_write_data_8bit(0x11);

	_gc9a01a_write_cmd_8bit(0xE1);
	_gc9a01a_write_data_8bit(0x10);
	_gc9a01a_write_data_8bit(0x0e);

	_gc9a01a_write_cmd_8bit(0xDF);
	_gc9a01a_write_data_8bit(0x21);
	_gc9a01a_write_data_8bit(0x0c);
	_gc9a01a_write_data_8bit(0x02);

	_gc9a01a_write_cmd_8bit(0xF0);
	_gc9a01a_write_data_8bit(0x45);
	_gc9a01a_write_data_8bit(0x09);
	_gc9a01a_write_data_8bit(0x08);
	_gc9a01a_write_data_8bit(0x08);
	_gc9a01a_write_data_8bit(0x26);
	_gc9a01a_write_data_8bit(0x2A);

	_gc9a01a_write_cmd_8bit(0xF1);
	_gc9a01a_write_data_8bit(0x43);
	_gc9a01a_write_data_8bit(0x70);
	_gc9a01a_write_data_8bit(0x72);
	_gc9a01a_write_data_8bit(0x36);
	_gc9a01a_write_data_8bit(0x37);
	_gc9a01a_write_data_8bit(0x6F);

	_gc9a01a_write_cmd_8bit(0xF2);
	_gc9a01a_write_data_8bit(0x45);
	_gc9a01a_write_data_8bit(0x09);
	_gc9a01a_write_data_8bit(0x08);
	_gc9a01a_write_data_8bit(0x08);
	_gc9a01a_write_data_8bit(0x26);
	_gc9a01a_write_data_8bit(0x2A);

	_gc9a01a_write_cmd_8bit(0xF3);
	_gc9a01a_write_data_8bit(0x43);
	_gc9a01a_write_data_8bit(0x70);
	_gc9a01a_write_data_8bit(0x72);
	_gc9a01a_write_data_8bit(0x36);
	_gc9a01a_write_data_8bit(0x37);
	_gc9a01a_write_data_8bit(0x6F);

	_gc9a01a_write_cmd_8bit(0xED);
	_gc9a01a_write_data_8bit(0x1B);
	_gc9a01a_write_data_8bit(0x0B);

	_gc9a01a_write_cmd_8bit(0xAE);
	_gc9a01a_write_data_8bit(0x77);

	_gc9a01a_write_cmd_8bit(0xCD);
	_gc9a01a_write_data_8bit(0x63);

	_gc9a01a_write_cmd_8bit(0x70);
	_gc9a01a_write_data_8bit(0x07);
	_gc9a01a_write_data_8bit(0x07);
	_gc9a01a_write_data_8bit(0x04);
	_gc9a01a_write_data_8bit(0x0E);
	_gc9a01a_write_data_8bit(0x0F);
	_gc9a01a_write_data_8bit(0x09);
	_gc9a01a_write_data_8bit(0x07);
	_gc9a01a_write_data_8bit(0x08);
	_gc9a01a_write_data_8bit(0x03);

	_gc9a01a_write_cmd_8bit(0xE8);
	_gc9a01a_write_data_8bit(0x34);

	_gc9a01a_write_cmd_8bit(0x62);
	_gc9a01a_write_data_8bit(0x18);
	_gc9a01a_write_data_8bit(0x0D);
	_gc9a01a_write_data_8bit(0x71);
	_gc9a01a_write_data_8bit(0xED);
	_gc9a01a_write_data_8bit(0x70);
	_gc9a01a_write_data_8bit(0x70);
	_gc9a01a_write_data_8bit(0x18);
	_gc9a01a_write_data_8bit(0x0F);
	_gc9a01a_write_data_8bit(0x71);
	_gc9a01a_write_data_8bit(0xEF);
	_gc9a01a_write_data_8bit(0x70);
	_gc9a01a_write_data_8bit(0x70);

	_gc9a01a_write_cmd_8bit(0x63);
	_gc9a01a_write_data_8bit(0x18);
	_gc9a01a_write_data_8bit(0x11);
	_gc9a01a_write_data_8bit(0x71);
	_gc9a01a_write_data_8bit(0xF1);
	_gc9a01a_write_data_8bit(0x70);
	_gc9a01a_write_data_8bit(0x70);
	_gc9a01a_write_data_8bit(0x18);
	_gc9a01a_write_data_8bit(0x13);
	_gc9a01a_write_data_8bit(0x71);
	_gc9a01a_write_data_8bit(0xF3);
	_gc9a01a_write_data_8bit(0x70);
	_gc9a01a_write_data_8bit(0x70);

	_gc9a01a_write_cmd_8bit(0x64);
	_gc9a01a_write_data_8bit(0x28);
	_gc9a01a_write_data_8bit(0x29);
	_gc9a01a_write_data_8bit(0xF1);
	_gc9a01a_write_data_8bit(0x01);
	_gc9a01a_write_data_8bit(0xF1);
	_gc9a01a_write_data_8bit(0x00);
	_gc9a01a_write_data_8bit(0x07);

	_gc9a01a_write_cmd_8bit(0x66);
	_gc9a01a_write_data_8bit(0x3C);
	_gc9a01a_write_data_8bit(0x00);
	_gc9a01a_write_data_8bit(0xCD);
	_gc9a01a_write_data_8bit(0x67);
	_gc9a01a_write_data_8bit(0x45);
	_gc9a01a_write_data_8bit(0x45);
	_gc9a01a_write_data_8bit(0x10);
	_gc9a01a_write_data_8bit(0x00);
	_gc9a01a_write_data_8bit(0x00);
	_gc9a01a_write_data_8bit(0x00);

	_gc9a01a_write_cmd_8bit(0x67);
	_gc9a01a_write_data_8bit(0x00);
	_gc9a01a_write_data_8bit(0x3C);
	_gc9a01a_write_data_8bit(0x00);
	_gc9a01a_write_data_8bit(0x00);
	_gc9a01a_write_data_8bit(0x00);
	_gc9a01a_write_data_8bit(0x01);
	_gc9a01a_write_data_8bit(0x54);
	_gc9a01a_write_data_8bit(0x10);
	_gc9a01a_write_data_8bit(0x32);
	_gc9a01a_write_data_8bit(0x98);

	_gc9a01a_write_cmd_8bit(0x74);
	_gc9a01a_write_data_8bit(0x10);
	_gc9a01a_write_data_8bit(0x85);
	_gc9a01a_write_data_8bit(0x80);
	_gc9a01a_write_data_8bit(0x00);
	_gc9a01a_write_data_8bit(0x00);
	_gc9a01a_write_data_8bit(0x4E);
	_gc9a01a_write_data_8bit(0x00);

	_gc9a01a_write_cmd_8bit(0x98);
	_gc9a01a_write_data_8bit(0x3e);
	_gc9a01a_write_data_8bit(0x07);

	_gc9a01a_write_cmd_8bit(0x99);
	_gc9a01a_write_data_8bit(0x3e);
	_gc9a01a_write_data_8bit(0x07);

	_gc9a01a_write_cmd_8bit(0x35);
	_gc9a01a_write_data_8bit(0x00);

	_gc9a01a_write_cmd_8bit(0x53);

	_gc9a01a_write_data_8bit(0x24);

	_gc9a01a_write_cmd_8bit(0x21);
	HAL_Delay(120);
	_gc9a01a_write_cmd_8bit(0x11);
	HAL_Delay(120);
	_gc9a01a_write_cmd_8bit(0x29);
	HAL_Delay(20);

	/**********SLEEP OUT***************/
	_gc9a01a_write_cmd_8bit(0x11);
	HAL_Delay(120);
	_gc9a01a_write_cmd_8bit(0x29);
}
