/*
 * mpu6050.c
 *
 *  Created on: Apr 12, 2024
 *      Author: Shreyas Acharya, BHARATI SOFTWARE
 */

#include <mpu6050.h>
#include <main.h>
#include <math.h>
#include <stdio.h>

extern I2C_HandleTypeDef hi2c1;
extern double degreex, degreey;
extern double accx,accy,accz;
extern double gyrox,gyroy,gyroz;
extern double radianx, radiany;

extern double velx, vely, velz;

uint8_t temp_data;
/* Private function prototypes */
void PowerManagement_Config();
void Gyro_Config();
void Accelerometer_Config();
/**
  * @brief Initializes the MPU6050 sensor by configuring power management, gyroscope, and accelerometer.
  * @param None
  * @retval None
  */
void mpu6050_init() {
  PowerManagement_Config();
  Gyro_Config();
  Accelerometer_Config();
}

/**
  * @brief Configures the power management settings of the MPU6050 sensor to exit sleep mode.
  * @param None
  * @retval None
  */
void PowerManagement_Config()
{
  /* Set the value to be written to the power management register */
  temp_data = 0x00;

  /* Write the value to the power management register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_USR_CTRL, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
    /*print in SWV terminal*/
    printf("Exiting from sleep mode...\n");
  } else {
    printf("Failed to exit from sleep mode...\n");
  }
}

/**
  * @brief Configures the gyroscope settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Gyro_Config()
{
  /* Set the value to be written to the gyroscope configuration register */
  temp_data = FS_GYRO_500;

  /* Write the value to the gyroscope configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_GYRO, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
    printf("Configuring gyroscope...\n");
  } else {
    printf("Failed to configure gyroscope...\n");
  }
}

/**
  * @brief Configures the accelerometer settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Accelerometer_Config()
{
  /* Set the value to be written to the accelerometer configuration register */
  temp_data = FS_ACC_4G;

  /* Write the value to the accelerometer configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_ACC, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
    printf("Configuring accelerometer...\n");
  } else {
    printf("Failed to configure accelerometer...\n");
  }
}


/**
  * @brief Reads data from the MPU6050 sensor, including accelerometer and gyroscope values,
  *        and calculates roll and pitch angles using the accelerometer data.
  * @param None
  * @retval None
  */
void mpu6050_read() {
    static uint8_t data[14];                         // Data buffer to hold all sensor data (accelerometer and gyroscope)
    static int16_t x_acc, y_acc, z_acc;              // Accelerometer data for x, y, and z axes
    static int16_t x_gyro, y_gyro, z_gyro;           // Gyroscope data for x, y, and z axes
    //static double accx, accy, accz;                  // Accelerometer values in g
    static double gyrox, gyroy, gyroz;               // Gyroscope values in dps
    static double velx = 0, vely = 0, velz = 0;      // Velocity in m/s
    static uint32_t lastTime = 0;  // Time of last measurement in milliseconds
    uint32_t currentTime = HAL_GetTick();  // Current time in milliseconds
    double dt;  // Time difference in seconds                             // Time difference in seconds

    /* Read all sensor data from the MPU6050 */
    HAL_I2C_Mem_Read(&hi2c1, (MPU6050_ADDR << 1), REG_DATA, 1, data, 14, HAL_MAX_DELAY);

    /* Extract accelerometer data (16-bit 2's complement format, high byte first) */
    x_acc = (int16_t)((data[0] << 8) | data[1]);
    y_acc = (int16_t)((data[2] << 8) | data[3]);
    z_acc = (int16_t)((data[4] << 8) | data[5]);

    /* Extract gyroscope data (16-bit 2's complement format, high byte first) */
    x_gyro = (int16_t)((data[8] << 8) | data[9]);
    y_gyro = (int16_t)((data[10] << 8) | data[11]);
    z_gyro = (int16_t)((data[12] << 8) | data[13]);

    /* Convert accelerometer raw values to 'g' (acceleration due to gravity) values */
    accx = (double)x_acc / ACC_FS_SENSITIVITY_3;
    accy = (double)y_acc / ACC_FS_SENSITIVITY_3;
    accz = (double)z_acc / ACC_FS_SENSITIVITY_3;

    /* Convert gyroscope raw values to degrees per second ('°/s') */
    gyrox = (double)x_gyro / GYR_FS_SENSITIVITY_3;
    gyroy = (double)y_gyro / GYR_FS_SENSITIVITY_3;
    gyroz = (double)z_gyro / GYR_FS_SENSITIVITY_3;

    /* Calculate roll and pitch angles using accelerometer data */
    radianx = asin(accx / sqrt(accx * accx + accz * accz));
    radiany = asin(accy / sqrt(accy * accy + accz * accz));

    /* Convert roll and pitch angles from radians to degrees */
    degreex = radianx * (180.0 / M_PI); // Roll
    degreey = radiany * (180.0 / M_PI); // Pitch

    dt = (currentTime - lastTime);  // Convert milliseconds to seconds

    // Integrate acceleration to calculate velocity (v = u + at)
    if (lastTime != 0) {  // Ensure dt is valid (i.e., not the first measurement)
        velx += accx * G_TO_MS2 * dt;  // Convert g to m/s² and integrate
        vely += accy * G_TO_MS2 * dt;
    }

    // Update last time
    lastTime = currentTime;


    /* Print out the accelerometer and gyroscope values along with velocity */
    printf("Acc(g)=> X:%.2f Y:%.2f Z:%.2f   Gyro(dps)=> X:%.2f Y:%.2f Z:%.2f\n", accx, accy, accz, gyrox, gyroy, gyroz);
    printf("Velocity(m/s)=> X:%.2f Y:%.2f Z:%.2f\n", velx, vely, velz);
    printf("Roll: %.2f degrees, Pitch: %.2f degrees\n", degreex, degreey);
//  printf("acc_final_x_mps2:%.2f acc_final_y_mps2:%.2f acc_final_z_mps2:%.2f\n", acc_final_x_mps2, acc_final_y_mps2, acc_final_z_mps2);
//  printf("delta_v_x :%.2f delta_v_y:%.2f delta_v_z:%.2f\n", delta_v_x, delta_v_y, delta_v_z);
}


//

//double accx,accy,accz,
//  double gyrox,gyroy,gyroz;
//  double radianx, radiany;
//acc_final_x_mps2 = accx * acceleration_factor;
//acc_final_y_mps2 = accy * acceleration_factor;
//acc_final_z_mps2 = accz * acceleration_factor;

//  delta_v_x = (acc_final_x_mps2 - acc_initial_x_mps2) ;
//  delta_v_y = (acc_final_y_mps2 - acc_initial_y_mps2) ;
//  delta_v_z = (acc_final_z_mps2 - acc_initial_z_mps2) ;
