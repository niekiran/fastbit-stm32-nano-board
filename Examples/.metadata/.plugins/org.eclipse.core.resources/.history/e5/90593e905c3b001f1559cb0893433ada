/*
 * GC9A01A.c
 *
 *  Created on: Jun 26, 2024
 *      Author: Shreyas Acharya, BHARATI SOFTWARE
 */
#include "GC9A01A.h"

/**
 * Set an area for drawing on the display with start row, col and end row, col.
 * User don't need to call it usually, call it only before some functions who don't call it by default.
 * @param x1 start column address.
 * @param x2 end column address.
 * @param y1 start row address.
 * @param y2 end row address.
 */
void gc9a01a_set_address_window(uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2){
	// Send commands to set column address (x2 to x2)
	GC9A01A_DC_CMD;
	GC9A01A_WRITE_8BIT(GC9A01A_CASET); // Column address set command
	GC9A01A_DC_DAT;
	GC9A01A_WRITE_8BIT((uint8_t)(x1 >> 8));
	GC9A01A_WRITE_8BIT((uint8_t)x1);
	GC9A01A_WRITE_8BIT((uint8_t)(x2 >> 8));
	GC9A01A_WRITE_8BIT((uint8_t)x2);

	// Send commands to set row address (y2 to y2)
	GC9A01A_DC_CMD;
	GC9A01A_WRITE_8BIT(GC9A01A_RASET); // Row address set command
	GC9A01A_DC_DAT;
	GC9A01A_WRITE_8BIT((uint8_t)(y1 >> 8));
	GC9A01A_WRITE_8BIT((uint8_t)y1);
	GC9A01A_WRITE_8BIT((uint8_t)(y2 >> 8));
	GC9A01A_WRITE_8BIT((uint8_t)y2);

	// Send command to write to RAM
	GC9A01A_DC_CMD;
	GC9A01A_WRITE_8BIT(GC9A01A_RAMWR); // Write to RAM command
	GC9A01A_DC_DAT;
}

void _gc9a01a_write_cmd_8bit(uint8_t cmd)
{
	//CS_ACTIVE;
	GC9A01A_DC_CMD;
	GC9A01A_WRITE_8BIT(cmd);
}

///*
// * Inline function to send 8 bit data to the display
// * User need not call it
// */
//void _gc9a01a_write_data_8bit(uint8_t data)
//{
//	//CS_ACTIVE;
//	GC9A01A_DC_DAT;
//	GC9A01A_WRITE_8BIT(data);
//}
 void _gc9a01a_write_data_8bit(uint8_t* buff, size_t buff_size) {
	 GC9A01A_DC_DAT;
    for(uint32_t i = 0; i < buff_size; i++) {
        GC9A01A_WRITE_8BIT(buff[i]);

    }
 }
/**
 * Fills a rectangular area with `color`.
 * Before filling, performs area bound checking
 * @param x Start col address
 * @param y Start row address
 * @param w Width of rectangle
 * @param h Height of rectangle
 * @param color 16-bit RGB565 color
 */
void gc9a01a_draw_rectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
	if ((x >= 240) || (y >= 240)) return;
	if ((x + w - 1) >= 240) w = 240 - x;
	if ((y + h - 1) >= 240) h = 240 - y;

	gc9a01a_set_address_window(x, (x+w-1), y, (y+h-1));

	uint32_t total_pixels = w * h;
	uint8_t color_high = color >> 8;
	uint8_t color_low = color;

	for (uint32_t i = 0; i < total_pixels; i++) {
		GC9A01A_WRITE_8BIT(color_high);
		GC9A01A_WRITE_8BIT(color_low);
	}
}

/**
  * @brief  Write a character on the GC9A01A LCD
  * @param  x: Start column address
  * @param  y: Start row address
  * @param  ch: Character to be displayed
  * @param  font: Font definition structure
  * @param  color: Color of the character (RGB565 format)
  * @param  bgcolor: Background color of the character (RGB565 format)
  * @retval None
  */
void gc9a01a_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
	uint32_t i, b, j;

	gc9a01a_set_address_window(x, (x + font.width - 1), y, (y + font.height - 1));

	for (i = 0; i < font.height; i++) {
		b = font.data[(ch - 32) * font.height + i];
		for (j = 0; j < font.width; j++) {
			if ((b << j) & 0x8000) {
				uint8_t data[] = { color >> 8, color & 0xFF };
				GC9A01A_WRITE_8BIT(data[0]);
				GC9A01A_WRITE_8BIT(data[1]);
			}
			else{
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
				GC9A01A_WRITE_8BIT(data[0]);
				GC9A01A_WRITE_8BIT(data[1]);
			}
		}
	}
}

/**
  * @brief  Write a string on the GC9A01A LCD
  * @param  x: Start column address
  * @param  y: Start row address
  * @param  str: Pointer to the string to be displayed
  * @param  font: Font definition structure
  * @param  color: Text color (RGB565 format)
  * @param  bgcolor: Background color (RGB565 format)
  * @retval None
  */
void gc9a01a_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
	while (*str) {
		if (x + font.width >= GC9A01A_WIDTH) {
			x = 0;
			y += font.height;
			if (y + font.height >= GC9A01A_HEIGHT) {
				break;
			}

			if (*str == ' ') {
				// skip spaces at the beginning of the new line
				str++;
				continue;
			}
		}

		gc9a01a_WriteChar(x, y, *str, font, color, bgcolor);
		x += font.width;
		str++;
	}
}

/**
  * @brief  Draw an image on the GC9A01A LCD
  * @param  x: Start column address
  * @param  y: Start row address
  * @param  w: Width of the image
  * @param  h: Height of the image
  * @param  data: Pointer to the image data (RGB565 format)
  * @retval None
  */
void gc9a01a_draw_image(uint16_t x, uint16_t w, uint16_t y, uint16_t h, const uint16_t* data) {
	if ((x >= GC9A01A_WIDTH) || (y >= GC9A01A_HEIGHT)) return;
	if ((x + w - 1) >= GC9A01A_WIDTH) w = GC9A01A_HEIGHT - x;
	if ((y + h - 1) >= GC9A01A_WIDTH) h = GC9A01A_HEIGHT - y;

	gc9a01a_set_address_window(x, (x+w-1), y, (y+h-1));

	for (uint32_t i = 0; i < w * h; i++) {
		uint8_t color_high = (data[i] >> 8) & 0xFF;
		uint8_t color_low = data[i] & 0xFF;
		GC9A01A_WRITE_8BIT(color_high);
		GC9A01A_WRITE_8BIT(color_low);
	}
}

/**
  * @brief  Fill a rectangle on the GC9A01A LCD
  * @param  x: Start column address
  * @param  y: Start row address
  * @param  w: Width of the rectangle
  * @param  h: Height of the rectangle
  * @param  color: Color of the rectangle (RGB565 format)
  * @retval None
  */
void gc9a01a_rect_fill(uint16_t x, uint16_t w, uint16_t y, uint16_t h, uint16_t color) {
	// clipping
	if((x >= GC9A01A_WIDTH) || (y >= GC9A01A_HEIGHT)) return;
	if((x + w - 1) >= GC9A01A_WIDTH) w = GC9A01A_WIDTH - x;
	if((y + h - 1) >= GC9A01A_HEIGHT) h = GC9A01A_HEIGHT - y;

	gc9a01a_set_address_window(x,(x+w-1), y, (y+h-1));
	uint8_t data[] = { color >> 8, color & 0xFF };

	for(y = h; y > 0; y--) {
		for(x = w; x > 0; x--) {
			GC9A01A_WRITE_8BIT(data[0]);
			GC9A01A_WRITE_8BIT(data[1]);
		}
	}
}


/**
  * @brief  Hardware reset for GC9A01A LCD
  * @param  None
  * @retval None
  */
void gc9a01a_hw_reset() {
    GC9A01A_RST_IDLE  ;
    HAL_Delay(10);
    GC9A01A_RST_ACTIVE;
    HAL_Delay(10);
    GC9A01A_RST_IDLE  ;
    HAL_Delay(10);
}

/**
  * @brief  Initialize the GC9A01A LCD
  * @param  None
  * @retval None
  */
void gc9a01a_init() {
    uint8_t params[15];
    	GC9A01A_CS_IDLE;
    	GC9A01A_BL_ACTIVE;
    	GC9A01A_TE_IDLE;
    	GC9A01A_RD_IDLE;
    	GC9A01A_CS_ACTIVE;
    	gc9a01a_hw_reset();
    // Initialization commands
    _gc9a01a_write_cmd_8bit(0xFE);
    _gc9a01a_write_cmd_8bit(0xEF);

    _gc9a01a_write_cmd_8bit(0xEB);
    params[0] = 0x14;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0x84);
    params[0] = 0x60;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0x85);
    params[0] = 0xFF;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0x86);
    params[0] = 0xFF;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0x87);
    params[0] = 0xFF;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0x8E);
    params[0] = 0xFF;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0x8F);
    params[0] = 0xFF;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0x88);
    params[0] = 0x0A;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0x89);
    params[0] = 0x21;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0x8A);
    params[0] = 0x00;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0x8B);
    params[0] = 0x80;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0x8C);
    params[0] = 0x01;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0x8D);
    params[0] = 0x03;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0xB5);
    params[0] = 0x08;
    params[1] = 0x09;
    params[2] = 0x14;
    params[3] = 0x08;
    _gc9a01a_write_data_8bit(params, 4);

    _gc9a01a_write_cmd_8bit(0xB6);
    params[0] = 0x00;
    params[1] = 0x00;
    _gc9a01a_write_data_8bit(params, 2);

    _gc9a01a_write_cmd_8bit(0x36);
    params[0] = 0x48;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0x3A);
    params[0] = 0x05;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0x90);
    params[0] = 0x08;
    params[1] = 0x08;
    params[2] = 0x08;
    params[3] = 0x08;
    _gc9a01a_write_data_8bit(params, 4);

    _gc9a01a_write_cmd_8bit(0xBD);
    params[0] = 0x06;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0xBA);
    params[0] = 0x01;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0xBC);
    params[0] = 0x00;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0xFF);
    params[0] = 0x60;
    params[1] = 0x01;
    params[2] = 0x04;
    _gc9a01a_write_data_8bit(params, 3);

    _gc9a01a_write_cmd_8bit(0xC3);
    params[0] = 0x14;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0xC4);
    params[0] = 0x14;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0xC9);
    params[0] = 0x25;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0xBE);
    params[0] = 0x11;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0xE1);
    params[0] = 0x10;
    params[1] = 0x0E;
    _gc9a01a_write_data_8bit(params, 2);

    _gc9a01a_write_cmd_8bit(0xDF);
    params[0] = 0x21;
    params[1] = 0x0C;
    params[2] = 0x02;
    _gc9a01a_write_data_8bit(params, 3);

    _gc9a01a_write_cmd_8bit(0xF0);
    params[0] = 0x45;
    params[1] = 0x09;
    params[2] = 0x08;
    params[3] = 0x08;
    params[4] = 0x26;
    params[5] = 0x2A;
    _gc9a01a_write_data_8bit(params, 6);

    _gc9a01a_write_cmd_8bit(0xF1);
    params[0] = 0x43;
    params[1] = 0x70;
    params[2] = 0x72;
    params[3] = 0x36;
    params[4] = 0x37;
    params[5] = 0x6F;
    _gc9a01a_write_data_8bit(params, 6);

    _gc9a01a_write_cmd_8bit(0xF2);
    params[0] = 0x45;
    params[1] = 0x09;
    params[2] = 0x08;
    params[3] = 0x08;
    params[4] = 0x26;
    params[5] = 0x2A;
    _gc9a01a_write_data_8bit(params, 6);

    _gc9a01a_write_cmd_8bit(0xF3);
    params[0] = 0x43;
    params[1] = 0x70;
    params[2] = 0x72;
    params[3] = 0x36;
    params[4] = 0x37;
    params[5] = 0x6F;
    _gc9a01a_write_data_8bit(params, 6);

    _gc9a01a_write_cmd_8bit(0xED);
    params[0] = 0x1B;
    params[1] = 0x0B;
    _gc9a01a_write_data_8bit(params, 2);

    _gc9a01a_write_cmd_8bit(0xAE);
    params[0] = 0x77;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0xCD);
    params[0] = 0x63;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0x70);
    params[0] = 0x07;
    params[1] = 0x07;
    params[2] = 0x04;
    params[3] = 0x0E;
    params[4] = 0x0F;
    params[5] = 0x09;
    params[6] = 0x07;
    params[7] = 0x08;
    params[8] = 0x03;
    _gc9a01a_write_data_8bit(params, 9);

    _gc9a01a_write_cmd_8bit(0xE8);
    params[0] = 0x34;
    _gc9a01a_write_data_8bit(params, 1);

    _gc9a01a_write_cmd_8bit(0x62);
    params[0] = 0x18;
    params[1] = 0x0D;
    params[2] = 0x71;
    params[3] = 0xED;
    params[4] = 0x70;
    params[5] = 0x70;
    params[6] = 0x18;
    params[7] = 0x0F;
    params[8] = 0x71;
    params[9] = 0xEF;
    params[10] = 0x70;
    params[11] = 0x70;
    _gc9a01a_write_data_8bit(params, 12);

    _gc9a01a_write_cmd_8bit(0x63);
    params[0] = 0x18;
    params[1] = 0x11;
    params[2] = 0x71;
    params[3] = 0xF1;
    params[4] = 0x70;
    params[5] = 0x70;
    params[6] = 0x18;
    params[7] = 0x13;
    params[8] = 0x71;
    params[9] = 0xF3;
    params[10] = 0x70;
    params[11] = 0x70;
    _gc9a01a_write_data_8bit(params, 12);

    _gc9a01a_write_cmd_8bit(0x64);
    params[0] = 0x28;
    params[1] = 0x29;
    params[2] = 0xF1;
    params[3] = 0x01;
    params[4] = 0xF1;
    params[5] = 0x00;
    params[6] = 0x07;
    _gc9a01a_write_data_8bit(params, 7);

    _gc9a01a_write_cmd_8bit(0x66);
    params[0] = 0x3C;
    params[1] = 0x00;
    params[2] = 0xCD;
    params[3] = 0x67;
    params[4] = 0x45;
    params[5] = 0x45;
    params[6] = 0x10;
    params[7] = 0x00;
    params[8] = 0x00;
    params[9] = 0x00;
    params[10] = 0x00;
    params[11] = 0x00;
    params[12] = 0x20;
    params[13] = 0x01;
    _gc9a01a_write_data_8bit(params, 14);

    _gc9a01a_write_cmd_8bit(0x67);
    params[0] = 0x3C;
    params[1] = 0x00;
    params[2] = 0xCD;
    params[3] = 0x67;
    params[4] = 0x45;
    params[5] = 0x45;
    params[6] = 0x10;
    params[7] = 0x00;
    params[8] = 0x00;
    params[9] = 0x00;
    params[10] = 0x00;
    params[11] = 0x00;
    params[12] = 0x20;
    params[13] = 0x01;
    _gc9a01a_write_data_8bit(params, 14);

    _gc9a01a_write_cmd_8bit(0x74);
    params[0] = 0x10;
    params[1] = 0x85;
    params[2] = 0x80;
    params[3] = 0x00;
    params[4] = 0x00;
    params[5] = 0x4E;
    params[6] = 0x00;
    _gc9a01a_write_data_8bit(params, 7);

    _gc9a01a_write_cmd_8bit(0x98);
    params[0] = 0x3E;
    params[1] = 0x07;
    _gc9a01a_write_data_8bit(params, 2);

    //_gc9a01a_write_cmd_8bit(0x35);  // Tearing effect line on
    //_gc9a01a_write_cmd_8bit(0x21);  // Display inversion on

    _gc9a01a_write_cmd_8bit(0x11);  // Sleep out
    HAL_Delay(120);
    _gc9a01a_write_cmd_8bit(0x29);  // Display on
    HAL_Delay(20);
}

//void gc9a01a_init()
//{
//	GC9A01A_CS_IDLE;
//	GC9A01A_BL_ACTIVE;
//	GC9A01A_TE_IDLE;
//	GC9A01A_RD_IDLE;
//	GC9A01A_CS_ACTIVE;
//	gc9a01a_hw_reset();
//
//	__gc9a01a_write_cmd_8bit_8bit(0xFE);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xEF);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xEB);
//	_gc9a01a_write_data_8bit(0x14);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x84);
//	_gc9a01a_write_data_8bit(0x60);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x85);
//	_gc9a01a_write_data_8bit(0xFF);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x86);
//	_gc9a01a_write_data_8bit(0xFF);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x87);
//	_gc9a01a_write_data_8bit(0xFF);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x8E);
//	_gc9a01a_write_data_8bit(0xFF);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x8F);
//	_gc9a01a_write_data_8bit(0xFF);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x88);
//	_gc9a01a_write_data_8bit(0x0A);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x89);
//	_gc9a01a_write_data_8bit(0x21);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x8A);
//	_gc9a01a_write_data_8bit(0x00);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x8B);
//	_gc9a01a_write_data_8bit(0x80);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x8C);
//	_gc9a01a_write_data_8bit(0x01);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x8D);
//	_gc9a01a_write_data_8bit(0x03);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xB5);
//	_gc9a01a_write_data_8bit(0x08);
//	_gc9a01a_write_data_8bit(0x09);
//	_gc9a01a_write_data_8bit(0x14);
//	_gc9a01a_write_data_8bit(0x08);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xB6);
//	_gc9a01a_write_data_8bit(0x00);
//	_gc9a01a_write_data_8bit(0x00);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x36);
//	_gc9a01a_write_data_8bit(0x48);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x3A);
//	_gc9a01a_write_data_8bit(0x05);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x90);
//	_gc9a01a_write_data_8bit(0x08);
//	_gc9a01a_write_data_8bit(0x08);
//	_gc9a01a_write_data_8bit(0x08);
//	_gc9a01a_write_data_8bit(0x08);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xBD);
//	_gc9a01a_write_data_8bit(0x06);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xBA);
//	_gc9a01a_write_data_8bit(0x01);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xBC);
//	_gc9a01a_write_data_8bit(0x00);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xFF);
//	_gc9a01a_write_data_8bit(0x60);
//	_gc9a01a_write_data_8bit(0x01);
//	_gc9a01a_write_data_8bit(0x04);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xC3);
//	_gc9a01a_write_data_8bit(0x14);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xC4);
//	_gc9a01a_write_data_8bit(0x14);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xC9);
//	_gc9a01a_write_data_8bit(0x25);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xBE);
//	_gc9a01a_write_data_8bit(0x11);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xE1);
//	_gc9a01a_write_data_8bit(0x10);
//	_gc9a01a_write_data_8bit(0x0e);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xDF);
//	_gc9a01a_write_data_8bit(0x21);
//	_gc9a01a_write_data_8bit(0x0c);
//	_gc9a01a_write_data_8bit(0x02);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xF0);
//	_gc9a01a_write_data_8bit(0x45);
//	_gc9a01a_write_data_8bit(0x09);
//	_gc9a01a_write_data_8bit(0x08);
//	_gc9a01a_write_data_8bit(0x08);
//	_gc9a01a_write_data_8bit(0x26);
//	_gc9a01a_write_data_8bit(0x2A);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xF1);
//	_gc9a01a_write_data_8bit(0x43);
//	_gc9a01a_write_data_8bit(0x70);
//	_gc9a01a_write_data_8bit(0x72);
//	_gc9a01a_write_data_8bit(0x36);
//	_gc9a01a_write_data_8bit(0x37);
//	_gc9a01a_write_data_8bit(0x6F);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xF2);
//	_gc9a01a_write_data_8bit(0x45);
//	_gc9a01a_write_data_8bit(0x09);
//	_gc9a01a_write_data_8bit(0x08);
//	_gc9a01a_write_data_8bit(0x08);
//	_gc9a01a_write_data_8bit(0x26);
//	_gc9a01a_write_data_8bit(0x2A);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xF3);
//	_gc9a01a_write_data_8bit(0x43);
//	_gc9a01a_write_data_8bit(0x70);
//	_gc9a01a_write_data_8bit(0x72);
//	_gc9a01a_write_data_8bit(0x36);
//	_gc9a01a_write_data_8bit(0x37);
//	_gc9a01a_write_data_8bit(0x6F);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xED);
//	_gc9a01a_write_data_8bit(0x1B);
//	_gc9a01a_write_data_8bit(0x0B);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xAE);
//	_gc9a01a_write_data_8bit(0x77);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xCD);
//	_gc9a01a_write_data_8bit(0x63);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x70);
//	_gc9a01a_write_data_8bit(0x07);
//	_gc9a01a_write_data_8bit(0x07);
//	_gc9a01a_write_data_8bit(0x04);
//	_gc9a01a_write_data_8bit(0x0E);
//	_gc9a01a_write_data_8bit(0x0F);
//	_gc9a01a_write_data_8bit(0x09);
//	_gc9a01a_write_data_8bit(0x07);
//	_gc9a01a_write_data_8bit(0x08);
//	_gc9a01a_write_data_8bit(0x03);
//
//	__gc9a01a_write_cmd_8bit_8bit(0xE8);
//	_gc9a01a_write_data_8bit(0x34);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x62);
//	_gc9a01a_write_data_8bit(0x18);
//	_gc9a01a_write_data_8bit(0x0D);
//	_gc9a01a_write_data_8bit(0x71);
//	_gc9a01a_write_data_8bit(0xED);
//	_gc9a01a_write_data_8bit(0x70);
//	_gc9a01a_write_data_8bit(0x70);
//	_gc9a01a_write_data_8bit(0x18);
//	_gc9a01a_write_data_8bit(0x0F);
//	_gc9a01a_write_data_8bit(0x71);
//	_gc9a01a_write_data_8bit(0xEF);
//	_gc9a01a_write_data_8bit(0x70);
//	_gc9a01a_write_data_8bit(0x70);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x63);
//	_gc9a01a_write_data_8bit(0x18);
//	_gc9a01a_write_data_8bit(0x11);
//	_gc9a01a_write_data_8bit(0x71);
//	_gc9a01a_write_data_8bit(0xF1);
//	_gc9a01a_write_data_8bit(0x70);
//	_gc9a01a_write_data_8bit(0x70);
//	_gc9a01a_write_data_8bit(0x18);
//	_gc9a01a_write_data_8bit(0x13);
//	_gc9a01a_write_data_8bit(0x71);
//	_gc9a01a_write_data_8bit(0xF3);
//	_gc9a01a_write_data_8bit(0x70);
//	_gc9a01a_write_data_8bit(0x70);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x64);
//	_gc9a01a_write_data_8bit(0x28);
//	_gc9a01a_write_data_8bit(0x29);
//	_gc9a01a_write_data_8bit(0xF1);
//	_gc9a01a_write_data_8bit(0x01);
//	_gc9a01a_write_data_8bit(0xF1);
//	_gc9a01a_write_data_8bit(0x00);
//	_gc9a01a_write_data_8bit(0x07);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x66);
//	_gc9a01a_write_data_8bit(0x3C);
//	_gc9a01a_write_data_8bit(0x00);
//	_gc9a01a_write_data_8bit(0xCD);
//	_gc9a01a_write_data_8bit(0x67);
//	_gc9a01a_write_data_8bit(0x45);
//	_gc9a01a_write_data_8bit(0x45);
//	_gc9a01a_write_data_8bit(0x10);
//	_gc9a01a_write_data_8bit(0x00);
//	_gc9a01a_write_data_8bit(0x00);
//	_gc9a01a_write_data_8bit(0x00);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x67);
//	_gc9a01a_write_data_8bit(0x00);
//	_gc9a01a_write_data_8bit(0x3C);
//	_gc9a01a_write_data_8bit(0x00);
//	_gc9a01a_write_data_8bit(0x00);
//	_gc9a01a_write_data_8bit(0x00);
//	_gc9a01a_write_data_8bit(0x01);
//	_gc9a01a_write_data_8bit(0x54);
//	_gc9a01a_write_data_8bit(0x10);
//	_gc9a01a_write_data_8bit(0x32);
//	_gc9a01a_write_data_8bit(0x98);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x74);
//	_gc9a01a_write_data_8bit(0x10);
//	_gc9a01a_write_data_8bit(0x85);
//	_gc9a01a_write_data_8bit(0x80);
//	_gc9a01a_write_data_8bit(0x00);
//	_gc9a01a_write_data_8bit(0x00);
//	_gc9a01a_write_data_8bit(0x4E);
//	_gc9a01a_write_data_8bit(0x00);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x98);
//	_gc9a01a_write_data_8bit(0x3e);
//	_gc9a01a_write_data_8bit(0x07);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x99);
//	_gc9a01a_write_data_8bit(0x3e);
//	_gc9a01a_write_data_8bit(0x07);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x35);
//	_gc9a01a_write_data_8bit(0x00);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x53);
//
//	_gc9a01a_write_data_8bit(0x24);
//
//	__gc9a01a_write_cmd_8bit_8bit(0x21);
//	HAL_Delay(120);
//	__gc9a01a_write_cmd_8bit_8bit(0x11);
//	HAL_Delay(120);
//	__gc9a01a_write_cmd_8bit_8bit(0x29);
//	HAL_Delay(20);
//
//	/**********SLEEP OUT***************/
//	__gc9a01a_write_cmd_8bit_8bit(0x11);
//	HAL_Delay(120);
//	__gc9a01a_write_cmd_8bit_8bit(0x29);
//
//}
