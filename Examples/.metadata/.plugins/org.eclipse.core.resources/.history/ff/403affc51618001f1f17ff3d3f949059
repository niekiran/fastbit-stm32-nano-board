/*
 * mpu6050.c
 *
 *  Created on: Apr 12, 2024
 *      Author: Shreyas Acharya, BHARATI SOFTWARE
 */

#include <mpu6050.h>
#include <main.h>
#include <math.h>
#include <stdio.h>

extern I2C_HandleTypeDef hi2c1;

extern double dx, dy;
extern double vel_x, vel_y;
extern double accx_filt, accy_filt, accx_thresh, accy_thresh;
uint8_t temp_data;

/* Private function prototypes */
void PowerManagement_Config();
void Gyro_Config();
void Accelerometer_Config();
/**
  * @brief Initializes the MPU6050 sensor by configuring power management, gyroscope, and accelerometer.
  * @param None
  * @retval None
  */
void mpu6050_init() {
  PowerManagement_Config();
  Gyro_Config();
  Accelerometer_Config();
}

/**
  * @brief Configures the power management settings of the MPU6050 sensor to exit sleep mode.
  * @param None
  * @retval None
  */
void PowerManagement_Config()
{
  /* Set the value to be written to the power management register */
  temp_data = 0x00;

  /* Write the value to the power management register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_USR_CTRL, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
    /*print in SWV terminal*/
    printf("Exiting from sleep mode...\n");
  } else {
    printf("Failed to exit from sleep mode...\n");
  }
}

/**
  * @brief Configures the gyroscope settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Gyro_Config()
{
  /* Set the value to be written to the gyroscope configuration register */
  temp_data = FS_GYRO_500;

  /* Write the value to the gyroscope configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_GYRO, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
    printf("Configuring gyroscope...\n");
  } else {
    printf("Failed to configure gyroscope...\n");
  }
}

/**
  * @brief Configures the accelerometer settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Accelerometer_Config()
{
  /* Set the value to be written to the accelerometer configuration register */
  temp_data = FS_ACC_4G;

  /* Write the value to the accelerometer configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_ACC, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
    printf("Configuring accelerometer...\n");
  } else {
    printf("Failed to configure accelerometer...\n");
  }
}
/* Low pass filtering */
//double low_pass_filter(double current_value, double previous_filtered_value, double alpha) {
//  return alpha * current_value + (1.0 - alpha) * previous_filtered_value;
//}

double apply_threshold(double value, double threshold) {
  if (fabs(value) < threshold || fabs(value) > 0.5 ) {
    return 0.0;
  }
  return value;
}

//
//
//void KalmanFilter_init(KalmanFilter *kf, double process_variance, double measurement_variance) {
//  kf->process_variance = process_variance;
//  kf->measurement_variance = measurement_variance;
//  kf->posteri_estimate = 0;
//  kf->posteri_error = 1;
//}
//
//double KalmanFilter_update(KalmanFilter *kf, double measurement) {
//  double priori_estimate = kf->posteri_estimate;
//  double priori_error = kf->posteri_error + kf->process_variance;
//
//  double blending_factor = priori_error / (priori_error + kf->measurement_variance);
//  kf->posteri_estimate = priori_estimate + blending_factor * (measurement - priori_estimate);
//  kf->posteri_error = (1 - blending_factor) * priori_error;
//
//  return kf->posteri_estimate;
//}
/**
  * @brief Reads data from the MPU6050 sensor, including accelerometer and gyroscope values,
  *        and calculates roll and pitch angles using the accelerometer data.
  * @param None
  * @retval None
  */
void mpu6050_read_accel() {
  uint8_t data[6];                         // Data buffer to hold all sensor data (accelerometer and gyroscope)
  int16_t x_acc, y_acc, z_acc;              // Accelerometer data for x, y, and z axes
  double accx,accy,accz;
  //static double accx_filt = 0.0, accy_filt = 0.0, accx_filt1, accy_filt2;
 // const double alpha = 0.1, threshold = 0.1;

//  static KalmanFilter kf_accx;
//  static KalmanFilter kf_accy;
//  static int kf_initialized = 0;
//
//   //Initialize Kalman filters on the first run
//  if (!kf_initialized) {
//    KalmanFilter_init(&kf_accx, 1.0, 2.0);
//    KalmanFilter_init(&kf_accy, 1.0, 2.0);
//    kf_initialized = 1;
//  }
  //double radianx, radiany, degreex, degreey;

//  uint32_t current_time = HAL_GetTick(); // Get current time in milliseconds
//  uint32_t last_time = 0;

  /* Read all sensor data from the MPU6050 */
  HAL_I2C_Mem_Read(&hi2c1, (MPU6050_ADDR << 1), REG_DATA, 1, data, 14, HAL_MAX_DELAY);

  /* Extract accelerometer data (16-bit 2's complement format, high byte first) */
  x_acc = (int16_t)((data[0] << 8) | data[1]);
  y_acc = (int16_t)((data[2] << 8) | data[3]);
  z_acc = (int16_t)((data[4] << 8) | data[5]);

  /* Convert accelerometer raw values to 'g' (acceleration due to gravity) values */
  accx = (double)x_acc / ACC_FS_SENSITIVITY_3;
  accy = (double)y_acc / ACC_FS_SENSITIVITY_3;
  accz = (double)z_acc / ACC_FS_SENSITIVITY_3;

 // static double dt = 0.01;//(current_time - last_time) / 1000.0;
//
//  accx_filt = low_pass_filter(accx, accx_filt, alpha);
//  accy_filt = low_pass_filter(accy, accy_filt, alpha);

  accx_thresh = apply_threshold(accx, threshold);
  accy_thresh = apply_threshold(accy, threshold);

//  kf_accx = KalmanFilter_update(&kf_accx, accx);
//  kf_accy = KalmanFilter_update(&kf_accy, accy);


  // Integrate acceleration to find velocity (assuming angle is zero degrees)
  // Adjust the integration to zero out any small angles.
//  if (fabs(degreex) < 1.0 && fabs(degreey) < 1.0) {
//    vel_x += accx * dt; // Convert 'g' to m/s^2
//    vel_y += accy * dt;
// // }
//
//  dx +=(double)((vel_x)*dt);
//  dy +=(double)((vel_y)*dt);
//  dx=(double)((accx)*9.8*0.05*0.05);
//  dy=(double)((accy)*9.8*0.05*0.05);

  // Update the last time
//  last_time = current_time;
  /* Print out the accelerometer and gyroscope values along with velocity */
  //printf("Acc(g)=> X:%.2f Y:%.2f Z:%.2f   Gyro(dps)=> X:%.2f Y:%.2f Z:%.2f\n", accx, accy, accz, gyrox, gyroy, gyroz);
 // printf("%.2f  %.2f  %.2f\n", accx, accy, accz);
  printf("%.2f   %.2f\n", accx_thresh, accy_thresh);

  //printf("Displacement (m/s) => X:%.2f Y:%.2f\n", dx, dy);
  //  printf("acc_final_x_mps2:%.2f acc_final_y_mps2:%.2f acc_final_z_mps2:%.2f\n", acc_final_x_mps2, acc_final_y_mps2, acc_final_z_mps2);
  //  printf("delta_v_x :%.2f delta_v_y:%.2f delta_v_z:%.2f\n", delta_v_x, delta_v_y, delta_v_z);
}

//int16_t x_gyro, y_gyro, z_gyro;           // Gyroscope data for x, y, and z axes
//double gyrox,gyroy,gyroz;
///* Extract gyroscope data (16-bit 2's complement format, high byte first) */
//x_gyro = (int16_t)((data[8] << 8) | data[9]);
//y_gyro = (int16_t)((data[10] << 8) | data[11]);
//z_gyro = (int16_t)((data[12] << 8) | data[13]);
///* Convert gyroscope raw values to degrees per second ('Â°/s') */
// gyrox = (double)x_gyro / GYR_FS_SENSITIVITY_3;
// gyroy = (double)y_gyro / GYR_FS_SENSITIVITY_3;
// gyroz = (double)z_gyro / GYR_FS_SENSITIVITY_3;

///* Calculate roll and pitch angles using accelerometer data */
//  radianx = asin(accx / sqrt(accx * accx + accz * accz));
//  radiany = asin(accy / sqrt(accy * accy + accz * accz));
//
//  /* Convert roll and pitch angles from radians to degrees */
//  degreex = radianx * (180.0 / M_PI); // Roll
//  degreey = radiany * (180.0 / M_PI); // Pitch
