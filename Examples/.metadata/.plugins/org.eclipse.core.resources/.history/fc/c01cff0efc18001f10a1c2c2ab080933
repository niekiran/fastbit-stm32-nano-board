/*
 * mpu6050.c
 *
 *  Created on: Apr 12, 2024
 *      Author: Shreyas Acharya, BHARATI SOFTWARE
 */

#include <mpu6050.h>
#include <main.h>
#include <math.h>
#include <stdio.h>

extern I2C_HandleTypeDef hi2c1;

double total_distance_x = 0.0;
double total_distance_y = 0.0;
double previous_accx = 0.0;
double previous_accy = 0.0;
double previous_velocity_x = 0.0;
double previous_velocity_y = 0.0;
double sampling_interval = 0.1;
uint8_t temp_data;

/* Private function prototypes */
void PowerManagement_Config();
void Gyro_Config();
void Accelerometer_Config();
/**
  * @brief Initializes the MPU6050 sensor by configuring power management, gyroscope, and accelerometer.
  * @param None
  * @retval None
  */
void mpu6050_init() {
  PowerManagement_Config();
  Gyro_Config();
  Accelerometer_Config();
}

/**
  * @brief Configures the power management settings of the MPU6050 sensor to exit sleep mode.
  * @param None
  * @retval None
  */
void PowerManagement_Config()
{
  /* Set the value to be written to the power management register */
  temp_data = 0x00;

  /* Write the value to the power management register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_USR_CTRL, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
    /*print in SWV terminal*/
    printf("Exiting from sleep mode...\n");
  } else {
    printf("Failed to exit from sleep mode...\n");
  }
}

/**
  * @brief Configures the gyroscope settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Gyro_Config()
{
  /* Set the value to be written to the gyroscope configuration register */
  temp_data = FS_GYRO_500;

  /* Write the value to the gyroscope configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_GYRO, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
    printf("Configuring gyroscope...\n");
  } else {
    printf("Failed to configure gyroscope...\n");
  }
}

/**
  * @brief Configures the accelerometer settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Accelerometer_Config()
{
  /* Set the value to be written to the accelerometer configuration register */
  temp_data = FS_ACC_4G;

  /* Write the value to the accelerometer configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_ACC, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
    printf("Configuring accelerometer...\n");
  } else {
    printf("Failed to configure accelerometer...\n");
  }
}
/* Low pass filtering */
double low_pass_filter(double current_value, double previous_filtered_value, double alpha) {
  return alpha * current_value + (1.0 - alpha) * previous_filtered_value;
}

/**
  * @brief Applies a threshold to a given value. If the value is within the lower or above the upper threshold, it returns 0.0.
  * @param value The value to be thresholded.
  * @param lower_threshold The lower threshold value.
  * @param upper_threshold The upper threshold value.
  * @retval The thresholded value.
  */
double apply_threshold(double value, double lower_threshold, double upper_threshold) {
  if (value > -lower_threshold && value < lower_threshold) {
    return 0.0;
  }

  if (value < -upper_threshold || value > upper_threshold) {
    return 0.0;
  }
  return value;
}

/**
  * @brief Reads accelerometer data from the MPU6050 and applies thresholding.
  * @param accx_thresh Pointer to store the thresholded X-axis acceleration.
  * @param accy_thresh Pointer to store the thresholded Y-axis acceleration.
  * @retval None
  */
void mpu6050_read(double *accx_thresh, double *accy_thresh) {
  uint8_t data[6];                          // Data buffer to hold all sensor data (accelerometer and gyroscope)
  int16_t x_acc, y_acc, z_acc;              // Accelerometer data for x, y, and z axes
//  int16_t x_gyro, y_gyro, z_gyro;           // Gyroscope data for x, y, and z axes
  double accx,accy,accz;
//  double gyrox,gyroy,gyroz;
  static double accx_filt = 0.0, accy_filt = 0.0;
  const double alpha = 0.1;

  /* Read all sensor data from the MPU6050 */
  if (HAL_I2C_Mem_Read(&hi2c1, (MPU6050_ADDR << 1), REG_DATA, 1, data, 6, HAL_MAX_DELAY) != HAL_OK) {
    printf("Failed to read from MPU6050\n");
    return;
  }

  /* Extract accelerometer data (16-bit 2's complement format, high byte first) */
  x_acc = (int16_t)((data[0] << 8) | data[1]);
  y_acc = (int16_t)((data[2] << 8) | data[3]);
  z_acc = (int16_t)((data[4] << 8) | data[5]);

//  /* Extract gyroscope data (16-bit 2's complement format, high byte first) */
//  x_gyro = (int16_t)((data[8] << 8) | data[9]);
//  y_gyro = (int16_t)((data[10] << 8) | data[11]);
//  z_gyro = (int16_t)((data[12] << 8) | data[13]);

  /* Convert accelerometer raw values to 'g' (acceleration due to gravity) values */
  accx = (double)x_acc / ACC_FS_SENSITIVITY_3;
  accy = (double)y_acc / ACC_FS_SENSITIVITY_3;
  accz = (double)z_acc / ACC_FS_SENSITIVITY_3;

//  /* Convert gyroscope raw values to degrees per second ('Â°/s') */
//  gyrox = (double)x_gyro / GYR_FS_SENSITIVITY_3;
//  gyroy = (double)y_gyro / GYR_FS_SENSITIVITY_3;
//  gyroz = (double)z_gyro / GYR_FS_SENSITIVITY_3;

  accx_filt = low_pass_filter(accx, accx_filt, alpha);
  accy_filt = low_pass_filter(accy, accy_filt, alpha);

  *accx_thresh = apply_threshold(accx_filt, 0.09, 1.0);
  *accy_thresh = apply_threshold(accy_filt, 0.09, 1.0);

  double velocity_x = previous_velocity_x + accx_filt * sampling_interval;
  total_distance_x += (previous_velocity_x + velocity_x) / 2.0 * sampling_interval;

  /* Calculate velocity and distance for y-axis */
  double velocity_y = previous_velocity_y + accy_filt * sampling_interval;
  total_distance_y += (previous_velocity_y + velocity_y) / 2.0 * sampling_interval;

  /* Check if the movement has stopped */
  if (fabs(accx_filt) < 0.09 && fabs(velocity_x) < 0.09) {
    printf("Movement stopped. Total distance moved in X: %.2f meters\n", total_distance_x);
    total_distance_x = 0.0;
    previous_velocity_x = 0.0;
  } else {
    previous_velocity_x = velocity_x;
  }

  if (fabs(accy_filt) < 0.09 && fabs(velocity_y) < 0.09) {
    printf("Movement stopped. Total distance moved in Y: %.2f meters\n", total_distance_y);
    total_distance_y = 0.0;
    previous_velocity_y = 0.0;
  } else {
    previous_velocity_y = velocity_y;
  }
  /* Print out the accelerometer and gyroscope values along with velocity */
  //printf("Acc(g)=> X:%.2f Y:%.2f Z:%.2f   Gyro(dps)=> X:%.2f Y:%.2f Z:%.2f\n", accx, accy, accz, gyrox, gyroy, gyroz);
 // printf("%.2f  %.2f  %.2f\n", accx, accy, accz);
//  printf("%.2f   %.2f\n", accx_thresh, accy_thresh);
  printf("Velocity=> X:%.2f Y:%.2f\n", velocity_x, velocity_y);
  printf("Distance=> X:%.2f Y:%.2f\n", total_distance_x, total_distance_y);
  //HAL_Delay(100);

}

