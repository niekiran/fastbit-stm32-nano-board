/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "usbd_hid.h"
#include "mpu6050.h"
#include <stdio.h>
#include <math.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef struct {
  uint8_t button;
  int8_t mouse_x;
  int8_t mouse_y;
  int8_t wheel;
} mouseHID;
mouseHID mouse_hid = {0, 0, 0, 0};

typedef enum {
  NOT_PRESSED,
  BOUNCE,
  PRESSED
} button_state_t;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define REPORT_DELAY_MS     2
#define DEBOUNCE_DELAY_MS   50
#define THRESHOLD           1
//#define CLICK_CASE
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

/* USER CODE BEGIN PV */
extern USBD_HandleTypeDef hUsbDeviceFS;
MPU6050_t mpu6050_data;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void move_cursor(double gyroz, double gyroy, mouseHID *mouse_hid);
void handle_mouse_click(mouseHID *mouse_hid);
static uint8_t process_button_pad_value(uint8_t pin_state);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char data[120];
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
  double gyroz = 0.0;
  double gyroy = 0.0;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    MPU6050_Read_All(&mpu6050_data);

    gyroz = mpu6050_data.Gz;
    gyroy = mpu6050_data.Gy;

    filter_gyro_data(&gyroz, &gyroy);

    #ifdef CLICK_CASE

//      GPIO_PinState l_pin_state = HAL_GPIO_ReadPin(LEFT_BUTTON_GPIO_Port, LEFT_BUTTON_Pin);
//      GPIO_PinState r_pin_state = HAL_GPIO_ReadPin(RIGHT_BUTTON_GPIO_Port, RIGHT_BUTTON_Pin);
    GPIO_PinState l_pin_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
    GPIO_PinState r_pin_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
      if (l_pin_state == GPIO_PIN_SET)
      {
  //     HAL_Delay(DEBOUNCE_DELAY_MS); // Debounce delay
  //      if (l_pin_state == GPIO_PIN_SET) {
          mouse_hid.button |= 1;  // Set the left button pressed state
  //     }
      } else {
        mouse_hid.button &= ~1; // Clear the left button pressed state
      }

      if (r_pin_state == GPIO_PIN_SET) {
  //        HAL_Delay(DEBOUNCE_DELAY_MS); // Debounce delay
  //      if (r_pin_state == GPIO_PIN_SET) {
          mouse_hid.button |= 2;  // Set the right button pressed state
  //      }
      } else {
        mouse_hid.button &= ~2;
      }

    #endif


    printf("%d   %d\n", mouse_hid.mouse_x, mouse_hid.mouse_y);
    move_cursor(gyroz, gyroy, &mouse_hid);
    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mouse_hid, sizeof(mouse_hid));

    HAL_Delay(REPORT_DELAY_MS);

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pins : LEFT_BUTTON_Pin RIGHT_BUTTON_Pin */
  GPIO_InitStruct.Pin = LEFT_BUTTON_Pin|RIGHT_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
/**
  * @brief  Update mouse movement based on gyroscope.
  * @param  gyroz: Gyroscope value for Z-axis.
  * @param  gyroy: Gyroscope value for Y-axis.
  * @param  mouse_hid: Pointer to the mouse HID structure.
  * @retval None
  */
void move_cursor(double gyroz, double gyroy, mouseHID *mouse_hid)
{
  int scaling_factor = 15;
  if ( (gyroz > THRESHOLD) || (gyroz < -THRESHOLD) )  {
    mouse_hid->mouse_x = -(gyroz/scaling_factor);
  } else {
    mouse_hid->mouse_x = 0;
  }

  if ( (gyroy > THRESHOLD) || (gyroy < -THRESHOLD) ) {
    mouse_hid->mouse_y = -(gyroy/scaling_factor);
  } else {
    mouse_hid->mouse_y = 0;
  }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
  static button_state_t left_button_state = NOT_PRESSED;
  uint32_t curr_time = HAL_GetTick();
  GPIO_PinState l_pin_state = HAL_GPIO_ReadPin(LEFT_BUTTON_GPIO_Port, LEFT_BUTTON_Pin);
  GPIO_PinState r_pin_state = HAL_GPIO_ReadPin(RIGHT_BUTTON_GPIO_Port, RIGHT_BUTTON_Pin);

  switch (left_button_state) {
    case NOT_PRESSED:
      if (GPIO_Pin == GPIO_PIN_1) {
        left_button_state = BOUNCE;
        curr_time = HAL_GetTick();
      } else {
        mouse_hid.button &= ~1;
      }
      break;

    case BOUNCE:
      if ((HAL_GetTick() - curr_time) >= 50) {
        if (GPIO_Pin == GPIO_PIN_1) {
          left_button_state = PRESSED;
          mouse_hid.button |= 1;
        } else {
          left_button_state = NOT_PRESSED;
        }
      }
      break;

    case PRESSED:
      if (GPIO_Pin == GPIO_PIN_1) {
        left_button_state = BOUNCE;
        curr_time = HAL_GetTick();
      }
      break;
  }
    //USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mouse_hid, sizeof(mouse_hid));
  }

    // Add similar debounce logic for the right button if needed

    // Send the updated mouse HID report


//      else if (GPIO_Pin == GPIO_PIN_3) {
//          GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
//
//          switch (right_button_state) {
//              case NOT_PRESSED:
//                  if (pinState == GPIO_PIN_SET) {
//                      right_button_state = BOUNCE;
//                      right_button_time = current_time;
//                  }
//                  break;
//
//              case BOUNCE:
//                  if ((current_time - right_button_time) >= 50) {
//                      if (pinState == GPIO_PIN_SET) {
//                          right_button_state = PRESSED;
//                          mouse_hid.button |= 2;
//                      } else {
//                          right_button_state = NOT_PRESSED;
//                      }
//                  }
//                  break;
//
//              case PRESSED:
//                  if (pinState == GPIO_PIN_RESET) {
//                      right_button_state = BOUNCE;
//                      right_button_time = current_time;
//                  }
//                  break;
//          }
//      }
//}



//static uint8_t process_button_pad_value(uint8_t btn_pad_value)
//{
//  static GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
//  //static button_state_t btn_sm_state = NOT_PRESSED;
//  static uint32_t curr_time = HAL_GetTick();
//
//  switch(btn_sm_state){
//    case NOT_PRESSED:{
//      if(btn_pad_value){
//        btn_sm_state = BOUNCE;
//        curr_time = millis();
//      }
//      break;
//    }
//    case BOUNCE:{
//      if(HAL_GetTick() - curr_time >= 50 ){
//        //50ms has passed
//        if(btn_pad_value){
//          btn_sm_state = PRESSED;
//          return btn_pad_value;
//        }
//        else
//          btn_sm_state = NOT_PRESSED;
//      }
//      break;
//    }
//    case PRESSED:{
//      if(!btn_pad_value){
//        btn_sm_state = BOUNCE;
//        curr_time = HAL_GetTick();
//      }
//      break;
//    }
//  }
//
//  return 0;
//}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
