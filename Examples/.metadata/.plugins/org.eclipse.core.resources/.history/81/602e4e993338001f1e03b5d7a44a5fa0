/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include "CST816S.h"
#include "GC9A01A.h"
#include "moon.h"
#include "font.h"
#include "testimg.h"
#include "fatfs_sd.h"
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
char buff[64];
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define VIOLET      0x801F  // RGB: 148, 0, 211
#define INDIGO      0x480F  // RGB: 75, 0, 130
#define BLUE        0x001F  // RGB: 0, 0, 255
#define GREEN       0x07E0  // RGB: 0, 255, 0
#define YELLOW      0xFFE0  // RGB: 255, 255, 0
#define ORANGE      0xFC00  // RGB: 255, 165, 0
#define RED         0xF800  // RGB: 255, 0, 0
#define WHITE       0xFFFF  // RGB: 255, 255, 255
#define BLACK       0x0000  // RGB: 0, 0, 0
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
//#define TEST_LCD
#ifdef TP_TEST
static void nano_tp_test(void) ;
#endif
//static void nano_lcd_test(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
FATFS fs;  // file system
FIL file; // File
FILINFO fno;
FRESULT fresult;  // result
UINT br, bw;  // File read/write count

/**** capacity related *****/
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;
char buffer[100];
uint16_t farbe;

#define SPIbuffSize 264
#define BUFFER_SIZE 1032
#define BITMAP_HEADER_SIZE sizeof(BmpHeader)
#define MIN(a, b) (((a)<(b))?(a): (b))


int displayImage(const char* fname) {
//    UART_Printf("Openning %s...\r\n", fname);
    FIL file;
    FRESULT res = f_open(&file, fname, FA_READ);
    if(res != FR_OK) {
    	//	ST7735_DrawString(0, 10, "f_open() failed, res = %d\r\n", Font_7x10, ST7735_RED, ST7735_BLACK);
        return -1;
    }

    //  ST7735_DrawString(0, 20, "File opened, reading...\r\n", Font_7x10, ST7735_RED, ST7735_BLACK);

    unsigned int bytesRead;
    uint8_t header[34];
    res = f_read(&file, header, sizeof(header), &bytesRead);
    if(res != FR_OK) {
    	// 	ST7735_DrawString(0, 30, "f_read() failed, res = %d\r\n", Font_7x10, ST7735_RED, ST7735_BLACK);
        f_close(&file);
        return -2;
    }

    if((header[0] != 0x42) || (header[1] != 0x4D)) {
    	// 	ST7735_DrawString(0, 40, "Wrong BMP signature: 0x%02X 0x%02X\r\n", Font_7x10, ST7735_RED, ST7735_BLACK);
        f_close(&file);
        return -3;
    }

    uint32_t imageOffset = header[10] | (header[11] << 8) | (header[12] << 16) | (header[13] << 24);
    uint32_t imageWidth = header[18] | (header[19] << 8) | (header[20] << 16) | (header[21] << 24);
    uint32_t imageHeight = header[22] | (header[23] << 8) | (header[24] << 16) | (header[25] << 24);
    uint16_t imagePlanes = header[26] | (header[27] << 8);
    uint16_t imageBitsPerPixel = header[28] | (header[29] << 8);
    uint32_t imageCompression = header[30] | (header[31] << 8) | (header[32] << 16) | (header[33] << 24);

    snprintf(buff, sizeof(buff), "Pixels offset: %lu\r\n ", imageOffset);
    //   ST7735_DrawString(0, 50, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
    snprintf(buff, sizeof(buff), "WxH: %lux%lu\r\n ", imageWidth, imageHeight);
    //   ST7735_DrawString(0, 60, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
    snprintf(buff, sizeof(buff), "Planes: %d\r\n ", imagePlanes);
    //    ST7735_DrawString(0, 70, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
    snprintf(buff, sizeof(buff), "Bits per pixel: %d\r\n ", imageBitsPerPixel);
    //  ST7735_DrawString(0, 80, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
    snprintf(buff, sizeof(buff), "Compression: %d\r\n ", imageCompression);
    //    ST7735_DrawString(0, 90, buff, Font_7x10, ST7735_RED, ST7735_BLACK);

    if((imageWidth != ST7735_WIDTH) || (imageHeight != ST7735_HEIGHT)) {
//        UART_Printf("Wrong BMP size, %dx%d expected\r\n", ST7735_WIDTH, ST7735_HEIGHT);
    	//	ST7735_DrawString(0, 100, "Wrong BMP size, %dx%d expected\r\n", Font_7x10, ST7735_RED, ST7735_BLACK);
        f_close(&file);
        return -4;
    }

    if((imagePlanes != 1) || (imageBitsPerPixel != 24) || (imageCompression != 0)) {
    	//	ST7735_DrawString(0, 110, "Unsupported image format\r\n", Font_7x10, ST7735_RED, ST7735_BLACK);
        f_close(&file);
        return -5;
    }

    res = f_lseek(&file, imageOffset);
    if(res != FR_OK) {

        snprintf(buff, sizeof(buff), "f_lseek() failed, res = %d\r\n ", res);
        //   ST7735_DrawString(0, 120, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
        f_close(&file);
        return -6;
    }

    // row size is aligned to 4 bytes
    uint8_t imageRow[(ST7735_WIDTH * 3 + 3) & ~3];
    for(uint32_t y = 0; y < imageHeight; y++) {
        uint32_t rowIdx = 0;
        res = f_read(&file, imageRow, sizeof(imageRow), &bytesRead);
        if(res != FR_OK) {
            snprintf(buff, sizeof(buff), "f_read() failed, res = %d\r\n", res);
            //        ST7735_DrawString(0, 130, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
            f_close(&file);
            return -7;
        }

        for(uint32_t x = 0; x < imageWidth; x++) {
            uint8_t b = imageRow[rowIdx++];
            uint8_t g = imageRow[rowIdx++];
            uint8_t r = imageRow[rowIdx++];
            uint16_t color565 = ST7735_COLOR565(r, g, b);
            ST7735_DrawPixel(x, imageHeight - y - 1, color565);
        }
    }

    res = f_close(&file);
    if(res != FR_OK) {
//        UART_Printf("f_close() failed, res = %d\r\n", res);
        snprintf(buff, sizeof(buff), "f_close() failed, res = %d\r\n", res);
        //     ST7735_DrawString(0, 140, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
        return -8;
    }

    return 0;
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_FATFS_Init();
  /* USER CODE BEGIN 2 */
  //nano_tp_test();
  //nano_lcd_test();
  GC9A01A_Init();
  //gc9a01a_fill_screen(GC9A01A_COLOR_WHITE);
 // gc9a01a_fill_screen(WHITE);
  uint16_t color[24]={VIOLET,INDIGO,BLUE,GREEN,YELLOW,ORANGE,BLACK, GC9A01A_COLOR_NAVY, GC9A01A_COLOR_DARKGREEN\
, GC9A01A_COLOR_DARKCYAN, GC9A01A_COLOR_MAROON, GC9A01A_COLOR_PURPLE, GC9A01A_COLOR_LIGHTGREY, GC9A01A_COLOR_DARKGREY\
,GC9A01A_COLOR_BLUE, GC9A01A_COLOR_GREEN, GC9A01A_COLOR_CYAN, GC9A01A_COLOR_RED, GC9A01A_COLOR_MAGENTA, GC9A01A_COLOR_YELLOW\
, GC9A01A_COLOR_WHITE\
, GC9A01A_COLOR_ORANGE\
, GC9A01A_COLOR_GREENYELLOW\
};


  FRESULT res = f_mount(&fs, "", 0);
    if(res != FR_OK) {
    //      UART_Printf("f_mount() failed, res = %d\r\n", res);
        snprintf(buff, sizeof(buff), "f_mount() failed, res = %d\r\n", res);
        //      ST7735_DrawString(0, 150, buff, Font_7x10, ST7735_RED, ST7735_BLACK);
        return -2;
    }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  displayImage("1.bmp");
	  HAL_Delay(1000);
	  displayImage("2.bmp");
	  HAL_Delay(1000);
	  displayImage("3.bmp");
	  HAL_Delay(1000);
	  displayImage("4.bmp");
	  HAL_Delay(1000);
	  displayImage("1.bmp");
	  displayImage("2.bmp");
	  displayImage("3.bmp");
	  displayImage("4.bmp");
//    gc9a01a_FillRectangle(0,0,239,34*7,VIOLET);
//    HAL_Delay(1000);
//    gc9a01a_FillRectangle(0,0,239,34*6,INDIGO);
//    HAL_Delay(1000);
//    gc9a01a_FillRectangle(0,0,239,34*5,BLUE);
//    HAL_Delay(1000);
//    gc9a01a_FillRectangle(0,0,239,34*4,GREEN);
//    HAL_Delay(1000);
//    gc9a01a_FillRectangle(0,0,239,34*3,YELLOW);
//    HAL_Delay(1000);
//    gc9a01a_FillRectangle(0,0,239,34*2,ORANGE);
//    HAL_Delay(1000);
//    gc9a01a_FillRectangle(0,0,239,34*1,RED);
//    HAL_Delay(1000);
//
//
//    for(int j=0;j<6;j++){
//    for(int i=0;i<6;i++){
//
//    	gc9a01a_FillRectangle(i*40,j*40,40,40,color[i]);
//    	HAL_Delay(100);
//    }
//    }
    gc9a01a_draw_image(0, 0, 240, 240, moon);
    //HAL_Delay(10000);
    gc9a01a_WriteString(34, 111, "FastBit Embedded", Font_11x18, RED, BLACK);
    //gc9a01a_WriteString_trans(34, 111, "FastBit Embedded", Font_11x18, RED);
    HAL_Delay(10000);
//
//    gc9a01a_fill_screen(WHITE);
//    HAL_Delay(1000);
//    gc9a01a_fill_screen(BLACK);
//    HAL_Delay(1000);
//    gc9a01a_fill_screen(RED);
//    HAL_Delay(1000);
//    gc9a01a_fill_screen(ORANGE);
//    HAL_Delay(1000);
//    gc9a01a_fill_screen(YELLOW);
//    HAL_Delay(1000);
//    gc9a01a_fill_screen(GREEN);
//    HAL_Delay(1000);
//    gc9a01a_fill_screen(BLUE);
//    HAL_Delay(1000);
//    gc9a01a_fill_screen(INDIGO);
//    HAL_Delay(1000);
//    gc9a01a_fill_screen(VIOLET);
//    HAL_Delay(1000);

    //VIBGYOR(0, 240, 34);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_TE_Pin|LCD_CSX_Pin|BL_A_Pin|BD1_Pin
                          |BD0_Pin|WRD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RDX_Pin|DCX_Pin|BD7_Pin|BD6_Pin
                          |BD5_Pin|BD4_Pin|BD3_Pin|BD2_Pin
                          |TP_RST_Pin|LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_TE_Pin LCD_CSX_Pin BL_A_Pin BD1_Pin
                           BD0_Pin WRD_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin|LCD_CSX_Pin|BL_A_Pin|BD1_Pin
                          |BD0_Pin|WRD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_RDX_Pin DCX_Pin BD7_Pin BD6_Pin
                           BD5_Pin BD4_Pin BD3_Pin BD2_Pin
                           TP_RST_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RDX_Pin|DCX_Pin|BD7_Pin|BD6_Pin
                          |BD5_Pin|BD4_Pin|BD3_Pin|BD2_Pin
                          |TP_RST_Pin|LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : TP_IN_Pin */
  GPIO_InitStruct.Pin = TP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TP_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
#ifdef TEST_LCD

static void nano_lcd_test(void) {
  HAL_GPIO_WritePin(BL_A_GPIO_Port, BL_A_Pin, GPIO_PIN_SET);
    uint32_t x_start = 0,x_width = 0,y_start = 0,y_height = 0;

    gc9a01a_hw_reset();
    gc9a01a_config3();
    lcd_area_t area;
    area.x1 = 0;
    area.x2 = 240;
    area.y1 = 0;
    area.y2 = 240;
    gc9a01a_set_display_area(&area);
    gc9a01a_set_orientation(BSP_LCD_ORIENTATION);

    hlcd->draw_buffer1 = bsp_db;
    hlcd->draw_buffer2 = bsp_wb;
    hlcd->buff_to_draw = NULL;
    hlcd->buff_to_flush = NULL;
    hlcd->db_size = DB_SIZE;

#if(BSP_LCD_ORIENTATION == LANDSCAPE)
    x_start = 0;
    y_start = 0;
    x_width = 320;
    y_height = 34;
#elif(BSP_LCD_ORIENTATION == PORTRAIT)
    x_start = 0;
    y_start = 0;
    x_width = 240;
    y_height = 34;
#endif
	while(1) {
		bsp_lcd_set_background_color(hlcd, WHITE);
		HAL_Delay(5000);
	}
//    gc9a01a_fill_rectangle(hlcd, VIOLET, x_start, x_width, y_height*0, y_height);
//    gc9a01a_fill_rectangle(hlcd, INDIGO, x_start, x_width, y_height*1, y_height);
//    gc9a01a_fill_rectangle(hlcd, BLUE,   x_start, x_width, y_height*2, y_height);
//    gc9a01a_fill_rectangle(hlcd, GREEN,  x_start, x_width, y_height*3, y_height);
//    gc9a01a_fill_rectangle(hlcd, YELLOW, x_start, x_width, y_height*4, y_height);
//    gc9a01a_fill_rectangle(hlcd, ORANGE, x_start, x_width, y_height*5, y_height);
//    gc9a01a_fill_rectangle(hlcd, RED,    x_start, x_width, y_height*6, y_height);



    //HAL_Delay(2000);

    /*while(1){
    bsp_lcd_set_background_color(hlcd, VIOLET);
    HAL_Delay(2000);
    bsp_lcd_set_background_color(hlcd, INDIGO);
    HAL_Delay(2000);
    bsp_lcd_set_background_color(hlcd, BLUE);
    HAL_Delay(2000);
    bsp_lcd_set_background_color(hlcd, GREEN);
    HAL_Delay(2000);
    bsp_lcd_set_background_color(hlcd, YELLOW);
    HAL_Delay(2000);
    bsp_lcd_set_background_color(hlcd, ORANGE);
    HAL_Delay(2000);
    bsp_lcd_set_background_color(hlcd, RED);
    HAL_Delay(2000);
    bsp_lcd_set_background_color(hlcd, WHITE);
    HAL_Delay(2000);
    bsp_lcd_set_background_color(hlcd, BLACK);
    HAL_Delay(2000);
    }*/

}

#endif
#ifdef TP_TEST
static void nano_tp_test(void) {

    CST816S_init();

    struct touch_data data;
    while(1) {
        if(CST816S_data_available()) {
            memcpy(&data, CST816S_get_data(), sizeof(struct touch_data));
            UNUSED(data);
            //nano_uart_print("Touch detected");
            HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
        } else {
          HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
        }
    }

}
gc9a01a_fill_rectangle(0, 0, 240, 34,  VIOLET);
      HAL_Delay(1000);
      gc9a01a_fill_rectangle(0, 0, 240, 34*2, INDIGO);
      HAL_Delay(1000);
      gc9a01a_fill_rectangle(0, 0, 240, 34*3, BLUE);
      HAL_Delay(1000);
      gc9a01a_fill_rectangle(0, 0, 240, 34*4,  GREEN);
      HAL_Delay(1000);
      gc9a01a_fill_rectangle(0, 0, 240, 34*5,  YELLOW);
      HAL_Delay(1000);
      gc9a01a_fill_rectangle(0, 0, 240, 34*6,  ORANGE);
      HAL_Delay(1000);
      gc9a01a_fill_rectangle(0, 0, 240, 34*7,  BLACK);
      HAL_Delay(1000);
      gc9a01a_fill_rectangle(0, 0, 240, 34*8,  WHITE);
      HAL_Delay(1000);
#endif

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
