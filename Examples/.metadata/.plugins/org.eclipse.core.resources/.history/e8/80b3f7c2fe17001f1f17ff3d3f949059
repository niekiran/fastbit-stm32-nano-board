/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "usbd_hid.h"
#include "mpu6050.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef struct {
  uint8_t button;
  int8_t mouse_x;
  int8_t mouse_y;
  int8_t wheel;
}mouseHID;
mouseHID mouse_hid = {0, 0, 0, 0};
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define REPORT_DELAY_MS     50
#define THRESHOLD           0.1
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

/* USER CODE BEGIN PV */
extern USBD_HandleTypeDef hUsbDeviceFS;

double vel_x, vel_y;
double dx, dy;
double accx_filt, accy_filt, accx_filt1, accy_filt2;
int8_t  hid_buffer[4];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

//void MPU6050_Calibrate (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//static void mouse_ctor(mouseHID *mousehid, uint8_t push_button, int8_t x_axis, int8_t y_axis) {
//	mouseHID -> push_button = button;
//	mouseHID -> x_axis  = mouse_x;
//	mouseHID -> y_axis  = mouse_y;
//}

uint16_t min_x = 128;
uint16_t max_x = -128;
uint16_t min_y = 128;
uint16_t max_y = -128;

uint16_t new_x;
uint16_t new_y;

//uint8_t button_flag = 0;


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
  mpu6050_init();
  //MPU6050_Calibrate();
//  mouse_ctor(&mousehid, 0, 0, 0);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  mpu6050_read();
//    mouse_hid.mouse_y = accx;
//    mouse_hid.mouse_x = accy;
//
//	  if (accx < min_x) new_x = accx - min_x;
//	  if (accx > max_x) new_x = accx - min_x;
//	  if (accy < min_y) new_y = accy - min_y;
//	  if (accy > max_y) new_y = accy - min_y;
//
//	  if ((new_x > 5) || (new_x < -5)) {
//
//	    mouse_hid.mouse_y = (new_x);
//	  }
//
//	  else mouse_hid.mouse_y = 0;
//
//	  if ((new_x > 5) || (new_x < -5)) {
//	    mouse_hid.mouse_x = (new_y);
//    }
//
//	  else mouse_hid.mouse_x = 0;
////    mouse_hid.mouse_x = 0;
////    mouse_hid.mouse_y = 10;
//
//       USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mouse_hid, sizeof(mouse_hid));





    mpu6050_read();
//    if ( accx_filt1 > THRESHOLD ) mouse_hid.mouse_x = 10;
//    else if (accx_filt1  < -THRESHOLD) mouse_hid.mouse_x = -10;
//    else mouse_hid.mouse_x = 0;
//
//    if ( accy_filt2 > THRESHOLD ) mouse_hid.mouse_y = 10;
//    else if (accy_filt2 < -THRESHOLD) mouse_hid.mouse_y = -10;
//    else mouse_hid.mouse_y = 0;

    if(accx_filt1==0 &&accy_filt2==0){
       mouse_hid.mouse_x = 0;
       mouse_hid.mouse_y = 0;
    }
    else if(accx_filt1>THRESHOLD &&accy_filt2==0){
      mouse_hid.mouse_x = 0;
      mouse_hid.mouse_y = 100*accy_filt2;
    }
    else if(accx_filt1<-THRESHOLD &&accy_filt2==0){
      mouse_hid.mouse_x = 0;
      mouse_hid.mouse_y = -100*accy_filt2;
    }
    else if(accx_filt1 == 0 && accy_filt2>THRESHOLD){
      mouse_hid.mouse_x = 100*accx_filt1;
      mouse_hid.mouse_y = 0;
    }
    else if(accx_filt1 == 0 &&accy_filt2 < -THRESHOLD){
      mouse_hid.mouse_x = -100*accx_filt1;
      mouse_hid.mouse_y =  0;
    }
    else if(accx_filt1 >THRESHOLD &&accy_filt2> THRESHOLD){
      mouse_hid.mouse_x = 100*accx_filt1;
      mouse_hid.mouse_y = 100*accy_filt2;
    }
    else if(accx_filt1 < -THRESHOLD && accy_filt2 > THRESHOLD){
      mouse_hid.mouse_x = -100*accx_filt1;
      mouse_hid.mouse_y =  100*accy_filt2;
    }
    else if(accx_filt1 < -THRESHOLD &&accy_filt2 <-THRESHOLD){
      mouse_hid.mouse_x = -100*accx_filt1;
      mouse_hid.mouse_y = -100*accy_filt2;
    }
    else if(accx_filt1 > THRESHOLD &&accy_filt2<-THRESHOLD){
      mouse_hid.mouse_x = -100*accx_filt1;
      mouse_hid.mouse_y =  100*accy_filt2;
    }

    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mouse_hid, sizeof(mouse_hid));
    HAL_Delay(REPORT_DELAY_MS);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x0000020B;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

//void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
//  if(GPIO_Pin == GPIO_PIN_0) {
//    button_flag = 1;
//  }
//}
//
//void MPU6050_Calibrate (void)
//{
//  for (int i=0; i<50; i++)
//  {
//    mpu6050_read();
//    min_x = MIN(min_x, degreex);
//    max_x = MAX(max_x, degreex);
//    min_y = MIN(min_y, degreey);
//    max_y = MAX(max_y, degreey);
//    HAL_Delay (100);
//  }
//
//  /* Turn On the LED to show the completion of calibration */
//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
//}

//    if(button_flag == 1) {
//      mouse_hid.button = 1; //left click
//      USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mouse_hid, sizeof(mouse_hid));
//      HAL_Delay(50);
//      mouse_hid.button = 0; //left click
//      USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&mouse_hid, sizeof(mouse_hid));
//      button_flag = 0;
//    }
//    printf("mouse_x: %d , mouse_y: %d \n", mouse_hid.mouse_x, mouse_hid.mouse_y);

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
