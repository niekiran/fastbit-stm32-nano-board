
013_MPU6050_3D_Model.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac14  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  0800ada8  0800ada8  0000bda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3e0  0800b3e0  0000d278  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3e0  0800b3e0  0000c3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3e8  0800b3e8  0000d278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3e8  0800b3e8  0000c3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b3ec  0800b3ec  0000c3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000278  20000000  0800b3f0  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d278  2**0
                  CONTENTS
 10 .bss          0000033c  20000278  20000278  0000d278  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200005b4  200005b4  0000d278  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d278  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eaeb  00000000  00000000  0000d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002469  00000000  00000000  0001bd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  0001e200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000912  00000000  00000000  0001edc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e84c  00000000  00000000  0001f6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e90  00000000  00000000  0003df1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0f78  00000000  00000000  0004edae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ffd26  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000469c  00000000  00000000  000ffd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00104408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000278 	.word	0x20000278
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad8c 	.word	0x0800ad8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	0800ad8c 	.word	0x0800ad8c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf6:	b0b1      	sub	sp, #196	@ 0xc4
 8000cf8:	af08      	add	r7, sp, #32

  /* USER CODE BEGIN 1 */
  double data_Packet[3] = {0, 0, 0};
 8000cfa:	f04f 0200 	mov.w	r2, #0
 8000cfe:	f04f 0300 	mov.w	r3, #0
 8000d02:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
 8000d06:	f04f 0200 	mov.w	r2, #0
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	f04f 0300 	mov.w	r3, #0
 8000d1a:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  char split_data = '#';
 8000d1e:	2323      	movs	r3, #35	@ 0x23
 8000d20:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
  char data[120];
  unsigned long current_time = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2a:	f001 f82d 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2e:	f000 f863 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d32:	f000 f955 	bl	8000fe0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d36:	f000 f92d 	bl	8000f94 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d3a:	f000 f8bb 	bl	8000eb4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d3e:	f000 f8f9 	bl	8000f34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8000d42:	f000 f991 	bl	8001068 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if(HAL_GetTick() - current_time >= 100) {
 8000d46:	f001 f879 	bl	8001e3c <HAL_GetTick>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b63      	cmp	r3, #99	@ 0x63
 8000d54:	d9f7      	bls.n	8000d46 <main+0x52>
      current_time = HAL_GetTick();
 8000d56:	f001 f871 	bl	8001e3c <HAL_GetTick>
 8000d5a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
      /* Read all data from sensor 1 */
      MPU6050_Read_All(&mpu6050_data);
 8000d5e:	4822      	ldr	r0, [pc, #136]	@ (8000de8 <main+0xf4>)
 8000d60:	f000 fa2e 	bl	80011c0 <MPU6050_Read_All>

      data_Packet[0] = mpu6050_data.Kalman_angle_x;
 8000d64:	4b20      	ldr	r3, [pc, #128]	@ (8000de8 <main+0xf4>)
 8000d66:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8000d6a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
      data_Packet[1] = mpu6050_data.Kalman_angle_y;
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <main+0xf4>)
 8000d70:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8000d74:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
      data_Packet[2] = mpu6050_data.Gyro_angle_z;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <main+0xf4>)
 8000d7a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8000d7e:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

      printf("%.2f  || %.2f  || %.2f\n", data_Packet[0], data_Packet[1], data_Packet[2]);
 8000d82:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000d86:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8000d8a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8000d8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000d92:	e9cd 2300 	strd	r2, r3, [sp]
 8000d96:	4622      	mov	r2, r4
 8000d98:	462b      	mov	r3, r5
 8000d9a:	4814      	ldr	r0, [pc, #80]	@ (8000dec <main+0xf8>)
 8000d9c:	f005 ffd8 	bl	8006d50 <iprintf>
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)data, sprintf(data, "%1.0f%c%1.0f%c%1.0f",
 8000da0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000da4:	f897 609b 	ldrb.w	r6, [r7, #155]	@ 0x9b
 8000da8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8000dac:	f897 109b 	ldrb.w	r1, [r7, #155]	@ 0x9b
 8000db0:	6079      	str	r1, [r7, #4]
 8000db2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8000db6:	f107 0c08 	add.w	ip, r7, #8
 8000dba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	9104      	str	r1, [sp, #16]
 8000dc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000dc6:	9600      	str	r6, [sp, #0]
 8000dc8:	4622      	mov	r2, r4
 8000dca:	462b      	mov	r3, r5
 8000dcc:	4908      	ldr	r1, [pc, #32]	@ (8000df0 <main+0xfc>)
 8000dce:	4660      	mov	r0, ip
 8000dd0:	f006 f82e 	bl	8006e30 <siprintf>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <main+0x100>)
 8000de0:	f003 ff7e 	bl	8004ce0 <HAL_UART_Transmit_DMA>
    if(HAL_GetTick() - current_time >= 100) {
 8000de4:	e7af      	b.n	8000d46 <main+0x52>
 8000de6:	bf00      	nop
 8000de8:	200003f8 	.word	0x200003f8
 8000dec:	0800ada8 	.word	0x0800ada8
 8000df0:	0800adc0 	.word	0x0800adc0
 8000df4:	200002e8 	.word	0x200002e8

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b09e      	sub	sp, #120	@ 0x78
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e02:	2228      	movs	r2, #40	@ 0x28
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f006 f90a 	bl	8007020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	223c      	movs	r2, #60	@ 0x3c
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f006 f8fc 	bl	8007020 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e30:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e36:	2301      	movs	r3, #1
 8000e38:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e46:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e48:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e4c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fae8 	bl	8003428 <HAL_RCC_OscConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e5e:	f000 f8fd 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e62:	230f      	movs	r3, #15
 8000e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e66:	2302      	movs	r3, #2
 8000e68:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e78:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f003 fb10 	bl	80044a4 <HAL_RCC_ClockConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e8a:	f000 f8e7 	bl	800105c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000e8e:	2321      	movs	r3, #33	@ 0x21
 8000e90:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fd21 	bl	80048e4 <HAL_RCCEx_PeriphCLKConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ea8:	f000 f8d8 	bl	800105c <Error_Handler>
  }
}
 8000eac:	bf00      	nop
 8000eae:	3778      	adds	r7, #120	@ 0x78
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000eba:	4a1c      	ldr	r2, [pc, #112]	@ (8000f2c <MX_I2C1_Init+0x78>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f30 <MX_I2C1_Init+0x7c>)
 8000ec2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eca:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eee:	480e      	ldr	r0, [pc, #56]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000ef0:	f001 fc76 	bl	80027e0 <HAL_I2C_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000efa:	f000 f8af 	bl	800105c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000efe:	2100      	movs	r1, #0
 8000f00:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000f02:	f002 f9f9 	bl	80032f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f0c:	f000 f8a6 	bl	800105c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f10:	2100      	movs	r1, #0
 8000f12:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000f14:	f002 fa3b 	bl	800338e <HAL_I2CEx_ConfigDigitalFilter>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f1e:	f000 f89d 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000294 	.word	0x20000294
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	2000090e 	.word	0x2000090e

08000f34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f38:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f3a:	4a15      	ldr	r2, [pc, #84]	@ (8000f90 <MX_USART1_UART_Init+0x5c>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f78:	f003 fe64 	bl	8004c44 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f82:	f000 f86b 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200002e8 	.word	0x200002e8
 8000f90:	40013800 	.word	0x40013800

08000f94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f9a:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <MX_DMA_Init+0x48>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fdc <MX_DMA_Init+0x48>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6153      	str	r3, [r2, #20]
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <MX_DMA_Init+0x48>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	200e      	movs	r0, #14
 8000fb8:	f001 f827 	bl	800200a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000fbc:	200e      	movs	r0, #14
 8000fbe:	f001 f840 	bl	8002042 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	200f      	movs	r0, #15
 8000fc8:	f001 f81f 	bl	800200a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000fcc:	200f      	movs	r0, #15
 8000fce:	f001 f838 	bl	8002042 <HAL_NVIC_EnableIRQ>

}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <MX_GPIO_Init+0x5c>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a14      	ldr	r2, [pc, #80]	@ (800103c <MX_GPIO_Init+0x5c>)
 8000fec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ff0:	6153      	str	r3, [r2, #20]
 8000ff2:	4b12      	ldr	r3, [pc, #72]	@ (800103c <MX_GPIO_Init+0x5c>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <MX_GPIO_Init+0x5c>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a0e      	ldr	r2, [pc, #56]	@ (800103c <MX_GPIO_Init+0x5c>)
 8001004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <MX_GPIO_Init+0x5c>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <MX_GPIO_Init+0x5c>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a08      	ldr	r2, [pc, #32]	@ (800103c <MX_GPIO_Init+0x5c>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <MX_GPIO_Init+0x5c>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000

08001040 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Reset DMA */
  HAL_UART_DMAStop(&huart1);
 8001048:	4803      	ldr	r0, [pc, #12]	@ (8001058 <HAL_UART_TxCpltCallback+0x18>)
 800104a:	f003 fec5 	bl	8004dd8 <HAL_UART_DMAStop>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200002e8 	.word	0x200002e8

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <Error_Handler+0x8>

08001068 <MPU6050_Init>:
/**
  * @brief Initializes the MPU6050 sensor by configuring power management, gyroscope, and accelerometer.
  * @param None
  * @retval None
  */
void MPU6050_Init() {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  PowerManagement_Config();
 800106c:	f000 f808 	bl	8001080 <PowerManagement_Config>
  Data_Rate_Config();
 8001070:	f000 f82e 	bl	80010d0 <Data_Rate_Config>
  Gyro_Config();
 8001074:	f000 f854 	bl	8001120 <Gyro_Config>
  Accelerometer_Config();
 8001078:	f000 f87a 	bl	8001170 <Accelerometer_Config>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <PowerManagement_Config>:
  * @brief Configures the power management settings of the MPU6050 sensor to exit sleep mode.
  * @param None
  * @retval None
  */
void PowerManagement_Config()
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af04      	add	r7, sp, #16
  /* Set the value to be written to the power management register */
  temp_data = 0x00;
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <PowerManagement_Config+0x40>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]

  /* Write the value to the power management register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, PWR_MGMT_1_REG, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	2301      	movs	r3, #1
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <PowerManagement_Config+0x40>)
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	226b      	movs	r2, #107	@ 0x6b
 800109e:	21d0      	movs	r1, #208	@ 0xd0
 80010a0:	4808      	ldr	r0, [pc, #32]	@ (80010c4 <PowerManagement_Config+0x44>)
 80010a2:	f001 fc39 	bl	8002918 <HAL_I2C_Mem_Write>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d103      	bne.n	80010b4 <PowerManagement_Config+0x34>
    /*print in SWV terminal*/
    printf("Exiting from sleep mode...\n");
 80010ac:	4806      	ldr	r0, [pc, #24]	@ (80010c8 <PowerManagement_Config+0x48>)
 80010ae:	f005 feb7 	bl	8006e20 <puts>
  } else {
    printf("Failed to exit from sleep mode...\n");
  }
}
 80010b2:	e002      	b.n	80010ba <PowerManagement_Config+0x3a>
    printf("Failed to exit from sleep mode...\n");
 80010b4:	4805      	ldr	r0, [pc, #20]	@ (80010cc <PowerManagement_Config+0x4c>)
 80010b6:	f005 feb3 	bl	8006e20 <puts>
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000458 	.word	0x20000458
 80010c4:	20000294 	.word	0x20000294
 80010c8:	0800add4 	.word	0x0800add4
 80010cc:	0800adf0 	.word	0x0800adf0

080010d0 <Data_Rate_Config>:
  * @brief Configures the Data rate settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Data_Rate_Config()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af04      	add	r7, sp, #16
  /* Set the value to be written to the accelerometer configuration register */
  temp_data = 0x07;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <Data_Rate_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	701a      	strb	r2, [r3, #0]

  /* Write the value to the accelerometer configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, SMPLRT_DIV_REG, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	9302      	str	r3, [sp, #8]
 80010e2:	2301      	movs	r3, #1
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <Data_Rate_Config+0x40>)
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	2219      	movs	r2, #25
 80010ee:	21d0      	movs	r1, #208	@ 0xd0
 80010f0:	4808      	ldr	r0, [pc, #32]	@ (8001114 <Data_Rate_Config+0x44>)
 80010f2:	f001 fc11 	bl	8002918 <HAL_I2C_Mem_Write>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d103      	bne.n	8001104 <Data_Rate_Config+0x34>
    printf("Configuring data rate of 1KHz...\n");
 80010fc:	4806      	ldr	r0, [pc, #24]	@ (8001118 <Data_Rate_Config+0x48>)
 80010fe:	f005 fe8f 	bl	8006e20 <puts>
  } else {
    printf("Failed to configure data rate of 1KHz...\n");
  }
}
 8001102:	e002      	b.n	800110a <Data_Rate_Config+0x3a>
    printf("Failed to configure data rate of 1KHz...\n");
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <Data_Rate_Config+0x4c>)
 8001106:	f005 fe8b 	bl	8006e20 <puts>
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000458 	.word	0x20000458
 8001114:	20000294 	.word	0x20000294
 8001118:	0800ae14 	.word	0x0800ae14
 800111c:	0800ae38 	.word	0x0800ae38

08001120 <Gyro_Config>:
  * @brief Configures the gyroscope settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Gyro_Config()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af04      	add	r7, sp, #16
  /* Set the value to be written to the gyroscope configuration register */
  temp_data = FS_GYRO_2000;
 8001126:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <Gyro_Config+0x40>)
 8001128:	220a      	movs	r2, #10
 800112a:	701a      	strb	r2, [r3, #0]

  /* Write the value to the gyroscope configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, GYRO_CONFIG_REG, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	9302      	str	r3, [sp, #8]
 8001132:	2301      	movs	r3, #1
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <Gyro_Config+0x40>)
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	221b      	movs	r2, #27
 800113e:	21d0      	movs	r1, #208	@ 0xd0
 8001140:	4808      	ldr	r0, [pc, #32]	@ (8001164 <Gyro_Config+0x44>)
 8001142:	f001 fbe9 	bl	8002918 <HAL_I2C_Mem_Write>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d103      	bne.n	8001154 <Gyro_Config+0x34>
    printf("Configuring gyroscope...\n");
 800114c:	4806      	ldr	r0, [pc, #24]	@ (8001168 <Gyro_Config+0x48>)
 800114e:	f005 fe67 	bl	8006e20 <puts>
  } else {
    printf("Failed to configure gyroscope...\n");
  }
}
 8001152:	e002      	b.n	800115a <Gyro_Config+0x3a>
    printf("Failed to configure gyroscope...\n");
 8001154:	4805      	ldr	r0, [pc, #20]	@ (800116c <Gyro_Config+0x4c>)
 8001156:	f005 fe63 	bl	8006e20 <puts>
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000458 	.word	0x20000458
 8001164:	20000294 	.word	0x20000294
 8001168:	0800ae64 	.word	0x0800ae64
 800116c:	0800ae80 	.word	0x0800ae80

08001170 <Accelerometer_Config>:
  * @brief Configures the accelerometer settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Accelerometer_Config()
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af04      	add	r7, sp, #16
  /* Set the value to be written to the accelerometer configuration register */
  temp_data = FS_ACC_16G;
 8001176:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <Accelerometer_Config+0x40>)
 8001178:	220a      	movs	r2, #10
 800117a:	701a      	strb	r2, [r3, #0]

  /* Write the value to the accelerometer configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, ACCEL_CONFIG_REG, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2301      	movs	r3, #1
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <Accelerometer_Config+0x40>)
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	221c      	movs	r2, #28
 800118e:	21d0      	movs	r1, #208	@ 0xd0
 8001190:	4808      	ldr	r0, [pc, #32]	@ (80011b4 <Accelerometer_Config+0x44>)
 8001192:	f001 fbc1 	bl	8002918 <HAL_I2C_Mem_Write>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d103      	bne.n	80011a4 <Accelerometer_Config+0x34>
    printf("Configuring accelerometer...\n");
 800119c:	4806      	ldr	r0, [pc, #24]	@ (80011b8 <Accelerometer_Config+0x48>)
 800119e:	f005 fe3f 	bl	8006e20 <puts>
  } else {
    printf("Failed to configure accelerometer...\n");
  }
}
 80011a2:	e002      	b.n	80011aa <Accelerometer_Config+0x3a>
    printf("Failed to configure accelerometer...\n");
 80011a4:	4805      	ldr	r0, [pc, #20]	@ (80011bc <Accelerometer_Config+0x4c>)
 80011a6:	f005 fe3b 	bl	8006e20 <puts>
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000458 	.word	0x20000458
 80011b4:	20000294 	.word	0x20000294
 80011b8:	0800aea4 	.word	0x0800aea4
 80011bc:	0800aec4 	.word	0x0800aec4

080011c0 <MPU6050_Read_All>:
/**
  * @brief  Reads all sensor data from the MPU6050
  * @param  DataStruct: Pointer to the MPU6050_t structure to store the sensor data
  * @retval None
  */
void MPU6050_Read_All(MPU6050_t *DataStruct) {
 80011c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011c4:	b094      	sub	sp, #80	@ 0x50
 80011c6:	af04      	add	r7, sp, #16
 80011c8:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[14];
	int16_t temp;

	/* Read 14 BYTES of data starting from ACCEL_XOUT_H register */
	if (HAL_I2C_Mem_Read(&hi2c1, (MPU6050_ADDR << 1), ACCEL_XOUT_H_REG, 1, Rec_Data, 14, HAL_MAX_DELAY)!= HAL_OK) {
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	230e      	movs	r3, #14
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	223b      	movs	r2, #59	@ 0x3b
 80011de:	21d0      	movs	r1, #208	@ 0xd0
 80011e0:	489b      	ldr	r0, [pc, #620]	@ (8001450 <MPU6050_Read_All+0x290>)
 80011e2:	f001 fcad 	bl	8002b40 <HAL_I2C_Mem_Read>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <MPU6050_Read_All+0x34>
    printf("Failed to read from MPU6050\n");
 80011ec:	4899      	ldr	r0, [pc, #612]	@ (8001454 <MPU6050_Read_All+0x294>)
 80011ee:	f005 fe17 	bl	8006e20 <puts>
 80011f2:	e1db      	b.n	80015ac <MPU6050_Read_All+0x3ec>
    return;
  }

	DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80011f4:	7a3b      	ldrb	r3, [r7, #8]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	7a7b      	ldrb	r3, [r7, #9]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b21a      	sxth	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001206:	7abb      	ldrb	r3, [r7, #10]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b21a      	sxth	r2, r3
 800120c:	7afb      	ldrb	r3, [r7, #11]
 800120e:	b21b      	sxth	r3, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	b21a      	sxth	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001218:	7b3b      	ldrb	r3, [r7, #12]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21a      	sxth	r2, r3
 800121e:	7b7b      	ldrb	r3, [r7, #13]
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21a      	sxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	809a      	strh	r2, [r3, #4]

	temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	b21a      	sxth	r2, r3
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	b21b      	sxth	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	86fb      	strh	r3, [r7, #54]	@ 0x36

	DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001238:	7c3b      	ldrb	r3, [r7, #16]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21a      	sxth	r2, r3
 800123e:	7c7b      	ldrb	r3, [r7, #17]
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21a      	sxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	841a      	strh	r2, [r3, #32]
	DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800124a:	7cbb      	ldrb	r3, [r7, #18]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	7cfb      	ldrb	r3, [r7, #19]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21a      	sxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	845a      	strh	r2, [r3, #34]	@ 0x22
	DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800125c:	7d3b      	ldrb	r3, [r7, #20]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	7d7b      	ldrb	r3, [r7, #21]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21a      	sxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	849a      	strh	r2, [r3, #36]	@ 0x24

	DataStruct->Ax = DataStruct->Accel_X_RAW / ACC_FS_SENSITIVITY_0;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f955 	bl	8000524 <__aeabi_i2d>
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b76      	ldr	r3, [pc, #472]	@ (8001458 <MPU6050_Read_All+0x298>)
 8001280:	f7ff fae4 	bl	800084c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / ACC_FS_SENSITIVITY_0;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f945 	bl	8000524 <__aeabi_i2d>
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4b6e      	ldr	r3, [pc, #440]	@ (8001458 <MPU6050_Read_All+0x298>)
 80012a0:	f7ff fad4 	bl	800084c <__aeabi_ddiv>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
	DataStruct->Az = DataStruct->Accel_Z_RAW / ACC_FS_SENSITIVITY_0;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f935 	bl	8000524 <__aeabi_i2d>
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b66      	ldr	r3, [pc, #408]	@ (8001458 <MPU6050_Read_All+0x298>)
 80012c0:	f7ff fac4 	bl	800084c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	e9c1 2306 	strd	r2, r3, [r1, #24]

	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80012ce:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012da:	eddf 6a60 	vldr	s13, [pc, #384]	@ 800145c <MPU6050_Read_All+0x29c>
 80012de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e2:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001460 <MPU6050_Read_All+0x2a0>
 80012e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	DataStruct->Gx = DataStruct->Gyro_X_RAW / GYR_FS_SENSITIVITY_0;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f914 	bl	8000524 <__aeabi_i2d>
 80012fc:	a350      	add	r3, pc, #320	@ (adr r3, 8001440 <MPU6050_Read_All+0x280>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7ff faa3 	bl	800084c <__aeabi_ddiv>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / GYR_FS_SENSITIVITY_0;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f904 	bl	8000524 <__aeabi_i2d>
 800131c:	a348      	add	r3, pc, #288	@ (adr r3, 8001440 <MPU6050_Read_All+0x280>)
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	f7ff fa93 	bl	800084c <__aeabi_ddiv>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / GYR_FS_SENSITIVITY_0;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f8f4 	bl	8000524 <__aeabi_i2d>
 800133c:	a340      	add	r3, pc, #256	@ (adr r3, 8001440 <MPU6050_Read_All+0x280>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7ff fa83 	bl	800084c <__aeabi_ddiv>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	//printf("%d   %d   %d\n", DataStruct->Accel_X_RAW, DataStruct->Accel_Y_RAW, DataStruct->Accel_Z_RAW);
	// Kalman angle solve
	double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001350:	f000 fd74 	bl	8001e3c <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	4b43      	ldr	r3, [pc, #268]	@ (8001464 <MPU6050_Read_All+0x2a4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f8d1 	bl	8000504 <__aeabi_ui2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b40      	ldr	r3, [pc, #256]	@ (8001468 <MPU6050_Read_All+0x2a8>)
 8001368:	f7ff fa70 	bl	800084c <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	timer = HAL_GetTick();
 8001374:	f000 fd62 	bl	8001e3c <HAL_GetTick>
 8001378:	4603      	mov	r3, r0
 800137a:	4a3a      	ldr	r2, [pc, #232]	@ (8001464 <MPU6050_Read_All+0x2a4>)
 800137c:	6013      	str	r3, [r2, #0]

	DataStruct->Gyro_angle_z += (DataStruct->Gz)*dt;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	@ 0x48
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800138a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800138e:	f7ff f933 	bl	80005f8 <__aeabi_dmul>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4650      	mov	r0, sl
 8001398:	4659      	mov	r1, fp
 800139a:	f7fe ff77 	bl	800028c <__adddf3>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	double roll;
	double roll_sqrt = sqrt(
					DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ae:	461a      	mov	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b6:	fb03 f202 	mul.w	r2, r3, r2
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013c0:	4619      	mov	r1, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013c8:	fb01 f303 	mul.w	r3, r1, r3
 80013cc:	4413      	add	r3, r2
	double roll_sqrt = sqrt(
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8a8 	bl	8000524 <__aeabi_i2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	ec43 2b10 	vmov	d0, r2, r3
 80013dc:	f009 f968 	bl	800a6b0 <sqrt>
 80013e0:	ed87 0b08 	vstr	d0, [r7, #32]
	if (roll_sqrt != 0.0) {
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013f0:	f7ff fb6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d138      	bne.n	800146c <MPU6050_Read_All+0x2ac>
			roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f88f 	bl	8000524 <__aeabi_i2d>
 8001406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800140a:	f7ff fa1f 	bl	800084c <__aeabi_ddiv>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	ec43 2b17 	vmov	d7, r2, r3
 8001416:	eeb0 0a47 	vmov.f32	s0, s14
 800141a:	eef0 0a67 	vmov.f32	s1, s15
 800141e:	f009 f973 	bl	800a708 <atan>
 8001422:	ec51 0b10 	vmov	r0, r1, d0
 8001426:	a308      	add	r3, pc, #32	@ (adr r3, 8001448 <MPU6050_Read_All+0x288>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff f8e4 	bl	80005f8 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001438:	e01e      	b.n	8001478 <MPU6050_Read_All+0x2b8>
 800143a:	bf00      	nop
 800143c:	f3af 8000 	nop.w
 8001440:	00000000 	.word	0x00000000
 8001444:	40606000 	.word	0x40606000
 8001448:	1a63c1f8 	.word	0x1a63c1f8
 800144c:	404ca5dc 	.word	0x404ca5dc
 8001450:	20000294 	.word	0x20000294
 8001454:	0800aeec 	.word	0x0800aeec
 8001458:	40d00000 	.word	0x40d00000
 800145c:	43aa0000 	.word	0x43aa0000
 8001460:	42121eb8 	.word	0x42121eb8
 8001464:	2000045c 	.word	0x2000045c
 8001468:	408f4000 	.word	0x408f4000
	} else {
			roll = 0.0;
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	}
	double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147e:	425b      	negs	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f84f 	bl	8000524 <__aeabi_i2d>
 8001486:	4682      	mov	sl, r0
 8001488:	468b      	mov	fp, r1
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f847 	bl	8000524 <__aeabi_i2d>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	ec43 2b11 	vmov	d1, r2, r3
 800149e:	ec4b ab10 	vmov	d0, sl, fp
 80014a2:	f009 f903 	bl	800a6ac <atan2>
 80014a6:	ec51 0b10 	vmov	r0, r1, d0
 80014aa:	a347      	add	r3, pc, #284	@ (adr r3, 80015c8 <MPU6050_Read_All+0x408>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f8a2 	bl	80005f8 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if ((pitch < -90 && DataStruct->Kalman_angle_y > 90) || (pitch > 90 && DataStruct->Kalman_angle_y < -90)) {
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	4b3d      	ldr	r3, [pc, #244]	@ (80015b8 <MPU6050_Read_All+0x3f8>)
 80014c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014c6:	f7ff fb09 	bl	8000adc <__aeabi_dcmplt>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00a      	beq.n	80014e6 <MPU6050_Read_All+0x326>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	4b38      	ldr	r3, [pc, #224]	@ (80015bc <MPU6050_Read_All+0x3fc>)
 80014dc:	f7ff fb1c 	bl	8000b18 <__aeabi_dcmpgt>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d114      	bne.n	8001510 <MPU6050_Read_All+0x350>
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b34      	ldr	r3, [pc, #208]	@ (80015bc <MPU6050_Read_All+0x3fc>)
 80014ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014f0:	f7ff fb12 	bl	8000b18 <__aeabi_dcmpgt>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d015      	beq.n	8001526 <MPU6050_Read_All+0x366>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	4b2c      	ldr	r3, [pc, #176]	@ (80015b8 <MPU6050_Read_All+0x3f8>)
 8001506:	f7ff fae9 	bl	8000adc <__aeabi_dcmplt>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00a      	beq.n	8001526 <MPU6050_Read_All+0x366>
			KalmanY.angle = pitch;
 8001510:	492b      	ldr	r1, [pc, #172]	@ (80015c0 <MPU6050_Read_All+0x400>)
 8001512:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001516:	e9c1 2306 	strd	r2, r3, [r1, #24]
			DataStruct->Kalman_angle_y = pitch;
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001520:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8001524:	e014      	b.n	8001550 <MPU6050_Read_All+0x390>
	} else {
			DataStruct->Kalman_angle_y = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 800152c:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001530:	eeb0 1a47 	vmov.f32	s2, s14
 8001534:	eef0 1a67 	vmov.f32	s3, s15
 8001538:	ed97 0b06 	vldr	d0, [r7, #24]
 800153c:	4820      	ldr	r0, [pc, #128]	@ (80015c0 <MPU6050_Read_All+0x400>)
 800153e:	f000 f847 	bl	80015d0 <Kalman_getAngle>
 8001542:	eeb0 7a40 	vmov.f32	s14, s0
 8001546:	eef0 7a60 	vmov.f32	s15, s1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
	}
	if (fabs(DataStruct->Kalman_angle_y) > 90)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001556:	4690      	mov	r8, r2
 8001558:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <MPU6050_Read_All+0x3fc>)
 8001562:	4640      	mov	r0, r8
 8001564:	4649      	mov	r1, r9
 8001566:	f7ff fad7 	bl	8000b18 <__aeabi_dcmpgt>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <MPU6050_Read_All+0x3c2>
			DataStruct->Gx = -DataStruct->Gx;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001576:	4614      	mov	r4, r2
 8001578:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
	DataStruct->Kalman_angle_x = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8001588:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800158c:	eeb0 1a47 	vmov.f32	s2, s14
 8001590:	eef0 1a67 	vmov.f32	s3, s15
 8001594:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001598:	480a      	ldr	r0, [pc, #40]	@ (80015c4 <MPU6050_Read_All+0x404>)
 800159a:	f000 f819 	bl	80015d0 <Kalman_getAngle>
 800159e:	eeb0 7a40 	vmov.f32	s14, s0
 80015a2:	eef0 7a60 	vmov.f32	s15, s1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
}
 80015ac:	3740      	adds	r7, #64	@ 0x40
 80015ae:	46bd      	mov	sp, r7
 80015b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015b4:	f3af 8000 	nop.w
 80015b8:	c0568000 	.word	0xc0568000
 80015bc:	40568000 	.word	0x40568000
 80015c0:	20000048 	.word	0x20000048
 80015c4:	20000000 	.word	0x20000000
 80015c8:	1a63c1f8 	.word	0x1a63c1f8
 80015cc:	404ca5dc 	.word	0x404ca5dc

080015d0 <Kalman_getAngle>:
  * @param  newAngle: The new measured angle
  * @param  newRate: The new measured rate
  * @param  dt: The time interval since the last update
  * @retval The estimated angle
  */
double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b096      	sub	sp, #88	@ 0x58
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	61f8      	str	r0, [r7, #28]
 80015d8:	ed87 0b04 	vstr	d0, [r7, #16]
 80015dc:	ed87 1b02 	vstr	d1, [r7, #8]
 80015e0:	ed87 2b00 	vstr	d2, [r7]
	double rate = newRate - Kalman->bias;
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80015ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015ee:	f7fe fe4b 	bl	8000288 <__aeabi_dsub>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	Kalman->angle += dt * rate;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001600:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001604:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001608:	f7fe fff6 	bl	80005f8 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4620      	mov	r0, r4
 8001612:	4629      	mov	r1, r5
 8001614:	f7fe fe3a 	bl	800028c <__adddf3>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	69f9      	ldr	r1, [r7, #28]
 800161e:	e9c1 2306 	strd	r2, r3, [r1, #24]

	Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800162e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001632:	f7fe ffe1 	bl	80005f8 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001644:	f7fe fe20 	bl	8000288 <__aeabi_dsub>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001656:	f7fe fe17 	bl	8000288 <__aeabi_dsub>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe fe10 	bl	800028c <__adddf3>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001678:	f7fe ffbe 	bl	80005f8 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4620      	mov	r0, r4
 8001682:	4629      	mov	r1, r5
 8001684:	f7fe fe02 	bl	800028c <__adddf3>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	69f9      	ldr	r1, [r7, #28]
 800168e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800169e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016a2:	f7fe ffa9 	bl	80005f8 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4620      	mov	r0, r4
 80016ac:	4629      	mov	r1, r5
 80016ae:	f7fe fdeb 	bl	8000288 <__aeabi_dsub>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	69f9      	ldr	r1, [r7, #28]
 80016b8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80016c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016cc:	f7fe ff94 	bl	80005f8 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe fdd6 	bl	8000288 <__aeabi_dsub>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	69f9      	ldr	r1, [r7, #28]
 80016e2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016f6:	f7fe ff7f 	bl	80005f8 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4620      	mov	r0, r4
 8001700:	4629      	mov	r1, r5
 8001702:	f7fe fdc3 	bl	800028c <__adddf3>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	69f9      	ldr	r1, [r7, #28]
 800170c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	double S = Kalman->P[0][0] + Kalman->R_measure;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800171c:	f7fe fdb6 	bl	800028c <__adddf3>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double K[2];
	K[0] = Kalman->P[0][0] / S;
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800172e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001732:	f7ff f88b 	bl	800084c <__aeabi_ddiv>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	K[1] = Kalman->P[1][0] / S;
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001744:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001748:	f7ff f880 	bl	800084c <__aeabi_ddiv>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	double y = newAngle - Kalman->angle;
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800175a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800175e:	f7fe fd93 	bl	8000288 <__aeabi_dsub>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	Kalman->angle += K[0] * y;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001770:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001774:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001778:	f7fe ff3e 	bl	80005f8 <__aeabi_dmul>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4620      	mov	r0, r4
 8001782:	4629      	mov	r1, r5
 8001784:	f7fe fd82 	bl	800028c <__adddf3>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	69f9      	ldr	r1, [r7, #28]
 800178e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Kalman->bias += K[1] * y;
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001798:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800179c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80017a0:	f7fe ff2a 	bl	80005f8 <__aeabi_dmul>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4620      	mov	r0, r4
 80017aa:	4629      	mov	r1, r5
 80017ac:	f7fe fd6e 	bl	800028c <__adddf3>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	69f9      	ldr	r1, [r7, #28]
 80017b6:	e9c1 2308 	strd	r2, r3, [r1, #32]

	double P00_temp = Kalman->P[0][0];
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80017c0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double P01_temp = Kalman->P[0][1];
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	Kalman->P[0][0] -= K[0] * P00_temp;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80017d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017dc:	f7fe ff0c 	bl	80005f8 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4620      	mov	r0, r4
 80017e6:	4629      	mov	r1, r5
 80017e8:	f7fe fd4e 	bl	8000288 <__aeabi_dsub>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	69f9      	ldr	r1, [r7, #28]
 80017f2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	Kalman->P[0][1] -= K[0] * P01_temp;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80017fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001800:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001804:	f7fe fef8 	bl	80005f8 <__aeabi_dmul>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4620      	mov	r0, r4
 800180e:	4629      	mov	r1, r5
 8001810:	f7fe fd3a 	bl	8000288 <__aeabi_dsub>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	69f9      	ldr	r1, [r7, #28]
 800181a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	Kalman->P[1][0] -= K[1] * P00_temp;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001824:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001828:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800182c:	f7fe fee4 	bl	80005f8 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4620      	mov	r0, r4
 8001836:	4629      	mov	r1, r5
 8001838:	f7fe fd26 	bl	8000288 <__aeabi_dsub>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	69f9      	ldr	r1, [r7, #28]
 8001842:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	Kalman->P[1][1] -= K[1] * P01_temp;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 800184c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001850:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001854:	f7fe fed0 	bl	80005f8 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4620      	mov	r0, r4
 800185e:	4629      	mov	r1, r5
 8001860:	f7fe fd12 	bl	8000288 <__aeabi_dsub>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	69f9      	ldr	r1, [r7, #28]
 800186a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	return Kalman->angle;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001874:	ec43 2b17 	vmov	d7, r2, r3
};
 8001878:	eeb0 0a47 	vmov.f32	s0, s14
 800187c:	eef0 0a67 	vmov.f32	s1, s15
 8001880:	3758      	adds	r7, #88	@ 0x58
 8001882:	46bd      	mov	sp, r7
 8001884:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <HAL_MspInit+0x44>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	4a0e      	ldr	r2, [pc, #56]	@ (80018cc <HAL_MspInit+0x44>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6193      	str	r3, [r2, #24]
 800189a:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <HAL_MspInit+0x44>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <HAL_MspInit+0x44>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	4a08      	ldr	r2, [pc, #32]	@ (80018cc <HAL_MspInit+0x44>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	61d3      	str	r3, [r2, #28]
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_MspInit+0x44>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	@ 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a17      	ldr	r2, [pc, #92]	@ (800194c <HAL_I2C_MspInit+0x7c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d127      	bne.n	8001942 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <HAL_I2C_MspInit+0x80>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	4a16      	ldr	r2, [pc, #88]	@ (8001950 <HAL_I2C_MspInit+0x80>)
 80018f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018fc:	6153      	str	r3, [r2, #20]
 80018fe:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <HAL_I2C_MspInit+0x80>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800190a:	23c0      	movs	r3, #192	@ 0xc0
 800190c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190e:	2312      	movs	r3, #18
 8001910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800191a:	2304      	movs	r3, #4
 800191c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	480b      	ldr	r0, [pc, #44]	@ (8001954 <HAL_I2C_MspInit+0x84>)
 8001926:	f000 fde1 	bl	80024ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800192a:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <HAL_I2C_MspInit+0x80>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4a08      	ldr	r2, [pc, #32]	@ (8001950 <HAL_I2C_MspInit+0x80>)
 8001930:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001934:	61d3      	str	r3, [r2, #28]
 8001936:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <HAL_I2C_MspInit+0x80>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	@ 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40005400 	.word	0x40005400
 8001950:	40021000 	.word	0x40021000
 8001954:	48000400 	.word	0x48000400

08001958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	@ 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a42      	ldr	r2, [pc, #264]	@ (8001a80 <HAL_UART_MspInit+0x128>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d17d      	bne.n	8001a76 <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800197a:	4b42      	ldr	r3, [pc, #264]	@ (8001a84 <HAL_UART_MspInit+0x12c>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	4a41      	ldr	r2, [pc, #260]	@ (8001a84 <HAL_UART_MspInit+0x12c>)
 8001980:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001984:	6193      	str	r3, [r2, #24]
 8001986:	4b3f      	ldr	r3, [pc, #252]	@ (8001a84 <HAL_UART_MspInit+0x12c>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	4b3c      	ldr	r3, [pc, #240]	@ (8001a84 <HAL_UART_MspInit+0x12c>)
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	4a3b      	ldr	r2, [pc, #236]	@ (8001a84 <HAL_UART_MspInit+0x12c>)
 8001998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800199c:	6153      	str	r3, [r2, #20]
 800199e:	4b39      	ldr	r3, [pc, #228]	@ (8001a84 <HAL_UART_MspInit+0x12c>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019bc:	2307      	movs	r3, #7
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ca:	f000 fd8f 	bl	80024ec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80019ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001a88 <HAL_UART_MspInit+0x130>)
 80019d0:	4a2e      	ldr	r2, [pc, #184]	@ (8001a8c <HAL_UART_MspInit+0x134>)
 80019d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a88 <HAL_UART_MspInit+0x130>)
 80019d6:	2210      	movs	r2, #16
 80019d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019da:	4b2b      	ldr	r3, [pc, #172]	@ (8001a88 <HAL_UART_MspInit+0x130>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019e0:	4b29      	ldr	r3, [pc, #164]	@ (8001a88 <HAL_UART_MspInit+0x130>)
 80019e2:	2280      	movs	r2, #128	@ 0x80
 80019e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e6:	4b28      	ldr	r3, [pc, #160]	@ (8001a88 <HAL_UART_MspInit+0x130>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ec:	4b26      	ldr	r3, [pc, #152]	@ (8001a88 <HAL_UART_MspInit+0x130>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80019f2:	4b25      	ldr	r3, [pc, #148]	@ (8001a88 <HAL_UART_MspInit+0x130>)
 80019f4:	2220      	movs	r2, #32
 80019f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019f8:	4b23      	ldr	r3, [pc, #140]	@ (8001a88 <HAL_UART_MspInit+0x130>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80019fe:	4822      	ldr	r0, [pc, #136]	@ (8001a88 <HAL_UART_MspInit+0x130>)
 8001a00:	f000 fb39 	bl	8002076 <HAL_DMA_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8001a0a:	f7ff fb27 	bl	800105c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a1d      	ldr	r2, [pc, #116]	@ (8001a88 <HAL_UART_MspInit+0x130>)
 8001a12:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a14:	4a1c      	ldr	r2, [pc, #112]	@ (8001a88 <HAL_UART_MspInit+0x130>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <HAL_UART_MspInit+0x138>)
 8001a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001a94 <HAL_UART_MspInit+0x13c>)
 8001a1e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <HAL_UART_MspInit+0x138>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	@ (8001a90 <HAL_UART_MspInit+0x138>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a2c:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <HAL_UART_MspInit+0x138>)
 8001a2e:	2280      	movs	r2, #128	@ 0x80
 8001a30:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a32:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <HAL_UART_MspInit+0x138>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a38:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <HAL_UART_MspInit+0x138>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001a3e:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <HAL_UART_MspInit+0x138>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a44:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <HAL_UART_MspInit+0x138>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a4a:	4811      	ldr	r0, [pc, #68]	@ (8001a90 <HAL_UART_MspInit+0x138>)
 8001a4c:	f000 fb13 	bl	8002076 <HAL_DMA_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8001a56:	f7ff fb01 	bl	800105c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a90 <HAL_UART_MspInit+0x138>)
 8001a5e:	675a      	str	r2, [r3, #116]	@ 0x74
 8001a60:	4a0b      	ldr	r2, [pc, #44]	@ (8001a90 <HAL_UART_MspInit+0x138>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	2025      	movs	r0, #37	@ 0x25
 8001a6c:	f000 facd 	bl	800200a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a70:	2025      	movs	r0, #37	@ 0x25
 8001a72:	f000 fae6 	bl	8002042 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a76:	bf00      	nop
 8001a78:	3728      	adds	r7, #40	@ 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40013800 	.word	0x40013800
 8001a84:	40021000 	.word	0x40021000
 8001a88:	20000370 	.word	0x20000370
 8001a8c:	40020044 	.word	0x40020044
 8001a90:	200003b4 	.word	0x200003b4
 8001a94:	40020058 	.word	0x40020058

08001a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <NMI_Handler+0x4>

08001aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <HardFault_Handler+0x4>

08001aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <MemManage_Handler+0x4>

08001ab0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <UsageFault_Handler+0x4>

08001ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aee:	f000 f991 	bl	8001e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001afc:	4802      	ldr	r0, [pc, #8]	@ (8001b08 <DMA1_Channel4_IRQHandler+0x10>)
 8001afe:	f000 fbdc 	bl	80022ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000370 	.word	0x20000370

08001b0c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b10:	4802      	ldr	r0, [pc, #8]	@ (8001b1c <DMA1_Channel5_IRQHandler+0x10>)
 8001b12:	f000 fbd2 	bl	80022ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200003b4 	.word	0x200003b4

08001b20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <USART1_IRQHandler+0x10>)
 8001b26:	f003 f9e9 	bl	8004efc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200002e8 	.word	0x200002e8

08001b34 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  //Enable TRCENA
  DEMCR |= ( 1 << 24);
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <ITM_SendChar+0x48>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a0e      	ldr	r2, [pc, #56]	@ (8001b7c <ITM_SendChar+0x48>)
 8001b44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b48:	6013      	str	r3, [r2, #0]

  //enable stimulus port 0
  ITM_TRACE_EN |= ( 1 << 0);
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b80 <ITM_SendChar+0x4c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b80 <ITM_SendChar+0x4c>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6013      	str	r3, [r2, #0]

  // read FIFO status in bit [0]:
  while(!(ITM_STIMULUS_PORT0 & 1));
 8001b56:	bf00      	nop
 8001b58:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f8      	beq.n	8001b58 <ITM_SendChar+0x24>

  //Write to ITM stimulus port0
  ITM_STIMULUS_PORT0 = ch;
 8001b66:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	6013      	str	r3, [r2, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000edfc 	.word	0xe000edfc
 8001b80:	e0000e00 	.word	0xe0000e00

08001b84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return 1;
 8001b88:	2301      	movs	r3, #1
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <_kill>:

int _kill(int pid, int sig)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b9e:	f005 fa91 	bl	80070c4 <__errno>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2216      	movs	r2, #22
 8001ba6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_exit>:

void _exit (int status)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ffe7 	bl	8001b94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bc6:	bf00      	nop
 8001bc8:	e7fd      	b.n	8001bc6 <_exit+0x12>

08001bca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	e00a      	b.n	8001bf2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bdc:	f3af 8000 	nop.w
 8001be0:	4601      	mov	r1, r0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	60ba      	str	r2, [r7, #8]
 8001be8:	b2ca      	uxtb	r2, r1
 8001bea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	dbf0      	blt.n	8001bdc <_read+0x12>
  }

  return len;
 8001bfa:	687b      	ldr	r3, [r7, #4]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	e009      	b.n	8001c2a <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	60ba      	str	r2, [r7, #8]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff88 	bl	8001b34 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	3301      	adds	r3, #1
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	dbf1      	blt.n	8001c16 <_write+0x12>
  }
  return len;
 8001c32:	687b      	ldr	r3, [r7, #4]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_close>:

int _close(int file)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c64:	605a      	str	r2, [r3, #4]
  return 0;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_isatty>:

int _isatty(int file)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c7c:	2301      	movs	r3, #1
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b085      	sub	sp, #20
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cac:	4a14      	ldr	r2, [pc, #80]	@ (8001d00 <_sbrk+0x5c>)
 8001cae:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <_sbrk+0x60>)
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <_sbrk+0x64>)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	@ (8001d0c <_sbrk+0x68>)
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d207      	bcs.n	8001ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd4:	f005 f9f6 	bl	80070c4 <__errno>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	220c      	movs	r2, #12
 8001cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce2:	e009      	b.n	8001cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce4:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cea:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	4a05      	ldr	r2, [pc, #20]	@ (8001d08 <_sbrk+0x64>)
 8001cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	2000a000 	.word	0x2000a000
 8001d04:	00000400 	.word	0x00000400
 8001d08:	20000460 	.word	0x20000460
 8001d0c:	200005b8 	.word	0x200005b8

08001d10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <SystemInit+0x20>)
 8001d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d1a:	4a05      	ldr	r2, [pc, #20]	@ (8001d30 <SystemInit+0x20>)
 8001d1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d6c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d38:	f7ff ffea 	bl	8001d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d3c:	480c      	ldr	r0, [pc, #48]	@ (8001d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d3e:	490d      	ldr	r1, [pc, #52]	@ (8001d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d40:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <LoopForever+0xe>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d44:	e002      	b.n	8001d4c <LoopCopyDataInit>

08001d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4a:	3304      	adds	r3, #4

08001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d50:	d3f9      	bcc.n	8001d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d52:	4a0a      	ldr	r2, [pc, #40]	@ (8001d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d54:	4c0a      	ldr	r4, [pc, #40]	@ (8001d80 <LoopForever+0x16>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d58:	e001      	b.n	8001d5e <LoopFillZerobss>

08001d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d5c:	3204      	adds	r2, #4

08001d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d60:	d3fb      	bcc.n	8001d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d62:	f005 f9b5 	bl	80070d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d66:	f7fe ffc5 	bl	8000cf4 <main>

08001d6a <LoopForever>:

LoopForever:
    b LoopForever
 8001d6a:	e7fe      	b.n	8001d6a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d6c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d74:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8001d78:	0800b3f0 	.word	0x0800b3f0
  ldr r2, =_sbss
 8001d7c:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8001d80:	200005b4 	.word	0x200005b4

08001d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC1_2_IRQHandler>
	...

08001d88 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d8c:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <HAL_Init+0x28>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a07      	ldr	r2, [pc, #28]	@ (8001db0 <HAL_Init+0x28>)
 8001d92:	f043 0310 	orr.w	r3, r3, #16
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f000 f92b 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9e:	200f      	movs	r0, #15
 8001da0:	f000 f808 	bl	8001db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da4:	f7ff fd70 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40022000 	.word	0x40022000

08001db4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <HAL_InitTick+0x54>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_InitTick+0x58>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f943 	bl	800205e <HAL_SYSTICK_Config>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00e      	b.n	8001e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b0f      	cmp	r3, #15
 8001de6:	d80a      	bhi.n	8001dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de8:	2200      	movs	r2, #0
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	f000 f90b 	bl	800200a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df4:	4a06      	ldr	r2, [pc, #24]	@ (8001e10 <HAL_InitTick+0x5c>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e000      	b.n	8001e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000090 	.word	0x20000090
 8001e0c:	20000098 	.word	0x20000098
 8001e10:	20000094 	.word	0x20000094

08001e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_IncTick+0x20>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_IncTick+0x24>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	4a04      	ldr	r2, [pc, #16]	@ (8001e38 <HAL_IncTick+0x24>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000098 	.word	0x20000098
 8001e38:	20000464 	.word	0x20000464

08001e3c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e40:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <HAL_GetTick+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000464 	.word	0x20000464

08001e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	@ (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	@ (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4907      	ldr	r1, [pc, #28]	@ (8001ef0 <__NVIC_EnableIRQ+0x38>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	@ (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	@ (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	@ 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	@ 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fc0:	d301      	bcc.n	8001fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00f      	b.n	8001fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff0 <SysTick_Config+0x40>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fce:	210f      	movs	r1, #15
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f7ff ff8e 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd8:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <SysTick_Config+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <SysTick_Config+0x40>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010

08001ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff29 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff3e 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff8e 	bl	8001f48 <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff5d 	bl	8001ef4 <__NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff31 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffa2 	bl	8001fb0 <SysTick_Config>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e037      	b.n	80020fc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80020a2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80020a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f9c8 	bl	8002474 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_DMA_Start_IT+0x20>
 8002120:	2302      	movs	r3, #2
 8002122:	e04a      	b.n	80021ba <HAL_DMA_Start_IT+0xb6>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002132:	2b01      	cmp	r3, #1
 8002134:	d13a      	bne.n	80021ac <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2202      	movs	r2, #2
 800213a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f95c 	bl	8002418 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 020e 	orr.w	r2, r2, #14
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e00f      	b.n	800219a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 020a 	orr.w	r2, r2, #10
 8002188:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0204 	bic.w	r2, r2, #4
 8002198:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	e005      	b.n	80021b8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
 80021b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e02e      	b.n	8002232 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d008      	beq.n	80021f0 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2204      	movs	r2, #4
 80021e2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e020      	b.n	8002232 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 020e 	bic.w	r2, r2, #14
 80021fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002218:	2101      	movs	r1, #1
 800221a:	fa01 f202 	lsl.w	r2, r1, r2
 800221e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002250:	2b02      	cmp	r3, #2
 8002252:	d005      	beq.n	8002260 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2204      	movs	r2, #4
 8002258:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	e027      	b.n	80022b0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 020e 	bic.w	r2, r2, #14
 800226e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002288:	2101      	movs	r1, #1
 800228a:	fa01 f202 	lsl.w	r2, r1, r2
 800228e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
    }
  }
  return status;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b084      	sub	sp, #16
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	2204      	movs	r2, #4
 80022d8:	409a      	lsls	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d024      	beq.n	800232c <HAL_DMA_IRQHandler+0x72>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01f      	beq.n	800232c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d107      	bne.n	800230a <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0204 	bic.w	r2, r2, #4
 8002308:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002312:	2104      	movs	r1, #4
 8002314:	fa01 f202 	lsl.w	r2, r1, r2
 8002318:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d06a      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800232a:	e065      	b.n	80023f8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002330:	2202      	movs	r2, #2
 8002332:	409a      	lsls	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d02c      	beq.n	8002396 <HAL_DMA_IRQHandler+0xdc>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d027      	beq.n	8002396 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10b      	bne.n	800236c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 020a 	bic.w	r2, r2, #10
 8002362:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002374:	2102      	movs	r1, #2
 8002376:	fa01 f202 	lsl.w	r2, r1, r2
 800237a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002388:	2b00      	cmp	r3, #0
 800238a:	d035      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002394:	e030      	b.n	80023f8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	2208      	movs	r2, #8
 800239c:	409a      	lsls	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d028      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x13e>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d023      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 020e 	bic.w	r2, r2, #14
 80023be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c8:	2101      	movs	r1, #1
 80023ca:	fa01 f202 	lsl.w	r2, r1, r2
 80023ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d004      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	4798      	blx	r3
    }
  }
}
 80023f6:	e7ff      	b.n	80023f8 <HAL_DMA_IRQHandler+0x13e>
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242e:	2101      	movs	r1, #1
 8002430:	fa01 f202 	lsl.w	r2, r1, r2
 8002434:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b10      	cmp	r3, #16
 8002444:	d108      	bne.n	8002458 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002456:	e007      	b.n	8002468 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	60da      	str	r2, [r3, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b14      	ldr	r3, [pc, #80]	@ (80024d4 <DMA_CalcBaseAndBitshift+0x60>)
 8002484:	429a      	cmp	r2, r3
 8002486:	d80f      	bhi.n	80024a8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4b12      	ldr	r3, [pc, #72]	@ (80024d8 <DMA_CalcBaseAndBitshift+0x64>)
 8002490:	4413      	add	r3, r2
 8002492:	4a12      	ldr	r2, [pc, #72]	@ (80024dc <DMA_CalcBaseAndBitshift+0x68>)
 8002494:	fba2 2303 	umull	r2, r3, r2, r3
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	009a      	lsls	r2, r3, #2
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a0f      	ldr	r2, [pc, #60]	@ (80024e0 <DMA_CalcBaseAndBitshift+0x6c>)
 80024a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80024a6:	e00e      	b.n	80024c6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b0d      	ldr	r3, [pc, #52]	@ (80024e4 <DMA_CalcBaseAndBitshift+0x70>)
 80024b0:	4413      	add	r3, r2
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <DMA_CalcBaseAndBitshift+0x68>)
 80024b4:	fba2 2303 	umull	r2, r3, r2, r3
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	009a      	lsls	r2, r3, #2
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a09      	ldr	r2, [pc, #36]	@ (80024e8 <DMA_CalcBaseAndBitshift+0x74>)
 80024c4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40020407 	.word	0x40020407
 80024d8:	bffdfff8 	.word	0xbffdfff8
 80024dc:	cccccccd 	.word	0xcccccccd
 80024e0:	40020000 	.word	0x40020000
 80024e4:	bffdfbf8 	.word	0xbffdfbf8
 80024e8:	40020400 	.word	0x40020400

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fa:	e154      	b.n	80027a6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2101      	movs	r1, #1
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	4013      	ands	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8146 	beq.w	80027a0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b01      	cmp	r3, #1
 800251e:	d005      	beq.n	800252c <HAL_GPIO_Init+0x40>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d130      	bne.n	800258e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002562:	2201      	movs	r2, #1
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 0201 	and.w	r2, r3, #1
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b03      	cmp	r3, #3
 8002598:	d017      	beq.n	80025ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d123      	bne.n	800261e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	08da      	lsrs	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3208      	adds	r2, #8
 80025de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	220f      	movs	r2, #15
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4013      	ands	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	08da      	lsrs	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3208      	adds	r2, #8
 8002618:	6939      	ldr	r1, [r7, #16]
 800261a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	2203      	movs	r2, #3
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0203 	and.w	r2, r3, #3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80a0 	beq.w	80027a0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002660:	4b58      	ldr	r3, [pc, #352]	@ (80027c4 <HAL_GPIO_Init+0x2d8>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	4a57      	ldr	r2, [pc, #348]	@ (80027c4 <HAL_GPIO_Init+0x2d8>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6193      	str	r3, [r2, #24]
 800266c:	4b55      	ldr	r3, [pc, #340]	@ (80027c4 <HAL_GPIO_Init+0x2d8>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002678:	4a53      	ldr	r2, [pc, #332]	@ (80027c8 <HAL_GPIO_Init+0x2dc>)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	3302      	adds	r3, #2
 8002680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	220f      	movs	r2, #15
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80026a2:	d019      	beq.n	80026d8 <HAL_GPIO_Init+0x1ec>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a49      	ldr	r2, [pc, #292]	@ (80027cc <HAL_GPIO_Init+0x2e0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d013      	beq.n	80026d4 <HAL_GPIO_Init+0x1e8>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a48      	ldr	r2, [pc, #288]	@ (80027d0 <HAL_GPIO_Init+0x2e4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d00d      	beq.n	80026d0 <HAL_GPIO_Init+0x1e4>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a47      	ldr	r2, [pc, #284]	@ (80027d4 <HAL_GPIO_Init+0x2e8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d007      	beq.n	80026cc <HAL_GPIO_Init+0x1e0>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a46      	ldr	r2, [pc, #280]	@ (80027d8 <HAL_GPIO_Init+0x2ec>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d101      	bne.n	80026c8 <HAL_GPIO_Init+0x1dc>
 80026c4:	2304      	movs	r3, #4
 80026c6:	e008      	b.n	80026da <HAL_GPIO_Init+0x1ee>
 80026c8:	2305      	movs	r3, #5
 80026ca:	e006      	b.n	80026da <HAL_GPIO_Init+0x1ee>
 80026cc:	2303      	movs	r3, #3
 80026ce:	e004      	b.n	80026da <HAL_GPIO_Init+0x1ee>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e002      	b.n	80026da <HAL_GPIO_Init+0x1ee>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <HAL_GPIO_Init+0x1ee>
 80026d8:	2300      	movs	r3, #0
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	f002 0203 	and.w	r2, r2, #3
 80026e0:	0092      	lsls	r2, r2, #2
 80026e2:	4093      	lsls	r3, r2
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026ea:	4937      	ldr	r1, [pc, #220]	@ (80027c8 <HAL_GPIO_Init+0x2dc>)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	089b      	lsrs	r3, r3, #2
 80026f0:	3302      	adds	r3, #2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f8:	4b38      	ldr	r3, [pc, #224]	@ (80027dc <HAL_GPIO_Init+0x2f0>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	43db      	mvns	r3, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800271c:	4a2f      	ldr	r2, [pc, #188]	@ (80027dc <HAL_GPIO_Init+0x2f0>)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002722:	4b2e      	ldr	r3, [pc, #184]	@ (80027dc <HAL_GPIO_Init+0x2f0>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002746:	4a25      	ldr	r2, [pc, #148]	@ (80027dc <HAL_GPIO_Init+0x2f0>)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800274c:	4b23      	ldr	r3, [pc, #140]	@ (80027dc <HAL_GPIO_Init+0x2f0>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	43db      	mvns	r3, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002770:	4a1a      	ldr	r2, [pc, #104]	@ (80027dc <HAL_GPIO_Init+0x2f0>)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002776:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <HAL_GPIO_Init+0x2f0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800279a:	4a10      	ldr	r2, [pc, #64]	@ (80027dc <HAL_GPIO_Init+0x2f0>)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3301      	adds	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	fa22 f303 	lsr.w	r3, r2, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f47f aea3 	bne.w	80024fc <HAL_GPIO_Init+0x10>
  }
}
 80027b6:	bf00      	nop
 80027b8:	bf00      	nop
 80027ba:	371c      	adds	r7, #28
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40010000 	.word	0x40010000
 80027cc:	48000400 	.word	0x48000400
 80027d0:	48000800 	.word	0x48000800
 80027d4:	48000c00 	.word	0x48000c00
 80027d8:	48001000 	.word	0x48001000
 80027dc:	40010400 	.word	0x40010400

080027e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e08d      	b.n	800290e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff f862 	bl	80018d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	@ 0x24
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002830:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002840:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d107      	bne.n	800285a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	e006      	b.n	8002868 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002866:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d108      	bne.n	8002882 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	e007      	b.n	8002892 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002890:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69d9      	ldr	r1, [r3, #28]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1a      	ldr	r2, [r3, #32]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af02      	add	r7, sp, #8
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	4608      	mov	r0, r1
 8002922:	4611      	mov	r1, r2
 8002924:	461a      	mov	r2, r3
 8002926:	4603      	mov	r3, r0
 8002928:	817b      	strh	r3, [r7, #10]
 800292a:	460b      	mov	r3, r1
 800292c:	813b      	strh	r3, [r7, #8]
 800292e:	4613      	mov	r3, r2
 8002930:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b20      	cmp	r3, #32
 800293c:	f040 80f9 	bne.w	8002b32 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <HAL_I2C_Mem_Write+0x34>
 8002946:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002948:	2b00      	cmp	r3, #0
 800294a:	d105      	bne.n	8002958 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002952:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0ed      	b.n	8002b34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_I2C_Mem_Write+0x4e>
 8002962:	2302      	movs	r3, #2
 8002964:	e0e6      	b.n	8002b34 <HAL_I2C_Mem_Write+0x21c>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800296e:	f7ff fa65 	bl	8001e3c <HAL_GetTick>
 8002972:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2319      	movs	r3, #25
 800297a:	2201      	movs	r2, #1
 800297c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 fac3 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0d1      	b.n	8002b34 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2221      	movs	r2, #33	@ 0x21
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2240      	movs	r2, #64	@ 0x40
 800299c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a3a      	ldr	r2, [r7, #32]
 80029aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80029b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029b8:	88f8      	ldrh	r0, [r7, #6]
 80029ba:	893a      	ldrh	r2, [r7, #8]
 80029bc:	8979      	ldrh	r1, [r7, #10]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	4603      	mov	r3, r0
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f9d3 	bl	8002d74 <I2C_RequestMemoryWrite>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0a9      	b.n	8002b34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2bff      	cmp	r3, #255	@ 0xff
 80029e8:	d90e      	bls.n	8002a08 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	22ff      	movs	r2, #255	@ 0xff
 80029ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	8979      	ldrh	r1, [r7, #10]
 80029f8:	2300      	movs	r3, #0
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 fc47 	bl	8003294 <I2C_TransferConfig>
 8002a06:	e00f      	b.n	8002a28 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	8979      	ldrh	r1, [r7, #10]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fc36 	bl	8003294 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 fac6 	bl	8002fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e07b      	b.n	8002b34 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d034      	beq.n	8002ae0 <HAL_I2C_Mem_Write+0x1c8>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d130      	bne.n	8002ae0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a84:	2200      	movs	r2, #0
 8002a86:	2180      	movs	r1, #128	@ 0x80
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 fa3f 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e04d      	b.n	8002b34 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2bff      	cmp	r3, #255	@ 0xff
 8002aa0:	d90e      	bls.n	8002ac0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	22ff      	movs	r2, #255	@ 0xff
 8002aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	8979      	ldrh	r1, [r7, #10]
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 fbeb 	bl	8003294 <I2C_TransferConfig>
 8002abe:	e00f      	b.n	8002ae0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	8979      	ldrh	r1, [r7, #10]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fbda 	bl	8003294 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d19e      	bne.n	8002a28 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 faac 	bl	800304c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e01a      	b.n	8002b34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2220      	movs	r2, #32
 8002b04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6859      	ldr	r1, [r3, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b0a      	ldr	r3, [pc, #40]	@ (8002b3c <HAL_I2C_Mem_Write+0x224>)
 8002b12:	400b      	ands	r3, r1
 8002b14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
  }
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	fe00e800 	.word	0xfe00e800

08002b40 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	4608      	mov	r0, r1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4603      	mov	r3, r0
 8002b50:	817b      	strh	r3, [r7, #10]
 8002b52:	460b      	mov	r3, r1
 8002b54:	813b      	strh	r3, [r7, #8]
 8002b56:	4613      	mov	r3, r2
 8002b58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	f040 80fd 	bne.w	8002d62 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_I2C_Mem_Read+0x34>
 8002b6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b7a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0f1      	b.n	8002d64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_I2C_Mem_Read+0x4e>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e0ea      	b.n	8002d64 <HAL_I2C_Mem_Read+0x224>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b96:	f7ff f951 	bl	8001e3c <HAL_GetTick>
 8002b9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2319      	movs	r3, #25
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f9af 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0d5      	b.n	8002d64 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2222      	movs	r2, #34	@ 0x22
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2240      	movs	r2, #64	@ 0x40
 8002bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a3a      	ldr	r2, [r7, #32]
 8002bd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002be0:	88f8      	ldrh	r0, [r7, #6]
 8002be2:	893a      	ldrh	r2, [r7, #8]
 8002be4:	8979      	ldrh	r1, [r7, #10]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	4603      	mov	r3, r0
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f913 	bl	8002e1c <I2C_RequestMemoryRead>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0ad      	b.n	8002d64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2bff      	cmp	r3, #255	@ 0xff
 8002c10:	d90e      	bls.n	8002c30 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	8979      	ldrh	r1, [r7, #10]
 8002c20:	4b52      	ldr	r3, [pc, #328]	@ (8002d6c <HAL_I2C_Mem_Read+0x22c>)
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fb33 	bl	8003294 <I2C_TransferConfig>
 8002c2e:	e00f      	b.n	8002c50 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	8979      	ldrh	r1, [r7, #10]
 8002c42:	4b4a      	ldr	r3, [pc, #296]	@ (8002d6c <HAL_I2C_Mem_Read+0x22c>)
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fb22 	bl	8003294 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c56:	2200      	movs	r2, #0
 8002c58:	2104      	movs	r1, #4
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f956 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e07c      	b.n	8002d64 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d034      	beq.n	8002d10 <HAL_I2C_Mem_Read+0x1d0>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d130      	bne.n	8002d10 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2180      	movs	r1, #128	@ 0x80
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f927 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e04d      	b.n	8002d64 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2bff      	cmp	r3, #255	@ 0xff
 8002cd0:	d90e      	bls.n	8002cf0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	8979      	ldrh	r1, [r7, #10]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fad3 	bl	8003294 <I2C_TransferConfig>
 8002cee:	e00f      	b.n	8002d10 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	8979      	ldrh	r1, [r7, #10]
 8002d02:	2300      	movs	r3, #0
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 fac2 	bl	8003294 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d19a      	bne.n	8002c50 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f994 	bl	800304c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e01a      	b.n	8002d64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2220      	movs	r2, #32
 8002d34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b0b      	ldr	r3, [pc, #44]	@ (8002d70 <HAL_I2C_Mem_Read+0x230>)
 8002d42:	400b      	ands	r3, r1
 8002d44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e000      	b.n	8002d64 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
  }
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	80002400 	.word	0x80002400
 8002d70:	fe00e800 	.word	0xfe00e800

08002d74 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	4608      	mov	r0, r1
 8002d7e:	4611      	mov	r1, r2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4603      	mov	r3, r0
 8002d84:	817b      	strh	r3, [r7, #10]
 8002d86:	460b      	mov	r3, r1
 8002d88:	813b      	strh	r3, [r7, #8]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	8979      	ldrh	r1, [r7, #10]
 8002d94:	4b20      	ldr	r3, [pc, #128]	@ (8002e18 <I2C_RequestMemoryWrite+0xa4>)
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fa79 	bl	8003294 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	69b9      	ldr	r1, [r7, #24]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f909 	bl	8002fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e02c      	b.n	8002e10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d105      	bne.n	8002dc8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dbc:	893b      	ldrh	r3, [r7, #8]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dc6:	e015      	b.n	8002df4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dc8:	893b      	ldrh	r3, [r7, #8]
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	69b9      	ldr	r1, [r7, #24]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f8ef 	bl	8002fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e012      	b.n	8002e10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dea:	893b      	ldrh	r3, [r7, #8]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2180      	movs	r1, #128	@ 0x80
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f884 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	80002000 	.word	0x80002000

08002e1c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	4608      	mov	r0, r1
 8002e26:	4611      	mov	r1, r2
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	817b      	strh	r3, [r7, #10]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	813b      	strh	r3, [r7, #8]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	8979      	ldrh	r1, [r7, #10]
 8002e3c:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <I2C_RequestMemoryRead+0xa4>)
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2300      	movs	r3, #0
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fa26 	bl	8003294 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	69b9      	ldr	r1, [r7, #24]
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f8b6 	bl	8002fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e02c      	b.n	8002eb6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d105      	bne.n	8002e6e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e62:	893b      	ldrh	r3, [r7, #8]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e6c:	e015      	b.n	8002e9a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e6e:	893b      	ldrh	r3, [r7, #8]
 8002e70:	0a1b      	lsrs	r3, r3, #8
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	69b9      	ldr	r1, [r7, #24]
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f89c 	bl	8002fbe <I2C_WaitOnTXISFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e012      	b.n	8002eb6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e90:	893b      	ldrh	r3, [r7, #8]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2140      	movs	r1, #64	@ 0x40
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f831 	bl	8002f0c <I2C_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	80002000 	.word	0x80002000

08002ec4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d103      	bne.n	8002ee2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d007      	beq.n	8002f00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	619a      	str	r2, [r3, #24]
  }
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f1c:	e03b      	b.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	6839      	ldr	r1, [r7, #0]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f8d6 	bl	80030d4 <I2C_IsErrorOccurred>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e041      	b.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d02d      	beq.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3a:	f7fe ff7f 	bl	8001e3c <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d302      	bcc.n	8002f50 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d122      	bne.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d113      	bne.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f72:	f043 0220 	orr.w	r2, r3, #32
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e00f      	b.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699a      	ldr	r2, [r3, #24]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	bf0c      	ite	eq
 8002fa6:	2301      	moveq	r3, #1
 8002fa8:	2300      	movne	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d0b4      	beq.n	8002f1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fca:	e033      	b.n	8003034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f87f 	bl	80030d4 <I2C_IsErrorOccurred>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e031      	b.n	8003044 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d025      	beq.n	8003034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe8:	f7fe ff28 	bl	8001e3c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d302      	bcc.n	8002ffe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d11a      	bne.n	8003034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b02      	cmp	r3, #2
 800300a:	d013      	beq.n	8003034 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003010:	f043 0220 	orr.w	r2, r3, #32
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e007      	b.n	8003044 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	d1c4      	bne.n	8002fcc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003058:	e02f      	b.n	80030ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f838 	bl	80030d4 <I2C_IsErrorOccurred>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e02d      	b.n	80030ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fe fee5 	bl	8001e3c <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d11a      	bne.n	80030ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b20      	cmp	r3, #32
 8003090:	d013      	beq.n	80030ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003096:	f043 0220 	orr.w	r2, r3, #32
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e007      	b.n	80030ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d1c8      	bne.n	800305a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08a      	sub	sp, #40	@ 0x28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d068      	beq.n	80031d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2210      	movs	r2, #16
 8003106:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003108:	e049      	b.n	800319e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003110:	d045      	beq.n	800319e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003112:	f7fe fe93 	bl	8001e3c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	429a      	cmp	r2, r3
 8003120:	d302      	bcc.n	8003128 <I2C_IsErrorOccurred+0x54>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d13a      	bne.n	800319e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003132:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800313a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800314a:	d121      	bne.n	8003190 <I2C_IsErrorOccurred+0xbc>
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003152:	d01d      	beq.n	8003190 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003154:	7cfb      	ldrb	r3, [r7, #19]
 8003156:	2b20      	cmp	r3, #32
 8003158:	d01a      	beq.n	8003190 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003168:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800316a:	f7fe fe67 	bl	8001e3c <HAL_GetTick>
 800316e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003170:	e00e      	b.n	8003190 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003172:	f7fe fe63 	bl	8001e3c <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b19      	cmp	r3, #25
 800317e:	d907      	bls.n	8003190 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	f043 0320 	orr.w	r3, r3, #32
 8003186:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800318e:	e006      	b.n	800319e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b20      	cmp	r3, #32
 800319c:	d1e9      	bne.n	8003172 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d003      	beq.n	80031b4 <I2C_IsErrorOccurred+0xe0>
 80031ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0aa      	beq.n	800310a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d103      	bne.n	80031c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2220      	movs	r2, #32
 80031c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	f043 0304 	orr.w	r3, r3, #4
 80031ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00b      	beq.n	80031fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	f043 0308 	orr.w	r3, r3, #8
 800320c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003216:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	f043 0302 	orr.w	r3, r3, #2
 800322e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003238:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003240:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01c      	beq.n	8003282 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f7ff fe3b 	bl	8002ec4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4b0d      	ldr	r3, [pc, #52]	@ (8003290 <I2C_IsErrorOccurred+0x1bc>)
 800325a:	400b      	ands	r3, r1
 800325c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	431a      	orrs	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003282:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003286:	4618      	mov	r0, r3
 8003288:	3728      	adds	r7, #40	@ 0x28
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	fe00e800 	.word	0xfe00e800

08003294 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	817b      	strh	r3, [r7, #10]
 80032a2:	4613      	mov	r3, r2
 80032a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032a6:	897b      	ldrh	r3, [r7, #10]
 80032a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032ac:	7a7b      	ldrb	r3, [r7, #9]
 80032ae:	041b      	lsls	r3, r3, #16
 80032b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	4313      	orrs	r3, r2
 80032be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	0d5b      	lsrs	r3, r3, #21
 80032ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80032d2:	4b08      	ldr	r3, [pc, #32]	@ (80032f4 <I2C_TransferConfig+0x60>)
 80032d4:	430b      	orrs	r3, r1
 80032d6:	43db      	mvns	r3, r3
 80032d8:	ea02 0103 	and.w	r1, r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032e6:	bf00      	nop
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	03ff63ff 	.word	0x03ff63ff

080032f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b20      	cmp	r3, #32
 800330c:	d138      	bne.n	8003380 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003318:	2302      	movs	r3, #2
 800331a:	e032      	b.n	8003382 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2224      	movs	r2, #36	@ 0x24
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800334a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6819      	ldr	r1, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003380:	2302      	movs	r3, #2
  }
}
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800338e:	b480      	push	{r7}
 8003390:	b085      	sub	sp, #20
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d139      	bne.n	8003418 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e033      	b.n	800341a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2224      	movs	r2, #36	@ 0x24
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003418:	2302      	movs	r3, #2
  }
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800342e:	af00      	add	r7, sp, #0
 8003430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003434:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003438:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800343a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	f001 b823 	b.w	8004494 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003452:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 817d 	beq.w	800375e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003464:	4bbc      	ldr	r3, [pc, #752]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b04      	cmp	r3, #4
 800346e:	d00c      	beq.n	800348a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003470:	4bb9      	ldr	r3, [pc, #740]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b08      	cmp	r3, #8
 800347a:	d15c      	bne.n	8003536 <HAL_RCC_OscConfig+0x10e>
 800347c:	4bb6      	ldr	r3, [pc, #728]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003488:	d155      	bne.n	8003536 <HAL_RCC_OscConfig+0x10e>
 800348a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800348e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003496:	fa93 f3a3 	rbit	r3, r3
 800349a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800349e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d102      	bne.n	80034bc <HAL_RCC_OscConfig+0x94>
 80034b6:	4ba8      	ldr	r3, [pc, #672]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	e015      	b.n	80034e8 <HAL_RCC_OscConfig+0xc0>
 80034bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034c0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80034d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034d4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80034d8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80034dc:	fa93 f3a3 	rbit	r3, r3
 80034e0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80034e4:	4b9c      	ldr	r3, [pc, #624]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 80034e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034ec:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80034f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80034f4:	fa92 f2a2 	rbit	r2, r2
 80034f8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80034fc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003500:	fab2 f282 	clz	r2, r2
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	f042 0220 	orr.w	r2, r2, #32
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	f002 021f 	and.w	r2, r2, #31
 8003510:	2101      	movs	r1, #1
 8003512:	fa01 f202 	lsl.w	r2, r1, r2
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 811f 	beq.w	800375c <HAL_RCC_OscConfig+0x334>
 800351e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003522:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f040 8116 	bne.w	800375c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f000 bfaf 	b.w	8004494 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003546:	d106      	bne.n	8003556 <HAL_RCC_OscConfig+0x12e>
 8003548:	4b83      	ldr	r3, [pc, #524]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a82      	ldr	r2, [pc, #520]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 800354e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	e036      	b.n	80035c4 <HAL_RCC_OscConfig+0x19c>
 8003556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800355a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0x158>
 8003566:	4b7c      	ldr	r3, [pc, #496]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a7b      	ldr	r2, [pc, #492]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 800356c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b79      	ldr	r3, [pc, #484]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a78      	ldr	r2, [pc, #480]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 8003578:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e021      	b.n	80035c4 <HAL_RCC_OscConfig+0x19c>
 8003580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003584:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0x184>
 8003592:	4b71      	ldr	r3, [pc, #452]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a70      	ldr	r2, [pc, #448]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 8003598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b6e      	ldr	r3, [pc, #440]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a6d      	ldr	r2, [pc, #436]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e00b      	b.n	80035c4 <HAL_RCC_OscConfig+0x19c>
 80035ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a69      	ldr	r2, [pc, #420]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b67      	ldr	r3, [pc, #412]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a66      	ldr	r2, [pc, #408]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 80035be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035c2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035c4:	4b64      	ldr	r3, [pc, #400]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 80035c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c8:	f023 020f 	bic.w	r2, r3, #15
 80035cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	495f      	ldr	r1, [pc, #380]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d059      	beq.n	80036a2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7fe fc25 	bl	8001e3c <HAL_GetTick>
 80035f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fe fc20 	bl	8001e3c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b64      	cmp	r3, #100	@ 0x64
 8003606:	d902      	bls.n	800360e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	f000 bf43 	b.w	8004494 <HAL_RCC_OscConfig+0x106c>
 800360e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003612:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800361a:	fa93 f3a3 	rbit	r3, r3
 800361e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003622:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b01      	cmp	r3, #1
 8003638:	d102      	bne.n	8003640 <HAL_RCC_OscConfig+0x218>
 800363a:	4b47      	ldr	r3, [pc, #284]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	e015      	b.n	800366c <HAL_RCC_OscConfig+0x244>
 8003640:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003644:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003654:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003658:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800365c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003660:	fa93 f3a3 	rbit	r3, r3
 8003664:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003668:	4b3b      	ldr	r3, [pc, #236]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003670:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003674:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003678:	fa92 f2a2 	rbit	r2, r2
 800367c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003680:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003684:	fab2 f282 	clz	r2, r2
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	f042 0220 	orr.w	r2, r2, #32
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	f002 021f 	and.w	r2, r2, #31
 8003694:	2101      	movs	r1, #1
 8003696:	fa01 f202 	lsl.w	r2, r1, r2
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ab      	beq.n	80035f8 <HAL_RCC_OscConfig+0x1d0>
 80036a0:	e05d      	b.n	800375e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7fe fbcb 	bl	8001e3c <HAL_GetTick>
 80036a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ac:	f7fe fbc6 	bl	8001e3c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b64      	cmp	r3, #100	@ 0x64
 80036ba:	d902      	bls.n	80036c2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	f000 bee9 	b.w	8004494 <HAL_RCC_OscConfig+0x106c>
 80036c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036c6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80036d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d102      	bne.n	80036f4 <HAL_RCC_OscConfig+0x2cc>
 80036ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	e015      	b.n	8003720 <HAL_RCC_OscConfig+0x2f8>
 80036f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036f8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003700:	fa93 f3a3 	rbit	r3, r3
 8003704:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003708:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800370c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003710:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800371c:	4b0e      	ldr	r3, [pc, #56]	@ (8003758 <HAL_RCC_OscConfig+0x330>)
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003724:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003728:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800372c:	fa92 f2a2 	rbit	r2, r2
 8003730:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003734:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003738:	fab2 f282 	clz	r2, r2
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	f042 0220 	orr.w	r2, r2, #32
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	f002 021f 	and.w	r2, r2, #31
 8003748:	2101      	movs	r1, #1
 800374a:	fa01 f202 	lsl.w	r2, r1, r2
 800374e:	4013      	ands	r3, r2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1ab      	bne.n	80036ac <HAL_RCC_OscConfig+0x284>
 8003754:	e003      	b.n	800375e <HAL_RCC_OscConfig+0x336>
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800375c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003762:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 817d 	beq.w	8003a6e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003774:	4ba6      	ldr	r3, [pc, #664]	@ (8003a10 <HAL_RCC_OscConfig+0x5e8>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00b      	beq.n	8003798 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003780:	4ba3      	ldr	r3, [pc, #652]	@ (8003a10 <HAL_RCC_OscConfig+0x5e8>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	2b08      	cmp	r3, #8
 800378a:	d172      	bne.n	8003872 <HAL_RCC_OscConfig+0x44a>
 800378c:	4ba0      	ldr	r3, [pc, #640]	@ (8003a10 <HAL_RCC_OscConfig+0x5e8>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d16c      	bne.n	8003872 <HAL_RCC_OscConfig+0x44a>
 8003798:	2302      	movs	r3, #2
 800379a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80037aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d102      	bne.n	80037c8 <HAL_RCC_OscConfig+0x3a0>
 80037c2:	4b93      	ldr	r3, [pc, #588]	@ (8003a10 <HAL_RCC_OscConfig+0x5e8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	e013      	b.n	80037f0 <HAL_RCC_OscConfig+0x3c8>
 80037c8:	2302      	movs	r3, #2
 80037ca:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80037da:	2302      	movs	r3, #2
 80037dc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80037e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80037ec:	4b88      	ldr	r3, [pc, #544]	@ (8003a10 <HAL_RCC_OscConfig+0x5e8>)
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	2202      	movs	r2, #2
 80037f2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80037f6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80037fa:	fa92 f2a2 	rbit	r2, r2
 80037fe:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003802:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003806:	fab2 f282 	clz	r2, r2
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	f042 0220 	orr.w	r2, r2, #32
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	f002 021f 	and.w	r2, r2, #31
 8003816:	2101      	movs	r1, #1
 8003818:	fa01 f202 	lsl.w	r2, r1, r2
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCC_OscConfig+0x410>
 8003822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003826:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d002      	beq.n	8003838 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f000 be2e 	b.w	8004494 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003838:	4b75      	ldr	r3, [pc, #468]	@ (8003a10 <HAL_RCC_OscConfig+0x5e8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003844:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	21f8      	movs	r1, #248	@ 0xf8
 800384e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003856:	fa91 f1a1 	rbit	r1, r1
 800385a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800385e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003862:	fab1 f181 	clz	r1, r1
 8003866:	b2c9      	uxtb	r1, r1
 8003868:	408b      	lsls	r3, r1
 800386a:	4969      	ldr	r1, [pc, #420]	@ (8003a10 <HAL_RCC_OscConfig+0x5e8>)
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003870:	e0fd      	b.n	8003a6e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003876:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 8088 	beq.w	8003994 <HAL_RCC_OscConfig+0x56c>
 8003884:	2301      	movs	r3, #1
 8003886:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800388e:	fa93 f3a3 	rbit	r3, r3
 8003892:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003896:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	461a      	mov	r2, r3
 80038ac:	2301      	movs	r3, #1
 80038ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fe fac4 	bl	8001e3c <HAL_GetTick>
 80038b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b8:	e00a      	b.n	80038d0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ba:	f7fe fabf 	bl	8001e3c <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d902      	bls.n	80038d0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	f000 bde2 	b.w	8004494 <HAL_RCC_OscConfig+0x106c>
 80038d0:	2302      	movs	r3, #2
 80038d2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80038da:	fa93 f3a3 	rbit	r3, r3
 80038de:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80038e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d102      	bne.n	8003900 <HAL_RCC_OscConfig+0x4d8>
 80038fa:	4b45      	ldr	r3, [pc, #276]	@ (8003a10 <HAL_RCC_OscConfig+0x5e8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	e013      	b.n	8003928 <HAL_RCC_OscConfig+0x500>
 8003900:	2302      	movs	r3, #2
 8003902:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800390a:	fa93 f3a3 	rbit	r3, r3
 800390e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003912:	2302      	movs	r3, #2
 8003914:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003918:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003924:	4b3a      	ldr	r3, [pc, #232]	@ (8003a10 <HAL_RCC_OscConfig+0x5e8>)
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	2202      	movs	r2, #2
 800392a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800392e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003932:	fa92 f2a2 	rbit	r2, r2
 8003936:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800393a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800393e:	fab2 f282 	clz	r2, r2
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	f042 0220 	orr.w	r2, r2, #32
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	f002 021f 	and.w	r2, r2, #31
 800394e:	2101      	movs	r1, #1
 8003950:	fa01 f202 	lsl.w	r2, r1, r2
 8003954:	4013      	ands	r3, r2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0af      	beq.n	80038ba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395a:	4b2d      	ldr	r3, [pc, #180]	@ (8003a10 <HAL_RCC_OscConfig+0x5e8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003966:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	21f8      	movs	r1, #248	@ 0xf8
 8003970:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003978:	fa91 f1a1 	rbit	r1, r1
 800397c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003980:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003984:	fab1 f181 	clz	r1, r1
 8003988:	b2c9      	uxtb	r1, r1
 800398a:	408b      	lsls	r3, r1
 800398c:	4920      	ldr	r1, [pc, #128]	@ (8003a10 <HAL_RCC_OscConfig+0x5e8>)
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]
 8003992:	e06c      	b.n	8003a6e <HAL_RCC_OscConfig+0x646>
 8003994:	2301      	movs	r3, #1
 8003996:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800399e:	fa93 f3a3 	rbit	r3, r3
 80039a2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80039a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039aa:	fab3 f383 	clz	r3, r3
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80039b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	461a      	mov	r2, r3
 80039bc:	2300      	movs	r3, #0
 80039be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fe fa3c 	bl	8001e3c <HAL_GetTick>
 80039c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c8:	e00a      	b.n	80039e0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ca:	f7fe fa37 	bl	8001e3c <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d902      	bls.n	80039e0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	f000 bd5a 	b.w	8004494 <HAL_RCC_OscConfig+0x106c>
 80039e0:	2302      	movs	r3, #2
 80039e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80039ea:	fa93 f3a3 	rbit	r3, r3
 80039ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80039f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d104      	bne.n	8003a14 <HAL_RCC_OscConfig+0x5ec>
 8003a0a:	4b01      	ldr	r3, [pc, #4]	@ (8003a10 <HAL_RCC_OscConfig+0x5e8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	e015      	b.n	8003a3c <HAL_RCC_OscConfig+0x614>
 8003a10:	40021000 	.word	0x40021000
 8003a14:	2302      	movs	r3, #2
 8003a16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003a26:	2302      	movs	r3, #2
 8003a28:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003a2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003a38:	4bc8      	ldr	r3, [pc, #800]	@ (8003d5c <HAL_RCC_OscConfig+0x934>)
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003a42:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003a46:	fa92 f2a2 	rbit	r2, r2
 8003a4a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003a4e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003a52:	fab2 f282 	clz	r2, r2
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	f042 0220 	orr.w	r2, r2, #32
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	f002 021f 	and.w	r2, r2, #31
 8003a62:	2101      	movs	r1, #1
 8003a64:	fa01 f202 	lsl.w	r2, r1, r2
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1ad      	bne.n	80039ca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 8110 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d079      	beq.n	8003b88 <HAL_RCC_OscConfig+0x760>
 8003a94:	2301      	movs	r3, #1
 8003a96:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4bab      	ldr	r3, [pc, #684]	@ (8003d60 <HAL_RCC_OscConfig+0x938>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2301      	movs	r3, #1
 8003abc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003abe:	f7fe f9bd 	bl	8001e3c <HAL_GetTick>
 8003ac2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac8:	f7fe f9b8 	bl	8001e3c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d902      	bls.n	8003ade <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	f000 bcdb 	b.w	8004494 <HAL_RCC_OscConfig+0x106c>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003ae8:	fa93 f3a3 	rbit	r3, r3
 8003aec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003af8:	2202      	movs	r2, #2
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b00:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	fa93 f2a3 	rbit	r2, r3
 8003b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	fa93 f2a3 	rbit	r2, r3
 8003b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003b36:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b38:	4b88      	ldr	r3, [pc, #544]	@ (8003d5c <HAL_RCC_OscConfig+0x934>)
 8003b3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003b44:	2102      	movs	r1, #2
 8003b46:	6019      	str	r1, [r3, #0]
 8003b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	fa93 f1a3 	rbit	r1, r3
 8003b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b5a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003b5e:	6019      	str	r1, [r3, #0]
  return result;
 8003b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b64:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	fab3 f383 	clz	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f003 031f 	and.w	r3, r3, #31
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0a0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x6a0>
 8003b86:	e08d      	b.n	8003ca4 <HAL_RCC_OscConfig+0x87c>
 8003b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b8c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	fa93 f2a3 	rbit	r2, r3
 8003ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003baa:	601a      	str	r2, [r3, #0]
  return result;
 8003bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003bb4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b68      	ldr	r3, [pc, #416]	@ (8003d60 <HAL_RCC_OscConfig+0x938>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bca:	f7fe f937 	bl	8001e3c <HAL_GetTick>
 8003bce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd2:	e00a      	b.n	8003bea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd4:	f7fe f932 	bl	8001e3c <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d902      	bls.n	8003bea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	f000 bc55 	b.w	8004494 <HAL_RCC_OscConfig+0x106c>
 8003bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bfa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	fa93 f2a3 	rbit	r2, r3
 8003c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c08:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c12:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003c16:	2202      	movs	r2, #2
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	fa93 f2a3 	rbit	r2, r3
 8003c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c36:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c42:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	fa93 f2a3 	rbit	r2, r3
 8003c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c50:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003c54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c56:	4b41      	ldr	r3, [pc, #260]	@ (8003d5c <HAL_RCC_OscConfig+0x934>)
 8003c58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c5e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003c62:	2102      	movs	r1, #2
 8003c64:	6019      	str	r1, [r3, #0]
 8003c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	fa93 f1a3 	rbit	r1, r3
 8003c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c78:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003c7c:	6019      	str	r1, [r3, #0]
  return result;
 8003c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c82:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	fab3 f383 	clz	r3, r3
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	2101      	movs	r1, #1
 8003c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d197      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 81a1 	beq.w	8003ffc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc0:	4b26      	ldr	r3, [pc, #152]	@ (8003d5c <HAL_RCC_OscConfig+0x934>)
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d116      	bne.n	8003cfa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ccc:	4b23      	ldr	r3, [pc, #140]	@ (8003d5c <HAL_RCC_OscConfig+0x934>)
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	4a22      	ldr	r2, [pc, #136]	@ (8003d5c <HAL_RCC_OscConfig+0x934>)
 8003cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	61d3      	str	r3, [r2, #28]
 8003cd8:	4b20      	ldr	r3, [pc, #128]	@ (8003d5c <HAL_RCC_OscConfig+0x934>)
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cee:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003cf2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8003d64 <HAL_RCC_OscConfig+0x93c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d11a      	bne.n	8003d3c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d06:	4b17      	ldr	r3, [pc, #92]	@ (8003d64 <HAL_RCC_OscConfig+0x93c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a16      	ldr	r2, [pc, #88]	@ (8003d64 <HAL_RCC_OscConfig+0x93c>)
 8003d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d12:	f7fe f893 	bl	8001e3c <HAL_GetTick>
 8003d16:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1a:	e009      	b.n	8003d30 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1c:	f7fe f88e 	bl	8001e3c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b64      	cmp	r3, #100	@ 0x64
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e3b1      	b.n	8004494 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d30:	4b0c      	ldr	r3, [pc, #48]	@ (8003d64 <HAL_RCC_OscConfig+0x93c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0ef      	beq.n	8003d1c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d10d      	bne.n	8003d68 <HAL_RCC_OscConfig+0x940>
 8003d4c:	4b03      	ldr	r3, [pc, #12]	@ (8003d5c <HAL_RCC_OscConfig+0x934>)
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	4a02      	ldr	r2, [pc, #8]	@ (8003d5c <HAL_RCC_OscConfig+0x934>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	6213      	str	r3, [r2, #32]
 8003d58:	e03c      	b.n	8003dd4 <HAL_RCC_OscConfig+0x9ac>
 8003d5a:	bf00      	nop
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	10908120 	.word	0x10908120
 8003d64:	40007000 	.word	0x40007000
 8003d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10c      	bne.n	8003d92 <HAL_RCC_OscConfig+0x96a>
 8003d78:	4bc1      	ldr	r3, [pc, #772]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	4ac0      	ldr	r2, [pc, #768]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	6213      	str	r3, [r2, #32]
 8003d84:	4bbe      	ldr	r3, [pc, #760]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	4abd      	ldr	r2, [pc, #756]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003d8a:	f023 0304 	bic.w	r3, r3, #4
 8003d8e:	6213      	str	r3, [r2, #32]
 8003d90:	e020      	b.n	8003dd4 <HAL_RCC_OscConfig+0x9ac>
 8003d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2b05      	cmp	r3, #5
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x994>
 8003da2:	4bb7      	ldr	r3, [pc, #732]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	4ab6      	ldr	r2, [pc, #728]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003da8:	f043 0304 	orr.w	r3, r3, #4
 8003dac:	6213      	str	r3, [r2, #32]
 8003dae:	4bb4      	ldr	r3, [pc, #720]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	4ab3      	ldr	r2, [pc, #716]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003db4:	f043 0301 	orr.w	r3, r3, #1
 8003db8:	6213      	str	r3, [r2, #32]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0x9ac>
 8003dbc:	4bb0      	ldr	r3, [pc, #704]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	4aaf      	ldr	r2, [pc, #700]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	6213      	str	r3, [r2, #32]
 8003dc8:	4bad      	ldr	r3, [pc, #692]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	4aac      	ldr	r2, [pc, #688]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003dce:	f023 0304 	bic.w	r3, r3, #4
 8003dd2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 8081 	beq.w	8003ee8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de6:	f7fe f829 	bl	8001e3c <HAL_GetTick>
 8003dea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dee:	e00b      	b.n	8003e08 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df0:	f7fe f824 	bl	8001e3c <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e345      	b.n	8004494 <HAL_RCC_OscConfig+0x106c>
 8003e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e0c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e10:	2202      	movs	r2, #2
 8003e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e18:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	fa93 f2a3 	rbit	r2, r3
 8003e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e26:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e30:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003e34:	2202      	movs	r2, #2
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e3c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	fa93 f2a3 	rbit	r2, r3
 8003e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e4a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003e4e:	601a      	str	r2, [r3, #0]
  return result;
 8003e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e54:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003e58:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	f043 0302 	orr.w	r3, r3, #2
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d102      	bne.n	8003e74 <HAL_RCC_OscConfig+0xa4c>
 8003e6e:	4b84      	ldr	r3, [pc, #528]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	e013      	b.n	8003e9c <HAL_RCC_OscConfig+0xa74>
 8003e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e78:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e84:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	fa93 f2a3 	rbit	r2, r3
 8003e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e92:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	4b79      	ldr	r3, [pc, #484]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ea0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	6011      	str	r1, [r2, #0]
 8003ea8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003eac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	fa92 f1a2 	rbit	r1, r2
 8003eb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003eba:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003ebe:	6011      	str	r1, [r2, #0]
  return result;
 8003ec0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ec4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003ec8:	6812      	ldr	r2, [r2, #0]
 8003eca:	fab2 f282 	clz	r2, r2
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	f002 021f 	and.w	r2, r2, #31
 8003eda:	2101      	movs	r1, #1
 8003edc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d084      	beq.n	8003df0 <HAL_RCC_OscConfig+0x9c8>
 8003ee6:	e07f      	b.n	8003fe8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee8:	f7fd ffa8 	bl	8001e3c <HAL_GetTick>
 8003eec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef0:	e00b      	b.n	8003f0a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef2:	f7fd ffa3 	bl	8001e3c <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e2c4      	b.n	8004494 <HAL_RCC_OscConfig+0x106c>
 8003f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f0e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003f12:	2202      	movs	r2, #2
 8003f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f1a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	fa93 f2a3 	rbit	r2, r3
 8003f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f28:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f32:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f36:	2202      	movs	r2, #2
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f3e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	fa93 f2a3 	rbit	r2, r3
 8003f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f50:	601a      	str	r2, [r3, #0]
  return result;
 8003f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f56:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f5a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f5c:	fab3 f383 	clz	r3, r3
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	f043 0302 	orr.w	r3, r3, #2
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d102      	bne.n	8003f76 <HAL_RCC_OscConfig+0xb4e>
 8003f70:	4b43      	ldr	r3, [pc, #268]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	e013      	b.n	8003f9e <HAL_RCC_OscConfig+0xb76>
 8003f76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f7a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003f7e:	2202      	movs	r2, #2
 8003f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f86:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	fa93 f2a3 	rbit	r2, r3
 8003f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f94:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	4b39      	ldr	r3, [pc, #228]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fa2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	6011      	str	r1, [r2, #0]
 8003faa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fae:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	fa92 f1a2 	rbit	r1, r2
 8003fb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fbc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003fc0:	6011      	str	r1, [r2, #0]
  return result;
 8003fc2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fc6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	fab2 f282 	clz	r2, r2
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	f002 021f 	and.w	r2, r2, #31
 8003fdc:	2101      	movs	r1, #1
 8003fde:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d184      	bne.n	8003ef2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fe8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d105      	bne.n	8003ffc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff0:	4b23      	ldr	r3, [pc, #140]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	4a22      	ldr	r2, [pc, #136]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8003ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ffa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004000:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 8242 	beq.w	8004492 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800400e:	4b1c      	ldr	r3, [pc, #112]	@ (8004080 <HAL_RCC_OscConfig+0xc58>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	2b08      	cmp	r3, #8
 8004018:	f000 8213 	beq.w	8004442 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004020:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	2b02      	cmp	r3, #2
 800402a:	f040 8162 	bne.w	80042f2 <HAL_RCC_OscConfig+0xeca>
 800402e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004032:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004036:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800403a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004040:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	fa93 f2a3 	rbit	r2, r3
 800404a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004052:	601a      	str	r2, [r3, #0]
  return result;
 8004054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004058:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800405c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405e:	fab3 f383 	clz	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004068:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	461a      	mov	r2, r3
 8004070:	2300      	movs	r3, #0
 8004072:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7fd fee2 	bl	8001e3c <HAL_GetTick>
 8004078:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800407c:	e00c      	b.n	8004098 <HAL_RCC_OscConfig+0xc70>
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004084:	f7fd feda 	bl	8001e3c <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e1fd      	b.n	8004494 <HAL_RCC_OscConfig+0x106c>
 8004098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800409c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80040a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040aa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	fa93 f2a3 	rbit	r2, r3
 80040b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80040bc:	601a      	str	r2, [r3, #0]
  return result;
 80040be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80040c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c8:	fab3 f383 	clz	r3, r3
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d102      	bne.n	80040e2 <HAL_RCC_OscConfig+0xcba>
 80040dc:	4bb0      	ldr	r3, [pc, #704]	@ (80043a0 <HAL_RCC_OscConfig+0xf78>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	e027      	b.n	8004132 <HAL_RCC_OscConfig+0xd0a>
 80040e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040e6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80040ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	fa93 f2a3 	rbit	r2, r3
 80040fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004102:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800410c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004110:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800411a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	fa93 f2a3 	rbit	r2, r3
 8004124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004128:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	4b9c      	ldr	r3, [pc, #624]	@ (80043a0 <HAL_RCC_OscConfig+0xf78>)
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004136:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800413a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800413e:	6011      	str	r1, [r2, #0]
 8004140:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004144:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	fa92 f1a2 	rbit	r1, r2
 800414e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004152:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004156:	6011      	str	r1, [r2, #0]
  return result;
 8004158:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800415c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004160:	6812      	ldr	r2, [r2, #0]
 8004162:	fab2 f282 	clz	r2, r2
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	f042 0220 	orr.w	r2, r2, #32
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	f002 021f 	and.w	r2, r2, #31
 8004172:	2101      	movs	r1, #1
 8004174:	fa01 f202 	lsl.w	r2, r1, r2
 8004178:	4013      	ands	r3, r2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d182      	bne.n	8004084 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800417e:	4b88      	ldr	r3, [pc, #544]	@ (80043a0 <HAL_RCC_OscConfig+0xf78>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800418a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004196:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	430b      	orrs	r3, r1
 80041a0:	497f      	ldr	r1, [pc, #508]	@ (80043a0 <HAL_RCC_OscConfig+0xf78>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	604b      	str	r3, [r1, #4]
 80041a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041aa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80041ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	fa93 f2a3 	rbit	r2, r3
 80041c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80041ca:	601a      	str	r2, [r3, #0]
  return result;
 80041cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80041d4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041d6:	fab3 f383 	clz	r3, r3
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80041e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	461a      	mov	r2, r3
 80041e8:	2301      	movs	r3, #1
 80041ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ec:	f7fd fe26 	bl	8001e3c <HAL_GetTick>
 80041f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041f4:	e009      	b.n	800420a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f6:	f7fd fe21 	bl	8001e3c <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e144      	b.n	8004494 <HAL_RCC_OscConfig+0x106c>
 800420a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800420e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004212:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800421c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	fa93 f2a3 	rbit	r2, r3
 8004226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800422a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800422e:	601a      	str	r2, [r3, #0]
  return result;
 8004230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004234:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004238:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800423a:	fab3 f383 	clz	r3, r3
 800423e:	b2db      	uxtb	r3, r3
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b01      	cmp	r3, #1
 800424c:	d102      	bne.n	8004254 <HAL_RCC_OscConfig+0xe2c>
 800424e:	4b54      	ldr	r3, [pc, #336]	@ (80043a0 <HAL_RCC_OscConfig+0xf78>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	e027      	b.n	80042a4 <HAL_RCC_OscConfig+0xe7c>
 8004254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004258:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800425c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004266:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	fa93 f2a3 	rbit	r2, r3
 8004270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004274:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004282:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800428c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	fa93 f2a3 	rbit	r2, r3
 8004296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	4b3f      	ldr	r3, [pc, #252]	@ (80043a0 <HAL_RCC_OscConfig+0xf78>)
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042a8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80042ac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80042b0:	6011      	str	r1, [r2, #0]
 80042b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042b6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	fa92 f1a2 	rbit	r1, r2
 80042c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042c4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80042c8:	6011      	str	r1, [r2, #0]
  return result;
 80042ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042ce:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	fab2 f282 	clz	r2, r2
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	f042 0220 	orr.w	r2, r2, #32
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	f002 021f 	and.w	r2, r2, #31
 80042e4:	2101      	movs	r1, #1
 80042e6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ea:	4013      	ands	r3, r2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d082      	beq.n	80041f6 <HAL_RCC_OscConfig+0xdce>
 80042f0:	e0cf      	b.n	8004492 <HAL_RCC_OscConfig+0x106a>
 80042f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80042fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004304:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	fa93 f2a3 	rbit	r2, r3
 800430e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004312:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004316:	601a      	str	r2, [r3, #0]
  return result;
 8004318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800431c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004320:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004322:	fab3 f383 	clz	r3, r3
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800432c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	461a      	mov	r2, r3
 8004334:	2300      	movs	r3, #0
 8004336:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fd fd80 	bl	8001e3c <HAL_GetTick>
 800433c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004340:	e009      	b.n	8004356 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004342:	f7fd fd7b 	bl	8001e3c <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e09e      	b.n	8004494 <HAL_RCC_OscConfig+0x106c>
 8004356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800435a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800435e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004362:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004368:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	fa93 f2a3 	rbit	r2, r3
 8004372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004376:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800437a:	601a      	str	r2, [r3, #0]
  return result;
 800437c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004380:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004384:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b01      	cmp	r3, #1
 8004398:	d104      	bne.n	80043a4 <HAL_RCC_OscConfig+0xf7c>
 800439a:	4b01      	ldr	r3, [pc, #4]	@ (80043a0 <HAL_RCC_OscConfig+0xf78>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	e029      	b.n	80043f4 <HAL_RCC_OscConfig+0xfcc>
 80043a0:	40021000 	.word	0x40021000
 80043a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80043ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	fa93 f2a3 	rbit	r2, r3
 80043c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ce:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80043d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043dc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	fa93 f2a3 	rbit	r2, r3
 80043e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ea:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	4b2b      	ldr	r3, [pc, #172]	@ (80044a0 <HAL_RCC_OscConfig+0x1078>)
 80043f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043f8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80043fc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004400:	6011      	str	r1, [r2, #0]
 8004402:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004406:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	fa92 f1a2 	rbit	r1, r2
 8004410:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004414:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004418:	6011      	str	r1, [r2, #0]
  return result;
 800441a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800441e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	fab2 f282 	clz	r2, r2
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	f042 0220 	orr.w	r2, r2, #32
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	f002 021f 	and.w	r2, r2, #31
 8004434:	2101      	movs	r1, #1
 8004436:	fa01 f202 	lsl.w	r2, r1, r2
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d180      	bne.n	8004342 <HAL_RCC_OscConfig+0xf1a>
 8004440:	e027      	b.n	8004492 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004446:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e01e      	b.n	8004494 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004456:	4b12      	ldr	r3, [pc, #72]	@ (80044a0 <HAL_RCC_OscConfig+0x1078>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800445e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004462:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800446a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	429a      	cmp	r2, r3
 8004474:	d10b      	bne.n	800448e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004476:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800447a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800447e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004482:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800448a:	429a      	cmp	r2, r3
 800448c:	d001      	beq.n	8004492 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40021000 	.word	0x40021000

080044a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b09e      	sub	sp, #120	@ 0x78
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e162      	b.n	8004782 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044bc:	4b90      	ldr	r3, [pc, #576]	@ (8004700 <HAL_RCC_ClockConfig+0x25c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d910      	bls.n	80044ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ca:	4b8d      	ldr	r3, [pc, #564]	@ (8004700 <HAL_RCC_ClockConfig+0x25c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 0207 	bic.w	r2, r3, #7
 80044d2:	498b      	ldr	r1, [pc, #556]	@ (8004700 <HAL_RCC_ClockConfig+0x25c>)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044da:	4b89      	ldr	r3, [pc, #548]	@ (8004700 <HAL_RCC_ClockConfig+0x25c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d001      	beq.n	80044ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e14a      	b.n	8004782 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f8:	4b82      	ldr	r3, [pc, #520]	@ (8004704 <HAL_RCC_ClockConfig+0x260>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	497f      	ldr	r1, [pc, #508]	@ (8004704 <HAL_RCC_ClockConfig+0x260>)
 8004506:	4313      	orrs	r3, r2
 8004508:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 80dc 	beq.w	80046d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d13c      	bne.n	800459a <HAL_RCC_ClockConfig+0xf6>
 8004520:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004524:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004528:	fa93 f3a3 	rbit	r3, r3
 800452c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800452e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004530:	fab3 f383 	clz	r3, r3
 8004534:	b2db      	uxtb	r3, r3
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	b2db      	uxtb	r3, r3
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b01      	cmp	r3, #1
 8004542:	d102      	bne.n	800454a <HAL_RCC_ClockConfig+0xa6>
 8004544:	4b6f      	ldr	r3, [pc, #444]	@ (8004704 <HAL_RCC_ClockConfig+0x260>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	e00f      	b.n	800456a <HAL_RCC_ClockConfig+0xc6>
 800454a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800454e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004550:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	667b      	str	r3, [r7, #100]	@ 0x64
 8004558:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800455c:	663b      	str	r3, [r7, #96]	@ 0x60
 800455e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004560:	fa93 f3a3 	rbit	r3, r3
 8004564:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004566:	4b67      	ldr	r3, [pc, #412]	@ (8004704 <HAL_RCC_ClockConfig+0x260>)
 8004568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800456e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004570:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004572:	fa92 f2a2 	rbit	r2, r2
 8004576:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004578:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800457a:	fab2 f282 	clz	r2, r2
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	f042 0220 	orr.w	r2, r2, #32
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	f002 021f 	and.w	r2, r2, #31
 800458a:	2101      	movs	r1, #1
 800458c:	fa01 f202 	lsl.w	r2, r1, r2
 8004590:	4013      	ands	r3, r2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d17b      	bne.n	800468e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e0f3      	b.n	8004782 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d13c      	bne.n	800461c <HAL_RCC_ClockConfig+0x178>
 80045a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045aa:	fa93 f3a3 	rbit	r3, r3
 80045ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80045b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	095b      	lsrs	r3, r3, #5
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d102      	bne.n	80045cc <HAL_RCC_ClockConfig+0x128>
 80045c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004704 <HAL_RCC_ClockConfig+0x260>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	e00f      	b.n	80045ec <HAL_RCC_ClockConfig+0x148>
 80045cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d4:	fa93 f3a3 	rbit	r3, r3
 80045d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045de:	643b      	str	r3, [r7, #64]	@ 0x40
 80045e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045e2:	fa93 f3a3 	rbit	r3, r3
 80045e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045e8:	4b46      	ldr	r3, [pc, #280]	@ (8004704 <HAL_RCC_ClockConfig+0x260>)
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045f0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80045f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80045f4:	fa92 f2a2 	rbit	r2, r2
 80045f8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80045fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045fc:	fab2 f282 	clz	r2, r2
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	f042 0220 	orr.w	r2, r2, #32
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	f002 021f 	and.w	r2, r2, #31
 800460c:	2101      	movs	r1, #1
 800460e:	fa01 f202 	lsl.w	r2, r1, r2
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d13a      	bne.n	800468e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0b2      	b.n	8004782 <HAL_RCC_ClockConfig+0x2de>
 800461c:	2302      	movs	r3, #2
 800461e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004622:	fa93 f3a3 	rbit	r3, r3
 8004626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462a:	fab3 f383 	clz	r3, r3
 800462e:	b2db      	uxtb	r3, r3
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	b2db      	uxtb	r3, r3
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b01      	cmp	r3, #1
 800463c:	d102      	bne.n	8004644 <HAL_RCC_ClockConfig+0x1a0>
 800463e:	4b31      	ldr	r3, [pc, #196]	@ (8004704 <HAL_RCC_ClockConfig+0x260>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	e00d      	b.n	8004660 <HAL_RCC_ClockConfig+0x1bc>
 8004644:	2302      	movs	r3, #2
 8004646:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464a:	fa93 f3a3 	rbit	r3, r3
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004650:	2302      	movs	r3, #2
 8004652:	623b      	str	r3, [r7, #32]
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	fa93 f3a3 	rbit	r3, r3
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	4b29      	ldr	r3, [pc, #164]	@ (8004704 <HAL_RCC_ClockConfig+0x260>)
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	2202      	movs	r2, #2
 8004662:	61ba      	str	r2, [r7, #24]
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	fa92 f2a2 	rbit	r2, r2
 800466a:	617a      	str	r2, [r7, #20]
  return result;
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	fab2 f282 	clz	r2, r2
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	f042 0220 	orr.w	r2, r2, #32
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	f002 021f 	and.w	r2, r2, #31
 800467e:	2101      	movs	r1, #1
 8004680:	fa01 f202 	lsl.w	r2, r1, r2
 8004684:	4013      	ands	r3, r2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e079      	b.n	8004782 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800468e:	4b1d      	ldr	r3, [pc, #116]	@ (8004704 <HAL_RCC_ClockConfig+0x260>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f023 0203 	bic.w	r2, r3, #3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	491a      	ldr	r1, [pc, #104]	@ (8004704 <HAL_RCC_ClockConfig+0x260>)
 800469c:	4313      	orrs	r3, r2
 800469e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046a0:	f7fd fbcc 	bl	8001e3c <HAL_GetTick>
 80046a4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a6:	e00a      	b.n	80046be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a8:	f7fd fbc8 	bl	8001e3c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e061      	b.n	8004782 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046be:	4b11      	ldr	r3, [pc, #68]	@ (8004704 <HAL_RCC_ClockConfig+0x260>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 020c 	and.w	r2, r3, #12
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d1eb      	bne.n	80046a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004700 <HAL_RCC_ClockConfig+0x25c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d214      	bcs.n	8004708 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b08      	ldr	r3, [pc, #32]	@ (8004700 <HAL_RCC_ClockConfig+0x25c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 0207 	bic.w	r2, r3, #7
 80046e6:	4906      	ldr	r1, [pc, #24]	@ (8004700 <HAL_RCC_ClockConfig+0x25c>)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ee:	4b04      	ldr	r3, [pc, #16]	@ (8004700 <HAL_RCC_ClockConfig+0x25c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e040      	b.n	8004782 <HAL_RCC_ClockConfig+0x2de>
 8004700:	40022000 	.word	0x40022000
 8004704:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004714:	4b1d      	ldr	r3, [pc, #116]	@ (800478c <HAL_RCC_ClockConfig+0x2e8>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	491a      	ldr	r1, [pc, #104]	@ (800478c <HAL_RCC_ClockConfig+0x2e8>)
 8004722:	4313      	orrs	r3, r2
 8004724:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004732:	4b16      	ldr	r3, [pc, #88]	@ (800478c <HAL_RCC_ClockConfig+0x2e8>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	4912      	ldr	r1, [pc, #72]	@ (800478c <HAL_RCC_ClockConfig+0x2e8>)
 8004742:	4313      	orrs	r3, r2
 8004744:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004746:	f000 f829 	bl	800479c <HAL_RCC_GetSysClockFreq>
 800474a:	4601      	mov	r1, r0
 800474c:	4b0f      	ldr	r3, [pc, #60]	@ (800478c <HAL_RCC_ClockConfig+0x2e8>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004754:	22f0      	movs	r2, #240	@ 0xf0
 8004756:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	fa92 f2a2 	rbit	r2, r2
 800475e:	60fa      	str	r2, [r7, #12]
  return result;
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	fab2 f282 	clz	r2, r2
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	40d3      	lsrs	r3, r2
 800476a:	4a09      	ldr	r2, [pc, #36]	@ (8004790 <HAL_RCC_ClockConfig+0x2ec>)
 800476c:	5cd3      	ldrb	r3, [r2, r3]
 800476e:	fa21 f303 	lsr.w	r3, r1, r3
 8004772:	4a08      	ldr	r2, [pc, #32]	@ (8004794 <HAL_RCC_ClockConfig+0x2f0>)
 8004774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004776:	4b08      	ldr	r3, [pc, #32]	@ (8004798 <HAL_RCC_ClockConfig+0x2f4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f7fd fb1a 	bl	8001db4 <HAL_InitTick>
  
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3778      	adds	r7, #120	@ 0x78
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40021000 	.word	0x40021000
 8004790:	0800af08 	.word	0x0800af08
 8004794:	20000090 	.word	0x20000090
 8004798:	20000094 	.word	0x20000094

0800479c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	2300      	movs	r3, #0
 80047b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80047b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x94>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d002      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x30>
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d003      	beq.n	80047d2 <HAL_RCC_GetSysClockFreq+0x36>
 80047ca:	e026      	b.n	800481a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047cc:	4b19      	ldr	r3, [pc, #100]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x98>)
 80047ce:	613b      	str	r3, [r7, #16]
      break;
 80047d0:	e026      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	0c9b      	lsrs	r3, r3, #18
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	4a17      	ldr	r2, [pc, #92]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x9c>)
 80047dc:	5cd3      	ldrb	r3, [r2, r3]
 80047de:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80047e0:	4b13      	ldr	r3, [pc, #76]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x94>)
 80047e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	4a14      	ldr	r2, [pc, #80]	@ (800483c <HAL_RCC_GetSysClockFreq+0xa0>)
 80047ea:	5cd3      	ldrb	r3, [r2, r3]
 80047ec:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x98>)
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	fb02 f303 	mul.w	r3, r2, r3
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	e004      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a0c      	ldr	r2, [pc, #48]	@ (8004840 <HAL_RCC_GetSysClockFreq+0xa4>)
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	613b      	str	r3, [r7, #16]
      break;
 8004818:	e002      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800481a:	4b06      	ldr	r3, [pc, #24]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x98>)
 800481c:	613b      	str	r3, [r7, #16]
      break;
 800481e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004820:	693b      	ldr	r3, [r7, #16]
}
 8004822:	4618      	mov	r0, r3
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000
 8004834:	007a1200 	.word	0x007a1200
 8004838:	0800af20 	.word	0x0800af20
 800483c:	0800af30 	.word	0x0800af30
 8004840:	003d0900 	.word	0x003d0900

08004844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004848:	4b03      	ldr	r3, [pc, #12]	@ (8004858 <HAL_RCC_GetHCLKFreq+0x14>)
 800484a:	681b      	ldr	r3, [r3, #0]
}
 800484c:	4618      	mov	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000090 	.word	0x20000090

0800485c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004862:	f7ff ffef 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 8004866:	4601      	mov	r1, r0
 8004868:	4b0b      	ldr	r3, [pc, #44]	@ (8004898 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004870:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004874:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	fa92 f2a2 	rbit	r2, r2
 800487c:	603a      	str	r2, [r7, #0]
  return result;
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	fab2 f282 	clz	r2, r2
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	40d3      	lsrs	r3, r2
 8004888:	4a04      	ldr	r2, [pc, #16]	@ (800489c <HAL_RCC_GetPCLK1Freq+0x40>)
 800488a:	5cd3      	ldrb	r3, [r2, r3]
 800488c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40021000 	.word	0x40021000
 800489c:	0800af18 	.word	0x0800af18

080048a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80048a6:	f7ff ffcd 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 80048aa:	4601      	mov	r1, r0
 80048ac:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80048b4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80048b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	fa92 f2a2 	rbit	r2, r2
 80048c0:	603a      	str	r2, [r7, #0]
  return result;
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	fab2 f282 	clz	r2, r2
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	40d3      	lsrs	r3, r2
 80048cc:	4a04      	ldr	r2, [pc, #16]	@ (80048e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80048ce:	5cd3      	ldrb	r3, [r2, r3]
 80048d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000
 80048e0:	0800af18 	.word	0x0800af18

080048e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b092      	sub	sp, #72	@ 0x48
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80048f4:	2300      	movs	r3, #0
 80048f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 80d4 	beq.w	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004908:	4b4e      	ldr	r3, [pc, #312]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10e      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004914:	4b4b      	ldr	r3, [pc, #300]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	4a4a      	ldr	r2, [pc, #296]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800491a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800491e:	61d3      	str	r3, [r2, #28]
 8004920:	4b48      	ldr	r3, [pc, #288]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492c:	2301      	movs	r3, #1
 800492e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004932:	4b45      	ldr	r3, [pc, #276]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d118      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800493e:	4b42      	ldr	r3, [pc, #264]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a41      	ldr	r2, [pc, #260]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004948:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800494a:	f7fd fa77 	bl	8001e3c <HAL_GetTick>
 800494e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004950:	e008      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004952:	f7fd fa73 	bl	8001e3c <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b64      	cmp	r3, #100	@ 0x64
 800495e:	d901      	bls.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e169      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004964:	4b38      	ldr	r3, [pc, #224]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004970:	4b34      	ldr	r3, [pc, #208]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004978:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800497a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8084 	beq.w	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800498a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800498c:	429a      	cmp	r2, r3
 800498e:	d07c      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004990:	4b2c      	ldr	r3, [pc, #176]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004998:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800499a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800499e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80049a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049aa:	fab3 f383 	clz	r3, r3
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	4b26      	ldr	r3, [pc, #152]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	461a      	mov	r2, r3
 80049ba:	2301      	movs	r3, #1
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80049c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c6:	fa93 f3a3 	rbit	r3, r3
 80049ca:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80049cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049ce:	fab3 f383 	clz	r3, r3
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	4b1d      	ldr	r3, [pc, #116]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	461a      	mov	r2, r3
 80049de:	2300      	movs	r3, #0
 80049e0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80049e2:	4a18      	ldr	r2, [pc, #96]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80049e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d04b      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f2:	f7fd fa23 	bl	8001e3c <HAL_GetTick>
 80049f6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f8:	e00a      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fa:	f7fd fa1f 	bl	8001e3c <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e113      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004a10:	2302      	movs	r3, #2
 8004a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a16:	fa93 f3a3 	rbit	r3, r3
 8004a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	623b      	str	r3, [r7, #32]
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	fa93 f3a3 	rbit	r3, r3
 8004a26:	61fb      	str	r3, [r7, #28]
  return result;
 8004a28:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2a:	fab3 f383 	clz	r3, r3
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	095b      	lsrs	r3, r3, #5
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f043 0302 	orr.w	r3, r3, #2
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d108      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004a3e:	4b01      	ldr	r3, [pc, #4]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	e00d      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004a44:	40021000 	.word	0x40021000
 8004a48:	40007000 	.word	0x40007000
 8004a4c:	10908100 	.word	0x10908100
 8004a50:	2302      	movs	r3, #2
 8004a52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	fa93 f3a3 	rbit	r3, r3
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	4b78      	ldr	r3, [pc, #480]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	2202      	movs	r2, #2
 8004a62:	613a      	str	r2, [r7, #16]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	fa92 f2a2 	rbit	r2, r2
 8004a6a:	60fa      	str	r2, [r7, #12]
  return result;
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	fab2 f282 	clz	r2, r2
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	f002 021f 	and.w	r2, r2, #31
 8004a7e:	2101      	movs	r1, #1
 8004a80:	fa01 f202 	lsl.w	r2, r1, r2
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0b7      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004a8a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	496a      	ldr	r1, [pc, #424]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa4:	4b66      	ldr	r3, [pc, #408]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	4a65      	ldr	r2, [pc, #404]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004abc:	4b60      	ldr	r3, [pc, #384]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac0:	f023 0203 	bic.w	r2, r3, #3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	495d      	ldr	r1, [pc, #372]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d008      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ada:	4b59      	ldr	r3, [pc, #356]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ade:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	4956      	ldr	r1, [pc, #344]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004af8:	4b51      	ldr	r3, [pc, #324]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	494e      	ldr	r1, [pc, #312]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d008      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b16:	4b4a      	ldr	r3, [pc, #296]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1a:	f023 0210 	bic.w	r2, r3, #16
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	4947      	ldr	r1, [pc, #284]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004b34:	4b42      	ldr	r3, [pc, #264]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b40:	493f      	ldr	r1, [pc, #252]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d008      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b52:	4b3b      	ldr	r3, [pc, #236]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b56:	f023 0220 	bic.w	r2, r3, #32
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	4938      	ldr	r1, [pc, #224]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d008      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b70:	4b33      	ldr	r3, [pc, #204]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b74:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	4930      	ldr	r1, [pc, #192]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d008      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b8e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b92:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	4929      	ldr	r1, [pc, #164]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bac:	4b24      	ldr	r3, [pc, #144]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb8:	4921      	ldr	r1, [pc, #132]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d008      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004bca:	4b1d      	ldr	r3, [pc, #116]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bce:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd6:	491a      	ldr	r1, [pc, #104]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d008      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004be8:	4b15      	ldr	r3, [pc, #84]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bec:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf4:	4912      	ldr	r1, [pc, #72]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d008      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c06:	4b0e      	ldr	r3, [pc, #56]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c12:	490b      	ldr	r1, [pc, #44]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004c24:	4b06      	ldr	r3, [pc, #24]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c28:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c30:	4903      	ldr	r1, [pc, #12]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3748      	adds	r7, #72	@ 0x48
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40021000 	.word	0x40021000

08004c44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e040      	b.n	8004cd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fc fe76 	bl	8001958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2224      	movs	r2, #36	@ 0x24
 8004c70:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0201 	bic.w	r2, r2, #1
 8004c80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fe10 	bl	80058b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fc39 	bl	8005508 <UART_SetConfig>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e01b      	b.n	8004cd8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fe8f 	bl	80059f4 <UART_CheckIdleState>
 8004cd6:	4603      	mov	r3, r0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08a      	sub	sp, #40	@ 0x28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	4613      	mov	r3, r2
 8004cec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d165      	bne.n	8004dc2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <HAL_UART_Transmit_DMA+0x22>
 8004cfc:	88fb      	ldrh	r3, [r7, #6]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e05e      	b.n	8004dc4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	88fa      	ldrh	r2, [r7, #6]
 8004d10:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	88fa      	ldrh	r2, [r7, #6]
 8004d18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2221      	movs	r2, #33	@ 0x21
 8004d28:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d027      	beq.n	8004d82 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d36:	4a25      	ldr	r2, [pc, #148]	@ (8004dcc <HAL_UART_Transmit_DMA+0xec>)
 8004d38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3e:	4a24      	ldr	r2, [pc, #144]	@ (8004dd0 <HAL_UART_Transmit_DMA+0xf0>)
 8004d40:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d46:	4a23      	ldr	r2, [pc, #140]	@ (8004dd4 <HAL_UART_Transmit_DMA+0xf4>)
 8004d48:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4e:	2200      	movs	r2, #0
 8004d50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3328      	adds	r3, #40	@ 0x28
 8004d62:	461a      	mov	r2, r3
 8004d64:	88fb      	ldrh	r3, [r7, #6]
 8004d66:	f7fd f9cd 	bl	8002104 <HAL_DMA_Start_IT>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2210      	movs	r2, #16
 8004d74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e020      	b.n	8004dc4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2240      	movs	r2, #64	@ 0x40
 8004d88:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3308      	adds	r3, #8
 8004d90:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	e853 3f00 	ldrex	r3, [r3]
 8004d98:	613b      	str	r3, [r7, #16]
   return(result);
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3308      	adds	r3, #8
 8004da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004daa:	623a      	str	r2, [r7, #32]
 8004dac:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dae:	69f9      	ldr	r1, [r7, #28]
 8004db0:	6a3a      	ldr	r2, [r7, #32]
 8004db2:	e841 2300 	strex	r3, r2, [r1]
 8004db6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1e5      	bne.n	8004d8a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e000      	b.n	8004dc4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8004dc2:	2302      	movs	r3, #2
  }
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3728      	adds	r7, #40	@ 0x28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	08005d33 	.word	0x08005d33
 8004dd0:	08005dc7 	.word	0x08005dc7
 8004dd4:	08005de3 	.word	0x08005de3

08004dd8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b090      	sub	sp, #64	@ 0x40
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dec:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df8:	2b80      	cmp	r3, #128	@ 0x80
 8004dfa:	d139      	bne.n	8004e70 <HAL_UART_DMAStop+0x98>
 8004dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dfe:	2b21      	cmp	r3, #33	@ 0x21
 8004e00:	d136      	bne.n	8004e70 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3308      	adds	r3, #8
 8004e08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	e853 3f00 	ldrex	r3, [r3]
 8004e10:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3308      	adds	r3, #8
 8004e20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e2a:	e841 2300 	strex	r3, r2, [r1]
 8004e2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1e5      	bne.n	8004e02 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d015      	beq.n	8004e6a <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fd f9bd 	bl	80021c2 <HAL_DMA_Abort>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00d      	beq.n	8004e6a <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fd fad4 	bl	8002400 <HAL_DMA_GetError>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	d105      	bne.n	8004e6a <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2210      	movs	r2, #16
 8004e62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e044      	b.n	8004ef4 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fed7 	bl	8005c1e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7a:	2b40      	cmp	r3, #64	@ 0x40
 8004e7c:	d139      	bne.n	8004ef2 <HAL_UART_DMAStop+0x11a>
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e80:	2b22      	cmp	r3, #34	@ 0x22
 8004e82:	d136      	bne.n	8004ef2 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3308      	adds	r3, #8
 8004e8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ea4:	61ba      	str	r2, [r7, #24]
 8004ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	6979      	ldr	r1, [r7, #20]
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e5      	bne.n	8004e84 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d015      	beq.n	8004eec <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fd f97c 	bl	80021c2 <HAL_DMA_Abort>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00d      	beq.n	8004eec <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fd fa93 	bl	8002400 <HAL_DMA_GetError>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	d105      	bne.n	8004eec <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2210      	movs	r2, #16
 8004ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e003      	b.n	8004ef4 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 febc 	bl	8005c6a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3740      	adds	r7, #64	@ 0x40
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b0ba      	sub	sp, #232	@ 0xe8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f26:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d115      	bne.n	8004f64 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00f      	beq.n	8004f64 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d009      	beq.n	8004f64 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 82ab 	beq.w	80054b0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	4798      	blx	r3
      }
      return;
 8004f62:	e2a5      	b.n	80054b0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8117 	beq.w	800519c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004f7e:	4b85      	ldr	r3, [pc, #532]	@ (8005194 <HAL_UART_IRQHandler+0x298>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 810a 	beq.w	800519c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d011      	beq.n	8004fb8 <HAL_UART_IRQHandler+0xbc>
 8004f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00b      	beq.n	8004fb8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fae:	f043 0201 	orr.w	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d011      	beq.n	8004fe8 <HAL_UART_IRQHandler+0xec>
 8004fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00b      	beq.n	8004fe8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fde:	f043 0204 	orr.w	r2, r3, #4
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d011      	beq.n	8005018 <HAL_UART_IRQHandler+0x11c>
 8004ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00b      	beq.n	8005018 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2204      	movs	r2, #4
 8005006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800500e:	f043 0202 	orr.w	r2, r3, #2
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d017      	beq.n	8005054 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005028:	f003 0320 	and.w	r3, r3, #32
 800502c:	2b00      	cmp	r3, #0
 800502e:	d105      	bne.n	800503c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005034:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00b      	beq.n	8005054 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2208      	movs	r2, #8
 8005042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800504a:	f043 0208 	orr.w	r2, r3, #8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800505c:	2b00      	cmp	r3, #0
 800505e:	d012      	beq.n	8005086 <HAL_UART_IRQHandler+0x18a>
 8005060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005064:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00c      	beq.n	8005086 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800507c:	f043 0220 	orr.w	r2, r3, #32
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8211 	beq.w	80054b4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00d      	beq.n	80050ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800509e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d007      	beq.n	80050ba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ce:	2b40      	cmp	r3, #64	@ 0x40
 80050d0:	d005      	beq.n	80050de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d04f      	beq.n	800517e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fdc3 	bl	8005c6a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ee:	2b40      	cmp	r3, #64	@ 0x40
 80050f0:	d141      	bne.n	8005176 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3308      	adds	r3, #8
 80050f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005108:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800510c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005110:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3308      	adds	r3, #8
 800511a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800511e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800512a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1d9      	bne.n	80050f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005142:	2b00      	cmp	r3, #0
 8005144:	d013      	beq.n	800516e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800514a:	4a13      	ldr	r2, [pc, #76]	@ (8005198 <HAL_UART_IRQHandler+0x29c>)
 800514c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005152:	4618      	mov	r0, r3
 8005154:	f7fd f873 	bl	800223e <HAL_DMA_Abort_IT>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d017      	beq.n	800518e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005168:	4610      	mov	r0, r2
 800516a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516c:	e00f      	b.n	800518e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f9b4 	bl	80054dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005174:	e00b      	b.n	800518e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f9b0 	bl	80054dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	e007      	b.n	800518e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f9ac 	bl	80054dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800518c:	e192      	b.n	80054b4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518e:	bf00      	nop
    return;
 8005190:	e190      	b.n	80054b4 <HAL_UART_IRQHandler+0x5b8>
 8005192:	bf00      	nop
 8005194:	04000120 	.word	0x04000120
 8005198:	08005e61 	.word	0x08005e61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	f040 814b 	bne.w	800543c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051aa:	f003 0310 	and.w	r3, r3, #16
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 8144 	beq.w	800543c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 813d 	beq.w	800543c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2210      	movs	r2, #16
 80051c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d4:	2b40      	cmp	r3, #64	@ 0x40
 80051d6:	f040 80b5 	bne.w	8005344 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 8164 	beq.w	80054b8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80051f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051fa:	429a      	cmp	r2, r3
 80051fc:	f080 815c 	bcs.w	80054b8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005206:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	2b20      	cmp	r3, #32
 8005212:	f000 8086 	beq.w	8005322 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005222:	e853 3f00 	ldrex	r3, [r3]
 8005226:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800522a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800522e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005232:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005240:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005244:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005248:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800524c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005258:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1da      	bne.n	8005216 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3308      	adds	r3, #8
 8005266:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005270:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005272:	f023 0301 	bic.w	r3, r3, #1
 8005276:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3308      	adds	r3, #8
 8005280:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005284:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005288:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800528c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005296:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e1      	bne.n	8005260 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3308      	adds	r3, #8
 80052a2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3308      	adds	r3, #8
 80052bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052c0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052c2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e3      	bne.n	800529c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052f2:	f023 0310 	bic.w	r3, r3, #16
 80052f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005304:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005306:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800530a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e4      	bne.n	80052e2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800531c:	4618      	mov	r0, r3
 800531e:	f7fc ff50 	bl	80021c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2202      	movs	r2, #2
 8005326:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005334:	b29b      	uxth	r3, r3
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	b29b      	uxth	r3, r3
 800533a:	4619      	mov	r1, r3
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f8d7 	bl	80054f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005342:	e0b9      	b.n	80054b8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005350:	b29b      	uxth	r3, r3
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 80ab 	beq.w	80054bc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005366:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 80a6 	beq.w	80054bc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800537e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005380:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005384:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005392:	647b      	str	r3, [r7, #68]	@ 0x44
 8005394:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005398:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e4      	bne.n	8005370 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3308      	adds	r3, #8
 80053ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	e853 3f00 	ldrex	r3, [r3]
 80053b4:	623b      	str	r3, [r7, #32]
   return(result);
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	f023 0301 	bic.w	r3, r3, #1
 80053bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3308      	adds	r3, #8
 80053c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80053cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e3      	bne.n	80053a6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0310 	bic.w	r3, r3, #16
 8005406:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	69b9      	ldr	r1, [r7, #24]
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	617b      	str	r3, [r7, #20]
   return(result);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e4      	bne.n	80053f2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800542e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f85b 	bl	80054f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800543a:	e03f      	b.n	80054bc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800543c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005440:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00e      	beq.n	8005466 <HAL_UART_IRQHandler+0x56a>
 8005448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800544c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800545c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fd3e 	bl	8005ee0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005464:	e02d      	b.n	80054c2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800546a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00e      	beq.n	8005490 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005482:	2b00      	cmp	r3, #0
 8005484:	d01c      	beq.n	80054c0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	4798      	blx	r3
    }
    return;
 800548e:	e017      	b.n	80054c0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d012      	beq.n	80054c2 <HAL_UART_IRQHandler+0x5c6>
 800549c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00c      	beq.n	80054c2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fcef 	bl	8005e8c <UART_EndTransmit_IT>
    return;
 80054ae:	e008      	b.n	80054c2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80054b0:	bf00      	nop
 80054b2:	e006      	b.n	80054c2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80054b4:	bf00      	nop
 80054b6:	e004      	b.n	80054c2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80054b8:	bf00      	nop
 80054ba:	e002      	b.n	80054c2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80054bc:	bf00      	nop
 80054be:	e000      	b.n	80054c2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80054c0:	bf00      	nop
  }

}
 80054c2:	37e8      	adds	r7, #232	@ 0xe8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005536:	f023 030c 	bic.w	r3, r3, #12
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6812      	ldr	r2, [r2, #0]
 800553e:	6979      	ldr	r1, [r7, #20]
 8005540:	430b      	orrs	r3, r1
 8005542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	4313      	orrs	r3, r2
 8005568:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	430a      	orrs	r2, r1
 800557c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4aa7      	ldr	r2, [pc, #668]	@ (8005820 <UART_SetConfig+0x318>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d120      	bne.n	80055ca <UART_SetConfig+0xc2>
 8005588:	4ba6      	ldr	r3, [pc, #664]	@ (8005824 <UART_SetConfig+0x31c>)
 800558a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	2b03      	cmp	r3, #3
 8005592:	d817      	bhi.n	80055c4 <UART_SetConfig+0xbc>
 8005594:	a201      	add	r2, pc, #4	@ (adr r2, 800559c <UART_SetConfig+0x94>)
 8005596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559a:	bf00      	nop
 800559c:	080055ad 	.word	0x080055ad
 80055a0:	080055b9 	.word	0x080055b9
 80055a4:	080055bf 	.word	0x080055bf
 80055a8:	080055b3 	.word	0x080055b3
 80055ac:	2301      	movs	r3, #1
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e0b5      	b.n	800571e <UART_SetConfig+0x216>
 80055b2:	2302      	movs	r3, #2
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e0b2      	b.n	800571e <UART_SetConfig+0x216>
 80055b8:	2304      	movs	r3, #4
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e0af      	b.n	800571e <UART_SetConfig+0x216>
 80055be:	2308      	movs	r3, #8
 80055c0:	77fb      	strb	r3, [r7, #31]
 80055c2:	e0ac      	b.n	800571e <UART_SetConfig+0x216>
 80055c4:	2310      	movs	r3, #16
 80055c6:	77fb      	strb	r3, [r7, #31]
 80055c8:	e0a9      	b.n	800571e <UART_SetConfig+0x216>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a96      	ldr	r2, [pc, #600]	@ (8005828 <UART_SetConfig+0x320>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d124      	bne.n	800561e <UART_SetConfig+0x116>
 80055d4:	4b93      	ldr	r3, [pc, #588]	@ (8005824 <UART_SetConfig+0x31c>)
 80055d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055e0:	d011      	beq.n	8005606 <UART_SetConfig+0xfe>
 80055e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055e6:	d817      	bhi.n	8005618 <UART_SetConfig+0x110>
 80055e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055ec:	d011      	beq.n	8005612 <UART_SetConfig+0x10a>
 80055ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055f2:	d811      	bhi.n	8005618 <UART_SetConfig+0x110>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <UART_SetConfig+0xf8>
 80055f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055fc:	d006      	beq.n	800560c <UART_SetConfig+0x104>
 80055fe:	e00b      	b.n	8005618 <UART_SetConfig+0x110>
 8005600:	2300      	movs	r3, #0
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	e08b      	b.n	800571e <UART_SetConfig+0x216>
 8005606:	2302      	movs	r3, #2
 8005608:	77fb      	strb	r3, [r7, #31]
 800560a:	e088      	b.n	800571e <UART_SetConfig+0x216>
 800560c:	2304      	movs	r3, #4
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e085      	b.n	800571e <UART_SetConfig+0x216>
 8005612:	2308      	movs	r3, #8
 8005614:	77fb      	strb	r3, [r7, #31]
 8005616:	e082      	b.n	800571e <UART_SetConfig+0x216>
 8005618:	2310      	movs	r3, #16
 800561a:	77fb      	strb	r3, [r7, #31]
 800561c:	e07f      	b.n	800571e <UART_SetConfig+0x216>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a82      	ldr	r2, [pc, #520]	@ (800582c <UART_SetConfig+0x324>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d124      	bne.n	8005672 <UART_SetConfig+0x16a>
 8005628:	4b7e      	ldr	r3, [pc, #504]	@ (8005824 <UART_SetConfig+0x31c>)
 800562a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005630:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005634:	d011      	beq.n	800565a <UART_SetConfig+0x152>
 8005636:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800563a:	d817      	bhi.n	800566c <UART_SetConfig+0x164>
 800563c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005640:	d011      	beq.n	8005666 <UART_SetConfig+0x15e>
 8005642:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005646:	d811      	bhi.n	800566c <UART_SetConfig+0x164>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <UART_SetConfig+0x14c>
 800564c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005650:	d006      	beq.n	8005660 <UART_SetConfig+0x158>
 8005652:	e00b      	b.n	800566c <UART_SetConfig+0x164>
 8005654:	2300      	movs	r3, #0
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e061      	b.n	800571e <UART_SetConfig+0x216>
 800565a:	2302      	movs	r3, #2
 800565c:	77fb      	strb	r3, [r7, #31]
 800565e:	e05e      	b.n	800571e <UART_SetConfig+0x216>
 8005660:	2304      	movs	r3, #4
 8005662:	77fb      	strb	r3, [r7, #31]
 8005664:	e05b      	b.n	800571e <UART_SetConfig+0x216>
 8005666:	2308      	movs	r3, #8
 8005668:	77fb      	strb	r3, [r7, #31]
 800566a:	e058      	b.n	800571e <UART_SetConfig+0x216>
 800566c:	2310      	movs	r3, #16
 800566e:	77fb      	strb	r3, [r7, #31]
 8005670:	e055      	b.n	800571e <UART_SetConfig+0x216>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a6e      	ldr	r2, [pc, #440]	@ (8005830 <UART_SetConfig+0x328>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d124      	bne.n	80056c6 <UART_SetConfig+0x1be>
 800567c:	4b69      	ldr	r3, [pc, #420]	@ (8005824 <UART_SetConfig+0x31c>)
 800567e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005680:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005684:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005688:	d011      	beq.n	80056ae <UART_SetConfig+0x1a6>
 800568a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800568e:	d817      	bhi.n	80056c0 <UART_SetConfig+0x1b8>
 8005690:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005694:	d011      	beq.n	80056ba <UART_SetConfig+0x1b2>
 8005696:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800569a:	d811      	bhi.n	80056c0 <UART_SetConfig+0x1b8>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <UART_SetConfig+0x1a0>
 80056a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056a4:	d006      	beq.n	80056b4 <UART_SetConfig+0x1ac>
 80056a6:	e00b      	b.n	80056c0 <UART_SetConfig+0x1b8>
 80056a8:	2300      	movs	r3, #0
 80056aa:	77fb      	strb	r3, [r7, #31]
 80056ac:	e037      	b.n	800571e <UART_SetConfig+0x216>
 80056ae:	2302      	movs	r3, #2
 80056b0:	77fb      	strb	r3, [r7, #31]
 80056b2:	e034      	b.n	800571e <UART_SetConfig+0x216>
 80056b4:	2304      	movs	r3, #4
 80056b6:	77fb      	strb	r3, [r7, #31]
 80056b8:	e031      	b.n	800571e <UART_SetConfig+0x216>
 80056ba:	2308      	movs	r3, #8
 80056bc:	77fb      	strb	r3, [r7, #31]
 80056be:	e02e      	b.n	800571e <UART_SetConfig+0x216>
 80056c0:	2310      	movs	r3, #16
 80056c2:	77fb      	strb	r3, [r7, #31]
 80056c4:	e02b      	b.n	800571e <UART_SetConfig+0x216>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a5a      	ldr	r2, [pc, #360]	@ (8005834 <UART_SetConfig+0x32c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d124      	bne.n	800571a <UART_SetConfig+0x212>
 80056d0:	4b54      	ldr	r3, [pc, #336]	@ (8005824 <UART_SetConfig+0x31c>)
 80056d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80056d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056dc:	d011      	beq.n	8005702 <UART_SetConfig+0x1fa>
 80056de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056e2:	d817      	bhi.n	8005714 <UART_SetConfig+0x20c>
 80056e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056e8:	d011      	beq.n	800570e <UART_SetConfig+0x206>
 80056ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056ee:	d811      	bhi.n	8005714 <UART_SetConfig+0x20c>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <UART_SetConfig+0x1f4>
 80056f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056f8:	d006      	beq.n	8005708 <UART_SetConfig+0x200>
 80056fa:	e00b      	b.n	8005714 <UART_SetConfig+0x20c>
 80056fc:	2300      	movs	r3, #0
 80056fe:	77fb      	strb	r3, [r7, #31]
 8005700:	e00d      	b.n	800571e <UART_SetConfig+0x216>
 8005702:	2302      	movs	r3, #2
 8005704:	77fb      	strb	r3, [r7, #31]
 8005706:	e00a      	b.n	800571e <UART_SetConfig+0x216>
 8005708:	2304      	movs	r3, #4
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e007      	b.n	800571e <UART_SetConfig+0x216>
 800570e:	2308      	movs	r3, #8
 8005710:	77fb      	strb	r3, [r7, #31]
 8005712:	e004      	b.n	800571e <UART_SetConfig+0x216>
 8005714:	2310      	movs	r3, #16
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	e001      	b.n	800571e <UART_SetConfig+0x216>
 800571a:	2310      	movs	r3, #16
 800571c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005726:	d15b      	bne.n	80057e0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005728:	7ffb      	ldrb	r3, [r7, #31]
 800572a:	2b08      	cmp	r3, #8
 800572c:	d827      	bhi.n	800577e <UART_SetConfig+0x276>
 800572e:	a201      	add	r2, pc, #4	@ (adr r2, 8005734 <UART_SetConfig+0x22c>)
 8005730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005734:	08005759 	.word	0x08005759
 8005738:	08005761 	.word	0x08005761
 800573c:	08005769 	.word	0x08005769
 8005740:	0800577f 	.word	0x0800577f
 8005744:	0800576f 	.word	0x0800576f
 8005748:	0800577f 	.word	0x0800577f
 800574c:	0800577f 	.word	0x0800577f
 8005750:	0800577f 	.word	0x0800577f
 8005754:	08005777 	.word	0x08005777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005758:	f7ff f880 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 800575c:	61b8      	str	r0, [r7, #24]
        break;
 800575e:	e013      	b.n	8005788 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005760:	f7ff f89e 	bl	80048a0 <HAL_RCC_GetPCLK2Freq>
 8005764:	61b8      	str	r0, [r7, #24]
        break;
 8005766:	e00f      	b.n	8005788 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005768:	4b33      	ldr	r3, [pc, #204]	@ (8005838 <UART_SetConfig+0x330>)
 800576a:	61bb      	str	r3, [r7, #24]
        break;
 800576c:	e00c      	b.n	8005788 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800576e:	f7ff f815 	bl	800479c <HAL_RCC_GetSysClockFreq>
 8005772:	61b8      	str	r0, [r7, #24]
        break;
 8005774:	e008      	b.n	8005788 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800577a:	61bb      	str	r3, [r7, #24]
        break;
 800577c:	e004      	b.n	8005788 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	77bb      	strb	r3, [r7, #30]
        break;
 8005786:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 8082 	beq.w	8005894 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	005a      	lsls	r2, r3, #1
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	085b      	lsrs	r3, r3, #1
 800579a:	441a      	add	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2b0f      	cmp	r3, #15
 80057aa:	d916      	bls.n	80057da <UART_SetConfig+0x2d2>
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057b2:	d212      	bcs.n	80057da <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	f023 030f 	bic.w	r3, r3, #15
 80057bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	085b      	lsrs	r3, r3, #1
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	89fb      	ldrh	r3, [r7, #14]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	89fa      	ldrh	r2, [r7, #14]
 80057d6:	60da      	str	r2, [r3, #12]
 80057d8:	e05c      	b.n	8005894 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	77bb      	strb	r3, [r7, #30]
 80057de:	e059      	b.n	8005894 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057e0:	7ffb      	ldrb	r3, [r7, #31]
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d835      	bhi.n	8005852 <UART_SetConfig+0x34a>
 80057e6:	a201      	add	r2, pc, #4	@ (adr r2, 80057ec <UART_SetConfig+0x2e4>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	08005811 	.word	0x08005811
 80057f0:	08005819 	.word	0x08005819
 80057f4:	0800583d 	.word	0x0800583d
 80057f8:	08005853 	.word	0x08005853
 80057fc:	08005843 	.word	0x08005843
 8005800:	08005853 	.word	0x08005853
 8005804:	08005853 	.word	0x08005853
 8005808:	08005853 	.word	0x08005853
 800580c:	0800584b 	.word	0x0800584b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005810:	f7ff f824 	bl	800485c <HAL_RCC_GetPCLK1Freq>
 8005814:	61b8      	str	r0, [r7, #24]
        break;
 8005816:	e021      	b.n	800585c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005818:	f7ff f842 	bl	80048a0 <HAL_RCC_GetPCLK2Freq>
 800581c:	61b8      	str	r0, [r7, #24]
        break;
 800581e:	e01d      	b.n	800585c <UART_SetConfig+0x354>
 8005820:	40013800 	.word	0x40013800
 8005824:	40021000 	.word	0x40021000
 8005828:	40004400 	.word	0x40004400
 800582c:	40004800 	.word	0x40004800
 8005830:	40004c00 	.word	0x40004c00
 8005834:	40005000 	.word	0x40005000
 8005838:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800583c:	4b1b      	ldr	r3, [pc, #108]	@ (80058ac <UART_SetConfig+0x3a4>)
 800583e:	61bb      	str	r3, [r7, #24]
        break;
 8005840:	e00c      	b.n	800585c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005842:	f7fe ffab 	bl	800479c <HAL_RCC_GetSysClockFreq>
 8005846:	61b8      	str	r0, [r7, #24]
        break;
 8005848:	e008      	b.n	800585c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800584a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800584e:	61bb      	str	r3, [r7, #24]
        break;
 8005850:	e004      	b.n	800585c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	77bb      	strb	r3, [r7, #30]
        break;
 800585a:	bf00      	nop
    }

    if (pclk != 0U)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d018      	beq.n	8005894 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	085a      	lsrs	r2, r3, #1
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	441a      	add	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	fbb2 f3f3 	udiv	r3, r2, r3
 8005874:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	2b0f      	cmp	r3, #15
 800587a:	d909      	bls.n	8005890 <UART_SetConfig+0x388>
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005882:	d205      	bcs.n	8005890 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	b29a      	uxth	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	e001      	b.n	8005894 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80058a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	007a1200 	.word	0x007a1200

080058b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058bc:	f003 0308 	and.w	r3, r3, #8
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005944:	f003 0310 	and.w	r3, r3, #16
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00a      	beq.n	8005962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01a      	beq.n	80059c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ae:	d10a      	bne.n	80059c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	605a      	str	r2, [r3, #4]
  }
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b098      	sub	sp, #96	@ 0x60
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a04:	f7fc fa1a 	bl	8001e3c <HAL_GetTick>
 8005a08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d12e      	bne.n	8005a76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a20:	2200      	movs	r2, #0
 8005a22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f88c 	bl	8005b44 <UART_WaitOnFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d021      	beq.n	8005a76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a46:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e6      	bne.n	8005a32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e062      	b.n	8005b3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d149      	bne.n	8005b18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f856 	bl	8005b44 <UART_WaitOnFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d03c      	beq.n	8005b18 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	623b      	str	r3, [r7, #32]
   return(result);
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005abe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e6      	bne.n	8005a9e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	e853 3f00 	ldrex	r3, [r3]
 8005ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0301 	bic.w	r3, r3, #1
 8005ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3308      	adds	r3, #8
 8005aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005af0:	61fa      	str	r2, [r7, #28]
 8005af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	69b9      	ldr	r1, [r7, #24]
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	617b      	str	r3, [r7, #20]
   return(result);
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e5      	bne.n	8005ad0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e011      	b.n	8005b3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3758      	adds	r7, #88	@ 0x58
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	4613      	mov	r3, r2
 8005b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b54:	e04f      	b.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5c:	d04b      	beq.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5e:	f7fc f96d 	bl	8001e3c <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d302      	bcc.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e04e      	b.n	8005c16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d037      	beq.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b80      	cmp	r3, #128	@ 0x80
 8005b8a:	d034      	beq.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b40      	cmp	r3, #64	@ 0x40
 8005b90:	d031      	beq.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	f003 0308 	and.w	r3, r3, #8
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d110      	bne.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2208      	movs	r2, #8
 8005ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 f85e 	bl	8005c6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e029      	b.n	8005c16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bd0:	d111      	bne.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f844 	bl	8005c6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e00f      	b.n	8005c16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69da      	ldr	r2, [r3, #28]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	bf0c      	ite	eq
 8005c06:	2301      	moveq	r3, #1
 8005c08:	2300      	movne	r3, #0
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d0a0      	beq.n	8005b56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b089      	sub	sp, #36	@ 0x24
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6979      	ldr	r1, [r7, #20]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	613b      	str	r3, [r7, #16]
   return(result);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e6      	bne.n	8005c26 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005c5e:	bf00      	nop
 8005c60:	3724      	adds	r7, #36	@ 0x24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b095      	sub	sp, #84	@ 0x54
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7a:	e853 3f00 	ldrex	r3, [r3]
 8005c7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c90:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c98:	e841 2300 	strex	r3, r2, [r1]
 8005c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e6      	bne.n	8005c72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3308      	adds	r3, #8
 8005caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	f023 0301 	bic.w	r3, r3, #1
 8005cba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ccc:	e841 2300 	strex	r3, r2, [r1]
 8005cd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e5      	bne.n	8005ca4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d118      	bne.n	8005d12 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f023 0310 	bic.w	r3, r3, #16
 8005cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cfe:	61bb      	str	r3, [r7, #24]
 8005d00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	6979      	ldr	r1, [r7, #20]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1e6      	bne.n	8005ce0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005d26:	bf00      	nop
 8005d28:	3754      	adds	r7, #84	@ 0x54
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b090      	sub	sp, #64	@ 0x40
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d037      	beq.n	8005db8 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8005d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3308      	adds	r3, #8
 8005d56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d70:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e5      	bne.n	8005d50 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da2:	61fb      	str	r3, [r7, #28]
 8005da4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	69b9      	ldr	r1, [r7, #24]
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	617b      	str	r3, [r7, #20]
   return(result);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e6      	bne.n	8005d84 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005db6:	e002      	b.n	8005dbe <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8005db8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005dba:	f7fb f941 	bl	8001040 <HAL_UART_TxCpltCallback>
}
 8005dbe:	bf00      	nop
 8005dc0:	3740      	adds	r7, #64	@ 0x40
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f7ff fb77 	bl	80054c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dda:	bf00      	nop
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b086      	sub	sp, #24
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005df4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e08:	2b80      	cmp	r3, #128	@ 0x80
 8005e0a:	d109      	bne.n	8005e20 <UART_DMAError+0x3e>
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	2b21      	cmp	r3, #33	@ 0x21
 8005e10:	d106      	bne.n	8005e20 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8005e1a:	6978      	ldr	r0, [r7, #20]
 8005e1c:	f7ff feff 	bl	8005c1e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e2a:	2b40      	cmp	r3, #64	@ 0x40
 8005e2c:	d109      	bne.n	8005e42 <UART_DMAError+0x60>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b22      	cmp	r3, #34	@ 0x22
 8005e32:	d106      	bne.n	8005e42 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005e3c:	6978      	ldr	r0, [r7, #20]
 8005e3e:	f7ff ff14 	bl	8005c6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e48:	f043 0210 	orr.w	r2, r3, #16
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e52:	6978      	ldr	r0, [r7, #20]
 8005e54:	f7ff fb42 	bl	80054dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e58:	bf00      	nop
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f7ff fb2c 	bl	80054dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ea8:	61fb      	str	r3, [r7, #28]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	61bb      	str	r3, [r7, #24]
 8005eb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	6979      	ldr	r1, [r7, #20]
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e6      	bne.n	8005e94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fb f8b4 	bl	8001040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ed8:	bf00      	nop
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <__cvt>:
 8005ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef8:	ec57 6b10 	vmov	r6, r7, d0
 8005efc:	2f00      	cmp	r7, #0
 8005efe:	460c      	mov	r4, r1
 8005f00:	4619      	mov	r1, r3
 8005f02:	463b      	mov	r3, r7
 8005f04:	bfbb      	ittet	lt
 8005f06:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005f0a:	461f      	movlt	r7, r3
 8005f0c:	2300      	movge	r3, #0
 8005f0e:	232d      	movlt	r3, #45	@ 0x2d
 8005f10:	700b      	strb	r3, [r1, #0]
 8005f12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f14:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005f18:	4691      	mov	r9, r2
 8005f1a:	f023 0820 	bic.w	r8, r3, #32
 8005f1e:	bfbc      	itt	lt
 8005f20:	4632      	movlt	r2, r6
 8005f22:	4616      	movlt	r6, r2
 8005f24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f28:	d005      	beq.n	8005f36 <__cvt+0x42>
 8005f2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005f2e:	d100      	bne.n	8005f32 <__cvt+0x3e>
 8005f30:	3401      	adds	r4, #1
 8005f32:	2102      	movs	r1, #2
 8005f34:	e000      	b.n	8005f38 <__cvt+0x44>
 8005f36:	2103      	movs	r1, #3
 8005f38:	ab03      	add	r3, sp, #12
 8005f3a:	9301      	str	r3, [sp, #4]
 8005f3c:	ab02      	add	r3, sp, #8
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	ec47 6b10 	vmov	d0, r6, r7
 8005f44:	4653      	mov	r3, sl
 8005f46:	4622      	mov	r2, r4
 8005f48:	f001 f97a 	bl	8007240 <_dtoa_r>
 8005f4c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005f50:	4605      	mov	r5, r0
 8005f52:	d119      	bne.n	8005f88 <__cvt+0x94>
 8005f54:	f019 0f01 	tst.w	r9, #1
 8005f58:	d00e      	beq.n	8005f78 <__cvt+0x84>
 8005f5a:	eb00 0904 	add.w	r9, r0, r4
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2300      	movs	r3, #0
 8005f62:	4630      	mov	r0, r6
 8005f64:	4639      	mov	r1, r7
 8005f66:	f7fa fdaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f6a:	b108      	cbz	r0, 8005f70 <__cvt+0x7c>
 8005f6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f70:	2230      	movs	r2, #48	@ 0x30
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	454b      	cmp	r3, r9
 8005f76:	d31e      	bcc.n	8005fb6 <__cvt+0xc2>
 8005f78:	9b03      	ldr	r3, [sp, #12]
 8005f7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f7c:	1b5b      	subs	r3, r3, r5
 8005f7e:	4628      	mov	r0, r5
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	b004      	add	sp, #16
 8005f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f8c:	eb00 0904 	add.w	r9, r0, r4
 8005f90:	d1e5      	bne.n	8005f5e <__cvt+0x6a>
 8005f92:	7803      	ldrb	r3, [r0, #0]
 8005f94:	2b30      	cmp	r3, #48	@ 0x30
 8005f96:	d10a      	bne.n	8005fae <__cvt+0xba>
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	4639      	mov	r1, r7
 8005fa0:	f7fa fd92 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fa4:	b918      	cbnz	r0, 8005fae <__cvt+0xba>
 8005fa6:	f1c4 0401 	rsb	r4, r4, #1
 8005faa:	f8ca 4000 	str.w	r4, [sl]
 8005fae:	f8da 3000 	ldr.w	r3, [sl]
 8005fb2:	4499      	add	r9, r3
 8005fb4:	e7d3      	b.n	8005f5e <__cvt+0x6a>
 8005fb6:	1c59      	adds	r1, r3, #1
 8005fb8:	9103      	str	r1, [sp, #12]
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	e7d9      	b.n	8005f72 <__cvt+0x7e>

08005fbe <__exponent>:
 8005fbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fc0:	2900      	cmp	r1, #0
 8005fc2:	bfba      	itte	lt
 8005fc4:	4249      	neglt	r1, r1
 8005fc6:	232d      	movlt	r3, #45	@ 0x2d
 8005fc8:	232b      	movge	r3, #43	@ 0x2b
 8005fca:	2909      	cmp	r1, #9
 8005fcc:	7002      	strb	r2, [r0, #0]
 8005fce:	7043      	strb	r3, [r0, #1]
 8005fd0:	dd29      	ble.n	8006026 <__exponent+0x68>
 8005fd2:	f10d 0307 	add.w	r3, sp, #7
 8005fd6:	461d      	mov	r5, r3
 8005fd8:	270a      	movs	r7, #10
 8005fda:	461a      	mov	r2, r3
 8005fdc:	fbb1 f6f7 	udiv	r6, r1, r7
 8005fe0:	fb07 1416 	mls	r4, r7, r6, r1
 8005fe4:	3430      	adds	r4, #48	@ 0x30
 8005fe6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005fea:	460c      	mov	r4, r1
 8005fec:	2c63      	cmp	r4, #99	@ 0x63
 8005fee:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	dcf1      	bgt.n	8005fda <__exponent+0x1c>
 8005ff6:	3130      	adds	r1, #48	@ 0x30
 8005ff8:	1e94      	subs	r4, r2, #2
 8005ffa:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005ffe:	1c41      	adds	r1, r0, #1
 8006000:	4623      	mov	r3, r4
 8006002:	42ab      	cmp	r3, r5
 8006004:	d30a      	bcc.n	800601c <__exponent+0x5e>
 8006006:	f10d 0309 	add.w	r3, sp, #9
 800600a:	1a9b      	subs	r3, r3, r2
 800600c:	42ac      	cmp	r4, r5
 800600e:	bf88      	it	hi
 8006010:	2300      	movhi	r3, #0
 8006012:	3302      	adds	r3, #2
 8006014:	4403      	add	r3, r0
 8006016:	1a18      	subs	r0, r3, r0
 8006018:	b003      	add	sp, #12
 800601a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800601c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006020:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006024:	e7ed      	b.n	8006002 <__exponent+0x44>
 8006026:	2330      	movs	r3, #48	@ 0x30
 8006028:	3130      	adds	r1, #48	@ 0x30
 800602a:	7083      	strb	r3, [r0, #2]
 800602c:	70c1      	strb	r1, [r0, #3]
 800602e:	1d03      	adds	r3, r0, #4
 8006030:	e7f1      	b.n	8006016 <__exponent+0x58>
	...

08006034 <_printf_float>:
 8006034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006038:	b08d      	sub	sp, #52	@ 0x34
 800603a:	460c      	mov	r4, r1
 800603c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006040:	4616      	mov	r6, r2
 8006042:	461f      	mov	r7, r3
 8006044:	4605      	mov	r5, r0
 8006046:	f000 fff3 	bl	8007030 <_localeconv_r>
 800604a:	6803      	ldr	r3, [r0, #0]
 800604c:	9304      	str	r3, [sp, #16]
 800604e:	4618      	mov	r0, r3
 8006050:	f7fa f90e 	bl	8000270 <strlen>
 8006054:	2300      	movs	r3, #0
 8006056:	930a      	str	r3, [sp, #40]	@ 0x28
 8006058:	f8d8 3000 	ldr.w	r3, [r8]
 800605c:	9005      	str	r0, [sp, #20]
 800605e:	3307      	adds	r3, #7
 8006060:	f023 0307 	bic.w	r3, r3, #7
 8006064:	f103 0208 	add.w	r2, r3, #8
 8006068:	f894 a018 	ldrb.w	sl, [r4, #24]
 800606c:	f8d4 b000 	ldr.w	fp, [r4]
 8006070:	f8c8 2000 	str.w	r2, [r8]
 8006074:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006078:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800607c:	9307      	str	r3, [sp, #28]
 800607e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006082:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006086:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800608a:	4b9c      	ldr	r3, [pc, #624]	@ (80062fc <_printf_float+0x2c8>)
 800608c:	f04f 32ff 	mov.w	r2, #4294967295
 8006090:	f7fa fd4c 	bl	8000b2c <__aeabi_dcmpun>
 8006094:	bb70      	cbnz	r0, 80060f4 <_printf_float+0xc0>
 8006096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800609a:	4b98      	ldr	r3, [pc, #608]	@ (80062fc <_printf_float+0x2c8>)
 800609c:	f04f 32ff 	mov.w	r2, #4294967295
 80060a0:	f7fa fd26 	bl	8000af0 <__aeabi_dcmple>
 80060a4:	bb30      	cbnz	r0, 80060f4 <_printf_float+0xc0>
 80060a6:	2200      	movs	r2, #0
 80060a8:	2300      	movs	r3, #0
 80060aa:	4640      	mov	r0, r8
 80060ac:	4649      	mov	r1, r9
 80060ae:	f7fa fd15 	bl	8000adc <__aeabi_dcmplt>
 80060b2:	b110      	cbz	r0, 80060ba <_printf_float+0x86>
 80060b4:	232d      	movs	r3, #45	@ 0x2d
 80060b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ba:	4a91      	ldr	r2, [pc, #580]	@ (8006300 <_printf_float+0x2cc>)
 80060bc:	4b91      	ldr	r3, [pc, #580]	@ (8006304 <_printf_float+0x2d0>)
 80060be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80060c2:	bf94      	ite	ls
 80060c4:	4690      	movls	r8, r2
 80060c6:	4698      	movhi	r8, r3
 80060c8:	2303      	movs	r3, #3
 80060ca:	6123      	str	r3, [r4, #16]
 80060cc:	f02b 0304 	bic.w	r3, fp, #4
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	f04f 0900 	mov.w	r9, #0
 80060d6:	9700      	str	r7, [sp, #0]
 80060d8:	4633      	mov	r3, r6
 80060da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80060dc:	4621      	mov	r1, r4
 80060de:	4628      	mov	r0, r5
 80060e0:	f000 f9d2 	bl	8006488 <_printf_common>
 80060e4:	3001      	adds	r0, #1
 80060e6:	f040 808d 	bne.w	8006204 <_printf_float+0x1d0>
 80060ea:	f04f 30ff 	mov.w	r0, #4294967295
 80060ee:	b00d      	add	sp, #52	@ 0x34
 80060f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f4:	4642      	mov	r2, r8
 80060f6:	464b      	mov	r3, r9
 80060f8:	4640      	mov	r0, r8
 80060fa:	4649      	mov	r1, r9
 80060fc:	f7fa fd16 	bl	8000b2c <__aeabi_dcmpun>
 8006100:	b140      	cbz	r0, 8006114 <_printf_float+0xe0>
 8006102:	464b      	mov	r3, r9
 8006104:	2b00      	cmp	r3, #0
 8006106:	bfbc      	itt	lt
 8006108:	232d      	movlt	r3, #45	@ 0x2d
 800610a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800610e:	4a7e      	ldr	r2, [pc, #504]	@ (8006308 <_printf_float+0x2d4>)
 8006110:	4b7e      	ldr	r3, [pc, #504]	@ (800630c <_printf_float+0x2d8>)
 8006112:	e7d4      	b.n	80060be <_printf_float+0x8a>
 8006114:	6863      	ldr	r3, [r4, #4]
 8006116:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800611a:	9206      	str	r2, [sp, #24]
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	d13b      	bne.n	8006198 <_printf_float+0x164>
 8006120:	2306      	movs	r3, #6
 8006122:	6063      	str	r3, [r4, #4]
 8006124:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006128:	2300      	movs	r3, #0
 800612a:	6022      	str	r2, [r4, #0]
 800612c:	9303      	str	r3, [sp, #12]
 800612e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006130:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006134:	ab09      	add	r3, sp, #36	@ 0x24
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	6861      	ldr	r1, [r4, #4]
 800613a:	ec49 8b10 	vmov	d0, r8, r9
 800613e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006142:	4628      	mov	r0, r5
 8006144:	f7ff fed6 	bl	8005ef4 <__cvt>
 8006148:	9b06      	ldr	r3, [sp, #24]
 800614a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800614c:	2b47      	cmp	r3, #71	@ 0x47
 800614e:	4680      	mov	r8, r0
 8006150:	d129      	bne.n	80061a6 <_printf_float+0x172>
 8006152:	1cc8      	adds	r0, r1, #3
 8006154:	db02      	blt.n	800615c <_printf_float+0x128>
 8006156:	6863      	ldr	r3, [r4, #4]
 8006158:	4299      	cmp	r1, r3
 800615a:	dd41      	ble.n	80061e0 <_printf_float+0x1ac>
 800615c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006160:	fa5f fa8a 	uxtb.w	sl, sl
 8006164:	3901      	subs	r1, #1
 8006166:	4652      	mov	r2, sl
 8006168:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800616c:	9109      	str	r1, [sp, #36]	@ 0x24
 800616e:	f7ff ff26 	bl	8005fbe <__exponent>
 8006172:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006174:	1813      	adds	r3, r2, r0
 8006176:	2a01      	cmp	r2, #1
 8006178:	4681      	mov	r9, r0
 800617a:	6123      	str	r3, [r4, #16]
 800617c:	dc02      	bgt.n	8006184 <_printf_float+0x150>
 800617e:	6822      	ldr	r2, [r4, #0]
 8006180:	07d2      	lsls	r2, r2, #31
 8006182:	d501      	bpl.n	8006188 <_printf_float+0x154>
 8006184:	3301      	adds	r3, #1
 8006186:	6123      	str	r3, [r4, #16]
 8006188:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0a2      	beq.n	80060d6 <_printf_float+0xa2>
 8006190:	232d      	movs	r3, #45	@ 0x2d
 8006192:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006196:	e79e      	b.n	80060d6 <_printf_float+0xa2>
 8006198:	9a06      	ldr	r2, [sp, #24]
 800619a:	2a47      	cmp	r2, #71	@ 0x47
 800619c:	d1c2      	bne.n	8006124 <_printf_float+0xf0>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1c0      	bne.n	8006124 <_printf_float+0xf0>
 80061a2:	2301      	movs	r3, #1
 80061a4:	e7bd      	b.n	8006122 <_printf_float+0xee>
 80061a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80061aa:	d9db      	bls.n	8006164 <_printf_float+0x130>
 80061ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80061b0:	d118      	bne.n	80061e4 <_printf_float+0x1b0>
 80061b2:	2900      	cmp	r1, #0
 80061b4:	6863      	ldr	r3, [r4, #4]
 80061b6:	dd0b      	ble.n	80061d0 <_printf_float+0x19c>
 80061b8:	6121      	str	r1, [r4, #16]
 80061ba:	b913      	cbnz	r3, 80061c2 <_printf_float+0x18e>
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	07d0      	lsls	r0, r2, #31
 80061c0:	d502      	bpl.n	80061c8 <_printf_float+0x194>
 80061c2:	3301      	adds	r3, #1
 80061c4:	440b      	add	r3, r1
 80061c6:	6123      	str	r3, [r4, #16]
 80061c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80061ca:	f04f 0900 	mov.w	r9, #0
 80061ce:	e7db      	b.n	8006188 <_printf_float+0x154>
 80061d0:	b913      	cbnz	r3, 80061d8 <_printf_float+0x1a4>
 80061d2:	6822      	ldr	r2, [r4, #0]
 80061d4:	07d2      	lsls	r2, r2, #31
 80061d6:	d501      	bpl.n	80061dc <_printf_float+0x1a8>
 80061d8:	3302      	adds	r3, #2
 80061da:	e7f4      	b.n	80061c6 <_printf_float+0x192>
 80061dc:	2301      	movs	r3, #1
 80061de:	e7f2      	b.n	80061c6 <_printf_float+0x192>
 80061e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80061e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061e6:	4299      	cmp	r1, r3
 80061e8:	db05      	blt.n	80061f6 <_printf_float+0x1c2>
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	6121      	str	r1, [r4, #16]
 80061ee:	07d8      	lsls	r0, r3, #31
 80061f0:	d5ea      	bpl.n	80061c8 <_printf_float+0x194>
 80061f2:	1c4b      	adds	r3, r1, #1
 80061f4:	e7e7      	b.n	80061c6 <_printf_float+0x192>
 80061f6:	2900      	cmp	r1, #0
 80061f8:	bfd4      	ite	le
 80061fa:	f1c1 0202 	rsble	r2, r1, #2
 80061fe:	2201      	movgt	r2, #1
 8006200:	4413      	add	r3, r2
 8006202:	e7e0      	b.n	80061c6 <_printf_float+0x192>
 8006204:	6823      	ldr	r3, [r4, #0]
 8006206:	055a      	lsls	r2, r3, #21
 8006208:	d407      	bmi.n	800621a <_printf_float+0x1e6>
 800620a:	6923      	ldr	r3, [r4, #16]
 800620c:	4642      	mov	r2, r8
 800620e:	4631      	mov	r1, r6
 8006210:	4628      	mov	r0, r5
 8006212:	47b8      	blx	r7
 8006214:	3001      	adds	r0, #1
 8006216:	d12b      	bne.n	8006270 <_printf_float+0x23c>
 8006218:	e767      	b.n	80060ea <_printf_float+0xb6>
 800621a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800621e:	f240 80dd 	bls.w	80063dc <_printf_float+0x3a8>
 8006222:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006226:	2200      	movs	r2, #0
 8006228:	2300      	movs	r3, #0
 800622a:	f7fa fc4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800622e:	2800      	cmp	r0, #0
 8006230:	d033      	beq.n	800629a <_printf_float+0x266>
 8006232:	4a37      	ldr	r2, [pc, #220]	@ (8006310 <_printf_float+0x2dc>)
 8006234:	2301      	movs	r3, #1
 8006236:	4631      	mov	r1, r6
 8006238:	4628      	mov	r0, r5
 800623a:	47b8      	blx	r7
 800623c:	3001      	adds	r0, #1
 800623e:	f43f af54 	beq.w	80060ea <_printf_float+0xb6>
 8006242:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006246:	4543      	cmp	r3, r8
 8006248:	db02      	blt.n	8006250 <_printf_float+0x21c>
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	07d8      	lsls	r0, r3, #31
 800624e:	d50f      	bpl.n	8006270 <_printf_float+0x23c>
 8006250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006254:	4631      	mov	r1, r6
 8006256:	4628      	mov	r0, r5
 8006258:	47b8      	blx	r7
 800625a:	3001      	adds	r0, #1
 800625c:	f43f af45 	beq.w	80060ea <_printf_float+0xb6>
 8006260:	f04f 0900 	mov.w	r9, #0
 8006264:	f108 38ff 	add.w	r8, r8, #4294967295
 8006268:	f104 0a1a 	add.w	sl, r4, #26
 800626c:	45c8      	cmp	r8, r9
 800626e:	dc09      	bgt.n	8006284 <_printf_float+0x250>
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	079b      	lsls	r3, r3, #30
 8006274:	f100 8103 	bmi.w	800647e <_printf_float+0x44a>
 8006278:	68e0      	ldr	r0, [r4, #12]
 800627a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800627c:	4298      	cmp	r0, r3
 800627e:	bfb8      	it	lt
 8006280:	4618      	movlt	r0, r3
 8006282:	e734      	b.n	80060ee <_printf_float+0xba>
 8006284:	2301      	movs	r3, #1
 8006286:	4652      	mov	r2, sl
 8006288:	4631      	mov	r1, r6
 800628a:	4628      	mov	r0, r5
 800628c:	47b8      	blx	r7
 800628e:	3001      	adds	r0, #1
 8006290:	f43f af2b 	beq.w	80060ea <_printf_float+0xb6>
 8006294:	f109 0901 	add.w	r9, r9, #1
 8006298:	e7e8      	b.n	800626c <_printf_float+0x238>
 800629a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	dc39      	bgt.n	8006314 <_printf_float+0x2e0>
 80062a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006310 <_printf_float+0x2dc>)
 80062a2:	2301      	movs	r3, #1
 80062a4:	4631      	mov	r1, r6
 80062a6:	4628      	mov	r0, r5
 80062a8:	47b8      	blx	r7
 80062aa:	3001      	adds	r0, #1
 80062ac:	f43f af1d 	beq.w	80060ea <_printf_float+0xb6>
 80062b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80062b4:	ea59 0303 	orrs.w	r3, r9, r3
 80062b8:	d102      	bne.n	80062c0 <_printf_float+0x28c>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	07d9      	lsls	r1, r3, #31
 80062be:	d5d7      	bpl.n	8006270 <_printf_float+0x23c>
 80062c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062c4:	4631      	mov	r1, r6
 80062c6:	4628      	mov	r0, r5
 80062c8:	47b8      	blx	r7
 80062ca:	3001      	adds	r0, #1
 80062cc:	f43f af0d 	beq.w	80060ea <_printf_float+0xb6>
 80062d0:	f04f 0a00 	mov.w	sl, #0
 80062d4:	f104 0b1a 	add.w	fp, r4, #26
 80062d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062da:	425b      	negs	r3, r3
 80062dc:	4553      	cmp	r3, sl
 80062de:	dc01      	bgt.n	80062e4 <_printf_float+0x2b0>
 80062e0:	464b      	mov	r3, r9
 80062e2:	e793      	b.n	800620c <_printf_float+0x1d8>
 80062e4:	2301      	movs	r3, #1
 80062e6:	465a      	mov	r2, fp
 80062e8:	4631      	mov	r1, r6
 80062ea:	4628      	mov	r0, r5
 80062ec:	47b8      	blx	r7
 80062ee:	3001      	adds	r0, #1
 80062f0:	f43f aefb 	beq.w	80060ea <_printf_float+0xb6>
 80062f4:	f10a 0a01 	add.w	sl, sl, #1
 80062f8:	e7ee      	b.n	80062d8 <_printf_float+0x2a4>
 80062fa:	bf00      	nop
 80062fc:	7fefffff 	.word	0x7fefffff
 8006300:	0800af40 	.word	0x0800af40
 8006304:	0800af44 	.word	0x0800af44
 8006308:	0800af48 	.word	0x0800af48
 800630c:	0800af4c 	.word	0x0800af4c
 8006310:	0800af50 	.word	0x0800af50
 8006314:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006316:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800631a:	4553      	cmp	r3, sl
 800631c:	bfa8      	it	ge
 800631e:	4653      	movge	r3, sl
 8006320:	2b00      	cmp	r3, #0
 8006322:	4699      	mov	r9, r3
 8006324:	dc36      	bgt.n	8006394 <_printf_float+0x360>
 8006326:	f04f 0b00 	mov.w	fp, #0
 800632a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800632e:	f104 021a 	add.w	r2, r4, #26
 8006332:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006334:	9306      	str	r3, [sp, #24]
 8006336:	eba3 0309 	sub.w	r3, r3, r9
 800633a:	455b      	cmp	r3, fp
 800633c:	dc31      	bgt.n	80063a2 <_printf_float+0x36e>
 800633e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006340:	459a      	cmp	sl, r3
 8006342:	dc3a      	bgt.n	80063ba <_printf_float+0x386>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	07da      	lsls	r2, r3, #31
 8006348:	d437      	bmi.n	80063ba <_printf_float+0x386>
 800634a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800634c:	ebaa 0903 	sub.w	r9, sl, r3
 8006350:	9b06      	ldr	r3, [sp, #24]
 8006352:	ebaa 0303 	sub.w	r3, sl, r3
 8006356:	4599      	cmp	r9, r3
 8006358:	bfa8      	it	ge
 800635a:	4699      	movge	r9, r3
 800635c:	f1b9 0f00 	cmp.w	r9, #0
 8006360:	dc33      	bgt.n	80063ca <_printf_float+0x396>
 8006362:	f04f 0800 	mov.w	r8, #0
 8006366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800636a:	f104 0b1a 	add.w	fp, r4, #26
 800636e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006370:	ebaa 0303 	sub.w	r3, sl, r3
 8006374:	eba3 0309 	sub.w	r3, r3, r9
 8006378:	4543      	cmp	r3, r8
 800637a:	f77f af79 	ble.w	8006270 <_printf_float+0x23c>
 800637e:	2301      	movs	r3, #1
 8006380:	465a      	mov	r2, fp
 8006382:	4631      	mov	r1, r6
 8006384:	4628      	mov	r0, r5
 8006386:	47b8      	blx	r7
 8006388:	3001      	adds	r0, #1
 800638a:	f43f aeae 	beq.w	80060ea <_printf_float+0xb6>
 800638e:	f108 0801 	add.w	r8, r8, #1
 8006392:	e7ec      	b.n	800636e <_printf_float+0x33a>
 8006394:	4642      	mov	r2, r8
 8006396:	4631      	mov	r1, r6
 8006398:	4628      	mov	r0, r5
 800639a:	47b8      	blx	r7
 800639c:	3001      	adds	r0, #1
 800639e:	d1c2      	bne.n	8006326 <_printf_float+0x2f2>
 80063a0:	e6a3      	b.n	80060ea <_printf_float+0xb6>
 80063a2:	2301      	movs	r3, #1
 80063a4:	4631      	mov	r1, r6
 80063a6:	4628      	mov	r0, r5
 80063a8:	9206      	str	r2, [sp, #24]
 80063aa:	47b8      	blx	r7
 80063ac:	3001      	adds	r0, #1
 80063ae:	f43f ae9c 	beq.w	80060ea <_printf_float+0xb6>
 80063b2:	9a06      	ldr	r2, [sp, #24]
 80063b4:	f10b 0b01 	add.w	fp, fp, #1
 80063b8:	e7bb      	b.n	8006332 <_printf_float+0x2fe>
 80063ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063be:	4631      	mov	r1, r6
 80063c0:	4628      	mov	r0, r5
 80063c2:	47b8      	blx	r7
 80063c4:	3001      	adds	r0, #1
 80063c6:	d1c0      	bne.n	800634a <_printf_float+0x316>
 80063c8:	e68f      	b.n	80060ea <_printf_float+0xb6>
 80063ca:	9a06      	ldr	r2, [sp, #24]
 80063cc:	464b      	mov	r3, r9
 80063ce:	4442      	add	r2, r8
 80063d0:	4631      	mov	r1, r6
 80063d2:	4628      	mov	r0, r5
 80063d4:	47b8      	blx	r7
 80063d6:	3001      	adds	r0, #1
 80063d8:	d1c3      	bne.n	8006362 <_printf_float+0x32e>
 80063da:	e686      	b.n	80060ea <_printf_float+0xb6>
 80063dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063e0:	f1ba 0f01 	cmp.w	sl, #1
 80063e4:	dc01      	bgt.n	80063ea <_printf_float+0x3b6>
 80063e6:	07db      	lsls	r3, r3, #31
 80063e8:	d536      	bpl.n	8006458 <_printf_float+0x424>
 80063ea:	2301      	movs	r3, #1
 80063ec:	4642      	mov	r2, r8
 80063ee:	4631      	mov	r1, r6
 80063f0:	4628      	mov	r0, r5
 80063f2:	47b8      	blx	r7
 80063f4:	3001      	adds	r0, #1
 80063f6:	f43f ae78 	beq.w	80060ea <_printf_float+0xb6>
 80063fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063fe:	4631      	mov	r1, r6
 8006400:	4628      	mov	r0, r5
 8006402:	47b8      	blx	r7
 8006404:	3001      	adds	r0, #1
 8006406:	f43f ae70 	beq.w	80060ea <_printf_float+0xb6>
 800640a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800640e:	2200      	movs	r2, #0
 8006410:	2300      	movs	r3, #0
 8006412:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006416:	f7fa fb57 	bl	8000ac8 <__aeabi_dcmpeq>
 800641a:	b9c0      	cbnz	r0, 800644e <_printf_float+0x41a>
 800641c:	4653      	mov	r3, sl
 800641e:	f108 0201 	add.w	r2, r8, #1
 8006422:	4631      	mov	r1, r6
 8006424:	4628      	mov	r0, r5
 8006426:	47b8      	blx	r7
 8006428:	3001      	adds	r0, #1
 800642a:	d10c      	bne.n	8006446 <_printf_float+0x412>
 800642c:	e65d      	b.n	80060ea <_printf_float+0xb6>
 800642e:	2301      	movs	r3, #1
 8006430:	465a      	mov	r2, fp
 8006432:	4631      	mov	r1, r6
 8006434:	4628      	mov	r0, r5
 8006436:	47b8      	blx	r7
 8006438:	3001      	adds	r0, #1
 800643a:	f43f ae56 	beq.w	80060ea <_printf_float+0xb6>
 800643e:	f108 0801 	add.w	r8, r8, #1
 8006442:	45d0      	cmp	r8, sl
 8006444:	dbf3      	blt.n	800642e <_printf_float+0x3fa>
 8006446:	464b      	mov	r3, r9
 8006448:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800644c:	e6df      	b.n	800620e <_printf_float+0x1da>
 800644e:	f04f 0800 	mov.w	r8, #0
 8006452:	f104 0b1a 	add.w	fp, r4, #26
 8006456:	e7f4      	b.n	8006442 <_printf_float+0x40e>
 8006458:	2301      	movs	r3, #1
 800645a:	4642      	mov	r2, r8
 800645c:	e7e1      	b.n	8006422 <_printf_float+0x3ee>
 800645e:	2301      	movs	r3, #1
 8006460:	464a      	mov	r2, r9
 8006462:	4631      	mov	r1, r6
 8006464:	4628      	mov	r0, r5
 8006466:	47b8      	blx	r7
 8006468:	3001      	adds	r0, #1
 800646a:	f43f ae3e 	beq.w	80060ea <_printf_float+0xb6>
 800646e:	f108 0801 	add.w	r8, r8, #1
 8006472:	68e3      	ldr	r3, [r4, #12]
 8006474:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006476:	1a5b      	subs	r3, r3, r1
 8006478:	4543      	cmp	r3, r8
 800647a:	dcf0      	bgt.n	800645e <_printf_float+0x42a>
 800647c:	e6fc      	b.n	8006278 <_printf_float+0x244>
 800647e:	f04f 0800 	mov.w	r8, #0
 8006482:	f104 0919 	add.w	r9, r4, #25
 8006486:	e7f4      	b.n	8006472 <_printf_float+0x43e>

08006488 <_printf_common>:
 8006488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	4616      	mov	r6, r2
 800648e:	4698      	mov	r8, r3
 8006490:	688a      	ldr	r2, [r1, #8]
 8006492:	690b      	ldr	r3, [r1, #16]
 8006494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006498:	4293      	cmp	r3, r2
 800649a:	bfb8      	it	lt
 800649c:	4613      	movlt	r3, r2
 800649e:	6033      	str	r3, [r6, #0]
 80064a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064a4:	4607      	mov	r7, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	b10a      	cbz	r2, 80064ae <_printf_common+0x26>
 80064aa:	3301      	adds	r3, #1
 80064ac:	6033      	str	r3, [r6, #0]
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	0699      	lsls	r1, r3, #26
 80064b2:	bf42      	ittt	mi
 80064b4:	6833      	ldrmi	r3, [r6, #0]
 80064b6:	3302      	addmi	r3, #2
 80064b8:	6033      	strmi	r3, [r6, #0]
 80064ba:	6825      	ldr	r5, [r4, #0]
 80064bc:	f015 0506 	ands.w	r5, r5, #6
 80064c0:	d106      	bne.n	80064d0 <_printf_common+0x48>
 80064c2:	f104 0a19 	add.w	sl, r4, #25
 80064c6:	68e3      	ldr	r3, [r4, #12]
 80064c8:	6832      	ldr	r2, [r6, #0]
 80064ca:	1a9b      	subs	r3, r3, r2
 80064cc:	42ab      	cmp	r3, r5
 80064ce:	dc26      	bgt.n	800651e <_printf_common+0x96>
 80064d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064d4:	6822      	ldr	r2, [r4, #0]
 80064d6:	3b00      	subs	r3, #0
 80064d8:	bf18      	it	ne
 80064da:	2301      	movne	r3, #1
 80064dc:	0692      	lsls	r2, r2, #26
 80064de:	d42b      	bmi.n	8006538 <_printf_common+0xb0>
 80064e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064e4:	4641      	mov	r1, r8
 80064e6:	4638      	mov	r0, r7
 80064e8:	47c8      	blx	r9
 80064ea:	3001      	adds	r0, #1
 80064ec:	d01e      	beq.n	800652c <_printf_common+0xa4>
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	6922      	ldr	r2, [r4, #16]
 80064f2:	f003 0306 	and.w	r3, r3, #6
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	bf02      	ittt	eq
 80064fa:	68e5      	ldreq	r5, [r4, #12]
 80064fc:	6833      	ldreq	r3, [r6, #0]
 80064fe:	1aed      	subeq	r5, r5, r3
 8006500:	68a3      	ldr	r3, [r4, #8]
 8006502:	bf0c      	ite	eq
 8006504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006508:	2500      	movne	r5, #0
 800650a:	4293      	cmp	r3, r2
 800650c:	bfc4      	itt	gt
 800650e:	1a9b      	subgt	r3, r3, r2
 8006510:	18ed      	addgt	r5, r5, r3
 8006512:	2600      	movs	r6, #0
 8006514:	341a      	adds	r4, #26
 8006516:	42b5      	cmp	r5, r6
 8006518:	d11a      	bne.n	8006550 <_printf_common+0xc8>
 800651a:	2000      	movs	r0, #0
 800651c:	e008      	b.n	8006530 <_printf_common+0xa8>
 800651e:	2301      	movs	r3, #1
 8006520:	4652      	mov	r2, sl
 8006522:	4641      	mov	r1, r8
 8006524:	4638      	mov	r0, r7
 8006526:	47c8      	blx	r9
 8006528:	3001      	adds	r0, #1
 800652a:	d103      	bne.n	8006534 <_printf_common+0xac>
 800652c:	f04f 30ff 	mov.w	r0, #4294967295
 8006530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006534:	3501      	adds	r5, #1
 8006536:	e7c6      	b.n	80064c6 <_printf_common+0x3e>
 8006538:	18e1      	adds	r1, r4, r3
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	2030      	movs	r0, #48	@ 0x30
 800653e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006542:	4422      	add	r2, r4
 8006544:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006548:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800654c:	3302      	adds	r3, #2
 800654e:	e7c7      	b.n	80064e0 <_printf_common+0x58>
 8006550:	2301      	movs	r3, #1
 8006552:	4622      	mov	r2, r4
 8006554:	4641      	mov	r1, r8
 8006556:	4638      	mov	r0, r7
 8006558:	47c8      	blx	r9
 800655a:	3001      	adds	r0, #1
 800655c:	d0e6      	beq.n	800652c <_printf_common+0xa4>
 800655e:	3601      	adds	r6, #1
 8006560:	e7d9      	b.n	8006516 <_printf_common+0x8e>
	...

08006564 <_printf_i>:
 8006564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006568:	7e0f      	ldrb	r7, [r1, #24]
 800656a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800656c:	2f78      	cmp	r7, #120	@ 0x78
 800656e:	4691      	mov	r9, r2
 8006570:	4680      	mov	r8, r0
 8006572:	460c      	mov	r4, r1
 8006574:	469a      	mov	sl, r3
 8006576:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800657a:	d807      	bhi.n	800658c <_printf_i+0x28>
 800657c:	2f62      	cmp	r7, #98	@ 0x62
 800657e:	d80a      	bhi.n	8006596 <_printf_i+0x32>
 8006580:	2f00      	cmp	r7, #0
 8006582:	f000 80d2 	beq.w	800672a <_printf_i+0x1c6>
 8006586:	2f58      	cmp	r7, #88	@ 0x58
 8006588:	f000 80b9 	beq.w	80066fe <_printf_i+0x19a>
 800658c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006590:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006594:	e03a      	b.n	800660c <_printf_i+0xa8>
 8006596:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800659a:	2b15      	cmp	r3, #21
 800659c:	d8f6      	bhi.n	800658c <_printf_i+0x28>
 800659e:	a101      	add	r1, pc, #4	@ (adr r1, 80065a4 <_printf_i+0x40>)
 80065a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065a4:	080065fd 	.word	0x080065fd
 80065a8:	08006611 	.word	0x08006611
 80065ac:	0800658d 	.word	0x0800658d
 80065b0:	0800658d 	.word	0x0800658d
 80065b4:	0800658d 	.word	0x0800658d
 80065b8:	0800658d 	.word	0x0800658d
 80065bc:	08006611 	.word	0x08006611
 80065c0:	0800658d 	.word	0x0800658d
 80065c4:	0800658d 	.word	0x0800658d
 80065c8:	0800658d 	.word	0x0800658d
 80065cc:	0800658d 	.word	0x0800658d
 80065d0:	08006711 	.word	0x08006711
 80065d4:	0800663b 	.word	0x0800663b
 80065d8:	080066cb 	.word	0x080066cb
 80065dc:	0800658d 	.word	0x0800658d
 80065e0:	0800658d 	.word	0x0800658d
 80065e4:	08006733 	.word	0x08006733
 80065e8:	0800658d 	.word	0x0800658d
 80065ec:	0800663b 	.word	0x0800663b
 80065f0:	0800658d 	.word	0x0800658d
 80065f4:	0800658d 	.word	0x0800658d
 80065f8:	080066d3 	.word	0x080066d3
 80065fc:	6833      	ldr	r3, [r6, #0]
 80065fe:	1d1a      	adds	r2, r3, #4
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6032      	str	r2, [r6, #0]
 8006604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006608:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800660c:	2301      	movs	r3, #1
 800660e:	e09d      	b.n	800674c <_printf_i+0x1e8>
 8006610:	6833      	ldr	r3, [r6, #0]
 8006612:	6820      	ldr	r0, [r4, #0]
 8006614:	1d19      	adds	r1, r3, #4
 8006616:	6031      	str	r1, [r6, #0]
 8006618:	0606      	lsls	r6, r0, #24
 800661a:	d501      	bpl.n	8006620 <_printf_i+0xbc>
 800661c:	681d      	ldr	r5, [r3, #0]
 800661e:	e003      	b.n	8006628 <_printf_i+0xc4>
 8006620:	0645      	lsls	r5, r0, #25
 8006622:	d5fb      	bpl.n	800661c <_printf_i+0xb8>
 8006624:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006628:	2d00      	cmp	r5, #0
 800662a:	da03      	bge.n	8006634 <_printf_i+0xd0>
 800662c:	232d      	movs	r3, #45	@ 0x2d
 800662e:	426d      	negs	r5, r5
 8006630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006634:	4859      	ldr	r0, [pc, #356]	@ (800679c <_printf_i+0x238>)
 8006636:	230a      	movs	r3, #10
 8006638:	e011      	b.n	800665e <_printf_i+0xfa>
 800663a:	6821      	ldr	r1, [r4, #0]
 800663c:	6833      	ldr	r3, [r6, #0]
 800663e:	0608      	lsls	r0, r1, #24
 8006640:	f853 5b04 	ldr.w	r5, [r3], #4
 8006644:	d402      	bmi.n	800664c <_printf_i+0xe8>
 8006646:	0649      	lsls	r1, r1, #25
 8006648:	bf48      	it	mi
 800664a:	b2ad      	uxthmi	r5, r5
 800664c:	2f6f      	cmp	r7, #111	@ 0x6f
 800664e:	4853      	ldr	r0, [pc, #332]	@ (800679c <_printf_i+0x238>)
 8006650:	6033      	str	r3, [r6, #0]
 8006652:	bf14      	ite	ne
 8006654:	230a      	movne	r3, #10
 8006656:	2308      	moveq	r3, #8
 8006658:	2100      	movs	r1, #0
 800665a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800665e:	6866      	ldr	r6, [r4, #4]
 8006660:	60a6      	str	r6, [r4, #8]
 8006662:	2e00      	cmp	r6, #0
 8006664:	bfa2      	ittt	ge
 8006666:	6821      	ldrge	r1, [r4, #0]
 8006668:	f021 0104 	bicge.w	r1, r1, #4
 800666c:	6021      	strge	r1, [r4, #0]
 800666e:	b90d      	cbnz	r5, 8006674 <_printf_i+0x110>
 8006670:	2e00      	cmp	r6, #0
 8006672:	d04b      	beq.n	800670c <_printf_i+0x1a8>
 8006674:	4616      	mov	r6, r2
 8006676:	fbb5 f1f3 	udiv	r1, r5, r3
 800667a:	fb03 5711 	mls	r7, r3, r1, r5
 800667e:	5dc7      	ldrb	r7, [r0, r7]
 8006680:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006684:	462f      	mov	r7, r5
 8006686:	42bb      	cmp	r3, r7
 8006688:	460d      	mov	r5, r1
 800668a:	d9f4      	bls.n	8006676 <_printf_i+0x112>
 800668c:	2b08      	cmp	r3, #8
 800668e:	d10b      	bne.n	80066a8 <_printf_i+0x144>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	07df      	lsls	r7, r3, #31
 8006694:	d508      	bpl.n	80066a8 <_printf_i+0x144>
 8006696:	6923      	ldr	r3, [r4, #16]
 8006698:	6861      	ldr	r1, [r4, #4]
 800669a:	4299      	cmp	r1, r3
 800669c:	bfde      	ittt	le
 800669e:	2330      	movle	r3, #48	@ 0x30
 80066a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066a8:	1b92      	subs	r2, r2, r6
 80066aa:	6122      	str	r2, [r4, #16]
 80066ac:	f8cd a000 	str.w	sl, [sp]
 80066b0:	464b      	mov	r3, r9
 80066b2:	aa03      	add	r2, sp, #12
 80066b4:	4621      	mov	r1, r4
 80066b6:	4640      	mov	r0, r8
 80066b8:	f7ff fee6 	bl	8006488 <_printf_common>
 80066bc:	3001      	adds	r0, #1
 80066be:	d14a      	bne.n	8006756 <_printf_i+0x1f2>
 80066c0:	f04f 30ff 	mov.w	r0, #4294967295
 80066c4:	b004      	add	sp, #16
 80066c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	f043 0320 	orr.w	r3, r3, #32
 80066d0:	6023      	str	r3, [r4, #0]
 80066d2:	4833      	ldr	r0, [pc, #204]	@ (80067a0 <_printf_i+0x23c>)
 80066d4:	2778      	movs	r7, #120	@ 0x78
 80066d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	6831      	ldr	r1, [r6, #0]
 80066de:	061f      	lsls	r7, r3, #24
 80066e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80066e4:	d402      	bmi.n	80066ec <_printf_i+0x188>
 80066e6:	065f      	lsls	r7, r3, #25
 80066e8:	bf48      	it	mi
 80066ea:	b2ad      	uxthmi	r5, r5
 80066ec:	6031      	str	r1, [r6, #0]
 80066ee:	07d9      	lsls	r1, r3, #31
 80066f0:	bf44      	itt	mi
 80066f2:	f043 0320 	orrmi.w	r3, r3, #32
 80066f6:	6023      	strmi	r3, [r4, #0]
 80066f8:	b11d      	cbz	r5, 8006702 <_printf_i+0x19e>
 80066fa:	2310      	movs	r3, #16
 80066fc:	e7ac      	b.n	8006658 <_printf_i+0xf4>
 80066fe:	4827      	ldr	r0, [pc, #156]	@ (800679c <_printf_i+0x238>)
 8006700:	e7e9      	b.n	80066d6 <_printf_i+0x172>
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	f023 0320 	bic.w	r3, r3, #32
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	e7f6      	b.n	80066fa <_printf_i+0x196>
 800670c:	4616      	mov	r6, r2
 800670e:	e7bd      	b.n	800668c <_printf_i+0x128>
 8006710:	6833      	ldr	r3, [r6, #0]
 8006712:	6825      	ldr	r5, [r4, #0]
 8006714:	6961      	ldr	r1, [r4, #20]
 8006716:	1d18      	adds	r0, r3, #4
 8006718:	6030      	str	r0, [r6, #0]
 800671a:	062e      	lsls	r6, r5, #24
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	d501      	bpl.n	8006724 <_printf_i+0x1c0>
 8006720:	6019      	str	r1, [r3, #0]
 8006722:	e002      	b.n	800672a <_printf_i+0x1c6>
 8006724:	0668      	lsls	r0, r5, #25
 8006726:	d5fb      	bpl.n	8006720 <_printf_i+0x1bc>
 8006728:	8019      	strh	r1, [r3, #0]
 800672a:	2300      	movs	r3, #0
 800672c:	6123      	str	r3, [r4, #16]
 800672e:	4616      	mov	r6, r2
 8006730:	e7bc      	b.n	80066ac <_printf_i+0x148>
 8006732:	6833      	ldr	r3, [r6, #0]
 8006734:	1d1a      	adds	r2, r3, #4
 8006736:	6032      	str	r2, [r6, #0]
 8006738:	681e      	ldr	r6, [r3, #0]
 800673a:	6862      	ldr	r2, [r4, #4]
 800673c:	2100      	movs	r1, #0
 800673e:	4630      	mov	r0, r6
 8006740:	f7f9 fd46 	bl	80001d0 <memchr>
 8006744:	b108      	cbz	r0, 800674a <_printf_i+0x1e6>
 8006746:	1b80      	subs	r0, r0, r6
 8006748:	6060      	str	r0, [r4, #4]
 800674a:	6863      	ldr	r3, [r4, #4]
 800674c:	6123      	str	r3, [r4, #16]
 800674e:	2300      	movs	r3, #0
 8006750:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006754:	e7aa      	b.n	80066ac <_printf_i+0x148>
 8006756:	6923      	ldr	r3, [r4, #16]
 8006758:	4632      	mov	r2, r6
 800675a:	4649      	mov	r1, r9
 800675c:	4640      	mov	r0, r8
 800675e:	47d0      	blx	sl
 8006760:	3001      	adds	r0, #1
 8006762:	d0ad      	beq.n	80066c0 <_printf_i+0x15c>
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	079b      	lsls	r3, r3, #30
 8006768:	d413      	bmi.n	8006792 <_printf_i+0x22e>
 800676a:	68e0      	ldr	r0, [r4, #12]
 800676c:	9b03      	ldr	r3, [sp, #12]
 800676e:	4298      	cmp	r0, r3
 8006770:	bfb8      	it	lt
 8006772:	4618      	movlt	r0, r3
 8006774:	e7a6      	b.n	80066c4 <_printf_i+0x160>
 8006776:	2301      	movs	r3, #1
 8006778:	4632      	mov	r2, r6
 800677a:	4649      	mov	r1, r9
 800677c:	4640      	mov	r0, r8
 800677e:	47d0      	blx	sl
 8006780:	3001      	adds	r0, #1
 8006782:	d09d      	beq.n	80066c0 <_printf_i+0x15c>
 8006784:	3501      	adds	r5, #1
 8006786:	68e3      	ldr	r3, [r4, #12]
 8006788:	9903      	ldr	r1, [sp, #12]
 800678a:	1a5b      	subs	r3, r3, r1
 800678c:	42ab      	cmp	r3, r5
 800678e:	dcf2      	bgt.n	8006776 <_printf_i+0x212>
 8006790:	e7eb      	b.n	800676a <_printf_i+0x206>
 8006792:	2500      	movs	r5, #0
 8006794:	f104 0619 	add.w	r6, r4, #25
 8006798:	e7f5      	b.n	8006786 <_printf_i+0x222>
 800679a:	bf00      	nop
 800679c:	0800af52 	.word	0x0800af52
 80067a0:	0800af63 	.word	0x0800af63

080067a4 <_scanf_float>:
 80067a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a8:	b087      	sub	sp, #28
 80067aa:	4617      	mov	r7, r2
 80067ac:	9303      	str	r3, [sp, #12]
 80067ae:	688b      	ldr	r3, [r1, #8]
 80067b0:	1e5a      	subs	r2, r3, #1
 80067b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80067b6:	bf81      	itttt	hi
 80067b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80067bc:	eb03 0b05 	addhi.w	fp, r3, r5
 80067c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80067c4:	608b      	strhi	r3, [r1, #8]
 80067c6:	680b      	ldr	r3, [r1, #0]
 80067c8:	460a      	mov	r2, r1
 80067ca:	f04f 0500 	mov.w	r5, #0
 80067ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80067d2:	f842 3b1c 	str.w	r3, [r2], #28
 80067d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80067da:	4680      	mov	r8, r0
 80067dc:	460c      	mov	r4, r1
 80067de:	bf98      	it	ls
 80067e0:	f04f 0b00 	movls.w	fp, #0
 80067e4:	9201      	str	r2, [sp, #4]
 80067e6:	4616      	mov	r6, r2
 80067e8:	46aa      	mov	sl, r5
 80067ea:	46a9      	mov	r9, r5
 80067ec:	9502      	str	r5, [sp, #8]
 80067ee:	68a2      	ldr	r2, [r4, #8]
 80067f0:	b152      	cbz	r2, 8006808 <_scanf_float+0x64>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b4e      	cmp	r3, #78	@ 0x4e
 80067f8:	d864      	bhi.n	80068c4 <_scanf_float+0x120>
 80067fa:	2b40      	cmp	r3, #64	@ 0x40
 80067fc:	d83c      	bhi.n	8006878 <_scanf_float+0xd4>
 80067fe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006802:	b2c8      	uxtb	r0, r1
 8006804:	280e      	cmp	r0, #14
 8006806:	d93a      	bls.n	800687e <_scanf_float+0xda>
 8006808:	f1b9 0f00 	cmp.w	r9, #0
 800680c:	d003      	beq.n	8006816 <_scanf_float+0x72>
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	f10a 3aff 	add.w	sl, sl, #4294967295
 800681a:	f1ba 0f01 	cmp.w	sl, #1
 800681e:	f200 8117 	bhi.w	8006a50 <_scanf_float+0x2ac>
 8006822:	9b01      	ldr	r3, [sp, #4]
 8006824:	429e      	cmp	r6, r3
 8006826:	f200 8108 	bhi.w	8006a3a <_scanf_float+0x296>
 800682a:	2001      	movs	r0, #1
 800682c:	b007      	add	sp, #28
 800682e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006832:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006836:	2a0d      	cmp	r2, #13
 8006838:	d8e6      	bhi.n	8006808 <_scanf_float+0x64>
 800683a:	a101      	add	r1, pc, #4	@ (adr r1, 8006840 <_scanf_float+0x9c>)
 800683c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006840:	08006987 	.word	0x08006987
 8006844:	08006809 	.word	0x08006809
 8006848:	08006809 	.word	0x08006809
 800684c:	08006809 	.word	0x08006809
 8006850:	080069e7 	.word	0x080069e7
 8006854:	080069bf 	.word	0x080069bf
 8006858:	08006809 	.word	0x08006809
 800685c:	08006809 	.word	0x08006809
 8006860:	08006995 	.word	0x08006995
 8006864:	08006809 	.word	0x08006809
 8006868:	08006809 	.word	0x08006809
 800686c:	08006809 	.word	0x08006809
 8006870:	08006809 	.word	0x08006809
 8006874:	0800694d 	.word	0x0800694d
 8006878:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800687c:	e7db      	b.n	8006836 <_scanf_float+0x92>
 800687e:	290e      	cmp	r1, #14
 8006880:	d8c2      	bhi.n	8006808 <_scanf_float+0x64>
 8006882:	a001      	add	r0, pc, #4	@ (adr r0, 8006888 <_scanf_float+0xe4>)
 8006884:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006888:	0800693d 	.word	0x0800693d
 800688c:	08006809 	.word	0x08006809
 8006890:	0800693d 	.word	0x0800693d
 8006894:	080069d3 	.word	0x080069d3
 8006898:	08006809 	.word	0x08006809
 800689c:	080068e5 	.word	0x080068e5
 80068a0:	08006923 	.word	0x08006923
 80068a4:	08006923 	.word	0x08006923
 80068a8:	08006923 	.word	0x08006923
 80068ac:	08006923 	.word	0x08006923
 80068b0:	08006923 	.word	0x08006923
 80068b4:	08006923 	.word	0x08006923
 80068b8:	08006923 	.word	0x08006923
 80068bc:	08006923 	.word	0x08006923
 80068c0:	08006923 	.word	0x08006923
 80068c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80068c6:	d809      	bhi.n	80068dc <_scanf_float+0x138>
 80068c8:	2b60      	cmp	r3, #96	@ 0x60
 80068ca:	d8b2      	bhi.n	8006832 <_scanf_float+0x8e>
 80068cc:	2b54      	cmp	r3, #84	@ 0x54
 80068ce:	d07b      	beq.n	80069c8 <_scanf_float+0x224>
 80068d0:	2b59      	cmp	r3, #89	@ 0x59
 80068d2:	d199      	bne.n	8006808 <_scanf_float+0x64>
 80068d4:	2d07      	cmp	r5, #7
 80068d6:	d197      	bne.n	8006808 <_scanf_float+0x64>
 80068d8:	2508      	movs	r5, #8
 80068da:	e02c      	b.n	8006936 <_scanf_float+0x192>
 80068dc:	2b74      	cmp	r3, #116	@ 0x74
 80068de:	d073      	beq.n	80069c8 <_scanf_float+0x224>
 80068e0:	2b79      	cmp	r3, #121	@ 0x79
 80068e2:	e7f6      	b.n	80068d2 <_scanf_float+0x12e>
 80068e4:	6821      	ldr	r1, [r4, #0]
 80068e6:	05c8      	lsls	r0, r1, #23
 80068e8:	d51b      	bpl.n	8006922 <_scanf_float+0x17e>
 80068ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80068ee:	6021      	str	r1, [r4, #0]
 80068f0:	f109 0901 	add.w	r9, r9, #1
 80068f4:	f1bb 0f00 	cmp.w	fp, #0
 80068f8:	d003      	beq.n	8006902 <_scanf_float+0x15e>
 80068fa:	3201      	adds	r2, #1
 80068fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006900:	60a2      	str	r2, [r4, #8]
 8006902:	68a3      	ldr	r3, [r4, #8]
 8006904:	3b01      	subs	r3, #1
 8006906:	60a3      	str	r3, [r4, #8]
 8006908:	6923      	ldr	r3, [r4, #16]
 800690a:	3301      	adds	r3, #1
 800690c:	6123      	str	r3, [r4, #16]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3b01      	subs	r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	607b      	str	r3, [r7, #4]
 8006916:	f340 8087 	ble.w	8006a28 <_scanf_float+0x284>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	3301      	adds	r3, #1
 800691e:	603b      	str	r3, [r7, #0]
 8006920:	e765      	b.n	80067ee <_scanf_float+0x4a>
 8006922:	eb1a 0105 	adds.w	r1, sl, r5
 8006926:	f47f af6f 	bne.w	8006808 <_scanf_float+0x64>
 800692a:	6822      	ldr	r2, [r4, #0]
 800692c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006930:	6022      	str	r2, [r4, #0]
 8006932:	460d      	mov	r5, r1
 8006934:	468a      	mov	sl, r1
 8006936:	f806 3b01 	strb.w	r3, [r6], #1
 800693a:	e7e2      	b.n	8006902 <_scanf_float+0x15e>
 800693c:	6822      	ldr	r2, [r4, #0]
 800693e:	0610      	lsls	r0, r2, #24
 8006940:	f57f af62 	bpl.w	8006808 <_scanf_float+0x64>
 8006944:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006948:	6022      	str	r2, [r4, #0]
 800694a:	e7f4      	b.n	8006936 <_scanf_float+0x192>
 800694c:	f1ba 0f00 	cmp.w	sl, #0
 8006950:	d10e      	bne.n	8006970 <_scanf_float+0x1cc>
 8006952:	f1b9 0f00 	cmp.w	r9, #0
 8006956:	d10e      	bne.n	8006976 <_scanf_float+0x1d2>
 8006958:	6822      	ldr	r2, [r4, #0]
 800695a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800695e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006962:	d108      	bne.n	8006976 <_scanf_float+0x1d2>
 8006964:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006968:	6022      	str	r2, [r4, #0]
 800696a:	f04f 0a01 	mov.w	sl, #1
 800696e:	e7e2      	b.n	8006936 <_scanf_float+0x192>
 8006970:	f1ba 0f02 	cmp.w	sl, #2
 8006974:	d055      	beq.n	8006a22 <_scanf_float+0x27e>
 8006976:	2d01      	cmp	r5, #1
 8006978:	d002      	beq.n	8006980 <_scanf_float+0x1dc>
 800697a:	2d04      	cmp	r5, #4
 800697c:	f47f af44 	bne.w	8006808 <_scanf_float+0x64>
 8006980:	3501      	adds	r5, #1
 8006982:	b2ed      	uxtb	r5, r5
 8006984:	e7d7      	b.n	8006936 <_scanf_float+0x192>
 8006986:	f1ba 0f01 	cmp.w	sl, #1
 800698a:	f47f af3d 	bne.w	8006808 <_scanf_float+0x64>
 800698e:	f04f 0a02 	mov.w	sl, #2
 8006992:	e7d0      	b.n	8006936 <_scanf_float+0x192>
 8006994:	b97d      	cbnz	r5, 80069b6 <_scanf_float+0x212>
 8006996:	f1b9 0f00 	cmp.w	r9, #0
 800699a:	f47f af38 	bne.w	800680e <_scanf_float+0x6a>
 800699e:	6822      	ldr	r2, [r4, #0]
 80069a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80069a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80069a8:	f040 8108 	bne.w	8006bbc <_scanf_float+0x418>
 80069ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80069b0:	6022      	str	r2, [r4, #0]
 80069b2:	2501      	movs	r5, #1
 80069b4:	e7bf      	b.n	8006936 <_scanf_float+0x192>
 80069b6:	2d03      	cmp	r5, #3
 80069b8:	d0e2      	beq.n	8006980 <_scanf_float+0x1dc>
 80069ba:	2d05      	cmp	r5, #5
 80069bc:	e7de      	b.n	800697c <_scanf_float+0x1d8>
 80069be:	2d02      	cmp	r5, #2
 80069c0:	f47f af22 	bne.w	8006808 <_scanf_float+0x64>
 80069c4:	2503      	movs	r5, #3
 80069c6:	e7b6      	b.n	8006936 <_scanf_float+0x192>
 80069c8:	2d06      	cmp	r5, #6
 80069ca:	f47f af1d 	bne.w	8006808 <_scanf_float+0x64>
 80069ce:	2507      	movs	r5, #7
 80069d0:	e7b1      	b.n	8006936 <_scanf_float+0x192>
 80069d2:	6822      	ldr	r2, [r4, #0]
 80069d4:	0591      	lsls	r1, r2, #22
 80069d6:	f57f af17 	bpl.w	8006808 <_scanf_float+0x64>
 80069da:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80069de:	6022      	str	r2, [r4, #0]
 80069e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80069e4:	e7a7      	b.n	8006936 <_scanf_float+0x192>
 80069e6:	6822      	ldr	r2, [r4, #0]
 80069e8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80069ec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80069f0:	d006      	beq.n	8006a00 <_scanf_float+0x25c>
 80069f2:	0550      	lsls	r0, r2, #21
 80069f4:	f57f af08 	bpl.w	8006808 <_scanf_float+0x64>
 80069f8:	f1b9 0f00 	cmp.w	r9, #0
 80069fc:	f000 80de 	beq.w	8006bbc <_scanf_float+0x418>
 8006a00:	0591      	lsls	r1, r2, #22
 8006a02:	bf58      	it	pl
 8006a04:	9902      	ldrpl	r1, [sp, #8]
 8006a06:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a0a:	bf58      	it	pl
 8006a0c:	eba9 0101 	subpl.w	r1, r9, r1
 8006a10:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006a14:	bf58      	it	pl
 8006a16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006a1a:	6022      	str	r2, [r4, #0]
 8006a1c:	f04f 0900 	mov.w	r9, #0
 8006a20:	e789      	b.n	8006936 <_scanf_float+0x192>
 8006a22:	f04f 0a03 	mov.w	sl, #3
 8006a26:	e786      	b.n	8006936 <_scanf_float+0x192>
 8006a28:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006a2c:	4639      	mov	r1, r7
 8006a2e:	4640      	mov	r0, r8
 8006a30:	4798      	blx	r3
 8006a32:	2800      	cmp	r0, #0
 8006a34:	f43f aedb 	beq.w	80067ee <_scanf_float+0x4a>
 8006a38:	e6e6      	b.n	8006808 <_scanf_float+0x64>
 8006a3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a42:	463a      	mov	r2, r7
 8006a44:	4640      	mov	r0, r8
 8006a46:	4798      	blx	r3
 8006a48:	6923      	ldr	r3, [r4, #16]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	6123      	str	r3, [r4, #16]
 8006a4e:	e6e8      	b.n	8006822 <_scanf_float+0x7e>
 8006a50:	1e6b      	subs	r3, r5, #1
 8006a52:	2b06      	cmp	r3, #6
 8006a54:	d824      	bhi.n	8006aa0 <_scanf_float+0x2fc>
 8006a56:	2d02      	cmp	r5, #2
 8006a58:	d836      	bhi.n	8006ac8 <_scanf_float+0x324>
 8006a5a:	9b01      	ldr	r3, [sp, #4]
 8006a5c:	429e      	cmp	r6, r3
 8006a5e:	f67f aee4 	bls.w	800682a <_scanf_float+0x86>
 8006a62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a6a:	463a      	mov	r2, r7
 8006a6c:	4640      	mov	r0, r8
 8006a6e:	4798      	blx	r3
 8006a70:	6923      	ldr	r3, [r4, #16]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	6123      	str	r3, [r4, #16]
 8006a76:	e7f0      	b.n	8006a5a <_scanf_float+0x2b6>
 8006a78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a7c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006a80:	463a      	mov	r2, r7
 8006a82:	4640      	mov	r0, r8
 8006a84:	4798      	blx	r3
 8006a86:	6923      	ldr	r3, [r4, #16]
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	6123      	str	r3, [r4, #16]
 8006a8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a90:	fa5f fa8a 	uxtb.w	sl, sl
 8006a94:	f1ba 0f02 	cmp.w	sl, #2
 8006a98:	d1ee      	bne.n	8006a78 <_scanf_float+0x2d4>
 8006a9a:	3d03      	subs	r5, #3
 8006a9c:	b2ed      	uxtb	r5, r5
 8006a9e:	1b76      	subs	r6, r6, r5
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	05da      	lsls	r2, r3, #23
 8006aa4:	d530      	bpl.n	8006b08 <_scanf_float+0x364>
 8006aa6:	055b      	lsls	r3, r3, #21
 8006aa8:	d511      	bpl.n	8006ace <_scanf_float+0x32a>
 8006aaa:	9b01      	ldr	r3, [sp, #4]
 8006aac:	429e      	cmp	r6, r3
 8006aae:	f67f aebc 	bls.w	800682a <_scanf_float+0x86>
 8006ab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ab6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006aba:	463a      	mov	r2, r7
 8006abc:	4640      	mov	r0, r8
 8006abe:	4798      	blx	r3
 8006ac0:	6923      	ldr	r3, [r4, #16]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	6123      	str	r3, [r4, #16]
 8006ac6:	e7f0      	b.n	8006aaa <_scanf_float+0x306>
 8006ac8:	46aa      	mov	sl, r5
 8006aca:	46b3      	mov	fp, r6
 8006acc:	e7de      	b.n	8006a8c <_scanf_float+0x2e8>
 8006ace:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ad2:	6923      	ldr	r3, [r4, #16]
 8006ad4:	2965      	cmp	r1, #101	@ 0x65
 8006ad6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ada:	f106 35ff 	add.w	r5, r6, #4294967295
 8006ade:	6123      	str	r3, [r4, #16]
 8006ae0:	d00c      	beq.n	8006afc <_scanf_float+0x358>
 8006ae2:	2945      	cmp	r1, #69	@ 0x45
 8006ae4:	d00a      	beq.n	8006afc <_scanf_float+0x358>
 8006ae6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006aea:	463a      	mov	r2, r7
 8006aec:	4640      	mov	r0, r8
 8006aee:	4798      	blx	r3
 8006af0:	6923      	ldr	r3, [r4, #16]
 8006af2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	1eb5      	subs	r5, r6, #2
 8006afa:	6123      	str	r3, [r4, #16]
 8006afc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b00:	463a      	mov	r2, r7
 8006b02:	4640      	mov	r0, r8
 8006b04:	4798      	blx	r3
 8006b06:	462e      	mov	r6, r5
 8006b08:	6822      	ldr	r2, [r4, #0]
 8006b0a:	f012 0210 	ands.w	r2, r2, #16
 8006b0e:	d001      	beq.n	8006b14 <_scanf_float+0x370>
 8006b10:	2000      	movs	r0, #0
 8006b12:	e68b      	b.n	800682c <_scanf_float+0x88>
 8006b14:	7032      	strb	r2, [r6, #0]
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b20:	d11c      	bne.n	8006b5c <_scanf_float+0x3b8>
 8006b22:	9b02      	ldr	r3, [sp, #8]
 8006b24:	454b      	cmp	r3, r9
 8006b26:	eba3 0209 	sub.w	r2, r3, r9
 8006b2a:	d123      	bne.n	8006b74 <_scanf_float+0x3d0>
 8006b2c:	9901      	ldr	r1, [sp, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	4640      	mov	r0, r8
 8006b32:	f002 fcfd 	bl	8009530 <_strtod_r>
 8006b36:	9b03      	ldr	r3, [sp, #12]
 8006b38:	6821      	ldr	r1, [r4, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f011 0f02 	tst.w	r1, #2
 8006b40:	ec57 6b10 	vmov	r6, r7, d0
 8006b44:	f103 0204 	add.w	r2, r3, #4
 8006b48:	d01f      	beq.n	8006b8a <_scanf_float+0x3e6>
 8006b4a:	9903      	ldr	r1, [sp, #12]
 8006b4c:	600a      	str	r2, [r1, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	e9c3 6700 	strd	r6, r7, [r3]
 8006b54:	68e3      	ldr	r3, [r4, #12]
 8006b56:	3301      	adds	r3, #1
 8006b58:	60e3      	str	r3, [r4, #12]
 8006b5a:	e7d9      	b.n	8006b10 <_scanf_float+0x36c>
 8006b5c:	9b04      	ldr	r3, [sp, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0e4      	beq.n	8006b2c <_scanf_float+0x388>
 8006b62:	9905      	ldr	r1, [sp, #20]
 8006b64:	230a      	movs	r3, #10
 8006b66:	3101      	adds	r1, #1
 8006b68:	4640      	mov	r0, r8
 8006b6a:	f002 fd61 	bl	8009630 <_strtol_r>
 8006b6e:	9b04      	ldr	r3, [sp, #16]
 8006b70:	9e05      	ldr	r6, [sp, #20]
 8006b72:	1ac2      	subs	r2, r0, r3
 8006b74:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006b78:	429e      	cmp	r6, r3
 8006b7a:	bf28      	it	cs
 8006b7c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006b80:	4910      	ldr	r1, [pc, #64]	@ (8006bc4 <_scanf_float+0x420>)
 8006b82:	4630      	mov	r0, r6
 8006b84:	f000 f954 	bl	8006e30 <siprintf>
 8006b88:	e7d0      	b.n	8006b2c <_scanf_float+0x388>
 8006b8a:	f011 0f04 	tst.w	r1, #4
 8006b8e:	9903      	ldr	r1, [sp, #12]
 8006b90:	600a      	str	r2, [r1, #0]
 8006b92:	d1dc      	bne.n	8006b4e <_scanf_float+0x3aa>
 8006b94:	681d      	ldr	r5, [r3, #0]
 8006b96:	4632      	mov	r2, r6
 8006b98:	463b      	mov	r3, r7
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	4639      	mov	r1, r7
 8006b9e:	f7f9 ffc5 	bl	8000b2c <__aeabi_dcmpun>
 8006ba2:	b128      	cbz	r0, 8006bb0 <_scanf_float+0x40c>
 8006ba4:	4808      	ldr	r0, [pc, #32]	@ (8006bc8 <_scanf_float+0x424>)
 8006ba6:	f000 fabb 	bl	8007120 <nanf>
 8006baa:	ed85 0a00 	vstr	s0, [r5]
 8006bae:	e7d1      	b.n	8006b54 <_scanf_float+0x3b0>
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	4639      	mov	r1, r7
 8006bb4:	f7fa f818 	bl	8000be8 <__aeabi_d2f>
 8006bb8:	6028      	str	r0, [r5, #0]
 8006bba:	e7cb      	b.n	8006b54 <_scanf_float+0x3b0>
 8006bbc:	f04f 0900 	mov.w	r9, #0
 8006bc0:	e629      	b.n	8006816 <_scanf_float+0x72>
 8006bc2:	bf00      	nop
 8006bc4:	0800af74 	.word	0x0800af74
 8006bc8:	0800b30d 	.word	0x0800b30d

08006bcc <std>:
 8006bcc:	2300      	movs	r3, #0
 8006bce:	b510      	push	{r4, lr}
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	e9c0 3300 	strd	r3, r3, [r0]
 8006bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bda:	6083      	str	r3, [r0, #8]
 8006bdc:	8181      	strh	r1, [r0, #12]
 8006bde:	6643      	str	r3, [r0, #100]	@ 0x64
 8006be0:	81c2      	strh	r2, [r0, #14]
 8006be2:	6183      	str	r3, [r0, #24]
 8006be4:	4619      	mov	r1, r3
 8006be6:	2208      	movs	r2, #8
 8006be8:	305c      	adds	r0, #92	@ 0x5c
 8006bea:	f000 fa19 	bl	8007020 <memset>
 8006bee:	4b0d      	ldr	r3, [pc, #52]	@ (8006c24 <std+0x58>)
 8006bf0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c28 <std+0x5c>)
 8006bf4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c2c <std+0x60>)
 8006bf8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006c30 <std+0x64>)
 8006bfc:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006c34 <std+0x68>)
 8006c00:	6224      	str	r4, [r4, #32]
 8006c02:	429c      	cmp	r4, r3
 8006c04:	d006      	beq.n	8006c14 <std+0x48>
 8006c06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c0a:	4294      	cmp	r4, r2
 8006c0c:	d002      	beq.n	8006c14 <std+0x48>
 8006c0e:	33d0      	adds	r3, #208	@ 0xd0
 8006c10:	429c      	cmp	r4, r3
 8006c12:	d105      	bne.n	8006c20 <std+0x54>
 8006c14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c1c:	f000 ba7c 	b.w	8007118 <__retarget_lock_init_recursive>
 8006c20:	bd10      	pop	{r4, pc}
 8006c22:	bf00      	nop
 8006c24:	08006e71 	.word	0x08006e71
 8006c28:	08006e93 	.word	0x08006e93
 8006c2c:	08006ecb 	.word	0x08006ecb
 8006c30:	08006eef 	.word	0x08006eef
 8006c34:	20000468 	.word	0x20000468

08006c38 <stdio_exit_handler>:
 8006c38:	4a02      	ldr	r2, [pc, #8]	@ (8006c44 <stdio_exit_handler+0xc>)
 8006c3a:	4903      	ldr	r1, [pc, #12]	@ (8006c48 <stdio_exit_handler+0x10>)
 8006c3c:	4803      	ldr	r0, [pc, #12]	@ (8006c4c <stdio_exit_handler+0x14>)
 8006c3e:	f000 b869 	b.w	8006d14 <_fwalk_sglue>
 8006c42:	bf00      	nop
 8006c44:	2000009c 	.word	0x2000009c
 8006c48:	08009c71 	.word	0x08009c71
 8006c4c:	200000ac 	.word	0x200000ac

08006c50 <cleanup_stdio>:
 8006c50:	6841      	ldr	r1, [r0, #4]
 8006c52:	4b0c      	ldr	r3, [pc, #48]	@ (8006c84 <cleanup_stdio+0x34>)
 8006c54:	4299      	cmp	r1, r3
 8006c56:	b510      	push	{r4, lr}
 8006c58:	4604      	mov	r4, r0
 8006c5a:	d001      	beq.n	8006c60 <cleanup_stdio+0x10>
 8006c5c:	f003 f808 	bl	8009c70 <_fflush_r>
 8006c60:	68a1      	ldr	r1, [r4, #8]
 8006c62:	4b09      	ldr	r3, [pc, #36]	@ (8006c88 <cleanup_stdio+0x38>)
 8006c64:	4299      	cmp	r1, r3
 8006c66:	d002      	beq.n	8006c6e <cleanup_stdio+0x1e>
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f003 f801 	bl	8009c70 <_fflush_r>
 8006c6e:	68e1      	ldr	r1, [r4, #12]
 8006c70:	4b06      	ldr	r3, [pc, #24]	@ (8006c8c <cleanup_stdio+0x3c>)
 8006c72:	4299      	cmp	r1, r3
 8006c74:	d004      	beq.n	8006c80 <cleanup_stdio+0x30>
 8006c76:	4620      	mov	r0, r4
 8006c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c7c:	f002 bff8 	b.w	8009c70 <_fflush_r>
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	bf00      	nop
 8006c84:	20000468 	.word	0x20000468
 8006c88:	200004d0 	.word	0x200004d0
 8006c8c:	20000538 	.word	0x20000538

08006c90 <global_stdio_init.part.0>:
 8006c90:	b510      	push	{r4, lr}
 8006c92:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc0 <global_stdio_init.part.0+0x30>)
 8006c94:	4c0b      	ldr	r4, [pc, #44]	@ (8006cc4 <global_stdio_init.part.0+0x34>)
 8006c96:	4a0c      	ldr	r2, [pc, #48]	@ (8006cc8 <global_stdio_init.part.0+0x38>)
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2104      	movs	r1, #4
 8006ca0:	f7ff ff94 	bl	8006bcc <std>
 8006ca4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ca8:	2201      	movs	r2, #1
 8006caa:	2109      	movs	r1, #9
 8006cac:	f7ff ff8e 	bl	8006bcc <std>
 8006cb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cba:	2112      	movs	r1, #18
 8006cbc:	f7ff bf86 	b.w	8006bcc <std>
 8006cc0:	200005a0 	.word	0x200005a0
 8006cc4:	20000468 	.word	0x20000468
 8006cc8:	08006c39 	.word	0x08006c39

08006ccc <__sfp_lock_acquire>:
 8006ccc:	4801      	ldr	r0, [pc, #4]	@ (8006cd4 <__sfp_lock_acquire+0x8>)
 8006cce:	f000 ba24 	b.w	800711a <__retarget_lock_acquire_recursive>
 8006cd2:	bf00      	nop
 8006cd4:	200005a9 	.word	0x200005a9

08006cd8 <__sfp_lock_release>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	@ (8006ce0 <__sfp_lock_release+0x8>)
 8006cda:	f000 ba1f 	b.w	800711c <__retarget_lock_release_recursive>
 8006cde:	bf00      	nop
 8006ce0:	200005a9 	.word	0x200005a9

08006ce4 <__sinit>:
 8006ce4:	b510      	push	{r4, lr}
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	f7ff fff0 	bl	8006ccc <__sfp_lock_acquire>
 8006cec:	6a23      	ldr	r3, [r4, #32]
 8006cee:	b11b      	cbz	r3, 8006cf8 <__sinit+0x14>
 8006cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cf4:	f7ff bff0 	b.w	8006cd8 <__sfp_lock_release>
 8006cf8:	4b04      	ldr	r3, [pc, #16]	@ (8006d0c <__sinit+0x28>)
 8006cfa:	6223      	str	r3, [r4, #32]
 8006cfc:	4b04      	ldr	r3, [pc, #16]	@ (8006d10 <__sinit+0x2c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1f5      	bne.n	8006cf0 <__sinit+0xc>
 8006d04:	f7ff ffc4 	bl	8006c90 <global_stdio_init.part.0>
 8006d08:	e7f2      	b.n	8006cf0 <__sinit+0xc>
 8006d0a:	bf00      	nop
 8006d0c:	08006c51 	.word	0x08006c51
 8006d10:	200005a0 	.word	0x200005a0

08006d14 <_fwalk_sglue>:
 8006d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d18:	4607      	mov	r7, r0
 8006d1a:	4688      	mov	r8, r1
 8006d1c:	4614      	mov	r4, r2
 8006d1e:	2600      	movs	r6, #0
 8006d20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d24:	f1b9 0901 	subs.w	r9, r9, #1
 8006d28:	d505      	bpl.n	8006d36 <_fwalk_sglue+0x22>
 8006d2a:	6824      	ldr	r4, [r4, #0]
 8006d2c:	2c00      	cmp	r4, #0
 8006d2e:	d1f7      	bne.n	8006d20 <_fwalk_sglue+0xc>
 8006d30:	4630      	mov	r0, r6
 8006d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d36:	89ab      	ldrh	r3, [r5, #12]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d907      	bls.n	8006d4c <_fwalk_sglue+0x38>
 8006d3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d40:	3301      	adds	r3, #1
 8006d42:	d003      	beq.n	8006d4c <_fwalk_sglue+0x38>
 8006d44:	4629      	mov	r1, r5
 8006d46:	4638      	mov	r0, r7
 8006d48:	47c0      	blx	r8
 8006d4a:	4306      	orrs	r6, r0
 8006d4c:	3568      	adds	r5, #104	@ 0x68
 8006d4e:	e7e9      	b.n	8006d24 <_fwalk_sglue+0x10>

08006d50 <iprintf>:
 8006d50:	b40f      	push	{r0, r1, r2, r3}
 8006d52:	b507      	push	{r0, r1, r2, lr}
 8006d54:	4906      	ldr	r1, [pc, #24]	@ (8006d70 <iprintf+0x20>)
 8006d56:	ab04      	add	r3, sp, #16
 8006d58:	6808      	ldr	r0, [r1, #0]
 8006d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d5e:	6881      	ldr	r1, [r0, #8]
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	f002 fde9 	bl	8009938 <_vfiprintf_r>
 8006d66:	b003      	add	sp, #12
 8006d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d6c:	b004      	add	sp, #16
 8006d6e:	4770      	bx	lr
 8006d70:	200000a8 	.word	0x200000a8

08006d74 <_puts_r>:
 8006d74:	6a03      	ldr	r3, [r0, #32]
 8006d76:	b570      	push	{r4, r5, r6, lr}
 8006d78:	6884      	ldr	r4, [r0, #8]
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	460e      	mov	r6, r1
 8006d7e:	b90b      	cbnz	r3, 8006d84 <_puts_r+0x10>
 8006d80:	f7ff ffb0 	bl	8006ce4 <__sinit>
 8006d84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d86:	07db      	lsls	r3, r3, #31
 8006d88:	d405      	bmi.n	8006d96 <_puts_r+0x22>
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	0598      	lsls	r0, r3, #22
 8006d8e:	d402      	bmi.n	8006d96 <_puts_r+0x22>
 8006d90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d92:	f000 f9c2 	bl	800711a <__retarget_lock_acquire_recursive>
 8006d96:	89a3      	ldrh	r3, [r4, #12]
 8006d98:	0719      	lsls	r1, r3, #28
 8006d9a:	d502      	bpl.n	8006da2 <_puts_r+0x2e>
 8006d9c:	6923      	ldr	r3, [r4, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d135      	bne.n	8006e0e <_puts_r+0x9a>
 8006da2:	4621      	mov	r1, r4
 8006da4:	4628      	mov	r0, r5
 8006da6:	f000 f8e5 	bl	8006f74 <__swsetup_r>
 8006daa:	b380      	cbz	r0, 8006e0e <_puts_r+0x9a>
 8006dac:	f04f 35ff 	mov.w	r5, #4294967295
 8006db0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006db2:	07da      	lsls	r2, r3, #31
 8006db4:	d405      	bmi.n	8006dc2 <_puts_r+0x4e>
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	059b      	lsls	r3, r3, #22
 8006dba:	d402      	bmi.n	8006dc2 <_puts_r+0x4e>
 8006dbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dbe:	f000 f9ad 	bl	800711c <__retarget_lock_release_recursive>
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	bd70      	pop	{r4, r5, r6, pc}
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	da04      	bge.n	8006dd4 <_puts_r+0x60>
 8006dca:	69a2      	ldr	r2, [r4, #24]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	dc17      	bgt.n	8006e00 <_puts_r+0x8c>
 8006dd0:	290a      	cmp	r1, #10
 8006dd2:	d015      	beq.n	8006e00 <_puts_r+0x8c>
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	6022      	str	r2, [r4, #0]
 8006dda:	7019      	strb	r1, [r3, #0]
 8006ddc:	68a3      	ldr	r3, [r4, #8]
 8006dde:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006de2:	3b01      	subs	r3, #1
 8006de4:	60a3      	str	r3, [r4, #8]
 8006de6:	2900      	cmp	r1, #0
 8006de8:	d1ed      	bne.n	8006dc6 <_puts_r+0x52>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	da11      	bge.n	8006e12 <_puts_r+0x9e>
 8006dee:	4622      	mov	r2, r4
 8006df0:	210a      	movs	r1, #10
 8006df2:	4628      	mov	r0, r5
 8006df4:	f000 f87f 	bl	8006ef6 <__swbuf_r>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d0d7      	beq.n	8006dac <_puts_r+0x38>
 8006dfc:	250a      	movs	r5, #10
 8006dfe:	e7d7      	b.n	8006db0 <_puts_r+0x3c>
 8006e00:	4622      	mov	r2, r4
 8006e02:	4628      	mov	r0, r5
 8006e04:	f000 f877 	bl	8006ef6 <__swbuf_r>
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d1e7      	bne.n	8006ddc <_puts_r+0x68>
 8006e0c:	e7ce      	b.n	8006dac <_puts_r+0x38>
 8006e0e:	3e01      	subs	r6, #1
 8006e10:	e7e4      	b.n	8006ddc <_puts_r+0x68>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	6022      	str	r2, [r4, #0]
 8006e18:	220a      	movs	r2, #10
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	e7ee      	b.n	8006dfc <_puts_r+0x88>
	...

08006e20 <puts>:
 8006e20:	4b02      	ldr	r3, [pc, #8]	@ (8006e2c <puts+0xc>)
 8006e22:	4601      	mov	r1, r0
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	f7ff bfa5 	b.w	8006d74 <_puts_r>
 8006e2a:	bf00      	nop
 8006e2c:	200000a8 	.word	0x200000a8

08006e30 <siprintf>:
 8006e30:	b40e      	push	{r1, r2, r3}
 8006e32:	b500      	push	{lr}
 8006e34:	b09c      	sub	sp, #112	@ 0x70
 8006e36:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e38:	9002      	str	r0, [sp, #8]
 8006e3a:	9006      	str	r0, [sp, #24]
 8006e3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e40:	4809      	ldr	r0, [pc, #36]	@ (8006e68 <siprintf+0x38>)
 8006e42:	9107      	str	r1, [sp, #28]
 8006e44:	9104      	str	r1, [sp, #16]
 8006e46:	4909      	ldr	r1, [pc, #36]	@ (8006e6c <siprintf+0x3c>)
 8006e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e4c:	9105      	str	r1, [sp, #20]
 8006e4e:	6800      	ldr	r0, [r0, #0]
 8006e50:	9301      	str	r3, [sp, #4]
 8006e52:	a902      	add	r1, sp, #8
 8006e54:	f002 fc4a 	bl	80096ec <_svfiprintf_r>
 8006e58:	9b02      	ldr	r3, [sp, #8]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	b01c      	add	sp, #112	@ 0x70
 8006e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e64:	b003      	add	sp, #12
 8006e66:	4770      	bx	lr
 8006e68:	200000a8 	.word	0x200000a8
 8006e6c:	ffff0208 	.word	0xffff0208

08006e70 <__sread>:
 8006e70:	b510      	push	{r4, lr}
 8006e72:	460c      	mov	r4, r1
 8006e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e78:	f000 f900 	bl	800707c <_read_r>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	bfab      	itete	ge
 8006e80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e82:	89a3      	ldrhlt	r3, [r4, #12]
 8006e84:	181b      	addge	r3, r3, r0
 8006e86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e8a:	bfac      	ite	ge
 8006e8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e8e:	81a3      	strhlt	r3, [r4, #12]
 8006e90:	bd10      	pop	{r4, pc}

08006e92 <__swrite>:
 8006e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e96:	461f      	mov	r7, r3
 8006e98:	898b      	ldrh	r3, [r1, #12]
 8006e9a:	05db      	lsls	r3, r3, #23
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	4616      	mov	r6, r2
 8006ea2:	d505      	bpl.n	8006eb0 <__swrite+0x1e>
 8006ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f000 f8d4 	bl	8007058 <_lseek_r>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec6:	f000 b8eb 	b.w	80070a0 <_write_r>

08006eca <__sseek>:
 8006eca:	b510      	push	{r4, lr}
 8006ecc:	460c      	mov	r4, r1
 8006ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed2:	f000 f8c1 	bl	8007058 <_lseek_r>
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	bf15      	itete	ne
 8006edc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ede:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ee2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ee6:	81a3      	strheq	r3, [r4, #12]
 8006ee8:	bf18      	it	ne
 8006eea:	81a3      	strhne	r3, [r4, #12]
 8006eec:	bd10      	pop	{r4, pc}

08006eee <__sclose>:
 8006eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef2:	f000 b8a1 	b.w	8007038 <_close_r>

08006ef6 <__swbuf_r>:
 8006ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef8:	460e      	mov	r6, r1
 8006efa:	4614      	mov	r4, r2
 8006efc:	4605      	mov	r5, r0
 8006efe:	b118      	cbz	r0, 8006f08 <__swbuf_r+0x12>
 8006f00:	6a03      	ldr	r3, [r0, #32]
 8006f02:	b90b      	cbnz	r3, 8006f08 <__swbuf_r+0x12>
 8006f04:	f7ff feee 	bl	8006ce4 <__sinit>
 8006f08:	69a3      	ldr	r3, [r4, #24]
 8006f0a:	60a3      	str	r3, [r4, #8]
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	071a      	lsls	r2, r3, #28
 8006f10:	d501      	bpl.n	8006f16 <__swbuf_r+0x20>
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	b943      	cbnz	r3, 8006f28 <__swbuf_r+0x32>
 8006f16:	4621      	mov	r1, r4
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f000 f82b 	bl	8006f74 <__swsetup_r>
 8006f1e:	b118      	cbz	r0, 8006f28 <__swbuf_r+0x32>
 8006f20:	f04f 37ff 	mov.w	r7, #4294967295
 8006f24:	4638      	mov	r0, r7
 8006f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	6922      	ldr	r2, [r4, #16]
 8006f2c:	1a98      	subs	r0, r3, r2
 8006f2e:	6963      	ldr	r3, [r4, #20]
 8006f30:	b2f6      	uxtb	r6, r6
 8006f32:	4283      	cmp	r3, r0
 8006f34:	4637      	mov	r7, r6
 8006f36:	dc05      	bgt.n	8006f44 <__swbuf_r+0x4e>
 8006f38:	4621      	mov	r1, r4
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	f002 fe98 	bl	8009c70 <_fflush_r>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d1ed      	bne.n	8006f20 <__swbuf_r+0x2a>
 8006f44:	68a3      	ldr	r3, [r4, #8]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	60a3      	str	r3, [r4, #8]
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	6022      	str	r2, [r4, #0]
 8006f50:	701e      	strb	r6, [r3, #0]
 8006f52:	6962      	ldr	r2, [r4, #20]
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d004      	beq.n	8006f64 <__swbuf_r+0x6e>
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	07db      	lsls	r3, r3, #31
 8006f5e:	d5e1      	bpl.n	8006f24 <__swbuf_r+0x2e>
 8006f60:	2e0a      	cmp	r6, #10
 8006f62:	d1df      	bne.n	8006f24 <__swbuf_r+0x2e>
 8006f64:	4621      	mov	r1, r4
 8006f66:	4628      	mov	r0, r5
 8006f68:	f002 fe82 	bl	8009c70 <_fflush_r>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d0d9      	beq.n	8006f24 <__swbuf_r+0x2e>
 8006f70:	e7d6      	b.n	8006f20 <__swbuf_r+0x2a>
	...

08006f74 <__swsetup_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4b29      	ldr	r3, [pc, #164]	@ (800701c <__swsetup_r+0xa8>)
 8006f78:	4605      	mov	r5, r0
 8006f7a:	6818      	ldr	r0, [r3, #0]
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	b118      	cbz	r0, 8006f88 <__swsetup_r+0x14>
 8006f80:	6a03      	ldr	r3, [r0, #32]
 8006f82:	b90b      	cbnz	r3, 8006f88 <__swsetup_r+0x14>
 8006f84:	f7ff feae 	bl	8006ce4 <__sinit>
 8006f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f8c:	0719      	lsls	r1, r3, #28
 8006f8e:	d422      	bmi.n	8006fd6 <__swsetup_r+0x62>
 8006f90:	06da      	lsls	r2, r3, #27
 8006f92:	d407      	bmi.n	8006fa4 <__swsetup_r+0x30>
 8006f94:	2209      	movs	r2, #9
 8006f96:	602a      	str	r2, [r5, #0]
 8006f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f9c:	81a3      	strh	r3, [r4, #12]
 8006f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa2:	e033      	b.n	800700c <__swsetup_r+0x98>
 8006fa4:	0758      	lsls	r0, r3, #29
 8006fa6:	d512      	bpl.n	8006fce <__swsetup_r+0x5a>
 8006fa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006faa:	b141      	cbz	r1, 8006fbe <__swsetup_r+0x4a>
 8006fac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fb0:	4299      	cmp	r1, r3
 8006fb2:	d002      	beq.n	8006fba <__swsetup_r+0x46>
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	f000 ff07 	bl	8007dc8 <_free_r>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	6063      	str	r3, [r4, #4]
 8006fca:	6923      	ldr	r3, [r4, #16]
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	f043 0308 	orr.w	r3, r3, #8
 8006fd4:	81a3      	strh	r3, [r4, #12]
 8006fd6:	6923      	ldr	r3, [r4, #16]
 8006fd8:	b94b      	cbnz	r3, 8006fee <__swsetup_r+0x7a>
 8006fda:	89a3      	ldrh	r3, [r4, #12]
 8006fdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fe4:	d003      	beq.n	8006fee <__swsetup_r+0x7a>
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f002 fe8f 	bl	8009d0c <__smakebuf_r>
 8006fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ff2:	f013 0201 	ands.w	r2, r3, #1
 8006ff6:	d00a      	beq.n	800700e <__swsetup_r+0x9a>
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	60a2      	str	r2, [r4, #8]
 8006ffc:	6962      	ldr	r2, [r4, #20]
 8006ffe:	4252      	negs	r2, r2
 8007000:	61a2      	str	r2, [r4, #24]
 8007002:	6922      	ldr	r2, [r4, #16]
 8007004:	b942      	cbnz	r2, 8007018 <__swsetup_r+0xa4>
 8007006:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800700a:	d1c5      	bne.n	8006f98 <__swsetup_r+0x24>
 800700c:	bd38      	pop	{r3, r4, r5, pc}
 800700e:	0799      	lsls	r1, r3, #30
 8007010:	bf58      	it	pl
 8007012:	6962      	ldrpl	r2, [r4, #20]
 8007014:	60a2      	str	r2, [r4, #8]
 8007016:	e7f4      	b.n	8007002 <__swsetup_r+0x8e>
 8007018:	2000      	movs	r0, #0
 800701a:	e7f7      	b.n	800700c <__swsetup_r+0x98>
 800701c:	200000a8 	.word	0x200000a8

08007020 <memset>:
 8007020:	4402      	add	r2, r0
 8007022:	4603      	mov	r3, r0
 8007024:	4293      	cmp	r3, r2
 8007026:	d100      	bne.n	800702a <memset+0xa>
 8007028:	4770      	bx	lr
 800702a:	f803 1b01 	strb.w	r1, [r3], #1
 800702e:	e7f9      	b.n	8007024 <memset+0x4>

08007030 <_localeconv_r>:
 8007030:	4800      	ldr	r0, [pc, #0]	@ (8007034 <_localeconv_r+0x4>)
 8007032:	4770      	bx	lr
 8007034:	200001e8 	.word	0x200001e8

08007038 <_close_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d06      	ldr	r5, [pc, #24]	@ (8007054 <_close_r+0x1c>)
 800703c:	2300      	movs	r3, #0
 800703e:	4604      	mov	r4, r0
 8007040:	4608      	mov	r0, r1
 8007042:	602b      	str	r3, [r5, #0]
 8007044:	f7fa fdfa 	bl	8001c3c <_close>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d102      	bne.n	8007052 <_close_r+0x1a>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	b103      	cbz	r3, 8007052 <_close_r+0x1a>
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	200005a4 	.word	0x200005a4

08007058 <_lseek_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4d07      	ldr	r5, [pc, #28]	@ (8007078 <_lseek_r+0x20>)
 800705c:	4604      	mov	r4, r0
 800705e:	4608      	mov	r0, r1
 8007060:	4611      	mov	r1, r2
 8007062:	2200      	movs	r2, #0
 8007064:	602a      	str	r2, [r5, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	f7fa fe0f 	bl	8001c8a <_lseek>
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	d102      	bne.n	8007076 <_lseek_r+0x1e>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	b103      	cbz	r3, 8007076 <_lseek_r+0x1e>
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	bd38      	pop	{r3, r4, r5, pc}
 8007078:	200005a4 	.word	0x200005a4

0800707c <_read_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4d07      	ldr	r5, [pc, #28]	@ (800709c <_read_r+0x20>)
 8007080:	4604      	mov	r4, r0
 8007082:	4608      	mov	r0, r1
 8007084:	4611      	mov	r1, r2
 8007086:	2200      	movs	r2, #0
 8007088:	602a      	str	r2, [r5, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	f7fa fd9d 	bl	8001bca <_read>
 8007090:	1c43      	adds	r3, r0, #1
 8007092:	d102      	bne.n	800709a <_read_r+0x1e>
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	b103      	cbz	r3, 800709a <_read_r+0x1e>
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	bd38      	pop	{r3, r4, r5, pc}
 800709c:	200005a4 	.word	0x200005a4

080070a0 <_write_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	4d07      	ldr	r5, [pc, #28]	@ (80070c0 <_write_r+0x20>)
 80070a4:	4604      	mov	r4, r0
 80070a6:	4608      	mov	r0, r1
 80070a8:	4611      	mov	r1, r2
 80070aa:	2200      	movs	r2, #0
 80070ac:	602a      	str	r2, [r5, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	f7fa fda8 	bl	8001c04 <_write>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d102      	bne.n	80070be <_write_r+0x1e>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	b103      	cbz	r3, 80070be <_write_r+0x1e>
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	200005a4 	.word	0x200005a4

080070c4 <__errno>:
 80070c4:	4b01      	ldr	r3, [pc, #4]	@ (80070cc <__errno+0x8>)
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	200000a8 	.word	0x200000a8

080070d0 <__libc_init_array>:
 80070d0:	b570      	push	{r4, r5, r6, lr}
 80070d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007108 <__libc_init_array+0x38>)
 80070d4:	4c0d      	ldr	r4, [pc, #52]	@ (800710c <__libc_init_array+0x3c>)
 80070d6:	1b64      	subs	r4, r4, r5
 80070d8:	10a4      	asrs	r4, r4, #2
 80070da:	2600      	movs	r6, #0
 80070dc:	42a6      	cmp	r6, r4
 80070de:	d109      	bne.n	80070f4 <__libc_init_array+0x24>
 80070e0:	4d0b      	ldr	r5, [pc, #44]	@ (8007110 <__libc_init_array+0x40>)
 80070e2:	4c0c      	ldr	r4, [pc, #48]	@ (8007114 <__libc_init_array+0x44>)
 80070e4:	f003 fe52 	bl	800ad8c <_init>
 80070e8:	1b64      	subs	r4, r4, r5
 80070ea:	10a4      	asrs	r4, r4, #2
 80070ec:	2600      	movs	r6, #0
 80070ee:	42a6      	cmp	r6, r4
 80070f0:	d105      	bne.n	80070fe <__libc_init_array+0x2e>
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
 80070f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070f8:	4798      	blx	r3
 80070fa:	3601      	adds	r6, #1
 80070fc:	e7ee      	b.n	80070dc <__libc_init_array+0xc>
 80070fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007102:	4798      	blx	r3
 8007104:	3601      	adds	r6, #1
 8007106:	e7f2      	b.n	80070ee <__libc_init_array+0x1e>
 8007108:	0800b3e8 	.word	0x0800b3e8
 800710c:	0800b3e8 	.word	0x0800b3e8
 8007110:	0800b3e8 	.word	0x0800b3e8
 8007114:	0800b3ec 	.word	0x0800b3ec

08007118 <__retarget_lock_init_recursive>:
 8007118:	4770      	bx	lr

0800711a <__retarget_lock_acquire_recursive>:
 800711a:	4770      	bx	lr

0800711c <__retarget_lock_release_recursive>:
 800711c:	4770      	bx	lr
	...

08007120 <nanf>:
 8007120:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007128 <nanf+0x8>
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	7fc00000 	.word	0x7fc00000

0800712c <quorem>:
 800712c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007130:	6903      	ldr	r3, [r0, #16]
 8007132:	690c      	ldr	r4, [r1, #16]
 8007134:	42a3      	cmp	r3, r4
 8007136:	4607      	mov	r7, r0
 8007138:	db7e      	blt.n	8007238 <quorem+0x10c>
 800713a:	3c01      	subs	r4, #1
 800713c:	f101 0814 	add.w	r8, r1, #20
 8007140:	00a3      	lsls	r3, r4, #2
 8007142:	f100 0514 	add.w	r5, r0, #20
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800714c:	9301      	str	r3, [sp, #4]
 800714e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007152:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007156:	3301      	adds	r3, #1
 8007158:	429a      	cmp	r2, r3
 800715a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800715e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007162:	d32e      	bcc.n	80071c2 <quorem+0x96>
 8007164:	f04f 0a00 	mov.w	sl, #0
 8007168:	46c4      	mov	ip, r8
 800716a:	46ae      	mov	lr, r5
 800716c:	46d3      	mov	fp, sl
 800716e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007172:	b298      	uxth	r0, r3
 8007174:	fb06 a000 	mla	r0, r6, r0, sl
 8007178:	0c02      	lsrs	r2, r0, #16
 800717a:	0c1b      	lsrs	r3, r3, #16
 800717c:	fb06 2303 	mla	r3, r6, r3, r2
 8007180:	f8de 2000 	ldr.w	r2, [lr]
 8007184:	b280      	uxth	r0, r0
 8007186:	b292      	uxth	r2, r2
 8007188:	1a12      	subs	r2, r2, r0
 800718a:	445a      	add	r2, fp
 800718c:	f8de 0000 	ldr.w	r0, [lr]
 8007190:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007194:	b29b      	uxth	r3, r3
 8007196:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800719a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800719e:	b292      	uxth	r2, r2
 80071a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071a4:	45e1      	cmp	r9, ip
 80071a6:	f84e 2b04 	str.w	r2, [lr], #4
 80071aa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80071ae:	d2de      	bcs.n	800716e <quorem+0x42>
 80071b0:	9b00      	ldr	r3, [sp, #0]
 80071b2:	58eb      	ldr	r3, [r5, r3]
 80071b4:	b92b      	cbnz	r3, 80071c2 <quorem+0x96>
 80071b6:	9b01      	ldr	r3, [sp, #4]
 80071b8:	3b04      	subs	r3, #4
 80071ba:	429d      	cmp	r5, r3
 80071bc:	461a      	mov	r2, r3
 80071be:	d32f      	bcc.n	8007220 <quorem+0xf4>
 80071c0:	613c      	str	r4, [r7, #16]
 80071c2:	4638      	mov	r0, r7
 80071c4:	f001 f9c4 	bl	8008550 <__mcmp>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	db25      	blt.n	8007218 <quorem+0xec>
 80071cc:	4629      	mov	r1, r5
 80071ce:	2000      	movs	r0, #0
 80071d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80071d4:	f8d1 c000 	ldr.w	ip, [r1]
 80071d8:	fa1f fe82 	uxth.w	lr, r2
 80071dc:	fa1f f38c 	uxth.w	r3, ip
 80071e0:	eba3 030e 	sub.w	r3, r3, lr
 80071e4:	4403      	add	r3, r0
 80071e6:	0c12      	lsrs	r2, r2, #16
 80071e8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80071ec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071f6:	45c1      	cmp	r9, r8
 80071f8:	f841 3b04 	str.w	r3, [r1], #4
 80071fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007200:	d2e6      	bcs.n	80071d0 <quorem+0xa4>
 8007202:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007206:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800720a:	b922      	cbnz	r2, 8007216 <quorem+0xea>
 800720c:	3b04      	subs	r3, #4
 800720e:	429d      	cmp	r5, r3
 8007210:	461a      	mov	r2, r3
 8007212:	d30b      	bcc.n	800722c <quorem+0x100>
 8007214:	613c      	str	r4, [r7, #16]
 8007216:	3601      	adds	r6, #1
 8007218:	4630      	mov	r0, r6
 800721a:	b003      	add	sp, #12
 800721c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007220:	6812      	ldr	r2, [r2, #0]
 8007222:	3b04      	subs	r3, #4
 8007224:	2a00      	cmp	r2, #0
 8007226:	d1cb      	bne.n	80071c0 <quorem+0x94>
 8007228:	3c01      	subs	r4, #1
 800722a:	e7c6      	b.n	80071ba <quorem+0x8e>
 800722c:	6812      	ldr	r2, [r2, #0]
 800722e:	3b04      	subs	r3, #4
 8007230:	2a00      	cmp	r2, #0
 8007232:	d1ef      	bne.n	8007214 <quorem+0xe8>
 8007234:	3c01      	subs	r4, #1
 8007236:	e7ea      	b.n	800720e <quorem+0xe2>
 8007238:	2000      	movs	r0, #0
 800723a:	e7ee      	b.n	800721a <quorem+0xee>
 800723c:	0000      	movs	r0, r0
	...

08007240 <_dtoa_r>:
 8007240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	69c7      	ldr	r7, [r0, #28]
 8007246:	b099      	sub	sp, #100	@ 0x64
 8007248:	ed8d 0b02 	vstr	d0, [sp, #8]
 800724c:	ec55 4b10 	vmov	r4, r5, d0
 8007250:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007252:	9109      	str	r1, [sp, #36]	@ 0x24
 8007254:	4683      	mov	fp, r0
 8007256:	920e      	str	r2, [sp, #56]	@ 0x38
 8007258:	9313      	str	r3, [sp, #76]	@ 0x4c
 800725a:	b97f      	cbnz	r7, 800727c <_dtoa_r+0x3c>
 800725c:	2010      	movs	r0, #16
 800725e:	f000 fdfd 	bl	8007e5c <malloc>
 8007262:	4602      	mov	r2, r0
 8007264:	f8cb 001c 	str.w	r0, [fp, #28]
 8007268:	b920      	cbnz	r0, 8007274 <_dtoa_r+0x34>
 800726a:	4ba7      	ldr	r3, [pc, #668]	@ (8007508 <_dtoa_r+0x2c8>)
 800726c:	21ef      	movs	r1, #239	@ 0xef
 800726e:	48a7      	ldr	r0, [pc, #668]	@ (800750c <_dtoa_r+0x2cc>)
 8007270:	f002 fdfe 	bl	8009e70 <__assert_func>
 8007274:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007278:	6007      	str	r7, [r0, #0]
 800727a:	60c7      	str	r7, [r0, #12]
 800727c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007280:	6819      	ldr	r1, [r3, #0]
 8007282:	b159      	cbz	r1, 800729c <_dtoa_r+0x5c>
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	604a      	str	r2, [r1, #4]
 8007288:	2301      	movs	r3, #1
 800728a:	4093      	lsls	r3, r2
 800728c:	608b      	str	r3, [r1, #8]
 800728e:	4658      	mov	r0, fp
 8007290:	f000 feda 	bl	8008048 <_Bfree>
 8007294:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	1e2b      	subs	r3, r5, #0
 800729e:	bfb9      	ittee	lt
 80072a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80072a4:	9303      	strlt	r3, [sp, #12]
 80072a6:	2300      	movge	r3, #0
 80072a8:	6033      	strge	r3, [r6, #0]
 80072aa:	9f03      	ldr	r7, [sp, #12]
 80072ac:	4b98      	ldr	r3, [pc, #608]	@ (8007510 <_dtoa_r+0x2d0>)
 80072ae:	bfbc      	itt	lt
 80072b0:	2201      	movlt	r2, #1
 80072b2:	6032      	strlt	r2, [r6, #0]
 80072b4:	43bb      	bics	r3, r7
 80072b6:	d112      	bne.n	80072de <_dtoa_r+0x9e>
 80072b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072c4:	4323      	orrs	r3, r4
 80072c6:	f000 854d 	beq.w	8007d64 <_dtoa_r+0xb24>
 80072ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007524 <_dtoa_r+0x2e4>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 854f 	beq.w	8007d74 <_dtoa_r+0xb34>
 80072d6:	f10a 0303 	add.w	r3, sl, #3
 80072da:	f000 bd49 	b.w	8007d70 <_dtoa_r+0xb30>
 80072de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072e2:	2200      	movs	r2, #0
 80072e4:	ec51 0b17 	vmov	r0, r1, d7
 80072e8:	2300      	movs	r3, #0
 80072ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80072ee:	f7f9 fbeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80072f2:	4680      	mov	r8, r0
 80072f4:	b158      	cbz	r0, 800730e <_dtoa_r+0xce>
 80072f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072f8:	2301      	movs	r3, #1
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072fe:	b113      	cbz	r3, 8007306 <_dtoa_r+0xc6>
 8007300:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007302:	4b84      	ldr	r3, [pc, #528]	@ (8007514 <_dtoa_r+0x2d4>)
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007528 <_dtoa_r+0x2e8>
 800730a:	f000 bd33 	b.w	8007d74 <_dtoa_r+0xb34>
 800730e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007312:	aa16      	add	r2, sp, #88	@ 0x58
 8007314:	a917      	add	r1, sp, #92	@ 0x5c
 8007316:	4658      	mov	r0, fp
 8007318:	f001 fa3a 	bl	8008790 <__d2b>
 800731c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007320:	4681      	mov	r9, r0
 8007322:	2e00      	cmp	r6, #0
 8007324:	d077      	beq.n	8007416 <_dtoa_r+0x1d6>
 8007326:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007328:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800732c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007334:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007338:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800733c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007340:	4619      	mov	r1, r3
 8007342:	2200      	movs	r2, #0
 8007344:	4b74      	ldr	r3, [pc, #464]	@ (8007518 <_dtoa_r+0x2d8>)
 8007346:	f7f8 ff9f 	bl	8000288 <__aeabi_dsub>
 800734a:	a369      	add	r3, pc, #420	@ (adr r3, 80074f0 <_dtoa_r+0x2b0>)
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	f7f9 f952 	bl	80005f8 <__aeabi_dmul>
 8007354:	a368      	add	r3, pc, #416	@ (adr r3, 80074f8 <_dtoa_r+0x2b8>)
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	f7f8 ff97 	bl	800028c <__adddf3>
 800735e:	4604      	mov	r4, r0
 8007360:	4630      	mov	r0, r6
 8007362:	460d      	mov	r5, r1
 8007364:	f7f9 f8de 	bl	8000524 <__aeabi_i2d>
 8007368:	a365      	add	r3, pc, #404	@ (adr r3, 8007500 <_dtoa_r+0x2c0>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	f7f9 f943 	bl	80005f8 <__aeabi_dmul>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	4620      	mov	r0, r4
 8007378:	4629      	mov	r1, r5
 800737a:	f7f8 ff87 	bl	800028c <__adddf3>
 800737e:	4604      	mov	r4, r0
 8007380:	460d      	mov	r5, r1
 8007382:	f7f9 fbe9 	bl	8000b58 <__aeabi_d2iz>
 8007386:	2200      	movs	r2, #0
 8007388:	4607      	mov	r7, r0
 800738a:	2300      	movs	r3, #0
 800738c:	4620      	mov	r0, r4
 800738e:	4629      	mov	r1, r5
 8007390:	f7f9 fba4 	bl	8000adc <__aeabi_dcmplt>
 8007394:	b140      	cbz	r0, 80073a8 <_dtoa_r+0x168>
 8007396:	4638      	mov	r0, r7
 8007398:	f7f9 f8c4 	bl	8000524 <__aeabi_i2d>
 800739c:	4622      	mov	r2, r4
 800739e:	462b      	mov	r3, r5
 80073a0:	f7f9 fb92 	bl	8000ac8 <__aeabi_dcmpeq>
 80073a4:	b900      	cbnz	r0, 80073a8 <_dtoa_r+0x168>
 80073a6:	3f01      	subs	r7, #1
 80073a8:	2f16      	cmp	r7, #22
 80073aa:	d851      	bhi.n	8007450 <_dtoa_r+0x210>
 80073ac:	4b5b      	ldr	r3, [pc, #364]	@ (800751c <_dtoa_r+0x2dc>)
 80073ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073ba:	f7f9 fb8f 	bl	8000adc <__aeabi_dcmplt>
 80073be:	2800      	cmp	r0, #0
 80073c0:	d048      	beq.n	8007454 <_dtoa_r+0x214>
 80073c2:	3f01      	subs	r7, #1
 80073c4:	2300      	movs	r3, #0
 80073c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80073c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80073ca:	1b9b      	subs	r3, r3, r6
 80073cc:	1e5a      	subs	r2, r3, #1
 80073ce:	bf44      	itt	mi
 80073d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80073d4:	2300      	movmi	r3, #0
 80073d6:	9208      	str	r2, [sp, #32]
 80073d8:	bf54      	ite	pl
 80073da:	f04f 0800 	movpl.w	r8, #0
 80073de:	9308      	strmi	r3, [sp, #32]
 80073e0:	2f00      	cmp	r7, #0
 80073e2:	db39      	blt.n	8007458 <_dtoa_r+0x218>
 80073e4:	9b08      	ldr	r3, [sp, #32]
 80073e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80073e8:	443b      	add	r3, r7
 80073ea:	9308      	str	r3, [sp, #32]
 80073ec:	2300      	movs	r3, #0
 80073ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80073f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f2:	2b09      	cmp	r3, #9
 80073f4:	d864      	bhi.n	80074c0 <_dtoa_r+0x280>
 80073f6:	2b05      	cmp	r3, #5
 80073f8:	bfc4      	itt	gt
 80073fa:	3b04      	subgt	r3, #4
 80073fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80073fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007400:	f1a3 0302 	sub.w	r3, r3, #2
 8007404:	bfcc      	ite	gt
 8007406:	2400      	movgt	r4, #0
 8007408:	2401      	movle	r4, #1
 800740a:	2b03      	cmp	r3, #3
 800740c:	d863      	bhi.n	80074d6 <_dtoa_r+0x296>
 800740e:	e8df f003 	tbb	[pc, r3]
 8007412:	372a      	.short	0x372a
 8007414:	5535      	.short	0x5535
 8007416:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800741a:	441e      	add	r6, r3
 800741c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007420:	2b20      	cmp	r3, #32
 8007422:	bfc1      	itttt	gt
 8007424:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007428:	409f      	lslgt	r7, r3
 800742a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800742e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007432:	bfd6      	itet	le
 8007434:	f1c3 0320 	rsble	r3, r3, #32
 8007438:	ea47 0003 	orrgt.w	r0, r7, r3
 800743c:	fa04 f003 	lslle.w	r0, r4, r3
 8007440:	f7f9 f860 	bl	8000504 <__aeabi_ui2d>
 8007444:	2201      	movs	r2, #1
 8007446:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800744a:	3e01      	subs	r6, #1
 800744c:	9214      	str	r2, [sp, #80]	@ 0x50
 800744e:	e777      	b.n	8007340 <_dtoa_r+0x100>
 8007450:	2301      	movs	r3, #1
 8007452:	e7b8      	b.n	80073c6 <_dtoa_r+0x186>
 8007454:	9012      	str	r0, [sp, #72]	@ 0x48
 8007456:	e7b7      	b.n	80073c8 <_dtoa_r+0x188>
 8007458:	427b      	negs	r3, r7
 800745a:	930a      	str	r3, [sp, #40]	@ 0x28
 800745c:	2300      	movs	r3, #0
 800745e:	eba8 0807 	sub.w	r8, r8, r7
 8007462:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007464:	e7c4      	b.n	80073f0 <_dtoa_r+0x1b0>
 8007466:	2300      	movs	r3, #0
 8007468:	930b      	str	r3, [sp, #44]	@ 0x2c
 800746a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800746c:	2b00      	cmp	r3, #0
 800746e:	dc35      	bgt.n	80074dc <_dtoa_r+0x29c>
 8007470:	2301      	movs	r3, #1
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	9307      	str	r3, [sp, #28]
 8007476:	461a      	mov	r2, r3
 8007478:	920e      	str	r2, [sp, #56]	@ 0x38
 800747a:	e00b      	b.n	8007494 <_dtoa_r+0x254>
 800747c:	2301      	movs	r3, #1
 800747e:	e7f3      	b.n	8007468 <_dtoa_r+0x228>
 8007480:	2300      	movs	r3, #0
 8007482:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007486:	18fb      	adds	r3, r7, r3
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	3301      	adds	r3, #1
 800748c:	2b01      	cmp	r3, #1
 800748e:	9307      	str	r3, [sp, #28]
 8007490:	bfb8      	it	lt
 8007492:	2301      	movlt	r3, #1
 8007494:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007498:	2100      	movs	r1, #0
 800749a:	2204      	movs	r2, #4
 800749c:	f102 0514 	add.w	r5, r2, #20
 80074a0:	429d      	cmp	r5, r3
 80074a2:	d91f      	bls.n	80074e4 <_dtoa_r+0x2a4>
 80074a4:	6041      	str	r1, [r0, #4]
 80074a6:	4658      	mov	r0, fp
 80074a8:	f000 fd8e 	bl	8007fc8 <_Balloc>
 80074ac:	4682      	mov	sl, r0
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d13c      	bne.n	800752c <_dtoa_r+0x2ec>
 80074b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007520 <_dtoa_r+0x2e0>)
 80074b4:	4602      	mov	r2, r0
 80074b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80074ba:	e6d8      	b.n	800726e <_dtoa_r+0x2e>
 80074bc:	2301      	movs	r3, #1
 80074be:	e7e0      	b.n	8007482 <_dtoa_r+0x242>
 80074c0:	2401      	movs	r4, #1
 80074c2:	2300      	movs	r3, #0
 80074c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074c8:	f04f 33ff 	mov.w	r3, #4294967295
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	9307      	str	r3, [sp, #28]
 80074d0:	2200      	movs	r2, #0
 80074d2:	2312      	movs	r3, #18
 80074d4:	e7d0      	b.n	8007478 <_dtoa_r+0x238>
 80074d6:	2301      	movs	r3, #1
 80074d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074da:	e7f5      	b.n	80074c8 <_dtoa_r+0x288>
 80074dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	9307      	str	r3, [sp, #28]
 80074e2:	e7d7      	b.n	8007494 <_dtoa_r+0x254>
 80074e4:	3101      	adds	r1, #1
 80074e6:	0052      	lsls	r2, r2, #1
 80074e8:	e7d8      	b.n	800749c <_dtoa_r+0x25c>
 80074ea:	bf00      	nop
 80074ec:	f3af 8000 	nop.w
 80074f0:	636f4361 	.word	0x636f4361
 80074f4:	3fd287a7 	.word	0x3fd287a7
 80074f8:	8b60c8b3 	.word	0x8b60c8b3
 80074fc:	3fc68a28 	.word	0x3fc68a28
 8007500:	509f79fb 	.word	0x509f79fb
 8007504:	3fd34413 	.word	0x3fd34413
 8007508:	0800af86 	.word	0x0800af86
 800750c:	0800af9d 	.word	0x0800af9d
 8007510:	7ff00000 	.word	0x7ff00000
 8007514:	0800af51 	.word	0x0800af51
 8007518:	3ff80000 	.word	0x3ff80000
 800751c:	0800b098 	.word	0x0800b098
 8007520:	0800aff5 	.word	0x0800aff5
 8007524:	0800af82 	.word	0x0800af82
 8007528:	0800af50 	.word	0x0800af50
 800752c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007530:	6018      	str	r0, [r3, #0]
 8007532:	9b07      	ldr	r3, [sp, #28]
 8007534:	2b0e      	cmp	r3, #14
 8007536:	f200 80a4 	bhi.w	8007682 <_dtoa_r+0x442>
 800753a:	2c00      	cmp	r4, #0
 800753c:	f000 80a1 	beq.w	8007682 <_dtoa_r+0x442>
 8007540:	2f00      	cmp	r7, #0
 8007542:	dd33      	ble.n	80075ac <_dtoa_r+0x36c>
 8007544:	4bad      	ldr	r3, [pc, #692]	@ (80077fc <_dtoa_r+0x5bc>)
 8007546:	f007 020f 	and.w	r2, r7, #15
 800754a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800754e:	ed93 7b00 	vldr	d7, [r3]
 8007552:	05f8      	lsls	r0, r7, #23
 8007554:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007558:	ea4f 1427 	mov.w	r4, r7, asr #4
 800755c:	d516      	bpl.n	800758c <_dtoa_r+0x34c>
 800755e:	4ba8      	ldr	r3, [pc, #672]	@ (8007800 <_dtoa_r+0x5c0>)
 8007560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007564:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007568:	f7f9 f970 	bl	800084c <__aeabi_ddiv>
 800756c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007570:	f004 040f 	and.w	r4, r4, #15
 8007574:	2603      	movs	r6, #3
 8007576:	4da2      	ldr	r5, [pc, #648]	@ (8007800 <_dtoa_r+0x5c0>)
 8007578:	b954      	cbnz	r4, 8007590 <_dtoa_r+0x350>
 800757a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800757e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007582:	f7f9 f963 	bl	800084c <__aeabi_ddiv>
 8007586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800758a:	e028      	b.n	80075de <_dtoa_r+0x39e>
 800758c:	2602      	movs	r6, #2
 800758e:	e7f2      	b.n	8007576 <_dtoa_r+0x336>
 8007590:	07e1      	lsls	r1, r4, #31
 8007592:	d508      	bpl.n	80075a6 <_dtoa_r+0x366>
 8007594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007598:	e9d5 2300 	ldrd	r2, r3, [r5]
 800759c:	f7f9 f82c 	bl	80005f8 <__aeabi_dmul>
 80075a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075a4:	3601      	adds	r6, #1
 80075a6:	1064      	asrs	r4, r4, #1
 80075a8:	3508      	adds	r5, #8
 80075aa:	e7e5      	b.n	8007578 <_dtoa_r+0x338>
 80075ac:	f000 80d2 	beq.w	8007754 <_dtoa_r+0x514>
 80075b0:	427c      	negs	r4, r7
 80075b2:	4b92      	ldr	r3, [pc, #584]	@ (80077fc <_dtoa_r+0x5bc>)
 80075b4:	4d92      	ldr	r5, [pc, #584]	@ (8007800 <_dtoa_r+0x5c0>)
 80075b6:	f004 020f 	and.w	r2, r4, #15
 80075ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075c6:	f7f9 f817 	bl	80005f8 <__aeabi_dmul>
 80075ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ce:	1124      	asrs	r4, r4, #4
 80075d0:	2300      	movs	r3, #0
 80075d2:	2602      	movs	r6, #2
 80075d4:	2c00      	cmp	r4, #0
 80075d6:	f040 80b2 	bne.w	800773e <_dtoa_r+0x4fe>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1d3      	bne.n	8007586 <_dtoa_r+0x346>
 80075de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80075e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 80b7 	beq.w	8007758 <_dtoa_r+0x518>
 80075ea:	4b86      	ldr	r3, [pc, #536]	@ (8007804 <_dtoa_r+0x5c4>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	4620      	mov	r0, r4
 80075f0:	4629      	mov	r1, r5
 80075f2:	f7f9 fa73 	bl	8000adc <__aeabi_dcmplt>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	f000 80ae 	beq.w	8007758 <_dtoa_r+0x518>
 80075fc:	9b07      	ldr	r3, [sp, #28]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 80aa 	beq.w	8007758 <_dtoa_r+0x518>
 8007604:	9b00      	ldr	r3, [sp, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	dd37      	ble.n	800767a <_dtoa_r+0x43a>
 800760a:	1e7b      	subs	r3, r7, #1
 800760c:	9304      	str	r3, [sp, #16]
 800760e:	4620      	mov	r0, r4
 8007610:	4b7d      	ldr	r3, [pc, #500]	@ (8007808 <_dtoa_r+0x5c8>)
 8007612:	2200      	movs	r2, #0
 8007614:	4629      	mov	r1, r5
 8007616:	f7f8 ffef 	bl	80005f8 <__aeabi_dmul>
 800761a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800761e:	9c00      	ldr	r4, [sp, #0]
 8007620:	3601      	adds	r6, #1
 8007622:	4630      	mov	r0, r6
 8007624:	f7f8 ff7e 	bl	8000524 <__aeabi_i2d>
 8007628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800762c:	f7f8 ffe4 	bl	80005f8 <__aeabi_dmul>
 8007630:	4b76      	ldr	r3, [pc, #472]	@ (800780c <_dtoa_r+0x5cc>)
 8007632:	2200      	movs	r2, #0
 8007634:	f7f8 fe2a 	bl	800028c <__adddf3>
 8007638:	4605      	mov	r5, r0
 800763a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800763e:	2c00      	cmp	r4, #0
 8007640:	f040 808d 	bne.w	800775e <_dtoa_r+0x51e>
 8007644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007648:	4b71      	ldr	r3, [pc, #452]	@ (8007810 <_dtoa_r+0x5d0>)
 800764a:	2200      	movs	r2, #0
 800764c:	f7f8 fe1c 	bl	8000288 <__aeabi_dsub>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007658:	462a      	mov	r2, r5
 800765a:	4633      	mov	r3, r6
 800765c:	f7f9 fa5c 	bl	8000b18 <__aeabi_dcmpgt>
 8007660:	2800      	cmp	r0, #0
 8007662:	f040 828b 	bne.w	8007b7c <_dtoa_r+0x93c>
 8007666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800766a:	462a      	mov	r2, r5
 800766c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007670:	f7f9 fa34 	bl	8000adc <__aeabi_dcmplt>
 8007674:	2800      	cmp	r0, #0
 8007676:	f040 8128 	bne.w	80078ca <_dtoa_r+0x68a>
 800767a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800767e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007682:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007684:	2b00      	cmp	r3, #0
 8007686:	f2c0 815a 	blt.w	800793e <_dtoa_r+0x6fe>
 800768a:	2f0e      	cmp	r7, #14
 800768c:	f300 8157 	bgt.w	800793e <_dtoa_r+0x6fe>
 8007690:	4b5a      	ldr	r3, [pc, #360]	@ (80077fc <_dtoa_r+0x5bc>)
 8007692:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007696:	ed93 7b00 	vldr	d7, [r3]
 800769a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800769c:	2b00      	cmp	r3, #0
 800769e:	ed8d 7b00 	vstr	d7, [sp]
 80076a2:	da03      	bge.n	80076ac <_dtoa_r+0x46c>
 80076a4:	9b07      	ldr	r3, [sp, #28]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f340 8101 	ble.w	80078ae <_dtoa_r+0x66e>
 80076ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076b0:	4656      	mov	r6, sl
 80076b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076b6:	4620      	mov	r0, r4
 80076b8:	4629      	mov	r1, r5
 80076ba:	f7f9 f8c7 	bl	800084c <__aeabi_ddiv>
 80076be:	f7f9 fa4b 	bl	8000b58 <__aeabi_d2iz>
 80076c2:	4680      	mov	r8, r0
 80076c4:	f7f8 ff2e 	bl	8000524 <__aeabi_i2d>
 80076c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076cc:	f7f8 ff94 	bl	80005f8 <__aeabi_dmul>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4620      	mov	r0, r4
 80076d6:	4629      	mov	r1, r5
 80076d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80076dc:	f7f8 fdd4 	bl	8000288 <__aeabi_dsub>
 80076e0:	f806 4b01 	strb.w	r4, [r6], #1
 80076e4:	9d07      	ldr	r5, [sp, #28]
 80076e6:	eba6 040a 	sub.w	r4, r6, sl
 80076ea:	42a5      	cmp	r5, r4
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	f040 8117 	bne.w	8007922 <_dtoa_r+0x6e2>
 80076f4:	f7f8 fdca 	bl	800028c <__adddf3>
 80076f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076fc:	4604      	mov	r4, r0
 80076fe:	460d      	mov	r5, r1
 8007700:	f7f9 fa0a 	bl	8000b18 <__aeabi_dcmpgt>
 8007704:	2800      	cmp	r0, #0
 8007706:	f040 80f9 	bne.w	80078fc <_dtoa_r+0x6bc>
 800770a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800770e:	4620      	mov	r0, r4
 8007710:	4629      	mov	r1, r5
 8007712:	f7f9 f9d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007716:	b118      	cbz	r0, 8007720 <_dtoa_r+0x4e0>
 8007718:	f018 0f01 	tst.w	r8, #1
 800771c:	f040 80ee 	bne.w	80078fc <_dtoa_r+0x6bc>
 8007720:	4649      	mov	r1, r9
 8007722:	4658      	mov	r0, fp
 8007724:	f000 fc90 	bl	8008048 <_Bfree>
 8007728:	2300      	movs	r3, #0
 800772a:	7033      	strb	r3, [r6, #0]
 800772c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800772e:	3701      	adds	r7, #1
 8007730:	601f      	str	r7, [r3, #0]
 8007732:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 831d 	beq.w	8007d74 <_dtoa_r+0xb34>
 800773a:	601e      	str	r6, [r3, #0]
 800773c:	e31a      	b.n	8007d74 <_dtoa_r+0xb34>
 800773e:	07e2      	lsls	r2, r4, #31
 8007740:	d505      	bpl.n	800774e <_dtoa_r+0x50e>
 8007742:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007746:	f7f8 ff57 	bl	80005f8 <__aeabi_dmul>
 800774a:	3601      	adds	r6, #1
 800774c:	2301      	movs	r3, #1
 800774e:	1064      	asrs	r4, r4, #1
 8007750:	3508      	adds	r5, #8
 8007752:	e73f      	b.n	80075d4 <_dtoa_r+0x394>
 8007754:	2602      	movs	r6, #2
 8007756:	e742      	b.n	80075de <_dtoa_r+0x39e>
 8007758:	9c07      	ldr	r4, [sp, #28]
 800775a:	9704      	str	r7, [sp, #16]
 800775c:	e761      	b.n	8007622 <_dtoa_r+0x3e2>
 800775e:	4b27      	ldr	r3, [pc, #156]	@ (80077fc <_dtoa_r+0x5bc>)
 8007760:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007762:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007766:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800776a:	4454      	add	r4, sl
 800776c:	2900      	cmp	r1, #0
 800776e:	d053      	beq.n	8007818 <_dtoa_r+0x5d8>
 8007770:	4928      	ldr	r1, [pc, #160]	@ (8007814 <_dtoa_r+0x5d4>)
 8007772:	2000      	movs	r0, #0
 8007774:	f7f9 f86a 	bl	800084c <__aeabi_ddiv>
 8007778:	4633      	mov	r3, r6
 800777a:	462a      	mov	r2, r5
 800777c:	f7f8 fd84 	bl	8000288 <__aeabi_dsub>
 8007780:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007784:	4656      	mov	r6, sl
 8007786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800778a:	f7f9 f9e5 	bl	8000b58 <__aeabi_d2iz>
 800778e:	4605      	mov	r5, r0
 8007790:	f7f8 fec8 	bl	8000524 <__aeabi_i2d>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800779c:	f7f8 fd74 	bl	8000288 <__aeabi_dsub>
 80077a0:	3530      	adds	r5, #48	@ 0x30
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077aa:	f806 5b01 	strb.w	r5, [r6], #1
 80077ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077b2:	f7f9 f993 	bl	8000adc <__aeabi_dcmplt>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	d171      	bne.n	800789e <_dtoa_r+0x65e>
 80077ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077be:	4911      	ldr	r1, [pc, #68]	@ (8007804 <_dtoa_r+0x5c4>)
 80077c0:	2000      	movs	r0, #0
 80077c2:	f7f8 fd61 	bl	8000288 <__aeabi_dsub>
 80077c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077ca:	f7f9 f987 	bl	8000adc <__aeabi_dcmplt>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	f040 8095 	bne.w	80078fe <_dtoa_r+0x6be>
 80077d4:	42a6      	cmp	r6, r4
 80077d6:	f43f af50 	beq.w	800767a <_dtoa_r+0x43a>
 80077da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077de:	4b0a      	ldr	r3, [pc, #40]	@ (8007808 <_dtoa_r+0x5c8>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	f7f8 ff09 	bl	80005f8 <__aeabi_dmul>
 80077e6:	4b08      	ldr	r3, [pc, #32]	@ (8007808 <_dtoa_r+0x5c8>)
 80077e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077ec:	2200      	movs	r2, #0
 80077ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077f2:	f7f8 ff01 	bl	80005f8 <__aeabi_dmul>
 80077f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077fa:	e7c4      	b.n	8007786 <_dtoa_r+0x546>
 80077fc:	0800b098 	.word	0x0800b098
 8007800:	0800b070 	.word	0x0800b070
 8007804:	3ff00000 	.word	0x3ff00000
 8007808:	40240000 	.word	0x40240000
 800780c:	401c0000 	.word	0x401c0000
 8007810:	40140000 	.word	0x40140000
 8007814:	3fe00000 	.word	0x3fe00000
 8007818:	4631      	mov	r1, r6
 800781a:	4628      	mov	r0, r5
 800781c:	f7f8 feec 	bl	80005f8 <__aeabi_dmul>
 8007820:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007824:	9415      	str	r4, [sp, #84]	@ 0x54
 8007826:	4656      	mov	r6, sl
 8007828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800782c:	f7f9 f994 	bl	8000b58 <__aeabi_d2iz>
 8007830:	4605      	mov	r5, r0
 8007832:	f7f8 fe77 	bl	8000524 <__aeabi_i2d>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800783e:	f7f8 fd23 	bl	8000288 <__aeabi_dsub>
 8007842:	3530      	adds	r5, #48	@ 0x30
 8007844:	f806 5b01 	strb.w	r5, [r6], #1
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	42a6      	cmp	r6, r4
 800784e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007852:	f04f 0200 	mov.w	r2, #0
 8007856:	d124      	bne.n	80078a2 <_dtoa_r+0x662>
 8007858:	4bac      	ldr	r3, [pc, #688]	@ (8007b0c <_dtoa_r+0x8cc>)
 800785a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800785e:	f7f8 fd15 	bl	800028c <__adddf3>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800786a:	f7f9 f955 	bl	8000b18 <__aeabi_dcmpgt>
 800786e:	2800      	cmp	r0, #0
 8007870:	d145      	bne.n	80078fe <_dtoa_r+0x6be>
 8007872:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007876:	49a5      	ldr	r1, [pc, #660]	@ (8007b0c <_dtoa_r+0x8cc>)
 8007878:	2000      	movs	r0, #0
 800787a:	f7f8 fd05 	bl	8000288 <__aeabi_dsub>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007886:	f7f9 f929 	bl	8000adc <__aeabi_dcmplt>
 800788a:	2800      	cmp	r0, #0
 800788c:	f43f aef5 	beq.w	800767a <_dtoa_r+0x43a>
 8007890:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007892:	1e73      	subs	r3, r6, #1
 8007894:	9315      	str	r3, [sp, #84]	@ 0x54
 8007896:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800789a:	2b30      	cmp	r3, #48	@ 0x30
 800789c:	d0f8      	beq.n	8007890 <_dtoa_r+0x650>
 800789e:	9f04      	ldr	r7, [sp, #16]
 80078a0:	e73e      	b.n	8007720 <_dtoa_r+0x4e0>
 80078a2:	4b9b      	ldr	r3, [pc, #620]	@ (8007b10 <_dtoa_r+0x8d0>)
 80078a4:	f7f8 fea8 	bl	80005f8 <__aeabi_dmul>
 80078a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078ac:	e7bc      	b.n	8007828 <_dtoa_r+0x5e8>
 80078ae:	d10c      	bne.n	80078ca <_dtoa_r+0x68a>
 80078b0:	4b98      	ldr	r3, [pc, #608]	@ (8007b14 <_dtoa_r+0x8d4>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078b8:	f7f8 fe9e 	bl	80005f8 <__aeabi_dmul>
 80078bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078c0:	f7f9 f920 	bl	8000b04 <__aeabi_dcmpge>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	f000 8157 	beq.w	8007b78 <_dtoa_r+0x938>
 80078ca:	2400      	movs	r4, #0
 80078cc:	4625      	mov	r5, r4
 80078ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078d0:	43db      	mvns	r3, r3
 80078d2:	9304      	str	r3, [sp, #16]
 80078d4:	4656      	mov	r6, sl
 80078d6:	2700      	movs	r7, #0
 80078d8:	4621      	mov	r1, r4
 80078da:	4658      	mov	r0, fp
 80078dc:	f000 fbb4 	bl	8008048 <_Bfree>
 80078e0:	2d00      	cmp	r5, #0
 80078e2:	d0dc      	beq.n	800789e <_dtoa_r+0x65e>
 80078e4:	b12f      	cbz	r7, 80078f2 <_dtoa_r+0x6b2>
 80078e6:	42af      	cmp	r7, r5
 80078e8:	d003      	beq.n	80078f2 <_dtoa_r+0x6b2>
 80078ea:	4639      	mov	r1, r7
 80078ec:	4658      	mov	r0, fp
 80078ee:	f000 fbab 	bl	8008048 <_Bfree>
 80078f2:	4629      	mov	r1, r5
 80078f4:	4658      	mov	r0, fp
 80078f6:	f000 fba7 	bl	8008048 <_Bfree>
 80078fa:	e7d0      	b.n	800789e <_dtoa_r+0x65e>
 80078fc:	9704      	str	r7, [sp, #16]
 80078fe:	4633      	mov	r3, r6
 8007900:	461e      	mov	r6, r3
 8007902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007906:	2a39      	cmp	r2, #57	@ 0x39
 8007908:	d107      	bne.n	800791a <_dtoa_r+0x6da>
 800790a:	459a      	cmp	sl, r3
 800790c:	d1f8      	bne.n	8007900 <_dtoa_r+0x6c0>
 800790e:	9a04      	ldr	r2, [sp, #16]
 8007910:	3201      	adds	r2, #1
 8007912:	9204      	str	r2, [sp, #16]
 8007914:	2230      	movs	r2, #48	@ 0x30
 8007916:	f88a 2000 	strb.w	r2, [sl]
 800791a:	781a      	ldrb	r2, [r3, #0]
 800791c:	3201      	adds	r2, #1
 800791e:	701a      	strb	r2, [r3, #0]
 8007920:	e7bd      	b.n	800789e <_dtoa_r+0x65e>
 8007922:	4b7b      	ldr	r3, [pc, #492]	@ (8007b10 <_dtoa_r+0x8d0>)
 8007924:	2200      	movs	r2, #0
 8007926:	f7f8 fe67 	bl	80005f8 <__aeabi_dmul>
 800792a:	2200      	movs	r2, #0
 800792c:	2300      	movs	r3, #0
 800792e:	4604      	mov	r4, r0
 8007930:	460d      	mov	r5, r1
 8007932:	f7f9 f8c9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007936:	2800      	cmp	r0, #0
 8007938:	f43f aebb 	beq.w	80076b2 <_dtoa_r+0x472>
 800793c:	e6f0      	b.n	8007720 <_dtoa_r+0x4e0>
 800793e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007940:	2a00      	cmp	r2, #0
 8007942:	f000 80db 	beq.w	8007afc <_dtoa_r+0x8bc>
 8007946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007948:	2a01      	cmp	r2, #1
 800794a:	f300 80bf 	bgt.w	8007acc <_dtoa_r+0x88c>
 800794e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007950:	2a00      	cmp	r2, #0
 8007952:	f000 80b7 	beq.w	8007ac4 <_dtoa_r+0x884>
 8007956:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800795a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800795c:	4646      	mov	r6, r8
 800795e:	9a08      	ldr	r2, [sp, #32]
 8007960:	2101      	movs	r1, #1
 8007962:	441a      	add	r2, r3
 8007964:	4658      	mov	r0, fp
 8007966:	4498      	add	r8, r3
 8007968:	9208      	str	r2, [sp, #32]
 800796a:	f000 fc6b 	bl	8008244 <__i2b>
 800796e:	4605      	mov	r5, r0
 8007970:	b15e      	cbz	r6, 800798a <_dtoa_r+0x74a>
 8007972:	9b08      	ldr	r3, [sp, #32]
 8007974:	2b00      	cmp	r3, #0
 8007976:	dd08      	ble.n	800798a <_dtoa_r+0x74a>
 8007978:	42b3      	cmp	r3, r6
 800797a:	9a08      	ldr	r2, [sp, #32]
 800797c:	bfa8      	it	ge
 800797e:	4633      	movge	r3, r6
 8007980:	eba8 0803 	sub.w	r8, r8, r3
 8007984:	1af6      	subs	r6, r6, r3
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	9308      	str	r3, [sp, #32]
 800798a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800798c:	b1f3      	cbz	r3, 80079cc <_dtoa_r+0x78c>
 800798e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 80b7 	beq.w	8007b04 <_dtoa_r+0x8c4>
 8007996:	b18c      	cbz	r4, 80079bc <_dtoa_r+0x77c>
 8007998:	4629      	mov	r1, r5
 800799a:	4622      	mov	r2, r4
 800799c:	4658      	mov	r0, fp
 800799e:	f000 fd11 	bl	80083c4 <__pow5mult>
 80079a2:	464a      	mov	r2, r9
 80079a4:	4601      	mov	r1, r0
 80079a6:	4605      	mov	r5, r0
 80079a8:	4658      	mov	r0, fp
 80079aa:	f000 fc61 	bl	8008270 <__multiply>
 80079ae:	4649      	mov	r1, r9
 80079b0:	9004      	str	r0, [sp, #16]
 80079b2:	4658      	mov	r0, fp
 80079b4:	f000 fb48 	bl	8008048 <_Bfree>
 80079b8:	9b04      	ldr	r3, [sp, #16]
 80079ba:	4699      	mov	r9, r3
 80079bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079be:	1b1a      	subs	r2, r3, r4
 80079c0:	d004      	beq.n	80079cc <_dtoa_r+0x78c>
 80079c2:	4649      	mov	r1, r9
 80079c4:	4658      	mov	r0, fp
 80079c6:	f000 fcfd 	bl	80083c4 <__pow5mult>
 80079ca:	4681      	mov	r9, r0
 80079cc:	2101      	movs	r1, #1
 80079ce:	4658      	mov	r0, fp
 80079d0:	f000 fc38 	bl	8008244 <__i2b>
 80079d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079d6:	4604      	mov	r4, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 81cf 	beq.w	8007d7c <_dtoa_r+0xb3c>
 80079de:	461a      	mov	r2, r3
 80079e0:	4601      	mov	r1, r0
 80079e2:	4658      	mov	r0, fp
 80079e4:	f000 fcee 	bl	80083c4 <__pow5mult>
 80079e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	4604      	mov	r4, r0
 80079ee:	f300 8095 	bgt.w	8007b1c <_dtoa_r+0x8dc>
 80079f2:	9b02      	ldr	r3, [sp, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f040 8087 	bne.w	8007b08 <_dtoa_r+0x8c8>
 80079fa:	9b03      	ldr	r3, [sp, #12]
 80079fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f040 8089 	bne.w	8007b18 <_dtoa_r+0x8d8>
 8007a06:	9b03      	ldr	r3, [sp, #12]
 8007a08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a0c:	0d1b      	lsrs	r3, r3, #20
 8007a0e:	051b      	lsls	r3, r3, #20
 8007a10:	b12b      	cbz	r3, 8007a1e <_dtoa_r+0x7de>
 8007a12:	9b08      	ldr	r3, [sp, #32]
 8007a14:	3301      	adds	r3, #1
 8007a16:	9308      	str	r3, [sp, #32]
 8007a18:	f108 0801 	add.w	r8, r8, #1
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 81b0 	beq.w	8007d88 <_dtoa_r+0xb48>
 8007a28:	6923      	ldr	r3, [r4, #16]
 8007a2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a2e:	6918      	ldr	r0, [r3, #16]
 8007a30:	f000 fbbc 	bl	80081ac <__hi0bits>
 8007a34:	f1c0 0020 	rsb	r0, r0, #32
 8007a38:	9b08      	ldr	r3, [sp, #32]
 8007a3a:	4418      	add	r0, r3
 8007a3c:	f010 001f 	ands.w	r0, r0, #31
 8007a40:	d077      	beq.n	8007b32 <_dtoa_r+0x8f2>
 8007a42:	f1c0 0320 	rsb	r3, r0, #32
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	dd6b      	ble.n	8007b22 <_dtoa_r+0x8e2>
 8007a4a:	9b08      	ldr	r3, [sp, #32]
 8007a4c:	f1c0 001c 	rsb	r0, r0, #28
 8007a50:	4403      	add	r3, r0
 8007a52:	4480      	add	r8, r0
 8007a54:	4406      	add	r6, r0
 8007a56:	9308      	str	r3, [sp, #32]
 8007a58:	f1b8 0f00 	cmp.w	r8, #0
 8007a5c:	dd05      	ble.n	8007a6a <_dtoa_r+0x82a>
 8007a5e:	4649      	mov	r1, r9
 8007a60:	4642      	mov	r2, r8
 8007a62:	4658      	mov	r0, fp
 8007a64:	f000 fd08 	bl	8008478 <__lshift>
 8007a68:	4681      	mov	r9, r0
 8007a6a:	9b08      	ldr	r3, [sp, #32]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	dd05      	ble.n	8007a7c <_dtoa_r+0x83c>
 8007a70:	4621      	mov	r1, r4
 8007a72:	461a      	mov	r2, r3
 8007a74:	4658      	mov	r0, fp
 8007a76:	f000 fcff 	bl	8008478 <__lshift>
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d059      	beq.n	8007b36 <_dtoa_r+0x8f6>
 8007a82:	4621      	mov	r1, r4
 8007a84:	4648      	mov	r0, r9
 8007a86:	f000 fd63 	bl	8008550 <__mcmp>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	da53      	bge.n	8007b36 <_dtoa_r+0x8f6>
 8007a8e:	1e7b      	subs	r3, r7, #1
 8007a90:	9304      	str	r3, [sp, #16]
 8007a92:	4649      	mov	r1, r9
 8007a94:	2300      	movs	r3, #0
 8007a96:	220a      	movs	r2, #10
 8007a98:	4658      	mov	r0, fp
 8007a9a:	f000 faf7 	bl	800808c <__multadd>
 8007a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aa0:	4681      	mov	r9, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 8172 	beq.w	8007d8c <_dtoa_r+0xb4c>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	4629      	mov	r1, r5
 8007aac:	220a      	movs	r2, #10
 8007aae:	4658      	mov	r0, fp
 8007ab0:	f000 faec 	bl	800808c <__multadd>
 8007ab4:	9b00      	ldr	r3, [sp, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	4605      	mov	r5, r0
 8007aba:	dc67      	bgt.n	8007b8c <_dtoa_r+0x94c>
 8007abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	dc41      	bgt.n	8007b46 <_dtoa_r+0x906>
 8007ac2:	e063      	b.n	8007b8c <_dtoa_r+0x94c>
 8007ac4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ac6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007aca:	e746      	b.n	800795a <_dtoa_r+0x71a>
 8007acc:	9b07      	ldr	r3, [sp, #28]
 8007ace:	1e5c      	subs	r4, r3, #1
 8007ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ad2:	42a3      	cmp	r3, r4
 8007ad4:	bfbf      	itttt	lt
 8007ad6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007ad8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007ada:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007adc:	1ae3      	sublt	r3, r4, r3
 8007ade:	bfb4      	ite	lt
 8007ae0:	18d2      	addlt	r2, r2, r3
 8007ae2:	1b1c      	subge	r4, r3, r4
 8007ae4:	9b07      	ldr	r3, [sp, #28]
 8007ae6:	bfbc      	itt	lt
 8007ae8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007aea:	2400      	movlt	r4, #0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	bfb5      	itete	lt
 8007af0:	eba8 0603 	sublt.w	r6, r8, r3
 8007af4:	9b07      	ldrge	r3, [sp, #28]
 8007af6:	2300      	movlt	r3, #0
 8007af8:	4646      	movge	r6, r8
 8007afa:	e730      	b.n	800795e <_dtoa_r+0x71e>
 8007afc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007afe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b00:	4646      	mov	r6, r8
 8007b02:	e735      	b.n	8007970 <_dtoa_r+0x730>
 8007b04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b06:	e75c      	b.n	80079c2 <_dtoa_r+0x782>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	e788      	b.n	8007a1e <_dtoa_r+0x7de>
 8007b0c:	3fe00000 	.word	0x3fe00000
 8007b10:	40240000 	.word	0x40240000
 8007b14:	40140000 	.word	0x40140000
 8007b18:	9b02      	ldr	r3, [sp, #8]
 8007b1a:	e780      	b.n	8007a1e <_dtoa_r+0x7de>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b20:	e782      	b.n	8007a28 <_dtoa_r+0x7e8>
 8007b22:	d099      	beq.n	8007a58 <_dtoa_r+0x818>
 8007b24:	9a08      	ldr	r2, [sp, #32]
 8007b26:	331c      	adds	r3, #28
 8007b28:	441a      	add	r2, r3
 8007b2a:	4498      	add	r8, r3
 8007b2c:	441e      	add	r6, r3
 8007b2e:	9208      	str	r2, [sp, #32]
 8007b30:	e792      	b.n	8007a58 <_dtoa_r+0x818>
 8007b32:	4603      	mov	r3, r0
 8007b34:	e7f6      	b.n	8007b24 <_dtoa_r+0x8e4>
 8007b36:	9b07      	ldr	r3, [sp, #28]
 8007b38:	9704      	str	r7, [sp, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	dc20      	bgt.n	8007b80 <_dtoa_r+0x940>
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	dd1e      	ble.n	8007b84 <_dtoa_r+0x944>
 8007b46:	9b00      	ldr	r3, [sp, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f47f aec0 	bne.w	80078ce <_dtoa_r+0x68e>
 8007b4e:	4621      	mov	r1, r4
 8007b50:	2205      	movs	r2, #5
 8007b52:	4658      	mov	r0, fp
 8007b54:	f000 fa9a 	bl	800808c <__multadd>
 8007b58:	4601      	mov	r1, r0
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	4648      	mov	r0, r9
 8007b5e:	f000 fcf7 	bl	8008550 <__mcmp>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	f77f aeb3 	ble.w	80078ce <_dtoa_r+0x68e>
 8007b68:	4656      	mov	r6, sl
 8007b6a:	2331      	movs	r3, #49	@ 0x31
 8007b6c:	f806 3b01 	strb.w	r3, [r6], #1
 8007b70:	9b04      	ldr	r3, [sp, #16]
 8007b72:	3301      	adds	r3, #1
 8007b74:	9304      	str	r3, [sp, #16]
 8007b76:	e6ae      	b.n	80078d6 <_dtoa_r+0x696>
 8007b78:	9c07      	ldr	r4, [sp, #28]
 8007b7a:	9704      	str	r7, [sp, #16]
 8007b7c:	4625      	mov	r5, r4
 8007b7e:	e7f3      	b.n	8007b68 <_dtoa_r+0x928>
 8007b80:	9b07      	ldr	r3, [sp, #28]
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 8104 	beq.w	8007d94 <_dtoa_r+0xb54>
 8007b8c:	2e00      	cmp	r6, #0
 8007b8e:	dd05      	ble.n	8007b9c <_dtoa_r+0x95c>
 8007b90:	4629      	mov	r1, r5
 8007b92:	4632      	mov	r2, r6
 8007b94:	4658      	mov	r0, fp
 8007b96:	f000 fc6f 	bl	8008478 <__lshift>
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d05a      	beq.n	8007c58 <_dtoa_r+0xa18>
 8007ba2:	6869      	ldr	r1, [r5, #4]
 8007ba4:	4658      	mov	r0, fp
 8007ba6:	f000 fa0f 	bl	8007fc8 <_Balloc>
 8007baa:	4606      	mov	r6, r0
 8007bac:	b928      	cbnz	r0, 8007bba <_dtoa_r+0x97a>
 8007bae:	4b84      	ldr	r3, [pc, #528]	@ (8007dc0 <_dtoa_r+0xb80>)
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007bb6:	f7ff bb5a 	b.w	800726e <_dtoa_r+0x2e>
 8007bba:	692a      	ldr	r2, [r5, #16]
 8007bbc:	3202      	adds	r2, #2
 8007bbe:	0092      	lsls	r2, r2, #2
 8007bc0:	f105 010c 	add.w	r1, r5, #12
 8007bc4:	300c      	adds	r0, #12
 8007bc6:	f002 f93b 	bl	8009e40 <memcpy>
 8007bca:	2201      	movs	r2, #1
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4658      	mov	r0, fp
 8007bd0:	f000 fc52 	bl	8008478 <__lshift>
 8007bd4:	f10a 0301 	add.w	r3, sl, #1
 8007bd8:	9307      	str	r3, [sp, #28]
 8007bda:	9b00      	ldr	r3, [sp, #0]
 8007bdc:	4453      	add	r3, sl
 8007bde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007be0:	9b02      	ldr	r3, [sp, #8]
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	462f      	mov	r7, r5
 8007be8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bea:	4605      	mov	r5, r0
 8007bec:	9b07      	ldr	r3, [sp, #28]
 8007bee:	4621      	mov	r1, r4
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	4648      	mov	r0, r9
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	f7ff fa99 	bl	800712c <quorem>
 8007bfa:	4639      	mov	r1, r7
 8007bfc:	9002      	str	r0, [sp, #8]
 8007bfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c02:	4648      	mov	r0, r9
 8007c04:	f000 fca4 	bl	8008550 <__mcmp>
 8007c08:	462a      	mov	r2, r5
 8007c0a:	9008      	str	r0, [sp, #32]
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	4658      	mov	r0, fp
 8007c10:	f000 fcba 	bl	8008588 <__mdiff>
 8007c14:	68c2      	ldr	r2, [r0, #12]
 8007c16:	4606      	mov	r6, r0
 8007c18:	bb02      	cbnz	r2, 8007c5c <_dtoa_r+0xa1c>
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	4648      	mov	r0, r9
 8007c1e:	f000 fc97 	bl	8008550 <__mcmp>
 8007c22:	4602      	mov	r2, r0
 8007c24:	4631      	mov	r1, r6
 8007c26:	4658      	mov	r0, fp
 8007c28:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c2a:	f000 fa0d 	bl	8008048 <_Bfree>
 8007c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c32:	9e07      	ldr	r6, [sp, #28]
 8007c34:	ea43 0102 	orr.w	r1, r3, r2
 8007c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c3a:	4319      	orrs	r1, r3
 8007c3c:	d110      	bne.n	8007c60 <_dtoa_r+0xa20>
 8007c3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c42:	d029      	beq.n	8007c98 <_dtoa_r+0xa58>
 8007c44:	9b08      	ldr	r3, [sp, #32]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	dd02      	ble.n	8007c50 <_dtoa_r+0xa10>
 8007c4a:	9b02      	ldr	r3, [sp, #8]
 8007c4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c50:	9b00      	ldr	r3, [sp, #0]
 8007c52:	f883 8000 	strb.w	r8, [r3]
 8007c56:	e63f      	b.n	80078d8 <_dtoa_r+0x698>
 8007c58:	4628      	mov	r0, r5
 8007c5a:	e7bb      	b.n	8007bd4 <_dtoa_r+0x994>
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	e7e1      	b.n	8007c24 <_dtoa_r+0x9e4>
 8007c60:	9b08      	ldr	r3, [sp, #32]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	db04      	blt.n	8007c70 <_dtoa_r+0xa30>
 8007c66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c68:	430b      	orrs	r3, r1
 8007c6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c6c:	430b      	orrs	r3, r1
 8007c6e:	d120      	bne.n	8007cb2 <_dtoa_r+0xa72>
 8007c70:	2a00      	cmp	r2, #0
 8007c72:	dded      	ble.n	8007c50 <_dtoa_r+0xa10>
 8007c74:	4649      	mov	r1, r9
 8007c76:	2201      	movs	r2, #1
 8007c78:	4658      	mov	r0, fp
 8007c7a:	f000 fbfd 	bl	8008478 <__lshift>
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4681      	mov	r9, r0
 8007c82:	f000 fc65 	bl	8008550 <__mcmp>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	dc03      	bgt.n	8007c92 <_dtoa_r+0xa52>
 8007c8a:	d1e1      	bne.n	8007c50 <_dtoa_r+0xa10>
 8007c8c:	f018 0f01 	tst.w	r8, #1
 8007c90:	d0de      	beq.n	8007c50 <_dtoa_r+0xa10>
 8007c92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c96:	d1d8      	bne.n	8007c4a <_dtoa_r+0xa0a>
 8007c98:	9a00      	ldr	r2, [sp, #0]
 8007c9a:	2339      	movs	r3, #57	@ 0x39
 8007c9c:	7013      	strb	r3, [r2, #0]
 8007c9e:	4633      	mov	r3, r6
 8007ca0:	461e      	mov	r6, r3
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007ca8:	2a39      	cmp	r2, #57	@ 0x39
 8007caa:	d052      	beq.n	8007d52 <_dtoa_r+0xb12>
 8007cac:	3201      	adds	r2, #1
 8007cae:	701a      	strb	r2, [r3, #0]
 8007cb0:	e612      	b.n	80078d8 <_dtoa_r+0x698>
 8007cb2:	2a00      	cmp	r2, #0
 8007cb4:	dd07      	ble.n	8007cc6 <_dtoa_r+0xa86>
 8007cb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cba:	d0ed      	beq.n	8007c98 <_dtoa_r+0xa58>
 8007cbc:	9a00      	ldr	r2, [sp, #0]
 8007cbe:	f108 0301 	add.w	r3, r8, #1
 8007cc2:	7013      	strb	r3, [r2, #0]
 8007cc4:	e608      	b.n	80078d8 <_dtoa_r+0x698>
 8007cc6:	9b07      	ldr	r3, [sp, #28]
 8007cc8:	9a07      	ldr	r2, [sp, #28]
 8007cca:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007cce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d028      	beq.n	8007d26 <_dtoa_r+0xae6>
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	220a      	movs	r2, #10
 8007cda:	4658      	mov	r0, fp
 8007cdc:	f000 f9d6 	bl	800808c <__multadd>
 8007ce0:	42af      	cmp	r7, r5
 8007ce2:	4681      	mov	r9, r0
 8007ce4:	f04f 0300 	mov.w	r3, #0
 8007ce8:	f04f 020a 	mov.w	r2, #10
 8007cec:	4639      	mov	r1, r7
 8007cee:	4658      	mov	r0, fp
 8007cf0:	d107      	bne.n	8007d02 <_dtoa_r+0xac2>
 8007cf2:	f000 f9cb 	bl	800808c <__multadd>
 8007cf6:	4607      	mov	r7, r0
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	9b07      	ldr	r3, [sp, #28]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	9307      	str	r3, [sp, #28]
 8007d00:	e774      	b.n	8007bec <_dtoa_r+0x9ac>
 8007d02:	f000 f9c3 	bl	800808c <__multadd>
 8007d06:	4629      	mov	r1, r5
 8007d08:	4607      	mov	r7, r0
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	220a      	movs	r2, #10
 8007d0e:	4658      	mov	r0, fp
 8007d10:	f000 f9bc 	bl	800808c <__multadd>
 8007d14:	4605      	mov	r5, r0
 8007d16:	e7f0      	b.n	8007cfa <_dtoa_r+0xaba>
 8007d18:	9b00      	ldr	r3, [sp, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bfcc      	ite	gt
 8007d1e:	461e      	movgt	r6, r3
 8007d20:	2601      	movle	r6, #1
 8007d22:	4456      	add	r6, sl
 8007d24:	2700      	movs	r7, #0
 8007d26:	4649      	mov	r1, r9
 8007d28:	2201      	movs	r2, #1
 8007d2a:	4658      	mov	r0, fp
 8007d2c:	f000 fba4 	bl	8008478 <__lshift>
 8007d30:	4621      	mov	r1, r4
 8007d32:	4681      	mov	r9, r0
 8007d34:	f000 fc0c 	bl	8008550 <__mcmp>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	dcb0      	bgt.n	8007c9e <_dtoa_r+0xa5e>
 8007d3c:	d102      	bne.n	8007d44 <_dtoa_r+0xb04>
 8007d3e:	f018 0f01 	tst.w	r8, #1
 8007d42:	d1ac      	bne.n	8007c9e <_dtoa_r+0xa5e>
 8007d44:	4633      	mov	r3, r6
 8007d46:	461e      	mov	r6, r3
 8007d48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d4c:	2a30      	cmp	r2, #48	@ 0x30
 8007d4e:	d0fa      	beq.n	8007d46 <_dtoa_r+0xb06>
 8007d50:	e5c2      	b.n	80078d8 <_dtoa_r+0x698>
 8007d52:	459a      	cmp	sl, r3
 8007d54:	d1a4      	bne.n	8007ca0 <_dtoa_r+0xa60>
 8007d56:	9b04      	ldr	r3, [sp, #16]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	9304      	str	r3, [sp, #16]
 8007d5c:	2331      	movs	r3, #49	@ 0x31
 8007d5e:	f88a 3000 	strb.w	r3, [sl]
 8007d62:	e5b9      	b.n	80078d8 <_dtoa_r+0x698>
 8007d64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007dc4 <_dtoa_r+0xb84>
 8007d6a:	b11b      	cbz	r3, 8007d74 <_dtoa_r+0xb34>
 8007d6c:	f10a 0308 	add.w	r3, sl, #8
 8007d70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	4650      	mov	r0, sl
 8007d76:	b019      	add	sp, #100	@ 0x64
 8007d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	f77f ae37 	ble.w	80079f2 <_dtoa_r+0x7b2>
 8007d84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d88:	2001      	movs	r0, #1
 8007d8a:	e655      	b.n	8007a38 <_dtoa_r+0x7f8>
 8007d8c:	9b00      	ldr	r3, [sp, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f77f aed6 	ble.w	8007b40 <_dtoa_r+0x900>
 8007d94:	4656      	mov	r6, sl
 8007d96:	4621      	mov	r1, r4
 8007d98:	4648      	mov	r0, r9
 8007d9a:	f7ff f9c7 	bl	800712c <quorem>
 8007d9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007da2:	f806 8b01 	strb.w	r8, [r6], #1
 8007da6:	9b00      	ldr	r3, [sp, #0]
 8007da8:	eba6 020a 	sub.w	r2, r6, sl
 8007dac:	4293      	cmp	r3, r2
 8007dae:	ddb3      	ble.n	8007d18 <_dtoa_r+0xad8>
 8007db0:	4649      	mov	r1, r9
 8007db2:	2300      	movs	r3, #0
 8007db4:	220a      	movs	r2, #10
 8007db6:	4658      	mov	r0, fp
 8007db8:	f000 f968 	bl	800808c <__multadd>
 8007dbc:	4681      	mov	r9, r0
 8007dbe:	e7ea      	b.n	8007d96 <_dtoa_r+0xb56>
 8007dc0:	0800aff5 	.word	0x0800aff5
 8007dc4:	0800af79 	.word	0x0800af79

08007dc8 <_free_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4605      	mov	r5, r0
 8007dcc:	2900      	cmp	r1, #0
 8007dce:	d041      	beq.n	8007e54 <_free_r+0x8c>
 8007dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd4:	1f0c      	subs	r4, r1, #4
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	bfb8      	it	lt
 8007dda:	18e4      	addlt	r4, r4, r3
 8007ddc:	f000 f8e8 	bl	8007fb0 <__malloc_lock>
 8007de0:	4a1d      	ldr	r2, [pc, #116]	@ (8007e58 <_free_r+0x90>)
 8007de2:	6813      	ldr	r3, [r2, #0]
 8007de4:	b933      	cbnz	r3, 8007df4 <_free_r+0x2c>
 8007de6:	6063      	str	r3, [r4, #4]
 8007de8:	6014      	str	r4, [r2, #0]
 8007dea:	4628      	mov	r0, r5
 8007dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007df0:	f000 b8e4 	b.w	8007fbc <__malloc_unlock>
 8007df4:	42a3      	cmp	r3, r4
 8007df6:	d908      	bls.n	8007e0a <_free_r+0x42>
 8007df8:	6820      	ldr	r0, [r4, #0]
 8007dfa:	1821      	adds	r1, r4, r0
 8007dfc:	428b      	cmp	r3, r1
 8007dfe:	bf01      	itttt	eq
 8007e00:	6819      	ldreq	r1, [r3, #0]
 8007e02:	685b      	ldreq	r3, [r3, #4]
 8007e04:	1809      	addeq	r1, r1, r0
 8007e06:	6021      	streq	r1, [r4, #0]
 8007e08:	e7ed      	b.n	8007de6 <_free_r+0x1e>
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	b10b      	cbz	r3, 8007e14 <_free_r+0x4c>
 8007e10:	42a3      	cmp	r3, r4
 8007e12:	d9fa      	bls.n	8007e0a <_free_r+0x42>
 8007e14:	6811      	ldr	r1, [r2, #0]
 8007e16:	1850      	adds	r0, r2, r1
 8007e18:	42a0      	cmp	r0, r4
 8007e1a:	d10b      	bne.n	8007e34 <_free_r+0x6c>
 8007e1c:	6820      	ldr	r0, [r4, #0]
 8007e1e:	4401      	add	r1, r0
 8007e20:	1850      	adds	r0, r2, r1
 8007e22:	4283      	cmp	r3, r0
 8007e24:	6011      	str	r1, [r2, #0]
 8007e26:	d1e0      	bne.n	8007dea <_free_r+0x22>
 8007e28:	6818      	ldr	r0, [r3, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	6053      	str	r3, [r2, #4]
 8007e2e:	4408      	add	r0, r1
 8007e30:	6010      	str	r0, [r2, #0]
 8007e32:	e7da      	b.n	8007dea <_free_r+0x22>
 8007e34:	d902      	bls.n	8007e3c <_free_r+0x74>
 8007e36:	230c      	movs	r3, #12
 8007e38:	602b      	str	r3, [r5, #0]
 8007e3a:	e7d6      	b.n	8007dea <_free_r+0x22>
 8007e3c:	6820      	ldr	r0, [r4, #0]
 8007e3e:	1821      	adds	r1, r4, r0
 8007e40:	428b      	cmp	r3, r1
 8007e42:	bf04      	itt	eq
 8007e44:	6819      	ldreq	r1, [r3, #0]
 8007e46:	685b      	ldreq	r3, [r3, #4]
 8007e48:	6063      	str	r3, [r4, #4]
 8007e4a:	bf04      	itt	eq
 8007e4c:	1809      	addeq	r1, r1, r0
 8007e4e:	6021      	streq	r1, [r4, #0]
 8007e50:	6054      	str	r4, [r2, #4]
 8007e52:	e7ca      	b.n	8007dea <_free_r+0x22>
 8007e54:	bd38      	pop	{r3, r4, r5, pc}
 8007e56:	bf00      	nop
 8007e58:	200005b0 	.word	0x200005b0

08007e5c <malloc>:
 8007e5c:	4b02      	ldr	r3, [pc, #8]	@ (8007e68 <malloc+0xc>)
 8007e5e:	4601      	mov	r1, r0
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	f000 b825 	b.w	8007eb0 <_malloc_r>
 8007e66:	bf00      	nop
 8007e68:	200000a8 	.word	0x200000a8

08007e6c <sbrk_aligned>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	4e0f      	ldr	r6, [pc, #60]	@ (8007eac <sbrk_aligned+0x40>)
 8007e70:	460c      	mov	r4, r1
 8007e72:	6831      	ldr	r1, [r6, #0]
 8007e74:	4605      	mov	r5, r0
 8007e76:	b911      	cbnz	r1, 8007e7e <sbrk_aligned+0x12>
 8007e78:	f001 ffd2 	bl	8009e20 <_sbrk_r>
 8007e7c:	6030      	str	r0, [r6, #0]
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4628      	mov	r0, r5
 8007e82:	f001 ffcd 	bl	8009e20 <_sbrk_r>
 8007e86:	1c43      	adds	r3, r0, #1
 8007e88:	d103      	bne.n	8007e92 <sbrk_aligned+0x26>
 8007e8a:	f04f 34ff 	mov.w	r4, #4294967295
 8007e8e:	4620      	mov	r0, r4
 8007e90:	bd70      	pop	{r4, r5, r6, pc}
 8007e92:	1cc4      	adds	r4, r0, #3
 8007e94:	f024 0403 	bic.w	r4, r4, #3
 8007e98:	42a0      	cmp	r0, r4
 8007e9a:	d0f8      	beq.n	8007e8e <sbrk_aligned+0x22>
 8007e9c:	1a21      	subs	r1, r4, r0
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f001 ffbe 	bl	8009e20 <_sbrk_r>
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d1f2      	bne.n	8007e8e <sbrk_aligned+0x22>
 8007ea8:	e7ef      	b.n	8007e8a <sbrk_aligned+0x1e>
 8007eaa:	bf00      	nop
 8007eac:	200005ac 	.word	0x200005ac

08007eb0 <_malloc_r>:
 8007eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb4:	1ccd      	adds	r5, r1, #3
 8007eb6:	f025 0503 	bic.w	r5, r5, #3
 8007eba:	3508      	adds	r5, #8
 8007ebc:	2d0c      	cmp	r5, #12
 8007ebe:	bf38      	it	cc
 8007ec0:	250c      	movcc	r5, #12
 8007ec2:	2d00      	cmp	r5, #0
 8007ec4:	4606      	mov	r6, r0
 8007ec6:	db01      	blt.n	8007ecc <_malloc_r+0x1c>
 8007ec8:	42a9      	cmp	r1, r5
 8007eca:	d904      	bls.n	8007ed6 <_malloc_r+0x26>
 8007ecc:	230c      	movs	r3, #12
 8007ece:	6033      	str	r3, [r6, #0]
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ed6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fac <_malloc_r+0xfc>
 8007eda:	f000 f869 	bl	8007fb0 <__malloc_lock>
 8007ede:	f8d8 3000 	ldr.w	r3, [r8]
 8007ee2:	461c      	mov	r4, r3
 8007ee4:	bb44      	cbnz	r4, 8007f38 <_malloc_r+0x88>
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f7ff ffbf 	bl	8007e6c <sbrk_aligned>
 8007eee:	1c43      	adds	r3, r0, #1
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	d158      	bne.n	8007fa6 <_malloc_r+0xf6>
 8007ef4:	f8d8 4000 	ldr.w	r4, [r8]
 8007ef8:	4627      	mov	r7, r4
 8007efa:	2f00      	cmp	r7, #0
 8007efc:	d143      	bne.n	8007f86 <_malloc_r+0xd6>
 8007efe:	2c00      	cmp	r4, #0
 8007f00:	d04b      	beq.n	8007f9a <_malloc_r+0xea>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	4639      	mov	r1, r7
 8007f06:	4630      	mov	r0, r6
 8007f08:	eb04 0903 	add.w	r9, r4, r3
 8007f0c:	f001 ff88 	bl	8009e20 <_sbrk_r>
 8007f10:	4581      	cmp	r9, r0
 8007f12:	d142      	bne.n	8007f9a <_malloc_r+0xea>
 8007f14:	6821      	ldr	r1, [r4, #0]
 8007f16:	1a6d      	subs	r5, r5, r1
 8007f18:	4629      	mov	r1, r5
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f7ff ffa6 	bl	8007e6c <sbrk_aligned>
 8007f20:	3001      	adds	r0, #1
 8007f22:	d03a      	beq.n	8007f9a <_malloc_r+0xea>
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	442b      	add	r3, r5
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	bb62      	cbnz	r2, 8007f8c <_malloc_r+0xdc>
 8007f32:	f8c8 7000 	str.w	r7, [r8]
 8007f36:	e00f      	b.n	8007f58 <_malloc_r+0xa8>
 8007f38:	6822      	ldr	r2, [r4, #0]
 8007f3a:	1b52      	subs	r2, r2, r5
 8007f3c:	d420      	bmi.n	8007f80 <_malloc_r+0xd0>
 8007f3e:	2a0b      	cmp	r2, #11
 8007f40:	d917      	bls.n	8007f72 <_malloc_r+0xc2>
 8007f42:	1961      	adds	r1, r4, r5
 8007f44:	42a3      	cmp	r3, r4
 8007f46:	6025      	str	r5, [r4, #0]
 8007f48:	bf18      	it	ne
 8007f4a:	6059      	strne	r1, [r3, #4]
 8007f4c:	6863      	ldr	r3, [r4, #4]
 8007f4e:	bf08      	it	eq
 8007f50:	f8c8 1000 	streq.w	r1, [r8]
 8007f54:	5162      	str	r2, [r4, r5]
 8007f56:	604b      	str	r3, [r1, #4]
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f000 f82f 	bl	8007fbc <__malloc_unlock>
 8007f5e:	f104 000b 	add.w	r0, r4, #11
 8007f62:	1d23      	adds	r3, r4, #4
 8007f64:	f020 0007 	bic.w	r0, r0, #7
 8007f68:	1ac2      	subs	r2, r0, r3
 8007f6a:	bf1c      	itt	ne
 8007f6c:	1a1b      	subne	r3, r3, r0
 8007f6e:	50a3      	strne	r3, [r4, r2]
 8007f70:	e7af      	b.n	8007ed2 <_malloc_r+0x22>
 8007f72:	6862      	ldr	r2, [r4, #4]
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	bf0c      	ite	eq
 8007f78:	f8c8 2000 	streq.w	r2, [r8]
 8007f7c:	605a      	strne	r2, [r3, #4]
 8007f7e:	e7eb      	b.n	8007f58 <_malloc_r+0xa8>
 8007f80:	4623      	mov	r3, r4
 8007f82:	6864      	ldr	r4, [r4, #4]
 8007f84:	e7ae      	b.n	8007ee4 <_malloc_r+0x34>
 8007f86:	463c      	mov	r4, r7
 8007f88:	687f      	ldr	r7, [r7, #4]
 8007f8a:	e7b6      	b.n	8007efa <_malloc_r+0x4a>
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	d1fb      	bne.n	8007f8c <_malloc_r+0xdc>
 8007f94:	2300      	movs	r3, #0
 8007f96:	6053      	str	r3, [r2, #4]
 8007f98:	e7de      	b.n	8007f58 <_malloc_r+0xa8>
 8007f9a:	230c      	movs	r3, #12
 8007f9c:	6033      	str	r3, [r6, #0]
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f000 f80c 	bl	8007fbc <__malloc_unlock>
 8007fa4:	e794      	b.n	8007ed0 <_malloc_r+0x20>
 8007fa6:	6005      	str	r5, [r0, #0]
 8007fa8:	e7d6      	b.n	8007f58 <_malloc_r+0xa8>
 8007faa:	bf00      	nop
 8007fac:	200005b0 	.word	0x200005b0

08007fb0 <__malloc_lock>:
 8007fb0:	4801      	ldr	r0, [pc, #4]	@ (8007fb8 <__malloc_lock+0x8>)
 8007fb2:	f7ff b8b2 	b.w	800711a <__retarget_lock_acquire_recursive>
 8007fb6:	bf00      	nop
 8007fb8:	200005a8 	.word	0x200005a8

08007fbc <__malloc_unlock>:
 8007fbc:	4801      	ldr	r0, [pc, #4]	@ (8007fc4 <__malloc_unlock+0x8>)
 8007fbe:	f7ff b8ad 	b.w	800711c <__retarget_lock_release_recursive>
 8007fc2:	bf00      	nop
 8007fc4:	200005a8 	.word	0x200005a8

08007fc8 <_Balloc>:
 8007fc8:	b570      	push	{r4, r5, r6, lr}
 8007fca:	69c6      	ldr	r6, [r0, #28]
 8007fcc:	4604      	mov	r4, r0
 8007fce:	460d      	mov	r5, r1
 8007fd0:	b976      	cbnz	r6, 8007ff0 <_Balloc+0x28>
 8007fd2:	2010      	movs	r0, #16
 8007fd4:	f7ff ff42 	bl	8007e5c <malloc>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	61e0      	str	r0, [r4, #28]
 8007fdc:	b920      	cbnz	r0, 8007fe8 <_Balloc+0x20>
 8007fde:	4b18      	ldr	r3, [pc, #96]	@ (8008040 <_Balloc+0x78>)
 8007fe0:	4818      	ldr	r0, [pc, #96]	@ (8008044 <_Balloc+0x7c>)
 8007fe2:	216b      	movs	r1, #107	@ 0x6b
 8007fe4:	f001 ff44 	bl	8009e70 <__assert_func>
 8007fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fec:	6006      	str	r6, [r0, #0]
 8007fee:	60c6      	str	r6, [r0, #12]
 8007ff0:	69e6      	ldr	r6, [r4, #28]
 8007ff2:	68f3      	ldr	r3, [r6, #12]
 8007ff4:	b183      	cbz	r3, 8008018 <_Balloc+0x50>
 8007ff6:	69e3      	ldr	r3, [r4, #28]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ffe:	b9b8      	cbnz	r0, 8008030 <_Balloc+0x68>
 8008000:	2101      	movs	r1, #1
 8008002:	fa01 f605 	lsl.w	r6, r1, r5
 8008006:	1d72      	adds	r2, r6, #5
 8008008:	0092      	lsls	r2, r2, #2
 800800a:	4620      	mov	r0, r4
 800800c:	f001 ff4e 	bl	8009eac <_calloc_r>
 8008010:	b160      	cbz	r0, 800802c <_Balloc+0x64>
 8008012:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008016:	e00e      	b.n	8008036 <_Balloc+0x6e>
 8008018:	2221      	movs	r2, #33	@ 0x21
 800801a:	2104      	movs	r1, #4
 800801c:	4620      	mov	r0, r4
 800801e:	f001 ff45 	bl	8009eac <_calloc_r>
 8008022:	69e3      	ldr	r3, [r4, #28]
 8008024:	60f0      	str	r0, [r6, #12]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e4      	bne.n	8007ff6 <_Balloc+0x2e>
 800802c:	2000      	movs	r0, #0
 800802e:	bd70      	pop	{r4, r5, r6, pc}
 8008030:	6802      	ldr	r2, [r0, #0]
 8008032:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008036:	2300      	movs	r3, #0
 8008038:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800803c:	e7f7      	b.n	800802e <_Balloc+0x66>
 800803e:	bf00      	nop
 8008040:	0800af86 	.word	0x0800af86
 8008044:	0800b006 	.word	0x0800b006

08008048 <_Bfree>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	69c6      	ldr	r6, [r0, #28]
 800804c:	4605      	mov	r5, r0
 800804e:	460c      	mov	r4, r1
 8008050:	b976      	cbnz	r6, 8008070 <_Bfree+0x28>
 8008052:	2010      	movs	r0, #16
 8008054:	f7ff ff02 	bl	8007e5c <malloc>
 8008058:	4602      	mov	r2, r0
 800805a:	61e8      	str	r0, [r5, #28]
 800805c:	b920      	cbnz	r0, 8008068 <_Bfree+0x20>
 800805e:	4b09      	ldr	r3, [pc, #36]	@ (8008084 <_Bfree+0x3c>)
 8008060:	4809      	ldr	r0, [pc, #36]	@ (8008088 <_Bfree+0x40>)
 8008062:	218f      	movs	r1, #143	@ 0x8f
 8008064:	f001 ff04 	bl	8009e70 <__assert_func>
 8008068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800806c:	6006      	str	r6, [r0, #0]
 800806e:	60c6      	str	r6, [r0, #12]
 8008070:	b13c      	cbz	r4, 8008082 <_Bfree+0x3a>
 8008072:	69eb      	ldr	r3, [r5, #28]
 8008074:	6862      	ldr	r2, [r4, #4]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800807c:	6021      	str	r1, [r4, #0]
 800807e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008082:	bd70      	pop	{r4, r5, r6, pc}
 8008084:	0800af86 	.word	0x0800af86
 8008088:	0800b006 	.word	0x0800b006

0800808c <__multadd>:
 800808c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008090:	690d      	ldr	r5, [r1, #16]
 8008092:	4607      	mov	r7, r0
 8008094:	460c      	mov	r4, r1
 8008096:	461e      	mov	r6, r3
 8008098:	f101 0c14 	add.w	ip, r1, #20
 800809c:	2000      	movs	r0, #0
 800809e:	f8dc 3000 	ldr.w	r3, [ip]
 80080a2:	b299      	uxth	r1, r3
 80080a4:	fb02 6101 	mla	r1, r2, r1, r6
 80080a8:	0c1e      	lsrs	r6, r3, #16
 80080aa:	0c0b      	lsrs	r3, r1, #16
 80080ac:	fb02 3306 	mla	r3, r2, r6, r3
 80080b0:	b289      	uxth	r1, r1
 80080b2:	3001      	adds	r0, #1
 80080b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080b8:	4285      	cmp	r5, r0
 80080ba:	f84c 1b04 	str.w	r1, [ip], #4
 80080be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080c2:	dcec      	bgt.n	800809e <__multadd+0x12>
 80080c4:	b30e      	cbz	r6, 800810a <__multadd+0x7e>
 80080c6:	68a3      	ldr	r3, [r4, #8]
 80080c8:	42ab      	cmp	r3, r5
 80080ca:	dc19      	bgt.n	8008100 <__multadd+0x74>
 80080cc:	6861      	ldr	r1, [r4, #4]
 80080ce:	4638      	mov	r0, r7
 80080d0:	3101      	adds	r1, #1
 80080d2:	f7ff ff79 	bl	8007fc8 <_Balloc>
 80080d6:	4680      	mov	r8, r0
 80080d8:	b928      	cbnz	r0, 80080e6 <__multadd+0x5a>
 80080da:	4602      	mov	r2, r0
 80080dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008110 <__multadd+0x84>)
 80080de:	480d      	ldr	r0, [pc, #52]	@ (8008114 <__multadd+0x88>)
 80080e0:	21ba      	movs	r1, #186	@ 0xba
 80080e2:	f001 fec5 	bl	8009e70 <__assert_func>
 80080e6:	6922      	ldr	r2, [r4, #16]
 80080e8:	3202      	adds	r2, #2
 80080ea:	f104 010c 	add.w	r1, r4, #12
 80080ee:	0092      	lsls	r2, r2, #2
 80080f0:	300c      	adds	r0, #12
 80080f2:	f001 fea5 	bl	8009e40 <memcpy>
 80080f6:	4621      	mov	r1, r4
 80080f8:	4638      	mov	r0, r7
 80080fa:	f7ff ffa5 	bl	8008048 <_Bfree>
 80080fe:	4644      	mov	r4, r8
 8008100:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008104:	3501      	adds	r5, #1
 8008106:	615e      	str	r6, [r3, #20]
 8008108:	6125      	str	r5, [r4, #16]
 800810a:	4620      	mov	r0, r4
 800810c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008110:	0800aff5 	.word	0x0800aff5
 8008114:	0800b006 	.word	0x0800b006

08008118 <__s2b>:
 8008118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800811c:	460c      	mov	r4, r1
 800811e:	4615      	mov	r5, r2
 8008120:	461f      	mov	r7, r3
 8008122:	2209      	movs	r2, #9
 8008124:	3308      	adds	r3, #8
 8008126:	4606      	mov	r6, r0
 8008128:	fb93 f3f2 	sdiv	r3, r3, r2
 800812c:	2100      	movs	r1, #0
 800812e:	2201      	movs	r2, #1
 8008130:	429a      	cmp	r2, r3
 8008132:	db09      	blt.n	8008148 <__s2b+0x30>
 8008134:	4630      	mov	r0, r6
 8008136:	f7ff ff47 	bl	8007fc8 <_Balloc>
 800813a:	b940      	cbnz	r0, 800814e <__s2b+0x36>
 800813c:	4602      	mov	r2, r0
 800813e:	4b19      	ldr	r3, [pc, #100]	@ (80081a4 <__s2b+0x8c>)
 8008140:	4819      	ldr	r0, [pc, #100]	@ (80081a8 <__s2b+0x90>)
 8008142:	21d3      	movs	r1, #211	@ 0xd3
 8008144:	f001 fe94 	bl	8009e70 <__assert_func>
 8008148:	0052      	lsls	r2, r2, #1
 800814a:	3101      	adds	r1, #1
 800814c:	e7f0      	b.n	8008130 <__s2b+0x18>
 800814e:	9b08      	ldr	r3, [sp, #32]
 8008150:	6143      	str	r3, [r0, #20]
 8008152:	2d09      	cmp	r5, #9
 8008154:	f04f 0301 	mov.w	r3, #1
 8008158:	6103      	str	r3, [r0, #16]
 800815a:	dd16      	ble.n	800818a <__s2b+0x72>
 800815c:	f104 0909 	add.w	r9, r4, #9
 8008160:	46c8      	mov	r8, r9
 8008162:	442c      	add	r4, r5
 8008164:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008168:	4601      	mov	r1, r0
 800816a:	3b30      	subs	r3, #48	@ 0x30
 800816c:	220a      	movs	r2, #10
 800816e:	4630      	mov	r0, r6
 8008170:	f7ff ff8c 	bl	800808c <__multadd>
 8008174:	45a0      	cmp	r8, r4
 8008176:	d1f5      	bne.n	8008164 <__s2b+0x4c>
 8008178:	f1a5 0408 	sub.w	r4, r5, #8
 800817c:	444c      	add	r4, r9
 800817e:	1b2d      	subs	r5, r5, r4
 8008180:	1963      	adds	r3, r4, r5
 8008182:	42bb      	cmp	r3, r7
 8008184:	db04      	blt.n	8008190 <__s2b+0x78>
 8008186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800818a:	340a      	adds	r4, #10
 800818c:	2509      	movs	r5, #9
 800818e:	e7f6      	b.n	800817e <__s2b+0x66>
 8008190:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008194:	4601      	mov	r1, r0
 8008196:	3b30      	subs	r3, #48	@ 0x30
 8008198:	220a      	movs	r2, #10
 800819a:	4630      	mov	r0, r6
 800819c:	f7ff ff76 	bl	800808c <__multadd>
 80081a0:	e7ee      	b.n	8008180 <__s2b+0x68>
 80081a2:	bf00      	nop
 80081a4:	0800aff5 	.word	0x0800aff5
 80081a8:	0800b006 	.word	0x0800b006

080081ac <__hi0bits>:
 80081ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80081b0:	4603      	mov	r3, r0
 80081b2:	bf36      	itet	cc
 80081b4:	0403      	lslcc	r3, r0, #16
 80081b6:	2000      	movcs	r0, #0
 80081b8:	2010      	movcc	r0, #16
 80081ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081be:	bf3c      	itt	cc
 80081c0:	021b      	lslcc	r3, r3, #8
 80081c2:	3008      	addcc	r0, #8
 80081c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081c8:	bf3c      	itt	cc
 80081ca:	011b      	lslcc	r3, r3, #4
 80081cc:	3004      	addcc	r0, #4
 80081ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081d2:	bf3c      	itt	cc
 80081d4:	009b      	lslcc	r3, r3, #2
 80081d6:	3002      	addcc	r0, #2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	db05      	blt.n	80081e8 <__hi0bits+0x3c>
 80081dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80081e0:	f100 0001 	add.w	r0, r0, #1
 80081e4:	bf08      	it	eq
 80081e6:	2020      	moveq	r0, #32
 80081e8:	4770      	bx	lr

080081ea <__lo0bits>:
 80081ea:	6803      	ldr	r3, [r0, #0]
 80081ec:	4602      	mov	r2, r0
 80081ee:	f013 0007 	ands.w	r0, r3, #7
 80081f2:	d00b      	beq.n	800820c <__lo0bits+0x22>
 80081f4:	07d9      	lsls	r1, r3, #31
 80081f6:	d421      	bmi.n	800823c <__lo0bits+0x52>
 80081f8:	0798      	lsls	r0, r3, #30
 80081fa:	bf49      	itett	mi
 80081fc:	085b      	lsrmi	r3, r3, #1
 80081fe:	089b      	lsrpl	r3, r3, #2
 8008200:	2001      	movmi	r0, #1
 8008202:	6013      	strmi	r3, [r2, #0]
 8008204:	bf5c      	itt	pl
 8008206:	6013      	strpl	r3, [r2, #0]
 8008208:	2002      	movpl	r0, #2
 800820a:	4770      	bx	lr
 800820c:	b299      	uxth	r1, r3
 800820e:	b909      	cbnz	r1, 8008214 <__lo0bits+0x2a>
 8008210:	0c1b      	lsrs	r3, r3, #16
 8008212:	2010      	movs	r0, #16
 8008214:	b2d9      	uxtb	r1, r3
 8008216:	b909      	cbnz	r1, 800821c <__lo0bits+0x32>
 8008218:	3008      	adds	r0, #8
 800821a:	0a1b      	lsrs	r3, r3, #8
 800821c:	0719      	lsls	r1, r3, #28
 800821e:	bf04      	itt	eq
 8008220:	091b      	lsreq	r3, r3, #4
 8008222:	3004      	addeq	r0, #4
 8008224:	0799      	lsls	r1, r3, #30
 8008226:	bf04      	itt	eq
 8008228:	089b      	lsreq	r3, r3, #2
 800822a:	3002      	addeq	r0, #2
 800822c:	07d9      	lsls	r1, r3, #31
 800822e:	d403      	bmi.n	8008238 <__lo0bits+0x4e>
 8008230:	085b      	lsrs	r3, r3, #1
 8008232:	f100 0001 	add.w	r0, r0, #1
 8008236:	d003      	beq.n	8008240 <__lo0bits+0x56>
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	4770      	bx	lr
 800823c:	2000      	movs	r0, #0
 800823e:	4770      	bx	lr
 8008240:	2020      	movs	r0, #32
 8008242:	4770      	bx	lr

08008244 <__i2b>:
 8008244:	b510      	push	{r4, lr}
 8008246:	460c      	mov	r4, r1
 8008248:	2101      	movs	r1, #1
 800824a:	f7ff febd 	bl	8007fc8 <_Balloc>
 800824e:	4602      	mov	r2, r0
 8008250:	b928      	cbnz	r0, 800825e <__i2b+0x1a>
 8008252:	4b05      	ldr	r3, [pc, #20]	@ (8008268 <__i2b+0x24>)
 8008254:	4805      	ldr	r0, [pc, #20]	@ (800826c <__i2b+0x28>)
 8008256:	f240 1145 	movw	r1, #325	@ 0x145
 800825a:	f001 fe09 	bl	8009e70 <__assert_func>
 800825e:	2301      	movs	r3, #1
 8008260:	6144      	str	r4, [r0, #20]
 8008262:	6103      	str	r3, [r0, #16]
 8008264:	bd10      	pop	{r4, pc}
 8008266:	bf00      	nop
 8008268:	0800aff5 	.word	0x0800aff5
 800826c:	0800b006 	.word	0x0800b006

08008270 <__multiply>:
 8008270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008274:	4614      	mov	r4, r2
 8008276:	690a      	ldr	r2, [r1, #16]
 8008278:	6923      	ldr	r3, [r4, #16]
 800827a:	429a      	cmp	r2, r3
 800827c:	bfa8      	it	ge
 800827e:	4623      	movge	r3, r4
 8008280:	460f      	mov	r7, r1
 8008282:	bfa4      	itt	ge
 8008284:	460c      	movge	r4, r1
 8008286:	461f      	movge	r7, r3
 8008288:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800828c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008290:	68a3      	ldr	r3, [r4, #8]
 8008292:	6861      	ldr	r1, [r4, #4]
 8008294:	eb0a 0609 	add.w	r6, sl, r9
 8008298:	42b3      	cmp	r3, r6
 800829a:	b085      	sub	sp, #20
 800829c:	bfb8      	it	lt
 800829e:	3101      	addlt	r1, #1
 80082a0:	f7ff fe92 	bl	8007fc8 <_Balloc>
 80082a4:	b930      	cbnz	r0, 80082b4 <__multiply+0x44>
 80082a6:	4602      	mov	r2, r0
 80082a8:	4b44      	ldr	r3, [pc, #272]	@ (80083bc <__multiply+0x14c>)
 80082aa:	4845      	ldr	r0, [pc, #276]	@ (80083c0 <__multiply+0x150>)
 80082ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80082b0:	f001 fdde 	bl	8009e70 <__assert_func>
 80082b4:	f100 0514 	add.w	r5, r0, #20
 80082b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082bc:	462b      	mov	r3, r5
 80082be:	2200      	movs	r2, #0
 80082c0:	4543      	cmp	r3, r8
 80082c2:	d321      	bcc.n	8008308 <__multiply+0x98>
 80082c4:	f107 0114 	add.w	r1, r7, #20
 80082c8:	f104 0214 	add.w	r2, r4, #20
 80082cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80082d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80082d4:	9302      	str	r3, [sp, #8]
 80082d6:	1b13      	subs	r3, r2, r4
 80082d8:	3b15      	subs	r3, #21
 80082da:	f023 0303 	bic.w	r3, r3, #3
 80082de:	3304      	adds	r3, #4
 80082e0:	f104 0715 	add.w	r7, r4, #21
 80082e4:	42ba      	cmp	r2, r7
 80082e6:	bf38      	it	cc
 80082e8:	2304      	movcc	r3, #4
 80082ea:	9301      	str	r3, [sp, #4]
 80082ec:	9b02      	ldr	r3, [sp, #8]
 80082ee:	9103      	str	r1, [sp, #12]
 80082f0:	428b      	cmp	r3, r1
 80082f2:	d80c      	bhi.n	800830e <__multiply+0x9e>
 80082f4:	2e00      	cmp	r6, #0
 80082f6:	dd03      	ble.n	8008300 <__multiply+0x90>
 80082f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d05b      	beq.n	80083b8 <__multiply+0x148>
 8008300:	6106      	str	r6, [r0, #16]
 8008302:	b005      	add	sp, #20
 8008304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008308:	f843 2b04 	str.w	r2, [r3], #4
 800830c:	e7d8      	b.n	80082c0 <__multiply+0x50>
 800830e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008312:	f1ba 0f00 	cmp.w	sl, #0
 8008316:	d024      	beq.n	8008362 <__multiply+0xf2>
 8008318:	f104 0e14 	add.w	lr, r4, #20
 800831c:	46a9      	mov	r9, r5
 800831e:	f04f 0c00 	mov.w	ip, #0
 8008322:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008326:	f8d9 3000 	ldr.w	r3, [r9]
 800832a:	fa1f fb87 	uxth.w	fp, r7
 800832e:	b29b      	uxth	r3, r3
 8008330:	fb0a 330b 	mla	r3, sl, fp, r3
 8008334:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008338:	f8d9 7000 	ldr.w	r7, [r9]
 800833c:	4463      	add	r3, ip
 800833e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008342:	fb0a c70b 	mla	r7, sl, fp, ip
 8008346:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800834a:	b29b      	uxth	r3, r3
 800834c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008350:	4572      	cmp	r2, lr
 8008352:	f849 3b04 	str.w	r3, [r9], #4
 8008356:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800835a:	d8e2      	bhi.n	8008322 <__multiply+0xb2>
 800835c:	9b01      	ldr	r3, [sp, #4]
 800835e:	f845 c003 	str.w	ip, [r5, r3]
 8008362:	9b03      	ldr	r3, [sp, #12]
 8008364:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008368:	3104      	adds	r1, #4
 800836a:	f1b9 0f00 	cmp.w	r9, #0
 800836e:	d021      	beq.n	80083b4 <__multiply+0x144>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	f104 0c14 	add.w	ip, r4, #20
 8008376:	46ae      	mov	lr, r5
 8008378:	f04f 0a00 	mov.w	sl, #0
 800837c:	f8bc b000 	ldrh.w	fp, [ip]
 8008380:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008384:	fb09 770b 	mla	r7, r9, fp, r7
 8008388:	4457      	add	r7, sl
 800838a:	b29b      	uxth	r3, r3
 800838c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008390:	f84e 3b04 	str.w	r3, [lr], #4
 8008394:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008398:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800839c:	f8be 3000 	ldrh.w	r3, [lr]
 80083a0:	fb09 330a 	mla	r3, r9, sl, r3
 80083a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80083a8:	4562      	cmp	r2, ip
 80083aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083ae:	d8e5      	bhi.n	800837c <__multiply+0x10c>
 80083b0:	9f01      	ldr	r7, [sp, #4]
 80083b2:	51eb      	str	r3, [r5, r7]
 80083b4:	3504      	adds	r5, #4
 80083b6:	e799      	b.n	80082ec <__multiply+0x7c>
 80083b8:	3e01      	subs	r6, #1
 80083ba:	e79b      	b.n	80082f4 <__multiply+0x84>
 80083bc:	0800aff5 	.word	0x0800aff5
 80083c0:	0800b006 	.word	0x0800b006

080083c4 <__pow5mult>:
 80083c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c8:	4615      	mov	r5, r2
 80083ca:	f012 0203 	ands.w	r2, r2, #3
 80083ce:	4607      	mov	r7, r0
 80083d0:	460e      	mov	r6, r1
 80083d2:	d007      	beq.n	80083e4 <__pow5mult+0x20>
 80083d4:	4c25      	ldr	r4, [pc, #148]	@ (800846c <__pow5mult+0xa8>)
 80083d6:	3a01      	subs	r2, #1
 80083d8:	2300      	movs	r3, #0
 80083da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083de:	f7ff fe55 	bl	800808c <__multadd>
 80083e2:	4606      	mov	r6, r0
 80083e4:	10ad      	asrs	r5, r5, #2
 80083e6:	d03d      	beq.n	8008464 <__pow5mult+0xa0>
 80083e8:	69fc      	ldr	r4, [r7, #28]
 80083ea:	b97c      	cbnz	r4, 800840c <__pow5mult+0x48>
 80083ec:	2010      	movs	r0, #16
 80083ee:	f7ff fd35 	bl	8007e5c <malloc>
 80083f2:	4602      	mov	r2, r0
 80083f4:	61f8      	str	r0, [r7, #28]
 80083f6:	b928      	cbnz	r0, 8008404 <__pow5mult+0x40>
 80083f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008470 <__pow5mult+0xac>)
 80083fa:	481e      	ldr	r0, [pc, #120]	@ (8008474 <__pow5mult+0xb0>)
 80083fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008400:	f001 fd36 	bl	8009e70 <__assert_func>
 8008404:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008408:	6004      	str	r4, [r0, #0]
 800840a:	60c4      	str	r4, [r0, #12]
 800840c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008410:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008414:	b94c      	cbnz	r4, 800842a <__pow5mult+0x66>
 8008416:	f240 2171 	movw	r1, #625	@ 0x271
 800841a:	4638      	mov	r0, r7
 800841c:	f7ff ff12 	bl	8008244 <__i2b>
 8008420:	2300      	movs	r3, #0
 8008422:	f8c8 0008 	str.w	r0, [r8, #8]
 8008426:	4604      	mov	r4, r0
 8008428:	6003      	str	r3, [r0, #0]
 800842a:	f04f 0900 	mov.w	r9, #0
 800842e:	07eb      	lsls	r3, r5, #31
 8008430:	d50a      	bpl.n	8008448 <__pow5mult+0x84>
 8008432:	4631      	mov	r1, r6
 8008434:	4622      	mov	r2, r4
 8008436:	4638      	mov	r0, r7
 8008438:	f7ff ff1a 	bl	8008270 <__multiply>
 800843c:	4631      	mov	r1, r6
 800843e:	4680      	mov	r8, r0
 8008440:	4638      	mov	r0, r7
 8008442:	f7ff fe01 	bl	8008048 <_Bfree>
 8008446:	4646      	mov	r6, r8
 8008448:	106d      	asrs	r5, r5, #1
 800844a:	d00b      	beq.n	8008464 <__pow5mult+0xa0>
 800844c:	6820      	ldr	r0, [r4, #0]
 800844e:	b938      	cbnz	r0, 8008460 <__pow5mult+0x9c>
 8008450:	4622      	mov	r2, r4
 8008452:	4621      	mov	r1, r4
 8008454:	4638      	mov	r0, r7
 8008456:	f7ff ff0b 	bl	8008270 <__multiply>
 800845a:	6020      	str	r0, [r4, #0]
 800845c:	f8c0 9000 	str.w	r9, [r0]
 8008460:	4604      	mov	r4, r0
 8008462:	e7e4      	b.n	800842e <__pow5mult+0x6a>
 8008464:	4630      	mov	r0, r6
 8008466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800846a:	bf00      	nop
 800846c:	0800b060 	.word	0x0800b060
 8008470:	0800af86 	.word	0x0800af86
 8008474:	0800b006 	.word	0x0800b006

08008478 <__lshift>:
 8008478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800847c:	460c      	mov	r4, r1
 800847e:	6849      	ldr	r1, [r1, #4]
 8008480:	6923      	ldr	r3, [r4, #16]
 8008482:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008486:	68a3      	ldr	r3, [r4, #8]
 8008488:	4607      	mov	r7, r0
 800848a:	4691      	mov	r9, r2
 800848c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008490:	f108 0601 	add.w	r6, r8, #1
 8008494:	42b3      	cmp	r3, r6
 8008496:	db0b      	blt.n	80084b0 <__lshift+0x38>
 8008498:	4638      	mov	r0, r7
 800849a:	f7ff fd95 	bl	8007fc8 <_Balloc>
 800849e:	4605      	mov	r5, r0
 80084a0:	b948      	cbnz	r0, 80084b6 <__lshift+0x3e>
 80084a2:	4602      	mov	r2, r0
 80084a4:	4b28      	ldr	r3, [pc, #160]	@ (8008548 <__lshift+0xd0>)
 80084a6:	4829      	ldr	r0, [pc, #164]	@ (800854c <__lshift+0xd4>)
 80084a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80084ac:	f001 fce0 	bl	8009e70 <__assert_func>
 80084b0:	3101      	adds	r1, #1
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	e7ee      	b.n	8008494 <__lshift+0x1c>
 80084b6:	2300      	movs	r3, #0
 80084b8:	f100 0114 	add.w	r1, r0, #20
 80084bc:	f100 0210 	add.w	r2, r0, #16
 80084c0:	4618      	mov	r0, r3
 80084c2:	4553      	cmp	r3, sl
 80084c4:	db33      	blt.n	800852e <__lshift+0xb6>
 80084c6:	6920      	ldr	r0, [r4, #16]
 80084c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084cc:	f104 0314 	add.w	r3, r4, #20
 80084d0:	f019 091f 	ands.w	r9, r9, #31
 80084d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084dc:	d02b      	beq.n	8008536 <__lshift+0xbe>
 80084de:	f1c9 0e20 	rsb	lr, r9, #32
 80084e2:	468a      	mov	sl, r1
 80084e4:	2200      	movs	r2, #0
 80084e6:	6818      	ldr	r0, [r3, #0]
 80084e8:	fa00 f009 	lsl.w	r0, r0, r9
 80084ec:	4310      	orrs	r0, r2
 80084ee:	f84a 0b04 	str.w	r0, [sl], #4
 80084f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f6:	459c      	cmp	ip, r3
 80084f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80084fc:	d8f3      	bhi.n	80084e6 <__lshift+0x6e>
 80084fe:	ebac 0304 	sub.w	r3, ip, r4
 8008502:	3b15      	subs	r3, #21
 8008504:	f023 0303 	bic.w	r3, r3, #3
 8008508:	3304      	adds	r3, #4
 800850a:	f104 0015 	add.w	r0, r4, #21
 800850e:	4584      	cmp	ip, r0
 8008510:	bf38      	it	cc
 8008512:	2304      	movcc	r3, #4
 8008514:	50ca      	str	r2, [r1, r3]
 8008516:	b10a      	cbz	r2, 800851c <__lshift+0xa4>
 8008518:	f108 0602 	add.w	r6, r8, #2
 800851c:	3e01      	subs	r6, #1
 800851e:	4638      	mov	r0, r7
 8008520:	612e      	str	r6, [r5, #16]
 8008522:	4621      	mov	r1, r4
 8008524:	f7ff fd90 	bl	8008048 <_Bfree>
 8008528:	4628      	mov	r0, r5
 800852a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800852e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008532:	3301      	adds	r3, #1
 8008534:	e7c5      	b.n	80084c2 <__lshift+0x4a>
 8008536:	3904      	subs	r1, #4
 8008538:	f853 2b04 	ldr.w	r2, [r3], #4
 800853c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008540:	459c      	cmp	ip, r3
 8008542:	d8f9      	bhi.n	8008538 <__lshift+0xc0>
 8008544:	e7ea      	b.n	800851c <__lshift+0xa4>
 8008546:	bf00      	nop
 8008548:	0800aff5 	.word	0x0800aff5
 800854c:	0800b006 	.word	0x0800b006

08008550 <__mcmp>:
 8008550:	690a      	ldr	r2, [r1, #16]
 8008552:	4603      	mov	r3, r0
 8008554:	6900      	ldr	r0, [r0, #16]
 8008556:	1a80      	subs	r0, r0, r2
 8008558:	b530      	push	{r4, r5, lr}
 800855a:	d10e      	bne.n	800857a <__mcmp+0x2a>
 800855c:	3314      	adds	r3, #20
 800855e:	3114      	adds	r1, #20
 8008560:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008564:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008568:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800856c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008570:	4295      	cmp	r5, r2
 8008572:	d003      	beq.n	800857c <__mcmp+0x2c>
 8008574:	d205      	bcs.n	8008582 <__mcmp+0x32>
 8008576:	f04f 30ff 	mov.w	r0, #4294967295
 800857a:	bd30      	pop	{r4, r5, pc}
 800857c:	42a3      	cmp	r3, r4
 800857e:	d3f3      	bcc.n	8008568 <__mcmp+0x18>
 8008580:	e7fb      	b.n	800857a <__mcmp+0x2a>
 8008582:	2001      	movs	r0, #1
 8008584:	e7f9      	b.n	800857a <__mcmp+0x2a>
	...

08008588 <__mdiff>:
 8008588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858c:	4689      	mov	r9, r1
 800858e:	4606      	mov	r6, r0
 8008590:	4611      	mov	r1, r2
 8008592:	4648      	mov	r0, r9
 8008594:	4614      	mov	r4, r2
 8008596:	f7ff ffdb 	bl	8008550 <__mcmp>
 800859a:	1e05      	subs	r5, r0, #0
 800859c:	d112      	bne.n	80085c4 <__mdiff+0x3c>
 800859e:	4629      	mov	r1, r5
 80085a0:	4630      	mov	r0, r6
 80085a2:	f7ff fd11 	bl	8007fc8 <_Balloc>
 80085a6:	4602      	mov	r2, r0
 80085a8:	b928      	cbnz	r0, 80085b6 <__mdiff+0x2e>
 80085aa:	4b3f      	ldr	r3, [pc, #252]	@ (80086a8 <__mdiff+0x120>)
 80085ac:	f240 2137 	movw	r1, #567	@ 0x237
 80085b0:	483e      	ldr	r0, [pc, #248]	@ (80086ac <__mdiff+0x124>)
 80085b2:	f001 fc5d 	bl	8009e70 <__assert_func>
 80085b6:	2301      	movs	r3, #1
 80085b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085bc:	4610      	mov	r0, r2
 80085be:	b003      	add	sp, #12
 80085c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c4:	bfbc      	itt	lt
 80085c6:	464b      	movlt	r3, r9
 80085c8:	46a1      	movlt	r9, r4
 80085ca:	4630      	mov	r0, r6
 80085cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80085d0:	bfba      	itte	lt
 80085d2:	461c      	movlt	r4, r3
 80085d4:	2501      	movlt	r5, #1
 80085d6:	2500      	movge	r5, #0
 80085d8:	f7ff fcf6 	bl	8007fc8 <_Balloc>
 80085dc:	4602      	mov	r2, r0
 80085de:	b918      	cbnz	r0, 80085e8 <__mdiff+0x60>
 80085e0:	4b31      	ldr	r3, [pc, #196]	@ (80086a8 <__mdiff+0x120>)
 80085e2:	f240 2145 	movw	r1, #581	@ 0x245
 80085e6:	e7e3      	b.n	80085b0 <__mdiff+0x28>
 80085e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085ec:	6926      	ldr	r6, [r4, #16]
 80085ee:	60c5      	str	r5, [r0, #12]
 80085f0:	f109 0310 	add.w	r3, r9, #16
 80085f4:	f109 0514 	add.w	r5, r9, #20
 80085f8:	f104 0e14 	add.w	lr, r4, #20
 80085fc:	f100 0b14 	add.w	fp, r0, #20
 8008600:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008604:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	46d9      	mov	r9, fp
 800860c:	f04f 0c00 	mov.w	ip, #0
 8008610:	9b01      	ldr	r3, [sp, #4]
 8008612:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008616:	f853 af04 	ldr.w	sl, [r3, #4]!
 800861a:	9301      	str	r3, [sp, #4]
 800861c:	fa1f f38a 	uxth.w	r3, sl
 8008620:	4619      	mov	r1, r3
 8008622:	b283      	uxth	r3, r0
 8008624:	1acb      	subs	r3, r1, r3
 8008626:	0c00      	lsrs	r0, r0, #16
 8008628:	4463      	add	r3, ip
 800862a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800862e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008632:	b29b      	uxth	r3, r3
 8008634:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008638:	4576      	cmp	r6, lr
 800863a:	f849 3b04 	str.w	r3, [r9], #4
 800863e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008642:	d8e5      	bhi.n	8008610 <__mdiff+0x88>
 8008644:	1b33      	subs	r3, r6, r4
 8008646:	3b15      	subs	r3, #21
 8008648:	f023 0303 	bic.w	r3, r3, #3
 800864c:	3415      	adds	r4, #21
 800864e:	3304      	adds	r3, #4
 8008650:	42a6      	cmp	r6, r4
 8008652:	bf38      	it	cc
 8008654:	2304      	movcc	r3, #4
 8008656:	441d      	add	r5, r3
 8008658:	445b      	add	r3, fp
 800865a:	461e      	mov	r6, r3
 800865c:	462c      	mov	r4, r5
 800865e:	4544      	cmp	r4, r8
 8008660:	d30e      	bcc.n	8008680 <__mdiff+0xf8>
 8008662:	f108 0103 	add.w	r1, r8, #3
 8008666:	1b49      	subs	r1, r1, r5
 8008668:	f021 0103 	bic.w	r1, r1, #3
 800866c:	3d03      	subs	r5, #3
 800866e:	45a8      	cmp	r8, r5
 8008670:	bf38      	it	cc
 8008672:	2100      	movcc	r1, #0
 8008674:	440b      	add	r3, r1
 8008676:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800867a:	b191      	cbz	r1, 80086a2 <__mdiff+0x11a>
 800867c:	6117      	str	r7, [r2, #16]
 800867e:	e79d      	b.n	80085bc <__mdiff+0x34>
 8008680:	f854 1b04 	ldr.w	r1, [r4], #4
 8008684:	46e6      	mov	lr, ip
 8008686:	0c08      	lsrs	r0, r1, #16
 8008688:	fa1c fc81 	uxtah	ip, ip, r1
 800868c:	4471      	add	r1, lr
 800868e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008692:	b289      	uxth	r1, r1
 8008694:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008698:	f846 1b04 	str.w	r1, [r6], #4
 800869c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086a0:	e7dd      	b.n	800865e <__mdiff+0xd6>
 80086a2:	3f01      	subs	r7, #1
 80086a4:	e7e7      	b.n	8008676 <__mdiff+0xee>
 80086a6:	bf00      	nop
 80086a8:	0800aff5 	.word	0x0800aff5
 80086ac:	0800b006 	.word	0x0800b006

080086b0 <__ulp>:
 80086b0:	b082      	sub	sp, #8
 80086b2:	ed8d 0b00 	vstr	d0, [sp]
 80086b6:	9a01      	ldr	r2, [sp, #4]
 80086b8:	4b0f      	ldr	r3, [pc, #60]	@ (80086f8 <__ulp+0x48>)
 80086ba:	4013      	ands	r3, r2
 80086bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	dc08      	bgt.n	80086d6 <__ulp+0x26>
 80086c4:	425b      	negs	r3, r3
 80086c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80086ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80086ce:	da04      	bge.n	80086da <__ulp+0x2a>
 80086d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80086d4:	4113      	asrs	r3, r2
 80086d6:	2200      	movs	r2, #0
 80086d8:	e008      	b.n	80086ec <__ulp+0x3c>
 80086da:	f1a2 0314 	sub.w	r3, r2, #20
 80086de:	2b1e      	cmp	r3, #30
 80086e0:	bfda      	itte	le
 80086e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80086e6:	40da      	lsrle	r2, r3
 80086e8:	2201      	movgt	r2, #1
 80086ea:	2300      	movs	r3, #0
 80086ec:	4619      	mov	r1, r3
 80086ee:	4610      	mov	r0, r2
 80086f0:	ec41 0b10 	vmov	d0, r0, r1
 80086f4:	b002      	add	sp, #8
 80086f6:	4770      	bx	lr
 80086f8:	7ff00000 	.word	0x7ff00000

080086fc <__b2d>:
 80086fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008700:	6906      	ldr	r6, [r0, #16]
 8008702:	f100 0814 	add.w	r8, r0, #20
 8008706:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800870a:	1f37      	subs	r7, r6, #4
 800870c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008710:	4610      	mov	r0, r2
 8008712:	f7ff fd4b 	bl	80081ac <__hi0bits>
 8008716:	f1c0 0320 	rsb	r3, r0, #32
 800871a:	280a      	cmp	r0, #10
 800871c:	600b      	str	r3, [r1, #0]
 800871e:	491b      	ldr	r1, [pc, #108]	@ (800878c <__b2d+0x90>)
 8008720:	dc15      	bgt.n	800874e <__b2d+0x52>
 8008722:	f1c0 0c0b 	rsb	ip, r0, #11
 8008726:	fa22 f30c 	lsr.w	r3, r2, ip
 800872a:	45b8      	cmp	r8, r7
 800872c:	ea43 0501 	orr.w	r5, r3, r1
 8008730:	bf34      	ite	cc
 8008732:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008736:	2300      	movcs	r3, #0
 8008738:	3015      	adds	r0, #21
 800873a:	fa02 f000 	lsl.w	r0, r2, r0
 800873e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008742:	4303      	orrs	r3, r0
 8008744:	461c      	mov	r4, r3
 8008746:	ec45 4b10 	vmov	d0, r4, r5
 800874a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800874e:	45b8      	cmp	r8, r7
 8008750:	bf3a      	itte	cc
 8008752:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008756:	f1a6 0708 	subcc.w	r7, r6, #8
 800875a:	2300      	movcs	r3, #0
 800875c:	380b      	subs	r0, #11
 800875e:	d012      	beq.n	8008786 <__b2d+0x8a>
 8008760:	f1c0 0120 	rsb	r1, r0, #32
 8008764:	fa23 f401 	lsr.w	r4, r3, r1
 8008768:	4082      	lsls	r2, r0
 800876a:	4322      	orrs	r2, r4
 800876c:	4547      	cmp	r7, r8
 800876e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008772:	bf8c      	ite	hi
 8008774:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008778:	2200      	movls	r2, #0
 800877a:	4083      	lsls	r3, r0
 800877c:	40ca      	lsrs	r2, r1
 800877e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008782:	4313      	orrs	r3, r2
 8008784:	e7de      	b.n	8008744 <__b2d+0x48>
 8008786:	ea42 0501 	orr.w	r5, r2, r1
 800878a:	e7db      	b.n	8008744 <__b2d+0x48>
 800878c:	3ff00000 	.word	0x3ff00000

08008790 <__d2b>:
 8008790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008794:	460f      	mov	r7, r1
 8008796:	2101      	movs	r1, #1
 8008798:	ec59 8b10 	vmov	r8, r9, d0
 800879c:	4616      	mov	r6, r2
 800879e:	f7ff fc13 	bl	8007fc8 <_Balloc>
 80087a2:	4604      	mov	r4, r0
 80087a4:	b930      	cbnz	r0, 80087b4 <__d2b+0x24>
 80087a6:	4602      	mov	r2, r0
 80087a8:	4b23      	ldr	r3, [pc, #140]	@ (8008838 <__d2b+0xa8>)
 80087aa:	4824      	ldr	r0, [pc, #144]	@ (800883c <__d2b+0xac>)
 80087ac:	f240 310f 	movw	r1, #783	@ 0x30f
 80087b0:	f001 fb5e 	bl	8009e70 <__assert_func>
 80087b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087bc:	b10d      	cbz	r5, 80087c2 <__d2b+0x32>
 80087be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087c2:	9301      	str	r3, [sp, #4]
 80087c4:	f1b8 0300 	subs.w	r3, r8, #0
 80087c8:	d023      	beq.n	8008812 <__d2b+0x82>
 80087ca:	4668      	mov	r0, sp
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	f7ff fd0c 	bl	80081ea <__lo0bits>
 80087d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80087d6:	b1d0      	cbz	r0, 800880e <__d2b+0x7e>
 80087d8:	f1c0 0320 	rsb	r3, r0, #32
 80087dc:	fa02 f303 	lsl.w	r3, r2, r3
 80087e0:	430b      	orrs	r3, r1
 80087e2:	40c2      	lsrs	r2, r0
 80087e4:	6163      	str	r3, [r4, #20]
 80087e6:	9201      	str	r2, [sp, #4]
 80087e8:	9b01      	ldr	r3, [sp, #4]
 80087ea:	61a3      	str	r3, [r4, #24]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	bf0c      	ite	eq
 80087f0:	2201      	moveq	r2, #1
 80087f2:	2202      	movne	r2, #2
 80087f4:	6122      	str	r2, [r4, #16]
 80087f6:	b1a5      	cbz	r5, 8008822 <__d2b+0x92>
 80087f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80087fc:	4405      	add	r5, r0
 80087fe:	603d      	str	r5, [r7, #0]
 8008800:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008804:	6030      	str	r0, [r6, #0]
 8008806:	4620      	mov	r0, r4
 8008808:	b003      	add	sp, #12
 800880a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800880e:	6161      	str	r1, [r4, #20]
 8008810:	e7ea      	b.n	80087e8 <__d2b+0x58>
 8008812:	a801      	add	r0, sp, #4
 8008814:	f7ff fce9 	bl	80081ea <__lo0bits>
 8008818:	9b01      	ldr	r3, [sp, #4]
 800881a:	6163      	str	r3, [r4, #20]
 800881c:	3020      	adds	r0, #32
 800881e:	2201      	movs	r2, #1
 8008820:	e7e8      	b.n	80087f4 <__d2b+0x64>
 8008822:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008826:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800882a:	6038      	str	r0, [r7, #0]
 800882c:	6918      	ldr	r0, [r3, #16]
 800882e:	f7ff fcbd 	bl	80081ac <__hi0bits>
 8008832:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008836:	e7e5      	b.n	8008804 <__d2b+0x74>
 8008838:	0800aff5 	.word	0x0800aff5
 800883c:	0800b006 	.word	0x0800b006

08008840 <__ratio>:
 8008840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	b085      	sub	sp, #20
 8008846:	e9cd 1000 	strd	r1, r0, [sp]
 800884a:	a902      	add	r1, sp, #8
 800884c:	f7ff ff56 	bl	80086fc <__b2d>
 8008850:	9800      	ldr	r0, [sp, #0]
 8008852:	a903      	add	r1, sp, #12
 8008854:	ec55 4b10 	vmov	r4, r5, d0
 8008858:	f7ff ff50 	bl	80086fc <__b2d>
 800885c:	9b01      	ldr	r3, [sp, #4]
 800885e:	6919      	ldr	r1, [r3, #16]
 8008860:	9b00      	ldr	r3, [sp, #0]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	1ac9      	subs	r1, r1, r3
 8008866:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800886a:	1a9b      	subs	r3, r3, r2
 800886c:	ec5b ab10 	vmov	sl, fp, d0
 8008870:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008874:	2b00      	cmp	r3, #0
 8008876:	bfce      	itee	gt
 8008878:	462a      	movgt	r2, r5
 800887a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800887e:	465a      	movle	r2, fp
 8008880:	462f      	mov	r7, r5
 8008882:	46d9      	mov	r9, fp
 8008884:	bfcc      	ite	gt
 8008886:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800888a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800888e:	464b      	mov	r3, r9
 8008890:	4652      	mov	r2, sl
 8008892:	4620      	mov	r0, r4
 8008894:	4639      	mov	r1, r7
 8008896:	f7f7 ffd9 	bl	800084c <__aeabi_ddiv>
 800889a:	ec41 0b10 	vmov	d0, r0, r1
 800889e:	b005      	add	sp, #20
 80088a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088a4 <__copybits>:
 80088a4:	3901      	subs	r1, #1
 80088a6:	b570      	push	{r4, r5, r6, lr}
 80088a8:	1149      	asrs	r1, r1, #5
 80088aa:	6914      	ldr	r4, [r2, #16]
 80088ac:	3101      	adds	r1, #1
 80088ae:	f102 0314 	add.w	r3, r2, #20
 80088b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80088b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80088ba:	1f05      	subs	r5, r0, #4
 80088bc:	42a3      	cmp	r3, r4
 80088be:	d30c      	bcc.n	80088da <__copybits+0x36>
 80088c0:	1aa3      	subs	r3, r4, r2
 80088c2:	3b11      	subs	r3, #17
 80088c4:	f023 0303 	bic.w	r3, r3, #3
 80088c8:	3211      	adds	r2, #17
 80088ca:	42a2      	cmp	r2, r4
 80088cc:	bf88      	it	hi
 80088ce:	2300      	movhi	r3, #0
 80088d0:	4418      	add	r0, r3
 80088d2:	2300      	movs	r3, #0
 80088d4:	4288      	cmp	r0, r1
 80088d6:	d305      	bcc.n	80088e4 <__copybits+0x40>
 80088d8:	bd70      	pop	{r4, r5, r6, pc}
 80088da:	f853 6b04 	ldr.w	r6, [r3], #4
 80088de:	f845 6f04 	str.w	r6, [r5, #4]!
 80088e2:	e7eb      	b.n	80088bc <__copybits+0x18>
 80088e4:	f840 3b04 	str.w	r3, [r0], #4
 80088e8:	e7f4      	b.n	80088d4 <__copybits+0x30>

080088ea <__any_on>:
 80088ea:	f100 0214 	add.w	r2, r0, #20
 80088ee:	6900      	ldr	r0, [r0, #16]
 80088f0:	114b      	asrs	r3, r1, #5
 80088f2:	4298      	cmp	r0, r3
 80088f4:	b510      	push	{r4, lr}
 80088f6:	db11      	blt.n	800891c <__any_on+0x32>
 80088f8:	dd0a      	ble.n	8008910 <__any_on+0x26>
 80088fa:	f011 011f 	ands.w	r1, r1, #31
 80088fe:	d007      	beq.n	8008910 <__any_on+0x26>
 8008900:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008904:	fa24 f001 	lsr.w	r0, r4, r1
 8008908:	fa00 f101 	lsl.w	r1, r0, r1
 800890c:	428c      	cmp	r4, r1
 800890e:	d10b      	bne.n	8008928 <__any_on+0x3e>
 8008910:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008914:	4293      	cmp	r3, r2
 8008916:	d803      	bhi.n	8008920 <__any_on+0x36>
 8008918:	2000      	movs	r0, #0
 800891a:	bd10      	pop	{r4, pc}
 800891c:	4603      	mov	r3, r0
 800891e:	e7f7      	b.n	8008910 <__any_on+0x26>
 8008920:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008924:	2900      	cmp	r1, #0
 8008926:	d0f5      	beq.n	8008914 <__any_on+0x2a>
 8008928:	2001      	movs	r0, #1
 800892a:	e7f6      	b.n	800891a <__any_on+0x30>

0800892c <sulp>:
 800892c:	b570      	push	{r4, r5, r6, lr}
 800892e:	4604      	mov	r4, r0
 8008930:	460d      	mov	r5, r1
 8008932:	ec45 4b10 	vmov	d0, r4, r5
 8008936:	4616      	mov	r6, r2
 8008938:	f7ff feba 	bl	80086b0 <__ulp>
 800893c:	ec51 0b10 	vmov	r0, r1, d0
 8008940:	b17e      	cbz	r6, 8008962 <sulp+0x36>
 8008942:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008946:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800894a:	2b00      	cmp	r3, #0
 800894c:	dd09      	ble.n	8008962 <sulp+0x36>
 800894e:	051b      	lsls	r3, r3, #20
 8008950:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008954:	2400      	movs	r4, #0
 8008956:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800895a:	4622      	mov	r2, r4
 800895c:	462b      	mov	r3, r5
 800895e:	f7f7 fe4b 	bl	80005f8 <__aeabi_dmul>
 8008962:	ec41 0b10 	vmov	d0, r0, r1
 8008966:	bd70      	pop	{r4, r5, r6, pc}

08008968 <_strtod_l>:
 8008968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	b09f      	sub	sp, #124	@ 0x7c
 800896e:	460c      	mov	r4, r1
 8008970:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008972:	2200      	movs	r2, #0
 8008974:	921a      	str	r2, [sp, #104]	@ 0x68
 8008976:	9005      	str	r0, [sp, #20]
 8008978:	f04f 0a00 	mov.w	sl, #0
 800897c:	f04f 0b00 	mov.w	fp, #0
 8008980:	460a      	mov	r2, r1
 8008982:	9219      	str	r2, [sp, #100]	@ 0x64
 8008984:	7811      	ldrb	r1, [r2, #0]
 8008986:	292b      	cmp	r1, #43	@ 0x2b
 8008988:	d04a      	beq.n	8008a20 <_strtod_l+0xb8>
 800898a:	d838      	bhi.n	80089fe <_strtod_l+0x96>
 800898c:	290d      	cmp	r1, #13
 800898e:	d832      	bhi.n	80089f6 <_strtod_l+0x8e>
 8008990:	2908      	cmp	r1, #8
 8008992:	d832      	bhi.n	80089fa <_strtod_l+0x92>
 8008994:	2900      	cmp	r1, #0
 8008996:	d03b      	beq.n	8008a10 <_strtod_l+0xa8>
 8008998:	2200      	movs	r2, #0
 800899a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800899c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800899e:	782a      	ldrb	r2, [r5, #0]
 80089a0:	2a30      	cmp	r2, #48	@ 0x30
 80089a2:	f040 80b3 	bne.w	8008b0c <_strtod_l+0x1a4>
 80089a6:	786a      	ldrb	r2, [r5, #1]
 80089a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80089ac:	2a58      	cmp	r2, #88	@ 0x58
 80089ae:	d16e      	bne.n	8008a8e <_strtod_l+0x126>
 80089b0:	9302      	str	r3, [sp, #8]
 80089b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089b4:	9301      	str	r3, [sp, #4]
 80089b6:	ab1a      	add	r3, sp, #104	@ 0x68
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	4a8e      	ldr	r2, [pc, #568]	@ (8008bf4 <_strtod_l+0x28c>)
 80089bc:	9805      	ldr	r0, [sp, #20]
 80089be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80089c0:	a919      	add	r1, sp, #100	@ 0x64
 80089c2:	f001 faef 	bl	8009fa4 <__gethex>
 80089c6:	f010 060f 	ands.w	r6, r0, #15
 80089ca:	4604      	mov	r4, r0
 80089cc:	d005      	beq.n	80089da <_strtod_l+0x72>
 80089ce:	2e06      	cmp	r6, #6
 80089d0:	d128      	bne.n	8008a24 <_strtod_l+0xbc>
 80089d2:	3501      	adds	r5, #1
 80089d4:	2300      	movs	r3, #0
 80089d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80089d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f040 858e 	bne.w	80094fe <_strtod_l+0xb96>
 80089e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089e4:	b1cb      	cbz	r3, 8008a1a <_strtod_l+0xb2>
 80089e6:	4652      	mov	r2, sl
 80089e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80089ec:	ec43 2b10 	vmov	d0, r2, r3
 80089f0:	b01f      	add	sp, #124	@ 0x7c
 80089f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f6:	2920      	cmp	r1, #32
 80089f8:	d1ce      	bne.n	8008998 <_strtod_l+0x30>
 80089fa:	3201      	adds	r2, #1
 80089fc:	e7c1      	b.n	8008982 <_strtod_l+0x1a>
 80089fe:	292d      	cmp	r1, #45	@ 0x2d
 8008a00:	d1ca      	bne.n	8008998 <_strtod_l+0x30>
 8008a02:	2101      	movs	r1, #1
 8008a04:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008a06:	1c51      	adds	r1, r2, #1
 8008a08:	9119      	str	r1, [sp, #100]	@ 0x64
 8008a0a:	7852      	ldrb	r2, [r2, #1]
 8008a0c:	2a00      	cmp	r2, #0
 8008a0e:	d1c5      	bne.n	800899c <_strtod_l+0x34>
 8008a10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a12:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f040 8570 	bne.w	80094fa <_strtod_l+0xb92>
 8008a1a:	4652      	mov	r2, sl
 8008a1c:	465b      	mov	r3, fp
 8008a1e:	e7e5      	b.n	80089ec <_strtod_l+0x84>
 8008a20:	2100      	movs	r1, #0
 8008a22:	e7ef      	b.n	8008a04 <_strtod_l+0x9c>
 8008a24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008a26:	b13a      	cbz	r2, 8008a38 <_strtod_l+0xd0>
 8008a28:	2135      	movs	r1, #53	@ 0x35
 8008a2a:	a81c      	add	r0, sp, #112	@ 0x70
 8008a2c:	f7ff ff3a 	bl	80088a4 <__copybits>
 8008a30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a32:	9805      	ldr	r0, [sp, #20]
 8008a34:	f7ff fb08 	bl	8008048 <_Bfree>
 8008a38:	3e01      	subs	r6, #1
 8008a3a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008a3c:	2e04      	cmp	r6, #4
 8008a3e:	d806      	bhi.n	8008a4e <_strtod_l+0xe6>
 8008a40:	e8df f006 	tbb	[pc, r6]
 8008a44:	201d0314 	.word	0x201d0314
 8008a48:	14          	.byte	0x14
 8008a49:	00          	.byte	0x00
 8008a4a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008a4e:	05e1      	lsls	r1, r4, #23
 8008a50:	bf48      	it	mi
 8008a52:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008a56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a5a:	0d1b      	lsrs	r3, r3, #20
 8008a5c:	051b      	lsls	r3, r3, #20
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1bb      	bne.n	80089da <_strtod_l+0x72>
 8008a62:	f7fe fb2f 	bl	80070c4 <__errno>
 8008a66:	2322      	movs	r3, #34	@ 0x22
 8008a68:	6003      	str	r3, [r0, #0]
 8008a6a:	e7b6      	b.n	80089da <_strtod_l+0x72>
 8008a6c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008a70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008a74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008a78:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a7c:	e7e7      	b.n	8008a4e <_strtod_l+0xe6>
 8008a7e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008bfc <_strtod_l+0x294>
 8008a82:	e7e4      	b.n	8008a4e <_strtod_l+0xe6>
 8008a84:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008a88:	f04f 3aff 	mov.w	sl, #4294967295
 8008a8c:	e7df      	b.n	8008a4e <_strtod_l+0xe6>
 8008a8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a90:	1c5a      	adds	r2, r3, #1
 8008a92:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a94:	785b      	ldrb	r3, [r3, #1]
 8008a96:	2b30      	cmp	r3, #48	@ 0x30
 8008a98:	d0f9      	beq.n	8008a8e <_strtod_l+0x126>
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d09d      	beq.n	80089da <_strtod_l+0x72>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aa2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008aa4:	930c      	str	r3, [sp, #48]	@ 0x30
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	9308      	str	r3, [sp, #32]
 8008aaa:	930a      	str	r3, [sp, #40]	@ 0x28
 8008aac:	461f      	mov	r7, r3
 8008aae:	220a      	movs	r2, #10
 8008ab0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008ab2:	7805      	ldrb	r5, [r0, #0]
 8008ab4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008ab8:	b2d9      	uxtb	r1, r3
 8008aba:	2909      	cmp	r1, #9
 8008abc:	d928      	bls.n	8008b10 <_strtod_l+0x1a8>
 8008abe:	494e      	ldr	r1, [pc, #312]	@ (8008bf8 <_strtod_l+0x290>)
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f001 f979 	bl	8009db8 <strncmp>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d032      	beq.n	8008b30 <_strtod_l+0x1c8>
 8008aca:	2000      	movs	r0, #0
 8008acc:	462a      	mov	r2, r5
 8008ace:	4681      	mov	r9, r0
 8008ad0:	463d      	mov	r5, r7
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2a65      	cmp	r2, #101	@ 0x65
 8008ad6:	d001      	beq.n	8008adc <_strtod_l+0x174>
 8008ad8:	2a45      	cmp	r2, #69	@ 0x45
 8008ada:	d114      	bne.n	8008b06 <_strtod_l+0x19e>
 8008adc:	b91d      	cbnz	r5, 8008ae6 <_strtod_l+0x17e>
 8008ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ae0:	4302      	orrs	r2, r0
 8008ae2:	d095      	beq.n	8008a10 <_strtod_l+0xa8>
 8008ae4:	2500      	movs	r5, #0
 8008ae6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008ae8:	1c62      	adds	r2, r4, #1
 8008aea:	9219      	str	r2, [sp, #100]	@ 0x64
 8008aec:	7862      	ldrb	r2, [r4, #1]
 8008aee:	2a2b      	cmp	r2, #43	@ 0x2b
 8008af0:	d077      	beq.n	8008be2 <_strtod_l+0x27a>
 8008af2:	2a2d      	cmp	r2, #45	@ 0x2d
 8008af4:	d07b      	beq.n	8008bee <_strtod_l+0x286>
 8008af6:	f04f 0c00 	mov.w	ip, #0
 8008afa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008afe:	2909      	cmp	r1, #9
 8008b00:	f240 8082 	bls.w	8008c08 <_strtod_l+0x2a0>
 8008b04:	9419      	str	r4, [sp, #100]	@ 0x64
 8008b06:	f04f 0800 	mov.w	r8, #0
 8008b0a:	e0a2      	b.n	8008c52 <_strtod_l+0x2ea>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	e7c7      	b.n	8008aa0 <_strtod_l+0x138>
 8008b10:	2f08      	cmp	r7, #8
 8008b12:	bfd5      	itete	le
 8008b14:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008b16:	9908      	ldrgt	r1, [sp, #32]
 8008b18:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b1c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008b20:	f100 0001 	add.w	r0, r0, #1
 8008b24:	bfd4      	ite	le
 8008b26:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008b28:	9308      	strgt	r3, [sp, #32]
 8008b2a:	3701      	adds	r7, #1
 8008b2c:	9019      	str	r0, [sp, #100]	@ 0x64
 8008b2e:	e7bf      	b.n	8008ab0 <_strtod_l+0x148>
 8008b30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b32:	1c5a      	adds	r2, r3, #1
 8008b34:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b36:	785a      	ldrb	r2, [r3, #1]
 8008b38:	b37f      	cbz	r7, 8008b9a <_strtod_l+0x232>
 8008b3a:	4681      	mov	r9, r0
 8008b3c:	463d      	mov	r5, r7
 8008b3e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008b42:	2b09      	cmp	r3, #9
 8008b44:	d912      	bls.n	8008b6c <_strtod_l+0x204>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e7c4      	b.n	8008ad4 <_strtod_l+0x16c>
 8008b4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b4c:	1c5a      	adds	r2, r3, #1
 8008b4e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b50:	785a      	ldrb	r2, [r3, #1]
 8008b52:	3001      	adds	r0, #1
 8008b54:	2a30      	cmp	r2, #48	@ 0x30
 8008b56:	d0f8      	beq.n	8008b4a <_strtod_l+0x1e2>
 8008b58:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008b5c:	2b08      	cmp	r3, #8
 8008b5e:	f200 84d3 	bhi.w	8009508 <_strtod_l+0xba0>
 8008b62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b64:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b66:	4681      	mov	r9, r0
 8008b68:	2000      	movs	r0, #0
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	3a30      	subs	r2, #48	@ 0x30
 8008b6e:	f100 0301 	add.w	r3, r0, #1
 8008b72:	d02a      	beq.n	8008bca <_strtod_l+0x262>
 8008b74:	4499      	add	r9, r3
 8008b76:	eb00 0c05 	add.w	ip, r0, r5
 8008b7a:	462b      	mov	r3, r5
 8008b7c:	210a      	movs	r1, #10
 8008b7e:	4563      	cmp	r3, ip
 8008b80:	d10d      	bne.n	8008b9e <_strtod_l+0x236>
 8008b82:	1c69      	adds	r1, r5, #1
 8008b84:	4401      	add	r1, r0
 8008b86:	4428      	add	r0, r5
 8008b88:	2808      	cmp	r0, #8
 8008b8a:	dc16      	bgt.n	8008bba <_strtod_l+0x252>
 8008b8c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b8e:	230a      	movs	r3, #10
 8008b90:	fb03 2300 	mla	r3, r3, r0, r2
 8008b94:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b96:	2300      	movs	r3, #0
 8008b98:	e018      	b.n	8008bcc <_strtod_l+0x264>
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	e7da      	b.n	8008b54 <_strtod_l+0x1ec>
 8008b9e:	2b08      	cmp	r3, #8
 8008ba0:	f103 0301 	add.w	r3, r3, #1
 8008ba4:	dc03      	bgt.n	8008bae <_strtod_l+0x246>
 8008ba6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008ba8:	434e      	muls	r6, r1
 8008baa:	960a      	str	r6, [sp, #40]	@ 0x28
 8008bac:	e7e7      	b.n	8008b7e <_strtod_l+0x216>
 8008bae:	2b10      	cmp	r3, #16
 8008bb0:	bfde      	ittt	le
 8008bb2:	9e08      	ldrle	r6, [sp, #32]
 8008bb4:	434e      	mulle	r6, r1
 8008bb6:	9608      	strle	r6, [sp, #32]
 8008bb8:	e7e1      	b.n	8008b7e <_strtod_l+0x216>
 8008bba:	280f      	cmp	r0, #15
 8008bbc:	dceb      	bgt.n	8008b96 <_strtod_l+0x22e>
 8008bbe:	9808      	ldr	r0, [sp, #32]
 8008bc0:	230a      	movs	r3, #10
 8008bc2:	fb03 2300 	mla	r3, r3, r0, r2
 8008bc6:	9308      	str	r3, [sp, #32]
 8008bc8:	e7e5      	b.n	8008b96 <_strtod_l+0x22e>
 8008bca:	4629      	mov	r1, r5
 8008bcc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bce:	1c50      	adds	r0, r2, #1
 8008bd0:	9019      	str	r0, [sp, #100]	@ 0x64
 8008bd2:	7852      	ldrb	r2, [r2, #1]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	460d      	mov	r5, r1
 8008bd8:	e7b1      	b.n	8008b3e <_strtod_l+0x1d6>
 8008bda:	f04f 0900 	mov.w	r9, #0
 8008bde:	2301      	movs	r3, #1
 8008be0:	e77d      	b.n	8008ade <_strtod_l+0x176>
 8008be2:	f04f 0c00 	mov.w	ip, #0
 8008be6:	1ca2      	adds	r2, r4, #2
 8008be8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bea:	78a2      	ldrb	r2, [r4, #2]
 8008bec:	e785      	b.n	8008afa <_strtod_l+0x192>
 8008bee:	f04f 0c01 	mov.w	ip, #1
 8008bf2:	e7f8      	b.n	8008be6 <_strtod_l+0x27e>
 8008bf4:	0800b178 	.word	0x0800b178
 8008bf8:	0800b160 	.word	0x0800b160
 8008bfc:	7ff00000 	.word	0x7ff00000
 8008c00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c02:	1c51      	adds	r1, r2, #1
 8008c04:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c06:	7852      	ldrb	r2, [r2, #1]
 8008c08:	2a30      	cmp	r2, #48	@ 0x30
 8008c0a:	d0f9      	beq.n	8008c00 <_strtod_l+0x298>
 8008c0c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008c10:	2908      	cmp	r1, #8
 8008c12:	f63f af78 	bhi.w	8008b06 <_strtod_l+0x19e>
 8008c16:	3a30      	subs	r2, #48	@ 0x30
 8008c18:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c1c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008c1e:	f04f 080a 	mov.w	r8, #10
 8008c22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c24:	1c56      	adds	r6, r2, #1
 8008c26:	9619      	str	r6, [sp, #100]	@ 0x64
 8008c28:	7852      	ldrb	r2, [r2, #1]
 8008c2a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008c2e:	f1be 0f09 	cmp.w	lr, #9
 8008c32:	d939      	bls.n	8008ca8 <_strtod_l+0x340>
 8008c34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008c36:	1a76      	subs	r6, r6, r1
 8008c38:	2e08      	cmp	r6, #8
 8008c3a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008c3e:	dc03      	bgt.n	8008c48 <_strtod_l+0x2e0>
 8008c40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008c42:	4588      	cmp	r8, r1
 8008c44:	bfa8      	it	ge
 8008c46:	4688      	movge	r8, r1
 8008c48:	f1bc 0f00 	cmp.w	ip, #0
 8008c4c:	d001      	beq.n	8008c52 <_strtod_l+0x2ea>
 8008c4e:	f1c8 0800 	rsb	r8, r8, #0
 8008c52:	2d00      	cmp	r5, #0
 8008c54:	d14e      	bne.n	8008cf4 <_strtod_l+0x38c>
 8008c56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c58:	4308      	orrs	r0, r1
 8008c5a:	f47f aebe 	bne.w	80089da <_strtod_l+0x72>
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f47f aed6 	bne.w	8008a10 <_strtod_l+0xa8>
 8008c64:	2a69      	cmp	r2, #105	@ 0x69
 8008c66:	d028      	beq.n	8008cba <_strtod_l+0x352>
 8008c68:	dc25      	bgt.n	8008cb6 <_strtod_l+0x34e>
 8008c6a:	2a49      	cmp	r2, #73	@ 0x49
 8008c6c:	d025      	beq.n	8008cba <_strtod_l+0x352>
 8008c6e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008c70:	f47f aece 	bne.w	8008a10 <_strtod_l+0xa8>
 8008c74:	499b      	ldr	r1, [pc, #620]	@ (8008ee4 <_strtod_l+0x57c>)
 8008c76:	a819      	add	r0, sp, #100	@ 0x64
 8008c78:	f001 fbb6 	bl	800a3e8 <__match>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	f43f aec7 	beq.w	8008a10 <_strtod_l+0xa8>
 8008c82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	2b28      	cmp	r3, #40	@ 0x28
 8008c88:	d12e      	bne.n	8008ce8 <_strtod_l+0x380>
 8008c8a:	4997      	ldr	r1, [pc, #604]	@ (8008ee8 <_strtod_l+0x580>)
 8008c8c:	aa1c      	add	r2, sp, #112	@ 0x70
 8008c8e:	a819      	add	r0, sp, #100	@ 0x64
 8008c90:	f001 fbbe 	bl	800a410 <__hexnan>
 8008c94:	2805      	cmp	r0, #5
 8008c96:	d127      	bne.n	8008ce8 <_strtod_l+0x380>
 8008c98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008c9a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008c9e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008ca2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008ca6:	e698      	b.n	80089da <_strtod_l+0x72>
 8008ca8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008caa:	fb08 2101 	mla	r1, r8, r1, r2
 8008cae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008cb2:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cb4:	e7b5      	b.n	8008c22 <_strtod_l+0x2ba>
 8008cb6:	2a6e      	cmp	r2, #110	@ 0x6e
 8008cb8:	e7da      	b.n	8008c70 <_strtod_l+0x308>
 8008cba:	498c      	ldr	r1, [pc, #560]	@ (8008eec <_strtod_l+0x584>)
 8008cbc:	a819      	add	r0, sp, #100	@ 0x64
 8008cbe:	f001 fb93 	bl	800a3e8 <__match>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	f43f aea4 	beq.w	8008a10 <_strtod_l+0xa8>
 8008cc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cca:	4989      	ldr	r1, [pc, #548]	@ (8008ef0 <_strtod_l+0x588>)
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	a819      	add	r0, sp, #100	@ 0x64
 8008cd0:	9319      	str	r3, [sp, #100]	@ 0x64
 8008cd2:	f001 fb89 	bl	800a3e8 <__match>
 8008cd6:	b910      	cbnz	r0, 8008cde <_strtod_l+0x376>
 8008cd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cda:	3301      	adds	r3, #1
 8008cdc:	9319      	str	r3, [sp, #100]	@ 0x64
 8008cde:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008f00 <_strtod_l+0x598>
 8008ce2:	f04f 0a00 	mov.w	sl, #0
 8008ce6:	e678      	b.n	80089da <_strtod_l+0x72>
 8008ce8:	4882      	ldr	r0, [pc, #520]	@ (8008ef4 <_strtod_l+0x58c>)
 8008cea:	f001 f8b9 	bl	8009e60 <nan>
 8008cee:	ec5b ab10 	vmov	sl, fp, d0
 8008cf2:	e672      	b.n	80089da <_strtod_l+0x72>
 8008cf4:	eba8 0309 	sub.w	r3, r8, r9
 8008cf8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cfc:	2f00      	cmp	r7, #0
 8008cfe:	bf08      	it	eq
 8008d00:	462f      	moveq	r7, r5
 8008d02:	2d10      	cmp	r5, #16
 8008d04:	462c      	mov	r4, r5
 8008d06:	bfa8      	it	ge
 8008d08:	2410      	movge	r4, #16
 8008d0a:	f7f7 fbfb 	bl	8000504 <__aeabi_ui2d>
 8008d0e:	2d09      	cmp	r5, #9
 8008d10:	4682      	mov	sl, r0
 8008d12:	468b      	mov	fp, r1
 8008d14:	dc13      	bgt.n	8008d3e <_strtod_l+0x3d6>
 8008d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f43f ae5e 	beq.w	80089da <_strtod_l+0x72>
 8008d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d20:	dd78      	ble.n	8008e14 <_strtod_l+0x4ac>
 8008d22:	2b16      	cmp	r3, #22
 8008d24:	dc5f      	bgt.n	8008de6 <_strtod_l+0x47e>
 8008d26:	4974      	ldr	r1, [pc, #464]	@ (8008ef8 <_strtod_l+0x590>)
 8008d28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d30:	4652      	mov	r2, sl
 8008d32:	465b      	mov	r3, fp
 8008d34:	f7f7 fc60 	bl	80005f8 <__aeabi_dmul>
 8008d38:	4682      	mov	sl, r0
 8008d3a:	468b      	mov	fp, r1
 8008d3c:	e64d      	b.n	80089da <_strtod_l+0x72>
 8008d3e:	4b6e      	ldr	r3, [pc, #440]	@ (8008ef8 <_strtod_l+0x590>)
 8008d40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d44:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008d48:	f7f7 fc56 	bl	80005f8 <__aeabi_dmul>
 8008d4c:	4682      	mov	sl, r0
 8008d4e:	9808      	ldr	r0, [sp, #32]
 8008d50:	468b      	mov	fp, r1
 8008d52:	f7f7 fbd7 	bl	8000504 <__aeabi_ui2d>
 8008d56:	4602      	mov	r2, r0
 8008d58:	460b      	mov	r3, r1
 8008d5a:	4650      	mov	r0, sl
 8008d5c:	4659      	mov	r1, fp
 8008d5e:	f7f7 fa95 	bl	800028c <__adddf3>
 8008d62:	2d0f      	cmp	r5, #15
 8008d64:	4682      	mov	sl, r0
 8008d66:	468b      	mov	fp, r1
 8008d68:	ddd5      	ble.n	8008d16 <_strtod_l+0x3ae>
 8008d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d6c:	1b2c      	subs	r4, r5, r4
 8008d6e:	441c      	add	r4, r3
 8008d70:	2c00      	cmp	r4, #0
 8008d72:	f340 8096 	ble.w	8008ea2 <_strtod_l+0x53a>
 8008d76:	f014 030f 	ands.w	r3, r4, #15
 8008d7a:	d00a      	beq.n	8008d92 <_strtod_l+0x42a>
 8008d7c:	495e      	ldr	r1, [pc, #376]	@ (8008ef8 <_strtod_l+0x590>)
 8008d7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d82:	4652      	mov	r2, sl
 8008d84:	465b      	mov	r3, fp
 8008d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d8a:	f7f7 fc35 	bl	80005f8 <__aeabi_dmul>
 8008d8e:	4682      	mov	sl, r0
 8008d90:	468b      	mov	fp, r1
 8008d92:	f034 040f 	bics.w	r4, r4, #15
 8008d96:	d073      	beq.n	8008e80 <_strtod_l+0x518>
 8008d98:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008d9c:	dd48      	ble.n	8008e30 <_strtod_l+0x4c8>
 8008d9e:	2400      	movs	r4, #0
 8008da0:	46a0      	mov	r8, r4
 8008da2:	940a      	str	r4, [sp, #40]	@ 0x28
 8008da4:	46a1      	mov	r9, r4
 8008da6:	9a05      	ldr	r2, [sp, #20]
 8008da8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008f00 <_strtod_l+0x598>
 8008dac:	2322      	movs	r3, #34	@ 0x22
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	f04f 0a00 	mov.w	sl, #0
 8008db4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f43f ae0f 	beq.w	80089da <_strtod_l+0x72>
 8008dbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008dbe:	9805      	ldr	r0, [sp, #20]
 8008dc0:	f7ff f942 	bl	8008048 <_Bfree>
 8008dc4:	9805      	ldr	r0, [sp, #20]
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	f7ff f93e 	bl	8008048 <_Bfree>
 8008dcc:	9805      	ldr	r0, [sp, #20]
 8008dce:	4641      	mov	r1, r8
 8008dd0:	f7ff f93a 	bl	8008048 <_Bfree>
 8008dd4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008dd6:	9805      	ldr	r0, [sp, #20]
 8008dd8:	f7ff f936 	bl	8008048 <_Bfree>
 8008ddc:	9805      	ldr	r0, [sp, #20]
 8008dde:	4621      	mov	r1, r4
 8008de0:	f7ff f932 	bl	8008048 <_Bfree>
 8008de4:	e5f9      	b.n	80089da <_strtod_l+0x72>
 8008de6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008de8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008dec:	4293      	cmp	r3, r2
 8008dee:	dbbc      	blt.n	8008d6a <_strtod_l+0x402>
 8008df0:	4c41      	ldr	r4, [pc, #260]	@ (8008ef8 <_strtod_l+0x590>)
 8008df2:	f1c5 050f 	rsb	r5, r5, #15
 8008df6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008dfa:	4652      	mov	r2, sl
 8008dfc:	465b      	mov	r3, fp
 8008dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e02:	f7f7 fbf9 	bl	80005f8 <__aeabi_dmul>
 8008e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e08:	1b5d      	subs	r5, r3, r5
 8008e0a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e0e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e12:	e78f      	b.n	8008d34 <_strtod_l+0x3cc>
 8008e14:	3316      	adds	r3, #22
 8008e16:	dba8      	blt.n	8008d6a <_strtod_l+0x402>
 8008e18:	4b37      	ldr	r3, [pc, #220]	@ (8008ef8 <_strtod_l+0x590>)
 8008e1a:	eba9 0808 	sub.w	r8, r9, r8
 8008e1e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008e22:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008e26:	4650      	mov	r0, sl
 8008e28:	4659      	mov	r1, fp
 8008e2a:	f7f7 fd0f 	bl	800084c <__aeabi_ddiv>
 8008e2e:	e783      	b.n	8008d38 <_strtod_l+0x3d0>
 8008e30:	4b32      	ldr	r3, [pc, #200]	@ (8008efc <_strtod_l+0x594>)
 8008e32:	9308      	str	r3, [sp, #32]
 8008e34:	2300      	movs	r3, #0
 8008e36:	1124      	asrs	r4, r4, #4
 8008e38:	4650      	mov	r0, sl
 8008e3a:	4659      	mov	r1, fp
 8008e3c:	461e      	mov	r6, r3
 8008e3e:	2c01      	cmp	r4, #1
 8008e40:	dc21      	bgt.n	8008e86 <_strtod_l+0x51e>
 8008e42:	b10b      	cbz	r3, 8008e48 <_strtod_l+0x4e0>
 8008e44:	4682      	mov	sl, r0
 8008e46:	468b      	mov	fp, r1
 8008e48:	492c      	ldr	r1, [pc, #176]	@ (8008efc <_strtod_l+0x594>)
 8008e4a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008e4e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008e52:	4652      	mov	r2, sl
 8008e54:	465b      	mov	r3, fp
 8008e56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e5a:	f7f7 fbcd 	bl	80005f8 <__aeabi_dmul>
 8008e5e:	4b28      	ldr	r3, [pc, #160]	@ (8008f00 <_strtod_l+0x598>)
 8008e60:	460a      	mov	r2, r1
 8008e62:	400b      	ands	r3, r1
 8008e64:	4927      	ldr	r1, [pc, #156]	@ (8008f04 <_strtod_l+0x59c>)
 8008e66:	428b      	cmp	r3, r1
 8008e68:	4682      	mov	sl, r0
 8008e6a:	d898      	bhi.n	8008d9e <_strtod_l+0x436>
 8008e6c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008e70:	428b      	cmp	r3, r1
 8008e72:	bf86      	itte	hi
 8008e74:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008f08 <_strtod_l+0x5a0>
 8008e78:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e7c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008e80:	2300      	movs	r3, #0
 8008e82:	9308      	str	r3, [sp, #32]
 8008e84:	e07a      	b.n	8008f7c <_strtod_l+0x614>
 8008e86:	07e2      	lsls	r2, r4, #31
 8008e88:	d505      	bpl.n	8008e96 <_strtod_l+0x52e>
 8008e8a:	9b08      	ldr	r3, [sp, #32]
 8008e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e90:	f7f7 fbb2 	bl	80005f8 <__aeabi_dmul>
 8008e94:	2301      	movs	r3, #1
 8008e96:	9a08      	ldr	r2, [sp, #32]
 8008e98:	3208      	adds	r2, #8
 8008e9a:	3601      	adds	r6, #1
 8008e9c:	1064      	asrs	r4, r4, #1
 8008e9e:	9208      	str	r2, [sp, #32]
 8008ea0:	e7cd      	b.n	8008e3e <_strtod_l+0x4d6>
 8008ea2:	d0ed      	beq.n	8008e80 <_strtod_l+0x518>
 8008ea4:	4264      	negs	r4, r4
 8008ea6:	f014 020f 	ands.w	r2, r4, #15
 8008eaa:	d00a      	beq.n	8008ec2 <_strtod_l+0x55a>
 8008eac:	4b12      	ldr	r3, [pc, #72]	@ (8008ef8 <_strtod_l+0x590>)
 8008eae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eb2:	4650      	mov	r0, sl
 8008eb4:	4659      	mov	r1, fp
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	f7f7 fcc7 	bl	800084c <__aeabi_ddiv>
 8008ebe:	4682      	mov	sl, r0
 8008ec0:	468b      	mov	fp, r1
 8008ec2:	1124      	asrs	r4, r4, #4
 8008ec4:	d0dc      	beq.n	8008e80 <_strtod_l+0x518>
 8008ec6:	2c1f      	cmp	r4, #31
 8008ec8:	dd20      	ble.n	8008f0c <_strtod_l+0x5a4>
 8008eca:	2400      	movs	r4, #0
 8008ecc:	46a0      	mov	r8, r4
 8008ece:	940a      	str	r4, [sp, #40]	@ 0x28
 8008ed0:	46a1      	mov	r9, r4
 8008ed2:	9a05      	ldr	r2, [sp, #20]
 8008ed4:	2322      	movs	r3, #34	@ 0x22
 8008ed6:	f04f 0a00 	mov.w	sl, #0
 8008eda:	f04f 0b00 	mov.w	fp, #0
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	e768      	b.n	8008db4 <_strtod_l+0x44c>
 8008ee2:	bf00      	nop
 8008ee4:	0800af4d 	.word	0x0800af4d
 8008ee8:	0800b164 	.word	0x0800b164
 8008eec:	0800af45 	.word	0x0800af45
 8008ef0:	0800af7c 	.word	0x0800af7c
 8008ef4:	0800b30d 	.word	0x0800b30d
 8008ef8:	0800b098 	.word	0x0800b098
 8008efc:	0800b070 	.word	0x0800b070
 8008f00:	7ff00000 	.word	0x7ff00000
 8008f04:	7ca00000 	.word	0x7ca00000
 8008f08:	7fefffff 	.word	0x7fefffff
 8008f0c:	f014 0310 	ands.w	r3, r4, #16
 8008f10:	bf18      	it	ne
 8008f12:	236a      	movne	r3, #106	@ 0x6a
 8008f14:	4ea9      	ldr	r6, [pc, #676]	@ (80091bc <_strtod_l+0x854>)
 8008f16:	9308      	str	r3, [sp, #32]
 8008f18:	4650      	mov	r0, sl
 8008f1a:	4659      	mov	r1, fp
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	07e2      	lsls	r2, r4, #31
 8008f20:	d504      	bpl.n	8008f2c <_strtod_l+0x5c4>
 8008f22:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f26:	f7f7 fb67 	bl	80005f8 <__aeabi_dmul>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	1064      	asrs	r4, r4, #1
 8008f2e:	f106 0608 	add.w	r6, r6, #8
 8008f32:	d1f4      	bne.n	8008f1e <_strtod_l+0x5b6>
 8008f34:	b10b      	cbz	r3, 8008f3a <_strtod_l+0x5d2>
 8008f36:	4682      	mov	sl, r0
 8008f38:	468b      	mov	fp, r1
 8008f3a:	9b08      	ldr	r3, [sp, #32]
 8008f3c:	b1b3      	cbz	r3, 8008f6c <_strtod_l+0x604>
 8008f3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008f42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	4659      	mov	r1, fp
 8008f4a:	dd0f      	ble.n	8008f6c <_strtod_l+0x604>
 8008f4c:	2b1f      	cmp	r3, #31
 8008f4e:	dd55      	ble.n	8008ffc <_strtod_l+0x694>
 8008f50:	2b34      	cmp	r3, #52	@ 0x34
 8008f52:	bfde      	ittt	le
 8008f54:	f04f 33ff 	movle.w	r3, #4294967295
 8008f58:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008f5c:	4093      	lslle	r3, r2
 8008f5e:	f04f 0a00 	mov.w	sl, #0
 8008f62:	bfcc      	ite	gt
 8008f64:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008f68:	ea03 0b01 	andle.w	fp, r3, r1
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2300      	movs	r3, #0
 8008f70:	4650      	mov	r0, sl
 8008f72:	4659      	mov	r1, fp
 8008f74:	f7f7 fda8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d1a6      	bne.n	8008eca <_strtod_l+0x562>
 8008f7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008f82:	9805      	ldr	r0, [sp, #20]
 8008f84:	462b      	mov	r3, r5
 8008f86:	463a      	mov	r2, r7
 8008f88:	f7ff f8c6 	bl	8008118 <__s2b>
 8008f8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	f43f af05 	beq.w	8008d9e <_strtod_l+0x436>
 8008f94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f96:	2a00      	cmp	r2, #0
 8008f98:	eba9 0308 	sub.w	r3, r9, r8
 8008f9c:	bfa8      	it	ge
 8008f9e:	2300      	movge	r3, #0
 8008fa0:	9312      	str	r3, [sp, #72]	@ 0x48
 8008fa2:	2400      	movs	r4, #0
 8008fa4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008fa8:	9316      	str	r3, [sp, #88]	@ 0x58
 8008faa:	46a0      	mov	r8, r4
 8008fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fae:	9805      	ldr	r0, [sp, #20]
 8008fb0:	6859      	ldr	r1, [r3, #4]
 8008fb2:	f7ff f809 	bl	8007fc8 <_Balloc>
 8008fb6:	4681      	mov	r9, r0
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	f43f aef4 	beq.w	8008da6 <_strtod_l+0x43e>
 8008fbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fc0:	691a      	ldr	r2, [r3, #16]
 8008fc2:	3202      	adds	r2, #2
 8008fc4:	f103 010c 	add.w	r1, r3, #12
 8008fc8:	0092      	lsls	r2, r2, #2
 8008fca:	300c      	adds	r0, #12
 8008fcc:	f000 ff38 	bl	8009e40 <memcpy>
 8008fd0:	ec4b ab10 	vmov	d0, sl, fp
 8008fd4:	9805      	ldr	r0, [sp, #20]
 8008fd6:	aa1c      	add	r2, sp, #112	@ 0x70
 8008fd8:	a91b      	add	r1, sp, #108	@ 0x6c
 8008fda:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008fde:	f7ff fbd7 	bl	8008790 <__d2b>
 8008fe2:	901a      	str	r0, [sp, #104]	@ 0x68
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	f43f aede 	beq.w	8008da6 <_strtod_l+0x43e>
 8008fea:	9805      	ldr	r0, [sp, #20]
 8008fec:	2101      	movs	r1, #1
 8008fee:	f7ff f929 	bl	8008244 <__i2b>
 8008ff2:	4680      	mov	r8, r0
 8008ff4:	b948      	cbnz	r0, 800900a <_strtod_l+0x6a2>
 8008ff6:	f04f 0800 	mov.w	r8, #0
 8008ffa:	e6d4      	b.n	8008da6 <_strtod_l+0x43e>
 8008ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8009000:	fa02 f303 	lsl.w	r3, r2, r3
 8009004:	ea03 0a0a 	and.w	sl, r3, sl
 8009008:	e7b0      	b.n	8008f6c <_strtod_l+0x604>
 800900a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800900c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800900e:	2d00      	cmp	r5, #0
 8009010:	bfab      	itete	ge
 8009012:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009014:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009016:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009018:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800901a:	bfac      	ite	ge
 800901c:	18ef      	addge	r7, r5, r3
 800901e:	1b5e      	sublt	r6, r3, r5
 8009020:	9b08      	ldr	r3, [sp, #32]
 8009022:	1aed      	subs	r5, r5, r3
 8009024:	4415      	add	r5, r2
 8009026:	4b66      	ldr	r3, [pc, #408]	@ (80091c0 <_strtod_l+0x858>)
 8009028:	3d01      	subs	r5, #1
 800902a:	429d      	cmp	r5, r3
 800902c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009030:	da50      	bge.n	80090d4 <_strtod_l+0x76c>
 8009032:	1b5b      	subs	r3, r3, r5
 8009034:	2b1f      	cmp	r3, #31
 8009036:	eba2 0203 	sub.w	r2, r2, r3
 800903a:	f04f 0101 	mov.w	r1, #1
 800903e:	dc3d      	bgt.n	80090bc <_strtod_l+0x754>
 8009040:	fa01 f303 	lsl.w	r3, r1, r3
 8009044:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009046:	2300      	movs	r3, #0
 8009048:	9310      	str	r3, [sp, #64]	@ 0x40
 800904a:	18bd      	adds	r5, r7, r2
 800904c:	9b08      	ldr	r3, [sp, #32]
 800904e:	42af      	cmp	r7, r5
 8009050:	4416      	add	r6, r2
 8009052:	441e      	add	r6, r3
 8009054:	463b      	mov	r3, r7
 8009056:	bfa8      	it	ge
 8009058:	462b      	movge	r3, r5
 800905a:	42b3      	cmp	r3, r6
 800905c:	bfa8      	it	ge
 800905e:	4633      	movge	r3, r6
 8009060:	2b00      	cmp	r3, #0
 8009062:	bfc2      	ittt	gt
 8009064:	1aed      	subgt	r5, r5, r3
 8009066:	1af6      	subgt	r6, r6, r3
 8009068:	1aff      	subgt	r7, r7, r3
 800906a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800906c:	2b00      	cmp	r3, #0
 800906e:	dd16      	ble.n	800909e <_strtod_l+0x736>
 8009070:	4641      	mov	r1, r8
 8009072:	9805      	ldr	r0, [sp, #20]
 8009074:	461a      	mov	r2, r3
 8009076:	f7ff f9a5 	bl	80083c4 <__pow5mult>
 800907a:	4680      	mov	r8, r0
 800907c:	2800      	cmp	r0, #0
 800907e:	d0ba      	beq.n	8008ff6 <_strtod_l+0x68e>
 8009080:	4601      	mov	r1, r0
 8009082:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009084:	9805      	ldr	r0, [sp, #20]
 8009086:	f7ff f8f3 	bl	8008270 <__multiply>
 800908a:	900e      	str	r0, [sp, #56]	@ 0x38
 800908c:	2800      	cmp	r0, #0
 800908e:	f43f ae8a 	beq.w	8008da6 <_strtod_l+0x43e>
 8009092:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009094:	9805      	ldr	r0, [sp, #20]
 8009096:	f7fe ffd7 	bl	8008048 <_Bfree>
 800909a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800909c:	931a      	str	r3, [sp, #104]	@ 0x68
 800909e:	2d00      	cmp	r5, #0
 80090a0:	dc1d      	bgt.n	80090de <_strtod_l+0x776>
 80090a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	dd23      	ble.n	80090f0 <_strtod_l+0x788>
 80090a8:	4649      	mov	r1, r9
 80090aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80090ac:	9805      	ldr	r0, [sp, #20]
 80090ae:	f7ff f989 	bl	80083c4 <__pow5mult>
 80090b2:	4681      	mov	r9, r0
 80090b4:	b9e0      	cbnz	r0, 80090f0 <_strtod_l+0x788>
 80090b6:	f04f 0900 	mov.w	r9, #0
 80090ba:	e674      	b.n	8008da6 <_strtod_l+0x43e>
 80090bc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80090c0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80090c4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80090c8:	35e2      	adds	r5, #226	@ 0xe2
 80090ca:	fa01 f305 	lsl.w	r3, r1, r5
 80090ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80090d0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80090d2:	e7ba      	b.n	800904a <_strtod_l+0x6e2>
 80090d4:	2300      	movs	r3, #0
 80090d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80090d8:	2301      	movs	r3, #1
 80090da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090dc:	e7b5      	b.n	800904a <_strtod_l+0x6e2>
 80090de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090e0:	9805      	ldr	r0, [sp, #20]
 80090e2:	462a      	mov	r2, r5
 80090e4:	f7ff f9c8 	bl	8008478 <__lshift>
 80090e8:	901a      	str	r0, [sp, #104]	@ 0x68
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d1d9      	bne.n	80090a2 <_strtod_l+0x73a>
 80090ee:	e65a      	b.n	8008da6 <_strtod_l+0x43e>
 80090f0:	2e00      	cmp	r6, #0
 80090f2:	dd07      	ble.n	8009104 <_strtod_l+0x79c>
 80090f4:	4649      	mov	r1, r9
 80090f6:	9805      	ldr	r0, [sp, #20]
 80090f8:	4632      	mov	r2, r6
 80090fa:	f7ff f9bd 	bl	8008478 <__lshift>
 80090fe:	4681      	mov	r9, r0
 8009100:	2800      	cmp	r0, #0
 8009102:	d0d8      	beq.n	80090b6 <_strtod_l+0x74e>
 8009104:	2f00      	cmp	r7, #0
 8009106:	dd08      	ble.n	800911a <_strtod_l+0x7b2>
 8009108:	4641      	mov	r1, r8
 800910a:	9805      	ldr	r0, [sp, #20]
 800910c:	463a      	mov	r2, r7
 800910e:	f7ff f9b3 	bl	8008478 <__lshift>
 8009112:	4680      	mov	r8, r0
 8009114:	2800      	cmp	r0, #0
 8009116:	f43f ae46 	beq.w	8008da6 <_strtod_l+0x43e>
 800911a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800911c:	9805      	ldr	r0, [sp, #20]
 800911e:	464a      	mov	r2, r9
 8009120:	f7ff fa32 	bl	8008588 <__mdiff>
 8009124:	4604      	mov	r4, r0
 8009126:	2800      	cmp	r0, #0
 8009128:	f43f ae3d 	beq.w	8008da6 <_strtod_l+0x43e>
 800912c:	68c3      	ldr	r3, [r0, #12]
 800912e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009130:	2300      	movs	r3, #0
 8009132:	60c3      	str	r3, [r0, #12]
 8009134:	4641      	mov	r1, r8
 8009136:	f7ff fa0b 	bl	8008550 <__mcmp>
 800913a:	2800      	cmp	r0, #0
 800913c:	da46      	bge.n	80091cc <_strtod_l+0x864>
 800913e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009140:	ea53 030a 	orrs.w	r3, r3, sl
 8009144:	d16c      	bne.n	8009220 <_strtod_l+0x8b8>
 8009146:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800914a:	2b00      	cmp	r3, #0
 800914c:	d168      	bne.n	8009220 <_strtod_l+0x8b8>
 800914e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009152:	0d1b      	lsrs	r3, r3, #20
 8009154:	051b      	lsls	r3, r3, #20
 8009156:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800915a:	d961      	bls.n	8009220 <_strtod_l+0x8b8>
 800915c:	6963      	ldr	r3, [r4, #20]
 800915e:	b913      	cbnz	r3, 8009166 <_strtod_l+0x7fe>
 8009160:	6923      	ldr	r3, [r4, #16]
 8009162:	2b01      	cmp	r3, #1
 8009164:	dd5c      	ble.n	8009220 <_strtod_l+0x8b8>
 8009166:	4621      	mov	r1, r4
 8009168:	2201      	movs	r2, #1
 800916a:	9805      	ldr	r0, [sp, #20]
 800916c:	f7ff f984 	bl	8008478 <__lshift>
 8009170:	4641      	mov	r1, r8
 8009172:	4604      	mov	r4, r0
 8009174:	f7ff f9ec 	bl	8008550 <__mcmp>
 8009178:	2800      	cmp	r0, #0
 800917a:	dd51      	ble.n	8009220 <_strtod_l+0x8b8>
 800917c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009180:	9a08      	ldr	r2, [sp, #32]
 8009182:	0d1b      	lsrs	r3, r3, #20
 8009184:	051b      	lsls	r3, r3, #20
 8009186:	2a00      	cmp	r2, #0
 8009188:	d06b      	beq.n	8009262 <_strtod_l+0x8fa>
 800918a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800918e:	d868      	bhi.n	8009262 <_strtod_l+0x8fa>
 8009190:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009194:	f67f ae9d 	bls.w	8008ed2 <_strtod_l+0x56a>
 8009198:	4b0a      	ldr	r3, [pc, #40]	@ (80091c4 <_strtod_l+0x85c>)
 800919a:	4650      	mov	r0, sl
 800919c:	4659      	mov	r1, fp
 800919e:	2200      	movs	r2, #0
 80091a0:	f7f7 fa2a 	bl	80005f8 <__aeabi_dmul>
 80091a4:	4b08      	ldr	r3, [pc, #32]	@ (80091c8 <_strtod_l+0x860>)
 80091a6:	400b      	ands	r3, r1
 80091a8:	4682      	mov	sl, r0
 80091aa:	468b      	mov	fp, r1
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f47f ae05 	bne.w	8008dbc <_strtod_l+0x454>
 80091b2:	9a05      	ldr	r2, [sp, #20]
 80091b4:	2322      	movs	r3, #34	@ 0x22
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	e600      	b.n	8008dbc <_strtod_l+0x454>
 80091ba:	bf00      	nop
 80091bc:	0800b190 	.word	0x0800b190
 80091c0:	fffffc02 	.word	0xfffffc02
 80091c4:	39500000 	.word	0x39500000
 80091c8:	7ff00000 	.word	0x7ff00000
 80091cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80091d0:	d165      	bne.n	800929e <_strtod_l+0x936>
 80091d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80091d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091d8:	b35a      	cbz	r2, 8009232 <_strtod_l+0x8ca>
 80091da:	4a9f      	ldr	r2, [pc, #636]	@ (8009458 <_strtod_l+0xaf0>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d12b      	bne.n	8009238 <_strtod_l+0x8d0>
 80091e0:	9b08      	ldr	r3, [sp, #32]
 80091e2:	4651      	mov	r1, sl
 80091e4:	b303      	cbz	r3, 8009228 <_strtod_l+0x8c0>
 80091e6:	4b9d      	ldr	r3, [pc, #628]	@ (800945c <_strtod_l+0xaf4>)
 80091e8:	465a      	mov	r2, fp
 80091ea:	4013      	ands	r3, r2
 80091ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80091f0:	f04f 32ff 	mov.w	r2, #4294967295
 80091f4:	d81b      	bhi.n	800922e <_strtod_l+0x8c6>
 80091f6:	0d1b      	lsrs	r3, r3, #20
 80091f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80091fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009200:	4299      	cmp	r1, r3
 8009202:	d119      	bne.n	8009238 <_strtod_l+0x8d0>
 8009204:	4b96      	ldr	r3, [pc, #600]	@ (8009460 <_strtod_l+0xaf8>)
 8009206:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009208:	429a      	cmp	r2, r3
 800920a:	d102      	bne.n	8009212 <_strtod_l+0x8aa>
 800920c:	3101      	adds	r1, #1
 800920e:	f43f adca 	beq.w	8008da6 <_strtod_l+0x43e>
 8009212:	4b92      	ldr	r3, [pc, #584]	@ (800945c <_strtod_l+0xaf4>)
 8009214:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009216:	401a      	ands	r2, r3
 8009218:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800921c:	f04f 0a00 	mov.w	sl, #0
 8009220:	9b08      	ldr	r3, [sp, #32]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1b8      	bne.n	8009198 <_strtod_l+0x830>
 8009226:	e5c9      	b.n	8008dbc <_strtod_l+0x454>
 8009228:	f04f 33ff 	mov.w	r3, #4294967295
 800922c:	e7e8      	b.n	8009200 <_strtod_l+0x898>
 800922e:	4613      	mov	r3, r2
 8009230:	e7e6      	b.n	8009200 <_strtod_l+0x898>
 8009232:	ea53 030a 	orrs.w	r3, r3, sl
 8009236:	d0a1      	beq.n	800917c <_strtod_l+0x814>
 8009238:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800923a:	b1db      	cbz	r3, 8009274 <_strtod_l+0x90c>
 800923c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800923e:	4213      	tst	r3, r2
 8009240:	d0ee      	beq.n	8009220 <_strtod_l+0x8b8>
 8009242:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009244:	9a08      	ldr	r2, [sp, #32]
 8009246:	4650      	mov	r0, sl
 8009248:	4659      	mov	r1, fp
 800924a:	b1bb      	cbz	r3, 800927c <_strtod_l+0x914>
 800924c:	f7ff fb6e 	bl	800892c <sulp>
 8009250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009254:	ec53 2b10 	vmov	r2, r3, d0
 8009258:	f7f7 f818 	bl	800028c <__adddf3>
 800925c:	4682      	mov	sl, r0
 800925e:	468b      	mov	fp, r1
 8009260:	e7de      	b.n	8009220 <_strtod_l+0x8b8>
 8009262:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009266:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800926a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800926e:	f04f 3aff 	mov.w	sl, #4294967295
 8009272:	e7d5      	b.n	8009220 <_strtod_l+0x8b8>
 8009274:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009276:	ea13 0f0a 	tst.w	r3, sl
 800927a:	e7e1      	b.n	8009240 <_strtod_l+0x8d8>
 800927c:	f7ff fb56 	bl	800892c <sulp>
 8009280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009284:	ec53 2b10 	vmov	r2, r3, d0
 8009288:	f7f6 fffe 	bl	8000288 <__aeabi_dsub>
 800928c:	2200      	movs	r2, #0
 800928e:	2300      	movs	r3, #0
 8009290:	4682      	mov	sl, r0
 8009292:	468b      	mov	fp, r1
 8009294:	f7f7 fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 8009298:	2800      	cmp	r0, #0
 800929a:	d0c1      	beq.n	8009220 <_strtod_l+0x8b8>
 800929c:	e619      	b.n	8008ed2 <_strtod_l+0x56a>
 800929e:	4641      	mov	r1, r8
 80092a0:	4620      	mov	r0, r4
 80092a2:	f7ff facd 	bl	8008840 <__ratio>
 80092a6:	ec57 6b10 	vmov	r6, r7, d0
 80092aa:	2200      	movs	r2, #0
 80092ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80092b0:	4630      	mov	r0, r6
 80092b2:	4639      	mov	r1, r7
 80092b4:	f7f7 fc1c 	bl	8000af0 <__aeabi_dcmple>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d06f      	beq.n	800939c <_strtod_l+0xa34>
 80092bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d17a      	bne.n	80093b8 <_strtod_l+0xa50>
 80092c2:	f1ba 0f00 	cmp.w	sl, #0
 80092c6:	d158      	bne.n	800937a <_strtod_l+0xa12>
 80092c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d15a      	bne.n	8009388 <_strtod_l+0xa20>
 80092d2:	4b64      	ldr	r3, [pc, #400]	@ (8009464 <_strtod_l+0xafc>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	4630      	mov	r0, r6
 80092d8:	4639      	mov	r1, r7
 80092da:	f7f7 fbff 	bl	8000adc <__aeabi_dcmplt>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d159      	bne.n	8009396 <_strtod_l+0xa2e>
 80092e2:	4630      	mov	r0, r6
 80092e4:	4639      	mov	r1, r7
 80092e6:	4b60      	ldr	r3, [pc, #384]	@ (8009468 <_strtod_l+0xb00>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	f7f7 f985 	bl	80005f8 <__aeabi_dmul>
 80092ee:	4606      	mov	r6, r0
 80092f0:	460f      	mov	r7, r1
 80092f2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80092f6:	9606      	str	r6, [sp, #24]
 80092f8:	9307      	str	r3, [sp, #28]
 80092fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092fe:	4d57      	ldr	r5, [pc, #348]	@ (800945c <_strtod_l+0xaf4>)
 8009300:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009304:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009306:	401d      	ands	r5, r3
 8009308:	4b58      	ldr	r3, [pc, #352]	@ (800946c <_strtod_l+0xb04>)
 800930a:	429d      	cmp	r5, r3
 800930c:	f040 80b2 	bne.w	8009474 <_strtod_l+0xb0c>
 8009310:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009312:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009316:	ec4b ab10 	vmov	d0, sl, fp
 800931a:	f7ff f9c9 	bl	80086b0 <__ulp>
 800931e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009322:	ec51 0b10 	vmov	r0, r1, d0
 8009326:	f7f7 f967 	bl	80005f8 <__aeabi_dmul>
 800932a:	4652      	mov	r2, sl
 800932c:	465b      	mov	r3, fp
 800932e:	f7f6 ffad 	bl	800028c <__adddf3>
 8009332:	460b      	mov	r3, r1
 8009334:	4949      	ldr	r1, [pc, #292]	@ (800945c <_strtod_l+0xaf4>)
 8009336:	4a4e      	ldr	r2, [pc, #312]	@ (8009470 <_strtod_l+0xb08>)
 8009338:	4019      	ands	r1, r3
 800933a:	4291      	cmp	r1, r2
 800933c:	4682      	mov	sl, r0
 800933e:	d942      	bls.n	80093c6 <_strtod_l+0xa5e>
 8009340:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009342:	4b47      	ldr	r3, [pc, #284]	@ (8009460 <_strtod_l+0xaf8>)
 8009344:	429a      	cmp	r2, r3
 8009346:	d103      	bne.n	8009350 <_strtod_l+0x9e8>
 8009348:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800934a:	3301      	adds	r3, #1
 800934c:	f43f ad2b 	beq.w	8008da6 <_strtod_l+0x43e>
 8009350:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009460 <_strtod_l+0xaf8>
 8009354:	f04f 3aff 	mov.w	sl, #4294967295
 8009358:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800935a:	9805      	ldr	r0, [sp, #20]
 800935c:	f7fe fe74 	bl	8008048 <_Bfree>
 8009360:	9805      	ldr	r0, [sp, #20]
 8009362:	4649      	mov	r1, r9
 8009364:	f7fe fe70 	bl	8008048 <_Bfree>
 8009368:	9805      	ldr	r0, [sp, #20]
 800936a:	4641      	mov	r1, r8
 800936c:	f7fe fe6c 	bl	8008048 <_Bfree>
 8009370:	9805      	ldr	r0, [sp, #20]
 8009372:	4621      	mov	r1, r4
 8009374:	f7fe fe68 	bl	8008048 <_Bfree>
 8009378:	e618      	b.n	8008fac <_strtod_l+0x644>
 800937a:	f1ba 0f01 	cmp.w	sl, #1
 800937e:	d103      	bne.n	8009388 <_strtod_l+0xa20>
 8009380:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009382:	2b00      	cmp	r3, #0
 8009384:	f43f ada5 	beq.w	8008ed2 <_strtod_l+0x56a>
 8009388:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009438 <_strtod_l+0xad0>
 800938c:	4f35      	ldr	r7, [pc, #212]	@ (8009464 <_strtod_l+0xafc>)
 800938e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009392:	2600      	movs	r6, #0
 8009394:	e7b1      	b.n	80092fa <_strtod_l+0x992>
 8009396:	4f34      	ldr	r7, [pc, #208]	@ (8009468 <_strtod_l+0xb00>)
 8009398:	2600      	movs	r6, #0
 800939a:	e7aa      	b.n	80092f2 <_strtod_l+0x98a>
 800939c:	4b32      	ldr	r3, [pc, #200]	@ (8009468 <_strtod_l+0xb00>)
 800939e:	4630      	mov	r0, r6
 80093a0:	4639      	mov	r1, r7
 80093a2:	2200      	movs	r2, #0
 80093a4:	f7f7 f928 	bl	80005f8 <__aeabi_dmul>
 80093a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093aa:	4606      	mov	r6, r0
 80093ac:	460f      	mov	r7, r1
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d09f      	beq.n	80092f2 <_strtod_l+0x98a>
 80093b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80093b6:	e7a0      	b.n	80092fa <_strtod_l+0x992>
 80093b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009440 <_strtod_l+0xad8>
 80093bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093c0:	ec57 6b17 	vmov	r6, r7, d7
 80093c4:	e799      	b.n	80092fa <_strtod_l+0x992>
 80093c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80093ca:	9b08      	ldr	r3, [sp, #32]
 80093cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1c1      	bne.n	8009358 <_strtod_l+0x9f0>
 80093d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093d8:	0d1b      	lsrs	r3, r3, #20
 80093da:	051b      	lsls	r3, r3, #20
 80093dc:	429d      	cmp	r5, r3
 80093de:	d1bb      	bne.n	8009358 <_strtod_l+0x9f0>
 80093e0:	4630      	mov	r0, r6
 80093e2:	4639      	mov	r1, r7
 80093e4:	f7f7 fc50 	bl	8000c88 <__aeabi_d2lz>
 80093e8:	f7f7 f8d8 	bl	800059c <__aeabi_l2d>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4630      	mov	r0, r6
 80093f2:	4639      	mov	r1, r7
 80093f4:	f7f6 ff48 	bl	8000288 <__aeabi_dsub>
 80093f8:	460b      	mov	r3, r1
 80093fa:	4602      	mov	r2, r0
 80093fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009400:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009406:	ea46 060a 	orr.w	r6, r6, sl
 800940a:	431e      	orrs	r6, r3
 800940c:	d06f      	beq.n	80094ee <_strtod_l+0xb86>
 800940e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009448 <_strtod_l+0xae0>)
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	f7f7 fb62 	bl	8000adc <__aeabi_dcmplt>
 8009418:	2800      	cmp	r0, #0
 800941a:	f47f accf 	bne.w	8008dbc <_strtod_l+0x454>
 800941e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009450 <_strtod_l+0xae8>)
 8009420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009424:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009428:	f7f7 fb76 	bl	8000b18 <__aeabi_dcmpgt>
 800942c:	2800      	cmp	r0, #0
 800942e:	d093      	beq.n	8009358 <_strtod_l+0x9f0>
 8009430:	e4c4      	b.n	8008dbc <_strtod_l+0x454>
 8009432:	bf00      	nop
 8009434:	f3af 8000 	nop.w
 8009438:	00000000 	.word	0x00000000
 800943c:	bff00000 	.word	0xbff00000
 8009440:	00000000 	.word	0x00000000
 8009444:	3ff00000 	.word	0x3ff00000
 8009448:	94a03595 	.word	0x94a03595
 800944c:	3fdfffff 	.word	0x3fdfffff
 8009450:	35afe535 	.word	0x35afe535
 8009454:	3fe00000 	.word	0x3fe00000
 8009458:	000fffff 	.word	0x000fffff
 800945c:	7ff00000 	.word	0x7ff00000
 8009460:	7fefffff 	.word	0x7fefffff
 8009464:	3ff00000 	.word	0x3ff00000
 8009468:	3fe00000 	.word	0x3fe00000
 800946c:	7fe00000 	.word	0x7fe00000
 8009470:	7c9fffff 	.word	0x7c9fffff
 8009474:	9b08      	ldr	r3, [sp, #32]
 8009476:	b323      	cbz	r3, 80094c2 <_strtod_l+0xb5a>
 8009478:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800947c:	d821      	bhi.n	80094c2 <_strtod_l+0xb5a>
 800947e:	a328      	add	r3, pc, #160	@ (adr r3, 8009520 <_strtod_l+0xbb8>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	4630      	mov	r0, r6
 8009486:	4639      	mov	r1, r7
 8009488:	f7f7 fb32 	bl	8000af0 <__aeabi_dcmple>
 800948c:	b1a0      	cbz	r0, 80094b8 <_strtod_l+0xb50>
 800948e:	4639      	mov	r1, r7
 8009490:	4630      	mov	r0, r6
 8009492:	f7f7 fb89 	bl	8000ba8 <__aeabi_d2uiz>
 8009496:	2801      	cmp	r0, #1
 8009498:	bf38      	it	cc
 800949a:	2001      	movcc	r0, #1
 800949c:	f7f7 f832 	bl	8000504 <__aeabi_ui2d>
 80094a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094a2:	4606      	mov	r6, r0
 80094a4:	460f      	mov	r7, r1
 80094a6:	b9fb      	cbnz	r3, 80094e8 <_strtod_l+0xb80>
 80094a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80094ac:	9014      	str	r0, [sp, #80]	@ 0x50
 80094ae:	9315      	str	r3, [sp, #84]	@ 0x54
 80094b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80094b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80094b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80094ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80094be:	1b5b      	subs	r3, r3, r5
 80094c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80094c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80094c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80094ca:	f7ff f8f1 	bl	80086b0 <__ulp>
 80094ce:	4650      	mov	r0, sl
 80094d0:	ec53 2b10 	vmov	r2, r3, d0
 80094d4:	4659      	mov	r1, fp
 80094d6:	f7f7 f88f 	bl	80005f8 <__aeabi_dmul>
 80094da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80094de:	f7f6 fed5 	bl	800028c <__adddf3>
 80094e2:	4682      	mov	sl, r0
 80094e4:	468b      	mov	fp, r1
 80094e6:	e770      	b.n	80093ca <_strtod_l+0xa62>
 80094e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80094ec:	e7e0      	b.n	80094b0 <_strtod_l+0xb48>
 80094ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8009528 <_strtod_l+0xbc0>)
 80094f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f4:	f7f7 faf2 	bl	8000adc <__aeabi_dcmplt>
 80094f8:	e798      	b.n	800942c <_strtod_l+0xac4>
 80094fa:	2300      	movs	r3, #0
 80094fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009500:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009502:	6013      	str	r3, [r2, #0]
 8009504:	f7ff ba6d 	b.w	80089e2 <_strtod_l+0x7a>
 8009508:	2a65      	cmp	r2, #101	@ 0x65
 800950a:	f43f ab66 	beq.w	8008bda <_strtod_l+0x272>
 800950e:	2a45      	cmp	r2, #69	@ 0x45
 8009510:	f43f ab63 	beq.w	8008bda <_strtod_l+0x272>
 8009514:	2301      	movs	r3, #1
 8009516:	f7ff bb9e 	b.w	8008c56 <_strtod_l+0x2ee>
 800951a:	bf00      	nop
 800951c:	f3af 8000 	nop.w
 8009520:	ffc00000 	.word	0xffc00000
 8009524:	41dfffff 	.word	0x41dfffff
 8009528:	94a03595 	.word	0x94a03595
 800952c:	3fcfffff 	.word	0x3fcfffff

08009530 <_strtod_r>:
 8009530:	4b01      	ldr	r3, [pc, #4]	@ (8009538 <_strtod_r+0x8>)
 8009532:	f7ff ba19 	b.w	8008968 <_strtod_l>
 8009536:	bf00      	nop
 8009538:	200000f8 	.word	0x200000f8

0800953c <_strtol_l.constprop.0>:
 800953c:	2b24      	cmp	r3, #36	@ 0x24
 800953e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009542:	4686      	mov	lr, r0
 8009544:	4690      	mov	r8, r2
 8009546:	d801      	bhi.n	800954c <_strtol_l.constprop.0+0x10>
 8009548:	2b01      	cmp	r3, #1
 800954a:	d106      	bne.n	800955a <_strtol_l.constprop.0+0x1e>
 800954c:	f7fd fdba 	bl	80070c4 <__errno>
 8009550:	2316      	movs	r3, #22
 8009552:	6003      	str	r3, [r0, #0]
 8009554:	2000      	movs	r0, #0
 8009556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955a:	4834      	ldr	r0, [pc, #208]	@ (800962c <_strtol_l.constprop.0+0xf0>)
 800955c:	460d      	mov	r5, r1
 800955e:	462a      	mov	r2, r5
 8009560:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009564:	5d06      	ldrb	r6, [r0, r4]
 8009566:	f016 0608 	ands.w	r6, r6, #8
 800956a:	d1f8      	bne.n	800955e <_strtol_l.constprop.0+0x22>
 800956c:	2c2d      	cmp	r4, #45	@ 0x2d
 800956e:	d12d      	bne.n	80095cc <_strtol_l.constprop.0+0x90>
 8009570:	782c      	ldrb	r4, [r5, #0]
 8009572:	2601      	movs	r6, #1
 8009574:	1c95      	adds	r5, r2, #2
 8009576:	f033 0210 	bics.w	r2, r3, #16
 800957a:	d109      	bne.n	8009590 <_strtol_l.constprop.0+0x54>
 800957c:	2c30      	cmp	r4, #48	@ 0x30
 800957e:	d12a      	bne.n	80095d6 <_strtol_l.constprop.0+0x9a>
 8009580:	782a      	ldrb	r2, [r5, #0]
 8009582:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009586:	2a58      	cmp	r2, #88	@ 0x58
 8009588:	d125      	bne.n	80095d6 <_strtol_l.constprop.0+0x9a>
 800958a:	786c      	ldrb	r4, [r5, #1]
 800958c:	2310      	movs	r3, #16
 800958e:	3502      	adds	r5, #2
 8009590:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009594:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009598:	2200      	movs	r2, #0
 800959a:	fbbc f9f3 	udiv	r9, ip, r3
 800959e:	4610      	mov	r0, r2
 80095a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80095a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80095a8:	2f09      	cmp	r7, #9
 80095aa:	d81b      	bhi.n	80095e4 <_strtol_l.constprop.0+0xa8>
 80095ac:	463c      	mov	r4, r7
 80095ae:	42a3      	cmp	r3, r4
 80095b0:	dd27      	ble.n	8009602 <_strtol_l.constprop.0+0xc6>
 80095b2:	1c57      	adds	r7, r2, #1
 80095b4:	d007      	beq.n	80095c6 <_strtol_l.constprop.0+0x8a>
 80095b6:	4581      	cmp	r9, r0
 80095b8:	d320      	bcc.n	80095fc <_strtol_l.constprop.0+0xc0>
 80095ba:	d101      	bne.n	80095c0 <_strtol_l.constprop.0+0x84>
 80095bc:	45a2      	cmp	sl, r4
 80095be:	db1d      	blt.n	80095fc <_strtol_l.constprop.0+0xc0>
 80095c0:	fb00 4003 	mla	r0, r0, r3, r4
 80095c4:	2201      	movs	r2, #1
 80095c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095ca:	e7eb      	b.n	80095a4 <_strtol_l.constprop.0+0x68>
 80095cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80095ce:	bf04      	itt	eq
 80095d0:	782c      	ldrbeq	r4, [r5, #0]
 80095d2:	1c95      	addeq	r5, r2, #2
 80095d4:	e7cf      	b.n	8009576 <_strtol_l.constprop.0+0x3a>
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1da      	bne.n	8009590 <_strtol_l.constprop.0+0x54>
 80095da:	2c30      	cmp	r4, #48	@ 0x30
 80095dc:	bf0c      	ite	eq
 80095de:	2308      	moveq	r3, #8
 80095e0:	230a      	movne	r3, #10
 80095e2:	e7d5      	b.n	8009590 <_strtol_l.constprop.0+0x54>
 80095e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80095e8:	2f19      	cmp	r7, #25
 80095ea:	d801      	bhi.n	80095f0 <_strtol_l.constprop.0+0xb4>
 80095ec:	3c37      	subs	r4, #55	@ 0x37
 80095ee:	e7de      	b.n	80095ae <_strtol_l.constprop.0+0x72>
 80095f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80095f4:	2f19      	cmp	r7, #25
 80095f6:	d804      	bhi.n	8009602 <_strtol_l.constprop.0+0xc6>
 80095f8:	3c57      	subs	r4, #87	@ 0x57
 80095fa:	e7d8      	b.n	80095ae <_strtol_l.constprop.0+0x72>
 80095fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009600:	e7e1      	b.n	80095c6 <_strtol_l.constprop.0+0x8a>
 8009602:	1c53      	adds	r3, r2, #1
 8009604:	d108      	bne.n	8009618 <_strtol_l.constprop.0+0xdc>
 8009606:	2322      	movs	r3, #34	@ 0x22
 8009608:	f8ce 3000 	str.w	r3, [lr]
 800960c:	4660      	mov	r0, ip
 800960e:	f1b8 0f00 	cmp.w	r8, #0
 8009612:	d0a0      	beq.n	8009556 <_strtol_l.constprop.0+0x1a>
 8009614:	1e69      	subs	r1, r5, #1
 8009616:	e006      	b.n	8009626 <_strtol_l.constprop.0+0xea>
 8009618:	b106      	cbz	r6, 800961c <_strtol_l.constprop.0+0xe0>
 800961a:	4240      	negs	r0, r0
 800961c:	f1b8 0f00 	cmp.w	r8, #0
 8009620:	d099      	beq.n	8009556 <_strtol_l.constprop.0+0x1a>
 8009622:	2a00      	cmp	r2, #0
 8009624:	d1f6      	bne.n	8009614 <_strtol_l.constprop.0+0xd8>
 8009626:	f8c8 1000 	str.w	r1, [r8]
 800962a:	e794      	b.n	8009556 <_strtol_l.constprop.0+0x1a>
 800962c:	0800b1b9 	.word	0x0800b1b9

08009630 <_strtol_r>:
 8009630:	f7ff bf84 	b.w	800953c <_strtol_l.constprop.0>

08009634 <__ssputs_r>:
 8009634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009638:	688e      	ldr	r6, [r1, #8]
 800963a:	461f      	mov	r7, r3
 800963c:	42be      	cmp	r6, r7
 800963e:	680b      	ldr	r3, [r1, #0]
 8009640:	4682      	mov	sl, r0
 8009642:	460c      	mov	r4, r1
 8009644:	4690      	mov	r8, r2
 8009646:	d82d      	bhi.n	80096a4 <__ssputs_r+0x70>
 8009648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800964c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009650:	d026      	beq.n	80096a0 <__ssputs_r+0x6c>
 8009652:	6965      	ldr	r5, [r4, #20]
 8009654:	6909      	ldr	r1, [r1, #16]
 8009656:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800965a:	eba3 0901 	sub.w	r9, r3, r1
 800965e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009662:	1c7b      	adds	r3, r7, #1
 8009664:	444b      	add	r3, r9
 8009666:	106d      	asrs	r5, r5, #1
 8009668:	429d      	cmp	r5, r3
 800966a:	bf38      	it	cc
 800966c:	461d      	movcc	r5, r3
 800966e:	0553      	lsls	r3, r2, #21
 8009670:	d527      	bpl.n	80096c2 <__ssputs_r+0x8e>
 8009672:	4629      	mov	r1, r5
 8009674:	f7fe fc1c 	bl	8007eb0 <_malloc_r>
 8009678:	4606      	mov	r6, r0
 800967a:	b360      	cbz	r0, 80096d6 <__ssputs_r+0xa2>
 800967c:	6921      	ldr	r1, [r4, #16]
 800967e:	464a      	mov	r2, r9
 8009680:	f000 fbde 	bl	8009e40 <memcpy>
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800968a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	6126      	str	r6, [r4, #16]
 8009692:	6165      	str	r5, [r4, #20]
 8009694:	444e      	add	r6, r9
 8009696:	eba5 0509 	sub.w	r5, r5, r9
 800969a:	6026      	str	r6, [r4, #0]
 800969c:	60a5      	str	r5, [r4, #8]
 800969e:	463e      	mov	r6, r7
 80096a0:	42be      	cmp	r6, r7
 80096a2:	d900      	bls.n	80096a6 <__ssputs_r+0x72>
 80096a4:	463e      	mov	r6, r7
 80096a6:	6820      	ldr	r0, [r4, #0]
 80096a8:	4632      	mov	r2, r6
 80096aa:	4641      	mov	r1, r8
 80096ac:	f000 fb6a 	bl	8009d84 <memmove>
 80096b0:	68a3      	ldr	r3, [r4, #8]
 80096b2:	1b9b      	subs	r3, r3, r6
 80096b4:	60a3      	str	r3, [r4, #8]
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	4433      	add	r3, r6
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	2000      	movs	r0, #0
 80096be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c2:	462a      	mov	r2, r5
 80096c4:	f000 ff51 	bl	800a56a <_realloc_r>
 80096c8:	4606      	mov	r6, r0
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d1e0      	bne.n	8009690 <__ssputs_r+0x5c>
 80096ce:	6921      	ldr	r1, [r4, #16]
 80096d0:	4650      	mov	r0, sl
 80096d2:	f7fe fb79 	bl	8007dc8 <_free_r>
 80096d6:	230c      	movs	r3, #12
 80096d8:	f8ca 3000 	str.w	r3, [sl]
 80096dc:	89a3      	ldrh	r3, [r4, #12]
 80096de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096e2:	81a3      	strh	r3, [r4, #12]
 80096e4:	f04f 30ff 	mov.w	r0, #4294967295
 80096e8:	e7e9      	b.n	80096be <__ssputs_r+0x8a>
	...

080096ec <_svfiprintf_r>:
 80096ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f0:	4698      	mov	r8, r3
 80096f2:	898b      	ldrh	r3, [r1, #12]
 80096f4:	061b      	lsls	r3, r3, #24
 80096f6:	b09d      	sub	sp, #116	@ 0x74
 80096f8:	4607      	mov	r7, r0
 80096fa:	460d      	mov	r5, r1
 80096fc:	4614      	mov	r4, r2
 80096fe:	d510      	bpl.n	8009722 <_svfiprintf_r+0x36>
 8009700:	690b      	ldr	r3, [r1, #16]
 8009702:	b973      	cbnz	r3, 8009722 <_svfiprintf_r+0x36>
 8009704:	2140      	movs	r1, #64	@ 0x40
 8009706:	f7fe fbd3 	bl	8007eb0 <_malloc_r>
 800970a:	6028      	str	r0, [r5, #0]
 800970c:	6128      	str	r0, [r5, #16]
 800970e:	b930      	cbnz	r0, 800971e <_svfiprintf_r+0x32>
 8009710:	230c      	movs	r3, #12
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	f04f 30ff 	mov.w	r0, #4294967295
 8009718:	b01d      	add	sp, #116	@ 0x74
 800971a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971e:	2340      	movs	r3, #64	@ 0x40
 8009720:	616b      	str	r3, [r5, #20]
 8009722:	2300      	movs	r3, #0
 8009724:	9309      	str	r3, [sp, #36]	@ 0x24
 8009726:	2320      	movs	r3, #32
 8009728:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800972c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009730:	2330      	movs	r3, #48	@ 0x30
 8009732:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80098d0 <_svfiprintf_r+0x1e4>
 8009736:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800973a:	f04f 0901 	mov.w	r9, #1
 800973e:	4623      	mov	r3, r4
 8009740:	469a      	mov	sl, r3
 8009742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009746:	b10a      	cbz	r2, 800974c <_svfiprintf_r+0x60>
 8009748:	2a25      	cmp	r2, #37	@ 0x25
 800974a:	d1f9      	bne.n	8009740 <_svfiprintf_r+0x54>
 800974c:	ebba 0b04 	subs.w	fp, sl, r4
 8009750:	d00b      	beq.n	800976a <_svfiprintf_r+0x7e>
 8009752:	465b      	mov	r3, fp
 8009754:	4622      	mov	r2, r4
 8009756:	4629      	mov	r1, r5
 8009758:	4638      	mov	r0, r7
 800975a:	f7ff ff6b 	bl	8009634 <__ssputs_r>
 800975e:	3001      	adds	r0, #1
 8009760:	f000 80a7 	beq.w	80098b2 <_svfiprintf_r+0x1c6>
 8009764:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009766:	445a      	add	r2, fp
 8009768:	9209      	str	r2, [sp, #36]	@ 0x24
 800976a:	f89a 3000 	ldrb.w	r3, [sl]
 800976e:	2b00      	cmp	r3, #0
 8009770:	f000 809f 	beq.w	80098b2 <_svfiprintf_r+0x1c6>
 8009774:	2300      	movs	r3, #0
 8009776:	f04f 32ff 	mov.w	r2, #4294967295
 800977a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800977e:	f10a 0a01 	add.w	sl, sl, #1
 8009782:	9304      	str	r3, [sp, #16]
 8009784:	9307      	str	r3, [sp, #28]
 8009786:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800978a:	931a      	str	r3, [sp, #104]	@ 0x68
 800978c:	4654      	mov	r4, sl
 800978e:	2205      	movs	r2, #5
 8009790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009794:	484e      	ldr	r0, [pc, #312]	@ (80098d0 <_svfiprintf_r+0x1e4>)
 8009796:	f7f6 fd1b 	bl	80001d0 <memchr>
 800979a:	9a04      	ldr	r2, [sp, #16]
 800979c:	b9d8      	cbnz	r0, 80097d6 <_svfiprintf_r+0xea>
 800979e:	06d0      	lsls	r0, r2, #27
 80097a0:	bf44      	itt	mi
 80097a2:	2320      	movmi	r3, #32
 80097a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097a8:	0711      	lsls	r1, r2, #28
 80097aa:	bf44      	itt	mi
 80097ac:	232b      	movmi	r3, #43	@ 0x2b
 80097ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097b2:	f89a 3000 	ldrb.w	r3, [sl]
 80097b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80097b8:	d015      	beq.n	80097e6 <_svfiprintf_r+0xfa>
 80097ba:	9a07      	ldr	r2, [sp, #28]
 80097bc:	4654      	mov	r4, sl
 80097be:	2000      	movs	r0, #0
 80097c0:	f04f 0c0a 	mov.w	ip, #10
 80097c4:	4621      	mov	r1, r4
 80097c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097ca:	3b30      	subs	r3, #48	@ 0x30
 80097cc:	2b09      	cmp	r3, #9
 80097ce:	d94b      	bls.n	8009868 <_svfiprintf_r+0x17c>
 80097d0:	b1b0      	cbz	r0, 8009800 <_svfiprintf_r+0x114>
 80097d2:	9207      	str	r2, [sp, #28]
 80097d4:	e014      	b.n	8009800 <_svfiprintf_r+0x114>
 80097d6:	eba0 0308 	sub.w	r3, r0, r8
 80097da:	fa09 f303 	lsl.w	r3, r9, r3
 80097de:	4313      	orrs	r3, r2
 80097e0:	9304      	str	r3, [sp, #16]
 80097e2:	46a2      	mov	sl, r4
 80097e4:	e7d2      	b.n	800978c <_svfiprintf_r+0xa0>
 80097e6:	9b03      	ldr	r3, [sp, #12]
 80097e8:	1d19      	adds	r1, r3, #4
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	9103      	str	r1, [sp, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	bfbb      	ittet	lt
 80097f2:	425b      	neglt	r3, r3
 80097f4:	f042 0202 	orrlt.w	r2, r2, #2
 80097f8:	9307      	strge	r3, [sp, #28]
 80097fa:	9307      	strlt	r3, [sp, #28]
 80097fc:	bfb8      	it	lt
 80097fe:	9204      	strlt	r2, [sp, #16]
 8009800:	7823      	ldrb	r3, [r4, #0]
 8009802:	2b2e      	cmp	r3, #46	@ 0x2e
 8009804:	d10a      	bne.n	800981c <_svfiprintf_r+0x130>
 8009806:	7863      	ldrb	r3, [r4, #1]
 8009808:	2b2a      	cmp	r3, #42	@ 0x2a
 800980a:	d132      	bne.n	8009872 <_svfiprintf_r+0x186>
 800980c:	9b03      	ldr	r3, [sp, #12]
 800980e:	1d1a      	adds	r2, r3, #4
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	9203      	str	r2, [sp, #12]
 8009814:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009818:	3402      	adds	r4, #2
 800981a:	9305      	str	r3, [sp, #20]
 800981c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80098e0 <_svfiprintf_r+0x1f4>
 8009820:	7821      	ldrb	r1, [r4, #0]
 8009822:	2203      	movs	r2, #3
 8009824:	4650      	mov	r0, sl
 8009826:	f7f6 fcd3 	bl	80001d0 <memchr>
 800982a:	b138      	cbz	r0, 800983c <_svfiprintf_r+0x150>
 800982c:	9b04      	ldr	r3, [sp, #16]
 800982e:	eba0 000a 	sub.w	r0, r0, sl
 8009832:	2240      	movs	r2, #64	@ 0x40
 8009834:	4082      	lsls	r2, r0
 8009836:	4313      	orrs	r3, r2
 8009838:	3401      	adds	r4, #1
 800983a:	9304      	str	r3, [sp, #16]
 800983c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009840:	4824      	ldr	r0, [pc, #144]	@ (80098d4 <_svfiprintf_r+0x1e8>)
 8009842:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009846:	2206      	movs	r2, #6
 8009848:	f7f6 fcc2 	bl	80001d0 <memchr>
 800984c:	2800      	cmp	r0, #0
 800984e:	d036      	beq.n	80098be <_svfiprintf_r+0x1d2>
 8009850:	4b21      	ldr	r3, [pc, #132]	@ (80098d8 <_svfiprintf_r+0x1ec>)
 8009852:	bb1b      	cbnz	r3, 800989c <_svfiprintf_r+0x1b0>
 8009854:	9b03      	ldr	r3, [sp, #12]
 8009856:	3307      	adds	r3, #7
 8009858:	f023 0307 	bic.w	r3, r3, #7
 800985c:	3308      	adds	r3, #8
 800985e:	9303      	str	r3, [sp, #12]
 8009860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009862:	4433      	add	r3, r6
 8009864:	9309      	str	r3, [sp, #36]	@ 0x24
 8009866:	e76a      	b.n	800973e <_svfiprintf_r+0x52>
 8009868:	fb0c 3202 	mla	r2, ip, r2, r3
 800986c:	460c      	mov	r4, r1
 800986e:	2001      	movs	r0, #1
 8009870:	e7a8      	b.n	80097c4 <_svfiprintf_r+0xd8>
 8009872:	2300      	movs	r3, #0
 8009874:	3401      	adds	r4, #1
 8009876:	9305      	str	r3, [sp, #20]
 8009878:	4619      	mov	r1, r3
 800987a:	f04f 0c0a 	mov.w	ip, #10
 800987e:	4620      	mov	r0, r4
 8009880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009884:	3a30      	subs	r2, #48	@ 0x30
 8009886:	2a09      	cmp	r2, #9
 8009888:	d903      	bls.n	8009892 <_svfiprintf_r+0x1a6>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0c6      	beq.n	800981c <_svfiprintf_r+0x130>
 800988e:	9105      	str	r1, [sp, #20]
 8009890:	e7c4      	b.n	800981c <_svfiprintf_r+0x130>
 8009892:	fb0c 2101 	mla	r1, ip, r1, r2
 8009896:	4604      	mov	r4, r0
 8009898:	2301      	movs	r3, #1
 800989a:	e7f0      	b.n	800987e <_svfiprintf_r+0x192>
 800989c:	ab03      	add	r3, sp, #12
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	462a      	mov	r2, r5
 80098a2:	4b0e      	ldr	r3, [pc, #56]	@ (80098dc <_svfiprintf_r+0x1f0>)
 80098a4:	a904      	add	r1, sp, #16
 80098a6:	4638      	mov	r0, r7
 80098a8:	f7fc fbc4 	bl	8006034 <_printf_float>
 80098ac:	1c42      	adds	r2, r0, #1
 80098ae:	4606      	mov	r6, r0
 80098b0:	d1d6      	bne.n	8009860 <_svfiprintf_r+0x174>
 80098b2:	89ab      	ldrh	r3, [r5, #12]
 80098b4:	065b      	lsls	r3, r3, #25
 80098b6:	f53f af2d 	bmi.w	8009714 <_svfiprintf_r+0x28>
 80098ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098bc:	e72c      	b.n	8009718 <_svfiprintf_r+0x2c>
 80098be:	ab03      	add	r3, sp, #12
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	462a      	mov	r2, r5
 80098c4:	4b05      	ldr	r3, [pc, #20]	@ (80098dc <_svfiprintf_r+0x1f0>)
 80098c6:	a904      	add	r1, sp, #16
 80098c8:	4638      	mov	r0, r7
 80098ca:	f7fc fe4b 	bl	8006564 <_printf_i>
 80098ce:	e7ed      	b.n	80098ac <_svfiprintf_r+0x1c0>
 80098d0:	0800b2b9 	.word	0x0800b2b9
 80098d4:	0800b2c3 	.word	0x0800b2c3
 80098d8:	08006035 	.word	0x08006035
 80098dc:	08009635 	.word	0x08009635
 80098e0:	0800b2bf 	.word	0x0800b2bf

080098e4 <__sfputc_r>:
 80098e4:	6893      	ldr	r3, [r2, #8]
 80098e6:	3b01      	subs	r3, #1
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	b410      	push	{r4}
 80098ec:	6093      	str	r3, [r2, #8]
 80098ee:	da08      	bge.n	8009902 <__sfputc_r+0x1e>
 80098f0:	6994      	ldr	r4, [r2, #24]
 80098f2:	42a3      	cmp	r3, r4
 80098f4:	db01      	blt.n	80098fa <__sfputc_r+0x16>
 80098f6:	290a      	cmp	r1, #10
 80098f8:	d103      	bne.n	8009902 <__sfputc_r+0x1e>
 80098fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098fe:	f7fd bafa 	b.w	8006ef6 <__swbuf_r>
 8009902:	6813      	ldr	r3, [r2, #0]
 8009904:	1c58      	adds	r0, r3, #1
 8009906:	6010      	str	r0, [r2, #0]
 8009908:	7019      	strb	r1, [r3, #0]
 800990a:	4608      	mov	r0, r1
 800990c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009910:	4770      	bx	lr

08009912 <__sfputs_r>:
 8009912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009914:	4606      	mov	r6, r0
 8009916:	460f      	mov	r7, r1
 8009918:	4614      	mov	r4, r2
 800991a:	18d5      	adds	r5, r2, r3
 800991c:	42ac      	cmp	r4, r5
 800991e:	d101      	bne.n	8009924 <__sfputs_r+0x12>
 8009920:	2000      	movs	r0, #0
 8009922:	e007      	b.n	8009934 <__sfputs_r+0x22>
 8009924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009928:	463a      	mov	r2, r7
 800992a:	4630      	mov	r0, r6
 800992c:	f7ff ffda 	bl	80098e4 <__sfputc_r>
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	d1f3      	bne.n	800991c <__sfputs_r+0xa>
 8009934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009938 <_vfiprintf_r>:
 8009938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	460d      	mov	r5, r1
 800993e:	b09d      	sub	sp, #116	@ 0x74
 8009940:	4614      	mov	r4, r2
 8009942:	4698      	mov	r8, r3
 8009944:	4606      	mov	r6, r0
 8009946:	b118      	cbz	r0, 8009950 <_vfiprintf_r+0x18>
 8009948:	6a03      	ldr	r3, [r0, #32]
 800994a:	b90b      	cbnz	r3, 8009950 <_vfiprintf_r+0x18>
 800994c:	f7fd f9ca 	bl	8006ce4 <__sinit>
 8009950:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009952:	07d9      	lsls	r1, r3, #31
 8009954:	d405      	bmi.n	8009962 <_vfiprintf_r+0x2a>
 8009956:	89ab      	ldrh	r3, [r5, #12]
 8009958:	059a      	lsls	r2, r3, #22
 800995a:	d402      	bmi.n	8009962 <_vfiprintf_r+0x2a>
 800995c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800995e:	f7fd fbdc 	bl	800711a <__retarget_lock_acquire_recursive>
 8009962:	89ab      	ldrh	r3, [r5, #12]
 8009964:	071b      	lsls	r3, r3, #28
 8009966:	d501      	bpl.n	800996c <_vfiprintf_r+0x34>
 8009968:	692b      	ldr	r3, [r5, #16]
 800996a:	b99b      	cbnz	r3, 8009994 <_vfiprintf_r+0x5c>
 800996c:	4629      	mov	r1, r5
 800996e:	4630      	mov	r0, r6
 8009970:	f7fd fb00 	bl	8006f74 <__swsetup_r>
 8009974:	b170      	cbz	r0, 8009994 <_vfiprintf_r+0x5c>
 8009976:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009978:	07dc      	lsls	r4, r3, #31
 800997a:	d504      	bpl.n	8009986 <_vfiprintf_r+0x4e>
 800997c:	f04f 30ff 	mov.w	r0, #4294967295
 8009980:	b01d      	add	sp, #116	@ 0x74
 8009982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009986:	89ab      	ldrh	r3, [r5, #12]
 8009988:	0598      	lsls	r0, r3, #22
 800998a:	d4f7      	bmi.n	800997c <_vfiprintf_r+0x44>
 800998c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800998e:	f7fd fbc5 	bl	800711c <__retarget_lock_release_recursive>
 8009992:	e7f3      	b.n	800997c <_vfiprintf_r+0x44>
 8009994:	2300      	movs	r3, #0
 8009996:	9309      	str	r3, [sp, #36]	@ 0x24
 8009998:	2320      	movs	r3, #32
 800999a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800999e:	f8cd 800c 	str.w	r8, [sp, #12]
 80099a2:	2330      	movs	r3, #48	@ 0x30
 80099a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b54 <_vfiprintf_r+0x21c>
 80099a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099ac:	f04f 0901 	mov.w	r9, #1
 80099b0:	4623      	mov	r3, r4
 80099b2:	469a      	mov	sl, r3
 80099b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099b8:	b10a      	cbz	r2, 80099be <_vfiprintf_r+0x86>
 80099ba:	2a25      	cmp	r2, #37	@ 0x25
 80099bc:	d1f9      	bne.n	80099b2 <_vfiprintf_r+0x7a>
 80099be:	ebba 0b04 	subs.w	fp, sl, r4
 80099c2:	d00b      	beq.n	80099dc <_vfiprintf_r+0xa4>
 80099c4:	465b      	mov	r3, fp
 80099c6:	4622      	mov	r2, r4
 80099c8:	4629      	mov	r1, r5
 80099ca:	4630      	mov	r0, r6
 80099cc:	f7ff ffa1 	bl	8009912 <__sfputs_r>
 80099d0:	3001      	adds	r0, #1
 80099d2:	f000 80a7 	beq.w	8009b24 <_vfiprintf_r+0x1ec>
 80099d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099d8:	445a      	add	r2, fp
 80099da:	9209      	str	r2, [sp, #36]	@ 0x24
 80099dc:	f89a 3000 	ldrb.w	r3, [sl]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f000 809f 	beq.w	8009b24 <_vfiprintf_r+0x1ec>
 80099e6:	2300      	movs	r3, #0
 80099e8:	f04f 32ff 	mov.w	r2, #4294967295
 80099ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099f0:	f10a 0a01 	add.w	sl, sl, #1
 80099f4:	9304      	str	r3, [sp, #16]
 80099f6:	9307      	str	r3, [sp, #28]
 80099f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80099fe:	4654      	mov	r4, sl
 8009a00:	2205      	movs	r2, #5
 8009a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a06:	4853      	ldr	r0, [pc, #332]	@ (8009b54 <_vfiprintf_r+0x21c>)
 8009a08:	f7f6 fbe2 	bl	80001d0 <memchr>
 8009a0c:	9a04      	ldr	r2, [sp, #16]
 8009a0e:	b9d8      	cbnz	r0, 8009a48 <_vfiprintf_r+0x110>
 8009a10:	06d1      	lsls	r1, r2, #27
 8009a12:	bf44      	itt	mi
 8009a14:	2320      	movmi	r3, #32
 8009a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a1a:	0713      	lsls	r3, r2, #28
 8009a1c:	bf44      	itt	mi
 8009a1e:	232b      	movmi	r3, #43	@ 0x2b
 8009a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a24:	f89a 3000 	ldrb.w	r3, [sl]
 8009a28:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a2a:	d015      	beq.n	8009a58 <_vfiprintf_r+0x120>
 8009a2c:	9a07      	ldr	r2, [sp, #28]
 8009a2e:	4654      	mov	r4, sl
 8009a30:	2000      	movs	r0, #0
 8009a32:	f04f 0c0a 	mov.w	ip, #10
 8009a36:	4621      	mov	r1, r4
 8009a38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a3c:	3b30      	subs	r3, #48	@ 0x30
 8009a3e:	2b09      	cmp	r3, #9
 8009a40:	d94b      	bls.n	8009ada <_vfiprintf_r+0x1a2>
 8009a42:	b1b0      	cbz	r0, 8009a72 <_vfiprintf_r+0x13a>
 8009a44:	9207      	str	r2, [sp, #28]
 8009a46:	e014      	b.n	8009a72 <_vfiprintf_r+0x13a>
 8009a48:	eba0 0308 	sub.w	r3, r0, r8
 8009a4c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a50:	4313      	orrs	r3, r2
 8009a52:	9304      	str	r3, [sp, #16]
 8009a54:	46a2      	mov	sl, r4
 8009a56:	e7d2      	b.n	80099fe <_vfiprintf_r+0xc6>
 8009a58:	9b03      	ldr	r3, [sp, #12]
 8009a5a:	1d19      	adds	r1, r3, #4
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	9103      	str	r1, [sp, #12]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	bfbb      	ittet	lt
 8009a64:	425b      	neglt	r3, r3
 8009a66:	f042 0202 	orrlt.w	r2, r2, #2
 8009a6a:	9307      	strge	r3, [sp, #28]
 8009a6c:	9307      	strlt	r3, [sp, #28]
 8009a6e:	bfb8      	it	lt
 8009a70:	9204      	strlt	r2, [sp, #16]
 8009a72:	7823      	ldrb	r3, [r4, #0]
 8009a74:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a76:	d10a      	bne.n	8009a8e <_vfiprintf_r+0x156>
 8009a78:	7863      	ldrb	r3, [r4, #1]
 8009a7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a7c:	d132      	bne.n	8009ae4 <_vfiprintf_r+0x1ac>
 8009a7e:	9b03      	ldr	r3, [sp, #12]
 8009a80:	1d1a      	adds	r2, r3, #4
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	9203      	str	r2, [sp, #12]
 8009a86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a8a:	3402      	adds	r4, #2
 8009a8c:	9305      	str	r3, [sp, #20]
 8009a8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b64 <_vfiprintf_r+0x22c>
 8009a92:	7821      	ldrb	r1, [r4, #0]
 8009a94:	2203      	movs	r2, #3
 8009a96:	4650      	mov	r0, sl
 8009a98:	f7f6 fb9a 	bl	80001d0 <memchr>
 8009a9c:	b138      	cbz	r0, 8009aae <_vfiprintf_r+0x176>
 8009a9e:	9b04      	ldr	r3, [sp, #16]
 8009aa0:	eba0 000a 	sub.w	r0, r0, sl
 8009aa4:	2240      	movs	r2, #64	@ 0x40
 8009aa6:	4082      	lsls	r2, r0
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	3401      	adds	r4, #1
 8009aac:	9304      	str	r3, [sp, #16]
 8009aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ab2:	4829      	ldr	r0, [pc, #164]	@ (8009b58 <_vfiprintf_r+0x220>)
 8009ab4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ab8:	2206      	movs	r2, #6
 8009aba:	f7f6 fb89 	bl	80001d0 <memchr>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	d03f      	beq.n	8009b42 <_vfiprintf_r+0x20a>
 8009ac2:	4b26      	ldr	r3, [pc, #152]	@ (8009b5c <_vfiprintf_r+0x224>)
 8009ac4:	bb1b      	cbnz	r3, 8009b0e <_vfiprintf_r+0x1d6>
 8009ac6:	9b03      	ldr	r3, [sp, #12]
 8009ac8:	3307      	adds	r3, #7
 8009aca:	f023 0307 	bic.w	r3, r3, #7
 8009ace:	3308      	adds	r3, #8
 8009ad0:	9303      	str	r3, [sp, #12]
 8009ad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ad4:	443b      	add	r3, r7
 8009ad6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ad8:	e76a      	b.n	80099b0 <_vfiprintf_r+0x78>
 8009ada:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ade:	460c      	mov	r4, r1
 8009ae0:	2001      	movs	r0, #1
 8009ae2:	e7a8      	b.n	8009a36 <_vfiprintf_r+0xfe>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	3401      	adds	r4, #1
 8009ae8:	9305      	str	r3, [sp, #20]
 8009aea:	4619      	mov	r1, r3
 8009aec:	f04f 0c0a 	mov.w	ip, #10
 8009af0:	4620      	mov	r0, r4
 8009af2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009af6:	3a30      	subs	r2, #48	@ 0x30
 8009af8:	2a09      	cmp	r2, #9
 8009afa:	d903      	bls.n	8009b04 <_vfiprintf_r+0x1cc>
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d0c6      	beq.n	8009a8e <_vfiprintf_r+0x156>
 8009b00:	9105      	str	r1, [sp, #20]
 8009b02:	e7c4      	b.n	8009a8e <_vfiprintf_r+0x156>
 8009b04:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b08:	4604      	mov	r4, r0
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e7f0      	b.n	8009af0 <_vfiprintf_r+0x1b8>
 8009b0e:	ab03      	add	r3, sp, #12
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	462a      	mov	r2, r5
 8009b14:	4b12      	ldr	r3, [pc, #72]	@ (8009b60 <_vfiprintf_r+0x228>)
 8009b16:	a904      	add	r1, sp, #16
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f7fc fa8b 	bl	8006034 <_printf_float>
 8009b1e:	4607      	mov	r7, r0
 8009b20:	1c78      	adds	r0, r7, #1
 8009b22:	d1d6      	bne.n	8009ad2 <_vfiprintf_r+0x19a>
 8009b24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b26:	07d9      	lsls	r1, r3, #31
 8009b28:	d405      	bmi.n	8009b36 <_vfiprintf_r+0x1fe>
 8009b2a:	89ab      	ldrh	r3, [r5, #12]
 8009b2c:	059a      	lsls	r2, r3, #22
 8009b2e:	d402      	bmi.n	8009b36 <_vfiprintf_r+0x1fe>
 8009b30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b32:	f7fd faf3 	bl	800711c <__retarget_lock_release_recursive>
 8009b36:	89ab      	ldrh	r3, [r5, #12]
 8009b38:	065b      	lsls	r3, r3, #25
 8009b3a:	f53f af1f 	bmi.w	800997c <_vfiprintf_r+0x44>
 8009b3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b40:	e71e      	b.n	8009980 <_vfiprintf_r+0x48>
 8009b42:	ab03      	add	r3, sp, #12
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	462a      	mov	r2, r5
 8009b48:	4b05      	ldr	r3, [pc, #20]	@ (8009b60 <_vfiprintf_r+0x228>)
 8009b4a:	a904      	add	r1, sp, #16
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f7fc fd09 	bl	8006564 <_printf_i>
 8009b52:	e7e4      	b.n	8009b1e <_vfiprintf_r+0x1e6>
 8009b54:	0800b2b9 	.word	0x0800b2b9
 8009b58:	0800b2c3 	.word	0x0800b2c3
 8009b5c:	08006035 	.word	0x08006035
 8009b60:	08009913 	.word	0x08009913
 8009b64:	0800b2bf 	.word	0x0800b2bf

08009b68 <__sflush_r>:
 8009b68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b70:	0716      	lsls	r6, r2, #28
 8009b72:	4605      	mov	r5, r0
 8009b74:	460c      	mov	r4, r1
 8009b76:	d454      	bmi.n	8009c22 <__sflush_r+0xba>
 8009b78:	684b      	ldr	r3, [r1, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	dc02      	bgt.n	8009b84 <__sflush_r+0x1c>
 8009b7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	dd48      	ble.n	8009c16 <__sflush_r+0xae>
 8009b84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b86:	2e00      	cmp	r6, #0
 8009b88:	d045      	beq.n	8009c16 <__sflush_r+0xae>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009b90:	682f      	ldr	r7, [r5, #0]
 8009b92:	6a21      	ldr	r1, [r4, #32]
 8009b94:	602b      	str	r3, [r5, #0]
 8009b96:	d030      	beq.n	8009bfa <__sflush_r+0x92>
 8009b98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009b9a:	89a3      	ldrh	r3, [r4, #12]
 8009b9c:	0759      	lsls	r1, r3, #29
 8009b9e:	d505      	bpl.n	8009bac <__sflush_r+0x44>
 8009ba0:	6863      	ldr	r3, [r4, #4]
 8009ba2:	1ad2      	subs	r2, r2, r3
 8009ba4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ba6:	b10b      	cbz	r3, 8009bac <__sflush_r+0x44>
 8009ba8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009baa:	1ad2      	subs	r2, r2, r3
 8009bac:	2300      	movs	r3, #0
 8009bae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bb0:	6a21      	ldr	r1, [r4, #32]
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	47b0      	blx	r6
 8009bb6:	1c43      	adds	r3, r0, #1
 8009bb8:	89a3      	ldrh	r3, [r4, #12]
 8009bba:	d106      	bne.n	8009bca <__sflush_r+0x62>
 8009bbc:	6829      	ldr	r1, [r5, #0]
 8009bbe:	291d      	cmp	r1, #29
 8009bc0:	d82b      	bhi.n	8009c1a <__sflush_r+0xb2>
 8009bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8009c6c <__sflush_r+0x104>)
 8009bc4:	410a      	asrs	r2, r1
 8009bc6:	07d6      	lsls	r6, r2, #31
 8009bc8:	d427      	bmi.n	8009c1a <__sflush_r+0xb2>
 8009bca:	2200      	movs	r2, #0
 8009bcc:	6062      	str	r2, [r4, #4]
 8009bce:	04d9      	lsls	r1, r3, #19
 8009bd0:	6922      	ldr	r2, [r4, #16]
 8009bd2:	6022      	str	r2, [r4, #0]
 8009bd4:	d504      	bpl.n	8009be0 <__sflush_r+0x78>
 8009bd6:	1c42      	adds	r2, r0, #1
 8009bd8:	d101      	bne.n	8009bde <__sflush_r+0x76>
 8009bda:	682b      	ldr	r3, [r5, #0]
 8009bdc:	b903      	cbnz	r3, 8009be0 <__sflush_r+0x78>
 8009bde:	6560      	str	r0, [r4, #84]	@ 0x54
 8009be0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009be2:	602f      	str	r7, [r5, #0]
 8009be4:	b1b9      	cbz	r1, 8009c16 <__sflush_r+0xae>
 8009be6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bea:	4299      	cmp	r1, r3
 8009bec:	d002      	beq.n	8009bf4 <__sflush_r+0x8c>
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f7fe f8ea 	bl	8007dc8 <_free_r>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bf8:	e00d      	b.n	8009c16 <__sflush_r+0xae>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	47b0      	blx	r6
 8009c00:	4602      	mov	r2, r0
 8009c02:	1c50      	adds	r0, r2, #1
 8009c04:	d1c9      	bne.n	8009b9a <__sflush_r+0x32>
 8009c06:	682b      	ldr	r3, [r5, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d0c6      	beq.n	8009b9a <__sflush_r+0x32>
 8009c0c:	2b1d      	cmp	r3, #29
 8009c0e:	d001      	beq.n	8009c14 <__sflush_r+0xac>
 8009c10:	2b16      	cmp	r3, #22
 8009c12:	d11e      	bne.n	8009c52 <__sflush_r+0xea>
 8009c14:	602f      	str	r7, [r5, #0]
 8009c16:	2000      	movs	r0, #0
 8009c18:	e022      	b.n	8009c60 <__sflush_r+0xf8>
 8009c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c1e:	b21b      	sxth	r3, r3
 8009c20:	e01b      	b.n	8009c5a <__sflush_r+0xf2>
 8009c22:	690f      	ldr	r7, [r1, #16]
 8009c24:	2f00      	cmp	r7, #0
 8009c26:	d0f6      	beq.n	8009c16 <__sflush_r+0xae>
 8009c28:	0793      	lsls	r3, r2, #30
 8009c2a:	680e      	ldr	r6, [r1, #0]
 8009c2c:	bf08      	it	eq
 8009c2e:	694b      	ldreq	r3, [r1, #20]
 8009c30:	600f      	str	r7, [r1, #0]
 8009c32:	bf18      	it	ne
 8009c34:	2300      	movne	r3, #0
 8009c36:	eba6 0807 	sub.w	r8, r6, r7
 8009c3a:	608b      	str	r3, [r1, #8]
 8009c3c:	f1b8 0f00 	cmp.w	r8, #0
 8009c40:	dde9      	ble.n	8009c16 <__sflush_r+0xae>
 8009c42:	6a21      	ldr	r1, [r4, #32]
 8009c44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009c46:	4643      	mov	r3, r8
 8009c48:	463a      	mov	r2, r7
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	47b0      	blx	r6
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	dc08      	bgt.n	8009c64 <__sflush_r+0xfc>
 8009c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c5a:	81a3      	strh	r3, [r4, #12]
 8009c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c64:	4407      	add	r7, r0
 8009c66:	eba8 0800 	sub.w	r8, r8, r0
 8009c6a:	e7e7      	b.n	8009c3c <__sflush_r+0xd4>
 8009c6c:	dfbffffe 	.word	0xdfbffffe

08009c70 <_fflush_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	690b      	ldr	r3, [r1, #16]
 8009c74:	4605      	mov	r5, r0
 8009c76:	460c      	mov	r4, r1
 8009c78:	b913      	cbnz	r3, 8009c80 <_fflush_r+0x10>
 8009c7a:	2500      	movs	r5, #0
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	b118      	cbz	r0, 8009c8a <_fflush_r+0x1a>
 8009c82:	6a03      	ldr	r3, [r0, #32]
 8009c84:	b90b      	cbnz	r3, 8009c8a <_fflush_r+0x1a>
 8009c86:	f7fd f82d 	bl	8006ce4 <__sinit>
 8009c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0f3      	beq.n	8009c7a <_fflush_r+0xa>
 8009c92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009c94:	07d0      	lsls	r0, r2, #31
 8009c96:	d404      	bmi.n	8009ca2 <_fflush_r+0x32>
 8009c98:	0599      	lsls	r1, r3, #22
 8009c9a:	d402      	bmi.n	8009ca2 <_fflush_r+0x32>
 8009c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c9e:	f7fd fa3c 	bl	800711a <__retarget_lock_acquire_recursive>
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	f7ff ff5f 	bl	8009b68 <__sflush_r>
 8009caa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cac:	07da      	lsls	r2, r3, #31
 8009cae:	4605      	mov	r5, r0
 8009cb0:	d4e4      	bmi.n	8009c7c <_fflush_r+0xc>
 8009cb2:	89a3      	ldrh	r3, [r4, #12]
 8009cb4:	059b      	lsls	r3, r3, #22
 8009cb6:	d4e1      	bmi.n	8009c7c <_fflush_r+0xc>
 8009cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cba:	f7fd fa2f 	bl	800711c <__retarget_lock_release_recursive>
 8009cbe:	e7dd      	b.n	8009c7c <_fflush_r+0xc>

08009cc0 <__swhatbuf_r>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc8:	2900      	cmp	r1, #0
 8009cca:	b096      	sub	sp, #88	@ 0x58
 8009ccc:	4615      	mov	r5, r2
 8009cce:	461e      	mov	r6, r3
 8009cd0:	da0d      	bge.n	8009cee <__swhatbuf_r+0x2e>
 8009cd2:	89a3      	ldrh	r3, [r4, #12]
 8009cd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009cd8:	f04f 0100 	mov.w	r1, #0
 8009cdc:	bf14      	ite	ne
 8009cde:	2340      	movne	r3, #64	@ 0x40
 8009ce0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	6031      	str	r1, [r6, #0]
 8009ce8:	602b      	str	r3, [r5, #0]
 8009cea:	b016      	add	sp, #88	@ 0x58
 8009cec:	bd70      	pop	{r4, r5, r6, pc}
 8009cee:	466a      	mov	r2, sp
 8009cf0:	f000 f874 	bl	8009ddc <_fstat_r>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	dbec      	blt.n	8009cd2 <__swhatbuf_r+0x12>
 8009cf8:	9901      	ldr	r1, [sp, #4]
 8009cfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009cfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d02:	4259      	negs	r1, r3
 8009d04:	4159      	adcs	r1, r3
 8009d06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d0a:	e7eb      	b.n	8009ce4 <__swhatbuf_r+0x24>

08009d0c <__smakebuf_r>:
 8009d0c:	898b      	ldrh	r3, [r1, #12]
 8009d0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d10:	079d      	lsls	r5, r3, #30
 8009d12:	4606      	mov	r6, r0
 8009d14:	460c      	mov	r4, r1
 8009d16:	d507      	bpl.n	8009d28 <__smakebuf_r+0x1c>
 8009d18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	6123      	str	r3, [r4, #16]
 8009d20:	2301      	movs	r3, #1
 8009d22:	6163      	str	r3, [r4, #20]
 8009d24:	b003      	add	sp, #12
 8009d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d28:	ab01      	add	r3, sp, #4
 8009d2a:	466a      	mov	r2, sp
 8009d2c:	f7ff ffc8 	bl	8009cc0 <__swhatbuf_r>
 8009d30:	9f00      	ldr	r7, [sp, #0]
 8009d32:	4605      	mov	r5, r0
 8009d34:	4639      	mov	r1, r7
 8009d36:	4630      	mov	r0, r6
 8009d38:	f7fe f8ba 	bl	8007eb0 <_malloc_r>
 8009d3c:	b948      	cbnz	r0, 8009d52 <__smakebuf_r+0x46>
 8009d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d42:	059a      	lsls	r2, r3, #22
 8009d44:	d4ee      	bmi.n	8009d24 <__smakebuf_r+0x18>
 8009d46:	f023 0303 	bic.w	r3, r3, #3
 8009d4a:	f043 0302 	orr.w	r3, r3, #2
 8009d4e:	81a3      	strh	r3, [r4, #12]
 8009d50:	e7e2      	b.n	8009d18 <__smakebuf_r+0xc>
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	6020      	str	r0, [r4, #0]
 8009d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d5a:	81a3      	strh	r3, [r4, #12]
 8009d5c:	9b01      	ldr	r3, [sp, #4]
 8009d5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d62:	b15b      	cbz	r3, 8009d7c <__smakebuf_r+0x70>
 8009d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d68:	4630      	mov	r0, r6
 8009d6a:	f000 f849 	bl	8009e00 <_isatty_r>
 8009d6e:	b128      	cbz	r0, 8009d7c <__smakebuf_r+0x70>
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	f023 0303 	bic.w	r3, r3, #3
 8009d76:	f043 0301 	orr.w	r3, r3, #1
 8009d7a:	81a3      	strh	r3, [r4, #12]
 8009d7c:	89a3      	ldrh	r3, [r4, #12]
 8009d7e:	431d      	orrs	r5, r3
 8009d80:	81a5      	strh	r5, [r4, #12]
 8009d82:	e7cf      	b.n	8009d24 <__smakebuf_r+0x18>

08009d84 <memmove>:
 8009d84:	4288      	cmp	r0, r1
 8009d86:	b510      	push	{r4, lr}
 8009d88:	eb01 0402 	add.w	r4, r1, r2
 8009d8c:	d902      	bls.n	8009d94 <memmove+0x10>
 8009d8e:	4284      	cmp	r4, r0
 8009d90:	4623      	mov	r3, r4
 8009d92:	d807      	bhi.n	8009da4 <memmove+0x20>
 8009d94:	1e43      	subs	r3, r0, #1
 8009d96:	42a1      	cmp	r1, r4
 8009d98:	d008      	beq.n	8009dac <memmove+0x28>
 8009d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009da2:	e7f8      	b.n	8009d96 <memmove+0x12>
 8009da4:	4402      	add	r2, r0
 8009da6:	4601      	mov	r1, r0
 8009da8:	428a      	cmp	r2, r1
 8009daa:	d100      	bne.n	8009dae <memmove+0x2a>
 8009dac:	bd10      	pop	{r4, pc}
 8009dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009db2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009db6:	e7f7      	b.n	8009da8 <memmove+0x24>

08009db8 <strncmp>:
 8009db8:	b510      	push	{r4, lr}
 8009dba:	b16a      	cbz	r2, 8009dd8 <strncmp+0x20>
 8009dbc:	3901      	subs	r1, #1
 8009dbe:	1884      	adds	r4, r0, r2
 8009dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dc4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d103      	bne.n	8009dd4 <strncmp+0x1c>
 8009dcc:	42a0      	cmp	r0, r4
 8009dce:	d001      	beq.n	8009dd4 <strncmp+0x1c>
 8009dd0:	2a00      	cmp	r2, #0
 8009dd2:	d1f5      	bne.n	8009dc0 <strncmp+0x8>
 8009dd4:	1ad0      	subs	r0, r2, r3
 8009dd6:	bd10      	pop	{r4, pc}
 8009dd8:	4610      	mov	r0, r2
 8009dda:	e7fc      	b.n	8009dd6 <strncmp+0x1e>

08009ddc <_fstat_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	4d07      	ldr	r5, [pc, #28]	@ (8009dfc <_fstat_r+0x20>)
 8009de0:	2300      	movs	r3, #0
 8009de2:	4604      	mov	r4, r0
 8009de4:	4608      	mov	r0, r1
 8009de6:	4611      	mov	r1, r2
 8009de8:	602b      	str	r3, [r5, #0]
 8009dea:	f7f7 ff33 	bl	8001c54 <_fstat>
 8009dee:	1c43      	adds	r3, r0, #1
 8009df0:	d102      	bne.n	8009df8 <_fstat_r+0x1c>
 8009df2:	682b      	ldr	r3, [r5, #0]
 8009df4:	b103      	cbz	r3, 8009df8 <_fstat_r+0x1c>
 8009df6:	6023      	str	r3, [r4, #0]
 8009df8:	bd38      	pop	{r3, r4, r5, pc}
 8009dfa:	bf00      	nop
 8009dfc:	200005a4 	.word	0x200005a4

08009e00 <_isatty_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	4d06      	ldr	r5, [pc, #24]	@ (8009e1c <_isatty_r+0x1c>)
 8009e04:	2300      	movs	r3, #0
 8009e06:	4604      	mov	r4, r0
 8009e08:	4608      	mov	r0, r1
 8009e0a:	602b      	str	r3, [r5, #0]
 8009e0c:	f7f7 ff32 	bl	8001c74 <_isatty>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d102      	bne.n	8009e1a <_isatty_r+0x1a>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	b103      	cbz	r3, 8009e1a <_isatty_r+0x1a>
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	200005a4 	.word	0x200005a4

08009e20 <_sbrk_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	4d06      	ldr	r5, [pc, #24]	@ (8009e3c <_sbrk_r+0x1c>)
 8009e24:	2300      	movs	r3, #0
 8009e26:	4604      	mov	r4, r0
 8009e28:	4608      	mov	r0, r1
 8009e2a:	602b      	str	r3, [r5, #0]
 8009e2c:	f7f7 ff3a 	bl	8001ca4 <_sbrk>
 8009e30:	1c43      	adds	r3, r0, #1
 8009e32:	d102      	bne.n	8009e3a <_sbrk_r+0x1a>
 8009e34:	682b      	ldr	r3, [r5, #0]
 8009e36:	b103      	cbz	r3, 8009e3a <_sbrk_r+0x1a>
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}
 8009e3c:	200005a4 	.word	0x200005a4

08009e40 <memcpy>:
 8009e40:	440a      	add	r2, r1
 8009e42:	4291      	cmp	r1, r2
 8009e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e48:	d100      	bne.n	8009e4c <memcpy+0xc>
 8009e4a:	4770      	bx	lr
 8009e4c:	b510      	push	{r4, lr}
 8009e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e56:	4291      	cmp	r1, r2
 8009e58:	d1f9      	bne.n	8009e4e <memcpy+0xe>
 8009e5a:	bd10      	pop	{r4, pc}
 8009e5c:	0000      	movs	r0, r0
	...

08009e60 <nan>:
 8009e60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009e68 <nan+0x8>
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	00000000 	.word	0x00000000
 8009e6c:	7ff80000 	.word	0x7ff80000

08009e70 <__assert_func>:
 8009e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e72:	4614      	mov	r4, r2
 8009e74:	461a      	mov	r2, r3
 8009e76:	4b09      	ldr	r3, [pc, #36]	@ (8009e9c <__assert_func+0x2c>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4605      	mov	r5, r0
 8009e7c:	68d8      	ldr	r0, [r3, #12]
 8009e7e:	b954      	cbnz	r4, 8009e96 <__assert_func+0x26>
 8009e80:	4b07      	ldr	r3, [pc, #28]	@ (8009ea0 <__assert_func+0x30>)
 8009e82:	461c      	mov	r4, r3
 8009e84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e88:	9100      	str	r1, [sp, #0]
 8009e8a:	462b      	mov	r3, r5
 8009e8c:	4905      	ldr	r1, [pc, #20]	@ (8009ea4 <__assert_func+0x34>)
 8009e8e:	f000 fba7 	bl	800a5e0 <fiprintf>
 8009e92:	f000 fbb7 	bl	800a604 <abort>
 8009e96:	4b04      	ldr	r3, [pc, #16]	@ (8009ea8 <__assert_func+0x38>)
 8009e98:	e7f4      	b.n	8009e84 <__assert_func+0x14>
 8009e9a:	bf00      	nop
 8009e9c:	200000a8 	.word	0x200000a8
 8009ea0:	0800b30d 	.word	0x0800b30d
 8009ea4:	0800b2df 	.word	0x0800b2df
 8009ea8:	0800b2d2 	.word	0x0800b2d2

08009eac <_calloc_r>:
 8009eac:	b570      	push	{r4, r5, r6, lr}
 8009eae:	fba1 5402 	umull	r5, r4, r1, r2
 8009eb2:	b93c      	cbnz	r4, 8009ec4 <_calloc_r+0x18>
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	f7fd fffb 	bl	8007eb0 <_malloc_r>
 8009eba:	4606      	mov	r6, r0
 8009ebc:	b928      	cbnz	r0, 8009eca <_calloc_r+0x1e>
 8009ebe:	2600      	movs	r6, #0
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	bd70      	pop	{r4, r5, r6, pc}
 8009ec4:	220c      	movs	r2, #12
 8009ec6:	6002      	str	r2, [r0, #0]
 8009ec8:	e7f9      	b.n	8009ebe <_calloc_r+0x12>
 8009eca:	462a      	mov	r2, r5
 8009ecc:	4621      	mov	r1, r4
 8009ece:	f7fd f8a7 	bl	8007020 <memset>
 8009ed2:	e7f5      	b.n	8009ec0 <_calloc_r+0x14>

08009ed4 <rshift>:
 8009ed4:	6903      	ldr	r3, [r0, #16]
 8009ed6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009eda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ede:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ee2:	f100 0414 	add.w	r4, r0, #20
 8009ee6:	dd45      	ble.n	8009f74 <rshift+0xa0>
 8009ee8:	f011 011f 	ands.w	r1, r1, #31
 8009eec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ef0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ef4:	d10c      	bne.n	8009f10 <rshift+0x3c>
 8009ef6:	f100 0710 	add.w	r7, r0, #16
 8009efa:	4629      	mov	r1, r5
 8009efc:	42b1      	cmp	r1, r6
 8009efe:	d334      	bcc.n	8009f6a <rshift+0x96>
 8009f00:	1a9b      	subs	r3, r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	1eea      	subs	r2, r5, #3
 8009f06:	4296      	cmp	r6, r2
 8009f08:	bf38      	it	cc
 8009f0a:	2300      	movcc	r3, #0
 8009f0c:	4423      	add	r3, r4
 8009f0e:	e015      	b.n	8009f3c <rshift+0x68>
 8009f10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f14:	f1c1 0820 	rsb	r8, r1, #32
 8009f18:	40cf      	lsrs	r7, r1
 8009f1a:	f105 0e04 	add.w	lr, r5, #4
 8009f1e:	46a1      	mov	r9, r4
 8009f20:	4576      	cmp	r6, lr
 8009f22:	46f4      	mov	ip, lr
 8009f24:	d815      	bhi.n	8009f52 <rshift+0x7e>
 8009f26:	1a9a      	subs	r2, r3, r2
 8009f28:	0092      	lsls	r2, r2, #2
 8009f2a:	3a04      	subs	r2, #4
 8009f2c:	3501      	adds	r5, #1
 8009f2e:	42ae      	cmp	r6, r5
 8009f30:	bf38      	it	cc
 8009f32:	2200      	movcc	r2, #0
 8009f34:	18a3      	adds	r3, r4, r2
 8009f36:	50a7      	str	r7, [r4, r2]
 8009f38:	b107      	cbz	r7, 8009f3c <rshift+0x68>
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	1b1a      	subs	r2, r3, r4
 8009f3e:	42a3      	cmp	r3, r4
 8009f40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f44:	bf08      	it	eq
 8009f46:	2300      	moveq	r3, #0
 8009f48:	6102      	str	r2, [r0, #16]
 8009f4a:	bf08      	it	eq
 8009f4c:	6143      	streq	r3, [r0, #20]
 8009f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f52:	f8dc c000 	ldr.w	ip, [ip]
 8009f56:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f5a:	ea4c 0707 	orr.w	r7, ip, r7
 8009f5e:	f849 7b04 	str.w	r7, [r9], #4
 8009f62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f66:	40cf      	lsrs	r7, r1
 8009f68:	e7da      	b.n	8009f20 <rshift+0x4c>
 8009f6a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f6e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f72:	e7c3      	b.n	8009efc <rshift+0x28>
 8009f74:	4623      	mov	r3, r4
 8009f76:	e7e1      	b.n	8009f3c <rshift+0x68>

08009f78 <__hexdig_fun>:
 8009f78:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009f7c:	2b09      	cmp	r3, #9
 8009f7e:	d802      	bhi.n	8009f86 <__hexdig_fun+0xe>
 8009f80:	3820      	subs	r0, #32
 8009f82:	b2c0      	uxtb	r0, r0
 8009f84:	4770      	bx	lr
 8009f86:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009f8a:	2b05      	cmp	r3, #5
 8009f8c:	d801      	bhi.n	8009f92 <__hexdig_fun+0x1a>
 8009f8e:	3847      	subs	r0, #71	@ 0x47
 8009f90:	e7f7      	b.n	8009f82 <__hexdig_fun+0xa>
 8009f92:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009f96:	2b05      	cmp	r3, #5
 8009f98:	d801      	bhi.n	8009f9e <__hexdig_fun+0x26>
 8009f9a:	3827      	subs	r0, #39	@ 0x27
 8009f9c:	e7f1      	b.n	8009f82 <__hexdig_fun+0xa>
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	4770      	bx	lr
	...

08009fa4 <__gethex>:
 8009fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	b085      	sub	sp, #20
 8009faa:	468a      	mov	sl, r1
 8009fac:	9302      	str	r3, [sp, #8]
 8009fae:	680b      	ldr	r3, [r1, #0]
 8009fb0:	9001      	str	r0, [sp, #4]
 8009fb2:	4690      	mov	r8, r2
 8009fb4:	1c9c      	adds	r4, r3, #2
 8009fb6:	46a1      	mov	r9, r4
 8009fb8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009fbc:	2830      	cmp	r0, #48	@ 0x30
 8009fbe:	d0fa      	beq.n	8009fb6 <__gethex+0x12>
 8009fc0:	eba9 0303 	sub.w	r3, r9, r3
 8009fc4:	f1a3 0b02 	sub.w	fp, r3, #2
 8009fc8:	f7ff ffd6 	bl	8009f78 <__hexdig_fun>
 8009fcc:	4605      	mov	r5, r0
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d168      	bne.n	800a0a4 <__gethex+0x100>
 8009fd2:	49a0      	ldr	r1, [pc, #640]	@ (800a254 <__gethex+0x2b0>)
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	4648      	mov	r0, r9
 8009fd8:	f7ff feee 	bl	8009db8 <strncmp>
 8009fdc:	4607      	mov	r7, r0
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d167      	bne.n	800a0b2 <__gethex+0x10e>
 8009fe2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009fe6:	4626      	mov	r6, r4
 8009fe8:	f7ff ffc6 	bl	8009f78 <__hexdig_fun>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d062      	beq.n	800a0b6 <__gethex+0x112>
 8009ff0:	4623      	mov	r3, r4
 8009ff2:	7818      	ldrb	r0, [r3, #0]
 8009ff4:	2830      	cmp	r0, #48	@ 0x30
 8009ff6:	4699      	mov	r9, r3
 8009ff8:	f103 0301 	add.w	r3, r3, #1
 8009ffc:	d0f9      	beq.n	8009ff2 <__gethex+0x4e>
 8009ffe:	f7ff ffbb 	bl	8009f78 <__hexdig_fun>
 800a002:	fab0 f580 	clz	r5, r0
 800a006:	096d      	lsrs	r5, r5, #5
 800a008:	f04f 0b01 	mov.w	fp, #1
 800a00c:	464a      	mov	r2, r9
 800a00e:	4616      	mov	r6, r2
 800a010:	3201      	adds	r2, #1
 800a012:	7830      	ldrb	r0, [r6, #0]
 800a014:	f7ff ffb0 	bl	8009f78 <__hexdig_fun>
 800a018:	2800      	cmp	r0, #0
 800a01a:	d1f8      	bne.n	800a00e <__gethex+0x6a>
 800a01c:	498d      	ldr	r1, [pc, #564]	@ (800a254 <__gethex+0x2b0>)
 800a01e:	2201      	movs	r2, #1
 800a020:	4630      	mov	r0, r6
 800a022:	f7ff fec9 	bl	8009db8 <strncmp>
 800a026:	2800      	cmp	r0, #0
 800a028:	d13f      	bne.n	800a0aa <__gethex+0x106>
 800a02a:	b944      	cbnz	r4, 800a03e <__gethex+0x9a>
 800a02c:	1c74      	adds	r4, r6, #1
 800a02e:	4622      	mov	r2, r4
 800a030:	4616      	mov	r6, r2
 800a032:	3201      	adds	r2, #1
 800a034:	7830      	ldrb	r0, [r6, #0]
 800a036:	f7ff ff9f 	bl	8009f78 <__hexdig_fun>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d1f8      	bne.n	800a030 <__gethex+0x8c>
 800a03e:	1ba4      	subs	r4, r4, r6
 800a040:	00a7      	lsls	r7, r4, #2
 800a042:	7833      	ldrb	r3, [r6, #0]
 800a044:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a048:	2b50      	cmp	r3, #80	@ 0x50
 800a04a:	d13e      	bne.n	800a0ca <__gethex+0x126>
 800a04c:	7873      	ldrb	r3, [r6, #1]
 800a04e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a050:	d033      	beq.n	800a0ba <__gethex+0x116>
 800a052:	2b2d      	cmp	r3, #45	@ 0x2d
 800a054:	d034      	beq.n	800a0c0 <__gethex+0x11c>
 800a056:	1c71      	adds	r1, r6, #1
 800a058:	2400      	movs	r4, #0
 800a05a:	7808      	ldrb	r0, [r1, #0]
 800a05c:	f7ff ff8c 	bl	8009f78 <__hexdig_fun>
 800a060:	1e43      	subs	r3, r0, #1
 800a062:	b2db      	uxtb	r3, r3
 800a064:	2b18      	cmp	r3, #24
 800a066:	d830      	bhi.n	800a0ca <__gethex+0x126>
 800a068:	f1a0 0210 	sub.w	r2, r0, #16
 800a06c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a070:	f7ff ff82 	bl	8009f78 <__hexdig_fun>
 800a074:	f100 3cff 	add.w	ip, r0, #4294967295
 800a078:	fa5f fc8c 	uxtb.w	ip, ip
 800a07c:	f1bc 0f18 	cmp.w	ip, #24
 800a080:	f04f 030a 	mov.w	r3, #10
 800a084:	d91e      	bls.n	800a0c4 <__gethex+0x120>
 800a086:	b104      	cbz	r4, 800a08a <__gethex+0xe6>
 800a088:	4252      	negs	r2, r2
 800a08a:	4417      	add	r7, r2
 800a08c:	f8ca 1000 	str.w	r1, [sl]
 800a090:	b1ed      	cbz	r5, 800a0ce <__gethex+0x12a>
 800a092:	f1bb 0f00 	cmp.w	fp, #0
 800a096:	bf0c      	ite	eq
 800a098:	2506      	moveq	r5, #6
 800a09a:	2500      	movne	r5, #0
 800a09c:	4628      	mov	r0, r5
 800a09e:	b005      	add	sp, #20
 800a0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a4:	2500      	movs	r5, #0
 800a0a6:	462c      	mov	r4, r5
 800a0a8:	e7b0      	b.n	800a00c <__gethex+0x68>
 800a0aa:	2c00      	cmp	r4, #0
 800a0ac:	d1c7      	bne.n	800a03e <__gethex+0x9a>
 800a0ae:	4627      	mov	r7, r4
 800a0b0:	e7c7      	b.n	800a042 <__gethex+0x9e>
 800a0b2:	464e      	mov	r6, r9
 800a0b4:	462f      	mov	r7, r5
 800a0b6:	2501      	movs	r5, #1
 800a0b8:	e7c3      	b.n	800a042 <__gethex+0x9e>
 800a0ba:	2400      	movs	r4, #0
 800a0bc:	1cb1      	adds	r1, r6, #2
 800a0be:	e7cc      	b.n	800a05a <__gethex+0xb6>
 800a0c0:	2401      	movs	r4, #1
 800a0c2:	e7fb      	b.n	800a0bc <__gethex+0x118>
 800a0c4:	fb03 0002 	mla	r0, r3, r2, r0
 800a0c8:	e7ce      	b.n	800a068 <__gethex+0xc4>
 800a0ca:	4631      	mov	r1, r6
 800a0cc:	e7de      	b.n	800a08c <__gethex+0xe8>
 800a0ce:	eba6 0309 	sub.w	r3, r6, r9
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	4629      	mov	r1, r5
 800a0d6:	2b07      	cmp	r3, #7
 800a0d8:	dc0a      	bgt.n	800a0f0 <__gethex+0x14c>
 800a0da:	9801      	ldr	r0, [sp, #4]
 800a0dc:	f7fd ff74 	bl	8007fc8 <_Balloc>
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	b940      	cbnz	r0, 800a0f6 <__gethex+0x152>
 800a0e4:	4b5c      	ldr	r3, [pc, #368]	@ (800a258 <__gethex+0x2b4>)
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	21e4      	movs	r1, #228	@ 0xe4
 800a0ea:	485c      	ldr	r0, [pc, #368]	@ (800a25c <__gethex+0x2b8>)
 800a0ec:	f7ff fec0 	bl	8009e70 <__assert_func>
 800a0f0:	3101      	adds	r1, #1
 800a0f2:	105b      	asrs	r3, r3, #1
 800a0f4:	e7ef      	b.n	800a0d6 <__gethex+0x132>
 800a0f6:	f100 0a14 	add.w	sl, r0, #20
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	4655      	mov	r5, sl
 800a0fe:	469b      	mov	fp, r3
 800a100:	45b1      	cmp	r9, r6
 800a102:	d337      	bcc.n	800a174 <__gethex+0x1d0>
 800a104:	f845 bb04 	str.w	fp, [r5], #4
 800a108:	eba5 050a 	sub.w	r5, r5, sl
 800a10c:	10ad      	asrs	r5, r5, #2
 800a10e:	6125      	str	r5, [r4, #16]
 800a110:	4658      	mov	r0, fp
 800a112:	f7fe f84b 	bl	80081ac <__hi0bits>
 800a116:	016d      	lsls	r5, r5, #5
 800a118:	f8d8 6000 	ldr.w	r6, [r8]
 800a11c:	1a2d      	subs	r5, r5, r0
 800a11e:	42b5      	cmp	r5, r6
 800a120:	dd54      	ble.n	800a1cc <__gethex+0x228>
 800a122:	1bad      	subs	r5, r5, r6
 800a124:	4629      	mov	r1, r5
 800a126:	4620      	mov	r0, r4
 800a128:	f7fe fbdf 	bl	80088ea <__any_on>
 800a12c:	4681      	mov	r9, r0
 800a12e:	b178      	cbz	r0, 800a150 <__gethex+0x1ac>
 800a130:	1e6b      	subs	r3, r5, #1
 800a132:	1159      	asrs	r1, r3, #5
 800a134:	f003 021f 	and.w	r2, r3, #31
 800a138:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a13c:	f04f 0901 	mov.w	r9, #1
 800a140:	fa09 f202 	lsl.w	r2, r9, r2
 800a144:	420a      	tst	r2, r1
 800a146:	d003      	beq.n	800a150 <__gethex+0x1ac>
 800a148:	454b      	cmp	r3, r9
 800a14a:	dc36      	bgt.n	800a1ba <__gethex+0x216>
 800a14c:	f04f 0902 	mov.w	r9, #2
 800a150:	4629      	mov	r1, r5
 800a152:	4620      	mov	r0, r4
 800a154:	f7ff febe 	bl	8009ed4 <rshift>
 800a158:	442f      	add	r7, r5
 800a15a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a15e:	42bb      	cmp	r3, r7
 800a160:	da42      	bge.n	800a1e8 <__gethex+0x244>
 800a162:	9801      	ldr	r0, [sp, #4]
 800a164:	4621      	mov	r1, r4
 800a166:	f7fd ff6f 	bl	8008048 <_Bfree>
 800a16a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a16c:	2300      	movs	r3, #0
 800a16e:	6013      	str	r3, [r2, #0]
 800a170:	25a3      	movs	r5, #163	@ 0xa3
 800a172:	e793      	b.n	800a09c <__gethex+0xf8>
 800a174:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a178:	2a2e      	cmp	r2, #46	@ 0x2e
 800a17a:	d012      	beq.n	800a1a2 <__gethex+0x1fe>
 800a17c:	2b20      	cmp	r3, #32
 800a17e:	d104      	bne.n	800a18a <__gethex+0x1e6>
 800a180:	f845 bb04 	str.w	fp, [r5], #4
 800a184:	f04f 0b00 	mov.w	fp, #0
 800a188:	465b      	mov	r3, fp
 800a18a:	7830      	ldrb	r0, [r6, #0]
 800a18c:	9303      	str	r3, [sp, #12]
 800a18e:	f7ff fef3 	bl	8009f78 <__hexdig_fun>
 800a192:	9b03      	ldr	r3, [sp, #12]
 800a194:	f000 000f 	and.w	r0, r0, #15
 800a198:	4098      	lsls	r0, r3
 800a19a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a19e:	3304      	adds	r3, #4
 800a1a0:	e7ae      	b.n	800a100 <__gethex+0x15c>
 800a1a2:	45b1      	cmp	r9, r6
 800a1a4:	d8ea      	bhi.n	800a17c <__gethex+0x1d8>
 800a1a6:	492b      	ldr	r1, [pc, #172]	@ (800a254 <__gethex+0x2b0>)
 800a1a8:	9303      	str	r3, [sp, #12]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7ff fe03 	bl	8009db8 <strncmp>
 800a1b2:	9b03      	ldr	r3, [sp, #12]
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d1e1      	bne.n	800a17c <__gethex+0x1d8>
 800a1b8:	e7a2      	b.n	800a100 <__gethex+0x15c>
 800a1ba:	1ea9      	subs	r1, r5, #2
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f7fe fb94 	bl	80088ea <__any_on>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d0c2      	beq.n	800a14c <__gethex+0x1a8>
 800a1c6:	f04f 0903 	mov.w	r9, #3
 800a1ca:	e7c1      	b.n	800a150 <__gethex+0x1ac>
 800a1cc:	da09      	bge.n	800a1e2 <__gethex+0x23e>
 800a1ce:	1b75      	subs	r5, r6, r5
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	9801      	ldr	r0, [sp, #4]
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	f7fe f94f 	bl	8008478 <__lshift>
 800a1da:	1b7f      	subs	r7, r7, r5
 800a1dc:	4604      	mov	r4, r0
 800a1de:	f100 0a14 	add.w	sl, r0, #20
 800a1e2:	f04f 0900 	mov.w	r9, #0
 800a1e6:	e7b8      	b.n	800a15a <__gethex+0x1b6>
 800a1e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a1ec:	42bd      	cmp	r5, r7
 800a1ee:	dd6f      	ble.n	800a2d0 <__gethex+0x32c>
 800a1f0:	1bed      	subs	r5, r5, r7
 800a1f2:	42ae      	cmp	r6, r5
 800a1f4:	dc34      	bgt.n	800a260 <__gethex+0x2bc>
 800a1f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d022      	beq.n	800a244 <__gethex+0x2a0>
 800a1fe:	2b03      	cmp	r3, #3
 800a200:	d024      	beq.n	800a24c <__gethex+0x2a8>
 800a202:	2b01      	cmp	r3, #1
 800a204:	d115      	bne.n	800a232 <__gethex+0x28e>
 800a206:	42ae      	cmp	r6, r5
 800a208:	d113      	bne.n	800a232 <__gethex+0x28e>
 800a20a:	2e01      	cmp	r6, #1
 800a20c:	d10b      	bne.n	800a226 <__gethex+0x282>
 800a20e:	9a02      	ldr	r2, [sp, #8]
 800a210:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a214:	6013      	str	r3, [r2, #0]
 800a216:	2301      	movs	r3, #1
 800a218:	6123      	str	r3, [r4, #16]
 800a21a:	f8ca 3000 	str.w	r3, [sl]
 800a21e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a220:	2562      	movs	r5, #98	@ 0x62
 800a222:	601c      	str	r4, [r3, #0]
 800a224:	e73a      	b.n	800a09c <__gethex+0xf8>
 800a226:	1e71      	subs	r1, r6, #1
 800a228:	4620      	mov	r0, r4
 800a22a:	f7fe fb5e 	bl	80088ea <__any_on>
 800a22e:	2800      	cmp	r0, #0
 800a230:	d1ed      	bne.n	800a20e <__gethex+0x26a>
 800a232:	9801      	ldr	r0, [sp, #4]
 800a234:	4621      	mov	r1, r4
 800a236:	f7fd ff07 	bl	8008048 <_Bfree>
 800a23a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a23c:	2300      	movs	r3, #0
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	2550      	movs	r5, #80	@ 0x50
 800a242:	e72b      	b.n	800a09c <__gethex+0xf8>
 800a244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1f3      	bne.n	800a232 <__gethex+0x28e>
 800a24a:	e7e0      	b.n	800a20e <__gethex+0x26a>
 800a24c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1dd      	bne.n	800a20e <__gethex+0x26a>
 800a252:	e7ee      	b.n	800a232 <__gethex+0x28e>
 800a254:	0800b160 	.word	0x0800b160
 800a258:	0800aff5 	.word	0x0800aff5
 800a25c:	0800b30e 	.word	0x0800b30e
 800a260:	1e6f      	subs	r7, r5, #1
 800a262:	f1b9 0f00 	cmp.w	r9, #0
 800a266:	d130      	bne.n	800a2ca <__gethex+0x326>
 800a268:	b127      	cbz	r7, 800a274 <__gethex+0x2d0>
 800a26a:	4639      	mov	r1, r7
 800a26c:	4620      	mov	r0, r4
 800a26e:	f7fe fb3c 	bl	80088ea <__any_on>
 800a272:	4681      	mov	r9, r0
 800a274:	117a      	asrs	r2, r7, #5
 800a276:	2301      	movs	r3, #1
 800a278:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a27c:	f007 071f 	and.w	r7, r7, #31
 800a280:	40bb      	lsls	r3, r7
 800a282:	4213      	tst	r3, r2
 800a284:	4629      	mov	r1, r5
 800a286:	4620      	mov	r0, r4
 800a288:	bf18      	it	ne
 800a28a:	f049 0902 	orrne.w	r9, r9, #2
 800a28e:	f7ff fe21 	bl	8009ed4 <rshift>
 800a292:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a296:	1b76      	subs	r6, r6, r5
 800a298:	2502      	movs	r5, #2
 800a29a:	f1b9 0f00 	cmp.w	r9, #0
 800a29e:	d047      	beq.n	800a330 <__gethex+0x38c>
 800a2a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d015      	beq.n	800a2d4 <__gethex+0x330>
 800a2a8:	2b03      	cmp	r3, #3
 800a2aa:	d017      	beq.n	800a2dc <__gethex+0x338>
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d109      	bne.n	800a2c4 <__gethex+0x320>
 800a2b0:	f019 0f02 	tst.w	r9, #2
 800a2b4:	d006      	beq.n	800a2c4 <__gethex+0x320>
 800a2b6:	f8da 3000 	ldr.w	r3, [sl]
 800a2ba:	ea49 0903 	orr.w	r9, r9, r3
 800a2be:	f019 0f01 	tst.w	r9, #1
 800a2c2:	d10e      	bne.n	800a2e2 <__gethex+0x33e>
 800a2c4:	f045 0510 	orr.w	r5, r5, #16
 800a2c8:	e032      	b.n	800a330 <__gethex+0x38c>
 800a2ca:	f04f 0901 	mov.w	r9, #1
 800a2ce:	e7d1      	b.n	800a274 <__gethex+0x2d0>
 800a2d0:	2501      	movs	r5, #1
 800a2d2:	e7e2      	b.n	800a29a <__gethex+0x2f6>
 800a2d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2d6:	f1c3 0301 	rsb	r3, r3, #1
 800a2da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0f0      	beq.n	800a2c4 <__gethex+0x320>
 800a2e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a2e6:	f104 0314 	add.w	r3, r4, #20
 800a2ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a2ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a2f2:	f04f 0c00 	mov.w	ip, #0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a300:	d01b      	beq.n	800a33a <__gethex+0x396>
 800a302:	3201      	adds	r2, #1
 800a304:	6002      	str	r2, [r0, #0]
 800a306:	2d02      	cmp	r5, #2
 800a308:	f104 0314 	add.w	r3, r4, #20
 800a30c:	d13c      	bne.n	800a388 <__gethex+0x3e4>
 800a30e:	f8d8 2000 	ldr.w	r2, [r8]
 800a312:	3a01      	subs	r2, #1
 800a314:	42b2      	cmp	r2, r6
 800a316:	d109      	bne.n	800a32c <__gethex+0x388>
 800a318:	1171      	asrs	r1, r6, #5
 800a31a:	2201      	movs	r2, #1
 800a31c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a320:	f006 061f 	and.w	r6, r6, #31
 800a324:	fa02 f606 	lsl.w	r6, r2, r6
 800a328:	421e      	tst	r6, r3
 800a32a:	d13a      	bne.n	800a3a2 <__gethex+0x3fe>
 800a32c:	f045 0520 	orr.w	r5, r5, #32
 800a330:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a332:	601c      	str	r4, [r3, #0]
 800a334:	9b02      	ldr	r3, [sp, #8]
 800a336:	601f      	str	r7, [r3, #0]
 800a338:	e6b0      	b.n	800a09c <__gethex+0xf8>
 800a33a:	4299      	cmp	r1, r3
 800a33c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a340:	d8d9      	bhi.n	800a2f6 <__gethex+0x352>
 800a342:	68a3      	ldr	r3, [r4, #8]
 800a344:	459b      	cmp	fp, r3
 800a346:	db17      	blt.n	800a378 <__gethex+0x3d4>
 800a348:	6861      	ldr	r1, [r4, #4]
 800a34a:	9801      	ldr	r0, [sp, #4]
 800a34c:	3101      	adds	r1, #1
 800a34e:	f7fd fe3b 	bl	8007fc8 <_Balloc>
 800a352:	4681      	mov	r9, r0
 800a354:	b918      	cbnz	r0, 800a35e <__gethex+0x3ba>
 800a356:	4b1a      	ldr	r3, [pc, #104]	@ (800a3c0 <__gethex+0x41c>)
 800a358:	4602      	mov	r2, r0
 800a35a:	2184      	movs	r1, #132	@ 0x84
 800a35c:	e6c5      	b.n	800a0ea <__gethex+0x146>
 800a35e:	6922      	ldr	r2, [r4, #16]
 800a360:	3202      	adds	r2, #2
 800a362:	f104 010c 	add.w	r1, r4, #12
 800a366:	0092      	lsls	r2, r2, #2
 800a368:	300c      	adds	r0, #12
 800a36a:	f7ff fd69 	bl	8009e40 <memcpy>
 800a36e:	4621      	mov	r1, r4
 800a370:	9801      	ldr	r0, [sp, #4]
 800a372:	f7fd fe69 	bl	8008048 <_Bfree>
 800a376:	464c      	mov	r4, r9
 800a378:	6923      	ldr	r3, [r4, #16]
 800a37a:	1c5a      	adds	r2, r3, #1
 800a37c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a380:	6122      	str	r2, [r4, #16]
 800a382:	2201      	movs	r2, #1
 800a384:	615a      	str	r2, [r3, #20]
 800a386:	e7be      	b.n	800a306 <__gethex+0x362>
 800a388:	6922      	ldr	r2, [r4, #16]
 800a38a:	455a      	cmp	r2, fp
 800a38c:	dd0b      	ble.n	800a3a6 <__gethex+0x402>
 800a38e:	2101      	movs	r1, #1
 800a390:	4620      	mov	r0, r4
 800a392:	f7ff fd9f 	bl	8009ed4 <rshift>
 800a396:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a39a:	3701      	adds	r7, #1
 800a39c:	42bb      	cmp	r3, r7
 800a39e:	f6ff aee0 	blt.w	800a162 <__gethex+0x1be>
 800a3a2:	2501      	movs	r5, #1
 800a3a4:	e7c2      	b.n	800a32c <__gethex+0x388>
 800a3a6:	f016 061f 	ands.w	r6, r6, #31
 800a3aa:	d0fa      	beq.n	800a3a2 <__gethex+0x3fe>
 800a3ac:	4453      	add	r3, sl
 800a3ae:	f1c6 0620 	rsb	r6, r6, #32
 800a3b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a3b6:	f7fd fef9 	bl	80081ac <__hi0bits>
 800a3ba:	42b0      	cmp	r0, r6
 800a3bc:	dbe7      	blt.n	800a38e <__gethex+0x3ea>
 800a3be:	e7f0      	b.n	800a3a2 <__gethex+0x3fe>
 800a3c0:	0800aff5 	.word	0x0800aff5

0800a3c4 <L_shift>:
 800a3c4:	f1c2 0208 	rsb	r2, r2, #8
 800a3c8:	0092      	lsls	r2, r2, #2
 800a3ca:	b570      	push	{r4, r5, r6, lr}
 800a3cc:	f1c2 0620 	rsb	r6, r2, #32
 800a3d0:	6843      	ldr	r3, [r0, #4]
 800a3d2:	6804      	ldr	r4, [r0, #0]
 800a3d4:	fa03 f506 	lsl.w	r5, r3, r6
 800a3d8:	432c      	orrs	r4, r5
 800a3da:	40d3      	lsrs	r3, r2
 800a3dc:	6004      	str	r4, [r0, #0]
 800a3de:	f840 3f04 	str.w	r3, [r0, #4]!
 800a3e2:	4288      	cmp	r0, r1
 800a3e4:	d3f4      	bcc.n	800a3d0 <L_shift+0xc>
 800a3e6:	bd70      	pop	{r4, r5, r6, pc}

0800a3e8 <__match>:
 800a3e8:	b530      	push	{r4, r5, lr}
 800a3ea:	6803      	ldr	r3, [r0, #0]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3f2:	b914      	cbnz	r4, 800a3fa <__match+0x12>
 800a3f4:	6003      	str	r3, [r0, #0]
 800a3f6:	2001      	movs	r0, #1
 800a3f8:	bd30      	pop	{r4, r5, pc}
 800a3fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a402:	2d19      	cmp	r5, #25
 800a404:	bf98      	it	ls
 800a406:	3220      	addls	r2, #32
 800a408:	42a2      	cmp	r2, r4
 800a40a:	d0f0      	beq.n	800a3ee <__match+0x6>
 800a40c:	2000      	movs	r0, #0
 800a40e:	e7f3      	b.n	800a3f8 <__match+0x10>

0800a410 <__hexnan>:
 800a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a414:	680b      	ldr	r3, [r1, #0]
 800a416:	6801      	ldr	r1, [r0, #0]
 800a418:	115e      	asrs	r6, r3, #5
 800a41a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a41e:	f013 031f 	ands.w	r3, r3, #31
 800a422:	b087      	sub	sp, #28
 800a424:	bf18      	it	ne
 800a426:	3604      	addne	r6, #4
 800a428:	2500      	movs	r5, #0
 800a42a:	1f37      	subs	r7, r6, #4
 800a42c:	4682      	mov	sl, r0
 800a42e:	4690      	mov	r8, r2
 800a430:	9301      	str	r3, [sp, #4]
 800a432:	f846 5c04 	str.w	r5, [r6, #-4]
 800a436:	46b9      	mov	r9, r7
 800a438:	463c      	mov	r4, r7
 800a43a:	9502      	str	r5, [sp, #8]
 800a43c:	46ab      	mov	fp, r5
 800a43e:	784a      	ldrb	r2, [r1, #1]
 800a440:	1c4b      	adds	r3, r1, #1
 800a442:	9303      	str	r3, [sp, #12]
 800a444:	b342      	cbz	r2, 800a498 <__hexnan+0x88>
 800a446:	4610      	mov	r0, r2
 800a448:	9105      	str	r1, [sp, #20]
 800a44a:	9204      	str	r2, [sp, #16]
 800a44c:	f7ff fd94 	bl	8009f78 <__hexdig_fun>
 800a450:	2800      	cmp	r0, #0
 800a452:	d151      	bne.n	800a4f8 <__hexnan+0xe8>
 800a454:	9a04      	ldr	r2, [sp, #16]
 800a456:	9905      	ldr	r1, [sp, #20]
 800a458:	2a20      	cmp	r2, #32
 800a45a:	d818      	bhi.n	800a48e <__hexnan+0x7e>
 800a45c:	9b02      	ldr	r3, [sp, #8]
 800a45e:	459b      	cmp	fp, r3
 800a460:	dd13      	ble.n	800a48a <__hexnan+0x7a>
 800a462:	454c      	cmp	r4, r9
 800a464:	d206      	bcs.n	800a474 <__hexnan+0x64>
 800a466:	2d07      	cmp	r5, #7
 800a468:	dc04      	bgt.n	800a474 <__hexnan+0x64>
 800a46a:	462a      	mov	r2, r5
 800a46c:	4649      	mov	r1, r9
 800a46e:	4620      	mov	r0, r4
 800a470:	f7ff ffa8 	bl	800a3c4 <L_shift>
 800a474:	4544      	cmp	r4, r8
 800a476:	d952      	bls.n	800a51e <__hexnan+0x10e>
 800a478:	2300      	movs	r3, #0
 800a47a:	f1a4 0904 	sub.w	r9, r4, #4
 800a47e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a482:	f8cd b008 	str.w	fp, [sp, #8]
 800a486:	464c      	mov	r4, r9
 800a488:	461d      	mov	r5, r3
 800a48a:	9903      	ldr	r1, [sp, #12]
 800a48c:	e7d7      	b.n	800a43e <__hexnan+0x2e>
 800a48e:	2a29      	cmp	r2, #41	@ 0x29
 800a490:	d157      	bne.n	800a542 <__hexnan+0x132>
 800a492:	3102      	adds	r1, #2
 800a494:	f8ca 1000 	str.w	r1, [sl]
 800a498:	f1bb 0f00 	cmp.w	fp, #0
 800a49c:	d051      	beq.n	800a542 <__hexnan+0x132>
 800a49e:	454c      	cmp	r4, r9
 800a4a0:	d206      	bcs.n	800a4b0 <__hexnan+0xa0>
 800a4a2:	2d07      	cmp	r5, #7
 800a4a4:	dc04      	bgt.n	800a4b0 <__hexnan+0xa0>
 800a4a6:	462a      	mov	r2, r5
 800a4a8:	4649      	mov	r1, r9
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f7ff ff8a 	bl	800a3c4 <L_shift>
 800a4b0:	4544      	cmp	r4, r8
 800a4b2:	d936      	bls.n	800a522 <__hexnan+0x112>
 800a4b4:	f1a8 0204 	sub.w	r2, r8, #4
 800a4b8:	4623      	mov	r3, r4
 800a4ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800a4be:	f842 1f04 	str.w	r1, [r2, #4]!
 800a4c2:	429f      	cmp	r7, r3
 800a4c4:	d2f9      	bcs.n	800a4ba <__hexnan+0xaa>
 800a4c6:	1b3b      	subs	r3, r7, r4
 800a4c8:	f023 0303 	bic.w	r3, r3, #3
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	3401      	adds	r4, #1
 800a4d0:	3e03      	subs	r6, #3
 800a4d2:	42b4      	cmp	r4, r6
 800a4d4:	bf88      	it	hi
 800a4d6:	2304      	movhi	r3, #4
 800a4d8:	4443      	add	r3, r8
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f843 2b04 	str.w	r2, [r3], #4
 800a4e0:	429f      	cmp	r7, r3
 800a4e2:	d2fb      	bcs.n	800a4dc <__hexnan+0xcc>
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	b91b      	cbnz	r3, 800a4f0 <__hexnan+0xe0>
 800a4e8:	4547      	cmp	r7, r8
 800a4ea:	d128      	bne.n	800a53e <__hexnan+0x12e>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	2005      	movs	r0, #5
 800a4f2:	b007      	add	sp, #28
 800a4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f8:	3501      	adds	r5, #1
 800a4fa:	2d08      	cmp	r5, #8
 800a4fc:	f10b 0b01 	add.w	fp, fp, #1
 800a500:	dd06      	ble.n	800a510 <__hexnan+0x100>
 800a502:	4544      	cmp	r4, r8
 800a504:	d9c1      	bls.n	800a48a <__hexnan+0x7a>
 800a506:	2300      	movs	r3, #0
 800a508:	f844 3c04 	str.w	r3, [r4, #-4]
 800a50c:	2501      	movs	r5, #1
 800a50e:	3c04      	subs	r4, #4
 800a510:	6822      	ldr	r2, [r4, #0]
 800a512:	f000 000f 	and.w	r0, r0, #15
 800a516:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a51a:	6020      	str	r0, [r4, #0]
 800a51c:	e7b5      	b.n	800a48a <__hexnan+0x7a>
 800a51e:	2508      	movs	r5, #8
 800a520:	e7b3      	b.n	800a48a <__hexnan+0x7a>
 800a522:	9b01      	ldr	r3, [sp, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d0dd      	beq.n	800a4e4 <__hexnan+0xd4>
 800a528:	f1c3 0320 	rsb	r3, r3, #32
 800a52c:	f04f 32ff 	mov.w	r2, #4294967295
 800a530:	40da      	lsrs	r2, r3
 800a532:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a536:	4013      	ands	r3, r2
 800a538:	f846 3c04 	str.w	r3, [r6, #-4]
 800a53c:	e7d2      	b.n	800a4e4 <__hexnan+0xd4>
 800a53e:	3f04      	subs	r7, #4
 800a540:	e7d0      	b.n	800a4e4 <__hexnan+0xd4>
 800a542:	2004      	movs	r0, #4
 800a544:	e7d5      	b.n	800a4f2 <__hexnan+0xe2>

0800a546 <__ascii_mbtowc>:
 800a546:	b082      	sub	sp, #8
 800a548:	b901      	cbnz	r1, 800a54c <__ascii_mbtowc+0x6>
 800a54a:	a901      	add	r1, sp, #4
 800a54c:	b142      	cbz	r2, 800a560 <__ascii_mbtowc+0x1a>
 800a54e:	b14b      	cbz	r3, 800a564 <__ascii_mbtowc+0x1e>
 800a550:	7813      	ldrb	r3, [r2, #0]
 800a552:	600b      	str	r3, [r1, #0]
 800a554:	7812      	ldrb	r2, [r2, #0]
 800a556:	1e10      	subs	r0, r2, #0
 800a558:	bf18      	it	ne
 800a55a:	2001      	movne	r0, #1
 800a55c:	b002      	add	sp, #8
 800a55e:	4770      	bx	lr
 800a560:	4610      	mov	r0, r2
 800a562:	e7fb      	b.n	800a55c <__ascii_mbtowc+0x16>
 800a564:	f06f 0001 	mvn.w	r0, #1
 800a568:	e7f8      	b.n	800a55c <__ascii_mbtowc+0x16>

0800a56a <_realloc_r>:
 800a56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a56e:	4680      	mov	r8, r0
 800a570:	4615      	mov	r5, r2
 800a572:	460c      	mov	r4, r1
 800a574:	b921      	cbnz	r1, 800a580 <_realloc_r+0x16>
 800a576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a57a:	4611      	mov	r1, r2
 800a57c:	f7fd bc98 	b.w	8007eb0 <_malloc_r>
 800a580:	b92a      	cbnz	r2, 800a58e <_realloc_r+0x24>
 800a582:	f7fd fc21 	bl	8007dc8 <_free_r>
 800a586:	2400      	movs	r4, #0
 800a588:	4620      	mov	r0, r4
 800a58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a58e:	f000 f840 	bl	800a612 <_malloc_usable_size_r>
 800a592:	4285      	cmp	r5, r0
 800a594:	4606      	mov	r6, r0
 800a596:	d802      	bhi.n	800a59e <_realloc_r+0x34>
 800a598:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a59c:	d8f4      	bhi.n	800a588 <_realloc_r+0x1e>
 800a59e:	4629      	mov	r1, r5
 800a5a0:	4640      	mov	r0, r8
 800a5a2:	f7fd fc85 	bl	8007eb0 <_malloc_r>
 800a5a6:	4607      	mov	r7, r0
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	d0ec      	beq.n	800a586 <_realloc_r+0x1c>
 800a5ac:	42b5      	cmp	r5, r6
 800a5ae:	462a      	mov	r2, r5
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	bf28      	it	cs
 800a5b4:	4632      	movcs	r2, r6
 800a5b6:	f7ff fc43 	bl	8009e40 <memcpy>
 800a5ba:	4621      	mov	r1, r4
 800a5bc:	4640      	mov	r0, r8
 800a5be:	f7fd fc03 	bl	8007dc8 <_free_r>
 800a5c2:	463c      	mov	r4, r7
 800a5c4:	e7e0      	b.n	800a588 <_realloc_r+0x1e>

0800a5c6 <__ascii_wctomb>:
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	4608      	mov	r0, r1
 800a5ca:	b141      	cbz	r1, 800a5de <__ascii_wctomb+0x18>
 800a5cc:	2aff      	cmp	r2, #255	@ 0xff
 800a5ce:	d904      	bls.n	800a5da <__ascii_wctomb+0x14>
 800a5d0:	228a      	movs	r2, #138	@ 0x8a
 800a5d2:	601a      	str	r2, [r3, #0]
 800a5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d8:	4770      	bx	lr
 800a5da:	700a      	strb	r2, [r1, #0]
 800a5dc:	2001      	movs	r0, #1
 800a5de:	4770      	bx	lr

0800a5e0 <fiprintf>:
 800a5e0:	b40e      	push	{r1, r2, r3}
 800a5e2:	b503      	push	{r0, r1, lr}
 800a5e4:	4601      	mov	r1, r0
 800a5e6:	ab03      	add	r3, sp, #12
 800a5e8:	4805      	ldr	r0, [pc, #20]	@ (800a600 <fiprintf+0x20>)
 800a5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ee:	6800      	ldr	r0, [r0, #0]
 800a5f0:	9301      	str	r3, [sp, #4]
 800a5f2:	f7ff f9a1 	bl	8009938 <_vfiprintf_r>
 800a5f6:	b002      	add	sp, #8
 800a5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5fc:	b003      	add	sp, #12
 800a5fe:	4770      	bx	lr
 800a600:	200000a8 	.word	0x200000a8

0800a604 <abort>:
 800a604:	b508      	push	{r3, lr}
 800a606:	2006      	movs	r0, #6
 800a608:	f000 f834 	bl	800a674 <raise>
 800a60c:	2001      	movs	r0, #1
 800a60e:	f7f7 fad1 	bl	8001bb4 <_exit>

0800a612 <_malloc_usable_size_r>:
 800a612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a616:	1f18      	subs	r0, r3, #4
 800a618:	2b00      	cmp	r3, #0
 800a61a:	bfbc      	itt	lt
 800a61c:	580b      	ldrlt	r3, [r1, r0]
 800a61e:	18c0      	addlt	r0, r0, r3
 800a620:	4770      	bx	lr

0800a622 <_raise_r>:
 800a622:	291f      	cmp	r1, #31
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	4605      	mov	r5, r0
 800a628:	460c      	mov	r4, r1
 800a62a:	d904      	bls.n	800a636 <_raise_r+0x14>
 800a62c:	2316      	movs	r3, #22
 800a62e:	6003      	str	r3, [r0, #0]
 800a630:	f04f 30ff 	mov.w	r0, #4294967295
 800a634:	bd38      	pop	{r3, r4, r5, pc}
 800a636:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a638:	b112      	cbz	r2, 800a640 <_raise_r+0x1e>
 800a63a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a63e:	b94b      	cbnz	r3, 800a654 <_raise_r+0x32>
 800a640:	4628      	mov	r0, r5
 800a642:	f000 f831 	bl	800a6a8 <_getpid_r>
 800a646:	4622      	mov	r2, r4
 800a648:	4601      	mov	r1, r0
 800a64a:	4628      	mov	r0, r5
 800a64c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a650:	f000 b818 	b.w	800a684 <_kill_r>
 800a654:	2b01      	cmp	r3, #1
 800a656:	d00a      	beq.n	800a66e <_raise_r+0x4c>
 800a658:	1c59      	adds	r1, r3, #1
 800a65a:	d103      	bne.n	800a664 <_raise_r+0x42>
 800a65c:	2316      	movs	r3, #22
 800a65e:	6003      	str	r3, [r0, #0]
 800a660:	2001      	movs	r0, #1
 800a662:	e7e7      	b.n	800a634 <_raise_r+0x12>
 800a664:	2100      	movs	r1, #0
 800a666:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a66a:	4620      	mov	r0, r4
 800a66c:	4798      	blx	r3
 800a66e:	2000      	movs	r0, #0
 800a670:	e7e0      	b.n	800a634 <_raise_r+0x12>
	...

0800a674 <raise>:
 800a674:	4b02      	ldr	r3, [pc, #8]	@ (800a680 <raise+0xc>)
 800a676:	4601      	mov	r1, r0
 800a678:	6818      	ldr	r0, [r3, #0]
 800a67a:	f7ff bfd2 	b.w	800a622 <_raise_r>
 800a67e:	bf00      	nop
 800a680:	200000a8 	.word	0x200000a8

0800a684 <_kill_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4d07      	ldr	r5, [pc, #28]	@ (800a6a4 <_kill_r+0x20>)
 800a688:	2300      	movs	r3, #0
 800a68a:	4604      	mov	r4, r0
 800a68c:	4608      	mov	r0, r1
 800a68e:	4611      	mov	r1, r2
 800a690:	602b      	str	r3, [r5, #0]
 800a692:	f7f7 fa7f 	bl	8001b94 <_kill>
 800a696:	1c43      	adds	r3, r0, #1
 800a698:	d102      	bne.n	800a6a0 <_kill_r+0x1c>
 800a69a:	682b      	ldr	r3, [r5, #0]
 800a69c:	b103      	cbz	r3, 800a6a0 <_kill_r+0x1c>
 800a69e:	6023      	str	r3, [r4, #0]
 800a6a0:	bd38      	pop	{r3, r4, r5, pc}
 800a6a2:	bf00      	nop
 800a6a4:	200005a4 	.word	0x200005a4

0800a6a8 <_getpid_r>:
 800a6a8:	f7f7 ba6c 	b.w	8001b84 <_getpid>

0800a6ac <atan2>:
 800a6ac:	f000 baa8 	b.w	800ac00 <__ieee754_atan2>

0800a6b0 <sqrt>:
 800a6b0:	b538      	push	{r3, r4, r5, lr}
 800a6b2:	ed2d 8b02 	vpush	{d8}
 800a6b6:	ec55 4b10 	vmov	r4, r5, d0
 800a6ba:	f000 f9c5 	bl	800aa48 <__ieee754_sqrt>
 800a6be:	4622      	mov	r2, r4
 800a6c0:	462b      	mov	r3, r5
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	eeb0 8a40 	vmov.f32	s16, s0
 800a6ca:	eef0 8a60 	vmov.f32	s17, s1
 800a6ce:	f7f6 fa2d 	bl	8000b2c <__aeabi_dcmpun>
 800a6d2:	b990      	cbnz	r0, 800a6fa <sqrt+0x4a>
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	4620      	mov	r0, r4
 800a6da:	4629      	mov	r1, r5
 800a6dc:	f7f6 f9fe 	bl	8000adc <__aeabi_dcmplt>
 800a6e0:	b158      	cbz	r0, 800a6fa <sqrt+0x4a>
 800a6e2:	f7fc fcef 	bl	80070c4 <__errno>
 800a6e6:	2321      	movs	r3, #33	@ 0x21
 800a6e8:	6003      	str	r3, [r0, #0]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4610      	mov	r0, r2
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	f7f6 f8ab 	bl	800084c <__aeabi_ddiv>
 800a6f6:	ec41 0b18 	vmov	d8, r0, r1
 800a6fa:	eeb0 0a48 	vmov.f32	s0, s16
 800a6fe:	eef0 0a68 	vmov.f32	s1, s17
 800a702:	ecbd 8b02 	vpop	{d8}
 800a706:	bd38      	pop	{r3, r4, r5, pc}

0800a708 <atan>:
 800a708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	ec55 4b10 	vmov	r4, r5, d0
 800a710:	4bbf      	ldr	r3, [pc, #764]	@ (800aa10 <atan+0x308>)
 800a712:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a716:	429e      	cmp	r6, r3
 800a718:	46ab      	mov	fp, r5
 800a71a:	d918      	bls.n	800a74e <atan+0x46>
 800a71c:	4bbd      	ldr	r3, [pc, #756]	@ (800aa14 <atan+0x30c>)
 800a71e:	429e      	cmp	r6, r3
 800a720:	d801      	bhi.n	800a726 <atan+0x1e>
 800a722:	d109      	bne.n	800a738 <atan+0x30>
 800a724:	b144      	cbz	r4, 800a738 <atan+0x30>
 800a726:	4622      	mov	r2, r4
 800a728:	462b      	mov	r3, r5
 800a72a:	4620      	mov	r0, r4
 800a72c:	4629      	mov	r1, r5
 800a72e:	f7f5 fdad 	bl	800028c <__adddf3>
 800a732:	4604      	mov	r4, r0
 800a734:	460d      	mov	r5, r1
 800a736:	e006      	b.n	800a746 <atan+0x3e>
 800a738:	f1bb 0f00 	cmp.w	fp, #0
 800a73c:	f340 812b 	ble.w	800a996 <atan+0x28e>
 800a740:	a597      	add	r5, pc, #604	@ (adr r5, 800a9a0 <atan+0x298>)
 800a742:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a746:	ec45 4b10 	vmov	d0, r4, r5
 800a74a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a74e:	4bb2      	ldr	r3, [pc, #712]	@ (800aa18 <atan+0x310>)
 800a750:	429e      	cmp	r6, r3
 800a752:	d813      	bhi.n	800a77c <atan+0x74>
 800a754:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a758:	429e      	cmp	r6, r3
 800a75a:	d80c      	bhi.n	800a776 <atan+0x6e>
 800a75c:	a392      	add	r3, pc, #584	@ (adr r3, 800a9a8 <atan+0x2a0>)
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	4620      	mov	r0, r4
 800a764:	4629      	mov	r1, r5
 800a766:	f7f5 fd91 	bl	800028c <__adddf3>
 800a76a:	4bac      	ldr	r3, [pc, #688]	@ (800aa1c <atan+0x314>)
 800a76c:	2200      	movs	r2, #0
 800a76e:	f7f6 f9d3 	bl	8000b18 <__aeabi_dcmpgt>
 800a772:	2800      	cmp	r0, #0
 800a774:	d1e7      	bne.n	800a746 <atan+0x3e>
 800a776:	f04f 3aff 	mov.w	sl, #4294967295
 800a77a:	e029      	b.n	800a7d0 <atan+0xc8>
 800a77c:	f000 f95c 	bl	800aa38 <fabs>
 800a780:	4ba7      	ldr	r3, [pc, #668]	@ (800aa20 <atan+0x318>)
 800a782:	429e      	cmp	r6, r3
 800a784:	ec55 4b10 	vmov	r4, r5, d0
 800a788:	f200 80bc 	bhi.w	800a904 <atan+0x1fc>
 800a78c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a790:	429e      	cmp	r6, r3
 800a792:	f200 809e 	bhi.w	800a8d2 <atan+0x1ca>
 800a796:	4622      	mov	r2, r4
 800a798:	462b      	mov	r3, r5
 800a79a:	4620      	mov	r0, r4
 800a79c:	4629      	mov	r1, r5
 800a79e:	f7f5 fd75 	bl	800028c <__adddf3>
 800a7a2:	4b9e      	ldr	r3, [pc, #632]	@ (800aa1c <atan+0x314>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f7f5 fd6f 	bl	8000288 <__aeabi_dsub>
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	4606      	mov	r6, r0
 800a7ae:	460f      	mov	r7, r1
 800a7b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	f7f5 fd68 	bl	800028c <__adddf3>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	460b      	mov	r3, r1
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	f7f6 f842 	bl	800084c <__aeabi_ddiv>
 800a7c8:	f04f 0a00 	mov.w	sl, #0
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	460d      	mov	r5, r1
 800a7d0:	4622      	mov	r2, r4
 800a7d2:	462b      	mov	r3, r5
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	f7f5 ff0e 	bl	80005f8 <__aeabi_dmul>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4680      	mov	r8, r0
 800a7e2:	4689      	mov	r9, r1
 800a7e4:	f7f5 ff08 	bl	80005f8 <__aeabi_dmul>
 800a7e8:	a371      	add	r3, pc, #452	@ (adr r3, 800a9b0 <atan+0x2a8>)
 800a7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	460f      	mov	r7, r1
 800a7f2:	f7f5 ff01 	bl	80005f8 <__aeabi_dmul>
 800a7f6:	a370      	add	r3, pc, #448	@ (adr r3, 800a9b8 <atan+0x2b0>)
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	f7f5 fd46 	bl	800028c <__adddf3>
 800a800:	4632      	mov	r2, r6
 800a802:	463b      	mov	r3, r7
 800a804:	f7f5 fef8 	bl	80005f8 <__aeabi_dmul>
 800a808:	a36d      	add	r3, pc, #436	@ (adr r3, 800a9c0 <atan+0x2b8>)
 800a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80e:	f7f5 fd3d 	bl	800028c <__adddf3>
 800a812:	4632      	mov	r2, r6
 800a814:	463b      	mov	r3, r7
 800a816:	f7f5 feef 	bl	80005f8 <__aeabi_dmul>
 800a81a:	a36b      	add	r3, pc, #428	@ (adr r3, 800a9c8 <atan+0x2c0>)
 800a81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a820:	f7f5 fd34 	bl	800028c <__adddf3>
 800a824:	4632      	mov	r2, r6
 800a826:	463b      	mov	r3, r7
 800a828:	f7f5 fee6 	bl	80005f8 <__aeabi_dmul>
 800a82c:	a368      	add	r3, pc, #416	@ (adr r3, 800a9d0 <atan+0x2c8>)
 800a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a832:	f7f5 fd2b 	bl	800028c <__adddf3>
 800a836:	4632      	mov	r2, r6
 800a838:	463b      	mov	r3, r7
 800a83a:	f7f5 fedd 	bl	80005f8 <__aeabi_dmul>
 800a83e:	a366      	add	r3, pc, #408	@ (adr r3, 800a9d8 <atan+0x2d0>)
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	f7f5 fd22 	bl	800028c <__adddf3>
 800a848:	4642      	mov	r2, r8
 800a84a:	464b      	mov	r3, r9
 800a84c:	f7f5 fed4 	bl	80005f8 <__aeabi_dmul>
 800a850:	a363      	add	r3, pc, #396	@ (adr r3, 800a9e0 <atan+0x2d8>)
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	4680      	mov	r8, r0
 800a858:	4689      	mov	r9, r1
 800a85a:	4630      	mov	r0, r6
 800a85c:	4639      	mov	r1, r7
 800a85e:	f7f5 fecb 	bl	80005f8 <__aeabi_dmul>
 800a862:	a361      	add	r3, pc, #388	@ (adr r3, 800a9e8 <atan+0x2e0>)
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	f7f5 fd0e 	bl	8000288 <__aeabi_dsub>
 800a86c:	4632      	mov	r2, r6
 800a86e:	463b      	mov	r3, r7
 800a870:	f7f5 fec2 	bl	80005f8 <__aeabi_dmul>
 800a874:	a35e      	add	r3, pc, #376	@ (adr r3, 800a9f0 <atan+0x2e8>)
 800a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87a:	f7f5 fd05 	bl	8000288 <__aeabi_dsub>
 800a87e:	4632      	mov	r2, r6
 800a880:	463b      	mov	r3, r7
 800a882:	f7f5 feb9 	bl	80005f8 <__aeabi_dmul>
 800a886:	a35c      	add	r3, pc, #368	@ (adr r3, 800a9f8 <atan+0x2f0>)
 800a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88c:	f7f5 fcfc 	bl	8000288 <__aeabi_dsub>
 800a890:	4632      	mov	r2, r6
 800a892:	463b      	mov	r3, r7
 800a894:	f7f5 feb0 	bl	80005f8 <__aeabi_dmul>
 800a898:	a359      	add	r3, pc, #356	@ (adr r3, 800aa00 <atan+0x2f8>)
 800a89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89e:	f7f5 fcf3 	bl	8000288 <__aeabi_dsub>
 800a8a2:	4632      	mov	r2, r6
 800a8a4:	463b      	mov	r3, r7
 800a8a6:	f7f5 fea7 	bl	80005f8 <__aeabi_dmul>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	4640      	mov	r0, r8
 800a8b0:	4649      	mov	r1, r9
 800a8b2:	f7f5 fceb 	bl	800028c <__adddf3>
 800a8b6:	4622      	mov	r2, r4
 800a8b8:	462b      	mov	r3, r5
 800a8ba:	f7f5 fe9d 	bl	80005f8 <__aeabi_dmul>
 800a8be:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	d148      	bne.n	800a95a <atan+0x252>
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	4629      	mov	r1, r5
 800a8cc:	f7f5 fcdc 	bl	8000288 <__aeabi_dsub>
 800a8d0:	e72f      	b.n	800a732 <atan+0x2a>
 800a8d2:	4b52      	ldr	r3, [pc, #328]	@ (800aa1c <atan+0x314>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	4629      	mov	r1, r5
 800a8da:	f7f5 fcd5 	bl	8000288 <__aeabi_dsub>
 800a8de:	4b4f      	ldr	r3, [pc, #316]	@ (800aa1c <atan+0x314>)
 800a8e0:	4606      	mov	r6, r0
 800a8e2:	460f      	mov	r7, r1
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	f7f5 fccf 	bl	800028c <__adddf3>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	4639      	mov	r1, r7
 800a8f6:	f7f5 ffa9 	bl	800084c <__aeabi_ddiv>
 800a8fa:	f04f 0a01 	mov.w	sl, #1
 800a8fe:	4604      	mov	r4, r0
 800a900:	460d      	mov	r5, r1
 800a902:	e765      	b.n	800a7d0 <atan+0xc8>
 800a904:	4b47      	ldr	r3, [pc, #284]	@ (800aa24 <atan+0x31c>)
 800a906:	429e      	cmp	r6, r3
 800a908:	d21c      	bcs.n	800a944 <atan+0x23c>
 800a90a:	4b47      	ldr	r3, [pc, #284]	@ (800aa28 <atan+0x320>)
 800a90c:	2200      	movs	r2, #0
 800a90e:	4620      	mov	r0, r4
 800a910:	4629      	mov	r1, r5
 800a912:	f7f5 fcb9 	bl	8000288 <__aeabi_dsub>
 800a916:	4b44      	ldr	r3, [pc, #272]	@ (800aa28 <atan+0x320>)
 800a918:	4606      	mov	r6, r0
 800a91a:	460f      	mov	r7, r1
 800a91c:	2200      	movs	r2, #0
 800a91e:	4620      	mov	r0, r4
 800a920:	4629      	mov	r1, r5
 800a922:	f7f5 fe69 	bl	80005f8 <__aeabi_dmul>
 800a926:	4b3d      	ldr	r3, [pc, #244]	@ (800aa1c <atan+0x314>)
 800a928:	2200      	movs	r2, #0
 800a92a:	f7f5 fcaf 	bl	800028c <__adddf3>
 800a92e:	4602      	mov	r2, r0
 800a930:	460b      	mov	r3, r1
 800a932:	4630      	mov	r0, r6
 800a934:	4639      	mov	r1, r7
 800a936:	f7f5 ff89 	bl	800084c <__aeabi_ddiv>
 800a93a:	f04f 0a02 	mov.w	sl, #2
 800a93e:	4604      	mov	r4, r0
 800a940:	460d      	mov	r5, r1
 800a942:	e745      	b.n	800a7d0 <atan+0xc8>
 800a944:	4622      	mov	r2, r4
 800a946:	462b      	mov	r3, r5
 800a948:	4938      	ldr	r1, [pc, #224]	@ (800aa2c <atan+0x324>)
 800a94a:	2000      	movs	r0, #0
 800a94c:	f7f5 ff7e 	bl	800084c <__aeabi_ddiv>
 800a950:	f04f 0a03 	mov.w	sl, #3
 800a954:	4604      	mov	r4, r0
 800a956:	460d      	mov	r5, r1
 800a958:	e73a      	b.n	800a7d0 <atan+0xc8>
 800a95a:	4b35      	ldr	r3, [pc, #212]	@ (800aa30 <atan+0x328>)
 800a95c:	4e35      	ldr	r6, [pc, #212]	@ (800aa34 <atan+0x32c>)
 800a95e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a966:	f7f5 fc8f 	bl	8000288 <__aeabi_dsub>
 800a96a:	4622      	mov	r2, r4
 800a96c:	462b      	mov	r3, r5
 800a96e:	f7f5 fc8b 	bl	8000288 <__aeabi_dsub>
 800a972:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a97e:	f7f5 fc83 	bl	8000288 <__aeabi_dsub>
 800a982:	f1bb 0f00 	cmp.w	fp, #0
 800a986:	4604      	mov	r4, r0
 800a988:	460d      	mov	r5, r1
 800a98a:	f6bf aedc 	bge.w	800a746 <atan+0x3e>
 800a98e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a992:	461d      	mov	r5, r3
 800a994:	e6d7      	b.n	800a746 <atan+0x3e>
 800a996:	a51c      	add	r5, pc, #112	@ (adr r5, 800aa08 <atan+0x300>)
 800a998:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a99c:	e6d3      	b.n	800a746 <atan+0x3e>
 800a99e:	bf00      	nop
 800a9a0:	54442d18 	.word	0x54442d18
 800a9a4:	3ff921fb 	.word	0x3ff921fb
 800a9a8:	8800759c 	.word	0x8800759c
 800a9ac:	7e37e43c 	.word	0x7e37e43c
 800a9b0:	e322da11 	.word	0xe322da11
 800a9b4:	3f90ad3a 	.word	0x3f90ad3a
 800a9b8:	24760deb 	.word	0x24760deb
 800a9bc:	3fa97b4b 	.word	0x3fa97b4b
 800a9c0:	a0d03d51 	.word	0xa0d03d51
 800a9c4:	3fb10d66 	.word	0x3fb10d66
 800a9c8:	c54c206e 	.word	0xc54c206e
 800a9cc:	3fb745cd 	.word	0x3fb745cd
 800a9d0:	920083ff 	.word	0x920083ff
 800a9d4:	3fc24924 	.word	0x3fc24924
 800a9d8:	5555550d 	.word	0x5555550d
 800a9dc:	3fd55555 	.word	0x3fd55555
 800a9e0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a9e4:	bfa2b444 	.word	0xbfa2b444
 800a9e8:	52defd9a 	.word	0x52defd9a
 800a9ec:	3fadde2d 	.word	0x3fadde2d
 800a9f0:	af749a6d 	.word	0xaf749a6d
 800a9f4:	3fb3b0f2 	.word	0x3fb3b0f2
 800a9f8:	fe231671 	.word	0xfe231671
 800a9fc:	3fbc71c6 	.word	0x3fbc71c6
 800aa00:	9998ebc4 	.word	0x9998ebc4
 800aa04:	3fc99999 	.word	0x3fc99999
 800aa08:	54442d18 	.word	0x54442d18
 800aa0c:	bff921fb 	.word	0xbff921fb
 800aa10:	440fffff 	.word	0x440fffff
 800aa14:	7ff00000 	.word	0x7ff00000
 800aa18:	3fdbffff 	.word	0x3fdbffff
 800aa1c:	3ff00000 	.word	0x3ff00000
 800aa20:	3ff2ffff 	.word	0x3ff2ffff
 800aa24:	40038000 	.word	0x40038000
 800aa28:	3ff80000 	.word	0x3ff80000
 800aa2c:	bff00000 	.word	0xbff00000
 800aa30:	0800b370 	.word	0x0800b370
 800aa34:	0800b390 	.word	0x0800b390

0800aa38 <fabs>:
 800aa38:	ec51 0b10 	vmov	r0, r1, d0
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aa42:	ec43 2b10 	vmov	d0, r2, r3
 800aa46:	4770      	bx	lr

0800aa48 <__ieee754_sqrt>:
 800aa48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	4a68      	ldr	r2, [pc, #416]	@ (800abf0 <__ieee754_sqrt+0x1a8>)
 800aa4e:	ec55 4b10 	vmov	r4, r5, d0
 800aa52:	43aa      	bics	r2, r5
 800aa54:	462b      	mov	r3, r5
 800aa56:	4621      	mov	r1, r4
 800aa58:	d110      	bne.n	800aa7c <__ieee754_sqrt+0x34>
 800aa5a:	4622      	mov	r2, r4
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	4629      	mov	r1, r5
 800aa60:	f7f5 fdca 	bl	80005f8 <__aeabi_dmul>
 800aa64:	4602      	mov	r2, r0
 800aa66:	460b      	mov	r3, r1
 800aa68:	4620      	mov	r0, r4
 800aa6a:	4629      	mov	r1, r5
 800aa6c:	f7f5 fc0e 	bl	800028c <__adddf3>
 800aa70:	4604      	mov	r4, r0
 800aa72:	460d      	mov	r5, r1
 800aa74:	ec45 4b10 	vmov	d0, r4, r5
 800aa78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa7c:	2d00      	cmp	r5, #0
 800aa7e:	dc0e      	bgt.n	800aa9e <__ieee754_sqrt+0x56>
 800aa80:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800aa84:	4322      	orrs	r2, r4
 800aa86:	d0f5      	beq.n	800aa74 <__ieee754_sqrt+0x2c>
 800aa88:	b19d      	cbz	r5, 800aab2 <__ieee754_sqrt+0x6a>
 800aa8a:	4622      	mov	r2, r4
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	4629      	mov	r1, r5
 800aa90:	f7f5 fbfa 	bl	8000288 <__aeabi_dsub>
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	f7f5 fed8 	bl	800084c <__aeabi_ddiv>
 800aa9c:	e7e8      	b.n	800aa70 <__ieee754_sqrt+0x28>
 800aa9e:	152a      	asrs	r2, r5, #20
 800aaa0:	d115      	bne.n	800aace <__ieee754_sqrt+0x86>
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	e009      	b.n	800aaba <__ieee754_sqrt+0x72>
 800aaa6:	0acb      	lsrs	r3, r1, #11
 800aaa8:	3a15      	subs	r2, #21
 800aaaa:	0549      	lsls	r1, r1, #21
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d0fa      	beq.n	800aaa6 <__ieee754_sqrt+0x5e>
 800aab0:	e7f7      	b.n	800aaa2 <__ieee754_sqrt+0x5a>
 800aab2:	462a      	mov	r2, r5
 800aab4:	e7fa      	b.n	800aaac <__ieee754_sqrt+0x64>
 800aab6:	005b      	lsls	r3, r3, #1
 800aab8:	3001      	adds	r0, #1
 800aaba:	02dc      	lsls	r4, r3, #11
 800aabc:	d5fb      	bpl.n	800aab6 <__ieee754_sqrt+0x6e>
 800aabe:	1e44      	subs	r4, r0, #1
 800aac0:	1b12      	subs	r2, r2, r4
 800aac2:	f1c0 0420 	rsb	r4, r0, #32
 800aac6:	fa21 f404 	lsr.w	r4, r1, r4
 800aaca:	4323      	orrs	r3, r4
 800aacc:	4081      	lsls	r1, r0
 800aace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aad2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800aad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aada:	07d2      	lsls	r2, r2, #31
 800aadc:	bf5c      	itt	pl
 800aade:	005b      	lslpl	r3, r3, #1
 800aae0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800aae4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aae8:	bf58      	it	pl
 800aaea:	0049      	lslpl	r1, r1, #1
 800aaec:	2600      	movs	r6, #0
 800aaee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800aaf2:	106d      	asrs	r5, r5, #1
 800aaf4:	0049      	lsls	r1, r1, #1
 800aaf6:	2016      	movs	r0, #22
 800aaf8:	4632      	mov	r2, r6
 800aafa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800aafe:	1917      	adds	r7, r2, r4
 800ab00:	429f      	cmp	r7, r3
 800ab02:	bfde      	ittt	le
 800ab04:	193a      	addle	r2, r7, r4
 800ab06:	1bdb      	suble	r3, r3, r7
 800ab08:	1936      	addle	r6, r6, r4
 800ab0a:	0fcf      	lsrs	r7, r1, #31
 800ab0c:	3801      	subs	r0, #1
 800ab0e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ab12:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ab16:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ab1a:	d1f0      	bne.n	800aafe <__ieee754_sqrt+0xb6>
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	2720      	movs	r7, #32
 800ab20:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ab24:	429a      	cmp	r2, r3
 800ab26:	eb00 0e0c 	add.w	lr, r0, ip
 800ab2a:	db02      	blt.n	800ab32 <__ieee754_sqrt+0xea>
 800ab2c:	d113      	bne.n	800ab56 <__ieee754_sqrt+0x10e>
 800ab2e:	458e      	cmp	lr, r1
 800ab30:	d811      	bhi.n	800ab56 <__ieee754_sqrt+0x10e>
 800ab32:	f1be 0f00 	cmp.w	lr, #0
 800ab36:	eb0e 000c 	add.w	r0, lr, ip
 800ab3a:	da42      	bge.n	800abc2 <__ieee754_sqrt+0x17a>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	db40      	blt.n	800abc2 <__ieee754_sqrt+0x17a>
 800ab40:	f102 0801 	add.w	r8, r2, #1
 800ab44:	1a9b      	subs	r3, r3, r2
 800ab46:	458e      	cmp	lr, r1
 800ab48:	bf88      	it	hi
 800ab4a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ab4e:	eba1 010e 	sub.w	r1, r1, lr
 800ab52:	4464      	add	r4, ip
 800ab54:	4642      	mov	r2, r8
 800ab56:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ab5a:	3f01      	subs	r7, #1
 800ab5c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ab60:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ab64:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ab68:	d1dc      	bne.n	800ab24 <__ieee754_sqrt+0xdc>
 800ab6a:	4319      	orrs	r1, r3
 800ab6c:	d01b      	beq.n	800aba6 <__ieee754_sqrt+0x15e>
 800ab6e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800abf4 <__ieee754_sqrt+0x1ac>
 800ab72:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800abf8 <__ieee754_sqrt+0x1b0>
 800ab76:	e9da 0100 	ldrd	r0, r1, [sl]
 800ab7a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ab7e:	f7f5 fb83 	bl	8000288 <__aeabi_dsub>
 800ab82:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4640      	mov	r0, r8
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	f7f5 ffaf 	bl	8000af0 <__aeabi_dcmple>
 800ab92:	b140      	cbz	r0, 800aba6 <__ieee754_sqrt+0x15e>
 800ab94:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ab98:	e9da 0100 	ldrd	r0, r1, [sl]
 800ab9c:	e9db 2300 	ldrd	r2, r3, [fp]
 800aba0:	d111      	bne.n	800abc6 <__ieee754_sqrt+0x17e>
 800aba2:	3601      	adds	r6, #1
 800aba4:	463c      	mov	r4, r7
 800aba6:	1072      	asrs	r2, r6, #1
 800aba8:	0863      	lsrs	r3, r4, #1
 800abaa:	07f1      	lsls	r1, r6, #31
 800abac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800abb0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800abb4:	bf48      	it	mi
 800abb6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800abba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800abbe:	4618      	mov	r0, r3
 800abc0:	e756      	b.n	800aa70 <__ieee754_sqrt+0x28>
 800abc2:	4690      	mov	r8, r2
 800abc4:	e7be      	b.n	800ab44 <__ieee754_sqrt+0xfc>
 800abc6:	f7f5 fb61 	bl	800028c <__adddf3>
 800abca:	e9da 8900 	ldrd	r8, r9, [sl]
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	4640      	mov	r0, r8
 800abd4:	4649      	mov	r1, r9
 800abd6:	f7f5 ff81 	bl	8000adc <__aeabi_dcmplt>
 800abda:	b120      	cbz	r0, 800abe6 <__ieee754_sqrt+0x19e>
 800abdc:	1ca0      	adds	r0, r4, #2
 800abde:	bf08      	it	eq
 800abe0:	3601      	addeq	r6, #1
 800abe2:	3402      	adds	r4, #2
 800abe4:	e7df      	b.n	800aba6 <__ieee754_sqrt+0x15e>
 800abe6:	1c63      	adds	r3, r4, #1
 800abe8:	f023 0401 	bic.w	r4, r3, #1
 800abec:	e7db      	b.n	800aba6 <__ieee754_sqrt+0x15e>
 800abee:	bf00      	nop
 800abf0:	7ff00000 	.word	0x7ff00000
 800abf4:	20000270 	.word	0x20000270
 800abf8:	20000268 	.word	0x20000268
 800abfc:	00000000 	.word	0x00000000

0800ac00 <__ieee754_atan2>:
 800ac00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac04:	ec57 6b11 	vmov	r6, r7, d1
 800ac08:	4273      	negs	r3, r6
 800ac0a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800ad88 <__ieee754_atan2+0x188>
 800ac0e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800ac12:	4333      	orrs	r3, r6
 800ac14:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ac18:	4543      	cmp	r3, r8
 800ac1a:	ec51 0b10 	vmov	r0, r1, d0
 800ac1e:	4635      	mov	r5, r6
 800ac20:	d809      	bhi.n	800ac36 <__ieee754_atan2+0x36>
 800ac22:	4244      	negs	r4, r0
 800ac24:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ac28:	4304      	orrs	r4, r0
 800ac2a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ac2e:	4544      	cmp	r4, r8
 800ac30:	468e      	mov	lr, r1
 800ac32:	4681      	mov	r9, r0
 800ac34:	d907      	bls.n	800ac46 <__ieee754_atan2+0x46>
 800ac36:	4632      	mov	r2, r6
 800ac38:	463b      	mov	r3, r7
 800ac3a:	f7f5 fb27 	bl	800028c <__adddf3>
 800ac3e:	ec41 0b10 	vmov	d0, r0, r1
 800ac42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac46:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800ac4a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800ac4e:	4334      	orrs	r4, r6
 800ac50:	d103      	bne.n	800ac5a <__ieee754_atan2+0x5a>
 800ac52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac56:	f7ff bd57 	b.w	800a708 <atan>
 800ac5a:	17bc      	asrs	r4, r7, #30
 800ac5c:	f004 0402 	and.w	r4, r4, #2
 800ac60:	ea53 0909 	orrs.w	r9, r3, r9
 800ac64:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ac68:	d107      	bne.n	800ac7a <__ieee754_atan2+0x7a>
 800ac6a:	2c02      	cmp	r4, #2
 800ac6c:	d05f      	beq.n	800ad2e <__ieee754_atan2+0x12e>
 800ac6e:	2c03      	cmp	r4, #3
 800ac70:	d1e5      	bne.n	800ac3e <__ieee754_atan2+0x3e>
 800ac72:	a141      	add	r1, pc, #260	@ (adr r1, 800ad78 <__ieee754_atan2+0x178>)
 800ac74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac78:	e7e1      	b.n	800ac3e <__ieee754_atan2+0x3e>
 800ac7a:	4315      	orrs	r5, r2
 800ac7c:	d106      	bne.n	800ac8c <__ieee754_atan2+0x8c>
 800ac7e:	f1be 0f00 	cmp.w	lr, #0
 800ac82:	da5f      	bge.n	800ad44 <__ieee754_atan2+0x144>
 800ac84:	a13e      	add	r1, pc, #248	@ (adr r1, 800ad80 <__ieee754_atan2+0x180>)
 800ac86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac8a:	e7d8      	b.n	800ac3e <__ieee754_atan2+0x3e>
 800ac8c:	4542      	cmp	r2, r8
 800ac8e:	d10f      	bne.n	800acb0 <__ieee754_atan2+0xb0>
 800ac90:	4293      	cmp	r3, r2
 800ac92:	f104 34ff 	add.w	r4, r4, #4294967295
 800ac96:	d107      	bne.n	800aca8 <__ieee754_atan2+0xa8>
 800ac98:	2c02      	cmp	r4, #2
 800ac9a:	d84c      	bhi.n	800ad36 <__ieee754_atan2+0x136>
 800ac9c:	4b34      	ldr	r3, [pc, #208]	@ (800ad70 <__ieee754_atan2+0x170>)
 800ac9e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aca2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aca6:	e7ca      	b.n	800ac3e <__ieee754_atan2+0x3e>
 800aca8:	2c02      	cmp	r4, #2
 800acaa:	d848      	bhi.n	800ad3e <__ieee754_atan2+0x13e>
 800acac:	4b31      	ldr	r3, [pc, #196]	@ (800ad74 <__ieee754_atan2+0x174>)
 800acae:	e7f6      	b.n	800ac9e <__ieee754_atan2+0x9e>
 800acb0:	4543      	cmp	r3, r8
 800acb2:	d0e4      	beq.n	800ac7e <__ieee754_atan2+0x7e>
 800acb4:	1a9b      	subs	r3, r3, r2
 800acb6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800acba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800acbe:	da1e      	bge.n	800acfe <__ieee754_atan2+0xfe>
 800acc0:	2f00      	cmp	r7, #0
 800acc2:	da01      	bge.n	800acc8 <__ieee754_atan2+0xc8>
 800acc4:	323c      	adds	r2, #60	@ 0x3c
 800acc6:	db1e      	blt.n	800ad06 <__ieee754_atan2+0x106>
 800acc8:	4632      	mov	r2, r6
 800acca:	463b      	mov	r3, r7
 800accc:	f7f5 fdbe 	bl	800084c <__aeabi_ddiv>
 800acd0:	ec41 0b10 	vmov	d0, r0, r1
 800acd4:	f7ff feb0 	bl	800aa38 <fabs>
 800acd8:	f7ff fd16 	bl	800a708 <atan>
 800acdc:	ec51 0b10 	vmov	r0, r1, d0
 800ace0:	2c01      	cmp	r4, #1
 800ace2:	d013      	beq.n	800ad0c <__ieee754_atan2+0x10c>
 800ace4:	2c02      	cmp	r4, #2
 800ace6:	d015      	beq.n	800ad14 <__ieee754_atan2+0x114>
 800ace8:	2c00      	cmp	r4, #0
 800acea:	d0a8      	beq.n	800ac3e <__ieee754_atan2+0x3e>
 800acec:	a318      	add	r3, pc, #96	@ (adr r3, 800ad50 <__ieee754_atan2+0x150>)
 800acee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf2:	f7f5 fac9 	bl	8000288 <__aeabi_dsub>
 800acf6:	a318      	add	r3, pc, #96	@ (adr r3, 800ad58 <__ieee754_atan2+0x158>)
 800acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfc:	e014      	b.n	800ad28 <__ieee754_atan2+0x128>
 800acfe:	a118      	add	r1, pc, #96	@ (adr r1, 800ad60 <__ieee754_atan2+0x160>)
 800ad00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad04:	e7ec      	b.n	800ace0 <__ieee754_atan2+0xe0>
 800ad06:	2000      	movs	r0, #0
 800ad08:	2100      	movs	r1, #0
 800ad0a:	e7e9      	b.n	800ace0 <__ieee754_atan2+0xe0>
 800ad0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad10:	4619      	mov	r1, r3
 800ad12:	e794      	b.n	800ac3e <__ieee754_atan2+0x3e>
 800ad14:	a30e      	add	r3, pc, #56	@ (adr r3, 800ad50 <__ieee754_atan2+0x150>)
 800ad16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1a:	f7f5 fab5 	bl	8000288 <__aeabi_dsub>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	a10d      	add	r1, pc, #52	@ (adr r1, 800ad58 <__ieee754_atan2+0x158>)
 800ad24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad28:	f7f5 faae 	bl	8000288 <__aeabi_dsub>
 800ad2c:	e787      	b.n	800ac3e <__ieee754_atan2+0x3e>
 800ad2e:	a10a      	add	r1, pc, #40	@ (adr r1, 800ad58 <__ieee754_atan2+0x158>)
 800ad30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad34:	e783      	b.n	800ac3e <__ieee754_atan2+0x3e>
 800ad36:	a10c      	add	r1, pc, #48	@ (adr r1, 800ad68 <__ieee754_atan2+0x168>)
 800ad38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad3c:	e77f      	b.n	800ac3e <__ieee754_atan2+0x3e>
 800ad3e:	2000      	movs	r0, #0
 800ad40:	2100      	movs	r1, #0
 800ad42:	e77c      	b.n	800ac3e <__ieee754_atan2+0x3e>
 800ad44:	a106      	add	r1, pc, #24	@ (adr r1, 800ad60 <__ieee754_atan2+0x160>)
 800ad46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad4a:	e778      	b.n	800ac3e <__ieee754_atan2+0x3e>
 800ad4c:	f3af 8000 	nop.w
 800ad50:	33145c07 	.word	0x33145c07
 800ad54:	3ca1a626 	.word	0x3ca1a626
 800ad58:	54442d18 	.word	0x54442d18
 800ad5c:	400921fb 	.word	0x400921fb
 800ad60:	54442d18 	.word	0x54442d18
 800ad64:	3ff921fb 	.word	0x3ff921fb
 800ad68:	54442d18 	.word	0x54442d18
 800ad6c:	3fe921fb 	.word	0x3fe921fb
 800ad70:	0800b3c8 	.word	0x0800b3c8
 800ad74:	0800b3b0 	.word	0x0800b3b0
 800ad78:	54442d18 	.word	0x54442d18
 800ad7c:	c00921fb 	.word	0xc00921fb
 800ad80:	54442d18 	.word	0x54442d18
 800ad84:	bff921fb 	.word	0xbff921fb
 800ad88:	7ff00000 	.word	0x7ff00000

0800ad8c <_init>:
 800ad8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8e:	bf00      	nop
 800ad90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad92:	bc08      	pop	{r3}
 800ad94:	469e      	mov	lr, r3
 800ad96:	4770      	bx	lr

0800ad98 <_fini>:
 800ad98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9a:	bf00      	nop
 800ad9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad9e:	bc08      	pop	{r3}
 800ada0:	469e      	mov	lr, r3
 800ada2:	4770      	bx	lr
