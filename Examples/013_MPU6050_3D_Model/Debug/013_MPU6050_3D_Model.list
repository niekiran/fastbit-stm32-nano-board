
013_MPU6050_3D_Model.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800adb8  0800adb8  0000bdb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3a0  0800b3a0  0000d278  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3a0  0800b3a0  0000c3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3a8  0800b3a8  0000d278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3a8  0800b3a8  0000c3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b3ac  0800b3ac  0000c3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000278  20000000  0800b3b0  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d278  2**0
                  CONTENTS
 10 .bss          0000033c  20000278  20000278  0000d278  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200005b4  200005b4  0000d278  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d278  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb18  00000000  00000000  0000d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024ab  00000000  00000000  0001bdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  0001e270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000912  00000000  00000000  0001ee30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e84c  00000000  00000000  0001f742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e81  00000000  00000000  0003df8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0f73  00000000  00000000  0004ee0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ffd82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000469c  00000000  00000000  000ffdc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00104464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000278 	.word	0x20000278
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad9c 	.word	0x0800ad9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000027c 	.word	0x2000027c
 80001cc:	0800ad9c 	.word	0x0800ad9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf6:	b0b1      	sub	sp, #196	@ 0xc4
 8000cf8:	af08      	add	r7, sp, #32

  /* USER CODE BEGIN 1 */
  double data_Packet[3] = {0, 0, 0};
 8000cfa:	f04f 0200 	mov.w	r2, #0
 8000cfe:	f04f 0300 	mov.w	r3, #0
 8000d02:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
 8000d06:	f04f 0200 	mov.w	r2, #0
 8000d0a:	f04f 0300 	mov.w	r3, #0
 8000d0e:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	f04f 0300 	mov.w	r3, #0
 8000d1a:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
  char split_data = '#';
 8000d1e:	2323      	movs	r3, #35	@ 0x23
 8000d20:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
  char data[120];
  unsigned long current_time = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2a:	f001 f811 	bl	8001d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2e:	f000 f863 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d32:	f000 f955 	bl	8000fe0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d36:	f000 f92d 	bl	8000f94 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d3a:	f000 f8bb 	bl	8000eb4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d3e:	f000 f8f9 	bl	8000f34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8000d42:	f000 f991 	bl	8001068 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if(HAL_GetTick() - current_time >= 100) {
 8000d46:	f001 f85d 	bl	8001e04 <HAL_GetTick>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b63      	cmp	r3, #99	@ 0x63
 8000d54:	d9f7      	bls.n	8000d46 <main+0x52>
      current_time = HAL_GetTick();
 8000d56:	f001 f855 	bl	8001e04 <HAL_GetTick>
 8000d5a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
      /* Read all data from sensor 1 */
      MPU6050_Read_All(&mpu6050_data);
 8000d5e:	4822      	ldr	r0, [pc, #136]	@ (8000de8 <main+0xf4>)
 8000d60:	f000 fa12 	bl	8001188 <MPU6050_Read_All>

      data_Packet[0] = mpu6050_data.Kalman_angle_x;
 8000d64:	4b20      	ldr	r3, [pc, #128]	@ (8000de8 <main+0xf4>)
 8000d66:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8000d6a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
      data_Packet[1] = mpu6050_data.Kalman_angle_y;
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <main+0xf4>)
 8000d70:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8000d74:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
      data_Packet[2] = mpu6050_data.Gyro_angle_z;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <main+0xf4>)
 8000d7a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8000d7e:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

      printf("%.2f  || %.2f  || %.2f\n", data_Packet[0], data_Packet[1], data_Packet[2]);
 8000d82:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000d86:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8000d8a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8000d8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000d92:	e9cd 2300 	strd	r2, r3, [sp]
 8000d96:	4622      	mov	r2, r4
 8000d98:	462b      	mov	r3, r5
 8000d9a:	4814      	ldr	r0, [pc, #80]	@ (8000dec <main+0xf8>)
 8000d9c:	f005 ffe0 	bl	8006d60 <iprintf>
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)data, sprintf(data, "%1.0f%c%1.0f%c%1.0f",
 8000da0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000da4:	f897 609b 	ldrb.w	r6, [r7, #155]	@ 0x9b
 8000da8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8000dac:	f897 109b 	ldrb.w	r1, [r7, #155]	@ 0x9b
 8000db0:	6079      	str	r1, [r7, #4]
 8000db2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8000db6:	f107 0c08 	add.w	ip, r7, #8
 8000dba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	9104      	str	r1, [sp, #16]
 8000dc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000dc6:	9600      	str	r6, [sp, #0]
 8000dc8:	4622      	mov	r2, r4
 8000dca:	462b      	mov	r3, r5
 8000dcc:	4908      	ldr	r1, [pc, #32]	@ (8000df0 <main+0xfc>)
 8000dce:	4660      	mov	r0, ip
 8000dd0:	f006 f836 	bl	8006e40 <siprintf>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <main+0x100>)
 8000de0:	f003 ff86 	bl	8004cf0 <HAL_UART_Transmit_DMA>
    if(HAL_GetTick() - current_time >= 100) {
 8000de4:	e7af      	b.n	8000d46 <main+0x52>
 8000de6:	bf00      	nop
 8000de8:	200003f8 	.word	0x200003f8
 8000dec:	0800adb8 	.word	0x0800adb8
 8000df0:	0800add0 	.word	0x0800add0
 8000df4:	200002e8 	.word	0x200002e8

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b09e      	sub	sp, #120	@ 0x78
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e02:	2228      	movs	r2, #40	@ 0x28
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f006 f912 	bl	8007030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	223c      	movs	r2, #60	@ 0x3c
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f006 f904 	bl	8007030 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e30:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e36:	2301      	movs	r3, #1
 8000e38:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e46:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e48:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e4c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 faf0 	bl	8003438 <HAL_RCC_OscConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e5e:	f000 f8fd 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e62:	230f      	movs	r3, #15
 8000e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e66:	2302      	movs	r3, #2
 8000e68:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e78:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f003 fb18 	bl	80044b4 <HAL_RCC_ClockConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e8a:	f000 f8e7 	bl	800105c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000e8e:	2321      	movs	r3, #33	@ 0x21
 8000e90:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fd29 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ea8:	f000 f8d8 	bl	800105c <Error_Handler>
  }
}
 8000eac:	bf00      	nop
 8000eae:	3778      	adds	r7, #120	@ 0x78
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000eba:	4a1c      	ldr	r2, [pc, #112]	@ (8000f2c <MX_I2C1_Init+0x78>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f30 <MX_I2C1_Init+0x7c>)
 8000ec2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eca:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eee:	480e      	ldr	r0, [pc, #56]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000ef0:	f001 fc7e 	bl	80027f0 <HAL_I2C_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000efa:	f000 f8af 	bl	800105c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000efe:	2100      	movs	r1, #0
 8000f00:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000f02:	f002 fa01 	bl	8003308 <HAL_I2CEx_ConfigAnalogFilter>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f0c:	f000 f8a6 	bl	800105c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f10:	2100      	movs	r1, #0
 8000f12:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <MX_I2C1_Init+0x74>)
 8000f14:	f002 fa43 	bl	800339e <HAL_I2CEx_ConfigDigitalFilter>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f1e:	f000 f89d 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000294 	.word	0x20000294
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	2000090e 	.word	0x2000090e

08000f34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f38:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f3a:	4a15      	ldr	r2, [pc, #84]	@ (8000f90 <MX_USART1_UART_Init+0x5c>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_USART1_UART_Init+0x58>)
 8000f78:	f003 fe6c 	bl	8004c54 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f82:	f000 f86b 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200002e8 	.word	0x200002e8
 8000f90:	40013800 	.word	0x40013800

08000f94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f9a:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <MX_DMA_Init+0x48>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fdc <MX_DMA_Init+0x48>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6153      	str	r3, [r2, #20]
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <MX_DMA_Init+0x48>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	200e      	movs	r0, #14
 8000fb8:	f001 f82f 	bl	800201a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000fbc:	200e      	movs	r0, #14
 8000fbe:	f001 f848 	bl	8002052 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	200f      	movs	r0, #15
 8000fc8:	f001 f827 	bl	800201a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000fcc:	200f      	movs	r0, #15
 8000fce:	f001 f840 	bl	8002052 <HAL_NVIC_EnableIRQ>

}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <MX_GPIO_Init+0x5c>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a14      	ldr	r2, [pc, #80]	@ (800103c <MX_GPIO_Init+0x5c>)
 8000fec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ff0:	6153      	str	r3, [r2, #20]
 8000ff2:	4b12      	ldr	r3, [pc, #72]	@ (800103c <MX_GPIO_Init+0x5c>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <MX_GPIO_Init+0x5c>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a0e      	ldr	r2, [pc, #56]	@ (800103c <MX_GPIO_Init+0x5c>)
 8001004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <MX_GPIO_Init+0x5c>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b09      	ldr	r3, [pc, #36]	@ (800103c <MX_GPIO_Init+0x5c>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a08      	ldr	r2, [pc, #32]	@ (800103c <MX_GPIO_Init+0x5c>)
 800101c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <MX_GPIO_Init+0x5c>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000

08001040 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Reset DMA */
  HAL_UART_DMAStop(&huart1);
 8001048:	4803      	ldr	r0, [pc, #12]	@ (8001058 <HAL_UART_TxCpltCallback+0x18>)
 800104a:	f003 fecd 	bl	8004de8 <HAL_UART_DMAStop>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200002e8 	.word	0x200002e8

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <Error_Handler+0x8>

08001068 <MPU6050_Init>:
/**
  * @brief Initializes the MPU6050 sensor by configuring power management, gyroscope, and accelerometer.
  * @param None
  * @retval None
  */
void MPU6050_Init() {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  init_delay(100);
 800106c:	2064      	movs	r0, #100	@ 0x64
 800106e:	f000 f808 	bl	8001082 <init_delay>
  power_management_config();
 8001072:	f000 f811 	bl	8001098 <power_management_config>
  gyro_config();
 8001076:	f000 f837 	bl	80010e8 <gyro_config>
  accelerometer_config();
 800107a:	f000 f85d 	bl	8001138 <accelerometer_config>
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}

08001082 <init_delay>:
/**
 * @brief Applies a delay for initialization purposes.
 * @param delay The delay time in milliseconds.
 * @retval None
 */
static void init_delay(uint32_t delay) {
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 fec6 	bl	8001e1c <HAL_Delay>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <power_management_config>:
  * @brief Configures the power management settings of the MPU6050 sensor to exit sleep mode.
  * @param None
  * @retval None
  */
void power_management_config()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af04      	add	r7, sp, #16
  /* Set the value to be written to the power management register */
  temp_data = 0x00;
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <power_management_config+0x40>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]

  /* Write the value to the power management register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, PWR_MGMT_1_REG, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	9302      	str	r3, [sp, #8]
 80010aa:	2301      	movs	r3, #1
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <power_management_config+0x40>)
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2301      	movs	r3, #1
 80010b4:	226b      	movs	r2, #107	@ 0x6b
 80010b6:	21d0      	movs	r1, #208	@ 0xd0
 80010b8:	4808      	ldr	r0, [pc, #32]	@ (80010dc <power_management_config+0x44>)
 80010ba:	f001 fc35 	bl	8002928 <HAL_I2C_Mem_Write>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d103      	bne.n	80010cc <power_management_config+0x34>
    /*print in SWV terminal*/
    printf("Exiting from sleep mode...\n");
 80010c4:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <power_management_config+0x48>)
 80010c6:	f005 feb3 	bl	8006e30 <puts>
  } else {
    printf("Failed to exit from sleep mode...\n");
  }
}
 80010ca:	e002      	b.n	80010d2 <power_management_config+0x3a>
    printf("Failed to exit from sleep mode...\n");
 80010cc:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <power_management_config+0x4c>)
 80010ce:	f005 feaf 	bl	8006e30 <puts>
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000458 	.word	0x20000458
 80010dc:	20000294 	.word	0x20000294
 80010e0:	0800ade4 	.word	0x0800ade4
 80010e4:	0800ae00 	.word	0x0800ae00

080010e8 <gyro_config>:
  * @brief Configures the gyroscope settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
static void gyro_config()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af04      	add	r7, sp, #16
  /* Set the value to be written to the gyroscope configuration register */
  temp_data = FS_GYRO_2000;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <gyro_config+0x40>)
 80010f0:	220a      	movs	r2, #10
 80010f2:	701a      	strb	r2, [r3, #0]

  /* Write the value to the gyroscope configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, GYRO_CONFIG_REG, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	2301      	movs	r3, #1
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <gyro_config+0x40>)
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2301      	movs	r3, #1
 8001104:	221b      	movs	r2, #27
 8001106:	21d0      	movs	r1, #208	@ 0xd0
 8001108:	4808      	ldr	r0, [pc, #32]	@ (800112c <gyro_config+0x44>)
 800110a:	f001 fc0d 	bl	8002928 <HAL_I2C_Mem_Write>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d103      	bne.n	800111c <gyro_config+0x34>
    printf("Configuring gyroscope...\n");
 8001114:	4806      	ldr	r0, [pc, #24]	@ (8001130 <gyro_config+0x48>)
 8001116:	f005 fe8b 	bl	8006e30 <puts>
  } else {
    printf("Failed to configure gyroscope...\n");
  }
}
 800111a:	e002      	b.n	8001122 <gyro_config+0x3a>
    printf("Failed to configure gyroscope...\n");
 800111c:	4805      	ldr	r0, [pc, #20]	@ (8001134 <gyro_config+0x4c>)
 800111e:	f005 fe87 	bl	8006e30 <puts>
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000458 	.word	0x20000458
 800112c:	20000294 	.word	0x20000294
 8001130:	0800ae24 	.word	0x0800ae24
 8001134:	0800ae40 	.word	0x0800ae40

08001138 <accelerometer_config>:
  * @brief Configures the accelerometer settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
static void accelerometer_config()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af04      	add	r7, sp, #16
  /* Set the value to be written to the accelerometer configuration register */
  temp_data = FS_ACC_16G;
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <accelerometer_config+0x40>)
 8001140:	220a      	movs	r2, #10
 8001142:	701a      	strb	r2, [r3, #0]

  /* Write the value to the accelerometer configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, ACCEL_CONFIG_REG, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2301      	movs	r3, #1
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <accelerometer_config+0x40>)
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	221c      	movs	r2, #28
 8001156:	21d0      	movs	r1, #208	@ 0xd0
 8001158:	4808      	ldr	r0, [pc, #32]	@ (800117c <accelerometer_config+0x44>)
 800115a:	f001 fbe5 	bl	8002928 <HAL_I2C_Mem_Write>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d103      	bne.n	800116c <accelerometer_config+0x34>
    printf("Configuring accelerometer...\n");
 8001164:	4806      	ldr	r0, [pc, #24]	@ (8001180 <accelerometer_config+0x48>)
 8001166:	f005 fe63 	bl	8006e30 <puts>
  } else {
    printf("Failed to configure accelerometer...\n");
  }
}
 800116a:	e002      	b.n	8001172 <accelerometer_config+0x3a>
    printf("Failed to configure accelerometer...\n");
 800116c:	4805      	ldr	r0, [pc, #20]	@ (8001184 <accelerometer_config+0x4c>)
 800116e:	f005 fe5f 	bl	8006e30 <puts>
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000458 	.word	0x20000458
 800117c:	20000294 	.word	0x20000294
 8001180:	0800ae64 	.word	0x0800ae64
 8001184:	0800ae84 	.word	0x0800ae84

08001188 <MPU6050_Read_All>:
/**
  * @brief  Reads all sensor data from the MPU6050
  * @param  DataStruct: Pointer to the MPU6050_t structure to store the sensor data
  * @retval None
  */
void MPU6050_Read_All(MPU6050_t *DataStruct) {
 8001188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800118c:	b094      	sub	sp, #80	@ 0x50
 800118e:	af04      	add	r7, sp, #16
 8001190:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[14];
	int16_t temp;

	/* Read 14 BYTES of data starting from ACCEL_XOUT_H register */
	if (HAL_I2C_Mem_Read(&hi2c1, (MPU6050_ADDR << 1), ACCEL_XOUT_H_REG, 1, Rec_Data, 14, HAL_MAX_DELAY)!= HAL_OK) {
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	230e      	movs	r3, #14
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	223b      	movs	r2, #59	@ 0x3b
 80011a6:	21d0      	movs	r1, #208	@ 0xd0
 80011a8:	489b      	ldr	r0, [pc, #620]	@ (8001418 <MPU6050_Read_All+0x290>)
 80011aa:	f001 fcd1 	bl	8002b50 <HAL_I2C_Mem_Read>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <MPU6050_Read_All+0x34>
    printf("Failed to read from MPU6050\n");
 80011b4:	4899      	ldr	r0, [pc, #612]	@ (800141c <MPU6050_Read_All+0x294>)
 80011b6:	f005 fe3b 	bl	8006e30 <puts>
 80011ba:	e1db      	b.n	8001574 <MPU6050_Read_All+0x3ec>
    return;
  }

	DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80011bc:	7a3b      	ldrb	r3, [r7, #8]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	7a7b      	ldrb	r3, [r7, #9]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	4313      	orrs	r3, r2
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80011ce:	7abb      	ldrb	r3, [r7, #10]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	7afb      	ldrb	r3, [r7, #11]
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b21a      	sxth	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80011e0:	7b3b      	ldrb	r3, [r7, #12]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	7b7b      	ldrb	r3, [r7, #13]
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	809a      	strh	r2, [r3, #4]

	temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	86fb      	strh	r3, [r7, #54]	@ 0x36

	DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001200:	7c3b      	ldrb	r3, [r7, #16]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b21a      	sxth	r2, r3
 8001206:	7c7b      	ldrb	r3, [r7, #17]
 8001208:	b21b      	sxth	r3, r3
 800120a:	4313      	orrs	r3, r2
 800120c:	b21a      	sxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	841a      	strh	r2, [r3, #32]
	DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001212:	7cbb      	ldrb	r3, [r7, #18]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	7cfb      	ldrb	r3, [r7, #19]
 800121a:	b21b      	sxth	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b21a      	sxth	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	845a      	strh	r2, [r3, #34]	@ 0x22
	DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001224:	7d3b      	ldrb	r3, [r7, #20]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21a      	sxth	r2, r3
 800122a:	7d7b      	ldrb	r3, [r7, #21]
 800122c:	b21b      	sxth	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	b21a      	sxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	849a      	strh	r2, [r3, #36]	@ 0x24

	DataStruct->Ax = DataStruct->Accel_X_RAW / ACC_FS_SENSITIVITY_0;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f971 	bl	8000524 <__aeabi_i2d>
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	4b76      	ldr	r3, [pc, #472]	@ (8001420 <MPU6050_Read_All+0x298>)
 8001248:	f7ff fb00 	bl	800084c <__aeabi_ddiv>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	e9c1 2302 	strd	r2, r3, [r1, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / ACC_FS_SENSITIVITY_0;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f961 	bl	8000524 <__aeabi_i2d>
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b6e      	ldr	r3, [pc, #440]	@ (8001420 <MPU6050_Read_All+0x298>)
 8001268:	f7ff faf0 	bl	800084c <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	e9c1 2304 	strd	r2, r3, [r1, #16]
	DataStruct->Az = DataStruct->Accel_Z_RAW / ACC_FS_SENSITIVITY_0;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f951 	bl	8000524 <__aeabi_i2d>
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b66      	ldr	r3, [pc, #408]	@ (8001420 <MPU6050_Read_All+0x298>)
 8001288:	f7ff fae0 	bl	800084c <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	e9c1 2306 	strd	r2, r3, [r1, #24]

	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001296:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a2:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8001424 <MPU6050_Read_All+0x29c>
 80012a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012aa:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001428 <MPU6050_Read_All+0x2a0>
 80012ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	DataStruct->Gx = DataStruct->Gyro_X_RAW / GYR_FS_SENSITIVITY_0;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f930 	bl	8000524 <__aeabi_i2d>
 80012c4:	a350      	add	r3, pc, #320	@ (adr r3, 8001408 <MPU6050_Read_All+0x280>)
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	f7ff fabf 	bl	800084c <__aeabi_ddiv>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / GYR_FS_SENSITIVITY_0;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f920 	bl	8000524 <__aeabi_i2d>
 80012e4:	a348      	add	r3, pc, #288	@ (adr r3, 8001408 <MPU6050_Read_All+0x280>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7ff faaf 	bl	800084c <__aeabi_ddiv>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / GYR_FS_SENSITIVITY_0;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f910 	bl	8000524 <__aeabi_i2d>
 8001304:	a340      	add	r3, pc, #256	@ (adr r3, 8001408 <MPU6050_Read_All+0x280>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	f7ff fa9f 	bl	800084c <__aeabi_ddiv>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	//printf("%d   %d   %d\n", DataStruct->Accel_X_RAW, DataStruct->Accel_Y_RAW, DataStruct->Accel_Z_RAW);
	// Kalman angle solve
	double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001318:	f000 fd74 	bl	8001e04 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	4b43      	ldr	r3, [pc, #268]	@ (800142c <MPU6050_Read_All+0x2a4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f8ed 	bl	8000504 <__aeabi_ui2d>
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b40      	ldr	r3, [pc, #256]	@ (8001430 <MPU6050_Read_All+0x2a8>)
 8001330:	f7ff fa8c 	bl	800084c <__aeabi_ddiv>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	timer = HAL_GetTick();
 800133c:	f000 fd62 	bl	8001e04 <HAL_GetTick>
 8001340:	4603      	mov	r3, r0
 8001342:	4a3a      	ldr	r2, [pc, #232]	@ (800142c <MPU6050_Read_All+0x2a4>)
 8001344:	6013      	str	r3, [r2, #0]

	DataStruct->Gyro_angle_z += (DataStruct->Gz)*dt;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	@ 0x48
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001356:	f7ff f94f 	bl	80005f8 <__aeabi_dmul>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4650      	mov	r0, sl
 8001360:	4659      	mov	r1, fp
 8001362:	f7fe ff93 	bl	800028c <__adddf3>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	double roll;
	double roll_sqrt = sqrt(
					DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001376:	461a      	mov	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137e:	fb03 f202 	mul.w	r2, r3, r2
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001388:	4619      	mov	r1, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001390:	fb01 f303 	mul.w	r3, r1, r3
 8001394:	4413      	add	r3, r2
	double roll_sqrt = sqrt(
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8c4 	bl	8000524 <__aeabi_i2d>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	ec43 2b10 	vmov	d0, r2, r3
 80013a4:	f009 f98c 	bl	800a6c0 <sqrt>
 80013a8:	ed87 0b08 	vstr	d0, [r7, #32]
	if (roll_sqrt != 0.0) {
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013b8:	f7ff fb86 	bl	8000ac8 <__aeabi_dcmpeq>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d138      	bne.n	8001434 <MPU6050_Read_All+0x2ac>
			roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f8ab 	bl	8000524 <__aeabi_i2d>
 80013ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013d2:	f7ff fa3b 	bl	800084c <__aeabi_ddiv>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	ec43 2b17 	vmov	d7, r2, r3
 80013de:	eeb0 0a47 	vmov.f32	s0, s14
 80013e2:	eef0 0a67 	vmov.f32	s1, s15
 80013e6:	f009 f997 	bl	800a718 <atan>
 80013ea:	ec51 0b10 	vmov	r0, r1, d0
 80013ee:	a308      	add	r3, pc, #32	@ (adr r3, 8001410 <MPU6050_Read_All+0x288>)
 80013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f4:	f7ff f900 	bl	80005f8 <__aeabi_dmul>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001400:	e01e      	b.n	8001440 <MPU6050_Read_All+0x2b8>
 8001402:	bf00      	nop
 8001404:	f3af 8000 	nop.w
 8001408:	00000000 	.word	0x00000000
 800140c:	40606000 	.word	0x40606000
 8001410:	1a63c1f8 	.word	0x1a63c1f8
 8001414:	404ca5dc 	.word	0x404ca5dc
 8001418:	20000294 	.word	0x20000294
 800141c:	0800aeac 	.word	0x0800aeac
 8001420:	40d00000 	.word	0x40d00000
 8001424:	43aa0000 	.word	0x43aa0000
 8001428:	42121eb8 	.word	0x42121eb8
 800142c:	2000045c 	.word	0x2000045c
 8001430:	408f4000 	.word	0x408f4000
	} else {
			roll = 0.0;
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	}
	double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001446:	425b      	negs	r3, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f86b 	bl	8000524 <__aeabi_i2d>
 800144e:	4682      	mov	sl, r0
 8001450:	468b      	mov	fp, r1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f863 	bl	8000524 <__aeabi_i2d>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	ec43 2b11 	vmov	d1, r2, r3
 8001466:	ec4b ab10 	vmov	d0, sl, fp
 800146a:	f009 f927 	bl	800a6bc <atan2>
 800146e:	ec51 0b10 	vmov	r0, r1, d0
 8001472:	a347      	add	r3, pc, #284	@ (adr r3, 8001590 <MPU6050_Read_All+0x408>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f8be 	bl	80005f8 <__aeabi_dmul>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if ((pitch < -90 && DataStruct->Kalman_angle_y > 90) || (pitch > 90 && DataStruct->Kalman_angle_y < -90)) {
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4b3d      	ldr	r3, [pc, #244]	@ (8001580 <MPU6050_Read_All+0x3f8>)
 800148a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800148e:	f7ff fb25 	bl	8000adc <__aeabi_dcmplt>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00a      	beq.n	80014ae <MPU6050_Read_All+0x326>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b38      	ldr	r3, [pc, #224]	@ (8001584 <MPU6050_Read_All+0x3fc>)
 80014a4:	f7ff fb38 	bl	8000b18 <__aeabi_dcmpgt>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d114      	bne.n	80014d8 <MPU6050_Read_All+0x350>
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	4b34      	ldr	r3, [pc, #208]	@ (8001584 <MPU6050_Read_All+0x3fc>)
 80014b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014b8:	f7ff fb2e 	bl	8000b18 <__aeabi_dcmpgt>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d015      	beq.n	80014ee <MPU6050_Read_All+0x366>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001580 <MPU6050_Read_All+0x3f8>)
 80014ce:	f7ff fb05 	bl	8000adc <__aeabi_dcmplt>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00a      	beq.n	80014ee <MPU6050_Read_All+0x366>
			KalmanY.angle = pitch;
 80014d8:	492b      	ldr	r1, [pc, #172]	@ (8001588 <MPU6050_Read_All+0x400>)
 80014da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014de:	e9c1 2306 	strd	r2, r3, [r1, #24]
			DataStruct->Kalman_angle_y = pitch;
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014e8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 80014ec:	e014      	b.n	8001518 <MPU6050_Read_All+0x390>
	} else {
			DataStruct->Kalman_angle_y = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80014f4:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80014f8:	eeb0 1a47 	vmov.f32	s2, s14
 80014fc:	eef0 1a67 	vmov.f32	s3, s15
 8001500:	ed97 0b06 	vldr	d0, [r7, #24]
 8001504:	4820      	ldr	r0, [pc, #128]	@ (8001588 <MPU6050_Read_All+0x400>)
 8001506:	f000 f847 	bl	8001598 <Kalman_getAngle>
 800150a:	eeb0 7a40 	vmov.f32	s14, s0
 800150e:	eef0 7a60 	vmov.f32	s15, s1
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
	}
	if (fabs(DataStruct->Kalman_angle_y) > 90)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800151e:	4690      	mov	r8, r2
 8001520:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <MPU6050_Read_All+0x3fc>)
 800152a:	4640      	mov	r0, r8
 800152c:	4649      	mov	r1, r9
 800152e:	f7ff faf3 	bl	8000b18 <__aeabi_dcmpgt>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <MPU6050_Read_All+0x3c2>
			DataStruct->Gx = -DataStruct->Gx;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800153e:	4614      	mov	r4, r2
 8001540:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
	DataStruct->Kalman_angle_x = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8001550:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8001554:	eeb0 1a47 	vmov.f32	s2, s14
 8001558:	eef0 1a67 	vmov.f32	s3, s15
 800155c:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001560:	480a      	ldr	r0, [pc, #40]	@ (800158c <MPU6050_Read_All+0x404>)
 8001562:	f000 f819 	bl	8001598 <Kalman_getAngle>
 8001566:	eeb0 7a40 	vmov.f32	s14, s0
 800156a:	eef0 7a60 	vmov.f32	s15, s1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
}
 8001574:	3740      	adds	r7, #64	@ 0x40
 8001576:	46bd      	mov	sp, r7
 8001578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800157c:	f3af 8000 	nop.w
 8001580:	c0568000 	.word	0xc0568000
 8001584:	40568000 	.word	0x40568000
 8001588:	20000048 	.word	0x20000048
 800158c:	20000000 	.word	0x20000000
 8001590:	1a63c1f8 	.word	0x1a63c1f8
 8001594:	404ca5dc 	.word	0x404ca5dc

08001598 <Kalman_getAngle>:
  * @param  newAngle: The new measured angle
  * @param  newRate: The new measured rate
  * @param  dt: The time interval since the last update
  * @retval The estimated angle
  */
double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b096      	sub	sp, #88	@ 0x58
 800159c:	af00      	add	r7, sp, #0
 800159e:	61f8      	str	r0, [r7, #28]
 80015a0:	ed87 0b04 	vstr	d0, [r7, #16]
 80015a4:	ed87 1b02 	vstr	d1, [r7, #8]
 80015a8:	ed87 2b00 	vstr	d2, [r7]
	double rate = newRate - Kalman->bias;
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80015b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015b6:	f7fe fe67 	bl	8000288 <__aeabi_dsub>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	Kalman->angle += dt * rate;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80015c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80015cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015d0:	f7ff f812 	bl	80005f8 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4620      	mov	r0, r4
 80015da:	4629      	mov	r1, r5
 80015dc:	f7fe fe56 	bl	800028c <__adddf3>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	69f9      	ldr	r1, [r7, #28]
 80015e6:	e9c1 2306 	strd	r2, r3, [r1, #24]

	Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80015f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015fa:	f7fe fffd 	bl	80005f8 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800160c:	f7fe fe3c 	bl	8000288 <__aeabi_dsub>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800161e:	f7fe fe33 	bl	8000288 <__aeabi_dsub>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f7fe fe2c 	bl	800028c <__adddf3>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001640:	f7fe ffda 	bl	80005f8 <__aeabi_dmul>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4620      	mov	r0, r4
 800164a:	4629      	mov	r1, r5
 800164c:	f7fe fe1e 	bl	800028c <__adddf3>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	69f9      	ldr	r1, [r7, #28]
 8001656:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001666:	e9d7 2300 	ldrd	r2, r3, [r7]
 800166a:	f7fe ffc5 	bl	80005f8 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4620      	mov	r0, r4
 8001674:	4629      	mov	r1, r5
 8001676:	f7fe fe07 	bl	8000288 <__aeabi_dsub>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	69f9      	ldr	r1, [r7, #28]
 8001680:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001694:	f7fe ffb0 	bl	80005f8 <__aeabi_dmul>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4620      	mov	r0, r4
 800169e:	4629      	mov	r1, r5
 80016a0:	f7fe fdf2 	bl	8000288 <__aeabi_dsub>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	69f9      	ldr	r1, [r7, #28]
 80016aa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016be:	f7fe ff9b 	bl	80005f8 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4620      	mov	r0, r4
 80016c8:	4629      	mov	r1, r5
 80016ca:	f7fe fddf 	bl	800028c <__adddf3>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	69f9      	ldr	r1, [r7, #28]
 80016d4:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	double S = Kalman->P[0][0] + Kalman->R_measure;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016e4:	f7fe fdd2 	bl	800028c <__adddf3>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	double K[2];
	K[0] = Kalman->P[0][0] / S;
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80016f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80016fa:	f7ff f8a7 	bl	800084c <__aeabi_ddiv>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	e9c7 2308 	strd	r2, r3, [r7, #32]
	K[1] = Kalman->P[1][0] / S;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800170c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001710:	f7ff f89c 	bl	800084c <__aeabi_ddiv>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	double y = newAngle - Kalman->angle;
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001722:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001726:	f7fe fdaf 	bl	8000288 <__aeabi_dsub>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	Kalman->angle += K[0] * y;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001738:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800173c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001740:	f7fe ff5a 	bl	80005f8 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4620      	mov	r0, r4
 800174a:	4629      	mov	r1, r5
 800174c:	f7fe fd9e 	bl	800028c <__adddf3>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	69f9      	ldr	r1, [r7, #28]
 8001756:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Kalman->bias += K[1] * y;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001760:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001764:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001768:	f7fe ff46 	bl	80005f8 <__aeabi_dmul>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4620      	mov	r0, r4
 8001772:	4629      	mov	r1, r5
 8001774:	f7fe fd8a 	bl	800028c <__adddf3>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	69f9      	ldr	r1, [r7, #28]
 800177e:	e9c1 2308 	strd	r2, r3, [r1, #32]

	double P00_temp = Kalman->P[0][0];
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001788:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double P01_temp = Kalman->P[0][1];
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001792:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	Kalman->P[0][0] -= K[0] * P00_temp;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800179c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017a4:	f7fe ff28 	bl	80005f8 <__aeabi_dmul>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4620      	mov	r0, r4
 80017ae:	4629      	mov	r1, r5
 80017b0:	f7fe fd6a 	bl	8000288 <__aeabi_dsub>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	69f9      	ldr	r1, [r7, #28]
 80017ba:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	Kalman->P[0][1] -= K[0] * P01_temp;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80017c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017cc:	f7fe ff14 	bl	80005f8 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4620      	mov	r0, r4
 80017d6:	4629      	mov	r1, r5
 80017d8:	f7fe fd56 	bl	8000288 <__aeabi_dsub>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	69f9      	ldr	r1, [r7, #28]
 80017e2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	Kalman->P[1][0] -= K[1] * P00_temp;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80017ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017f4:	f7fe ff00 	bl	80005f8 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4620      	mov	r0, r4
 80017fe:	4629      	mov	r1, r5
 8001800:	f7fe fd42 	bl	8000288 <__aeabi_dsub>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	69f9      	ldr	r1, [r7, #28]
 800180a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	Kalman->P[1][1] -= K[1] * P01_temp;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001814:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001818:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800181c:	f7fe feec 	bl	80005f8 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4620      	mov	r0, r4
 8001826:	4629      	mov	r1, r5
 8001828:	f7fe fd2e 	bl	8000288 <__aeabi_dsub>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	69f9      	ldr	r1, [r7, #28]
 8001832:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	return Kalman->angle;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800183c:	ec43 2b17 	vmov	d7, r2, r3
};
 8001840:	eeb0 0a47 	vmov.f32	s0, s14
 8001844:	eef0 0a67 	vmov.f32	s1, s15
 8001848:	3758      	adds	r7, #88	@ 0x58
 800184a:	46bd      	mov	sp, r7
 800184c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <HAL_MspInit+0x44>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	4a0e      	ldr	r2, [pc, #56]	@ (8001894 <HAL_MspInit+0x44>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6193      	str	r3, [r2, #24]
 8001862:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <HAL_MspInit+0x44>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_MspInit+0x44>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a08      	ldr	r2, [pc, #32]	@ (8001894 <HAL_MspInit+0x44>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001878:	61d3      	str	r3, [r2, #28]
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_MspInit+0x44>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000

08001898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	@ 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a17      	ldr	r2, [pc, #92]	@ (8001914 <HAL_I2C_MspInit+0x7c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d127      	bne.n	800190a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	4b17      	ldr	r3, [pc, #92]	@ (8001918 <HAL_I2C_MspInit+0x80>)
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	4a16      	ldr	r2, [pc, #88]	@ (8001918 <HAL_I2C_MspInit+0x80>)
 80018c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018c4:	6153      	str	r3, [r2, #20]
 80018c6:	4b14      	ldr	r3, [pc, #80]	@ (8001918 <HAL_I2C_MspInit+0x80>)
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018d2:	23c0      	movs	r3, #192	@ 0xc0
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018d6:	2312      	movs	r3, #18
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018de:	2303      	movs	r3, #3
 80018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018e2:	2304      	movs	r3, #4
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	480b      	ldr	r0, [pc, #44]	@ (800191c <HAL_I2C_MspInit+0x84>)
 80018ee:	f000 fe05 	bl	80024fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <HAL_I2C_MspInit+0x80>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a08      	ldr	r2, [pc, #32]	@ (8001918 <HAL_I2C_MspInit+0x80>)
 80018f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_I2C_MspInit+0x80>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	@ 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40005400 	.word	0x40005400
 8001918:	40021000 	.word	0x40021000
 800191c:	48000400 	.word	0x48000400

08001920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	@ 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a42      	ldr	r2, [pc, #264]	@ (8001a48 <HAL_UART_MspInit+0x128>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d17d      	bne.n	8001a3e <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001942:	4b42      	ldr	r3, [pc, #264]	@ (8001a4c <HAL_UART_MspInit+0x12c>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	4a41      	ldr	r2, [pc, #260]	@ (8001a4c <HAL_UART_MspInit+0x12c>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194c:	6193      	str	r3, [r2, #24]
 800194e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a4c <HAL_UART_MspInit+0x12c>)
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a4c <HAL_UART_MspInit+0x12c>)
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a4c <HAL_UART_MspInit+0x12c>)
 8001960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001964:	6153      	str	r3, [r2, #20]
 8001966:	4b39      	ldr	r3, [pc, #228]	@ (8001a4c <HAL_UART_MspInit+0x12c>)
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001972:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001984:	2307      	movs	r3, #7
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001992:	f000 fdb3 	bl	80024fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001996:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <HAL_UART_MspInit+0x130>)
 8001998:	4a2e      	ldr	r2, [pc, #184]	@ (8001a54 <HAL_UART_MspInit+0x134>)
 800199a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800199c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a50 <HAL_UART_MspInit+0x130>)
 800199e:	2210      	movs	r2, #16
 80019a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a50 <HAL_UART_MspInit+0x130>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019a8:	4b29      	ldr	r3, [pc, #164]	@ (8001a50 <HAL_UART_MspInit+0x130>)
 80019aa:	2280      	movs	r2, #128	@ 0x80
 80019ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ae:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <HAL_UART_MspInit+0x130>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b4:	4b26      	ldr	r3, [pc, #152]	@ (8001a50 <HAL_UART_MspInit+0x130>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80019ba:	4b25      	ldr	r3, [pc, #148]	@ (8001a50 <HAL_UART_MspInit+0x130>)
 80019bc:	2220      	movs	r2, #32
 80019be:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019c0:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <HAL_UART_MspInit+0x130>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80019c6:	4822      	ldr	r0, [pc, #136]	@ (8001a50 <HAL_UART_MspInit+0x130>)
 80019c8:	f000 fb5d 	bl	8002086 <HAL_DMA_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80019d2:	f7ff fb43 	bl	800105c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a50 <HAL_UART_MspInit+0x130>)
 80019da:	671a      	str	r2, [r3, #112]	@ 0x70
 80019dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a50 <HAL_UART_MspInit+0x130>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80019e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a58 <HAL_UART_MspInit+0x138>)
 80019e4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a5c <HAL_UART_MspInit+0x13c>)
 80019e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <HAL_UART_MspInit+0x138>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <HAL_UART_MspInit+0x138>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019f4:	4b18      	ldr	r3, [pc, #96]	@ (8001a58 <HAL_UART_MspInit+0x138>)
 80019f6:	2280      	movs	r2, #128	@ 0x80
 80019f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019fa:	4b17      	ldr	r3, [pc, #92]	@ (8001a58 <HAL_UART_MspInit+0x138>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a00:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <HAL_UART_MspInit+0x138>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001a06:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <HAL_UART_MspInit+0x138>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a0c:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <HAL_UART_MspInit+0x138>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a12:	4811      	ldr	r0, [pc, #68]	@ (8001a58 <HAL_UART_MspInit+0x138>)
 8001a14:	f000 fb37 	bl	8002086 <HAL_DMA_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8001a1e:	f7ff fb1d 	bl	800105c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a0c      	ldr	r2, [pc, #48]	@ (8001a58 <HAL_UART_MspInit+0x138>)
 8001a26:	675a      	str	r2, [r3, #116]	@ 0x74
 8001a28:	4a0b      	ldr	r2, [pc, #44]	@ (8001a58 <HAL_UART_MspInit+0x138>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	2025      	movs	r0, #37	@ 0x25
 8001a34:	f000 faf1 	bl	800201a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a38:	2025      	movs	r0, #37	@ 0x25
 8001a3a:	f000 fb0a 	bl	8002052 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	@ 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40013800 	.word	0x40013800
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	20000370 	.word	0x20000370
 8001a54:	40020044 	.word	0x40020044
 8001a58:	200003b4 	.word	0x200003b4
 8001a5c:	40020058 	.word	0x40020058

08001a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <NMI_Handler+0x4>

08001a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <MemManage_Handler+0x4>

08001a78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <BusFault_Handler+0x4>

08001a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <UsageFault_Handler+0x4>

08001a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab6:	f000 f991 	bl	8001ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ac4:	4802      	ldr	r0, [pc, #8]	@ (8001ad0 <DMA1_Channel4_IRQHandler+0x10>)
 8001ac6:	f000 fc00 	bl	80022ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000370 	.word	0x20000370

08001ad4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ad8:	4802      	ldr	r0, [pc, #8]	@ (8001ae4 <DMA1_Channel5_IRQHandler+0x10>)
 8001ada:	f000 fbf6 	bl	80022ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200003b4 	.word	0x200003b4

08001ae8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001aec:	4802      	ldr	r0, [pc, #8]	@ (8001af8 <USART1_IRQHandler+0x10>)
 8001aee:	f003 fa0d 	bl	8004f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200002e8 	.word	0x200002e8

08001afc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
  //Enable TRCENA
  DEMCR |= ( 1 << 24);
 8001b06:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <ITM_SendChar+0x48>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b44 <ITM_SendChar+0x48>)
 8001b0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b10:	6013      	str	r3, [r2, #0]

  //enable stimulus port 0
  ITM_TRACE_EN |= ( 1 << 0);
 8001b12:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <ITM_SendChar+0x4c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a0c      	ldr	r2, [pc, #48]	@ (8001b48 <ITM_SendChar+0x4c>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6013      	str	r3, [r2, #0]

  // read FIFO status in bit [0]:
  while(!(ITM_STIMULUS_PORT0 & 1));
 8001b1e:	bf00      	nop
 8001b20:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f8      	beq.n	8001b20 <ITM_SendChar+0x24>

  //Write to ITM stimulus port0
  ITM_STIMULUS_PORT0 = ch;
 8001b2e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	6013      	str	r3, [r2, #0]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000edfc 	.word	0xe000edfc
 8001b48:	e0000e00 	.word	0xe0000e00

08001b4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return 1;
 8001b50:	2301      	movs	r3, #1
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <_kill>:

int _kill(int pid, int sig)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b66:	f005 fab5 	bl	80070d4 <__errno>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2216      	movs	r2, #22
 8001b6e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <_exit>:

void _exit (int status)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ffe7 	bl	8001b5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b8e:	bf00      	nop
 8001b90:	e7fd      	b.n	8001b8e <_exit+0x12>

08001b92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e00a      	b.n	8001bba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	4601      	mov	r1, r0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	60ba      	str	r2, [r7, #8]
 8001bb0:	b2ca      	uxtb	r2, r1
 8001bb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	dbf0      	blt.n	8001ba4 <_read+0x12>
  }

  return len;
 8001bc2:	687b      	ldr	r3, [r7, #4]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e009      	b.n	8001bf2 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	60ba      	str	r2, [r7, #8]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff88 	bl	8001afc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	dbf1      	blt.n	8001bde <_write+0x12>
  }
  return len;
 8001bfa:	687b      	ldr	r3, [r7, #4]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <_close>:

int _close(int file)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c2c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_isatty>:

int _isatty(int file)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c44:	2301      	movs	r3, #1
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c74:	4a14      	ldr	r2, [pc, #80]	@ (8001cc8 <_sbrk+0x5c>)
 8001c76:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <_sbrk+0x60>)
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c80:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <_sbrk+0x64>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d102      	bne.n	8001c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c88:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <_sbrk+0x64>)
 8001c8a:	4a12      	ldr	r2, [pc, #72]	@ (8001cd4 <_sbrk+0x68>)
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8e:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <_sbrk+0x64>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d207      	bcs.n	8001cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c9c:	f005 fa1a 	bl	80070d4 <__errno>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8001caa:	e009      	b.n	8001cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cac:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <_sbrk+0x64>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb2:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <_sbrk+0x64>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	4a05      	ldr	r2, [pc, #20]	@ (8001cd0 <_sbrk+0x64>)
 8001cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	2000a000 	.word	0x2000a000
 8001ccc:	00000400 	.word	0x00000400
 8001cd0:	20000460 	.word	0x20000460
 8001cd4:	200005b8 	.word	0x200005b8

08001cd8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <SystemInit+0x20>)
 8001cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ce2:	4a05      	ldr	r2, [pc, #20]	@ (8001cf8 <SystemInit+0x20>)
 8001ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d34 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d00:	f7ff ffea 	bl	8001cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d04:	480c      	ldr	r0, [pc, #48]	@ (8001d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d06:	490d      	ldr	r1, [pc, #52]	@ (8001d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d08:	4a0d      	ldr	r2, [pc, #52]	@ (8001d40 <LoopForever+0xe>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d0c:	e002      	b.n	8001d14 <LoopCopyDataInit>

08001d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d12:	3304      	adds	r3, #4

08001d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d18:	d3f9      	bcc.n	8001d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d48 <LoopForever+0x16>)
  movs r3, #0
 8001d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d20:	e001      	b.n	8001d26 <LoopFillZerobss>

08001d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d24:	3204      	adds	r2, #4

08001d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d28:	d3fb      	bcc.n	8001d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d2a:	f005 f9d9 	bl	80070e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d2e:	f7fe ffe1 	bl	8000cf4 <main>

08001d32 <LoopForever>:

LoopForever:
    b LoopForever
 8001d32:	e7fe      	b.n	8001d32 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d34:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d3c:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8001d40:	0800b3b0 	.word	0x0800b3b0
  ldr r2, =_sbss
 8001d44:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8001d48:	200005b4 	.word	0x200005b4

08001d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d4c:	e7fe      	b.n	8001d4c <ADC1_2_IRQHandler>
	...

08001d50 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <HAL_Init+0x28>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a07      	ldr	r2, [pc, #28]	@ (8001d78 <HAL_Init+0x28>)
 8001d5a:	f043 0310 	orr.w	r3, r3, #16
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f000 f94f 	bl	8002004 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d66:	200f      	movs	r0, #15
 8001d68:	f000 f808 	bl	8001d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6c:	f7ff fd70 	bl	8001850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40022000 	.word	0x40022000

08001d7c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d84:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <HAL_InitTick+0x54>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <HAL_InitTick+0x58>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f967 	bl	800206e <HAL_SYSTICK_Config>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00e      	b.n	8001dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d80a      	bhi.n	8001dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f000 f92f 	bl	800201a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dbc:	4a06      	ldr	r2, [pc, #24]	@ (8001dd8 <HAL_InitTick+0x5c>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000090 	.word	0x20000090
 8001dd4:	20000098 	.word	0x20000098
 8001dd8:	20000094 	.word	0x20000094

08001ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_IncTick+0x20>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_IncTick+0x24>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	4a04      	ldr	r2, [pc, #16]	@ (8001e00 <HAL_IncTick+0x24>)
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000098 	.word	0x20000098
 8001e00:	20000464 	.word	0x20000464

08001e04 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e08:	4b03      	ldr	r3, [pc, #12]	@ (8001e18 <HAL_GetTick+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000464 	.word	0x20000464

08001e1c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff ffee 	bl	8001e04 <HAL_GetTick>
 8001e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e34:	d005      	beq.n	8001e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <HAL_Delay+0x44>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e42:	bf00      	nop
 8001e44:	f7ff ffde 	bl	8001e04 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d8f7      	bhi.n	8001e44 <HAL_Delay+0x28>
  {
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000098 	.word	0x20000098

08001e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e80:	4013      	ands	r3, r2
 8001e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e96:	4a04      	ldr	r2, [pc, #16]	@ (8001ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	60d3      	str	r3, [r2, #12]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb0:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	f003 0307 	and.w	r3, r3, #7
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	db0b      	blt.n	8001ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	4907      	ldr	r1, [pc, #28]	@ (8001f00 <__NVIC_EnableIRQ+0x38>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2001      	movs	r0, #1
 8001eea:	fa00 f202 	lsl.w	r2, r0, r2
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000e100 	.word	0xe000e100

08001f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	db0a      	blt.n	8001f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	490c      	ldr	r1, [pc, #48]	@ (8001f50 <__NVIC_SetPriority+0x4c>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	0112      	lsls	r2, r2, #4
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	440b      	add	r3, r1
 8001f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f2c:	e00a      	b.n	8001f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4908      	ldr	r1, [pc, #32]	@ (8001f54 <__NVIC_SetPriority+0x50>)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	3b04      	subs	r3, #4
 8001f3c:	0112      	lsls	r2, r2, #4
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	440b      	add	r3, r1
 8001f42:	761a      	strb	r2, [r3, #24]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000e100 	.word	0xe000e100
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	@ 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f1c3 0307 	rsb	r3, r3, #7
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	bf28      	it	cs
 8001f76:	2304      	movcs	r3, #4
 8001f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	2b06      	cmp	r3, #6
 8001f80:	d902      	bls.n	8001f88 <NVIC_EncodePriority+0x30>
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3b03      	subs	r3, #3
 8001f86:	e000      	b.n	8001f8a <NVIC_EncodePriority+0x32>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43da      	mvns	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	43d9      	mvns	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	4313      	orrs	r3, r2
         );
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3724      	adds	r7, #36	@ 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fd0:	d301      	bcc.n	8001fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00f      	b.n	8001ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002000 <SysTick_Config+0x40>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fde:	210f      	movs	r1, #15
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f7ff ff8e 	bl	8001f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe8:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <SysTick_Config+0x40>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fee:	4b04      	ldr	r3, [pc, #16]	@ (8002000 <SysTick_Config+0x40>)
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	e000e010 	.word	0xe000e010

08002004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ff29 	bl	8001e64 <__NVIC_SetPriorityGrouping>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800202c:	f7ff ff3e 	bl	8001eac <__NVIC_GetPriorityGrouping>
 8002030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	6978      	ldr	r0, [r7, #20]
 8002038:	f7ff ff8e 	bl	8001f58 <NVIC_EncodePriority>
 800203c:	4602      	mov	r2, r0
 800203e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002042:	4611      	mov	r1, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff5d 	bl	8001f04 <__NVIC_SetPriority>
}
 800204a:	bf00      	nop
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800205c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff31 	bl	8001ec8 <__NVIC_EnableIRQ>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ffa2 	bl	8001fc0 <SysTick_Config>
 800207c:	4603      	mov	r3, r0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e037      	b.n	800210c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80020b2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80020b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f9c8 	bl	8002484 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_DMA_Start_IT+0x20>
 8002130:	2302      	movs	r3, #2
 8002132:	e04a      	b.n	80021ca <HAL_DMA_Start_IT+0xb6>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002142:	2b01      	cmp	r3, #1
 8002144:	d13a      	bne.n	80021bc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2202      	movs	r2, #2
 800214a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 f95c 	bl	8002428 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 020e 	orr.w	r2, r2, #14
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e00f      	b.n	80021aa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 020a 	orr.w	r2, r2, #10
 8002198:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0204 	bic.w	r2, r2, #4
 80021a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e005      	b.n	80021c8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
 80021c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e02e      	b.n	8002242 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d008      	beq.n	8002200 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2204      	movs	r2, #4
 80021f2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e020      	b.n	8002242 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 020e 	bic.w	r2, r2, #14
 800220e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002228:	2101      	movs	r1, #1
 800222a:	fa01 f202 	lsl.w	r2, r1, r2
 800222e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002260:	2b02      	cmp	r3, #2
 8002262:	d005      	beq.n	8002270 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2204      	movs	r2, #4
 8002268:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	e027      	b.n	80022c0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 020e 	bic.w	r2, r2, #14
 800227e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002298:	2101      	movs	r1, #1
 800229a:	fa01 f202 	lsl.w	r2, r1, r2
 800229e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
    }
  }
  return status;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	2204      	movs	r2, #4
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d024      	beq.n	800233c <HAL_DMA_IRQHandler+0x72>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01f      	beq.n	800233c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b00      	cmp	r3, #0
 8002308:	d107      	bne.n	800231a <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0204 	bic.w	r2, r2, #4
 8002318:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002322:	2104      	movs	r1, #4
 8002324:	fa01 f202 	lsl.w	r2, r1, r2
 8002328:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232e:	2b00      	cmp	r3, #0
 8002330:	d06a      	beq.n	8002408 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800233a:	e065      	b.n	8002408 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	2202      	movs	r2, #2
 8002342:	409a      	lsls	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02c      	beq.n	80023a6 <HAL_DMA_IRQHandler+0xdc>
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d027      	beq.n	80023a6 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10b      	bne.n	800237c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 020a 	bic.w	r2, r2, #10
 8002372:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002384:	2102      	movs	r1, #2
 8002386:	fa01 f202 	lsl.w	r2, r1, r2
 800238a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	d035      	beq.n	8002408 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023a4:	e030      	b.n	8002408 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	2208      	movs	r2, #8
 80023ac:	409a      	lsls	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d028      	beq.n	8002408 <HAL_DMA_IRQHandler+0x13e>
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d023      	beq.n	8002408 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 020e 	bic.w	r2, r2, #14
 80023ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d8:	2101      	movs	r1, #1
 80023da:	fa01 f202 	lsl.w	r2, r1, r2
 80023de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d004      	beq.n	8002408 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	4798      	blx	r3
    }
  }
}
 8002406:	e7ff      	b.n	8002408 <HAL_DMA_IRQHandler+0x13e>
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243e:	2101      	movs	r1, #1
 8002440:	fa01 f202 	lsl.w	r2, r1, r2
 8002444:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b10      	cmp	r3, #16
 8002454:	d108      	bne.n	8002468 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002466:	e007      	b.n	8002478 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	60da      	str	r2, [r3, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	4b14      	ldr	r3, [pc, #80]	@ (80024e4 <DMA_CalcBaseAndBitshift+0x60>)
 8002494:	429a      	cmp	r2, r3
 8002496:	d80f      	bhi.n	80024b8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <DMA_CalcBaseAndBitshift+0x64>)
 80024a0:	4413      	add	r3, r2
 80024a2:	4a12      	ldr	r2, [pc, #72]	@ (80024ec <DMA_CalcBaseAndBitshift+0x68>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	009a      	lsls	r2, r3, #2
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a0f      	ldr	r2, [pc, #60]	@ (80024f0 <DMA_CalcBaseAndBitshift+0x6c>)
 80024b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80024b6:	e00e      	b.n	80024d6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <DMA_CalcBaseAndBitshift+0x70>)
 80024c0:	4413      	add	r3, r2
 80024c2:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <DMA_CalcBaseAndBitshift+0x68>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	009a      	lsls	r2, r3, #2
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a09      	ldr	r2, [pc, #36]	@ (80024f8 <DMA_CalcBaseAndBitshift+0x74>)
 80024d4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40020407 	.word	0x40020407
 80024e8:	bffdfff8 	.word	0xbffdfff8
 80024ec:	cccccccd 	.word	0xcccccccd
 80024f0:	40020000 	.word	0x40020000
 80024f4:	bffdfbf8 	.word	0xbffdfbf8
 80024f8:	40020400 	.word	0x40020400

080024fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250a:	e154      	b.n	80027b6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	2101      	movs	r1, #1
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fa01 f303 	lsl.w	r3, r1, r3
 8002518:	4013      	ands	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 8146 	beq.w	80027b0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	2b01      	cmp	r3, #1
 800252e:	d005      	beq.n	800253c <HAL_GPIO_Init+0x40>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d130      	bne.n	800259e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002572:	2201      	movs	r2, #1
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	f003 0201 	and.w	r2, r3, #1
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d017      	beq.n	80025da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	2203      	movs	r2, #3
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d123      	bne.n	800262e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	08da      	lsrs	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3208      	adds	r2, #8
 80025ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	220f      	movs	r2, #15
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	691a      	ldr	r2, [r3, #16]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	08da      	lsrs	r2, r3, #3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3208      	adds	r2, #8
 8002628:	6939      	ldr	r1, [r7, #16]
 800262a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	2203      	movs	r2, #3
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0203 	and.w	r2, r3, #3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80a0 	beq.w	80027b0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002670:	4b58      	ldr	r3, [pc, #352]	@ (80027d4 <HAL_GPIO_Init+0x2d8>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	4a57      	ldr	r2, [pc, #348]	@ (80027d4 <HAL_GPIO_Init+0x2d8>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6193      	str	r3, [r2, #24]
 800267c:	4b55      	ldr	r3, [pc, #340]	@ (80027d4 <HAL_GPIO_Init+0x2d8>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002688:	4a53      	ldr	r2, [pc, #332]	@ (80027d8 <HAL_GPIO_Init+0x2dc>)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	089b      	lsrs	r3, r3, #2
 800268e:	3302      	adds	r3, #2
 8002690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	220f      	movs	r2, #15
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80026b2:	d019      	beq.n	80026e8 <HAL_GPIO_Init+0x1ec>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a49      	ldr	r2, [pc, #292]	@ (80027dc <HAL_GPIO_Init+0x2e0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d013      	beq.n	80026e4 <HAL_GPIO_Init+0x1e8>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a48      	ldr	r2, [pc, #288]	@ (80027e0 <HAL_GPIO_Init+0x2e4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00d      	beq.n	80026e0 <HAL_GPIO_Init+0x1e4>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a47      	ldr	r2, [pc, #284]	@ (80027e4 <HAL_GPIO_Init+0x2e8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d007      	beq.n	80026dc <HAL_GPIO_Init+0x1e0>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a46      	ldr	r2, [pc, #280]	@ (80027e8 <HAL_GPIO_Init+0x2ec>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d101      	bne.n	80026d8 <HAL_GPIO_Init+0x1dc>
 80026d4:	2304      	movs	r3, #4
 80026d6:	e008      	b.n	80026ea <HAL_GPIO_Init+0x1ee>
 80026d8:	2305      	movs	r3, #5
 80026da:	e006      	b.n	80026ea <HAL_GPIO_Init+0x1ee>
 80026dc:	2303      	movs	r3, #3
 80026de:	e004      	b.n	80026ea <HAL_GPIO_Init+0x1ee>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e002      	b.n	80026ea <HAL_GPIO_Init+0x1ee>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <HAL_GPIO_Init+0x1ee>
 80026e8:	2300      	movs	r3, #0
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	f002 0203 	and.w	r2, r2, #3
 80026f0:	0092      	lsls	r2, r2, #2
 80026f2:	4093      	lsls	r3, r2
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026fa:	4937      	ldr	r1, [pc, #220]	@ (80027d8 <HAL_GPIO_Init+0x2dc>)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	3302      	adds	r3, #2
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002708:	4b38      	ldr	r3, [pc, #224]	@ (80027ec <HAL_GPIO_Init+0x2f0>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	43db      	mvns	r3, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800272c:	4a2f      	ldr	r2, [pc, #188]	@ (80027ec <HAL_GPIO_Init+0x2f0>)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002732:	4b2e      	ldr	r3, [pc, #184]	@ (80027ec <HAL_GPIO_Init+0x2f0>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	43db      	mvns	r3, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002756:	4a25      	ldr	r2, [pc, #148]	@ (80027ec <HAL_GPIO_Init+0x2f0>)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800275c:	4b23      	ldr	r3, [pc, #140]	@ (80027ec <HAL_GPIO_Init+0x2f0>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	43db      	mvns	r3, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002780:	4a1a      	ldr	r2, [pc, #104]	@ (80027ec <HAL_GPIO_Init+0x2f0>)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002786:	4b19      	ldr	r3, [pc, #100]	@ (80027ec <HAL_GPIO_Init+0x2f0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43db      	mvns	r3, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027aa:	4a10      	ldr	r2, [pc, #64]	@ (80027ec <HAL_GPIO_Init+0x2f0>)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	3301      	adds	r3, #1
 80027b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f47f aea3 	bne.w	800250c <HAL_GPIO_Init+0x10>
  }
}
 80027c6:	bf00      	nop
 80027c8:	bf00      	nop
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40010000 	.word	0x40010000
 80027dc:	48000400 	.word	0x48000400
 80027e0:	48000800 	.word	0x48000800
 80027e4:	48000c00 	.word	0x48000c00
 80027e8:	48001000 	.word	0x48001000
 80027ec:	40010400 	.word	0x40010400

080027f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e08d      	b.n	800291e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d106      	bne.n	800281c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff f83e 	bl	8001898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2224      	movs	r2, #36	@ 0x24
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002840:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002850:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	e006      	b.n	8002878 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002876:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d108      	bne.n	8002892 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	e007      	b.n	80028a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69d9      	ldr	r1, [r3, #28]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1a      	ldr	r2, [r3, #32]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	4608      	mov	r0, r1
 8002932:	4611      	mov	r1, r2
 8002934:	461a      	mov	r2, r3
 8002936:	4603      	mov	r3, r0
 8002938:	817b      	strh	r3, [r7, #10]
 800293a:	460b      	mov	r3, r1
 800293c:	813b      	strh	r3, [r7, #8]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b20      	cmp	r3, #32
 800294c:	f040 80f9 	bne.w	8002b42 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_I2C_Mem_Write+0x34>
 8002956:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002962:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0ed      	b.n	8002b44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_I2C_Mem_Write+0x4e>
 8002972:	2302      	movs	r3, #2
 8002974:	e0e6      	b.n	8002b44 <HAL_I2C_Mem_Write+0x21c>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800297e:	f7ff fa41 	bl	8001e04 <HAL_GetTick>
 8002982:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2319      	movs	r3, #25
 800298a:	2201      	movs	r2, #1
 800298c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fac3 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0d1      	b.n	8002b44 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2221      	movs	r2, #33	@ 0x21
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2240      	movs	r2, #64	@ 0x40
 80029ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a3a      	ldr	r2, [r7, #32]
 80029ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80029c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029c8:	88f8      	ldrh	r0, [r7, #6]
 80029ca:	893a      	ldrh	r2, [r7, #8]
 80029cc:	8979      	ldrh	r1, [r7, #10]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	4603      	mov	r3, r0
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f9d3 	bl	8002d84 <I2C_RequestMemoryWrite>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0a9      	b.n	8002b44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2bff      	cmp	r3, #255	@ 0xff
 80029f8:	d90e      	bls.n	8002a18 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	22ff      	movs	r2, #255	@ 0xff
 80029fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	8979      	ldrh	r1, [r7, #10]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 fc47 	bl	80032a4 <I2C_TransferConfig>
 8002a16:	e00f      	b.n	8002a38 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	8979      	ldrh	r1, [r7, #10]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fc36 	bl	80032a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fac6 	bl	8002fce <I2C_WaitOnTXISFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e07b      	b.n	8002b44 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d034      	beq.n	8002af0 <HAL_I2C_Mem_Write+0x1c8>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d130      	bne.n	8002af0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a94:	2200      	movs	r2, #0
 8002a96:	2180      	movs	r1, #128	@ 0x80
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fa3f 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e04d      	b.n	8002b44 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2bff      	cmp	r3, #255	@ 0xff
 8002ab0:	d90e      	bls.n	8002ad0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	22ff      	movs	r2, #255	@ 0xff
 8002ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	8979      	ldrh	r1, [r7, #10]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fbeb 	bl	80032a4 <I2C_TransferConfig>
 8002ace:	e00f      	b.n	8002af0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	8979      	ldrh	r1, [r7, #10]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fbda 	bl	80032a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d19e      	bne.n	8002a38 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 faac 	bl	800305c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e01a      	b.n	8002b44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2220      	movs	r2, #32
 8002b14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6859      	ldr	r1, [r3, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b0a      	ldr	r3, [pc, #40]	@ (8002b4c <HAL_I2C_Mem_Write+0x224>)
 8002b22:	400b      	ands	r3, r1
 8002b24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e000      	b.n	8002b44 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b42:	2302      	movs	r3, #2
  }
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	fe00e800 	.word	0xfe00e800

08002b50 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	4608      	mov	r0, r1
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	817b      	strh	r3, [r7, #10]
 8002b62:	460b      	mov	r3, r1
 8002b64:	813b      	strh	r3, [r7, #8]
 8002b66:	4613      	mov	r3, r2
 8002b68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	f040 80fd 	bne.w	8002d72 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_I2C_Mem_Read+0x34>
 8002b7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b8a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0f1      	b.n	8002d74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_I2C_Mem_Read+0x4e>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e0ea      	b.n	8002d74 <HAL_I2C_Mem_Read+0x224>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ba6:	f7ff f92d 	bl	8001e04 <HAL_GetTick>
 8002baa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2319      	movs	r3, #25
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f9af 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0d5      	b.n	8002d74 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2222      	movs	r2, #34	@ 0x22
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2240      	movs	r2, #64	@ 0x40
 8002bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a3a      	ldr	r2, [r7, #32]
 8002be2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bf0:	88f8      	ldrh	r0, [r7, #6]
 8002bf2:	893a      	ldrh	r2, [r7, #8]
 8002bf4:	8979      	ldrh	r1, [r7, #10]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	4603      	mov	r3, r0
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 f913 	bl	8002e2c <I2C_RequestMemoryRead>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0ad      	b.n	8002d74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2bff      	cmp	r3, #255	@ 0xff
 8002c20:	d90e      	bls.n	8002c40 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	8979      	ldrh	r1, [r7, #10]
 8002c30:	4b52      	ldr	r3, [pc, #328]	@ (8002d7c <HAL_I2C_Mem_Read+0x22c>)
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 fb33 	bl	80032a4 <I2C_TransferConfig>
 8002c3e:	e00f      	b.n	8002c60 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	8979      	ldrh	r1, [r7, #10]
 8002c52:	4b4a      	ldr	r3, [pc, #296]	@ (8002d7c <HAL_I2C_Mem_Read+0x22c>)
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fb22 	bl	80032a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c66:	2200      	movs	r2, #0
 8002c68:	2104      	movs	r1, #4
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f956 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e07c      	b.n	8002d74 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d034      	beq.n	8002d20 <HAL_I2C_Mem_Read+0x1d0>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d130      	bne.n	8002d20 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2180      	movs	r1, #128	@ 0x80
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f927 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e04d      	b.n	8002d74 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2bff      	cmp	r3, #255	@ 0xff
 8002ce0:	d90e      	bls.n	8002d00 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	8979      	ldrh	r1, [r7, #10]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fad3 	bl	80032a4 <I2C_TransferConfig>
 8002cfe:	e00f      	b.n	8002d20 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	8979      	ldrh	r1, [r7, #10]
 8002d12:	2300      	movs	r3, #0
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fac2 	bl	80032a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d19a      	bne.n	8002c60 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f994 	bl	800305c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e01a      	b.n	8002d74 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2220      	movs	r2, #32
 8002d44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <HAL_I2C_Mem_Read+0x230>)
 8002d52:	400b      	ands	r3, r1
 8002d54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e000      	b.n	8002d74 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d72:	2302      	movs	r3, #2
  }
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	80002400 	.word	0x80002400
 8002d80:	fe00e800 	.word	0xfe00e800

08002d84 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	4611      	mov	r1, r2
 8002d90:	461a      	mov	r2, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	817b      	strh	r3, [r7, #10]
 8002d96:	460b      	mov	r3, r1
 8002d98:	813b      	strh	r3, [r7, #8]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	8979      	ldrh	r1, [r7, #10]
 8002da4:	4b20      	ldr	r3, [pc, #128]	@ (8002e28 <I2C_RequestMemoryWrite+0xa4>)
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fa79 	bl	80032a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	69b9      	ldr	r1, [r7, #24]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f909 	bl	8002fce <I2C_WaitOnTXISFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e02c      	b.n	8002e20 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d105      	bne.n	8002dd8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dcc:	893b      	ldrh	r3, [r7, #8]
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dd6:	e015      	b.n	8002e04 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dd8:	893b      	ldrh	r3, [r7, #8]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	69b9      	ldr	r1, [r7, #24]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f8ef 	bl	8002fce <I2C_WaitOnTXISFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e012      	b.n	8002e20 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dfa:	893b      	ldrh	r3, [r7, #8]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2180      	movs	r1, #128	@ 0x80
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f884 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	80002000 	.word	0x80002000

08002e2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	4608      	mov	r0, r1
 8002e36:	4611      	mov	r1, r2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	817b      	strh	r3, [r7, #10]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	813b      	strh	r3, [r7, #8]
 8002e42:	4613      	mov	r3, r2
 8002e44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	8979      	ldrh	r1, [r7, #10]
 8002e4c:	4b20      	ldr	r3, [pc, #128]	@ (8002ed0 <I2C_RequestMemoryRead+0xa4>)
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	2300      	movs	r3, #0
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 fa26 	bl	80032a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	69b9      	ldr	r1, [r7, #24]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f8b6 	bl	8002fce <I2C_WaitOnTXISFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e02c      	b.n	8002ec6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d105      	bne.n	8002e7e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e72:	893b      	ldrh	r3, [r7, #8]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e7c:	e015      	b.n	8002eaa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e7e:	893b      	ldrh	r3, [r7, #8]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	69b9      	ldr	r1, [r7, #24]
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f89c 	bl	8002fce <I2C_WaitOnTXISFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e012      	b.n	8002ec6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ea0:	893b      	ldrh	r3, [r7, #8]
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2140      	movs	r1, #64	@ 0x40
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f831 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	80002000 	.word	0x80002000

08002ed4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d103      	bne.n	8002ef2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d007      	beq.n	8002f10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	619a      	str	r2, [r3, #24]
  }
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f2c:	e03b      	b.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	6839      	ldr	r1, [r7, #0]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f8d6 	bl	80030e4 <I2C_IsErrorOccurred>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e041      	b.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d02d      	beq.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4a:	f7fe ff5b 	bl	8001e04 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d302      	bcc.n	8002f60 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d122      	bne.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d113      	bne.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f82:	f043 0220 	orr.w	r2, r3, #32
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e00f      	b.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699a      	ldr	r2, [r3, #24]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	bf0c      	ite	eq
 8002fb6:	2301      	moveq	r3, #1
 8002fb8:	2300      	movne	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d0b4      	beq.n	8002f2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fda:	e033      	b.n	8003044 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f87f 	bl	80030e4 <I2C_IsErrorOccurred>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e031      	b.n	8003054 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d025      	beq.n	8003044 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff8:	f7fe ff04 	bl	8001e04 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	429a      	cmp	r2, r3
 8003006:	d302      	bcc.n	800300e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d11a      	bne.n	8003044 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b02      	cmp	r3, #2
 800301a:	d013      	beq.n	8003044 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e007      	b.n	8003054 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b02      	cmp	r3, #2
 8003050:	d1c4      	bne.n	8002fdc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003068:	e02f      	b.n	80030ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f838 	bl	80030e4 <I2C_IsErrorOccurred>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e02d      	b.n	80030da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307e:	f7fe fec1 	bl	8001e04 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	429a      	cmp	r2, r3
 800308c:	d302      	bcc.n	8003094 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d11a      	bne.n	80030ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b20      	cmp	r3, #32
 80030a0:	d013      	beq.n	80030ca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	f043 0220 	orr.w	r2, r3, #32
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e007      	b.n	80030da <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d1c8      	bne.n	800306a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08a      	sub	sp, #40	@ 0x28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	d068      	beq.n	80031e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2210      	movs	r2, #16
 8003116:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003118:	e049      	b.n	80031ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d045      	beq.n	80031ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003122:	f7fe fe6f 	bl	8001e04 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	d302      	bcc.n	8003138 <I2C_IsErrorOccurred+0x54>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d13a      	bne.n	80031ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003142:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800314a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003156:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800315a:	d121      	bne.n	80031a0 <I2C_IsErrorOccurred+0xbc>
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003162:	d01d      	beq.n	80031a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	2b20      	cmp	r3, #32
 8003168:	d01a      	beq.n	80031a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003178:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800317a:	f7fe fe43 	bl	8001e04 <HAL_GetTick>
 800317e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003180:	e00e      	b.n	80031a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003182:	f7fe fe3f 	bl	8001e04 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b19      	cmp	r3, #25
 800318e:	d907      	bls.n	80031a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	f043 0320 	orr.w	r3, r3, #32
 8003196:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800319e:	e006      	b.n	80031ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d1e9      	bne.n	8003182 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	d003      	beq.n	80031c4 <I2C_IsErrorOccurred+0xe0>
 80031bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0aa      	beq.n	800311a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d103      	bne.n	80031d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2220      	movs	r2, #32
 80031d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	f043 0304 	orr.w	r3, r3, #4
 80031da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00b      	beq.n	800320c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003204:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00b      	beq.n	800322e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	f043 0308 	orr.w	r3, r3, #8
 800321c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003226:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00b      	beq.n	8003250 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	f043 0302 	orr.w	r3, r3, #2
 800323e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003248:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01c      	beq.n	8003292 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f7ff fe3b 	bl	8002ed4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b0d      	ldr	r3, [pc, #52]	@ (80032a0 <I2C_IsErrorOccurred+0x1bc>)
 800326a:	400b      	ands	r3, r1
 800326c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	431a      	orrs	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003292:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003296:	4618      	mov	r0, r3
 8003298:	3728      	adds	r7, #40	@ 0x28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	fe00e800 	.word	0xfe00e800

080032a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	460b      	mov	r3, r1
 80032b0:	817b      	strh	r3, [r7, #10]
 80032b2:	4613      	mov	r3, r2
 80032b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032b6:	897b      	ldrh	r3, [r7, #10]
 80032b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032bc:	7a7b      	ldrb	r3, [r7, #9]
 80032be:	041b      	lsls	r3, r3, #16
 80032c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	0d5b      	lsrs	r3, r3, #21
 80032de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80032e2:	4b08      	ldr	r3, [pc, #32]	@ (8003304 <I2C_TransferConfig+0x60>)
 80032e4:	430b      	orrs	r3, r1
 80032e6:	43db      	mvns	r3, r3
 80032e8:	ea02 0103 	and.w	r1, r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032f6:	bf00      	nop
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	03ff63ff 	.word	0x03ff63ff

08003308 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b20      	cmp	r3, #32
 800331c:	d138      	bne.n	8003390 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003328:	2302      	movs	r3, #2
 800332a:	e032      	b.n	8003392 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	@ 0x24
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800335a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6819      	ldr	r1, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d139      	bne.n	8003428 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033be:	2302      	movs	r3, #2
 80033c0:	e033      	b.n	800342a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2224      	movs	r2, #36	@ 0x24
 80033ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	e000      	b.n	800342a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
  }
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800343e:	af00      	add	r7, sp, #0
 8003440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003444:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003448:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800344a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d102      	bne.n	800345e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	f001 b823 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003462:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 817d 	beq.w	800376e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003474:	4bbc      	ldr	r3, [pc, #752]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 030c 	and.w	r3, r3, #12
 800347c:	2b04      	cmp	r3, #4
 800347e:	d00c      	beq.n	800349a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003480:	4bb9      	ldr	r3, [pc, #740]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 030c 	and.w	r3, r3, #12
 8003488:	2b08      	cmp	r3, #8
 800348a:	d15c      	bne.n	8003546 <HAL_RCC_OscConfig+0x10e>
 800348c:	4bb6      	ldr	r3, [pc, #728]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003498:	d155      	bne.n	8003546 <HAL_RCC_OscConfig+0x10e>
 800349a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800349e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <HAL_RCC_OscConfig+0x94>
 80034c6:	4ba8      	ldr	r3, [pc, #672]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	e015      	b.n	80034f8 <HAL_RCC_OscConfig+0xc0>
 80034cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034d0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80034e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034e4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80034e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80034f4:	4b9c      	ldr	r3, [pc, #624]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 80034f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034fc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003500:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003504:	fa92 f2a2 	rbit	r2, r2
 8003508:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800350c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003510:	fab2 f282 	clz	r2, r2
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	f042 0220 	orr.w	r2, r2, #32
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	f002 021f 	and.w	r2, r2, #31
 8003520:	2101      	movs	r1, #1
 8003522:	fa01 f202 	lsl.w	r2, r1, r2
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 811f 	beq.w	800376c <HAL_RCC_OscConfig+0x334>
 800352e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003532:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 8116 	bne.w	800376c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	f000 bfaf 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003556:	d106      	bne.n	8003566 <HAL_RCC_OscConfig+0x12e>
 8003558:	4b83      	ldr	r3, [pc, #524]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a82      	ldr	r2, [pc, #520]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 800355e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	e036      	b.n	80035d4 <HAL_RCC_OscConfig+0x19c>
 8003566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800356a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0x158>
 8003576:	4b7c      	ldr	r3, [pc, #496]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a7b      	ldr	r2, [pc, #492]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 800357c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b79      	ldr	r3, [pc, #484]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a78      	ldr	r2, [pc, #480]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 8003588:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e021      	b.n	80035d4 <HAL_RCC_OscConfig+0x19c>
 8003590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003594:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035a0:	d10c      	bne.n	80035bc <HAL_RCC_OscConfig+0x184>
 80035a2:	4b71      	ldr	r3, [pc, #452]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a70      	ldr	r2, [pc, #448]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 80035a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a6d      	ldr	r2, [pc, #436]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	e00b      	b.n	80035d4 <HAL_RCC_OscConfig+0x19c>
 80035bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a69      	ldr	r2, [pc, #420]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 80035c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	4b67      	ldr	r3, [pc, #412]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a66      	ldr	r2, [pc, #408]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 80035ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035d2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035d4:	4b64      	ldr	r3, [pc, #400]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	f023 020f 	bic.w	r2, r3, #15
 80035dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	495f      	ldr	r1, [pc, #380]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d059      	beq.n	80036b2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fe:	f7fe fc01 	bl	8001e04 <HAL_GetTick>
 8003602:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	e00a      	b.n	800361e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003608:	f7fe fbfc 	bl	8001e04 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b64      	cmp	r3, #100	@ 0x64
 8003616:	d902      	bls.n	800361e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	f000 bf43 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>
 800361e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003622:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003632:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	095b      	lsrs	r3, r3, #5
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d102      	bne.n	8003650 <HAL_RCC_OscConfig+0x218>
 800364a:	4b47      	ldr	r3, [pc, #284]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	e015      	b.n	800367c <HAL_RCC_OscConfig+0x244>
 8003650:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003654:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003664:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003668:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800366c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003678:	4b3b      	ldr	r3, [pc, #236]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003680:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003684:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003688:	fa92 f2a2 	rbit	r2, r2
 800368c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003690:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003694:	fab2 f282 	clz	r2, r2
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	f042 0220 	orr.w	r2, r2, #32
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	f002 021f 	and.w	r2, r2, #31
 80036a4:	2101      	movs	r1, #1
 80036a6:	fa01 f202 	lsl.w	r2, r1, r2
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ab      	beq.n	8003608 <HAL_RCC_OscConfig+0x1d0>
 80036b0:	e05d      	b.n	800376e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b2:	f7fe fba7 	bl	8001e04 <HAL_GetTick>
 80036b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036bc:	f7fe fba2 	bl	8001e04 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b64      	cmp	r3, #100	@ 0x64
 80036ca:	d902      	bls.n	80036d2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	f000 bee9 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>
 80036d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036d6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80036e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d102      	bne.n	8003704 <HAL_RCC_OscConfig+0x2cc>
 80036fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	e015      	b.n	8003730 <HAL_RCC_OscConfig+0x2f8>
 8003704:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003708:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003718:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800371c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003720:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800372c:	4b0e      	ldr	r3, [pc, #56]	@ (8003768 <HAL_RCC_OscConfig+0x330>)
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003734:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003738:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800373c:	fa92 f2a2 	rbit	r2, r2
 8003740:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003744:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003748:	fab2 f282 	clz	r2, r2
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	f042 0220 	orr.w	r2, r2, #32
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	f002 021f 	and.w	r2, r2, #31
 8003758:	2101      	movs	r1, #1
 800375a:	fa01 f202 	lsl.w	r2, r1, r2
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ab      	bne.n	80036bc <HAL_RCC_OscConfig+0x284>
 8003764:	e003      	b.n	800376e <HAL_RCC_OscConfig+0x336>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003772:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 817d 	beq.w	8003a7e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003784:	4ba6      	ldr	r3, [pc, #664]	@ (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00b      	beq.n	80037a8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003790:	4ba3      	ldr	r3, [pc, #652]	@ (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b08      	cmp	r3, #8
 800379a:	d172      	bne.n	8003882 <HAL_RCC_OscConfig+0x44a>
 800379c:	4ba0      	ldr	r3, [pc, #640]	@ (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d16c      	bne.n	8003882 <HAL_RCC_OscConfig+0x44a>
 80037a8:	2302      	movs	r3, #2
 80037aa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80037ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d102      	bne.n	80037d8 <HAL_RCC_OscConfig+0x3a0>
 80037d2:	4b93      	ldr	r3, [pc, #588]	@ (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	e013      	b.n	8003800 <HAL_RCC_OscConfig+0x3c8>
 80037d8:	2302      	movs	r3, #2
 80037da:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80037e2:	fa93 f3a3 	rbit	r3, r3
 80037e6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80037ea:	2302      	movs	r3, #2
 80037ec:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80037f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80037fc:	4b88      	ldr	r3, [pc, #544]	@ (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	2202      	movs	r2, #2
 8003802:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003806:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800380a:	fa92 f2a2 	rbit	r2, r2
 800380e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003812:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003816:	fab2 f282 	clz	r2, r2
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	f042 0220 	orr.w	r2, r2, #32
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	f002 021f 	and.w	r2, r2, #31
 8003826:	2101      	movs	r1, #1
 8003828:	fa01 f202 	lsl.w	r2, r1, r2
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCC_OscConfig+0x410>
 8003832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003836:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d002      	beq.n	8003848 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	f000 be2e 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003848:	4b75      	ldr	r3, [pc, #468]	@ (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003854:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	21f8      	movs	r1, #248	@ 0xf8
 800385e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003866:	fa91 f1a1 	rbit	r1, r1
 800386a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800386e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003872:	fab1 f181 	clz	r1, r1
 8003876:	b2c9      	uxtb	r1, r1
 8003878:	408b      	lsls	r3, r1
 800387a:	4969      	ldr	r1, [pc, #420]	@ (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 800387c:	4313      	orrs	r3, r2
 800387e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003880:	e0fd      	b.n	8003a7e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003886:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8088 	beq.w	80039a4 <HAL_RCC_OscConfig+0x56c>
 8003894:	2301      	movs	r3, #1
 8003896:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80038a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	461a      	mov	r2, r3
 80038bc:	2301      	movs	r3, #1
 80038be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7fe faa0 	bl	8001e04 <HAL_GetTick>
 80038c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c8:	e00a      	b.n	80038e0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ca:	f7fe fa9b 	bl	8001e04 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d902      	bls.n	80038e0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	f000 bde2 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>
 80038e0:	2302      	movs	r3, #2
 80038e2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80038f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b01      	cmp	r3, #1
 8003908:	d102      	bne.n	8003910 <HAL_RCC_OscConfig+0x4d8>
 800390a:	4b45      	ldr	r3, [pc, #276]	@ (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	e013      	b.n	8003938 <HAL_RCC_OscConfig+0x500>
 8003910:	2302      	movs	r3, #2
 8003912:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003922:	2302      	movs	r3, #2
 8003924:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003928:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800392c:	fa93 f3a3 	rbit	r3, r3
 8003930:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003934:	4b3a      	ldr	r3, [pc, #232]	@ (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	2202      	movs	r2, #2
 800393a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800393e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003942:	fa92 f2a2 	rbit	r2, r2
 8003946:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800394a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800394e:	fab2 f282 	clz	r2, r2
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	f042 0220 	orr.w	r2, r2, #32
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	f002 021f 	and.w	r2, r2, #31
 800395e:	2101      	movs	r1, #1
 8003960:	fa01 f202 	lsl.w	r2, r1, r2
 8003964:	4013      	ands	r3, r2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0af      	beq.n	80038ca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396a:	4b2d      	ldr	r3, [pc, #180]	@ (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003976:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	21f8      	movs	r1, #248	@ 0xf8
 8003980:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003984:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003988:	fa91 f1a1 	rbit	r1, r1
 800398c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003990:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003994:	fab1 f181 	clz	r1, r1
 8003998:	b2c9      	uxtb	r1, r1
 800399a:	408b      	lsls	r3, r1
 800399c:	4920      	ldr	r1, [pc, #128]	@ (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]
 80039a2:	e06c      	b.n	8003a7e <HAL_RCC_OscConfig+0x646>
 80039a4:	2301      	movs	r3, #1
 80039a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80039b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80039c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	461a      	mov	r2, r3
 80039cc:	2300      	movs	r3, #0
 80039ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d0:	f7fe fa18 	bl	8001e04 <HAL_GetTick>
 80039d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039da:	f7fe fa13 	bl	8001e04 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d902      	bls.n	80039f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	f000 bd5a 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>
 80039f0:	2302      	movs	r3, #2
 80039f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80039fa:	fa93 f3a3 	rbit	r3, r3
 80039fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	fab3 f383 	clz	r3, r3
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d104      	bne.n	8003a24 <HAL_RCC_OscConfig+0x5ec>
 8003a1a:	4b01      	ldr	r3, [pc, #4]	@ (8003a20 <HAL_RCC_OscConfig+0x5e8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	e015      	b.n	8003a4c <HAL_RCC_OscConfig+0x614>
 8003a20:	40021000 	.word	0x40021000
 8003a24:	2302      	movs	r3, #2
 8003a26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003a2e:	fa93 f3a3 	rbit	r3, r3
 8003a32:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003a36:	2302      	movs	r3, #2
 8003a38:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003a3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a40:	fa93 f3a3 	rbit	r3, r3
 8003a44:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003a48:	4bc8      	ldr	r3, [pc, #800]	@ (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003a52:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003a56:	fa92 f2a2 	rbit	r2, r2
 8003a5a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003a5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003a62:	fab2 f282 	clz	r2, r2
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	f042 0220 	orr.w	r2, r2, #32
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	f002 021f 	and.w	r2, r2, #31
 8003a72:	2101      	movs	r1, #1
 8003a74:	fa01 f202 	lsl.w	r2, r1, r2
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1ad      	bne.n	80039da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8110 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d079      	beq.n	8003b98 <HAL_RCC_OscConfig+0x760>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003aae:	fa93 f3a3 	rbit	r3, r3
 8003ab2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aba:	fab3 f383 	clz	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4bab      	ldr	r3, [pc, #684]	@ (8003d70 <HAL_RCC_OscConfig+0x938>)
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2301      	movs	r3, #1
 8003acc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ace:	f7fe f999 	bl	8001e04 <HAL_GetTick>
 8003ad2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad8:	f7fe f994 	bl	8001e04 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d902      	bls.n	8003aee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	f000 bcdb 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>
 8003aee:	2302      	movs	r3, #2
 8003af0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b04:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003b08:	2202      	movs	r2, #2
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b10:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	fa93 f2a3 	rbit	r2, r3
 8003b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	fa93 f2a3 	rbit	r2, r3
 8003b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003b46:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b48:	4b88      	ldr	r3, [pc, #544]	@ (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003b4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003b54:	2102      	movs	r1, #2
 8003b56:	6019      	str	r1, [r3, #0]
 8003b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b5c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	fa93 f1a3 	rbit	r1, r3
 8003b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b6a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003b6e:	6019      	str	r1, [r3, #0]
  return result;
 8003b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b74:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0a0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x6a0>
 8003b96:	e08d      	b.n	8003cb4 <HAL_RCC_OscConfig+0x87c>
 8003b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b9c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	fa93 f2a3 	rbit	r2, r3
 8003bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003bba:	601a      	str	r2, [r3, #0]
  return result;
 8003bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bc0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003bc4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4b68      	ldr	r3, [pc, #416]	@ (8003d70 <HAL_RCC_OscConfig+0x938>)
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bda:	f7fe f913 	bl	8001e04 <HAL_GetTick>
 8003bde:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be2:	e00a      	b.n	8003bfa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be4:	f7fe f90e 	bl	8001e04 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d902      	bls.n	8003bfa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	f000 bc55 	b.w	80044a4 <HAL_RCC_OscConfig+0x106c>
 8003bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bfe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003c02:	2202      	movs	r2, #2
 8003c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	fa93 f2a3 	rbit	r2, r3
 8003c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c18:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c22:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003c26:	2202      	movs	r2, #2
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c2e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	fa93 f2a3 	rbit	r2, r3
 8003c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c46:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c52:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	fa93 f2a3 	rbit	r2, r3
 8003c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c60:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003c64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c66:	4b41      	ldr	r3, [pc, #260]	@ (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003c68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003c72:	2102      	movs	r1, #2
 8003c74:	6019      	str	r1, [r3, #0]
 8003c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c7a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	fa93 f1a3 	rbit	r1, r3
 8003c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c88:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003c8c:	6019      	str	r1, [r3, #0]
  return result;
 8003c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c92:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	fab3 f383 	clz	r3, r3
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	2101      	movs	r1, #1
 8003caa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d197      	bne.n	8003be4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 81a1 	beq.w	800400c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd0:	4b26      	ldr	r3, [pc, #152]	@ (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d116      	bne.n	8003d0a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cdc:	4b23      	ldr	r3, [pc, #140]	@ (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	4a22      	ldr	r2, [pc, #136]	@ (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	61d3      	str	r3, [r2, #28]
 8003ce8:	4b20      	ldr	r3, [pc, #128]	@ (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cfe:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003d02:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003d74 <HAL_RCC_OscConfig+0x93c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d11a      	bne.n	8003d4c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d16:	4b17      	ldr	r3, [pc, #92]	@ (8003d74 <HAL_RCC_OscConfig+0x93c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a16      	ldr	r2, [pc, #88]	@ (8003d74 <HAL_RCC_OscConfig+0x93c>)
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d22:	f7fe f86f 	bl	8001e04 <HAL_GetTick>
 8003d26:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2a:	e009      	b.n	8003d40 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2c:	f7fe f86a 	bl	8001e04 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b64      	cmp	r3, #100	@ 0x64
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e3b1      	b.n	80044a4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	4b0c      	ldr	r3, [pc, #48]	@ (8003d74 <HAL_RCC_OscConfig+0x93c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0ef      	beq.n	8003d2c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d10d      	bne.n	8003d78 <HAL_RCC_OscConfig+0x940>
 8003d5c:	4b03      	ldr	r3, [pc, #12]	@ (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	4a02      	ldr	r2, [pc, #8]	@ (8003d6c <HAL_RCC_OscConfig+0x934>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6213      	str	r3, [r2, #32]
 8003d68:	e03c      	b.n	8003de4 <HAL_RCC_OscConfig+0x9ac>
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	10908120 	.word	0x10908120
 8003d74:	40007000 	.word	0x40007000
 8003d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10c      	bne.n	8003da2 <HAL_RCC_OscConfig+0x96a>
 8003d88:	4bc1      	ldr	r3, [pc, #772]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	4ac0      	ldr	r2, [pc, #768]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003d8e:	f023 0301 	bic.w	r3, r3, #1
 8003d92:	6213      	str	r3, [r2, #32]
 8003d94:	4bbe      	ldr	r3, [pc, #760]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	4abd      	ldr	r2, [pc, #756]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003d9a:	f023 0304 	bic.w	r3, r3, #4
 8003d9e:	6213      	str	r3, [r2, #32]
 8003da0:	e020      	b.n	8003de4 <HAL_RCC_OscConfig+0x9ac>
 8003da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	2b05      	cmp	r3, #5
 8003db0:	d10c      	bne.n	8003dcc <HAL_RCC_OscConfig+0x994>
 8003db2:	4bb7      	ldr	r3, [pc, #732]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	4ab6      	ldr	r2, [pc, #728]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003db8:	f043 0304 	orr.w	r3, r3, #4
 8003dbc:	6213      	str	r3, [r2, #32]
 8003dbe:	4bb4      	ldr	r3, [pc, #720]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	4ab3      	ldr	r2, [pc, #716]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	6213      	str	r3, [r2, #32]
 8003dca:	e00b      	b.n	8003de4 <HAL_RCC_OscConfig+0x9ac>
 8003dcc:	4bb0      	ldr	r3, [pc, #704]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	4aaf      	ldr	r2, [pc, #700]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003dd2:	f023 0301 	bic.w	r3, r3, #1
 8003dd6:	6213      	str	r3, [r2, #32]
 8003dd8:	4bad      	ldr	r3, [pc, #692]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	4aac      	ldr	r2, [pc, #688]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003dde:	f023 0304 	bic.w	r3, r3, #4
 8003de2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8081 	beq.w	8003ef8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df6:	f7fe f805 	bl	8001e04 <HAL_GetTick>
 8003dfa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e00:	f7fe f800 	bl	8001e04 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e345      	b.n	80044a4 <HAL_RCC_OscConfig+0x106c>
 8003e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e1c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e20:	2202      	movs	r2, #2
 8003e22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e28:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	fa93 f2a3 	rbit	r2, r3
 8003e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e36:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e40:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003e44:	2202      	movs	r2, #2
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e4c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	fa93 f2a3 	rbit	r2, r3
 8003e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e5a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003e5e:	601a      	str	r2, [r3, #0]
  return result;
 8003e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e64:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003e68:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6a:	fab3 f383 	clz	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f043 0302 	orr.w	r3, r3, #2
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d102      	bne.n	8003e84 <HAL_RCC_OscConfig+0xa4c>
 8003e7e:	4b84      	ldr	r3, [pc, #528]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	e013      	b.n	8003eac <HAL_RCC_OscConfig+0xa74>
 8003e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e88:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e94:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	fa93 f2a3 	rbit	r2, r3
 8003e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	4b79      	ldr	r3, [pc, #484]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003eb0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	6011      	str	r1, [r2, #0]
 8003eb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ebc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	fa92 f1a2 	rbit	r1, r2
 8003ec6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003eca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003ece:	6011      	str	r1, [r2, #0]
  return result;
 8003ed0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ed4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003ed8:	6812      	ldr	r2, [r2, #0]
 8003eda:	fab2 f282 	clz	r2, r2
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	f002 021f 	and.w	r2, r2, #31
 8003eea:	2101      	movs	r1, #1
 8003eec:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d084      	beq.n	8003e00 <HAL_RCC_OscConfig+0x9c8>
 8003ef6:	e07f      	b.n	8003ff8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef8:	f7fd ff84 	bl	8001e04 <HAL_GetTick>
 8003efc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f00:	e00b      	b.n	8003f1a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f02:	f7fd ff7f 	bl	8001e04 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e2c4      	b.n	80044a4 <HAL_RCC_OscConfig+0x106c>
 8003f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f1e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003f22:	2202      	movs	r2, #2
 8003f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f2a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	fa93 f2a3 	rbit	r2, r3
 8003f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f38:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f42:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f46:	2202      	movs	r2, #2
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	fa93 f2a3 	rbit	r2, r3
 8003f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f60:	601a      	str	r2, [r3, #0]
  return result;
 8003f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f66:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6c:	fab3 f383 	clz	r3, r3
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	f043 0302 	orr.w	r3, r3, #2
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d102      	bne.n	8003f86 <HAL_RCC_OscConfig+0xb4e>
 8003f80:	4b43      	ldr	r3, [pc, #268]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	e013      	b.n	8003fae <HAL_RCC_OscConfig+0xb76>
 8003f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f8a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003f8e:	2202      	movs	r2, #2
 8003f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f96:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	fa93 f2a3 	rbit	r2, r3
 8003fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	4b39      	ldr	r3, [pc, #228]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8003fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fb2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	6011      	str	r1, [r2, #0]
 8003fba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fbe:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	fa92 f1a2 	rbit	r1, r2
 8003fc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fcc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003fd0:	6011      	str	r1, [r2, #0]
  return result;
 8003fd2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fd6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	fab2 f282 	clz	r2, r2
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	f002 021f 	and.w	r2, r2, #31
 8003fec:	2101      	movs	r1, #1
 8003fee:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d184      	bne.n	8003f02 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ff8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d105      	bne.n	800400c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004000:	4b23      	ldr	r3, [pc, #140]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	4a22      	ldr	r2, [pc, #136]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8004006:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800400a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004010:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8242 	beq.w	80044a2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800401e:	4b1c      	ldr	r3, [pc, #112]	@ (8004090 <HAL_RCC_OscConfig+0xc58>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b08      	cmp	r3, #8
 8004028:	f000 8213 	beq.w	8004452 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800402c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004030:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	2b02      	cmp	r3, #2
 800403a:	f040 8162 	bne.w	8004302 <HAL_RCC_OscConfig+0xeca>
 800403e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004042:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004046:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800404a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004050:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	fa93 f2a3 	rbit	r2, r3
 800405a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800405e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004062:	601a      	str	r2, [r3, #0]
  return result;
 8004064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004068:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800406c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406e:	fab3 f383 	clz	r3, r3
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004078:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	461a      	mov	r2, r3
 8004080:	2300      	movs	r3, #0
 8004082:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fd febe 	bl	8001e04 <HAL_GetTick>
 8004088:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800408c:	e00c      	b.n	80040a8 <HAL_RCC_OscConfig+0xc70>
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004094:	f7fd feb6 	bl	8001e04 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e1fd      	b.n	80044a4 <HAL_RCC_OscConfig+0x106c>
 80040a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80040b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	fa93 f2a3 	rbit	r2, r3
 80040c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80040cc:	601a      	str	r2, [r3, #0]
  return result;
 80040ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80040d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d8:	fab3 f383 	clz	r3, r3
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d102      	bne.n	80040f2 <HAL_RCC_OscConfig+0xcba>
 80040ec:	4bb0      	ldr	r3, [pc, #704]	@ (80043b0 <HAL_RCC_OscConfig+0xf78>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	e027      	b.n	8004142 <HAL_RCC_OscConfig+0xd0a>
 80040f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80040fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004104:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	fa93 f2a3 	rbit	r2, r3
 800410e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004112:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800411c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004120:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800412a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	fa93 f2a3 	rbit	r2, r3
 8004134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004138:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	4b9c      	ldr	r3, [pc, #624]	@ (80043b0 <HAL_RCC_OscConfig+0xf78>)
 8004140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004142:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004146:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800414a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800414e:	6011      	str	r1, [r2, #0]
 8004150:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004154:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	fa92 f1a2 	rbit	r1, r2
 800415e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004162:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004166:	6011      	str	r1, [r2, #0]
  return result;
 8004168:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800416c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	fab2 f282 	clz	r2, r2
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	f042 0220 	orr.w	r2, r2, #32
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	f002 021f 	and.w	r2, r2, #31
 8004182:	2101      	movs	r1, #1
 8004184:	fa01 f202 	lsl.w	r2, r1, r2
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d182      	bne.n	8004094 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800418e:	4b88      	ldr	r3, [pc, #544]	@ (80043b0 <HAL_RCC_OscConfig+0xf78>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800419a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80041a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	430b      	orrs	r3, r1
 80041b0:	497f      	ldr	r1, [pc, #508]	@ (80043b0 <HAL_RCC_OscConfig+0xf78>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	604b      	str	r3, [r1, #4]
 80041b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ba:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80041be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	fa93 f2a3 	rbit	r2, r3
 80041d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80041da:	601a      	str	r2, [r3, #0]
  return result;
 80041dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80041e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80041f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	461a      	mov	r2, r3
 80041f8:	2301      	movs	r3, #1
 80041fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fd fe02 	bl	8001e04 <HAL_GetTick>
 8004200:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004204:	e009      	b.n	800421a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004206:	f7fd fdfd 	bl	8001e04 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e144      	b.n	80044a4 <HAL_RCC_OscConfig+0x106c>
 800421a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800421e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004222:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004226:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800422c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	fa93 f2a3 	rbit	r2, r3
 8004236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800423a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800423e:	601a      	str	r2, [r3, #0]
  return result;
 8004240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004244:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004248:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800424a:	fab3 f383 	clz	r3, r3
 800424e:	b2db      	uxtb	r3, r3
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d102      	bne.n	8004264 <HAL_RCC_OscConfig+0xe2c>
 800425e:	4b54      	ldr	r3, [pc, #336]	@ (80043b0 <HAL_RCC_OscConfig+0xf78>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	e027      	b.n	80042b4 <HAL_RCC_OscConfig+0xe7c>
 8004264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004268:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800426c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004276:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	fa93 f2a3 	rbit	r2, r3
 8004280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004284:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800428e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004292:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	fa93 f2a3 	rbit	r2, r3
 80042a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042aa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	4b3f      	ldr	r3, [pc, #252]	@ (80043b0 <HAL_RCC_OscConfig+0xf78>)
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042b8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80042bc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80042c0:	6011      	str	r1, [r2, #0]
 80042c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042c6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	fa92 f1a2 	rbit	r1, r2
 80042d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042d4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80042d8:	6011      	str	r1, [r2, #0]
  return result;
 80042da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042de:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	fab2 f282 	clz	r2, r2
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	f042 0220 	orr.w	r2, r2, #32
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	f002 021f 	and.w	r2, r2, #31
 80042f4:	2101      	movs	r1, #1
 80042f6:	fa01 f202 	lsl.w	r2, r1, r2
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d082      	beq.n	8004206 <HAL_RCC_OscConfig+0xdce>
 8004300:	e0cf      	b.n	80044a2 <HAL_RCC_OscConfig+0x106a>
 8004302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004306:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800430a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800430e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004314:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	fa93 f2a3 	rbit	r2, r3
 800431e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004322:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004326:	601a      	str	r2, [r3, #0]
  return result;
 8004328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800432c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004330:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004332:	fab3 f383 	clz	r3, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800433c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	461a      	mov	r2, r3
 8004344:	2300      	movs	r3, #0
 8004346:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fd fd5c 	bl	8001e04 <HAL_GetTick>
 800434c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004350:	e009      	b.n	8004366 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004352:	f7fd fd57 	bl	8001e04 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e09e      	b.n	80044a4 <HAL_RCC_OscConfig+0x106c>
 8004366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800436a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800436e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004378:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	fa93 f2a3 	rbit	r2, r3
 8004382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004386:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800438a:	601a      	str	r2, [r3, #0]
  return result;
 800438c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004390:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004394:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d104      	bne.n	80043b4 <HAL_RCC_OscConfig+0xf7c>
 80043aa:	4b01      	ldr	r3, [pc, #4]	@ (80043b0 <HAL_RCC_OscConfig+0xf78>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	e029      	b.n	8004404 <HAL_RCC_OscConfig+0xfcc>
 80043b0:	40021000 	.word	0x40021000
 80043b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80043bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	fa93 f2a3 	rbit	r2, r3
 80043d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043de:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80043e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ec:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	fa93 f2a3 	rbit	r2, r3
 80043f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	4b2b      	ldr	r3, [pc, #172]	@ (80044b0 <HAL_RCC_OscConfig+0x1078>)
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004408:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800440c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004410:	6011      	str	r1, [r2, #0]
 8004412:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004416:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	fa92 f1a2 	rbit	r1, r2
 8004420:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004424:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004428:	6011      	str	r1, [r2, #0]
  return result;
 800442a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800442e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	fab2 f282 	clz	r2, r2
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	f042 0220 	orr.w	r2, r2, #32
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	f002 021f 	and.w	r2, r2, #31
 8004444:	2101      	movs	r1, #1
 8004446:	fa01 f202 	lsl.w	r2, r1, r2
 800444a:	4013      	ands	r3, r2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d180      	bne.n	8004352 <HAL_RCC_OscConfig+0xf1a>
 8004450:	e027      	b.n	80044a2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004456:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e01e      	b.n	80044a4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004466:	4b12      	ldr	r3, [pc, #72]	@ (80044b0 <HAL_RCC_OscConfig+0x1078>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800446e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004472:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	429a      	cmp	r2, r3
 8004484:	d10b      	bne.n	800449e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004486:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800448a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800448e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004492:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800449a:	429a      	cmp	r2, r3
 800449c:	d001      	beq.n	80044a2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000

080044b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b09e      	sub	sp, #120	@ 0x78
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e162      	b.n	8004792 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044cc:	4b90      	ldr	r3, [pc, #576]	@ (8004710 <HAL_RCC_ClockConfig+0x25c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d910      	bls.n	80044fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044da:	4b8d      	ldr	r3, [pc, #564]	@ (8004710 <HAL_RCC_ClockConfig+0x25c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f023 0207 	bic.w	r2, r3, #7
 80044e2:	498b      	ldr	r1, [pc, #556]	@ (8004710 <HAL_RCC_ClockConfig+0x25c>)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ea:	4b89      	ldr	r3, [pc, #548]	@ (8004710 <HAL_RCC_ClockConfig+0x25c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e14a      	b.n	8004792 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004508:	4b82      	ldr	r3, [pc, #520]	@ (8004714 <HAL_RCC_ClockConfig+0x260>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	497f      	ldr	r1, [pc, #508]	@ (8004714 <HAL_RCC_ClockConfig+0x260>)
 8004516:	4313      	orrs	r3, r2
 8004518:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 80dc 	beq.w	80046e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d13c      	bne.n	80045aa <HAL_RCC_ClockConfig+0xf6>
 8004530:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004534:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004538:	fa93 f3a3 	rbit	r3, r3
 800453c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800453e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004540:	fab3 f383 	clz	r3, r3
 8004544:	b2db      	uxtb	r3, r3
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	d102      	bne.n	800455a <HAL_RCC_ClockConfig+0xa6>
 8004554:	4b6f      	ldr	r3, [pc, #444]	@ (8004714 <HAL_RCC_ClockConfig+0x260>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	e00f      	b.n	800457a <HAL_RCC_ClockConfig+0xc6>
 800455a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800455e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004560:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004562:	fa93 f3a3 	rbit	r3, r3
 8004566:	667b      	str	r3, [r7, #100]	@ 0x64
 8004568:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800456c:	663b      	str	r3, [r7, #96]	@ 0x60
 800456e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004570:	fa93 f3a3 	rbit	r3, r3
 8004574:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004576:	4b67      	ldr	r3, [pc, #412]	@ (8004714 <HAL_RCC_ClockConfig+0x260>)
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800457e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004580:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004582:	fa92 f2a2 	rbit	r2, r2
 8004586:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004588:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800458a:	fab2 f282 	clz	r2, r2
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	f042 0220 	orr.w	r2, r2, #32
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	f002 021f 	and.w	r2, r2, #31
 800459a:	2101      	movs	r1, #1
 800459c:	fa01 f202 	lsl.w	r2, r1, r2
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d17b      	bne.n	800469e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e0f3      	b.n	8004792 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d13c      	bne.n	800462c <HAL_RCC_ClockConfig+0x178>
 80045b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045b6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045ba:	fa93 f3a3 	rbit	r3, r3
 80045be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80045c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c2:	fab3 f383 	clz	r3, r3
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d102      	bne.n	80045dc <HAL_RCC_ClockConfig+0x128>
 80045d6:	4b4f      	ldr	r3, [pc, #316]	@ (8004714 <HAL_RCC_ClockConfig+0x260>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	e00f      	b.n	80045fc <HAL_RCC_ClockConfig+0x148>
 80045dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045e4:	fa93 f3a3 	rbit	r3, r3
 80045e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80045f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045f2:	fa93 f3a3 	rbit	r3, r3
 80045f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045f8:	4b46      	ldr	r3, [pc, #280]	@ (8004714 <HAL_RCC_ClockConfig+0x260>)
 80045fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004600:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004602:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004604:	fa92 f2a2 	rbit	r2, r2
 8004608:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800460a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800460c:	fab2 f282 	clz	r2, r2
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	f042 0220 	orr.w	r2, r2, #32
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	f002 021f 	and.w	r2, r2, #31
 800461c:	2101      	movs	r1, #1
 800461e:	fa01 f202 	lsl.w	r2, r1, r2
 8004622:	4013      	ands	r3, r2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d13a      	bne.n	800469e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0b2      	b.n	8004792 <HAL_RCC_ClockConfig+0x2de>
 800462c:	2302      	movs	r3, #2
 800462e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004632:	fa93 f3a3 	rbit	r3, r3
 8004636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463a:	fab3 f383 	clz	r3, r3
 800463e:	b2db      	uxtb	r3, r3
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b01      	cmp	r3, #1
 800464c:	d102      	bne.n	8004654 <HAL_RCC_ClockConfig+0x1a0>
 800464e:	4b31      	ldr	r3, [pc, #196]	@ (8004714 <HAL_RCC_ClockConfig+0x260>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	e00d      	b.n	8004670 <HAL_RCC_ClockConfig+0x1bc>
 8004654:	2302      	movs	r3, #2
 8004656:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465a:	fa93 f3a3 	rbit	r3, r3
 800465e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004660:	2302      	movs	r3, #2
 8004662:	623b      	str	r3, [r7, #32]
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	fa93 f3a3 	rbit	r3, r3
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	4b29      	ldr	r3, [pc, #164]	@ (8004714 <HAL_RCC_ClockConfig+0x260>)
 800466e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004670:	2202      	movs	r2, #2
 8004672:	61ba      	str	r2, [r7, #24]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	fa92 f2a2 	rbit	r2, r2
 800467a:	617a      	str	r2, [r7, #20]
  return result;
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	fab2 f282 	clz	r2, r2
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	f042 0220 	orr.w	r2, r2, #32
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	f002 021f 	and.w	r2, r2, #31
 800468e:	2101      	movs	r1, #1
 8004690:	fa01 f202 	lsl.w	r2, r1, r2
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e079      	b.n	8004792 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469e:	4b1d      	ldr	r3, [pc, #116]	@ (8004714 <HAL_RCC_ClockConfig+0x260>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f023 0203 	bic.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	491a      	ldr	r1, [pc, #104]	@ (8004714 <HAL_RCC_ClockConfig+0x260>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b0:	f7fd fba8 	bl	8001e04 <HAL_GetTick>
 80046b4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b8:	f7fd fba4 	bl	8001e04 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e061      	b.n	8004792 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	4b11      	ldr	r3, [pc, #68]	@ (8004714 <HAL_RCC_ClockConfig+0x260>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 020c 	and.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	429a      	cmp	r2, r3
 80046de:	d1eb      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004710 <HAL_RCC_ClockConfig+0x25c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d214      	bcs.n	8004718 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ee:	4b08      	ldr	r3, [pc, #32]	@ (8004710 <HAL_RCC_ClockConfig+0x25c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f023 0207 	bic.w	r2, r3, #7
 80046f6:	4906      	ldr	r1, [pc, #24]	@ (8004710 <HAL_RCC_ClockConfig+0x25c>)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fe:	4b04      	ldr	r3, [pc, #16]	@ (8004710 <HAL_RCC_ClockConfig+0x25c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d005      	beq.n	8004718 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e040      	b.n	8004792 <HAL_RCC_ClockConfig+0x2de>
 8004710:	40022000 	.word	0x40022000
 8004714:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d008      	beq.n	8004736 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004724:	4b1d      	ldr	r3, [pc, #116]	@ (800479c <HAL_RCC_ClockConfig+0x2e8>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	491a      	ldr	r1, [pc, #104]	@ (800479c <HAL_RCC_ClockConfig+0x2e8>)
 8004732:	4313      	orrs	r3, r2
 8004734:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004742:	4b16      	ldr	r3, [pc, #88]	@ (800479c <HAL_RCC_ClockConfig+0x2e8>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4912      	ldr	r1, [pc, #72]	@ (800479c <HAL_RCC_ClockConfig+0x2e8>)
 8004752:	4313      	orrs	r3, r2
 8004754:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004756:	f000 f829 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 800475a:	4601      	mov	r1, r0
 800475c:	4b0f      	ldr	r3, [pc, #60]	@ (800479c <HAL_RCC_ClockConfig+0x2e8>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004764:	22f0      	movs	r2, #240	@ 0xf0
 8004766:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	fa92 f2a2 	rbit	r2, r2
 800476e:	60fa      	str	r2, [r7, #12]
  return result;
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	fab2 f282 	clz	r2, r2
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	40d3      	lsrs	r3, r2
 800477a:	4a09      	ldr	r2, [pc, #36]	@ (80047a0 <HAL_RCC_ClockConfig+0x2ec>)
 800477c:	5cd3      	ldrb	r3, [r2, r3]
 800477e:	fa21 f303 	lsr.w	r3, r1, r3
 8004782:	4a08      	ldr	r2, [pc, #32]	@ (80047a4 <HAL_RCC_ClockConfig+0x2f0>)
 8004784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004786:	4b08      	ldr	r3, [pc, #32]	@ (80047a8 <HAL_RCC_ClockConfig+0x2f4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fd faf6 	bl	8001d7c <HAL_InitTick>
  
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3778      	adds	r7, #120	@ 0x78
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40021000 	.word	0x40021000
 80047a0:	0800aec8 	.word	0x0800aec8
 80047a4:	20000090 	.word	0x20000090
 80047a8:	20000094 	.word	0x20000094

080047ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	2300      	movs	r3, #0
 80047c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80047c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004840 <HAL_RCC_GetSysClockFreq+0x94>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d002      	beq.n	80047dc <HAL_RCC_GetSysClockFreq+0x30>
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d003      	beq.n	80047e2 <HAL_RCC_GetSysClockFreq+0x36>
 80047da:	e026      	b.n	800482a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047dc:	4b19      	ldr	r3, [pc, #100]	@ (8004844 <HAL_RCC_GetSysClockFreq+0x98>)
 80047de:	613b      	str	r3, [r7, #16]
      break;
 80047e0:	e026      	b.n	8004830 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	0c9b      	lsrs	r3, r3, #18
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	4a17      	ldr	r2, [pc, #92]	@ (8004848 <HAL_RCC_GetSysClockFreq+0x9c>)
 80047ec:	5cd3      	ldrb	r3, [r2, r3]
 80047ee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80047f0:	4b13      	ldr	r3, [pc, #76]	@ (8004840 <HAL_RCC_GetSysClockFreq+0x94>)
 80047f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	4a14      	ldr	r2, [pc, #80]	@ (800484c <HAL_RCC_GetSysClockFreq+0xa0>)
 80047fa:	5cd3      	ldrb	r3, [r2, r3]
 80047fc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004808:	4a0e      	ldr	r2, [pc, #56]	@ (8004844 <HAL_RCC_GetSysClockFreq+0x98>)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	e004      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a0c      	ldr	r2, [pc, #48]	@ (8004850 <HAL_RCC_GetSysClockFreq+0xa4>)
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	613b      	str	r3, [r7, #16]
      break;
 8004828:	e002      	b.n	8004830 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800482a:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <HAL_RCC_GetSysClockFreq+0x98>)
 800482c:	613b      	str	r3, [r7, #16]
      break;
 800482e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004830:	693b      	ldr	r3, [r7, #16]
}
 8004832:	4618      	mov	r0, r3
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000
 8004844:	007a1200 	.word	0x007a1200
 8004848:	0800aee0 	.word	0x0800aee0
 800484c:	0800aef0 	.word	0x0800aef0
 8004850:	003d0900 	.word	0x003d0900

08004854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004858:	4b03      	ldr	r3, [pc, #12]	@ (8004868 <HAL_RCC_GetHCLKFreq+0x14>)
 800485a:	681b      	ldr	r3, [r3, #0]
}
 800485c:	4618      	mov	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	20000090 	.word	0x20000090

0800486c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004872:	f7ff ffef 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 8004876:	4601      	mov	r1, r0
 8004878:	4b0b      	ldr	r3, [pc, #44]	@ (80048a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004880:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004884:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	fa92 f2a2 	rbit	r2, r2
 800488c:	603a      	str	r2, [r7, #0]
  return result;
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	fab2 f282 	clz	r2, r2
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	40d3      	lsrs	r3, r2
 8004898:	4a04      	ldr	r2, [pc, #16]	@ (80048ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800489a:	5cd3      	ldrb	r3, [r2, r3]
 800489c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40021000 	.word	0x40021000
 80048ac:	0800aed8 	.word	0x0800aed8

080048b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80048b6:	f7ff ffcd 	bl	8004854 <HAL_RCC_GetHCLKFreq>
 80048ba:	4601      	mov	r1, r0
 80048bc:	4b0b      	ldr	r3, [pc, #44]	@ (80048ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80048c4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80048c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	fa92 f2a2 	rbit	r2, r2
 80048d0:	603a      	str	r2, [r7, #0]
  return result;
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	fab2 f282 	clz	r2, r2
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	40d3      	lsrs	r3, r2
 80048dc:	4a04      	ldr	r2, [pc, #16]	@ (80048f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80048de:	5cd3      	ldrb	r3, [r2, r3]
 80048e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40021000 	.word	0x40021000
 80048f0:	0800aed8 	.word	0x0800aed8

080048f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b092      	sub	sp, #72	@ 0x48
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004904:	2300      	movs	r3, #0
 8004906:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 80d4 	beq.w	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004918:	4b4e      	ldr	r3, [pc, #312]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10e      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004924:	4b4b      	ldr	r3, [pc, #300]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	4a4a      	ldr	r2, [pc, #296]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800492a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800492e:	61d3      	str	r3, [r2, #28]
 8004930:	4b48      	ldr	r3, [pc, #288]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800493c:	2301      	movs	r3, #1
 800493e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004942:	4b45      	ldr	r3, [pc, #276]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494a:	2b00      	cmp	r3, #0
 800494c:	d118      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800494e:	4b42      	ldr	r3, [pc, #264]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a41      	ldr	r2, [pc, #260]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004958:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800495a:	f7fd fa53 	bl	8001e04 <HAL_GetTick>
 800495e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004960:	e008      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004962:	f7fd fa4f 	bl	8001e04 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b64      	cmp	r3, #100	@ 0x64
 800496e:	d901      	bls.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e169      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004974:	4b38      	ldr	r3, [pc, #224]	@ (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0f0      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004980:	4b34      	ldr	r3, [pc, #208]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004988:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800498a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8084 	beq.w	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800499a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800499c:	429a      	cmp	r2, r3
 800499e:	d07c      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049a0:	4b2c      	ldr	r3, [pc, #176]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80049ae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b2:	fa93 f3a3 	rbit	r3, r3
 80049b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80049b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049ba:	fab3 f383 	clz	r3, r3
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	4b26      	ldr	r3, [pc, #152]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	461a      	mov	r2, r3
 80049ca:	2301      	movs	r3, #1
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80049d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d6:	fa93 f3a3 	rbit	r3, r3
 80049da:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80049dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049de:	fab3 f383 	clz	r3, r3
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	4b1d      	ldr	r3, [pc, #116]	@ (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	461a      	mov	r2, r3
 80049ee:	2300      	movs	r3, #0
 80049f0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80049f2:	4a18      	ldr	r2, [pc, #96]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049f6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80049f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d04b      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a02:	f7fd f9ff 	bl	8001e04 <HAL_GetTick>
 8004a06:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a08:	e00a      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0a:	f7fd f9fb 	bl	8001e04 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e113      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004a20:	2302      	movs	r3, #2
 8004a22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a26:	fa93 f3a3 	rbit	r3, r3
 8004a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	623b      	str	r3, [r7, #32]
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	fa93 f3a3 	rbit	r3, r3
 8004a36:	61fb      	str	r3, [r7, #28]
  return result;
 8004a38:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3a:	fab3 f383 	clz	r3, r3
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	095b      	lsrs	r3, r3, #5
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f043 0302 	orr.w	r3, r3, #2
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d108      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004a4e:	4b01      	ldr	r3, [pc, #4]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	e00d      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40007000 	.word	0x40007000
 8004a5c:	10908100 	.word	0x10908100
 8004a60:	2302      	movs	r3, #2
 8004a62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	fa93 f3a3 	rbit	r3, r3
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	4b78      	ldr	r3, [pc, #480]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a70:	2202      	movs	r2, #2
 8004a72:	613a      	str	r2, [r7, #16]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	fa92 f2a2 	rbit	r2, r2
 8004a7a:	60fa      	str	r2, [r7, #12]
  return result;
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	fab2 f282 	clz	r2, r2
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	f002 021f 	and.w	r2, r2, #31
 8004a8e:	2101      	movs	r1, #1
 8004a90:	fa01 f202 	lsl.w	r2, r1, r2
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0b7      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004a9a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	496a      	ldr	r1, [pc, #424]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004aac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d105      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab4:	4b66      	ldr	r3, [pc, #408]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	4a65      	ldr	r2, [pc, #404]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004abe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004acc:	4b60      	ldr	r3, [pc, #384]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad0:	f023 0203 	bic.w	r2, r3, #3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	495d      	ldr	r1, [pc, #372]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d008      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aea:	4b59      	ldr	r3, [pc, #356]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	4956      	ldr	r1, [pc, #344]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b08:	4b51      	ldr	r3, [pc, #324]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	494e      	ldr	r1, [pc, #312]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d008      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b26:	4b4a      	ldr	r3, [pc, #296]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2a:	f023 0210 	bic.w	r2, r3, #16
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	4947      	ldr	r1, [pc, #284]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004b44:	4b42      	ldr	r3, [pc, #264]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b50:	493f      	ldr	r1, [pc, #252]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d008      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b62:	4b3b      	ldr	r3, [pc, #236]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b66:	f023 0220 	bic.w	r2, r3, #32
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	4938      	ldr	r1, [pc, #224]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b80:	4b33      	ldr	r3, [pc, #204]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b84:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	4930      	ldr	r1, [pc, #192]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d008      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b9e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	4929      	ldr	r1, [pc, #164]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bbc:	4b24      	ldr	r3, [pc, #144]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc8:	4921      	ldr	r1, [pc, #132]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d008      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004bda:	4b1d      	ldr	r3, [pc, #116]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bde:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	491a      	ldr	r1, [pc, #104]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004bf8:	4b15      	ldr	r3, [pc, #84]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfc:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c04:	4912      	ldr	r1, [pc, #72]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c16:	4b0e      	ldr	r3, [pc, #56]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c22:	490b      	ldr	r1, [pc, #44]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004c34:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c38:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c40:	4903      	ldr	r1, [pc, #12]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3748      	adds	r7, #72	@ 0x48
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40021000 	.word	0x40021000

08004c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e040      	b.n	8004ce8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fc fe52 	bl	8001920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2224      	movs	r2, #36	@ 0x24
 8004c80:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0201 	bic.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fe10 	bl	80058c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fc39 	bl	8005518 <UART_SetConfig>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e01b      	b.n	8004ce8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fe8f 	bl	8005a04 <UART_CheckIdleState>
 8004ce6:	4603      	mov	r3, r0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	@ 0x28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d165      	bne.n	8004dd2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_UART_Transmit_DMA+0x22>
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e05e      	b.n	8004dd4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	88fa      	ldrh	r2, [r7, #6]
 8004d20:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	88fa      	ldrh	r2, [r7, #6]
 8004d28:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2221      	movs	r2, #33	@ 0x21
 8004d38:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d027      	beq.n	8004d92 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d46:	4a25      	ldr	r2, [pc, #148]	@ (8004ddc <HAL_UART_Transmit_DMA+0xec>)
 8004d48:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4e:	4a24      	ldr	r2, [pc, #144]	@ (8004de0 <HAL_UART_Transmit_DMA+0xf0>)
 8004d50:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d56:	4a23      	ldr	r2, [pc, #140]	@ (8004de4 <HAL_UART_Transmit_DMA+0xf4>)
 8004d58:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5e:	2200      	movs	r2, #0
 8004d60:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3328      	adds	r3, #40	@ 0x28
 8004d72:	461a      	mov	r2, r3
 8004d74:	88fb      	ldrh	r3, [r7, #6]
 8004d76:	f7fd f9cd 	bl	8002114 <HAL_DMA_Start_IT>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2210      	movs	r2, #16
 8004d84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e020      	b.n	8004dd4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2240      	movs	r2, #64	@ 0x40
 8004d98:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3308      	adds	r3, #8
 8004da0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	613b      	str	r3, [r7, #16]
   return(result);
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3308      	adds	r3, #8
 8004db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dba:	623a      	str	r2, [r7, #32]
 8004dbc:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	69f9      	ldr	r1, [r7, #28]
 8004dc0:	6a3a      	ldr	r2, [r7, #32]
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e5      	bne.n	8004d9a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e000      	b.n	8004dd4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
  }
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3728      	adds	r7, #40	@ 0x28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	08005d43 	.word	0x08005d43
 8004de0:	08005dd7 	.word	0x08005dd7
 8004de4:	08005df3 	.word	0x08005df3

08004de8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b090      	sub	sp, #64	@ 0x40
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dfc:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e08:	2b80      	cmp	r3, #128	@ 0x80
 8004e0a:	d139      	bne.n	8004e80 <HAL_UART_DMAStop+0x98>
 8004e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e0e:	2b21      	cmp	r3, #33	@ 0x21
 8004e10:	d136      	bne.n	8004e80 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3308      	adds	r3, #8
 8004e18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3308      	adds	r3, #8
 8004e30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e5      	bne.n	8004e12 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d015      	beq.n	8004e7a <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fd f9bd 	bl	80021d2 <HAL_DMA_Abort>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00d      	beq.n	8004e7a <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fd fad4 	bl	8002410 <HAL_DMA_GetError>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	d105      	bne.n	8004e7a <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2210      	movs	r2, #16
 8004e72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e044      	b.n	8004f04 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fed7 	bl	8005c2e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e8a:	2b40      	cmp	r3, #64	@ 0x40
 8004e8c:	d139      	bne.n	8004f02 <HAL_UART_DMAStop+0x11a>
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e90:	2b22      	cmp	r3, #34	@ 0x22
 8004e92:	d136      	bne.n	8004f02 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3308      	adds	r3, #8
 8004e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb4:	61ba      	str	r2, [r7, #24]
 8004eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6979      	ldr	r1, [r7, #20]
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e5      	bne.n	8004e94 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d015      	beq.n	8004efc <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fd f97c 	bl	80021d2 <HAL_DMA_Abort>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00d      	beq.n	8004efc <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fd fa93 	bl	8002410 <HAL_DMA_GetError>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	d105      	bne.n	8004efc <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2210      	movs	r2, #16
 8004ef4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e003      	b.n	8004f04 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 febc 	bl	8005c7a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3740      	adds	r7, #64	@ 0x40
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b0ba      	sub	sp, #232	@ 0xe8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f36:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d115      	bne.n	8004f74 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00f      	beq.n	8004f74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d009      	beq.n	8004f74 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 82ab 	beq.w	80054c0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	4798      	blx	r3
      }
      return;
 8004f72:	e2a5      	b.n	80054c0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8117 	beq.w	80051ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004f8e:	4b85      	ldr	r3, [pc, #532]	@ (80051a4 <HAL_UART_IRQHandler+0x298>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 810a 	beq.w	80051ac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d011      	beq.n	8004fc8 <HAL_UART_IRQHandler+0xbc>
 8004fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00b      	beq.n	8004fc8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fbe:	f043 0201 	orr.w	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d011      	beq.n	8004ff8 <HAL_UART_IRQHandler+0xec>
 8004fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00b      	beq.n	8004ff8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fee:	f043 0204 	orr.w	r2, r3, #4
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d011      	beq.n	8005028 <HAL_UART_IRQHandler+0x11c>
 8005004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00b      	beq.n	8005028 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2204      	movs	r2, #4
 8005016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800501e:	f043 0202 	orr.w	r2, r3, #2
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d017      	beq.n	8005064 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d105      	bne.n	800504c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005044:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00b      	beq.n	8005064 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2208      	movs	r2, #8
 8005052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800505a:	f043 0208 	orr.w	r2, r3, #8
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005068:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800506c:	2b00      	cmp	r3, #0
 800506e:	d012      	beq.n	8005096 <HAL_UART_IRQHandler+0x18a>
 8005070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005074:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00c      	beq.n	8005096 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005084:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800508c:	f043 0220 	orr.w	r2, r3, #32
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 8211 	beq.w	80054c4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00d      	beq.n	80050ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d007      	beq.n	80050ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050de:	2b40      	cmp	r3, #64	@ 0x40
 80050e0:	d005      	beq.n	80050ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d04f      	beq.n	800518e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fdc3 	bl	8005c7a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050fe:	2b40      	cmp	r3, #64	@ 0x40
 8005100:	d141      	bne.n	8005186 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3308      	adds	r3, #8
 8005108:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005118:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800511c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3308      	adds	r3, #8
 800512a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800512e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005132:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800513a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1d9      	bne.n	8005102 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005152:	2b00      	cmp	r3, #0
 8005154:	d013      	beq.n	800517e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800515a:	4a13      	ldr	r2, [pc, #76]	@ (80051a8 <HAL_UART_IRQHandler+0x29c>)
 800515c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005162:	4618      	mov	r0, r3
 8005164:	f7fd f873 	bl	800224e <HAL_DMA_Abort_IT>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d017      	beq.n	800519e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005178:	4610      	mov	r0, r2
 800517a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	e00f      	b.n	800519e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f9b4 	bl	80054ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005184:	e00b      	b.n	800519e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f9b0 	bl	80054ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518c:	e007      	b.n	800519e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f9ac 	bl	80054ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800519c:	e192      	b.n	80054c4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519e:	bf00      	nop
    return;
 80051a0:	e190      	b.n	80054c4 <HAL_UART_IRQHandler+0x5b8>
 80051a2:	bf00      	nop
 80051a4:	04000120 	.word	0x04000120
 80051a8:	08005e71 	.word	0x08005e71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	f040 814b 	bne.w	800544c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 8144 	beq.w	800544c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 813d 	beq.w	800544c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2210      	movs	r2, #16
 80051d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e4:	2b40      	cmp	r3, #64	@ 0x40
 80051e6:	f040 80b5 	bne.w	8005354 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 8164 	beq.w	80054c8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800520a:	429a      	cmp	r2, r3
 800520c:	f080 815c 	bcs.w	80054c8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005216:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	2b20      	cmp	r3, #32
 8005222:	f000 8086 	beq.w	8005332 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005232:	e853 3f00 	ldrex	r3, [r3]
 8005236:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800523a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800523e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005242:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005250:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005254:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800525c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005268:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1da      	bne.n	8005226 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3308      	adds	r3, #8
 8005276:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005280:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005282:	f023 0301 	bic.w	r3, r3, #1
 8005286:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3308      	adds	r3, #8
 8005290:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005294:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005298:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800529c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e1      	bne.n	8005270 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3308      	adds	r3, #8
 80052b2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3308      	adds	r3, #8
 80052cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052d0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e3      	bne.n	80052ac <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005300:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005302:	f023 0310 	bic.w	r3, r3, #16
 8005306:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005314:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005316:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005318:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800531a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800531c:	e841 2300 	strex	r3, r2, [r1]
 8005320:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e4      	bne.n	80052f2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800532c:	4618      	mov	r0, r3
 800532e:	f7fc ff50 	bl	80021d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005344:	b29b      	uxth	r3, r3
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	b29b      	uxth	r3, r3
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f8d7 	bl	8005500 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005352:	e0b9      	b.n	80054c8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005360:	b29b      	uxth	r3, r3
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 80ab 	beq.w	80054cc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005376:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80a6 	beq.w	80054cc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800538e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005390:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005394:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053a4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e4      	bne.n	8005380 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3308      	adds	r3, #8
 80053bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	623b      	str	r3, [r7, #32]
   return(result);
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	f023 0301 	bic.w	r3, r3, #1
 80053cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3308      	adds	r3, #8
 80053d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053da:	633a      	str	r2, [r7, #48]	@ 0x30
 80053dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e3      	bne.n	80053b6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0310 	bic.w	r3, r3, #16
 8005416:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005424:	61fb      	str	r3, [r7, #28]
 8005426:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	69b9      	ldr	r1, [r7, #24]
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	617b      	str	r3, [r7, #20]
   return(result);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e4      	bne.n	8005402 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800543e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f85b 	bl	8005500 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800544a:	e03f      	b.n	80054cc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800544c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005450:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00e      	beq.n	8005476 <HAL_UART_IRQHandler+0x56a>
 8005458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800545c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800546c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fd3e 	bl	8005ef0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005474:	e02d      	b.n	80054d2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00e      	beq.n	80054a0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548a:	2b00      	cmp	r3, #0
 800548c:	d008      	beq.n	80054a0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01c      	beq.n	80054d0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	4798      	blx	r3
    }
    return;
 800549e:	e017      	b.n	80054d0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d012      	beq.n	80054d2 <HAL_UART_IRQHandler+0x5c6>
 80054ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00c      	beq.n	80054d2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fcef 	bl	8005e9c <UART_EndTransmit_IT>
    return;
 80054be:	e008      	b.n	80054d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80054c0:	bf00      	nop
 80054c2:	e006      	b.n	80054d2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80054c4:	bf00      	nop
 80054c6:	e004      	b.n	80054d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80054c8:	bf00      	nop
 80054ca:	e002      	b.n	80054d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80054cc:	bf00      	nop
 80054ce:	e000      	b.n	80054d2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80054d0:	bf00      	nop
  }

}
 80054d2:	37e8      	adds	r7, #232	@ 0xe8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005546:	f023 030c 	bic.w	r3, r3, #12
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6812      	ldr	r2, [r2, #0]
 800554e:	6979      	ldr	r1, [r7, #20]
 8005550:	430b      	orrs	r3, r1
 8005552:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	4313      	orrs	r3, r2
 8005578:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	430a      	orrs	r2, r1
 800558c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4aa7      	ldr	r2, [pc, #668]	@ (8005830 <UART_SetConfig+0x318>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d120      	bne.n	80055da <UART_SetConfig+0xc2>
 8005598:	4ba6      	ldr	r3, [pc, #664]	@ (8005834 <UART_SetConfig+0x31c>)
 800559a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d817      	bhi.n	80055d4 <UART_SetConfig+0xbc>
 80055a4:	a201      	add	r2, pc, #4	@ (adr r2, 80055ac <UART_SetConfig+0x94>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080055bd 	.word	0x080055bd
 80055b0:	080055c9 	.word	0x080055c9
 80055b4:	080055cf 	.word	0x080055cf
 80055b8:	080055c3 	.word	0x080055c3
 80055bc:	2301      	movs	r3, #1
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e0b5      	b.n	800572e <UART_SetConfig+0x216>
 80055c2:	2302      	movs	r3, #2
 80055c4:	77fb      	strb	r3, [r7, #31]
 80055c6:	e0b2      	b.n	800572e <UART_SetConfig+0x216>
 80055c8:	2304      	movs	r3, #4
 80055ca:	77fb      	strb	r3, [r7, #31]
 80055cc:	e0af      	b.n	800572e <UART_SetConfig+0x216>
 80055ce:	2308      	movs	r3, #8
 80055d0:	77fb      	strb	r3, [r7, #31]
 80055d2:	e0ac      	b.n	800572e <UART_SetConfig+0x216>
 80055d4:	2310      	movs	r3, #16
 80055d6:	77fb      	strb	r3, [r7, #31]
 80055d8:	e0a9      	b.n	800572e <UART_SetConfig+0x216>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a96      	ldr	r2, [pc, #600]	@ (8005838 <UART_SetConfig+0x320>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d124      	bne.n	800562e <UART_SetConfig+0x116>
 80055e4:	4b93      	ldr	r3, [pc, #588]	@ (8005834 <UART_SetConfig+0x31c>)
 80055e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055f0:	d011      	beq.n	8005616 <UART_SetConfig+0xfe>
 80055f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055f6:	d817      	bhi.n	8005628 <UART_SetConfig+0x110>
 80055f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055fc:	d011      	beq.n	8005622 <UART_SetConfig+0x10a>
 80055fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005602:	d811      	bhi.n	8005628 <UART_SetConfig+0x110>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <UART_SetConfig+0xf8>
 8005608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800560c:	d006      	beq.n	800561c <UART_SetConfig+0x104>
 800560e:	e00b      	b.n	8005628 <UART_SetConfig+0x110>
 8005610:	2300      	movs	r3, #0
 8005612:	77fb      	strb	r3, [r7, #31]
 8005614:	e08b      	b.n	800572e <UART_SetConfig+0x216>
 8005616:	2302      	movs	r3, #2
 8005618:	77fb      	strb	r3, [r7, #31]
 800561a:	e088      	b.n	800572e <UART_SetConfig+0x216>
 800561c:	2304      	movs	r3, #4
 800561e:	77fb      	strb	r3, [r7, #31]
 8005620:	e085      	b.n	800572e <UART_SetConfig+0x216>
 8005622:	2308      	movs	r3, #8
 8005624:	77fb      	strb	r3, [r7, #31]
 8005626:	e082      	b.n	800572e <UART_SetConfig+0x216>
 8005628:	2310      	movs	r3, #16
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e07f      	b.n	800572e <UART_SetConfig+0x216>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a82      	ldr	r2, [pc, #520]	@ (800583c <UART_SetConfig+0x324>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d124      	bne.n	8005682 <UART_SetConfig+0x16a>
 8005638:	4b7e      	ldr	r3, [pc, #504]	@ (8005834 <UART_SetConfig+0x31c>)
 800563a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005640:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005644:	d011      	beq.n	800566a <UART_SetConfig+0x152>
 8005646:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800564a:	d817      	bhi.n	800567c <UART_SetConfig+0x164>
 800564c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005650:	d011      	beq.n	8005676 <UART_SetConfig+0x15e>
 8005652:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005656:	d811      	bhi.n	800567c <UART_SetConfig+0x164>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <UART_SetConfig+0x14c>
 800565c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005660:	d006      	beq.n	8005670 <UART_SetConfig+0x158>
 8005662:	e00b      	b.n	800567c <UART_SetConfig+0x164>
 8005664:	2300      	movs	r3, #0
 8005666:	77fb      	strb	r3, [r7, #31]
 8005668:	e061      	b.n	800572e <UART_SetConfig+0x216>
 800566a:	2302      	movs	r3, #2
 800566c:	77fb      	strb	r3, [r7, #31]
 800566e:	e05e      	b.n	800572e <UART_SetConfig+0x216>
 8005670:	2304      	movs	r3, #4
 8005672:	77fb      	strb	r3, [r7, #31]
 8005674:	e05b      	b.n	800572e <UART_SetConfig+0x216>
 8005676:	2308      	movs	r3, #8
 8005678:	77fb      	strb	r3, [r7, #31]
 800567a:	e058      	b.n	800572e <UART_SetConfig+0x216>
 800567c:	2310      	movs	r3, #16
 800567e:	77fb      	strb	r3, [r7, #31]
 8005680:	e055      	b.n	800572e <UART_SetConfig+0x216>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a6e      	ldr	r2, [pc, #440]	@ (8005840 <UART_SetConfig+0x328>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d124      	bne.n	80056d6 <UART_SetConfig+0x1be>
 800568c:	4b69      	ldr	r3, [pc, #420]	@ (8005834 <UART_SetConfig+0x31c>)
 800568e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005690:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005694:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005698:	d011      	beq.n	80056be <UART_SetConfig+0x1a6>
 800569a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800569e:	d817      	bhi.n	80056d0 <UART_SetConfig+0x1b8>
 80056a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056a4:	d011      	beq.n	80056ca <UART_SetConfig+0x1b2>
 80056a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056aa:	d811      	bhi.n	80056d0 <UART_SetConfig+0x1b8>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <UART_SetConfig+0x1a0>
 80056b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056b4:	d006      	beq.n	80056c4 <UART_SetConfig+0x1ac>
 80056b6:	e00b      	b.n	80056d0 <UART_SetConfig+0x1b8>
 80056b8:	2300      	movs	r3, #0
 80056ba:	77fb      	strb	r3, [r7, #31]
 80056bc:	e037      	b.n	800572e <UART_SetConfig+0x216>
 80056be:	2302      	movs	r3, #2
 80056c0:	77fb      	strb	r3, [r7, #31]
 80056c2:	e034      	b.n	800572e <UART_SetConfig+0x216>
 80056c4:	2304      	movs	r3, #4
 80056c6:	77fb      	strb	r3, [r7, #31]
 80056c8:	e031      	b.n	800572e <UART_SetConfig+0x216>
 80056ca:	2308      	movs	r3, #8
 80056cc:	77fb      	strb	r3, [r7, #31]
 80056ce:	e02e      	b.n	800572e <UART_SetConfig+0x216>
 80056d0:	2310      	movs	r3, #16
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e02b      	b.n	800572e <UART_SetConfig+0x216>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a5a      	ldr	r2, [pc, #360]	@ (8005844 <UART_SetConfig+0x32c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d124      	bne.n	800572a <UART_SetConfig+0x212>
 80056e0:	4b54      	ldr	r3, [pc, #336]	@ (8005834 <UART_SetConfig+0x31c>)
 80056e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80056e8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056ec:	d011      	beq.n	8005712 <UART_SetConfig+0x1fa>
 80056ee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056f2:	d817      	bhi.n	8005724 <UART_SetConfig+0x20c>
 80056f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056f8:	d011      	beq.n	800571e <UART_SetConfig+0x206>
 80056fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056fe:	d811      	bhi.n	8005724 <UART_SetConfig+0x20c>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <UART_SetConfig+0x1f4>
 8005704:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005708:	d006      	beq.n	8005718 <UART_SetConfig+0x200>
 800570a:	e00b      	b.n	8005724 <UART_SetConfig+0x20c>
 800570c:	2300      	movs	r3, #0
 800570e:	77fb      	strb	r3, [r7, #31]
 8005710:	e00d      	b.n	800572e <UART_SetConfig+0x216>
 8005712:	2302      	movs	r3, #2
 8005714:	77fb      	strb	r3, [r7, #31]
 8005716:	e00a      	b.n	800572e <UART_SetConfig+0x216>
 8005718:	2304      	movs	r3, #4
 800571a:	77fb      	strb	r3, [r7, #31]
 800571c:	e007      	b.n	800572e <UART_SetConfig+0x216>
 800571e:	2308      	movs	r3, #8
 8005720:	77fb      	strb	r3, [r7, #31]
 8005722:	e004      	b.n	800572e <UART_SetConfig+0x216>
 8005724:	2310      	movs	r3, #16
 8005726:	77fb      	strb	r3, [r7, #31]
 8005728:	e001      	b.n	800572e <UART_SetConfig+0x216>
 800572a:	2310      	movs	r3, #16
 800572c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005736:	d15b      	bne.n	80057f0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005738:	7ffb      	ldrb	r3, [r7, #31]
 800573a:	2b08      	cmp	r3, #8
 800573c:	d827      	bhi.n	800578e <UART_SetConfig+0x276>
 800573e:	a201      	add	r2, pc, #4	@ (adr r2, 8005744 <UART_SetConfig+0x22c>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	08005769 	.word	0x08005769
 8005748:	08005771 	.word	0x08005771
 800574c:	08005779 	.word	0x08005779
 8005750:	0800578f 	.word	0x0800578f
 8005754:	0800577f 	.word	0x0800577f
 8005758:	0800578f 	.word	0x0800578f
 800575c:	0800578f 	.word	0x0800578f
 8005760:	0800578f 	.word	0x0800578f
 8005764:	08005787 	.word	0x08005787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005768:	f7ff f880 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 800576c:	61b8      	str	r0, [r7, #24]
        break;
 800576e:	e013      	b.n	8005798 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005770:	f7ff f89e 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 8005774:	61b8      	str	r0, [r7, #24]
        break;
 8005776:	e00f      	b.n	8005798 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005778:	4b33      	ldr	r3, [pc, #204]	@ (8005848 <UART_SetConfig+0x330>)
 800577a:	61bb      	str	r3, [r7, #24]
        break;
 800577c:	e00c      	b.n	8005798 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800577e:	f7ff f815 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 8005782:	61b8      	str	r0, [r7, #24]
        break;
 8005784:	e008      	b.n	8005798 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800578a:	61bb      	str	r3, [r7, #24]
        break;
 800578c:	e004      	b.n	8005798 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	77bb      	strb	r3, [r7, #30]
        break;
 8005796:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 8082 	beq.w	80058a4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	005a      	lsls	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	441a      	add	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b0f      	cmp	r3, #15
 80057ba:	d916      	bls.n	80057ea <UART_SetConfig+0x2d2>
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057c2:	d212      	bcs.n	80057ea <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	f023 030f 	bic.w	r3, r3, #15
 80057cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	085b      	lsrs	r3, r3, #1
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	b29a      	uxth	r2, r3
 80057da:	89fb      	ldrh	r3, [r7, #14]
 80057dc:	4313      	orrs	r3, r2
 80057de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	89fa      	ldrh	r2, [r7, #14]
 80057e6:	60da      	str	r2, [r3, #12]
 80057e8:	e05c      	b.n	80058a4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	77bb      	strb	r3, [r7, #30]
 80057ee:	e059      	b.n	80058a4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057f0:	7ffb      	ldrb	r3, [r7, #31]
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d835      	bhi.n	8005862 <UART_SetConfig+0x34a>
 80057f6:	a201      	add	r2, pc, #4	@ (adr r2, 80057fc <UART_SetConfig+0x2e4>)
 80057f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fc:	08005821 	.word	0x08005821
 8005800:	08005829 	.word	0x08005829
 8005804:	0800584d 	.word	0x0800584d
 8005808:	08005863 	.word	0x08005863
 800580c:	08005853 	.word	0x08005853
 8005810:	08005863 	.word	0x08005863
 8005814:	08005863 	.word	0x08005863
 8005818:	08005863 	.word	0x08005863
 800581c:	0800585b 	.word	0x0800585b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005820:	f7ff f824 	bl	800486c <HAL_RCC_GetPCLK1Freq>
 8005824:	61b8      	str	r0, [r7, #24]
        break;
 8005826:	e021      	b.n	800586c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005828:	f7ff f842 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 800582c:	61b8      	str	r0, [r7, #24]
        break;
 800582e:	e01d      	b.n	800586c <UART_SetConfig+0x354>
 8005830:	40013800 	.word	0x40013800
 8005834:	40021000 	.word	0x40021000
 8005838:	40004400 	.word	0x40004400
 800583c:	40004800 	.word	0x40004800
 8005840:	40004c00 	.word	0x40004c00
 8005844:	40005000 	.word	0x40005000
 8005848:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800584c:	4b1b      	ldr	r3, [pc, #108]	@ (80058bc <UART_SetConfig+0x3a4>)
 800584e:	61bb      	str	r3, [r7, #24]
        break;
 8005850:	e00c      	b.n	800586c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005852:	f7fe ffab 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 8005856:	61b8      	str	r0, [r7, #24]
        break;
 8005858:	e008      	b.n	800586c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800585a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800585e:	61bb      	str	r3, [r7, #24]
        break;
 8005860:	e004      	b.n	800586c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	77bb      	strb	r3, [r7, #30]
        break;
 800586a:	bf00      	nop
    }

    if (pclk != 0U)
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d018      	beq.n	80058a4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	085a      	lsrs	r2, r3, #1
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	441a      	add	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b0f      	cmp	r3, #15
 800588a:	d909      	bls.n	80058a0 <UART_SetConfig+0x388>
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005892:	d205      	bcs.n	80058a0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	b29a      	uxth	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60da      	str	r2, [r3, #12]
 800589e:	e001      	b.n	80058a4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80058b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3720      	adds	r7, #32
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	007a1200 	.word	0x007a1200

080058c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058cc:	f003 0308 	and.w	r3, r3, #8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01a      	beq.n	80059d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059be:	d10a      	bne.n	80059d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	605a      	str	r2, [r3, #4]
  }
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b098      	sub	sp, #96	@ 0x60
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a14:	f7fc f9f6 	bl	8001e04 <HAL_GetTick>
 8005a18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0308 	and.w	r3, r3, #8
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d12e      	bne.n	8005a86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a30:	2200      	movs	r2, #0
 8005a32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f88c 	bl	8005b54 <UART_WaitOnFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d021      	beq.n	8005a86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a56:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e6      	bne.n	8005a42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e062      	b.n	8005b4c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d149      	bne.n	8005b28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f856 	bl	8005b54 <UART_WaitOnFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d03c      	beq.n	8005b28 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	623b      	str	r3, [r7, #32]
   return(result);
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e6      	bne.n	8005aae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	60fb      	str	r3, [r7, #12]
   return(result);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0301 	bic.w	r3, r3, #1
 8005af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3308      	adds	r3, #8
 8005afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b00:	61fa      	str	r2, [r7, #28]
 8005b02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	69b9      	ldr	r1, [r7, #24]
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e5      	bne.n	8005ae0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e011      	b.n	8005b4c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3758      	adds	r7, #88	@ 0x58
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	603b      	str	r3, [r7, #0]
 8005b60:	4613      	mov	r3, r2
 8005b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b64:	e04f      	b.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6c:	d04b      	beq.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b6e:	f7fc f949 	bl	8001e04 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d302      	bcc.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e04e      	b.n	8005c26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d037      	beq.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b80      	cmp	r3, #128	@ 0x80
 8005b9a:	d034      	beq.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ba0:	d031      	beq.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d110      	bne.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2208      	movs	r2, #8
 8005bb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 f85e 	bl	8005c7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e029      	b.n	8005c26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005be0:	d111      	bne.n	8005c06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f844 	bl	8005c7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e00f      	b.n	8005c26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	bf0c      	ite	eq
 8005c16:	2301      	moveq	r3, #1
 8005c18:	2300      	movne	r3, #0
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d0a0      	beq.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b089      	sub	sp, #36	@ 0x24
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	e853 3f00 	ldrex	r3, [r3]
 8005c42:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005c4a:	61fb      	str	r3, [r7, #28]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c58:	6979      	ldr	r1, [r7, #20]
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	e841 2300 	strex	r3, r2, [r1]
 8005c60:	613b      	str	r3, [r7, #16]
   return(result);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1e6      	bne.n	8005c36 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005c6e:	bf00      	nop
 8005c70:	3724      	adds	r7, #36	@ 0x24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b095      	sub	sp, #84	@ 0x54
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c8a:	e853 3f00 	ldrex	r3, [r3]
 8005c8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ca2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ca6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e6      	bne.n	8005c82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3308      	adds	r3, #8
 8005cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3308      	adds	r3, #8
 8005cd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e5      	bne.n	8005cb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d118      	bne.n	8005d22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f023 0310 	bic.w	r3, r3, #16
 8005d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d0e:	61bb      	str	r3, [r7, #24]
 8005d10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	6979      	ldr	r1, [r7, #20]
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1e6      	bne.n	8005cf0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005d36:	bf00      	nop
 8005d38:	3754      	adds	r7, #84	@ 0x54
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b090      	sub	sp, #64	@ 0x40
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	d037      	beq.n	8005dc8 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8005d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3308      	adds	r3, #8
 8005d66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d80:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e5      	bne.n	8005d60 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	e853 3f00 	ldrex	r3, [r3]
 8005da0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005da8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	69b9      	ldr	r1, [r7, #24]
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	617b      	str	r3, [r7, #20]
   return(result);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e6      	bne.n	8005d94 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005dc6:	e002      	b.n	8005dce <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8005dc8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005dca:	f7fb f939 	bl	8001040 <HAL_UART_TxCpltCallback>
}
 8005dce:	bf00      	nop
 8005dd0:	3740      	adds	r7, #64	@ 0x40
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff fb77 	bl	80054d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b086      	sub	sp, #24
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e04:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e0c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e18:	2b80      	cmp	r3, #128	@ 0x80
 8005e1a:	d109      	bne.n	8005e30 <UART_DMAError+0x3e>
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	2b21      	cmp	r3, #33	@ 0x21
 8005e20:	d106      	bne.n	8005e30 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8005e2a:	6978      	ldr	r0, [r7, #20]
 8005e2c:	f7ff feff 	bl	8005c2e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3a:	2b40      	cmp	r3, #64	@ 0x40
 8005e3c:	d109      	bne.n	8005e52 <UART_DMAError+0x60>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b22      	cmp	r3, #34	@ 0x22
 8005e42:	d106      	bne.n	8005e52 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005e4c:	6978      	ldr	r0, [r7, #20]
 8005e4e:	f7ff ff14 	bl	8005c7a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e58:	f043 0210 	orr.w	r2, r3, #16
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e62:	6978      	ldr	r0, [r7, #20]
 8005e64:	f7ff fb42 	bl	80054ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e68:	bf00      	nop
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f7ff fb2c 	bl	80054ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e94:	bf00      	nop
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	61bb      	str	r3, [r7, #24]
 8005ec4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	6979      	ldr	r1, [r7, #20]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	613b      	str	r3, [r7, #16]
   return(result);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e6      	bne.n	8005ea4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7fb f8ac 	bl	8001040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ee8:	bf00      	nop
 8005eea:	3720      	adds	r7, #32
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <__cvt>:
 8005f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f08:	ec57 6b10 	vmov	r6, r7, d0
 8005f0c:	2f00      	cmp	r7, #0
 8005f0e:	460c      	mov	r4, r1
 8005f10:	4619      	mov	r1, r3
 8005f12:	463b      	mov	r3, r7
 8005f14:	bfbb      	ittet	lt
 8005f16:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005f1a:	461f      	movlt	r7, r3
 8005f1c:	2300      	movge	r3, #0
 8005f1e:	232d      	movlt	r3, #45	@ 0x2d
 8005f20:	700b      	strb	r3, [r1, #0]
 8005f22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f24:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005f28:	4691      	mov	r9, r2
 8005f2a:	f023 0820 	bic.w	r8, r3, #32
 8005f2e:	bfbc      	itt	lt
 8005f30:	4632      	movlt	r2, r6
 8005f32:	4616      	movlt	r6, r2
 8005f34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f38:	d005      	beq.n	8005f46 <__cvt+0x42>
 8005f3a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005f3e:	d100      	bne.n	8005f42 <__cvt+0x3e>
 8005f40:	3401      	adds	r4, #1
 8005f42:	2102      	movs	r1, #2
 8005f44:	e000      	b.n	8005f48 <__cvt+0x44>
 8005f46:	2103      	movs	r1, #3
 8005f48:	ab03      	add	r3, sp, #12
 8005f4a:	9301      	str	r3, [sp, #4]
 8005f4c:	ab02      	add	r3, sp, #8
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	ec47 6b10 	vmov	d0, r6, r7
 8005f54:	4653      	mov	r3, sl
 8005f56:	4622      	mov	r2, r4
 8005f58:	f001 f97a 	bl	8007250 <_dtoa_r>
 8005f5c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005f60:	4605      	mov	r5, r0
 8005f62:	d119      	bne.n	8005f98 <__cvt+0x94>
 8005f64:	f019 0f01 	tst.w	r9, #1
 8005f68:	d00e      	beq.n	8005f88 <__cvt+0x84>
 8005f6a:	eb00 0904 	add.w	r9, r0, r4
 8005f6e:	2200      	movs	r2, #0
 8005f70:	2300      	movs	r3, #0
 8005f72:	4630      	mov	r0, r6
 8005f74:	4639      	mov	r1, r7
 8005f76:	f7fa fda7 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f7a:	b108      	cbz	r0, 8005f80 <__cvt+0x7c>
 8005f7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f80:	2230      	movs	r2, #48	@ 0x30
 8005f82:	9b03      	ldr	r3, [sp, #12]
 8005f84:	454b      	cmp	r3, r9
 8005f86:	d31e      	bcc.n	8005fc6 <__cvt+0xc2>
 8005f88:	9b03      	ldr	r3, [sp, #12]
 8005f8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f8c:	1b5b      	subs	r3, r3, r5
 8005f8e:	4628      	mov	r0, r5
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	b004      	add	sp, #16
 8005f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f9c:	eb00 0904 	add.w	r9, r0, r4
 8005fa0:	d1e5      	bne.n	8005f6e <__cvt+0x6a>
 8005fa2:	7803      	ldrb	r3, [r0, #0]
 8005fa4:	2b30      	cmp	r3, #48	@ 0x30
 8005fa6:	d10a      	bne.n	8005fbe <__cvt+0xba>
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2300      	movs	r3, #0
 8005fac:	4630      	mov	r0, r6
 8005fae:	4639      	mov	r1, r7
 8005fb0:	f7fa fd8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fb4:	b918      	cbnz	r0, 8005fbe <__cvt+0xba>
 8005fb6:	f1c4 0401 	rsb	r4, r4, #1
 8005fba:	f8ca 4000 	str.w	r4, [sl]
 8005fbe:	f8da 3000 	ldr.w	r3, [sl]
 8005fc2:	4499      	add	r9, r3
 8005fc4:	e7d3      	b.n	8005f6e <__cvt+0x6a>
 8005fc6:	1c59      	adds	r1, r3, #1
 8005fc8:	9103      	str	r1, [sp, #12]
 8005fca:	701a      	strb	r2, [r3, #0]
 8005fcc:	e7d9      	b.n	8005f82 <__cvt+0x7e>

08005fce <__exponent>:
 8005fce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fd0:	2900      	cmp	r1, #0
 8005fd2:	bfba      	itte	lt
 8005fd4:	4249      	neglt	r1, r1
 8005fd6:	232d      	movlt	r3, #45	@ 0x2d
 8005fd8:	232b      	movge	r3, #43	@ 0x2b
 8005fda:	2909      	cmp	r1, #9
 8005fdc:	7002      	strb	r2, [r0, #0]
 8005fde:	7043      	strb	r3, [r0, #1]
 8005fe0:	dd29      	ble.n	8006036 <__exponent+0x68>
 8005fe2:	f10d 0307 	add.w	r3, sp, #7
 8005fe6:	461d      	mov	r5, r3
 8005fe8:	270a      	movs	r7, #10
 8005fea:	461a      	mov	r2, r3
 8005fec:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ff0:	fb07 1416 	mls	r4, r7, r6, r1
 8005ff4:	3430      	adds	r4, #48	@ 0x30
 8005ff6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	2c63      	cmp	r4, #99	@ 0x63
 8005ffe:	f103 33ff 	add.w	r3, r3, #4294967295
 8006002:	4631      	mov	r1, r6
 8006004:	dcf1      	bgt.n	8005fea <__exponent+0x1c>
 8006006:	3130      	adds	r1, #48	@ 0x30
 8006008:	1e94      	subs	r4, r2, #2
 800600a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800600e:	1c41      	adds	r1, r0, #1
 8006010:	4623      	mov	r3, r4
 8006012:	42ab      	cmp	r3, r5
 8006014:	d30a      	bcc.n	800602c <__exponent+0x5e>
 8006016:	f10d 0309 	add.w	r3, sp, #9
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	42ac      	cmp	r4, r5
 800601e:	bf88      	it	hi
 8006020:	2300      	movhi	r3, #0
 8006022:	3302      	adds	r3, #2
 8006024:	4403      	add	r3, r0
 8006026:	1a18      	subs	r0, r3, r0
 8006028:	b003      	add	sp, #12
 800602a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800602c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006030:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006034:	e7ed      	b.n	8006012 <__exponent+0x44>
 8006036:	2330      	movs	r3, #48	@ 0x30
 8006038:	3130      	adds	r1, #48	@ 0x30
 800603a:	7083      	strb	r3, [r0, #2]
 800603c:	70c1      	strb	r1, [r0, #3]
 800603e:	1d03      	adds	r3, r0, #4
 8006040:	e7f1      	b.n	8006026 <__exponent+0x58>
	...

08006044 <_printf_float>:
 8006044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006048:	b08d      	sub	sp, #52	@ 0x34
 800604a:	460c      	mov	r4, r1
 800604c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006050:	4616      	mov	r6, r2
 8006052:	461f      	mov	r7, r3
 8006054:	4605      	mov	r5, r0
 8006056:	f000 fff3 	bl	8007040 <_localeconv_r>
 800605a:	6803      	ldr	r3, [r0, #0]
 800605c:	9304      	str	r3, [sp, #16]
 800605e:	4618      	mov	r0, r3
 8006060:	f7fa f906 	bl	8000270 <strlen>
 8006064:	2300      	movs	r3, #0
 8006066:	930a      	str	r3, [sp, #40]	@ 0x28
 8006068:	f8d8 3000 	ldr.w	r3, [r8]
 800606c:	9005      	str	r0, [sp, #20]
 800606e:	3307      	adds	r3, #7
 8006070:	f023 0307 	bic.w	r3, r3, #7
 8006074:	f103 0208 	add.w	r2, r3, #8
 8006078:	f894 a018 	ldrb.w	sl, [r4, #24]
 800607c:	f8d4 b000 	ldr.w	fp, [r4]
 8006080:	f8c8 2000 	str.w	r2, [r8]
 8006084:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006088:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800608c:	9307      	str	r3, [sp, #28]
 800608e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006092:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800609a:	4b9c      	ldr	r3, [pc, #624]	@ (800630c <_printf_float+0x2c8>)
 800609c:	f04f 32ff 	mov.w	r2, #4294967295
 80060a0:	f7fa fd44 	bl	8000b2c <__aeabi_dcmpun>
 80060a4:	bb70      	cbnz	r0, 8006104 <_printf_float+0xc0>
 80060a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060aa:	4b98      	ldr	r3, [pc, #608]	@ (800630c <_printf_float+0x2c8>)
 80060ac:	f04f 32ff 	mov.w	r2, #4294967295
 80060b0:	f7fa fd1e 	bl	8000af0 <__aeabi_dcmple>
 80060b4:	bb30      	cbnz	r0, 8006104 <_printf_float+0xc0>
 80060b6:	2200      	movs	r2, #0
 80060b8:	2300      	movs	r3, #0
 80060ba:	4640      	mov	r0, r8
 80060bc:	4649      	mov	r1, r9
 80060be:	f7fa fd0d 	bl	8000adc <__aeabi_dcmplt>
 80060c2:	b110      	cbz	r0, 80060ca <_printf_float+0x86>
 80060c4:	232d      	movs	r3, #45	@ 0x2d
 80060c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ca:	4a91      	ldr	r2, [pc, #580]	@ (8006310 <_printf_float+0x2cc>)
 80060cc:	4b91      	ldr	r3, [pc, #580]	@ (8006314 <_printf_float+0x2d0>)
 80060ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80060d2:	bf94      	ite	ls
 80060d4:	4690      	movls	r8, r2
 80060d6:	4698      	movhi	r8, r3
 80060d8:	2303      	movs	r3, #3
 80060da:	6123      	str	r3, [r4, #16]
 80060dc:	f02b 0304 	bic.w	r3, fp, #4
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	f04f 0900 	mov.w	r9, #0
 80060e6:	9700      	str	r7, [sp, #0]
 80060e8:	4633      	mov	r3, r6
 80060ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80060ec:	4621      	mov	r1, r4
 80060ee:	4628      	mov	r0, r5
 80060f0:	f000 f9d2 	bl	8006498 <_printf_common>
 80060f4:	3001      	adds	r0, #1
 80060f6:	f040 808d 	bne.w	8006214 <_printf_float+0x1d0>
 80060fa:	f04f 30ff 	mov.w	r0, #4294967295
 80060fe:	b00d      	add	sp, #52	@ 0x34
 8006100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006104:	4642      	mov	r2, r8
 8006106:	464b      	mov	r3, r9
 8006108:	4640      	mov	r0, r8
 800610a:	4649      	mov	r1, r9
 800610c:	f7fa fd0e 	bl	8000b2c <__aeabi_dcmpun>
 8006110:	b140      	cbz	r0, 8006124 <_printf_float+0xe0>
 8006112:	464b      	mov	r3, r9
 8006114:	2b00      	cmp	r3, #0
 8006116:	bfbc      	itt	lt
 8006118:	232d      	movlt	r3, #45	@ 0x2d
 800611a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800611e:	4a7e      	ldr	r2, [pc, #504]	@ (8006318 <_printf_float+0x2d4>)
 8006120:	4b7e      	ldr	r3, [pc, #504]	@ (800631c <_printf_float+0x2d8>)
 8006122:	e7d4      	b.n	80060ce <_printf_float+0x8a>
 8006124:	6863      	ldr	r3, [r4, #4]
 8006126:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800612a:	9206      	str	r2, [sp, #24]
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	d13b      	bne.n	80061a8 <_printf_float+0x164>
 8006130:	2306      	movs	r3, #6
 8006132:	6063      	str	r3, [r4, #4]
 8006134:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006138:	2300      	movs	r3, #0
 800613a:	6022      	str	r2, [r4, #0]
 800613c:	9303      	str	r3, [sp, #12]
 800613e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006140:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006144:	ab09      	add	r3, sp, #36	@ 0x24
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	6861      	ldr	r1, [r4, #4]
 800614a:	ec49 8b10 	vmov	d0, r8, r9
 800614e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006152:	4628      	mov	r0, r5
 8006154:	f7ff fed6 	bl	8005f04 <__cvt>
 8006158:	9b06      	ldr	r3, [sp, #24]
 800615a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800615c:	2b47      	cmp	r3, #71	@ 0x47
 800615e:	4680      	mov	r8, r0
 8006160:	d129      	bne.n	80061b6 <_printf_float+0x172>
 8006162:	1cc8      	adds	r0, r1, #3
 8006164:	db02      	blt.n	800616c <_printf_float+0x128>
 8006166:	6863      	ldr	r3, [r4, #4]
 8006168:	4299      	cmp	r1, r3
 800616a:	dd41      	ble.n	80061f0 <_printf_float+0x1ac>
 800616c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006170:	fa5f fa8a 	uxtb.w	sl, sl
 8006174:	3901      	subs	r1, #1
 8006176:	4652      	mov	r2, sl
 8006178:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800617c:	9109      	str	r1, [sp, #36]	@ 0x24
 800617e:	f7ff ff26 	bl	8005fce <__exponent>
 8006182:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006184:	1813      	adds	r3, r2, r0
 8006186:	2a01      	cmp	r2, #1
 8006188:	4681      	mov	r9, r0
 800618a:	6123      	str	r3, [r4, #16]
 800618c:	dc02      	bgt.n	8006194 <_printf_float+0x150>
 800618e:	6822      	ldr	r2, [r4, #0]
 8006190:	07d2      	lsls	r2, r2, #31
 8006192:	d501      	bpl.n	8006198 <_printf_float+0x154>
 8006194:	3301      	adds	r3, #1
 8006196:	6123      	str	r3, [r4, #16]
 8006198:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0a2      	beq.n	80060e6 <_printf_float+0xa2>
 80061a0:	232d      	movs	r3, #45	@ 0x2d
 80061a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061a6:	e79e      	b.n	80060e6 <_printf_float+0xa2>
 80061a8:	9a06      	ldr	r2, [sp, #24]
 80061aa:	2a47      	cmp	r2, #71	@ 0x47
 80061ac:	d1c2      	bne.n	8006134 <_printf_float+0xf0>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1c0      	bne.n	8006134 <_printf_float+0xf0>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e7bd      	b.n	8006132 <_printf_float+0xee>
 80061b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80061ba:	d9db      	bls.n	8006174 <_printf_float+0x130>
 80061bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80061c0:	d118      	bne.n	80061f4 <_printf_float+0x1b0>
 80061c2:	2900      	cmp	r1, #0
 80061c4:	6863      	ldr	r3, [r4, #4]
 80061c6:	dd0b      	ble.n	80061e0 <_printf_float+0x19c>
 80061c8:	6121      	str	r1, [r4, #16]
 80061ca:	b913      	cbnz	r3, 80061d2 <_printf_float+0x18e>
 80061cc:	6822      	ldr	r2, [r4, #0]
 80061ce:	07d0      	lsls	r0, r2, #31
 80061d0:	d502      	bpl.n	80061d8 <_printf_float+0x194>
 80061d2:	3301      	adds	r3, #1
 80061d4:	440b      	add	r3, r1
 80061d6:	6123      	str	r3, [r4, #16]
 80061d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80061da:	f04f 0900 	mov.w	r9, #0
 80061de:	e7db      	b.n	8006198 <_printf_float+0x154>
 80061e0:	b913      	cbnz	r3, 80061e8 <_printf_float+0x1a4>
 80061e2:	6822      	ldr	r2, [r4, #0]
 80061e4:	07d2      	lsls	r2, r2, #31
 80061e6:	d501      	bpl.n	80061ec <_printf_float+0x1a8>
 80061e8:	3302      	adds	r3, #2
 80061ea:	e7f4      	b.n	80061d6 <_printf_float+0x192>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e7f2      	b.n	80061d6 <_printf_float+0x192>
 80061f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80061f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061f6:	4299      	cmp	r1, r3
 80061f8:	db05      	blt.n	8006206 <_printf_float+0x1c2>
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	6121      	str	r1, [r4, #16]
 80061fe:	07d8      	lsls	r0, r3, #31
 8006200:	d5ea      	bpl.n	80061d8 <_printf_float+0x194>
 8006202:	1c4b      	adds	r3, r1, #1
 8006204:	e7e7      	b.n	80061d6 <_printf_float+0x192>
 8006206:	2900      	cmp	r1, #0
 8006208:	bfd4      	ite	le
 800620a:	f1c1 0202 	rsble	r2, r1, #2
 800620e:	2201      	movgt	r2, #1
 8006210:	4413      	add	r3, r2
 8006212:	e7e0      	b.n	80061d6 <_printf_float+0x192>
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	055a      	lsls	r2, r3, #21
 8006218:	d407      	bmi.n	800622a <_printf_float+0x1e6>
 800621a:	6923      	ldr	r3, [r4, #16]
 800621c:	4642      	mov	r2, r8
 800621e:	4631      	mov	r1, r6
 8006220:	4628      	mov	r0, r5
 8006222:	47b8      	blx	r7
 8006224:	3001      	adds	r0, #1
 8006226:	d12b      	bne.n	8006280 <_printf_float+0x23c>
 8006228:	e767      	b.n	80060fa <_printf_float+0xb6>
 800622a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800622e:	f240 80dd 	bls.w	80063ec <_printf_float+0x3a8>
 8006232:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006236:	2200      	movs	r2, #0
 8006238:	2300      	movs	r3, #0
 800623a:	f7fa fc45 	bl	8000ac8 <__aeabi_dcmpeq>
 800623e:	2800      	cmp	r0, #0
 8006240:	d033      	beq.n	80062aa <_printf_float+0x266>
 8006242:	4a37      	ldr	r2, [pc, #220]	@ (8006320 <_printf_float+0x2dc>)
 8006244:	2301      	movs	r3, #1
 8006246:	4631      	mov	r1, r6
 8006248:	4628      	mov	r0, r5
 800624a:	47b8      	blx	r7
 800624c:	3001      	adds	r0, #1
 800624e:	f43f af54 	beq.w	80060fa <_printf_float+0xb6>
 8006252:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006256:	4543      	cmp	r3, r8
 8006258:	db02      	blt.n	8006260 <_printf_float+0x21c>
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	07d8      	lsls	r0, r3, #31
 800625e:	d50f      	bpl.n	8006280 <_printf_float+0x23c>
 8006260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006264:	4631      	mov	r1, r6
 8006266:	4628      	mov	r0, r5
 8006268:	47b8      	blx	r7
 800626a:	3001      	adds	r0, #1
 800626c:	f43f af45 	beq.w	80060fa <_printf_float+0xb6>
 8006270:	f04f 0900 	mov.w	r9, #0
 8006274:	f108 38ff 	add.w	r8, r8, #4294967295
 8006278:	f104 0a1a 	add.w	sl, r4, #26
 800627c:	45c8      	cmp	r8, r9
 800627e:	dc09      	bgt.n	8006294 <_printf_float+0x250>
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	079b      	lsls	r3, r3, #30
 8006284:	f100 8103 	bmi.w	800648e <_printf_float+0x44a>
 8006288:	68e0      	ldr	r0, [r4, #12]
 800628a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800628c:	4298      	cmp	r0, r3
 800628e:	bfb8      	it	lt
 8006290:	4618      	movlt	r0, r3
 8006292:	e734      	b.n	80060fe <_printf_float+0xba>
 8006294:	2301      	movs	r3, #1
 8006296:	4652      	mov	r2, sl
 8006298:	4631      	mov	r1, r6
 800629a:	4628      	mov	r0, r5
 800629c:	47b8      	blx	r7
 800629e:	3001      	adds	r0, #1
 80062a0:	f43f af2b 	beq.w	80060fa <_printf_float+0xb6>
 80062a4:	f109 0901 	add.w	r9, r9, #1
 80062a8:	e7e8      	b.n	800627c <_printf_float+0x238>
 80062aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	dc39      	bgt.n	8006324 <_printf_float+0x2e0>
 80062b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006320 <_printf_float+0x2dc>)
 80062b2:	2301      	movs	r3, #1
 80062b4:	4631      	mov	r1, r6
 80062b6:	4628      	mov	r0, r5
 80062b8:	47b8      	blx	r7
 80062ba:	3001      	adds	r0, #1
 80062bc:	f43f af1d 	beq.w	80060fa <_printf_float+0xb6>
 80062c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80062c4:	ea59 0303 	orrs.w	r3, r9, r3
 80062c8:	d102      	bne.n	80062d0 <_printf_float+0x28c>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	07d9      	lsls	r1, r3, #31
 80062ce:	d5d7      	bpl.n	8006280 <_printf_float+0x23c>
 80062d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	f43f af0d 	beq.w	80060fa <_printf_float+0xb6>
 80062e0:	f04f 0a00 	mov.w	sl, #0
 80062e4:	f104 0b1a 	add.w	fp, r4, #26
 80062e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ea:	425b      	negs	r3, r3
 80062ec:	4553      	cmp	r3, sl
 80062ee:	dc01      	bgt.n	80062f4 <_printf_float+0x2b0>
 80062f0:	464b      	mov	r3, r9
 80062f2:	e793      	b.n	800621c <_printf_float+0x1d8>
 80062f4:	2301      	movs	r3, #1
 80062f6:	465a      	mov	r2, fp
 80062f8:	4631      	mov	r1, r6
 80062fa:	4628      	mov	r0, r5
 80062fc:	47b8      	blx	r7
 80062fe:	3001      	adds	r0, #1
 8006300:	f43f aefb 	beq.w	80060fa <_printf_float+0xb6>
 8006304:	f10a 0a01 	add.w	sl, sl, #1
 8006308:	e7ee      	b.n	80062e8 <_printf_float+0x2a4>
 800630a:	bf00      	nop
 800630c:	7fefffff 	.word	0x7fefffff
 8006310:	0800af00 	.word	0x0800af00
 8006314:	0800af04 	.word	0x0800af04
 8006318:	0800af08 	.word	0x0800af08
 800631c:	0800af0c 	.word	0x0800af0c
 8006320:	0800af10 	.word	0x0800af10
 8006324:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006326:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800632a:	4553      	cmp	r3, sl
 800632c:	bfa8      	it	ge
 800632e:	4653      	movge	r3, sl
 8006330:	2b00      	cmp	r3, #0
 8006332:	4699      	mov	r9, r3
 8006334:	dc36      	bgt.n	80063a4 <_printf_float+0x360>
 8006336:	f04f 0b00 	mov.w	fp, #0
 800633a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800633e:	f104 021a 	add.w	r2, r4, #26
 8006342:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006344:	9306      	str	r3, [sp, #24]
 8006346:	eba3 0309 	sub.w	r3, r3, r9
 800634a:	455b      	cmp	r3, fp
 800634c:	dc31      	bgt.n	80063b2 <_printf_float+0x36e>
 800634e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006350:	459a      	cmp	sl, r3
 8006352:	dc3a      	bgt.n	80063ca <_printf_float+0x386>
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	07da      	lsls	r2, r3, #31
 8006358:	d437      	bmi.n	80063ca <_printf_float+0x386>
 800635a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800635c:	ebaa 0903 	sub.w	r9, sl, r3
 8006360:	9b06      	ldr	r3, [sp, #24]
 8006362:	ebaa 0303 	sub.w	r3, sl, r3
 8006366:	4599      	cmp	r9, r3
 8006368:	bfa8      	it	ge
 800636a:	4699      	movge	r9, r3
 800636c:	f1b9 0f00 	cmp.w	r9, #0
 8006370:	dc33      	bgt.n	80063da <_printf_float+0x396>
 8006372:	f04f 0800 	mov.w	r8, #0
 8006376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800637a:	f104 0b1a 	add.w	fp, r4, #26
 800637e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006380:	ebaa 0303 	sub.w	r3, sl, r3
 8006384:	eba3 0309 	sub.w	r3, r3, r9
 8006388:	4543      	cmp	r3, r8
 800638a:	f77f af79 	ble.w	8006280 <_printf_float+0x23c>
 800638e:	2301      	movs	r3, #1
 8006390:	465a      	mov	r2, fp
 8006392:	4631      	mov	r1, r6
 8006394:	4628      	mov	r0, r5
 8006396:	47b8      	blx	r7
 8006398:	3001      	adds	r0, #1
 800639a:	f43f aeae 	beq.w	80060fa <_printf_float+0xb6>
 800639e:	f108 0801 	add.w	r8, r8, #1
 80063a2:	e7ec      	b.n	800637e <_printf_float+0x33a>
 80063a4:	4642      	mov	r2, r8
 80063a6:	4631      	mov	r1, r6
 80063a8:	4628      	mov	r0, r5
 80063aa:	47b8      	blx	r7
 80063ac:	3001      	adds	r0, #1
 80063ae:	d1c2      	bne.n	8006336 <_printf_float+0x2f2>
 80063b0:	e6a3      	b.n	80060fa <_printf_float+0xb6>
 80063b2:	2301      	movs	r3, #1
 80063b4:	4631      	mov	r1, r6
 80063b6:	4628      	mov	r0, r5
 80063b8:	9206      	str	r2, [sp, #24]
 80063ba:	47b8      	blx	r7
 80063bc:	3001      	adds	r0, #1
 80063be:	f43f ae9c 	beq.w	80060fa <_printf_float+0xb6>
 80063c2:	9a06      	ldr	r2, [sp, #24]
 80063c4:	f10b 0b01 	add.w	fp, fp, #1
 80063c8:	e7bb      	b.n	8006342 <_printf_float+0x2fe>
 80063ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063ce:	4631      	mov	r1, r6
 80063d0:	4628      	mov	r0, r5
 80063d2:	47b8      	blx	r7
 80063d4:	3001      	adds	r0, #1
 80063d6:	d1c0      	bne.n	800635a <_printf_float+0x316>
 80063d8:	e68f      	b.n	80060fa <_printf_float+0xb6>
 80063da:	9a06      	ldr	r2, [sp, #24]
 80063dc:	464b      	mov	r3, r9
 80063de:	4442      	add	r2, r8
 80063e0:	4631      	mov	r1, r6
 80063e2:	4628      	mov	r0, r5
 80063e4:	47b8      	blx	r7
 80063e6:	3001      	adds	r0, #1
 80063e8:	d1c3      	bne.n	8006372 <_printf_float+0x32e>
 80063ea:	e686      	b.n	80060fa <_printf_float+0xb6>
 80063ec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063f0:	f1ba 0f01 	cmp.w	sl, #1
 80063f4:	dc01      	bgt.n	80063fa <_printf_float+0x3b6>
 80063f6:	07db      	lsls	r3, r3, #31
 80063f8:	d536      	bpl.n	8006468 <_printf_float+0x424>
 80063fa:	2301      	movs	r3, #1
 80063fc:	4642      	mov	r2, r8
 80063fe:	4631      	mov	r1, r6
 8006400:	4628      	mov	r0, r5
 8006402:	47b8      	blx	r7
 8006404:	3001      	adds	r0, #1
 8006406:	f43f ae78 	beq.w	80060fa <_printf_float+0xb6>
 800640a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800640e:	4631      	mov	r1, r6
 8006410:	4628      	mov	r0, r5
 8006412:	47b8      	blx	r7
 8006414:	3001      	adds	r0, #1
 8006416:	f43f ae70 	beq.w	80060fa <_printf_float+0xb6>
 800641a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800641e:	2200      	movs	r2, #0
 8006420:	2300      	movs	r3, #0
 8006422:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006426:	f7fa fb4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800642a:	b9c0      	cbnz	r0, 800645e <_printf_float+0x41a>
 800642c:	4653      	mov	r3, sl
 800642e:	f108 0201 	add.w	r2, r8, #1
 8006432:	4631      	mov	r1, r6
 8006434:	4628      	mov	r0, r5
 8006436:	47b8      	blx	r7
 8006438:	3001      	adds	r0, #1
 800643a:	d10c      	bne.n	8006456 <_printf_float+0x412>
 800643c:	e65d      	b.n	80060fa <_printf_float+0xb6>
 800643e:	2301      	movs	r3, #1
 8006440:	465a      	mov	r2, fp
 8006442:	4631      	mov	r1, r6
 8006444:	4628      	mov	r0, r5
 8006446:	47b8      	blx	r7
 8006448:	3001      	adds	r0, #1
 800644a:	f43f ae56 	beq.w	80060fa <_printf_float+0xb6>
 800644e:	f108 0801 	add.w	r8, r8, #1
 8006452:	45d0      	cmp	r8, sl
 8006454:	dbf3      	blt.n	800643e <_printf_float+0x3fa>
 8006456:	464b      	mov	r3, r9
 8006458:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800645c:	e6df      	b.n	800621e <_printf_float+0x1da>
 800645e:	f04f 0800 	mov.w	r8, #0
 8006462:	f104 0b1a 	add.w	fp, r4, #26
 8006466:	e7f4      	b.n	8006452 <_printf_float+0x40e>
 8006468:	2301      	movs	r3, #1
 800646a:	4642      	mov	r2, r8
 800646c:	e7e1      	b.n	8006432 <_printf_float+0x3ee>
 800646e:	2301      	movs	r3, #1
 8006470:	464a      	mov	r2, r9
 8006472:	4631      	mov	r1, r6
 8006474:	4628      	mov	r0, r5
 8006476:	47b8      	blx	r7
 8006478:	3001      	adds	r0, #1
 800647a:	f43f ae3e 	beq.w	80060fa <_printf_float+0xb6>
 800647e:	f108 0801 	add.w	r8, r8, #1
 8006482:	68e3      	ldr	r3, [r4, #12]
 8006484:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006486:	1a5b      	subs	r3, r3, r1
 8006488:	4543      	cmp	r3, r8
 800648a:	dcf0      	bgt.n	800646e <_printf_float+0x42a>
 800648c:	e6fc      	b.n	8006288 <_printf_float+0x244>
 800648e:	f04f 0800 	mov.w	r8, #0
 8006492:	f104 0919 	add.w	r9, r4, #25
 8006496:	e7f4      	b.n	8006482 <_printf_float+0x43e>

08006498 <_printf_common>:
 8006498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800649c:	4616      	mov	r6, r2
 800649e:	4698      	mov	r8, r3
 80064a0:	688a      	ldr	r2, [r1, #8]
 80064a2:	690b      	ldr	r3, [r1, #16]
 80064a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064a8:	4293      	cmp	r3, r2
 80064aa:	bfb8      	it	lt
 80064ac:	4613      	movlt	r3, r2
 80064ae:	6033      	str	r3, [r6, #0]
 80064b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064b4:	4607      	mov	r7, r0
 80064b6:	460c      	mov	r4, r1
 80064b8:	b10a      	cbz	r2, 80064be <_printf_common+0x26>
 80064ba:	3301      	adds	r3, #1
 80064bc:	6033      	str	r3, [r6, #0]
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	0699      	lsls	r1, r3, #26
 80064c2:	bf42      	ittt	mi
 80064c4:	6833      	ldrmi	r3, [r6, #0]
 80064c6:	3302      	addmi	r3, #2
 80064c8:	6033      	strmi	r3, [r6, #0]
 80064ca:	6825      	ldr	r5, [r4, #0]
 80064cc:	f015 0506 	ands.w	r5, r5, #6
 80064d0:	d106      	bne.n	80064e0 <_printf_common+0x48>
 80064d2:	f104 0a19 	add.w	sl, r4, #25
 80064d6:	68e3      	ldr	r3, [r4, #12]
 80064d8:	6832      	ldr	r2, [r6, #0]
 80064da:	1a9b      	subs	r3, r3, r2
 80064dc:	42ab      	cmp	r3, r5
 80064de:	dc26      	bgt.n	800652e <_printf_common+0x96>
 80064e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064e4:	6822      	ldr	r2, [r4, #0]
 80064e6:	3b00      	subs	r3, #0
 80064e8:	bf18      	it	ne
 80064ea:	2301      	movne	r3, #1
 80064ec:	0692      	lsls	r2, r2, #26
 80064ee:	d42b      	bmi.n	8006548 <_printf_common+0xb0>
 80064f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064f4:	4641      	mov	r1, r8
 80064f6:	4638      	mov	r0, r7
 80064f8:	47c8      	blx	r9
 80064fa:	3001      	adds	r0, #1
 80064fc:	d01e      	beq.n	800653c <_printf_common+0xa4>
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	6922      	ldr	r2, [r4, #16]
 8006502:	f003 0306 	and.w	r3, r3, #6
 8006506:	2b04      	cmp	r3, #4
 8006508:	bf02      	ittt	eq
 800650a:	68e5      	ldreq	r5, [r4, #12]
 800650c:	6833      	ldreq	r3, [r6, #0]
 800650e:	1aed      	subeq	r5, r5, r3
 8006510:	68a3      	ldr	r3, [r4, #8]
 8006512:	bf0c      	ite	eq
 8006514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006518:	2500      	movne	r5, #0
 800651a:	4293      	cmp	r3, r2
 800651c:	bfc4      	itt	gt
 800651e:	1a9b      	subgt	r3, r3, r2
 8006520:	18ed      	addgt	r5, r5, r3
 8006522:	2600      	movs	r6, #0
 8006524:	341a      	adds	r4, #26
 8006526:	42b5      	cmp	r5, r6
 8006528:	d11a      	bne.n	8006560 <_printf_common+0xc8>
 800652a:	2000      	movs	r0, #0
 800652c:	e008      	b.n	8006540 <_printf_common+0xa8>
 800652e:	2301      	movs	r3, #1
 8006530:	4652      	mov	r2, sl
 8006532:	4641      	mov	r1, r8
 8006534:	4638      	mov	r0, r7
 8006536:	47c8      	blx	r9
 8006538:	3001      	adds	r0, #1
 800653a:	d103      	bne.n	8006544 <_printf_common+0xac>
 800653c:	f04f 30ff 	mov.w	r0, #4294967295
 8006540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006544:	3501      	adds	r5, #1
 8006546:	e7c6      	b.n	80064d6 <_printf_common+0x3e>
 8006548:	18e1      	adds	r1, r4, r3
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	2030      	movs	r0, #48	@ 0x30
 800654e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006552:	4422      	add	r2, r4
 8006554:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006558:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800655c:	3302      	adds	r3, #2
 800655e:	e7c7      	b.n	80064f0 <_printf_common+0x58>
 8006560:	2301      	movs	r3, #1
 8006562:	4622      	mov	r2, r4
 8006564:	4641      	mov	r1, r8
 8006566:	4638      	mov	r0, r7
 8006568:	47c8      	blx	r9
 800656a:	3001      	adds	r0, #1
 800656c:	d0e6      	beq.n	800653c <_printf_common+0xa4>
 800656e:	3601      	adds	r6, #1
 8006570:	e7d9      	b.n	8006526 <_printf_common+0x8e>
	...

08006574 <_printf_i>:
 8006574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006578:	7e0f      	ldrb	r7, [r1, #24]
 800657a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800657c:	2f78      	cmp	r7, #120	@ 0x78
 800657e:	4691      	mov	r9, r2
 8006580:	4680      	mov	r8, r0
 8006582:	460c      	mov	r4, r1
 8006584:	469a      	mov	sl, r3
 8006586:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800658a:	d807      	bhi.n	800659c <_printf_i+0x28>
 800658c:	2f62      	cmp	r7, #98	@ 0x62
 800658e:	d80a      	bhi.n	80065a6 <_printf_i+0x32>
 8006590:	2f00      	cmp	r7, #0
 8006592:	f000 80d2 	beq.w	800673a <_printf_i+0x1c6>
 8006596:	2f58      	cmp	r7, #88	@ 0x58
 8006598:	f000 80b9 	beq.w	800670e <_printf_i+0x19a>
 800659c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065a4:	e03a      	b.n	800661c <_printf_i+0xa8>
 80065a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065aa:	2b15      	cmp	r3, #21
 80065ac:	d8f6      	bhi.n	800659c <_printf_i+0x28>
 80065ae:	a101      	add	r1, pc, #4	@ (adr r1, 80065b4 <_printf_i+0x40>)
 80065b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065b4:	0800660d 	.word	0x0800660d
 80065b8:	08006621 	.word	0x08006621
 80065bc:	0800659d 	.word	0x0800659d
 80065c0:	0800659d 	.word	0x0800659d
 80065c4:	0800659d 	.word	0x0800659d
 80065c8:	0800659d 	.word	0x0800659d
 80065cc:	08006621 	.word	0x08006621
 80065d0:	0800659d 	.word	0x0800659d
 80065d4:	0800659d 	.word	0x0800659d
 80065d8:	0800659d 	.word	0x0800659d
 80065dc:	0800659d 	.word	0x0800659d
 80065e0:	08006721 	.word	0x08006721
 80065e4:	0800664b 	.word	0x0800664b
 80065e8:	080066db 	.word	0x080066db
 80065ec:	0800659d 	.word	0x0800659d
 80065f0:	0800659d 	.word	0x0800659d
 80065f4:	08006743 	.word	0x08006743
 80065f8:	0800659d 	.word	0x0800659d
 80065fc:	0800664b 	.word	0x0800664b
 8006600:	0800659d 	.word	0x0800659d
 8006604:	0800659d 	.word	0x0800659d
 8006608:	080066e3 	.word	0x080066e3
 800660c:	6833      	ldr	r3, [r6, #0]
 800660e:	1d1a      	adds	r2, r3, #4
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6032      	str	r2, [r6, #0]
 8006614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006618:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800661c:	2301      	movs	r3, #1
 800661e:	e09d      	b.n	800675c <_printf_i+0x1e8>
 8006620:	6833      	ldr	r3, [r6, #0]
 8006622:	6820      	ldr	r0, [r4, #0]
 8006624:	1d19      	adds	r1, r3, #4
 8006626:	6031      	str	r1, [r6, #0]
 8006628:	0606      	lsls	r6, r0, #24
 800662a:	d501      	bpl.n	8006630 <_printf_i+0xbc>
 800662c:	681d      	ldr	r5, [r3, #0]
 800662e:	e003      	b.n	8006638 <_printf_i+0xc4>
 8006630:	0645      	lsls	r5, r0, #25
 8006632:	d5fb      	bpl.n	800662c <_printf_i+0xb8>
 8006634:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006638:	2d00      	cmp	r5, #0
 800663a:	da03      	bge.n	8006644 <_printf_i+0xd0>
 800663c:	232d      	movs	r3, #45	@ 0x2d
 800663e:	426d      	negs	r5, r5
 8006640:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006644:	4859      	ldr	r0, [pc, #356]	@ (80067ac <_printf_i+0x238>)
 8006646:	230a      	movs	r3, #10
 8006648:	e011      	b.n	800666e <_printf_i+0xfa>
 800664a:	6821      	ldr	r1, [r4, #0]
 800664c:	6833      	ldr	r3, [r6, #0]
 800664e:	0608      	lsls	r0, r1, #24
 8006650:	f853 5b04 	ldr.w	r5, [r3], #4
 8006654:	d402      	bmi.n	800665c <_printf_i+0xe8>
 8006656:	0649      	lsls	r1, r1, #25
 8006658:	bf48      	it	mi
 800665a:	b2ad      	uxthmi	r5, r5
 800665c:	2f6f      	cmp	r7, #111	@ 0x6f
 800665e:	4853      	ldr	r0, [pc, #332]	@ (80067ac <_printf_i+0x238>)
 8006660:	6033      	str	r3, [r6, #0]
 8006662:	bf14      	ite	ne
 8006664:	230a      	movne	r3, #10
 8006666:	2308      	moveq	r3, #8
 8006668:	2100      	movs	r1, #0
 800666a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800666e:	6866      	ldr	r6, [r4, #4]
 8006670:	60a6      	str	r6, [r4, #8]
 8006672:	2e00      	cmp	r6, #0
 8006674:	bfa2      	ittt	ge
 8006676:	6821      	ldrge	r1, [r4, #0]
 8006678:	f021 0104 	bicge.w	r1, r1, #4
 800667c:	6021      	strge	r1, [r4, #0]
 800667e:	b90d      	cbnz	r5, 8006684 <_printf_i+0x110>
 8006680:	2e00      	cmp	r6, #0
 8006682:	d04b      	beq.n	800671c <_printf_i+0x1a8>
 8006684:	4616      	mov	r6, r2
 8006686:	fbb5 f1f3 	udiv	r1, r5, r3
 800668a:	fb03 5711 	mls	r7, r3, r1, r5
 800668e:	5dc7      	ldrb	r7, [r0, r7]
 8006690:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006694:	462f      	mov	r7, r5
 8006696:	42bb      	cmp	r3, r7
 8006698:	460d      	mov	r5, r1
 800669a:	d9f4      	bls.n	8006686 <_printf_i+0x112>
 800669c:	2b08      	cmp	r3, #8
 800669e:	d10b      	bne.n	80066b8 <_printf_i+0x144>
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	07df      	lsls	r7, r3, #31
 80066a4:	d508      	bpl.n	80066b8 <_printf_i+0x144>
 80066a6:	6923      	ldr	r3, [r4, #16]
 80066a8:	6861      	ldr	r1, [r4, #4]
 80066aa:	4299      	cmp	r1, r3
 80066ac:	bfde      	ittt	le
 80066ae:	2330      	movle	r3, #48	@ 0x30
 80066b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066b8:	1b92      	subs	r2, r2, r6
 80066ba:	6122      	str	r2, [r4, #16]
 80066bc:	f8cd a000 	str.w	sl, [sp]
 80066c0:	464b      	mov	r3, r9
 80066c2:	aa03      	add	r2, sp, #12
 80066c4:	4621      	mov	r1, r4
 80066c6:	4640      	mov	r0, r8
 80066c8:	f7ff fee6 	bl	8006498 <_printf_common>
 80066cc:	3001      	adds	r0, #1
 80066ce:	d14a      	bne.n	8006766 <_printf_i+0x1f2>
 80066d0:	f04f 30ff 	mov.w	r0, #4294967295
 80066d4:	b004      	add	sp, #16
 80066d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	f043 0320 	orr.w	r3, r3, #32
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	4833      	ldr	r0, [pc, #204]	@ (80067b0 <_printf_i+0x23c>)
 80066e4:	2778      	movs	r7, #120	@ 0x78
 80066e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	6831      	ldr	r1, [r6, #0]
 80066ee:	061f      	lsls	r7, r3, #24
 80066f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80066f4:	d402      	bmi.n	80066fc <_printf_i+0x188>
 80066f6:	065f      	lsls	r7, r3, #25
 80066f8:	bf48      	it	mi
 80066fa:	b2ad      	uxthmi	r5, r5
 80066fc:	6031      	str	r1, [r6, #0]
 80066fe:	07d9      	lsls	r1, r3, #31
 8006700:	bf44      	itt	mi
 8006702:	f043 0320 	orrmi.w	r3, r3, #32
 8006706:	6023      	strmi	r3, [r4, #0]
 8006708:	b11d      	cbz	r5, 8006712 <_printf_i+0x19e>
 800670a:	2310      	movs	r3, #16
 800670c:	e7ac      	b.n	8006668 <_printf_i+0xf4>
 800670e:	4827      	ldr	r0, [pc, #156]	@ (80067ac <_printf_i+0x238>)
 8006710:	e7e9      	b.n	80066e6 <_printf_i+0x172>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	f023 0320 	bic.w	r3, r3, #32
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	e7f6      	b.n	800670a <_printf_i+0x196>
 800671c:	4616      	mov	r6, r2
 800671e:	e7bd      	b.n	800669c <_printf_i+0x128>
 8006720:	6833      	ldr	r3, [r6, #0]
 8006722:	6825      	ldr	r5, [r4, #0]
 8006724:	6961      	ldr	r1, [r4, #20]
 8006726:	1d18      	adds	r0, r3, #4
 8006728:	6030      	str	r0, [r6, #0]
 800672a:	062e      	lsls	r6, r5, #24
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	d501      	bpl.n	8006734 <_printf_i+0x1c0>
 8006730:	6019      	str	r1, [r3, #0]
 8006732:	e002      	b.n	800673a <_printf_i+0x1c6>
 8006734:	0668      	lsls	r0, r5, #25
 8006736:	d5fb      	bpl.n	8006730 <_printf_i+0x1bc>
 8006738:	8019      	strh	r1, [r3, #0]
 800673a:	2300      	movs	r3, #0
 800673c:	6123      	str	r3, [r4, #16]
 800673e:	4616      	mov	r6, r2
 8006740:	e7bc      	b.n	80066bc <_printf_i+0x148>
 8006742:	6833      	ldr	r3, [r6, #0]
 8006744:	1d1a      	adds	r2, r3, #4
 8006746:	6032      	str	r2, [r6, #0]
 8006748:	681e      	ldr	r6, [r3, #0]
 800674a:	6862      	ldr	r2, [r4, #4]
 800674c:	2100      	movs	r1, #0
 800674e:	4630      	mov	r0, r6
 8006750:	f7f9 fd3e 	bl	80001d0 <memchr>
 8006754:	b108      	cbz	r0, 800675a <_printf_i+0x1e6>
 8006756:	1b80      	subs	r0, r0, r6
 8006758:	6060      	str	r0, [r4, #4]
 800675a:	6863      	ldr	r3, [r4, #4]
 800675c:	6123      	str	r3, [r4, #16]
 800675e:	2300      	movs	r3, #0
 8006760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006764:	e7aa      	b.n	80066bc <_printf_i+0x148>
 8006766:	6923      	ldr	r3, [r4, #16]
 8006768:	4632      	mov	r2, r6
 800676a:	4649      	mov	r1, r9
 800676c:	4640      	mov	r0, r8
 800676e:	47d0      	blx	sl
 8006770:	3001      	adds	r0, #1
 8006772:	d0ad      	beq.n	80066d0 <_printf_i+0x15c>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	079b      	lsls	r3, r3, #30
 8006778:	d413      	bmi.n	80067a2 <_printf_i+0x22e>
 800677a:	68e0      	ldr	r0, [r4, #12]
 800677c:	9b03      	ldr	r3, [sp, #12]
 800677e:	4298      	cmp	r0, r3
 8006780:	bfb8      	it	lt
 8006782:	4618      	movlt	r0, r3
 8006784:	e7a6      	b.n	80066d4 <_printf_i+0x160>
 8006786:	2301      	movs	r3, #1
 8006788:	4632      	mov	r2, r6
 800678a:	4649      	mov	r1, r9
 800678c:	4640      	mov	r0, r8
 800678e:	47d0      	blx	sl
 8006790:	3001      	adds	r0, #1
 8006792:	d09d      	beq.n	80066d0 <_printf_i+0x15c>
 8006794:	3501      	adds	r5, #1
 8006796:	68e3      	ldr	r3, [r4, #12]
 8006798:	9903      	ldr	r1, [sp, #12]
 800679a:	1a5b      	subs	r3, r3, r1
 800679c:	42ab      	cmp	r3, r5
 800679e:	dcf2      	bgt.n	8006786 <_printf_i+0x212>
 80067a0:	e7eb      	b.n	800677a <_printf_i+0x206>
 80067a2:	2500      	movs	r5, #0
 80067a4:	f104 0619 	add.w	r6, r4, #25
 80067a8:	e7f5      	b.n	8006796 <_printf_i+0x222>
 80067aa:	bf00      	nop
 80067ac:	0800af12 	.word	0x0800af12
 80067b0:	0800af23 	.word	0x0800af23

080067b4 <_scanf_float>:
 80067b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b8:	b087      	sub	sp, #28
 80067ba:	4617      	mov	r7, r2
 80067bc:	9303      	str	r3, [sp, #12]
 80067be:	688b      	ldr	r3, [r1, #8]
 80067c0:	1e5a      	subs	r2, r3, #1
 80067c2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80067c6:	bf81      	itttt	hi
 80067c8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80067cc:	eb03 0b05 	addhi.w	fp, r3, r5
 80067d0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80067d4:	608b      	strhi	r3, [r1, #8]
 80067d6:	680b      	ldr	r3, [r1, #0]
 80067d8:	460a      	mov	r2, r1
 80067da:	f04f 0500 	mov.w	r5, #0
 80067de:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80067e2:	f842 3b1c 	str.w	r3, [r2], #28
 80067e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80067ea:	4680      	mov	r8, r0
 80067ec:	460c      	mov	r4, r1
 80067ee:	bf98      	it	ls
 80067f0:	f04f 0b00 	movls.w	fp, #0
 80067f4:	9201      	str	r2, [sp, #4]
 80067f6:	4616      	mov	r6, r2
 80067f8:	46aa      	mov	sl, r5
 80067fa:	46a9      	mov	r9, r5
 80067fc:	9502      	str	r5, [sp, #8]
 80067fe:	68a2      	ldr	r2, [r4, #8]
 8006800:	b152      	cbz	r2, 8006818 <_scanf_float+0x64>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b4e      	cmp	r3, #78	@ 0x4e
 8006808:	d864      	bhi.n	80068d4 <_scanf_float+0x120>
 800680a:	2b40      	cmp	r3, #64	@ 0x40
 800680c:	d83c      	bhi.n	8006888 <_scanf_float+0xd4>
 800680e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006812:	b2c8      	uxtb	r0, r1
 8006814:	280e      	cmp	r0, #14
 8006816:	d93a      	bls.n	800688e <_scanf_float+0xda>
 8006818:	f1b9 0f00 	cmp.w	r9, #0
 800681c:	d003      	beq.n	8006826 <_scanf_float+0x72>
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	f10a 3aff 	add.w	sl, sl, #4294967295
 800682a:	f1ba 0f01 	cmp.w	sl, #1
 800682e:	f200 8117 	bhi.w	8006a60 <_scanf_float+0x2ac>
 8006832:	9b01      	ldr	r3, [sp, #4]
 8006834:	429e      	cmp	r6, r3
 8006836:	f200 8108 	bhi.w	8006a4a <_scanf_float+0x296>
 800683a:	2001      	movs	r0, #1
 800683c:	b007      	add	sp, #28
 800683e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006842:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006846:	2a0d      	cmp	r2, #13
 8006848:	d8e6      	bhi.n	8006818 <_scanf_float+0x64>
 800684a:	a101      	add	r1, pc, #4	@ (adr r1, 8006850 <_scanf_float+0x9c>)
 800684c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006850:	08006997 	.word	0x08006997
 8006854:	08006819 	.word	0x08006819
 8006858:	08006819 	.word	0x08006819
 800685c:	08006819 	.word	0x08006819
 8006860:	080069f7 	.word	0x080069f7
 8006864:	080069cf 	.word	0x080069cf
 8006868:	08006819 	.word	0x08006819
 800686c:	08006819 	.word	0x08006819
 8006870:	080069a5 	.word	0x080069a5
 8006874:	08006819 	.word	0x08006819
 8006878:	08006819 	.word	0x08006819
 800687c:	08006819 	.word	0x08006819
 8006880:	08006819 	.word	0x08006819
 8006884:	0800695d 	.word	0x0800695d
 8006888:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800688c:	e7db      	b.n	8006846 <_scanf_float+0x92>
 800688e:	290e      	cmp	r1, #14
 8006890:	d8c2      	bhi.n	8006818 <_scanf_float+0x64>
 8006892:	a001      	add	r0, pc, #4	@ (adr r0, 8006898 <_scanf_float+0xe4>)
 8006894:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006898:	0800694d 	.word	0x0800694d
 800689c:	08006819 	.word	0x08006819
 80068a0:	0800694d 	.word	0x0800694d
 80068a4:	080069e3 	.word	0x080069e3
 80068a8:	08006819 	.word	0x08006819
 80068ac:	080068f5 	.word	0x080068f5
 80068b0:	08006933 	.word	0x08006933
 80068b4:	08006933 	.word	0x08006933
 80068b8:	08006933 	.word	0x08006933
 80068bc:	08006933 	.word	0x08006933
 80068c0:	08006933 	.word	0x08006933
 80068c4:	08006933 	.word	0x08006933
 80068c8:	08006933 	.word	0x08006933
 80068cc:	08006933 	.word	0x08006933
 80068d0:	08006933 	.word	0x08006933
 80068d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80068d6:	d809      	bhi.n	80068ec <_scanf_float+0x138>
 80068d8:	2b60      	cmp	r3, #96	@ 0x60
 80068da:	d8b2      	bhi.n	8006842 <_scanf_float+0x8e>
 80068dc:	2b54      	cmp	r3, #84	@ 0x54
 80068de:	d07b      	beq.n	80069d8 <_scanf_float+0x224>
 80068e0:	2b59      	cmp	r3, #89	@ 0x59
 80068e2:	d199      	bne.n	8006818 <_scanf_float+0x64>
 80068e4:	2d07      	cmp	r5, #7
 80068e6:	d197      	bne.n	8006818 <_scanf_float+0x64>
 80068e8:	2508      	movs	r5, #8
 80068ea:	e02c      	b.n	8006946 <_scanf_float+0x192>
 80068ec:	2b74      	cmp	r3, #116	@ 0x74
 80068ee:	d073      	beq.n	80069d8 <_scanf_float+0x224>
 80068f0:	2b79      	cmp	r3, #121	@ 0x79
 80068f2:	e7f6      	b.n	80068e2 <_scanf_float+0x12e>
 80068f4:	6821      	ldr	r1, [r4, #0]
 80068f6:	05c8      	lsls	r0, r1, #23
 80068f8:	d51b      	bpl.n	8006932 <_scanf_float+0x17e>
 80068fa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80068fe:	6021      	str	r1, [r4, #0]
 8006900:	f109 0901 	add.w	r9, r9, #1
 8006904:	f1bb 0f00 	cmp.w	fp, #0
 8006908:	d003      	beq.n	8006912 <_scanf_float+0x15e>
 800690a:	3201      	adds	r2, #1
 800690c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006910:	60a2      	str	r2, [r4, #8]
 8006912:	68a3      	ldr	r3, [r4, #8]
 8006914:	3b01      	subs	r3, #1
 8006916:	60a3      	str	r3, [r4, #8]
 8006918:	6923      	ldr	r3, [r4, #16]
 800691a:	3301      	adds	r3, #1
 800691c:	6123      	str	r3, [r4, #16]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	3b01      	subs	r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	607b      	str	r3, [r7, #4]
 8006926:	f340 8087 	ble.w	8006a38 <_scanf_float+0x284>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	3301      	adds	r3, #1
 800692e:	603b      	str	r3, [r7, #0]
 8006930:	e765      	b.n	80067fe <_scanf_float+0x4a>
 8006932:	eb1a 0105 	adds.w	r1, sl, r5
 8006936:	f47f af6f 	bne.w	8006818 <_scanf_float+0x64>
 800693a:	6822      	ldr	r2, [r4, #0]
 800693c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006940:	6022      	str	r2, [r4, #0]
 8006942:	460d      	mov	r5, r1
 8006944:	468a      	mov	sl, r1
 8006946:	f806 3b01 	strb.w	r3, [r6], #1
 800694a:	e7e2      	b.n	8006912 <_scanf_float+0x15e>
 800694c:	6822      	ldr	r2, [r4, #0]
 800694e:	0610      	lsls	r0, r2, #24
 8006950:	f57f af62 	bpl.w	8006818 <_scanf_float+0x64>
 8006954:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006958:	6022      	str	r2, [r4, #0]
 800695a:	e7f4      	b.n	8006946 <_scanf_float+0x192>
 800695c:	f1ba 0f00 	cmp.w	sl, #0
 8006960:	d10e      	bne.n	8006980 <_scanf_float+0x1cc>
 8006962:	f1b9 0f00 	cmp.w	r9, #0
 8006966:	d10e      	bne.n	8006986 <_scanf_float+0x1d2>
 8006968:	6822      	ldr	r2, [r4, #0]
 800696a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800696e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006972:	d108      	bne.n	8006986 <_scanf_float+0x1d2>
 8006974:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006978:	6022      	str	r2, [r4, #0]
 800697a:	f04f 0a01 	mov.w	sl, #1
 800697e:	e7e2      	b.n	8006946 <_scanf_float+0x192>
 8006980:	f1ba 0f02 	cmp.w	sl, #2
 8006984:	d055      	beq.n	8006a32 <_scanf_float+0x27e>
 8006986:	2d01      	cmp	r5, #1
 8006988:	d002      	beq.n	8006990 <_scanf_float+0x1dc>
 800698a:	2d04      	cmp	r5, #4
 800698c:	f47f af44 	bne.w	8006818 <_scanf_float+0x64>
 8006990:	3501      	adds	r5, #1
 8006992:	b2ed      	uxtb	r5, r5
 8006994:	e7d7      	b.n	8006946 <_scanf_float+0x192>
 8006996:	f1ba 0f01 	cmp.w	sl, #1
 800699a:	f47f af3d 	bne.w	8006818 <_scanf_float+0x64>
 800699e:	f04f 0a02 	mov.w	sl, #2
 80069a2:	e7d0      	b.n	8006946 <_scanf_float+0x192>
 80069a4:	b97d      	cbnz	r5, 80069c6 <_scanf_float+0x212>
 80069a6:	f1b9 0f00 	cmp.w	r9, #0
 80069aa:	f47f af38 	bne.w	800681e <_scanf_float+0x6a>
 80069ae:	6822      	ldr	r2, [r4, #0]
 80069b0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80069b4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80069b8:	f040 8108 	bne.w	8006bcc <_scanf_float+0x418>
 80069bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80069c0:	6022      	str	r2, [r4, #0]
 80069c2:	2501      	movs	r5, #1
 80069c4:	e7bf      	b.n	8006946 <_scanf_float+0x192>
 80069c6:	2d03      	cmp	r5, #3
 80069c8:	d0e2      	beq.n	8006990 <_scanf_float+0x1dc>
 80069ca:	2d05      	cmp	r5, #5
 80069cc:	e7de      	b.n	800698c <_scanf_float+0x1d8>
 80069ce:	2d02      	cmp	r5, #2
 80069d0:	f47f af22 	bne.w	8006818 <_scanf_float+0x64>
 80069d4:	2503      	movs	r5, #3
 80069d6:	e7b6      	b.n	8006946 <_scanf_float+0x192>
 80069d8:	2d06      	cmp	r5, #6
 80069da:	f47f af1d 	bne.w	8006818 <_scanf_float+0x64>
 80069de:	2507      	movs	r5, #7
 80069e0:	e7b1      	b.n	8006946 <_scanf_float+0x192>
 80069e2:	6822      	ldr	r2, [r4, #0]
 80069e4:	0591      	lsls	r1, r2, #22
 80069e6:	f57f af17 	bpl.w	8006818 <_scanf_float+0x64>
 80069ea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80069ee:	6022      	str	r2, [r4, #0]
 80069f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80069f4:	e7a7      	b.n	8006946 <_scanf_float+0x192>
 80069f6:	6822      	ldr	r2, [r4, #0]
 80069f8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80069fc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006a00:	d006      	beq.n	8006a10 <_scanf_float+0x25c>
 8006a02:	0550      	lsls	r0, r2, #21
 8006a04:	f57f af08 	bpl.w	8006818 <_scanf_float+0x64>
 8006a08:	f1b9 0f00 	cmp.w	r9, #0
 8006a0c:	f000 80de 	beq.w	8006bcc <_scanf_float+0x418>
 8006a10:	0591      	lsls	r1, r2, #22
 8006a12:	bf58      	it	pl
 8006a14:	9902      	ldrpl	r1, [sp, #8]
 8006a16:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a1a:	bf58      	it	pl
 8006a1c:	eba9 0101 	subpl.w	r1, r9, r1
 8006a20:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006a24:	bf58      	it	pl
 8006a26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006a2a:	6022      	str	r2, [r4, #0]
 8006a2c:	f04f 0900 	mov.w	r9, #0
 8006a30:	e789      	b.n	8006946 <_scanf_float+0x192>
 8006a32:	f04f 0a03 	mov.w	sl, #3
 8006a36:	e786      	b.n	8006946 <_scanf_float+0x192>
 8006a38:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006a3c:	4639      	mov	r1, r7
 8006a3e:	4640      	mov	r0, r8
 8006a40:	4798      	blx	r3
 8006a42:	2800      	cmp	r0, #0
 8006a44:	f43f aedb 	beq.w	80067fe <_scanf_float+0x4a>
 8006a48:	e6e6      	b.n	8006818 <_scanf_float+0x64>
 8006a4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a52:	463a      	mov	r2, r7
 8006a54:	4640      	mov	r0, r8
 8006a56:	4798      	blx	r3
 8006a58:	6923      	ldr	r3, [r4, #16]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	6123      	str	r3, [r4, #16]
 8006a5e:	e6e8      	b.n	8006832 <_scanf_float+0x7e>
 8006a60:	1e6b      	subs	r3, r5, #1
 8006a62:	2b06      	cmp	r3, #6
 8006a64:	d824      	bhi.n	8006ab0 <_scanf_float+0x2fc>
 8006a66:	2d02      	cmp	r5, #2
 8006a68:	d836      	bhi.n	8006ad8 <_scanf_float+0x324>
 8006a6a:	9b01      	ldr	r3, [sp, #4]
 8006a6c:	429e      	cmp	r6, r3
 8006a6e:	f67f aee4 	bls.w	800683a <_scanf_float+0x86>
 8006a72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a7a:	463a      	mov	r2, r7
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	4798      	blx	r3
 8006a80:	6923      	ldr	r3, [r4, #16]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	6123      	str	r3, [r4, #16]
 8006a86:	e7f0      	b.n	8006a6a <_scanf_float+0x2b6>
 8006a88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a8c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006a90:	463a      	mov	r2, r7
 8006a92:	4640      	mov	r0, r8
 8006a94:	4798      	blx	r3
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	6123      	str	r3, [r4, #16]
 8006a9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aa0:	fa5f fa8a 	uxtb.w	sl, sl
 8006aa4:	f1ba 0f02 	cmp.w	sl, #2
 8006aa8:	d1ee      	bne.n	8006a88 <_scanf_float+0x2d4>
 8006aaa:	3d03      	subs	r5, #3
 8006aac:	b2ed      	uxtb	r5, r5
 8006aae:	1b76      	subs	r6, r6, r5
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	05da      	lsls	r2, r3, #23
 8006ab4:	d530      	bpl.n	8006b18 <_scanf_float+0x364>
 8006ab6:	055b      	lsls	r3, r3, #21
 8006ab8:	d511      	bpl.n	8006ade <_scanf_float+0x32a>
 8006aba:	9b01      	ldr	r3, [sp, #4]
 8006abc:	429e      	cmp	r6, r3
 8006abe:	f67f aebc 	bls.w	800683a <_scanf_float+0x86>
 8006ac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ac6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006aca:	463a      	mov	r2, r7
 8006acc:	4640      	mov	r0, r8
 8006ace:	4798      	blx	r3
 8006ad0:	6923      	ldr	r3, [r4, #16]
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	6123      	str	r3, [r4, #16]
 8006ad6:	e7f0      	b.n	8006aba <_scanf_float+0x306>
 8006ad8:	46aa      	mov	sl, r5
 8006ada:	46b3      	mov	fp, r6
 8006adc:	e7de      	b.n	8006a9c <_scanf_float+0x2e8>
 8006ade:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ae2:	6923      	ldr	r3, [r4, #16]
 8006ae4:	2965      	cmp	r1, #101	@ 0x65
 8006ae6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006aea:	f106 35ff 	add.w	r5, r6, #4294967295
 8006aee:	6123      	str	r3, [r4, #16]
 8006af0:	d00c      	beq.n	8006b0c <_scanf_float+0x358>
 8006af2:	2945      	cmp	r1, #69	@ 0x45
 8006af4:	d00a      	beq.n	8006b0c <_scanf_float+0x358>
 8006af6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006afa:	463a      	mov	r2, r7
 8006afc:	4640      	mov	r0, r8
 8006afe:	4798      	blx	r3
 8006b00:	6923      	ldr	r3, [r4, #16]
 8006b02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	1eb5      	subs	r5, r6, #2
 8006b0a:	6123      	str	r3, [r4, #16]
 8006b0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b10:	463a      	mov	r2, r7
 8006b12:	4640      	mov	r0, r8
 8006b14:	4798      	blx	r3
 8006b16:	462e      	mov	r6, r5
 8006b18:	6822      	ldr	r2, [r4, #0]
 8006b1a:	f012 0210 	ands.w	r2, r2, #16
 8006b1e:	d001      	beq.n	8006b24 <_scanf_float+0x370>
 8006b20:	2000      	movs	r0, #0
 8006b22:	e68b      	b.n	800683c <_scanf_float+0x88>
 8006b24:	7032      	strb	r2, [r6, #0]
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b30:	d11c      	bne.n	8006b6c <_scanf_float+0x3b8>
 8006b32:	9b02      	ldr	r3, [sp, #8]
 8006b34:	454b      	cmp	r3, r9
 8006b36:	eba3 0209 	sub.w	r2, r3, r9
 8006b3a:	d123      	bne.n	8006b84 <_scanf_float+0x3d0>
 8006b3c:	9901      	ldr	r1, [sp, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	4640      	mov	r0, r8
 8006b42:	f002 fcfd 	bl	8009540 <_strtod_r>
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	6821      	ldr	r1, [r4, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f011 0f02 	tst.w	r1, #2
 8006b50:	ec57 6b10 	vmov	r6, r7, d0
 8006b54:	f103 0204 	add.w	r2, r3, #4
 8006b58:	d01f      	beq.n	8006b9a <_scanf_float+0x3e6>
 8006b5a:	9903      	ldr	r1, [sp, #12]
 8006b5c:	600a      	str	r2, [r1, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	e9c3 6700 	strd	r6, r7, [r3]
 8006b64:	68e3      	ldr	r3, [r4, #12]
 8006b66:	3301      	adds	r3, #1
 8006b68:	60e3      	str	r3, [r4, #12]
 8006b6a:	e7d9      	b.n	8006b20 <_scanf_float+0x36c>
 8006b6c:	9b04      	ldr	r3, [sp, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0e4      	beq.n	8006b3c <_scanf_float+0x388>
 8006b72:	9905      	ldr	r1, [sp, #20]
 8006b74:	230a      	movs	r3, #10
 8006b76:	3101      	adds	r1, #1
 8006b78:	4640      	mov	r0, r8
 8006b7a:	f002 fd61 	bl	8009640 <_strtol_r>
 8006b7e:	9b04      	ldr	r3, [sp, #16]
 8006b80:	9e05      	ldr	r6, [sp, #20]
 8006b82:	1ac2      	subs	r2, r0, r3
 8006b84:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006b88:	429e      	cmp	r6, r3
 8006b8a:	bf28      	it	cs
 8006b8c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006b90:	4910      	ldr	r1, [pc, #64]	@ (8006bd4 <_scanf_float+0x420>)
 8006b92:	4630      	mov	r0, r6
 8006b94:	f000 f954 	bl	8006e40 <siprintf>
 8006b98:	e7d0      	b.n	8006b3c <_scanf_float+0x388>
 8006b9a:	f011 0f04 	tst.w	r1, #4
 8006b9e:	9903      	ldr	r1, [sp, #12]
 8006ba0:	600a      	str	r2, [r1, #0]
 8006ba2:	d1dc      	bne.n	8006b5e <_scanf_float+0x3aa>
 8006ba4:	681d      	ldr	r5, [r3, #0]
 8006ba6:	4632      	mov	r2, r6
 8006ba8:	463b      	mov	r3, r7
 8006baa:	4630      	mov	r0, r6
 8006bac:	4639      	mov	r1, r7
 8006bae:	f7f9 ffbd 	bl	8000b2c <__aeabi_dcmpun>
 8006bb2:	b128      	cbz	r0, 8006bc0 <_scanf_float+0x40c>
 8006bb4:	4808      	ldr	r0, [pc, #32]	@ (8006bd8 <_scanf_float+0x424>)
 8006bb6:	f000 fabb 	bl	8007130 <nanf>
 8006bba:	ed85 0a00 	vstr	s0, [r5]
 8006bbe:	e7d1      	b.n	8006b64 <_scanf_float+0x3b0>
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	4639      	mov	r1, r7
 8006bc4:	f7fa f810 	bl	8000be8 <__aeabi_d2f>
 8006bc8:	6028      	str	r0, [r5, #0]
 8006bca:	e7cb      	b.n	8006b64 <_scanf_float+0x3b0>
 8006bcc:	f04f 0900 	mov.w	r9, #0
 8006bd0:	e629      	b.n	8006826 <_scanf_float+0x72>
 8006bd2:	bf00      	nop
 8006bd4:	0800af34 	.word	0x0800af34
 8006bd8:	0800b2cd 	.word	0x0800b2cd

08006bdc <std>:
 8006bdc:	2300      	movs	r3, #0
 8006bde:	b510      	push	{r4, lr}
 8006be0:	4604      	mov	r4, r0
 8006be2:	e9c0 3300 	strd	r3, r3, [r0]
 8006be6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bea:	6083      	str	r3, [r0, #8]
 8006bec:	8181      	strh	r1, [r0, #12]
 8006bee:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bf0:	81c2      	strh	r2, [r0, #14]
 8006bf2:	6183      	str	r3, [r0, #24]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	2208      	movs	r2, #8
 8006bf8:	305c      	adds	r0, #92	@ 0x5c
 8006bfa:	f000 fa19 	bl	8007030 <memset>
 8006bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006c34 <std+0x58>)
 8006c00:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c02:	4b0d      	ldr	r3, [pc, #52]	@ (8006c38 <std+0x5c>)
 8006c04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c06:	4b0d      	ldr	r3, [pc, #52]	@ (8006c3c <std+0x60>)
 8006c08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c40 <std+0x64>)
 8006c0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c44 <std+0x68>)
 8006c10:	6224      	str	r4, [r4, #32]
 8006c12:	429c      	cmp	r4, r3
 8006c14:	d006      	beq.n	8006c24 <std+0x48>
 8006c16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c1a:	4294      	cmp	r4, r2
 8006c1c:	d002      	beq.n	8006c24 <std+0x48>
 8006c1e:	33d0      	adds	r3, #208	@ 0xd0
 8006c20:	429c      	cmp	r4, r3
 8006c22:	d105      	bne.n	8006c30 <std+0x54>
 8006c24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c2c:	f000 ba7c 	b.w	8007128 <__retarget_lock_init_recursive>
 8006c30:	bd10      	pop	{r4, pc}
 8006c32:	bf00      	nop
 8006c34:	08006e81 	.word	0x08006e81
 8006c38:	08006ea3 	.word	0x08006ea3
 8006c3c:	08006edb 	.word	0x08006edb
 8006c40:	08006eff 	.word	0x08006eff
 8006c44:	20000468 	.word	0x20000468

08006c48 <stdio_exit_handler>:
 8006c48:	4a02      	ldr	r2, [pc, #8]	@ (8006c54 <stdio_exit_handler+0xc>)
 8006c4a:	4903      	ldr	r1, [pc, #12]	@ (8006c58 <stdio_exit_handler+0x10>)
 8006c4c:	4803      	ldr	r0, [pc, #12]	@ (8006c5c <stdio_exit_handler+0x14>)
 8006c4e:	f000 b869 	b.w	8006d24 <_fwalk_sglue>
 8006c52:	bf00      	nop
 8006c54:	2000009c 	.word	0x2000009c
 8006c58:	08009c81 	.word	0x08009c81
 8006c5c:	200000ac 	.word	0x200000ac

08006c60 <cleanup_stdio>:
 8006c60:	6841      	ldr	r1, [r0, #4]
 8006c62:	4b0c      	ldr	r3, [pc, #48]	@ (8006c94 <cleanup_stdio+0x34>)
 8006c64:	4299      	cmp	r1, r3
 8006c66:	b510      	push	{r4, lr}
 8006c68:	4604      	mov	r4, r0
 8006c6a:	d001      	beq.n	8006c70 <cleanup_stdio+0x10>
 8006c6c:	f003 f808 	bl	8009c80 <_fflush_r>
 8006c70:	68a1      	ldr	r1, [r4, #8]
 8006c72:	4b09      	ldr	r3, [pc, #36]	@ (8006c98 <cleanup_stdio+0x38>)
 8006c74:	4299      	cmp	r1, r3
 8006c76:	d002      	beq.n	8006c7e <cleanup_stdio+0x1e>
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f003 f801 	bl	8009c80 <_fflush_r>
 8006c7e:	68e1      	ldr	r1, [r4, #12]
 8006c80:	4b06      	ldr	r3, [pc, #24]	@ (8006c9c <cleanup_stdio+0x3c>)
 8006c82:	4299      	cmp	r1, r3
 8006c84:	d004      	beq.n	8006c90 <cleanup_stdio+0x30>
 8006c86:	4620      	mov	r0, r4
 8006c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c8c:	f002 bff8 	b.w	8009c80 <_fflush_r>
 8006c90:	bd10      	pop	{r4, pc}
 8006c92:	bf00      	nop
 8006c94:	20000468 	.word	0x20000468
 8006c98:	200004d0 	.word	0x200004d0
 8006c9c:	20000538 	.word	0x20000538

08006ca0 <global_stdio_init.part.0>:
 8006ca0:	b510      	push	{r4, lr}
 8006ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd0 <global_stdio_init.part.0+0x30>)
 8006ca4:	4c0b      	ldr	r4, [pc, #44]	@ (8006cd4 <global_stdio_init.part.0+0x34>)
 8006ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8006cd8 <global_stdio_init.part.0+0x38>)
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	4620      	mov	r0, r4
 8006cac:	2200      	movs	r2, #0
 8006cae:	2104      	movs	r1, #4
 8006cb0:	f7ff ff94 	bl	8006bdc <std>
 8006cb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006cb8:	2201      	movs	r2, #1
 8006cba:	2109      	movs	r1, #9
 8006cbc:	f7ff ff8e 	bl	8006bdc <std>
 8006cc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cca:	2112      	movs	r1, #18
 8006ccc:	f7ff bf86 	b.w	8006bdc <std>
 8006cd0:	200005a0 	.word	0x200005a0
 8006cd4:	20000468 	.word	0x20000468
 8006cd8:	08006c49 	.word	0x08006c49

08006cdc <__sfp_lock_acquire>:
 8006cdc:	4801      	ldr	r0, [pc, #4]	@ (8006ce4 <__sfp_lock_acquire+0x8>)
 8006cde:	f000 ba24 	b.w	800712a <__retarget_lock_acquire_recursive>
 8006ce2:	bf00      	nop
 8006ce4:	200005a9 	.word	0x200005a9

08006ce8 <__sfp_lock_release>:
 8006ce8:	4801      	ldr	r0, [pc, #4]	@ (8006cf0 <__sfp_lock_release+0x8>)
 8006cea:	f000 ba1f 	b.w	800712c <__retarget_lock_release_recursive>
 8006cee:	bf00      	nop
 8006cf0:	200005a9 	.word	0x200005a9

08006cf4 <__sinit>:
 8006cf4:	b510      	push	{r4, lr}
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	f7ff fff0 	bl	8006cdc <__sfp_lock_acquire>
 8006cfc:	6a23      	ldr	r3, [r4, #32]
 8006cfe:	b11b      	cbz	r3, 8006d08 <__sinit+0x14>
 8006d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d04:	f7ff bff0 	b.w	8006ce8 <__sfp_lock_release>
 8006d08:	4b04      	ldr	r3, [pc, #16]	@ (8006d1c <__sinit+0x28>)
 8006d0a:	6223      	str	r3, [r4, #32]
 8006d0c:	4b04      	ldr	r3, [pc, #16]	@ (8006d20 <__sinit+0x2c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1f5      	bne.n	8006d00 <__sinit+0xc>
 8006d14:	f7ff ffc4 	bl	8006ca0 <global_stdio_init.part.0>
 8006d18:	e7f2      	b.n	8006d00 <__sinit+0xc>
 8006d1a:	bf00      	nop
 8006d1c:	08006c61 	.word	0x08006c61
 8006d20:	200005a0 	.word	0x200005a0

08006d24 <_fwalk_sglue>:
 8006d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d28:	4607      	mov	r7, r0
 8006d2a:	4688      	mov	r8, r1
 8006d2c:	4614      	mov	r4, r2
 8006d2e:	2600      	movs	r6, #0
 8006d30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d34:	f1b9 0901 	subs.w	r9, r9, #1
 8006d38:	d505      	bpl.n	8006d46 <_fwalk_sglue+0x22>
 8006d3a:	6824      	ldr	r4, [r4, #0]
 8006d3c:	2c00      	cmp	r4, #0
 8006d3e:	d1f7      	bne.n	8006d30 <_fwalk_sglue+0xc>
 8006d40:	4630      	mov	r0, r6
 8006d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d46:	89ab      	ldrh	r3, [r5, #12]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d907      	bls.n	8006d5c <_fwalk_sglue+0x38>
 8006d4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d50:	3301      	adds	r3, #1
 8006d52:	d003      	beq.n	8006d5c <_fwalk_sglue+0x38>
 8006d54:	4629      	mov	r1, r5
 8006d56:	4638      	mov	r0, r7
 8006d58:	47c0      	blx	r8
 8006d5a:	4306      	orrs	r6, r0
 8006d5c:	3568      	adds	r5, #104	@ 0x68
 8006d5e:	e7e9      	b.n	8006d34 <_fwalk_sglue+0x10>

08006d60 <iprintf>:
 8006d60:	b40f      	push	{r0, r1, r2, r3}
 8006d62:	b507      	push	{r0, r1, r2, lr}
 8006d64:	4906      	ldr	r1, [pc, #24]	@ (8006d80 <iprintf+0x20>)
 8006d66:	ab04      	add	r3, sp, #16
 8006d68:	6808      	ldr	r0, [r1, #0]
 8006d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d6e:	6881      	ldr	r1, [r0, #8]
 8006d70:	9301      	str	r3, [sp, #4]
 8006d72:	f002 fde9 	bl	8009948 <_vfiprintf_r>
 8006d76:	b003      	add	sp, #12
 8006d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d7c:	b004      	add	sp, #16
 8006d7e:	4770      	bx	lr
 8006d80:	200000a8 	.word	0x200000a8

08006d84 <_puts_r>:
 8006d84:	6a03      	ldr	r3, [r0, #32]
 8006d86:	b570      	push	{r4, r5, r6, lr}
 8006d88:	6884      	ldr	r4, [r0, #8]
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	460e      	mov	r6, r1
 8006d8e:	b90b      	cbnz	r3, 8006d94 <_puts_r+0x10>
 8006d90:	f7ff ffb0 	bl	8006cf4 <__sinit>
 8006d94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d96:	07db      	lsls	r3, r3, #31
 8006d98:	d405      	bmi.n	8006da6 <_puts_r+0x22>
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	0598      	lsls	r0, r3, #22
 8006d9e:	d402      	bmi.n	8006da6 <_puts_r+0x22>
 8006da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006da2:	f000 f9c2 	bl	800712a <__retarget_lock_acquire_recursive>
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	0719      	lsls	r1, r3, #28
 8006daa:	d502      	bpl.n	8006db2 <_puts_r+0x2e>
 8006dac:	6923      	ldr	r3, [r4, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d135      	bne.n	8006e1e <_puts_r+0x9a>
 8006db2:	4621      	mov	r1, r4
 8006db4:	4628      	mov	r0, r5
 8006db6:	f000 f8e5 	bl	8006f84 <__swsetup_r>
 8006dba:	b380      	cbz	r0, 8006e1e <_puts_r+0x9a>
 8006dbc:	f04f 35ff 	mov.w	r5, #4294967295
 8006dc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dc2:	07da      	lsls	r2, r3, #31
 8006dc4:	d405      	bmi.n	8006dd2 <_puts_r+0x4e>
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	059b      	lsls	r3, r3, #22
 8006dca:	d402      	bmi.n	8006dd2 <_puts_r+0x4e>
 8006dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dce:	f000 f9ad 	bl	800712c <__retarget_lock_release_recursive>
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	bd70      	pop	{r4, r5, r6, pc}
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	da04      	bge.n	8006de4 <_puts_r+0x60>
 8006dda:	69a2      	ldr	r2, [r4, #24]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	dc17      	bgt.n	8006e10 <_puts_r+0x8c>
 8006de0:	290a      	cmp	r1, #10
 8006de2:	d015      	beq.n	8006e10 <_puts_r+0x8c>
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	6022      	str	r2, [r4, #0]
 8006dea:	7019      	strb	r1, [r3, #0]
 8006dec:	68a3      	ldr	r3, [r4, #8]
 8006dee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006df2:	3b01      	subs	r3, #1
 8006df4:	60a3      	str	r3, [r4, #8]
 8006df6:	2900      	cmp	r1, #0
 8006df8:	d1ed      	bne.n	8006dd6 <_puts_r+0x52>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	da11      	bge.n	8006e22 <_puts_r+0x9e>
 8006dfe:	4622      	mov	r2, r4
 8006e00:	210a      	movs	r1, #10
 8006e02:	4628      	mov	r0, r5
 8006e04:	f000 f87f 	bl	8006f06 <__swbuf_r>
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d0d7      	beq.n	8006dbc <_puts_r+0x38>
 8006e0c:	250a      	movs	r5, #10
 8006e0e:	e7d7      	b.n	8006dc0 <_puts_r+0x3c>
 8006e10:	4622      	mov	r2, r4
 8006e12:	4628      	mov	r0, r5
 8006e14:	f000 f877 	bl	8006f06 <__swbuf_r>
 8006e18:	3001      	adds	r0, #1
 8006e1a:	d1e7      	bne.n	8006dec <_puts_r+0x68>
 8006e1c:	e7ce      	b.n	8006dbc <_puts_r+0x38>
 8006e1e:	3e01      	subs	r6, #1
 8006e20:	e7e4      	b.n	8006dec <_puts_r+0x68>
 8006e22:	6823      	ldr	r3, [r4, #0]
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	6022      	str	r2, [r4, #0]
 8006e28:	220a      	movs	r2, #10
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	e7ee      	b.n	8006e0c <_puts_r+0x88>
	...

08006e30 <puts>:
 8006e30:	4b02      	ldr	r3, [pc, #8]	@ (8006e3c <puts+0xc>)
 8006e32:	4601      	mov	r1, r0
 8006e34:	6818      	ldr	r0, [r3, #0]
 8006e36:	f7ff bfa5 	b.w	8006d84 <_puts_r>
 8006e3a:	bf00      	nop
 8006e3c:	200000a8 	.word	0x200000a8

08006e40 <siprintf>:
 8006e40:	b40e      	push	{r1, r2, r3}
 8006e42:	b500      	push	{lr}
 8006e44:	b09c      	sub	sp, #112	@ 0x70
 8006e46:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e48:	9002      	str	r0, [sp, #8]
 8006e4a:	9006      	str	r0, [sp, #24]
 8006e4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e50:	4809      	ldr	r0, [pc, #36]	@ (8006e78 <siprintf+0x38>)
 8006e52:	9107      	str	r1, [sp, #28]
 8006e54:	9104      	str	r1, [sp, #16]
 8006e56:	4909      	ldr	r1, [pc, #36]	@ (8006e7c <siprintf+0x3c>)
 8006e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e5c:	9105      	str	r1, [sp, #20]
 8006e5e:	6800      	ldr	r0, [r0, #0]
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	a902      	add	r1, sp, #8
 8006e64:	f002 fc4a 	bl	80096fc <_svfiprintf_r>
 8006e68:	9b02      	ldr	r3, [sp, #8]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	b01c      	add	sp, #112	@ 0x70
 8006e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e74:	b003      	add	sp, #12
 8006e76:	4770      	bx	lr
 8006e78:	200000a8 	.word	0x200000a8
 8006e7c:	ffff0208 	.word	0xffff0208

08006e80 <__sread>:
 8006e80:	b510      	push	{r4, lr}
 8006e82:	460c      	mov	r4, r1
 8006e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e88:	f000 f900 	bl	800708c <_read_r>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	bfab      	itete	ge
 8006e90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e92:	89a3      	ldrhlt	r3, [r4, #12]
 8006e94:	181b      	addge	r3, r3, r0
 8006e96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e9a:	bfac      	ite	ge
 8006e9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e9e:	81a3      	strhlt	r3, [r4, #12]
 8006ea0:	bd10      	pop	{r4, pc}

08006ea2 <__swrite>:
 8006ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea6:	461f      	mov	r7, r3
 8006ea8:	898b      	ldrh	r3, [r1, #12]
 8006eaa:	05db      	lsls	r3, r3, #23
 8006eac:	4605      	mov	r5, r0
 8006eae:	460c      	mov	r4, r1
 8006eb0:	4616      	mov	r6, r2
 8006eb2:	d505      	bpl.n	8006ec0 <__swrite+0x1e>
 8006eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb8:	2302      	movs	r3, #2
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f000 f8d4 	bl	8007068 <_lseek_r>
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ec6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006eca:	81a3      	strh	r3, [r4, #12]
 8006ecc:	4632      	mov	r2, r6
 8006ece:	463b      	mov	r3, r7
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed6:	f000 b8eb 	b.w	80070b0 <_write_r>

08006eda <__sseek>:
 8006eda:	b510      	push	{r4, lr}
 8006edc:	460c      	mov	r4, r1
 8006ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee2:	f000 f8c1 	bl	8007068 <_lseek_r>
 8006ee6:	1c43      	adds	r3, r0, #1
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	bf15      	itete	ne
 8006eec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006eee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ef2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ef6:	81a3      	strheq	r3, [r4, #12]
 8006ef8:	bf18      	it	ne
 8006efa:	81a3      	strhne	r3, [r4, #12]
 8006efc:	bd10      	pop	{r4, pc}

08006efe <__sclose>:
 8006efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f02:	f000 b8a1 	b.w	8007048 <_close_r>

08006f06 <__swbuf_r>:
 8006f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f08:	460e      	mov	r6, r1
 8006f0a:	4614      	mov	r4, r2
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	b118      	cbz	r0, 8006f18 <__swbuf_r+0x12>
 8006f10:	6a03      	ldr	r3, [r0, #32]
 8006f12:	b90b      	cbnz	r3, 8006f18 <__swbuf_r+0x12>
 8006f14:	f7ff feee 	bl	8006cf4 <__sinit>
 8006f18:	69a3      	ldr	r3, [r4, #24]
 8006f1a:	60a3      	str	r3, [r4, #8]
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	071a      	lsls	r2, r3, #28
 8006f20:	d501      	bpl.n	8006f26 <__swbuf_r+0x20>
 8006f22:	6923      	ldr	r3, [r4, #16]
 8006f24:	b943      	cbnz	r3, 8006f38 <__swbuf_r+0x32>
 8006f26:	4621      	mov	r1, r4
 8006f28:	4628      	mov	r0, r5
 8006f2a:	f000 f82b 	bl	8006f84 <__swsetup_r>
 8006f2e:	b118      	cbz	r0, 8006f38 <__swbuf_r+0x32>
 8006f30:	f04f 37ff 	mov.w	r7, #4294967295
 8006f34:	4638      	mov	r0, r7
 8006f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	6922      	ldr	r2, [r4, #16]
 8006f3c:	1a98      	subs	r0, r3, r2
 8006f3e:	6963      	ldr	r3, [r4, #20]
 8006f40:	b2f6      	uxtb	r6, r6
 8006f42:	4283      	cmp	r3, r0
 8006f44:	4637      	mov	r7, r6
 8006f46:	dc05      	bgt.n	8006f54 <__swbuf_r+0x4e>
 8006f48:	4621      	mov	r1, r4
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	f002 fe98 	bl	8009c80 <_fflush_r>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	d1ed      	bne.n	8006f30 <__swbuf_r+0x2a>
 8006f54:	68a3      	ldr	r3, [r4, #8]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	60a3      	str	r3, [r4, #8]
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	6022      	str	r2, [r4, #0]
 8006f60:	701e      	strb	r6, [r3, #0]
 8006f62:	6962      	ldr	r2, [r4, #20]
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d004      	beq.n	8006f74 <__swbuf_r+0x6e>
 8006f6a:	89a3      	ldrh	r3, [r4, #12]
 8006f6c:	07db      	lsls	r3, r3, #31
 8006f6e:	d5e1      	bpl.n	8006f34 <__swbuf_r+0x2e>
 8006f70:	2e0a      	cmp	r6, #10
 8006f72:	d1df      	bne.n	8006f34 <__swbuf_r+0x2e>
 8006f74:	4621      	mov	r1, r4
 8006f76:	4628      	mov	r0, r5
 8006f78:	f002 fe82 	bl	8009c80 <_fflush_r>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d0d9      	beq.n	8006f34 <__swbuf_r+0x2e>
 8006f80:	e7d6      	b.n	8006f30 <__swbuf_r+0x2a>
	...

08006f84 <__swsetup_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4b29      	ldr	r3, [pc, #164]	@ (800702c <__swsetup_r+0xa8>)
 8006f88:	4605      	mov	r5, r0
 8006f8a:	6818      	ldr	r0, [r3, #0]
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	b118      	cbz	r0, 8006f98 <__swsetup_r+0x14>
 8006f90:	6a03      	ldr	r3, [r0, #32]
 8006f92:	b90b      	cbnz	r3, 8006f98 <__swsetup_r+0x14>
 8006f94:	f7ff feae 	bl	8006cf4 <__sinit>
 8006f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f9c:	0719      	lsls	r1, r3, #28
 8006f9e:	d422      	bmi.n	8006fe6 <__swsetup_r+0x62>
 8006fa0:	06da      	lsls	r2, r3, #27
 8006fa2:	d407      	bmi.n	8006fb4 <__swsetup_r+0x30>
 8006fa4:	2209      	movs	r2, #9
 8006fa6:	602a      	str	r2, [r5, #0]
 8006fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fac:	81a3      	strh	r3, [r4, #12]
 8006fae:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb2:	e033      	b.n	800701c <__swsetup_r+0x98>
 8006fb4:	0758      	lsls	r0, r3, #29
 8006fb6:	d512      	bpl.n	8006fde <__swsetup_r+0x5a>
 8006fb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fba:	b141      	cbz	r1, 8006fce <__swsetup_r+0x4a>
 8006fbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fc0:	4299      	cmp	r1, r3
 8006fc2:	d002      	beq.n	8006fca <__swsetup_r+0x46>
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	f000 ff07 	bl	8007dd8 <_free_r>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006fd4:	81a3      	strh	r3, [r4, #12]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	6063      	str	r3, [r4, #4]
 8006fda:	6923      	ldr	r3, [r4, #16]
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	89a3      	ldrh	r3, [r4, #12]
 8006fe0:	f043 0308 	orr.w	r3, r3, #8
 8006fe4:	81a3      	strh	r3, [r4, #12]
 8006fe6:	6923      	ldr	r3, [r4, #16]
 8006fe8:	b94b      	cbnz	r3, 8006ffe <__swsetup_r+0x7a>
 8006fea:	89a3      	ldrh	r3, [r4, #12]
 8006fec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ff4:	d003      	beq.n	8006ffe <__swsetup_r+0x7a>
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f002 fe8f 	bl	8009d1c <__smakebuf_r>
 8006ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007002:	f013 0201 	ands.w	r2, r3, #1
 8007006:	d00a      	beq.n	800701e <__swsetup_r+0x9a>
 8007008:	2200      	movs	r2, #0
 800700a:	60a2      	str	r2, [r4, #8]
 800700c:	6962      	ldr	r2, [r4, #20]
 800700e:	4252      	negs	r2, r2
 8007010:	61a2      	str	r2, [r4, #24]
 8007012:	6922      	ldr	r2, [r4, #16]
 8007014:	b942      	cbnz	r2, 8007028 <__swsetup_r+0xa4>
 8007016:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800701a:	d1c5      	bne.n	8006fa8 <__swsetup_r+0x24>
 800701c:	bd38      	pop	{r3, r4, r5, pc}
 800701e:	0799      	lsls	r1, r3, #30
 8007020:	bf58      	it	pl
 8007022:	6962      	ldrpl	r2, [r4, #20]
 8007024:	60a2      	str	r2, [r4, #8]
 8007026:	e7f4      	b.n	8007012 <__swsetup_r+0x8e>
 8007028:	2000      	movs	r0, #0
 800702a:	e7f7      	b.n	800701c <__swsetup_r+0x98>
 800702c:	200000a8 	.word	0x200000a8

08007030 <memset>:
 8007030:	4402      	add	r2, r0
 8007032:	4603      	mov	r3, r0
 8007034:	4293      	cmp	r3, r2
 8007036:	d100      	bne.n	800703a <memset+0xa>
 8007038:	4770      	bx	lr
 800703a:	f803 1b01 	strb.w	r1, [r3], #1
 800703e:	e7f9      	b.n	8007034 <memset+0x4>

08007040 <_localeconv_r>:
 8007040:	4800      	ldr	r0, [pc, #0]	@ (8007044 <_localeconv_r+0x4>)
 8007042:	4770      	bx	lr
 8007044:	200001e8 	.word	0x200001e8

08007048 <_close_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4d06      	ldr	r5, [pc, #24]	@ (8007064 <_close_r+0x1c>)
 800704c:	2300      	movs	r3, #0
 800704e:	4604      	mov	r4, r0
 8007050:	4608      	mov	r0, r1
 8007052:	602b      	str	r3, [r5, #0]
 8007054:	f7fa fdd6 	bl	8001c04 <_close>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_close_r+0x1a>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_close_r+0x1a>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	200005a4 	.word	0x200005a4

08007068 <_lseek_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d07      	ldr	r5, [pc, #28]	@ (8007088 <_lseek_r+0x20>)
 800706c:	4604      	mov	r4, r0
 800706e:	4608      	mov	r0, r1
 8007070:	4611      	mov	r1, r2
 8007072:	2200      	movs	r2, #0
 8007074:	602a      	str	r2, [r5, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f7fa fdeb 	bl	8001c52 <_lseek>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_lseek_r+0x1e>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_lseek_r+0x1e>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	200005a4 	.word	0x200005a4

0800708c <_read_r>:
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	4d07      	ldr	r5, [pc, #28]	@ (80070ac <_read_r+0x20>)
 8007090:	4604      	mov	r4, r0
 8007092:	4608      	mov	r0, r1
 8007094:	4611      	mov	r1, r2
 8007096:	2200      	movs	r2, #0
 8007098:	602a      	str	r2, [r5, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	f7fa fd79 	bl	8001b92 <_read>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d102      	bne.n	80070aa <_read_r+0x1e>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	b103      	cbz	r3, 80070aa <_read_r+0x1e>
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	200005a4 	.word	0x200005a4

080070b0 <_write_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4d07      	ldr	r5, [pc, #28]	@ (80070d0 <_write_r+0x20>)
 80070b4:	4604      	mov	r4, r0
 80070b6:	4608      	mov	r0, r1
 80070b8:	4611      	mov	r1, r2
 80070ba:	2200      	movs	r2, #0
 80070bc:	602a      	str	r2, [r5, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	f7fa fd84 	bl	8001bcc <_write>
 80070c4:	1c43      	adds	r3, r0, #1
 80070c6:	d102      	bne.n	80070ce <_write_r+0x1e>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	b103      	cbz	r3, 80070ce <_write_r+0x1e>
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	bd38      	pop	{r3, r4, r5, pc}
 80070d0:	200005a4 	.word	0x200005a4

080070d4 <__errno>:
 80070d4:	4b01      	ldr	r3, [pc, #4]	@ (80070dc <__errno+0x8>)
 80070d6:	6818      	ldr	r0, [r3, #0]
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	200000a8 	.word	0x200000a8

080070e0 <__libc_init_array>:
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	4d0d      	ldr	r5, [pc, #52]	@ (8007118 <__libc_init_array+0x38>)
 80070e4:	4c0d      	ldr	r4, [pc, #52]	@ (800711c <__libc_init_array+0x3c>)
 80070e6:	1b64      	subs	r4, r4, r5
 80070e8:	10a4      	asrs	r4, r4, #2
 80070ea:	2600      	movs	r6, #0
 80070ec:	42a6      	cmp	r6, r4
 80070ee:	d109      	bne.n	8007104 <__libc_init_array+0x24>
 80070f0:	4d0b      	ldr	r5, [pc, #44]	@ (8007120 <__libc_init_array+0x40>)
 80070f2:	4c0c      	ldr	r4, [pc, #48]	@ (8007124 <__libc_init_array+0x44>)
 80070f4:	f003 fe52 	bl	800ad9c <_init>
 80070f8:	1b64      	subs	r4, r4, r5
 80070fa:	10a4      	asrs	r4, r4, #2
 80070fc:	2600      	movs	r6, #0
 80070fe:	42a6      	cmp	r6, r4
 8007100:	d105      	bne.n	800710e <__libc_init_array+0x2e>
 8007102:	bd70      	pop	{r4, r5, r6, pc}
 8007104:	f855 3b04 	ldr.w	r3, [r5], #4
 8007108:	4798      	blx	r3
 800710a:	3601      	adds	r6, #1
 800710c:	e7ee      	b.n	80070ec <__libc_init_array+0xc>
 800710e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007112:	4798      	blx	r3
 8007114:	3601      	adds	r6, #1
 8007116:	e7f2      	b.n	80070fe <__libc_init_array+0x1e>
 8007118:	0800b3a8 	.word	0x0800b3a8
 800711c:	0800b3a8 	.word	0x0800b3a8
 8007120:	0800b3a8 	.word	0x0800b3a8
 8007124:	0800b3ac 	.word	0x0800b3ac

08007128 <__retarget_lock_init_recursive>:
 8007128:	4770      	bx	lr

0800712a <__retarget_lock_acquire_recursive>:
 800712a:	4770      	bx	lr

0800712c <__retarget_lock_release_recursive>:
 800712c:	4770      	bx	lr
	...

08007130 <nanf>:
 8007130:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007138 <nanf+0x8>
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	7fc00000 	.word	0x7fc00000

0800713c <quorem>:
 800713c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007140:	6903      	ldr	r3, [r0, #16]
 8007142:	690c      	ldr	r4, [r1, #16]
 8007144:	42a3      	cmp	r3, r4
 8007146:	4607      	mov	r7, r0
 8007148:	db7e      	blt.n	8007248 <quorem+0x10c>
 800714a:	3c01      	subs	r4, #1
 800714c:	f101 0814 	add.w	r8, r1, #20
 8007150:	00a3      	lsls	r3, r4, #2
 8007152:	f100 0514 	add.w	r5, r0, #20
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800715c:	9301      	str	r3, [sp, #4]
 800715e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007162:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007166:	3301      	adds	r3, #1
 8007168:	429a      	cmp	r2, r3
 800716a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800716e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007172:	d32e      	bcc.n	80071d2 <quorem+0x96>
 8007174:	f04f 0a00 	mov.w	sl, #0
 8007178:	46c4      	mov	ip, r8
 800717a:	46ae      	mov	lr, r5
 800717c:	46d3      	mov	fp, sl
 800717e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007182:	b298      	uxth	r0, r3
 8007184:	fb06 a000 	mla	r0, r6, r0, sl
 8007188:	0c02      	lsrs	r2, r0, #16
 800718a:	0c1b      	lsrs	r3, r3, #16
 800718c:	fb06 2303 	mla	r3, r6, r3, r2
 8007190:	f8de 2000 	ldr.w	r2, [lr]
 8007194:	b280      	uxth	r0, r0
 8007196:	b292      	uxth	r2, r2
 8007198:	1a12      	subs	r2, r2, r0
 800719a:	445a      	add	r2, fp
 800719c:	f8de 0000 	ldr.w	r0, [lr]
 80071a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80071aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80071ae:	b292      	uxth	r2, r2
 80071b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071b4:	45e1      	cmp	r9, ip
 80071b6:	f84e 2b04 	str.w	r2, [lr], #4
 80071ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80071be:	d2de      	bcs.n	800717e <quorem+0x42>
 80071c0:	9b00      	ldr	r3, [sp, #0]
 80071c2:	58eb      	ldr	r3, [r5, r3]
 80071c4:	b92b      	cbnz	r3, 80071d2 <quorem+0x96>
 80071c6:	9b01      	ldr	r3, [sp, #4]
 80071c8:	3b04      	subs	r3, #4
 80071ca:	429d      	cmp	r5, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	d32f      	bcc.n	8007230 <quorem+0xf4>
 80071d0:	613c      	str	r4, [r7, #16]
 80071d2:	4638      	mov	r0, r7
 80071d4:	f001 f9c4 	bl	8008560 <__mcmp>
 80071d8:	2800      	cmp	r0, #0
 80071da:	db25      	blt.n	8007228 <quorem+0xec>
 80071dc:	4629      	mov	r1, r5
 80071de:	2000      	movs	r0, #0
 80071e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80071e4:	f8d1 c000 	ldr.w	ip, [r1]
 80071e8:	fa1f fe82 	uxth.w	lr, r2
 80071ec:	fa1f f38c 	uxth.w	r3, ip
 80071f0:	eba3 030e 	sub.w	r3, r3, lr
 80071f4:	4403      	add	r3, r0
 80071f6:	0c12      	lsrs	r2, r2, #16
 80071f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80071fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007200:	b29b      	uxth	r3, r3
 8007202:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007206:	45c1      	cmp	r9, r8
 8007208:	f841 3b04 	str.w	r3, [r1], #4
 800720c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007210:	d2e6      	bcs.n	80071e0 <quorem+0xa4>
 8007212:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007216:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800721a:	b922      	cbnz	r2, 8007226 <quorem+0xea>
 800721c:	3b04      	subs	r3, #4
 800721e:	429d      	cmp	r5, r3
 8007220:	461a      	mov	r2, r3
 8007222:	d30b      	bcc.n	800723c <quorem+0x100>
 8007224:	613c      	str	r4, [r7, #16]
 8007226:	3601      	adds	r6, #1
 8007228:	4630      	mov	r0, r6
 800722a:	b003      	add	sp, #12
 800722c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007230:	6812      	ldr	r2, [r2, #0]
 8007232:	3b04      	subs	r3, #4
 8007234:	2a00      	cmp	r2, #0
 8007236:	d1cb      	bne.n	80071d0 <quorem+0x94>
 8007238:	3c01      	subs	r4, #1
 800723a:	e7c6      	b.n	80071ca <quorem+0x8e>
 800723c:	6812      	ldr	r2, [r2, #0]
 800723e:	3b04      	subs	r3, #4
 8007240:	2a00      	cmp	r2, #0
 8007242:	d1ef      	bne.n	8007224 <quorem+0xe8>
 8007244:	3c01      	subs	r4, #1
 8007246:	e7ea      	b.n	800721e <quorem+0xe2>
 8007248:	2000      	movs	r0, #0
 800724a:	e7ee      	b.n	800722a <quorem+0xee>
 800724c:	0000      	movs	r0, r0
	...

08007250 <_dtoa_r>:
 8007250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	69c7      	ldr	r7, [r0, #28]
 8007256:	b099      	sub	sp, #100	@ 0x64
 8007258:	ed8d 0b02 	vstr	d0, [sp, #8]
 800725c:	ec55 4b10 	vmov	r4, r5, d0
 8007260:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007262:	9109      	str	r1, [sp, #36]	@ 0x24
 8007264:	4683      	mov	fp, r0
 8007266:	920e      	str	r2, [sp, #56]	@ 0x38
 8007268:	9313      	str	r3, [sp, #76]	@ 0x4c
 800726a:	b97f      	cbnz	r7, 800728c <_dtoa_r+0x3c>
 800726c:	2010      	movs	r0, #16
 800726e:	f000 fdfd 	bl	8007e6c <malloc>
 8007272:	4602      	mov	r2, r0
 8007274:	f8cb 001c 	str.w	r0, [fp, #28]
 8007278:	b920      	cbnz	r0, 8007284 <_dtoa_r+0x34>
 800727a:	4ba7      	ldr	r3, [pc, #668]	@ (8007518 <_dtoa_r+0x2c8>)
 800727c:	21ef      	movs	r1, #239	@ 0xef
 800727e:	48a7      	ldr	r0, [pc, #668]	@ (800751c <_dtoa_r+0x2cc>)
 8007280:	f002 fdfe 	bl	8009e80 <__assert_func>
 8007284:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007288:	6007      	str	r7, [r0, #0]
 800728a:	60c7      	str	r7, [r0, #12]
 800728c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007290:	6819      	ldr	r1, [r3, #0]
 8007292:	b159      	cbz	r1, 80072ac <_dtoa_r+0x5c>
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	604a      	str	r2, [r1, #4]
 8007298:	2301      	movs	r3, #1
 800729a:	4093      	lsls	r3, r2
 800729c:	608b      	str	r3, [r1, #8]
 800729e:	4658      	mov	r0, fp
 80072a0:	f000 feda 	bl	8008058 <_Bfree>
 80072a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]
 80072ac:	1e2b      	subs	r3, r5, #0
 80072ae:	bfb9      	ittee	lt
 80072b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80072b4:	9303      	strlt	r3, [sp, #12]
 80072b6:	2300      	movge	r3, #0
 80072b8:	6033      	strge	r3, [r6, #0]
 80072ba:	9f03      	ldr	r7, [sp, #12]
 80072bc:	4b98      	ldr	r3, [pc, #608]	@ (8007520 <_dtoa_r+0x2d0>)
 80072be:	bfbc      	itt	lt
 80072c0:	2201      	movlt	r2, #1
 80072c2:	6032      	strlt	r2, [r6, #0]
 80072c4:	43bb      	bics	r3, r7
 80072c6:	d112      	bne.n	80072ee <_dtoa_r+0x9e>
 80072c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80072ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072d4:	4323      	orrs	r3, r4
 80072d6:	f000 854d 	beq.w	8007d74 <_dtoa_r+0xb24>
 80072da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007534 <_dtoa_r+0x2e4>
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 854f 	beq.w	8007d84 <_dtoa_r+0xb34>
 80072e6:	f10a 0303 	add.w	r3, sl, #3
 80072ea:	f000 bd49 	b.w	8007d80 <_dtoa_r+0xb30>
 80072ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80072f2:	2200      	movs	r2, #0
 80072f4:	ec51 0b17 	vmov	r0, r1, d7
 80072f8:	2300      	movs	r3, #0
 80072fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80072fe:	f7f9 fbe3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007302:	4680      	mov	r8, r0
 8007304:	b158      	cbz	r0, 800731e <_dtoa_r+0xce>
 8007306:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007308:	2301      	movs	r3, #1
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800730e:	b113      	cbz	r3, 8007316 <_dtoa_r+0xc6>
 8007310:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007312:	4b84      	ldr	r3, [pc, #528]	@ (8007524 <_dtoa_r+0x2d4>)
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007538 <_dtoa_r+0x2e8>
 800731a:	f000 bd33 	b.w	8007d84 <_dtoa_r+0xb34>
 800731e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007322:	aa16      	add	r2, sp, #88	@ 0x58
 8007324:	a917      	add	r1, sp, #92	@ 0x5c
 8007326:	4658      	mov	r0, fp
 8007328:	f001 fa3a 	bl	80087a0 <__d2b>
 800732c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007330:	4681      	mov	r9, r0
 8007332:	2e00      	cmp	r6, #0
 8007334:	d077      	beq.n	8007426 <_dtoa_r+0x1d6>
 8007336:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007338:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800733c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007344:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007348:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800734c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007350:	4619      	mov	r1, r3
 8007352:	2200      	movs	r2, #0
 8007354:	4b74      	ldr	r3, [pc, #464]	@ (8007528 <_dtoa_r+0x2d8>)
 8007356:	f7f8 ff97 	bl	8000288 <__aeabi_dsub>
 800735a:	a369      	add	r3, pc, #420	@ (adr r3, 8007500 <_dtoa_r+0x2b0>)
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	f7f9 f94a 	bl	80005f8 <__aeabi_dmul>
 8007364:	a368      	add	r3, pc, #416	@ (adr r3, 8007508 <_dtoa_r+0x2b8>)
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	f7f8 ff8f 	bl	800028c <__adddf3>
 800736e:	4604      	mov	r4, r0
 8007370:	4630      	mov	r0, r6
 8007372:	460d      	mov	r5, r1
 8007374:	f7f9 f8d6 	bl	8000524 <__aeabi_i2d>
 8007378:	a365      	add	r3, pc, #404	@ (adr r3, 8007510 <_dtoa_r+0x2c0>)
 800737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737e:	f7f9 f93b 	bl	80005f8 <__aeabi_dmul>
 8007382:	4602      	mov	r2, r0
 8007384:	460b      	mov	r3, r1
 8007386:	4620      	mov	r0, r4
 8007388:	4629      	mov	r1, r5
 800738a:	f7f8 ff7f 	bl	800028c <__adddf3>
 800738e:	4604      	mov	r4, r0
 8007390:	460d      	mov	r5, r1
 8007392:	f7f9 fbe1 	bl	8000b58 <__aeabi_d2iz>
 8007396:	2200      	movs	r2, #0
 8007398:	4607      	mov	r7, r0
 800739a:	2300      	movs	r3, #0
 800739c:	4620      	mov	r0, r4
 800739e:	4629      	mov	r1, r5
 80073a0:	f7f9 fb9c 	bl	8000adc <__aeabi_dcmplt>
 80073a4:	b140      	cbz	r0, 80073b8 <_dtoa_r+0x168>
 80073a6:	4638      	mov	r0, r7
 80073a8:	f7f9 f8bc 	bl	8000524 <__aeabi_i2d>
 80073ac:	4622      	mov	r2, r4
 80073ae:	462b      	mov	r3, r5
 80073b0:	f7f9 fb8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80073b4:	b900      	cbnz	r0, 80073b8 <_dtoa_r+0x168>
 80073b6:	3f01      	subs	r7, #1
 80073b8:	2f16      	cmp	r7, #22
 80073ba:	d851      	bhi.n	8007460 <_dtoa_r+0x210>
 80073bc:	4b5b      	ldr	r3, [pc, #364]	@ (800752c <_dtoa_r+0x2dc>)
 80073be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073ca:	f7f9 fb87 	bl	8000adc <__aeabi_dcmplt>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d048      	beq.n	8007464 <_dtoa_r+0x214>
 80073d2:	3f01      	subs	r7, #1
 80073d4:	2300      	movs	r3, #0
 80073d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80073d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80073da:	1b9b      	subs	r3, r3, r6
 80073dc:	1e5a      	subs	r2, r3, #1
 80073de:	bf44      	itt	mi
 80073e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80073e4:	2300      	movmi	r3, #0
 80073e6:	9208      	str	r2, [sp, #32]
 80073e8:	bf54      	ite	pl
 80073ea:	f04f 0800 	movpl.w	r8, #0
 80073ee:	9308      	strmi	r3, [sp, #32]
 80073f0:	2f00      	cmp	r7, #0
 80073f2:	db39      	blt.n	8007468 <_dtoa_r+0x218>
 80073f4:	9b08      	ldr	r3, [sp, #32]
 80073f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80073f8:	443b      	add	r3, r7
 80073fa:	9308      	str	r3, [sp, #32]
 80073fc:	2300      	movs	r3, #0
 80073fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007402:	2b09      	cmp	r3, #9
 8007404:	d864      	bhi.n	80074d0 <_dtoa_r+0x280>
 8007406:	2b05      	cmp	r3, #5
 8007408:	bfc4      	itt	gt
 800740a:	3b04      	subgt	r3, #4
 800740c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800740e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007410:	f1a3 0302 	sub.w	r3, r3, #2
 8007414:	bfcc      	ite	gt
 8007416:	2400      	movgt	r4, #0
 8007418:	2401      	movle	r4, #1
 800741a:	2b03      	cmp	r3, #3
 800741c:	d863      	bhi.n	80074e6 <_dtoa_r+0x296>
 800741e:	e8df f003 	tbb	[pc, r3]
 8007422:	372a      	.short	0x372a
 8007424:	5535      	.short	0x5535
 8007426:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800742a:	441e      	add	r6, r3
 800742c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007430:	2b20      	cmp	r3, #32
 8007432:	bfc1      	itttt	gt
 8007434:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007438:	409f      	lslgt	r7, r3
 800743a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800743e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007442:	bfd6      	itet	le
 8007444:	f1c3 0320 	rsble	r3, r3, #32
 8007448:	ea47 0003 	orrgt.w	r0, r7, r3
 800744c:	fa04 f003 	lslle.w	r0, r4, r3
 8007450:	f7f9 f858 	bl	8000504 <__aeabi_ui2d>
 8007454:	2201      	movs	r2, #1
 8007456:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800745a:	3e01      	subs	r6, #1
 800745c:	9214      	str	r2, [sp, #80]	@ 0x50
 800745e:	e777      	b.n	8007350 <_dtoa_r+0x100>
 8007460:	2301      	movs	r3, #1
 8007462:	e7b8      	b.n	80073d6 <_dtoa_r+0x186>
 8007464:	9012      	str	r0, [sp, #72]	@ 0x48
 8007466:	e7b7      	b.n	80073d8 <_dtoa_r+0x188>
 8007468:	427b      	negs	r3, r7
 800746a:	930a      	str	r3, [sp, #40]	@ 0x28
 800746c:	2300      	movs	r3, #0
 800746e:	eba8 0807 	sub.w	r8, r8, r7
 8007472:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007474:	e7c4      	b.n	8007400 <_dtoa_r+0x1b0>
 8007476:	2300      	movs	r3, #0
 8007478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800747a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800747c:	2b00      	cmp	r3, #0
 800747e:	dc35      	bgt.n	80074ec <_dtoa_r+0x29c>
 8007480:	2301      	movs	r3, #1
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	9307      	str	r3, [sp, #28]
 8007486:	461a      	mov	r2, r3
 8007488:	920e      	str	r2, [sp, #56]	@ 0x38
 800748a:	e00b      	b.n	80074a4 <_dtoa_r+0x254>
 800748c:	2301      	movs	r3, #1
 800748e:	e7f3      	b.n	8007478 <_dtoa_r+0x228>
 8007490:	2300      	movs	r3, #0
 8007492:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007496:	18fb      	adds	r3, r7, r3
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	3301      	adds	r3, #1
 800749c:	2b01      	cmp	r3, #1
 800749e:	9307      	str	r3, [sp, #28]
 80074a0:	bfb8      	it	lt
 80074a2:	2301      	movlt	r3, #1
 80074a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80074a8:	2100      	movs	r1, #0
 80074aa:	2204      	movs	r2, #4
 80074ac:	f102 0514 	add.w	r5, r2, #20
 80074b0:	429d      	cmp	r5, r3
 80074b2:	d91f      	bls.n	80074f4 <_dtoa_r+0x2a4>
 80074b4:	6041      	str	r1, [r0, #4]
 80074b6:	4658      	mov	r0, fp
 80074b8:	f000 fd8e 	bl	8007fd8 <_Balloc>
 80074bc:	4682      	mov	sl, r0
 80074be:	2800      	cmp	r0, #0
 80074c0:	d13c      	bne.n	800753c <_dtoa_r+0x2ec>
 80074c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007530 <_dtoa_r+0x2e0>)
 80074c4:	4602      	mov	r2, r0
 80074c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80074ca:	e6d8      	b.n	800727e <_dtoa_r+0x2e>
 80074cc:	2301      	movs	r3, #1
 80074ce:	e7e0      	b.n	8007492 <_dtoa_r+0x242>
 80074d0:	2401      	movs	r4, #1
 80074d2:	2300      	movs	r3, #0
 80074d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074d8:	f04f 33ff 	mov.w	r3, #4294967295
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	9307      	str	r3, [sp, #28]
 80074e0:	2200      	movs	r2, #0
 80074e2:	2312      	movs	r3, #18
 80074e4:	e7d0      	b.n	8007488 <_dtoa_r+0x238>
 80074e6:	2301      	movs	r3, #1
 80074e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074ea:	e7f5      	b.n	80074d8 <_dtoa_r+0x288>
 80074ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	9307      	str	r3, [sp, #28]
 80074f2:	e7d7      	b.n	80074a4 <_dtoa_r+0x254>
 80074f4:	3101      	adds	r1, #1
 80074f6:	0052      	lsls	r2, r2, #1
 80074f8:	e7d8      	b.n	80074ac <_dtoa_r+0x25c>
 80074fa:	bf00      	nop
 80074fc:	f3af 8000 	nop.w
 8007500:	636f4361 	.word	0x636f4361
 8007504:	3fd287a7 	.word	0x3fd287a7
 8007508:	8b60c8b3 	.word	0x8b60c8b3
 800750c:	3fc68a28 	.word	0x3fc68a28
 8007510:	509f79fb 	.word	0x509f79fb
 8007514:	3fd34413 	.word	0x3fd34413
 8007518:	0800af46 	.word	0x0800af46
 800751c:	0800af5d 	.word	0x0800af5d
 8007520:	7ff00000 	.word	0x7ff00000
 8007524:	0800af11 	.word	0x0800af11
 8007528:	3ff80000 	.word	0x3ff80000
 800752c:	0800b058 	.word	0x0800b058
 8007530:	0800afb5 	.word	0x0800afb5
 8007534:	0800af42 	.word	0x0800af42
 8007538:	0800af10 	.word	0x0800af10
 800753c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007540:	6018      	str	r0, [r3, #0]
 8007542:	9b07      	ldr	r3, [sp, #28]
 8007544:	2b0e      	cmp	r3, #14
 8007546:	f200 80a4 	bhi.w	8007692 <_dtoa_r+0x442>
 800754a:	2c00      	cmp	r4, #0
 800754c:	f000 80a1 	beq.w	8007692 <_dtoa_r+0x442>
 8007550:	2f00      	cmp	r7, #0
 8007552:	dd33      	ble.n	80075bc <_dtoa_r+0x36c>
 8007554:	4bad      	ldr	r3, [pc, #692]	@ (800780c <_dtoa_r+0x5bc>)
 8007556:	f007 020f 	and.w	r2, r7, #15
 800755a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800755e:	ed93 7b00 	vldr	d7, [r3]
 8007562:	05f8      	lsls	r0, r7, #23
 8007564:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007568:	ea4f 1427 	mov.w	r4, r7, asr #4
 800756c:	d516      	bpl.n	800759c <_dtoa_r+0x34c>
 800756e:	4ba8      	ldr	r3, [pc, #672]	@ (8007810 <_dtoa_r+0x5c0>)
 8007570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007574:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007578:	f7f9 f968 	bl	800084c <__aeabi_ddiv>
 800757c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007580:	f004 040f 	and.w	r4, r4, #15
 8007584:	2603      	movs	r6, #3
 8007586:	4da2      	ldr	r5, [pc, #648]	@ (8007810 <_dtoa_r+0x5c0>)
 8007588:	b954      	cbnz	r4, 80075a0 <_dtoa_r+0x350>
 800758a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800758e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007592:	f7f9 f95b 	bl	800084c <__aeabi_ddiv>
 8007596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800759a:	e028      	b.n	80075ee <_dtoa_r+0x39e>
 800759c:	2602      	movs	r6, #2
 800759e:	e7f2      	b.n	8007586 <_dtoa_r+0x336>
 80075a0:	07e1      	lsls	r1, r4, #31
 80075a2:	d508      	bpl.n	80075b6 <_dtoa_r+0x366>
 80075a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075ac:	f7f9 f824 	bl	80005f8 <__aeabi_dmul>
 80075b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075b4:	3601      	adds	r6, #1
 80075b6:	1064      	asrs	r4, r4, #1
 80075b8:	3508      	adds	r5, #8
 80075ba:	e7e5      	b.n	8007588 <_dtoa_r+0x338>
 80075bc:	f000 80d2 	beq.w	8007764 <_dtoa_r+0x514>
 80075c0:	427c      	negs	r4, r7
 80075c2:	4b92      	ldr	r3, [pc, #584]	@ (800780c <_dtoa_r+0x5bc>)
 80075c4:	4d92      	ldr	r5, [pc, #584]	@ (8007810 <_dtoa_r+0x5c0>)
 80075c6:	f004 020f 	and.w	r2, r4, #15
 80075ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075d6:	f7f9 f80f 	bl	80005f8 <__aeabi_dmul>
 80075da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075de:	1124      	asrs	r4, r4, #4
 80075e0:	2300      	movs	r3, #0
 80075e2:	2602      	movs	r6, #2
 80075e4:	2c00      	cmp	r4, #0
 80075e6:	f040 80b2 	bne.w	800774e <_dtoa_r+0x4fe>
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1d3      	bne.n	8007596 <_dtoa_r+0x346>
 80075ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80075f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 80b7 	beq.w	8007768 <_dtoa_r+0x518>
 80075fa:	4b86      	ldr	r3, [pc, #536]	@ (8007814 <_dtoa_r+0x5c4>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	4620      	mov	r0, r4
 8007600:	4629      	mov	r1, r5
 8007602:	f7f9 fa6b 	bl	8000adc <__aeabi_dcmplt>
 8007606:	2800      	cmp	r0, #0
 8007608:	f000 80ae 	beq.w	8007768 <_dtoa_r+0x518>
 800760c:	9b07      	ldr	r3, [sp, #28]
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 80aa 	beq.w	8007768 <_dtoa_r+0x518>
 8007614:	9b00      	ldr	r3, [sp, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	dd37      	ble.n	800768a <_dtoa_r+0x43a>
 800761a:	1e7b      	subs	r3, r7, #1
 800761c:	9304      	str	r3, [sp, #16]
 800761e:	4620      	mov	r0, r4
 8007620:	4b7d      	ldr	r3, [pc, #500]	@ (8007818 <_dtoa_r+0x5c8>)
 8007622:	2200      	movs	r2, #0
 8007624:	4629      	mov	r1, r5
 8007626:	f7f8 ffe7 	bl	80005f8 <__aeabi_dmul>
 800762a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800762e:	9c00      	ldr	r4, [sp, #0]
 8007630:	3601      	adds	r6, #1
 8007632:	4630      	mov	r0, r6
 8007634:	f7f8 ff76 	bl	8000524 <__aeabi_i2d>
 8007638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800763c:	f7f8 ffdc 	bl	80005f8 <__aeabi_dmul>
 8007640:	4b76      	ldr	r3, [pc, #472]	@ (800781c <_dtoa_r+0x5cc>)
 8007642:	2200      	movs	r2, #0
 8007644:	f7f8 fe22 	bl	800028c <__adddf3>
 8007648:	4605      	mov	r5, r0
 800764a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800764e:	2c00      	cmp	r4, #0
 8007650:	f040 808d 	bne.w	800776e <_dtoa_r+0x51e>
 8007654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007658:	4b71      	ldr	r3, [pc, #452]	@ (8007820 <_dtoa_r+0x5d0>)
 800765a:	2200      	movs	r2, #0
 800765c:	f7f8 fe14 	bl	8000288 <__aeabi_dsub>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007668:	462a      	mov	r2, r5
 800766a:	4633      	mov	r3, r6
 800766c:	f7f9 fa54 	bl	8000b18 <__aeabi_dcmpgt>
 8007670:	2800      	cmp	r0, #0
 8007672:	f040 828b 	bne.w	8007b8c <_dtoa_r+0x93c>
 8007676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800767a:	462a      	mov	r2, r5
 800767c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007680:	f7f9 fa2c 	bl	8000adc <__aeabi_dcmplt>
 8007684:	2800      	cmp	r0, #0
 8007686:	f040 8128 	bne.w	80078da <_dtoa_r+0x68a>
 800768a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800768e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007692:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007694:	2b00      	cmp	r3, #0
 8007696:	f2c0 815a 	blt.w	800794e <_dtoa_r+0x6fe>
 800769a:	2f0e      	cmp	r7, #14
 800769c:	f300 8157 	bgt.w	800794e <_dtoa_r+0x6fe>
 80076a0:	4b5a      	ldr	r3, [pc, #360]	@ (800780c <_dtoa_r+0x5bc>)
 80076a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076a6:	ed93 7b00 	vldr	d7, [r3]
 80076aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	ed8d 7b00 	vstr	d7, [sp]
 80076b2:	da03      	bge.n	80076bc <_dtoa_r+0x46c>
 80076b4:	9b07      	ldr	r3, [sp, #28]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f340 8101 	ble.w	80078be <_dtoa_r+0x66e>
 80076bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076c0:	4656      	mov	r6, sl
 80076c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076c6:	4620      	mov	r0, r4
 80076c8:	4629      	mov	r1, r5
 80076ca:	f7f9 f8bf 	bl	800084c <__aeabi_ddiv>
 80076ce:	f7f9 fa43 	bl	8000b58 <__aeabi_d2iz>
 80076d2:	4680      	mov	r8, r0
 80076d4:	f7f8 ff26 	bl	8000524 <__aeabi_i2d>
 80076d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076dc:	f7f8 ff8c 	bl	80005f8 <__aeabi_dmul>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	4620      	mov	r0, r4
 80076e6:	4629      	mov	r1, r5
 80076e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80076ec:	f7f8 fdcc 	bl	8000288 <__aeabi_dsub>
 80076f0:	f806 4b01 	strb.w	r4, [r6], #1
 80076f4:	9d07      	ldr	r5, [sp, #28]
 80076f6:	eba6 040a 	sub.w	r4, r6, sl
 80076fa:	42a5      	cmp	r5, r4
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	f040 8117 	bne.w	8007932 <_dtoa_r+0x6e2>
 8007704:	f7f8 fdc2 	bl	800028c <__adddf3>
 8007708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800770c:	4604      	mov	r4, r0
 800770e:	460d      	mov	r5, r1
 8007710:	f7f9 fa02 	bl	8000b18 <__aeabi_dcmpgt>
 8007714:	2800      	cmp	r0, #0
 8007716:	f040 80f9 	bne.w	800790c <_dtoa_r+0x6bc>
 800771a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800771e:	4620      	mov	r0, r4
 8007720:	4629      	mov	r1, r5
 8007722:	f7f9 f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007726:	b118      	cbz	r0, 8007730 <_dtoa_r+0x4e0>
 8007728:	f018 0f01 	tst.w	r8, #1
 800772c:	f040 80ee 	bne.w	800790c <_dtoa_r+0x6bc>
 8007730:	4649      	mov	r1, r9
 8007732:	4658      	mov	r0, fp
 8007734:	f000 fc90 	bl	8008058 <_Bfree>
 8007738:	2300      	movs	r3, #0
 800773a:	7033      	strb	r3, [r6, #0]
 800773c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800773e:	3701      	adds	r7, #1
 8007740:	601f      	str	r7, [r3, #0]
 8007742:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 831d 	beq.w	8007d84 <_dtoa_r+0xb34>
 800774a:	601e      	str	r6, [r3, #0]
 800774c:	e31a      	b.n	8007d84 <_dtoa_r+0xb34>
 800774e:	07e2      	lsls	r2, r4, #31
 8007750:	d505      	bpl.n	800775e <_dtoa_r+0x50e>
 8007752:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007756:	f7f8 ff4f 	bl	80005f8 <__aeabi_dmul>
 800775a:	3601      	adds	r6, #1
 800775c:	2301      	movs	r3, #1
 800775e:	1064      	asrs	r4, r4, #1
 8007760:	3508      	adds	r5, #8
 8007762:	e73f      	b.n	80075e4 <_dtoa_r+0x394>
 8007764:	2602      	movs	r6, #2
 8007766:	e742      	b.n	80075ee <_dtoa_r+0x39e>
 8007768:	9c07      	ldr	r4, [sp, #28]
 800776a:	9704      	str	r7, [sp, #16]
 800776c:	e761      	b.n	8007632 <_dtoa_r+0x3e2>
 800776e:	4b27      	ldr	r3, [pc, #156]	@ (800780c <_dtoa_r+0x5bc>)
 8007770:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007772:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007776:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800777a:	4454      	add	r4, sl
 800777c:	2900      	cmp	r1, #0
 800777e:	d053      	beq.n	8007828 <_dtoa_r+0x5d8>
 8007780:	4928      	ldr	r1, [pc, #160]	@ (8007824 <_dtoa_r+0x5d4>)
 8007782:	2000      	movs	r0, #0
 8007784:	f7f9 f862 	bl	800084c <__aeabi_ddiv>
 8007788:	4633      	mov	r3, r6
 800778a:	462a      	mov	r2, r5
 800778c:	f7f8 fd7c 	bl	8000288 <__aeabi_dsub>
 8007790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007794:	4656      	mov	r6, sl
 8007796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800779a:	f7f9 f9dd 	bl	8000b58 <__aeabi_d2iz>
 800779e:	4605      	mov	r5, r0
 80077a0:	f7f8 fec0 	bl	8000524 <__aeabi_i2d>
 80077a4:	4602      	mov	r2, r0
 80077a6:	460b      	mov	r3, r1
 80077a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ac:	f7f8 fd6c 	bl	8000288 <__aeabi_dsub>
 80077b0:	3530      	adds	r5, #48	@ 0x30
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077ba:	f806 5b01 	strb.w	r5, [r6], #1
 80077be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077c2:	f7f9 f98b 	bl	8000adc <__aeabi_dcmplt>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	d171      	bne.n	80078ae <_dtoa_r+0x65e>
 80077ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077ce:	4911      	ldr	r1, [pc, #68]	@ (8007814 <_dtoa_r+0x5c4>)
 80077d0:	2000      	movs	r0, #0
 80077d2:	f7f8 fd59 	bl	8000288 <__aeabi_dsub>
 80077d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077da:	f7f9 f97f 	bl	8000adc <__aeabi_dcmplt>
 80077de:	2800      	cmp	r0, #0
 80077e0:	f040 8095 	bne.w	800790e <_dtoa_r+0x6be>
 80077e4:	42a6      	cmp	r6, r4
 80077e6:	f43f af50 	beq.w	800768a <_dtoa_r+0x43a>
 80077ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007818 <_dtoa_r+0x5c8>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	f7f8 ff01 	bl	80005f8 <__aeabi_dmul>
 80077f6:	4b08      	ldr	r3, [pc, #32]	@ (8007818 <_dtoa_r+0x5c8>)
 80077f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077fc:	2200      	movs	r2, #0
 80077fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007802:	f7f8 fef9 	bl	80005f8 <__aeabi_dmul>
 8007806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800780a:	e7c4      	b.n	8007796 <_dtoa_r+0x546>
 800780c:	0800b058 	.word	0x0800b058
 8007810:	0800b030 	.word	0x0800b030
 8007814:	3ff00000 	.word	0x3ff00000
 8007818:	40240000 	.word	0x40240000
 800781c:	401c0000 	.word	0x401c0000
 8007820:	40140000 	.word	0x40140000
 8007824:	3fe00000 	.word	0x3fe00000
 8007828:	4631      	mov	r1, r6
 800782a:	4628      	mov	r0, r5
 800782c:	f7f8 fee4 	bl	80005f8 <__aeabi_dmul>
 8007830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007834:	9415      	str	r4, [sp, #84]	@ 0x54
 8007836:	4656      	mov	r6, sl
 8007838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800783c:	f7f9 f98c 	bl	8000b58 <__aeabi_d2iz>
 8007840:	4605      	mov	r5, r0
 8007842:	f7f8 fe6f 	bl	8000524 <__aeabi_i2d>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800784e:	f7f8 fd1b 	bl	8000288 <__aeabi_dsub>
 8007852:	3530      	adds	r5, #48	@ 0x30
 8007854:	f806 5b01 	strb.w	r5, [r6], #1
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	42a6      	cmp	r6, r4
 800785e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007862:	f04f 0200 	mov.w	r2, #0
 8007866:	d124      	bne.n	80078b2 <_dtoa_r+0x662>
 8007868:	4bac      	ldr	r3, [pc, #688]	@ (8007b1c <_dtoa_r+0x8cc>)
 800786a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800786e:	f7f8 fd0d 	bl	800028c <__adddf3>
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800787a:	f7f9 f94d 	bl	8000b18 <__aeabi_dcmpgt>
 800787e:	2800      	cmp	r0, #0
 8007880:	d145      	bne.n	800790e <_dtoa_r+0x6be>
 8007882:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007886:	49a5      	ldr	r1, [pc, #660]	@ (8007b1c <_dtoa_r+0x8cc>)
 8007888:	2000      	movs	r0, #0
 800788a:	f7f8 fcfd 	bl	8000288 <__aeabi_dsub>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007896:	f7f9 f921 	bl	8000adc <__aeabi_dcmplt>
 800789a:	2800      	cmp	r0, #0
 800789c:	f43f aef5 	beq.w	800768a <_dtoa_r+0x43a>
 80078a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80078a2:	1e73      	subs	r3, r6, #1
 80078a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80078a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078aa:	2b30      	cmp	r3, #48	@ 0x30
 80078ac:	d0f8      	beq.n	80078a0 <_dtoa_r+0x650>
 80078ae:	9f04      	ldr	r7, [sp, #16]
 80078b0:	e73e      	b.n	8007730 <_dtoa_r+0x4e0>
 80078b2:	4b9b      	ldr	r3, [pc, #620]	@ (8007b20 <_dtoa_r+0x8d0>)
 80078b4:	f7f8 fea0 	bl	80005f8 <__aeabi_dmul>
 80078b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078bc:	e7bc      	b.n	8007838 <_dtoa_r+0x5e8>
 80078be:	d10c      	bne.n	80078da <_dtoa_r+0x68a>
 80078c0:	4b98      	ldr	r3, [pc, #608]	@ (8007b24 <_dtoa_r+0x8d4>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078c8:	f7f8 fe96 	bl	80005f8 <__aeabi_dmul>
 80078cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078d0:	f7f9 f918 	bl	8000b04 <__aeabi_dcmpge>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	f000 8157 	beq.w	8007b88 <_dtoa_r+0x938>
 80078da:	2400      	movs	r4, #0
 80078dc:	4625      	mov	r5, r4
 80078de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078e0:	43db      	mvns	r3, r3
 80078e2:	9304      	str	r3, [sp, #16]
 80078e4:	4656      	mov	r6, sl
 80078e6:	2700      	movs	r7, #0
 80078e8:	4621      	mov	r1, r4
 80078ea:	4658      	mov	r0, fp
 80078ec:	f000 fbb4 	bl	8008058 <_Bfree>
 80078f0:	2d00      	cmp	r5, #0
 80078f2:	d0dc      	beq.n	80078ae <_dtoa_r+0x65e>
 80078f4:	b12f      	cbz	r7, 8007902 <_dtoa_r+0x6b2>
 80078f6:	42af      	cmp	r7, r5
 80078f8:	d003      	beq.n	8007902 <_dtoa_r+0x6b2>
 80078fa:	4639      	mov	r1, r7
 80078fc:	4658      	mov	r0, fp
 80078fe:	f000 fbab 	bl	8008058 <_Bfree>
 8007902:	4629      	mov	r1, r5
 8007904:	4658      	mov	r0, fp
 8007906:	f000 fba7 	bl	8008058 <_Bfree>
 800790a:	e7d0      	b.n	80078ae <_dtoa_r+0x65e>
 800790c:	9704      	str	r7, [sp, #16]
 800790e:	4633      	mov	r3, r6
 8007910:	461e      	mov	r6, r3
 8007912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007916:	2a39      	cmp	r2, #57	@ 0x39
 8007918:	d107      	bne.n	800792a <_dtoa_r+0x6da>
 800791a:	459a      	cmp	sl, r3
 800791c:	d1f8      	bne.n	8007910 <_dtoa_r+0x6c0>
 800791e:	9a04      	ldr	r2, [sp, #16]
 8007920:	3201      	adds	r2, #1
 8007922:	9204      	str	r2, [sp, #16]
 8007924:	2230      	movs	r2, #48	@ 0x30
 8007926:	f88a 2000 	strb.w	r2, [sl]
 800792a:	781a      	ldrb	r2, [r3, #0]
 800792c:	3201      	adds	r2, #1
 800792e:	701a      	strb	r2, [r3, #0]
 8007930:	e7bd      	b.n	80078ae <_dtoa_r+0x65e>
 8007932:	4b7b      	ldr	r3, [pc, #492]	@ (8007b20 <_dtoa_r+0x8d0>)
 8007934:	2200      	movs	r2, #0
 8007936:	f7f8 fe5f 	bl	80005f8 <__aeabi_dmul>
 800793a:	2200      	movs	r2, #0
 800793c:	2300      	movs	r3, #0
 800793e:	4604      	mov	r4, r0
 8007940:	460d      	mov	r5, r1
 8007942:	f7f9 f8c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007946:	2800      	cmp	r0, #0
 8007948:	f43f aebb 	beq.w	80076c2 <_dtoa_r+0x472>
 800794c:	e6f0      	b.n	8007730 <_dtoa_r+0x4e0>
 800794e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007950:	2a00      	cmp	r2, #0
 8007952:	f000 80db 	beq.w	8007b0c <_dtoa_r+0x8bc>
 8007956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007958:	2a01      	cmp	r2, #1
 800795a:	f300 80bf 	bgt.w	8007adc <_dtoa_r+0x88c>
 800795e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007960:	2a00      	cmp	r2, #0
 8007962:	f000 80b7 	beq.w	8007ad4 <_dtoa_r+0x884>
 8007966:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800796a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800796c:	4646      	mov	r6, r8
 800796e:	9a08      	ldr	r2, [sp, #32]
 8007970:	2101      	movs	r1, #1
 8007972:	441a      	add	r2, r3
 8007974:	4658      	mov	r0, fp
 8007976:	4498      	add	r8, r3
 8007978:	9208      	str	r2, [sp, #32]
 800797a:	f000 fc6b 	bl	8008254 <__i2b>
 800797e:	4605      	mov	r5, r0
 8007980:	b15e      	cbz	r6, 800799a <_dtoa_r+0x74a>
 8007982:	9b08      	ldr	r3, [sp, #32]
 8007984:	2b00      	cmp	r3, #0
 8007986:	dd08      	ble.n	800799a <_dtoa_r+0x74a>
 8007988:	42b3      	cmp	r3, r6
 800798a:	9a08      	ldr	r2, [sp, #32]
 800798c:	bfa8      	it	ge
 800798e:	4633      	movge	r3, r6
 8007990:	eba8 0803 	sub.w	r8, r8, r3
 8007994:	1af6      	subs	r6, r6, r3
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	9308      	str	r3, [sp, #32]
 800799a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800799c:	b1f3      	cbz	r3, 80079dc <_dtoa_r+0x78c>
 800799e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 80b7 	beq.w	8007b14 <_dtoa_r+0x8c4>
 80079a6:	b18c      	cbz	r4, 80079cc <_dtoa_r+0x77c>
 80079a8:	4629      	mov	r1, r5
 80079aa:	4622      	mov	r2, r4
 80079ac:	4658      	mov	r0, fp
 80079ae:	f000 fd11 	bl	80083d4 <__pow5mult>
 80079b2:	464a      	mov	r2, r9
 80079b4:	4601      	mov	r1, r0
 80079b6:	4605      	mov	r5, r0
 80079b8:	4658      	mov	r0, fp
 80079ba:	f000 fc61 	bl	8008280 <__multiply>
 80079be:	4649      	mov	r1, r9
 80079c0:	9004      	str	r0, [sp, #16]
 80079c2:	4658      	mov	r0, fp
 80079c4:	f000 fb48 	bl	8008058 <_Bfree>
 80079c8:	9b04      	ldr	r3, [sp, #16]
 80079ca:	4699      	mov	r9, r3
 80079cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ce:	1b1a      	subs	r2, r3, r4
 80079d0:	d004      	beq.n	80079dc <_dtoa_r+0x78c>
 80079d2:	4649      	mov	r1, r9
 80079d4:	4658      	mov	r0, fp
 80079d6:	f000 fcfd 	bl	80083d4 <__pow5mult>
 80079da:	4681      	mov	r9, r0
 80079dc:	2101      	movs	r1, #1
 80079de:	4658      	mov	r0, fp
 80079e0:	f000 fc38 	bl	8008254 <__i2b>
 80079e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079e6:	4604      	mov	r4, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 81cf 	beq.w	8007d8c <_dtoa_r+0xb3c>
 80079ee:	461a      	mov	r2, r3
 80079f0:	4601      	mov	r1, r0
 80079f2:	4658      	mov	r0, fp
 80079f4:	f000 fcee 	bl	80083d4 <__pow5mult>
 80079f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	4604      	mov	r4, r0
 80079fe:	f300 8095 	bgt.w	8007b2c <_dtoa_r+0x8dc>
 8007a02:	9b02      	ldr	r3, [sp, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f040 8087 	bne.w	8007b18 <_dtoa_r+0x8c8>
 8007a0a:	9b03      	ldr	r3, [sp, #12]
 8007a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f040 8089 	bne.w	8007b28 <_dtoa_r+0x8d8>
 8007a16:	9b03      	ldr	r3, [sp, #12]
 8007a18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a1c:	0d1b      	lsrs	r3, r3, #20
 8007a1e:	051b      	lsls	r3, r3, #20
 8007a20:	b12b      	cbz	r3, 8007a2e <_dtoa_r+0x7de>
 8007a22:	9b08      	ldr	r3, [sp, #32]
 8007a24:	3301      	adds	r3, #1
 8007a26:	9308      	str	r3, [sp, #32]
 8007a28:	f108 0801 	add.w	r8, r8, #1
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 81b0 	beq.w	8007d98 <_dtoa_r+0xb48>
 8007a38:	6923      	ldr	r3, [r4, #16]
 8007a3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a3e:	6918      	ldr	r0, [r3, #16]
 8007a40:	f000 fbbc 	bl	80081bc <__hi0bits>
 8007a44:	f1c0 0020 	rsb	r0, r0, #32
 8007a48:	9b08      	ldr	r3, [sp, #32]
 8007a4a:	4418      	add	r0, r3
 8007a4c:	f010 001f 	ands.w	r0, r0, #31
 8007a50:	d077      	beq.n	8007b42 <_dtoa_r+0x8f2>
 8007a52:	f1c0 0320 	rsb	r3, r0, #32
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	dd6b      	ble.n	8007b32 <_dtoa_r+0x8e2>
 8007a5a:	9b08      	ldr	r3, [sp, #32]
 8007a5c:	f1c0 001c 	rsb	r0, r0, #28
 8007a60:	4403      	add	r3, r0
 8007a62:	4480      	add	r8, r0
 8007a64:	4406      	add	r6, r0
 8007a66:	9308      	str	r3, [sp, #32]
 8007a68:	f1b8 0f00 	cmp.w	r8, #0
 8007a6c:	dd05      	ble.n	8007a7a <_dtoa_r+0x82a>
 8007a6e:	4649      	mov	r1, r9
 8007a70:	4642      	mov	r2, r8
 8007a72:	4658      	mov	r0, fp
 8007a74:	f000 fd08 	bl	8008488 <__lshift>
 8007a78:	4681      	mov	r9, r0
 8007a7a:	9b08      	ldr	r3, [sp, #32]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dd05      	ble.n	8007a8c <_dtoa_r+0x83c>
 8007a80:	4621      	mov	r1, r4
 8007a82:	461a      	mov	r2, r3
 8007a84:	4658      	mov	r0, fp
 8007a86:	f000 fcff 	bl	8008488 <__lshift>
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d059      	beq.n	8007b46 <_dtoa_r+0x8f6>
 8007a92:	4621      	mov	r1, r4
 8007a94:	4648      	mov	r0, r9
 8007a96:	f000 fd63 	bl	8008560 <__mcmp>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	da53      	bge.n	8007b46 <_dtoa_r+0x8f6>
 8007a9e:	1e7b      	subs	r3, r7, #1
 8007aa0:	9304      	str	r3, [sp, #16]
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	220a      	movs	r2, #10
 8007aa8:	4658      	mov	r0, fp
 8007aaa:	f000 faf7 	bl	800809c <__multadd>
 8007aae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ab0:	4681      	mov	r9, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 8172 	beq.w	8007d9c <_dtoa_r+0xb4c>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4629      	mov	r1, r5
 8007abc:	220a      	movs	r2, #10
 8007abe:	4658      	mov	r0, fp
 8007ac0:	f000 faec 	bl	800809c <__multadd>
 8007ac4:	9b00      	ldr	r3, [sp, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	4605      	mov	r5, r0
 8007aca:	dc67      	bgt.n	8007b9c <_dtoa_r+0x94c>
 8007acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	dc41      	bgt.n	8007b56 <_dtoa_r+0x906>
 8007ad2:	e063      	b.n	8007b9c <_dtoa_r+0x94c>
 8007ad4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ad6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ada:	e746      	b.n	800796a <_dtoa_r+0x71a>
 8007adc:	9b07      	ldr	r3, [sp, #28]
 8007ade:	1e5c      	subs	r4, r3, #1
 8007ae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ae2:	42a3      	cmp	r3, r4
 8007ae4:	bfbf      	itttt	lt
 8007ae6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007ae8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007aea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007aec:	1ae3      	sublt	r3, r4, r3
 8007aee:	bfb4      	ite	lt
 8007af0:	18d2      	addlt	r2, r2, r3
 8007af2:	1b1c      	subge	r4, r3, r4
 8007af4:	9b07      	ldr	r3, [sp, #28]
 8007af6:	bfbc      	itt	lt
 8007af8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007afa:	2400      	movlt	r4, #0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	bfb5      	itete	lt
 8007b00:	eba8 0603 	sublt.w	r6, r8, r3
 8007b04:	9b07      	ldrge	r3, [sp, #28]
 8007b06:	2300      	movlt	r3, #0
 8007b08:	4646      	movge	r6, r8
 8007b0a:	e730      	b.n	800796e <_dtoa_r+0x71e>
 8007b0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b10:	4646      	mov	r6, r8
 8007b12:	e735      	b.n	8007980 <_dtoa_r+0x730>
 8007b14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b16:	e75c      	b.n	80079d2 <_dtoa_r+0x782>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	e788      	b.n	8007a2e <_dtoa_r+0x7de>
 8007b1c:	3fe00000 	.word	0x3fe00000
 8007b20:	40240000 	.word	0x40240000
 8007b24:	40140000 	.word	0x40140000
 8007b28:	9b02      	ldr	r3, [sp, #8]
 8007b2a:	e780      	b.n	8007a2e <_dtoa_r+0x7de>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b30:	e782      	b.n	8007a38 <_dtoa_r+0x7e8>
 8007b32:	d099      	beq.n	8007a68 <_dtoa_r+0x818>
 8007b34:	9a08      	ldr	r2, [sp, #32]
 8007b36:	331c      	adds	r3, #28
 8007b38:	441a      	add	r2, r3
 8007b3a:	4498      	add	r8, r3
 8007b3c:	441e      	add	r6, r3
 8007b3e:	9208      	str	r2, [sp, #32]
 8007b40:	e792      	b.n	8007a68 <_dtoa_r+0x818>
 8007b42:	4603      	mov	r3, r0
 8007b44:	e7f6      	b.n	8007b34 <_dtoa_r+0x8e4>
 8007b46:	9b07      	ldr	r3, [sp, #28]
 8007b48:	9704      	str	r7, [sp, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	dc20      	bgt.n	8007b90 <_dtoa_r+0x940>
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	dd1e      	ble.n	8007b94 <_dtoa_r+0x944>
 8007b56:	9b00      	ldr	r3, [sp, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f47f aec0 	bne.w	80078de <_dtoa_r+0x68e>
 8007b5e:	4621      	mov	r1, r4
 8007b60:	2205      	movs	r2, #5
 8007b62:	4658      	mov	r0, fp
 8007b64:	f000 fa9a 	bl	800809c <__multadd>
 8007b68:	4601      	mov	r1, r0
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	4648      	mov	r0, r9
 8007b6e:	f000 fcf7 	bl	8008560 <__mcmp>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	f77f aeb3 	ble.w	80078de <_dtoa_r+0x68e>
 8007b78:	4656      	mov	r6, sl
 8007b7a:	2331      	movs	r3, #49	@ 0x31
 8007b7c:	f806 3b01 	strb.w	r3, [r6], #1
 8007b80:	9b04      	ldr	r3, [sp, #16]
 8007b82:	3301      	adds	r3, #1
 8007b84:	9304      	str	r3, [sp, #16]
 8007b86:	e6ae      	b.n	80078e6 <_dtoa_r+0x696>
 8007b88:	9c07      	ldr	r4, [sp, #28]
 8007b8a:	9704      	str	r7, [sp, #16]
 8007b8c:	4625      	mov	r5, r4
 8007b8e:	e7f3      	b.n	8007b78 <_dtoa_r+0x928>
 8007b90:	9b07      	ldr	r3, [sp, #28]
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 8104 	beq.w	8007da4 <_dtoa_r+0xb54>
 8007b9c:	2e00      	cmp	r6, #0
 8007b9e:	dd05      	ble.n	8007bac <_dtoa_r+0x95c>
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	4632      	mov	r2, r6
 8007ba4:	4658      	mov	r0, fp
 8007ba6:	f000 fc6f 	bl	8008488 <__lshift>
 8007baa:	4605      	mov	r5, r0
 8007bac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d05a      	beq.n	8007c68 <_dtoa_r+0xa18>
 8007bb2:	6869      	ldr	r1, [r5, #4]
 8007bb4:	4658      	mov	r0, fp
 8007bb6:	f000 fa0f 	bl	8007fd8 <_Balloc>
 8007bba:	4606      	mov	r6, r0
 8007bbc:	b928      	cbnz	r0, 8007bca <_dtoa_r+0x97a>
 8007bbe:	4b84      	ldr	r3, [pc, #528]	@ (8007dd0 <_dtoa_r+0xb80>)
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007bc6:	f7ff bb5a 	b.w	800727e <_dtoa_r+0x2e>
 8007bca:	692a      	ldr	r2, [r5, #16]
 8007bcc:	3202      	adds	r2, #2
 8007bce:	0092      	lsls	r2, r2, #2
 8007bd0:	f105 010c 	add.w	r1, r5, #12
 8007bd4:	300c      	adds	r0, #12
 8007bd6:	f002 f93b 	bl	8009e50 <memcpy>
 8007bda:	2201      	movs	r2, #1
 8007bdc:	4631      	mov	r1, r6
 8007bde:	4658      	mov	r0, fp
 8007be0:	f000 fc52 	bl	8008488 <__lshift>
 8007be4:	f10a 0301 	add.w	r3, sl, #1
 8007be8:	9307      	str	r3, [sp, #28]
 8007bea:	9b00      	ldr	r3, [sp, #0]
 8007bec:	4453      	add	r3, sl
 8007bee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bf0:	9b02      	ldr	r3, [sp, #8]
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	462f      	mov	r7, r5
 8007bf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	9b07      	ldr	r3, [sp, #28]
 8007bfe:	4621      	mov	r1, r4
 8007c00:	3b01      	subs	r3, #1
 8007c02:	4648      	mov	r0, r9
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	f7ff fa99 	bl	800713c <quorem>
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	9002      	str	r0, [sp, #8]
 8007c0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c12:	4648      	mov	r0, r9
 8007c14:	f000 fca4 	bl	8008560 <__mcmp>
 8007c18:	462a      	mov	r2, r5
 8007c1a:	9008      	str	r0, [sp, #32]
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	4658      	mov	r0, fp
 8007c20:	f000 fcba 	bl	8008598 <__mdiff>
 8007c24:	68c2      	ldr	r2, [r0, #12]
 8007c26:	4606      	mov	r6, r0
 8007c28:	bb02      	cbnz	r2, 8007c6c <_dtoa_r+0xa1c>
 8007c2a:	4601      	mov	r1, r0
 8007c2c:	4648      	mov	r0, r9
 8007c2e:	f000 fc97 	bl	8008560 <__mcmp>
 8007c32:	4602      	mov	r2, r0
 8007c34:	4631      	mov	r1, r6
 8007c36:	4658      	mov	r0, fp
 8007c38:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c3a:	f000 fa0d 	bl	8008058 <_Bfree>
 8007c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c42:	9e07      	ldr	r6, [sp, #28]
 8007c44:	ea43 0102 	orr.w	r1, r3, r2
 8007c48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c4a:	4319      	orrs	r1, r3
 8007c4c:	d110      	bne.n	8007c70 <_dtoa_r+0xa20>
 8007c4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c52:	d029      	beq.n	8007ca8 <_dtoa_r+0xa58>
 8007c54:	9b08      	ldr	r3, [sp, #32]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	dd02      	ble.n	8007c60 <_dtoa_r+0xa10>
 8007c5a:	9b02      	ldr	r3, [sp, #8]
 8007c5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c60:	9b00      	ldr	r3, [sp, #0]
 8007c62:	f883 8000 	strb.w	r8, [r3]
 8007c66:	e63f      	b.n	80078e8 <_dtoa_r+0x698>
 8007c68:	4628      	mov	r0, r5
 8007c6a:	e7bb      	b.n	8007be4 <_dtoa_r+0x994>
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	e7e1      	b.n	8007c34 <_dtoa_r+0x9e4>
 8007c70:	9b08      	ldr	r3, [sp, #32]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	db04      	blt.n	8007c80 <_dtoa_r+0xa30>
 8007c76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c78:	430b      	orrs	r3, r1
 8007c7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c7c:	430b      	orrs	r3, r1
 8007c7e:	d120      	bne.n	8007cc2 <_dtoa_r+0xa72>
 8007c80:	2a00      	cmp	r2, #0
 8007c82:	dded      	ble.n	8007c60 <_dtoa_r+0xa10>
 8007c84:	4649      	mov	r1, r9
 8007c86:	2201      	movs	r2, #1
 8007c88:	4658      	mov	r0, fp
 8007c8a:	f000 fbfd 	bl	8008488 <__lshift>
 8007c8e:	4621      	mov	r1, r4
 8007c90:	4681      	mov	r9, r0
 8007c92:	f000 fc65 	bl	8008560 <__mcmp>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	dc03      	bgt.n	8007ca2 <_dtoa_r+0xa52>
 8007c9a:	d1e1      	bne.n	8007c60 <_dtoa_r+0xa10>
 8007c9c:	f018 0f01 	tst.w	r8, #1
 8007ca0:	d0de      	beq.n	8007c60 <_dtoa_r+0xa10>
 8007ca2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ca6:	d1d8      	bne.n	8007c5a <_dtoa_r+0xa0a>
 8007ca8:	9a00      	ldr	r2, [sp, #0]
 8007caa:	2339      	movs	r3, #57	@ 0x39
 8007cac:	7013      	strb	r3, [r2, #0]
 8007cae:	4633      	mov	r3, r6
 8007cb0:	461e      	mov	r6, r3
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007cb8:	2a39      	cmp	r2, #57	@ 0x39
 8007cba:	d052      	beq.n	8007d62 <_dtoa_r+0xb12>
 8007cbc:	3201      	adds	r2, #1
 8007cbe:	701a      	strb	r2, [r3, #0]
 8007cc0:	e612      	b.n	80078e8 <_dtoa_r+0x698>
 8007cc2:	2a00      	cmp	r2, #0
 8007cc4:	dd07      	ble.n	8007cd6 <_dtoa_r+0xa86>
 8007cc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cca:	d0ed      	beq.n	8007ca8 <_dtoa_r+0xa58>
 8007ccc:	9a00      	ldr	r2, [sp, #0]
 8007cce:	f108 0301 	add.w	r3, r8, #1
 8007cd2:	7013      	strb	r3, [r2, #0]
 8007cd4:	e608      	b.n	80078e8 <_dtoa_r+0x698>
 8007cd6:	9b07      	ldr	r3, [sp, #28]
 8007cd8:	9a07      	ldr	r2, [sp, #28]
 8007cda:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007cde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d028      	beq.n	8007d36 <_dtoa_r+0xae6>
 8007ce4:	4649      	mov	r1, r9
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	220a      	movs	r2, #10
 8007cea:	4658      	mov	r0, fp
 8007cec:	f000 f9d6 	bl	800809c <__multadd>
 8007cf0:	42af      	cmp	r7, r5
 8007cf2:	4681      	mov	r9, r0
 8007cf4:	f04f 0300 	mov.w	r3, #0
 8007cf8:	f04f 020a 	mov.w	r2, #10
 8007cfc:	4639      	mov	r1, r7
 8007cfe:	4658      	mov	r0, fp
 8007d00:	d107      	bne.n	8007d12 <_dtoa_r+0xac2>
 8007d02:	f000 f9cb 	bl	800809c <__multadd>
 8007d06:	4607      	mov	r7, r0
 8007d08:	4605      	mov	r5, r0
 8007d0a:	9b07      	ldr	r3, [sp, #28]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	9307      	str	r3, [sp, #28]
 8007d10:	e774      	b.n	8007bfc <_dtoa_r+0x9ac>
 8007d12:	f000 f9c3 	bl	800809c <__multadd>
 8007d16:	4629      	mov	r1, r5
 8007d18:	4607      	mov	r7, r0
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	220a      	movs	r2, #10
 8007d1e:	4658      	mov	r0, fp
 8007d20:	f000 f9bc 	bl	800809c <__multadd>
 8007d24:	4605      	mov	r5, r0
 8007d26:	e7f0      	b.n	8007d0a <_dtoa_r+0xaba>
 8007d28:	9b00      	ldr	r3, [sp, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	bfcc      	ite	gt
 8007d2e:	461e      	movgt	r6, r3
 8007d30:	2601      	movle	r6, #1
 8007d32:	4456      	add	r6, sl
 8007d34:	2700      	movs	r7, #0
 8007d36:	4649      	mov	r1, r9
 8007d38:	2201      	movs	r2, #1
 8007d3a:	4658      	mov	r0, fp
 8007d3c:	f000 fba4 	bl	8008488 <__lshift>
 8007d40:	4621      	mov	r1, r4
 8007d42:	4681      	mov	r9, r0
 8007d44:	f000 fc0c 	bl	8008560 <__mcmp>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	dcb0      	bgt.n	8007cae <_dtoa_r+0xa5e>
 8007d4c:	d102      	bne.n	8007d54 <_dtoa_r+0xb04>
 8007d4e:	f018 0f01 	tst.w	r8, #1
 8007d52:	d1ac      	bne.n	8007cae <_dtoa_r+0xa5e>
 8007d54:	4633      	mov	r3, r6
 8007d56:	461e      	mov	r6, r3
 8007d58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d5c:	2a30      	cmp	r2, #48	@ 0x30
 8007d5e:	d0fa      	beq.n	8007d56 <_dtoa_r+0xb06>
 8007d60:	e5c2      	b.n	80078e8 <_dtoa_r+0x698>
 8007d62:	459a      	cmp	sl, r3
 8007d64:	d1a4      	bne.n	8007cb0 <_dtoa_r+0xa60>
 8007d66:	9b04      	ldr	r3, [sp, #16]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	9304      	str	r3, [sp, #16]
 8007d6c:	2331      	movs	r3, #49	@ 0x31
 8007d6e:	f88a 3000 	strb.w	r3, [sl]
 8007d72:	e5b9      	b.n	80078e8 <_dtoa_r+0x698>
 8007d74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007dd4 <_dtoa_r+0xb84>
 8007d7a:	b11b      	cbz	r3, 8007d84 <_dtoa_r+0xb34>
 8007d7c:	f10a 0308 	add.w	r3, sl, #8
 8007d80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	4650      	mov	r0, sl
 8007d86:	b019      	add	sp, #100	@ 0x64
 8007d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	f77f ae37 	ble.w	8007a02 <_dtoa_r+0x7b2>
 8007d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d96:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d98:	2001      	movs	r0, #1
 8007d9a:	e655      	b.n	8007a48 <_dtoa_r+0x7f8>
 8007d9c:	9b00      	ldr	r3, [sp, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f77f aed6 	ble.w	8007b50 <_dtoa_r+0x900>
 8007da4:	4656      	mov	r6, sl
 8007da6:	4621      	mov	r1, r4
 8007da8:	4648      	mov	r0, r9
 8007daa:	f7ff f9c7 	bl	800713c <quorem>
 8007dae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007db2:	f806 8b01 	strb.w	r8, [r6], #1
 8007db6:	9b00      	ldr	r3, [sp, #0]
 8007db8:	eba6 020a 	sub.w	r2, r6, sl
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	ddb3      	ble.n	8007d28 <_dtoa_r+0xad8>
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	220a      	movs	r2, #10
 8007dc6:	4658      	mov	r0, fp
 8007dc8:	f000 f968 	bl	800809c <__multadd>
 8007dcc:	4681      	mov	r9, r0
 8007dce:	e7ea      	b.n	8007da6 <_dtoa_r+0xb56>
 8007dd0:	0800afb5 	.word	0x0800afb5
 8007dd4:	0800af39 	.word	0x0800af39

08007dd8 <_free_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	4605      	mov	r5, r0
 8007ddc:	2900      	cmp	r1, #0
 8007dde:	d041      	beq.n	8007e64 <_free_r+0x8c>
 8007de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007de4:	1f0c      	subs	r4, r1, #4
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	bfb8      	it	lt
 8007dea:	18e4      	addlt	r4, r4, r3
 8007dec:	f000 f8e8 	bl	8007fc0 <__malloc_lock>
 8007df0:	4a1d      	ldr	r2, [pc, #116]	@ (8007e68 <_free_r+0x90>)
 8007df2:	6813      	ldr	r3, [r2, #0]
 8007df4:	b933      	cbnz	r3, 8007e04 <_free_r+0x2c>
 8007df6:	6063      	str	r3, [r4, #4]
 8007df8:	6014      	str	r4, [r2, #0]
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e00:	f000 b8e4 	b.w	8007fcc <__malloc_unlock>
 8007e04:	42a3      	cmp	r3, r4
 8007e06:	d908      	bls.n	8007e1a <_free_r+0x42>
 8007e08:	6820      	ldr	r0, [r4, #0]
 8007e0a:	1821      	adds	r1, r4, r0
 8007e0c:	428b      	cmp	r3, r1
 8007e0e:	bf01      	itttt	eq
 8007e10:	6819      	ldreq	r1, [r3, #0]
 8007e12:	685b      	ldreq	r3, [r3, #4]
 8007e14:	1809      	addeq	r1, r1, r0
 8007e16:	6021      	streq	r1, [r4, #0]
 8007e18:	e7ed      	b.n	8007df6 <_free_r+0x1e>
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	b10b      	cbz	r3, 8007e24 <_free_r+0x4c>
 8007e20:	42a3      	cmp	r3, r4
 8007e22:	d9fa      	bls.n	8007e1a <_free_r+0x42>
 8007e24:	6811      	ldr	r1, [r2, #0]
 8007e26:	1850      	adds	r0, r2, r1
 8007e28:	42a0      	cmp	r0, r4
 8007e2a:	d10b      	bne.n	8007e44 <_free_r+0x6c>
 8007e2c:	6820      	ldr	r0, [r4, #0]
 8007e2e:	4401      	add	r1, r0
 8007e30:	1850      	adds	r0, r2, r1
 8007e32:	4283      	cmp	r3, r0
 8007e34:	6011      	str	r1, [r2, #0]
 8007e36:	d1e0      	bne.n	8007dfa <_free_r+0x22>
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	6053      	str	r3, [r2, #4]
 8007e3e:	4408      	add	r0, r1
 8007e40:	6010      	str	r0, [r2, #0]
 8007e42:	e7da      	b.n	8007dfa <_free_r+0x22>
 8007e44:	d902      	bls.n	8007e4c <_free_r+0x74>
 8007e46:	230c      	movs	r3, #12
 8007e48:	602b      	str	r3, [r5, #0]
 8007e4a:	e7d6      	b.n	8007dfa <_free_r+0x22>
 8007e4c:	6820      	ldr	r0, [r4, #0]
 8007e4e:	1821      	adds	r1, r4, r0
 8007e50:	428b      	cmp	r3, r1
 8007e52:	bf04      	itt	eq
 8007e54:	6819      	ldreq	r1, [r3, #0]
 8007e56:	685b      	ldreq	r3, [r3, #4]
 8007e58:	6063      	str	r3, [r4, #4]
 8007e5a:	bf04      	itt	eq
 8007e5c:	1809      	addeq	r1, r1, r0
 8007e5e:	6021      	streq	r1, [r4, #0]
 8007e60:	6054      	str	r4, [r2, #4]
 8007e62:	e7ca      	b.n	8007dfa <_free_r+0x22>
 8007e64:	bd38      	pop	{r3, r4, r5, pc}
 8007e66:	bf00      	nop
 8007e68:	200005b0 	.word	0x200005b0

08007e6c <malloc>:
 8007e6c:	4b02      	ldr	r3, [pc, #8]	@ (8007e78 <malloc+0xc>)
 8007e6e:	4601      	mov	r1, r0
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	f000 b825 	b.w	8007ec0 <_malloc_r>
 8007e76:	bf00      	nop
 8007e78:	200000a8 	.word	0x200000a8

08007e7c <sbrk_aligned>:
 8007e7c:	b570      	push	{r4, r5, r6, lr}
 8007e7e:	4e0f      	ldr	r6, [pc, #60]	@ (8007ebc <sbrk_aligned+0x40>)
 8007e80:	460c      	mov	r4, r1
 8007e82:	6831      	ldr	r1, [r6, #0]
 8007e84:	4605      	mov	r5, r0
 8007e86:	b911      	cbnz	r1, 8007e8e <sbrk_aligned+0x12>
 8007e88:	f001 ffd2 	bl	8009e30 <_sbrk_r>
 8007e8c:	6030      	str	r0, [r6, #0]
 8007e8e:	4621      	mov	r1, r4
 8007e90:	4628      	mov	r0, r5
 8007e92:	f001 ffcd 	bl	8009e30 <_sbrk_r>
 8007e96:	1c43      	adds	r3, r0, #1
 8007e98:	d103      	bne.n	8007ea2 <sbrk_aligned+0x26>
 8007e9a:	f04f 34ff 	mov.w	r4, #4294967295
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	bd70      	pop	{r4, r5, r6, pc}
 8007ea2:	1cc4      	adds	r4, r0, #3
 8007ea4:	f024 0403 	bic.w	r4, r4, #3
 8007ea8:	42a0      	cmp	r0, r4
 8007eaa:	d0f8      	beq.n	8007e9e <sbrk_aligned+0x22>
 8007eac:	1a21      	subs	r1, r4, r0
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f001 ffbe 	bl	8009e30 <_sbrk_r>
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d1f2      	bne.n	8007e9e <sbrk_aligned+0x22>
 8007eb8:	e7ef      	b.n	8007e9a <sbrk_aligned+0x1e>
 8007eba:	bf00      	nop
 8007ebc:	200005ac 	.word	0x200005ac

08007ec0 <_malloc_r>:
 8007ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec4:	1ccd      	adds	r5, r1, #3
 8007ec6:	f025 0503 	bic.w	r5, r5, #3
 8007eca:	3508      	adds	r5, #8
 8007ecc:	2d0c      	cmp	r5, #12
 8007ece:	bf38      	it	cc
 8007ed0:	250c      	movcc	r5, #12
 8007ed2:	2d00      	cmp	r5, #0
 8007ed4:	4606      	mov	r6, r0
 8007ed6:	db01      	blt.n	8007edc <_malloc_r+0x1c>
 8007ed8:	42a9      	cmp	r1, r5
 8007eda:	d904      	bls.n	8007ee6 <_malloc_r+0x26>
 8007edc:	230c      	movs	r3, #12
 8007ede:	6033      	str	r3, [r6, #0]
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ee6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fbc <_malloc_r+0xfc>
 8007eea:	f000 f869 	bl	8007fc0 <__malloc_lock>
 8007eee:	f8d8 3000 	ldr.w	r3, [r8]
 8007ef2:	461c      	mov	r4, r3
 8007ef4:	bb44      	cbnz	r4, 8007f48 <_malloc_r+0x88>
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f7ff ffbf 	bl	8007e7c <sbrk_aligned>
 8007efe:	1c43      	adds	r3, r0, #1
 8007f00:	4604      	mov	r4, r0
 8007f02:	d158      	bne.n	8007fb6 <_malloc_r+0xf6>
 8007f04:	f8d8 4000 	ldr.w	r4, [r8]
 8007f08:	4627      	mov	r7, r4
 8007f0a:	2f00      	cmp	r7, #0
 8007f0c:	d143      	bne.n	8007f96 <_malloc_r+0xd6>
 8007f0e:	2c00      	cmp	r4, #0
 8007f10:	d04b      	beq.n	8007faa <_malloc_r+0xea>
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	4639      	mov	r1, r7
 8007f16:	4630      	mov	r0, r6
 8007f18:	eb04 0903 	add.w	r9, r4, r3
 8007f1c:	f001 ff88 	bl	8009e30 <_sbrk_r>
 8007f20:	4581      	cmp	r9, r0
 8007f22:	d142      	bne.n	8007faa <_malloc_r+0xea>
 8007f24:	6821      	ldr	r1, [r4, #0]
 8007f26:	1a6d      	subs	r5, r5, r1
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f7ff ffa6 	bl	8007e7c <sbrk_aligned>
 8007f30:	3001      	adds	r0, #1
 8007f32:	d03a      	beq.n	8007faa <_malloc_r+0xea>
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	442b      	add	r3, r5
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f3e:	685a      	ldr	r2, [r3, #4]
 8007f40:	bb62      	cbnz	r2, 8007f9c <_malloc_r+0xdc>
 8007f42:	f8c8 7000 	str.w	r7, [r8]
 8007f46:	e00f      	b.n	8007f68 <_malloc_r+0xa8>
 8007f48:	6822      	ldr	r2, [r4, #0]
 8007f4a:	1b52      	subs	r2, r2, r5
 8007f4c:	d420      	bmi.n	8007f90 <_malloc_r+0xd0>
 8007f4e:	2a0b      	cmp	r2, #11
 8007f50:	d917      	bls.n	8007f82 <_malloc_r+0xc2>
 8007f52:	1961      	adds	r1, r4, r5
 8007f54:	42a3      	cmp	r3, r4
 8007f56:	6025      	str	r5, [r4, #0]
 8007f58:	bf18      	it	ne
 8007f5a:	6059      	strne	r1, [r3, #4]
 8007f5c:	6863      	ldr	r3, [r4, #4]
 8007f5e:	bf08      	it	eq
 8007f60:	f8c8 1000 	streq.w	r1, [r8]
 8007f64:	5162      	str	r2, [r4, r5]
 8007f66:	604b      	str	r3, [r1, #4]
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f000 f82f 	bl	8007fcc <__malloc_unlock>
 8007f6e:	f104 000b 	add.w	r0, r4, #11
 8007f72:	1d23      	adds	r3, r4, #4
 8007f74:	f020 0007 	bic.w	r0, r0, #7
 8007f78:	1ac2      	subs	r2, r0, r3
 8007f7a:	bf1c      	itt	ne
 8007f7c:	1a1b      	subne	r3, r3, r0
 8007f7e:	50a3      	strne	r3, [r4, r2]
 8007f80:	e7af      	b.n	8007ee2 <_malloc_r+0x22>
 8007f82:	6862      	ldr	r2, [r4, #4]
 8007f84:	42a3      	cmp	r3, r4
 8007f86:	bf0c      	ite	eq
 8007f88:	f8c8 2000 	streq.w	r2, [r8]
 8007f8c:	605a      	strne	r2, [r3, #4]
 8007f8e:	e7eb      	b.n	8007f68 <_malloc_r+0xa8>
 8007f90:	4623      	mov	r3, r4
 8007f92:	6864      	ldr	r4, [r4, #4]
 8007f94:	e7ae      	b.n	8007ef4 <_malloc_r+0x34>
 8007f96:	463c      	mov	r4, r7
 8007f98:	687f      	ldr	r7, [r7, #4]
 8007f9a:	e7b6      	b.n	8007f0a <_malloc_r+0x4a>
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	42a3      	cmp	r3, r4
 8007fa2:	d1fb      	bne.n	8007f9c <_malloc_r+0xdc>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	6053      	str	r3, [r2, #4]
 8007fa8:	e7de      	b.n	8007f68 <_malloc_r+0xa8>
 8007faa:	230c      	movs	r3, #12
 8007fac:	6033      	str	r3, [r6, #0]
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f000 f80c 	bl	8007fcc <__malloc_unlock>
 8007fb4:	e794      	b.n	8007ee0 <_malloc_r+0x20>
 8007fb6:	6005      	str	r5, [r0, #0]
 8007fb8:	e7d6      	b.n	8007f68 <_malloc_r+0xa8>
 8007fba:	bf00      	nop
 8007fbc:	200005b0 	.word	0x200005b0

08007fc0 <__malloc_lock>:
 8007fc0:	4801      	ldr	r0, [pc, #4]	@ (8007fc8 <__malloc_lock+0x8>)
 8007fc2:	f7ff b8b2 	b.w	800712a <__retarget_lock_acquire_recursive>
 8007fc6:	bf00      	nop
 8007fc8:	200005a8 	.word	0x200005a8

08007fcc <__malloc_unlock>:
 8007fcc:	4801      	ldr	r0, [pc, #4]	@ (8007fd4 <__malloc_unlock+0x8>)
 8007fce:	f7ff b8ad 	b.w	800712c <__retarget_lock_release_recursive>
 8007fd2:	bf00      	nop
 8007fd4:	200005a8 	.word	0x200005a8

08007fd8 <_Balloc>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	69c6      	ldr	r6, [r0, #28]
 8007fdc:	4604      	mov	r4, r0
 8007fde:	460d      	mov	r5, r1
 8007fe0:	b976      	cbnz	r6, 8008000 <_Balloc+0x28>
 8007fe2:	2010      	movs	r0, #16
 8007fe4:	f7ff ff42 	bl	8007e6c <malloc>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	61e0      	str	r0, [r4, #28]
 8007fec:	b920      	cbnz	r0, 8007ff8 <_Balloc+0x20>
 8007fee:	4b18      	ldr	r3, [pc, #96]	@ (8008050 <_Balloc+0x78>)
 8007ff0:	4818      	ldr	r0, [pc, #96]	@ (8008054 <_Balloc+0x7c>)
 8007ff2:	216b      	movs	r1, #107	@ 0x6b
 8007ff4:	f001 ff44 	bl	8009e80 <__assert_func>
 8007ff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ffc:	6006      	str	r6, [r0, #0]
 8007ffe:	60c6      	str	r6, [r0, #12]
 8008000:	69e6      	ldr	r6, [r4, #28]
 8008002:	68f3      	ldr	r3, [r6, #12]
 8008004:	b183      	cbz	r3, 8008028 <_Balloc+0x50>
 8008006:	69e3      	ldr	r3, [r4, #28]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800800e:	b9b8      	cbnz	r0, 8008040 <_Balloc+0x68>
 8008010:	2101      	movs	r1, #1
 8008012:	fa01 f605 	lsl.w	r6, r1, r5
 8008016:	1d72      	adds	r2, r6, #5
 8008018:	0092      	lsls	r2, r2, #2
 800801a:	4620      	mov	r0, r4
 800801c:	f001 ff4e 	bl	8009ebc <_calloc_r>
 8008020:	b160      	cbz	r0, 800803c <_Balloc+0x64>
 8008022:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008026:	e00e      	b.n	8008046 <_Balloc+0x6e>
 8008028:	2221      	movs	r2, #33	@ 0x21
 800802a:	2104      	movs	r1, #4
 800802c:	4620      	mov	r0, r4
 800802e:	f001 ff45 	bl	8009ebc <_calloc_r>
 8008032:	69e3      	ldr	r3, [r4, #28]
 8008034:	60f0      	str	r0, [r6, #12]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e4      	bne.n	8008006 <_Balloc+0x2e>
 800803c:	2000      	movs	r0, #0
 800803e:	bd70      	pop	{r4, r5, r6, pc}
 8008040:	6802      	ldr	r2, [r0, #0]
 8008042:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008046:	2300      	movs	r3, #0
 8008048:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800804c:	e7f7      	b.n	800803e <_Balloc+0x66>
 800804e:	bf00      	nop
 8008050:	0800af46 	.word	0x0800af46
 8008054:	0800afc6 	.word	0x0800afc6

08008058 <_Bfree>:
 8008058:	b570      	push	{r4, r5, r6, lr}
 800805a:	69c6      	ldr	r6, [r0, #28]
 800805c:	4605      	mov	r5, r0
 800805e:	460c      	mov	r4, r1
 8008060:	b976      	cbnz	r6, 8008080 <_Bfree+0x28>
 8008062:	2010      	movs	r0, #16
 8008064:	f7ff ff02 	bl	8007e6c <malloc>
 8008068:	4602      	mov	r2, r0
 800806a:	61e8      	str	r0, [r5, #28]
 800806c:	b920      	cbnz	r0, 8008078 <_Bfree+0x20>
 800806e:	4b09      	ldr	r3, [pc, #36]	@ (8008094 <_Bfree+0x3c>)
 8008070:	4809      	ldr	r0, [pc, #36]	@ (8008098 <_Bfree+0x40>)
 8008072:	218f      	movs	r1, #143	@ 0x8f
 8008074:	f001 ff04 	bl	8009e80 <__assert_func>
 8008078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800807c:	6006      	str	r6, [r0, #0]
 800807e:	60c6      	str	r6, [r0, #12]
 8008080:	b13c      	cbz	r4, 8008092 <_Bfree+0x3a>
 8008082:	69eb      	ldr	r3, [r5, #28]
 8008084:	6862      	ldr	r2, [r4, #4]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800808c:	6021      	str	r1, [r4, #0]
 800808e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008092:	bd70      	pop	{r4, r5, r6, pc}
 8008094:	0800af46 	.word	0x0800af46
 8008098:	0800afc6 	.word	0x0800afc6

0800809c <__multadd>:
 800809c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a0:	690d      	ldr	r5, [r1, #16]
 80080a2:	4607      	mov	r7, r0
 80080a4:	460c      	mov	r4, r1
 80080a6:	461e      	mov	r6, r3
 80080a8:	f101 0c14 	add.w	ip, r1, #20
 80080ac:	2000      	movs	r0, #0
 80080ae:	f8dc 3000 	ldr.w	r3, [ip]
 80080b2:	b299      	uxth	r1, r3
 80080b4:	fb02 6101 	mla	r1, r2, r1, r6
 80080b8:	0c1e      	lsrs	r6, r3, #16
 80080ba:	0c0b      	lsrs	r3, r1, #16
 80080bc:	fb02 3306 	mla	r3, r2, r6, r3
 80080c0:	b289      	uxth	r1, r1
 80080c2:	3001      	adds	r0, #1
 80080c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080c8:	4285      	cmp	r5, r0
 80080ca:	f84c 1b04 	str.w	r1, [ip], #4
 80080ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080d2:	dcec      	bgt.n	80080ae <__multadd+0x12>
 80080d4:	b30e      	cbz	r6, 800811a <__multadd+0x7e>
 80080d6:	68a3      	ldr	r3, [r4, #8]
 80080d8:	42ab      	cmp	r3, r5
 80080da:	dc19      	bgt.n	8008110 <__multadd+0x74>
 80080dc:	6861      	ldr	r1, [r4, #4]
 80080de:	4638      	mov	r0, r7
 80080e0:	3101      	adds	r1, #1
 80080e2:	f7ff ff79 	bl	8007fd8 <_Balloc>
 80080e6:	4680      	mov	r8, r0
 80080e8:	b928      	cbnz	r0, 80080f6 <__multadd+0x5a>
 80080ea:	4602      	mov	r2, r0
 80080ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008120 <__multadd+0x84>)
 80080ee:	480d      	ldr	r0, [pc, #52]	@ (8008124 <__multadd+0x88>)
 80080f0:	21ba      	movs	r1, #186	@ 0xba
 80080f2:	f001 fec5 	bl	8009e80 <__assert_func>
 80080f6:	6922      	ldr	r2, [r4, #16]
 80080f8:	3202      	adds	r2, #2
 80080fa:	f104 010c 	add.w	r1, r4, #12
 80080fe:	0092      	lsls	r2, r2, #2
 8008100:	300c      	adds	r0, #12
 8008102:	f001 fea5 	bl	8009e50 <memcpy>
 8008106:	4621      	mov	r1, r4
 8008108:	4638      	mov	r0, r7
 800810a:	f7ff ffa5 	bl	8008058 <_Bfree>
 800810e:	4644      	mov	r4, r8
 8008110:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008114:	3501      	adds	r5, #1
 8008116:	615e      	str	r6, [r3, #20]
 8008118:	6125      	str	r5, [r4, #16]
 800811a:	4620      	mov	r0, r4
 800811c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008120:	0800afb5 	.word	0x0800afb5
 8008124:	0800afc6 	.word	0x0800afc6

08008128 <__s2b>:
 8008128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800812c:	460c      	mov	r4, r1
 800812e:	4615      	mov	r5, r2
 8008130:	461f      	mov	r7, r3
 8008132:	2209      	movs	r2, #9
 8008134:	3308      	adds	r3, #8
 8008136:	4606      	mov	r6, r0
 8008138:	fb93 f3f2 	sdiv	r3, r3, r2
 800813c:	2100      	movs	r1, #0
 800813e:	2201      	movs	r2, #1
 8008140:	429a      	cmp	r2, r3
 8008142:	db09      	blt.n	8008158 <__s2b+0x30>
 8008144:	4630      	mov	r0, r6
 8008146:	f7ff ff47 	bl	8007fd8 <_Balloc>
 800814a:	b940      	cbnz	r0, 800815e <__s2b+0x36>
 800814c:	4602      	mov	r2, r0
 800814e:	4b19      	ldr	r3, [pc, #100]	@ (80081b4 <__s2b+0x8c>)
 8008150:	4819      	ldr	r0, [pc, #100]	@ (80081b8 <__s2b+0x90>)
 8008152:	21d3      	movs	r1, #211	@ 0xd3
 8008154:	f001 fe94 	bl	8009e80 <__assert_func>
 8008158:	0052      	lsls	r2, r2, #1
 800815a:	3101      	adds	r1, #1
 800815c:	e7f0      	b.n	8008140 <__s2b+0x18>
 800815e:	9b08      	ldr	r3, [sp, #32]
 8008160:	6143      	str	r3, [r0, #20]
 8008162:	2d09      	cmp	r5, #9
 8008164:	f04f 0301 	mov.w	r3, #1
 8008168:	6103      	str	r3, [r0, #16]
 800816a:	dd16      	ble.n	800819a <__s2b+0x72>
 800816c:	f104 0909 	add.w	r9, r4, #9
 8008170:	46c8      	mov	r8, r9
 8008172:	442c      	add	r4, r5
 8008174:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008178:	4601      	mov	r1, r0
 800817a:	3b30      	subs	r3, #48	@ 0x30
 800817c:	220a      	movs	r2, #10
 800817e:	4630      	mov	r0, r6
 8008180:	f7ff ff8c 	bl	800809c <__multadd>
 8008184:	45a0      	cmp	r8, r4
 8008186:	d1f5      	bne.n	8008174 <__s2b+0x4c>
 8008188:	f1a5 0408 	sub.w	r4, r5, #8
 800818c:	444c      	add	r4, r9
 800818e:	1b2d      	subs	r5, r5, r4
 8008190:	1963      	adds	r3, r4, r5
 8008192:	42bb      	cmp	r3, r7
 8008194:	db04      	blt.n	80081a0 <__s2b+0x78>
 8008196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800819a:	340a      	adds	r4, #10
 800819c:	2509      	movs	r5, #9
 800819e:	e7f6      	b.n	800818e <__s2b+0x66>
 80081a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80081a4:	4601      	mov	r1, r0
 80081a6:	3b30      	subs	r3, #48	@ 0x30
 80081a8:	220a      	movs	r2, #10
 80081aa:	4630      	mov	r0, r6
 80081ac:	f7ff ff76 	bl	800809c <__multadd>
 80081b0:	e7ee      	b.n	8008190 <__s2b+0x68>
 80081b2:	bf00      	nop
 80081b4:	0800afb5 	.word	0x0800afb5
 80081b8:	0800afc6 	.word	0x0800afc6

080081bc <__hi0bits>:
 80081bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80081c0:	4603      	mov	r3, r0
 80081c2:	bf36      	itet	cc
 80081c4:	0403      	lslcc	r3, r0, #16
 80081c6:	2000      	movcs	r0, #0
 80081c8:	2010      	movcc	r0, #16
 80081ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081ce:	bf3c      	itt	cc
 80081d0:	021b      	lslcc	r3, r3, #8
 80081d2:	3008      	addcc	r0, #8
 80081d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081d8:	bf3c      	itt	cc
 80081da:	011b      	lslcc	r3, r3, #4
 80081dc:	3004      	addcc	r0, #4
 80081de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081e2:	bf3c      	itt	cc
 80081e4:	009b      	lslcc	r3, r3, #2
 80081e6:	3002      	addcc	r0, #2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	db05      	blt.n	80081f8 <__hi0bits+0x3c>
 80081ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80081f0:	f100 0001 	add.w	r0, r0, #1
 80081f4:	bf08      	it	eq
 80081f6:	2020      	moveq	r0, #32
 80081f8:	4770      	bx	lr

080081fa <__lo0bits>:
 80081fa:	6803      	ldr	r3, [r0, #0]
 80081fc:	4602      	mov	r2, r0
 80081fe:	f013 0007 	ands.w	r0, r3, #7
 8008202:	d00b      	beq.n	800821c <__lo0bits+0x22>
 8008204:	07d9      	lsls	r1, r3, #31
 8008206:	d421      	bmi.n	800824c <__lo0bits+0x52>
 8008208:	0798      	lsls	r0, r3, #30
 800820a:	bf49      	itett	mi
 800820c:	085b      	lsrmi	r3, r3, #1
 800820e:	089b      	lsrpl	r3, r3, #2
 8008210:	2001      	movmi	r0, #1
 8008212:	6013      	strmi	r3, [r2, #0]
 8008214:	bf5c      	itt	pl
 8008216:	6013      	strpl	r3, [r2, #0]
 8008218:	2002      	movpl	r0, #2
 800821a:	4770      	bx	lr
 800821c:	b299      	uxth	r1, r3
 800821e:	b909      	cbnz	r1, 8008224 <__lo0bits+0x2a>
 8008220:	0c1b      	lsrs	r3, r3, #16
 8008222:	2010      	movs	r0, #16
 8008224:	b2d9      	uxtb	r1, r3
 8008226:	b909      	cbnz	r1, 800822c <__lo0bits+0x32>
 8008228:	3008      	adds	r0, #8
 800822a:	0a1b      	lsrs	r3, r3, #8
 800822c:	0719      	lsls	r1, r3, #28
 800822e:	bf04      	itt	eq
 8008230:	091b      	lsreq	r3, r3, #4
 8008232:	3004      	addeq	r0, #4
 8008234:	0799      	lsls	r1, r3, #30
 8008236:	bf04      	itt	eq
 8008238:	089b      	lsreq	r3, r3, #2
 800823a:	3002      	addeq	r0, #2
 800823c:	07d9      	lsls	r1, r3, #31
 800823e:	d403      	bmi.n	8008248 <__lo0bits+0x4e>
 8008240:	085b      	lsrs	r3, r3, #1
 8008242:	f100 0001 	add.w	r0, r0, #1
 8008246:	d003      	beq.n	8008250 <__lo0bits+0x56>
 8008248:	6013      	str	r3, [r2, #0]
 800824a:	4770      	bx	lr
 800824c:	2000      	movs	r0, #0
 800824e:	4770      	bx	lr
 8008250:	2020      	movs	r0, #32
 8008252:	4770      	bx	lr

08008254 <__i2b>:
 8008254:	b510      	push	{r4, lr}
 8008256:	460c      	mov	r4, r1
 8008258:	2101      	movs	r1, #1
 800825a:	f7ff febd 	bl	8007fd8 <_Balloc>
 800825e:	4602      	mov	r2, r0
 8008260:	b928      	cbnz	r0, 800826e <__i2b+0x1a>
 8008262:	4b05      	ldr	r3, [pc, #20]	@ (8008278 <__i2b+0x24>)
 8008264:	4805      	ldr	r0, [pc, #20]	@ (800827c <__i2b+0x28>)
 8008266:	f240 1145 	movw	r1, #325	@ 0x145
 800826a:	f001 fe09 	bl	8009e80 <__assert_func>
 800826e:	2301      	movs	r3, #1
 8008270:	6144      	str	r4, [r0, #20]
 8008272:	6103      	str	r3, [r0, #16]
 8008274:	bd10      	pop	{r4, pc}
 8008276:	bf00      	nop
 8008278:	0800afb5 	.word	0x0800afb5
 800827c:	0800afc6 	.word	0x0800afc6

08008280 <__multiply>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	4614      	mov	r4, r2
 8008286:	690a      	ldr	r2, [r1, #16]
 8008288:	6923      	ldr	r3, [r4, #16]
 800828a:	429a      	cmp	r2, r3
 800828c:	bfa8      	it	ge
 800828e:	4623      	movge	r3, r4
 8008290:	460f      	mov	r7, r1
 8008292:	bfa4      	itt	ge
 8008294:	460c      	movge	r4, r1
 8008296:	461f      	movge	r7, r3
 8008298:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800829c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80082a0:	68a3      	ldr	r3, [r4, #8]
 80082a2:	6861      	ldr	r1, [r4, #4]
 80082a4:	eb0a 0609 	add.w	r6, sl, r9
 80082a8:	42b3      	cmp	r3, r6
 80082aa:	b085      	sub	sp, #20
 80082ac:	bfb8      	it	lt
 80082ae:	3101      	addlt	r1, #1
 80082b0:	f7ff fe92 	bl	8007fd8 <_Balloc>
 80082b4:	b930      	cbnz	r0, 80082c4 <__multiply+0x44>
 80082b6:	4602      	mov	r2, r0
 80082b8:	4b44      	ldr	r3, [pc, #272]	@ (80083cc <__multiply+0x14c>)
 80082ba:	4845      	ldr	r0, [pc, #276]	@ (80083d0 <__multiply+0x150>)
 80082bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80082c0:	f001 fdde 	bl	8009e80 <__assert_func>
 80082c4:	f100 0514 	add.w	r5, r0, #20
 80082c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082cc:	462b      	mov	r3, r5
 80082ce:	2200      	movs	r2, #0
 80082d0:	4543      	cmp	r3, r8
 80082d2:	d321      	bcc.n	8008318 <__multiply+0x98>
 80082d4:	f107 0114 	add.w	r1, r7, #20
 80082d8:	f104 0214 	add.w	r2, r4, #20
 80082dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80082e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80082e4:	9302      	str	r3, [sp, #8]
 80082e6:	1b13      	subs	r3, r2, r4
 80082e8:	3b15      	subs	r3, #21
 80082ea:	f023 0303 	bic.w	r3, r3, #3
 80082ee:	3304      	adds	r3, #4
 80082f0:	f104 0715 	add.w	r7, r4, #21
 80082f4:	42ba      	cmp	r2, r7
 80082f6:	bf38      	it	cc
 80082f8:	2304      	movcc	r3, #4
 80082fa:	9301      	str	r3, [sp, #4]
 80082fc:	9b02      	ldr	r3, [sp, #8]
 80082fe:	9103      	str	r1, [sp, #12]
 8008300:	428b      	cmp	r3, r1
 8008302:	d80c      	bhi.n	800831e <__multiply+0x9e>
 8008304:	2e00      	cmp	r6, #0
 8008306:	dd03      	ble.n	8008310 <__multiply+0x90>
 8008308:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800830c:	2b00      	cmp	r3, #0
 800830e:	d05b      	beq.n	80083c8 <__multiply+0x148>
 8008310:	6106      	str	r6, [r0, #16]
 8008312:	b005      	add	sp, #20
 8008314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008318:	f843 2b04 	str.w	r2, [r3], #4
 800831c:	e7d8      	b.n	80082d0 <__multiply+0x50>
 800831e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008322:	f1ba 0f00 	cmp.w	sl, #0
 8008326:	d024      	beq.n	8008372 <__multiply+0xf2>
 8008328:	f104 0e14 	add.w	lr, r4, #20
 800832c:	46a9      	mov	r9, r5
 800832e:	f04f 0c00 	mov.w	ip, #0
 8008332:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008336:	f8d9 3000 	ldr.w	r3, [r9]
 800833a:	fa1f fb87 	uxth.w	fp, r7
 800833e:	b29b      	uxth	r3, r3
 8008340:	fb0a 330b 	mla	r3, sl, fp, r3
 8008344:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008348:	f8d9 7000 	ldr.w	r7, [r9]
 800834c:	4463      	add	r3, ip
 800834e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008352:	fb0a c70b 	mla	r7, sl, fp, ip
 8008356:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800835a:	b29b      	uxth	r3, r3
 800835c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008360:	4572      	cmp	r2, lr
 8008362:	f849 3b04 	str.w	r3, [r9], #4
 8008366:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800836a:	d8e2      	bhi.n	8008332 <__multiply+0xb2>
 800836c:	9b01      	ldr	r3, [sp, #4]
 800836e:	f845 c003 	str.w	ip, [r5, r3]
 8008372:	9b03      	ldr	r3, [sp, #12]
 8008374:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008378:	3104      	adds	r1, #4
 800837a:	f1b9 0f00 	cmp.w	r9, #0
 800837e:	d021      	beq.n	80083c4 <__multiply+0x144>
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	f104 0c14 	add.w	ip, r4, #20
 8008386:	46ae      	mov	lr, r5
 8008388:	f04f 0a00 	mov.w	sl, #0
 800838c:	f8bc b000 	ldrh.w	fp, [ip]
 8008390:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008394:	fb09 770b 	mla	r7, r9, fp, r7
 8008398:	4457      	add	r7, sl
 800839a:	b29b      	uxth	r3, r3
 800839c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80083a0:	f84e 3b04 	str.w	r3, [lr], #4
 80083a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80083a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083ac:	f8be 3000 	ldrh.w	r3, [lr]
 80083b0:	fb09 330a 	mla	r3, r9, sl, r3
 80083b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80083b8:	4562      	cmp	r2, ip
 80083ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083be:	d8e5      	bhi.n	800838c <__multiply+0x10c>
 80083c0:	9f01      	ldr	r7, [sp, #4]
 80083c2:	51eb      	str	r3, [r5, r7]
 80083c4:	3504      	adds	r5, #4
 80083c6:	e799      	b.n	80082fc <__multiply+0x7c>
 80083c8:	3e01      	subs	r6, #1
 80083ca:	e79b      	b.n	8008304 <__multiply+0x84>
 80083cc:	0800afb5 	.word	0x0800afb5
 80083d0:	0800afc6 	.word	0x0800afc6

080083d4 <__pow5mult>:
 80083d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d8:	4615      	mov	r5, r2
 80083da:	f012 0203 	ands.w	r2, r2, #3
 80083de:	4607      	mov	r7, r0
 80083e0:	460e      	mov	r6, r1
 80083e2:	d007      	beq.n	80083f4 <__pow5mult+0x20>
 80083e4:	4c25      	ldr	r4, [pc, #148]	@ (800847c <__pow5mult+0xa8>)
 80083e6:	3a01      	subs	r2, #1
 80083e8:	2300      	movs	r3, #0
 80083ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083ee:	f7ff fe55 	bl	800809c <__multadd>
 80083f2:	4606      	mov	r6, r0
 80083f4:	10ad      	asrs	r5, r5, #2
 80083f6:	d03d      	beq.n	8008474 <__pow5mult+0xa0>
 80083f8:	69fc      	ldr	r4, [r7, #28]
 80083fa:	b97c      	cbnz	r4, 800841c <__pow5mult+0x48>
 80083fc:	2010      	movs	r0, #16
 80083fe:	f7ff fd35 	bl	8007e6c <malloc>
 8008402:	4602      	mov	r2, r0
 8008404:	61f8      	str	r0, [r7, #28]
 8008406:	b928      	cbnz	r0, 8008414 <__pow5mult+0x40>
 8008408:	4b1d      	ldr	r3, [pc, #116]	@ (8008480 <__pow5mult+0xac>)
 800840a:	481e      	ldr	r0, [pc, #120]	@ (8008484 <__pow5mult+0xb0>)
 800840c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008410:	f001 fd36 	bl	8009e80 <__assert_func>
 8008414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008418:	6004      	str	r4, [r0, #0]
 800841a:	60c4      	str	r4, [r0, #12]
 800841c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008420:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008424:	b94c      	cbnz	r4, 800843a <__pow5mult+0x66>
 8008426:	f240 2171 	movw	r1, #625	@ 0x271
 800842a:	4638      	mov	r0, r7
 800842c:	f7ff ff12 	bl	8008254 <__i2b>
 8008430:	2300      	movs	r3, #0
 8008432:	f8c8 0008 	str.w	r0, [r8, #8]
 8008436:	4604      	mov	r4, r0
 8008438:	6003      	str	r3, [r0, #0]
 800843a:	f04f 0900 	mov.w	r9, #0
 800843e:	07eb      	lsls	r3, r5, #31
 8008440:	d50a      	bpl.n	8008458 <__pow5mult+0x84>
 8008442:	4631      	mov	r1, r6
 8008444:	4622      	mov	r2, r4
 8008446:	4638      	mov	r0, r7
 8008448:	f7ff ff1a 	bl	8008280 <__multiply>
 800844c:	4631      	mov	r1, r6
 800844e:	4680      	mov	r8, r0
 8008450:	4638      	mov	r0, r7
 8008452:	f7ff fe01 	bl	8008058 <_Bfree>
 8008456:	4646      	mov	r6, r8
 8008458:	106d      	asrs	r5, r5, #1
 800845a:	d00b      	beq.n	8008474 <__pow5mult+0xa0>
 800845c:	6820      	ldr	r0, [r4, #0]
 800845e:	b938      	cbnz	r0, 8008470 <__pow5mult+0x9c>
 8008460:	4622      	mov	r2, r4
 8008462:	4621      	mov	r1, r4
 8008464:	4638      	mov	r0, r7
 8008466:	f7ff ff0b 	bl	8008280 <__multiply>
 800846a:	6020      	str	r0, [r4, #0]
 800846c:	f8c0 9000 	str.w	r9, [r0]
 8008470:	4604      	mov	r4, r0
 8008472:	e7e4      	b.n	800843e <__pow5mult+0x6a>
 8008474:	4630      	mov	r0, r6
 8008476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800847a:	bf00      	nop
 800847c:	0800b020 	.word	0x0800b020
 8008480:	0800af46 	.word	0x0800af46
 8008484:	0800afc6 	.word	0x0800afc6

08008488 <__lshift>:
 8008488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800848c:	460c      	mov	r4, r1
 800848e:	6849      	ldr	r1, [r1, #4]
 8008490:	6923      	ldr	r3, [r4, #16]
 8008492:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008496:	68a3      	ldr	r3, [r4, #8]
 8008498:	4607      	mov	r7, r0
 800849a:	4691      	mov	r9, r2
 800849c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084a0:	f108 0601 	add.w	r6, r8, #1
 80084a4:	42b3      	cmp	r3, r6
 80084a6:	db0b      	blt.n	80084c0 <__lshift+0x38>
 80084a8:	4638      	mov	r0, r7
 80084aa:	f7ff fd95 	bl	8007fd8 <_Balloc>
 80084ae:	4605      	mov	r5, r0
 80084b0:	b948      	cbnz	r0, 80084c6 <__lshift+0x3e>
 80084b2:	4602      	mov	r2, r0
 80084b4:	4b28      	ldr	r3, [pc, #160]	@ (8008558 <__lshift+0xd0>)
 80084b6:	4829      	ldr	r0, [pc, #164]	@ (800855c <__lshift+0xd4>)
 80084b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80084bc:	f001 fce0 	bl	8009e80 <__assert_func>
 80084c0:	3101      	adds	r1, #1
 80084c2:	005b      	lsls	r3, r3, #1
 80084c4:	e7ee      	b.n	80084a4 <__lshift+0x1c>
 80084c6:	2300      	movs	r3, #0
 80084c8:	f100 0114 	add.w	r1, r0, #20
 80084cc:	f100 0210 	add.w	r2, r0, #16
 80084d0:	4618      	mov	r0, r3
 80084d2:	4553      	cmp	r3, sl
 80084d4:	db33      	blt.n	800853e <__lshift+0xb6>
 80084d6:	6920      	ldr	r0, [r4, #16]
 80084d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084dc:	f104 0314 	add.w	r3, r4, #20
 80084e0:	f019 091f 	ands.w	r9, r9, #31
 80084e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084ec:	d02b      	beq.n	8008546 <__lshift+0xbe>
 80084ee:	f1c9 0e20 	rsb	lr, r9, #32
 80084f2:	468a      	mov	sl, r1
 80084f4:	2200      	movs	r2, #0
 80084f6:	6818      	ldr	r0, [r3, #0]
 80084f8:	fa00 f009 	lsl.w	r0, r0, r9
 80084fc:	4310      	orrs	r0, r2
 80084fe:	f84a 0b04 	str.w	r0, [sl], #4
 8008502:	f853 2b04 	ldr.w	r2, [r3], #4
 8008506:	459c      	cmp	ip, r3
 8008508:	fa22 f20e 	lsr.w	r2, r2, lr
 800850c:	d8f3      	bhi.n	80084f6 <__lshift+0x6e>
 800850e:	ebac 0304 	sub.w	r3, ip, r4
 8008512:	3b15      	subs	r3, #21
 8008514:	f023 0303 	bic.w	r3, r3, #3
 8008518:	3304      	adds	r3, #4
 800851a:	f104 0015 	add.w	r0, r4, #21
 800851e:	4584      	cmp	ip, r0
 8008520:	bf38      	it	cc
 8008522:	2304      	movcc	r3, #4
 8008524:	50ca      	str	r2, [r1, r3]
 8008526:	b10a      	cbz	r2, 800852c <__lshift+0xa4>
 8008528:	f108 0602 	add.w	r6, r8, #2
 800852c:	3e01      	subs	r6, #1
 800852e:	4638      	mov	r0, r7
 8008530:	612e      	str	r6, [r5, #16]
 8008532:	4621      	mov	r1, r4
 8008534:	f7ff fd90 	bl	8008058 <_Bfree>
 8008538:	4628      	mov	r0, r5
 800853a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008542:	3301      	adds	r3, #1
 8008544:	e7c5      	b.n	80084d2 <__lshift+0x4a>
 8008546:	3904      	subs	r1, #4
 8008548:	f853 2b04 	ldr.w	r2, [r3], #4
 800854c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008550:	459c      	cmp	ip, r3
 8008552:	d8f9      	bhi.n	8008548 <__lshift+0xc0>
 8008554:	e7ea      	b.n	800852c <__lshift+0xa4>
 8008556:	bf00      	nop
 8008558:	0800afb5 	.word	0x0800afb5
 800855c:	0800afc6 	.word	0x0800afc6

08008560 <__mcmp>:
 8008560:	690a      	ldr	r2, [r1, #16]
 8008562:	4603      	mov	r3, r0
 8008564:	6900      	ldr	r0, [r0, #16]
 8008566:	1a80      	subs	r0, r0, r2
 8008568:	b530      	push	{r4, r5, lr}
 800856a:	d10e      	bne.n	800858a <__mcmp+0x2a>
 800856c:	3314      	adds	r3, #20
 800856e:	3114      	adds	r1, #20
 8008570:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008574:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008578:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800857c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008580:	4295      	cmp	r5, r2
 8008582:	d003      	beq.n	800858c <__mcmp+0x2c>
 8008584:	d205      	bcs.n	8008592 <__mcmp+0x32>
 8008586:	f04f 30ff 	mov.w	r0, #4294967295
 800858a:	bd30      	pop	{r4, r5, pc}
 800858c:	42a3      	cmp	r3, r4
 800858e:	d3f3      	bcc.n	8008578 <__mcmp+0x18>
 8008590:	e7fb      	b.n	800858a <__mcmp+0x2a>
 8008592:	2001      	movs	r0, #1
 8008594:	e7f9      	b.n	800858a <__mcmp+0x2a>
	...

08008598 <__mdiff>:
 8008598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800859c:	4689      	mov	r9, r1
 800859e:	4606      	mov	r6, r0
 80085a0:	4611      	mov	r1, r2
 80085a2:	4648      	mov	r0, r9
 80085a4:	4614      	mov	r4, r2
 80085a6:	f7ff ffdb 	bl	8008560 <__mcmp>
 80085aa:	1e05      	subs	r5, r0, #0
 80085ac:	d112      	bne.n	80085d4 <__mdiff+0x3c>
 80085ae:	4629      	mov	r1, r5
 80085b0:	4630      	mov	r0, r6
 80085b2:	f7ff fd11 	bl	8007fd8 <_Balloc>
 80085b6:	4602      	mov	r2, r0
 80085b8:	b928      	cbnz	r0, 80085c6 <__mdiff+0x2e>
 80085ba:	4b3f      	ldr	r3, [pc, #252]	@ (80086b8 <__mdiff+0x120>)
 80085bc:	f240 2137 	movw	r1, #567	@ 0x237
 80085c0:	483e      	ldr	r0, [pc, #248]	@ (80086bc <__mdiff+0x124>)
 80085c2:	f001 fc5d 	bl	8009e80 <__assert_func>
 80085c6:	2301      	movs	r3, #1
 80085c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085cc:	4610      	mov	r0, r2
 80085ce:	b003      	add	sp, #12
 80085d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d4:	bfbc      	itt	lt
 80085d6:	464b      	movlt	r3, r9
 80085d8:	46a1      	movlt	r9, r4
 80085da:	4630      	mov	r0, r6
 80085dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80085e0:	bfba      	itte	lt
 80085e2:	461c      	movlt	r4, r3
 80085e4:	2501      	movlt	r5, #1
 80085e6:	2500      	movge	r5, #0
 80085e8:	f7ff fcf6 	bl	8007fd8 <_Balloc>
 80085ec:	4602      	mov	r2, r0
 80085ee:	b918      	cbnz	r0, 80085f8 <__mdiff+0x60>
 80085f0:	4b31      	ldr	r3, [pc, #196]	@ (80086b8 <__mdiff+0x120>)
 80085f2:	f240 2145 	movw	r1, #581	@ 0x245
 80085f6:	e7e3      	b.n	80085c0 <__mdiff+0x28>
 80085f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085fc:	6926      	ldr	r6, [r4, #16]
 80085fe:	60c5      	str	r5, [r0, #12]
 8008600:	f109 0310 	add.w	r3, r9, #16
 8008604:	f109 0514 	add.w	r5, r9, #20
 8008608:	f104 0e14 	add.w	lr, r4, #20
 800860c:	f100 0b14 	add.w	fp, r0, #20
 8008610:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008614:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008618:	9301      	str	r3, [sp, #4]
 800861a:	46d9      	mov	r9, fp
 800861c:	f04f 0c00 	mov.w	ip, #0
 8008620:	9b01      	ldr	r3, [sp, #4]
 8008622:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008626:	f853 af04 	ldr.w	sl, [r3, #4]!
 800862a:	9301      	str	r3, [sp, #4]
 800862c:	fa1f f38a 	uxth.w	r3, sl
 8008630:	4619      	mov	r1, r3
 8008632:	b283      	uxth	r3, r0
 8008634:	1acb      	subs	r3, r1, r3
 8008636:	0c00      	lsrs	r0, r0, #16
 8008638:	4463      	add	r3, ip
 800863a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800863e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008642:	b29b      	uxth	r3, r3
 8008644:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008648:	4576      	cmp	r6, lr
 800864a:	f849 3b04 	str.w	r3, [r9], #4
 800864e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008652:	d8e5      	bhi.n	8008620 <__mdiff+0x88>
 8008654:	1b33      	subs	r3, r6, r4
 8008656:	3b15      	subs	r3, #21
 8008658:	f023 0303 	bic.w	r3, r3, #3
 800865c:	3415      	adds	r4, #21
 800865e:	3304      	adds	r3, #4
 8008660:	42a6      	cmp	r6, r4
 8008662:	bf38      	it	cc
 8008664:	2304      	movcc	r3, #4
 8008666:	441d      	add	r5, r3
 8008668:	445b      	add	r3, fp
 800866a:	461e      	mov	r6, r3
 800866c:	462c      	mov	r4, r5
 800866e:	4544      	cmp	r4, r8
 8008670:	d30e      	bcc.n	8008690 <__mdiff+0xf8>
 8008672:	f108 0103 	add.w	r1, r8, #3
 8008676:	1b49      	subs	r1, r1, r5
 8008678:	f021 0103 	bic.w	r1, r1, #3
 800867c:	3d03      	subs	r5, #3
 800867e:	45a8      	cmp	r8, r5
 8008680:	bf38      	it	cc
 8008682:	2100      	movcc	r1, #0
 8008684:	440b      	add	r3, r1
 8008686:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800868a:	b191      	cbz	r1, 80086b2 <__mdiff+0x11a>
 800868c:	6117      	str	r7, [r2, #16]
 800868e:	e79d      	b.n	80085cc <__mdiff+0x34>
 8008690:	f854 1b04 	ldr.w	r1, [r4], #4
 8008694:	46e6      	mov	lr, ip
 8008696:	0c08      	lsrs	r0, r1, #16
 8008698:	fa1c fc81 	uxtah	ip, ip, r1
 800869c:	4471      	add	r1, lr
 800869e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80086a2:	b289      	uxth	r1, r1
 80086a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80086a8:	f846 1b04 	str.w	r1, [r6], #4
 80086ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086b0:	e7dd      	b.n	800866e <__mdiff+0xd6>
 80086b2:	3f01      	subs	r7, #1
 80086b4:	e7e7      	b.n	8008686 <__mdiff+0xee>
 80086b6:	bf00      	nop
 80086b8:	0800afb5 	.word	0x0800afb5
 80086bc:	0800afc6 	.word	0x0800afc6

080086c0 <__ulp>:
 80086c0:	b082      	sub	sp, #8
 80086c2:	ed8d 0b00 	vstr	d0, [sp]
 80086c6:	9a01      	ldr	r2, [sp, #4]
 80086c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008708 <__ulp+0x48>)
 80086ca:	4013      	ands	r3, r2
 80086cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	dc08      	bgt.n	80086e6 <__ulp+0x26>
 80086d4:	425b      	negs	r3, r3
 80086d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80086da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80086de:	da04      	bge.n	80086ea <__ulp+0x2a>
 80086e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80086e4:	4113      	asrs	r3, r2
 80086e6:	2200      	movs	r2, #0
 80086e8:	e008      	b.n	80086fc <__ulp+0x3c>
 80086ea:	f1a2 0314 	sub.w	r3, r2, #20
 80086ee:	2b1e      	cmp	r3, #30
 80086f0:	bfda      	itte	le
 80086f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80086f6:	40da      	lsrle	r2, r3
 80086f8:	2201      	movgt	r2, #1
 80086fa:	2300      	movs	r3, #0
 80086fc:	4619      	mov	r1, r3
 80086fe:	4610      	mov	r0, r2
 8008700:	ec41 0b10 	vmov	d0, r0, r1
 8008704:	b002      	add	sp, #8
 8008706:	4770      	bx	lr
 8008708:	7ff00000 	.word	0x7ff00000

0800870c <__b2d>:
 800870c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008710:	6906      	ldr	r6, [r0, #16]
 8008712:	f100 0814 	add.w	r8, r0, #20
 8008716:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800871a:	1f37      	subs	r7, r6, #4
 800871c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008720:	4610      	mov	r0, r2
 8008722:	f7ff fd4b 	bl	80081bc <__hi0bits>
 8008726:	f1c0 0320 	rsb	r3, r0, #32
 800872a:	280a      	cmp	r0, #10
 800872c:	600b      	str	r3, [r1, #0]
 800872e:	491b      	ldr	r1, [pc, #108]	@ (800879c <__b2d+0x90>)
 8008730:	dc15      	bgt.n	800875e <__b2d+0x52>
 8008732:	f1c0 0c0b 	rsb	ip, r0, #11
 8008736:	fa22 f30c 	lsr.w	r3, r2, ip
 800873a:	45b8      	cmp	r8, r7
 800873c:	ea43 0501 	orr.w	r5, r3, r1
 8008740:	bf34      	ite	cc
 8008742:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008746:	2300      	movcs	r3, #0
 8008748:	3015      	adds	r0, #21
 800874a:	fa02 f000 	lsl.w	r0, r2, r0
 800874e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008752:	4303      	orrs	r3, r0
 8008754:	461c      	mov	r4, r3
 8008756:	ec45 4b10 	vmov	d0, r4, r5
 800875a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800875e:	45b8      	cmp	r8, r7
 8008760:	bf3a      	itte	cc
 8008762:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008766:	f1a6 0708 	subcc.w	r7, r6, #8
 800876a:	2300      	movcs	r3, #0
 800876c:	380b      	subs	r0, #11
 800876e:	d012      	beq.n	8008796 <__b2d+0x8a>
 8008770:	f1c0 0120 	rsb	r1, r0, #32
 8008774:	fa23 f401 	lsr.w	r4, r3, r1
 8008778:	4082      	lsls	r2, r0
 800877a:	4322      	orrs	r2, r4
 800877c:	4547      	cmp	r7, r8
 800877e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008782:	bf8c      	ite	hi
 8008784:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008788:	2200      	movls	r2, #0
 800878a:	4083      	lsls	r3, r0
 800878c:	40ca      	lsrs	r2, r1
 800878e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008792:	4313      	orrs	r3, r2
 8008794:	e7de      	b.n	8008754 <__b2d+0x48>
 8008796:	ea42 0501 	orr.w	r5, r2, r1
 800879a:	e7db      	b.n	8008754 <__b2d+0x48>
 800879c:	3ff00000 	.word	0x3ff00000

080087a0 <__d2b>:
 80087a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087a4:	460f      	mov	r7, r1
 80087a6:	2101      	movs	r1, #1
 80087a8:	ec59 8b10 	vmov	r8, r9, d0
 80087ac:	4616      	mov	r6, r2
 80087ae:	f7ff fc13 	bl	8007fd8 <_Balloc>
 80087b2:	4604      	mov	r4, r0
 80087b4:	b930      	cbnz	r0, 80087c4 <__d2b+0x24>
 80087b6:	4602      	mov	r2, r0
 80087b8:	4b23      	ldr	r3, [pc, #140]	@ (8008848 <__d2b+0xa8>)
 80087ba:	4824      	ldr	r0, [pc, #144]	@ (800884c <__d2b+0xac>)
 80087bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80087c0:	f001 fb5e 	bl	8009e80 <__assert_func>
 80087c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087cc:	b10d      	cbz	r5, 80087d2 <__d2b+0x32>
 80087ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	f1b8 0300 	subs.w	r3, r8, #0
 80087d8:	d023      	beq.n	8008822 <__d2b+0x82>
 80087da:	4668      	mov	r0, sp
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	f7ff fd0c 	bl	80081fa <__lo0bits>
 80087e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80087e6:	b1d0      	cbz	r0, 800881e <__d2b+0x7e>
 80087e8:	f1c0 0320 	rsb	r3, r0, #32
 80087ec:	fa02 f303 	lsl.w	r3, r2, r3
 80087f0:	430b      	orrs	r3, r1
 80087f2:	40c2      	lsrs	r2, r0
 80087f4:	6163      	str	r3, [r4, #20]
 80087f6:	9201      	str	r2, [sp, #4]
 80087f8:	9b01      	ldr	r3, [sp, #4]
 80087fa:	61a3      	str	r3, [r4, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	bf0c      	ite	eq
 8008800:	2201      	moveq	r2, #1
 8008802:	2202      	movne	r2, #2
 8008804:	6122      	str	r2, [r4, #16]
 8008806:	b1a5      	cbz	r5, 8008832 <__d2b+0x92>
 8008808:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800880c:	4405      	add	r5, r0
 800880e:	603d      	str	r5, [r7, #0]
 8008810:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008814:	6030      	str	r0, [r6, #0]
 8008816:	4620      	mov	r0, r4
 8008818:	b003      	add	sp, #12
 800881a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800881e:	6161      	str	r1, [r4, #20]
 8008820:	e7ea      	b.n	80087f8 <__d2b+0x58>
 8008822:	a801      	add	r0, sp, #4
 8008824:	f7ff fce9 	bl	80081fa <__lo0bits>
 8008828:	9b01      	ldr	r3, [sp, #4]
 800882a:	6163      	str	r3, [r4, #20]
 800882c:	3020      	adds	r0, #32
 800882e:	2201      	movs	r2, #1
 8008830:	e7e8      	b.n	8008804 <__d2b+0x64>
 8008832:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008836:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800883a:	6038      	str	r0, [r7, #0]
 800883c:	6918      	ldr	r0, [r3, #16]
 800883e:	f7ff fcbd 	bl	80081bc <__hi0bits>
 8008842:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008846:	e7e5      	b.n	8008814 <__d2b+0x74>
 8008848:	0800afb5 	.word	0x0800afb5
 800884c:	0800afc6 	.word	0x0800afc6

08008850 <__ratio>:
 8008850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	b085      	sub	sp, #20
 8008856:	e9cd 1000 	strd	r1, r0, [sp]
 800885a:	a902      	add	r1, sp, #8
 800885c:	f7ff ff56 	bl	800870c <__b2d>
 8008860:	9800      	ldr	r0, [sp, #0]
 8008862:	a903      	add	r1, sp, #12
 8008864:	ec55 4b10 	vmov	r4, r5, d0
 8008868:	f7ff ff50 	bl	800870c <__b2d>
 800886c:	9b01      	ldr	r3, [sp, #4]
 800886e:	6919      	ldr	r1, [r3, #16]
 8008870:	9b00      	ldr	r3, [sp, #0]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	1ac9      	subs	r1, r1, r3
 8008876:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800887a:	1a9b      	subs	r3, r3, r2
 800887c:	ec5b ab10 	vmov	sl, fp, d0
 8008880:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008884:	2b00      	cmp	r3, #0
 8008886:	bfce      	itee	gt
 8008888:	462a      	movgt	r2, r5
 800888a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800888e:	465a      	movle	r2, fp
 8008890:	462f      	mov	r7, r5
 8008892:	46d9      	mov	r9, fp
 8008894:	bfcc      	ite	gt
 8008896:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800889a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800889e:	464b      	mov	r3, r9
 80088a0:	4652      	mov	r2, sl
 80088a2:	4620      	mov	r0, r4
 80088a4:	4639      	mov	r1, r7
 80088a6:	f7f7 ffd1 	bl	800084c <__aeabi_ddiv>
 80088aa:	ec41 0b10 	vmov	d0, r0, r1
 80088ae:	b005      	add	sp, #20
 80088b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088b4 <__copybits>:
 80088b4:	3901      	subs	r1, #1
 80088b6:	b570      	push	{r4, r5, r6, lr}
 80088b8:	1149      	asrs	r1, r1, #5
 80088ba:	6914      	ldr	r4, [r2, #16]
 80088bc:	3101      	adds	r1, #1
 80088be:	f102 0314 	add.w	r3, r2, #20
 80088c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80088c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80088ca:	1f05      	subs	r5, r0, #4
 80088cc:	42a3      	cmp	r3, r4
 80088ce:	d30c      	bcc.n	80088ea <__copybits+0x36>
 80088d0:	1aa3      	subs	r3, r4, r2
 80088d2:	3b11      	subs	r3, #17
 80088d4:	f023 0303 	bic.w	r3, r3, #3
 80088d8:	3211      	adds	r2, #17
 80088da:	42a2      	cmp	r2, r4
 80088dc:	bf88      	it	hi
 80088de:	2300      	movhi	r3, #0
 80088e0:	4418      	add	r0, r3
 80088e2:	2300      	movs	r3, #0
 80088e4:	4288      	cmp	r0, r1
 80088e6:	d305      	bcc.n	80088f4 <__copybits+0x40>
 80088e8:	bd70      	pop	{r4, r5, r6, pc}
 80088ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80088ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80088f2:	e7eb      	b.n	80088cc <__copybits+0x18>
 80088f4:	f840 3b04 	str.w	r3, [r0], #4
 80088f8:	e7f4      	b.n	80088e4 <__copybits+0x30>

080088fa <__any_on>:
 80088fa:	f100 0214 	add.w	r2, r0, #20
 80088fe:	6900      	ldr	r0, [r0, #16]
 8008900:	114b      	asrs	r3, r1, #5
 8008902:	4298      	cmp	r0, r3
 8008904:	b510      	push	{r4, lr}
 8008906:	db11      	blt.n	800892c <__any_on+0x32>
 8008908:	dd0a      	ble.n	8008920 <__any_on+0x26>
 800890a:	f011 011f 	ands.w	r1, r1, #31
 800890e:	d007      	beq.n	8008920 <__any_on+0x26>
 8008910:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008914:	fa24 f001 	lsr.w	r0, r4, r1
 8008918:	fa00 f101 	lsl.w	r1, r0, r1
 800891c:	428c      	cmp	r4, r1
 800891e:	d10b      	bne.n	8008938 <__any_on+0x3e>
 8008920:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008924:	4293      	cmp	r3, r2
 8008926:	d803      	bhi.n	8008930 <__any_on+0x36>
 8008928:	2000      	movs	r0, #0
 800892a:	bd10      	pop	{r4, pc}
 800892c:	4603      	mov	r3, r0
 800892e:	e7f7      	b.n	8008920 <__any_on+0x26>
 8008930:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008934:	2900      	cmp	r1, #0
 8008936:	d0f5      	beq.n	8008924 <__any_on+0x2a>
 8008938:	2001      	movs	r0, #1
 800893a:	e7f6      	b.n	800892a <__any_on+0x30>

0800893c <sulp>:
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	4604      	mov	r4, r0
 8008940:	460d      	mov	r5, r1
 8008942:	ec45 4b10 	vmov	d0, r4, r5
 8008946:	4616      	mov	r6, r2
 8008948:	f7ff feba 	bl	80086c0 <__ulp>
 800894c:	ec51 0b10 	vmov	r0, r1, d0
 8008950:	b17e      	cbz	r6, 8008972 <sulp+0x36>
 8008952:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008956:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800895a:	2b00      	cmp	r3, #0
 800895c:	dd09      	ble.n	8008972 <sulp+0x36>
 800895e:	051b      	lsls	r3, r3, #20
 8008960:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008964:	2400      	movs	r4, #0
 8008966:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800896a:	4622      	mov	r2, r4
 800896c:	462b      	mov	r3, r5
 800896e:	f7f7 fe43 	bl	80005f8 <__aeabi_dmul>
 8008972:	ec41 0b10 	vmov	d0, r0, r1
 8008976:	bd70      	pop	{r4, r5, r6, pc}

08008978 <_strtod_l>:
 8008978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	b09f      	sub	sp, #124	@ 0x7c
 800897e:	460c      	mov	r4, r1
 8008980:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008982:	2200      	movs	r2, #0
 8008984:	921a      	str	r2, [sp, #104]	@ 0x68
 8008986:	9005      	str	r0, [sp, #20]
 8008988:	f04f 0a00 	mov.w	sl, #0
 800898c:	f04f 0b00 	mov.w	fp, #0
 8008990:	460a      	mov	r2, r1
 8008992:	9219      	str	r2, [sp, #100]	@ 0x64
 8008994:	7811      	ldrb	r1, [r2, #0]
 8008996:	292b      	cmp	r1, #43	@ 0x2b
 8008998:	d04a      	beq.n	8008a30 <_strtod_l+0xb8>
 800899a:	d838      	bhi.n	8008a0e <_strtod_l+0x96>
 800899c:	290d      	cmp	r1, #13
 800899e:	d832      	bhi.n	8008a06 <_strtod_l+0x8e>
 80089a0:	2908      	cmp	r1, #8
 80089a2:	d832      	bhi.n	8008a0a <_strtod_l+0x92>
 80089a4:	2900      	cmp	r1, #0
 80089a6:	d03b      	beq.n	8008a20 <_strtod_l+0xa8>
 80089a8:	2200      	movs	r2, #0
 80089aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80089ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80089ae:	782a      	ldrb	r2, [r5, #0]
 80089b0:	2a30      	cmp	r2, #48	@ 0x30
 80089b2:	f040 80b3 	bne.w	8008b1c <_strtod_l+0x1a4>
 80089b6:	786a      	ldrb	r2, [r5, #1]
 80089b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80089bc:	2a58      	cmp	r2, #88	@ 0x58
 80089be:	d16e      	bne.n	8008a9e <_strtod_l+0x126>
 80089c0:	9302      	str	r3, [sp, #8]
 80089c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	4a8e      	ldr	r2, [pc, #568]	@ (8008c04 <_strtod_l+0x28c>)
 80089cc:	9805      	ldr	r0, [sp, #20]
 80089ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80089d0:	a919      	add	r1, sp, #100	@ 0x64
 80089d2:	f001 faef 	bl	8009fb4 <__gethex>
 80089d6:	f010 060f 	ands.w	r6, r0, #15
 80089da:	4604      	mov	r4, r0
 80089dc:	d005      	beq.n	80089ea <_strtod_l+0x72>
 80089de:	2e06      	cmp	r6, #6
 80089e0:	d128      	bne.n	8008a34 <_strtod_l+0xbc>
 80089e2:	3501      	adds	r5, #1
 80089e4:	2300      	movs	r3, #0
 80089e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80089e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f040 858e 	bne.w	800950e <_strtod_l+0xb96>
 80089f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089f4:	b1cb      	cbz	r3, 8008a2a <_strtod_l+0xb2>
 80089f6:	4652      	mov	r2, sl
 80089f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80089fc:	ec43 2b10 	vmov	d0, r2, r3
 8008a00:	b01f      	add	sp, #124	@ 0x7c
 8008a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a06:	2920      	cmp	r1, #32
 8008a08:	d1ce      	bne.n	80089a8 <_strtod_l+0x30>
 8008a0a:	3201      	adds	r2, #1
 8008a0c:	e7c1      	b.n	8008992 <_strtod_l+0x1a>
 8008a0e:	292d      	cmp	r1, #45	@ 0x2d
 8008a10:	d1ca      	bne.n	80089a8 <_strtod_l+0x30>
 8008a12:	2101      	movs	r1, #1
 8008a14:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008a16:	1c51      	adds	r1, r2, #1
 8008a18:	9119      	str	r1, [sp, #100]	@ 0x64
 8008a1a:	7852      	ldrb	r2, [r2, #1]
 8008a1c:	2a00      	cmp	r2, #0
 8008a1e:	d1c5      	bne.n	80089ac <_strtod_l+0x34>
 8008a20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a22:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f040 8570 	bne.w	800950a <_strtod_l+0xb92>
 8008a2a:	4652      	mov	r2, sl
 8008a2c:	465b      	mov	r3, fp
 8008a2e:	e7e5      	b.n	80089fc <_strtod_l+0x84>
 8008a30:	2100      	movs	r1, #0
 8008a32:	e7ef      	b.n	8008a14 <_strtod_l+0x9c>
 8008a34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008a36:	b13a      	cbz	r2, 8008a48 <_strtod_l+0xd0>
 8008a38:	2135      	movs	r1, #53	@ 0x35
 8008a3a:	a81c      	add	r0, sp, #112	@ 0x70
 8008a3c:	f7ff ff3a 	bl	80088b4 <__copybits>
 8008a40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a42:	9805      	ldr	r0, [sp, #20]
 8008a44:	f7ff fb08 	bl	8008058 <_Bfree>
 8008a48:	3e01      	subs	r6, #1
 8008a4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008a4c:	2e04      	cmp	r6, #4
 8008a4e:	d806      	bhi.n	8008a5e <_strtod_l+0xe6>
 8008a50:	e8df f006 	tbb	[pc, r6]
 8008a54:	201d0314 	.word	0x201d0314
 8008a58:	14          	.byte	0x14
 8008a59:	00          	.byte	0x00
 8008a5a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008a5e:	05e1      	lsls	r1, r4, #23
 8008a60:	bf48      	it	mi
 8008a62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008a66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a6a:	0d1b      	lsrs	r3, r3, #20
 8008a6c:	051b      	lsls	r3, r3, #20
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1bb      	bne.n	80089ea <_strtod_l+0x72>
 8008a72:	f7fe fb2f 	bl	80070d4 <__errno>
 8008a76:	2322      	movs	r3, #34	@ 0x22
 8008a78:	6003      	str	r3, [r0, #0]
 8008a7a:	e7b6      	b.n	80089ea <_strtod_l+0x72>
 8008a7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008a80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008a84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008a88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a8c:	e7e7      	b.n	8008a5e <_strtod_l+0xe6>
 8008a8e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008c0c <_strtod_l+0x294>
 8008a92:	e7e4      	b.n	8008a5e <_strtod_l+0xe6>
 8008a94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008a98:	f04f 3aff 	mov.w	sl, #4294967295
 8008a9c:	e7df      	b.n	8008a5e <_strtod_l+0xe6>
 8008a9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008aa0:	1c5a      	adds	r2, r3, #1
 8008aa2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008aa4:	785b      	ldrb	r3, [r3, #1]
 8008aa6:	2b30      	cmp	r3, #48	@ 0x30
 8008aa8:	d0f9      	beq.n	8008a9e <_strtod_l+0x126>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d09d      	beq.n	80089ea <_strtod_l+0x72>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ab2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ab4:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	9308      	str	r3, [sp, #32]
 8008aba:	930a      	str	r3, [sp, #40]	@ 0x28
 8008abc:	461f      	mov	r7, r3
 8008abe:	220a      	movs	r2, #10
 8008ac0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008ac2:	7805      	ldrb	r5, [r0, #0]
 8008ac4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008ac8:	b2d9      	uxtb	r1, r3
 8008aca:	2909      	cmp	r1, #9
 8008acc:	d928      	bls.n	8008b20 <_strtod_l+0x1a8>
 8008ace:	494e      	ldr	r1, [pc, #312]	@ (8008c08 <_strtod_l+0x290>)
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f001 f979 	bl	8009dc8 <strncmp>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d032      	beq.n	8008b40 <_strtod_l+0x1c8>
 8008ada:	2000      	movs	r0, #0
 8008adc:	462a      	mov	r2, r5
 8008ade:	4681      	mov	r9, r0
 8008ae0:	463d      	mov	r5, r7
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2a65      	cmp	r2, #101	@ 0x65
 8008ae6:	d001      	beq.n	8008aec <_strtod_l+0x174>
 8008ae8:	2a45      	cmp	r2, #69	@ 0x45
 8008aea:	d114      	bne.n	8008b16 <_strtod_l+0x19e>
 8008aec:	b91d      	cbnz	r5, 8008af6 <_strtod_l+0x17e>
 8008aee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008af0:	4302      	orrs	r2, r0
 8008af2:	d095      	beq.n	8008a20 <_strtod_l+0xa8>
 8008af4:	2500      	movs	r5, #0
 8008af6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008af8:	1c62      	adds	r2, r4, #1
 8008afa:	9219      	str	r2, [sp, #100]	@ 0x64
 8008afc:	7862      	ldrb	r2, [r4, #1]
 8008afe:	2a2b      	cmp	r2, #43	@ 0x2b
 8008b00:	d077      	beq.n	8008bf2 <_strtod_l+0x27a>
 8008b02:	2a2d      	cmp	r2, #45	@ 0x2d
 8008b04:	d07b      	beq.n	8008bfe <_strtod_l+0x286>
 8008b06:	f04f 0c00 	mov.w	ip, #0
 8008b0a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008b0e:	2909      	cmp	r1, #9
 8008b10:	f240 8082 	bls.w	8008c18 <_strtod_l+0x2a0>
 8008b14:	9419      	str	r4, [sp, #100]	@ 0x64
 8008b16:	f04f 0800 	mov.w	r8, #0
 8008b1a:	e0a2      	b.n	8008c62 <_strtod_l+0x2ea>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e7c7      	b.n	8008ab0 <_strtod_l+0x138>
 8008b20:	2f08      	cmp	r7, #8
 8008b22:	bfd5      	itete	le
 8008b24:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008b26:	9908      	ldrgt	r1, [sp, #32]
 8008b28:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b2c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008b30:	f100 0001 	add.w	r0, r0, #1
 8008b34:	bfd4      	ite	le
 8008b36:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008b38:	9308      	strgt	r3, [sp, #32]
 8008b3a:	3701      	adds	r7, #1
 8008b3c:	9019      	str	r0, [sp, #100]	@ 0x64
 8008b3e:	e7bf      	b.n	8008ac0 <_strtod_l+0x148>
 8008b40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b46:	785a      	ldrb	r2, [r3, #1]
 8008b48:	b37f      	cbz	r7, 8008baa <_strtod_l+0x232>
 8008b4a:	4681      	mov	r9, r0
 8008b4c:	463d      	mov	r5, r7
 8008b4e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008b52:	2b09      	cmp	r3, #9
 8008b54:	d912      	bls.n	8008b7c <_strtod_l+0x204>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e7c4      	b.n	8008ae4 <_strtod_l+0x16c>
 8008b5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b5c:	1c5a      	adds	r2, r3, #1
 8008b5e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b60:	785a      	ldrb	r2, [r3, #1]
 8008b62:	3001      	adds	r0, #1
 8008b64:	2a30      	cmp	r2, #48	@ 0x30
 8008b66:	d0f8      	beq.n	8008b5a <_strtod_l+0x1e2>
 8008b68:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008b6c:	2b08      	cmp	r3, #8
 8008b6e:	f200 84d3 	bhi.w	8009518 <_strtod_l+0xba0>
 8008b72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b74:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b76:	4681      	mov	r9, r0
 8008b78:	2000      	movs	r0, #0
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	3a30      	subs	r2, #48	@ 0x30
 8008b7e:	f100 0301 	add.w	r3, r0, #1
 8008b82:	d02a      	beq.n	8008bda <_strtod_l+0x262>
 8008b84:	4499      	add	r9, r3
 8008b86:	eb00 0c05 	add.w	ip, r0, r5
 8008b8a:	462b      	mov	r3, r5
 8008b8c:	210a      	movs	r1, #10
 8008b8e:	4563      	cmp	r3, ip
 8008b90:	d10d      	bne.n	8008bae <_strtod_l+0x236>
 8008b92:	1c69      	adds	r1, r5, #1
 8008b94:	4401      	add	r1, r0
 8008b96:	4428      	add	r0, r5
 8008b98:	2808      	cmp	r0, #8
 8008b9a:	dc16      	bgt.n	8008bca <_strtod_l+0x252>
 8008b9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b9e:	230a      	movs	r3, #10
 8008ba0:	fb03 2300 	mla	r3, r3, r0, r2
 8008ba4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	e018      	b.n	8008bdc <_strtod_l+0x264>
 8008baa:	4638      	mov	r0, r7
 8008bac:	e7da      	b.n	8008b64 <_strtod_l+0x1ec>
 8008bae:	2b08      	cmp	r3, #8
 8008bb0:	f103 0301 	add.w	r3, r3, #1
 8008bb4:	dc03      	bgt.n	8008bbe <_strtod_l+0x246>
 8008bb6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008bb8:	434e      	muls	r6, r1
 8008bba:	960a      	str	r6, [sp, #40]	@ 0x28
 8008bbc:	e7e7      	b.n	8008b8e <_strtod_l+0x216>
 8008bbe:	2b10      	cmp	r3, #16
 8008bc0:	bfde      	ittt	le
 8008bc2:	9e08      	ldrle	r6, [sp, #32]
 8008bc4:	434e      	mulle	r6, r1
 8008bc6:	9608      	strle	r6, [sp, #32]
 8008bc8:	e7e1      	b.n	8008b8e <_strtod_l+0x216>
 8008bca:	280f      	cmp	r0, #15
 8008bcc:	dceb      	bgt.n	8008ba6 <_strtod_l+0x22e>
 8008bce:	9808      	ldr	r0, [sp, #32]
 8008bd0:	230a      	movs	r3, #10
 8008bd2:	fb03 2300 	mla	r3, r3, r0, r2
 8008bd6:	9308      	str	r3, [sp, #32]
 8008bd8:	e7e5      	b.n	8008ba6 <_strtod_l+0x22e>
 8008bda:	4629      	mov	r1, r5
 8008bdc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bde:	1c50      	adds	r0, r2, #1
 8008be0:	9019      	str	r0, [sp, #100]	@ 0x64
 8008be2:	7852      	ldrb	r2, [r2, #1]
 8008be4:	4618      	mov	r0, r3
 8008be6:	460d      	mov	r5, r1
 8008be8:	e7b1      	b.n	8008b4e <_strtod_l+0x1d6>
 8008bea:	f04f 0900 	mov.w	r9, #0
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e77d      	b.n	8008aee <_strtod_l+0x176>
 8008bf2:	f04f 0c00 	mov.w	ip, #0
 8008bf6:	1ca2      	adds	r2, r4, #2
 8008bf8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bfa:	78a2      	ldrb	r2, [r4, #2]
 8008bfc:	e785      	b.n	8008b0a <_strtod_l+0x192>
 8008bfe:	f04f 0c01 	mov.w	ip, #1
 8008c02:	e7f8      	b.n	8008bf6 <_strtod_l+0x27e>
 8008c04:	0800b138 	.word	0x0800b138
 8008c08:	0800b120 	.word	0x0800b120
 8008c0c:	7ff00000 	.word	0x7ff00000
 8008c10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c12:	1c51      	adds	r1, r2, #1
 8008c14:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c16:	7852      	ldrb	r2, [r2, #1]
 8008c18:	2a30      	cmp	r2, #48	@ 0x30
 8008c1a:	d0f9      	beq.n	8008c10 <_strtod_l+0x298>
 8008c1c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008c20:	2908      	cmp	r1, #8
 8008c22:	f63f af78 	bhi.w	8008b16 <_strtod_l+0x19e>
 8008c26:	3a30      	subs	r2, #48	@ 0x30
 8008c28:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008c2e:	f04f 080a 	mov.w	r8, #10
 8008c32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c34:	1c56      	adds	r6, r2, #1
 8008c36:	9619      	str	r6, [sp, #100]	@ 0x64
 8008c38:	7852      	ldrb	r2, [r2, #1]
 8008c3a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008c3e:	f1be 0f09 	cmp.w	lr, #9
 8008c42:	d939      	bls.n	8008cb8 <_strtod_l+0x340>
 8008c44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008c46:	1a76      	subs	r6, r6, r1
 8008c48:	2e08      	cmp	r6, #8
 8008c4a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008c4e:	dc03      	bgt.n	8008c58 <_strtod_l+0x2e0>
 8008c50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008c52:	4588      	cmp	r8, r1
 8008c54:	bfa8      	it	ge
 8008c56:	4688      	movge	r8, r1
 8008c58:	f1bc 0f00 	cmp.w	ip, #0
 8008c5c:	d001      	beq.n	8008c62 <_strtod_l+0x2ea>
 8008c5e:	f1c8 0800 	rsb	r8, r8, #0
 8008c62:	2d00      	cmp	r5, #0
 8008c64:	d14e      	bne.n	8008d04 <_strtod_l+0x38c>
 8008c66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c68:	4308      	orrs	r0, r1
 8008c6a:	f47f aebe 	bne.w	80089ea <_strtod_l+0x72>
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f47f aed6 	bne.w	8008a20 <_strtod_l+0xa8>
 8008c74:	2a69      	cmp	r2, #105	@ 0x69
 8008c76:	d028      	beq.n	8008cca <_strtod_l+0x352>
 8008c78:	dc25      	bgt.n	8008cc6 <_strtod_l+0x34e>
 8008c7a:	2a49      	cmp	r2, #73	@ 0x49
 8008c7c:	d025      	beq.n	8008cca <_strtod_l+0x352>
 8008c7e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008c80:	f47f aece 	bne.w	8008a20 <_strtod_l+0xa8>
 8008c84:	499b      	ldr	r1, [pc, #620]	@ (8008ef4 <_strtod_l+0x57c>)
 8008c86:	a819      	add	r0, sp, #100	@ 0x64
 8008c88:	f001 fbb6 	bl	800a3f8 <__match>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	f43f aec7 	beq.w	8008a20 <_strtod_l+0xa8>
 8008c92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	2b28      	cmp	r3, #40	@ 0x28
 8008c98:	d12e      	bne.n	8008cf8 <_strtod_l+0x380>
 8008c9a:	4997      	ldr	r1, [pc, #604]	@ (8008ef8 <_strtod_l+0x580>)
 8008c9c:	aa1c      	add	r2, sp, #112	@ 0x70
 8008c9e:	a819      	add	r0, sp, #100	@ 0x64
 8008ca0:	f001 fbbe 	bl	800a420 <__hexnan>
 8008ca4:	2805      	cmp	r0, #5
 8008ca6:	d127      	bne.n	8008cf8 <_strtod_l+0x380>
 8008ca8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008caa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008cae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008cb2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008cb6:	e698      	b.n	80089ea <_strtod_l+0x72>
 8008cb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008cba:	fb08 2101 	mla	r1, r8, r1, r2
 8008cbe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008cc2:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cc4:	e7b5      	b.n	8008c32 <_strtod_l+0x2ba>
 8008cc6:	2a6e      	cmp	r2, #110	@ 0x6e
 8008cc8:	e7da      	b.n	8008c80 <_strtod_l+0x308>
 8008cca:	498c      	ldr	r1, [pc, #560]	@ (8008efc <_strtod_l+0x584>)
 8008ccc:	a819      	add	r0, sp, #100	@ 0x64
 8008cce:	f001 fb93 	bl	800a3f8 <__match>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	f43f aea4 	beq.w	8008a20 <_strtod_l+0xa8>
 8008cd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cda:	4989      	ldr	r1, [pc, #548]	@ (8008f00 <_strtod_l+0x588>)
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	a819      	add	r0, sp, #100	@ 0x64
 8008ce0:	9319      	str	r3, [sp, #100]	@ 0x64
 8008ce2:	f001 fb89 	bl	800a3f8 <__match>
 8008ce6:	b910      	cbnz	r0, 8008cee <_strtod_l+0x376>
 8008ce8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cea:	3301      	adds	r3, #1
 8008cec:	9319      	str	r3, [sp, #100]	@ 0x64
 8008cee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008f10 <_strtod_l+0x598>
 8008cf2:	f04f 0a00 	mov.w	sl, #0
 8008cf6:	e678      	b.n	80089ea <_strtod_l+0x72>
 8008cf8:	4882      	ldr	r0, [pc, #520]	@ (8008f04 <_strtod_l+0x58c>)
 8008cfa:	f001 f8b9 	bl	8009e70 <nan>
 8008cfe:	ec5b ab10 	vmov	sl, fp, d0
 8008d02:	e672      	b.n	80089ea <_strtod_l+0x72>
 8008d04:	eba8 0309 	sub.w	r3, r8, r9
 8008d08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008d0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d0c:	2f00      	cmp	r7, #0
 8008d0e:	bf08      	it	eq
 8008d10:	462f      	moveq	r7, r5
 8008d12:	2d10      	cmp	r5, #16
 8008d14:	462c      	mov	r4, r5
 8008d16:	bfa8      	it	ge
 8008d18:	2410      	movge	r4, #16
 8008d1a:	f7f7 fbf3 	bl	8000504 <__aeabi_ui2d>
 8008d1e:	2d09      	cmp	r5, #9
 8008d20:	4682      	mov	sl, r0
 8008d22:	468b      	mov	fp, r1
 8008d24:	dc13      	bgt.n	8008d4e <_strtod_l+0x3d6>
 8008d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f43f ae5e 	beq.w	80089ea <_strtod_l+0x72>
 8008d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d30:	dd78      	ble.n	8008e24 <_strtod_l+0x4ac>
 8008d32:	2b16      	cmp	r3, #22
 8008d34:	dc5f      	bgt.n	8008df6 <_strtod_l+0x47e>
 8008d36:	4974      	ldr	r1, [pc, #464]	@ (8008f08 <_strtod_l+0x590>)
 8008d38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d40:	4652      	mov	r2, sl
 8008d42:	465b      	mov	r3, fp
 8008d44:	f7f7 fc58 	bl	80005f8 <__aeabi_dmul>
 8008d48:	4682      	mov	sl, r0
 8008d4a:	468b      	mov	fp, r1
 8008d4c:	e64d      	b.n	80089ea <_strtod_l+0x72>
 8008d4e:	4b6e      	ldr	r3, [pc, #440]	@ (8008f08 <_strtod_l+0x590>)
 8008d50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008d58:	f7f7 fc4e 	bl	80005f8 <__aeabi_dmul>
 8008d5c:	4682      	mov	sl, r0
 8008d5e:	9808      	ldr	r0, [sp, #32]
 8008d60:	468b      	mov	fp, r1
 8008d62:	f7f7 fbcf 	bl	8000504 <__aeabi_ui2d>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4650      	mov	r0, sl
 8008d6c:	4659      	mov	r1, fp
 8008d6e:	f7f7 fa8d 	bl	800028c <__adddf3>
 8008d72:	2d0f      	cmp	r5, #15
 8008d74:	4682      	mov	sl, r0
 8008d76:	468b      	mov	fp, r1
 8008d78:	ddd5      	ble.n	8008d26 <_strtod_l+0x3ae>
 8008d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d7c:	1b2c      	subs	r4, r5, r4
 8008d7e:	441c      	add	r4, r3
 8008d80:	2c00      	cmp	r4, #0
 8008d82:	f340 8096 	ble.w	8008eb2 <_strtod_l+0x53a>
 8008d86:	f014 030f 	ands.w	r3, r4, #15
 8008d8a:	d00a      	beq.n	8008da2 <_strtod_l+0x42a>
 8008d8c:	495e      	ldr	r1, [pc, #376]	@ (8008f08 <_strtod_l+0x590>)
 8008d8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d92:	4652      	mov	r2, sl
 8008d94:	465b      	mov	r3, fp
 8008d96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d9a:	f7f7 fc2d 	bl	80005f8 <__aeabi_dmul>
 8008d9e:	4682      	mov	sl, r0
 8008da0:	468b      	mov	fp, r1
 8008da2:	f034 040f 	bics.w	r4, r4, #15
 8008da6:	d073      	beq.n	8008e90 <_strtod_l+0x518>
 8008da8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008dac:	dd48      	ble.n	8008e40 <_strtod_l+0x4c8>
 8008dae:	2400      	movs	r4, #0
 8008db0:	46a0      	mov	r8, r4
 8008db2:	940a      	str	r4, [sp, #40]	@ 0x28
 8008db4:	46a1      	mov	r9, r4
 8008db6:	9a05      	ldr	r2, [sp, #20]
 8008db8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008f10 <_strtod_l+0x598>
 8008dbc:	2322      	movs	r3, #34	@ 0x22
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	f04f 0a00 	mov.w	sl, #0
 8008dc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f43f ae0f 	beq.w	80089ea <_strtod_l+0x72>
 8008dcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008dce:	9805      	ldr	r0, [sp, #20]
 8008dd0:	f7ff f942 	bl	8008058 <_Bfree>
 8008dd4:	9805      	ldr	r0, [sp, #20]
 8008dd6:	4649      	mov	r1, r9
 8008dd8:	f7ff f93e 	bl	8008058 <_Bfree>
 8008ddc:	9805      	ldr	r0, [sp, #20]
 8008dde:	4641      	mov	r1, r8
 8008de0:	f7ff f93a 	bl	8008058 <_Bfree>
 8008de4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008de6:	9805      	ldr	r0, [sp, #20]
 8008de8:	f7ff f936 	bl	8008058 <_Bfree>
 8008dec:	9805      	ldr	r0, [sp, #20]
 8008dee:	4621      	mov	r1, r4
 8008df0:	f7ff f932 	bl	8008058 <_Bfree>
 8008df4:	e5f9      	b.n	80089ea <_strtod_l+0x72>
 8008df6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008df8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	dbbc      	blt.n	8008d7a <_strtod_l+0x402>
 8008e00:	4c41      	ldr	r4, [pc, #260]	@ (8008f08 <_strtod_l+0x590>)
 8008e02:	f1c5 050f 	rsb	r5, r5, #15
 8008e06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e0a:	4652      	mov	r2, sl
 8008e0c:	465b      	mov	r3, fp
 8008e0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e12:	f7f7 fbf1 	bl	80005f8 <__aeabi_dmul>
 8008e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e18:	1b5d      	subs	r5, r3, r5
 8008e1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e22:	e78f      	b.n	8008d44 <_strtod_l+0x3cc>
 8008e24:	3316      	adds	r3, #22
 8008e26:	dba8      	blt.n	8008d7a <_strtod_l+0x402>
 8008e28:	4b37      	ldr	r3, [pc, #220]	@ (8008f08 <_strtod_l+0x590>)
 8008e2a:	eba9 0808 	sub.w	r8, r9, r8
 8008e2e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008e32:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008e36:	4650      	mov	r0, sl
 8008e38:	4659      	mov	r1, fp
 8008e3a:	f7f7 fd07 	bl	800084c <__aeabi_ddiv>
 8008e3e:	e783      	b.n	8008d48 <_strtod_l+0x3d0>
 8008e40:	4b32      	ldr	r3, [pc, #200]	@ (8008f0c <_strtod_l+0x594>)
 8008e42:	9308      	str	r3, [sp, #32]
 8008e44:	2300      	movs	r3, #0
 8008e46:	1124      	asrs	r4, r4, #4
 8008e48:	4650      	mov	r0, sl
 8008e4a:	4659      	mov	r1, fp
 8008e4c:	461e      	mov	r6, r3
 8008e4e:	2c01      	cmp	r4, #1
 8008e50:	dc21      	bgt.n	8008e96 <_strtod_l+0x51e>
 8008e52:	b10b      	cbz	r3, 8008e58 <_strtod_l+0x4e0>
 8008e54:	4682      	mov	sl, r0
 8008e56:	468b      	mov	fp, r1
 8008e58:	492c      	ldr	r1, [pc, #176]	@ (8008f0c <_strtod_l+0x594>)
 8008e5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008e5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008e62:	4652      	mov	r2, sl
 8008e64:	465b      	mov	r3, fp
 8008e66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e6a:	f7f7 fbc5 	bl	80005f8 <__aeabi_dmul>
 8008e6e:	4b28      	ldr	r3, [pc, #160]	@ (8008f10 <_strtod_l+0x598>)
 8008e70:	460a      	mov	r2, r1
 8008e72:	400b      	ands	r3, r1
 8008e74:	4927      	ldr	r1, [pc, #156]	@ (8008f14 <_strtod_l+0x59c>)
 8008e76:	428b      	cmp	r3, r1
 8008e78:	4682      	mov	sl, r0
 8008e7a:	d898      	bhi.n	8008dae <_strtod_l+0x436>
 8008e7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008e80:	428b      	cmp	r3, r1
 8008e82:	bf86      	itte	hi
 8008e84:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008f18 <_strtod_l+0x5a0>
 8008e88:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008e90:	2300      	movs	r3, #0
 8008e92:	9308      	str	r3, [sp, #32]
 8008e94:	e07a      	b.n	8008f8c <_strtod_l+0x614>
 8008e96:	07e2      	lsls	r2, r4, #31
 8008e98:	d505      	bpl.n	8008ea6 <_strtod_l+0x52e>
 8008e9a:	9b08      	ldr	r3, [sp, #32]
 8008e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea0:	f7f7 fbaa 	bl	80005f8 <__aeabi_dmul>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	9a08      	ldr	r2, [sp, #32]
 8008ea8:	3208      	adds	r2, #8
 8008eaa:	3601      	adds	r6, #1
 8008eac:	1064      	asrs	r4, r4, #1
 8008eae:	9208      	str	r2, [sp, #32]
 8008eb0:	e7cd      	b.n	8008e4e <_strtod_l+0x4d6>
 8008eb2:	d0ed      	beq.n	8008e90 <_strtod_l+0x518>
 8008eb4:	4264      	negs	r4, r4
 8008eb6:	f014 020f 	ands.w	r2, r4, #15
 8008eba:	d00a      	beq.n	8008ed2 <_strtod_l+0x55a>
 8008ebc:	4b12      	ldr	r3, [pc, #72]	@ (8008f08 <_strtod_l+0x590>)
 8008ebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ec2:	4650      	mov	r0, sl
 8008ec4:	4659      	mov	r1, fp
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	f7f7 fcbf 	bl	800084c <__aeabi_ddiv>
 8008ece:	4682      	mov	sl, r0
 8008ed0:	468b      	mov	fp, r1
 8008ed2:	1124      	asrs	r4, r4, #4
 8008ed4:	d0dc      	beq.n	8008e90 <_strtod_l+0x518>
 8008ed6:	2c1f      	cmp	r4, #31
 8008ed8:	dd20      	ble.n	8008f1c <_strtod_l+0x5a4>
 8008eda:	2400      	movs	r4, #0
 8008edc:	46a0      	mov	r8, r4
 8008ede:	940a      	str	r4, [sp, #40]	@ 0x28
 8008ee0:	46a1      	mov	r9, r4
 8008ee2:	9a05      	ldr	r2, [sp, #20]
 8008ee4:	2322      	movs	r3, #34	@ 0x22
 8008ee6:	f04f 0a00 	mov.w	sl, #0
 8008eea:	f04f 0b00 	mov.w	fp, #0
 8008eee:	6013      	str	r3, [r2, #0]
 8008ef0:	e768      	b.n	8008dc4 <_strtod_l+0x44c>
 8008ef2:	bf00      	nop
 8008ef4:	0800af0d 	.word	0x0800af0d
 8008ef8:	0800b124 	.word	0x0800b124
 8008efc:	0800af05 	.word	0x0800af05
 8008f00:	0800af3c 	.word	0x0800af3c
 8008f04:	0800b2cd 	.word	0x0800b2cd
 8008f08:	0800b058 	.word	0x0800b058
 8008f0c:	0800b030 	.word	0x0800b030
 8008f10:	7ff00000 	.word	0x7ff00000
 8008f14:	7ca00000 	.word	0x7ca00000
 8008f18:	7fefffff 	.word	0x7fefffff
 8008f1c:	f014 0310 	ands.w	r3, r4, #16
 8008f20:	bf18      	it	ne
 8008f22:	236a      	movne	r3, #106	@ 0x6a
 8008f24:	4ea9      	ldr	r6, [pc, #676]	@ (80091cc <_strtod_l+0x854>)
 8008f26:	9308      	str	r3, [sp, #32]
 8008f28:	4650      	mov	r0, sl
 8008f2a:	4659      	mov	r1, fp
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	07e2      	lsls	r2, r4, #31
 8008f30:	d504      	bpl.n	8008f3c <_strtod_l+0x5c4>
 8008f32:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f36:	f7f7 fb5f 	bl	80005f8 <__aeabi_dmul>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	1064      	asrs	r4, r4, #1
 8008f3e:	f106 0608 	add.w	r6, r6, #8
 8008f42:	d1f4      	bne.n	8008f2e <_strtod_l+0x5b6>
 8008f44:	b10b      	cbz	r3, 8008f4a <_strtod_l+0x5d2>
 8008f46:	4682      	mov	sl, r0
 8008f48:	468b      	mov	fp, r1
 8008f4a:	9b08      	ldr	r3, [sp, #32]
 8008f4c:	b1b3      	cbz	r3, 8008f7c <_strtod_l+0x604>
 8008f4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008f52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	4659      	mov	r1, fp
 8008f5a:	dd0f      	ble.n	8008f7c <_strtod_l+0x604>
 8008f5c:	2b1f      	cmp	r3, #31
 8008f5e:	dd55      	ble.n	800900c <_strtod_l+0x694>
 8008f60:	2b34      	cmp	r3, #52	@ 0x34
 8008f62:	bfde      	ittt	le
 8008f64:	f04f 33ff 	movle.w	r3, #4294967295
 8008f68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008f6c:	4093      	lslle	r3, r2
 8008f6e:	f04f 0a00 	mov.w	sl, #0
 8008f72:	bfcc      	ite	gt
 8008f74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008f78:	ea03 0b01 	andle.w	fp, r3, r1
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	2300      	movs	r3, #0
 8008f80:	4650      	mov	r0, sl
 8008f82:	4659      	mov	r1, fp
 8008f84:	f7f7 fda0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d1a6      	bne.n	8008eda <_strtod_l+0x562>
 8008f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008f92:	9805      	ldr	r0, [sp, #20]
 8008f94:	462b      	mov	r3, r5
 8008f96:	463a      	mov	r2, r7
 8008f98:	f7ff f8c6 	bl	8008128 <__s2b>
 8008f9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	f43f af05 	beq.w	8008dae <_strtod_l+0x436>
 8008fa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fa6:	2a00      	cmp	r2, #0
 8008fa8:	eba9 0308 	sub.w	r3, r9, r8
 8008fac:	bfa8      	it	ge
 8008fae:	2300      	movge	r3, #0
 8008fb0:	9312      	str	r3, [sp, #72]	@ 0x48
 8008fb2:	2400      	movs	r4, #0
 8008fb4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008fb8:	9316      	str	r3, [sp, #88]	@ 0x58
 8008fba:	46a0      	mov	r8, r4
 8008fbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fbe:	9805      	ldr	r0, [sp, #20]
 8008fc0:	6859      	ldr	r1, [r3, #4]
 8008fc2:	f7ff f809 	bl	8007fd8 <_Balloc>
 8008fc6:	4681      	mov	r9, r0
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	f43f aef4 	beq.w	8008db6 <_strtod_l+0x43e>
 8008fce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fd0:	691a      	ldr	r2, [r3, #16]
 8008fd2:	3202      	adds	r2, #2
 8008fd4:	f103 010c 	add.w	r1, r3, #12
 8008fd8:	0092      	lsls	r2, r2, #2
 8008fda:	300c      	adds	r0, #12
 8008fdc:	f000 ff38 	bl	8009e50 <memcpy>
 8008fe0:	ec4b ab10 	vmov	d0, sl, fp
 8008fe4:	9805      	ldr	r0, [sp, #20]
 8008fe6:	aa1c      	add	r2, sp, #112	@ 0x70
 8008fe8:	a91b      	add	r1, sp, #108	@ 0x6c
 8008fea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008fee:	f7ff fbd7 	bl	80087a0 <__d2b>
 8008ff2:	901a      	str	r0, [sp, #104]	@ 0x68
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f43f aede 	beq.w	8008db6 <_strtod_l+0x43e>
 8008ffa:	9805      	ldr	r0, [sp, #20]
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	f7ff f929 	bl	8008254 <__i2b>
 8009002:	4680      	mov	r8, r0
 8009004:	b948      	cbnz	r0, 800901a <_strtod_l+0x6a2>
 8009006:	f04f 0800 	mov.w	r8, #0
 800900a:	e6d4      	b.n	8008db6 <_strtod_l+0x43e>
 800900c:	f04f 32ff 	mov.w	r2, #4294967295
 8009010:	fa02 f303 	lsl.w	r3, r2, r3
 8009014:	ea03 0a0a 	and.w	sl, r3, sl
 8009018:	e7b0      	b.n	8008f7c <_strtod_l+0x604>
 800901a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800901c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800901e:	2d00      	cmp	r5, #0
 8009020:	bfab      	itete	ge
 8009022:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009024:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009026:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009028:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800902a:	bfac      	ite	ge
 800902c:	18ef      	addge	r7, r5, r3
 800902e:	1b5e      	sublt	r6, r3, r5
 8009030:	9b08      	ldr	r3, [sp, #32]
 8009032:	1aed      	subs	r5, r5, r3
 8009034:	4415      	add	r5, r2
 8009036:	4b66      	ldr	r3, [pc, #408]	@ (80091d0 <_strtod_l+0x858>)
 8009038:	3d01      	subs	r5, #1
 800903a:	429d      	cmp	r5, r3
 800903c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009040:	da50      	bge.n	80090e4 <_strtod_l+0x76c>
 8009042:	1b5b      	subs	r3, r3, r5
 8009044:	2b1f      	cmp	r3, #31
 8009046:	eba2 0203 	sub.w	r2, r2, r3
 800904a:	f04f 0101 	mov.w	r1, #1
 800904e:	dc3d      	bgt.n	80090cc <_strtod_l+0x754>
 8009050:	fa01 f303 	lsl.w	r3, r1, r3
 8009054:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009056:	2300      	movs	r3, #0
 8009058:	9310      	str	r3, [sp, #64]	@ 0x40
 800905a:	18bd      	adds	r5, r7, r2
 800905c:	9b08      	ldr	r3, [sp, #32]
 800905e:	42af      	cmp	r7, r5
 8009060:	4416      	add	r6, r2
 8009062:	441e      	add	r6, r3
 8009064:	463b      	mov	r3, r7
 8009066:	bfa8      	it	ge
 8009068:	462b      	movge	r3, r5
 800906a:	42b3      	cmp	r3, r6
 800906c:	bfa8      	it	ge
 800906e:	4633      	movge	r3, r6
 8009070:	2b00      	cmp	r3, #0
 8009072:	bfc2      	ittt	gt
 8009074:	1aed      	subgt	r5, r5, r3
 8009076:	1af6      	subgt	r6, r6, r3
 8009078:	1aff      	subgt	r7, r7, r3
 800907a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800907c:	2b00      	cmp	r3, #0
 800907e:	dd16      	ble.n	80090ae <_strtod_l+0x736>
 8009080:	4641      	mov	r1, r8
 8009082:	9805      	ldr	r0, [sp, #20]
 8009084:	461a      	mov	r2, r3
 8009086:	f7ff f9a5 	bl	80083d4 <__pow5mult>
 800908a:	4680      	mov	r8, r0
 800908c:	2800      	cmp	r0, #0
 800908e:	d0ba      	beq.n	8009006 <_strtod_l+0x68e>
 8009090:	4601      	mov	r1, r0
 8009092:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009094:	9805      	ldr	r0, [sp, #20]
 8009096:	f7ff f8f3 	bl	8008280 <__multiply>
 800909a:	900e      	str	r0, [sp, #56]	@ 0x38
 800909c:	2800      	cmp	r0, #0
 800909e:	f43f ae8a 	beq.w	8008db6 <_strtod_l+0x43e>
 80090a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090a4:	9805      	ldr	r0, [sp, #20]
 80090a6:	f7fe ffd7 	bl	8008058 <_Bfree>
 80090aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80090ae:	2d00      	cmp	r5, #0
 80090b0:	dc1d      	bgt.n	80090ee <_strtod_l+0x776>
 80090b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	dd23      	ble.n	8009100 <_strtod_l+0x788>
 80090b8:	4649      	mov	r1, r9
 80090ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80090bc:	9805      	ldr	r0, [sp, #20]
 80090be:	f7ff f989 	bl	80083d4 <__pow5mult>
 80090c2:	4681      	mov	r9, r0
 80090c4:	b9e0      	cbnz	r0, 8009100 <_strtod_l+0x788>
 80090c6:	f04f 0900 	mov.w	r9, #0
 80090ca:	e674      	b.n	8008db6 <_strtod_l+0x43e>
 80090cc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80090d0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80090d4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80090d8:	35e2      	adds	r5, #226	@ 0xe2
 80090da:	fa01 f305 	lsl.w	r3, r1, r5
 80090de:	9310      	str	r3, [sp, #64]	@ 0x40
 80090e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80090e2:	e7ba      	b.n	800905a <_strtod_l+0x6e2>
 80090e4:	2300      	movs	r3, #0
 80090e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80090e8:	2301      	movs	r3, #1
 80090ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090ec:	e7b5      	b.n	800905a <_strtod_l+0x6e2>
 80090ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090f0:	9805      	ldr	r0, [sp, #20]
 80090f2:	462a      	mov	r2, r5
 80090f4:	f7ff f9c8 	bl	8008488 <__lshift>
 80090f8:	901a      	str	r0, [sp, #104]	@ 0x68
 80090fa:	2800      	cmp	r0, #0
 80090fc:	d1d9      	bne.n	80090b2 <_strtod_l+0x73a>
 80090fe:	e65a      	b.n	8008db6 <_strtod_l+0x43e>
 8009100:	2e00      	cmp	r6, #0
 8009102:	dd07      	ble.n	8009114 <_strtod_l+0x79c>
 8009104:	4649      	mov	r1, r9
 8009106:	9805      	ldr	r0, [sp, #20]
 8009108:	4632      	mov	r2, r6
 800910a:	f7ff f9bd 	bl	8008488 <__lshift>
 800910e:	4681      	mov	r9, r0
 8009110:	2800      	cmp	r0, #0
 8009112:	d0d8      	beq.n	80090c6 <_strtod_l+0x74e>
 8009114:	2f00      	cmp	r7, #0
 8009116:	dd08      	ble.n	800912a <_strtod_l+0x7b2>
 8009118:	4641      	mov	r1, r8
 800911a:	9805      	ldr	r0, [sp, #20]
 800911c:	463a      	mov	r2, r7
 800911e:	f7ff f9b3 	bl	8008488 <__lshift>
 8009122:	4680      	mov	r8, r0
 8009124:	2800      	cmp	r0, #0
 8009126:	f43f ae46 	beq.w	8008db6 <_strtod_l+0x43e>
 800912a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800912c:	9805      	ldr	r0, [sp, #20]
 800912e:	464a      	mov	r2, r9
 8009130:	f7ff fa32 	bl	8008598 <__mdiff>
 8009134:	4604      	mov	r4, r0
 8009136:	2800      	cmp	r0, #0
 8009138:	f43f ae3d 	beq.w	8008db6 <_strtod_l+0x43e>
 800913c:	68c3      	ldr	r3, [r0, #12]
 800913e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009140:	2300      	movs	r3, #0
 8009142:	60c3      	str	r3, [r0, #12]
 8009144:	4641      	mov	r1, r8
 8009146:	f7ff fa0b 	bl	8008560 <__mcmp>
 800914a:	2800      	cmp	r0, #0
 800914c:	da46      	bge.n	80091dc <_strtod_l+0x864>
 800914e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009150:	ea53 030a 	orrs.w	r3, r3, sl
 8009154:	d16c      	bne.n	8009230 <_strtod_l+0x8b8>
 8009156:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800915a:	2b00      	cmp	r3, #0
 800915c:	d168      	bne.n	8009230 <_strtod_l+0x8b8>
 800915e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009162:	0d1b      	lsrs	r3, r3, #20
 8009164:	051b      	lsls	r3, r3, #20
 8009166:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800916a:	d961      	bls.n	8009230 <_strtod_l+0x8b8>
 800916c:	6963      	ldr	r3, [r4, #20]
 800916e:	b913      	cbnz	r3, 8009176 <_strtod_l+0x7fe>
 8009170:	6923      	ldr	r3, [r4, #16]
 8009172:	2b01      	cmp	r3, #1
 8009174:	dd5c      	ble.n	8009230 <_strtod_l+0x8b8>
 8009176:	4621      	mov	r1, r4
 8009178:	2201      	movs	r2, #1
 800917a:	9805      	ldr	r0, [sp, #20]
 800917c:	f7ff f984 	bl	8008488 <__lshift>
 8009180:	4641      	mov	r1, r8
 8009182:	4604      	mov	r4, r0
 8009184:	f7ff f9ec 	bl	8008560 <__mcmp>
 8009188:	2800      	cmp	r0, #0
 800918a:	dd51      	ble.n	8009230 <_strtod_l+0x8b8>
 800918c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009190:	9a08      	ldr	r2, [sp, #32]
 8009192:	0d1b      	lsrs	r3, r3, #20
 8009194:	051b      	lsls	r3, r3, #20
 8009196:	2a00      	cmp	r2, #0
 8009198:	d06b      	beq.n	8009272 <_strtod_l+0x8fa>
 800919a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800919e:	d868      	bhi.n	8009272 <_strtod_l+0x8fa>
 80091a0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80091a4:	f67f ae9d 	bls.w	8008ee2 <_strtod_l+0x56a>
 80091a8:	4b0a      	ldr	r3, [pc, #40]	@ (80091d4 <_strtod_l+0x85c>)
 80091aa:	4650      	mov	r0, sl
 80091ac:	4659      	mov	r1, fp
 80091ae:	2200      	movs	r2, #0
 80091b0:	f7f7 fa22 	bl	80005f8 <__aeabi_dmul>
 80091b4:	4b08      	ldr	r3, [pc, #32]	@ (80091d8 <_strtod_l+0x860>)
 80091b6:	400b      	ands	r3, r1
 80091b8:	4682      	mov	sl, r0
 80091ba:	468b      	mov	fp, r1
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f47f ae05 	bne.w	8008dcc <_strtod_l+0x454>
 80091c2:	9a05      	ldr	r2, [sp, #20]
 80091c4:	2322      	movs	r3, #34	@ 0x22
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	e600      	b.n	8008dcc <_strtod_l+0x454>
 80091ca:	bf00      	nop
 80091cc:	0800b150 	.word	0x0800b150
 80091d0:	fffffc02 	.word	0xfffffc02
 80091d4:	39500000 	.word	0x39500000
 80091d8:	7ff00000 	.word	0x7ff00000
 80091dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80091e0:	d165      	bne.n	80092ae <_strtod_l+0x936>
 80091e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80091e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091e8:	b35a      	cbz	r2, 8009242 <_strtod_l+0x8ca>
 80091ea:	4a9f      	ldr	r2, [pc, #636]	@ (8009468 <_strtod_l+0xaf0>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d12b      	bne.n	8009248 <_strtod_l+0x8d0>
 80091f0:	9b08      	ldr	r3, [sp, #32]
 80091f2:	4651      	mov	r1, sl
 80091f4:	b303      	cbz	r3, 8009238 <_strtod_l+0x8c0>
 80091f6:	4b9d      	ldr	r3, [pc, #628]	@ (800946c <_strtod_l+0xaf4>)
 80091f8:	465a      	mov	r2, fp
 80091fa:	4013      	ands	r3, r2
 80091fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009200:	f04f 32ff 	mov.w	r2, #4294967295
 8009204:	d81b      	bhi.n	800923e <_strtod_l+0x8c6>
 8009206:	0d1b      	lsrs	r3, r3, #20
 8009208:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800920c:	fa02 f303 	lsl.w	r3, r2, r3
 8009210:	4299      	cmp	r1, r3
 8009212:	d119      	bne.n	8009248 <_strtod_l+0x8d0>
 8009214:	4b96      	ldr	r3, [pc, #600]	@ (8009470 <_strtod_l+0xaf8>)
 8009216:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009218:	429a      	cmp	r2, r3
 800921a:	d102      	bne.n	8009222 <_strtod_l+0x8aa>
 800921c:	3101      	adds	r1, #1
 800921e:	f43f adca 	beq.w	8008db6 <_strtod_l+0x43e>
 8009222:	4b92      	ldr	r3, [pc, #584]	@ (800946c <_strtod_l+0xaf4>)
 8009224:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009226:	401a      	ands	r2, r3
 8009228:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800922c:	f04f 0a00 	mov.w	sl, #0
 8009230:	9b08      	ldr	r3, [sp, #32]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1b8      	bne.n	80091a8 <_strtod_l+0x830>
 8009236:	e5c9      	b.n	8008dcc <_strtod_l+0x454>
 8009238:	f04f 33ff 	mov.w	r3, #4294967295
 800923c:	e7e8      	b.n	8009210 <_strtod_l+0x898>
 800923e:	4613      	mov	r3, r2
 8009240:	e7e6      	b.n	8009210 <_strtod_l+0x898>
 8009242:	ea53 030a 	orrs.w	r3, r3, sl
 8009246:	d0a1      	beq.n	800918c <_strtod_l+0x814>
 8009248:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800924a:	b1db      	cbz	r3, 8009284 <_strtod_l+0x90c>
 800924c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800924e:	4213      	tst	r3, r2
 8009250:	d0ee      	beq.n	8009230 <_strtod_l+0x8b8>
 8009252:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009254:	9a08      	ldr	r2, [sp, #32]
 8009256:	4650      	mov	r0, sl
 8009258:	4659      	mov	r1, fp
 800925a:	b1bb      	cbz	r3, 800928c <_strtod_l+0x914>
 800925c:	f7ff fb6e 	bl	800893c <sulp>
 8009260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009264:	ec53 2b10 	vmov	r2, r3, d0
 8009268:	f7f7 f810 	bl	800028c <__adddf3>
 800926c:	4682      	mov	sl, r0
 800926e:	468b      	mov	fp, r1
 8009270:	e7de      	b.n	8009230 <_strtod_l+0x8b8>
 8009272:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009276:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800927a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800927e:	f04f 3aff 	mov.w	sl, #4294967295
 8009282:	e7d5      	b.n	8009230 <_strtod_l+0x8b8>
 8009284:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009286:	ea13 0f0a 	tst.w	r3, sl
 800928a:	e7e1      	b.n	8009250 <_strtod_l+0x8d8>
 800928c:	f7ff fb56 	bl	800893c <sulp>
 8009290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009294:	ec53 2b10 	vmov	r2, r3, d0
 8009298:	f7f6 fff6 	bl	8000288 <__aeabi_dsub>
 800929c:	2200      	movs	r2, #0
 800929e:	2300      	movs	r3, #0
 80092a0:	4682      	mov	sl, r0
 80092a2:	468b      	mov	fp, r1
 80092a4:	f7f7 fc10 	bl	8000ac8 <__aeabi_dcmpeq>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d0c1      	beq.n	8009230 <_strtod_l+0x8b8>
 80092ac:	e619      	b.n	8008ee2 <_strtod_l+0x56a>
 80092ae:	4641      	mov	r1, r8
 80092b0:	4620      	mov	r0, r4
 80092b2:	f7ff facd 	bl	8008850 <__ratio>
 80092b6:	ec57 6b10 	vmov	r6, r7, d0
 80092ba:	2200      	movs	r2, #0
 80092bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80092c0:	4630      	mov	r0, r6
 80092c2:	4639      	mov	r1, r7
 80092c4:	f7f7 fc14 	bl	8000af0 <__aeabi_dcmple>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d06f      	beq.n	80093ac <_strtod_l+0xa34>
 80092cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d17a      	bne.n	80093c8 <_strtod_l+0xa50>
 80092d2:	f1ba 0f00 	cmp.w	sl, #0
 80092d6:	d158      	bne.n	800938a <_strtod_l+0xa12>
 80092d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d15a      	bne.n	8009398 <_strtod_l+0xa20>
 80092e2:	4b64      	ldr	r3, [pc, #400]	@ (8009474 <_strtod_l+0xafc>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	4630      	mov	r0, r6
 80092e8:	4639      	mov	r1, r7
 80092ea:	f7f7 fbf7 	bl	8000adc <__aeabi_dcmplt>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d159      	bne.n	80093a6 <_strtod_l+0xa2e>
 80092f2:	4630      	mov	r0, r6
 80092f4:	4639      	mov	r1, r7
 80092f6:	4b60      	ldr	r3, [pc, #384]	@ (8009478 <_strtod_l+0xb00>)
 80092f8:	2200      	movs	r2, #0
 80092fa:	f7f7 f97d 	bl	80005f8 <__aeabi_dmul>
 80092fe:	4606      	mov	r6, r0
 8009300:	460f      	mov	r7, r1
 8009302:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009306:	9606      	str	r6, [sp, #24]
 8009308:	9307      	str	r3, [sp, #28]
 800930a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800930e:	4d57      	ldr	r5, [pc, #348]	@ (800946c <_strtod_l+0xaf4>)
 8009310:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009316:	401d      	ands	r5, r3
 8009318:	4b58      	ldr	r3, [pc, #352]	@ (800947c <_strtod_l+0xb04>)
 800931a:	429d      	cmp	r5, r3
 800931c:	f040 80b2 	bne.w	8009484 <_strtod_l+0xb0c>
 8009320:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009322:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009326:	ec4b ab10 	vmov	d0, sl, fp
 800932a:	f7ff f9c9 	bl	80086c0 <__ulp>
 800932e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009332:	ec51 0b10 	vmov	r0, r1, d0
 8009336:	f7f7 f95f 	bl	80005f8 <__aeabi_dmul>
 800933a:	4652      	mov	r2, sl
 800933c:	465b      	mov	r3, fp
 800933e:	f7f6 ffa5 	bl	800028c <__adddf3>
 8009342:	460b      	mov	r3, r1
 8009344:	4949      	ldr	r1, [pc, #292]	@ (800946c <_strtod_l+0xaf4>)
 8009346:	4a4e      	ldr	r2, [pc, #312]	@ (8009480 <_strtod_l+0xb08>)
 8009348:	4019      	ands	r1, r3
 800934a:	4291      	cmp	r1, r2
 800934c:	4682      	mov	sl, r0
 800934e:	d942      	bls.n	80093d6 <_strtod_l+0xa5e>
 8009350:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009352:	4b47      	ldr	r3, [pc, #284]	@ (8009470 <_strtod_l+0xaf8>)
 8009354:	429a      	cmp	r2, r3
 8009356:	d103      	bne.n	8009360 <_strtod_l+0x9e8>
 8009358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800935a:	3301      	adds	r3, #1
 800935c:	f43f ad2b 	beq.w	8008db6 <_strtod_l+0x43e>
 8009360:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009470 <_strtod_l+0xaf8>
 8009364:	f04f 3aff 	mov.w	sl, #4294967295
 8009368:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800936a:	9805      	ldr	r0, [sp, #20]
 800936c:	f7fe fe74 	bl	8008058 <_Bfree>
 8009370:	9805      	ldr	r0, [sp, #20]
 8009372:	4649      	mov	r1, r9
 8009374:	f7fe fe70 	bl	8008058 <_Bfree>
 8009378:	9805      	ldr	r0, [sp, #20]
 800937a:	4641      	mov	r1, r8
 800937c:	f7fe fe6c 	bl	8008058 <_Bfree>
 8009380:	9805      	ldr	r0, [sp, #20]
 8009382:	4621      	mov	r1, r4
 8009384:	f7fe fe68 	bl	8008058 <_Bfree>
 8009388:	e618      	b.n	8008fbc <_strtod_l+0x644>
 800938a:	f1ba 0f01 	cmp.w	sl, #1
 800938e:	d103      	bne.n	8009398 <_strtod_l+0xa20>
 8009390:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009392:	2b00      	cmp	r3, #0
 8009394:	f43f ada5 	beq.w	8008ee2 <_strtod_l+0x56a>
 8009398:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009448 <_strtod_l+0xad0>
 800939c:	4f35      	ldr	r7, [pc, #212]	@ (8009474 <_strtod_l+0xafc>)
 800939e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093a2:	2600      	movs	r6, #0
 80093a4:	e7b1      	b.n	800930a <_strtod_l+0x992>
 80093a6:	4f34      	ldr	r7, [pc, #208]	@ (8009478 <_strtod_l+0xb00>)
 80093a8:	2600      	movs	r6, #0
 80093aa:	e7aa      	b.n	8009302 <_strtod_l+0x98a>
 80093ac:	4b32      	ldr	r3, [pc, #200]	@ (8009478 <_strtod_l+0xb00>)
 80093ae:	4630      	mov	r0, r6
 80093b0:	4639      	mov	r1, r7
 80093b2:	2200      	movs	r2, #0
 80093b4:	f7f7 f920 	bl	80005f8 <__aeabi_dmul>
 80093b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093ba:	4606      	mov	r6, r0
 80093bc:	460f      	mov	r7, r1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d09f      	beq.n	8009302 <_strtod_l+0x98a>
 80093c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80093c6:	e7a0      	b.n	800930a <_strtod_l+0x992>
 80093c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009450 <_strtod_l+0xad8>
 80093cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093d0:	ec57 6b17 	vmov	r6, r7, d7
 80093d4:	e799      	b.n	800930a <_strtod_l+0x992>
 80093d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80093da:	9b08      	ldr	r3, [sp, #32]
 80093dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1c1      	bne.n	8009368 <_strtod_l+0x9f0>
 80093e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093e8:	0d1b      	lsrs	r3, r3, #20
 80093ea:	051b      	lsls	r3, r3, #20
 80093ec:	429d      	cmp	r5, r3
 80093ee:	d1bb      	bne.n	8009368 <_strtod_l+0x9f0>
 80093f0:	4630      	mov	r0, r6
 80093f2:	4639      	mov	r1, r7
 80093f4:	f7f7 fc48 	bl	8000c88 <__aeabi_d2lz>
 80093f8:	f7f7 f8d0 	bl	800059c <__aeabi_l2d>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	4630      	mov	r0, r6
 8009402:	4639      	mov	r1, r7
 8009404:	f7f6 ff40 	bl	8000288 <__aeabi_dsub>
 8009408:	460b      	mov	r3, r1
 800940a:	4602      	mov	r2, r0
 800940c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009410:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009416:	ea46 060a 	orr.w	r6, r6, sl
 800941a:	431e      	orrs	r6, r3
 800941c:	d06f      	beq.n	80094fe <_strtod_l+0xb86>
 800941e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009458 <_strtod_l+0xae0>)
 8009420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009424:	f7f7 fb5a 	bl	8000adc <__aeabi_dcmplt>
 8009428:	2800      	cmp	r0, #0
 800942a:	f47f accf 	bne.w	8008dcc <_strtod_l+0x454>
 800942e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009460 <_strtod_l+0xae8>)
 8009430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009434:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009438:	f7f7 fb6e 	bl	8000b18 <__aeabi_dcmpgt>
 800943c:	2800      	cmp	r0, #0
 800943e:	d093      	beq.n	8009368 <_strtod_l+0x9f0>
 8009440:	e4c4      	b.n	8008dcc <_strtod_l+0x454>
 8009442:	bf00      	nop
 8009444:	f3af 8000 	nop.w
 8009448:	00000000 	.word	0x00000000
 800944c:	bff00000 	.word	0xbff00000
 8009450:	00000000 	.word	0x00000000
 8009454:	3ff00000 	.word	0x3ff00000
 8009458:	94a03595 	.word	0x94a03595
 800945c:	3fdfffff 	.word	0x3fdfffff
 8009460:	35afe535 	.word	0x35afe535
 8009464:	3fe00000 	.word	0x3fe00000
 8009468:	000fffff 	.word	0x000fffff
 800946c:	7ff00000 	.word	0x7ff00000
 8009470:	7fefffff 	.word	0x7fefffff
 8009474:	3ff00000 	.word	0x3ff00000
 8009478:	3fe00000 	.word	0x3fe00000
 800947c:	7fe00000 	.word	0x7fe00000
 8009480:	7c9fffff 	.word	0x7c9fffff
 8009484:	9b08      	ldr	r3, [sp, #32]
 8009486:	b323      	cbz	r3, 80094d2 <_strtod_l+0xb5a>
 8009488:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800948c:	d821      	bhi.n	80094d2 <_strtod_l+0xb5a>
 800948e:	a328      	add	r3, pc, #160	@ (adr r3, 8009530 <_strtod_l+0xbb8>)
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	4630      	mov	r0, r6
 8009496:	4639      	mov	r1, r7
 8009498:	f7f7 fb2a 	bl	8000af0 <__aeabi_dcmple>
 800949c:	b1a0      	cbz	r0, 80094c8 <_strtod_l+0xb50>
 800949e:	4639      	mov	r1, r7
 80094a0:	4630      	mov	r0, r6
 80094a2:	f7f7 fb81 	bl	8000ba8 <__aeabi_d2uiz>
 80094a6:	2801      	cmp	r0, #1
 80094a8:	bf38      	it	cc
 80094aa:	2001      	movcc	r0, #1
 80094ac:	f7f7 f82a 	bl	8000504 <__aeabi_ui2d>
 80094b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094b2:	4606      	mov	r6, r0
 80094b4:	460f      	mov	r7, r1
 80094b6:	b9fb      	cbnz	r3, 80094f8 <_strtod_l+0xb80>
 80094b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80094bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80094be:	9315      	str	r3, [sp, #84]	@ 0x54
 80094c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80094c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80094c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80094ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80094ce:	1b5b      	subs	r3, r3, r5
 80094d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80094d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80094d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80094da:	f7ff f8f1 	bl	80086c0 <__ulp>
 80094de:	4650      	mov	r0, sl
 80094e0:	ec53 2b10 	vmov	r2, r3, d0
 80094e4:	4659      	mov	r1, fp
 80094e6:	f7f7 f887 	bl	80005f8 <__aeabi_dmul>
 80094ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80094ee:	f7f6 fecd 	bl	800028c <__adddf3>
 80094f2:	4682      	mov	sl, r0
 80094f4:	468b      	mov	fp, r1
 80094f6:	e770      	b.n	80093da <_strtod_l+0xa62>
 80094f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80094fc:	e7e0      	b.n	80094c0 <_strtod_l+0xb48>
 80094fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8009538 <_strtod_l+0xbc0>)
 8009500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009504:	f7f7 faea 	bl	8000adc <__aeabi_dcmplt>
 8009508:	e798      	b.n	800943c <_strtod_l+0xac4>
 800950a:	2300      	movs	r3, #0
 800950c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800950e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009510:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009512:	6013      	str	r3, [r2, #0]
 8009514:	f7ff ba6d 	b.w	80089f2 <_strtod_l+0x7a>
 8009518:	2a65      	cmp	r2, #101	@ 0x65
 800951a:	f43f ab66 	beq.w	8008bea <_strtod_l+0x272>
 800951e:	2a45      	cmp	r2, #69	@ 0x45
 8009520:	f43f ab63 	beq.w	8008bea <_strtod_l+0x272>
 8009524:	2301      	movs	r3, #1
 8009526:	f7ff bb9e 	b.w	8008c66 <_strtod_l+0x2ee>
 800952a:	bf00      	nop
 800952c:	f3af 8000 	nop.w
 8009530:	ffc00000 	.word	0xffc00000
 8009534:	41dfffff 	.word	0x41dfffff
 8009538:	94a03595 	.word	0x94a03595
 800953c:	3fcfffff 	.word	0x3fcfffff

08009540 <_strtod_r>:
 8009540:	4b01      	ldr	r3, [pc, #4]	@ (8009548 <_strtod_r+0x8>)
 8009542:	f7ff ba19 	b.w	8008978 <_strtod_l>
 8009546:	bf00      	nop
 8009548:	200000f8 	.word	0x200000f8

0800954c <_strtol_l.constprop.0>:
 800954c:	2b24      	cmp	r3, #36	@ 0x24
 800954e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009552:	4686      	mov	lr, r0
 8009554:	4690      	mov	r8, r2
 8009556:	d801      	bhi.n	800955c <_strtol_l.constprop.0+0x10>
 8009558:	2b01      	cmp	r3, #1
 800955a:	d106      	bne.n	800956a <_strtol_l.constprop.0+0x1e>
 800955c:	f7fd fdba 	bl	80070d4 <__errno>
 8009560:	2316      	movs	r3, #22
 8009562:	6003      	str	r3, [r0, #0]
 8009564:	2000      	movs	r0, #0
 8009566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956a:	4834      	ldr	r0, [pc, #208]	@ (800963c <_strtol_l.constprop.0+0xf0>)
 800956c:	460d      	mov	r5, r1
 800956e:	462a      	mov	r2, r5
 8009570:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009574:	5d06      	ldrb	r6, [r0, r4]
 8009576:	f016 0608 	ands.w	r6, r6, #8
 800957a:	d1f8      	bne.n	800956e <_strtol_l.constprop.0+0x22>
 800957c:	2c2d      	cmp	r4, #45	@ 0x2d
 800957e:	d12d      	bne.n	80095dc <_strtol_l.constprop.0+0x90>
 8009580:	782c      	ldrb	r4, [r5, #0]
 8009582:	2601      	movs	r6, #1
 8009584:	1c95      	adds	r5, r2, #2
 8009586:	f033 0210 	bics.w	r2, r3, #16
 800958a:	d109      	bne.n	80095a0 <_strtol_l.constprop.0+0x54>
 800958c:	2c30      	cmp	r4, #48	@ 0x30
 800958e:	d12a      	bne.n	80095e6 <_strtol_l.constprop.0+0x9a>
 8009590:	782a      	ldrb	r2, [r5, #0]
 8009592:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009596:	2a58      	cmp	r2, #88	@ 0x58
 8009598:	d125      	bne.n	80095e6 <_strtol_l.constprop.0+0x9a>
 800959a:	786c      	ldrb	r4, [r5, #1]
 800959c:	2310      	movs	r3, #16
 800959e:	3502      	adds	r5, #2
 80095a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80095a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80095a8:	2200      	movs	r2, #0
 80095aa:	fbbc f9f3 	udiv	r9, ip, r3
 80095ae:	4610      	mov	r0, r2
 80095b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80095b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80095b8:	2f09      	cmp	r7, #9
 80095ba:	d81b      	bhi.n	80095f4 <_strtol_l.constprop.0+0xa8>
 80095bc:	463c      	mov	r4, r7
 80095be:	42a3      	cmp	r3, r4
 80095c0:	dd27      	ble.n	8009612 <_strtol_l.constprop.0+0xc6>
 80095c2:	1c57      	adds	r7, r2, #1
 80095c4:	d007      	beq.n	80095d6 <_strtol_l.constprop.0+0x8a>
 80095c6:	4581      	cmp	r9, r0
 80095c8:	d320      	bcc.n	800960c <_strtol_l.constprop.0+0xc0>
 80095ca:	d101      	bne.n	80095d0 <_strtol_l.constprop.0+0x84>
 80095cc:	45a2      	cmp	sl, r4
 80095ce:	db1d      	blt.n	800960c <_strtol_l.constprop.0+0xc0>
 80095d0:	fb00 4003 	mla	r0, r0, r3, r4
 80095d4:	2201      	movs	r2, #1
 80095d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095da:	e7eb      	b.n	80095b4 <_strtol_l.constprop.0+0x68>
 80095dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80095de:	bf04      	itt	eq
 80095e0:	782c      	ldrbeq	r4, [r5, #0]
 80095e2:	1c95      	addeq	r5, r2, #2
 80095e4:	e7cf      	b.n	8009586 <_strtol_l.constprop.0+0x3a>
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1da      	bne.n	80095a0 <_strtol_l.constprop.0+0x54>
 80095ea:	2c30      	cmp	r4, #48	@ 0x30
 80095ec:	bf0c      	ite	eq
 80095ee:	2308      	moveq	r3, #8
 80095f0:	230a      	movne	r3, #10
 80095f2:	e7d5      	b.n	80095a0 <_strtol_l.constprop.0+0x54>
 80095f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80095f8:	2f19      	cmp	r7, #25
 80095fa:	d801      	bhi.n	8009600 <_strtol_l.constprop.0+0xb4>
 80095fc:	3c37      	subs	r4, #55	@ 0x37
 80095fe:	e7de      	b.n	80095be <_strtol_l.constprop.0+0x72>
 8009600:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009604:	2f19      	cmp	r7, #25
 8009606:	d804      	bhi.n	8009612 <_strtol_l.constprop.0+0xc6>
 8009608:	3c57      	subs	r4, #87	@ 0x57
 800960a:	e7d8      	b.n	80095be <_strtol_l.constprop.0+0x72>
 800960c:	f04f 32ff 	mov.w	r2, #4294967295
 8009610:	e7e1      	b.n	80095d6 <_strtol_l.constprop.0+0x8a>
 8009612:	1c53      	adds	r3, r2, #1
 8009614:	d108      	bne.n	8009628 <_strtol_l.constprop.0+0xdc>
 8009616:	2322      	movs	r3, #34	@ 0x22
 8009618:	f8ce 3000 	str.w	r3, [lr]
 800961c:	4660      	mov	r0, ip
 800961e:	f1b8 0f00 	cmp.w	r8, #0
 8009622:	d0a0      	beq.n	8009566 <_strtol_l.constprop.0+0x1a>
 8009624:	1e69      	subs	r1, r5, #1
 8009626:	e006      	b.n	8009636 <_strtol_l.constprop.0+0xea>
 8009628:	b106      	cbz	r6, 800962c <_strtol_l.constprop.0+0xe0>
 800962a:	4240      	negs	r0, r0
 800962c:	f1b8 0f00 	cmp.w	r8, #0
 8009630:	d099      	beq.n	8009566 <_strtol_l.constprop.0+0x1a>
 8009632:	2a00      	cmp	r2, #0
 8009634:	d1f6      	bne.n	8009624 <_strtol_l.constprop.0+0xd8>
 8009636:	f8c8 1000 	str.w	r1, [r8]
 800963a:	e794      	b.n	8009566 <_strtol_l.constprop.0+0x1a>
 800963c:	0800b179 	.word	0x0800b179

08009640 <_strtol_r>:
 8009640:	f7ff bf84 	b.w	800954c <_strtol_l.constprop.0>

08009644 <__ssputs_r>:
 8009644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009648:	688e      	ldr	r6, [r1, #8]
 800964a:	461f      	mov	r7, r3
 800964c:	42be      	cmp	r6, r7
 800964e:	680b      	ldr	r3, [r1, #0]
 8009650:	4682      	mov	sl, r0
 8009652:	460c      	mov	r4, r1
 8009654:	4690      	mov	r8, r2
 8009656:	d82d      	bhi.n	80096b4 <__ssputs_r+0x70>
 8009658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800965c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009660:	d026      	beq.n	80096b0 <__ssputs_r+0x6c>
 8009662:	6965      	ldr	r5, [r4, #20]
 8009664:	6909      	ldr	r1, [r1, #16]
 8009666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800966a:	eba3 0901 	sub.w	r9, r3, r1
 800966e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009672:	1c7b      	adds	r3, r7, #1
 8009674:	444b      	add	r3, r9
 8009676:	106d      	asrs	r5, r5, #1
 8009678:	429d      	cmp	r5, r3
 800967a:	bf38      	it	cc
 800967c:	461d      	movcc	r5, r3
 800967e:	0553      	lsls	r3, r2, #21
 8009680:	d527      	bpl.n	80096d2 <__ssputs_r+0x8e>
 8009682:	4629      	mov	r1, r5
 8009684:	f7fe fc1c 	bl	8007ec0 <_malloc_r>
 8009688:	4606      	mov	r6, r0
 800968a:	b360      	cbz	r0, 80096e6 <__ssputs_r+0xa2>
 800968c:	6921      	ldr	r1, [r4, #16]
 800968e:	464a      	mov	r2, r9
 8009690:	f000 fbde 	bl	8009e50 <memcpy>
 8009694:	89a3      	ldrh	r3, [r4, #12]
 8009696:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800969a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800969e:	81a3      	strh	r3, [r4, #12]
 80096a0:	6126      	str	r6, [r4, #16]
 80096a2:	6165      	str	r5, [r4, #20]
 80096a4:	444e      	add	r6, r9
 80096a6:	eba5 0509 	sub.w	r5, r5, r9
 80096aa:	6026      	str	r6, [r4, #0]
 80096ac:	60a5      	str	r5, [r4, #8]
 80096ae:	463e      	mov	r6, r7
 80096b0:	42be      	cmp	r6, r7
 80096b2:	d900      	bls.n	80096b6 <__ssputs_r+0x72>
 80096b4:	463e      	mov	r6, r7
 80096b6:	6820      	ldr	r0, [r4, #0]
 80096b8:	4632      	mov	r2, r6
 80096ba:	4641      	mov	r1, r8
 80096bc:	f000 fb6a 	bl	8009d94 <memmove>
 80096c0:	68a3      	ldr	r3, [r4, #8]
 80096c2:	1b9b      	subs	r3, r3, r6
 80096c4:	60a3      	str	r3, [r4, #8]
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	4433      	add	r3, r6
 80096ca:	6023      	str	r3, [r4, #0]
 80096cc:	2000      	movs	r0, #0
 80096ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d2:	462a      	mov	r2, r5
 80096d4:	f000 ff51 	bl	800a57a <_realloc_r>
 80096d8:	4606      	mov	r6, r0
 80096da:	2800      	cmp	r0, #0
 80096dc:	d1e0      	bne.n	80096a0 <__ssputs_r+0x5c>
 80096de:	6921      	ldr	r1, [r4, #16]
 80096e0:	4650      	mov	r0, sl
 80096e2:	f7fe fb79 	bl	8007dd8 <_free_r>
 80096e6:	230c      	movs	r3, #12
 80096e8:	f8ca 3000 	str.w	r3, [sl]
 80096ec:	89a3      	ldrh	r3, [r4, #12]
 80096ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096f2:	81a3      	strh	r3, [r4, #12]
 80096f4:	f04f 30ff 	mov.w	r0, #4294967295
 80096f8:	e7e9      	b.n	80096ce <__ssputs_r+0x8a>
	...

080096fc <_svfiprintf_r>:
 80096fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009700:	4698      	mov	r8, r3
 8009702:	898b      	ldrh	r3, [r1, #12]
 8009704:	061b      	lsls	r3, r3, #24
 8009706:	b09d      	sub	sp, #116	@ 0x74
 8009708:	4607      	mov	r7, r0
 800970a:	460d      	mov	r5, r1
 800970c:	4614      	mov	r4, r2
 800970e:	d510      	bpl.n	8009732 <_svfiprintf_r+0x36>
 8009710:	690b      	ldr	r3, [r1, #16]
 8009712:	b973      	cbnz	r3, 8009732 <_svfiprintf_r+0x36>
 8009714:	2140      	movs	r1, #64	@ 0x40
 8009716:	f7fe fbd3 	bl	8007ec0 <_malloc_r>
 800971a:	6028      	str	r0, [r5, #0]
 800971c:	6128      	str	r0, [r5, #16]
 800971e:	b930      	cbnz	r0, 800972e <_svfiprintf_r+0x32>
 8009720:	230c      	movs	r3, #12
 8009722:	603b      	str	r3, [r7, #0]
 8009724:	f04f 30ff 	mov.w	r0, #4294967295
 8009728:	b01d      	add	sp, #116	@ 0x74
 800972a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800972e:	2340      	movs	r3, #64	@ 0x40
 8009730:	616b      	str	r3, [r5, #20]
 8009732:	2300      	movs	r3, #0
 8009734:	9309      	str	r3, [sp, #36]	@ 0x24
 8009736:	2320      	movs	r3, #32
 8009738:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800973c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009740:	2330      	movs	r3, #48	@ 0x30
 8009742:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80098e0 <_svfiprintf_r+0x1e4>
 8009746:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800974a:	f04f 0901 	mov.w	r9, #1
 800974e:	4623      	mov	r3, r4
 8009750:	469a      	mov	sl, r3
 8009752:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009756:	b10a      	cbz	r2, 800975c <_svfiprintf_r+0x60>
 8009758:	2a25      	cmp	r2, #37	@ 0x25
 800975a:	d1f9      	bne.n	8009750 <_svfiprintf_r+0x54>
 800975c:	ebba 0b04 	subs.w	fp, sl, r4
 8009760:	d00b      	beq.n	800977a <_svfiprintf_r+0x7e>
 8009762:	465b      	mov	r3, fp
 8009764:	4622      	mov	r2, r4
 8009766:	4629      	mov	r1, r5
 8009768:	4638      	mov	r0, r7
 800976a:	f7ff ff6b 	bl	8009644 <__ssputs_r>
 800976e:	3001      	adds	r0, #1
 8009770:	f000 80a7 	beq.w	80098c2 <_svfiprintf_r+0x1c6>
 8009774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009776:	445a      	add	r2, fp
 8009778:	9209      	str	r2, [sp, #36]	@ 0x24
 800977a:	f89a 3000 	ldrb.w	r3, [sl]
 800977e:	2b00      	cmp	r3, #0
 8009780:	f000 809f 	beq.w	80098c2 <_svfiprintf_r+0x1c6>
 8009784:	2300      	movs	r3, #0
 8009786:	f04f 32ff 	mov.w	r2, #4294967295
 800978a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800978e:	f10a 0a01 	add.w	sl, sl, #1
 8009792:	9304      	str	r3, [sp, #16]
 8009794:	9307      	str	r3, [sp, #28]
 8009796:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800979a:	931a      	str	r3, [sp, #104]	@ 0x68
 800979c:	4654      	mov	r4, sl
 800979e:	2205      	movs	r2, #5
 80097a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a4:	484e      	ldr	r0, [pc, #312]	@ (80098e0 <_svfiprintf_r+0x1e4>)
 80097a6:	f7f6 fd13 	bl	80001d0 <memchr>
 80097aa:	9a04      	ldr	r2, [sp, #16]
 80097ac:	b9d8      	cbnz	r0, 80097e6 <_svfiprintf_r+0xea>
 80097ae:	06d0      	lsls	r0, r2, #27
 80097b0:	bf44      	itt	mi
 80097b2:	2320      	movmi	r3, #32
 80097b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097b8:	0711      	lsls	r1, r2, #28
 80097ba:	bf44      	itt	mi
 80097bc:	232b      	movmi	r3, #43	@ 0x2b
 80097be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097c2:	f89a 3000 	ldrb.w	r3, [sl]
 80097c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80097c8:	d015      	beq.n	80097f6 <_svfiprintf_r+0xfa>
 80097ca:	9a07      	ldr	r2, [sp, #28]
 80097cc:	4654      	mov	r4, sl
 80097ce:	2000      	movs	r0, #0
 80097d0:	f04f 0c0a 	mov.w	ip, #10
 80097d4:	4621      	mov	r1, r4
 80097d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097da:	3b30      	subs	r3, #48	@ 0x30
 80097dc:	2b09      	cmp	r3, #9
 80097de:	d94b      	bls.n	8009878 <_svfiprintf_r+0x17c>
 80097e0:	b1b0      	cbz	r0, 8009810 <_svfiprintf_r+0x114>
 80097e2:	9207      	str	r2, [sp, #28]
 80097e4:	e014      	b.n	8009810 <_svfiprintf_r+0x114>
 80097e6:	eba0 0308 	sub.w	r3, r0, r8
 80097ea:	fa09 f303 	lsl.w	r3, r9, r3
 80097ee:	4313      	orrs	r3, r2
 80097f0:	9304      	str	r3, [sp, #16]
 80097f2:	46a2      	mov	sl, r4
 80097f4:	e7d2      	b.n	800979c <_svfiprintf_r+0xa0>
 80097f6:	9b03      	ldr	r3, [sp, #12]
 80097f8:	1d19      	adds	r1, r3, #4
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	9103      	str	r1, [sp, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	bfbb      	ittet	lt
 8009802:	425b      	neglt	r3, r3
 8009804:	f042 0202 	orrlt.w	r2, r2, #2
 8009808:	9307      	strge	r3, [sp, #28]
 800980a:	9307      	strlt	r3, [sp, #28]
 800980c:	bfb8      	it	lt
 800980e:	9204      	strlt	r2, [sp, #16]
 8009810:	7823      	ldrb	r3, [r4, #0]
 8009812:	2b2e      	cmp	r3, #46	@ 0x2e
 8009814:	d10a      	bne.n	800982c <_svfiprintf_r+0x130>
 8009816:	7863      	ldrb	r3, [r4, #1]
 8009818:	2b2a      	cmp	r3, #42	@ 0x2a
 800981a:	d132      	bne.n	8009882 <_svfiprintf_r+0x186>
 800981c:	9b03      	ldr	r3, [sp, #12]
 800981e:	1d1a      	adds	r2, r3, #4
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	9203      	str	r2, [sp, #12]
 8009824:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009828:	3402      	adds	r4, #2
 800982a:	9305      	str	r3, [sp, #20]
 800982c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80098f0 <_svfiprintf_r+0x1f4>
 8009830:	7821      	ldrb	r1, [r4, #0]
 8009832:	2203      	movs	r2, #3
 8009834:	4650      	mov	r0, sl
 8009836:	f7f6 fccb 	bl	80001d0 <memchr>
 800983a:	b138      	cbz	r0, 800984c <_svfiprintf_r+0x150>
 800983c:	9b04      	ldr	r3, [sp, #16]
 800983e:	eba0 000a 	sub.w	r0, r0, sl
 8009842:	2240      	movs	r2, #64	@ 0x40
 8009844:	4082      	lsls	r2, r0
 8009846:	4313      	orrs	r3, r2
 8009848:	3401      	adds	r4, #1
 800984a:	9304      	str	r3, [sp, #16]
 800984c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009850:	4824      	ldr	r0, [pc, #144]	@ (80098e4 <_svfiprintf_r+0x1e8>)
 8009852:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009856:	2206      	movs	r2, #6
 8009858:	f7f6 fcba 	bl	80001d0 <memchr>
 800985c:	2800      	cmp	r0, #0
 800985e:	d036      	beq.n	80098ce <_svfiprintf_r+0x1d2>
 8009860:	4b21      	ldr	r3, [pc, #132]	@ (80098e8 <_svfiprintf_r+0x1ec>)
 8009862:	bb1b      	cbnz	r3, 80098ac <_svfiprintf_r+0x1b0>
 8009864:	9b03      	ldr	r3, [sp, #12]
 8009866:	3307      	adds	r3, #7
 8009868:	f023 0307 	bic.w	r3, r3, #7
 800986c:	3308      	adds	r3, #8
 800986e:	9303      	str	r3, [sp, #12]
 8009870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009872:	4433      	add	r3, r6
 8009874:	9309      	str	r3, [sp, #36]	@ 0x24
 8009876:	e76a      	b.n	800974e <_svfiprintf_r+0x52>
 8009878:	fb0c 3202 	mla	r2, ip, r2, r3
 800987c:	460c      	mov	r4, r1
 800987e:	2001      	movs	r0, #1
 8009880:	e7a8      	b.n	80097d4 <_svfiprintf_r+0xd8>
 8009882:	2300      	movs	r3, #0
 8009884:	3401      	adds	r4, #1
 8009886:	9305      	str	r3, [sp, #20]
 8009888:	4619      	mov	r1, r3
 800988a:	f04f 0c0a 	mov.w	ip, #10
 800988e:	4620      	mov	r0, r4
 8009890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009894:	3a30      	subs	r2, #48	@ 0x30
 8009896:	2a09      	cmp	r2, #9
 8009898:	d903      	bls.n	80098a2 <_svfiprintf_r+0x1a6>
 800989a:	2b00      	cmp	r3, #0
 800989c:	d0c6      	beq.n	800982c <_svfiprintf_r+0x130>
 800989e:	9105      	str	r1, [sp, #20]
 80098a0:	e7c4      	b.n	800982c <_svfiprintf_r+0x130>
 80098a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80098a6:	4604      	mov	r4, r0
 80098a8:	2301      	movs	r3, #1
 80098aa:	e7f0      	b.n	800988e <_svfiprintf_r+0x192>
 80098ac:	ab03      	add	r3, sp, #12
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	462a      	mov	r2, r5
 80098b2:	4b0e      	ldr	r3, [pc, #56]	@ (80098ec <_svfiprintf_r+0x1f0>)
 80098b4:	a904      	add	r1, sp, #16
 80098b6:	4638      	mov	r0, r7
 80098b8:	f7fc fbc4 	bl	8006044 <_printf_float>
 80098bc:	1c42      	adds	r2, r0, #1
 80098be:	4606      	mov	r6, r0
 80098c0:	d1d6      	bne.n	8009870 <_svfiprintf_r+0x174>
 80098c2:	89ab      	ldrh	r3, [r5, #12]
 80098c4:	065b      	lsls	r3, r3, #25
 80098c6:	f53f af2d 	bmi.w	8009724 <_svfiprintf_r+0x28>
 80098ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098cc:	e72c      	b.n	8009728 <_svfiprintf_r+0x2c>
 80098ce:	ab03      	add	r3, sp, #12
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	462a      	mov	r2, r5
 80098d4:	4b05      	ldr	r3, [pc, #20]	@ (80098ec <_svfiprintf_r+0x1f0>)
 80098d6:	a904      	add	r1, sp, #16
 80098d8:	4638      	mov	r0, r7
 80098da:	f7fc fe4b 	bl	8006574 <_printf_i>
 80098de:	e7ed      	b.n	80098bc <_svfiprintf_r+0x1c0>
 80098e0:	0800b279 	.word	0x0800b279
 80098e4:	0800b283 	.word	0x0800b283
 80098e8:	08006045 	.word	0x08006045
 80098ec:	08009645 	.word	0x08009645
 80098f0:	0800b27f 	.word	0x0800b27f

080098f4 <__sfputc_r>:
 80098f4:	6893      	ldr	r3, [r2, #8]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	b410      	push	{r4}
 80098fc:	6093      	str	r3, [r2, #8]
 80098fe:	da08      	bge.n	8009912 <__sfputc_r+0x1e>
 8009900:	6994      	ldr	r4, [r2, #24]
 8009902:	42a3      	cmp	r3, r4
 8009904:	db01      	blt.n	800990a <__sfputc_r+0x16>
 8009906:	290a      	cmp	r1, #10
 8009908:	d103      	bne.n	8009912 <__sfputc_r+0x1e>
 800990a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800990e:	f7fd bafa 	b.w	8006f06 <__swbuf_r>
 8009912:	6813      	ldr	r3, [r2, #0]
 8009914:	1c58      	adds	r0, r3, #1
 8009916:	6010      	str	r0, [r2, #0]
 8009918:	7019      	strb	r1, [r3, #0]
 800991a:	4608      	mov	r0, r1
 800991c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009920:	4770      	bx	lr

08009922 <__sfputs_r>:
 8009922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009924:	4606      	mov	r6, r0
 8009926:	460f      	mov	r7, r1
 8009928:	4614      	mov	r4, r2
 800992a:	18d5      	adds	r5, r2, r3
 800992c:	42ac      	cmp	r4, r5
 800992e:	d101      	bne.n	8009934 <__sfputs_r+0x12>
 8009930:	2000      	movs	r0, #0
 8009932:	e007      	b.n	8009944 <__sfputs_r+0x22>
 8009934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009938:	463a      	mov	r2, r7
 800993a:	4630      	mov	r0, r6
 800993c:	f7ff ffda 	bl	80098f4 <__sfputc_r>
 8009940:	1c43      	adds	r3, r0, #1
 8009942:	d1f3      	bne.n	800992c <__sfputs_r+0xa>
 8009944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009948 <_vfiprintf_r>:
 8009948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994c:	460d      	mov	r5, r1
 800994e:	b09d      	sub	sp, #116	@ 0x74
 8009950:	4614      	mov	r4, r2
 8009952:	4698      	mov	r8, r3
 8009954:	4606      	mov	r6, r0
 8009956:	b118      	cbz	r0, 8009960 <_vfiprintf_r+0x18>
 8009958:	6a03      	ldr	r3, [r0, #32]
 800995a:	b90b      	cbnz	r3, 8009960 <_vfiprintf_r+0x18>
 800995c:	f7fd f9ca 	bl	8006cf4 <__sinit>
 8009960:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009962:	07d9      	lsls	r1, r3, #31
 8009964:	d405      	bmi.n	8009972 <_vfiprintf_r+0x2a>
 8009966:	89ab      	ldrh	r3, [r5, #12]
 8009968:	059a      	lsls	r2, r3, #22
 800996a:	d402      	bmi.n	8009972 <_vfiprintf_r+0x2a>
 800996c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800996e:	f7fd fbdc 	bl	800712a <__retarget_lock_acquire_recursive>
 8009972:	89ab      	ldrh	r3, [r5, #12]
 8009974:	071b      	lsls	r3, r3, #28
 8009976:	d501      	bpl.n	800997c <_vfiprintf_r+0x34>
 8009978:	692b      	ldr	r3, [r5, #16]
 800997a:	b99b      	cbnz	r3, 80099a4 <_vfiprintf_r+0x5c>
 800997c:	4629      	mov	r1, r5
 800997e:	4630      	mov	r0, r6
 8009980:	f7fd fb00 	bl	8006f84 <__swsetup_r>
 8009984:	b170      	cbz	r0, 80099a4 <_vfiprintf_r+0x5c>
 8009986:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009988:	07dc      	lsls	r4, r3, #31
 800998a:	d504      	bpl.n	8009996 <_vfiprintf_r+0x4e>
 800998c:	f04f 30ff 	mov.w	r0, #4294967295
 8009990:	b01d      	add	sp, #116	@ 0x74
 8009992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009996:	89ab      	ldrh	r3, [r5, #12]
 8009998:	0598      	lsls	r0, r3, #22
 800999a:	d4f7      	bmi.n	800998c <_vfiprintf_r+0x44>
 800999c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800999e:	f7fd fbc5 	bl	800712c <__retarget_lock_release_recursive>
 80099a2:	e7f3      	b.n	800998c <_vfiprintf_r+0x44>
 80099a4:	2300      	movs	r3, #0
 80099a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80099a8:	2320      	movs	r3, #32
 80099aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80099b2:	2330      	movs	r3, #48	@ 0x30
 80099b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b64 <_vfiprintf_r+0x21c>
 80099b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099bc:	f04f 0901 	mov.w	r9, #1
 80099c0:	4623      	mov	r3, r4
 80099c2:	469a      	mov	sl, r3
 80099c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099c8:	b10a      	cbz	r2, 80099ce <_vfiprintf_r+0x86>
 80099ca:	2a25      	cmp	r2, #37	@ 0x25
 80099cc:	d1f9      	bne.n	80099c2 <_vfiprintf_r+0x7a>
 80099ce:	ebba 0b04 	subs.w	fp, sl, r4
 80099d2:	d00b      	beq.n	80099ec <_vfiprintf_r+0xa4>
 80099d4:	465b      	mov	r3, fp
 80099d6:	4622      	mov	r2, r4
 80099d8:	4629      	mov	r1, r5
 80099da:	4630      	mov	r0, r6
 80099dc:	f7ff ffa1 	bl	8009922 <__sfputs_r>
 80099e0:	3001      	adds	r0, #1
 80099e2:	f000 80a7 	beq.w	8009b34 <_vfiprintf_r+0x1ec>
 80099e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099e8:	445a      	add	r2, fp
 80099ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80099ec:	f89a 3000 	ldrb.w	r3, [sl]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f000 809f 	beq.w	8009b34 <_vfiprintf_r+0x1ec>
 80099f6:	2300      	movs	r3, #0
 80099f8:	f04f 32ff 	mov.w	r2, #4294967295
 80099fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a00:	f10a 0a01 	add.w	sl, sl, #1
 8009a04:	9304      	str	r3, [sp, #16]
 8009a06:	9307      	str	r3, [sp, #28]
 8009a08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a0e:	4654      	mov	r4, sl
 8009a10:	2205      	movs	r2, #5
 8009a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a16:	4853      	ldr	r0, [pc, #332]	@ (8009b64 <_vfiprintf_r+0x21c>)
 8009a18:	f7f6 fbda 	bl	80001d0 <memchr>
 8009a1c:	9a04      	ldr	r2, [sp, #16]
 8009a1e:	b9d8      	cbnz	r0, 8009a58 <_vfiprintf_r+0x110>
 8009a20:	06d1      	lsls	r1, r2, #27
 8009a22:	bf44      	itt	mi
 8009a24:	2320      	movmi	r3, #32
 8009a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a2a:	0713      	lsls	r3, r2, #28
 8009a2c:	bf44      	itt	mi
 8009a2e:	232b      	movmi	r3, #43	@ 0x2b
 8009a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a34:	f89a 3000 	ldrb.w	r3, [sl]
 8009a38:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a3a:	d015      	beq.n	8009a68 <_vfiprintf_r+0x120>
 8009a3c:	9a07      	ldr	r2, [sp, #28]
 8009a3e:	4654      	mov	r4, sl
 8009a40:	2000      	movs	r0, #0
 8009a42:	f04f 0c0a 	mov.w	ip, #10
 8009a46:	4621      	mov	r1, r4
 8009a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a4c:	3b30      	subs	r3, #48	@ 0x30
 8009a4e:	2b09      	cmp	r3, #9
 8009a50:	d94b      	bls.n	8009aea <_vfiprintf_r+0x1a2>
 8009a52:	b1b0      	cbz	r0, 8009a82 <_vfiprintf_r+0x13a>
 8009a54:	9207      	str	r2, [sp, #28]
 8009a56:	e014      	b.n	8009a82 <_vfiprintf_r+0x13a>
 8009a58:	eba0 0308 	sub.w	r3, r0, r8
 8009a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a60:	4313      	orrs	r3, r2
 8009a62:	9304      	str	r3, [sp, #16]
 8009a64:	46a2      	mov	sl, r4
 8009a66:	e7d2      	b.n	8009a0e <_vfiprintf_r+0xc6>
 8009a68:	9b03      	ldr	r3, [sp, #12]
 8009a6a:	1d19      	adds	r1, r3, #4
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	9103      	str	r1, [sp, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	bfbb      	ittet	lt
 8009a74:	425b      	neglt	r3, r3
 8009a76:	f042 0202 	orrlt.w	r2, r2, #2
 8009a7a:	9307      	strge	r3, [sp, #28]
 8009a7c:	9307      	strlt	r3, [sp, #28]
 8009a7e:	bfb8      	it	lt
 8009a80:	9204      	strlt	r2, [sp, #16]
 8009a82:	7823      	ldrb	r3, [r4, #0]
 8009a84:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a86:	d10a      	bne.n	8009a9e <_vfiprintf_r+0x156>
 8009a88:	7863      	ldrb	r3, [r4, #1]
 8009a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a8c:	d132      	bne.n	8009af4 <_vfiprintf_r+0x1ac>
 8009a8e:	9b03      	ldr	r3, [sp, #12]
 8009a90:	1d1a      	adds	r2, r3, #4
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	9203      	str	r2, [sp, #12]
 8009a96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a9a:	3402      	adds	r4, #2
 8009a9c:	9305      	str	r3, [sp, #20]
 8009a9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b74 <_vfiprintf_r+0x22c>
 8009aa2:	7821      	ldrb	r1, [r4, #0]
 8009aa4:	2203      	movs	r2, #3
 8009aa6:	4650      	mov	r0, sl
 8009aa8:	f7f6 fb92 	bl	80001d0 <memchr>
 8009aac:	b138      	cbz	r0, 8009abe <_vfiprintf_r+0x176>
 8009aae:	9b04      	ldr	r3, [sp, #16]
 8009ab0:	eba0 000a 	sub.w	r0, r0, sl
 8009ab4:	2240      	movs	r2, #64	@ 0x40
 8009ab6:	4082      	lsls	r2, r0
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	3401      	adds	r4, #1
 8009abc:	9304      	str	r3, [sp, #16]
 8009abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac2:	4829      	ldr	r0, [pc, #164]	@ (8009b68 <_vfiprintf_r+0x220>)
 8009ac4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ac8:	2206      	movs	r2, #6
 8009aca:	f7f6 fb81 	bl	80001d0 <memchr>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d03f      	beq.n	8009b52 <_vfiprintf_r+0x20a>
 8009ad2:	4b26      	ldr	r3, [pc, #152]	@ (8009b6c <_vfiprintf_r+0x224>)
 8009ad4:	bb1b      	cbnz	r3, 8009b1e <_vfiprintf_r+0x1d6>
 8009ad6:	9b03      	ldr	r3, [sp, #12]
 8009ad8:	3307      	adds	r3, #7
 8009ada:	f023 0307 	bic.w	r3, r3, #7
 8009ade:	3308      	adds	r3, #8
 8009ae0:	9303      	str	r3, [sp, #12]
 8009ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae4:	443b      	add	r3, r7
 8009ae6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ae8:	e76a      	b.n	80099c0 <_vfiprintf_r+0x78>
 8009aea:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aee:	460c      	mov	r4, r1
 8009af0:	2001      	movs	r0, #1
 8009af2:	e7a8      	b.n	8009a46 <_vfiprintf_r+0xfe>
 8009af4:	2300      	movs	r3, #0
 8009af6:	3401      	adds	r4, #1
 8009af8:	9305      	str	r3, [sp, #20]
 8009afa:	4619      	mov	r1, r3
 8009afc:	f04f 0c0a 	mov.w	ip, #10
 8009b00:	4620      	mov	r0, r4
 8009b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b06:	3a30      	subs	r2, #48	@ 0x30
 8009b08:	2a09      	cmp	r2, #9
 8009b0a:	d903      	bls.n	8009b14 <_vfiprintf_r+0x1cc>
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d0c6      	beq.n	8009a9e <_vfiprintf_r+0x156>
 8009b10:	9105      	str	r1, [sp, #20]
 8009b12:	e7c4      	b.n	8009a9e <_vfiprintf_r+0x156>
 8009b14:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b18:	4604      	mov	r4, r0
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e7f0      	b.n	8009b00 <_vfiprintf_r+0x1b8>
 8009b1e:	ab03      	add	r3, sp, #12
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	462a      	mov	r2, r5
 8009b24:	4b12      	ldr	r3, [pc, #72]	@ (8009b70 <_vfiprintf_r+0x228>)
 8009b26:	a904      	add	r1, sp, #16
 8009b28:	4630      	mov	r0, r6
 8009b2a:	f7fc fa8b 	bl	8006044 <_printf_float>
 8009b2e:	4607      	mov	r7, r0
 8009b30:	1c78      	adds	r0, r7, #1
 8009b32:	d1d6      	bne.n	8009ae2 <_vfiprintf_r+0x19a>
 8009b34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b36:	07d9      	lsls	r1, r3, #31
 8009b38:	d405      	bmi.n	8009b46 <_vfiprintf_r+0x1fe>
 8009b3a:	89ab      	ldrh	r3, [r5, #12]
 8009b3c:	059a      	lsls	r2, r3, #22
 8009b3e:	d402      	bmi.n	8009b46 <_vfiprintf_r+0x1fe>
 8009b40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b42:	f7fd faf3 	bl	800712c <__retarget_lock_release_recursive>
 8009b46:	89ab      	ldrh	r3, [r5, #12]
 8009b48:	065b      	lsls	r3, r3, #25
 8009b4a:	f53f af1f 	bmi.w	800998c <_vfiprintf_r+0x44>
 8009b4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b50:	e71e      	b.n	8009990 <_vfiprintf_r+0x48>
 8009b52:	ab03      	add	r3, sp, #12
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	462a      	mov	r2, r5
 8009b58:	4b05      	ldr	r3, [pc, #20]	@ (8009b70 <_vfiprintf_r+0x228>)
 8009b5a:	a904      	add	r1, sp, #16
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f7fc fd09 	bl	8006574 <_printf_i>
 8009b62:	e7e4      	b.n	8009b2e <_vfiprintf_r+0x1e6>
 8009b64:	0800b279 	.word	0x0800b279
 8009b68:	0800b283 	.word	0x0800b283
 8009b6c:	08006045 	.word	0x08006045
 8009b70:	08009923 	.word	0x08009923
 8009b74:	0800b27f 	.word	0x0800b27f

08009b78 <__sflush_r>:
 8009b78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b80:	0716      	lsls	r6, r2, #28
 8009b82:	4605      	mov	r5, r0
 8009b84:	460c      	mov	r4, r1
 8009b86:	d454      	bmi.n	8009c32 <__sflush_r+0xba>
 8009b88:	684b      	ldr	r3, [r1, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	dc02      	bgt.n	8009b94 <__sflush_r+0x1c>
 8009b8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	dd48      	ble.n	8009c26 <__sflush_r+0xae>
 8009b94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b96:	2e00      	cmp	r6, #0
 8009b98:	d045      	beq.n	8009c26 <__sflush_r+0xae>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ba0:	682f      	ldr	r7, [r5, #0]
 8009ba2:	6a21      	ldr	r1, [r4, #32]
 8009ba4:	602b      	str	r3, [r5, #0]
 8009ba6:	d030      	beq.n	8009c0a <__sflush_r+0x92>
 8009ba8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009baa:	89a3      	ldrh	r3, [r4, #12]
 8009bac:	0759      	lsls	r1, r3, #29
 8009bae:	d505      	bpl.n	8009bbc <__sflush_r+0x44>
 8009bb0:	6863      	ldr	r3, [r4, #4]
 8009bb2:	1ad2      	subs	r2, r2, r3
 8009bb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009bb6:	b10b      	cbz	r3, 8009bbc <__sflush_r+0x44>
 8009bb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009bba:	1ad2      	subs	r2, r2, r3
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bc0:	6a21      	ldr	r1, [r4, #32]
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	47b0      	blx	r6
 8009bc6:	1c43      	adds	r3, r0, #1
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	d106      	bne.n	8009bda <__sflush_r+0x62>
 8009bcc:	6829      	ldr	r1, [r5, #0]
 8009bce:	291d      	cmp	r1, #29
 8009bd0:	d82b      	bhi.n	8009c2a <__sflush_r+0xb2>
 8009bd2:	4a2a      	ldr	r2, [pc, #168]	@ (8009c7c <__sflush_r+0x104>)
 8009bd4:	410a      	asrs	r2, r1
 8009bd6:	07d6      	lsls	r6, r2, #31
 8009bd8:	d427      	bmi.n	8009c2a <__sflush_r+0xb2>
 8009bda:	2200      	movs	r2, #0
 8009bdc:	6062      	str	r2, [r4, #4]
 8009bde:	04d9      	lsls	r1, r3, #19
 8009be0:	6922      	ldr	r2, [r4, #16]
 8009be2:	6022      	str	r2, [r4, #0]
 8009be4:	d504      	bpl.n	8009bf0 <__sflush_r+0x78>
 8009be6:	1c42      	adds	r2, r0, #1
 8009be8:	d101      	bne.n	8009bee <__sflush_r+0x76>
 8009bea:	682b      	ldr	r3, [r5, #0]
 8009bec:	b903      	cbnz	r3, 8009bf0 <__sflush_r+0x78>
 8009bee:	6560      	str	r0, [r4, #84]	@ 0x54
 8009bf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bf2:	602f      	str	r7, [r5, #0]
 8009bf4:	b1b9      	cbz	r1, 8009c26 <__sflush_r+0xae>
 8009bf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bfa:	4299      	cmp	r1, r3
 8009bfc:	d002      	beq.n	8009c04 <__sflush_r+0x8c>
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f7fe f8ea 	bl	8007dd8 <_free_r>
 8009c04:	2300      	movs	r3, #0
 8009c06:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c08:	e00d      	b.n	8009c26 <__sflush_r+0xae>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	47b0      	blx	r6
 8009c10:	4602      	mov	r2, r0
 8009c12:	1c50      	adds	r0, r2, #1
 8009c14:	d1c9      	bne.n	8009baa <__sflush_r+0x32>
 8009c16:	682b      	ldr	r3, [r5, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d0c6      	beq.n	8009baa <__sflush_r+0x32>
 8009c1c:	2b1d      	cmp	r3, #29
 8009c1e:	d001      	beq.n	8009c24 <__sflush_r+0xac>
 8009c20:	2b16      	cmp	r3, #22
 8009c22:	d11e      	bne.n	8009c62 <__sflush_r+0xea>
 8009c24:	602f      	str	r7, [r5, #0]
 8009c26:	2000      	movs	r0, #0
 8009c28:	e022      	b.n	8009c70 <__sflush_r+0xf8>
 8009c2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c2e:	b21b      	sxth	r3, r3
 8009c30:	e01b      	b.n	8009c6a <__sflush_r+0xf2>
 8009c32:	690f      	ldr	r7, [r1, #16]
 8009c34:	2f00      	cmp	r7, #0
 8009c36:	d0f6      	beq.n	8009c26 <__sflush_r+0xae>
 8009c38:	0793      	lsls	r3, r2, #30
 8009c3a:	680e      	ldr	r6, [r1, #0]
 8009c3c:	bf08      	it	eq
 8009c3e:	694b      	ldreq	r3, [r1, #20]
 8009c40:	600f      	str	r7, [r1, #0]
 8009c42:	bf18      	it	ne
 8009c44:	2300      	movne	r3, #0
 8009c46:	eba6 0807 	sub.w	r8, r6, r7
 8009c4a:	608b      	str	r3, [r1, #8]
 8009c4c:	f1b8 0f00 	cmp.w	r8, #0
 8009c50:	dde9      	ble.n	8009c26 <__sflush_r+0xae>
 8009c52:	6a21      	ldr	r1, [r4, #32]
 8009c54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009c56:	4643      	mov	r3, r8
 8009c58:	463a      	mov	r2, r7
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	47b0      	blx	r6
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	dc08      	bgt.n	8009c74 <__sflush_r+0xfc>
 8009c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c6a:	81a3      	strh	r3, [r4, #12]
 8009c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c74:	4407      	add	r7, r0
 8009c76:	eba8 0800 	sub.w	r8, r8, r0
 8009c7a:	e7e7      	b.n	8009c4c <__sflush_r+0xd4>
 8009c7c:	dfbffffe 	.word	0xdfbffffe

08009c80 <_fflush_r>:
 8009c80:	b538      	push	{r3, r4, r5, lr}
 8009c82:	690b      	ldr	r3, [r1, #16]
 8009c84:	4605      	mov	r5, r0
 8009c86:	460c      	mov	r4, r1
 8009c88:	b913      	cbnz	r3, 8009c90 <_fflush_r+0x10>
 8009c8a:	2500      	movs	r5, #0
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	bd38      	pop	{r3, r4, r5, pc}
 8009c90:	b118      	cbz	r0, 8009c9a <_fflush_r+0x1a>
 8009c92:	6a03      	ldr	r3, [r0, #32]
 8009c94:	b90b      	cbnz	r3, 8009c9a <_fflush_r+0x1a>
 8009c96:	f7fd f82d 	bl	8006cf4 <__sinit>
 8009c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d0f3      	beq.n	8009c8a <_fflush_r+0xa>
 8009ca2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ca4:	07d0      	lsls	r0, r2, #31
 8009ca6:	d404      	bmi.n	8009cb2 <_fflush_r+0x32>
 8009ca8:	0599      	lsls	r1, r3, #22
 8009caa:	d402      	bmi.n	8009cb2 <_fflush_r+0x32>
 8009cac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cae:	f7fd fa3c 	bl	800712a <__retarget_lock_acquire_recursive>
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	f7ff ff5f 	bl	8009b78 <__sflush_r>
 8009cba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cbc:	07da      	lsls	r2, r3, #31
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	d4e4      	bmi.n	8009c8c <_fflush_r+0xc>
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	059b      	lsls	r3, r3, #22
 8009cc6:	d4e1      	bmi.n	8009c8c <_fflush_r+0xc>
 8009cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cca:	f7fd fa2f 	bl	800712c <__retarget_lock_release_recursive>
 8009cce:	e7dd      	b.n	8009c8c <_fflush_r+0xc>

08009cd0 <__swhatbuf_r>:
 8009cd0:	b570      	push	{r4, r5, r6, lr}
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd8:	2900      	cmp	r1, #0
 8009cda:	b096      	sub	sp, #88	@ 0x58
 8009cdc:	4615      	mov	r5, r2
 8009cde:	461e      	mov	r6, r3
 8009ce0:	da0d      	bge.n	8009cfe <__swhatbuf_r+0x2e>
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ce8:	f04f 0100 	mov.w	r1, #0
 8009cec:	bf14      	ite	ne
 8009cee:	2340      	movne	r3, #64	@ 0x40
 8009cf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	6031      	str	r1, [r6, #0]
 8009cf8:	602b      	str	r3, [r5, #0]
 8009cfa:	b016      	add	sp, #88	@ 0x58
 8009cfc:	bd70      	pop	{r4, r5, r6, pc}
 8009cfe:	466a      	mov	r2, sp
 8009d00:	f000 f874 	bl	8009dec <_fstat_r>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	dbec      	blt.n	8009ce2 <__swhatbuf_r+0x12>
 8009d08:	9901      	ldr	r1, [sp, #4]
 8009d0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d12:	4259      	negs	r1, r3
 8009d14:	4159      	adcs	r1, r3
 8009d16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d1a:	e7eb      	b.n	8009cf4 <__swhatbuf_r+0x24>

08009d1c <__smakebuf_r>:
 8009d1c:	898b      	ldrh	r3, [r1, #12]
 8009d1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d20:	079d      	lsls	r5, r3, #30
 8009d22:	4606      	mov	r6, r0
 8009d24:	460c      	mov	r4, r1
 8009d26:	d507      	bpl.n	8009d38 <__smakebuf_r+0x1c>
 8009d28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	6123      	str	r3, [r4, #16]
 8009d30:	2301      	movs	r3, #1
 8009d32:	6163      	str	r3, [r4, #20]
 8009d34:	b003      	add	sp, #12
 8009d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d38:	ab01      	add	r3, sp, #4
 8009d3a:	466a      	mov	r2, sp
 8009d3c:	f7ff ffc8 	bl	8009cd0 <__swhatbuf_r>
 8009d40:	9f00      	ldr	r7, [sp, #0]
 8009d42:	4605      	mov	r5, r0
 8009d44:	4639      	mov	r1, r7
 8009d46:	4630      	mov	r0, r6
 8009d48:	f7fe f8ba 	bl	8007ec0 <_malloc_r>
 8009d4c:	b948      	cbnz	r0, 8009d62 <__smakebuf_r+0x46>
 8009d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d52:	059a      	lsls	r2, r3, #22
 8009d54:	d4ee      	bmi.n	8009d34 <__smakebuf_r+0x18>
 8009d56:	f023 0303 	bic.w	r3, r3, #3
 8009d5a:	f043 0302 	orr.w	r3, r3, #2
 8009d5e:	81a3      	strh	r3, [r4, #12]
 8009d60:	e7e2      	b.n	8009d28 <__smakebuf_r+0xc>
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	6020      	str	r0, [r4, #0]
 8009d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d6a:	81a3      	strh	r3, [r4, #12]
 8009d6c:	9b01      	ldr	r3, [sp, #4]
 8009d6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d72:	b15b      	cbz	r3, 8009d8c <__smakebuf_r+0x70>
 8009d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d78:	4630      	mov	r0, r6
 8009d7a:	f000 f849 	bl	8009e10 <_isatty_r>
 8009d7e:	b128      	cbz	r0, 8009d8c <__smakebuf_r+0x70>
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	f023 0303 	bic.w	r3, r3, #3
 8009d86:	f043 0301 	orr.w	r3, r3, #1
 8009d8a:	81a3      	strh	r3, [r4, #12]
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	431d      	orrs	r5, r3
 8009d90:	81a5      	strh	r5, [r4, #12]
 8009d92:	e7cf      	b.n	8009d34 <__smakebuf_r+0x18>

08009d94 <memmove>:
 8009d94:	4288      	cmp	r0, r1
 8009d96:	b510      	push	{r4, lr}
 8009d98:	eb01 0402 	add.w	r4, r1, r2
 8009d9c:	d902      	bls.n	8009da4 <memmove+0x10>
 8009d9e:	4284      	cmp	r4, r0
 8009da0:	4623      	mov	r3, r4
 8009da2:	d807      	bhi.n	8009db4 <memmove+0x20>
 8009da4:	1e43      	subs	r3, r0, #1
 8009da6:	42a1      	cmp	r1, r4
 8009da8:	d008      	beq.n	8009dbc <memmove+0x28>
 8009daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009db2:	e7f8      	b.n	8009da6 <memmove+0x12>
 8009db4:	4402      	add	r2, r0
 8009db6:	4601      	mov	r1, r0
 8009db8:	428a      	cmp	r2, r1
 8009dba:	d100      	bne.n	8009dbe <memmove+0x2a>
 8009dbc:	bd10      	pop	{r4, pc}
 8009dbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dc6:	e7f7      	b.n	8009db8 <memmove+0x24>

08009dc8 <strncmp>:
 8009dc8:	b510      	push	{r4, lr}
 8009dca:	b16a      	cbz	r2, 8009de8 <strncmp+0x20>
 8009dcc:	3901      	subs	r1, #1
 8009dce:	1884      	adds	r4, r0, r2
 8009dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dd4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d103      	bne.n	8009de4 <strncmp+0x1c>
 8009ddc:	42a0      	cmp	r0, r4
 8009dde:	d001      	beq.n	8009de4 <strncmp+0x1c>
 8009de0:	2a00      	cmp	r2, #0
 8009de2:	d1f5      	bne.n	8009dd0 <strncmp+0x8>
 8009de4:	1ad0      	subs	r0, r2, r3
 8009de6:	bd10      	pop	{r4, pc}
 8009de8:	4610      	mov	r0, r2
 8009dea:	e7fc      	b.n	8009de6 <strncmp+0x1e>

08009dec <_fstat_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4d07      	ldr	r5, [pc, #28]	@ (8009e0c <_fstat_r+0x20>)
 8009df0:	2300      	movs	r3, #0
 8009df2:	4604      	mov	r4, r0
 8009df4:	4608      	mov	r0, r1
 8009df6:	4611      	mov	r1, r2
 8009df8:	602b      	str	r3, [r5, #0]
 8009dfa:	f7f7 ff0f 	bl	8001c1c <_fstat>
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	d102      	bne.n	8009e08 <_fstat_r+0x1c>
 8009e02:	682b      	ldr	r3, [r5, #0]
 8009e04:	b103      	cbz	r3, 8009e08 <_fstat_r+0x1c>
 8009e06:	6023      	str	r3, [r4, #0]
 8009e08:	bd38      	pop	{r3, r4, r5, pc}
 8009e0a:	bf00      	nop
 8009e0c:	200005a4 	.word	0x200005a4

08009e10 <_isatty_r>:
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	4d06      	ldr	r5, [pc, #24]	@ (8009e2c <_isatty_r+0x1c>)
 8009e14:	2300      	movs	r3, #0
 8009e16:	4604      	mov	r4, r0
 8009e18:	4608      	mov	r0, r1
 8009e1a:	602b      	str	r3, [r5, #0]
 8009e1c:	f7f7 ff0e 	bl	8001c3c <_isatty>
 8009e20:	1c43      	adds	r3, r0, #1
 8009e22:	d102      	bne.n	8009e2a <_isatty_r+0x1a>
 8009e24:	682b      	ldr	r3, [r5, #0]
 8009e26:	b103      	cbz	r3, 8009e2a <_isatty_r+0x1a>
 8009e28:	6023      	str	r3, [r4, #0]
 8009e2a:	bd38      	pop	{r3, r4, r5, pc}
 8009e2c:	200005a4 	.word	0x200005a4

08009e30 <_sbrk_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	4d06      	ldr	r5, [pc, #24]	@ (8009e4c <_sbrk_r+0x1c>)
 8009e34:	2300      	movs	r3, #0
 8009e36:	4604      	mov	r4, r0
 8009e38:	4608      	mov	r0, r1
 8009e3a:	602b      	str	r3, [r5, #0]
 8009e3c:	f7f7 ff16 	bl	8001c6c <_sbrk>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_sbrk_r+0x1a>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_sbrk_r+0x1a>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	200005a4 	.word	0x200005a4

08009e50 <memcpy>:
 8009e50:	440a      	add	r2, r1
 8009e52:	4291      	cmp	r1, r2
 8009e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e58:	d100      	bne.n	8009e5c <memcpy+0xc>
 8009e5a:	4770      	bx	lr
 8009e5c:	b510      	push	{r4, lr}
 8009e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e66:	4291      	cmp	r1, r2
 8009e68:	d1f9      	bne.n	8009e5e <memcpy+0xe>
 8009e6a:	bd10      	pop	{r4, pc}
 8009e6c:	0000      	movs	r0, r0
	...

08009e70 <nan>:
 8009e70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009e78 <nan+0x8>
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	00000000 	.word	0x00000000
 8009e7c:	7ff80000 	.word	0x7ff80000

08009e80 <__assert_func>:
 8009e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e82:	4614      	mov	r4, r2
 8009e84:	461a      	mov	r2, r3
 8009e86:	4b09      	ldr	r3, [pc, #36]	@ (8009eac <__assert_func+0x2c>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4605      	mov	r5, r0
 8009e8c:	68d8      	ldr	r0, [r3, #12]
 8009e8e:	b954      	cbnz	r4, 8009ea6 <__assert_func+0x26>
 8009e90:	4b07      	ldr	r3, [pc, #28]	@ (8009eb0 <__assert_func+0x30>)
 8009e92:	461c      	mov	r4, r3
 8009e94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e98:	9100      	str	r1, [sp, #0]
 8009e9a:	462b      	mov	r3, r5
 8009e9c:	4905      	ldr	r1, [pc, #20]	@ (8009eb4 <__assert_func+0x34>)
 8009e9e:	f000 fba7 	bl	800a5f0 <fiprintf>
 8009ea2:	f000 fbb7 	bl	800a614 <abort>
 8009ea6:	4b04      	ldr	r3, [pc, #16]	@ (8009eb8 <__assert_func+0x38>)
 8009ea8:	e7f4      	b.n	8009e94 <__assert_func+0x14>
 8009eaa:	bf00      	nop
 8009eac:	200000a8 	.word	0x200000a8
 8009eb0:	0800b2cd 	.word	0x0800b2cd
 8009eb4:	0800b29f 	.word	0x0800b29f
 8009eb8:	0800b292 	.word	0x0800b292

08009ebc <_calloc_r>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	fba1 5402 	umull	r5, r4, r1, r2
 8009ec2:	b93c      	cbnz	r4, 8009ed4 <_calloc_r+0x18>
 8009ec4:	4629      	mov	r1, r5
 8009ec6:	f7fd fffb 	bl	8007ec0 <_malloc_r>
 8009eca:	4606      	mov	r6, r0
 8009ecc:	b928      	cbnz	r0, 8009eda <_calloc_r+0x1e>
 8009ece:	2600      	movs	r6, #0
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	bd70      	pop	{r4, r5, r6, pc}
 8009ed4:	220c      	movs	r2, #12
 8009ed6:	6002      	str	r2, [r0, #0]
 8009ed8:	e7f9      	b.n	8009ece <_calloc_r+0x12>
 8009eda:	462a      	mov	r2, r5
 8009edc:	4621      	mov	r1, r4
 8009ede:	f7fd f8a7 	bl	8007030 <memset>
 8009ee2:	e7f5      	b.n	8009ed0 <_calloc_r+0x14>

08009ee4 <rshift>:
 8009ee4:	6903      	ldr	r3, [r0, #16]
 8009ee6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009eea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009eee:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ef2:	f100 0414 	add.w	r4, r0, #20
 8009ef6:	dd45      	ble.n	8009f84 <rshift+0xa0>
 8009ef8:	f011 011f 	ands.w	r1, r1, #31
 8009efc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f04:	d10c      	bne.n	8009f20 <rshift+0x3c>
 8009f06:	f100 0710 	add.w	r7, r0, #16
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	42b1      	cmp	r1, r6
 8009f0e:	d334      	bcc.n	8009f7a <rshift+0x96>
 8009f10:	1a9b      	subs	r3, r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	1eea      	subs	r2, r5, #3
 8009f16:	4296      	cmp	r6, r2
 8009f18:	bf38      	it	cc
 8009f1a:	2300      	movcc	r3, #0
 8009f1c:	4423      	add	r3, r4
 8009f1e:	e015      	b.n	8009f4c <rshift+0x68>
 8009f20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f24:	f1c1 0820 	rsb	r8, r1, #32
 8009f28:	40cf      	lsrs	r7, r1
 8009f2a:	f105 0e04 	add.w	lr, r5, #4
 8009f2e:	46a1      	mov	r9, r4
 8009f30:	4576      	cmp	r6, lr
 8009f32:	46f4      	mov	ip, lr
 8009f34:	d815      	bhi.n	8009f62 <rshift+0x7e>
 8009f36:	1a9a      	subs	r2, r3, r2
 8009f38:	0092      	lsls	r2, r2, #2
 8009f3a:	3a04      	subs	r2, #4
 8009f3c:	3501      	adds	r5, #1
 8009f3e:	42ae      	cmp	r6, r5
 8009f40:	bf38      	it	cc
 8009f42:	2200      	movcc	r2, #0
 8009f44:	18a3      	adds	r3, r4, r2
 8009f46:	50a7      	str	r7, [r4, r2]
 8009f48:	b107      	cbz	r7, 8009f4c <rshift+0x68>
 8009f4a:	3304      	adds	r3, #4
 8009f4c:	1b1a      	subs	r2, r3, r4
 8009f4e:	42a3      	cmp	r3, r4
 8009f50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f54:	bf08      	it	eq
 8009f56:	2300      	moveq	r3, #0
 8009f58:	6102      	str	r2, [r0, #16]
 8009f5a:	bf08      	it	eq
 8009f5c:	6143      	streq	r3, [r0, #20]
 8009f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f62:	f8dc c000 	ldr.w	ip, [ip]
 8009f66:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f6a:	ea4c 0707 	orr.w	r7, ip, r7
 8009f6e:	f849 7b04 	str.w	r7, [r9], #4
 8009f72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f76:	40cf      	lsrs	r7, r1
 8009f78:	e7da      	b.n	8009f30 <rshift+0x4c>
 8009f7a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f7e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f82:	e7c3      	b.n	8009f0c <rshift+0x28>
 8009f84:	4623      	mov	r3, r4
 8009f86:	e7e1      	b.n	8009f4c <rshift+0x68>

08009f88 <__hexdig_fun>:
 8009f88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009f8c:	2b09      	cmp	r3, #9
 8009f8e:	d802      	bhi.n	8009f96 <__hexdig_fun+0xe>
 8009f90:	3820      	subs	r0, #32
 8009f92:	b2c0      	uxtb	r0, r0
 8009f94:	4770      	bx	lr
 8009f96:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009f9a:	2b05      	cmp	r3, #5
 8009f9c:	d801      	bhi.n	8009fa2 <__hexdig_fun+0x1a>
 8009f9e:	3847      	subs	r0, #71	@ 0x47
 8009fa0:	e7f7      	b.n	8009f92 <__hexdig_fun+0xa>
 8009fa2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009fa6:	2b05      	cmp	r3, #5
 8009fa8:	d801      	bhi.n	8009fae <__hexdig_fun+0x26>
 8009faa:	3827      	subs	r0, #39	@ 0x27
 8009fac:	e7f1      	b.n	8009f92 <__hexdig_fun+0xa>
 8009fae:	2000      	movs	r0, #0
 8009fb0:	4770      	bx	lr
	...

08009fb4 <__gethex>:
 8009fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	b085      	sub	sp, #20
 8009fba:	468a      	mov	sl, r1
 8009fbc:	9302      	str	r3, [sp, #8]
 8009fbe:	680b      	ldr	r3, [r1, #0]
 8009fc0:	9001      	str	r0, [sp, #4]
 8009fc2:	4690      	mov	r8, r2
 8009fc4:	1c9c      	adds	r4, r3, #2
 8009fc6:	46a1      	mov	r9, r4
 8009fc8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009fcc:	2830      	cmp	r0, #48	@ 0x30
 8009fce:	d0fa      	beq.n	8009fc6 <__gethex+0x12>
 8009fd0:	eba9 0303 	sub.w	r3, r9, r3
 8009fd4:	f1a3 0b02 	sub.w	fp, r3, #2
 8009fd8:	f7ff ffd6 	bl	8009f88 <__hexdig_fun>
 8009fdc:	4605      	mov	r5, r0
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d168      	bne.n	800a0b4 <__gethex+0x100>
 8009fe2:	49a0      	ldr	r1, [pc, #640]	@ (800a264 <__gethex+0x2b0>)
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	4648      	mov	r0, r9
 8009fe8:	f7ff feee 	bl	8009dc8 <strncmp>
 8009fec:	4607      	mov	r7, r0
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d167      	bne.n	800a0c2 <__gethex+0x10e>
 8009ff2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009ff6:	4626      	mov	r6, r4
 8009ff8:	f7ff ffc6 	bl	8009f88 <__hexdig_fun>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d062      	beq.n	800a0c6 <__gethex+0x112>
 800a000:	4623      	mov	r3, r4
 800a002:	7818      	ldrb	r0, [r3, #0]
 800a004:	2830      	cmp	r0, #48	@ 0x30
 800a006:	4699      	mov	r9, r3
 800a008:	f103 0301 	add.w	r3, r3, #1
 800a00c:	d0f9      	beq.n	800a002 <__gethex+0x4e>
 800a00e:	f7ff ffbb 	bl	8009f88 <__hexdig_fun>
 800a012:	fab0 f580 	clz	r5, r0
 800a016:	096d      	lsrs	r5, r5, #5
 800a018:	f04f 0b01 	mov.w	fp, #1
 800a01c:	464a      	mov	r2, r9
 800a01e:	4616      	mov	r6, r2
 800a020:	3201      	adds	r2, #1
 800a022:	7830      	ldrb	r0, [r6, #0]
 800a024:	f7ff ffb0 	bl	8009f88 <__hexdig_fun>
 800a028:	2800      	cmp	r0, #0
 800a02a:	d1f8      	bne.n	800a01e <__gethex+0x6a>
 800a02c:	498d      	ldr	r1, [pc, #564]	@ (800a264 <__gethex+0x2b0>)
 800a02e:	2201      	movs	r2, #1
 800a030:	4630      	mov	r0, r6
 800a032:	f7ff fec9 	bl	8009dc8 <strncmp>
 800a036:	2800      	cmp	r0, #0
 800a038:	d13f      	bne.n	800a0ba <__gethex+0x106>
 800a03a:	b944      	cbnz	r4, 800a04e <__gethex+0x9a>
 800a03c:	1c74      	adds	r4, r6, #1
 800a03e:	4622      	mov	r2, r4
 800a040:	4616      	mov	r6, r2
 800a042:	3201      	adds	r2, #1
 800a044:	7830      	ldrb	r0, [r6, #0]
 800a046:	f7ff ff9f 	bl	8009f88 <__hexdig_fun>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	d1f8      	bne.n	800a040 <__gethex+0x8c>
 800a04e:	1ba4      	subs	r4, r4, r6
 800a050:	00a7      	lsls	r7, r4, #2
 800a052:	7833      	ldrb	r3, [r6, #0]
 800a054:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a058:	2b50      	cmp	r3, #80	@ 0x50
 800a05a:	d13e      	bne.n	800a0da <__gethex+0x126>
 800a05c:	7873      	ldrb	r3, [r6, #1]
 800a05e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a060:	d033      	beq.n	800a0ca <__gethex+0x116>
 800a062:	2b2d      	cmp	r3, #45	@ 0x2d
 800a064:	d034      	beq.n	800a0d0 <__gethex+0x11c>
 800a066:	1c71      	adds	r1, r6, #1
 800a068:	2400      	movs	r4, #0
 800a06a:	7808      	ldrb	r0, [r1, #0]
 800a06c:	f7ff ff8c 	bl	8009f88 <__hexdig_fun>
 800a070:	1e43      	subs	r3, r0, #1
 800a072:	b2db      	uxtb	r3, r3
 800a074:	2b18      	cmp	r3, #24
 800a076:	d830      	bhi.n	800a0da <__gethex+0x126>
 800a078:	f1a0 0210 	sub.w	r2, r0, #16
 800a07c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a080:	f7ff ff82 	bl	8009f88 <__hexdig_fun>
 800a084:	f100 3cff 	add.w	ip, r0, #4294967295
 800a088:	fa5f fc8c 	uxtb.w	ip, ip
 800a08c:	f1bc 0f18 	cmp.w	ip, #24
 800a090:	f04f 030a 	mov.w	r3, #10
 800a094:	d91e      	bls.n	800a0d4 <__gethex+0x120>
 800a096:	b104      	cbz	r4, 800a09a <__gethex+0xe6>
 800a098:	4252      	negs	r2, r2
 800a09a:	4417      	add	r7, r2
 800a09c:	f8ca 1000 	str.w	r1, [sl]
 800a0a0:	b1ed      	cbz	r5, 800a0de <__gethex+0x12a>
 800a0a2:	f1bb 0f00 	cmp.w	fp, #0
 800a0a6:	bf0c      	ite	eq
 800a0a8:	2506      	moveq	r5, #6
 800a0aa:	2500      	movne	r5, #0
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	b005      	add	sp, #20
 800a0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b4:	2500      	movs	r5, #0
 800a0b6:	462c      	mov	r4, r5
 800a0b8:	e7b0      	b.n	800a01c <__gethex+0x68>
 800a0ba:	2c00      	cmp	r4, #0
 800a0bc:	d1c7      	bne.n	800a04e <__gethex+0x9a>
 800a0be:	4627      	mov	r7, r4
 800a0c0:	e7c7      	b.n	800a052 <__gethex+0x9e>
 800a0c2:	464e      	mov	r6, r9
 800a0c4:	462f      	mov	r7, r5
 800a0c6:	2501      	movs	r5, #1
 800a0c8:	e7c3      	b.n	800a052 <__gethex+0x9e>
 800a0ca:	2400      	movs	r4, #0
 800a0cc:	1cb1      	adds	r1, r6, #2
 800a0ce:	e7cc      	b.n	800a06a <__gethex+0xb6>
 800a0d0:	2401      	movs	r4, #1
 800a0d2:	e7fb      	b.n	800a0cc <__gethex+0x118>
 800a0d4:	fb03 0002 	mla	r0, r3, r2, r0
 800a0d8:	e7ce      	b.n	800a078 <__gethex+0xc4>
 800a0da:	4631      	mov	r1, r6
 800a0dc:	e7de      	b.n	800a09c <__gethex+0xe8>
 800a0de:	eba6 0309 	sub.w	r3, r6, r9
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	2b07      	cmp	r3, #7
 800a0e8:	dc0a      	bgt.n	800a100 <__gethex+0x14c>
 800a0ea:	9801      	ldr	r0, [sp, #4]
 800a0ec:	f7fd ff74 	bl	8007fd8 <_Balloc>
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	b940      	cbnz	r0, 800a106 <__gethex+0x152>
 800a0f4:	4b5c      	ldr	r3, [pc, #368]	@ (800a268 <__gethex+0x2b4>)
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	21e4      	movs	r1, #228	@ 0xe4
 800a0fa:	485c      	ldr	r0, [pc, #368]	@ (800a26c <__gethex+0x2b8>)
 800a0fc:	f7ff fec0 	bl	8009e80 <__assert_func>
 800a100:	3101      	adds	r1, #1
 800a102:	105b      	asrs	r3, r3, #1
 800a104:	e7ef      	b.n	800a0e6 <__gethex+0x132>
 800a106:	f100 0a14 	add.w	sl, r0, #20
 800a10a:	2300      	movs	r3, #0
 800a10c:	4655      	mov	r5, sl
 800a10e:	469b      	mov	fp, r3
 800a110:	45b1      	cmp	r9, r6
 800a112:	d337      	bcc.n	800a184 <__gethex+0x1d0>
 800a114:	f845 bb04 	str.w	fp, [r5], #4
 800a118:	eba5 050a 	sub.w	r5, r5, sl
 800a11c:	10ad      	asrs	r5, r5, #2
 800a11e:	6125      	str	r5, [r4, #16]
 800a120:	4658      	mov	r0, fp
 800a122:	f7fe f84b 	bl	80081bc <__hi0bits>
 800a126:	016d      	lsls	r5, r5, #5
 800a128:	f8d8 6000 	ldr.w	r6, [r8]
 800a12c:	1a2d      	subs	r5, r5, r0
 800a12e:	42b5      	cmp	r5, r6
 800a130:	dd54      	ble.n	800a1dc <__gethex+0x228>
 800a132:	1bad      	subs	r5, r5, r6
 800a134:	4629      	mov	r1, r5
 800a136:	4620      	mov	r0, r4
 800a138:	f7fe fbdf 	bl	80088fa <__any_on>
 800a13c:	4681      	mov	r9, r0
 800a13e:	b178      	cbz	r0, 800a160 <__gethex+0x1ac>
 800a140:	1e6b      	subs	r3, r5, #1
 800a142:	1159      	asrs	r1, r3, #5
 800a144:	f003 021f 	and.w	r2, r3, #31
 800a148:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a14c:	f04f 0901 	mov.w	r9, #1
 800a150:	fa09 f202 	lsl.w	r2, r9, r2
 800a154:	420a      	tst	r2, r1
 800a156:	d003      	beq.n	800a160 <__gethex+0x1ac>
 800a158:	454b      	cmp	r3, r9
 800a15a:	dc36      	bgt.n	800a1ca <__gethex+0x216>
 800a15c:	f04f 0902 	mov.w	r9, #2
 800a160:	4629      	mov	r1, r5
 800a162:	4620      	mov	r0, r4
 800a164:	f7ff febe 	bl	8009ee4 <rshift>
 800a168:	442f      	add	r7, r5
 800a16a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a16e:	42bb      	cmp	r3, r7
 800a170:	da42      	bge.n	800a1f8 <__gethex+0x244>
 800a172:	9801      	ldr	r0, [sp, #4]
 800a174:	4621      	mov	r1, r4
 800a176:	f7fd ff6f 	bl	8008058 <_Bfree>
 800a17a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a17c:	2300      	movs	r3, #0
 800a17e:	6013      	str	r3, [r2, #0]
 800a180:	25a3      	movs	r5, #163	@ 0xa3
 800a182:	e793      	b.n	800a0ac <__gethex+0xf8>
 800a184:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a188:	2a2e      	cmp	r2, #46	@ 0x2e
 800a18a:	d012      	beq.n	800a1b2 <__gethex+0x1fe>
 800a18c:	2b20      	cmp	r3, #32
 800a18e:	d104      	bne.n	800a19a <__gethex+0x1e6>
 800a190:	f845 bb04 	str.w	fp, [r5], #4
 800a194:	f04f 0b00 	mov.w	fp, #0
 800a198:	465b      	mov	r3, fp
 800a19a:	7830      	ldrb	r0, [r6, #0]
 800a19c:	9303      	str	r3, [sp, #12]
 800a19e:	f7ff fef3 	bl	8009f88 <__hexdig_fun>
 800a1a2:	9b03      	ldr	r3, [sp, #12]
 800a1a4:	f000 000f 	and.w	r0, r0, #15
 800a1a8:	4098      	lsls	r0, r3
 800a1aa:	ea4b 0b00 	orr.w	fp, fp, r0
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	e7ae      	b.n	800a110 <__gethex+0x15c>
 800a1b2:	45b1      	cmp	r9, r6
 800a1b4:	d8ea      	bhi.n	800a18c <__gethex+0x1d8>
 800a1b6:	492b      	ldr	r1, [pc, #172]	@ (800a264 <__gethex+0x2b0>)
 800a1b8:	9303      	str	r3, [sp, #12]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f7ff fe03 	bl	8009dc8 <strncmp>
 800a1c2:	9b03      	ldr	r3, [sp, #12]
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d1e1      	bne.n	800a18c <__gethex+0x1d8>
 800a1c8:	e7a2      	b.n	800a110 <__gethex+0x15c>
 800a1ca:	1ea9      	subs	r1, r5, #2
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f7fe fb94 	bl	80088fa <__any_on>
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d0c2      	beq.n	800a15c <__gethex+0x1a8>
 800a1d6:	f04f 0903 	mov.w	r9, #3
 800a1da:	e7c1      	b.n	800a160 <__gethex+0x1ac>
 800a1dc:	da09      	bge.n	800a1f2 <__gethex+0x23e>
 800a1de:	1b75      	subs	r5, r6, r5
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	9801      	ldr	r0, [sp, #4]
 800a1e4:	462a      	mov	r2, r5
 800a1e6:	f7fe f94f 	bl	8008488 <__lshift>
 800a1ea:	1b7f      	subs	r7, r7, r5
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	f100 0a14 	add.w	sl, r0, #20
 800a1f2:	f04f 0900 	mov.w	r9, #0
 800a1f6:	e7b8      	b.n	800a16a <__gethex+0x1b6>
 800a1f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a1fc:	42bd      	cmp	r5, r7
 800a1fe:	dd6f      	ble.n	800a2e0 <__gethex+0x32c>
 800a200:	1bed      	subs	r5, r5, r7
 800a202:	42ae      	cmp	r6, r5
 800a204:	dc34      	bgt.n	800a270 <__gethex+0x2bc>
 800a206:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d022      	beq.n	800a254 <__gethex+0x2a0>
 800a20e:	2b03      	cmp	r3, #3
 800a210:	d024      	beq.n	800a25c <__gethex+0x2a8>
 800a212:	2b01      	cmp	r3, #1
 800a214:	d115      	bne.n	800a242 <__gethex+0x28e>
 800a216:	42ae      	cmp	r6, r5
 800a218:	d113      	bne.n	800a242 <__gethex+0x28e>
 800a21a:	2e01      	cmp	r6, #1
 800a21c:	d10b      	bne.n	800a236 <__gethex+0x282>
 800a21e:	9a02      	ldr	r2, [sp, #8]
 800a220:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a224:	6013      	str	r3, [r2, #0]
 800a226:	2301      	movs	r3, #1
 800a228:	6123      	str	r3, [r4, #16]
 800a22a:	f8ca 3000 	str.w	r3, [sl]
 800a22e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a230:	2562      	movs	r5, #98	@ 0x62
 800a232:	601c      	str	r4, [r3, #0]
 800a234:	e73a      	b.n	800a0ac <__gethex+0xf8>
 800a236:	1e71      	subs	r1, r6, #1
 800a238:	4620      	mov	r0, r4
 800a23a:	f7fe fb5e 	bl	80088fa <__any_on>
 800a23e:	2800      	cmp	r0, #0
 800a240:	d1ed      	bne.n	800a21e <__gethex+0x26a>
 800a242:	9801      	ldr	r0, [sp, #4]
 800a244:	4621      	mov	r1, r4
 800a246:	f7fd ff07 	bl	8008058 <_Bfree>
 800a24a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a24c:	2300      	movs	r3, #0
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	2550      	movs	r5, #80	@ 0x50
 800a252:	e72b      	b.n	800a0ac <__gethex+0xf8>
 800a254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1f3      	bne.n	800a242 <__gethex+0x28e>
 800a25a:	e7e0      	b.n	800a21e <__gethex+0x26a>
 800a25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1dd      	bne.n	800a21e <__gethex+0x26a>
 800a262:	e7ee      	b.n	800a242 <__gethex+0x28e>
 800a264:	0800b120 	.word	0x0800b120
 800a268:	0800afb5 	.word	0x0800afb5
 800a26c:	0800b2ce 	.word	0x0800b2ce
 800a270:	1e6f      	subs	r7, r5, #1
 800a272:	f1b9 0f00 	cmp.w	r9, #0
 800a276:	d130      	bne.n	800a2da <__gethex+0x326>
 800a278:	b127      	cbz	r7, 800a284 <__gethex+0x2d0>
 800a27a:	4639      	mov	r1, r7
 800a27c:	4620      	mov	r0, r4
 800a27e:	f7fe fb3c 	bl	80088fa <__any_on>
 800a282:	4681      	mov	r9, r0
 800a284:	117a      	asrs	r2, r7, #5
 800a286:	2301      	movs	r3, #1
 800a288:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a28c:	f007 071f 	and.w	r7, r7, #31
 800a290:	40bb      	lsls	r3, r7
 800a292:	4213      	tst	r3, r2
 800a294:	4629      	mov	r1, r5
 800a296:	4620      	mov	r0, r4
 800a298:	bf18      	it	ne
 800a29a:	f049 0902 	orrne.w	r9, r9, #2
 800a29e:	f7ff fe21 	bl	8009ee4 <rshift>
 800a2a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a2a6:	1b76      	subs	r6, r6, r5
 800a2a8:	2502      	movs	r5, #2
 800a2aa:	f1b9 0f00 	cmp.w	r9, #0
 800a2ae:	d047      	beq.n	800a340 <__gethex+0x38c>
 800a2b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2b4:	2b02      	cmp	r3, #2
 800a2b6:	d015      	beq.n	800a2e4 <__gethex+0x330>
 800a2b8:	2b03      	cmp	r3, #3
 800a2ba:	d017      	beq.n	800a2ec <__gethex+0x338>
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d109      	bne.n	800a2d4 <__gethex+0x320>
 800a2c0:	f019 0f02 	tst.w	r9, #2
 800a2c4:	d006      	beq.n	800a2d4 <__gethex+0x320>
 800a2c6:	f8da 3000 	ldr.w	r3, [sl]
 800a2ca:	ea49 0903 	orr.w	r9, r9, r3
 800a2ce:	f019 0f01 	tst.w	r9, #1
 800a2d2:	d10e      	bne.n	800a2f2 <__gethex+0x33e>
 800a2d4:	f045 0510 	orr.w	r5, r5, #16
 800a2d8:	e032      	b.n	800a340 <__gethex+0x38c>
 800a2da:	f04f 0901 	mov.w	r9, #1
 800a2de:	e7d1      	b.n	800a284 <__gethex+0x2d0>
 800a2e0:	2501      	movs	r5, #1
 800a2e2:	e7e2      	b.n	800a2aa <__gethex+0x2f6>
 800a2e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2e6:	f1c3 0301 	rsb	r3, r3, #1
 800a2ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d0f0      	beq.n	800a2d4 <__gethex+0x320>
 800a2f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a2f6:	f104 0314 	add.w	r3, r4, #20
 800a2fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a2fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a302:	f04f 0c00 	mov.w	ip, #0
 800a306:	4618      	mov	r0, r3
 800a308:	f853 2b04 	ldr.w	r2, [r3], #4
 800a30c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a310:	d01b      	beq.n	800a34a <__gethex+0x396>
 800a312:	3201      	adds	r2, #1
 800a314:	6002      	str	r2, [r0, #0]
 800a316:	2d02      	cmp	r5, #2
 800a318:	f104 0314 	add.w	r3, r4, #20
 800a31c:	d13c      	bne.n	800a398 <__gethex+0x3e4>
 800a31e:	f8d8 2000 	ldr.w	r2, [r8]
 800a322:	3a01      	subs	r2, #1
 800a324:	42b2      	cmp	r2, r6
 800a326:	d109      	bne.n	800a33c <__gethex+0x388>
 800a328:	1171      	asrs	r1, r6, #5
 800a32a:	2201      	movs	r2, #1
 800a32c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a330:	f006 061f 	and.w	r6, r6, #31
 800a334:	fa02 f606 	lsl.w	r6, r2, r6
 800a338:	421e      	tst	r6, r3
 800a33a:	d13a      	bne.n	800a3b2 <__gethex+0x3fe>
 800a33c:	f045 0520 	orr.w	r5, r5, #32
 800a340:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a342:	601c      	str	r4, [r3, #0]
 800a344:	9b02      	ldr	r3, [sp, #8]
 800a346:	601f      	str	r7, [r3, #0]
 800a348:	e6b0      	b.n	800a0ac <__gethex+0xf8>
 800a34a:	4299      	cmp	r1, r3
 800a34c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a350:	d8d9      	bhi.n	800a306 <__gethex+0x352>
 800a352:	68a3      	ldr	r3, [r4, #8]
 800a354:	459b      	cmp	fp, r3
 800a356:	db17      	blt.n	800a388 <__gethex+0x3d4>
 800a358:	6861      	ldr	r1, [r4, #4]
 800a35a:	9801      	ldr	r0, [sp, #4]
 800a35c:	3101      	adds	r1, #1
 800a35e:	f7fd fe3b 	bl	8007fd8 <_Balloc>
 800a362:	4681      	mov	r9, r0
 800a364:	b918      	cbnz	r0, 800a36e <__gethex+0x3ba>
 800a366:	4b1a      	ldr	r3, [pc, #104]	@ (800a3d0 <__gethex+0x41c>)
 800a368:	4602      	mov	r2, r0
 800a36a:	2184      	movs	r1, #132	@ 0x84
 800a36c:	e6c5      	b.n	800a0fa <__gethex+0x146>
 800a36e:	6922      	ldr	r2, [r4, #16]
 800a370:	3202      	adds	r2, #2
 800a372:	f104 010c 	add.w	r1, r4, #12
 800a376:	0092      	lsls	r2, r2, #2
 800a378:	300c      	adds	r0, #12
 800a37a:	f7ff fd69 	bl	8009e50 <memcpy>
 800a37e:	4621      	mov	r1, r4
 800a380:	9801      	ldr	r0, [sp, #4]
 800a382:	f7fd fe69 	bl	8008058 <_Bfree>
 800a386:	464c      	mov	r4, r9
 800a388:	6923      	ldr	r3, [r4, #16]
 800a38a:	1c5a      	adds	r2, r3, #1
 800a38c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a390:	6122      	str	r2, [r4, #16]
 800a392:	2201      	movs	r2, #1
 800a394:	615a      	str	r2, [r3, #20]
 800a396:	e7be      	b.n	800a316 <__gethex+0x362>
 800a398:	6922      	ldr	r2, [r4, #16]
 800a39a:	455a      	cmp	r2, fp
 800a39c:	dd0b      	ble.n	800a3b6 <__gethex+0x402>
 800a39e:	2101      	movs	r1, #1
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f7ff fd9f 	bl	8009ee4 <rshift>
 800a3a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a3aa:	3701      	adds	r7, #1
 800a3ac:	42bb      	cmp	r3, r7
 800a3ae:	f6ff aee0 	blt.w	800a172 <__gethex+0x1be>
 800a3b2:	2501      	movs	r5, #1
 800a3b4:	e7c2      	b.n	800a33c <__gethex+0x388>
 800a3b6:	f016 061f 	ands.w	r6, r6, #31
 800a3ba:	d0fa      	beq.n	800a3b2 <__gethex+0x3fe>
 800a3bc:	4453      	add	r3, sl
 800a3be:	f1c6 0620 	rsb	r6, r6, #32
 800a3c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a3c6:	f7fd fef9 	bl	80081bc <__hi0bits>
 800a3ca:	42b0      	cmp	r0, r6
 800a3cc:	dbe7      	blt.n	800a39e <__gethex+0x3ea>
 800a3ce:	e7f0      	b.n	800a3b2 <__gethex+0x3fe>
 800a3d0:	0800afb5 	.word	0x0800afb5

0800a3d4 <L_shift>:
 800a3d4:	f1c2 0208 	rsb	r2, r2, #8
 800a3d8:	0092      	lsls	r2, r2, #2
 800a3da:	b570      	push	{r4, r5, r6, lr}
 800a3dc:	f1c2 0620 	rsb	r6, r2, #32
 800a3e0:	6843      	ldr	r3, [r0, #4]
 800a3e2:	6804      	ldr	r4, [r0, #0]
 800a3e4:	fa03 f506 	lsl.w	r5, r3, r6
 800a3e8:	432c      	orrs	r4, r5
 800a3ea:	40d3      	lsrs	r3, r2
 800a3ec:	6004      	str	r4, [r0, #0]
 800a3ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800a3f2:	4288      	cmp	r0, r1
 800a3f4:	d3f4      	bcc.n	800a3e0 <L_shift+0xc>
 800a3f6:	bd70      	pop	{r4, r5, r6, pc}

0800a3f8 <__match>:
 800a3f8:	b530      	push	{r4, r5, lr}
 800a3fa:	6803      	ldr	r3, [r0, #0]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a402:	b914      	cbnz	r4, 800a40a <__match+0x12>
 800a404:	6003      	str	r3, [r0, #0]
 800a406:	2001      	movs	r0, #1
 800a408:	bd30      	pop	{r4, r5, pc}
 800a40a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a40e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a412:	2d19      	cmp	r5, #25
 800a414:	bf98      	it	ls
 800a416:	3220      	addls	r2, #32
 800a418:	42a2      	cmp	r2, r4
 800a41a:	d0f0      	beq.n	800a3fe <__match+0x6>
 800a41c:	2000      	movs	r0, #0
 800a41e:	e7f3      	b.n	800a408 <__match+0x10>

0800a420 <__hexnan>:
 800a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a424:	680b      	ldr	r3, [r1, #0]
 800a426:	6801      	ldr	r1, [r0, #0]
 800a428:	115e      	asrs	r6, r3, #5
 800a42a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a42e:	f013 031f 	ands.w	r3, r3, #31
 800a432:	b087      	sub	sp, #28
 800a434:	bf18      	it	ne
 800a436:	3604      	addne	r6, #4
 800a438:	2500      	movs	r5, #0
 800a43a:	1f37      	subs	r7, r6, #4
 800a43c:	4682      	mov	sl, r0
 800a43e:	4690      	mov	r8, r2
 800a440:	9301      	str	r3, [sp, #4]
 800a442:	f846 5c04 	str.w	r5, [r6, #-4]
 800a446:	46b9      	mov	r9, r7
 800a448:	463c      	mov	r4, r7
 800a44a:	9502      	str	r5, [sp, #8]
 800a44c:	46ab      	mov	fp, r5
 800a44e:	784a      	ldrb	r2, [r1, #1]
 800a450:	1c4b      	adds	r3, r1, #1
 800a452:	9303      	str	r3, [sp, #12]
 800a454:	b342      	cbz	r2, 800a4a8 <__hexnan+0x88>
 800a456:	4610      	mov	r0, r2
 800a458:	9105      	str	r1, [sp, #20]
 800a45a:	9204      	str	r2, [sp, #16]
 800a45c:	f7ff fd94 	bl	8009f88 <__hexdig_fun>
 800a460:	2800      	cmp	r0, #0
 800a462:	d151      	bne.n	800a508 <__hexnan+0xe8>
 800a464:	9a04      	ldr	r2, [sp, #16]
 800a466:	9905      	ldr	r1, [sp, #20]
 800a468:	2a20      	cmp	r2, #32
 800a46a:	d818      	bhi.n	800a49e <__hexnan+0x7e>
 800a46c:	9b02      	ldr	r3, [sp, #8]
 800a46e:	459b      	cmp	fp, r3
 800a470:	dd13      	ble.n	800a49a <__hexnan+0x7a>
 800a472:	454c      	cmp	r4, r9
 800a474:	d206      	bcs.n	800a484 <__hexnan+0x64>
 800a476:	2d07      	cmp	r5, #7
 800a478:	dc04      	bgt.n	800a484 <__hexnan+0x64>
 800a47a:	462a      	mov	r2, r5
 800a47c:	4649      	mov	r1, r9
 800a47e:	4620      	mov	r0, r4
 800a480:	f7ff ffa8 	bl	800a3d4 <L_shift>
 800a484:	4544      	cmp	r4, r8
 800a486:	d952      	bls.n	800a52e <__hexnan+0x10e>
 800a488:	2300      	movs	r3, #0
 800a48a:	f1a4 0904 	sub.w	r9, r4, #4
 800a48e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a492:	f8cd b008 	str.w	fp, [sp, #8]
 800a496:	464c      	mov	r4, r9
 800a498:	461d      	mov	r5, r3
 800a49a:	9903      	ldr	r1, [sp, #12]
 800a49c:	e7d7      	b.n	800a44e <__hexnan+0x2e>
 800a49e:	2a29      	cmp	r2, #41	@ 0x29
 800a4a0:	d157      	bne.n	800a552 <__hexnan+0x132>
 800a4a2:	3102      	adds	r1, #2
 800a4a4:	f8ca 1000 	str.w	r1, [sl]
 800a4a8:	f1bb 0f00 	cmp.w	fp, #0
 800a4ac:	d051      	beq.n	800a552 <__hexnan+0x132>
 800a4ae:	454c      	cmp	r4, r9
 800a4b0:	d206      	bcs.n	800a4c0 <__hexnan+0xa0>
 800a4b2:	2d07      	cmp	r5, #7
 800a4b4:	dc04      	bgt.n	800a4c0 <__hexnan+0xa0>
 800a4b6:	462a      	mov	r2, r5
 800a4b8:	4649      	mov	r1, r9
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f7ff ff8a 	bl	800a3d4 <L_shift>
 800a4c0:	4544      	cmp	r4, r8
 800a4c2:	d936      	bls.n	800a532 <__hexnan+0x112>
 800a4c4:	f1a8 0204 	sub.w	r2, r8, #4
 800a4c8:	4623      	mov	r3, r4
 800a4ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800a4ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800a4d2:	429f      	cmp	r7, r3
 800a4d4:	d2f9      	bcs.n	800a4ca <__hexnan+0xaa>
 800a4d6:	1b3b      	subs	r3, r7, r4
 800a4d8:	f023 0303 	bic.w	r3, r3, #3
 800a4dc:	3304      	adds	r3, #4
 800a4de:	3401      	adds	r4, #1
 800a4e0:	3e03      	subs	r6, #3
 800a4e2:	42b4      	cmp	r4, r6
 800a4e4:	bf88      	it	hi
 800a4e6:	2304      	movhi	r3, #4
 800a4e8:	4443      	add	r3, r8
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f843 2b04 	str.w	r2, [r3], #4
 800a4f0:	429f      	cmp	r7, r3
 800a4f2:	d2fb      	bcs.n	800a4ec <__hexnan+0xcc>
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	b91b      	cbnz	r3, 800a500 <__hexnan+0xe0>
 800a4f8:	4547      	cmp	r7, r8
 800a4fa:	d128      	bne.n	800a54e <__hexnan+0x12e>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	2005      	movs	r0, #5
 800a502:	b007      	add	sp, #28
 800a504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a508:	3501      	adds	r5, #1
 800a50a:	2d08      	cmp	r5, #8
 800a50c:	f10b 0b01 	add.w	fp, fp, #1
 800a510:	dd06      	ble.n	800a520 <__hexnan+0x100>
 800a512:	4544      	cmp	r4, r8
 800a514:	d9c1      	bls.n	800a49a <__hexnan+0x7a>
 800a516:	2300      	movs	r3, #0
 800a518:	f844 3c04 	str.w	r3, [r4, #-4]
 800a51c:	2501      	movs	r5, #1
 800a51e:	3c04      	subs	r4, #4
 800a520:	6822      	ldr	r2, [r4, #0]
 800a522:	f000 000f 	and.w	r0, r0, #15
 800a526:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a52a:	6020      	str	r0, [r4, #0]
 800a52c:	e7b5      	b.n	800a49a <__hexnan+0x7a>
 800a52e:	2508      	movs	r5, #8
 800a530:	e7b3      	b.n	800a49a <__hexnan+0x7a>
 800a532:	9b01      	ldr	r3, [sp, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d0dd      	beq.n	800a4f4 <__hexnan+0xd4>
 800a538:	f1c3 0320 	rsb	r3, r3, #32
 800a53c:	f04f 32ff 	mov.w	r2, #4294967295
 800a540:	40da      	lsrs	r2, r3
 800a542:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a546:	4013      	ands	r3, r2
 800a548:	f846 3c04 	str.w	r3, [r6, #-4]
 800a54c:	e7d2      	b.n	800a4f4 <__hexnan+0xd4>
 800a54e:	3f04      	subs	r7, #4
 800a550:	e7d0      	b.n	800a4f4 <__hexnan+0xd4>
 800a552:	2004      	movs	r0, #4
 800a554:	e7d5      	b.n	800a502 <__hexnan+0xe2>

0800a556 <__ascii_mbtowc>:
 800a556:	b082      	sub	sp, #8
 800a558:	b901      	cbnz	r1, 800a55c <__ascii_mbtowc+0x6>
 800a55a:	a901      	add	r1, sp, #4
 800a55c:	b142      	cbz	r2, 800a570 <__ascii_mbtowc+0x1a>
 800a55e:	b14b      	cbz	r3, 800a574 <__ascii_mbtowc+0x1e>
 800a560:	7813      	ldrb	r3, [r2, #0]
 800a562:	600b      	str	r3, [r1, #0]
 800a564:	7812      	ldrb	r2, [r2, #0]
 800a566:	1e10      	subs	r0, r2, #0
 800a568:	bf18      	it	ne
 800a56a:	2001      	movne	r0, #1
 800a56c:	b002      	add	sp, #8
 800a56e:	4770      	bx	lr
 800a570:	4610      	mov	r0, r2
 800a572:	e7fb      	b.n	800a56c <__ascii_mbtowc+0x16>
 800a574:	f06f 0001 	mvn.w	r0, #1
 800a578:	e7f8      	b.n	800a56c <__ascii_mbtowc+0x16>

0800a57a <_realloc_r>:
 800a57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a57e:	4680      	mov	r8, r0
 800a580:	4615      	mov	r5, r2
 800a582:	460c      	mov	r4, r1
 800a584:	b921      	cbnz	r1, 800a590 <_realloc_r+0x16>
 800a586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a58a:	4611      	mov	r1, r2
 800a58c:	f7fd bc98 	b.w	8007ec0 <_malloc_r>
 800a590:	b92a      	cbnz	r2, 800a59e <_realloc_r+0x24>
 800a592:	f7fd fc21 	bl	8007dd8 <_free_r>
 800a596:	2400      	movs	r4, #0
 800a598:	4620      	mov	r0, r4
 800a59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a59e:	f000 f840 	bl	800a622 <_malloc_usable_size_r>
 800a5a2:	4285      	cmp	r5, r0
 800a5a4:	4606      	mov	r6, r0
 800a5a6:	d802      	bhi.n	800a5ae <_realloc_r+0x34>
 800a5a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a5ac:	d8f4      	bhi.n	800a598 <_realloc_r+0x1e>
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	4640      	mov	r0, r8
 800a5b2:	f7fd fc85 	bl	8007ec0 <_malloc_r>
 800a5b6:	4607      	mov	r7, r0
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	d0ec      	beq.n	800a596 <_realloc_r+0x1c>
 800a5bc:	42b5      	cmp	r5, r6
 800a5be:	462a      	mov	r2, r5
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	bf28      	it	cs
 800a5c4:	4632      	movcs	r2, r6
 800a5c6:	f7ff fc43 	bl	8009e50 <memcpy>
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	4640      	mov	r0, r8
 800a5ce:	f7fd fc03 	bl	8007dd8 <_free_r>
 800a5d2:	463c      	mov	r4, r7
 800a5d4:	e7e0      	b.n	800a598 <_realloc_r+0x1e>

0800a5d6 <__ascii_wctomb>:
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	4608      	mov	r0, r1
 800a5da:	b141      	cbz	r1, 800a5ee <__ascii_wctomb+0x18>
 800a5dc:	2aff      	cmp	r2, #255	@ 0xff
 800a5de:	d904      	bls.n	800a5ea <__ascii_wctomb+0x14>
 800a5e0:	228a      	movs	r2, #138	@ 0x8a
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e8:	4770      	bx	lr
 800a5ea:	700a      	strb	r2, [r1, #0]
 800a5ec:	2001      	movs	r0, #1
 800a5ee:	4770      	bx	lr

0800a5f0 <fiprintf>:
 800a5f0:	b40e      	push	{r1, r2, r3}
 800a5f2:	b503      	push	{r0, r1, lr}
 800a5f4:	4601      	mov	r1, r0
 800a5f6:	ab03      	add	r3, sp, #12
 800a5f8:	4805      	ldr	r0, [pc, #20]	@ (800a610 <fiprintf+0x20>)
 800a5fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5fe:	6800      	ldr	r0, [r0, #0]
 800a600:	9301      	str	r3, [sp, #4]
 800a602:	f7ff f9a1 	bl	8009948 <_vfiprintf_r>
 800a606:	b002      	add	sp, #8
 800a608:	f85d eb04 	ldr.w	lr, [sp], #4
 800a60c:	b003      	add	sp, #12
 800a60e:	4770      	bx	lr
 800a610:	200000a8 	.word	0x200000a8

0800a614 <abort>:
 800a614:	b508      	push	{r3, lr}
 800a616:	2006      	movs	r0, #6
 800a618:	f000 f834 	bl	800a684 <raise>
 800a61c:	2001      	movs	r0, #1
 800a61e:	f7f7 faad 	bl	8001b7c <_exit>

0800a622 <_malloc_usable_size_r>:
 800a622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a626:	1f18      	subs	r0, r3, #4
 800a628:	2b00      	cmp	r3, #0
 800a62a:	bfbc      	itt	lt
 800a62c:	580b      	ldrlt	r3, [r1, r0]
 800a62e:	18c0      	addlt	r0, r0, r3
 800a630:	4770      	bx	lr

0800a632 <_raise_r>:
 800a632:	291f      	cmp	r1, #31
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	4605      	mov	r5, r0
 800a638:	460c      	mov	r4, r1
 800a63a:	d904      	bls.n	800a646 <_raise_r+0x14>
 800a63c:	2316      	movs	r3, #22
 800a63e:	6003      	str	r3, [r0, #0]
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	bd38      	pop	{r3, r4, r5, pc}
 800a646:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a648:	b112      	cbz	r2, 800a650 <_raise_r+0x1e>
 800a64a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a64e:	b94b      	cbnz	r3, 800a664 <_raise_r+0x32>
 800a650:	4628      	mov	r0, r5
 800a652:	f000 f831 	bl	800a6b8 <_getpid_r>
 800a656:	4622      	mov	r2, r4
 800a658:	4601      	mov	r1, r0
 800a65a:	4628      	mov	r0, r5
 800a65c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a660:	f000 b818 	b.w	800a694 <_kill_r>
 800a664:	2b01      	cmp	r3, #1
 800a666:	d00a      	beq.n	800a67e <_raise_r+0x4c>
 800a668:	1c59      	adds	r1, r3, #1
 800a66a:	d103      	bne.n	800a674 <_raise_r+0x42>
 800a66c:	2316      	movs	r3, #22
 800a66e:	6003      	str	r3, [r0, #0]
 800a670:	2001      	movs	r0, #1
 800a672:	e7e7      	b.n	800a644 <_raise_r+0x12>
 800a674:	2100      	movs	r1, #0
 800a676:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a67a:	4620      	mov	r0, r4
 800a67c:	4798      	blx	r3
 800a67e:	2000      	movs	r0, #0
 800a680:	e7e0      	b.n	800a644 <_raise_r+0x12>
	...

0800a684 <raise>:
 800a684:	4b02      	ldr	r3, [pc, #8]	@ (800a690 <raise+0xc>)
 800a686:	4601      	mov	r1, r0
 800a688:	6818      	ldr	r0, [r3, #0]
 800a68a:	f7ff bfd2 	b.w	800a632 <_raise_r>
 800a68e:	bf00      	nop
 800a690:	200000a8 	.word	0x200000a8

0800a694 <_kill_r>:
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	4d07      	ldr	r5, [pc, #28]	@ (800a6b4 <_kill_r+0x20>)
 800a698:	2300      	movs	r3, #0
 800a69a:	4604      	mov	r4, r0
 800a69c:	4608      	mov	r0, r1
 800a69e:	4611      	mov	r1, r2
 800a6a0:	602b      	str	r3, [r5, #0]
 800a6a2:	f7f7 fa5b 	bl	8001b5c <_kill>
 800a6a6:	1c43      	adds	r3, r0, #1
 800a6a8:	d102      	bne.n	800a6b0 <_kill_r+0x1c>
 800a6aa:	682b      	ldr	r3, [r5, #0]
 800a6ac:	b103      	cbz	r3, 800a6b0 <_kill_r+0x1c>
 800a6ae:	6023      	str	r3, [r4, #0]
 800a6b0:	bd38      	pop	{r3, r4, r5, pc}
 800a6b2:	bf00      	nop
 800a6b4:	200005a4 	.word	0x200005a4

0800a6b8 <_getpid_r>:
 800a6b8:	f7f7 ba48 	b.w	8001b4c <_getpid>

0800a6bc <atan2>:
 800a6bc:	f000 baa8 	b.w	800ac10 <__ieee754_atan2>

0800a6c0 <sqrt>:
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	ed2d 8b02 	vpush	{d8}
 800a6c6:	ec55 4b10 	vmov	r4, r5, d0
 800a6ca:	f000 f9c5 	bl	800aa58 <__ieee754_sqrt>
 800a6ce:	4622      	mov	r2, r4
 800a6d0:	462b      	mov	r3, r5
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	eeb0 8a40 	vmov.f32	s16, s0
 800a6da:	eef0 8a60 	vmov.f32	s17, s1
 800a6de:	f7f6 fa25 	bl	8000b2c <__aeabi_dcmpun>
 800a6e2:	b990      	cbnz	r0, 800a70a <sqrt+0x4a>
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	f7f6 f9f6 	bl	8000adc <__aeabi_dcmplt>
 800a6f0:	b158      	cbz	r0, 800a70a <sqrt+0x4a>
 800a6f2:	f7fc fcef 	bl	80070d4 <__errno>
 800a6f6:	2321      	movs	r3, #33	@ 0x21
 800a6f8:	6003      	str	r3, [r0, #0]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4610      	mov	r0, r2
 800a700:	4619      	mov	r1, r3
 800a702:	f7f6 f8a3 	bl	800084c <__aeabi_ddiv>
 800a706:	ec41 0b18 	vmov	d8, r0, r1
 800a70a:	eeb0 0a48 	vmov.f32	s0, s16
 800a70e:	eef0 0a68 	vmov.f32	s1, s17
 800a712:	ecbd 8b02 	vpop	{d8}
 800a716:	bd38      	pop	{r3, r4, r5, pc}

0800a718 <atan>:
 800a718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	ec55 4b10 	vmov	r4, r5, d0
 800a720:	4bbf      	ldr	r3, [pc, #764]	@ (800aa20 <atan+0x308>)
 800a722:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a726:	429e      	cmp	r6, r3
 800a728:	46ab      	mov	fp, r5
 800a72a:	d918      	bls.n	800a75e <atan+0x46>
 800a72c:	4bbd      	ldr	r3, [pc, #756]	@ (800aa24 <atan+0x30c>)
 800a72e:	429e      	cmp	r6, r3
 800a730:	d801      	bhi.n	800a736 <atan+0x1e>
 800a732:	d109      	bne.n	800a748 <atan+0x30>
 800a734:	b144      	cbz	r4, 800a748 <atan+0x30>
 800a736:	4622      	mov	r2, r4
 800a738:	462b      	mov	r3, r5
 800a73a:	4620      	mov	r0, r4
 800a73c:	4629      	mov	r1, r5
 800a73e:	f7f5 fda5 	bl	800028c <__adddf3>
 800a742:	4604      	mov	r4, r0
 800a744:	460d      	mov	r5, r1
 800a746:	e006      	b.n	800a756 <atan+0x3e>
 800a748:	f1bb 0f00 	cmp.w	fp, #0
 800a74c:	f340 812b 	ble.w	800a9a6 <atan+0x28e>
 800a750:	a597      	add	r5, pc, #604	@ (adr r5, 800a9b0 <atan+0x298>)
 800a752:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a756:	ec45 4b10 	vmov	d0, r4, r5
 800a75a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75e:	4bb2      	ldr	r3, [pc, #712]	@ (800aa28 <atan+0x310>)
 800a760:	429e      	cmp	r6, r3
 800a762:	d813      	bhi.n	800a78c <atan+0x74>
 800a764:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a768:	429e      	cmp	r6, r3
 800a76a:	d80c      	bhi.n	800a786 <atan+0x6e>
 800a76c:	a392      	add	r3, pc, #584	@ (adr r3, 800a9b8 <atan+0x2a0>)
 800a76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a772:	4620      	mov	r0, r4
 800a774:	4629      	mov	r1, r5
 800a776:	f7f5 fd89 	bl	800028c <__adddf3>
 800a77a:	4bac      	ldr	r3, [pc, #688]	@ (800aa2c <atan+0x314>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	f7f6 f9cb 	bl	8000b18 <__aeabi_dcmpgt>
 800a782:	2800      	cmp	r0, #0
 800a784:	d1e7      	bne.n	800a756 <atan+0x3e>
 800a786:	f04f 3aff 	mov.w	sl, #4294967295
 800a78a:	e029      	b.n	800a7e0 <atan+0xc8>
 800a78c:	f000 f95c 	bl	800aa48 <fabs>
 800a790:	4ba7      	ldr	r3, [pc, #668]	@ (800aa30 <atan+0x318>)
 800a792:	429e      	cmp	r6, r3
 800a794:	ec55 4b10 	vmov	r4, r5, d0
 800a798:	f200 80bc 	bhi.w	800a914 <atan+0x1fc>
 800a79c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a7a0:	429e      	cmp	r6, r3
 800a7a2:	f200 809e 	bhi.w	800a8e2 <atan+0x1ca>
 800a7a6:	4622      	mov	r2, r4
 800a7a8:	462b      	mov	r3, r5
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	f7f5 fd6d 	bl	800028c <__adddf3>
 800a7b2:	4b9e      	ldr	r3, [pc, #632]	@ (800aa2c <atan+0x314>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f7f5 fd67 	bl	8000288 <__aeabi_dsub>
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	4606      	mov	r6, r0
 800a7be:	460f      	mov	r7, r1
 800a7c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	f7f5 fd60 	bl	800028c <__adddf3>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	4639      	mov	r1, r7
 800a7d4:	f7f6 f83a 	bl	800084c <__aeabi_ddiv>
 800a7d8:	f04f 0a00 	mov.w	sl, #0
 800a7dc:	4604      	mov	r4, r0
 800a7de:	460d      	mov	r5, r1
 800a7e0:	4622      	mov	r2, r4
 800a7e2:	462b      	mov	r3, r5
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	4629      	mov	r1, r5
 800a7e8:	f7f5 ff06 	bl	80005f8 <__aeabi_dmul>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4680      	mov	r8, r0
 800a7f2:	4689      	mov	r9, r1
 800a7f4:	f7f5 ff00 	bl	80005f8 <__aeabi_dmul>
 800a7f8:	a371      	add	r3, pc, #452	@ (adr r3, 800a9c0 <atan+0x2a8>)
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	4606      	mov	r6, r0
 800a800:	460f      	mov	r7, r1
 800a802:	f7f5 fef9 	bl	80005f8 <__aeabi_dmul>
 800a806:	a370      	add	r3, pc, #448	@ (adr r3, 800a9c8 <atan+0x2b0>)
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	f7f5 fd3e 	bl	800028c <__adddf3>
 800a810:	4632      	mov	r2, r6
 800a812:	463b      	mov	r3, r7
 800a814:	f7f5 fef0 	bl	80005f8 <__aeabi_dmul>
 800a818:	a36d      	add	r3, pc, #436	@ (adr r3, 800a9d0 <atan+0x2b8>)
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	f7f5 fd35 	bl	800028c <__adddf3>
 800a822:	4632      	mov	r2, r6
 800a824:	463b      	mov	r3, r7
 800a826:	f7f5 fee7 	bl	80005f8 <__aeabi_dmul>
 800a82a:	a36b      	add	r3, pc, #428	@ (adr r3, 800a9d8 <atan+0x2c0>)
 800a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a830:	f7f5 fd2c 	bl	800028c <__adddf3>
 800a834:	4632      	mov	r2, r6
 800a836:	463b      	mov	r3, r7
 800a838:	f7f5 fede 	bl	80005f8 <__aeabi_dmul>
 800a83c:	a368      	add	r3, pc, #416	@ (adr r3, 800a9e0 <atan+0x2c8>)
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	f7f5 fd23 	bl	800028c <__adddf3>
 800a846:	4632      	mov	r2, r6
 800a848:	463b      	mov	r3, r7
 800a84a:	f7f5 fed5 	bl	80005f8 <__aeabi_dmul>
 800a84e:	a366      	add	r3, pc, #408	@ (adr r3, 800a9e8 <atan+0x2d0>)
 800a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a854:	f7f5 fd1a 	bl	800028c <__adddf3>
 800a858:	4642      	mov	r2, r8
 800a85a:	464b      	mov	r3, r9
 800a85c:	f7f5 fecc 	bl	80005f8 <__aeabi_dmul>
 800a860:	a363      	add	r3, pc, #396	@ (adr r3, 800a9f0 <atan+0x2d8>)
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	4680      	mov	r8, r0
 800a868:	4689      	mov	r9, r1
 800a86a:	4630      	mov	r0, r6
 800a86c:	4639      	mov	r1, r7
 800a86e:	f7f5 fec3 	bl	80005f8 <__aeabi_dmul>
 800a872:	a361      	add	r3, pc, #388	@ (adr r3, 800a9f8 <atan+0x2e0>)
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	f7f5 fd06 	bl	8000288 <__aeabi_dsub>
 800a87c:	4632      	mov	r2, r6
 800a87e:	463b      	mov	r3, r7
 800a880:	f7f5 feba 	bl	80005f8 <__aeabi_dmul>
 800a884:	a35e      	add	r3, pc, #376	@ (adr r3, 800aa00 <atan+0x2e8>)
 800a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88a:	f7f5 fcfd 	bl	8000288 <__aeabi_dsub>
 800a88e:	4632      	mov	r2, r6
 800a890:	463b      	mov	r3, r7
 800a892:	f7f5 feb1 	bl	80005f8 <__aeabi_dmul>
 800a896:	a35c      	add	r3, pc, #368	@ (adr r3, 800aa08 <atan+0x2f0>)
 800a898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89c:	f7f5 fcf4 	bl	8000288 <__aeabi_dsub>
 800a8a0:	4632      	mov	r2, r6
 800a8a2:	463b      	mov	r3, r7
 800a8a4:	f7f5 fea8 	bl	80005f8 <__aeabi_dmul>
 800a8a8:	a359      	add	r3, pc, #356	@ (adr r3, 800aa10 <atan+0x2f8>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	f7f5 fceb 	bl	8000288 <__aeabi_dsub>
 800a8b2:	4632      	mov	r2, r6
 800a8b4:	463b      	mov	r3, r7
 800a8b6:	f7f5 fe9f 	bl	80005f8 <__aeabi_dmul>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	460b      	mov	r3, r1
 800a8be:	4640      	mov	r0, r8
 800a8c0:	4649      	mov	r1, r9
 800a8c2:	f7f5 fce3 	bl	800028c <__adddf3>
 800a8c6:	4622      	mov	r2, r4
 800a8c8:	462b      	mov	r3, r5
 800a8ca:	f7f5 fe95 	bl	80005f8 <__aeabi_dmul>
 800a8ce:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	d148      	bne.n	800a96a <atan+0x252>
 800a8d8:	4620      	mov	r0, r4
 800a8da:	4629      	mov	r1, r5
 800a8dc:	f7f5 fcd4 	bl	8000288 <__aeabi_dsub>
 800a8e0:	e72f      	b.n	800a742 <atan+0x2a>
 800a8e2:	4b52      	ldr	r3, [pc, #328]	@ (800aa2c <atan+0x314>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	f7f5 fccd 	bl	8000288 <__aeabi_dsub>
 800a8ee:	4b4f      	ldr	r3, [pc, #316]	@ (800aa2c <atan+0x314>)
 800a8f0:	4606      	mov	r6, r0
 800a8f2:	460f      	mov	r7, r1
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	f7f5 fcc7 	bl	800028c <__adddf3>
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	4630      	mov	r0, r6
 800a904:	4639      	mov	r1, r7
 800a906:	f7f5 ffa1 	bl	800084c <__aeabi_ddiv>
 800a90a:	f04f 0a01 	mov.w	sl, #1
 800a90e:	4604      	mov	r4, r0
 800a910:	460d      	mov	r5, r1
 800a912:	e765      	b.n	800a7e0 <atan+0xc8>
 800a914:	4b47      	ldr	r3, [pc, #284]	@ (800aa34 <atan+0x31c>)
 800a916:	429e      	cmp	r6, r3
 800a918:	d21c      	bcs.n	800a954 <atan+0x23c>
 800a91a:	4b47      	ldr	r3, [pc, #284]	@ (800aa38 <atan+0x320>)
 800a91c:	2200      	movs	r2, #0
 800a91e:	4620      	mov	r0, r4
 800a920:	4629      	mov	r1, r5
 800a922:	f7f5 fcb1 	bl	8000288 <__aeabi_dsub>
 800a926:	4b44      	ldr	r3, [pc, #272]	@ (800aa38 <atan+0x320>)
 800a928:	4606      	mov	r6, r0
 800a92a:	460f      	mov	r7, r1
 800a92c:	2200      	movs	r2, #0
 800a92e:	4620      	mov	r0, r4
 800a930:	4629      	mov	r1, r5
 800a932:	f7f5 fe61 	bl	80005f8 <__aeabi_dmul>
 800a936:	4b3d      	ldr	r3, [pc, #244]	@ (800aa2c <atan+0x314>)
 800a938:	2200      	movs	r2, #0
 800a93a:	f7f5 fca7 	bl	800028c <__adddf3>
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	4630      	mov	r0, r6
 800a944:	4639      	mov	r1, r7
 800a946:	f7f5 ff81 	bl	800084c <__aeabi_ddiv>
 800a94a:	f04f 0a02 	mov.w	sl, #2
 800a94e:	4604      	mov	r4, r0
 800a950:	460d      	mov	r5, r1
 800a952:	e745      	b.n	800a7e0 <atan+0xc8>
 800a954:	4622      	mov	r2, r4
 800a956:	462b      	mov	r3, r5
 800a958:	4938      	ldr	r1, [pc, #224]	@ (800aa3c <atan+0x324>)
 800a95a:	2000      	movs	r0, #0
 800a95c:	f7f5 ff76 	bl	800084c <__aeabi_ddiv>
 800a960:	f04f 0a03 	mov.w	sl, #3
 800a964:	4604      	mov	r4, r0
 800a966:	460d      	mov	r5, r1
 800a968:	e73a      	b.n	800a7e0 <atan+0xc8>
 800a96a:	4b35      	ldr	r3, [pc, #212]	@ (800aa40 <atan+0x328>)
 800a96c:	4e35      	ldr	r6, [pc, #212]	@ (800aa44 <atan+0x32c>)
 800a96e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a976:	f7f5 fc87 	bl	8000288 <__aeabi_dsub>
 800a97a:	4622      	mov	r2, r4
 800a97c:	462b      	mov	r3, r5
 800a97e:	f7f5 fc83 	bl	8000288 <__aeabi_dsub>
 800a982:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a986:	4602      	mov	r2, r0
 800a988:	460b      	mov	r3, r1
 800a98a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a98e:	f7f5 fc7b 	bl	8000288 <__aeabi_dsub>
 800a992:	f1bb 0f00 	cmp.w	fp, #0
 800a996:	4604      	mov	r4, r0
 800a998:	460d      	mov	r5, r1
 800a99a:	f6bf aedc 	bge.w	800a756 <atan+0x3e>
 800a99e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a9a2:	461d      	mov	r5, r3
 800a9a4:	e6d7      	b.n	800a756 <atan+0x3e>
 800a9a6:	a51c      	add	r5, pc, #112	@ (adr r5, 800aa18 <atan+0x300>)
 800a9a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a9ac:	e6d3      	b.n	800a756 <atan+0x3e>
 800a9ae:	bf00      	nop
 800a9b0:	54442d18 	.word	0x54442d18
 800a9b4:	3ff921fb 	.word	0x3ff921fb
 800a9b8:	8800759c 	.word	0x8800759c
 800a9bc:	7e37e43c 	.word	0x7e37e43c
 800a9c0:	e322da11 	.word	0xe322da11
 800a9c4:	3f90ad3a 	.word	0x3f90ad3a
 800a9c8:	24760deb 	.word	0x24760deb
 800a9cc:	3fa97b4b 	.word	0x3fa97b4b
 800a9d0:	a0d03d51 	.word	0xa0d03d51
 800a9d4:	3fb10d66 	.word	0x3fb10d66
 800a9d8:	c54c206e 	.word	0xc54c206e
 800a9dc:	3fb745cd 	.word	0x3fb745cd
 800a9e0:	920083ff 	.word	0x920083ff
 800a9e4:	3fc24924 	.word	0x3fc24924
 800a9e8:	5555550d 	.word	0x5555550d
 800a9ec:	3fd55555 	.word	0x3fd55555
 800a9f0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a9f4:	bfa2b444 	.word	0xbfa2b444
 800a9f8:	52defd9a 	.word	0x52defd9a
 800a9fc:	3fadde2d 	.word	0x3fadde2d
 800aa00:	af749a6d 	.word	0xaf749a6d
 800aa04:	3fb3b0f2 	.word	0x3fb3b0f2
 800aa08:	fe231671 	.word	0xfe231671
 800aa0c:	3fbc71c6 	.word	0x3fbc71c6
 800aa10:	9998ebc4 	.word	0x9998ebc4
 800aa14:	3fc99999 	.word	0x3fc99999
 800aa18:	54442d18 	.word	0x54442d18
 800aa1c:	bff921fb 	.word	0xbff921fb
 800aa20:	440fffff 	.word	0x440fffff
 800aa24:	7ff00000 	.word	0x7ff00000
 800aa28:	3fdbffff 	.word	0x3fdbffff
 800aa2c:	3ff00000 	.word	0x3ff00000
 800aa30:	3ff2ffff 	.word	0x3ff2ffff
 800aa34:	40038000 	.word	0x40038000
 800aa38:	3ff80000 	.word	0x3ff80000
 800aa3c:	bff00000 	.word	0xbff00000
 800aa40:	0800b330 	.word	0x0800b330
 800aa44:	0800b350 	.word	0x0800b350

0800aa48 <fabs>:
 800aa48:	ec51 0b10 	vmov	r0, r1, d0
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aa52:	ec43 2b10 	vmov	d0, r2, r3
 800aa56:	4770      	bx	lr

0800aa58 <__ieee754_sqrt>:
 800aa58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5c:	4a68      	ldr	r2, [pc, #416]	@ (800ac00 <__ieee754_sqrt+0x1a8>)
 800aa5e:	ec55 4b10 	vmov	r4, r5, d0
 800aa62:	43aa      	bics	r2, r5
 800aa64:	462b      	mov	r3, r5
 800aa66:	4621      	mov	r1, r4
 800aa68:	d110      	bne.n	800aa8c <__ieee754_sqrt+0x34>
 800aa6a:	4622      	mov	r2, r4
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	4629      	mov	r1, r5
 800aa70:	f7f5 fdc2 	bl	80005f8 <__aeabi_dmul>
 800aa74:	4602      	mov	r2, r0
 800aa76:	460b      	mov	r3, r1
 800aa78:	4620      	mov	r0, r4
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	f7f5 fc06 	bl	800028c <__adddf3>
 800aa80:	4604      	mov	r4, r0
 800aa82:	460d      	mov	r5, r1
 800aa84:	ec45 4b10 	vmov	d0, r4, r5
 800aa88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8c:	2d00      	cmp	r5, #0
 800aa8e:	dc0e      	bgt.n	800aaae <__ieee754_sqrt+0x56>
 800aa90:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800aa94:	4322      	orrs	r2, r4
 800aa96:	d0f5      	beq.n	800aa84 <__ieee754_sqrt+0x2c>
 800aa98:	b19d      	cbz	r5, 800aac2 <__ieee754_sqrt+0x6a>
 800aa9a:	4622      	mov	r2, r4
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	f7f5 fbf2 	bl	8000288 <__aeabi_dsub>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	f7f5 fed0 	bl	800084c <__aeabi_ddiv>
 800aaac:	e7e8      	b.n	800aa80 <__ieee754_sqrt+0x28>
 800aaae:	152a      	asrs	r2, r5, #20
 800aab0:	d115      	bne.n	800aade <__ieee754_sqrt+0x86>
 800aab2:	2000      	movs	r0, #0
 800aab4:	e009      	b.n	800aaca <__ieee754_sqrt+0x72>
 800aab6:	0acb      	lsrs	r3, r1, #11
 800aab8:	3a15      	subs	r2, #21
 800aaba:	0549      	lsls	r1, r1, #21
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d0fa      	beq.n	800aab6 <__ieee754_sqrt+0x5e>
 800aac0:	e7f7      	b.n	800aab2 <__ieee754_sqrt+0x5a>
 800aac2:	462a      	mov	r2, r5
 800aac4:	e7fa      	b.n	800aabc <__ieee754_sqrt+0x64>
 800aac6:	005b      	lsls	r3, r3, #1
 800aac8:	3001      	adds	r0, #1
 800aaca:	02dc      	lsls	r4, r3, #11
 800aacc:	d5fb      	bpl.n	800aac6 <__ieee754_sqrt+0x6e>
 800aace:	1e44      	subs	r4, r0, #1
 800aad0:	1b12      	subs	r2, r2, r4
 800aad2:	f1c0 0420 	rsb	r4, r0, #32
 800aad6:	fa21 f404 	lsr.w	r4, r1, r4
 800aada:	4323      	orrs	r3, r4
 800aadc:	4081      	lsls	r1, r0
 800aade:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aae2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800aae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aaea:	07d2      	lsls	r2, r2, #31
 800aaec:	bf5c      	itt	pl
 800aaee:	005b      	lslpl	r3, r3, #1
 800aaf0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800aaf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aaf8:	bf58      	it	pl
 800aafa:	0049      	lslpl	r1, r1, #1
 800aafc:	2600      	movs	r6, #0
 800aafe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ab02:	106d      	asrs	r5, r5, #1
 800ab04:	0049      	lsls	r1, r1, #1
 800ab06:	2016      	movs	r0, #22
 800ab08:	4632      	mov	r2, r6
 800ab0a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ab0e:	1917      	adds	r7, r2, r4
 800ab10:	429f      	cmp	r7, r3
 800ab12:	bfde      	ittt	le
 800ab14:	193a      	addle	r2, r7, r4
 800ab16:	1bdb      	suble	r3, r3, r7
 800ab18:	1936      	addle	r6, r6, r4
 800ab1a:	0fcf      	lsrs	r7, r1, #31
 800ab1c:	3801      	subs	r0, #1
 800ab1e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ab22:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ab26:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ab2a:	d1f0      	bne.n	800ab0e <__ieee754_sqrt+0xb6>
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	2720      	movs	r7, #32
 800ab30:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ab34:	429a      	cmp	r2, r3
 800ab36:	eb00 0e0c 	add.w	lr, r0, ip
 800ab3a:	db02      	blt.n	800ab42 <__ieee754_sqrt+0xea>
 800ab3c:	d113      	bne.n	800ab66 <__ieee754_sqrt+0x10e>
 800ab3e:	458e      	cmp	lr, r1
 800ab40:	d811      	bhi.n	800ab66 <__ieee754_sqrt+0x10e>
 800ab42:	f1be 0f00 	cmp.w	lr, #0
 800ab46:	eb0e 000c 	add.w	r0, lr, ip
 800ab4a:	da42      	bge.n	800abd2 <__ieee754_sqrt+0x17a>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	db40      	blt.n	800abd2 <__ieee754_sqrt+0x17a>
 800ab50:	f102 0801 	add.w	r8, r2, #1
 800ab54:	1a9b      	subs	r3, r3, r2
 800ab56:	458e      	cmp	lr, r1
 800ab58:	bf88      	it	hi
 800ab5a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ab5e:	eba1 010e 	sub.w	r1, r1, lr
 800ab62:	4464      	add	r4, ip
 800ab64:	4642      	mov	r2, r8
 800ab66:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ab6a:	3f01      	subs	r7, #1
 800ab6c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ab70:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ab74:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ab78:	d1dc      	bne.n	800ab34 <__ieee754_sqrt+0xdc>
 800ab7a:	4319      	orrs	r1, r3
 800ab7c:	d01b      	beq.n	800abb6 <__ieee754_sqrt+0x15e>
 800ab7e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ac04 <__ieee754_sqrt+0x1ac>
 800ab82:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ac08 <__ieee754_sqrt+0x1b0>
 800ab86:	e9da 0100 	ldrd	r0, r1, [sl]
 800ab8a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ab8e:	f7f5 fb7b 	bl	8000288 <__aeabi_dsub>
 800ab92:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab96:	4602      	mov	r2, r0
 800ab98:	460b      	mov	r3, r1
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	4649      	mov	r1, r9
 800ab9e:	f7f5 ffa7 	bl	8000af0 <__aeabi_dcmple>
 800aba2:	b140      	cbz	r0, 800abb6 <__ieee754_sqrt+0x15e>
 800aba4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800aba8:	e9da 0100 	ldrd	r0, r1, [sl]
 800abac:	e9db 2300 	ldrd	r2, r3, [fp]
 800abb0:	d111      	bne.n	800abd6 <__ieee754_sqrt+0x17e>
 800abb2:	3601      	adds	r6, #1
 800abb4:	463c      	mov	r4, r7
 800abb6:	1072      	asrs	r2, r6, #1
 800abb8:	0863      	lsrs	r3, r4, #1
 800abba:	07f1      	lsls	r1, r6, #31
 800abbc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800abc0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800abc4:	bf48      	it	mi
 800abc6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800abca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800abce:	4618      	mov	r0, r3
 800abd0:	e756      	b.n	800aa80 <__ieee754_sqrt+0x28>
 800abd2:	4690      	mov	r8, r2
 800abd4:	e7be      	b.n	800ab54 <__ieee754_sqrt+0xfc>
 800abd6:	f7f5 fb59 	bl	800028c <__adddf3>
 800abda:	e9da 8900 	ldrd	r8, r9, [sl]
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	4640      	mov	r0, r8
 800abe4:	4649      	mov	r1, r9
 800abe6:	f7f5 ff79 	bl	8000adc <__aeabi_dcmplt>
 800abea:	b120      	cbz	r0, 800abf6 <__ieee754_sqrt+0x19e>
 800abec:	1ca0      	adds	r0, r4, #2
 800abee:	bf08      	it	eq
 800abf0:	3601      	addeq	r6, #1
 800abf2:	3402      	adds	r4, #2
 800abf4:	e7df      	b.n	800abb6 <__ieee754_sqrt+0x15e>
 800abf6:	1c63      	adds	r3, r4, #1
 800abf8:	f023 0401 	bic.w	r4, r3, #1
 800abfc:	e7db      	b.n	800abb6 <__ieee754_sqrt+0x15e>
 800abfe:	bf00      	nop
 800ac00:	7ff00000 	.word	0x7ff00000
 800ac04:	20000270 	.word	0x20000270
 800ac08:	20000268 	.word	0x20000268
 800ac0c:	00000000 	.word	0x00000000

0800ac10 <__ieee754_atan2>:
 800ac10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac14:	ec57 6b11 	vmov	r6, r7, d1
 800ac18:	4273      	negs	r3, r6
 800ac1a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800ad98 <__ieee754_atan2+0x188>
 800ac1e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800ac22:	4333      	orrs	r3, r6
 800ac24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ac28:	4543      	cmp	r3, r8
 800ac2a:	ec51 0b10 	vmov	r0, r1, d0
 800ac2e:	4635      	mov	r5, r6
 800ac30:	d809      	bhi.n	800ac46 <__ieee754_atan2+0x36>
 800ac32:	4244      	negs	r4, r0
 800ac34:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ac38:	4304      	orrs	r4, r0
 800ac3a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ac3e:	4544      	cmp	r4, r8
 800ac40:	468e      	mov	lr, r1
 800ac42:	4681      	mov	r9, r0
 800ac44:	d907      	bls.n	800ac56 <__ieee754_atan2+0x46>
 800ac46:	4632      	mov	r2, r6
 800ac48:	463b      	mov	r3, r7
 800ac4a:	f7f5 fb1f 	bl	800028c <__adddf3>
 800ac4e:	ec41 0b10 	vmov	d0, r0, r1
 800ac52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac56:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800ac5a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800ac5e:	4334      	orrs	r4, r6
 800ac60:	d103      	bne.n	800ac6a <__ieee754_atan2+0x5a>
 800ac62:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac66:	f7ff bd57 	b.w	800a718 <atan>
 800ac6a:	17bc      	asrs	r4, r7, #30
 800ac6c:	f004 0402 	and.w	r4, r4, #2
 800ac70:	ea53 0909 	orrs.w	r9, r3, r9
 800ac74:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ac78:	d107      	bne.n	800ac8a <__ieee754_atan2+0x7a>
 800ac7a:	2c02      	cmp	r4, #2
 800ac7c:	d05f      	beq.n	800ad3e <__ieee754_atan2+0x12e>
 800ac7e:	2c03      	cmp	r4, #3
 800ac80:	d1e5      	bne.n	800ac4e <__ieee754_atan2+0x3e>
 800ac82:	a141      	add	r1, pc, #260	@ (adr r1, 800ad88 <__ieee754_atan2+0x178>)
 800ac84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac88:	e7e1      	b.n	800ac4e <__ieee754_atan2+0x3e>
 800ac8a:	4315      	orrs	r5, r2
 800ac8c:	d106      	bne.n	800ac9c <__ieee754_atan2+0x8c>
 800ac8e:	f1be 0f00 	cmp.w	lr, #0
 800ac92:	da5f      	bge.n	800ad54 <__ieee754_atan2+0x144>
 800ac94:	a13e      	add	r1, pc, #248	@ (adr r1, 800ad90 <__ieee754_atan2+0x180>)
 800ac96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac9a:	e7d8      	b.n	800ac4e <__ieee754_atan2+0x3e>
 800ac9c:	4542      	cmp	r2, r8
 800ac9e:	d10f      	bne.n	800acc0 <__ieee754_atan2+0xb0>
 800aca0:	4293      	cmp	r3, r2
 800aca2:	f104 34ff 	add.w	r4, r4, #4294967295
 800aca6:	d107      	bne.n	800acb8 <__ieee754_atan2+0xa8>
 800aca8:	2c02      	cmp	r4, #2
 800acaa:	d84c      	bhi.n	800ad46 <__ieee754_atan2+0x136>
 800acac:	4b34      	ldr	r3, [pc, #208]	@ (800ad80 <__ieee754_atan2+0x170>)
 800acae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800acb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800acb6:	e7ca      	b.n	800ac4e <__ieee754_atan2+0x3e>
 800acb8:	2c02      	cmp	r4, #2
 800acba:	d848      	bhi.n	800ad4e <__ieee754_atan2+0x13e>
 800acbc:	4b31      	ldr	r3, [pc, #196]	@ (800ad84 <__ieee754_atan2+0x174>)
 800acbe:	e7f6      	b.n	800acae <__ieee754_atan2+0x9e>
 800acc0:	4543      	cmp	r3, r8
 800acc2:	d0e4      	beq.n	800ac8e <__ieee754_atan2+0x7e>
 800acc4:	1a9b      	subs	r3, r3, r2
 800acc6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800acca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800acce:	da1e      	bge.n	800ad0e <__ieee754_atan2+0xfe>
 800acd0:	2f00      	cmp	r7, #0
 800acd2:	da01      	bge.n	800acd8 <__ieee754_atan2+0xc8>
 800acd4:	323c      	adds	r2, #60	@ 0x3c
 800acd6:	db1e      	blt.n	800ad16 <__ieee754_atan2+0x106>
 800acd8:	4632      	mov	r2, r6
 800acda:	463b      	mov	r3, r7
 800acdc:	f7f5 fdb6 	bl	800084c <__aeabi_ddiv>
 800ace0:	ec41 0b10 	vmov	d0, r0, r1
 800ace4:	f7ff feb0 	bl	800aa48 <fabs>
 800ace8:	f7ff fd16 	bl	800a718 <atan>
 800acec:	ec51 0b10 	vmov	r0, r1, d0
 800acf0:	2c01      	cmp	r4, #1
 800acf2:	d013      	beq.n	800ad1c <__ieee754_atan2+0x10c>
 800acf4:	2c02      	cmp	r4, #2
 800acf6:	d015      	beq.n	800ad24 <__ieee754_atan2+0x114>
 800acf8:	2c00      	cmp	r4, #0
 800acfa:	d0a8      	beq.n	800ac4e <__ieee754_atan2+0x3e>
 800acfc:	a318      	add	r3, pc, #96	@ (adr r3, 800ad60 <__ieee754_atan2+0x150>)
 800acfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad02:	f7f5 fac1 	bl	8000288 <__aeabi_dsub>
 800ad06:	a318      	add	r3, pc, #96	@ (adr r3, 800ad68 <__ieee754_atan2+0x158>)
 800ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0c:	e014      	b.n	800ad38 <__ieee754_atan2+0x128>
 800ad0e:	a118      	add	r1, pc, #96	@ (adr r1, 800ad70 <__ieee754_atan2+0x160>)
 800ad10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad14:	e7ec      	b.n	800acf0 <__ieee754_atan2+0xe0>
 800ad16:	2000      	movs	r0, #0
 800ad18:	2100      	movs	r1, #0
 800ad1a:	e7e9      	b.n	800acf0 <__ieee754_atan2+0xe0>
 800ad1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad20:	4619      	mov	r1, r3
 800ad22:	e794      	b.n	800ac4e <__ieee754_atan2+0x3e>
 800ad24:	a30e      	add	r3, pc, #56	@ (adr r3, 800ad60 <__ieee754_atan2+0x150>)
 800ad26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2a:	f7f5 faad 	bl	8000288 <__aeabi_dsub>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	460b      	mov	r3, r1
 800ad32:	a10d      	add	r1, pc, #52	@ (adr r1, 800ad68 <__ieee754_atan2+0x158>)
 800ad34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad38:	f7f5 faa6 	bl	8000288 <__aeabi_dsub>
 800ad3c:	e787      	b.n	800ac4e <__ieee754_atan2+0x3e>
 800ad3e:	a10a      	add	r1, pc, #40	@ (adr r1, 800ad68 <__ieee754_atan2+0x158>)
 800ad40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad44:	e783      	b.n	800ac4e <__ieee754_atan2+0x3e>
 800ad46:	a10c      	add	r1, pc, #48	@ (adr r1, 800ad78 <__ieee754_atan2+0x168>)
 800ad48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad4c:	e77f      	b.n	800ac4e <__ieee754_atan2+0x3e>
 800ad4e:	2000      	movs	r0, #0
 800ad50:	2100      	movs	r1, #0
 800ad52:	e77c      	b.n	800ac4e <__ieee754_atan2+0x3e>
 800ad54:	a106      	add	r1, pc, #24	@ (adr r1, 800ad70 <__ieee754_atan2+0x160>)
 800ad56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad5a:	e778      	b.n	800ac4e <__ieee754_atan2+0x3e>
 800ad5c:	f3af 8000 	nop.w
 800ad60:	33145c07 	.word	0x33145c07
 800ad64:	3ca1a626 	.word	0x3ca1a626
 800ad68:	54442d18 	.word	0x54442d18
 800ad6c:	400921fb 	.word	0x400921fb
 800ad70:	54442d18 	.word	0x54442d18
 800ad74:	3ff921fb 	.word	0x3ff921fb
 800ad78:	54442d18 	.word	0x54442d18
 800ad7c:	3fe921fb 	.word	0x3fe921fb
 800ad80:	0800b388 	.word	0x0800b388
 800ad84:	0800b370 	.word	0x0800b370
 800ad88:	54442d18 	.word	0x54442d18
 800ad8c:	c00921fb 	.word	0xc00921fb
 800ad90:	54442d18 	.word	0x54442d18
 800ad94:	bff921fb 	.word	0xbff921fb
 800ad98:	7ff00000 	.word	0x7ff00000

0800ad9c <_init>:
 800ad9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9e:	bf00      	nop
 800ada0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ada2:	bc08      	pop	{r3}
 800ada4:	469e      	mov	lr, r3
 800ada6:	4770      	bx	lr

0800ada8 <_fini>:
 800ada8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adaa:	bf00      	nop
 800adac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adae:	bc08      	pop	{r3}
 800adb0:	469e      	mov	lr, r3
 800adb2:	4770      	bx	lr
