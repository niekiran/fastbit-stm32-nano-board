
008_SPI_Loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003770  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003900  08003900  00004900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003984  08003984  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003984  08003984  00004984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800398c  0800398c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800398c  0800398c  0000498c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003990  08003990  00004990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003994  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          000001d4  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000023c  2000023c  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006afd  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001620  00000000  00000000  0000bb95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006c0  00000000  00000000  0000d1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004f5  00000000  00000000  0000d878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d773  00000000  00000000  0000dd6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008d18  00000000  00000000  0002b4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac018  00000000  00000000  000341f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e0210  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002194  00000000  00000000  000e0254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  000e23e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080038e8 	.word	0x080038e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080038e8 	.word	0x080038e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 faaf 	bl	80007d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Initialize the transmit buffer with predefined values */
  uint8_t tx_buffer[] = {0x10, 0x20, 0x30, 0x40, 0x50};
 800027a:	4a0e      	ldr	r2, [pc, #56]	@ (80002b4 <main+0x44>)
 800027c:	f107 030c 	add.w	r3, r7, #12
 8000280:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000284:	6018      	str	r0, [r3, #0]
 8000286:	3304      	adds	r3, #4
 8000288:	7019      	strb	r1, [r3, #0]
  /* Initialize the receive buffer with zeros */
  uint8_t rx_buffer[sizeof(tx_buffer)];
  int tx_size = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028e:	f000 f813 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000292:	f000 f895 	bl	80003c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000296:	f000 f855 	bl	8000344 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  tx_size = (sizeof(tx_buffer)) / (sizeof(tx_buffer[0]));
 800029a:	2305      	movs	r3, #5
 800029c:	617b      	str	r3, [r7, #20]
  spi_transmit_receive(tx_buffer, rx_buffer, tx_size);
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	1d39      	adds	r1, r7, #4
 80002a4:	f107 030c 	add.w	r3, r7, #12
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f8bf 	bl	800042c <spi_transmit_receive>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ae:	bf00      	nop
 80002b0:	e7fd      	b.n	80002ae <main+0x3e>
 80002b2:	bf00      	nop
 80002b4:	08003900 	.word	0x08003900

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b090      	sub	sp, #64	@ 0x40
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	2228      	movs	r2, #40	@ 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 fcc1 	bl	8002c4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002da:	2301      	movs	r3, #1
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	2301      	movs	r3, #1
 80002ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ec:	2302      	movs	r3, #2
 80002ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fc:	f107 0318 	add.w	r3, r7, #24
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fd2f 	bl	8000d64 <HAL_RCC_OscConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800030c:	f000 f888 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	230f      	movs	r3, #15
 8000312:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000314:	2302      	movs	r3, #2
 8000316:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800031c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2102      	movs	r1, #2
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fd58 	bl	8001de0 <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000336:	f000 f873 	bl	8000420 <Error_Handler>
  }
}
 800033a:	bf00      	nop
 800033c:	3740      	adds	r7, #64	@ 0x40
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000348:	4b1b      	ldr	r3, [pc, #108]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800034a:	4a1c      	ldr	r2, [pc, #112]	@ (80003bc <MX_SPI1_Init+0x78>)
 800034c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800034e:	4b1a      	ldr	r3, [pc, #104]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000350:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000354:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000356:	4b18      	ldr	r3, [pc, #96]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800035c:	4b16      	ldr	r3, [pc, #88]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800035e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000362:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000364:	4b14      	ldr	r3, [pc, #80]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800036a:	4b13      	ldr	r3, [pc, #76]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800036c:	2200      	movs	r2, #0
 800036e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000370:	4b11      	ldr	r3, [pc, #68]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000372:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000376:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000378:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800037a:	2238      	movs	r2, #56	@ 0x38
 800037c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800037e:	4b0e      	ldr	r3, [pc, #56]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000384:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000390:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000392:	2207      	movs	r2, #7
 8000394:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000396:	4b08      	ldr	r3, [pc, #32]	@ (80003b8 <MX_SPI1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800039c:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <MX_SPI1_Init+0x74>)
 800039e:	2208      	movs	r2, #8
 80003a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003a2:	4805      	ldr	r0, [pc, #20]	@ (80003b8 <MX_SPI1_Init+0x74>)
 80003a4:	f001 ff02 	bl	80021ac <HAL_SPI_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003ae:	f000 f837 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000084 	.word	0x20000084
 80003bc:	40013000 	.word	0x40013000

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c6:	4b15      	ldr	r3, [pc, #84]	@ (800041c <MX_GPIO_Init+0x5c>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a14      	ldr	r2, [pc, #80]	@ (800041c <MX_GPIO_Init+0x5c>)
 80003cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b12      	ldr	r3, [pc, #72]	@ (800041c <MX_GPIO_Init+0x5c>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <MX_GPIO_Init+0x5c>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a0e      	ldr	r2, [pc, #56]	@ (800041c <MX_GPIO_Init+0x5c>)
 80003e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <MX_GPIO_Init+0x5c>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f6:	4b09      	ldr	r3, [pc, #36]	@ (800041c <MX_GPIO_Init+0x5c>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a08      	ldr	r2, [pc, #32]	@ (800041c <MX_GPIO_Init+0x5c>)
 80003fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000400:	6153      	str	r3, [r2, #20]
 8000402:	4b06      	ldr	r3, [pc, #24]	@ (800041c <MX_GPIO_Init+0x5c>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800040e:	bf00      	nop
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <Error_Handler+0x8>

0800042c <spi_transmit_receive>:
  * @param  tx_buffer: Pointer to the transmit buffer.
  * @param  rx_buffer: Pointer to the receive buffer.
  * @param  tx_size: Size of the transmit buffer.
  * @retval None
  */
void spi_transmit_receive(uint8_t *tx_buffer, uint8_t *rx_buffer, uint8_t tx_size) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af02      	add	r7, sp, #8
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	4613      	mov	r3, r2
 8000438:	71fb      	strb	r3, [r7, #7]
  /* Assuming the size of the received buffer is the same as the transmit buffer */
  uint8_t rx_size = tx_size;
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	74fb      	strb	r3, [r7, #19]
  if (tx_size > 0) {
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d009      	beq.n	8000458 <spi_transmit_receive+0x2c>
    HAL_SPI_TransmitReceive(&hspi1, tx_buffer, rx_buffer, tx_size, HAL_MAX_DELAY);
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	b29b      	uxth	r3, r3
 8000448:	f04f 32ff 	mov.w	r2, #4294967295
 800044c:	9200      	str	r2, [sp, #0]
 800044e:	68ba      	ldr	r2, [r7, #8]
 8000450:	68f9      	ldr	r1, [r7, #12]
 8000452:	480f      	ldr	r0, [pc, #60]	@ (8000490 <spi_transmit_receive+0x64>)
 8000454:	f001 ff55 	bl	8002302 <HAL_SPI_TransmitReceive>
  }
  /* Print received data in the SWV terminal */
  printf("Received data: ");
 8000458:	480e      	ldr	r0, [pc, #56]	@ (8000494 <spi_transmit_receive+0x68>)
 800045a:	f002 fb9b 	bl	8002b94 <iprintf>
  for (int i = 0; i < rx_size; i++) {
 800045e:	2300      	movs	r3, #0
 8000460:	617b      	str	r3, [r7, #20]
 8000462:	e00a      	b.n	800047a <spi_transmit_receive+0x4e>
    printf("%02X ", rx_buffer[i]);
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	68ba      	ldr	r2, [r7, #8]
 8000468:	4413      	add	r3, r2
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	4619      	mov	r1, r3
 800046e:	480a      	ldr	r0, [pc, #40]	@ (8000498 <spi_transmit_receive+0x6c>)
 8000470:	f002 fb90 	bl	8002b94 <iprintf>
  for (int i = 0; i < rx_size; i++) {
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	3301      	adds	r3, #1
 8000478:	617b      	str	r3, [r7, #20]
 800047a:	7cfb      	ldrb	r3, [r7, #19]
 800047c:	697a      	ldr	r2, [r7, #20]
 800047e:	429a      	cmp	r2, r3
 8000480:	dbf0      	blt.n	8000464 <spi_transmit_receive+0x38>
  }
  printf("\n");
 8000482:	200a      	movs	r0, #10
 8000484:	f002 fb98 	bl	8002bb8 <putchar>
}
 8000488:	bf00      	nop
 800048a:	3718      	adds	r7, #24
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000084 	.word	0x20000084
 8000494:	08003908 	.word	0x08003908
 8000498:	08003918 	.word	0x08003918

0800049c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a2:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <HAL_MspInit+0x44>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a0e      	ldr	r2, [pc, #56]	@ (80004e0 <HAL_MspInit+0x44>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6193      	str	r3, [r2, #24]
 80004ae:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <HAL_MspInit+0x44>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ba:	4b09      	ldr	r3, [pc, #36]	@ (80004e0 <HAL_MspInit+0x44>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a08      	ldr	r2, [pc, #32]	@ (80004e0 <HAL_MspInit+0x44>)
 80004c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <HAL_MspInit+0x44>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	@ 0x28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a17      	ldr	r2, [pc, #92]	@ (8000560 <HAL_SPI_MspInit+0x7c>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d128      	bne.n	8000558 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000506:	4b17      	ldr	r3, [pc, #92]	@ (8000564 <HAL_SPI_MspInit+0x80>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a16      	ldr	r2, [pc, #88]	@ (8000564 <HAL_SPI_MspInit+0x80>)
 800050c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <HAL_SPI_MspInit+0x80>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b11      	ldr	r3, [pc, #68]	@ (8000564 <HAL_SPI_MspInit+0x80>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a10      	ldr	r2, [pc, #64]	@ (8000564 <HAL_SPI_MspInit+0x80>)
 8000524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <HAL_SPI_MspInit+0x80>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000536:	23e0      	movs	r3, #224	@ 0xe0
 8000538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053a:	2302      	movs	r3, #2
 800053c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000542:	2303      	movs	r3, #3
 8000544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000546:	2305      	movs	r3, #5
 8000548:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4619      	mov	r1, r3
 8000550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000554:	f000 fa8c 	bl	8000a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000558:	bf00      	nop
 800055a:	3728      	adds	r7, #40	@ 0x28
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40013000 	.word	0x40013000
 8000564:	40021000 	.word	0x40021000

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <NMI_Handler+0x4>

08000570 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <HardFault_Handler+0x4>

08000578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <MemManage_Handler+0x4>

08000580 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <BusFault_Handler+0x4>

08000588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <UsageFault_Handler+0x4>

08000590 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005be:	f000 f951 	bl	8000864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  //Enable TRCENA
  DEMCR |= ( 1 << 24);
 80005d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <ITM_SendChar+0x48>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000610 <ITM_SendChar+0x48>)
 80005d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005dc:	6013      	str	r3, [r2, #0]

  //enable stimulus port 0
  ITM_TRACE_EN |= ( 1 << 0);
 80005de:	4b0d      	ldr	r3, [pc, #52]	@ (8000614 <ITM_SendChar+0x4c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000614 <ITM_SendChar+0x4c>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6013      	str	r3, [r2, #0]

  // read FIFO status in bit [0]:
  while(!(ITM_STIMULUS_PORT0 & 1));
 80005ea:	bf00      	nop
 80005ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0f8      	beq.n	80005ec <ITM_SendChar+0x24>

  //Write to ITM stimulus port0
  ITM_STIMULUS_PORT0 = ch;
 80005fa:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	6013      	str	r3, [r2, #0]
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000edfc 	.word	0xe000edfc
 8000614:	e0000e00 	.word	0xe0000e00

08000618 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	e00a      	b.n	8000640 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800062a:	f3af 8000 	nop.w
 800062e:	4601      	mov	r1, r0
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	60ba      	str	r2, [r7, #8]
 8000636:	b2ca      	uxtb	r2, r1
 8000638:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	3301      	adds	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	429a      	cmp	r2, r3
 8000646:	dbf0      	blt.n	800062a <_read+0x12>
  }

  return len;
 8000648:	687b      	ldr	r3, [r7, #4]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b086      	sub	sp, #24
 8000656:	af00      	add	r7, sp, #0
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	e009      	b.n	8000678 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	60ba      	str	r2, [r7, #8]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ffab 	bl	80005c8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	3301      	adds	r3, #1
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697a      	ldr	r2, [r7, #20]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	429a      	cmp	r2, r3
 800067e:	dbf1      	blt.n	8000664 <_write+0x12>
  }
  return len;
 8000680:	687b      	ldr	r3, [r7, #4]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <_close>:

int _close(int file)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
 80006aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006b2:	605a      	str	r2, [r3, #4]
  return 0;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <_isatty>:

int _isatty(int file)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
	...

080006f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006fc:	4a14      	ldr	r2, [pc, #80]	@ (8000750 <_sbrk+0x5c>)
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <_sbrk+0x60>)
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000708:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <_sbrk+0x64>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d102      	bne.n	8000716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <_sbrk+0x64>)
 8000712:	4a12      	ldr	r2, [pc, #72]	@ (800075c <_sbrk+0x68>)
 8000714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000716:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <_sbrk+0x64>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	429a      	cmp	r2, r3
 8000722:	d207      	bcs.n	8000734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000724:	f002 fae2 	bl	8002cec <__errno>
 8000728:	4603      	mov	r3, r0
 800072a:	220c      	movs	r2, #12
 800072c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
 8000732:	e009      	b.n	8000748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000734:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <_sbrk+0x64>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800073a:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <_sbrk+0x64>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	4a05      	ldr	r2, [pc, #20]	@ (8000758 <_sbrk+0x64>)
 8000744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000746:	68fb      	ldr	r3, [r7, #12]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000a000 	.word	0x2000a000
 8000754:	00000400 	.word	0x00000400
 8000758:	200000e8 	.word	0x200000e8
 800075c:	20000240 	.word	0x20000240

08000760 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <SystemInit+0x20>)
 8000766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800076a:	4a05      	ldr	r2, [pc, #20]	@ (8000780 <SystemInit+0x20>)
 800076c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000770:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000784:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007bc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000788:	f7ff ffea 	bl	8000760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800078c:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800078e:	490d      	ldr	r1, [pc, #52]	@ (80007c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000790:	4a0d      	ldr	r2, [pc, #52]	@ (80007c8 <LoopForever+0xe>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000794:	e002      	b.n	800079c <LoopCopyDataInit>

08000796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079a:	3304      	adds	r3, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800079c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a0:	d3f9      	bcc.n	8000796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a2:	4a0a      	ldr	r2, [pc, #40]	@ (80007cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a4:	4c0a      	ldr	r4, [pc, #40]	@ (80007d0 <LoopForever+0x16>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a8:	e001      	b.n	80007ae <LoopFillZerobss>

080007aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ac:	3204      	adds	r2, #4

080007ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b0:	d3fb      	bcc.n	80007aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007b2:	f002 faa1 	bl	8002cf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007b6:	f7ff fd5b 	bl	8000270 <main>

080007ba <LoopForever>:

LoopForever:
    b LoopForever
 80007ba:	e7fe      	b.n	80007ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007bc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80007c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007c8:	08003994 	.word	0x08003994
  ldr r2, =_sbss
 80007cc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80007d0:	2000023c 	.word	0x2000023c

080007d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007d4:	e7fe      	b.n	80007d4 <ADC1_2_IRQHandler>
	...

080007d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007dc:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <HAL_Init+0x28>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a07      	ldr	r2, [pc, #28]	@ (8000800 <HAL_Init+0x28>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 f90d 	bl	8000a08 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ee:	200f      	movs	r0, #15
 80007f0:	f000 f808 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f4:	f7ff fe52 	bl	800049c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40022000 	.word	0x40022000

08000804 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <HAL_InitTick+0x54>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <HAL_InitTick+0x58>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081a:	fbb3 f3f1 	udiv	r3, r3, r1
 800081e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f917 	bl	8000a56 <HAL_SYSTICK_Config>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	e00e      	b.n	8000850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d80a      	bhi.n	800084e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000838:	2200      	movs	r2, #0
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f000 f8ed 	bl	8000a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000844:	4a06      	ldr	r2, [pc, #24]	@ (8000860 <HAL_InitTick+0x5c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
 800084c:	e000      	b.n	8000850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000000 	.word	0x20000000
 800085c:	20000008 	.word	0x20000008
 8000860:	20000004 	.word	0x20000004

08000864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <HAL_IncTick+0x20>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_IncTick+0x24>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <HAL_IncTick+0x24>)
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008
 8000888:	200000ec 	.word	0x200000ec

0800088c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000890:	4b03      	ldr	r3, [pc, #12]	@ (80008a0 <HAL_GetTick+0x14>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	200000ec 	.word	0x200000ec

080008a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d6:	4a04      	ldr	r2, [pc, #16]	@ (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	60d3      	str	r3, [r2, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f0:	4b04      	ldr	r3, [pc, #16]	@ (8000904 <__NVIC_GetPriorityGrouping+0x18>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	0a1b      	lsrs	r3, r3, #8
 80008f6:	f003 0307 	and.w	r3, r3, #7
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db0a      	blt.n	8000932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	490c      	ldr	r1, [pc, #48]	@ (8000954 <__NVIC_SetPriority+0x4c>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	0112      	lsls	r2, r2, #4
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	440b      	add	r3, r1
 800092c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000930:	e00a      	b.n	8000948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4908      	ldr	r1, [pc, #32]	@ (8000958 <__NVIC_SetPriority+0x50>)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f003 030f 	and.w	r3, r3, #15
 800093e:	3b04      	subs	r3, #4
 8000940:	0112      	lsls	r2, r2, #4
 8000942:	b2d2      	uxtb	r2, r2
 8000944:	440b      	add	r3, r1
 8000946:	761a      	strb	r2, [r3, #24]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b480      	push	{r7}
 800095e:	b089      	sub	sp, #36	@ 0x24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f1c3 0307 	rsb	r3, r3, #7
 8000976:	2b04      	cmp	r3, #4
 8000978:	bf28      	it	cs
 800097a:	2304      	movcs	r3, #4
 800097c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3304      	adds	r3, #4
 8000982:	2b06      	cmp	r3, #6
 8000984:	d902      	bls.n	800098c <NVIC_EncodePriority+0x30>
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3b03      	subs	r3, #3
 800098a:	e000      	b.n	800098e <NVIC_EncodePriority+0x32>
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	f04f 32ff 	mov.w	r2, #4294967295
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43da      	mvns	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	401a      	ands	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a4:	f04f 31ff 	mov.w	r1, #4294967295
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43d9      	mvns	r1, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	4313      	orrs	r3, r2
         );
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3724      	adds	r7, #36	@ 0x24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009d4:	d301      	bcc.n	80009da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00f      	b.n	80009fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009da:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <SysTick_Config+0x40>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009e2:	210f      	movs	r1, #15
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f7ff ff8e 	bl	8000908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ec:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <SysTick_Config+0x40>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f2:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <SysTick_Config+0x40>)
 80009f4:	2207      	movs	r2, #7
 80009f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	e000e010 	.word	0xe000e010

08000a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff47 	bl	80008a4 <__NVIC_SetPriorityGrouping>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a30:	f7ff ff5c 	bl	80008ec <__NVIC_GetPriorityGrouping>
 8000a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	6978      	ldr	r0, [r7, #20]
 8000a3c:	f7ff ff8e 	bl	800095c <NVIC_EncodePriority>
 8000a40:	4602      	mov	r2, r0
 8000a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff5d 	bl	8000908 <__NVIC_SetPriority>
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ffb0 	bl	80009c4 <SysTick_Config>
 8000a64:	4603      	mov	r3, r0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a7e:	e154      	b.n	8000d2a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	2101      	movs	r1, #1
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 8146 	beq.w	8000d24 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 0303 	and.w	r3, r3, #3
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d005      	beq.n	8000ab0 <HAL_GPIO_Init+0x40>
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 0303 	and.w	r3, r3, #3
 8000aac:	2b02      	cmp	r3, #2
 8000aae:	d130      	bne.n	8000b12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	2203      	movs	r2, #3
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68da      	ldr	r2, [r3, #12]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	f003 0201 	and.w	r2, r3, #1
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d017      	beq.n	8000b4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	2203      	movs	r2, #3
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 0303 	and.w	r3, r3, #3
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d123      	bne.n	8000ba2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	08da      	lsrs	r2, r3, #3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3208      	adds	r2, #8
 8000b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	220f      	movs	r2, #15
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	691a      	ldr	r2, [r3, #16]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	08da      	lsrs	r2, r3, #3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3208      	adds	r2, #8
 8000b9c:	6939      	ldr	r1, [r7, #16]
 8000b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2203      	movs	r2, #3
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 0203 	and.w	r2, r3, #3
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 80a0 	beq.w	8000d24 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be4:	4b58      	ldr	r3, [pc, #352]	@ (8000d48 <HAL_GPIO_Init+0x2d8>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a57      	ldr	r2, [pc, #348]	@ (8000d48 <HAL_GPIO_Init+0x2d8>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b55      	ldr	r3, [pc, #340]	@ (8000d48 <HAL_GPIO_Init+0x2d8>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bfc:	4a53      	ldr	r2, [pc, #332]	@ (8000d4c <HAL_GPIO_Init+0x2dc>)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	3302      	adds	r3, #2
 8000c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	220f      	movs	r2, #15
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c26:	d019      	beq.n	8000c5c <HAL_GPIO_Init+0x1ec>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a49      	ldr	r2, [pc, #292]	@ (8000d50 <HAL_GPIO_Init+0x2e0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d013      	beq.n	8000c58 <HAL_GPIO_Init+0x1e8>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a48      	ldr	r2, [pc, #288]	@ (8000d54 <HAL_GPIO_Init+0x2e4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d00d      	beq.n	8000c54 <HAL_GPIO_Init+0x1e4>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a47      	ldr	r2, [pc, #284]	@ (8000d58 <HAL_GPIO_Init+0x2e8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d007      	beq.n	8000c50 <HAL_GPIO_Init+0x1e0>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a46      	ldr	r2, [pc, #280]	@ (8000d5c <HAL_GPIO_Init+0x2ec>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d101      	bne.n	8000c4c <HAL_GPIO_Init+0x1dc>
 8000c48:	2304      	movs	r3, #4
 8000c4a:	e008      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c4c:	2305      	movs	r3, #5
 8000c4e:	e006      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c50:	2303      	movs	r3, #3
 8000c52:	e004      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c54:	2302      	movs	r3, #2
 8000c56:	e002      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e000      	b.n	8000c5e <HAL_GPIO_Init+0x1ee>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	f002 0203 	and.w	r2, r2, #3
 8000c64:	0092      	lsls	r2, r2, #2
 8000c66:	4093      	lsls	r3, r2
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c6e:	4937      	ldr	r1, [pc, #220]	@ (8000d4c <HAL_GPIO_Init+0x2dc>)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	3302      	adds	r3, #2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c7c:	4b38      	ldr	r3, [pc, #224]	@ (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ca6:	4b2e      	ldr	r3, [pc, #184]	@ (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cca:	4a25      	ldr	r2, [pc, #148]	@ (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cd0:	4b23      	ldr	r3, [pc, #140]	@ (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d1e:	4a10      	ldr	r2, [pc, #64]	@ (8000d60 <HAL_GPIO_Init+0x2f0>)
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	3301      	adds	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fa22 f303 	lsr.w	r3, r2, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f47f aea3 	bne.w	8000a80 <HAL_GPIO_Init+0x10>
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	bf00      	nop
 8000d3e:	371c      	adds	r7, #28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010000 	.word	0x40010000
 8000d50:	48000400 	.word	0x48000400
 8000d54:	48000800 	.word	0x48000800
 8000d58:	48000c00 	.word	0x48000c00
 8000d5c:	48001000 	.word	0x48001000
 8000d60:	40010400 	.word	0x40010400

08000d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d74:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	f001 b823 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 817d 	beq.w	800109a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000da0:	4bbc      	ldr	r3, [pc, #752]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 030c 	and.w	r3, r3, #12
 8000da8:	2b04      	cmp	r3, #4
 8000daa:	d00c      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dac:	4bb9      	ldr	r3, [pc, #740]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 030c 	and.w	r3, r3, #12
 8000db4:	2b08      	cmp	r3, #8
 8000db6:	d15c      	bne.n	8000e72 <HAL_RCC_OscConfig+0x10e>
 8000db8:	4bb6      	ldr	r3, [pc, #728]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dc4:	d155      	bne.n	8000e72 <HAL_RCC_OscConfig+0x10e>
 8000dc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dca:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000dd2:	fa93 f3a3 	rbit	r3, r3
 8000dd6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dda:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dde:	fab3 f383 	clz	r3, r3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	095b      	lsrs	r3, r3, #5
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d102      	bne.n	8000df8 <HAL_RCC_OscConfig+0x94>
 8000df2:	4ba8      	ldr	r3, [pc, #672]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	e015      	b.n	8000e24 <HAL_RCC_OscConfig+0xc0>
 8000df8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dfc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e00:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000e04:	fa93 f3a3 	rbit	r3, r3
 8000e08:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000e0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e10:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000e14:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000e18:	fa93 f3a3 	rbit	r3, r3
 8000e1c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000e20:	4b9c      	ldr	r3, [pc, #624]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e28:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000e2c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e30:	fa92 f2a2 	rbit	r2, r2
 8000e34:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000e38:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000e3c:	fab2 f282 	clz	r2, r2
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	f042 0220 	orr.w	r2, r2, #32
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	f002 021f 	and.w	r2, r2, #31
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 811f 	beq.w	8001098 <HAL_RCC_OscConfig+0x334>
 8000e5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f040 8116 	bne.w	8001098 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	f000 bfaf 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e82:	d106      	bne.n	8000e92 <HAL_RCC_OscConfig+0x12e>
 8000e84:	4b83      	ldr	r3, [pc, #524]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a82      	ldr	r2, [pc, #520]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	e036      	b.n	8000f00 <HAL_RCC_OscConfig+0x19c>
 8000e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10c      	bne.n	8000ebc <HAL_RCC_OscConfig+0x158>
 8000ea2:	4b7c      	ldr	r3, [pc, #496]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a7b      	ldr	r2, [pc, #492]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	4b79      	ldr	r3, [pc, #484]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a78      	ldr	r2, [pc, #480]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000eb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e021      	b.n	8000f00 <HAL_RCC_OscConfig+0x19c>
 8000ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ec0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ecc:	d10c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x184>
 8000ece:	4b71      	ldr	r3, [pc, #452]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a70      	ldr	r2, [pc, #448]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	4b6e      	ldr	r3, [pc, #440]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a6d      	ldr	r2, [pc, #436]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e00b      	b.n	8000f00 <HAL_RCC_OscConfig+0x19c>
 8000ee8:	4b6a      	ldr	r3, [pc, #424]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a69      	ldr	r2, [pc, #420]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b67      	ldr	r3, [pc, #412]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a66      	ldr	r2, [pc, #408]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000efe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f00:	4b64      	ldr	r3, [pc, #400]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f04:	f023 020f 	bic.w	r2, r3, #15
 8000f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	495f      	ldr	r1, [pc, #380]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d059      	beq.n	8000fde <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2a:	f7ff fcaf 	bl	800088c <HAL_GetTick>
 8000f2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f32:	e00a      	b.n	8000f4a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f34:	f7ff fcaa 	bl	800088c <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b64      	cmp	r3, #100	@ 0x64
 8000f42:	d902      	bls.n	8000f4a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	f000 bf43 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>
 8000f4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f4e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f52:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000f56:	fa93 f3a3 	rbit	r3, r3
 8000f5a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000f5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f62:	fab3 f383 	clz	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	095b      	lsrs	r3, r3, #5
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d102      	bne.n	8000f7c <HAL_RCC_OscConfig+0x218>
 8000f76:	4b47      	ldr	r3, [pc, #284]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	e015      	b.n	8000fa8 <HAL_RCC_OscConfig+0x244>
 8000f7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f80:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f84:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000f88:	fa93 f3a3 	rbit	r3, r3
 8000f8c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000f90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f94:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000f98:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000f9c:	fa93 f3a3 	rbit	r3, r3
 8000fa0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000fa4:	4b3b      	ldr	r3, [pc, #236]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fac:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000fb0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000fb4:	fa92 f2a2 	rbit	r2, r2
 8000fb8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000fbc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000fc0:	fab2 f282 	clz	r2, r2
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	f042 0220 	orr.w	r2, r2, #32
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	f002 021f 	and.w	r2, r2, #31
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0ab      	beq.n	8000f34 <HAL_RCC_OscConfig+0x1d0>
 8000fdc:	e05d      	b.n	800109a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fde:	f7ff fc55 	bl	800088c <HAL_GetTick>
 8000fe2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe6:	e00a      	b.n	8000ffe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fc50 	bl	800088c <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b64      	cmp	r3, #100	@ 0x64
 8000ff6:	d902      	bls.n	8000ffe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	f000 bee9 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>
 8000ffe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001002:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001006:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800100a:	fa93 f3a3 	rbit	r3, r3
 800100e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001012:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001016:	fab3 f383 	clz	r3, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	095b      	lsrs	r3, r3, #5
 800101e:	b2db      	uxtb	r3, r3
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d102      	bne.n	8001030 <HAL_RCC_OscConfig+0x2cc>
 800102a:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	e015      	b.n	800105c <HAL_RCC_OscConfig+0x2f8>
 8001030:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001034:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001038:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800103c:	fa93 f3a3 	rbit	r3, r3
 8001040:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001044:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001048:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800104c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001058:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <HAL_RCC_OscConfig+0x330>)
 800105a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001060:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001064:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001068:	fa92 f2a2 	rbit	r2, r2
 800106c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001070:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001074:	fab2 f282 	clz	r2, r2
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	f042 0220 	orr.w	r2, r2, #32
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	f002 021f 	and.w	r2, r2, #31
 8001084:	2101      	movs	r1, #1
 8001086:	fa01 f202 	lsl.w	r2, r1, r2
 800108a:	4013      	ands	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1ab      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x284>
 8001090:	e003      	b.n	800109a <HAL_RCC_OscConfig+0x336>
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800109e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 817d 	beq.w	80013aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010b0:	4ba6      	ldr	r3, [pc, #664]	@ (800134c <HAL_RCC_OscConfig+0x5e8>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 030c 	and.w	r3, r3, #12
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00b      	beq.n	80010d4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010bc:	4ba3      	ldr	r3, [pc, #652]	@ (800134c <HAL_RCC_OscConfig+0x5e8>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d172      	bne.n	80011ae <HAL_RCC_OscConfig+0x44a>
 80010c8:	4ba0      	ldr	r3, [pc, #640]	@ (800134c <HAL_RCC_OscConfig+0x5e8>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d16c      	bne.n	80011ae <HAL_RCC_OscConfig+0x44a>
 80010d4:	2302      	movs	r3, #2
 80010d6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80010e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ea:	fab3 f383 	clz	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	095b      	lsrs	r3, r3, #5
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d102      	bne.n	8001104 <HAL_RCC_OscConfig+0x3a0>
 80010fe:	4b93      	ldr	r3, [pc, #588]	@ (800134c <HAL_RCC_OscConfig+0x5e8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	e013      	b.n	800112c <HAL_RCC_OscConfig+0x3c8>
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800110e:	fa93 f3a3 	rbit	r3, r3
 8001112:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001116:	2302      	movs	r3, #2
 8001118:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800111c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001120:	fa93 f3a3 	rbit	r3, r3
 8001124:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001128:	4b88      	ldr	r3, [pc, #544]	@ (800134c <HAL_RCC_OscConfig+0x5e8>)
 800112a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112c:	2202      	movs	r2, #2
 800112e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001132:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001136:	fa92 f2a2 	rbit	r2, r2
 800113a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800113e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001142:	fab2 f282 	clz	r2, r2
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	f042 0220 	orr.w	r2, r2, #32
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	f002 021f 	and.w	r2, r2, #31
 8001152:	2101      	movs	r1, #1
 8001154:	fa01 f202 	lsl.w	r2, r1, r2
 8001158:	4013      	ands	r3, r2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00a      	beq.n	8001174 <HAL_RCC_OscConfig+0x410>
 800115e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001162:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d002      	beq.n	8001174 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	f000 be2e 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001174:	4b75      	ldr	r3, [pc, #468]	@ (800134c <HAL_RCC_OscConfig+0x5e8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800117c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001180:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	21f8      	movs	r1, #248	@ 0xf8
 800118a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001192:	fa91 f1a1 	rbit	r1, r1
 8001196:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800119a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800119e:	fab1 f181 	clz	r1, r1
 80011a2:	b2c9      	uxtb	r1, r1
 80011a4:	408b      	lsls	r3, r1
 80011a6:	4969      	ldr	r1, [pc, #420]	@ (800134c <HAL_RCC_OscConfig+0x5e8>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ac:	e0fd      	b.n	80013aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 8088 	beq.w	80012d0 <HAL_RCC_OscConfig+0x56c>
 80011c0:	2301      	movs	r3, #1
 80011c2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80011d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d6:	fab3 f383 	clz	r3, r3
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80011e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	461a      	mov	r2, r3
 80011e8:	2301      	movs	r3, #1
 80011ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fb4e 	bl	800088c <HAL_GetTick>
 80011f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f4:	e00a      	b.n	800120c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff fb49 	bl	800088c <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d902      	bls.n	800120c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	f000 bde2 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001212:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001216:	fa93 f3a3 	rbit	r3, r3
 800121a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800121e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001222:	fab3 f383 	clz	r3, r3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	095b      	lsrs	r3, r3, #5
 800122a:	b2db      	uxtb	r3, r3
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b01      	cmp	r3, #1
 8001234:	d102      	bne.n	800123c <HAL_RCC_OscConfig+0x4d8>
 8001236:	4b45      	ldr	r3, [pc, #276]	@ (800134c <HAL_RCC_OscConfig+0x5e8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	e013      	b.n	8001264 <HAL_RCC_OscConfig+0x500>
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001242:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001246:	fa93 f3a3 	rbit	r3, r3
 800124a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001254:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001258:	fa93 f3a3 	rbit	r3, r3
 800125c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001260:	4b3a      	ldr	r3, [pc, #232]	@ (800134c <HAL_RCC_OscConfig+0x5e8>)
 8001262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001264:	2202      	movs	r2, #2
 8001266:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800126a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800126e:	fa92 f2a2 	rbit	r2, r2
 8001272:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001276:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800127a:	fab2 f282 	clz	r2, r2
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	f042 0220 	orr.w	r2, r2, #32
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	f002 021f 	and.w	r2, r2, #31
 800128a:	2101      	movs	r1, #1
 800128c:	fa01 f202 	lsl.w	r2, r1, r2
 8001290:	4013      	ands	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0af      	beq.n	80011f6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001296:	4b2d      	ldr	r3, [pc, #180]	@ (800134c <HAL_RCC_OscConfig+0x5e8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800129e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	21f8      	movs	r1, #248	@ 0xf8
 80012ac:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80012b4:	fa91 f1a1 	rbit	r1, r1
 80012b8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80012bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80012c0:	fab1 f181 	clz	r1, r1
 80012c4:	b2c9      	uxtb	r1, r1
 80012c6:	408b      	lsls	r3, r1
 80012c8:	4920      	ldr	r1, [pc, #128]	@ (800134c <HAL_RCC_OscConfig+0x5e8>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	600b      	str	r3, [r1, #0]
 80012ce:	e06c      	b.n	80013aa <HAL_RCC_OscConfig+0x646>
 80012d0:	2301      	movs	r3, #1
 80012d2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80012da:	fa93 f3a3 	rbit	r3, r3
 80012de:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80012e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e6:	fab3 f383 	clz	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80012f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	461a      	mov	r2, r3
 80012f8:	2300      	movs	r3, #0
 80012fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fac6 	bl	800088c <HAL_GetTick>
 8001300:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001304:	e00a      	b.n	800131c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001306:	f7ff fac1 	bl	800088c <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d902      	bls.n	800131c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	f000 bd5a 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>
 800131c:	2302      	movs	r3, #2
 800131e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800132e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	095b      	lsrs	r3, r3, #5
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b01      	cmp	r3, #1
 8001344:	d104      	bne.n	8001350 <HAL_RCC_OscConfig+0x5ec>
 8001346:	4b01      	ldr	r3, [pc, #4]	@ (800134c <HAL_RCC_OscConfig+0x5e8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	e015      	b.n	8001378 <HAL_RCC_OscConfig+0x614>
 800134c:	40021000 	.word	0x40021000
 8001350:	2302      	movs	r3, #2
 8001352:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001356:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800135a:	fa93 f3a3 	rbit	r3, r3
 800135e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001368:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800136c:	fa93 f3a3 	rbit	r3, r3
 8001370:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001374:	4bc8      	ldr	r3, [pc, #800]	@ (8001698 <HAL_RCC_OscConfig+0x934>)
 8001376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001378:	2202      	movs	r2, #2
 800137a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800137e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001382:	fa92 f2a2 	rbit	r2, r2
 8001386:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800138a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800138e:	fab2 f282 	clz	r2, r2
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	f042 0220 	orr.w	r2, r2, #32
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	f002 021f 	and.w	r2, r2, #31
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1ad      	bne.n	8001306 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8110 	beq.w	80015e0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d079      	beq.n	80014c4 <HAL_RCC_OscConfig+0x760>
 80013d0:	2301      	movs	r3, #1
 80013d2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80013da:	fa93 f3a3 	rbit	r3, r3
 80013de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80013e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e6:	fab3 f383 	clz	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	4bab      	ldr	r3, [pc, #684]	@ (800169c <HAL_RCC_OscConfig+0x938>)
 80013f0:	4413      	add	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	461a      	mov	r2, r3
 80013f6:	2301      	movs	r3, #1
 80013f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fa47 	bl	800088c <HAL_GetTick>
 80013fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	e00a      	b.n	800141a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001404:	f7ff fa42 	bl	800088c <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d902      	bls.n	800141a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	f000 bcdb 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>
 800141a:	2302      	movs	r3, #2
 800141c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001424:	fa93 f3a3 	rbit	r3, r3
 8001428:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800142c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001430:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001434:	2202      	movs	r2, #2
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800143c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	fa93 f2a3 	rbit	r2, r3
 8001446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800144a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001458:	2202      	movs	r2, #2
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	fa93 f2a3 	rbit	r2, r3
 800146a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800146e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001472:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001474:	4b88      	ldr	r3, [pc, #544]	@ (8001698 <HAL_RCC_OscConfig+0x934>)
 8001476:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800147c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001480:	2102      	movs	r1, #2
 8001482:	6019      	str	r1, [r3, #0]
 8001484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001488:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	fa93 f1a3 	rbit	r1, r3
 8001492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001496:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800149a:	6019      	str	r1, [r3, #0]
  return result;
 800149c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	fab3 f383 	clz	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	f003 031f 	and.w	r3, r3, #31
 80014b6:	2101      	movs	r1, #1
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0a0      	beq.n	8001404 <HAL_RCC_OscConfig+0x6a0>
 80014c2:	e08d      	b.n	80015e0 <HAL_RCC_OscConfig+0x87c>
 80014c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	fa93 f2a3 	rbit	r2, r3
 80014de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014e6:	601a      	str	r2, [r3, #0]
  return result;
 80014e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ec:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f2:	fab3 f383 	clz	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b68      	ldr	r3, [pc, #416]	@ (800169c <HAL_RCC_OscConfig+0x938>)
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	461a      	mov	r2, r3
 8001502:	2300      	movs	r3, #0
 8001504:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001506:	f7ff f9c1 	bl	800088c <HAL_GetTick>
 800150a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150e:	e00a      	b.n	8001526 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001510:	f7ff f9bc 	bl	800088c <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d902      	bls.n	8001526 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	f000 bc55 	b.w	8001dd0 <HAL_RCC_OscConfig+0x106c>
 8001526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800152a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800152e:	2202      	movs	r2, #2
 8001530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001536:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	fa93 f2a3 	rbit	r2, r3
 8001540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001544:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800154e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001552:	2202      	movs	r2, #2
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800155a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fa93 f2a3 	rbit	r2, r3
 8001564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001568:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001572:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001576:	2202      	movs	r2, #2
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800157e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	fa93 f2a3 	rbit	r2, r3
 8001588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800158c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001590:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001592:	4b41      	ldr	r3, [pc, #260]	@ (8001698 <HAL_RCC_OscConfig+0x934>)
 8001594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800159a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800159e:	2102      	movs	r1, #2
 80015a0:	6019      	str	r1, [r3, #0]
 80015a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	fa93 f1a3 	rbit	r1, r3
 80015b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015b8:	6019      	str	r1, [r3, #0]
  return result;
 80015ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	fab3 f383 	clz	r3, r3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	2101      	movs	r1, #1
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d197      	bne.n	8001510 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 81a1 	beq.w	8001938 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fc:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <HAL_RCC_OscConfig+0x934>)
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d116      	bne.n	8001636 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001608:	4b23      	ldr	r3, [pc, #140]	@ (8001698 <HAL_RCC_OscConfig+0x934>)
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	4a22      	ldr	r2, [pc, #136]	@ (8001698 <HAL_RCC_OscConfig+0x934>)
 800160e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001612:	61d3      	str	r3, [r2, #28]
 8001614:	4b20      	ldr	r3, [pc, #128]	@ (8001698 <HAL_RCC_OscConfig+0x934>)
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800161c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001620:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800162a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800162e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001630:	2301      	movs	r3, #1
 8001632:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001636:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <HAL_RCC_OscConfig+0x93c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800163e:	2b00      	cmp	r3, #0
 8001640:	d11a      	bne.n	8001678 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001642:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <HAL_RCC_OscConfig+0x93c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a16      	ldr	r2, [pc, #88]	@ (80016a0 <HAL_RCC_OscConfig+0x93c>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800164c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164e:	f7ff f91d 	bl	800088c <HAL_GetTick>
 8001652:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	e009      	b.n	800166c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001658:	f7ff f918 	bl	800088c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b64      	cmp	r3, #100	@ 0x64
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e3b1      	b.n	8001dd0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <HAL_RCC_OscConfig+0x93c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0ef      	beq.n	8001658 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800167c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d10d      	bne.n	80016a4 <HAL_RCC_OscConfig+0x940>
 8001688:	4b03      	ldr	r3, [pc, #12]	@ (8001698 <HAL_RCC_OscConfig+0x934>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4a02      	ldr	r2, [pc, #8]	@ (8001698 <HAL_RCC_OscConfig+0x934>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6213      	str	r3, [r2, #32]
 8001694:	e03c      	b.n	8001710 <HAL_RCC_OscConfig+0x9ac>
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	10908120 	.word	0x10908120
 80016a0:	40007000 	.word	0x40007000
 80016a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10c      	bne.n	80016ce <HAL_RCC_OscConfig+0x96a>
 80016b4:	4bc1      	ldr	r3, [pc, #772]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4ac0      	ldr	r2, [pc, #768]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	4bbe      	ldr	r3, [pc, #760]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4abd      	ldr	r2, [pc, #756]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016c6:	f023 0304 	bic.w	r3, r3, #4
 80016ca:	6213      	str	r3, [r2, #32]
 80016cc:	e020      	b.n	8001710 <HAL_RCC_OscConfig+0x9ac>
 80016ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x994>
 80016de:	4bb7      	ldr	r3, [pc, #732]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	4ab6      	ldr	r2, [pc, #728]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	6213      	str	r3, [r2, #32]
 80016ea:	4bb4      	ldr	r3, [pc, #720]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4ab3      	ldr	r2, [pc, #716]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6213      	str	r3, [r2, #32]
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0x9ac>
 80016f8:	4bb0      	ldr	r3, [pc, #704]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4aaf      	ldr	r2, [pc, #700]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	6213      	str	r3, [r2, #32]
 8001704:	4bad      	ldr	r3, [pc, #692]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4aac      	ldr	r2, [pc, #688]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 800170a:	f023 0304 	bic.w	r3, r3, #4
 800170e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001714:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8081 	beq.w	8001824 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff f8b3 	bl	800088c <HAL_GetTick>
 8001726:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7ff f8ae 	bl	800088c <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e345      	b.n	8001dd0 <HAL_RCC_OscConfig+0x106c>
 8001744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001748:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800174c:	2202      	movs	r2, #2
 800174e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001754:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	fa93 f2a3 	rbit	r2, r3
 800175e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001762:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001770:	2202      	movs	r2, #2
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001778:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	fa93 f2a3 	rbit	r2, r3
 8001782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001786:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800178a:	601a      	str	r2, [r3, #0]
  return result;
 800178c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001790:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001794:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	095b      	lsrs	r3, r3, #5
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_OscConfig+0xa4c>
 80017aa:	4b84      	ldr	r3, [pc, #528]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	e013      	b.n	80017d8 <HAL_RCC_OscConfig+0xa74>
 80017b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80017b8:	2202      	movs	r2, #2
 80017ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	fa93 f2a3 	rbit	r2, r3
 80017ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ce:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	4b79      	ldr	r3, [pc, #484]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017dc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80017e0:	2102      	movs	r1, #2
 80017e2:	6011      	str	r1, [r2, #0]
 80017e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017e8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	fa92 f1a2 	rbit	r1, r2
 80017f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017f6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017fa:	6011      	str	r1, [r2, #0]
  return result;
 80017fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001800:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	fab2 f282 	clz	r2, r2
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	f002 021f 	and.w	r2, r2, #31
 8001816:	2101      	movs	r1, #1
 8001818:	fa01 f202 	lsl.w	r2, r1, r2
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d084      	beq.n	800172c <HAL_RCC_OscConfig+0x9c8>
 8001822:	e07f      	b.n	8001924 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001824:	f7ff f832 	bl	800088c <HAL_GetTick>
 8001828:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182c:	e00b      	b.n	8001846 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7ff f82d 	bl	800088c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e2c4      	b.n	8001dd0 <HAL_RCC_OscConfig+0x106c>
 8001846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800184a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800184e:	2202      	movs	r2, #2
 8001850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001856:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	fa93 f2a3 	rbit	r2, r3
 8001860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001864:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800186e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001872:	2202      	movs	r2, #2
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800187a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	fa93 f2a3 	rbit	r2, r3
 8001884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001888:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800188c:	601a      	str	r2, [r3, #0]
  return result;
 800188e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001892:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001896:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d102      	bne.n	80018b2 <HAL_RCC_OscConfig+0xb4e>
 80018ac:	4b43      	ldr	r3, [pc, #268]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	e013      	b.n	80018da <HAL_RCC_OscConfig+0xb76>
 80018b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018ba:	2202      	movs	r2, #2
 80018bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	fa93 f2a3 	rbit	r2, r3
 80018cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	4b39      	ldr	r3, [pc, #228]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018de:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80018e2:	2102      	movs	r1, #2
 80018e4:	6011      	str	r1, [r2, #0]
 80018e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018ea:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	fa92 f1a2 	rbit	r1, r2
 80018f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018f8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018fc:	6011      	str	r1, [r2, #0]
  return result;
 80018fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001902:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	fab2 f282 	clz	r2, r2
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	f002 021f 	and.w	r2, r2, #31
 8001918:	2101      	movs	r1, #1
 800191a:	fa01 f202 	lsl.w	r2, r1, r2
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d184      	bne.n	800182e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001924:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192c:	4b23      	ldr	r3, [pc, #140]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	4a22      	ldr	r2, [pc, #136]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 8001932:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001936:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800193c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 8242 	beq.w	8001dce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800194a:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <HAL_RCC_OscConfig+0xc58>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b08      	cmp	r3, #8
 8001954:	f000 8213 	beq.w	8001d7e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	2b02      	cmp	r3, #2
 8001966:	f040 8162 	bne.w	8001c2e <HAL_RCC_OscConfig+0xeca>
 800196a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001972:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	fa93 f2a3 	rbit	r2, r3
 8001986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800198e:	601a      	str	r2, [r3, #0]
  return result;
 8001990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001994:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001998:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	461a      	mov	r2, r3
 80019ac:	2300      	movs	r3, #0
 80019ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7fe ff6c 	bl	800088c <HAL_GetTick>
 80019b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b8:	e00c      	b.n	80019d4 <HAL_RCC_OscConfig+0xc70>
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c0:	f7fe ff64 	bl	800088c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e1fd      	b.n	8001dd0 <HAL_RCC_OscConfig+0x106c>
 80019d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80019dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019f8:	601a      	str	r2, [r3, #0]
  return result;
 80019fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019fe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d102      	bne.n	8001a1e <HAL_RCC_OscConfig+0xcba>
 8001a18:	4bb0      	ldr	r3, [pc, #704]	@ (8001cdc <HAL_RCC_OscConfig+0xf78>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	e027      	b.n	8001a6e <HAL_RCC_OscConfig+0xd0a>
 8001a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a22:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a30:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	fa93 f2a3 	rbit	r2, r3
 8001a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a48:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a56:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	fa93 f2a3 	rbit	r2, r3
 8001a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a64:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	4b9c      	ldr	r3, [pc, #624]	@ (8001cdc <HAL_RCC_OscConfig+0xf78>)
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a72:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001a76:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a7a:	6011      	str	r1, [r2, #0]
 8001a7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a80:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	fa92 f1a2 	rbit	r1, r2
 8001a8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a8e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a92:	6011      	str	r1, [r2, #0]
  return result;
 8001a94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a98:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	fab2 f282 	clz	r2, r2
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	f042 0220 	orr.w	r2, r2, #32
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	f002 021f 	and.w	r2, r2, #31
 8001aae:	2101      	movs	r1, #1
 8001ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d182      	bne.n	80019c0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aba:	4b88      	ldr	r3, [pc, #544]	@ (8001cdc <HAL_RCC_OscConfig+0xf78>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	430b      	orrs	r3, r1
 8001adc:	497f      	ldr	r1, [pc, #508]	@ (8001cdc <HAL_RCC_OscConfig+0xf78>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
 8001ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001aea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	fa93 f2a3 	rbit	r2, r3
 8001afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b02:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b06:	601a      	str	r2, [r3, #0]
  return result;
 8001b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b10:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b1c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	461a      	mov	r2, r3
 8001b24:	2301      	movs	r3, #1
 8001b26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7fe feb0 	bl	800088c <HAL_GetTick>
 8001b2c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b30:	e009      	b.n	8001b46 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b32:	f7fe feab 	bl	800088c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e144      	b.n	8001dd0 <HAL_RCC_OscConfig+0x106c>
 8001b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b58:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	fa93 f2a3 	rbit	r2, r3
 8001b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b66:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b6a:	601a      	str	r2, [r3, #0]
  return result;
 8001b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b70:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	095b      	lsrs	r3, r3, #5
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d102      	bne.n	8001b90 <HAL_RCC_OscConfig+0xe2c>
 8001b8a:	4b54      	ldr	r3, [pc, #336]	@ (8001cdc <HAL_RCC_OscConfig+0xf78>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	e027      	b.n	8001be0 <HAL_RCC_OscConfig+0xe7c>
 8001b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b94:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	fa93 f2a3 	rbit	r2, r3
 8001bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bba:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001bbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	fa93 f2a3 	rbit	r2, r3
 8001bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	4b3f      	ldr	r3, [pc, #252]	@ (8001cdc <HAL_RCC_OscConfig+0xf78>)
 8001bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001be4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001be8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001bec:	6011      	str	r1, [r2, #0]
 8001bee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bf2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	fa92 f1a2 	rbit	r1, r2
 8001bfc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c00:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c04:	6011      	str	r1, [r2, #0]
  return result;
 8001c06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c0a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	fab2 f282 	clz	r2, r2
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	f042 0220 	orr.w	r2, r2, #32
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	f002 021f 	and.w	r2, r2, #31
 8001c20:	2101      	movs	r1, #1
 8001c22:	fa01 f202 	lsl.w	r2, r1, r2
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d082      	beq.n	8001b32 <HAL_RCC_OscConfig+0xdce>
 8001c2c:	e0cf      	b.n	8001dce <HAL_RCC_OscConfig+0x106a>
 8001c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c32:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c40:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c52:	601a      	str	r2, [r3, #0]
  return result;
 8001c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c58:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c5c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c68:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2300      	movs	r3, #0
 8001c72:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7fe fe0a 	bl	800088c <HAL_GetTick>
 8001c78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7c:	e009      	b.n	8001c92 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7fe fe05 	bl	800088c <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e09e      	b.n	8001dd0 <HAL_RCC_OscConfig+0x106c>
 8001c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c96:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	fa93 f2a3 	rbit	r2, r3
 8001cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001cb6:	601a      	str	r2, [r3, #0]
  return result;
 8001cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cbc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001cc0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	095b      	lsrs	r3, r3, #5
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d104      	bne.n	8001ce0 <HAL_RCC_OscConfig+0xf7c>
 8001cd6:	4b01      	ldr	r3, [pc, #4]	@ (8001cdc <HAL_RCC_OscConfig+0xf78>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	e029      	b.n	8001d30 <HAL_RCC_OscConfig+0xfcc>
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ce8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d00:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d18:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	fa93 f2a3 	rbit	r2, r3
 8001d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d26:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ddc <HAL_RCC_OscConfig+0x1078>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d34:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d38:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d3c:	6011      	str	r1, [r2, #0]
 8001d3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d42:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	fa92 f1a2 	rbit	r1, r2
 8001d4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d50:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d54:	6011      	str	r1, [r2, #0]
  return result;
 8001d56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d5a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	fab2 f282 	clz	r2, r2
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	f042 0220 	orr.w	r2, r2, #32
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	f002 021f 	and.w	r2, r2, #31
 8001d70:	2101      	movs	r1, #1
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d180      	bne.n	8001c7e <HAL_RCC_OscConfig+0xf1a>
 8001d7c:	e027      	b.n	8001dce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e01e      	b.n	8001dd0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d92:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_RCC_OscConfig+0x1078>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d9e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d10b      	bne.n	8001dca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001db2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001db6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b09e      	sub	sp, #120	@ 0x78
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e162      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b90      	ldr	r3, [pc, #576]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d910      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b8d      	ldr	r3, [pc, #564]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0207 	bic.w	r2, r3, #7
 8001e0e:	498b      	ldr	r1, [pc, #556]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b89      	ldr	r3, [pc, #548]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e14a      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e34:	4b82      	ldr	r3, [pc, #520]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	497f      	ldr	r1, [pc, #508]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80dc 	beq.w	800200c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d13c      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xf6>
 8001e5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e60:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xa6>
 8001e80:	4b6f      	ldr	r3, [pc, #444]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	e00f      	b.n	8001ea6 <HAL_RCC_ClockConfig+0xc6>
 8001e86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e8a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e98:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ea2:	4b67      	ldr	r3, [pc, #412]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001eaa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001eac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001eae:	fa92 f2a2 	rbit	r2, r2
 8001eb2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001eb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001eb6:	fab2 f282 	clz	r2, r2
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	f042 0220 	orr.w	r2, r2, #32
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f002 021f 	and.w	r2, r2, #31
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d17b      	bne.n	8001fca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0f3      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d13c      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x178>
 8001ede:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ee2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d102      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x128>
 8001f02:	4b4f      	ldr	r3, [pc, #316]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	e00f      	b.n	8001f28 <HAL_RCC_ClockConfig+0x148>
 8001f08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f24:	4b46      	ldr	r3, [pc, #280]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f2c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f30:	fa92 f2a2 	rbit	r2, r2
 8001f34:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001f36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f38:	fab2 f282 	clz	r2, r2
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f042 0220 	orr.w	r2, r2, #32
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f002 021f 	and.w	r2, r2, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d13a      	bne.n	8001fca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0b2      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	095b      	lsrs	r3, r3, #5
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d102      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x1a0>
 8001f7a:	4b31      	ldr	r3, [pc, #196]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	e00d      	b.n	8001f9c <HAL_RCC_ClockConfig+0x1bc>
 8001f80:	2302      	movs	r3, #2
 8001f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	623b      	str	r3, [r7, #32]
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	4b29      	ldr	r3, [pc, #164]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	61ba      	str	r2, [r7, #24]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	fa92 f2a2 	rbit	r2, r2
 8001fa6:	617a      	str	r2, [r7, #20]
  return result;
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	fab2 f282 	clz	r2, r2
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	f042 0220 	orr.w	r2, r2, #32
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	f002 021f 	and.w	r2, r2, #31
 8001fba:	2101      	movs	r1, #1
 8001fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e079      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fca:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f023 0203 	bic.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	491a      	ldr	r1, [pc, #104]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7fe fc56 	bl	800088c <HAL_GetTick>
 8001fe0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7fe fc52 	bl	800088c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e061      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 020c 	and.w	r2, r3, #12
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d1eb      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800200c:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d214      	bcs.n	8002044 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 0207 	bic.w	r2, r3, #7
 8002022:	4906      	ldr	r1, [pc, #24]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b04      	ldr	r3, [pc, #16]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e040      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
 800203c:	40022000 	.word	0x40022000
 8002040:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002050:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	491a      	ldr	r1, [pc, #104]	@ (80020c8 <HAL_RCC_ClockConfig+0x2e8>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206e:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4912      	ldr	r1, [pc, #72]	@ (80020c8 <HAL_RCC_ClockConfig+0x2e8>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002082:	f000 f829 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002086:	4601      	mov	r1, r0
 8002088:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <HAL_RCC_ClockConfig+0x2e8>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002090:	22f0      	movs	r2, #240	@ 0xf0
 8002092:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	fa92 f2a2 	rbit	r2, r2
 800209a:	60fa      	str	r2, [r7, #12]
  return result;
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	fab2 f282 	clz	r2, r2
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	40d3      	lsrs	r3, r2
 80020a6:	4a09      	ldr	r2, [pc, #36]	@ (80020cc <HAL_RCC_ClockConfig+0x2ec>)
 80020a8:	5cd3      	ldrb	r3, [r2, r3]
 80020aa:	fa21 f303 	lsr.w	r3, r1, r3
 80020ae:	4a08      	ldr	r2, [pc, #32]	@ (80020d0 <HAL_RCC_ClockConfig+0x2f0>)
 80020b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020b2:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <HAL_RCC_ClockConfig+0x2f4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fba4 	bl	8000804 <HAL_InitTick>
  
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3778      	adds	r7, #120	@ 0x78
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08003920 	.word	0x08003920
 80020d0:	20000000 	.word	0x20000000
 80020d4:	20000004 	.word	0x20000004

080020d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b08b      	sub	sp, #44	@ 0x2c
 80020dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	2300      	movs	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020f2:	4b29      	ldr	r3, [pc, #164]	@ (8002198 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d002      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x30>
 8002102:	2b08      	cmp	r3, #8
 8002104:	d003      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x36>
 8002106:	e03c      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002108:	4b24      	ldr	r3, [pc, #144]	@ (800219c <HAL_RCC_GetSysClockFreq+0xc4>)
 800210a:	623b      	str	r3, [r7, #32]
      break;
 800210c:	e03c      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002114:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002118:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	fa92 f2a2 	rbit	r2, r2
 8002120:	607a      	str	r2, [r7, #4]
  return result;
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	fab2 f282 	clz	r2, r2
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	40d3      	lsrs	r3, r2
 800212c:	4a1c      	ldr	r2, [pc, #112]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800212e:	5cd3      	ldrb	r3, [r2, r3]
 8002130:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002132:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	220f      	movs	r2, #15
 800213c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	fa92 f2a2 	rbit	r2, r2
 8002144:	60fa      	str	r2, [r7, #12]
  return result;
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	fab2 f282 	clz	r2, r2
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	40d3      	lsrs	r3, r2
 8002150:	4a14      	ldr	r2, [pc, #80]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002160:	4a0e      	ldr	r2, [pc, #56]	@ (800219c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	fbb2 f2f3 	udiv	r2, r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002170:	e004      	b.n	800217c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	4a0c      	ldr	r2, [pc, #48]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	623b      	str	r3, [r7, #32]
      break;
 8002180:	e002      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002184:	623b      	str	r3, [r7, #32]
      break;
 8002186:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002188:	6a3b      	ldr	r3, [r7, #32]
}
 800218a:	4618      	mov	r0, r3
 800218c:	372c      	adds	r7, #44	@ 0x2c
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	007a1200 	.word	0x007a1200
 80021a0:	08003930 	.word	0x08003930
 80021a4:	08003940 	.word	0x08003940
 80021a8:	003d0900 	.word	0x003d0900

080021ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e09d      	b.n	80022fa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d108      	bne.n	80021d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021ce:	d009      	beq.n	80021e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
 80021d6:	e005      	b.n	80021e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7fe f970 	bl	80004e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800221a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002224:	d902      	bls.n	800222c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e002      	b.n	8002232 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800222c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002230:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800223a:	d007      	beq.n	800224c <HAL_SPI_Init+0xa0>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002244:	d002      	beq.n	800224c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800228e:	ea42 0103 	orr.w	r1, r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002296:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	0c1b      	lsrs	r3, r3, #16
 80022a8:	f003 0204 	and.w	r2, r3, #4
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80022c8:	ea42 0103 	orr.w	r1, r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b08a      	sub	sp, #40	@ 0x28
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002310:	2301      	movs	r3, #1
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_SPI_TransmitReceive+0x26>
 8002324:	2302      	movs	r3, #2
 8002326:	e20a      	b.n	800273e <HAL_SPI_TransmitReceive+0x43c>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002330:	f7fe faac 	bl	800088c <HAL_GetTick>
 8002334:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800233c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002344:	887b      	ldrh	r3, [r7, #2]
 8002346:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002348:	887b      	ldrh	r3, [r7, #2]
 800234a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800234c:	7efb      	ldrb	r3, [r7, #27]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d00e      	beq.n	8002370 <HAL_SPI_TransmitReceive+0x6e>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002358:	d106      	bne.n	8002368 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d102      	bne.n	8002368 <HAL_SPI_TransmitReceive+0x66>
 8002362:	7efb      	ldrb	r3, [r7, #27]
 8002364:	2b04      	cmp	r3, #4
 8002366:	d003      	beq.n	8002370 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002368:	2302      	movs	r3, #2
 800236a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800236e:	e1e0      	b.n	8002732 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_SPI_TransmitReceive+0x80>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HAL_SPI_TransmitReceive+0x80>
 800237c:	887b      	ldrh	r3, [r7, #2]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d103      	bne.n	800238a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002388:	e1d3      	b.n	8002732 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b04      	cmp	r3, #4
 8002394:	d003      	beq.n	800239e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2205      	movs	r2, #5
 800239a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	887a      	ldrh	r2, [r7, #2]
 80023ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	887a      	ldrh	r2, [r7, #2]
 80023b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	887a      	ldrh	r2, [r7, #2]
 80023ca:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80023e0:	d802      	bhi.n	80023e8 <HAL_SPI_TransmitReceive+0xe6>
 80023e2:	8a3b      	ldrh	r3, [r7, #16]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d908      	bls.n	80023fa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	e007      	b.n	800240a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002408:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002414:	2b40      	cmp	r3, #64	@ 0x40
 8002416:	d007      	beq.n	8002428 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002426:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002430:	f240 8081 	bls.w	8002536 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_SPI_TransmitReceive+0x140>
 800243c:	8a7b      	ldrh	r3, [r7, #18]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d16d      	bne.n	800251e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002446:	881a      	ldrh	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002452:	1c9a      	adds	r2, r3, #2
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002466:	e05a      	b.n	800251e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b02      	cmp	r3, #2
 8002474:	d11b      	bne.n	80024ae <HAL_SPI_TransmitReceive+0x1ac>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d016      	beq.n	80024ae <HAL_SPI_TransmitReceive+0x1ac>
 8002480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002482:	2b01      	cmp	r3, #1
 8002484:	d113      	bne.n	80024ae <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800248a:	881a      	ldrh	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002496:	1c9a      	adds	r2, r3, #2
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d11c      	bne.n	80024f6 <HAL_SPI_TransmitReceive+0x1f4>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d016      	beq.n	80024f6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	b292      	uxth	r2, r2
 80024d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024da:	1c9a      	adds	r2, r3, #2
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024f2:	2301      	movs	r3, #1
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024f6:	f7fe f9c9 	bl	800088c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002502:	429a      	cmp	r2, r3
 8002504:	d80b      	bhi.n	800251e <HAL_SPI_TransmitReceive+0x21c>
 8002506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d007      	beq.n	800251e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800251c:	e109      	b.n	8002732 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d19f      	bne.n	8002468 <HAL_SPI_TransmitReceive+0x166>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d199      	bne.n	8002468 <HAL_SPI_TransmitReceive+0x166>
 8002534:	e0e3      	b.n	80026fe <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_SPI_TransmitReceive+0x244>
 800253e:	8a7b      	ldrh	r3, [r7, #18]
 8002540:	2b01      	cmp	r3, #1
 8002542:	f040 80cf 	bne.w	80026e4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d912      	bls.n	8002576 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002554:	881a      	ldrh	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002560:	1c9a      	adds	r2, r3, #2
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b02      	subs	r3, #2
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002574:	e0b6      	b.n	80026e4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	330c      	adds	r3, #12
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800259c:	e0a2      	b.n	80026e4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d134      	bne.n	8002616 <HAL_SPI_TransmitReceive+0x314>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d02f      	beq.n	8002616 <HAL_SPI_TransmitReceive+0x314>
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d12c      	bne.n	8002616 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d912      	bls.n	80025ec <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ca:	881a      	ldrh	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d6:	1c9a      	adds	r2, r3, #2
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3b02      	subs	r3, #2
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025ea:	e012      	b.n	8002612 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	330c      	adds	r3, #12
 80025f6:	7812      	ldrb	r2, [r2, #0]
 80025f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002608:	b29b      	uxth	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b01      	cmp	r3, #1
 8002622:	d148      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x3b4>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d042      	beq.n	80026b6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002636:	b29b      	uxth	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d923      	bls.n	8002684 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	b292      	uxth	r2, r2
 8002648:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	1c9a      	adds	r2, r3, #2
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b02      	subs	r3, #2
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800266c:	b29b      	uxth	r3, r3
 800266e:	2b01      	cmp	r3, #1
 8002670:	d81f      	bhi.n	80026b2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	e016      	b.n	80026b2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f103 020c 	add.w	r2, r3, #12
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	7812      	ldrb	r2, [r2, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026b2:	2301      	movs	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026b6:	f7fe f8e9 	bl	800088c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d803      	bhi.n	80026ce <HAL_SPI_TransmitReceive+0x3cc>
 80026c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d102      	bne.n	80026d4 <HAL_SPI_TransmitReceive+0x3d2>
 80026ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d107      	bne.n	80026e4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80026e2:	e026      	b.n	8002732 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f47f af57 	bne.w	800259e <HAL_SPI_TransmitReceive+0x29c>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f47f af50 	bne.w	800259e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 f93e 	bl	8002984 <SPI_EndRxTxTransaction>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002728:	e003      	b.n	8002732 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800273a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800273e:	4618      	mov	r0, r3
 8002740:	3728      	adds	r7, #40	@ 0x28
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002758:	f7fe f898 	bl	800088c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	4413      	add	r3, r2
 8002766:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002768:	f7fe f890 	bl	800088c <HAL_GetTick>
 800276c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800276e:	4b39      	ldr	r3, [pc, #228]	@ (8002854 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	015b      	lsls	r3, r3, #5
 8002774:	0d1b      	lsrs	r3, r3, #20
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	fb02 f303 	mul.w	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800277e:	e054      	b.n	800282a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002786:	d050      	beq.n	800282a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002788:	f7fe f880 	bl	800088c <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	429a      	cmp	r2, r3
 8002796:	d902      	bls.n	800279e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d13d      	bne.n	800281a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80027ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027b6:	d111      	bne.n	80027dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027c0:	d004      	beq.n	80027cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ca:	d107      	bne.n	80027dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027e4:	d10f      	bne.n	8002806 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002804:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e017      	b.n	800284a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3b01      	subs	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4013      	ands	r3, r2
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	429a      	cmp	r2, r3
 8002838:	bf0c      	ite	eq
 800283a:	2301      	moveq	r3, #1
 800283c:	2300      	movne	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	429a      	cmp	r2, r3
 8002846:	d19b      	bne.n	8002780 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000000 	.word	0x20000000

08002858 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	@ 0x28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800286a:	f7fe f80f 	bl	800088c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	4413      	add	r3, r2
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800287a:	f7fe f807 	bl	800088c <HAL_GetTick>
 800287e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	330c      	adds	r3, #12
 8002886:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002888:	4b3d      	ldr	r3, [pc, #244]	@ (8002980 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00da      	lsls	r2, r3, #3
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	0d1b      	lsrs	r3, r3, #20
 8002898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80028a0:	e060      	b.n	8002964 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80028a8:	d107      	bne.n	80028ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d104      	bne.n	80028ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c0:	d050      	beq.n	8002964 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028c2:	f7fd ffe3 	bl	800088c <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d902      	bls.n	80028d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d13d      	bne.n	8002954 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80028e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028f0:	d111      	bne.n	8002916 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028fa:	d004      	beq.n	8002906 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002904:	d107      	bne.n	8002916 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002914:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800291e:	d10f      	bne.n	8002940 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800293e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e010      	b.n	8002976 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	3b01      	subs	r3, #1
 8002962:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4013      	ands	r3, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	d196      	bne.n	80028a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3728      	adds	r7, #40	@ 0x28
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000000 	.word	0x20000000

08002984 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2200      	movs	r2, #0
 8002998:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f7ff ff5b 	bl	8002858 <SPI_WaitFifoStateUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ac:	f043 0220 	orr.w	r2, r3, #32
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e027      	b.n	8002a08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2200      	movs	r2, #0
 80029c0:	2180      	movs	r1, #128	@ 0x80
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f7ff fec0 	bl	8002748 <SPI_WaitFlagStateUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d007      	beq.n	80029de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d2:	f043 0220 	orr.w	r2, r3, #32
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e014      	b.n	8002a08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f7ff ff34 	bl	8002858 <SPI_WaitFifoStateUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029fa:	f043 0220 	orr.w	r2, r3, #32
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e000      	b.n	8002a08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <std>:
 8002a10:	2300      	movs	r3, #0
 8002a12:	b510      	push	{r4, lr}
 8002a14:	4604      	mov	r4, r0
 8002a16:	e9c0 3300 	strd	r3, r3, [r0]
 8002a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a1e:	6083      	str	r3, [r0, #8]
 8002a20:	8181      	strh	r1, [r0, #12]
 8002a22:	6643      	str	r3, [r0, #100]	@ 0x64
 8002a24:	81c2      	strh	r2, [r0, #14]
 8002a26:	6183      	str	r3, [r0, #24]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	305c      	adds	r0, #92	@ 0x5c
 8002a2e:	f000 f90e 	bl	8002c4e <memset>
 8002a32:	4b0d      	ldr	r3, [pc, #52]	@ (8002a68 <std+0x58>)
 8002a34:	6263      	str	r3, [r4, #36]	@ 0x24
 8002a36:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <std+0x5c>)
 8002a38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a70 <std+0x60>)
 8002a3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <std+0x64>)
 8002a40:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a42:	4b0d      	ldr	r3, [pc, #52]	@ (8002a78 <std+0x68>)
 8002a44:	6224      	str	r4, [r4, #32]
 8002a46:	429c      	cmp	r4, r3
 8002a48:	d006      	beq.n	8002a58 <std+0x48>
 8002a4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002a4e:	4294      	cmp	r4, r2
 8002a50:	d002      	beq.n	8002a58 <std+0x48>
 8002a52:	33d0      	adds	r3, #208	@ 0xd0
 8002a54:	429c      	cmp	r4, r3
 8002a56:	d105      	bne.n	8002a64 <std+0x54>
 8002a58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a60:	f000 b96e 	b.w	8002d40 <__retarget_lock_init_recursive>
 8002a64:	bd10      	pop	{r4, pc}
 8002a66:	bf00      	nop
 8002a68:	08002bc9 	.word	0x08002bc9
 8002a6c:	08002beb 	.word	0x08002beb
 8002a70:	08002c23 	.word	0x08002c23
 8002a74:	08002c47 	.word	0x08002c47
 8002a78:	200000f0 	.word	0x200000f0

08002a7c <stdio_exit_handler>:
 8002a7c:	4a02      	ldr	r2, [pc, #8]	@ (8002a88 <stdio_exit_handler+0xc>)
 8002a7e:	4903      	ldr	r1, [pc, #12]	@ (8002a8c <stdio_exit_handler+0x10>)
 8002a80:	4803      	ldr	r0, [pc, #12]	@ (8002a90 <stdio_exit_handler+0x14>)
 8002a82:	f000 b869 	b.w	8002b58 <_fwalk_sglue>
 8002a86:	bf00      	nop
 8002a88:	2000000c 	.word	0x2000000c
 8002a8c:	080035e1 	.word	0x080035e1
 8002a90:	2000001c 	.word	0x2000001c

08002a94 <cleanup_stdio>:
 8002a94:	6841      	ldr	r1, [r0, #4]
 8002a96:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <cleanup_stdio+0x34>)
 8002a98:	4299      	cmp	r1, r3
 8002a9a:	b510      	push	{r4, lr}
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	d001      	beq.n	8002aa4 <cleanup_stdio+0x10>
 8002aa0:	f000 fd9e 	bl	80035e0 <_fflush_r>
 8002aa4:	68a1      	ldr	r1, [r4, #8]
 8002aa6:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <cleanup_stdio+0x38>)
 8002aa8:	4299      	cmp	r1, r3
 8002aaa:	d002      	beq.n	8002ab2 <cleanup_stdio+0x1e>
 8002aac:	4620      	mov	r0, r4
 8002aae:	f000 fd97 	bl	80035e0 <_fflush_r>
 8002ab2:	68e1      	ldr	r1, [r4, #12]
 8002ab4:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <cleanup_stdio+0x3c>)
 8002ab6:	4299      	cmp	r1, r3
 8002ab8:	d004      	beq.n	8002ac4 <cleanup_stdio+0x30>
 8002aba:	4620      	mov	r0, r4
 8002abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ac0:	f000 bd8e 	b.w	80035e0 <_fflush_r>
 8002ac4:	bd10      	pop	{r4, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200000f0 	.word	0x200000f0
 8002acc:	20000158 	.word	0x20000158
 8002ad0:	200001c0 	.word	0x200001c0

08002ad4 <global_stdio_init.part.0>:
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <global_stdio_init.part.0+0x30>)
 8002ad8:	4c0b      	ldr	r4, [pc, #44]	@ (8002b08 <global_stdio_init.part.0+0x34>)
 8002ada:	4a0c      	ldr	r2, [pc, #48]	@ (8002b0c <global_stdio_init.part.0+0x38>)
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	4620      	mov	r0, r4
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2104      	movs	r1, #4
 8002ae4:	f7ff ff94 	bl	8002a10 <std>
 8002ae8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002aec:	2201      	movs	r2, #1
 8002aee:	2109      	movs	r1, #9
 8002af0:	f7ff ff8e 	bl	8002a10 <std>
 8002af4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002af8:	2202      	movs	r2, #2
 8002afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002afe:	2112      	movs	r1, #18
 8002b00:	f7ff bf86 	b.w	8002a10 <std>
 8002b04:	20000228 	.word	0x20000228
 8002b08:	200000f0 	.word	0x200000f0
 8002b0c:	08002a7d 	.word	0x08002a7d

08002b10 <__sfp_lock_acquire>:
 8002b10:	4801      	ldr	r0, [pc, #4]	@ (8002b18 <__sfp_lock_acquire+0x8>)
 8002b12:	f000 b916 	b.w	8002d42 <__retarget_lock_acquire_recursive>
 8002b16:	bf00      	nop
 8002b18:	20000231 	.word	0x20000231

08002b1c <__sfp_lock_release>:
 8002b1c:	4801      	ldr	r0, [pc, #4]	@ (8002b24 <__sfp_lock_release+0x8>)
 8002b1e:	f000 b911 	b.w	8002d44 <__retarget_lock_release_recursive>
 8002b22:	bf00      	nop
 8002b24:	20000231 	.word	0x20000231

08002b28 <__sinit>:
 8002b28:	b510      	push	{r4, lr}
 8002b2a:	4604      	mov	r4, r0
 8002b2c:	f7ff fff0 	bl	8002b10 <__sfp_lock_acquire>
 8002b30:	6a23      	ldr	r3, [r4, #32]
 8002b32:	b11b      	cbz	r3, 8002b3c <__sinit+0x14>
 8002b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b38:	f7ff bff0 	b.w	8002b1c <__sfp_lock_release>
 8002b3c:	4b04      	ldr	r3, [pc, #16]	@ (8002b50 <__sinit+0x28>)
 8002b3e:	6223      	str	r3, [r4, #32]
 8002b40:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <__sinit+0x2c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f5      	bne.n	8002b34 <__sinit+0xc>
 8002b48:	f7ff ffc4 	bl	8002ad4 <global_stdio_init.part.0>
 8002b4c:	e7f2      	b.n	8002b34 <__sinit+0xc>
 8002b4e:	bf00      	nop
 8002b50:	08002a95 	.word	0x08002a95
 8002b54:	20000228 	.word	0x20000228

08002b58 <_fwalk_sglue>:
 8002b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b5c:	4607      	mov	r7, r0
 8002b5e:	4688      	mov	r8, r1
 8002b60:	4614      	mov	r4, r2
 8002b62:	2600      	movs	r6, #0
 8002b64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b68:	f1b9 0901 	subs.w	r9, r9, #1
 8002b6c:	d505      	bpl.n	8002b7a <_fwalk_sglue+0x22>
 8002b6e:	6824      	ldr	r4, [r4, #0]
 8002b70:	2c00      	cmp	r4, #0
 8002b72:	d1f7      	bne.n	8002b64 <_fwalk_sglue+0xc>
 8002b74:	4630      	mov	r0, r6
 8002b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b7a:	89ab      	ldrh	r3, [r5, #12]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d907      	bls.n	8002b90 <_fwalk_sglue+0x38>
 8002b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b84:	3301      	adds	r3, #1
 8002b86:	d003      	beq.n	8002b90 <_fwalk_sglue+0x38>
 8002b88:	4629      	mov	r1, r5
 8002b8a:	4638      	mov	r0, r7
 8002b8c:	47c0      	blx	r8
 8002b8e:	4306      	orrs	r6, r0
 8002b90:	3568      	adds	r5, #104	@ 0x68
 8002b92:	e7e9      	b.n	8002b68 <_fwalk_sglue+0x10>

08002b94 <iprintf>:
 8002b94:	b40f      	push	{r0, r1, r2, r3}
 8002b96:	b507      	push	{r0, r1, r2, lr}
 8002b98:	4906      	ldr	r1, [pc, #24]	@ (8002bb4 <iprintf+0x20>)
 8002b9a:	ab04      	add	r3, sp, #16
 8002b9c:	6808      	ldr	r0, [r1, #0]
 8002b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ba2:	6881      	ldr	r1, [r0, #8]
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	f000 f9f1 	bl	8002f8c <_vfiprintf_r>
 8002baa:	b003      	add	sp, #12
 8002bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bb0:	b004      	add	sp, #16
 8002bb2:	4770      	bx	lr
 8002bb4:	20000018 	.word	0x20000018

08002bb8 <putchar>:
 8002bb8:	4b02      	ldr	r3, [pc, #8]	@ (8002bc4 <putchar+0xc>)
 8002bba:	4601      	mov	r1, r0
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	6882      	ldr	r2, [r0, #8]
 8002bc0:	f000 bd36 	b.w	8003630 <_putc_r>
 8002bc4:	20000018 	.word	0x20000018

08002bc8 <__sread>:
 8002bc8:	b510      	push	{r4, lr}
 8002bca:	460c      	mov	r4, r1
 8002bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bd0:	f000 f868 	bl	8002ca4 <_read_r>
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	bfab      	itete	ge
 8002bd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002bda:	89a3      	ldrhlt	r3, [r4, #12]
 8002bdc:	181b      	addge	r3, r3, r0
 8002bde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002be2:	bfac      	ite	ge
 8002be4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002be6:	81a3      	strhlt	r3, [r4, #12]
 8002be8:	bd10      	pop	{r4, pc}

08002bea <__swrite>:
 8002bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bee:	461f      	mov	r7, r3
 8002bf0:	898b      	ldrh	r3, [r1, #12]
 8002bf2:	05db      	lsls	r3, r3, #23
 8002bf4:	4605      	mov	r5, r0
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	4616      	mov	r6, r2
 8002bfa:	d505      	bpl.n	8002c08 <__swrite+0x1e>
 8002bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c00:	2302      	movs	r3, #2
 8002c02:	2200      	movs	r2, #0
 8002c04:	f000 f83c 	bl	8002c80 <_lseek_r>
 8002c08:	89a3      	ldrh	r3, [r4, #12]
 8002c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c12:	81a3      	strh	r3, [r4, #12]
 8002c14:	4632      	mov	r2, r6
 8002c16:	463b      	mov	r3, r7
 8002c18:	4628      	mov	r0, r5
 8002c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c1e:	f000 b853 	b.w	8002cc8 <_write_r>

08002c22 <__sseek>:
 8002c22:	b510      	push	{r4, lr}
 8002c24:	460c      	mov	r4, r1
 8002c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c2a:	f000 f829 	bl	8002c80 <_lseek_r>
 8002c2e:	1c43      	adds	r3, r0, #1
 8002c30:	89a3      	ldrh	r3, [r4, #12]
 8002c32:	bf15      	itete	ne
 8002c34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002c36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002c3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002c3e:	81a3      	strheq	r3, [r4, #12]
 8002c40:	bf18      	it	ne
 8002c42:	81a3      	strhne	r3, [r4, #12]
 8002c44:	bd10      	pop	{r4, pc}

08002c46 <__sclose>:
 8002c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c4a:	f000 b809 	b.w	8002c60 <_close_r>

08002c4e <memset>:
 8002c4e:	4402      	add	r2, r0
 8002c50:	4603      	mov	r3, r0
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d100      	bne.n	8002c58 <memset+0xa>
 8002c56:	4770      	bx	lr
 8002c58:	f803 1b01 	strb.w	r1, [r3], #1
 8002c5c:	e7f9      	b.n	8002c52 <memset+0x4>
	...

08002c60 <_close_r>:
 8002c60:	b538      	push	{r3, r4, r5, lr}
 8002c62:	4d06      	ldr	r5, [pc, #24]	@ (8002c7c <_close_r+0x1c>)
 8002c64:	2300      	movs	r3, #0
 8002c66:	4604      	mov	r4, r0
 8002c68:	4608      	mov	r0, r1
 8002c6a:	602b      	str	r3, [r5, #0]
 8002c6c:	f7fd fd0d 	bl	800068a <_close>
 8002c70:	1c43      	adds	r3, r0, #1
 8002c72:	d102      	bne.n	8002c7a <_close_r+0x1a>
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	b103      	cbz	r3, 8002c7a <_close_r+0x1a>
 8002c78:	6023      	str	r3, [r4, #0]
 8002c7a:	bd38      	pop	{r3, r4, r5, pc}
 8002c7c:	2000022c 	.word	0x2000022c

08002c80 <_lseek_r>:
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	4d07      	ldr	r5, [pc, #28]	@ (8002ca0 <_lseek_r+0x20>)
 8002c84:	4604      	mov	r4, r0
 8002c86:	4608      	mov	r0, r1
 8002c88:	4611      	mov	r1, r2
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	602a      	str	r2, [r5, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f7fd fd22 	bl	80006d8 <_lseek>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	d102      	bne.n	8002c9e <_lseek_r+0x1e>
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	b103      	cbz	r3, 8002c9e <_lseek_r+0x1e>
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ca0:	2000022c 	.word	0x2000022c

08002ca4 <_read_r>:
 8002ca4:	b538      	push	{r3, r4, r5, lr}
 8002ca6:	4d07      	ldr	r5, [pc, #28]	@ (8002cc4 <_read_r+0x20>)
 8002ca8:	4604      	mov	r4, r0
 8002caa:	4608      	mov	r0, r1
 8002cac:	4611      	mov	r1, r2
 8002cae:	2200      	movs	r2, #0
 8002cb0:	602a      	str	r2, [r5, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f7fd fcb0 	bl	8000618 <_read>
 8002cb8:	1c43      	adds	r3, r0, #1
 8002cba:	d102      	bne.n	8002cc2 <_read_r+0x1e>
 8002cbc:	682b      	ldr	r3, [r5, #0]
 8002cbe:	b103      	cbz	r3, 8002cc2 <_read_r+0x1e>
 8002cc0:	6023      	str	r3, [r4, #0]
 8002cc2:	bd38      	pop	{r3, r4, r5, pc}
 8002cc4:	2000022c 	.word	0x2000022c

08002cc8 <_write_r>:
 8002cc8:	b538      	push	{r3, r4, r5, lr}
 8002cca:	4d07      	ldr	r5, [pc, #28]	@ (8002ce8 <_write_r+0x20>)
 8002ccc:	4604      	mov	r4, r0
 8002cce:	4608      	mov	r0, r1
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	602a      	str	r2, [r5, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f7fd fcbb 	bl	8000652 <_write>
 8002cdc:	1c43      	adds	r3, r0, #1
 8002cde:	d102      	bne.n	8002ce6 <_write_r+0x1e>
 8002ce0:	682b      	ldr	r3, [r5, #0]
 8002ce2:	b103      	cbz	r3, 8002ce6 <_write_r+0x1e>
 8002ce4:	6023      	str	r3, [r4, #0]
 8002ce6:	bd38      	pop	{r3, r4, r5, pc}
 8002ce8:	2000022c 	.word	0x2000022c

08002cec <__errno>:
 8002cec:	4b01      	ldr	r3, [pc, #4]	@ (8002cf4 <__errno+0x8>)
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000018 	.word	0x20000018

08002cf8 <__libc_init_array>:
 8002cf8:	b570      	push	{r4, r5, r6, lr}
 8002cfa:	4d0d      	ldr	r5, [pc, #52]	@ (8002d30 <__libc_init_array+0x38>)
 8002cfc:	4c0d      	ldr	r4, [pc, #52]	@ (8002d34 <__libc_init_array+0x3c>)
 8002cfe:	1b64      	subs	r4, r4, r5
 8002d00:	10a4      	asrs	r4, r4, #2
 8002d02:	2600      	movs	r6, #0
 8002d04:	42a6      	cmp	r6, r4
 8002d06:	d109      	bne.n	8002d1c <__libc_init_array+0x24>
 8002d08:	4d0b      	ldr	r5, [pc, #44]	@ (8002d38 <__libc_init_array+0x40>)
 8002d0a:	4c0c      	ldr	r4, [pc, #48]	@ (8002d3c <__libc_init_array+0x44>)
 8002d0c:	f000 fdec 	bl	80038e8 <_init>
 8002d10:	1b64      	subs	r4, r4, r5
 8002d12:	10a4      	asrs	r4, r4, #2
 8002d14:	2600      	movs	r6, #0
 8002d16:	42a6      	cmp	r6, r4
 8002d18:	d105      	bne.n	8002d26 <__libc_init_array+0x2e>
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
 8002d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d20:	4798      	blx	r3
 8002d22:	3601      	adds	r6, #1
 8002d24:	e7ee      	b.n	8002d04 <__libc_init_array+0xc>
 8002d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d2a:	4798      	blx	r3
 8002d2c:	3601      	adds	r6, #1
 8002d2e:	e7f2      	b.n	8002d16 <__libc_init_array+0x1e>
 8002d30:	0800398c 	.word	0x0800398c
 8002d34:	0800398c 	.word	0x0800398c
 8002d38:	0800398c 	.word	0x0800398c
 8002d3c:	08003990 	.word	0x08003990

08002d40 <__retarget_lock_init_recursive>:
 8002d40:	4770      	bx	lr

08002d42 <__retarget_lock_acquire_recursive>:
 8002d42:	4770      	bx	lr

08002d44 <__retarget_lock_release_recursive>:
 8002d44:	4770      	bx	lr
	...

08002d48 <_free_r>:
 8002d48:	b538      	push	{r3, r4, r5, lr}
 8002d4a:	4605      	mov	r5, r0
 8002d4c:	2900      	cmp	r1, #0
 8002d4e:	d041      	beq.n	8002dd4 <_free_r+0x8c>
 8002d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d54:	1f0c      	subs	r4, r1, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bfb8      	it	lt
 8002d5a:	18e4      	addlt	r4, r4, r3
 8002d5c:	f000 f8e0 	bl	8002f20 <__malloc_lock>
 8002d60:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd8 <_free_r+0x90>)
 8002d62:	6813      	ldr	r3, [r2, #0]
 8002d64:	b933      	cbnz	r3, 8002d74 <_free_r+0x2c>
 8002d66:	6063      	str	r3, [r4, #4]
 8002d68:	6014      	str	r4, [r2, #0]
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d70:	f000 b8dc 	b.w	8002f2c <__malloc_unlock>
 8002d74:	42a3      	cmp	r3, r4
 8002d76:	d908      	bls.n	8002d8a <_free_r+0x42>
 8002d78:	6820      	ldr	r0, [r4, #0]
 8002d7a:	1821      	adds	r1, r4, r0
 8002d7c:	428b      	cmp	r3, r1
 8002d7e:	bf01      	itttt	eq
 8002d80:	6819      	ldreq	r1, [r3, #0]
 8002d82:	685b      	ldreq	r3, [r3, #4]
 8002d84:	1809      	addeq	r1, r1, r0
 8002d86:	6021      	streq	r1, [r4, #0]
 8002d88:	e7ed      	b.n	8002d66 <_free_r+0x1e>
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	b10b      	cbz	r3, 8002d94 <_free_r+0x4c>
 8002d90:	42a3      	cmp	r3, r4
 8002d92:	d9fa      	bls.n	8002d8a <_free_r+0x42>
 8002d94:	6811      	ldr	r1, [r2, #0]
 8002d96:	1850      	adds	r0, r2, r1
 8002d98:	42a0      	cmp	r0, r4
 8002d9a:	d10b      	bne.n	8002db4 <_free_r+0x6c>
 8002d9c:	6820      	ldr	r0, [r4, #0]
 8002d9e:	4401      	add	r1, r0
 8002da0:	1850      	adds	r0, r2, r1
 8002da2:	4283      	cmp	r3, r0
 8002da4:	6011      	str	r1, [r2, #0]
 8002da6:	d1e0      	bne.n	8002d6a <_free_r+0x22>
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	6053      	str	r3, [r2, #4]
 8002dae:	4408      	add	r0, r1
 8002db0:	6010      	str	r0, [r2, #0]
 8002db2:	e7da      	b.n	8002d6a <_free_r+0x22>
 8002db4:	d902      	bls.n	8002dbc <_free_r+0x74>
 8002db6:	230c      	movs	r3, #12
 8002db8:	602b      	str	r3, [r5, #0]
 8002dba:	e7d6      	b.n	8002d6a <_free_r+0x22>
 8002dbc:	6820      	ldr	r0, [r4, #0]
 8002dbe:	1821      	adds	r1, r4, r0
 8002dc0:	428b      	cmp	r3, r1
 8002dc2:	bf04      	itt	eq
 8002dc4:	6819      	ldreq	r1, [r3, #0]
 8002dc6:	685b      	ldreq	r3, [r3, #4]
 8002dc8:	6063      	str	r3, [r4, #4]
 8002dca:	bf04      	itt	eq
 8002dcc:	1809      	addeq	r1, r1, r0
 8002dce:	6021      	streq	r1, [r4, #0]
 8002dd0:	6054      	str	r4, [r2, #4]
 8002dd2:	e7ca      	b.n	8002d6a <_free_r+0x22>
 8002dd4:	bd38      	pop	{r3, r4, r5, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000238 	.word	0x20000238

08002ddc <sbrk_aligned>:
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	4e0f      	ldr	r6, [pc, #60]	@ (8002e1c <sbrk_aligned+0x40>)
 8002de0:	460c      	mov	r4, r1
 8002de2:	6831      	ldr	r1, [r6, #0]
 8002de4:	4605      	mov	r5, r0
 8002de6:	b911      	cbnz	r1, 8002dee <sbrk_aligned+0x12>
 8002de8:	f000 fcea 	bl	80037c0 <_sbrk_r>
 8002dec:	6030      	str	r0, [r6, #0]
 8002dee:	4621      	mov	r1, r4
 8002df0:	4628      	mov	r0, r5
 8002df2:	f000 fce5 	bl	80037c0 <_sbrk_r>
 8002df6:	1c43      	adds	r3, r0, #1
 8002df8:	d103      	bne.n	8002e02 <sbrk_aligned+0x26>
 8002dfa:	f04f 34ff 	mov.w	r4, #4294967295
 8002dfe:	4620      	mov	r0, r4
 8002e00:	bd70      	pop	{r4, r5, r6, pc}
 8002e02:	1cc4      	adds	r4, r0, #3
 8002e04:	f024 0403 	bic.w	r4, r4, #3
 8002e08:	42a0      	cmp	r0, r4
 8002e0a:	d0f8      	beq.n	8002dfe <sbrk_aligned+0x22>
 8002e0c:	1a21      	subs	r1, r4, r0
 8002e0e:	4628      	mov	r0, r5
 8002e10:	f000 fcd6 	bl	80037c0 <_sbrk_r>
 8002e14:	3001      	adds	r0, #1
 8002e16:	d1f2      	bne.n	8002dfe <sbrk_aligned+0x22>
 8002e18:	e7ef      	b.n	8002dfa <sbrk_aligned+0x1e>
 8002e1a:	bf00      	nop
 8002e1c:	20000234 	.word	0x20000234

08002e20 <_malloc_r>:
 8002e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e24:	1ccd      	adds	r5, r1, #3
 8002e26:	f025 0503 	bic.w	r5, r5, #3
 8002e2a:	3508      	adds	r5, #8
 8002e2c:	2d0c      	cmp	r5, #12
 8002e2e:	bf38      	it	cc
 8002e30:	250c      	movcc	r5, #12
 8002e32:	2d00      	cmp	r5, #0
 8002e34:	4606      	mov	r6, r0
 8002e36:	db01      	blt.n	8002e3c <_malloc_r+0x1c>
 8002e38:	42a9      	cmp	r1, r5
 8002e3a:	d904      	bls.n	8002e46 <_malloc_r+0x26>
 8002e3c:	230c      	movs	r3, #12
 8002e3e:	6033      	str	r3, [r6, #0]
 8002e40:	2000      	movs	r0, #0
 8002e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f1c <_malloc_r+0xfc>
 8002e4a:	f000 f869 	bl	8002f20 <__malloc_lock>
 8002e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8002e52:	461c      	mov	r4, r3
 8002e54:	bb44      	cbnz	r4, 8002ea8 <_malloc_r+0x88>
 8002e56:	4629      	mov	r1, r5
 8002e58:	4630      	mov	r0, r6
 8002e5a:	f7ff ffbf 	bl	8002ddc <sbrk_aligned>
 8002e5e:	1c43      	adds	r3, r0, #1
 8002e60:	4604      	mov	r4, r0
 8002e62:	d158      	bne.n	8002f16 <_malloc_r+0xf6>
 8002e64:	f8d8 4000 	ldr.w	r4, [r8]
 8002e68:	4627      	mov	r7, r4
 8002e6a:	2f00      	cmp	r7, #0
 8002e6c:	d143      	bne.n	8002ef6 <_malloc_r+0xd6>
 8002e6e:	2c00      	cmp	r4, #0
 8002e70:	d04b      	beq.n	8002f0a <_malloc_r+0xea>
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	4639      	mov	r1, r7
 8002e76:	4630      	mov	r0, r6
 8002e78:	eb04 0903 	add.w	r9, r4, r3
 8002e7c:	f000 fca0 	bl	80037c0 <_sbrk_r>
 8002e80:	4581      	cmp	r9, r0
 8002e82:	d142      	bne.n	8002f0a <_malloc_r+0xea>
 8002e84:	6821      	ldr	r1, [r4, #0]
 8002e86:	1a6d      	subs	r5, r5, r1
 8002e88:	4629      	mov	r1, r5
 8002e8a:	4630      	mov	r0, r6
 8002e8c:	f7ff ffa6 	bl	8002ddc <sbrk_aligned>
 8002e90:	3001      	adds	r0, #1
 8002e92:	d03a      	beq.n	8002f0a <_malloc_r+0xea>
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	442b      	add	r3, r5
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	bb62      	cbnz	r2, 8002efc <_malloc_r+0xdc>
 8002ea2:	f8c8 7000 	str.w	r7, [r8]
 8002ea6:	e00f      	b.n	8002ec8 <_malloc_r+0xa8>
 8002ea8:	6822      	ldr	r2, [r4, #0]
 8002eaa:	1b52      	subs	r2, r2, r5
 8002eac:	d420      	bmi.n	8002ef0 <_malloc_r+0xd0>
 8002eae:	2a0b      	cmp	r2, #11
 8002eb0:	d917      	bls.n	8002ee2 <_malloc_r+0xc2>
 8002eb2:	1961      	adds	r1, r4, r5
 8002eb4:	42a3      	cmp	r3, r4
 8002eb6:	6025      	str	r5, [r4, #0]
 8002eb8:	bf18      	it	ne
 8002eba:	6059      	strne	r1, [r3, #4]
 8002ebc:	6863      	ldr	r3, [r4, #4]
 8002ebe:	bf08      	it	eq
 8002ec0:	f8c8 1000 	streq.w	r1, [r8]
 8002ec4:	5162      	str	r2, [r4, r5]
 8002ec6:	604b      	str	r3, [r1, #4]
 8002ec8:	4630      	mov	r0, r6
 8002eca:	f000 f82f 	bl	8002f2c <__malloc_unlock>
 8002ece:	f104 000b 	add.w	r0, r4, #11
 8002ed2:	1d23      	adds	r3, r4, #4
 8002ed4:	f020 0007 	bic.w	r0, r0, #7
 8002ed8:	1ac2      	subs	r2, r0, r3
 8002eda:	bf1c      	itt	ne
 8002edc:	1a1b      	subne	r3, r3, r0
 8002ede:	50a3      	strne	r3, [r4, r2]
 8002ee0:	e7af      	b.n	8002e42 <_malloc_r+0x22>
 8002ee2:	6862      	ldr	r2, [r4, #4]
 8002ee4:	42a3      	cmp	r3, r4
 8002ee6:	bf0c      	ite	eq
 8002ee8:	f8c8 2000 	streq.w	r2, [r8]
 8002eec:	605a      	strne	r2, [r3, #4]
 8002eee:	e7eb      	b.n	8002ec8 <_malloc_r+0xa8>
 8002ef0:	4623      	mov	r3, r4
 8002ef2:	6864      	ldr	r4, [r4, #4]
 8002ef4:	e7ae      	b.n	8002e54 <_malloc_r+0x34>
 8002ef6:	463c      	mov	r4, r7
 8002ef8:	687f      	ldr	r7, [r7, #4]
 8002efa:	e7b6      	b.n	8002e6a <_malloc_r+0x4a>
 8002efc:	461a      	mov	r2, r3
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	42a3      	cmp	r3, r4
 8002f02:	d1fb      	bne.n	8002efc <_malloc_r+0xdc>
 8002f04:	2300      	movs	r3, #0
 8002f06:	6053      	str	r3, [r2, #4]
 8002f08:	e7de      	b.n	8002ec8 <_malloc_r+0xa8>
 8002f0a:	230c      	movs	r3, #12
 8002f0c:	6033      	str	r3, [r6, #0]
 8002f0e:	4630      	mov	r0, r6
 8002f10:	f000 f80c 	bl	8002f2c <__malloc_unlock>
 8002f14:	e794      	b.n	8002e40 <_malloc_r+0x20>
 8002f16:	6005      	str	r5, [r0, #0]
 8002f18:	e7d6      	b.n	8002ec8 <_malloc_r+0xa8>
 8002f1a:	bf00      	nop
 8002f1c:	20000238 	.word	0x20000238

08002f20 <__malloc_lock>:
 8002f20:	4801      	ldr	r0, [pc, #4]	@ (8002f28 <__malloc_lock+0x8>)
 8002f22:	f7ff bf0e 	b.w	8002d42 <__retarget_lock_acquire_recursive>
 8002f26:	bf00      	nop
 8002f28:	20000230 	.word	0x20000230

08002f2c <__malloc_unlock>:
 8002f2c:	4801      	ldr	r0, [pc, #4]	@ (8002f34 <__malloc_unlock+0x8>)
 8002f2e:	f7ff bf09 	b.w	8002d44 <__retarget_lock_release_recursive>
 8002f32:	bf00      	nop
 8002f34:	20000230 	.word	0x20000230

08002f38 <__sfputc_r>:
 8002f38:	6893      	ldr	r3, [r2, #8]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	b410      	push	{r4}
 8002f40:	6093      	str	r3, [r2, #8]
 8002f42:	da08      	bge.n	8002f56 <__sfputc_r+0x1e>
 8002f44:	6994      	ldr	r4, [r2, #24]
 8002f46:	42a3      	cmp	r3, r4
 8002f48:	db01      	blt.n	8002f4e <__sfputc_r+0x16>
 8002f4a:	290a      	cmp	r1, #10
 8002f4c:	d103      	bne.n	8002f56 <__sfputc_r+0x1e>
 8002f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f52:	f000 bba1 	b.w	8003698 <__swbuf_r>
 8002f56:	6813      	ldr	r3, [r2, #0]
 8002f58:	1c58      	adds	r0, r3, #1
 8002f5a:	6010      	str	r0, [r2, #0]
 8002f5c:	7019      	strb	r1, [r3, #0]
 8002f5e:	4608      	mov	r0, r1
 8002f60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <__sfputs_r>:
 8002f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f68:	4606      	mov	r6, r0
 8002f6a:	460f      	mov	r7, r1
 8002f6c:	4614      	mov	r4, r2
 8002f6e:	18d5      	adds	r5, r2, r3
 8002f70:	42ac      	cmp	r4, r5
 8002f72:	d101      	bne.n	8002f78 <__sfputs_r+0x12>
 8002f74:	2000      	movs	r0, #0
 8002f76:	e007      	b.n	8002f88 <__sfputs_r+0x22>
 8002f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f7c:	463a      	mov	r2, r7
 8002f7e:	4630      	mov	r0, r6
 8002f80:	f7ff ffda 	bl	8002f38 <__sfputc_r>
 8002f84:	1c43      	adds	r3, r0, #1
 8002f86:	d1f3      	bne.n	8002f70 <__sfputs_r+0xa>
 8002f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f8c <_vfiprintf_r>:
 8002f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f90:	460d      	mov	r5, r1
 8002f92:	b09d      	sub	sp, #116	@ 0x74
 8002f94:	4614      	mov	r4, r2
 8002f96:	4698      	mov	r8, r3
 8002f98:	4606      	mov	r6, r0
 8002f9a:	b118      	cbz	r0, 8002fa4 <_vfiprintf_r+0x18>
 8002f9c:	6a03      	ldr	r3, [r0, #32]
 8002f9e:	b90b      	cbnz	r3, 8002fa4 <_vfiprintf_r+0x18>
 8002fa0:	f7ff fdc2 	bl	8002b28 <__sinit>
 8002fa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002fa6:	07d9      	lsls	r1, r3, #31
 8002fa8:	d405      	bmi.n	8002fb6 <_vfiprintf_r+0x2a>
 8002faa:	89ab      	ldrh	r3, [r5, #12]
 8002fac:	059a      	lsls	r2, r3, #22
 8002fae:	d402      	bmi.n	8002fb6 <_vfiprintf_r+0x2a>
 8002fb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002fb2:	f7ff fec6 	bl	8002d42 <__retarget_lock_acquire_recursive>
 8002fb6:	89ab      	ldrh	r3, [r5, #12]
 8002fb8:	071b      	lsls	r3, r3, #28
 8002fba:	d501      	bpl.n	8002fc0 <_vfiprintf_r+0x34>
 8002fbc:	692b      	ldr	r3, [r5, #16]
 8002fbe:	b99b      	cbnz	r3, 8002fe8 <_vfiprintf_r+0x5c>
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	4630      	mov	r0, r6
 8002fc4:	f000 fba6 	bl	8003714 <__swsetup_r>
 8002fc8:	b170      	cbz	r0, 8002fe8 <_vfiprintf_r+0x5c>
 8002fca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002fcc:	07dc      	lsls	r4, r3, #31
 8002fce:	d504      	bpl.n	8002fda <_vfiprintf_r+0x4e>
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd4:	b01d      	add	sp, #116	@ 0x74
 8002fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fda:	89ab      	ldrh	r3, [r5, #12]
 8002fdc:	0598      	lsls	r0, r3, #22
 8002fde:	d4f7      	bmi.n	8002fd0 <_vfiprintf_r+0x44>
 8002fe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002fe2:	f7ff feaf 	bl	8002d44 <__retarget_lock_release_recursive>
 8002fe6:	e7f3      	b.n	8002fd0 <_vfiprintf_r+0x44>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fec:	2320      	movs	r3, #32
 8002fee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ff6:	2330      	movs	r3, #48	@ 0x30
 8002ff8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80031a8 <_vfiprintf_r+0x21c>
 8002ffc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003000:	f04f 0901 	mov.w	r9, #1
 8003004:	4623      	mov	r3, r4
 8003006:	469a      	mov	sl, r3
 8003008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800300c:	b10a      	cbz	r2, 8003012 <_vfiprintf_r+0x86>
 800300e:	2a25      	cmp	r2, #37	@ 0x25
 8003010:	d1f9      	bne.n	8003006 <_vfiprintf_r+0x7a>
 8003012:	ebba 0b04 	subs.w	fp, sl, r4
 8003016:	d00b      	beq.n	8003030 <_vfiprintf_r+0xa4>
 8003018:	465b      	mov	r3, fp
 800301a:	4622      	mov	r2, r4
 800301c:	4629      	mov	r1, r5
 800301e:	4630      	mov	r0, r6
 8003020:	f7ff ffa1 	bl	8002f66 <__sfputs_r>
 8003024:	3001      	adds	r0, #1
 8003026:	f000 80a7 	beq.w	8003178 <_vfiprintf_r+0x1ec>
 800302a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800302c:	445a      	add	r2, fp
 800302e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003030:	f89a 3000 	ldrb.w	r3, [sl]
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 809f 	beq.w	8003178 <_vfiprintf_r+0x1ec>
 800303a:	2300      	movs	r3, #0
 800303c:	f04f 32ff 	mov.w	r2, #4294967295
 8003040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003044:	f10a 0a01 	add.w	sl, sl, #1
 8003048:	9304      	str	r3, [sp, #16]
 800304a:	9307      	str	r3, [sp, #28]
 800304c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003050:	931a      	str	r3, [sp, #104]	@ 0x68
 8003052:	4654      	mov	r4, sl
 8003054:	2205      	movs	r2, #5
 8003056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800305a:	4853      	ldr	r0, [pc, #332]	@ (80031a8 <_vfiprintf_r+0x21c>)
 800305c:	f7fd f8b8 	bl	80001d0 <memchr>
 8003060:	9a04      	ldr	r2, [sp, #16]
 8003062:	b9d8      	cbnz	r0, 800309c <_vfiprintf_r+0x110>
 8003064:	06d1      	lsls	r1, r2, #27
 8003066:	bf44      	itt	mi
 8003068:	2320      	movmi	r3, #32
 800306a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800306e:	0713      	lsls	r3, r2, #28
 8003070:	bf44      	itt	mi
 8003072:	232b      	movmi	r3, #43	@ 0x2b
 8003074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003078:	f89a 3000 	ldrb.w	r3, [sl]
 800307c:	2b2a      	cmp	r3, #42	@ 0x2a
 800307e:	d015      	beq.n	80030ac <_vfiprintf_r+0x120>
 8003080:	9a07      	ldr	r2, [sp, #28]
 8003082:	4654      	mov	r4, sl
 8003084:	2000      	movs	r0, #0
 8003086:	f04f 0c0a 	mov.w	ip, #10
 800308a:	4621      	mov	r1, r4
 800308c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003090:	3b30      	subs	r3, #48	@ 0x30
 8003092:	2b09      	cmp	r3, #9
 8003094:	d94b      	bls.n	800312e <_vfiprintf_r+0x1a2>
 8003096:	b1b0      	cbz	r0, 80030c6 <_vfiprintf_r+0x13a>
 8003098:	9207      	str	r2, [sp, #28]
 800309a:	e014      	b.n	80030c6 <_vfiprintf_r+0x13a>
 800309c:	eba0 0308 	sub.w	r3, r0, r8
 80030a0:	fa09 f303 	lsl.w	r3, r9, r3
 80030a4:	4313      	orrs	r3, r2
 80030a6:	9304      	str	r3, [sp, #16]
 80030a8:	46a2      	mov	sl, r4
 80030aa:	e7d2      	b.n	8003052 <_vfiprintf_r+0xc6>
 80030ac:	9b03      	ldr	r3, [sp, #12]
 80030ae:	1d19      	adds	r1, r3, #4
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	9103      	str	r1, [sp, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bfbb      	ittet	lt
 80030b8:	425b      	neglt	r3, r3
 80030ba:	f042 0202 	orrlt.w	r2, r2, #2
 80030be:	9307      	strge	r3, [sp, #28]
 80030c0:	9307      	strlt	r3, [sp, #28]
 80030c2:	bfb8      	it	lt
 80030c4:	9204      	strlt	r2, [sp, #16]
 80030c6:	7823      	ldrb	r3, [r4, #0]
 80030c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80030ca:	d10a      	bne.n	80030e2 <_vfiprintf_r+0x156>
 80030cc:	7863      	ldrb	r3, [r4, #1]
 80030ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80030d0:	d132      	bne.n	8003138 <_vfiprintf_r+0x1ac>
 80030d2:	9b03      	ldr	r3, [sp, #12]
 80030d4:	1d1a      	adds	r2, r3, #4
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	9203      	str	r2, [sp, #12]
 80030da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80030de:	3402      	adds	r4, #2
 80030e0:	9305      	str	r3, [sp, #20]
 80030e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80031b8 <_vfiprintf_r+0x22c>
 80030e6:	7821      	ldrb	r1, [r4, #0]
 80030e8:	2203      	movs	r2, #3
 80030ea:	4650      	mov	r0, sl
 80030ec:	f7fd f870 	bl	80001d0 <memchr>
 80030f0:	b138      	cbz	r0, 8003102 <_vfiprintf_r+0x176>
 80030f2:	9b04      	ldr	r3, [sp, #16]
 80030f4:	eba0 000a 	sub.w	r0, r0, sl
 80030f8:	2240      	movs	r2, #64	@ 0x40
 80030fa:	4082      	lsls	r2, r0
 80030fc:	4313      	orrs	r3, r2
 80030fe:	3401      	adds	r4, #1
 8003100:	9304      	str	r3, [sp, #16]
 8003102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003106:	4829      	ldr	r0, [pc, #164]	@ (80031ac <_vfiprintf_r+0x220>)
 8003108:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800310c:	2206      	movs	r2, #6
 800310e:	f7fd f85f 	bl	80001d0 <memchr>
 8003112:	2800      	cmp	r0, #0
 8003114:	d03f      	beq.n	8003196 <_vfiprintf_r+0x20a>
 8003116:	4b26      	ldr	r3, [pc, #152]	@ (80031b0 <_vfiprintf_r+0x224>)
 8003118:	bb1b      	cbnz	r3, 8003162 <_vfiprintf_r+0x1d6>
 800311a:	9b03      	ldr	r3, [sp, #12]
 800311c:	3307      	adds	r3, #7
 800311e:	f023 0307 	bic.w	r3, r3, #7
 8003122:	3308      	adds	r3, #8
 8003124:	9303      	str	r3, [sp, #12]
 8003126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003128:	443b      	add	r3, r7
 800312a:	9309      	str	r3, [sp, #36]	@ 0x24
 800312c:	e76a      	b.n	8003004 <_vfiprintf_r+0x78>
 800312e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003132:	460c      	mov	r4, r1
 8003134:	2001      	movs	r0, #1
 8003136:	e7a8      	b.n	800308a <_vfiprintf_r+0xfe>
 8003138:	2300      	movs	r3, #0
 800313a:	3401      	adds	r4, #1
 800313c:	9305      	str	r3, [sp, #20]
 800313e:	4619      	mov	r1, r3
 8003140:	f04f 0c0a 	mov.w	ip, #10
 8003144:	4620      	mov	r0, r4
 8003146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800314a:	3a30      	subs	r2, #48	@ 0x30
 800314c:	2a09      	cmp	r2, #9
 800314e:	d903      	bls.n	8003158 <_vfiprintf_r+0x1cc>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0c6      	beq.n	80030e2 <_vfiprintf_r+0x156>
 8003154:	9105      	str	r1, [sp, #20]
 8003156:	e7c4      	b.n	80030e2 <_vfiprintf_r+0x156>
 8003158:	fb0c 2101 	mla	r1, ip, r1, r2
 800315c:	4604      	mov	r4, r0
 800315e:	2301      	movs	r3, #1
 8003160:	e7f0      	b.n	8003144 <_vfiprintf_r+0x1b8>
 8003162:	ab03      	add	r3, sp, #12
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	462a      	mov	r2, r5
 8003168:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <_vfiprintf_r+0x228>)
 800316a:	a904      	add	r1, sp, #16
 800316c:	4630      	mov	r0, r6
 800316e:	f3af 8000 	nop.w
 8003172:	4607      	mov	r7, r0
 8003174:	1c78      	adds	r0, r7, #1
 8003176:	d1d6      	bne.n	8003126 <_vfiprintf_r+0x19a>
 8003178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800317a:	07d9      	lsls	r1, r3, #31
 800317c:	d405      	bmi.n	800318a <_vfiprintf_r+0x1fe>
 800317e:	89ab      	ldrh	r3, [r5, #12]
 8003180:	059a      	lsls	r2, r3, #22
 8003182:	d402      	bmi.n	800318a <_vfiprintf_r+0x1fe>
 8003184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003186:	f7ff fddd 	bl	8002d44 <__retarget_lock_release_recursive>
 800318a:	89ab      	ldrh	r3, [r5, #12]
 800318c:	065b      	lsls	r3, r3, #25
 800318e:	f53f af1f 	bmi.w	8002fd0 <_vfiprintf_r+0x44>
 8003192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003194:	e71e      	b.n	8002fd4 <_vfiprintf_r+0x48>
 8003196:	ab03      	add	r3, sp, #12
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	462a      	mov	r2, r5
 800319c:	4b05      	ldr	r3, [pc, #20]	@ (80031b4 <_vfiprintf_r+0x228>)
 800319e:	a904      	add	r1, sp, #16
 80031a0:	4630      	mov	r0, r6
 80031a2:	f000 f879 	bl	8003298 <_printf_i>
 80031a6:	e7e4      	b.n	8003172 <_vfiprintf_r+0x1e6>
 80031a8:	08003950 	.word	0x08003950
 80031ac:	0800395a 	.word	0x0800395a
 80031b0:	00000000 	.word	0x00000000
 80031b4:	08002f67 	.word	0x08002f67
 80031b8:	08003956 	.word	0x08003956

080031bc <_printf_common>:
 80031bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c0:	4616      	mov	r6, r2
 80031c2:	4698      	mov	r8, r3
 80031c4:	688a      	ldr	r2, [r1, #8]
 80031c6:	690b      	ldr	r3, [r1, #16]
 80031c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80031cc:	4293      	cmp	r3, r2
 80031ce:	bfb8      	it	lt
 80031d0:	4613      	movlt	r3, r2
 80031d2:	6033      	str	r3, [r6, #0]
 80031d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80031d8:	4607      	mov	r7, r0
 80031da:	460c      	mov	r4, r1
 80031dc:	b10a      	cbz	r2, 80031e2 <_printf_common+0x26>
 80031de:	3301      	adds	r3, #1
 80031e0:	6033      	str	r3, [r6, #0]
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	0699      	lsls	r1, r3, #26
 80031e6:	bf42      	ittt	mi
 80031e8:	6833      	ldrmi	r3, [r6, #0]
 80031ea:	3302      	addmi	r3, #2
 80031ec:	6033      	strmi	r3, [r6, #0]
 80031ee:	6825      	ldr	r5, [r4, #0]
 80031f0:	f015 0506 	ands.w	r5, r5, #6
 80031f4:	d106      	bne.n	8003204 <_printf_common+0x48>
 80031f6:	f104 0a19 	add.w	sl, r4, #25
 80031fa:	68e3      	ldr	r3, [r4, #12]
 80031fc:	6832      	ldr	r2, [r6, #0]
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	42ab      	cmp	r3, r5
 8003202:	dc26      	bgt.n	8003252 <_printf_common+0x96>
 8003204:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003208:	6822      	ldr	r2, [r4, #0]
 800320a:	3b00      	subs	r3, #0
 800320c:	bf18      	it	ne
 800320e:	2301      	movne	r3, #1
 8003210:	0692      	lsls	r2, r2, #26
 8003212:	d42b      	bmi.n	800326c <_printf_common+0xb0>
 8003214:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003218:	4641      	mov	r1, r8
 800321a:	4638      	mov	r0, r7
 800321c:	47c8      	blx	r9
 800321e:	3001      	adds	r0, #1
 8003220:	d01e      	beq.n	8003260 <_printf_common+0xa4>
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	6922      	ldr	r2, [r4, #16]
 8003226:	f003 0306 	and.w	r3, r3, #6
 800322a:	2b04      	cmp	r3, #4
 800322c:	bf02      	ittt	eq
 800322e:	68e5      	ldreq	r5, [r4, #12]
 8003230:	6833      	ldreq	r3, [r6, #0]
 8003232:	1aed      	subeq	r5, r5, r3
 8003234:	68a3      	ldr	r3, [r4, #8]
 8003236:	bf0c      	ite	eq
 8003238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800323c:	2500      	movne	r5, #0
 800323e:	4293      	cmp	r3, r2
 8003240:	bfc4      	itt	gt
 8003242:	1a9b      	subgt	r3, r3, r2
 8003244:	18ed      	addgt	r5, r5, r3
 8003246:	2600      	movs	r6, #0
 8003248:	341a      	adds	r4, #26
 800324a:	42b5      	cmp	r5, r6
 800324c:	d11a      	bne.n	8003284 <_printf_common+0xc8>
 800324e:	2000      	movs	r0, #0
 8003250:	e008      	b.n	8003264 <_printf_common+0xa8>
 8003252:	2301      	movs	r3, #1
 8003254:	4652      	mov	r2, sl
 8003256:	4641      	mov	r1, r8
 8003258:	4638      	mov	r0, r7
 800325a:	47c8      	blx	r9
 800325c:	3001      	adds	r0, #1
 800325e:	d103      	bne.n	8003268 <_printf_common+0xac>
 8003260:	f04f 30ff 	mov.w	r0, #4294967295
 8003264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003268:	3501      	adds	r5, #1
 800326a:	e7c6      	b.n	80031fa <_printf_common+0x3e>
 800326c:	18e1      	adds	r1, r4, r3
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	2030      	movs	r0, #48	@ 0x30
 8003272:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003276:	4422      	add	r2, r4
 8003278:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800327c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003280:	3302      	adds	r3, #2
 8003282:	e7c7      	b.n	8003214 <_printf_common+0x58>
 8003284:	2301      	movs	r3, #1
 8003286:	4622      	mov	r2, r4
 8003288:	4641      	mov	r1, r8
 800328a:	4638      	mov	r0, r7
 800328c:	47c8      	blx	r9
 800328e:	3001      	adds	r0, #1
 8003290:	d0e6      	beq.n	8003260 <_printf_common+0xa4>
 8003292:	3601      	adds	r6, #1
 8003294:	e7d9      	b.n	800324a <_printf_common+0x8e>
	...

08003298 <_printf_i>:
 8003298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800329c:	7e0f      	ldrb	r7, [r1, #24]
 800329e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80032a0:	2f78      	cmp	r7, #120	@ 0x78
 80032a2:	4691      	mov	r9, r2
 80032a4:	4680      	mov	r8, r0
 80032a6:	460c      	mov	r4, r1
 80032a8:	469a      	mov	sl, r3
 80032aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80032ae:	d807      	bhi.n	80032c0 <_printf_i+0x28>
 80032b0:	2f62      	cmp	r7, #98	@ 0x62
 80032b2:	d80a      	bhi.n	80032ca <_printf_i+0x32>
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	f000 80d2 	beq.w	800345e <_printf_i+0x1c6>
 80032ba:	2f58      	cmp	r7, #88	@ 0x58
 80032bc:	f000 80b9 	beq.w	8003432 <_printf_i+0x19a>
 80032c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80032c8:	e03a      	b.n	8003340 <_printf_i+0xa8>
 80032ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80032ce:	2b15      	cmp	r3, #21
 80032d0:	d8f6      	bhi.n	80032c0 <_printf_i+0x28>
 80032d2:	a101      	add	r1, pc, #4	@ (adr r1, 80032d8 <_printf_i+0x40>)
 80032d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032d8:	08003331 	.word	0x08003331
 80032dc:	08003345 	.word	0x08003345
 80032e0:	080032c1 	.word	0x080032c1
 80032e4:	080032c1 	.word	0x080032c1
 80032e8:	080032c1 	.word	0x080032c1
 80032ec:	080032c1 	.word	0x080032c1
 80032f0:	08003345 	.word	0x08003345
 80032f4:	080032c1 	.word	0x080032c1
 80032f8:	080032c1 	.word	0x080032c1
 80032fc:	080032c1 	.word	0x080032c1
 8003300:	080032c1 	.word	0x080032c1
 8003304:	08003445 	.word	0x08003445
 8003308:	0800336f 	.word	0x0800336f
 800330c:	080033ff 	.word	0x080033ff
 8003310:	080032c1 	.word	0x080032c1
 8003314:	080032c1 	.word	0x080032c1
 8003318:	08003467 	.word	0x08003467
 800331c:	080032c1 	.word	0x080032c1
 8003320:	0800336f 	.word	0x0800336f
 8003324:	080032c1 	.word	0x080032c1
 8003328:	080032c1 	.word	0x080032c1
 800332c:	08003407 	.word	0x08003407
 8003330:	6833      	ldr	r3, [r6, #0]
 8003332:	1d1a      	adds	r2, r3, #4
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6032      	str	r2, [r6, #0]
 8003338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800333c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003340:	2301      	movs	r3, #1
 8003342:	e09d      	b.n	8003480 <_printf_i+0x1e8>
 8003344:	6833      	ldr	r3, [r6, #0]
 8003346:	6820      	ldr	r0, [r4, #0]
 8003348:	1d19      	adds	r1, r3, #4
 800334a:	6031      	str	r1, [r6, #0]
 800334c:	0606      	lsls	r6, r0, #24
 800334e:	d501      	bpl.n	8003354 <_printf_i+0xbc>
 8003350:	681d      	ldr	r5, [r3, #0]
 8003352:	e003      	b.n	800335c <_printf_i+0xc4>
 8003354:	0645      	lsls	r5, r0, #25
 8003356:	d5fb      	bpl.n	8003350 <_printf_i+0xb8>
 8003358:	f9b3 5000 	ldrsh.w	r5, [r3]
 800335c:	2d00      	cmp	r5, #0
 800335e:	da03      	bge.n	8003368 <_printf_i+0xd0>
 8003360:	232d      	movs	r3, #45	@ 0x2d
 8003362:	426d      	negs	r5, r5
 8003364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003368:	4859      	ldr	r0, [pc, #356]	@ (80034d0 <_printf_i+0x238>)
 800336a:	230a      	movs	r3, #10
 800336c:	e011      	b.n	8003392 <_printf_i+0xfa>
 800336e:	6821      	ldr	r1, [r4, #0]
 8003370:	6833      	ldr	r3, [r6, #0]
 8003372:	0608      	lsls	r0, r1, #24
 8003374:	f853 5b04 	ldr.w	r5, [r3], #4
 8003378:	d402      	bmi.n	8003380 <_printf_i+0xe8>
 800337a:	0649      	lsls	r1, r1, #25
 800337c:	bf48      	it	mi
 800337e:	b2ad      	uxthmi	r5, r5
 8003380:	2f6f      	cmp	r7, #111	@ 0x6f
 8003382:	4853      	ldr	r0, [pc, #332]	@ (80034d0 <_printf_i+0x238>)
 8003384:	6033      	str	r3, [r6, #0]
 8003386:	bf14      	ite	ne
 8003388:	230a      	movne	r3, #10
 800338a:	2308      	moveq	r3, #8
 800338c:	2100      	movs	r1, #0
 800338e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003392:	6866      	ldr	r6, [r4, #4]
 8003394:	60a6      	str	r6, [r4, #8]
 8003396:	2e00      	cmp	r6, #0
 8003398:	bfa2      	ittt	ge
 800339a:	6821      	ldrge	r1, [r4, #0]
 800339c:	f021 0104 	bicge.w	r1, r1, #4
 80033a0:	6021      	strge	r1, [r4, #0]
 80033a2:	b90d      	cbnz	r5, 80033a8 <_printf_i+0x110>
 80033a4:	2e00      	cmp	r6, #0
 80033a6:	d04b      	beq.n	8003440 <_printf_i+0x1a8>
 80033a8:	4616      	mov	r6, r2
 80033aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80033ae:	fb03 5711 	mls	r7, r3, r1, r5
 80033b2:	5dc7      	ldrb	r7, [r0, r7]
 80033b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80033b8:	462f      	mov	r7, r5
 80033ba:	42bb      	cmp	r3, r7
 80033bc:	460d      	mov	r5, r1
 80033be:	d9f4      	bls.n	80033aa <_printf_i+0x112>
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d10b      	bne.n	80033dc <_printf_i+0x144>
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	07df      	lsls	r7, r3, #31
 80033c8:	d508      	bpl.n	80033dc <_printf_i+0x144>
 80033ca:	6923      	ldr	r3, [r4, #16]
 80033cc:	6861      	ldr	r1, [r4, #4]
 80033ce:	4299      	cmp	r1, r3
 80033d0:	bfde      	ittt	le
 80033d2:	2330      	movle	r3, #48	@ 0x30
 80033d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033dc:	1b92      	subs	r2, r2, r6
 80033de:	6122      	str	r2, [r4, #16]
 80033e0:	f8cd a000 	str.w	sl, [sp]
 80033e4:	464b      	mov	r3, r9
 80033e6:	aa03      	add	r2, sp, #12
 80033e8:	4621      	mov	r1, r4
 80033ea:	4640      	mov	r0, r8
 80033ec:	f7ff fee6 	bl	80031bc <_printf_common>
 80033f0:	3001      	adds	r0, #1
 80033f2:	d14a      	bne.n	800348a <_printf_i+0x1f2>
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295
 80033f8:	b004      	add	sp, #16
 80033fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033fe:	6823      	ldr	r3, [r4, #0]
 8003400:	f043 0320 	orr.w	r3, r3, #32
 8003404:	6023      	str	r3, [r4, #0]
 8003406:	4833      	ldr	r0, [pc, #204]	@ (80034d4 <_printf_i+0x23c>)
 8003408:	2778      	movs	r7, #120	@ 0x78
 800340a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	6831      	ldr	r1, [r6, #0]
 8003412:	061f      	lsls	r7, r3, #24
 8003414:	f851 5b04 	ldr.w	r5, [r1], #4
 8003418:	d402      	bmi.n	8003420 <_printf_i+0x188>
 800341a:	065f      	lsls	r7, r3, #25
 800341c:	bf48      	it	mi
 800341e:	b2ad      	uxthmi	r5, r5
 8003420:	6031      	str	r1, [r6, #0]
 8003422:	07d9      	lsls	r1, r3, #31
 8003424:	bf44      	itt	mi
 8003426:	f043 0320 	orrmi.w	r3, r3, #32
 800342a:	6023      	strmi	r3, [r4, #0]
 800342c:	b11d      	cbz	r5, 8003436 <_printf_i+0x19e>
 800342e:	2310      	movs	r3, #16
 8003430:	e7ac      	b.n	800338c <_printf_i+0xf4>
 8003432:	4827      	ldr	r0, [pc, #156]	@ (80034d0 <_printf_i+0x238>)
 8003434:	e7e9      	b.n	800340a <_printf_i+0x172>
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	f023 0320 	bic.w	r3, r3, #32
 800343c:	6023      	str	r3, [r4, #0]
 800343e:	e7f6      	b.n	800342e <_printf_i+0x196>
 8003440:	4616      	mov	r6, r2
 8003442:	e7bd      	b.n	80033c0 <_printf_i+0x128>
 8003444:	6833      	ldr	r3, [r6, #0]
 8003446:	6825      	ldr	r5, [r4, #0]
 8003448:	6961      	ldr	r1, [r4, #20]
 800344a:	1d18      	adds	r0, r3, #4
 800344c:	6030      	str	r0, [r6, #0]
 800344e:	062e      	lsls	r6, r5, #24
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	d501      	bpl.n	8003458 <_printf_i+0x1c0>
 8003454:	6019      	str	r1, [r3, #0]
 8003456:	e002      	b.n	800345e <_printf_i+0x1c6>
 8003458:	0668      	lsls	r0, r5, #25
 800345a:	d5fb      	bpl.n	8003454 <_printf_i+0x1bc>
 800345c:	8019      	strh	r1, [r3, #0]
 800345e:	2300      	movs	r3, #0
 8003460:	6123      	str	r3, [r4, #16]
 8003462:	4616      	mov	r6, r2
 8003464:	e7bc      	b.n	80033e0 <_printf_i+0x148>
 8003466:	6833      	ldr	r3, [r6, #0]
 8003468:	1d1a      	adds	r2, r3, #4
 800346a:	6032      	str	r2, [r6, #0]
 800346c:	681e      	ldr	r6, [r3, #0]
 800346e:	6862      	ldr	r2, [r4, #4]
 8003470:	2100      	movs	r1, #0
 8003472:	4630      	mov	r0, r6
 8003474:	f7fc feac 	bl	80001d0 <memchr>
 8003478:	b108      	cbz	r0, 800347e <_printf_i+0x1e6>
 800347a:	1b80      	subs	r0, r0, r6
 800347c:	6060      	str	r0, [r4, #4]
 800347e:	6863      	ldr	r3, [r4, #4]
 8003480:	6123      	str	r3, [r4, #16]
 8003482:	2300      	movs	r3, #0
 8003484:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003488:	e7aa      	b.n	80033e0 <_printf_i+0x148>
 800348a:	6923      	ldr	r3, [r4, #16]
 800348c:	4632      	mov	r2, r6
 800348e:	4649      	mov	r1, r9
 8003490:	4640      	mov	r0, r8
 8003492:	47d0      	blx	sl
 8003494:	3001      	adds	r0, #1
 8003496:	d0ad      	beq.n	80033f4 <_printf_i+0x15c>
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	079b      	lsls	r3, r3, #30
 800349c:	d413      	bmi.n	80034c6 <_printf_i+0x22e>
 800349e:	68e0      	ldr	r0, [r4, #12]
 80034a0:	9b03      	ldr	r3, [sp, #12]
 80034a2:	4298      	cmp	r0, r3
 80034a4:	bfb8      	it	lt
 80034a6:	4618      	movlt	r0, r3
 80034a8:	e7a6      	b.n	80033f8 <_printf_i+0x160>
 80034aa:	2301      	movs	r3, #1
 80034ac:	4632      	mov	r2, r6
 80034ae:	4649      	mov	r1, r9
 80034b0:	4640      	mov	r0, r8
 80034b2:	47d0      	blx	sl
 80034b4:	3001      	adds	r0, #1
 80034b6:	d09d      	beq.n	80033f4 <_printf_i+0x15c>
 80034b8:	3501      	adds	r5, #1
 80034ba:	68e3      	ldr	r3, [r4, #12]
 80034bc:	9903      	ldr	r1, [sp, #12]
 80034be:	1a5b      	subs	r3, r3, r1
 80034c0:	42ab      	cmp	r3, r5
 80034c2:	dcf2      	bgt.n	80034aa <_printf_i+0x212>
 80034c4:	e7eb      	b.n	800349e <_printf_i+0x206>
 80034c6:	2500      	movs	r5, #0
 80034c8:	f104 0619 	add.w	r6, r4, #25
 80034cc:	e7f5      	b.n	80034ba <_printf_i+0x222>
 80034ce:	bf00      	nop
 80034d0:	08003961 	.word	0x08003961
 80034d4:	08003972 	.word	0x08003972

080034d8 <__sflush_r>:
 80034d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e0:	0716      	lsls	r6, r2, #28
 80034e2:	4605      	mov	r5, r0
 80034e4:	460c      	mov	r4, r1
 80034e6:	d454      	bmi.n	8003592 <__sflush_r+0xba>
 80034e8:	684b      	ldr	r3, [r1, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	dc02      	bgt.n	80034f4 <__sflush_r+0x1c>
 80034ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	dd48      	ble.n	8003586 <__sflush_r+0xae>
 80034f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80034f6:	2e00      	cmp	r6, #0
 80034f8:	d045      	beq.n	8003586 <__sflush_r+0xae>
 80034fa:	2300      	movs	r3, #0
 80034fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003500:	682f      	ldr	r7, [r5, #0]
 8003502:	6a21      	ldr	r1, [r4, #32]
 8003504:	602b      	str	r3, [r5, #0]
 8003506:	d030      	beq.n	800356a <__sflush_r+0x92>
 8003508:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800350a:	89a3      	ldrh	r3, [r4, #12]
 800350c:	0759      	lsls	r1, r3, #29
 800350e:	d505      	bpl.n	800351c <__sflush_r+0x44>
 8003510:	6863      	ldr	r3, [r4, #4]
 8003512:	1ad2      	subs	r2, r2, r3
 8003514:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003516:	b10b      	cbz	r3, 800351c <__sflush_r+0x44>
 8003518:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800351a:	1ad2      	subs	r2, r2, r3
 800351c:	2300      	movs	r3, #0
 800351e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003520:	6a21      	ldr	r1, [r4, #32]
 8003522:	4628      	mov	r0, r5
 8003524:	47b0      	blx	r6
 8003526:	1c43      	adds	r3, r0, #1
 8003528:	89a3      	ldrh	r3, [r4, #12]
 800352a:	d106      	bne.n	800353a <__sflush_r+0x62>
 800352c:	6829      	ldr	r1, [r5, #0]
 800352e:	291d      	cmp	r1, #29
 8003530:	d82b      	bhi.n	800358a <__sflush_r+0xb2>
 8003532:	4a2a      	ldr	r2, [pc, #168]	@ (80035dc <__sflush_r+0x104>)
 8003534:	410a      	asrs	r2, r1
 8003536:	07d6      	lsls	r6, r2, #31
 8003538:	d427      	bmi.n	800358a <__sflush_r+0xb2>
 800353a:	2200      	movs	r2, #0
 800353c:	6062      	str	r2, [r4, #4]
 800353e:	04d9      	lsls	r1, r3, #19
 8003540:	6922      	ldr	r2, [r4, #16]
 8003542:	6022      	str	r2, [r4, #0]
 8003544:	d504      	bpl.n	8003550 <__sflush_r+0x78>
 8003546:	1c42      	adds	r2, r0, #1
 8003548:	d101      	bne.n	800354e <__sflush_r+0x76>
 800354a:	682b      	ldr	r3, [r5, #0]
 800354c:	b903      	cbnz	r3, 8003550 <__sflush_r+0x78>
 800354e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003550:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003552:	602f      	str	r7, [r5, #0]
 8003554:	b1b9      	cbz	r1, 8003586 <__sflush_r+0xae>
 8003556:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800355a:	4299      	cmp	r1, r3
 800355c:	d002      	beq.n	8003564 <__sflush_r+0x8c>
 800355e:	4628      	mov	r0, r5
 8003560:	f7ff fbf2 	bl	8002d48 <_free_r>
 8003564:	2300      	movs	r3, #0
 8003566:	6363      	str	r3, [r4, #52]	@ 0x34
 8003568:	e00d      	b.n	8003586 <__sflush_r+0xae>
 800356a:	2301      	movs	r3, #1
 800356c:	4628      	mov	r0, r5
 800356e:	47b0      	blx	r6
 8003570:	4602      	mov	r2, r0
 8003572:	1c50      	adds	r0, r2, #1
 8003574:	d1c9      	bne.n	800350a <__sflush_r+0x32>
 8003576:	682b      	ldr	r3, [r5, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0c6      	beq.n	800350a <__sflush_r+0x32>
 800357c:	2b1d      	cmp	r3, #29
 800357e:	d001      	beq.n	8003584 <__sflush_r+0xac>
 8003580:	2b16      	cmp	r3, #22
 8003582:	d11e      	bne.n	80035c2 <__sflush_r+0xea>
 8003584:	602f      	str	r7, [r5, #0]
 8003586:	2000      	movs	r0, #0
 8003588:	e022      	b.n	80035d0 <__sflush_r+0xf8>
 800358a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800358e:	b21b      	sxth	r3, r3
 8003590:	e01b      	b.n	80035ca <__sflush_r+0xf2>
 8003592:	690f      	ldr	r7, [r1, #16]
 8003594:	2f00      	cmp	r7, #0
 8003596:	d0f6      	beq.n	8003586 <__sflush_r+0xae>
 8003598:	0793      	lsls	r3, r2, #30
 800359a:	680e      	ldr	r6, [r1, #0]
 800359c:	bf08      	it	eq
 800359e:	694b      	ldreq	r3, [r1, #20]
 80035a0:	600f      	str	r7, [r1, #0]
 80035a2:	bf18      	it	ne
 80035a4:	2300      	movne	r3, #0
 80035a6:	eba6 0807 	sub.w	r8, r6, r7
 80035aa:	608b      	str	r3, [r1, #8]
 80035ac:	f1b8 0f00 	cmp.w	r8, #0
 80035b0:	dde9      	ble.n	8003586 <__sflush_r+0xae>
 80035b2:	6a21      	ldr	r1, [r4, #32]
 80035b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80035b6:	4643      	mov	r3, r8
 80035b8:	463a      	mov	r2, r7
 80035ba:	4628      	mov	r0, r5
 80035bc:	47b0      	blx	r6
 80035be:	2800      	cmp	r0, #0
 80035c0:	dc08      	bgt.n	80035d4 <__sflush_r+0xfc>
 80035c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035ca:	81a3      	strh	r3, [r4, #12]
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035d4:	4407      	add	r7, r0
 80035d6:	eba8 0800 	sub.w	r8, r8, r0
 80035da:	e7e7      	b.n	80035ac <__sflush_r+0xd4>
 80035dc:	dfbffffe 	.word	0xdfbffffe

080035e0 <_fflush_r>:
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	690b      	ldr	r3, [r1, #16]
 80035e4:	4605      	mov	r5, r0
 80035e6:	460c      	mov	r4, r1
 80035e8:	b913      	cbnz	r3, 80035f0 <_fflush_r+0x10>
 80035ea:	2500      	movs	r5, #0
 80035ec:	4628      	mov	r0, r5
 80035ee:	bd38      	pop	{r3, r4, r5, pc}
 80035f0:	b118      	cbz	r0, 80035fa <_fflush_r+0x1a>
 80035f2:	6a03      	ldr	r3, [r0, #32]
 80035f4:	b90b      	cbnz	r3, 80035fa <_fflush_r+0x1a>
 80035f6:	f7ff fa97 	bl	8002b28 <__sinit>
 80035fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f3      	beq.n	80035ea <_fflush_r+0xa>
 8003602:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003604:	07d0      	lsls	r0, r2, #31
 8003606:	d404      	bmi.n	8003612 <_fflush_r+0x32>
 8003608:	0599      	lsls	r1, r3, #22
 800360a:	d402      	bmi.n	8003612 <_fflush_r+0x32>
 800360c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800360e:	f7ff fb98 	bl	8002d42 <__retarget_lock_acquire_recursive>
 8003612:	4628      	mov	r0, r5
 8003614:	4621      	mov	r1, r4
 8003616:	f7ff ff5f 	bl	80034d8 <__sflush_r>
 800361a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800361c:	07da      	lsls	r2, r3, #31
 800361e:	4605      	mov	r5, r0
 8003620:	d4e4      	bmi.n	80035ec <_fflush_r+0xc>
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	059b      	lsls	r3, r3, #22
 8003626:	d4e1      	bmi.n	80035ec <_fflush_r+0xc>
 8003628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800362a:	f7ff fb8b 	bl	8002d44 <__retarget_lock_release_recursive>
 800362e:	e7dd      	b.n	80035ec <_fflush_r+0xc>

08003630 <_putc_r>:
 8003630:	b570      	push	{r4, r5, r6, lr}
 8003632:	460d      	mov	r5, r1
 8003634:	4614      	mov	r4, r2
 8003636:	4606      	mov	r6, r0
 8003638:	b118      	cbz	r0, 8003642 <_putc_r+0x12>
 800363a:	6a03      	ldr	r3, [r0, #32]
 800363c:	b90b      	cbnz	r3, 8003642 <_putc_r+0x12>
 800363e:	f7ff fa73 	bl	8002b28 <__sinit>
 8003642:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003644:	07d8      	lsls	r0, r3, #31
 8003646:	d405      	bmi.n	8003654 <_putc_r+0x24>
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	0599      	lsls	r1, r3, #22
 800364c:	d402      	bmi.n	8003654 <_putc_r+0x24>
 800364e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003650:	f7ff fb77 	bl	8002d42 <__retarget_lock_acquire_recursive>
 8003654:	68a3      	ldr	r3, [r4, #8]
 8003656:	3b01      	subs	r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	60a3      	str	r3, [r4, #8]
 800365c:	da05      	bge.n	800366a <_putc_r+0x3a>
 800365e:	69a2      	ldr	r2, [r4, #24]
 8003660:	4293      	cmp	r3, r2
 8003662:	db12      	blt.n	800368a <_putc_r+0x5a>
 8003664:	b2eb      	uxtb	r3, r5
 8003666:	2b0a      	cmp	r3, #10
 8003668:	d00f      	beq.n	800368a <_putc_r+0x5a>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	6022      	str	r2, [r4, #0]
 8003670:	701d      	strb	r5, [r3, #0]
 8003672:	b2ed      	uxtb	r5, r5
 8003674:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003676:	07da      	lsls	r2, r3, #31
 8003678:	d405      	bmi.n	8003686 <_putc_r+0x56>
 800367a:	89a3      	ldrh	r3, [r4, #12]
 800367c:	059b      	lsls	r3, r3, #22
 800367e:	d402      	bmi.n	8003686 <_putc_r+0x56>
 8003680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003682:	f7ff fb5f 	bl	8002d44 <__retarget_lock_release_recursive>
 8003686:	4628      	mov	r0, r5
 8003688:	bd70      	pop	{r4, r5, r6, pc}
 800368a:	4629      	mov	r1, r5
 800368c:	4622      	mov	r2, r4
 800368e:	4630      	mov	r0, r6
 8003690:	f000 f802 	bl	8003698 <__swbuf_r>
 8003694:	4605      	mov	r5, r0
 8003696:	e7ed      	b.n	8003674 <_putc_r+0x44>

08003698 <__swbuf_r>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	460e      	mov	r6, r1
 800369c:	4614      	mov	r4, r2
 800369e:	4605      	mov	r5, r0
 80036a0:	b118      	cbz	r0, 80036aa <__swbuf_r+0x12>
 80036a2:	6a03      	ldr	r3, [r0, #32]
 80036a4:	b90b      	cbnz	r3, 80036aa <__swbuf_r+0x12>
 80036a6:	f7ff fa3f 	bl	8002b28 <__sinit>
 80036aa:	69a3      	ldr	r3, [r4, #24]
 80036ac:	60a3      	str	r3, [r4, #8]
 80036ae:	89a3      	ldrh	r3, [r4, #12]
 80036b0:	071a      	lsls	r2, r3, #28
 80036b2:	d501      	bpl.n	80036b8 <__swbuf_r+0x20>
 80036b4:	6923      	ldr	r3, [r4, #16]
 80036b6:	b943      	cbnz	r3, 80036ca <__swbuf_r+0x32>
 80036b8:	4621      	mov	r1, r4
 80036ba:	4628      	mov	r0, r5
 80036bc:	f000 f82a 	bl	8003714 <__swsetup_r>
 80036c0:	b118      	cbz	r0, 80036ca <__swbuf_r+0x32>
 80036c2:	f04f 37ff 	mov.w	r7, #4294967295
 80036c6:	4638      	mov	r0, r7
 80036c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	6922      	ldr	r2, [r4, #16]
 80036ce:	1a98      	subs	r0, r3, r2
 80036d0:	6963      	ldr	r3, [r4, #20]
 80036d2:	b2f6      	uxtb	r6, r6
 80036d4:	4283      	cmp	r3, r0
 80036d6:	4637      	mov	r7, r6
 80036d8:	dc05      	bgt.n	80036e6 <__swbuf_r+0x4e>
 80036da:	4621      	mov	r1, r4
 80036dc:	4628      	mov	r0, r5
 80036de:	f7ff ff7f 	bl	80035e0 <_fflush_r>
 80036e2:	2800      	cmp	r0, #0
 80036e4:	d1ed      	bne.n	80036c2 <__swbuf_r+0x2a>
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	60a3      	str	r3, [r4, #8]
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	6022      	str	r2, [r4, #0]
 80036f2:	701e      	strb	r6, [r3, #0]
 80036f4:	6962      	ldr	r2, [r4, #20]
 80036f6:	1c43      	adds	r3, r0, #1
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d004      	beq.n	8003706 <__swbuf_r+0x6e>
 80036fc:	89a3      	ldrh	r3, [r4, #12]
 80036fe:	07db      	lsls	r3, r3, #31
 8003700:	d5e1      	bpl.n	80036c6 <__swbuf_r+0x2e>
 8003702:	2e0a      	cmp	r6, #10
 8003704:	d1df      	bne.n	80036c6 <__swbuf_r+0x2e>
 8003706:	4621      	mov	r1, r4
 8003708:	4628      	mov	r0, r5
 800370a:	f7ff ff69 	bl	80035e0 <_fflush_r>
 800370e:	2800      	cmp	r0, #0
 8003710:	d0d9      	beq.n	80036c6 <__swbuf_r+0x2e>
 8003712:	e7d6      	b.n	80036c2 <__swbuf_r+0x2a>

08003714 <__swsetup_r>:
 8003714:	b538      	push	{r3, r4, r5, lr}
 8003716:	4b29      	ldr	r3, [pc, #164]	@ (80037bc <__swsetup_r+0xa8>)
 8003718:	4605      	mov	r5, r0
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	460c      	mov	r4, r1
 800371e:	b118      	cbz	r0, 8003728 <__swsetup_r+0x14>
 8003720:	6a03      	ldr	r3, [r0, #32]
 8003722:	b90b      	cbnz	r3, 8003728 <__swsetup_r+0x14>
 8003724:	f7ff fa00 	bl	8002b28 <__sinit>
 8003728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800372c:	0719      	lsls	r1, r3, #28
 800372e:	d422      	bmi.n	8003776 <__swsetup_r+0x62>
 8003730:	06da      	lsls	r2, r3, #27
 8003732:	d407      	bmi.n	8003744 <__swsetup_r+0x30>
 8003734:	2209      	movs	r2, #9
 8003736:	602a      	str	r2, [r5, #0]
 8003738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800373c:	81a3      	strh	r3, [r4, #12]
 800373e:	f04f 30ff 	mov.w	r0, #4294967295
 8003742:	e033      	b.n	80037ac <__swsetup_r+0x98>
 8003744:	0758      	lsls	r0, r3, #29
 8003746:	d512      	bpl.n	800376e <__swsetup_r+0x5a>
 8003748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800374a:	b141      	cbz	r1, 800375e <__swsetup_r+0x4a>
 800374c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003750:	4299      	cmp	r1, r3
 8003752:	d002      	beq.n	800375a <__swsetup_r+0x46>
 8003754:	4628      	mov	r0, r5
 8003756:	f7ff faf7 	bl	8002d48 <_free_r>
 800375a:	2300      	movs	r3, #0
 800375c:	6363      	str	r3, [r4, #52]	@ 0x34
 800375e:	89a3      	ldrh	r3, [r4, #12]
 8003760:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003764:	81a3      	strh	r3, [r4, #12]
 8003766:	2300      	movs	r3, #0
 8003768:	6063      	str	r3, [r4, #4]
 800376a:	6923      	ldr	r3, [r4, #16]
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	89a3      	ldrh	r3, [r4, #12]
 8003770:	f043 0308 	orr.w	r3, r3, #8
 8003774:	81a3      	strh	r3, [r4, #12]
 8003776:	6923      	ldr	r3, [r4, #16]
 8003778:	b94b      	cbnz	r3, 800378e <__swsetup_r+0x7a>
 800377a:	89a3      	ldrh	r3, [r4, #12]
 800377c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003784:	d003      	beq.n	800378e <__swsetup_r+0x7a>
 8003786:	4621      	mov	r1, r4
 8003788:	4628      	mov	r0, r5
 800378a:	f000 f84f 	bl	800382c <__smakebuf_r>
 800378e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003792:	f013 0201 	ands.w	r2, r3, #1
 8003796:	d00a      	beq.n	80037ae <__swsetup_r+0x9a>
 8003798:	2200      	movs	r2, #0
 800379a:	60a2      	str	r2, [r4, #8]
 800379c:	6962      	ldr	r2, [r4, #20]
 800379e:	4252      	negs	r2, r2
 80037a0:	61a2      	str	r2, [r4, #24]
 80037a2:	6922      	ldr	r2, [r4, #16]
 80037a4:	b942      	cbnz	r2, 80037b8 <__swsetup_r+0xa4>
 80037a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80037aa:	d1c5      	bne.n	8003738 <__swsetup_r+0x24>
 80037ac:	bd38      	pop	{r3, r4, r5, pc}
 80037ae:	0799      	lsls	r1, r3, #30
 80037b0:	bf58      	it	pl
 80037b2:	6962      	ldrpl	r2, [r4, #20]
 80037b4:	60a2      	str	r2, [r4, #8]
 80037b6:	e7f4      	b.n	80037a2 <__swsetup_r+0x8e>
 80037b8:	2000      	movs	r0, #0
 80037ba:	e7f7      	b.n	80037ac <__swsetup_r+0x98>
 80037bc:	20000018 	.word	0x20000018

080037c0 <_sbrk_r>:
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	4d06      	ldr	r5, [pc, #24]	@ (80037dc <_sbrk_r+0x1c>)
 80037c4:	2300      	movs	r3, #0
 80037c6:	4604      	mov	r4, r0
 80037c8:	4608      	mov	r0, r1
 80037ca:	602b      	str	r3, [r5, #0]
 80037cc:	f7fc ff92 	bl	80006f4 <_sbrk>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	d102      	bne.n	80037da <_sbrk_r+0x1a>
 80037d4:	682b      	ldr	r3, [r5, #0]
 80037d6:	b103      	cbz	r3, 80037da <_sbrk_r+0x1a>
 80037d8:	6023      	str	r3, [r4, #0]
 80037da:	bd38      	pop	{r3, r4, r5, pc}
 80037dc:	2000022c 	.word	0x2000022c

080037e0 <__swhatbuf_r>:
 80037e0:	b570      	push	{r4, r5, r6, lr}
 80037e2:	460c      	mov	r4, r1
 80037e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e8:	2900      	cmp	r1, #0
 80037ea:	b096      	sub	sp, #88	@ 0x58
 80037ec:	4615      	mov	r5, r2
 80037ee:	461e      	mov	r6, r3
 80037f0:	da0d      	bge.n	800380e <__swhatbuf_r+0x2e>
 80037f2:	89a3      	ldrh	r3, [r4, #12]
 80037f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80037f8:	f04f 0100 	mov.w	r1, #0
 80037fc:	bf14      	ite	ne
 80037fe:	2340      	movne	r3, #64	@ 0x40
 8003800:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003804:	2000      	movs	r0, #0
 8003806:	6031      	str	r1, [r6, #0]
 8003808:	602b      	str	r3, [r5, #0]
 800380a:	b016      	add	sp, #88	@ 0x58
 800380c:	bd70      	pop	{r4, r5, r6, pc}
 800380e:	466a      	mov	r2, sp
 8003810:	f000 f848 	bl	80038a4 <_fstat_r>
 8003814:	2800      	cmp	r0, #0
 8003816:	dbec      	blt.n	80037f2 <__swhatbuf_r+0x12>
 8003818:	9901      	ldr	r1, [sp, #4]
 800381a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800381e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003822:	4259      	negs	r1, r3
 8003824:	4159      	adcs	r1, r3
 8003826:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800382a:	e7eb      	b.n	8003804 <__swhatbuf_r+0x24>

0800382c <__smakebuf_r>:
 800382c:	898b      	ldrh	r3, [r1, #12]
 800382e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003830:	079d      	lsls	r5, r3, #30
 8003832:	4606      	mov	r6, r0
 8003834:	460c      	mov	r4, r1
 8003836:	d507      	bpl.n	8003848 <__smakebuf_r+0x1c>
 8003838:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	6123      	str	r3, [r4, #16]
 8003840:	2301      	movs	r3, #1
 8003842:	6163      	str	r3, [r4, #20]
 8003844:	b003      	add	sp, #12
 8003846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003848:	ab01      	add	r3, sp, #4
 800384a:	466a      	mov	r2, sp
 800384c:	f7ff ffc8 	bl	80037e0 <__swhatbuf_r>
 8003850:	9f00      	ldr	r7, [sp, #0]
 8003852:	4605      	mov	r5, r0
 8003854:	4639      	mov	r1, r7
 8003856:	4630      	mov	r0, r6
 8003858:	f7ff fae2 	bl	8002e20 <_malloc_r>
 800385c:	b948      	cbnz	r0, 8003872 <__smakebuf_r+0x46>
 800385e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003862:	059a      	lsls	r2, r3, #22
 8003864:	d4ee      	bmi.n	8003844 <__smakebuf_r+0x18>
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	f043 0302 	orr.w	r3, r3, #2
 800386e:	81a3      	strh	r3, [r4, #12]
 8003870:	e7e2      	b.n	8003838 <__smakebuf_r+0xc>
 8003872:	89a3      	ldrh	r3, [r4, #12]
 8003874:	6020      	str	r0, [r4, #0]
 8003876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800387a:	81a3      	strh	r3, [r4, #12]
 800387c:	9b01      	ldr	r3, [sp, #4]
 800387e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003882:	b15b      	cbz	r3, 800389c <__smakebuf_r+0x70>
 8003884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003888:	4630      	mov	r0, r6
 800388a:	f000 f81d 	bl	80038c8 <_isatty_r>
 800388e:	b128      	cbz	r0, 800389c <__smakebuf_r+0x70>
 8003890:	89a3      	ldrh	r3, [r4, #12]
 8003892:	f023 0303 	bic.w	r3, r3, #3
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	81a3      	strh	r3, [r4, #12]
 800389c:	89a3      	ldrh	r3, [r4, #12]
 800389e:	431d      	orrs	r5, r3
 80038a0:	81a5      	strh	r5, [r4, #12]
 80038a2:	e7cf      	b.n	8003844 <__smakebuf_r+0x18>

080038a4 <_fstat_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4d07      	ldr	r5, [pc, #28]	@ (80038c4 <_fstat_r+0x20>)
 80038a8:	2300      	movs	r3, #0
 80038aa:	4604      	mov	r4, r0
 80038ac:	4608      	mov	r0, r1
 80038ae:	4611      	mov	r1, r2
 80038b0:	602b      	str	r3, [r5, #0]
 80038b2:	f7fc fef6 	bl	80006a2 <_fstat>
 80038b6:	1c43      	adds	r3, r0, #1
 80038b8:	d102      	bne.n	80038c0 <_fstat_r+0x1c>
 80038ba:	682b      	ldr	r3, [r5, #0]
 80038bc:	b103      	cbz	r3, 80038c0 <_fstat_r+0x1c>
 80038be:	6023      	str	r3, [r4, #0]
 80038c0:	bd38      	pop	{r3, r4, r5, pc}
 80038c2:	bf00      	nop
 80038c4:	2000022c 	.word	0x2000022c

080038c8 <_isatty_r>:
 80038c8:	b538      	push	{r3, r4, r5, lr}
 80038ca:	4d06      	ldr	r5, [pc, #24]	@ (80038e4 <_isatty_r+0x1c>)
 80038cc:	2300      	movs	r3, #0
 80038ce:	4604      	mov	r4, r0
 80038d0:	4608      	mov	r0, r1
 80038d2:	602b      	str	r3, [r5, #0]
 80038d4:	f7fc fef5 	bl	80006c2 <_isatty>
 80038d8:	1c43      	adds	r3, r0, #1
 80038da:	d102      	bne.n	80038e2 <_isatty_r+0x1a>
 80038dc:	682b      	ldr	r3, [r5, #0]
 80038de:	b103      	cbz	r3, 80038e2 <_isatty_r+0x1a>
 80038e0:	6023      	str	r3, [r4, #0]
 80038e2:	bd38      	pop	{r3, r4, r5, pc}
 80038e4:	2000022c 	.word	0x2000022c

080038e8 <_init>:
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ea:	bf00      	nop
 80038ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ee:	bc08      	pop	{r3}
 80038f0:	469e      	mov	lr, r3
 80038f2:	4770      	bx	lr

080038f4 <_fini>:
 80038f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f6:	bf00      	nop
 80038f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fa:	bc08      	pop	{r3}
 80038fc:	469e      	mov	lr, r3
 80038fe:	4770      	bx	lr
