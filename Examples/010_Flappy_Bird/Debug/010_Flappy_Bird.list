
010_Flappy_Bird.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b088  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c78c  0800b218  0800b218  0000c218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080179a4  080179a4  00019208  2**0
                  CONTENTS
  4 .ARM          00000008  080179a4  080179a4  000189a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080179ac  080179ac  00019208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080179ac  080179ac  000189ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080179b0  080179b0  000189b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  080179b4  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00019208  2**0
                  CONTENTS
 10 .bss          00007ab4  20000208  20000208  00019208  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20007cbc  20007cbc  00019208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00019208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf11  00000000  00000000  00019238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000270d  00000000  00000000  00026149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  00028858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000922  00000000  00000000  00029488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f1b6  00000000  00000000  00029daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b7d  00000000  00000000  00048f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af85d  00000000  00000000  0005aadd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a33a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004728  00000000  00000000  0010a380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0010eaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b200 	.word	0x0800b200

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800b200 	.word	0x0800b200

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <bsp_lcd_set_background>:
/**
  * @brief  Set the background color on the LCD.
  * @param  hlcd: Pointer to LCD handle.
  * @retval None
  */
void bsp_lcd_set_background(bsp_lcd_t *hlcd) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_rect(hlcd, BACKGROUND,0,(BSP_LCD_BACKGROUND_WIDTH),0,(BSP_LCD_BACKGROUND_HEIGHT));
 8000cfc:	23f0      	movs	r3, #240	@ 0xf0
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	2300      	movs	r3, #0
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	23f0      	movs	r3, #240	@ 0xf0
 8000d06:	2200      	movs	r2, #0
 8000d08:	4903      	ldr	r1, [pc, #12]	@ (8000d18 <bsp_lcd_set_background+0x24>)
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f004 fee3 	bl	8005ad6 <bsp_lcd_fill_rect>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	009ae8f6 	.word	0x009ae8f6

08000d1c <fill_player_trace>:
/**
  * @brief  Fill the player trace area with the background color.
  * @param  hlcd: Pointer to LCD handle.
  * @retval None
  */
void fill_player_trace(bsp_lcd_t *hlcd){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af02      	add	r7, sp, #8
 8000d22:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_rect(hlcd, BACKGROUND , player.x, player.w, 30, 180);
 8000d24:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <fill_player_trace+0x30>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <fill_player_trace+0x30>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	23b4      	movs	r3, #180	@ 0xb4
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	231e      	movs	r3, #30
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	4905      	ldr	r1, [pc, #20]	@ (8000d50 <fill_player_trace+0x34>)
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f004 feca 	bl	8005ad6 <bsp_lcd_fill_rect>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20007b24 	.word	0x20007b24
 8000d50:	009ae8f6 	.word	0x009ae8f6

08000d54 <display_bush>:
/**
  * @brief  Display bush images on the LCD.
  * @param  hlcd: Pointer to LCD handle.
  * @retval None
  */
void display_bush(bsp_lcd_t *hlcd) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_image(hlcd, (uint16_t *)bush, 0, 60, 210, 30);
 8000d5c:	231e      	movs	r3, #30
 8000d5e:	9301      	str	r3, [sp, #4]
 8000d60:	23d2      	movs	r3, #210	@ 0xd2
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	233c      	movs	r3, #60	@ 0x3c
 8000d66:	2200      	movs	r2, #0
 8000d68:	4912      	ldr	r1, [pc, #72]	@ (8000db4 <display_bush+0x60>)
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f004 ff2a 	bl	8005bc4 <bsp_lcd_fill_image>
	bsp_lcd_fill_image(hlcd, (uint16_t *)bush, 60, 60, 210, 30);
 8000d70:	231e      	movs	r3, #30
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	23d2      	movs	r3, #210	@ 0xd2
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	233c      	movs	r3, #60	@ 0x3c
 8000d7a:	223c      	movs	r2, #60	@ 0x3c
 8000d7c:	490d      	ldr	r1, [pc, #52]	@ (8000db4 <display_bush+0x60>)
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f004 ff20 	bl	8005bc4 <bsp_lcd_fill_image>
	bsp_lcd_fill_image(hlcd, (uint16_t *)bush, 120, 60, 210, 30);
 8000d84:	231e      	movs	r3, #30
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	23d2      	movs	r3, #210	@ 0xd2
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	233c      	movs	r3, #60	@ 0x3c
 8000d8e:	2278      	movs	r2, #120	@ 0x78
 8000d90:	4908      	ldr	r1, [pc, #32]	@ (8000db4 <display_bush+0x60>)
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f004 ff16 	bl	8005bc4 <bsp_lcd_fill_image>
	bsp_lcd_fill_image(hlcd, (uint16_t *)bush, 180, 60, 210, 30);
 8000d98:	231e      	movs	r3, #30
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	23d2      	movs	r3, #210	@ 0xd2
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	233c      	movs	r3, #60	@ 0x3c
 8000da2:	22b4      	movs	r2, #180	@ 0xb4
 8000da4:	4903      	ldr	r1, [pc, #12]	@ (8000db4 <display_bush+0x60>)
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f004 ff0c 	bl	8005bc4 <bsp_lcd_fill_image>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	0800b3bc 	.word	0x0800b3bc

08000db8 <flappy_game_set_back_ground>:
/**
  * @brief  Set the background and display bush images for the Flappy Bird game.
  * @param  hlcd: Pointer to LCD handle.
  * @retval None
  */
void flappy_game_set_back_ground(bsp_lcd_t *hlcd) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	bsp_lcd_set_background(hlcd);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff97 	bl	8000cf4 <bsp_lcd_set_background>
  display_bush(hlcd);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffc4 	bl	8000d54 <display_bush>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <fill_countdown_trace>:
/**
  * @brief  Fill the countdown trace area with the background color.
  * @param  hlcd: Pointer to LCD handle.
  * @retval None
  */
void fill_countdown_trace(bsp_lcd_t *hlcd) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af02      	add	r7, sp, #8
 8000dda:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_rect(hlcd, BACKGROUND,0,240,107,26);
 8000ddc:	231a      	movs	r3, #26
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	236b      	movs	r3, #107	@ 0x6b
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	23f0      	movs	r3, #240	@ 0xf0
 8000de6:	2200      	movs	r2, #0
 8000de8:	4908      	ldr	r1, [pc, #32]	@ (8000e0c <fill_countdown_trace+0x38>)
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f004 fe73 	bl	8005ad6 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, BACKGROUND,116,16,140,26);
 8000df0:	231a      	movs	r3, #26
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	238c      	movs	r3, #140	@ 0x8c
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2310      	movs	r3, #16
 8000dfa:	2274      	movs	r2, #116	@ 0x74
 8000dfc:	4903      	ldr	r1, [pc, #12]	@ (8000e0c <fill_countdown_trace+0x38>)
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f004 fe69 	bl	8005ad6 <bsp_lcd_fill_rect>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	009ae8f6 	.word	0x009ae8f6

08000e10 <set_gameover_background>:
/**
  * @brief  Fill the game over trace area with the background color.
  * @param  hlcd: Pointer to LCD handle.
  * @retval None
  */
void set_gameover_background(bsp_lcd_t *hlcd) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_rect(hlcd, BACKGROUND , 0, 240, 30, 180);
 8000e18:	23b4      	movs	r3, #180	@ 0xb4
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	231e      	movs	r3, #30
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	23f0      	movs	r3, #240	@ 0xf0
 8000e22:	2200      	movs	r2, #0
 8000e24:	4903      	ldr	r1, [pc, #12]	@ (8000e34 <set_gameover_background+0x24>)
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f004 fe55 	bl	8005ad6 <bsp_lcd_fill_rect>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	009ae8f6 	.word	0x009ae8f6

08000e38 <display_game_title>:
/**
  * @brief  Display the game title on the LCD.
  * @param  hlcd: Pointer to LCD handle.
  * @retval None
  */
void display_game_title(bsp_lcd_t *hlcd) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_image(hlcd, (uint16_t *)Flappy_font1, 20, 200, 30, 40);
 8000e40:	2328      	movs	r3, #40	@ 0x28
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	231e      	movs	r3, #30
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	23c8      	movs	r3, #200	@ 0xc8
 8000e4a:	2214      	movs	r2, #20
 8000e4c:	4908      	ldr	r1, [pc, #32]	@ (8000e70 <display_game_title+0x38>)
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f004 feb8 	bl	8005bc4 <bsp_lcd_fill_image>
	bsp_lcd_fill_image(hlcd, (uint16_t *)Flappy_font2, 20, 200, 70, 39);
 8000e54:	2327      	movs	r3, #39	@ 0x27
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	2346      	movs	r3, #70	@ 0x46
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	23c8      	movs	r3, #200	@ 0xc8
 8000e5e:	2214      	movs	r2, #20
 8000e60:	4904      	ldr	r1, [pc, #16]	@ (8000e74 <display_game_title+0x3c>)
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f004 feae 	bl	8005bc4 <bsp_lcd_fill_image>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	0800c1cc 	.word	0x0800c1cc
 8000e74:	0801004c 	.word	0x0801004c

08000e78 <Player_ctor>:
/* USER CODE BEGIN 0 */
GamteState game_state ;
Player player;
Obstacle obstacle;

static void Player_ctor(Player* player, int player_x, int player_w, int player_y, int player_h) {
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	603b      	str	r3, [r7, #0]
	player->x = player_x;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	68ba      	ldr	r2, [r7, #8]
 8000e8a:	601a      	str	r2, [r3, #0]
	player->w = player_w;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	605a      	str	r2, [r3, #4]
	player->y = player_y;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	609a      	str	r2, [r3, #8]
	player->h = player_h;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	60da      	str	r2, [r3, #12]
	player->score = 0;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <Obstacle_ctor>:

static void Obstacle_ctor(Obstacle* obstacle, int obstacle_x, int obstacle_w, int obstacle_y, int obstacle_g,
                            int obstacle_s) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	603b      	str	r3, [r7, #0]
	obstacle->x = obstacle_x;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	68ba      	ldr	r2, [r7, #8]
 8000ec2:	601a      	str	r2, [r3, #0]
	obstacle->w = obstacle_w;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	605a      	str	r2, [r3, #4]
	obstacle->y = obstacle_y;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	609a      	str	r2, [r3, #8]
	obstacle->h = 0;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
	obstacle->g = obstacle_g;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	611a      	str	r2, [r3, #16]
	obstacle->speed  = obstacle_s;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	69fa      	ldr	r2, [r7, #28]
 8000ee0:	615a      	str	r2, [r3, #20]
	obstacle->passed = false;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	static uint32_t current_time;
	current_time = HAL_GetTick();
 8000efa:	f001 faf1 	bl	80024e0 <HAL_GetTick>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a3f      	ldr	r2, [pc, #252]	@ (8001000 <main+0x10c>)
 8000f02:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f001 fa92 	bl	800242c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f886 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f000 f964 	bl	80011d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f10:	f000 f924 	bl	800115c <MX_SPI1_Init>
  MX_I2C1_Init();
 8000f14:	f000 f8dc 	bl	80010d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Player_ctor(&player, 70, 30, 100, 30);
 8000f18:	231e      	movs	r3, #30
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2364      	movs	r3, #100	@ 0x64
 8000f1e:	221e      	movs	r2, #30
 8000f20:	2146      	movs	r1, #70	@ 0x46
 8000f22:	4838      	ldr	r0, [pc, #224]	@ (8001004 <main+0x110>)
 8000f24:	f7ff ffa8 	bl	8000e78 <Player_ctor>
  Obstacle_ctor(&obstacle, 240, 30, 30, 80, 5);
 8000f28:	2305      	movs	r3, #5
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	2350      	movs	r3, #80	@ 0x50
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	231e      	movs	r3, #30
 8000f32:	221e      	movs	r2, #30
 8000f34:	21f0      	movs	r1, #240	@ 0xf0
 8000f36:	4834      	ldr	r0, [pc, #208]	@ (8001008 <main+0x114>)
 8000f38:	f7ff ffba 	bl	8000eb0 <Obstacle_ctor>
  mpu6050_Init();
 8000f3c:	f000 fb18 	bl	8001570 <mpu6050_Init>
  nano_lcd_Init();
 8000f40:	f000 f9a2 	bl	8001288 <nano_lcd_Init>

  double prev_degreey = degreey; // Initialize previous angle variable
 8000f44:	4b31      	ldr	r3, [pc, #196]	@ (800100c <main+0x118>)
 8000f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	mpu6050_read();
 8000f4e:	f000 fb93 	bl	8001678 <mpu6050_read>

		if(HAL_GetTick() - current_time >= 5) {
 8000f52:	f001 fac5 	bl	80024e0 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	4b29      	ldr	r3, [pc, #164]	@ (8001000 <main+0x10c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	d9f5      	bls.n	8000f4e <main+0x5a>

			current_time = HAL_GetTick();
 8000f62:	f001 fabd 	bl	80024e0 <HAL_GetTick>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a25      	ldr	r2, [pc, #148]	@ (8001000 <main+0x10c>)
 8000f6a:	6013      	str	r3, [r2, #0]

			angle_delta = degreey - prev_degreey;
 8000f6c:	4b27      	ldr	r3, [pc, #156]	@ (800100c <main+0x118>)
 8000f6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f76:	f7ff f987 	bl	8000288 <__aeabi_dsub>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4924      	ldr	r1, [pc, #144]	@ (8001010 <main+0x11c>)
 8000f80:	e9c1 2300 	strd	r2, r3, [r1]
			prev_degreey = degreey;
 8000f84:	4b21      	ldr	r3, [pc, #132]	@ (800100c <main+0x118>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	e9c7 2302 	strd	r2, r3, [r7, #8]
			double smoothing_factor = 6;
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	4b20      	ldr	r3, [pc, #128]	@ (8001014 <main+0x120>)
 8000f94:	e9c7 2300 	strd	r2, r3, [r7]

			player.y -= smoothing_factor * angle_delta;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <main+0x110>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fac1 	bl	8000524 <__aeabi_i2d>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	460d      	mov	r5, r1
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <main+0x11c>)
 8000fa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fb0:	f7ff fb22 	bl	80005f8 <__aeabi_dmul>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4620      	mov	r0, r4
 8000fba:	4629      	mov	r1, r5
 8000fbc:	f7ff f964 	bl	8000288 <__aeabi_dsub>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f7ff fdc6 	bl	8000b58 <__aeabi_d2iz>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4a0d      	ldr	r2, [pc, #52]	@ (8001004 <main+0x110>)
 8000fd0:	6093      	str	r3, [r2, #8]
			player.y += GRAVITY_PULL;
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <main+0x110>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <main+0x110>)
 8000fda:	6093      	str	r3, [r2, #8]

			if (player.y <= PLAYER_ySTART_POINT) {
 8000fdc:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <main+0x110>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	2b1e      	cmp	r3, #30
 8000fe2:	dc03      	bgt.n	8000fec <main+0xf8>
				player.y = PLAYER_ySTART_POINT;
 8000fe4:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <main+0x110>)
 8000fe6:	221e      	movs	r2, #30
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	e006      	b.n	8000ffa <main+0x106>
			} else if (player.y >= PLAYER_yEND_POINT) {
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <main+0x110>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	2bb3      	cmp	r3, #179	@ 0xb3
 8000ff2:	dd02      	ble.n	8000ffa <main+0x106>
				player.y = PLAYER_yEND_POINT;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	@ (8001004 <main+0x110>)
 8000ff6:	22b4      	movs	r2, #180	@ 0xb4
 8000ff8:	609a      	str	r2, [r3, #8]
			}
			tick();
 8000ffa:	f000 f97f 	bl	80012fc <tick>
  	mpu6050_read();
 8000ffe:	e7a6      	b.n	8000f4e <main+0x5a>
 8001000:	20007b54 	.word	0x20007b54
 8001004:	20007b24 	.word	0x20007b24
 8001008:	20007b38 	.word	0x20007b38
 800100c:	20007b10 	.word	0x20007b10
 8001010:	20007b58 	.word	0x20007b58
 8001014:	40180000 	.word	0x40180000

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b09e      	sub	sp, #120	@ 0x78
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001022:	2228      	movs	r2, #40	@ 0x28
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f006 fa62 	bl	80074f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800103c:	463b      	mov	r3, r7
 800103e:	223c      	movs	r2, #60	@ 0x3c
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f006 fa54 	bl	80074f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001048:	2303      	movs	r3, #3
 800104a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800104c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001050:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001056:	2301      	movs	r3, #1
 8001058:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105a:	2310      	movs	r3, #16
 800105c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105e:	2302      	movs	r3, #2
 8001060:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001062:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001066:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001068:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800106c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001072:	4618      	mov	r0, r3
 8001074:	f002 fb02 	bl	800367c <HAL_RCC_OscConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800107e:	f000 fa71 	bl	8001564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001082:	230f      	movs	r3, #15
 8001084:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001086:	2302      	movs	r3, #2
 8001088:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800108e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001092:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001098:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800109c:	2102      	movs	r1, #2
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 fb2a 	bl	80046f8 <HAL_RCC_ClockConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010aa:	f000 fa5b 	bl	8001564 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010ae:	2320      	movs	r3, #32
 80010b0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 fd03 	bl	8004ac4 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80010c4:	f000 fa4e 	bl	8001564 <Error_Handler>
  }
}
 80010c8:	bf00      	nop
 80010ca:	3778      	adds	r7, #120	@ 0x78
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <MX_I2C1_Init+0x80>)
 80010d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001154 <MX_I2C1_Init+0x84>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000001;
 80010da:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <MX_I2C1_Init+0x80>)
 80010dc:	2201      	movs	r2, #1
 80010de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <MX_I2C1_Init+0x80>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <MX_I2C1_Init+0x80>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ec:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <MX_I2C1_Init+0x80>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010f2:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <MX_I2C1_Init+0x80>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f8:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <MX_I2C1_Init+0x80>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <MX_I2C1_Init+0x80>)
 8001100:	2200      	movs	r2, #0
 8001102:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <MX_I2C1_Init+0x80>)
 8001106:	2200      	movs	r2, #0
 8001108:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110a:	4811      	ldr	r0, [pc, #68]	@ (8001150 <MX_I2C1_Init+0x80>)
 800110c:	f001 fca8 	bl	8002a60 <HAL_I2C_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001116:	f000 fa25 	bl	8001564 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800111a:	2100      	movs	r1, #0
 800111c:	480c      	ldr	r0, [pc, #48]	@ (8001150 <MX_I2C1_Init+0x80>)
 800111e:	f002 fa15 	bl	800354c <HAL_I2CEx_ConfigAnalogFilter>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001128:	f000 fa1c 	bl	8001564 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800112c:	2100      	movs	r1, #0
 800112e:	4808      	ldr	r0, [pc, #32]	@ (8001150 <MX_I2C1_Init+0x80>)
 8001130:	f002 fa57 	bl	80035e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800113a:	f000 fa13 	bl	8001564 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <MX_I2C1_Init+0x88>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <MX_I2C1_Init+0x88>)
 8001144:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001148:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20007a50 	.word	0x20007a50
 8001154:	40005400 	.word	0x40005400
 8001158:	40010000 	.word	0x40010000

0800115c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001160:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <MX_SPI1_Init+0x74>)
 8001162:	4a1c      	ldr	r2, [pc, #112]	@ (80011d4 <MX_SPI1_Init+0x78>)
 8001164:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001166:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <MX_SPI1_Init+0x74>)
 8001168:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800116c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800116e:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <MX_SPI1_Init+0x74>)
 8001170:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001174:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001176:	4b16      	ldr	r3, [pc, #88]	@ (80011d0 <MX_SPI1_Init+0x74>)
 8001178:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800117c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800117e:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <MX_SPI1_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <MX_SPI1_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800118a:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <MX_SPI1_Init+0x74>)
 800118c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001190:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001192:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <MX_SPI1_Init+0x74>)
 8001194:	2208      	movs	r2, #8
 8001196:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001198:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <MX_SPI1_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800119e:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <MX_SPI1_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <MX_SPI1_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011aa:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <MX_SPI1_Init+0x74>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011b0:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <MX_SPI1_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <MX_SPI1_Init+0x74>)
 80011b8:	2208      	movs	r2, #8
 80011ba:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <MX_SPI1_Init+0x74>)
 80011be:	f003 fe31 	bl	8004e24 <HAL_SPI_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80011c8:	f000 f9cc 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20007aa4 	.word	0x20007aa4
 80011d4:	40013000 	.word	0x40013000

080011d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ee:	4b25      	ldr	r3, [pc, #148]	@ (8001284 <MX_GPIO_Init+0xac>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a24      	ldr	r2, [pc, #144]	@ (8001284 <MX_GPIO_Init+0xac>)
 80011f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011f8:	6153      	str	r3, [r2, #20]
 80011fa:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <MX_GPIO_Init+0xac>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <MX_GPIO_Init+0xac>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	4a1e      	ldr	r2, [pc, #120]	@ (8001284 <MX_GPIO_Init+0xac>)
 800120c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001210:	6153      	str	r3, [r2, #20]
 8001212:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <MX_GPIO_Init+0xac>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <MX_GPIO_Init+0xac>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a18      	ldr	r2, [pc, #96]	@ (8001284 <MX_GPIO_Init+0xac>)
 8001224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <MX_GPIO_Init+0xac>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_CS_Pin|LCD_RS_A0_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2158      	movs	r1, #88	@ 0x58
 800123a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123e:	f001 fbf7 	bl	8002a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001242:	2301      	movs	r3, #1
 8001244:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001258:	f001 fa58 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_CS_Pin LCD_RS_A0_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin|LCD_RS_A0_Pin;
 800125c:	2358      	movs	r3, #88	@ 0x58
 800125e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001276:	f001 fa49 	bl	800270c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800127a:	bf00      	nop
 800127c:	3720      	adds	r7, #32
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000

08001288 <nano_lcd_Init>:
/**
  * @brief Initializes the Nano LCD display.
  * @param None
  * @retval None
  */
void nano_lcd_Init(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
	gc9a01a_hw_reset();
 800128e:	f004 fc03 	bl	8005a98 <gc9a01a_hw_reset>
	gc9a01a_config2();
 8001292:	f004 fa38 	bl	8005706 <gc9a01a_config2>
	lcd_area_t area;
	area.x1 = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	803b      	strh	r3, [r7, #0]
	area.x2 = 240;
 800129a:	23f0      	movs	r3, #240	@ 0xf0
 800129c:	807b      	strh	r3, [r7, #2]
	area.y1 = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	80bb      	strh	r3, [r7, #4]
	area.y2 = 240;
 80012a2:	23f0      	movs	r3, #240	@ 0xf0
 80012a4:	80fb      	strh	r3, [r7, #6]
	gc9a01a_set_display_area(&area);
 80012a6:	463b      	mov	r3, r7
 80012a8:	4618      	mov	r0, r3
 80012aa:	f004 f9ea 	bl	8005682 <gc9a01a_set_display_area>
	gc9a01a_set_orientation(LANDSCAPE);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f004 f986 	bl	80055c0 <gc9a01a_set_orientation>

	hlcd->draw_buffer1 = bsp_db;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <nano_lcd_Init+0x68>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0e      	ldr	r2, [pc, #56]	@ (80012f4 <nano_lcd_Init+0x6c>)
 80012ba:	605a      	str	r2, [r3, #4]
	hlcd->draw_buffer2 = bsp_wb;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <nano_lcd_Init+0x68>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <nano_lcd_Init+0x70>)
 80012c2:	609a      	str	r2, [r3, #8]
	hlcd->buff_to_draw = NULL;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <nano_lcd_Init+0x68>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
	hlcd->buff_to_flush = NULL;
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <nano_lcd_Init+0x68>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
	hlcd->db_size = DB_SIZE;
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <nano_lcd_Init+0x68>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f44f 5270 	mov.w	r2, #15360	@ 0x3c00
 80012dc:	621a      	str	r2, [r3, #32]

	flappy_game_set_back_ground(hlcd);
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <nano_lcd_Init+0x68>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fd68 	bl	8000db8 <flappy_game_set_back_ground>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000224 	.word	0x20000224
 80012f8:	20003e24 	.word	0x20003e24

080012fc <tick>:
/**
  * @brief Updates the game state based on events and conditions.
  * @param None
  * @retval None
  */
void tick() {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af02      	add	r7, sp, #8
	switch (game_state) {
 8001302:	4b60      	ldr	r3, [pc, #384]	@ (8001484 <tick+0x188>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b03      	cmp	r3, #3
 8001308:	f200 80b7 	bhi.w	800147a <tick+0x17e>
 800130c:	a201      	add	r2, pc, #4	@ (adr r2, 8001314 <tick+0x18>)
 800130e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001312:	bf00      	nop
 8001314:	08001325 	.word	0x08001325
 8001318:	0800135d 	.word	0x0800135d
 800131c:	08001387 	.word	0x08001387
 8001320:	08001417 	.word	0x08001417
		case GAME_INIT: {
			GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001324:	2101      	movs	r1, #1
 8001326:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132a:	f001 fb69 	bl	8002a00 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	71bb      	strb	r3, [r7, #6]
			game_init_mssg(hlcd);
 8001332:	4b55      	ldr	r3, [pc, #340]	@ (8001488 <tick+0x18c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fef8 	bl	800212c <game_init_mssg>

			if (pinState == GPIO_PIN_SET) {
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	2b01      	cmp	r3, #1
 8001340:	f040 8096 	bne.w	8001470 <tick+0x174>
				HAL_Delay(25);
 8001344:	2019      	movs	r0, #25
 8001346:	f001 f8d7 	bl	80024f8 <HAL_Delay>
				flappy_game_set_back_ground(hlcd);
 800134a:	4b4f      	ldr	r3, [pc, #316]	@ (8001488 <tick+0x18c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fd32 	bl	8000db8 <flappy_game_set_back_ground>
				game_state = GAME_PRESTART;
 8001354:	4b4b      	ldr	r3, [pc, #300]	@ (8001484 <tick+0x188>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800135a:	e089      	b.n	8001470 <tick+0x174>

		case GAME_PRESTART: {
			move_player(hlcd, player.y);
 800135c:	4b4a      	ldr	r3, [pc, #296]	@ (8001488 <tick+0x18c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a4a      	ldr	r2, [pc, #296]	@ (800148c <tick+0x190>)
 8001362:	6892      	ldr	r2, [r2, #8]
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fcb6 	bl	8001cd8 <move_player>
			render_gamestart_countdown(hlcd);
 800136c:	4b46      	ldr	r3, [pc, #280]	@ (8001488 <tick+0x18c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f000 ff41 	bl	80021f8 <render_gamestart_countdown>
			if(countdown_complete == true) {
 8001376:	4b46      	ldr	r3, [pc, #280]	@ (8001490 <tick+0x194>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d17a      	bne.n	8001474 <tick+0x178>
				game_state = GAME_START;
 800137e:	4b41      	ldr	r3, [pc, #260]	@ (8001484 <tick+0x188>)
 8001380:	2202      	movs	r2, #2
 8001382:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8001384:	e076      	b.n	8001474 <tick+0x178>

		case GAME_START: {
			is_Collide(&obstacle, &player);
 8001386:	4941      	ldr	r1, [pc, #260]	@ (800148c <tick+0x190>)
 8001388:	4842      	ldr	r0, [pc, #264]	@ (8001494 <tick+0x198>)
 800138a:	f000 f889 	bl	80014a0 <is_Collide>
			if(collision_detected == true) {
 800138e:	4b42      	ldr	r3, [pc, #264]	@ (8001498 <tick+0x19c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d108      	bne.n	80013a8 <tick+0xac>
				set_gameover_background(hlcd);
 8001396:	4b3c      	ldr	r3, [pc, #240]	@ (8001488 <tick+0x18c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fd38 	bl	8000e10 <set_gameover_background>
				game_state = GAME_OVER;
 80013a0:	4b38      	ldr	r3, [pc, #224]	@ (8001484 <tick+0x188>)
 80013a2:	2203      	movs	r2, #3
 80013a4:	701a      	strb	r2, [r3, #0]
					obstacle.x = 240;
				}
				player_show_score(&player);
			}
		}
		break;
 80013a6:	e068      	b.n	800147a <tick+0x17e>
				obstacle.speed = get_obstacle_speed(player.score);
 80013a8:	4b38      	ldr	r3, [pc, #224]	@ (800148c <tick+0x190>)
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fc73 	bl	8001c98 <get_obstacle_speed>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b37      	ldr	r3, [pc, #220]	@ (8001494 <tick+0x198>)
 80013b8:	615a      	str	r2, [r3, #20]
				obstacle.x -= obstacle.speed;
 80013ba:	4b36      	ldr	r3, [pc, #216]	@ (8001494 <tick+0x198>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b35      	ldr	r3, [pc, #212]	@ (8001494 <tick+0x198>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	4a33      	ldr	r2, [pc, #204]	@ (8001494 <tick+0x198>)
 80013c6:	6013      	str	r3, [r2, #0]
				move_player(hlcd, player.y);
 80013c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001488 <tick+0x18c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a2f      	ldr	r2, [pc, #188]	@ (800148c <tick+0x190>)
 80013ce:	6892      	ldr	r2, [r2, #8]
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fc80 	bl	8001cd8 <move_player>
				if(obstacle.x >= 0) {
 80013d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001494 <tick+0x198>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db08      	blt.n	80013f2 <tick+0xf6>
					move_obstacle(hlcd,obstacle.x);
 80013e0:	4b29      	ldr	r3, [pc, #164]	@ (8001488 <tick+0x18c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001494 <tick+0x198>)
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 fc0e 	bl	8001c0c <move_obstacle>
 80013f0:	e00d      	b.n	800140e <tick+0x112>
					bsp_lcd_fill_rect(hlcd, BACKGROUND , 0, 40, 0, 240);
 80013f2:	4b25      	ldr	r3, [pc, #148]	@ (8001488 <tick+0x18c>)
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	23f0      	movs	r3, #240	@ 0xf0
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	2300      	movs	r3, #0
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2328      	movs	r3, #40	@ 0x28
 8001400:	2200      	movs	r2, #0
 8001402:	4926      	ldr	r1, [pc, #152]	@ (800149c <tick+0x1a0>)
 8001404:	f004 fb67 	bl	8005ad6 <bsp_lcd_fill_rect>
					obstacle.x = 240;
 8001408:	4b22      	ldr	r3, [pc, #136]	@ (8001494 <tick+0x198>)
 800140a:	22f0      	movs	r2, #240	@ 0xf0
 800140c:	601a      	str	r2, [r3, #0]
				player_show_score(&player);
 800140e:	481f      	ldr	r0, [pc, #124]	@ (800148c <tick+0x190>)
 8001410:	f000 ff5e 	bl	80022d0 <player_show_score>
		break;
 8001414:	e031      	b.n	800147a <tick+0x17e>

		case GAME_OVER: {
			collision_detected = false;
 8001416:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <tick+0x19c>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
			game_over_mssg(hlcd);
 800141c:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <tick+0x18c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f000 feb7 	bl	8002194 <game_over_mssg>
			GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001426:	2101      	movs	r1, #1
 8001428:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142c:	f001 fae8 	bl	8002a00 <HAL_GPIO_ReadPin>
 8001430:	4603      	mov	r3, r0
 8001432:	71fb      	strb	r3, [r7, #7]
			if (pinState == GPIO_PIN_SET) {
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d11e      	bne.n	8001478 <tick+0x17c>
				Player_ctor(&player, 70, 30, 100, 30);
 800143a:	231e      	movs	r3, #30
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2364      	movs	r3, #100	@ 0x64
 8001440:	221e      	movs	r2, #30
 8001442:	2146      	movs	r1, #70	@ 0x46
 8001444:	4811      	ldr	r0, [pc, #68]	@ (800148c <tick+0x190>)
 8001446:	f7ff fd17 	bl	8000e78 <Player_ctor>
				Obstacle_ctor(&obstacle, 240, 30, 30, 80, 5);
 800144a:	2305      	movs	r3, #5
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	2350      	movs	r3, #80	@ 0x50
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	231e      	movs	r3, #30
 8001454:	221e      	movs	r2, #30
 8001456:	21f0      	movs	r1, #240	@ 0xf0
 8001458:	480e      	ldr	r0, [pc, #56]	@ (8001494 <tick+0x198>)
 800145a:	f7ff fd29 	bl	8000eb0 <Obstacle_ctor>
				flappy_game_set_back_ground(hlcd);
 800145e:	4b0a      	ldr	r3, [pc, #40]	@ (8001488 <tick+0x18c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fca8 	bl	8000db8 <flappy_game_set_back_ground>
				game_state = GAME_PRESTART;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <tick+0x188>)
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800146e:	e003      	b.n	8001478 <tick+0x17c>
		break;
 8001470:	bf00      	nop
 8001472:	e002      	b.n	800147a <tick+0x17e>
		break;
 8001474:	bf00      	nop
 8001476:	e000      	b.n	800147a <tick+0x17e>
		break;
 8001478:	bf00      	nop
	}
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20007b20 	.word	0x20007b20
 8001488:	20000000 	.word	0x20000000
 800148c:	20007b24 	.word	0x20007b24
 8001490:	20007b1c 	.word	0x20007b1c
 8001494:	20007b38 	.word	0x20007b38
 8001498:	20007b18 	.word	0x20007b18
 800149c:	009ae8f6 	.word	0x009ae8f6

080014a0 <is_Collide>:
  * @brief Checks for collision between an obstacle and the player.
  * @param obstacle: Pointer to the Obstacle struct containing obstacle information.
  * @param player: Pointer to the Player struct containing player information.
  * @retval None
  */
void is_Collide(Obstacle *obstacle, Player *player) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
	int player_left = player->x;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
	int player_right = player->x + player->w  -5;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	3b05      	subs	r3, #5
 80014bc:	623b      	str	r3, [r7, #32]
	int player_top = player->y;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61fb      	str	r3, [r7, #28]
	int player_bottom = player->y + player->h-5;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	4413      	add	r3, r2
 80014ce:	3b05      	subs	r3, #5
 80014d0:	61bb      	str	r3, [r7, #24]

	int obstacle_left = obstacle->x;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	617b      	str	r3, [r7, #20]
	int obstacle_right = obstacle->x + obstacle->w;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]

	obstacle->h = generate_obstacle_height(obstacle->x);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f000 fa15 	bl	8001918 <generate_obstacle_height>
 80014ee:	4602      	mov	r2, r0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	60da      	str	r2, [r3, #12]
	int obstacle_bottom = OBSTACLE_ySTART_POINT + obstacle->h -5;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	3319      	adds	r3, #25
 80014fa:	60fb      	str	r3, [r7, #12]

	if (player_right  >= obstacle_left && player_left <= obstacle_right ){
 80014fc:	6a3a      	ldr	r2, [r7, #32]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	429a      	cmp	r2, r3
 8001502:	db23      	blt.n	800154c <is_Collide+0xac>
 8001504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	429a      	cmp	r2, r3
 800150a:	dc1f      	bgt.n	800154c <is_Collide+0xac>
		if( (player_top  < obstacle_bottom) || (player_bottom > (obstacle_bottom + obstacle->g +10))) {
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	db07      	blt.n	8001524 <is_Collide+0x84>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	330a      	adds	r3, #10
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	429a      	cmp	r2, r3
 8001522:	dd03      	ble.n	800152c <is_Collide+0x8c>
			collision_detected = true;
 8001524:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <is_Collide+0xc0>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]
		if( (player_top  < obstacle_bottom) || (player_bottom > (obstacle_bottom + obstacle->g +10))) {
 800152a:	e013      	b.n	8001554 <is_Collide+0xb4>
		} else if (!obstacle->passed) {  // Only update score if the obstacle hasn't been passed
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7e1b      	ldrb	r3, [r3, #24]
 8001530:	f083 0301 	eor.w	r3, r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00c      	beq.n	8001554 <is_Collide+0xb4>
				player->score += 1;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	611a      	str	r2, [r3, #16]
				obstacle->passed = true;  // Mark the obstacle as passed
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	761a      	strb	r2, [r3, #24]
		if( (player_top  < obstacle_bottom) || (player_bottom > (obstacle_bottom + obstacle->g +10))) {
 800154a:	e003      	b.n	8001554 <is_Collide+0xb4>
		}
	} else {
		obstacle->passed = false;   // Reset the flag when the player is not near the obstacle
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	761a      	strb	r2, [r3, #24]
	}
}
 8001552:	e000      	b.n	8001556 <is_Collide+0xb6>
		if( (player_top  < obstacle_bottom) || (player_bottom > (obstacle_bottom + obstacle->g +10))) {
 8001554:	bf00      	nop
}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	@ 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20007b18 	.word	0x20007b18

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <Error_Handler+0x8>

08001570 <mpu6050_Init>:
/**
  * @brief Initializes the MPU6050 sensor by configuring power management, gyroscope, and accelerometer.
  * @param None
  * @retval None
  */
void mpu6050_Init() {
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  PowerManagement_Config();
 8001574:	f000 f806 	bl	8001584 <PowerManagement_Config>
  Gyro_Config();
 8001578:	f000 f82c 	bl	80015d4 <Gyro_Config>
  Accelerometer_Config();
 800157c:	f000 f852 	bl	8001624 <Accelerometer_Config>
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}

08001584 <PowerManagement_Config>:
  * @brief Configures the power management settings of the MPU6050 sensor to exit sleep mode.
  * @param None
  * @retval None
  */
void PowerManagement_Config()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af04      	add	r7, sp, #16
  /* Set the value to be written to the power management register */
  temp_data = 0x00;
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <PowerManagement_Config+0x40>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]

  /* Write the value to the power management register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_USR_CTRL, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
 8001594:	9302      	str	r3, [sp, #8]
 8001596:	2301      	movs	r3, #1
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <PowerManagement_Config+0x40>)
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2301      	movs	r3, #1
 80015a0:	226b      	movs	r2, #107	@ 0x6b
 80015a2:	21d0      	movs	r1, #208	@ 0xd0
 80015a4:	4808      	ldr	r0, [pc, #32]	@ (80015c8 <PowerManagement_Config+0x44>)
 80015a6:	f001 faeb 	bl	8002b80 <HAL_I2C_Mem_Write>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d103      	bne.n	80015b8 <PowerManagement_Config+0x34>
    /*print in SWV terminal*/
    printf("Exiting from sleep mode...\n");
 80015b0:	4806      	ldr	r0, [pc, #24]	@ (80015cc <PowerManagement_Config+0x48>)
 80015b2:	f005 fe9d 	bl	80072f0 <puts>
  } else {
    printf("Failed to exit from sleep mode...\n");
  }
}
 80015b6:	e002      	b.n	80015be <PowerManagement_Config+0x3a>
    printf("Failed to exit from sleep mode...\n");
 80015b8:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <PowerManagement_Config+0x4c>)
 80015ba:	f005 fe99 	bl	80072f0 <puts>
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20007b60 	.word	0x20007b60
 80015c8:	20007a50 	.word	0x20007a50
 80015cc:	0800b218 	.word	0x0800b218
 80015d0:	0800b234 	.word	0x0800b234

080015d4 <Gyro_Config>:
  * @brief Configures the gyroscope settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Gyro_Config()
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af04      	add	r7, sp, #16
  /* Set the value to be written to the gyroscope configuration register */
  temp_data = FS_GYRO_500;
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <Gyro_Config+0x40>)
 80015dc:	2208      	movs	r2, #8
 80015de:	701a      	strb	r2, [r3, #0]

  /* Write the value to the gyroscope configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_GYRO, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	9302      	str	r3, [sp, #8]
 80015e6:	2301      	movs	r3, #1
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <Gyro_Config+0x40>)
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2301      	movs	r3, #1
 80015f0:	221b      	movs	r2, #27
 80015f2:	21d0      	movs	r1, #208	@ 0xd0
 80015f4:	4808      	ldr	r0, [pc, #32]	@ (8001618 <Gyro_Config+0x44>)
 80015f6:	f001 fac3 	bl	8002b80 <HAL_I2C_Mem_Write>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d103      	bne.n	8001608 <Gyro_Config+0x34>
    printf("Configuring gyroscope...\n");
 8001600:	4806      	ldr	r0, [pc, #24]	@ (800161c <Gyro_Config+0x48>)
 8001602:	f005 fe75 	bl	80072f0 <puts>
  } else {
    printf("Failed to configure gyroscope...\n");
  }
}
 8001606:	e002      	b.n	800160e <Gyro_Config+0x3a>
    printf("Failed to configure gyroscope...\n");
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <Gyro_Config+0x4c>)
 800160a:	f005 fe71 	bl	80072f0 <puts>
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20007b60 	.word	0x20007b60
 8001618:	20007a50 	.word	0x20007a50
 800161c:	0800b258 	.word	0x0800b258
 8001620:	0800b274 	.word	0x0800b274

08001624 <Accelerometer_Config>:
  * @brief Configures the accelerometer settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Accelerometer_Config()
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af04      	add	r7, sp, #16
  /* Set the value to be written to the accelerometer configuration register */
  temp_data = FS_ACC_4G;
 800162a:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <Accelerometer_Config+0x40>)
 800162c:	2208      	movs	r2, #8
 800162e:	701a      	strb	r2, [r3, #0]

  /* Write the value to the accelerometer configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_ACC, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	2301      	movs	r3, #1
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <Accelerometer_Config+0x40>)
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2301      	movs	r3, #1
 8001640:	221c      	movs	r2, #28
 8001642:	21d0      	movs	r1, #208	@ 0xd0
 8001644:	4808      	ldr	r0, [pc, #32]	@ (8001668 <Accelerometer_Config+0x44>)
 8001646:	f001 fa9b 	bl	8002b80 <HAL_I2C_Mem_Write>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d103      	bne.n	8001658 <Accelerometer_Config+0x34>
    printf("Configuring accelerometer...\n");
 8001650:	4806      	ldr	r0, [pc, #24]	@ (800166c <Accelerometer_Config+0x48>)
 8001652:	f005 fe4d 	bl	80072f0 <puts>
  } else {
    printf("Failed to configure accelerometer...\n");
  }
}
 8001656:	e002      	b.n	800165e <Accelerometer_Config+0x3a>
    printf("Failed to configure accelerometer...\n");
 8001658:	4805      	ldr	r0, [pc, #20]	@ (8001670 <Accelerometer_Config+0x4c>)
 800165a:	f005 fe49 	bl	80072f0 <puts>
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20007b60 	.word	0x20007b60
 8001668:	20007a50 	.word	0x20007a50
 800166c:	0800b298 	.word	0x0800b298
 8001670:	0800b2b8 	.word	0x0800b2b8
 8001674:	00000000 	.word	0x00000000

08001678 <mpu6050_read>:
  * @brief Reads data from the MPU6050 sensor, including accelerometer and gyroscope values,
  *        and calculates roll and pitch angles using the accelerometer data.
  * @param None
  * @retval None
  */
void mpu6050_read() {
 8001678:	b5b0      	push	{r4, r5, r7, lr}
 800167a:	b0a2      	sub	sp, #136	@ 0x88
 800167c:	af0a      	add	r7, sp, #40	@ 0x28
  int16_t x_acc, y_acc, z_acc;              // Accelerometer data for x, y, and z axes
  int16_t x_gyro, y_gyro, z_gyro;           // Gyroscope data for x, y, and z axes
  double accx,accy,accz,gyrox,gyroy,gyroz;
  double radianx, radiany;
  // Read all sensor data from the MPU6050
  HAL_I2C_Mem_Read(&hi2c1, (MPU6050_ADDR << 1), REG_DATA, 1, data, 14, HAL_MAX_DELAY);
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	230e      	movs	r3, #14
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	463b      	mov	r3, r7
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	223b      	movs	r2, #59	@ 0x3b
 8001690:	21d0      	movs	r1, #208	@ 0xd0
 8001692:	489b      	ldr	r0, [pc, #620]	@ (8001900 <mpu6050_read+0x288>)
 8001694:	f001 fb88 	bl	8002da8 <HAL_I2C_Mem_Read>
  /* Extract accelerometer data (16-bit 2's complement format, high byte first) */
  x_acc = (int16_t)((data[0] << 8) | data[1]);
 8001698:	783b      	ldrb	r3, [r7, #0]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	b21a      	sxth	r2, r3
 800169e:	787b      	ldrb	r3, [r7, #1]
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	4313      	orrs	r3, r2
 80016a4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  y_acc = (int16_t)((data[2] << 8) | data[3]);
 80016a8:	78bb      	ldrb	r3, [r7, #2]
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	b21a      	sxth	r2, r3
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	4313      	orrs	r3, r2
 80016b4:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  z_acc = (int16_t)((data[4] << 8) | data[5]);
 80016b8:	793b      	ldrb	r3, [r7, #4]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	b21a      	sxth	r2, r3
 80016be:	797b      	ldrb	r3, [r7, #5]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

  /* Extract gyroscope data (16-bit 2's complement format, high byte first) */
  x_gyro = (int16_t)((data[8] << 8) | data[9]);
 80016c8:	7a3b      	ldrb	r3, [r7, #8]
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	7a7b      	ldrb	r3, [r7, #9]
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	4313      	orrs	r3, r2
 80016d4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  y_gyro = (int16_t)((data[10] << 8) | data[11]);
 80016d8:	7abb      	ldrb	r3, [r7, #10]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21a      	sxth	r2, r3
 80016de:	7afb      	ldrb	r3, [r7, #11]
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  z_gyro = (int16_t)((data[12] << 8) | data[13]);
 80016e8:	7b3b      	ldrb	r3, [r7, #12]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	7b7b      	ldrb	r3, [r7, #13]
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

  /*Convert accelerometer raw values in to 'g'(acceleration due to gravity) values */
  accx = (double)x_acc / ACC_FS_SENSITIVITY_3;
 80016f8:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff11 	bl	8000524 <__aeabi_i2d>
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	4b7f      	ldr	r3, [pc, #508]	@ (8001904 <mpu6050_read+0x28c>)
 8001708:	f7ff f8a0 	bl	800084c <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  accy = (double)y_acc / ACC_FS_SENSITIVITY_3;
 8001714:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe ff03 	bl	8000524 <__aeabi_i2d>
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b78      	ldr	r3, [pc, #480]	@ (8001904 <mpu6050_read+0x28c>)
 8001724:	f7ff f892 	bl	800084c <__aeabi_ddiv>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  accz = (double)z_acc / ACC_FS_SENSITIVITY_3;
 8001730:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe fef5 	bl	8000524 <__aeabi_i2d>
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	4b71      	ldr	r3, [pc, #452]	@ (8001904 <mpu6050_read+0x28c>)
 8001740:	f7ff f884 	bl	800084c <__aeabi_ddiv>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  /* Convert gyroscope raw values to degrees per second ('°/s') */
  gyrox = (double)x_gyro / GYR_FS_SENSITIVITY_3;
 800174c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fee7 	bl	8000524 <__aeabi_i2d>
 8001756:	a366      	add	r3, pc, #408	@ (adr r3, 80018f0 <mpu6050_read+0x278>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7ff f876 	bl	800084c <__aeabi_ddiv>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  gyroy = (double)y_gyro / GYR_FS_SENSITIVITY_3;
 8001768:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fed9 	bl	8000524 <__aeabi_i2d>
 8001772:	a35f      	add	r3, pc, #380	@ (adr r3, 80018f0 <mpu6050_read+0x278>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	f7ff f868 	bl	800084c <__aeabi_ddiv>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  gyroz = (double)z_gyro / GYR_FS_SENSITIVITY_3;
 8001784:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fecb 	bl	8000524 <__aeabi_i2d>
 800178e:	a358      	add	r3, pc, #352	@ (adr r3, 80018f0 <mpu6050_read+0x278>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	f7ff f85a 	bl	800084c <__aeabi_ddiv>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	e9c7 2308 	strd	r2, r3, [r7, #32]

  /* Calculate roll and pitch angles using accelerometer data */
  radianx = asin(accx / sqrt(accx * accx + accz * accz)); // Fix the arguments passed to asin
 80017a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017a4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80017a8:	f7fe ff26 	bl	80005f8 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4614      	mov	r4, r2
 80017b2:	461d      	mov	r5, r3
 80017b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017b8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80017bc:	f7fe ff1c 	bl	80005f8 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4620      	mov	r0, r4
 80017c6:	4629      	mov	r1, r5
 80017c8:	f7fe fd60 	bl	800028c <__adddf3>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	ec43 2b17 	vmov	d7, r2, r3
 80017d4:	eeb0 0a47 	vmov.f32	s0, s14
 80017d8:	eef0 0a67 	vmov.f32	s1, s15
 80017dc:	f009 f9fc 	bl	800abd8 <sqrt>
 80017e0:	ec53 2b10 	vmov	r2, r3, d0
 80017e4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80017e8:	f7ff f830 	bl	800084c <__aeabi_ddiv>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	ec43 2b17 	vmov	d7, r2, r3
 80017f4:	eeb0 0a47 	vmov.f32	s0, s14
 80017f8:	eef0 0a67 	vmov.f32	s1, s15
 80017fc:	f009 f9b8 	bl	800ab70 <asin>
 8001800:	ed87 0b06 	vstr	d0, [r7, #24]
  radiany = asin(accy / sqrt(accy * accy + accz * accz)); // Fix the arguments passed to asin
 8001804:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001808:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800180c:	f7fe fef4 	bl	80005f8 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4614      	mov	r4, r2
 8001816:	461d      	mov	r5, r3
 8001818:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800181c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001820:	f7fe feea 	bl	80005f8 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4620      	mov	r0, r4
 800182a:	4629      	mov	r1, r5
 800182c:	f7fe fd2e 	bl	800028c <__adddf3>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	ec43 2b17 	vmov	d7, r2, r3
 8001838:	eeb0 0a47 	vmov.f32	s0, s14
 800183c:	eef0 0a67 	vmov.f32	s1, s15
 8001840:	f009 f9ca 	bl	800abd8 <sqrt>
 8001844:	ec53 2b10 	vmov	r2, r3, d0
 8001848:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800184c:	f7fe fffe 	bl	800084c <__aeabi_ddiv>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	ec43 2b17 	vmov	d7, r2, r3
 8001858:	eeb0 0a47 	vmov.f32	s0, s14
 800185c:	eef0 0a67 	vmov.f32	s1, s15
 8001860:	f009 f986 	bl	800ab70 <asin>
 8001864:	ed87 0b04 	vstr	d0, [r7, #16]

  /* Convert roll and pitch angles from radians to degrees */
  degreex = radianx * (180.0 / M_PI); // Roll
 8001868:	a323      	add	r3, pc, #140	@ (adr r3, 80018f8 <mpu6050_read+0x280>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001872:	f7fe fec1 	bl	80005f8 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4923      	ldr	r1, [pc, #140]	@ (8001908 <mpu6050_read+0x290>)
 800187c:	e9c1 2300 	strd	r2, r3, [r1]
  degreey = radiany * (180.0 / M_PI); // Pitch
 8001880:	a31d      	add	r3, pc, #116	@ (adr r3, 80018f8 <mpu6050_read+0x280>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800188a:	f7fe feb5 	bl	80005f8 <__aeabi_dmul>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	491e      	ldr	r1, [pc, #120]	@ (800190c <mpu6050_read+0x294>)
 8001894:	e9c1 2300 	strd	r2, r3, [r1]

  /* Print out the accelerometer and gyroscope values along with roll and pitch angles in SWV terminal */
  printf("Acc(g)=> X:%.2f Y:%.2f Z:%.2f   Gyro(dps)=> X:%.2f Y:%.2f Z:%.2f\n", accx, accy, accz, gyrox, gyroy, gyroz);
 8001898:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800189c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80018a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80018a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80018ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80018b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80018bc:	e9cd 2300 	strd	r2, r3, [sp]
 80018c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80018c4:	4812      	ldr	r0, [pc, #72]	@ (8001910 <mpu6050_read+0x298>)
 80018c6:	f005 fcab 	bl	8007220 <iprintf>
  printf("Roll: %.2f degrees, Pitch: %.2f degrees\n", degreex, degreey);
 80018ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <mpu6050_read+0x290>)
 80018cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d0:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <mpu6050_read+0x294>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	e9cd 2300 	strd	r2, r3, [sp]
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	480d      	ldr	r0, [pc, #52]	@ (8001914 <mpu6050_read+0x29c>)
 80018e0:	f005 fc9e 	bl	8007220 <iprintf>
}
 80018e4:	bf00      	nop
 80018e6:	3760      	adds	r7, #96	@ 0x60
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bdb0      	pop	{r4, r5, r7, pc}
 80018ec:	f3af 8000 	nop.w
 80018f0:	66666666 	.word	0x66666666
 80018f4:	40306666 	.word	0x40306666
 80018f8:	1a63c1f8 	.word	0x1a63c1f8
 80018fc:	404ca5dc 	.word	0x404ca5dc
 8001900:	20007a50 	.word	0x20007a50
 8001904:	40a00000 	.word	0x40a00000
 8001908:	20007b08 	.word	0x20007b08
 800190c:	20007b10 	.word	0x20007b10
 8001910:	0800b2e0 	.word	0x0800b2e0
 8001914:	0800b324 	.word	0x0800b324

08001918 <generate_obstacle_height>:
/**
  * @brief  Generate the height of the obstacle.
  * @param  x_start: Starting position of the obstacle.
  * @retval The height of the obstacle.
  */
int generate_obstacle_height(int x_start) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	static int top_obstacle_height = -1; // Initialize with -1 to indicate it's not set yet
	// Generate random top_obstacle_height if it's not set yet or x_start is 210
	if (top_obstacle_height == -1 || x_start == 240) {
 8001920:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <generate_obstacle_height+0x4c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d002      	beq.n	8001930 <generate_obstacle_height+0x18>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2bf0      	cmp	r3, #240	@ 0xf0
 800192e:	d113      	bne.n	8001958 <generate_obstacle_height+0x40>
		top_obstacle_height = rand() % (90 - 20 + 1) + 20;
 8001930:	f004 fd0a 	bl	8006348 <rand>
 8001934:	4601      	mov	r1, r0
 8001936:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <generate_obstacle_height+0x50>)
 8001938:	fb83 2301 	smull	r2, r3, r3, r1
 800193c:	440b      	add	r3, r1
 800193e:	119a      	asrs	r2, r3, #6
 8001940:	17cb      	asrs	r3, r1, #31
 8001942:	1ad2      	subs	r2, r2, r3
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	1aca      	subs	r2, r1, r3
 8001950:	f102 0314 	add.w	r3, r2, #20
 8001954:	4a03      	ldr	r2, [pc, #12]	@ (8001964 <generate_obstacle_height+0x4c>)
 8001956:	6013      	str	r3, [r2, #0]
	}
	return top_obstacle_height;
 8001958:	4b02      	ldr	r3, [pc, #8]	@ (8001964 <generate_obstacle_height+0x4c>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000004 	.word	0x20000004
 8001968:	e6c2b449 	.word	0xe6c2b449

0800196c <display_obstacle>:
  * @brief  Display the obstacle on the LCD.
  * @param  hlcd: Pointer to LCD handle.
  * @param  x_start: Starting position of the obstacle.
  * @retval None
  */
void display_obstacle(bsp_lcd_t *hlcd, int x_start) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af02      	add	r7, sp, #8
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
	score_card_background(hlcd);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f958 	bl	8001c2c <score_card_background>
	
	obstacle.h = generate_obstacle_height(x_start);
 800197c:	6838      	ldr	r0, [r7, #0]
 800197e:	f7ff ffcb 	bl	8001918 <generate_obstacle_height>
 8001982:	4603      	mov	r3, r0
 8001984:	4a9c      	ldr	r2, [pc, #624]	@ (8001bf8 <display_obstacle+0x28c>)
 8001986:	60d3      	str	r3, [r2, #12]
	int bottom_obstacle_ystart = obstacle.h + obstacle.y + obstacle.g;
 8001988:	4b9b      	ldr	r3, [pc, #620]	@ (8001bf8 <display_obstacle+0x28c>)
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	4b9a      	ldr	r3, [pc, #616]	@ (8001bf8 <display_obstacle+0x28c>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	441a      	add	r2, r3
 8001992:	4b99      	ldr	r3, [pc, #612]	@ (8001bf8 <display_obstacle+0x28c>)
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	4413      	add	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
	int bottom_obstacle_height = OBSTACLE_yEND_POINT - bottom_obstacle_ystart;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1c3 03d2 	rsb	r3, r3, #210	@ 0xd2
 80019a0:	60bb      	str	r3, [r7, #8]

	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_1,x_start,3, obstacle.y, obstacle.h-2);
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	4b94      	ldr	r3, [pc, #592]	@ (8001bf8 <display_obstacle+0x28c>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4619      	mov	r1, r3
 80019aa:	4b93      	ldr	r3, [pc, #588]	@ (8001bf8 <display_obstacle+0x28c>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	3b02      	subs	r3, #2
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	9100      	str	r1, [sp, #0]
 80019b4:	2303      	movs	r3, #3
 80019b6:	4991      	ldr	r1, [pc, #580]	@ (8001bfc <display_obstacle+0x290>)
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f004 f88c 	bl	8005ad6 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_1,x_start,3,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2));
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3302      	adds	r3, #2
 80019c4:	4619      	mov	r1, r3
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	3b02      	subs	r3, #2
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	9100      	str	r1, [sp, #0]
 80019ce:	2303      	movs	r3, #3
 80019d0:	498a      	ldr	r1, [pc, #552]	@ (8001bfc <display_obstacle+0x290>)
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f004 f87f 	bl	8005ad6 <bsp_lcd_fill_rect>

	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_1,x_start,obstacle.w,( obstacle.h+obstacle.y-2),2);
 80019d8:	6839      	ldr	r1, [r7, #0]
 80019da:	4b87      	ldr	r3, [pc, #540]	@ (8001bf8 <display_obstacle+0x28c>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	4b85      	ldr	r3, [pc, #532]	@ (8001bf8 <display_obstacle+0x28c>)
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	4b84      	ldr	r3, [pc, #528]	@ (8001bf8 <display_obstacle+0x28c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4413      	add	r3, r2
 80019ea:	3b02      	subs	r3, #2
 80019ec:	461a      	mov	r2, r3
 80019ee:	2302      	movs	r3, #2
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	9200      	str	r2, [sp, #0]
 80019f4:	4603      	mov	r3, r0
 80019f6:	460a      	mov	r2, r1
 80019f8:	4980      	ldr	r1, [pc, #512]	@ (8001bfc <display_obstacle+0x290>)
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f004 f86b 	bl	8005ad6 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_1,x_start,obstacle.w,bottom_obstacle_ystart,2);
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4b7d      	ldr	r3, [pc, #500]	@ (8001bf8 <display_obstacle+0x28c>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4618      	mov	r0, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	9101      	str	r1, [sp, #4]
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	4603      	mov	r3, r0
 8001a12:	497a      	ldr	r1, [pc, #488]	@ (8001bfc <display_obstacle+0x290>)
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f004 f85e 	bl	8005ad6 <bsp_lcd_fill_rect>

	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_2,x_start+3,2,obstacle.y, obstacle.h-2);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	3303      	adds	r3, #3
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4b75      	ldr	r3, [pc, #468]	@ (8001bf8 <display_obstacle+0x28c>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b74      	ldr	r3, [pc, #464]	@ (8001bf8 <display_obstacle+0x28c>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	3b02      	subs	r3, #2
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	9200      	str	r2, [sp, #0]
 8001a30:	2302      	movs	r3, #2
 8001a32:	460a      	mov	r2, r1
 8001a34:	4972      	ldr	r1, [pc, #456]	@ (8001c00 <display_obstacle+0x294>)
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f004 f84d 	bl	8005ad6 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_2,x_start+3,2,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	3303      	adds	r3, #3
 8001a40:	4619      	mov	r1, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3302      	adds	r3, #2
 8001a46:	461a      	mov	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	3b02      	subs	r3, #2
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	9200      	str	r2, [sp, #0]
 8001a50:	2302      	movs	r3, #2
 8001a52:	460a      	mov	r2, r1
 8001a54:	496a      	ldr	r1, [pc, #424]	@ (8001c00 <display_obstacle+0x294>)
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f004 f83d 	bl	8005ad6 <bsp_lcd_fill_rect>

	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_3,x_start+5,2,obstacle.y, obstacle.h-2);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	3305      	adds	r3, #5
 8001a60:	4619      	mov	r1, r3
 8001a62:	4b65      	ldr	r3, [pc, #404]	@ (8001bf8 <display_obstacle+0x28c>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b63      	ldr	r3, [pc, #396]	@ (8001bf8 <display_obstacle+0x28c>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	3b02      	subs	r3, #2
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	9200      	str	r2, [sp, #0]
 8001a72:	2302      	movs	r3, #2
 8001a74:	460a      	mov	r2, r1
 8001a76:	4963      	ldr	r1, [pc, #396]	@ (8001c04 <display_obstacle+0x298>)
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f004 f82c 	bl	8005ad6 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_3,x_start+5,2,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	3305      	adds	r3, #5
 8001a82:	4619      	mov	r1, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3302      	adds	r3, #2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	3b02      	subs	r3, #2
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	9200      	str	r2, [sp, #0]
 8001a92:	2302      	movs	r3, #2
 8001a94:	460a      	mov	r2, r1
 8001a96:	495b      	ldr	r1, [pc, #364]	@ (8001c04 <display_obstacle+0x298>)
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f004 f81c 	bl	8005ad6 <bsp_lcd_fill_rect>

	bsp_lcd_fill_rect(hlcd, WHITE, x_start+7,10,obstacle.y, obstacle.h-2);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	3307      	adds	r3, #7
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4b54      	ldr	r3, [pc, #336]	@ (8001bf8 <display_obstacle+0x28c>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b53      	ldr	r3, [pc, #332]	@ (8001bf8 <display_obstacle+0x28c>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	3b02      	subs	r3, #2
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	9200      	str	r2, [sp, #0]
 8001ab4:	230a      	movs	r3, #10
 8001ab6:	460a      	mov	r2, r1
 8001ab8:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f004 f80a 	bl	8005ad6 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, WHITE, x_start+7,10,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	3307      	adds	r3, #7
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	3302      	adds	r3, #2
 8001acc:	461a      	mov	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	3b02      	subs	r3, #2
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	9200      	str	r2, [sp, #0]
 8001ad6:	230a      	movs	r3, #10
 8001ad8:	460a      	mov	r2, r1
 8001ada:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f003 fff9 	bl	8005ad6 <bsp_lcd_fill_rect>

	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_3,x_start+17,3,obstacle.y, obstacle.h-2);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3311      	adds	r3, #17
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4b43      	ldr	r3, [pc, #268]	@ (8001bf8 <display_obstacle+0x28c>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b41      	ldr	r3, [pc, #260]	@ (8001bf8 <display_obstacle+0x28c>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	3b02      	subs	r3, #2
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	9200      	str	r2, [sp, #0]
 8001afa:	2303      	movs	r3, #3
 8001afc:	460a      	mov	r2, r1
 8001afe:	4941      	ldr	r1, [pc, #260]	@ (8001c04 <display_obstacle+0x298>)
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f003 ffe8 	bl	8005ad6 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_3,x_start+17,3,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	3311      	adds	r3, #17
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3302      	adds	r3, #2
 8001b10:	461a      	mov	r2, r3
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3b02      	subs	r3, #2
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	9200      	str	r2, [sp, #0]
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	460a      	mov	r2, r1
 8001b1e:	4939      	ldr	r1, [pc, #228]	@ (8001c04 <display_obstacle+0x298>)
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f003 ffd8 	bl	8005ad6 <bsp_lcd_fill_rect>

	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_2,x_start+20,3,obstacle.y, obstacle.h-2);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	3314      	adds	r3, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4b32      	ldr	r3, [pc, #200]	@ (8001bf8 <display_obstacle+0x28c>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b31      	ldr	r3, [pc, #196]	@ (8001bf8 <display_obstacle+0x28c>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	3b02      	subs	r3, #2
 8001b38:	9301      	str	r3, [sp, #4]
 8001b3a:	9200      	str	r2, [sp, #0]
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	460a      	mov	r2, r1
 8001b40:	492f      	ldr	r1, [pc, #188]	@ (8001c00 <display_obstacle+0x294>)
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f003 ffc7 	bl	8005ad6 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_2,x_start+20,3,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3314      	adds	r3, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	3302      	adds	r3, #2
 8001b52:	461a      	mov	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	3b02      	subs	r3, #2
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	9200      	str	r2, [sp, #0]
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	460a      	mov	r2, r1
 8001b60:	4927      	ldr	r1, [pc, #156]	@ (8001c00 <display_obstacle+0x294>)
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f003 ffb7 	bl	8005ad6 <bsp_lcd_fill_rect>

	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_1,x_start+23,7,obstacle.y, obstacle.h-2);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	3317      	adds	r3, #23
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4b22      	ldr	r3, [pc, #136]	@ (8001bf8 <display_obstacle+0x28c>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b20      	ldr	r3, [pc, #128]	@ (8001bf8 <display_obstacle+0x28c>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	3b02      	subs	r3, #2
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	9200      	str	r2, [sp, #0]
 8001b7e:	2307      	movs	r3, #7
 8001b80:	460a      	mov	r2, r1
 8001b82:	491e      	ldr	r1, [pc, #120]	@ (8001bfc <display_obstacle+0x290>)
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f003 ffa6 	bl	8005ad6 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_1,x_start+23,7,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	3317      	adds	r3, #23
 8001b8e:	4619      	mov	r1, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3302      	adds	r3, #2
 8001b94:	461a      	mov	r2, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	3b02      	subs	r3, #2
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	9200      	str	r2, [sp, #0]
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	4916      	ldr	r1, [pc, #88]	@ (8001bfc <display_obstacle+0x290>)
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f003 ff96 	bl	8005ad6 <bsp_lcd_fill_rect>

	/* filling traces of obstacle */
	bsp_lcd_fill_rect(hlcd, BACKGROUND,(x_start+30), obstacle.speed, obstacle.y,  obstacle.h);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	331e      	adds	r3, #30
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <display_obstacle+0x28c>)
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <display_obstacle+0x28c>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <display_obstacle+0x28c>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	9200      	str	r2, [sp, #0]
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460a      	mov	r2, r1
 8001bc8:	490f      	ldr	r1, [pc, #60]	@ (8001c08 <display_obstacle+0x29c>)
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f003 ff83 	bl	8005ad6 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, BACKGROUND,(x_start+30), obstacle.speed, bottom_obstacle_ystart, bottom_obstacle_height);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	331e      	adds	r3, #30
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <display_obstacle+0x28c>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	9201      	str	r2, [sp, #4]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	4603      	mov	r3, r0
 8001be6:	460a      	mov	r2, r1
 8001be8:	4907      	ldr	r1, [pc, #28]	@ (8001c08 <display_obstacle+0x29c>)
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f003 ff73 	bl	8005ad6 <bsp_lcd_fill_rect>
}
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20007b38 	.word	0x20007b38
 8001bfc:	00517900 	.word	0x00517900
 8001c00:	0078b201 	.word	0x0078b201
 8001c04:	0098e100 	.word	0x0098e100
 8001c08:	009ae8f6 	.word	0x009ae8f6

08001c0c <move_obstacle>:
  * @brief  Move the obstacle on the LCD.
  * @param  hlcd: Pointer to LCD handle.
  * @param  x: Position to move the obstacle to.
  * @retval None
  */
void move_obstacle(bsp_lcd_t *hlcd, int x) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
	display_obstacle(hlcd, x);
 8001c16:	6839      	ldr	r1, [r7, #0]
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff fea7 	bl	800196c <display_obstacle>
	display_bush(hlcd);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff f898 	bl	8000d54 <display_bush>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <score_card_background>:
/**
  * @brief  Draw the background for the score card on the LCD.
  * @param  hlcd: Pointer to LCD handle.
  * @retval None
  */
void score_card_background(bsp_lcd_t *hlcd) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_rect(hlcd, SCORE_BOARD_SHADE_3, 0, 96,0,26);
 8001c34:	231a      	movs	r3, #26
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2360      	movs	r3, #96	@ 0x60
 8001c3e:	2200      	movs	r2, #0
 8001c40:	4912      	ldr	r1, [pc, #72]	@ (8001c8c <score_card_background+0x60>)
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f003 ff47 	bl	8005ad6 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, SCORE_BOARD_SHADE_3, 144, 96,0,26);
 8001c48:	231a      	movs	r3, #26
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2360      	movs	r3, #96	@ 0x60
 8001c52:	2290      	movs	r2, #144	@ 0x90
 8001c54:	490d      	ldr	r1, [pc, #52]	@ (8001c8c <score_card_background+0x60>)
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f003 ff3d 	bl	8005ad6 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, SCORE_BOARD_SHADE_2, 0, 240,26,2);
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	231a      	movs	r3, #26
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	23f0      	movs	r3, #240	@ 0xf0
 8001c66:	2200      	movs	r2, #0
 8001c68:	4909      	ldr	r1, [pc, #36]	@ (8001c90 <score_card_background+0x64>)
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f003 ff33 	bl	8005ad6 <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, SCORE_BOARD_SHADE_1, 0, 240,28,2);
 8001c70:	2302      	movs	r3, #2
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	231c      	movs	r3, #28
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	23f0      	movs	r3, #240	@ 0xf0
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	4905      	ldr	r1, [pc, #20]	@ (8001c94 <score_card_background+0x68>)
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f003 ff29 	bl	8005ad6 <bsp_lcd_fill_rect>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	00e4e0e0 	.word	0x00e4e0e0
 8001c90:	00969595 	.word	0x00969595
 8001c94:	00727171 	.word	0x00727171

08001c98 <get_obstacle_speed>:
/**
  * @brief  Calculates the speed of obstacles based on the player's score.
  * @param  score: The player's score.
  * @retval uint8_t: The calculated obstacle speed.
  */
uint8_t get_obstacle_speed(int score) {
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  int base_speed = 5;
 8001ca0:	2305      	movs	r3, #5
 8001ca2:	60fb      	str	r3, [r7, #12]
  float speed_increment = 1.6;
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <get_obstacle_speed+0x3c>)
 8001ca6:	60bb      	str	r3, [r7, #8]
  return base_speed * speed_increment;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cbe:	edc7 7a00 	vstr	s15, [r7]
 8001cc2:	783b      	ldrb	r3, [r7, #0]
 8001cc4:	b2db      	uxtb	r3, r3
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	3fcccccd 	.word	0x3fcccccd

08001cd8 <move_player>:
  * @brief  Move the player on the LCD.
  * @param  hlcd: Pointer to LCD handle.
  * @param  y_pos: Starting position of the player.
  * @retval None
  */
void move_player(bsp_lcd_t *hlcd,  int y_pos) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	static int wing_movement=1;
	fill_player_trace(hlcd);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff f81a 	bl	8000d1c <fill_player_trace>
	if(wing_movement%5==0){
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d64 <move_player+0x8c>)
 8001cea:	6819      	ldr	r1, [r3, #0]
 8001cec:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <move_player+0x90>)
 8001cee:	fb83 2301 	smull	r2, r3, r3, r1
 8001cf2:	105a      	asrs	r2, r3, #1
 8001cf4:	17cb      	asrs	r3, r1, #31
 8001cf6:	1ad2      	subs	r2, r2, r3
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	1aca      	subs	r2, r1, r3
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	d113      	bne.n	8001d2c <move_player+0x54>
		bsp_lcd_fill_image(hlcd, (uint16_t *)image_data_bird, player.x, player.w, y_pos, player.h);
 8001d04:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <move_player+0x94>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	b299      	uxth	r1, r3
 8001d0a:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <move_player+0x94>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	b298      	uxth	r0, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4a15      	ldr	r2, [pc, #84]	@ (8001d6c <move_player+0x94>)
 8001d16:	68d2      	ldr	r2, [r2, #12]
 8001d18:	b292      	uxth	r2, r2
 8001d1a:	9201      	str	r2, [sp, #4]
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	4603      	mov	r3, r0
 8001d20:	460a      	mov	r2, r1
 8001d22:	4913      	ldr	r1, [pc, #76]	@ (8001d70 <move_player+0x98>)
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f003 ff4d 	bl	8005bc4 <bsp_lcd_fill_image>
 8001d2a:	e012      	b.n	8001d52 <move_player+0x7a>
	} else {
		bsp_lcd_fill_image(hlcd, (uint16_t *)image_data_bird2, player.x, player.w, y_pos, player.h);
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <move_player+0x94>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	b299      	uxth	r1, r3
 8001d32:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <move_player+0x94>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	b298      	uxth	r0, r3
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d6c <move_player+0x94>)
 8001d3e:	68d2      	ldr	r2, [r2, #12]
 8001d40:	b292      	uxth	r2, r2
 8001d42:	9201      	str	r2, [sp, #4]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	4603      	mov	r3, r0
 8001d48:	460a      	mov	r2, r1
 8001d4a:	490a      	ldr	r1, [pc, #40]	@ (8001d74 <move_player+0x9c>)
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f003 ff39 	bl	8005bc4 <bsp_lcd_fill_image>
	}
	wing_movement++;
 8001d52:	4b04      	ldr	r3, [pc, #16]	@ (8001d64 <move_player+0x8c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	3301      	adds	r3, #1
 8001d58:	4a02      	ldr	r2, [pc, #8]	@ (8001d64 <move_player+0x8c>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000008 	.word	0x20000008
 8001d68:	66666667 	.word	0x66666667
 8001d6c:	20007b24 	.word	0x20007b24
 8001d70:	08013ecc 	.word	0x08013ecc
 8001d74:	080145d4 	.word	0x080145d4

08001d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <HAL_MspInit+0x44>)
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	4a0e      	ldr	r2, [pc, #56]	@ (8001dbc <HAL_MspInit+0x44>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6193      	str	r3, [r2, #24]
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <HAL_MspInit+0x44>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <HAL_MspInit+0x44>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4a08      	ldr	r2, [pc, #32]	@ (8001dbc <HAL_MspInit+0x44>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da0:	61d3      	str	r3, [r2, #28]
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_MspInit+0x44>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	@ 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a17      	ldr	r2, [pc, #92]	@ (8001e3c <HAL_I2C_MspInit+0x7c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d127      	bne.n	8001e32 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <HAL_I2C_MspInit+0x80>)
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	4a16      	ldr	r2, [pc, #88]	@ (8001e40 <HAL_I2C_MspInit+0x80>)
 8001de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dec:	6153      	str	r3, [r2, #20]
 8001dee:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <HAL_I2C_MspInit+0x80>)
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dfa:	23c0      	movs	r3, #192	@ 0xc0
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfe:	2312      	movs	r3, #18
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	480b      	ldr	r0, [pc, #44]	@ (8001e44 <HAL_I2C_MspInit+0x84>)
 8001e16:	f000 fc79 	bl	800270c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e1a:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <HAL_I2C_MspInit+0x80>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a08      	ldr	r2, [pc, #32]	@ (8001e40 <HAL_I2C_MspInit+0x80>)
 8001e20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e24:	61d3      	str	r3, [r2, #28]
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <HAL_I2C_MspInit+0x80>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	@ 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40005400 	.word	0x40005400
 8001e40:	40021000 	.word	0x40021000
 8001e44:	48000400 	.word	0x48000400

08001e48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	@ 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a17      	ldr	r2, [pc, #92]	@ (8001ec4 <HAL_SPI_MspInit+0x7c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d128      	bne.n	8001ebc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e6a:	4b17      	ldr	r3, [pc, #92]	@ (8001ec8 <HAL_SPI_MspInit+0x80>)
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	4a16      	ldr	r2, [pc, #88]	@ (8001ec8 <HAL_SPI_MspInit+0x80>)
 8001e70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e74:	6193      	str	r3, [r2, #24]
 8001e76:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <HAL_SPI_MspInit+0x80>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <HAL_SPI_MspInit+0x80>)
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	4a10      	ldr	r2, [pc, #64]	@ (8001ec8 <HAL_SPI_MspInit+0x80>)
 8001e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e8c:	6153      	str	r3, [r2, #20]
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec8 <HAL_SPI_MspInit+0x80>)
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e9a:	23a0      	movs	r3, #160	@ 0xa0
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eaa:	2305      	movs	r3, #5
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eb8:	f000 fc28 	bl	800270c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ebc:	bf00      	nop
 8001ebe:	3728      	adds	r7, #40	@ 0x28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40013000 	.word	0x40013000
 8001ec8:	40021000 	.word	0x40021000

08001ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <NMI_Handler+0x4>

08001ed4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <HardFault_Handler+0x4>

08001edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <MemManage_Handler+0x4>

08001ee4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f22:	f000 fac9 	bl	80024b8 <HAL_IncTick>
//		count = 0;
//		tick_pass = True;
//	}

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  //Enable TRCENA
  DEMCR |= ( 1 << 24);
 8001f36:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <ITM_SendChar+0x48>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f74 <ITM_SendChar+0x48>)
 8001f3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f40:	6013      	str	r3, [r2, #0]

  //enable stimulus port 0
  ITM_TRACE_EN |= ( 1 << 0);
 8001f42:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <ITM_SendChar+0x4c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a0c      	ldr	r2, [pc, #48]	@ (8001f78 <ITM_SendChar+0x4c>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6013      	str	r3, [r2, #0]

  // read FIFO status in bit [0]:
  while(!(ITM_STIMULUS_PORT0 & 1));
 8001f4e:	bf00      	nop
 8001f50:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f8      	beq.n	8001f50 <ITM_SendChar+0x24>

  //Write to ITM stimulus port0
  ITM_STIMULUS_PORT0 = ch;
 8001f5e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	6013      	str	r3, [r2, #0]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000edfc 	.word	0xe000edfc
 8001f78:	e0000e00 	.word	0xe0000e00

08001f7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return 1;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_kill>:

int _kill(int pid, int sig)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f96:	f005 fafd 	bl	8007594 <__errno>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2216      	movs	r2, #22
 8001f9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_exit>:

void _exit (int status)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ffe7 	bl	8001f8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fbe:	bf00      	nop
 8001fc0:	e7fd      	b.n	8001fbe <_exit+0x12>

08001fc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	e00a      	b.n	8001fea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fd4:	f3af 8000 	nop.w
 8001fd8:	4601      	mov	r1, r0
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	60ba      	str	r2, [r7, #8]
 8001fe0:	b2ca      	uxtb	r2, r1
 8001fe2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	dbf0      	blt.n	8001fd4 <_read+0x12>
  }

  return len;
 8001ff2:	687b      	ldr	r3, [r7, #4]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	e009      	b.n	8002022 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	60ba      	str	r2, [r7, #8]
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff88 	bl	8001f2c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	3301      	adds	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	dbf1      	blt.n	800200e <_write+0x12>
  }
  return len;
 800202a:	687b      	ldr	r3, [r7, #4]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_close>:

int _close(int file)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800203c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800205c:	605a      	str	r2, [r3, #4]
  return 0;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_isatty>:

int _isatty(int file)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002074:	2301      	movs	r3, #1
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002082:	b480      	push	{r7}
 8002084:	b085      	sub	sp, #20
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a4:	4a14      	ldr	r2, [pc, #80]	@ (80020f8 <_sbrk+0x5c>)
 80020a6:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <_sbrk+0x60>)
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b0:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b8:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <_sbrk+0x64>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <_sbrk+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d207      	bcs.n	80020dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020cc:	f005 fa62 	bl	8007594 <__errno>
 80020d0:	4603      	mov	r3, r0
 80020d2:	220c      	movs	r2, #12
 80020d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	e009      	b.n	80020f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020dc:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e2:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a05      	ldr	r2, [pc, #20]	@ (8002100 <_sbrk+0x64>)
 80020ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	2000a000 	.word	0x2000a000
 80020fc:	00000400 	.word	0x00000400
 8002100:	20007b64 	.word	0x20007b64
 8002104:	20007cc0 	.word	0x20007cc0

08002108 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <SystemInit+0x20>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002112:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <SystemInit+0x20>)
 8002114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <game_init_mssg>:
/**
  * @brief Initializes the game message display.
  * @param None
  * @retval None
  */
void game_init_mssg(bsp_lcd_t *hlcd) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af04      	add	r7, sp, #16
 8002132:	6078      	str	r0, [r7, #4]
	const char* game_init_message1 = " PRESS USER-BUTTON ";
 8002134:	4b13      	ldr	r3, [pc, #76]	@ (8002184 <game_init_mssg+0x58>)
 8002136:	60fb      	str	r3, [r7, #12]
	const char* game_init_message2 = "TO START ";
 8002138:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <game_init_mssg+0x5c>)
 800213a:	60bb      	str	r3, [r7, #8]

	display_game_title(hlcd);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7fe fe7b 	bl	8000e38 <display_game_title>
	gc9a01a_write_string(15, 140, (const char*)game_init_message1, Font_11x18, BLACK, BACKGROUND565);
 8002142:	4b12      	ldr	r3, [pc, #72]	@ (800218c <game_init_mssg+0x60>)
 8002144:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 8002148:	9202      	str	r2, [sp, #8]
 800214a:	2200      	movs	r2, #0
 800214c:	9201      	str	r2, [sp, #4]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	9200      	str	r2, [sp, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	218c      	movs	r1, #140	@ 0x8c
 8002158:	200f      	movs	r0, #15
 800215a:	f003 fed4 	bl	8005f06 <gc9a01a_write_string>
	gc9a01a_write_string(55, 170, (const char*)game_init_message2, Font_16x26, WHITE, BACKGROUND565);
 800215e:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <game_init_mssg+0x64>)
 8002160:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 8002164:	9202      	str	r2, [sp, #8]
 8002166:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800216a:	9201      	str	r2, [sp, #4]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	9200      	str	r2, [sp, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	21aa      	movs	r1, #170	@ 0xaa
 8002176:	2037      	movs	r0, #55	@ 0x37
 8002178:	f003 fec5 	bl	8005f06 <gc9a01a_write_string>
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	0800b350 	.word	0x0800b350
 8002188:	0800b364 	.word	0x0800b364
 800218c:	20000020 	.word	0x20000020
 8002190:	20000028 	.word	0x20000028

08002194 <game_over_mssg>:
/**
  * @brief Displays game over message on the screen.
  * @param None
  * @retval None
  */
void game_over_mssg(bsp_lcd_t *hlcd) {
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af04      	add	r7, sp, #16
 800219a:	6078      	str	r0, [r7, #4]
	const char* game_over_message = "GAME OVER";
 800219c:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <game_over_mssg+0x54>)
 800219e:	60fb      	str	r3, [r7, #12]
	const char* restart_message = "PRESS USER-BUTTON TO RESTART";
 80021a0:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <game_over_mssg+0x58>)
 80021a2:	60bb      	str	r3, [r7, #8]

	gc9a01a_write_string(48, 70, (const char*)game_over_message, Font_16x26, BLACK, BACKGROUND565);
 80021a4:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <game_over_mssg+0x5c>)
 80021a6:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 80021aa:	9202      	str	r2, [sp, #8]
 80021ac:	2200      	movs	r2, #0
 80021ae:	9201      	str	r2, [sp, #4]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	9200      	str	r2, [sp, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	2146      	movs	r1, #70	@ 0x46
 80021ba:	2030      	movs	r0, #48	@ 0x30
 80021bc:	f003 fea3 	bl	8005f06 <gc9a01a_write_string>
	gc9a01a_write_string(22, 100, (const char*)restart_message, Font_7x10, RED565, BACKGROUND565);
 80021c0:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <game_over_mssg+0x60>)
 80021c2:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 80021c6:	9202      	str	r2, [sp, #8]
 80021c8:	f64f 0241 	movw	r2, #63553	@ 0xf841
 80021cc:	9201      	str	r2, [sp, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	9200      	str	r2, [sp, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	2164      	movs	r1, #100	@ 0x64
 80021d8:	2016      	movs	r0, #22
 80021da:	f003 fe94 	bl	8005f06 <gc9a01a_write_string>
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	0800b370 	.word	0x0800b370
 80021ec:	0800b37c 	.word	0x0800b37c
 80021f0:	20000028 	.word	0x20000028
 80021f4:	20000018 	.word	0x20000018

080021f8 <render_gamestart_countdown>:
/**
  * @brief Renders the countdown before the game starts.
  * @param None
  * @retval None
  */
void render_gamestart_countdown(bsp_lcd_t *hlcd) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af04      	add	r7, sp, #16
 80021fe:	6078      	str	r0, [r7, #4]
	static uint32_t prestart_time = 0;
	countdown_complete = false;
 8002200:	4b2d      	ldr	r3, [pc, #180]	@ (80022b8 <render_gamestart_countdown+0xc0>)
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
	prestart_time++;
 8002206:	4b2d      	ldr	r3, [pc, #180]	@ (80022bc <render_gamestart_countdown+0xc4>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3301      	adds	r3, #1
 800220c:	4a2b      	ldr	r2, [pc, #172]	@ (80022bc <render_gamestart_countdown+0xc4>)
 800220e:	6013      	str	r3, [r2, #0]
	if (prestart_time < 50) {
 8002210:	4b2a      	ldr	r3, [pc, #168]	@ (80022bc <render_gamestart_countdown+0xc4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b31      	cmp	r3, #49	@ 0x31
 8002216:	d80e      	bhi.n	8002236 <render_gamestart_countdown+0x3e>
		gc9a01a_write_string(116, 107, (const char*)"3", Font_16x26, BLACK, BACKGROUND565);
 8002218:	4b29      	ldr	r3, [pc, #164]	@ (80022c0 <render_gamestart_countdown+0xc8>)
 800221a:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 800221e:	9202      	str	r2, [sp, #8]
 8002220:	2200      	movs	r2, #0
 8002222:	9201      	str	r2, [sp, #4]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	9200      	str	r2, [sp, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a26      	ldr	r2, [pc, #152]	@ (80022c4 <render_gamestart_countdown+0xcc>)
 800222c:	216b      	movs	r1, #107	@ 0x6b
 800222e:	2074      	movs	r0, #116	@ 0x74
 8002230:	f003 fe69 	bl	8005f06 <gc9a01a_write_string>
	} else if(prestart_time > 150) {
		prestart_time = 0;
		fill_countdown_trace(hlcd);
		countdown_complete = true;
	}
}
 8002234:	e03b      	b.n	80022ae <render_gamestart_countdown+0xb6>
	} else if(prestart_time > 50 && prestart_time < 100) {
 8002236:	4b21      	ldr	r3, [pc, #132]	@ (80022bc <render_gamestart_countdown+0xc4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b32      	cmp	r3, #50	@ 0x32
 800223c:	d912      	bls.n	8002264 <render_gamestart_countdown+0x6c>
 800223e:	4b1f      	ldr	r3, [pc, #124]	@ (80022bc <render_gamestart_countdown+0xc4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2b63      	cmp	r3, #99	@ 0x63
 8002244:	d80e      	bhi.n	8002264 <render_gamestart_countdown+0x6c>
		gc9a01a_write_string(116, 107, (const char*)"2", Font_16x26, BLACK, BACKGROUND565);
 8002246:	4b1e      	ldr	r3, [pc, #120]	@ (80022c0 <render_gamestart_countdown+0xc8>)
 8002248:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 800224c:	9202      	str	r2, [sp, #8]
 800224e:	2200      	movs	r2, #0
 8002250:	9201      	str	r2, [sp, #4]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	9200      	str	r2, [sp, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1b      	ldr	r2, [pc, #108]	@ (80022c8 <render_gamestart_countdown+0xd0>)
 800225a:	216b      	movs	r1, #107	@ 0x6b
 800225c:	2074      	movs	r0, #116	@ 0x74
 800225e:	f003 fe52 	bl	8005f06 <gc9a01a_write_string>
 8002262:	e024      	b.n	80022ae <render_gamestart_countdown+0xb6>
	} else if(prestart_time > 100 && prestart_time < 150) {
 8002264:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <render_gamestart_countdown+0xc4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b64      	cmp	r3, #100	@ 0x64
 800226a:	d912      	bls.n	8002292 <render_gamestart_countdown+0x9a>
 800226c:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <render_gamestart_countdown+0xc4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b95      	cmp	r3, #149	@ 0x95
 8002272:	d80e      	bhi.n	8002292 <render_gamestart_countdown+0x9a>
		gc9a01a_write_string(116, 107, (const char*)"1", Font_16x26, BLACK, BACKGROUND565);
 8002274:	4b12      	ldr	r3, [pc, #72]	@ (80022c0 <render_gamestart_countdown+0xc8>)
 8002276:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 800227a:	9202      	str	r2, [sp, #8]
 800227c:	2200      	movs	r2, #0
 800227e:	9201      	str	r2, [sp, #4]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	9200      	str	r2, [sp, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a11      	ldr	r2, [pc, #68]	@ (80022cc <render_gamestart_countdown+0xd4>)
 8002288:	216b      	movs	r1, #107	@ 0x6b
 800228a:	2074      	movs	r0, #116	@ 0x74
 800228c:	f003 fe3b 	bl	8005f06 <gc9a01a_write_string>
 8002290:	e00d      	b.n	80022ae <render_gamestart_countdown+0xb6>
	} else if(prestart_time > 150) {
 8002292:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <render_gamestart_countdown+0xc4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b96      	cmp	r3, #150	@ 0x96
 8002298:	d909      	bls.n	80022ae <render_gamestart_countdown+0xb6>
		prestart_time = 0;
 800229a:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <render_gamestart_countdown+0xc4>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
		fill_countdown_trace(hlcd);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7fe fd97 	bl	8000dd4 <fill_countdown_trace>
		countdown_complete = true;
 80022a6:	4b04      	ldr	r3, [pc, #16]	@ (80022b8 <render_gamestart_countdown+0xc0>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
}
 80022ac:	e7ff      	b.n	80022ae <render_gamestart_countdown+0xb6>
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20007b1c 	.word	0x20007b1c
 80022bc:	20007b68 	.word	0x20007b68
 80022c0:	20000028 	.word	0x20000028
 80022c4:	0800b39c 	.word	0x0800b39c
 80022c8:	0800b3a0 	.word	0x0800b3a0
 80022cc:	0800b3a4 	.word	0x0800b3a4

080022d0 <player_show_score>:
/**
  * @brief Displays the player's score on the screen.
  * @param player: Pointer to the Player struct containing player information.
  * @retval None
  */
void player_show_score(Player *player) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0a0      	sub	sp, #128	@ 0x80
 80022d4:	af04      	add	r7, sp, #16
 80022d6:	6078      	str	r0, [r7, #4]
	char score_str[100]="000";
 80022d8:	4b39      	ldr	r3, [pc, #228]	@ (80023c0 <player_show_score+0xf0>)
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	f107 0310 	add.w	r3, r7, #16
 80022e0:	2260      	movs	r2, #96	@ 0x60
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f005 f903 	bl	80074f0 <memset>

	if(( player->score)<10){
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b09      	cmp	r3, #9
 80022f0:	dc18      	bgt.n	8002324 <player_show_score+0x54>
		sprintf(score_str, "00%d", player->score);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	4932      	ldr	r1, [pc, #200]	@ (80023c4 <player_show_score+0xf4>)
 80022fc:	4618      	mov	r0, r3
 80022fe:	f004 ffff 	bl	8007300 <siprintf>
		gc9a01a_write_string(96, 0, score_str, Font_16x26, BLACK, SCORE_BOARD);
 8002302:	4b31      	ldr	r3, [pc, #196]	@ (80023c8 <player_show_score+0xf8>)
 8002304:	f107 010c 	add.w	r1, r7, #12
 8002308:	f24e 721c 	movw	r2, #59164	@ 0xe71c
 800230c:	9202      	str	r2, [sp, #8]
 800230e:	2200      	movs	r2, #0
 8002310:	9201      	str	r2, [sp, #4]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	9200      	str	r2, [sp, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	460a      	mov	r2, r1
 800231a:	2100      	movs	r1, #0
 800231c:	2060      	movs	r0, #96	@ 0x60
 800231e:	f003 fdf2 	bl	8005f06 <gc9a01a_write_string>
		sprintf(score_str, "%d", player->score);
		gc9a01a_write_string(96, 0, score_str, Font_16x26, BLACK, SCORE_BOARD);
	} else {
		gc9a01a_write_string(96, 0, "WIN", Font_16x26, BLACK, SCORE_BOARD);
	}
}
 8002322:	e048      	b.n	80023b6 <player_show_score+0xe6>
	} else if( player->score<100){
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b63      	cmp	r3, #99	@ 0x63
 800232a:	dc18      	bgt.n	800235e <player_show_score+0x8e>
		sprintf(score_str, "0%d", player->score);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	4925      	ldr	r1, [pc, #148]	@ (80023cc <player_show_score+0xfc>)
 8002336:	4618      	mov	r0, r3
 8002338:	f004 ffe2 	bl	8007300 <siprintf>
		gc9a01a_write_string(96, 0, score_str, Font_16x26, BLACK, SCORE_BOARD);
 800233c:	4b22      	ldr	r3, [pc, #136]	@ (80023c8 <player_show_score+0xf8>)
 800233e:	f107 010c 	add.w	r1, r7, #12
 8002342:	f24e 721c 	movw	r2, #59164	@ 0xe71c
 8002346:	9202      	str	r2, [sp, #8]
 8002348:	2200      	movs	r2, #0
 800234a:	9201      	str	r2, [sp, #4]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	9200      	str	r2, [sp, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	460a      	mov	r2, r1
 8002354:	2100      	movs	r1, #0
 8002356:	2060      	movs	r0, #96	@ 0x60
 8002358:	f003 fdd5 	bl	8005f06 <gc9a01a_write_string>
}
 800235c:	e02b      	b.n	80023b6 <player_show_score+0xe6>
	} else if( player->score<1000){
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002366:	da18      	bge.n	800239a <player_show_score+0xca>
		sprintf(score_str, "%d", player->score);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	4917      	ldr	r1, [pc, #92]	@ (80023d0 <player_show_score+0x100>)
 8002372:	4618      	mov	r0, r3
 8002374:	f004 ffc4 	bl	8007300 <siprintf>
		gc9a01a_write_string(96, 0, score_str, Font_16x26, BLACK, SCORE_BOARD);
 8002378:	4b13      	ldr	r3, [pc, #76]	@ (80023c8 <player_show_score+0xf8>)
 800237a:	f107 010c 	add.w	r1, r7, #12
 800237e:	f24e 721c 	movw	r2, #59164	@ 0xe71c
 8002382:	9202      	str	r2, [sp, #8]
 8002384:	2200      	movs	r2, #0
 8002386:	9201      	str	r2, [sp, #4]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	9200      	str	r2, [sp, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	460a      	mov	r2, r1
 8002390:	2100      	movs	r1, #0
 8002392:	2060      	movs	r0, #96	@ 0x60
 8002394:	f003 fdb7 	bl	8005f06 <gc9a01a_write_string>
}
 8002398:	e00d      	b.n	80023b6 <player_show_score+0xe6>
		gc9a01a_write_string(96, 0, "WIN", Font_16x26, BLACK, SCORE_BOARD);
 800239a:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <player_show_score+0xf8>)
 800239c:	f24e 721c 	movw	r2, #59164	@ 0xe71c
 80023a0:	9202      	str	r2, [sp, #8]
 80023a2:	2200      	movs	r2, #0
 80023a4:	9201      	str	r2, [sp, #4]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	9200      	str	r2, [sp, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a09      	ldr	r2, [pc, #36]	@ (80023d4 <player_show_score+0x104>)
 80023ae:	2100      	movs	r1, #0
 80023b0:	2060      	movs	r0, #96	@ 0x60
 80023b2:	f003 fda8 	bl	8005f06 <gc9a01a_write_string>
}
 80023b6:	bf00      	nop
 80023b8:	3770      	adds	r7, #112	@ 0x70
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	00303030 	.word	0x00303030
 80023c4:	0800b3a8 	.word	0x0800b3a8
 80023c8:	20000028 	.word	0x20000028
 80023cc:	0800b3b0 	.word	0x0800b3b0
 80023d0:	0800b3b4 	.word	0x0800b3b4
 80023d4:	0800b3b8 	.word	0x0800b3b8

080023d8 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002410 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023dc:	f7ff fe94 	bl	8002108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023e0:	480c      	ldr	r0, [pc, #48]	@ (8002414 <LoopForever+0x6>)
  ldr r1, =_edata
 80023e2:	490d      	ldr	r1, [pc, #52]	@ (8002418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023e4:	4a0d      	ldr	r2, [pc, #52]	@ (800241c <LoopForever+0xe>)
  movs r3, #0
 80023e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e8:	e002      	b.n	80023f0 <LoopCopyDataInit>

080023ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ee:	3304      	adds	r3, #4

080023f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f4:	d3f9      	bcc.n	80023ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002424 <LoopForever+0x16>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023fc:	e001      	b.n	8002402 <LoopFillZerobss>

080023fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002400:	3204      	adds	r2, #4

08002402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002404:	d3fb      	bcc.n	80023fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002406:	f005 f8cb 	bl	80075a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800240a:	f7fe fd73 	bl	8000ef4 <main>

0800240e <LoopForever>:

LoopForever:
    b LoopForever
 800240e:	e7fe      	b.n	800240e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002410:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002418:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 800241c:	080179b4 	.word	0x080179b4
  ldr r2, =_sbss
 8002420:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002424:	20007cbc 	.word	0x20007cbc

08002428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002428:	e7fe      	b.n	8002428 <ADC1_2_IRQHandler>
	...

0800242c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002430:	4b08      	ldr	r3, [pc, #32]	@ (8002454 <HAL_Init+0x28>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a07      	ldr	r2, [pc, #28]	@ (8002454 <HAL_Init+0x28>)
 8002436:	f043 0310 	orr.w	r3, r3, #16
 800243a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243c:	2003      	movs	r0, #3
 800243e:	f000 f931 	bl	80026a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002442:	200f      	movs	r0, #15
 8002444:	f000 f808 	bl	8002458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002448:	f7ff fc96 	bl	8001d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40022000 	.word	0x40022000

08002458 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002460:	4b12      	ldr	r3, [pc, #72]	@ (80024ac <HAL_InitTick+0x54>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b12      	ldr	r3, [pc, #72]	@ (80024b0 <HAL_InitTick+0x58>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800246e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	4618      	mov	r0, r3
 8002478:	f000 f93b 	bl	80026f2 <HAL_SYSTICK_Config>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e00e      	b.n	80024a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b0f      	cmp	r3, #15
 800248a:	d80a      	bhi.n	80024a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800248c:	2200      	movs	r2, #0
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f000 f911 	bl	80026ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002498:	4a06      	ldr	r2, [pc, #24]	@ (80024b4 <HAL_InitTick+0x5c>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	2000000c 	.word	0x2000000c
 80024b0:	20000014 	.word	0x20000014
 80024b4:	20000010 	.word	0x20000010

080024b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_IncTick+0x20>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_IncTick+0x24>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	4a04      	ldr	r2, [pc, #16]	@ (80024dc <HAL_IncTick+0x24>)
 80024ca:	6013      	str	r3, [r2, #0]
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000014 	.word	0x20000014
 80024dc:	20007b6c 	.word	0x20007b6c

080024e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80024e4:	4b03      	ldr	r3, [pc, #12]	@ (80024f4 <HAL_GetTick+0x14>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20007b6c 	.word	0x20007b6c

080024f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff ffee 	bl	80024e0 <HAL_GetTick>
 8002504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d005      	beq.n	800251e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002512:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <HAL_Delay+0x44>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800251e:	bf00      	nop
 8002520:	f7ff ffde 	bl	80024e0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	429a      	cmp	r2, r3
 800252e:	d8f7      	bhi.n	8002520 <HAL_Delay+0x28>
  {
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000014 	.word	0x20000014

08002540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002550:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800255c:	4013      	ands	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800256c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002572:	4a04      	ldr	r2, [pc, #16]	@ (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	60d3      	str	r3, [r2, #12]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800258c:	4b04      	ldr	r3, [pc, #16]	@ (80025a0 <__NVIC_GetPriorityGrouping+0x18>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 0307 	and.w	r3, r3, #7
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	db0a      	blt.n	80025ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	490c      	ldr	r1, [pc, #48]	@ (80025f0 <__NVIC_SetPriority+0x4c>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	440b      	add	r3, r1
 80025c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025cc:	e00a      	b.n	80025e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4908      	ldr	r1, [pc, #32]	@ (80025f4 <__NVIC_SetPriority+0x50>)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3b04      	subs	r3, #4
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	440b      	add	r3, r1
 80025e2:	761a      	strb	r2, [r3, #24]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	@ 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f1c3 0307 	rsb	r3, r3, #7
 8002612:	2b04      	cmp	r3, #4
 8002614:	bf28      	it	cs
 8002616:	2304      	movcs	r3, #4
 8002618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3304      	adds	r3, #4
 800261e:	2b06      	cmp	r3, #6
 8002620:	d902      	bls.n	8002628 <NVIC_EncodePriority+0x30>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3b03      	subs	r3, #3
 8002626:	e000      	b.n	800262a <NVIC_EncodePriority+0x32>
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	f04f 32ff 	mov.w	r2, #4294967295
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	401a      	ands	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43d9      	mvns	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	4313      	orrs	r3, r2
         );
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	@ 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002670:	d301      	bcc.n	8002676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002672:	2301      	movs	r3, #1
 8002674:	e00f      	b.n	8002696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002676:	4a0a      	ldr	r2, [pc, #40]	@ (80026a0 <SysTick_Config+0x40>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800267e:	210f      	movs	r1, #15
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	f7ff ff8e 	bl	80025a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002688:	4b05      	ldr	r3, [pc, #20]	@ (80026a0 <SysTick_Config+0x40>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268e:	4b04      	ldr	r3, [pc, #16]	@ (80026a0 <SysTick_Config+0x40>)
 8002690:	2207      	movs	r2, #7
 8002692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	e000e010 	.word	0xe000e010

080026a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ff47 	bl	8002540 <__NVIC_SetPriorityGrouping>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026cc:	f7ff ff5c 	bl	8002588 <__NVIC_GetPriorityGrouping>
 80026d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	6978      	ldr	r0, [r7, #20]
 80026d8:	f7ff ff8e 	bl	80025f8 <NVIC_EncodePriority>
 80026dc:	4602      	mov	r2, r0
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff5d 	bl	80025a4 <__NVIC_SetPriority>
}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ffb0 	bl	8002660 <SysTick_Config>
 8002700:	4603      	mov	r3, r0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800271a:	e154      	b.n	80029c6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	2101      	movs	r1, #1
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	fa01 f303 	lsl.w	r3, r1, r3
 8002728:	4013      	ands	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 8146 	beq.w	80029c0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b01      	cmp	r3, #1
 800273e:	d005      	beq.n	800274c <HAL_GPIO_Init+0x40>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d130      	bne.n	80027ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002782:	2201      	movs	r2, #1
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f003 0201 	and.w	r2, r3, #1
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d017      	beq.n	80027ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	2203      	movs	r2, #3
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4013      	ands	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d123      	bne.n	800283e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	08da      	lsrs	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3208      	adds	r2, #8
 80027fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	220f      	movs	r2, #15
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	08da      	lsrs	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3208      	adds	r2, #8
 8002838:	6939      	ldr	r1, [r7, #16]
 800283a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0203 	and.w	r2, r3, #3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 80a0 	beq.w	80029c0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002880:	4b58      	ldr	r3, [pc, #352]	@ (80029e4 <HAL_GPIO_Init+0x2d8>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4a57      	ldr	r2, [pc, #348]	@ (80029e4 <HAL_GPIO_Init+0x2d8>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6193      	str	r3, [r2, #24]
 800288c:	4b55      	ldr	r3, [pc, #340]	@ (80029e4 <HAL_GPIO_Init+0x2d8>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002898:	4a53      	ldr	r2, [pc, #332]	@ (80029e8 <HAL_GPIO_Init+0x2dc>)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	3302      	adds	r3, #2
 80028a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	220f      	movs	r2, #15
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80028c2:	d019      	beq.n	80028f8 <HAL_GPIO_Init+0x1ec>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a49      	ldr	r2, [pc, #292]	@ (80029ec <HAL_GPIO_Init+0x2e0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d013      	beq.n	80028f4 <HAL_GPIO_Init+0x1e8>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a48      	ldr	r2, [pc, #288]	@ (80029f0 <HAL_GPIO_Init+0x2e4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00d      	beq.n	80028f0 <HAL_GPIO_Init+0x1e4>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a47      	ldr	r2, [pc, #284]	@ (80029f4 <HAL_GPIO_Init+0x2e8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d007      	beq.n	80028ec <HAL_GPIO_Init+0x1e0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a46      	ldr	r2, [pc, #280]	@ (80029f8 <HAL_GPIO_Init+0x2ec>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d101      	bne.n	80028e8 <HAL_GPIO_Init+0x1dc>
 80028e4:	2304      	movs	r3, #4
 80028e6:	e008      	b.n	80028fa <HAL_GPIO_Init+0x1ee>
 80028e8:	2305      	movs	r3, #5
 80028ea:	e006      	b.n	80028fa <HAL_GPIO_Init+0x1ee>
 80028ec:	2303      	movs	r3, #3
 80028ee:	e004      	b.n	80028fa <HAL_GPIO_Init+0x1ee>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e002      	b.n	80028fa <HAL_GPIO_Init+0x1ee>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <HAL_GPIO_Init+0x1ee>
 80028f8:	2300      	movs	r3, #0
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	f002 0203 	and.w	r2, r2, #3
 8002900:	0092      	lsls	r2, r2, #2
 8002902:	4093      	lsls	r3, r2
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800290a:	4937      	ldr	r1, [pc, #220]	@ (80029e8 <HAL_GPIO_Init+0x2dc>)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	3302      	adds	r3, #2
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002918:	4b38      	ldr	r3, [pc, #224]	@ (80029fc <HAL_GPIO_Init+0x2f0>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	43db      	mvns	r3, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800293c:	4a2f      	ldr	r2, [pc, #188]	@ (80029fc <HAL_GPIO_Init+0x2f0>)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002942:	4b2e      	ldr	r3, [pc, #184]	@ (80029fc <HAL_GPIO_Init+0x2f0>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	43db      	mvns	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002966:	4a25      	ldr	r2, [pc, #148]	@ (80029fc <HAL_GPIO_Init+0x2f0>)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800296c:	4b23      	ldr	r3, [pc, #140]	@ (80029fc <HAL_GPIO_Init+0x2f0>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	43db      	mvns	r3, r3
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002990:	4a1a      	ldr	r2, [pc, #104]	@ (80029fc <HAL_GPIO_Init+0x2f0>)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002996:	4b19      	ldr	r3, [pc, #100]	@ (80029fc <HAL_GPIO_Init+0x2f0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	43db      	mvns	r3, r3
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029ba:	4a10      	ldr	r2, [pc, #64]	@ (80029fc <HAL_GPIO_Init+0x2f0>)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	3301      	adds	r3, #1
 80029c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f47f aea3 	bne.w	800271c <HAL_GPIO_Init+0x10>
  }
}
 80029d6:	bf00      	nop
 80029d8:	bf00      	nop
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40010000 	.word	0x40010000
 80029ec:	48000400 	.word	0x48000400
 80029f0:	48000800 	.word	0x48000800
 80029f4:	48000c00 	.word	0x48000c00
 80029f8:	48001000 	.word	0x48001000
 80029fc:	40010400 	.word	0x40010400

08002a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	887b      	ldrh	r3, [r7, #2]
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	e001      	b.n	8002a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	807b      	strh	r3, [r7, #2]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a40:	787b      	ldrb	r3, [r7, #1]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a46:	887a      	ldrh	r2, [r7, #2]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a4c:	e002      	b.n	8002a54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a4e:	887a      	ldrh	r2, [r7, #2]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e081      	b.n	8002b76 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff f99a 	bl	8001dc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2224      	movs	r2, #36	@ 0x24
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ab0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ac0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d107      	bne.n	8002ada <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	e006      	b.n	8002ae8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ae6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d104      	bne.n	8002afa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002af8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69d9      	ldr	r1, [r3, #28]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1a      	ldr	r2, [r3, #32]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	4608      	mov	r0, r1
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	817b      	strh	r3, [r7, #10]
 8002b92:	460b      	mov	r3, r1
 8002b94:	813b      	strh	r3, [r7, #8]
 8002b96:	4613      	mov	r3, r2
 8002b98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b20      	cmp	r3, #32
 8002ba4:	f040 80f9 	bne.w	8002d9a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <HAL_I2C_Mem_Write+0x34>
 8002bae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0ed      	b.n	8002d9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_I2C_Mem_Write+0x4e>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e0e6      	b.n	8002d9c <HAL_I2C_Mem_Write+0x21c>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bd6:	f7ff fc83 	bl	80024e0 <HAL_GetTick>
 8002bda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	2319      	movs	r3, #25
 8002be2:	2201      	movs	r2, #1
 8002be4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 fac3 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0d1      	b.n	8002d9c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2221      	movs	r2, #33	@ 0x21
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2240      	movs	r2, #64	@ 0x40
 8002c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a3a      	ldr	r2, [r7, #32]
 8002c12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c20:	88f8      	ldrh	r0, [r7, #6]
 8002c22:	893a      	ldrh	r2, [r7, #8]
 8002c24:	8979      	ldrh	r1, [r7, #10]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	4603      	mov	r3, r0
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f9d3 	bl	8002fdc <I2C_RequestMemoryWrite>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0a9      	b.n	8002d9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2bff      	cmp	r3, #255	@ 0xff
 8002c50:	d90e      	bls.n	8002c70 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	22ff      	movs	r2, #255	@ 0xff
 8002c56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	8979      	ldrh	r1, [r7, #10]
 8002c60:	2300      	movs	r3, #0
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 fc3d 	bl	80034e8 <I2C_TransferConfig>
 8002c6e:	e00f      	b.n	8002c90 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	8979      	ldrh	r1, [r7, #10]
 8002c82:	2300      	movs	r3, #0
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 fc2c 	bl	80034e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fabc 	bl	8003212 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e07b      	b.n	8002d9c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d034      	beq.n	8002d48 <HAL_I2C_Mem_Write+0x1c8>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d130      	bne.n	8002d48 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cec:	2200      	movs	r2, #0
 8002cee:	2180      	movs	r1, #128	@ 0x80
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fa3f 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e04d      	b.n	8002d9c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2bff      	cmp	r3, #255	@ 0xff
 8002d08:	d90e      	bls.n	8002d28 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	22ff      	movs	r2, #255	@ 0xff
 8002d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	8979      	ldrh	r1, [r7, #10]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 fbe1 	bl	80034e8 <I2C_TransferConfig>
 8002d26:	e00f      	b.n	8002d48 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	8979      	ldrh	r1, [r7, #10]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fbd0 	bl	80034e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d19e      	bne.n	8002c90 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 faa2 	bl	80032a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e01a      	b.n	8002d9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6859      	ldr	r1, [r3, #4]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <HAL_I2C_Mem_Write+0x224>)
 8002d7a:	400b      	ands	r3, r1
 8002d7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e000      	b.n	8002d9c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
  }
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	fe00e800 	.word	0xfe00e800

08002da8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	4608      	mov	r0, r1
 8002db2:	4611      	mov	r1, r2
 8002db4:	461a      	mov	r2, r3
 8002db6:	4603      	mov	r3, r0
 8002db8:	817b      	strh	r3, [r7, #10]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	813b      	strh	r3, [r7, #8]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	f040 80fd 	bne.w	8002fca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_I2C_Mem_Read+0x34>
 8002dd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d105      	bne.n	8002de8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002de2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0f1      	b.n	8002fcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_I2C_Mem_Read+0x4e>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e0ea      	b.n	8002fcc <HAL_I2C_Mem_Read+0x224>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dfe:	f7ff fb6f 	bl	80024e0 <HAL_GetTick>
 8002e02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	2319      	movs	r3, #25
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f9af 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0d5      	b.n	8002fcc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2222      	movs	r2, #34	@ 0x22
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2240      	movs	r2, #64	@ 0x40
 8002e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a3a      	ldr	r2, [r7, #32]
 8002e3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e48:	88f8      	ldrh	r0, [r7, #6]
 8002e4a:	893a      	ldrh	r2, [r7, #8]
 8002e4c:	8979      	ldrh	r1, [r7, #10]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	9301      	str	r3, [sp, #4]
 8002e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	4603      	mov	r3, r0
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f913 	bl	8003084 <I2C_RequestMemoryRead>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0ad      	b.n	8002fcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2bff      	cmp	r3, #255	@ 0xff
 8002e78:	d90e      	bls.n	8002e98 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	22ff      	movs	r2, #255	@ 0xff
 8002e7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	8979      	ldrh	r1, [r7, #10]
 8002e88:	4b52      	ldr	r3, [pc, #328]	@ (8002fd4 <HAL_I2C_Mem_Read+0x22c>)
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fb29 	bl	80034e8 <I2C_TransferConfig>
 8002e96:	e00f      	b.n	8002eb8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	8979      	ldrh	r1, [r7, #10]
 8002eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd4 <HAL_I2C_Mem_Read+0x22c>)
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fb18 	bl	80034e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2104      	movs	r1, #4
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f956 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e07c      	b.n	8002fcc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d034      	beq.n	8002f78 <HAL_I2C_Mem_Read+0x1d0>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d130      	bne.n	8002f78 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2180      	movs	r1, #128	@ 0x80
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f927 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e04d      	b.n	8002fcc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2bff      	cmp	r3, #255	@ 0xff
 8002f38:	d90e      	bls.n	8002f58 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	22ff      	movs	r2, #255	@ 0xff
 8002f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	8979      	ldrh	r1, [r7, #10]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 fac9 	bl	80034e8 <I2C_TransferConfig>
 8002f56:	e00f      	b.n	8002f78 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	8979      	ldrh	r1, [r7, #10]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fab8 	bl	80034e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d19a      	bne.n	8002eb8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f98a 	bl	80032a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e01a      	b.n	8002fcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd8 <HAL_I2C_Mem_Read+0x230>)
 8002faa:	400b      	ands	r3, r1
 8002fac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e000      	b.n	8002fcc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002fca:	2302      	movs	r3, #2
  }
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	80002400 	.word	0x80002400
 8002fd8:	fe00e800 	.word	0xfe00e800

08002fdc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	4608      	mov	r0, r1
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4603      	mov	r3, r0
 8002fec:	817b      	strh	r3, [r7, #10]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	813b      	strh	r3, [r7, #8]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	8979      	ldrh	r1, [r7, #10]
 8002ffc:	4b20      	ldr	r3, [pc, #128]	@ (8003080 <I2C_RequestMemoryWrite+0xa4>)
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fa6f 	bl	80034e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	69b9      	ldr	r1, [r7, #24]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f8ff 	bl	8003212 <I2C_WaitOnTXISFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e02c      	b.n	8003078 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d105      	bne.n	8003030 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003024:	893b      	ldrh	r3, [r7, #8]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	629a      	str	r2, [r3, #40]	@ 0x28
 800302e:	e015      	b.n	800305c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003030:	893b      	ldrh	r3, [r7, #8]
 8003032:	0a1b      	lsrs	r3, r3, #8
 8003034:	b29b      	uxth	r3, r3
 8003036:	b2da      	uxtb	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	69b9      	ldr	r1, [r7, #24]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f8e5 	bl	8003212 <I2C_WaitOnTXISFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e012      	b.n	8003078 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003052:	893b      	ldrh	r3, [r7, #8]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2200      	movs	r2, #0
 8003064:	2180      	movs	r1, #128	@ 0x80
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f884 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	80002000 	.word	0x80002000

08003084 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	4608      	mov	r0, r1
 800308e:	4611      	mov	r1, r2
 8003090:	461a      	mov	r2, r3
 8003092:	4603      	mov	r3, r0
 8003094:	817b      	strh	r3, [r7, #10]
 8003096:	460b      	mov	r3, r1
 8003098:	813b      	strh	r3, [r7, #8]
 800309a:	4613      	mov	r3, r2
 800309c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	8979      	ldrh	r1, [r7, #10]
 80030a4:	4b20      	ldr	r3, [pc, #128]	@ (8003128 <I2C_RequestMemoryRead+0xa4>)
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	2300      	movs	r3, #0
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 fa1c 	bl	80034e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b0:	69fa      	ldr	r2, [r7, #28]
 80030b2:	69b9      	ldr	r1, [r7, #24]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f8ac 	bl	8003212 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e02c      	b.n	800311e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d105      	bne.n	80030d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030ca:	893b      	ldrh	r3, [r7, #8]
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80030d4:	e015      	b.n	8003102 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030d6:	893b      	ldrh	r3, [r7, #8]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	b29b      	uxth	r3, r3
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	69b9      	ldr	r1, [r7, #24]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f892 	bl	8003212 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e012      	b.n	800311e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030f8:	893b      	ldrh	r3, [r7, #8]
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2200      	movs	r2, #0
 800310a:	2140      	movs	r1, #64	@ 0x40
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f831 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	80002000 	.word	0x80002000

0800312c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b02      	cmp	r3, #2
 8003140:	d103      	bne.n	800314a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d007      	beq.n	8003168 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	619a      	str	r2, [r3, #24]
  }
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003184:	e031      	b.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d02d      	beq.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318e:	f7ff f9a7 	bl	80024e0 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d302      	bcc.n	80031a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d122      	bne.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	4013      	ands	r3, r2
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d113      	bne.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	f043 0220 	orr.w	r2, r3, #32
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e00f      	b.n	800320a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699a      	ldr	r2, [r3, #24]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4013      	ands	r3, r2
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	bf0c      	ite	eq
 80031fa:	2301      	moveq	r3, #1
 80031fc:	2300      	movne	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	429a      	cmp	r2, r3
 8003206:	d0be      	beq.n	8003186 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800321e:	e033      	b.n	8003288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	68b9      	ldr	r1, [r7, #8]
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 f87f 	bl	8003328 <I2C_IsErrorOccurred>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e031      	b.n	8003298 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323a:	d025      	beq.n	8003288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323c:	f7ff f950 	bl	80024e0 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	429a      	cmp	r2, r3
 800324a:	d302      	bcc.n	8003252 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d11a      	bne.n	8003288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b02      	cmp	r3, #2
 800325e:	d013      	beq.n	8003288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e007      	b.n	8003298 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b02      	cmp	r3, #2
 8003294:	d1c4      	bne.n	8003220 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ac:	e02f      	b.n	800330e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f838 	bl	8003328 <I2C_IsErrorOccurred>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e02d      	b.n	800331e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c2:	f7ff f90d 	bl	80024e0 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d302      	bcc.n	80032d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d11a      	bne.n	800330e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d013      	beq.n	800330e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ea:	f043 0220 	orr.w	r2, r3, #32
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e007      	b.n	800331e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b20      	cmp	r3, #32
 800331a:	d1c8      	bne.n	80032ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	@ 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b00      	cmp	r3, #0
 8003352:	d068      	beq.n	8003426 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2210      	movs	r2, #16
 800335a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800335c:	e049      	b.n	80033f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d045      	beq.n	80033f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003366:	f7ff f8bb 	bl	80024e0 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <I2C_IsErrorOccurred+0x54>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d13a      	bne.n	80033f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003386:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800338e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800339a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800339e:	d121      	bne.n	80033e4 <I2C_IsErrorOccurred+0xbc>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033a6:	d01d      	beq.n	80033e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80033a8:	7cfb      	ldrb	r3, [r7, #19]
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	d01a      	beq.n	80033e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033be:	f7ff f88f 	bl	80024e0 <HAL_GetTick>
 80033c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033c4:	e00e      	b.n	80033e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033c6:	f7ff f88b 	bl	80024e0 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b19      	cmp	r3, #25
 80033d2:	d907      	bls.n	80033e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	f043 0320 	orr.w	r3, r3, #32
 80033da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80033e2:	e006      	b.n	80033f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d1e9      	bne.n	80033c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d003      	beq.n	8003408 <I2C_IsErrorOccurred+0xe0>
 8003400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0aa      	beq.n	800335e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800340c:	2b00      	cmp	r3, #0
 800340e:	d103      	bne.n	8003418 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2220      	movs	r2, #32
 8003416:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00b      	beq.n	8003450 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003448:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00b      	beq.n	8003472 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	f043 0308 	orr.w	r3, r3, #8
 8003460:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800346a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00b      	beq.n	8003494 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	f043 0302 	orr.w	r3, r3, #2
 8003482:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800348c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01c      	beq.n	80034d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f7ff fe45 	bl	800312c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4b0d      	ldr	r3, [pc, #52]	@ (80034e4 <I2C_IsErrorOccurred+0x1bc>)
 80034ae:	400b      	ands	r3, r1
 80034b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80034d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3728      	adds	r7, #40	@ 0x28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	fe00e800 	.word	0xfe00e800

080034e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	817b      	strh	r3, [r7, #10]
 80034f6:	4613      	mov	r3, r2
 80034f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034fa:	897b      	ldrh	r3, [r7, #10]
 80034fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003500:	7a7b      	ldrb	r3, [r7, #9]
 8003502:	041b      	lsls	r3, r3, #16
 8003504:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003508:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	4313      	orrs	r3, r2
 8003512:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003516:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	0d5b      	lsrs	r3, r3, #21
 8003522:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003526:	4b08      	ldr	r3, [pc, #32]	@ (8003548 <I2C_TransferConfig+0x60>)
 8003528:	430b      	orrs	r3, r1
 800352a:	43db      	mvns	r3, r3
 800352c:	ea02 0103 	and.w	r1, r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	03ff63ff 	.word	0x03ff63ff

0800354c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b20      	cmp	r3, #32
 8003560:	d138      	bne.n	80035d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800356c:	2302      	movs	r3, #2
 800356e:	e032      	b.n	80035d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2224      	movs	r2, #36	@ 0x24
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800359e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6819      	ldr	r1, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e000      	b.n	80035d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
  }
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d139      	bne.n	800366c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003602:	2302      	movs	r3, #2
 8003604:	e033      	b.n	800366e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2224      	movs	r2, #36	@ 0x24
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003634:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	e000      	b.n	800366e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003682:	af00      	add	r7, sp, #0
 8003684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003688:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800368c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800368e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003692:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	f001 b823 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 817d 	beq.w	80039b2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80036b8:	4bbc      	ldr	r3, [pc, #752]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d00c      	beq.n	80036de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036c4:	4bb9      	ldr	r3, [pc, #740]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 030c 	and.w	r3, r3, #12
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d15c      	bne.n	800378a <HAL_RCC_OscConfig+0x10e>
 80036d0:	4bb6      	ldr	r3, [pc, #728]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036dc:	d155      	bne.n	800378a <HAL_RCC_OscConfig+0x10e>
 80036de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036e2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d102      	bne.n	8003710 <HAL_RCC_OscConfig+0x94>
 800370a:	4ba8      	ldr	r3, [pc, #672]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	e015      	b.n	800373c <HAL_RCC_OscConfig+0xc0>
 8003710:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003714:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003724:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003728:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800372c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003738:	4b9c      	ldr	r3, [pc, #624]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003740:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003744:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003748:	fa92 f2a2 	rbit	r2, r2
 800374c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003750:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003754:	fab2 f282 	clz	r2, r2
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	f042 0220 	orr.w	r2, r2, #32
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	f002 021f 	and.w	r2, r2, #31
 8003764:	2101      	movs	r1, #1
 8003766:	fa01 f202 	lsl.w	r2, r1, r2
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 811f 	beq.w	80039b0 <HAL_RCC_OscConfig+0x334>
 8003772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003776:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f040 8116 	bne.w	80039b0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	f000 bfaf 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800378a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800379a:	d106      	bne.n	80037aa <HAL_RCC_OscConfig+0x12e>
 800379c:	4b83      	ldr	r3, [pc, #524]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a82      	ldr	r2, [pc, #520]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	e036      	b.n	8003818 <HAL_RCC_OscConfig+0x19c>
 80037aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x158>
 80037ba:	4b7c      	ldr	r3, [pc, #496]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7b      	ldr	r2, [pc, #492]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b79      	ldr	r3, [pc, #484]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a78      	ldr	r2, [pc, #480]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e021      	b.n	8003818 <HAL_RCC_OscConfig+0x19c>
 80037d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x184>
 80037e6:	4b71      	ldr	r3, [pc, #452]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a70      	ldr	r2, [pc, #448]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b6e      	ldr	r3, [pc, #440]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a6d      	ldr	r2, [pc, #436]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0x19c>
 8003800:	4b6a      	ldr	r3, [pc, #424]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a69      	ldr	r2, [pc, #420]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 8003806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b67      	ldr	r3, [pc, #412]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a66      	ldr	r2, [pc, #408]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 8003812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003816:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003818:	4b64      	ldr	r3, [pc, #400]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	f023 020f 	bic.w	r2, r3, #15
 8003820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003824:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	495f      	ldr	r1, [pc, #380]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 800382e:	4313      	orrs	r3, r2
 8003830:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003836:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d059      	beq.n	80038f6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7fe fe4d 	bl	80024e0 <HAL_GetTick>
 8003846:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800384c:	f7fe fe48 	bl	80024e0 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b64      	cmp	r3, #100	@ 0x64
 800385a:	d902      	bls.n	8003862 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	f000 bf43 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>
 8003862:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003866:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003876:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b01      	cmp	r3, #1
 800388c:	d102      	bne.n	8003894 <HAL_RCC_OscConfig+0x218>
 800388e:	4b47      	ldr	r3, [pc, #284]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	e015      	b.n	80038c0 <HAL_RCC_OscConfig+0x244>
 8003894:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003898:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80038a0:	fa93 f3a3 	rbit	r3, r3
 80038a4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80038a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038ac:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80038b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80038bc:	4b3b      	ldr	r3, [pc, #236]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80038c4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80038c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80038cc:	fa92 f2a2 	rbit	r2, r2
 80038d0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80038d4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80038d8:	fab2 f282 	clz	r2, r2
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	f042 0220 	orr.w	r2, r2, #32
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	f002 021f 	and.w	r2, r2, #31
 80038e8:	2101      	movs	r1, #1
 80038ea:	fa01 f202 	lsl.w	r2, r1, r2
 80038ee:	4013      	ands	r3, r2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ab      	beq.n	800384c <HAL_RCC_OscConfig+0x1d0>
 80038f4:	e05d      	b.n	80039b2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f6:	f7fe fdf3 	bl	80024e0 <HAL_GetTick>
 80038fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003900:	f7fe fdee 	bl	80024e0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b64      	cmp	r3, #100	@ 0x64
 800390e:	d902      	bls.n	8003916 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	f000 bee9 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>
 8003916:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800391a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800392a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392e:	fab3 f383 	clz	r3, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	d102      	bne.n	8003948 <HAL_RCC_OscConfig+0x2cc>
 8003942:	4b1a      	ldr	r3, [pc, #104]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	e015      	b.n	8003974 <HAL_RCC_OscConfig+0x2f8>
 8003948:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800394c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003954:	fa93 f3a3 	rbit	r3, r3
 8003958:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800395c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003960:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003964:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003968:	fa93 f3a3 	rbit	r3, r3
 800396c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003970:	4b0e      	ldr	r3, [pc, #56]	@ (80039ac <HAL_RCC_OscConfig+0x330>)
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003978:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800397c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003980:	fa92 f2a2 	rbit	r2, r2
 8003984:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003988:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800398c:	fab2 f282 	clz	r2, r2
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	f042 0220 	orr.w	r2, r2, #32
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	f002 021f 	and.w	r2, r2, #31
 800399c:	2101      	movs	r1, #1
 800399e:	fa01 f202 	lsl.w	r2, r1, r2
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1ab      	bne.n	8003900 <HAL_RCC_OscConfig+0x284>
 80039a8:	e003      	b.n	80039b2 <HAL_RCC_OscConfig+0x336>
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 817d 	beq.w	8003cc2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039c8:	4ba6      	ldr	r3, [pc, #664]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 030c 	and.w	r3, r3, #12
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00b      	beq.n	80039ec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039d4:	4ba3      	ldr	r3, [pc, #652]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d172      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x44a>
 80039e0:	4ba0      	ldr	r3, [pc, #640]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d16c      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x44a>
 80039ec:	2302      	movs	r3, #2
 80039ee:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80039fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d102      	bne.n	8003a1c <HAL_RCC_OscConfig+0x3a0>
 8003a16:	4b93      	ldr	r3, [pc, #588]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	e013      	b.n	8003a44 <HAL_RCC_OscConfig+0x3c8>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003a26:	fa93 f3a3 	rbit	r3, r3
 8003a2a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003a2e:	2302      	movs	r3, #2
 8003a30:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003a34:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003a40:	4b88      	ldr	r3, [pc, #544]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	2202      	movs	r2, #2
 8003a46:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003a4a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003a4e:	fa92 f2a2 	rbit	r2, r2
 8003a52:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003a56:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003a5a:	fab2 f282 	clz	r2, r2
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	f042 0220 	orr.w	r2, r2, #32
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	f002 021f 	and.w	r2, r2, #31
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_RCC_OscConfig+0x410>
 8003a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d002      	beq.n	8003a8c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f000 be2e 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8c:	4b75      	ldr	r3, [pc, #468]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	21f8      	movs	r1, #248	@ 0xf8
 8003aa2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003aaa:	fa91 f1a1 	rbit	r1, r1
 8003aae:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003ab2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003ab6:	fab1 f181 	clz	r1, r1
 8003aba:	b2c9      	uxtb	r1, r1
 8003abc:	408b      	lsls	r3, r1
 8003abe:	4969      	ldr	r1, [pc, #420]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac4:	e0fd      	b.n	8003cc2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 8088 	beq.w	8003be8 <HAL_RCC_OscConfig+0x56c>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003aea:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aee:	fab3 f383 	clz	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003af8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	461a      	mov	r2, r3
 8003b00:	2301      	movs	r3, #1
 8003b02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b04:	f7fe fcec 	bl	80024e0 <HAL_GetTick>
 8003b08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b0e:	f7fe fce7 	bl	80024e0 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d902      	bls.n	8003b24 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	f000 bde2 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>
 8003b24:	2302      	movs	r3, #2
 8003b26:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003b2e:	fa93 f3a3 	rbit	r3, r3
 8003b32:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003b36:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3a:	fab3 f383 	clz	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d102      	bne.n	8003b54 <HAL_RCC_OscConfig+0x4d8>
 8003b4e:	4b45      	ldr	r3, [pc, #276]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	e013      	b.n	8003b7c <HAL_RCC_OscConfig+0x500>
 8003b54:	2302      	movs	r3, #2
 8003b56:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003b66:	2302      	movs	r3, #2
 8003b68:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003b6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003b78:	4b3a      	ldr	r3, [pc, #232]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003b82:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003b86:	fa92 f2a2 	rbit	r2, r2
 8003b8a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003b8e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003b92:	fab2 f282 	clz	r2, r2
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	f042 0220 	orr.w	r2, r2, #32
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	f002 021f 	and.w	r2, r2, #31
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0af      	beq.n	8003b0e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bae:	4b2d      	ldr	r3, [pc, #180]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	21f8      	movs	r1, #248	@ 0xf8
 8003bc4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003bcc:	fa91 f1a1 	rbit	r1, r1
 8003bd0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003bd4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003bd8:	fab1 f181 	clz	r1, r1
 8003bdc:	b2c9      	uxtb	r1, r1
 8003bde:	408b      	lsls	r3, r1
 8003be0:	4920      	ldr	r1, [pc, #128]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
 8003be6:	e06c      	b.n	8003cc2 <HAL_RCC_OscConfig+0x646>
 8003be8:	2301      	movs	r3, #1
 8003bea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003bfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c08:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	461a      	mov	r2, r3
 8003c10:	2300      	movs	r3, #0
 8003c12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fe fc64 	bl	80024e0 <HAL_GetTick>
 8003c18:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c1e:	f7fe fc5f 	bl	80024e0 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d902      	bls.n	8003c34 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	f000 bd5a 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>
 8003c34:	2302      	movs	r3, #2
 8003c36:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003c3e:	fa93 f3a3 	rbit	r3, r3
 8003c42:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4a:	fab3 f383 	clz	r3, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d104      	bne.n	8003c68 <HAL_RCC_OscConfig+0x5ec>
 8003c5e:	4b01      	ldr	r3, [pc, #4]	@ (8003c64 <HAL_RCC_OscConfig+0x5e8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	e015      	b.n	8003c90 <HAL_RCC_OscConfig+0x614>
 8003c64:	40021000 	.word	0x40021000
 8003c68:	2302      	movs	r3, #2
 8003c6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003c80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c84:	fa93 f3a3 	rbit	r3, r3
 8003c88:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003c8c:	4bc8      	ldr	r3, [pc, #800]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	2202      	movs	r2, #2
 8003c92:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003c96:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003c9a:	fa92 f2a2 	rbit	r2, r2
 8003c9e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003ca2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003ca6:	fab2 f282 	clz	r2, r2
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	f042 0220 	orr.w	r2, r2, #32
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	f002 021f 	and.w	r2, r2, #31
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1ad      	bne.n	8003c1e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 8110 	beq.w	8003ef8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cdc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d079      	beq.n	8003ddc <HAL_RCC_OscConfig+0x760>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cfe:	fab3 f383 	clz	r3, r3
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	4bab      	ldr	r3, [pc, #684]	@ (8003fb4 <HAL_RCC_OscConfig+0x938>)
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2301      	movs	r3, #1
 8003d10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d12:	f7fe fbe5 	bl	80024e0 <HAL_GetTick>
 8003d16:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1a:	e00a      	b.n	8003d32 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d1c:	f7fe fbe0 	bl	80024e0 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d902      	bls.n	8003d32 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	f000 bcdb 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>
 8003d32:	2302      	movs	r3, #2
 8003d34:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d38:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d48:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d54:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	fa93 f2a3 	rbit	r2, r3
 8003d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d70:	2202      	movs	r2, #2
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	fa93 f2a3 	rbit	r2, r3
 8003d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003d8a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8c:	4b88      	ldr	r3, [pc, #544]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003d8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d94:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003d98:	2102      	movs	r1, #2
 8003d9a:	6019      	str	r1, [r3, #0]
 8003d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	fa93 f1a3 	rbit	r1, r3
 8003daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003db2:	6019      	str	r1, [r3, #0]
  return result;
 8003db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	fab3 f383 	clz	r3, r3
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	f003 031f 	and.w	r3, r3, #31
 8003dce:	2101      	movs	r1, #1
 8003dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0a0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x6a0>
 8003dda:	e08d      	b.n	8003ef8 <HAL_RCC_OscConfig+0x87c>
 8003ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003de4:	2201      	movs	r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	fa93 f2a3 	rbit	r2, r3
 8003df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dfa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003dfe:	601a      	str	r2, [r3, #0]
  return result;
 8003e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e04:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003e08:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e0a:	fab3 f383 	clz	r3, r3
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	4b68      	ldr	r3, [pc, #416]	@ (8003fb4 <HAL_RCC_OscConfig+0x938>)
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1e:	f7fe fb5f 	bl	80024e0 <HAL_GetTick>
 8003e22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e28:	f7fe fb5a 	bl	80024e0 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d902      	bls.n	8003e3e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	f000 bc55 	b.w	80046e8 <HAL_RCC_OscConfig+0x106c>
 8003e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e42:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003e46:	2202      	movs	r2, #2
 8003e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e4e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	fa93 f2a3 	rbit	r2, r3
 8003e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e5c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e66:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e72:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	fa93 f2a3 	rbit	r2, r3
 8003e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e8a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003e8e:	2202      	movs	r2, #2
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e96:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	fa93 f2a3 	rbit	r2, r3
 8003ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003ea8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eaa:	4b41      	ldr	r3, [pc, #260]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003eac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	6019      	str	r1, [r3, #0]
 8003eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ebe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	fa93 f1a3 	rbit	r1, r3
 8003ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ecc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003ed0:	6019      	str	r1, [r3, #0]
  return result;
 8003ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	fab3 f383 	clz	r3, r3
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2101      	movs	r1, #1
 8003eee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d197      	bne.n	8003e28 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003efc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 81a1 	beq.w	8004250 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f14:	4b26      	ldr	r3, [pc, #152]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d116      	bne.n	8003f4e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f20:	4b23      	ldr	r3, [pc, #140]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	4a22      	ldr	r2, [pc, #136]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003f26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f2a:	61d3      	str	r3, [r2, #28]
 8003f2c:	4b20      	ldr	r3, [pc, #128]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f38:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f42:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003f46:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb8 <HAL_RCC_OscConfig+0x93c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d11a      	bne.n	8003f90 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f5a:	4b17      	ldr	r3, [pc, #92]	@ (8003fb8 <HAL_RCC_OscConfig+0x93c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a16      	ldr	r2, [pc, #88]	@ (8003fb8 <HAL_RCC_OscConfig+0x93c>)
 8003f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f66:	f7fe fabb 	bl	80024e0 <HAL_GetTick>
 8003f6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6e:	e009      	b.n	8003f84 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f70:	f7fe fab6 	bl	80024e0 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b64      	cmp	r3, #100	@ 0x64
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e3b1      	b.n	80046e8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f84:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb8 <HAL_RCC_OscConfig+0x93c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0ef      	beq.n	8003f70 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d10d      	bne.n	8003fbc <HAL_RCC_OscConfig+0x940>
 8003fa0:	4b03      	ldr	r3, [pc, #12]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	4a02      	ldr	r2, [pc, #8]	@ (8003fb0 <HAL_RCC_OscConfig+0x934>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6213      	str	r3, [r2, #32]
 8003fac:	e03c      	b.n	8004028 <HAL_RCC_OscConfig+0x9ac>
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	10908120 	.word	0x10908120
 8003fb8:	40007000 	.word	0x40007000
 8003fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10c      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x96a>
 8003fcc:	4bc1      	ldr	r3, [pc, #772]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	4ac0      	ldr	r2, [pc, #768]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	6213      	str	r3, [r2, #32]
 8003fd8:	4bbe      	ldr	r3, [pc, #760]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	4abd      	ldr	r2, [pc, #756]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8003fde:	f023 0304 	bic.w	r3, r3, #4
 8003fe2:	6213      	str	r3, [r2, #32]
 8003fe4:	e020      	b.n	8004028 <HAL_RCC_OscConfig+0x9ac>
 8003fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCC_OscConfig+0x994>
 8003ff6:	4bb7      	ldr	r3, [pc, #732]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	4ab6      	ldr	r2, [pc, #728]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8003ffc:	f043 0304 	orr.w	r3, r3, #4
 8004000:	6213      	str	r3, [r2, #32]
 8004002:	4bb4      	ldr	r3, [pc, #720]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	4ab3      	ldr	r2, [pc, #716]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6213      	str	r3, [r2, #32]
 800400e:	e00b      	b.n	8004028 <HAL_RCC_OscConfig+0x9ac>
 8004010:	4bb0      	ldr	r3, [pc, #704]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	4aaf      	ldr	r2, [pc, #700]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	6213      	str	r3, [r2, #32]
 800401c:	4bad      	ldr	r3, [pc, #692]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	4aac      	ldr	r2, [pc, #688]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8004022:	f023 0304 	bic.w	r3, r3, #4
 8004026:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8081 	beq.w	800413c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800403a:	f7fe fa51 	bl	80024e0 <HAL_GetTick>
 800403e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004042:	e00b      	b.n	800405c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004044:	f7fe fa4c 	bl	80024e0 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e345      	b.n	80046e8 <HAL_RCC_OscConfig+0x106c>
 800405c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004060:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004064:	2202      	movs	r2, #2
 8004066:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800406c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	fa93 f2a3 	rbit	r2, r3
 8004076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800407a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004084:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004088:	2202      	movs	r2, #2
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004090:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	fa93 f2a3 	rbit	r2, r3
 800409a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800409e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80040a2:	601a      	str	r2, [r3, #0]
  return result;
 80040a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80040ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f043 0302 	orr.w	r3, r3, #2
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d102      	bne.n	80040c8 <HAL_RCC_OscConfig+0xa4c>
 80040c2:	4b84      	ldr	r3, [pc, #528]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	e013      	b.n	80040f0 <HAL_RCC_OscConfig+0xa74>
 80040c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040cc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80040d0:	2202      	movs	r2, #2
 80040d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	fa93 f2a3 	rbit	r2, r3
 80040e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	4b79      	ldr	r3, [pc, #484]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040f4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80040f8:	2102      	movs	r1, #2
 80040fa:	6011      	str	r1, [r2, #0]
 80040fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004100:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	fa92 f1a2 	rbit	r1, r2
 800410a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800410e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004112:	6011      	str	r1, [r2, #0]
  return result;
 8004114:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004118:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	fab2 f282 	clz	r2, r2
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	f002 021f 	and.w	r2, r2, #31
 800412e:	2101      	movs	r1, #1
 8004130:	fa01 f202 	lsl.w	r2, r1, r2
 8004134:	4013      	ands	r3, r2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d084      	beq.n	8004044 <HAL_RCC_OscConfig+0x9c8>
 800413a:	e07f      	b.n	800423c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413c:	f7fe f9d0 	bl	80024e0 <HAL_GetTick>
 8004140:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004144:	e00b      	b.n	800415e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004146:	f7fe f9cb 	bl	80024e0 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e2c4      	b.n	80046e8 <HAL_RCC_OscConfig+0x106c>
 800415e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004162:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004166:	2202      	movs	r2, #2
 8004168:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800416e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	fa93 f2a3 	rbit	r2, r3
 8004178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800417c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004186:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800418a:	2202      	movs	r2, #2
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004192:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	fa93 f2a3 	rbit	r2, r3
 800419c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80041a4:	601a      	str	r2, [r3, #0]
  return result;
 80041a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041aa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80041ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b0:	fab3 f383 	clz	r3, r3
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f043 0302 	orr.w	r3, r3, #2
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d102      	bne.n	80041ca <HAL_RCC_OscConfig+0xb4e>
 80041c4:	4b43      	ldr	r3, [pc, #268]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	e013      	b.n	80041f2 <HAL_RCC_OscConfig+0xb76>
 80041ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ce:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80041d2:	2202      	movs	r2, #2
 80041d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041da:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	fa93 f2a3 	rbit	r2, r3
 80041e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	4b39      	ldr	r3, [pc, #228]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 80041f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041f6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80041fa:	2102      	movs	r1, #2
 80041fc:	6011      	str	r1, [r2, #0]
 80041fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004202:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	fa92 f1a2 	rbit	r1, r2
 800420c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004210:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004214:	6011      	str	r1, [r2, #0]
  return result;
 8004216:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800421a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	fab2 f282 	clz	r2, r2
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	f002 021f 	and.w	r2, r2, #31
 8004230:	2101      	movs	r1, #1
 8004232:	fa01 f202 	lsl.w	r2, r1, r2
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d184      	bne.n	8004146 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800423c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004240:	2b01      	cmp	r3, #1
 8004242:	d105      	bne.n	8004250 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004244:	4b23      	ldr	r3, [pc, #140]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	4a22      	ldr	r2, [pc, #136]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 800424a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800424e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004254:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8242 	beq.w	80046e6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004262:	4b1c      	ldr	r3, [pc, #112]	@ (80042d4 <HAL_RCC_OscConfig+0xc58>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b08      	cmp	r3, #8
 800426c:	f000 8213 	beq.w	8004696 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004274:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	2b02      	cmp	r3, #2
 800427e:	f040 8162 	bne.w	8004546 <HAL_RCC_OscConfig+0xeca>
 8004282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004286:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800428a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800428e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004294:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	fa93 f2a3 	rbit	r2, r3
 800429e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80042a6:	601a      	str	r2, [r3, #0]
  return result;
 80042a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ac:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80042b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80042bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	461a      	mov	r2, r3
 80042c4:	2300      	movs	r3, #0
 80042c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fe f90a 	bl	80024e0 <HAL_GetTick>
 80042cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d0:	e00c      	b.n	80042ec <HAL_RCC_OscConfig+0xc70>
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d8:	f7fe f902 	bl	80024e0 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e1fd      	b.n	80046e8 <HAL_RCC_OscConfig+0x106c>
 80042ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80042f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042fe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	fa93 f2a3 	rbit	r2, r3
 8004308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800430c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004310:	601a      	str	r2, [r3, #0]
  return result;
 8004312:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004316:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800431a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800431c:	fab3 f383 	clz	r3, r3
 8004320:	b2db      	uxtb	r3, r3
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	d102      	bne.n	8004336 <HAL_RCC_OscConfig+0xcba>
 8004330:	4bb0      	ldr	r3, [pc, #704]	@ (80045f4 <HAL_RCC_OscConfig+0xf78>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	e027      	b.n	8004386 <HAL_RCC_OscConfig+0xd0a>
 8004336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800433a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800433e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004348:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	fa93 f2a3 	rbit	r2, r3
 8004352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004356:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004360:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004364:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800436e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	fa93 f2a3 	rbit	r2, r3
 8004378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800437c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	4b9c      	ldr	r3, [pc, #624]	@ (80045f4 <HAL_RCC_OscConfig+0xf78>)
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800438a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800438e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004392:	6011      	str	r1, [r2, #0]
 8004394:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004398:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	fa92 f1a2 	rbit	r1, r2
 80043a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043a6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80043aa:	6011      	str	r1, [r2, #0]
  return result;
 80043ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043b0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	fab2 f282 	clz	r2, r2
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	f042 0220 	orr.w	r2, r2, #32
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	f002 021f 	and.w	r2, r2, #31
 80043c6:	2101      	movs	r1, #1
 80043c8:	fa01 f202 	lsl.w	r2, r1, r2
 80043cc:	4013      	ands	r3, r2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d182      	bne.n	80042d8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d2:	4b88      	ldr	r3, [pc, #544]	@ (80045f4 <HAL_RCC_OscConfig+0xf78>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80043da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80043e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	430b      	orrs	r3, r1
 80043f4:	497f      	ldr	r1, [pc, #508]	@ (80045f4 <HAL_RCC_OscConfig+0xf78>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]
 80043fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fe:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004402:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	fa93 f2a3 	rbit	r2, r3
 8004416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800441a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800441e:	601a      	str	r2, [r3, #0]
  return result;
 8004420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004424:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004428:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800442a:	fab3 f383 	clz	r3, r3
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004434:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	461a      	mov	r2, r3
 800443c:	2301      	movs	r3, #1
 800443e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fe f84e 	bl	80024e0 <HAL_GetTick>
 8004444:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004448:	e009      	b.n	800445e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444a:	f7fe f849 	bl	80024e0 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e144      	b.n	80046e8 <HAL_RCC_OscConfig+0x106c>
 800445e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004462:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004466:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800446a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004470:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	fa93 f2a3 	rbit	r2, r3
 800447a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004482:	601a      	str	r2, [r3, #0]
  return result;
 8004484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004488:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800448c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800448e:	fab3 f383 	clz	r3, r3
 8004492:	b2db      	uxtb	r3, r3
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d102      	bne.n	80044a8 <HAL_RCC_OscConfig+0xe2c>
 80044a2:	4b54      	ldr	r3, [pc, #336]	@ (80045f4 <HAL_RCC_OscConfig+0xf78>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	e027      	b.n	80044f8 <HAL_RCC_OscConfig+0xe7c>
 80044a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ac:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80044b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ba:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	fa93 f2a3 	rbit	r2, r3
 80044c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80044d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044e0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	fa93 f2a3 	rbit	r2, r3
 80044ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ee:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	4b3f      	ldr	r3, [pc, #252]	@ (80045f4 <HAL_RCC_OscConfig+0xf78>)
 80044f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044fc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004500:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004504:	6011      	str	r1, [r2, #0]
 8004506:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800450a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	fa92 f1a2 	rbit	r1, r2
 8004514:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004518:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800451c:	6011      	str	r1, [r2, #0]
  return result;
 800451e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004522:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	fab2 f282 	clz	r2, r2
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	f042 0220 	orr.w	r2, r2, #32
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	f002 021f 	and.w	r2, r2, #31
 8004538:	2101      	movs	r1, #1
 800453a:	fa01 f202 	lsl.w	r2, r1, r2
 800453e:	4013      	ands	r3, r2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d082      	beq.n	800444a <HAL_RCC_OscConfig+0xdce>
 8004544:	e0cf      	b.n	80046e6 <HAL_RCC_OscConfig+0x106a>
 8004546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800454a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800454e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004558:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	fa93 f2a3 	rbit	r2, r3
 8004562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004566:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800456a:	601a      	str	r2, [r3, #0]
  return result;
 800456c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004570:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004574:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004580:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	461a      	mov	r2, r3
 8004588:	2300      	movs	r3, #0
 800458a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fd ffa8 	bl	80024e0 <HAL_GetTick>
 8004590:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004594:	e009      	b.n	80045aa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004596:	f7fd ffa3 	bl	80024e0 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e09e      	b.n	80046e8 <HAL_RCC_OscConfig+0x106c>
 80045aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ae:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80045b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045bc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	fa93 f2a3 	rbit	r2, r3
 80045c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ca:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80045ce:	601a      	str	r2, [r3, #0]
  return result;
 80045d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045d4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80045d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045da:	fab3 f383 	clz	r3, r3
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	095b      	lsrs	r3, r3, #5
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d104      	bne.n	80045f8 <HAL_RCC_OscConfig+0xf7c>
 80045ee:	4b01      	ldr	r3, [pc, #4]	@ (80045f4 <HAL_RCC_OscConfig+0xf78>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	e029      	b.n	8004648 <HAL_RCC_OscConfig+0xfcc>
 80045f4:	40021000 	.word	0x40021000
 80045f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045fc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004600:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800460a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	fa93 f2a3 	rbit	r2, r3
 8004614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004618:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004622:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004626:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004630:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	fa93 f2a3 	rbit	r2, r3
 800463a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800463e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	4b2b      	ldr	r3, [pc, #172]	@ (80046f4 <HAL_RCC_OscConfig+0x1078>)
 8004646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004648:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800464c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004650:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004654:	6011      	str	r1, [r2, #0]
 8004656:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800465a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800465e:	6812      	ldr	r2, [r2, #0]
 8004660:	fa92 f1a2 	rbit	r1, r2
 8004664:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004668:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800466c:	6011      	str	r1, [r2, #0]
  return result;
 800466e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004672:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	fab2 f282 	clz	r2, r2
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	f042 0220 	orr.w	r2, r2, #32
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	f002 021f 	and.w	r2, r2, #31
 8004688:	2101      	movs	r1, #1
 800468a:	fa01 f202 	lsl.w	r2, r1, r2
 800468e:	4013      	ands	r3, r2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d180      	bne.n	8004596 <HAL_RCC_OscConfig+0xf1a>
 8004694:	e027      	b.n	80046e6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800469a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e01e      	b.n	80046e8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046aa:	4b12      	ldr	r3, [pc, #72]	@ (80046f4 <HAL_RCC_OscConfig+0x1078>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80046b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80046b6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d10b      	bne.n	80046e2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80046ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80046ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80046d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80046de:	429a      	cmp	r2, r3
 80046e0:	d001      	beq.n	80046e6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000

080046f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b09e      	sub	sp, #120	@ 0x78
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e162      	b.n	80049d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004710:	4b90      	ldr	r3, [pc, #576]	@ (8004954 <HAL_RCC_ClockConfig+0x25c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d910      	bls.n	8004740 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471e:	4b8d      	ldr	r3, [pc, #564]	@ (8004954 <HAL_RCC_ClockConfig+0x25c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f023 0207 	bic.w	r2, r3, #7
 8004726:	498b      	ldr	r1, [pc, #556]	@ (8004954 <HAL_RCC_ClockConfig+0x25c>)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	4313      	orrs	r3, r2
 800472c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800472e:	4b89      	ldr	r3, [pc, #548]	@ (8004954 <HAL_RCC_ClockConfig+0x25c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d001      	beq.n	8004740 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e14a      	b.n	80049d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800474c:	4b82      	ldr	r3, [pc, #520]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	497f      	ldr	r1, [pc, #508]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 800475a:	4313      	orrs	r3, r2
 800475c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80dc 	beq.w	8004924 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d13c      	bne.n	80047ee <HAL_RCC_ClockConfig+0xf6>
 8004774:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004778:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800477c:	fa93 f3a3 	rbit	r3, r3
 8004780:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004784:	fab3 f383 	clz	r3, r3
 8004788:	b2db      	uxtb	r3, r3
 800478a:	095b      	lsrs	r3, r3, #5
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	d102      	bne.n	800479e <HAL_RCC_ClockConfig+0xa6>
 8004798:	4b6f      	ldr	r3, [pc, #444]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	e00f      	b.n	80047be <HAL_RCC_ClockConfig+0xc6>
 800479e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80047a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047a6:	fa93 f3a3 	rbit	r3, r3
 80047aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80047ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80047b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80047b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047b4:	fa93 f3a3 	rbit	r3, r3
 80047b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ba:	4b67      	ldr	r3, [pc, #412]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 80047bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80047c2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80047c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047c6:	fa92 f2a2 	rbit	r2, r2
 80047ca:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80047cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047ce:	fab2 f282 	clz	r2, r2
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	f042 0220 	orr.w	r2, r2, #32
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	f002 021f 	and.w	r2, r2, #31
 80047de:	2101      	movs	r1, #1
 80047e0:	fa01 f202 	lsl.w	r2, r1, r2
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d17b      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e0f3      	b.n	80049d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d13c      	bne.n	8004870 <HAL_RCC_ClockConfig+0x178>
 80047f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047fe:	fa93 f3a3 	rbit	r3, r3
 8004802:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004806:	fab3 f383 	clz	r3, r3
 800480a:	b2db      	uxtb	r3, r3
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	b2db      	uxtb	r3, r3
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b01      	cmp	r3, #1
 8004818:	d102      	bne.n	8004820 <HAL_RCC_ClockConfig+0x128>
 800481a:	4b4f      	ldr	r3, [pc, #316]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	e00f      	b.n	8004840 <HAL_RCC_ClockConfig+0x148>
 8004820:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004824:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004828:	fa93 f3a3 	rbit	r3, r3
 800482c:	647b      	str	r3, [r7, #68]	@ 0x44
 800482e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004832:	643b      	str	r3, [r7, #64]	@ 0x40
 8004834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004836:	fa93 f3a3 	rbit	r3, r3
 800483a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800483c:	4b46      	ldr	r3, [pc, #280]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004844:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004846:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004848:	fa92 f2a2 	rbit	r2, r2
 800484c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800484e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004850:	fab2 f282 	clz	r2, r2
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	f042 0220 	orr.w	r2, r2, #32
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	f002 021f 	and.w	r2, r2, #31
 8004860:	2101      	movs	r1, #1
 8004862:	fa01 f202 	lsl.w	r2, r1, r2
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d13a      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0b2      	b.n	80049d6 <HAL_RCC_ClockConfig+0x2de>
 8004870:	2302      	movs	r3, #2
 8004872:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004876:	fa93 f3a3 	rbit	r3, r3
 800487a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800487c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487e:	fab3 f383 	clz	r3, r3
 8004882:	b2db      	uxtb	r3, r3
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b01      	cmp	r3, #1
 8004890:	d102      	bne.n	8004898 <HAL_RCC_ClockConfig+0x1a0>
 8004892:	4b31      	ldr	r3, [pc, #196]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	e00d      	b.n	80048b4 <HAL_RCC_ClockConfig+0x1bc>
 8004898:	2302      	movs	r3, #2
 800489a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489e:	fa93 f3a3 	rbit	r3, r3
 80048a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a4:	2302      	movs	r3, #2
 80048a6:	623b      	str	r3, [r7, #32]
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	4b29      	ldr	r3, [pc, #164]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	2202      	movs	r2, #2
 80048b6:	61ba      	str	r2, [r7, #24]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	fa92 f2a2 	rbit	r2, r2
 80048be:	617a      	str	r2, [r7, #20]
  return result;
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	fab2 f282 	clz	r2, r2
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	f042 0220 	orr.w	r2, r2, #32
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	f002 021f 	and.w	r2, r2, #31
 80048d2:	2101      	movs	r1, #1
 80048d4:	fa01 f202 	lsl.w	r2, r1, r2
 80048d8:	4013      	ands	r3, r2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e079      	b.n	80049d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	491a      	ldr	r1, [pc, #104]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f4:	f7fd fdf4 	bl	80024e0 <HAL_GetTick>
 80048f8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	e00a      	b.n	8004912 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fc:	f7fd fdf0 	bl	80024e0 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e061      	b.n	80049d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	4b11      	ldr	r3, [pc, #68]	@ (8004958 <HAL_RCC_ClockConfig+0x260>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f003 020c 	and.w	r2, r3, #12
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	429a      	cmp	r2, r3
 8004922:	d1eb      	bne.n	80048fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004924:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <HAL_RCC_ClockConfig+0x25c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d214      	bcs.n	800495c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b08      	ldr	r3, [pc, #32]	@ (8004954 <HAL_RCC_ClockConfig+0x25c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f023 0207 	bic.w	r2, r3, #7
 800493a:	4906      	ldr	r1, [pc, #24]	@ (8004954 <HAL_RCC_ClockConfig+0x25c>)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	4313      	orrs	r3, r2
 8004940:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004942:	4b04      	ldr	r3, [pc, #16]	@ (8004954 <HAL_RCC_ClockConfig+0x25c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d005      	beq.n	800495c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e040      	b.n	80049d6 <HAL_RCC_ClockConfig+0x2de>
 8004954:	40022000 	.word	0x40022000
 8004958:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004968:	4b1d      	ldr	r3, [pc, #116]	@ (80049e0 <HAL_RCC_ClockConfig+0x2e8>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	491a      	ldr	r1, [pc, #104]	@ (80049e0 <HAL_RCC_ClockConfig+0x2e8>)
 8004976:	4313      	orrs	r3, r2
 8004978:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004986:	4b16      	ldr	r3, [pc, #88]	@ (80049e0 <HAL_RCC_ClockConfig+0x2e8>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	4912      	ldr	r1, [pc, #72]	@ (80049e0 <HAL_RCC_ClockConfig+0x2e8>)
 8004996:	4313      	orrs	r3, r2
 8004998:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800499a:	f000 f829 	bl	80049f0 <HAL_RCC_GetSysClockFreq>
 800499e:	4601      	mov	r1, r0
 80049a0:	4b0f      	ldr	r3, [pc, #60]	@ (80049e0 <HAL_RCC_ClockConfig+0x2e8>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049a8:	22f0      	movs	r2, #240	@ 0xf0
 80049aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	fa92 f2a2 	rbit	r2, r2
 80049b2:	60fa      	str	r2, [r7, #12]
  return result;
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	fab2 f282 	clz	r2, r2
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	40d3      	lsrs	r3, r2
 80049be:	4a09      	ldr	r2, [pc, #36]	@ (80049e4 <HAL_RCC_ClockConfig+0x2ec>)
 80049c0:	5cd3      	ldrb	r3, [r2, r3]
 80049c2:	fa21 f303 	lsr.w	r3, r1, r3
 80049c6:	4a08      	ldr	r2, [pc, #32]	@ (80049e8 <HAL_RCC_ClockConfig+0x2f0>)
 80049c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80049ca:	4b08      	ldr	r3, [pc, #32]	@ (80049ec <HAL_RCC_ClockConfig+0x2f4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fd fd42 	bl	8002458 <HAL_InitTick>
  
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3778      	adds	r7, #120	@ 0x78
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000
 80049e4:	08014cdc 	.word	0x08014cdc
 80049e8:	2000000c 	.word	0x2000000c
 80049ec:	20000010 	.word	0x20000010

080049f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b08b      	sub	sp, #44	@ 0x2c
 80049f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	2300      	movs	r3, #0
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	2300      	movs	r3, #0
 8004a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004a0a:	4b29      	ldr	r3, [pc, #164]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d002      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0x30>
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d003      	beq.n	8004a26 <HAL_RCC_GetSysClockFreq+0x36>
 8004a1e:	e03c      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a20:	4b24      	ldr	r3, [pc, #144]	@ (8004ab4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a22:	623b      	str	r3, [r7, #32]
      break;
 8004a24:	e03c      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004a2c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8004a30:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	fa92 f2a2 	rbit	r2, r2
 8004a38:	607a      	str	r2, [r7, #4]
  return result;
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	fab2 f282 	clz	r2, r2
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	40d3      	lsrs	r3, r2
 8004a44:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a46:	5cd3      	ldrb	r3, [r2, r3]
 8004a48:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004a4a:	4b19      	ldr	r3, [pc, #100]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	220f      	movs	r2, #15
 8004a54:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	fa92 f2a2 	rbit	r2, r2
 8004a5c:	60fa      	str	r2, [r7, #12]
  return result;
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	fab2 f282 	clz	r2, r2
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	40d3      	lsrs	r3, r2
 8004a68:	4a14      	ldr	r2, [pc, #80]	@ (8004abc <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a6a:	5cd3      	ldrb	r3, [r2, r3]
 8004a6c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a78:	4a0e      	ldr	r2, [pc, #56]	@ (8004ab4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	fb02 f303 	mul.w	r3, r2, r3
 8004a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a88:	e004      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8004ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	623b      	str	r3, [r7, #32]
      break;
 8004a98:	e002      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a9a:	4b06      	ldr	r3, [pc, #24]	@ (8004ab4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a9c:	623b      	str	r3, [r7, #32]
      break;
 8004a9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	372c      	adds	r7, #44	@ 0x2c
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	007a1200 	.word	0x007a1200
 8004ab8:	08014cec 	.word	0x08014cec
 8004abc:	08014cfc 	.word	0x08014cfc
 8004ac0:	003d0900 	.word	0x003d0900

08004ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b092      	sub	sp, #72	@ 0x48
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 80d4 	beq.w	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10e      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af4:	4b4b      	ldr	r3, [pc, #300]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	4a4a      	ldr	r2, [pc, #296]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004afe:	61d3      	str	r3, [r2, #28]
 8004b00:	4b48      	ldr	r3, [pc, #288]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b12:	4b45      	ldr	r3, [pc, #276]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d118      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b1e:	4b42      	ldr	r3, [pc, #264]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a41      	ldr	r2, [pc, #260]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b28:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b2a:	f7fd fcd9 	bl	80024e0 <HAL_GetTick>
 8004b2e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b30:	e008      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b32:	f7fd fcd5 	bl	80024e0 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b64      	cmp	r3, #100	@ 0x64
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e169      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b44:	4b38      	ldr	r3, [pc, #224]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b50:	4b34      	ldr	r3, [pc, #208]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8084 	beq.w	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d07c      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b70:	4b2c      	ldr	r3, [pc, #176]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b7e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b82:	fa93 f3a3 	rbit	r3, r3
 8004b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b8a:	fab3 f383 	clz	r3, r3
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	4b26      	ldr	r3, [pc, #152]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	461a      	mov	r2, r3
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba6:	fa93 f3a3 	rbit	r3, r3
 8004baa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bae:	fab3 f383 	clz	r3, r3
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004bb8:	4413      	add	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bc2:	4a18      	ldr	r2, [pc, #96]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d04b      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd2:	f7fd fc85 	bl	80024e0 <HAL_GetTick>
 8004bd6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd8:	e00a      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bda:	f7fd fc81 	bl	80024e0 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e113      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf6:	fa93 f3a3 	rbit	r3, r3
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	623b      	str	r3, [r7, #32]
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	fa93 f3a3 	rbit	r3, r3
 8004c06:	61fb      	str	r3, [r7, #28]
  return result;
 8004c08:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0a:	fab3 f383 	clz	r3, r3
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	095b      	lsrs	r3, r3, #5
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f043 0302 	orr.w	r3, r3, #2
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d108      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004c1e:	4b01      	ldr	r3, [pc, #4]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	e00d      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004c24:	40021000 	.word	0x40021000
 8004c28:	40007000 	.word	0x40007000
 8004c2c:	10908100 	.word	0x10908100
 8004c30:	2302      	movs	r3, #2
 8004c32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	fa93 f3a3 	rbit	r3, r3
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	4b78      	ldr	r3, [pc, #480]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c40:	2202      	movs	r2, #2
 8004c42:	613a      	str	r2, [r7, #16]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	fa92 f2a2 	rbit	r2, r2
 8004c4a:	60fa      	str	r2, [r7, #12]
  return result;
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	fab2 f282 	clz	r2, r2
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	f002 021f 	and.w	r2, r2, #31
 8004c5e:	2101      	movs	r1, #1
 8004c60:	fa01 f202 	lsl.w	r2, r1, r2
 8004c64:	4013      	ands	r3, r2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0b7      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	496a      	ldr	r1, [pc, #424]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c7c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d105      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c84:	4b66      	ldr	r3, [pc, #408]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	4a65      	ldr	r2, [pc, #404]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c9c:	4b60      	ldr	r3, [pc, #384]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca0:	f023 0203 	bic.w	r2, r3, #3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	495d      	ldr	r1, [pc, #372]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cba:	4b59      	ldr	r3, [pc, #356]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	4956      	ldr	r1, [pc, #344]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cd8:	4b51      	ldr	r3, [pc, #324]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cdc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	494e      	ldr	r1, [pc, #312]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d008      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfa:	f023 0210 	bic.w	r2, r3, #16
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	4947      	ldr	r1, [pc, #284]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004d14:	4b42      	ldr	r3, [pc, #264]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d20:	493f      	ldr	r1, [pc, #252]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d008      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d32:	4b3b      	ldr	r3, [pc, #236]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d36:	f023 0220 	bic.w	r2, r3, #32
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	4938      	ldr	r1, [pc, #224]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d50:	4b33      	ldr	r3, [pc, #204]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d54:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	4930      	ldr	r1, [pc, #192]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d008      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	4929      	ldr	r1, [pc, #164]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d8c:	4b24      	ldr	r3, [pc, #144]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	4921      	ldr	r1, [pc, #132]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004daa:	4b1d      	ldr	r3, [pc, #116]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dae:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db6:	491a      	ldr	r1, [pc, #104]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004dc8:	4b15      	ldr	r3, [pc, #84]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dcc:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd4:	4912      	ldr	r1, [pc, #72]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d008      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004de6:	4b0e      	ldr	r3, [pc, #56]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df2:	490b      	ldr	r1, [pc, #44]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004e04:	4b06      	ldr	r3, [pc, #24]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e08:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e10:	4903      	ldr	r1, [pc, #12]	@ (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3748      	adds	r7, #72	@ 0x48
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40021000 	.word	0x40021000

08004e24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e09d      	b.n	8004f72 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d108      	bne.n	8004e50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e46:	d009      	beq.n	8004e5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	61da      	str	r2, [r3, #28]
 8004e4e:	e005      	b.n	8004e5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fc ffe6 	bl	8001e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e9c:	d902      	bls.n	8004ea4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	e002      	b.n	8004eaa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ea4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ea8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004eb2:	d007      	beq.n	8004ec4 <HAL_SPI_Init+0xa0>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ebc:	d002      	beq.n	8004ec4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f06:	ea42 0103 	orr.w	r1, r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	0c1b      	lsrs	r3, r3, #16
 8004f20:	f003 0204 	and.w	r2, r3, #4
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004f40:	ea42 0103 	orr.w	r1, r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b088      	sub	sp, #32
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	603b      	str	r3, [r7, #0]
 8004f86:	4613      	mov	r3, r2
 8004f88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_SPI_Transmit+0x22>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e15f      	b.n	800525c <HAL_SPI_Transmit+0x2e2>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fa4:	f7fd fa9c 	bl	80024e0 <HAL_GetTick>
 8004fa8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d002      	beq.n	8004fc0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004fba:	2302      	movs	r3, #2
 8004fbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fbe:	e148      	b.n	8005252 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <HAL_SPI_Transmit+0x52>
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d102      	bne.n	8004fd2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fd0:	e13f      	b.n	8005252 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	88fa      	ldrh	r2, [r7, #6]
 8004fea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	88fa      	ldrh	r2, [r7, #6]
 8004ff0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800501c:	d10f      	bne.n	800503e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800502c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800503c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005048:	2b40      	cmp	r3, #64	@ 0x40
 800504a:	d007      	beq.n	800505c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800505a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005064:	d94f      	bls.n	8005106 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_SPI_Transmit+0xfa>
 800506e:	8afb      	ldrh	r3, [r7, #22]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d142      	bne.n	80050fa <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005078:	881a      	ldrh	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005084:	1c9a      	adds	r2, r3, #2
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005098:	e02f      	b.n	80050fa <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d112      	bne.n	80050ce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ac:	881a      	ldrh	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b8:	1c9a      	adds	r2, r3, #2
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050cc:	e015      	b.n	80050fa <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ce:	f7fd fa07 	bl	80024e0 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d803      	bhi.n	80050e6 <HAL_SPI_Transmit+0x16c>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d102      	bne.n	80050ec <HAL_SPI_Transmit+0x172>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d106      	bne.n	80050fa <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80050f8:	e0ab      	b.n	8005252 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1ca      	bne.n	800509a <HAL_SPI_Transmit+0x120>
 8005104:	e080      	b.n	8005208 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_SPI_Transmit+0x19a>
 800510e:	8afb      	ldrh	r3, [r7, #22]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d174      	bne.n	80051fe <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b01      	cmp	r3, #1
 800511c:	d912      	bls.n	8005144 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005122:	881a      	ldrh	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512e:	1c9a      	adds	r2, r3, #2
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b02      	subs	r3, #2
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005142:	e05c      	b.n	80051fe <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	7812      	ldrb	r2, [r2, #0]
 8005150:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29a      	uxth	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800516a:	e048      	b.n	80051fe <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d12b      	bne.n	80051d2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800517e:	b29b      	uxth	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	d912      	bls.n	80051aa <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005188:	881a      	ldrh	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005194:	1c9a      	adds	r2, r3, #2
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b02      	subs	r3, #2
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051a8:	e029      	b.n	80051fe <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	330c      	adds	r3, #12
 80051b4:	7812      	ldrb	r2, [r2, #0]
 80051b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051d0:	e015      	b.n	80051fe <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051d2:	f7fd f985 	bl	80024e0 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d803      	bhi.n	80051ea <HAL_SPI_Transmit+0x270>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e8:	d102      	bne.n	80051f0 <HAL_SPI_Transmit+0x276>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d106      	bne.n	80051fe <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80051fc:	e029      	b.n	8005252 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1b1      	bne.n	800516c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f947 	bl	80054a0 <SPI_EndRxTxTransaction>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005226:	2300      	movs	r3, #0
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	77fb      	strb	r3, [r7, #31]
 8005248:	e003      	b.n	8005252 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800525a:	7ffb      	ldrb	r3, [r7, #31]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3720      	adds	r7, #32
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	4613      	mov	r3, r2
 8005272:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005274:	f7fd f934 	bl	80024e0 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	4413      	add	r3, r2
 8005282:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005284:	f7fd f92c 	bl	80024e0 <HAL_GetTick>
 8005288:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800528a:	4b39      	ldr	r3, [pc, #228]	@ (8005370 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	015b      	lsls	r3, r3, #5
 8005290:	0d1b      	lsrs	r3, r3, #20
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	fb02 f303 	mul.w	r3, r2, r3
 8005298:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800529a:	e054      	b.n	8005346 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a2:	d050      	beq.n	8005346 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052a4:	f7fd f91c 	bl	80024e0 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d902      	bls.n	80052ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d13d      	bne.n	8005336 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052d2:	d111      	bne.n	80052f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052dc:	d004      	beq.n	80052e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052e6:	d107      	bne.n	80052f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005300:	d10f      	bne.n	8005322 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005320:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e017      	b.n	8005366 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	3b01      	subs	r3, #1
 8005344:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4013      	ands	r3, r2
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	429a      	cmp	r2, r3
 8005354:	bf0c      	ite	eq
 8005356:	2301      	moveq	r3, #1
 8005358:	2300      	movne	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	461a      	mov	r2, r3
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	429a      	cmp	r2, r3
 8005362:	d19b      	bne.n	800529c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3720      	adds	r7, #32
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	2000000c 	.word	0x2000000c

08005374 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08a      	sub	sp, #40	@ 0x28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005386:	f7fd f8ab 	bl	80024e0 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	4413      	add	r3, r2
 8005394:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005396:	f7fd f8a3 	bl	80024e0 <HAL_GetTick>
 800539a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80053a4:	4b3d      	ldr	r3, [pc, #244]	@ (800549c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	00da      	lsls	r2, r3, #3
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	0d1b      	lsrs	r3, r3, #20
 80053b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b6:	fb02 f303 	mul.w	r3, r2, r3
 80053ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80053bc:	e060      	b.n	8005480 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80053c4:	d107      	bne.n	80053d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053dc:	d050      	beq.n	8005480 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053de:	f7fd f87f 	bl	80024e0 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d902      	bls.n	80053f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80053ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d13d      	bne.n	8005470 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005402:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800540c:	d111      	bne.n	8005432 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005416:	d004      	beq.n	8005422 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005420:	d107      	bne.n	8005432 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005430:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800543a:	d10f      	bne.n	800545c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800545a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e010      	b.n	8005492 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	3b01      	subs	r3, #1
 800547e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4013      	ands	r3, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	429a      	cmp	r2, r3
 800548e:	d196      	bne.n	80053be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3728      	adds	r7, #40	@ 0x28
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	2000000c 	.word	0x2000000c

080054a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f7ff ff5b 	bl	8005374 <SPI_WaitFifoStateUntilTimeout>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c8:	f043 0220 	orr.w	r2, r3, #32
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e027      	b.n	8005524 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2200      	movs	r2, #0
 80054dc:	2180      	movs	r1, #128	@ 0x80
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f7ff fec0 	bl	8005264 <SPI_WaitFlagStateUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d007      	beq.n	80054fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ee:	f043 0220 	orr.w	r2, r3, #32
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e014      	b.n	8005524 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2200      	movs	r2, #0
 8005502:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f7ff ff34 	bl	8005374 <SPI_WaitFifoStateUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d007      	beq.n	8005522 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005516:	f043 0220 	orr.w	r2, r3, #32
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e000      	b.n	8005524 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <gc9a01a_write_cmd>:
static uint32_t copy_to_draw_buffer2( bsp_lcd_t *hlcd,uint16_t nbytes,uint16_t *image_data);
static void gc9a01a_write_char(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) ;
static void gc9a01a_set_address_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1);


static void gc9a01a_write_cmd(uint8_t cmd) {
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	4603      	mov	r3, r0
 8005534:	71fb      	strb	r3, [r7, #7]
	LCD_CSX_LOW();
 8005536:	2200      	movs	r2, #0
 8005538:	2110      	movs	r1, #16
 800553a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800553e:	f7fd fa77 	bl	8002a30 <HAL_GPIO_WritePin>
	LCD_DCX_LOW(); //DCX = 0 , for command
 8005542:	2200      	movs	r2, #0
 8005544:	2140      	movs	r1, #64	@ 0x40
 8005546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800554a:	f7fd fa71 	bl	8002a30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 800554e:	1df9      	adds	r1, r7, #7
 8005550:	f04f 33ff 	mov.w	r3, #4294967295
 8005554:	2201      	movs	r2, #1
 8005556:	4809      	ldr	r0, [pc, #36]	@ (800557c <gc9a01a_write_cmd+0x50>)
 8005558:	f7ff fd0f 	bl	8004f7a <HAL_SPI_Transmit>
	LCD_DCX_HIGH();
 800555c:	2201      	movs	r2, #1
 800555e:	2140      	movs	r1, #64	@ 0x40
 8005560:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005564:	f7fd fa64 	bl	8002a30 <HAL_GPIO_WritePin>
	LCD_CSX_HIGH();
 8005568:	2201      	movs	r2, #1
 800556a:	2110      	movs	r1, #16
 800556c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005570:	f7fd fa5e 	bl	8002a30 <HAL_GPIO_WritePin>
}
 8005574:	bf00      	nop
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20007aa4 	.word	0x20007aa4

08005580 <gc9a01a_write_data>:


static void gc9a01a_write_data(uint8_t *buffer, uint32_t len) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
	LCD_CSX_LOW();
 800558a:	2200      	movs	r2, #0
 800558c:	2110      	movs	r1, #16
 800558e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005592:	f7fd fa4d 	bl	8002a30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, buffer, len, HAL_MAX_DELAY);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	b29a      	uxth	r2, r3
 800559a:	f04f 33ff 	mov.w	r3, #4294967295
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	4806      	ldr	r0, [pc, #24]	@ (80055bc <gc9a01a_write_data+0x3c>)
 80055a2:	f7ff fcea 	bl	8004f7a <HAL_SPI_Transmit>
	LCD_CSX_HIGH();
 80055a6:	2201      	movs	r2, #1
 80055a8:	2110      	movs	r1, #16
 80055aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80055ae:	f7fd fa3f 	bl	8002a30 <HAL_GPIO_WritePin>
}
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	20007aa4 	.word	0x20007aa4

080055c0 <gc9a01a_set_orientation>:

void gc9a01a_set_orientation(uint8_t orientation)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	71fb      	strb	r3, [r7, #7]
	uint8_t params[4];
	if(orientation == LANDSCAPE) {
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d124      	bne.n	800561a <gc9a01a_set_orientation+0x5a>
		gc9a01a_write_cmd(GC9A01A_RASET);
 80055d0:	202b      	movs	r0, #43	@ 0x2b
 80055d2:	f7ff ffab 	bl	800552c <gc9a01a_write_cmd>
		params[0] = 0x00;
 80055d6:	2300      	movs	r3, #0
 80055d8:	733b      	strb	r3, [r7, #12]
		params[1] = 0x00;
 80055da:	2300      	movs	r3, #0
 80055dc:	737b      	strb	r3, [r7, #13]
		params[2] = 0x00;
 80055de:	2300      	movs	r3, #0
 80055e0:	73bb      	strb	r3, [r7, #14]
		params[3] = 0xf0;
 80055e2:	23f0      	movs	r3, #240	@ 0xf0
 80055e4:	73fb      	strb	r3, [r7, #15]
		gc9a01a_write_data(params,4);
 80055e6:	f107 030c 	add.w	r3, r7, #12
 80055ea:	2104      	movs	r1, #4
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff ffc7 	bl	8005580 <gc9a01a_write_data>

		gc9a01a_write_cmd(GC9A01A_CASET);
 80055f2:	202a      	movs	r0, #42	@ 0x2a
 80055f4:	f7ff ff9a 	bl	800552c <gc9a01a_write_cmd>
		params[0] = 0x00;
 80055f8:	2300      	movs	r3, #0
 80055fa:	733b      	strb	r3, [r7, #12]
		params[1] = 0x00;
 80055fc:	2300      	movs	r3, #0
 80055fe:	737b      	strb	r3, [r7, #13]
		params[2] = 0x00;
 8005600:	2300      	movs	r3, #0
 8005602:	73bb      	strb	r3, [r7, #14]
		params[3] = 0xf0;
 8005604:	23f0      	movs	r3, #240	@ 0xf0
 8005606:	73fb      	strb	r3, [r7, #15]
		gc9a01a_write_data(params,4);
 8005608:	f107 030c 	add.w	r3, r7, #12
 800560c:	2104      	movs	r1, #4
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff ffb6 	bl	8005580 <gc9a01a_write_data>

		params[0] = MADCTL_MV | MADCTL_BGR;
 8005614:	2328      	movs	r3, #40	@ 0x28
 8005616:	733b      	strb	r3, [r7, #12]
 8005618:	e026      	b.n	8005668 <gc9a01a_set_orientation+0xa8>
	} else if(orientation == PORTRAIT) {
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d123      	bne.n	8005668 <gc9a01a_set_orientation+0xa8>
		gc9a01a_write_cmd(GC9A01A_RASET);
 8005620:	202b      	movs	r0, #43	@ 0x2b
 8005622:	f7ff ff83 	bl	800552c <gc9a01a_write_cmd>
		params[0] = 0x00;
 8005626:	2300      	movs	r3, #0
 8005628:	733b      	strb	r3, [r7, #12]
		params[1] = 0x00;
 800562a:	2300      	movs	r3, #0
 800562c:	737b      	strb	r3, [r7, #13]
		params[2] = 0x00;
 800562e:	2300      	movs	r3, #0
 8005630:	73bb      	strb	r3, [r7, #14]
		params[3] = 0xf0;
 8005632:	23f0      	movs	r3, #240	@ 0xf0
 8005634:	73fb      	strb	r3, [r7, #15]
		gc9a01a_write_data(params,4);
 8005636:	f107 030c 	add.w	r3, r7, #12
 800563a:	2104      	movs	r1, #4
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff ff9f 	bl	8005580 <gc9a01a_write_data>

		gc9a01a_write_cmd(GC9A01A_CASET);
 8005642:	202a      	movs	r0, #42	@ 0x2a
 8005644:	f7ff ff72 	bl	800552c <gc9a01a_write_cmd>
		params[0] = 0x00;
 8005648:	2300      	movs	r3, #0
 800564a:	733b      	strb	r3, [r7, #12]
		params[1] = 0x00;
 800564c:	2300      	movs	r3, #0
 800564e:	737b      	strb	r3, [r7, #13]
		params[2] = 0x00;
 8005650:	2300      	movs	r3, #0
 8005652:	73bb      	strb	r3, [r7, #14]
		params[3] = 0xf0;
 8005654:	23f0      	movs	r3, #240	@ 0xf0
 8005656:	73fb      	strb	r3, [r7, #15]
		gc9a01a_write_data(params,4);
 8005658:	f107 030c 	add.w	r3, r7, #12
 800565c:	2104      	movs	r1, #4
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff ff8e 	bl	8005580 <gc9a01a_write_data>

		params[0] = MADCTL_MY | MADCTL_MX | MADCTL_BGR;
 8005664:	23c8      	movs	r3, #200	@ 0xc8
 8005666:	733b      	strb	r3, [r7, #12]
	}
	gc9a01a_write_cmd(GC9A01A_MADCTL);
 8005668:	2036      	movs	r0, #54	@ 0x36
 800566a:	f7ff ff5f 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1);
 800566e:	f107 030c 	add.w	r3, r7, #12
 8005672:	2101      	movs	r1, #1
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff ff83 	bl	8005580 <gc9a01a_write_data>
}
 800567a:	bf00      	nop
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <gc9a01a_set_display_area>:
	gc9a01a_write_cmd(GC9A01A_RAMWR);
}


void gc9a01a_set_display_area(lcd_area_t *area)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
	uint8_t params[4];

	/*Column address set(2Ah) */
	params[0] = HIGH_16(area->x1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	0a1b      	lsrs	r3, r3, #8
 8005690:	b29b      	uxth	r3, r3
 8005692:	b2db      	uxtb	r3, r3
 8005694:	733b      	strb	r3, [r7, #12]
	params[1] = LOW_16(area->x1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	737b      	strb	r3, [r7, #13]
	params[2] = HIGH_16(area->x2);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	885b      	ldrh	r3, [r3, #2]
 80056a2:	0a1b      	lsrs	r3, r3, #8
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	73bb      	strb	r3, [r7, #14]
	params[3] = LOW_16(area->x2);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	885b      	ldrh	r3, [r3, #2]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	73fb      	strb	r3, [r7, #15]
	gc9a01a_write_cmd(GC9A01A_CASET);
 80056b2:	202a      	movs	r0, #42	@ 0x2a
 80056b4:	f7ff ff3a 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params, 4);
 80056b8:	f107 030c 	add.w	r3, r7, #12
 80056bc:	2104      	movs	r1, #4
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff ff5e 	bl	8005580 <gc9a01a_write_data>

	params[0] = HIGH_16(area->y1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	889b      	ldrh	r3, [r3, #4]
 80056c8:	0a1b      	lsrs	r3, r3, #8
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	733b      	strb	r3, [r7, #12]
	params[1] = LOW_16(area->y1);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	889b      	ldrh	r3, [r3, #4]
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	737b      	strb	r3, [r7, #13]
	params[2] = HIGH_16(area->y2);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	88db      	ldrh	r3, [r3, #6]
 80056dc:	0a1b      	lsrs	r3, r3, #8
 80056de:	b29b      	uxth	r3, r3
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	73bb      	strb	r3, [r7, #14]
	params[3] = LOW_16(area->y2);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	88db      	ldrh	r3, [r3, #6]
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	73fb      	strb	r3, [r7, #15]
	gc9a01a_write_cmd(GC9A01A_RASET);
 80056ec:	202b      	movs	r0, #43	@ 0x2b
 80056ee:	f7ff ff1d 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params, 4);
 80056f2:	f107 030c 	add.w	r3, r7, #12
 80056f6:	2104      	movs	r1, #4
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff ff41 	bl	8005580 <gc9a01a_write_data>
}
 80056fe:	bf00      	nop
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <gc9a01a_config2>:
	HAL_Delay(100);
	gc9a01a_write_cmd(GC9A01A_DISPON);								///< Display ON
}


void gc9a01a_config2() {
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
	//HAL_Delay(50);
	//LCD_RST = 0;
	//HAL_Delay(50);
	//LCD_RST = 1;
	//HAL_Delay(120);
	gc9a01a_write_cmd(0xFE);		///< Inter register enable 1
 800570c:	20fe      	movs	r0, #254	@ 0xfe
 800570e:	f7ff ff0d 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_cmd(0xEF);		///< Inter register enable 2
 8005712:	20ef      	movs	r0, #239	@ 0xef
 8005714:	f7ff ff0a 	bl	800552c <gc9a01a_write_cmd>
	params[0] = 0x03;
	gc9a01a_write_cmd(0x8D);
	gc9a01a_write_data(params,1);  //99 en
#endif

	params[0] = 0x08;
 8005718:	2308      	movs	r3, #8
 800571a:	703b      	strb	r3, [r7, #0]
	params[1] = 0x09;
 800571c:	2309      	movs	r3, #9
 800571e:	707b      	strb	r3, [r7, #1]
	params[2] = 0x14;
 8005720:	2314      	movs	r3, #20
 8005722:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x08;
 8005724:	2308      	movs	r3, #8
 8005726:	70fb      	strb	r3, [r7, #3]
	gc9a01a_write_cmd(0xB5);
 8005728:	20b5      	movs	r0, #181	@ 0xb5
 800572a:	f7ff feff 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,4); //08->09  james 20200924
 800572e:	463b      	mov	r3, r7
 8005730:	2104      	movs	r1, #4
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff ff24 	bl	8005580 <gc9a01a_write_data>
	//正扫

	params[0] = 0x00;
 8005738:	2300      	movs	r3, #0
 800573a:	703b      	strb	r3, [r7, #0]
	params[1] = 0x00;
 800573c:	2300      	movs	r3, #0
 800573e:	707b      	strb	r3, [r7, #1]
	gc9a01a_write_cmd(0xB6);									///<Display Function Control
 8005740:	20b6      	movs	r0, #182	@ 0xb6
 8005742:	f7ff fef3 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,2);  //GS  SS  0x20
 8005746:	463b      	mov	r3, r7
 8005748:	2102      	movs	r1, #2
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff ff18 	bl	8005580 <gc9a01a_write_data>


	params[0] = 0x48;
 8005750:	2348      	movs	r3, #72	@ 0x48
 8005752:	703b      	strb	r3, [r7, #0]
	gc9a01a_write_cmd(0x36);									///< Memory Access Control
 8005754:	2036      	movs	r0, #54	@ 0x36
 8005756:	f7ff fee9 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1);
 800575a:	463b      	mov	r3, r7
 800575c:	2101      	movs	r1, #1
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff ff0e 	bl	8005580 <gc9a01a_write_data>

	params[0] = 0x05;
 8005764:	2305      	movs	r3, #5
 8005766:	703b      	strb	r3, [r7, #0]
	gc9a01a_write_cmd(0x3A);									///< COLMOD: Pixel Format Set
 8005768:	203a      	movs	r0, #58	@ 0x3a
 800576a:	f7ff fedf 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1);
 800576e:	463b      	mov	r3, r7
 8005770:	2101      	movs	r1, #1
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff ff04 	bl	8005580 <gc9a01a_write_data>
	gc9a01a_write_data(params,4);
#endif



	params[0] = 0x01;
 8005778:	2301      	movs	r3, #1
 800577a:	703b      	strb	r3, [r7, #0]
	gc9a01a_write_cmd(0xBA);
 800577c:	20ba      	movs	r0, #186	@ 0xba
 800577e:	f7ff fed5 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1); ///TE width
 8005782:	463b      	mov	r3, r7
 8005784:	2101      	movs	r1, #1
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff fefa 	bl	8005580 <gc9a01a_write_data>
	params[3] = 0x04;
	gc9a01a_write_cmd(0xFF);
	gc9a01a_write_data(params,4);
#endif

	params[0] = 0x1a;
 800578c:	231a      	movs	r3, #26
 800578e:	703b      	strb	r3, [r7, #0]
	gc9a01a_write_cmd(0xC3);								///< Power Control 2
 8005790:	20c3      	movs	r0, #195	@ 0xc3
 8005792:	f7ff fecb 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1);
 8005796:	463b      	mov	r3, r7
 8005798:	2101      	movs	r1, #1
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff fef0 	bl	8005580 <gc9a01a_write_data>

	params[0] = 0x1a;
 80057a0:	231a      	movs	r3, #26
 80057a2:	703b      	strb	r3, [r7, #0]
	gc9a01a_write_cmd(0xC4);								///< Power Control 3
 80057a4:	20c4      	movs	r0, #196	@ 0xc4
 80057a6:	f7ff fec1 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1);
 80057aa:	463b      	mov	r3, r7
 80057ac:	2101      	movs	r1, #1
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff fee6 	bl	8005580 <gc9a01a_write_data>


	params[0] = 0x25;
 80057b4:	2325      	movs	r3, #37	@ 0x25
 80057b6:	703b      	strb	r3, [r7, #0]
	gc9a01a_write_cmd(0xC9);								///< Power Control 4
 80057b8:	20c9      	movs	r0, #201	@ 0xc9
 80057ba:	f7ff feb7 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1);
 80057be:	463b      	mov	r3, r7
 80057c0:	2101      	movs	r1, #1
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff fedc 	bl	8005580 <gc9a01a_write_data>
	params[2] = 0x02;
	gc9a01a_write_cmd(0xDF);
	gc9a01a_write_data(params,3);
#endif

	params[0] = 0x45;
 80057c8:	2345      	movs	r3, #69	@ 0x45
 80057ca:	703b      	strb	r3, [r7, #0]
	params[1] = 0x09;
 80057cc:	2309      	movs	r3, #9
 80057ce:	707b      	strb	r3, [r7, #1]
	params[2] = 0x08;
 80057d0:	2308      	movs	r3, #8
 80057d2:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x08;
 80057d4:	2308      	movs	r3, #8
 80057d6:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x26;
 80057d8:	2326      	movs	r3, #38	@ 0x26
 80057da:	713b      	strb	r3, [r7, #4]
	params[5] = 0x2A;
 80057dc:	232a      	movs	r3, #42	@ 0x2a
 80057de:	717b      	strb	r3, [r7, #5]
	gc9a01a_write_cmd(0xF0);										///< Set gamma 1
 80057e0:	20f0      	movs	r0, #240	@ 0xf0
 80057e2:	f7ff fea3 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,6);
 80057e6:	463b      	mov	r3, r7
 80057e8:	2106      	movs	r1, #6
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff fec8 	bl	8005580 <gc9a01a_write_data>


	params[0] = 0x43;
 80057f0:	2343      	movs	r3, #67	@ 0x43
 80057f2:	703b      	strb	r3, [r7, #0]
	params[1] = 0x70;
 80057f4:	2370      	movs	r3, #112	@ 0x70
 80057f6:	707b      	strb	r3, [r7, #1]
	params[2] = 0x72;
 80057f8:	2372      	movs	r3, #114	@ 0x72
 80057fa:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x36;
 80057fc:	2336      	movs	r3, #54	@ 0x36
 80057fe:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x37;
 8005800:	2337      	movs	r3, #55	@ 0x37
 8005802:	713b      	strb	r3, [r7, #4]
	params[5] = 0x6F;
 8005804:	236f      	movs	r3, #111	@ 0x6f
 8005806:	717b      	strb	r3, [r7, #5]
	gc9a01a_write_cmd(0xF1);										///< Set gamma 2
 8005808:	20f1      	movs	r0, #241	@ 0xf1
 800580a:	f7ff fe8f 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,6);
 800580e:	463b      	mov	r3, r7
 8005810:	2106      	movs	r1, #6
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff feb4 	bl	8005580 <gc9a01a_write_data>


	params[0] = 0x45;
 8005818:	2345      	movs	r3, #69	@ 0x45
 800581a:	703b      	strb	r3, [r7, #0]
	params[1] = 0x09;
 800581c:	2309      	movs	r3, #9
 800581e:	707b      	strb	r3, [r7, #1]
	params[2] = 0x08;
 8005820:	2308      	movs	r3, #8
 8005822:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x08;
 8005824:	2308      	movs	r3, #8
 8005826:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x26;
 8005828:	2326      	movs	r3, #38	@ 0x26
 800582a:	713b      	strb	r3, [r7, #4]
	params[5] = 0x2A;
 800582c:	232a      	movs	r3, #42	@ 0x2a
 800582e:	717b      	strb	r3, [r7, #5]
	gc9a01a_write_cmd(0xF2);										///< Set gamma 3
 8005830:	20f2      	movs	r0, #242	@ 0xf2
 8005832:	f7ff fe7b 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,6);
 8005836:	463b      	mov	r3, r7
 8005838:	2106      	movs	r1, #6
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff fea0 	bl	8005580 <gc9a01a_write_data>


	params[0] = 0x43;
 8005840:	2343      	movs	r3, #67	@ 0x43
 8005842:	703b      	strb	r3, [r7, #0]
	params[1] = 0x70;
 8005844:	2370      	movs	r3, #112	@ 0x70
 8005846:	707b      	strb	r3, [r7, #1]
	params[2] = 0x72;
 8005848:	2372      	movs	r3, #114	@ 0x72
 800584a:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x36;
 800584c:	2336      	movs	r3, #54	@ 0x36
 800584e:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x37;
 8005850:	2337      	movs	r3, #55	@ 0x37
 8005852:	713b      	strb	r3, [r7, #4]
	params[5] = 0x6F;
 8005854:	236f      	movs	r3, #111	@ 0x6f
 8005856:	717b      	strb	r3, [r7, #5]
	gc9a01a_write_cmd(0xF3);										///< Set gamma 4
 8005858:	20f3      	movs	r0, #243	@ 0xf3
 800585a:	f7ff fe67 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,6);
 800585e:	463b      	mov	r3, r7
 8005860:	2106      	movs	r1, #6
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff fe8c 	bl	8005580 <gc9a01a_write_data>
	gc9a01a_write_cmd(0x70);
	gc9a01a_write_data(params,9);

#endif

	params[0] = 0x34;
 8005868:	2334      	movs	r3, #52	@ 0x34
 800586a:	703b      	strb	r3, [r7, #0]
	gc9a01a_write_cmd(0xE8);													///< Frame rate control
 800586c:	20e8      	movs	r0, #232	@ 0xe8
 800586e:	f7ff fe5d 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1);
 8005872:	463b      	mov	r3, r7
 8005874:	2101      	movs	r1, #1
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff fe82 	bl	8005580 <gc9a01a_write_data>
	//gc9a01a_write_data(0x08);///spi 2 data

#if 1
	//////////////////////undocumented commands - important///////////////////////

	params[0] = 0x38;
 800587c:	2338      	movs	r3, #56	@ 0x38
 800587e:	703b      	strb	r3, [r7, #0]
	params[1] = 0x0B;
 8005880:	230b      	movs	r3, #11
 8005882:	707b      	strb	r3, [r7, #1]
	params[2] = 0x6D;
 8005884:	236d      	movs	r3, #109	@ 0x6d
 8005886:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x6D;
 8005888:	236d      	movs	r3, #109	@ 0x6d
 800588a:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x39;
 800588c:	2339      	movs	r3, #57	@ 0x39
 800588e:	713b      	strb	r3, [r7, #4]
	params[5] = 0xF0;
 8005890:	23f0      	movs	r3, #240	@ 0xf0
 8005892:	717b      	strb	r3, [r7, #5]
	params[6] = 0x6D;
 8005894:	236d      	movs	r3, #109	@ 0x6d
 8005896:	71bb      	strb	r3, [r7, #6]
	params[7] = 0x6D;
 8005898:	236d      	movs	r3, #109	@ 0x6d
 800589a:	71fb      	strb	r3, [r7, #7]
	gc9a01a_write_cmd(0x60);
 800589c:	2060      	movs	r0, #96	@ 0x60
 800589e:	f7ff fe45 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,8);
 80058a2:	463b      	mov	r3, r7
 80058a4:	2108      	movs	r1, #8
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff fe6a 	bl	8005580 <gc9a01a_write_data>


	params[0] = 0x38;
 80058ac:	2338      	movs	r3, #56	@ 0x38
 80058ae:	703b      	strb	r3, [r7, #0]
	params[1] = 0xF4;
 80058b0:	23f4      	movs	r3, #244	@ 0xf4
 80058b2:	707b      	strb	r3, [r7, #1]
	params[2] = 0x6D;
 80058b4:	236d      	movs	r3, #109	@ 0x6d
 80058b6:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x6D;
 80058b8:	236d      	movs	r3, #109	@ 0x6d
 80058ba:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x38;
 80058bc:	2338      	movs	r3, #56	@ 0x38
 80058be:	713b      	strb	r3, [r7, #4]
	params[5] = 0xF7;//20200718
 80058c0:	23f7      	movs	r3, #247	@ 0xf7
 80058c2:	717b      	strb	r3, [r7, #5]
	params[6] = 0xF7;
 80058c4:	23f7      	movs	r3, #247	@ 0xf7
 80058c6:	71bb      	strb	r3, [r7, #6]
	params[7] = 0x6D;
 80058c8:	236d      	movs	r3, #109	@ 0x6d
 80058ca:	71fb      	strb	r3, [r7, #7]
	params[8] = 0x6D;
 80058cc:	236d      	movs	r3, #109	@ 0x6d
 80058ce:	723b      	strb	r3, [r7, #8]
	gc9a01a_write_cmd(0x61);
 80058d0:	2061      	movs	r0, #97	@ 0x61
 80058d2:	f7ff fe2b 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,9);
 80058d6:	463b      	mov	r3, r7
 80058d8:	2109      	movs	r1, #9
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff fe50 	bl	8005580 <gc9a01a_write_data>



	/////////////////////////////////////

	params[0] = 0x38;
 80058e0:	2338      	movs	r3, #56	@ 0x38
 80058e2:	703b      	strb	r3, [r7, #0]
	params[1] = 0x0D;
 80058e4:	230d      	movs	r3, #13
 80058e6:	707b      	strb	r3, [r7, #1]
	params[2] = 0x71;
 80058e8:	2371      	movs	r3, #113	@ 0x71
 80058ea:	70bb      	strb	r3, [r7, #2]
	params[3] = 0xED;
 80058ec:	23ed      	movs	r3, #237	@ 0xed
 80058ee:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x70;
 80058f0:	2370      	movs	r3, #112	@ 0x70
 80058f2:	713b      	strb	r3, [r7, #4]
	params[5] = 0x70;
 80058f4:	2370      	movs	r3, #112	@ 0x70
 80058f6:	717b      	strb	r3, [r7, #5]
	params[6] = 0x38;
 80058f8:	2338      	movs	r3, #56	@ 0x38
 80058fa:	71bb      	strb	r3, [r7, #6]
	params[7] = 0x0F;
 80058fc:	230f      	movs	r3, #15
 80058fe:	71fb      	strb	r3, [r7, #7]
	params[8] = 0x71;
 8005900:	2371      	movs	r3, #113	@ 0x71
 8005902:	723b      	strb	r3, [r7, #8]
	params[9] = 0xEF;
 8005904:	23ef      	movs	r3, #239	@ 0xef
 8005906:	727b      	strb	r3, [r7, #9]
	params[10] = 0x70;
 8005908:	2370      	movs	r3, #112	@ 0x70
 800590a:	72bb      	strb	r3, [r7, #10]
	params[11] = 0x70;
 800590c:	2370      	movs	r3, #112	@ 0x70
 800590e:	72fb      	strb	r3, [r7, #11]
	gc9a01a_write_cmd(0x62);
 8005910:	2062      	movs	r0, #98	@ 0x62
 8005912:	f7ff fe0b 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,12);
 8005916:	463b      	mov	r3, r7
 8005918:	210c      	movs	r1, #12
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff fe30 	bl	8005580 <gc9a01a_write_data>



	params[0] = 0x38;
 8005920:	2338      	movs	r3, #56	@ 0x38
 8005922:	703b      	strb	r3, [r7, #0]
	params[1] = 0x11;
 8005924:	2311      	movs	r3, #17
 8005926:	707b      	strb	r3, [r7, #1]
	params[2] = 0x71;
 8005928:	2371      	movs	r3, #113	@ 0x71
 800592a:	70bb      	strb	r3, [r7, #2]
	params[3] = 0xF1;
 800592c:	23f1      	movs	r3, #241	@ 0xf1
 800592e:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x70;
 8005930:	2370      	movs	r3, #112	@ 0x70
 8005932:	713b      	strb	r3, [r7, #4]
	params[5] = 0x70;
 8005934:	2370      	movs	r3, #112	@ 0x70
 8005936:	717b      	strb	r3, [r7, #5]
	params[6] = 0x38;
 8005938:	2338      	movs	r3, #56	@ 0x38
 800593a:	71bb      	strb	r3, [r7, #6]
	params[7] = 0x13;
 800593c:	2313      	movs	r3, #19
 800593e:	71fb      	strb	r3, [r7, #7]
	params[8] = 0x71;
 8005940:	2371      	movs	r3, #113	@ 0x71
 8005942:	723b      	strb	r3, [r7, #8]
	params[9] = 0xF3;
 8005944:	23f3      	movs	r3, #243	@ 0xf3
 8005946:	727b      	strb	r3, [r7, #9]
	params[10] = 0x70;
 8005948:	2370      	movs	r3, #112	@ 0x70
 800594a:	72bb      	strb	r3, [r7, #10]
	params[11] = 0x70;
 800594c:	2370      	movs	r3, #112	@ 0x70
 800594e:	72fb      	strb	r3, [r7, #11]
	gc9a01a_write_cmd(0x63);
 8005950:	2063      	movs	r0, #99	@ 0x63
 8005952:	f7ff fdeb 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,12);
 8005956:	463b      	mov	r3, r7
 8005958:	210c      	movs	r1, #12
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff fe10 	bl	8005580 <gc9a01a_write_data>


	///////////////////////////////////////////////////////

	params[0] = 0x28;
 8005960:	2328      	movs	r3, #40	@ 0x28
 8005962:	703b      	strb	r3, [r7, #0]
	params[1] = 0x29;
 8005964:	2329      	movs	r3, #41	@ 0x29
 8005966:	707b      	strb	r3, [r7, #1]
	params[2] = 0xF1;
 8005968:	23f1      	movs	r3, #241	@ 0xf1
 800596a:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x01;
 800596c:	2301      	movs	r3, #1
 800596e:	70fb      	strb	r3, [r7, #3]
	params[4] = 0xF1;
 8005970:	23f1      	movs	r3, #241	@ 0xf1
 8005972:	713b      	strb	r3, [r7, #4]
	params[5] = 0x00;
 8005974:	2300      	movs	r3, #0
 8005976:	717b      	strb	r3, [r7, #5]
	params[6] = 0x07;
 8005978:	2307      	movs	r3, #7
 800597a:	71bb      	strb	r3, [r7, #6]
	gc9a01a_write_cmd(0x64);
 800597c:	2064      	movs	r0, #100	@ 0x64
 800597e:	f7ff fdd5 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,7);
 8005982:	463b      	mov	r3, r7
 8005984:	2107      	movs	r1, #7
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff fdfa 	bl	8005580 <gc9a01a_write_data>


	//正扫
	params[0] = 0x3C;
 800598c:	233c      	movs	r3, #60	@ 0x3c
 800598e:	703b      	strb	r3, [r7, #0]
	params[1] = 0x00;
 8005990:	2300      	movs	r3, #0
 8005992:	707b      	strb	r3, [r7, #1]
	params[2] = 0xCD;
 8005994:	23cd      	movs	r3, #205	@ 0xcd
 8005996:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x67;
 8005998:	2367      	movs	r3, #103	@ 0x67
 800599a:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x45;
 800599c:	2345      	movs	r3, #69	@ 0x45
 800599e:	713b      	strb	r3, [r7, #4]
	params[5] = 0x45;
 80059a0:	2345      	movs	r3, #69	@ 0x45
 80059a2:	717b      	strb	r3, [r7, #5]
	params[6] = 0x10;
 80059a4:	2310      	movs	r3, #16
 80059a6:	71bb      	strb	r3, [r7, #6]
	params[7] = 0x00;
 80059a8:	2300      	movs	r3, #0
 80059aa:	71fb      	strb	r3, [r7, #7]
	params[8] = 0x00;
 80059ac:	2300      	movs	r3, #0
 80059ae:	723b      	strb	r3, [r7, #8]
	params[9] = 0x00;
 80059b0:	2300      	movs	r3, #0
 80059b2:	727b      	strb	r3, [r7, #9]
	gc9a01a_write_cmd(0x66);
 80059b4:	2066      	movs	r0, #102	@ 0x66
 80059b6:	f7ff fdb9 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,10);
 80059ba:	463b      	mov	r3, r7
 80059bc:	210a      	movs	r1, #10
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff fdde 	bl	8005580 <gc9a01a_write_data>


	params[0] = 0x00;
 80059c4:	2300      	movs	r3, #0
 80059c6:	703b      	strb	r3, [r7, #0]
	params[1] = 0x3C;
 80059c8:	233c      	movs	r3, #60	@ 0x3c
 80059ca:	707b      	strb	r3, [r7, #1]
	params[2] = 0x00;
 80059cc:	2300      	movs	r3, #0
 80059ce:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x00;
 80059d0:	2300      	movs	r3, #0
 80059d2:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x00;
 80059d4:	2300      	movs	r3, #0
 80059d6:	713b      	strb	r3, [r7, #4]
	params[5] = 0x01;
 80059d8:	2301      	movs	r3, #1
 80059da:	717b      	strb	r3, [r7, #5]
	params[6] = 0x54;
 80059dc:	2354      	movs	r3, #84	@ 0x54
 80059de:	71bb      	strb	r3, [r7, #6]
	params[7] = 0x10;
 80059e0:	2310      	movs	r3, #16
 80059e2:	71fb      	strb	r3, [r7, #7]
	params[8] = 0x32;
 80059e4:	2332      	movs	r3, #50	@ 0x32
 80059e6:	723b      	strb	r3, [r7, #8]
	params[9] = 0x98;
 80059e8:	2398      	movs	r3, #152	@ 0x98
 80059ea:	727b      	strb	r3, [r7, #9]
	gc9a01a_write_cmd(0x67);
 80059ec:	2067      	movs	r0, #103	@ 0x67
 80059ee:	f7ff fd9d 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,10);
 80059f2:	463b      	mov	r3, r7
 80059f4:	210a      	movs	r1, #10
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fdc2 	bl	8005580 <gc9a01a_write_data>



	params[0] = 0x10;
 80059fc:	2310      	movs	r3, #16
 80059fe:	703b      	strb	r3, [r7, #0]
	params[1] = 0x80;
 8005a00:	2380      	movs	r3, #128	@ 0x80
 8005a02:	707b      	strb	r3, [r7, #1]
	params[2] = 0x80;
 8005a04:	2380      	movs	r3, #128	@ 0x80
 8005a06:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x00;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x00;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	713b      	strb	r3, [r7, #4]
	params[5] = 0x4E;
 8005a10:	234e      	movs	r3, #78	@ 0x4e
 8005a12:	717b      	strb	r3, [r7, #5]
	params[6] = 0x00;
 8005a14:	2300      	movs	r3, #0
 8005a16:	71bb      	strb	r3, [r7, #6]
	gc9a01a_write_cmd(0x74);
 8005a18:	2074      	movs	r0, #116	@ 0x74
 8005a1a:	f7ff fd87 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,7);
 8005a1e:	463b      	mov	r3, r7
 8005a20:	2107      	movs	r1, #7
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff fdac 	bl	8005580 <gc9a01a_write_data>


	params[0] = 0x3e;
 8005a28:	233e      	movs	r3, #62	@ 0x3e
 8005a2a:	703b      	strb	r3, [r7, #0]
	params[1] = 0x07;
 8005a2c:	2307      	movs	r3, #7
 8005a2e:	707b      	strb	r3, [r7, #1]
	gc9a01a_write_cmd(0x98);
 8005a30:	2098      	movs	r0, #152	@ 0x98
 8005a32:	f7ff fd7b 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,2);
 8005a36:	463b      	mov	r3, r7
 8005a38:	2102      	movs	r1, #2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff fda0 	bl	8005580 <gc9a01a_write_data>

#endif
	params[0] = 0x3e;
 8005a40:	233e      	movs	r3, #62	@ 0x3e
 8005a42:	703b      	strb	r3, [r7, #0]
	params[1] = 0x07;
 8005a44:	2307      	movs	r3, #7
 8005a46:	707b      	strb	r3, [r7, #1]
	gc9a01a_write_cmd(0x99);	//bvee 2x
 8005a48:	2099      	movs	r0, #153	@ 0x99
 8005a4a:	f7ff fd6f 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,2);
 8005a4e:	463b      	mov	r3, r7
 8005a50:	2102      	movs	r1, #2
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff fd94 	bl	8005580 <gc9a01a_write_data>


	params[0] = 0x00;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	703b      	strb	r3, [r7, #0]
	gc9a01a_write_cmd(0x35);
 8005a5c:	2035      	movs	r0, #53	@ 0x35
 8005a5e:	f7ff fd65 	bl	800552c <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1);
 8005a62:	463b      	mov	r3, r7
 8005a64:	2101      	movs	r1, #1
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff fd8a 	bl	8005580 <gc9a01a_write_data>

	gc9a01a_write_cmd(0x21);
 8005a6c:	2021      	movs	r0, #33	@ 0x21
 8005a6e:	f7ff fd5d 	bl	800552c <gc9a01a_write_cmd>
	HAL_Delay(120);
 8005a72:	2078      	movs	r0, #120	@ 0x78
 8005a74:	f7fc fd40 	bl	80024f8 <HAL_Delay>
	//--------end gamma setting--------------//

	gc9a01a_write_cmd(0x11);
 8005a78:	2011      	movs	r0, #17
 8005a7a:	f7ff fd57 	bl	800552c <gc9a01a_write_cmd>
	HAL_Delay(120);
 8005a7e:	2078      	movs	r0, #120	@ 0x78
 8005a80:	f7fc fd3a 	bl	80024f8 <HAL_Delay>
	gc9a01a_write_cmd(0x29);
 8005a84:	2029      	movs	r0, #41	@ 0x29
 8005a86:	f7ff fd51 	bl	800552c <gc9a01a_write_cmd>



#if 1
	gc9a01a_write_cmd(0x2C);
 8005a8a:	202c      	movs	r0, #44	@ 0x2c
 8005a8c:	f7ff fd4e 	bl	800552c <gc9a01a_write_cmd>
#endif
}
 8005a90:	bf00      	nop
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <gc9a01a_hw_reset>:

void gc9a01a_sw_reset() {

}

void gc9a01a_hw_reset() {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
	LCD_RESX_HIGH();
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	2108      	movs	r1, #8
 8005aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005aa4:	f7fc ffc4 	bl	8002a30 <HAL_GPIO_WritePin>
	HAL_Delay(LCD_HW_RESET_DELAY_MS);
 8005aa8:	2032      	movs	r0, #50	@ 0x32
 8005aaa:	f7fc fd25 	bl	80024f8 <HAL_Delay>
	LCD_RESX_LOW();
 8005aae:	2200      	movs	r2, #0
 8005ab0:	2108      	movs	r1, #8
 8005ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005ab6:	f7fc ffbb 	bl	8002a30 <HAL_GPIO_WritePin>
	HAL_Delay(LCD_HW_RESET_DELAY_MS);
 8005aba:	2032      	movs	r0, #50	@ 0x32
 8005abc:	f7fc fd1c 	bl	80024f8 <HAL_Delay>
	LCD_RESX_HIGH();
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	2108      	movs	r1, #8
 8005ac4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005ac8:	f7fc ffb2 	bl	8002a30 <HAL_GPIO_WritePin>
	HAL_Delay(LCD_HW_RESET_DELAY_MS);
 8005acc:	2032      	movs	r0, #50	@ 0x32
 8005ace:	f7fc fd13 	bl	80024f8 <HAL_Delay>
}
 8005ad2:	bf00      	nop
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <bsp_lcd_fill_rect>:
 * x_width : Width of the rectangle in number of pixels ( 1 <= x_width <= BSP_FB_WIDTH )
 * y_start : Vertical start position of the rectangle ( 0 <= y_start < BSP_FB_HEIGHT)
 * y_height : Height of the rectangle in number of pixels ( 1 <= y_height <= BSP_FB_HEIGHT )
 */
void bsp_lcd_fill_rect(bsp_lcd_t *hlcd, uint32_t rgb888, uint32_t x_start, uint32_t x_width,uint32_t y_start,uint32_t y_height)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b08e      	sub	sp, #56	@ 0x38
 8005ada:	af02      	add	r7, sp, #8
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
 8005ae2:	603b      	str	r3, [r7, #0]

	uint32_t total_bytes_to_write = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61fb      	str	r3, [r7, #28]
	uint32_t bytes_sent_so_far = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t remaining_bytes = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t npix;
	uint32_t pixels_sent = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	623b      	str	r3, [r7, #32]
	uint32_t x1,y1;
	uint32_t pixel_per_line = x_width;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	61bb      	str	r3, [r7, #24]

	if((x_start+x_width) > BSP_LCD_ACTIVE_WIDTH) return;
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	4413      	add	r3, r2
 8005afe:	2bf0      	cmp	r3, #240	@ 0xf0
 8005b00:	d85a      	bhi.n	8005bb8 <bsp_lcd_fill_rect+0xe2>
	if((y_start+y_height) > BSP_LCD_ACTIVE_HEIGHT) return;
 8005b02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b06:	4413      	add	r3, r2
 8005b08:	2bf0      	cmp	r3, #240	@ 0xf0
 8005b0a:	d857      	bhi.n	8005bbc <bsp_lcd_fill_rect+0xe6>

	//1. calculate total number of bytes written in to DB
	total_bytes_to_write = get_total_bytes(hlcd,x_width,y_height);
 8005b0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005b0e:	6839      	ldr	r1, [r7, #0]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 fabb 	bl	800608c <get_total_bytes>
 8005b16:	61f8      	str	r0, [r7, #28]
	remaining_bytes = total_bytes_to_write;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
	while(remaining_bytes){
 8005b1c:	e048      	b.n	8005bb0 <bsp_lcd_fill_rect+0xda>
		x1 = x_start+(pixels_sent % pixel_per_line);
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b26:	69b9      	ldr	r1, [r7, #24]
 8005b28:	fb01 f202 	mul.w	r2, r1, r2
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4413      	add	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
		y1 = y_start+(pixels_sent / pixel_per_line);
 8005b34:	6a3a      	ldr	r2, [r7, #32]
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b3e:	4413      	add	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]

		make_area(&hlcd->area,x1,x_width,y1,y_height);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f103 0018 	add.w	r0, r3, #24
 8005b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	6979      	ldr	r1, [r7, #20]
 8005b52:	f000 fab6 	bl	80060c2 <make_area>
		//make_area(lcd_area_t *area,uint32_t x_start, uint32_t x_width,uint32_t y_start,uint32_t y_height)

		if(x1 != x_start){
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d006      	beq.n	8005b6c <bsp_lcd_fill_rect+0x96>
			npix = x_start+x_width - x1;
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	441a      	add	r2, r3
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6a:	e006      	b.n	8005b7a <bsp_lcd_fill_rect+0xa4>
		}else{
			npix = bytes_to_pixels(remaining_bytes,hlcd->pixel_format);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	785b      	ldrb	r3, [r3, #1]
 8005b70:	4619      	mov	r1, r3
 8005b72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b74:	f000 fae4 	bl	8006140 <bytes_to_pixels>
 8005b78:	6278      	str	r0, [r7, #36]	@ 0x24
		}

		bytes_sent_so_far  +=  copy_to_draw_buffer(hlcd,pixels_to_bytes(npix,hlcd->pixel_format),rgb888);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	785b      	ldrb	r3, [r3, #1]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b82:	f000 faeb 	bl	800615c <pixels_to_bytes>
 8005b86:	4603      	mov	r3, r0
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 faf3 	bl	8006178 <copy_to_draw_buffer>
 8005b92:	4602      	mov	r2, r0
 8005b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b96:	4413      	add	r3, r2
 8005b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pixels_sent = bytes_to_pixels(bytes_sent_so_far,hlcd->pixel_format);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	785b      	ldrb	r3, [r3, #1]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ba2:	f000 facd 	bl	8006140 <bytes_to_pixels>
 8005ba6:	6238      	str	r0, [r7, #32]
		remaining_bytes = total_bytes_to_write - bytes_sent_so_far;
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	62bb      	str	r3, [r7, #40]	@ 0x28
	while(remaining_bytes){
 8005bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1b3      	bne.n	8005b1e <bsp_lcd_fill_rect+0x48>
 8005bb6:	e002      	b.n	8005bbe <bsp_lcd_fill_rect+0xe8>
	if((x_start+x_width) > BSP_LCD_ACTIVE_WIDTH) return;
 8005bb8:	bf00      	nop
 8005bba:	e000      	b.n	8005bbe <bsp_lcd_fill_rect+0xe8>
	if((y_start+y_height) > BSP_LCD_ACTIVE_HEIGHT) return;
 8005bbc:	bf00      	nop
		}
}
 8005bbe:	3730      	adds	r7, #48	@ 0x30
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <bsp_lcd_fill_image>:
{
	bsp_lcd_fill_rect(hlcd, rgb888,0,(BSP_LCD_ACTIVE_WIDTH),0,(BSP_LCD_ACTIVE_HEIGHT));
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
void bsp_lcd_fill_image(bsp_lcd_t *hlcd, uint16_t *image_data, uint16_t x_start, uint16_t x_width,uint16_t y_start,uint16_t y_height)
{
 8005bc4:	b590      	push	{r4, r7, lr}
 8005bc6:	b08b      	sub	sp, #44	@ 0x2c
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	4611      	mov	r1, r2
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	80fb      	strh	r3, [r7, #6]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	80bb      	strh	r3, [r7, #4]
	uint16_t total_bytes_to_write = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	82fb      	strh	r3, [r7, #22]
	uint16_t bytes_sent_so_far = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	83fb      	strh	r3, [r7, #30]
	uint16_t remaining_bytes = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	83bb      	strh	r3, [r7, #28]
	uint16_t npix;
	uint16_t pixels_sent = 0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	833b      	strh	r3, [r7, #24]
	uint16_t x1,y1;
	uint16_t pixel_per_line = x_width;
 8005bea:	88bb      	ldrh	r3, [r7, #4]
 8005bec:	82bb      	strh	r3, [r7, #20]

	if((x_start+x_width) > BSP_LCD_ACTIVE_WIDTH) return;
 8005bee:	88fa      	ldrh	r2, [r7, #6]
 8005bf0:	88bb      	ldrh	r3, [r7, #4]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	2bf0      	cmp	r3, #240	@ 0xf0
 8005bf6:	dc66      	bgt.n	8005cc6 <bsp_lcd_fill_image+0x102>
	if((y_start+y_height) > BSP_LCD_ACTIVE_HEIGHT) return;
 8005bf8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005bfa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005bfc:	4413      	add	r3, r2
 8005bfe:	2bf0      	cmp	r3, #240	@ 0xf0
 8005c00:	dc63      	bgt.n	8005cca <bsp_lcd_fill_image+0x106>

	//1. calculate total number of bytes written in to DB
	total_bytes_to_write = get_total_bytes(hlcd,x_width,y_height);
 8005c02:	88bb      	ldrh	r3, [r7, #4]
 8005c04:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005c06:	4619      	mov	r1, r3
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 fa3f 	bl	800608c <get_total_bytes>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	82fb      	strh	r3, [r7, #22]
	remaining_bytes = total_bytes_to_write;
 8005c12:	8afb      	ldrh	r3, [r7, #22]
 8005c14:	83bb      	strh	r3, [r7, #28]
	while(remaining_bytes){
 8005c16:	e052      	b.n	8005cbe <bsp_lcd_fill_image+0xfa>
		x1 = x_start+(pixels_sent % pixel_per_line);
 8005c18:	8b3b      	ldrh	r3, [r7, #24]
 8005c1a:	8aba      	ldrh	r2, [r7, #20]
 8005c1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c20:	fb01 f202 	mul.w	r2, r1, r2
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	88fb      	ldrh	r3, [r7, #6]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	827b      	strh	r3, [r7, #18]
		y1 = y_start+(pixels_sent / pixel_per_line);
 8005c2e:	8b3a      	ldrh	r2, [r7, #24]
 8005c30:	8abb      	ldrh	r3, [r7, #20]
 8005c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005c3a:	4413      	add	r3, r2
 8005c3c:	823b      	strh	r3, [r7, #16]

		make_area(&hlcd->area,x1,x_width,y1,y_height);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f103 0018 	add.w	r0, r3, #24
 8005c44:	8a79      	ldrh	r1, [r7, #18]
 8005c46:	88ba      	ldrh	r2, [r7, #4]
 8005c48:	8a3c      	ldrh	r4, [r7, #16]
 8005c4a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	4623      	mov	r3, r4
 8005c50:	f000 fa37 	bl	80060c2 <make_area>
		//make_area(lcd_area_t *area,uint32_t x_start, uint32_t x_width,uint32_t y_start,uint32_t y_height)

		if(x1 != x_start){
 8005c54:	8a7a      	ldrh	r2, [r7, #18]
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d007      	beq.n	8005c6c <bsp_lcd_fill_image+0xa8>
			npix = x_start+x_width - x1;
 8005c5c:	88fa      	ldrh	r2, [r7, #6]
 8005c5e:	88bb      	ldrh	r3, [r7, #4]
 8005c60:	4413      	add	r3, r2
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	8a7b      	ldrh	r3, [r7, #18]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	837b      	strh	r3, [r7, #26]
 8005c6a:	e008      	b.n	8005c7e <bsp_lcd_fill_image+0xba>
		}else{
			npix = bytes_to_pixels(remaining_bytes,hlcd->pixel_format);
 8005c6c:	8bba      	ldrh	r2, [r7, #28]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	785b      	ldrb	r3, [r3, #1]
 8005c72:	4619      	mov	r1, r3
 8005c74:	4610      	mov	r0, r2
 8005c76:	f000 fa63 	bl	8006140 <bytes_to_pixels>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	837b      	strh	r3, [r7, #26]
		}

		bytes_sent_so_far  +=  copy_to_draw_buffer2(hlcd,pixels_to_bytes(npix,hlcd->pixel_format),image_data);
 8005c7e:	8b7a      	ldrh	r2, [r7, #26]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	4619      	mov	r1, r3
 8005c86:	4610      	mov	r0, r2
 8005c88:	f000 fa68 	bl	800615c <pixels_to_bytes>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	4619      	mov	r1, r3
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f81c 	bl	8005cd2 <copy_to_draw_buffer2>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	8bfb      	ldrh	r3, [r7, #30]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	83fb      	strh	r3, [r7, #30]

		pixels_sent = bytes_to_pixels(bytes_sent_so_far,hlcd->pixel_format);
 8005ca4:	8bfa      	ldrh	r2, [r7, #30]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	785b      	ldrb	r3, [r3, #1]
 8005caa:	4619      	mov	r1, r3
 8005cac:	4610      	mov	r0, r2
 8005cae:	f000 fa47 	bl	8006140 <bytes_to_pixels>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	833b      	strh	r3, [r7, #24]
		remaining_bytes = total_bytes_to_write - bytes_sent_so_far;
 8005cb6:	8afa      	ldrh	r2, [r7, #22]
 8005cb8:	8bfb      	ldrh	r3, [r7, #30]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	83bb      	strh	r3, [r7, #28]
	while(remaining_bytes){
 8005cbe:	8bbb      	ldrh	r3, [r7, #28]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1a9      	bne.n	8005c18 <bsp_lcd_fill_image+0x54>
 8005cc4:	e002      	b.n	8005ccc <bsp_lcd_fill_image+0x108>
	if((x_start+x_width) > BSP_LCD_ACTIVE_WIDTH) return;
 8005cc6:	bf00      	nop
 8005cc8:	e000      	b.n	8005ccc <bsp_lcd_fill_image+0x108>
	if((y_start+y_height) > BSP_LCD_ACTIVE_HEIGHT) return;
 8005cca:	bf00      	nop
		}
}
 8005ccc:	3724      	adds	r7, #36	@ 0x24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd90      	pop	{r4, r7, pc}

08005cd2 <copy_to_draw_buffer2>:

static uint32_t copy_to_draw_buffer2( bsp_lcd_t *hlcd,uint16_t nbytes,uint16_t *image_data)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b088      	sub	sp, #32
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	607a      	str	r2, [r7, #4]
 8005cde:	817b      	strh	r3, [r7, #10]
	uint16_t *fb_ptr = NULL;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	61fb      	str	r3, [r7, #28]
	uint32_t npixels;
	hlcd->buff_to_draw = get_buff(hlcd);
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 faa5 	bl	8006234 <get_buff>
 8005cea:	4602      	mov	r2, r0
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	611a      	str	r2, [r3, #16]
	fb_ptr = (uint16_t*)hlcd->buff_to_draw;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	61fb      	str	r3, [r7, #28]
	nbytes =  ((nbytes > hlcd->db_size)?hlcd->db_size:nbytes);
 8005cf6:	897a      	ldrh	r2, [r7, #10]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	bf28      	it	cs
 8005d00:	4613      	movcs	r3, r2
 8005d02:	817b      	strh	r3, [r7, #10]
	npixels= bytes_to_pixels(nbytes,hlcd->pixel_format);
 8005d04:	897a      	ldrh	r2, [r7, #10]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	785b      	ldrb	r3, [r3, #1]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	f000 fa17 	bl	8006140 <bytes_to_pixels>
 8005d12:	6178      	str	r0, [r7, #20]
	if(hlcd->buff_to_draw != NULL){
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d035      	beq.n	8005d88 <copy_to_draw_buffer2+0xb6>
		for(uint16_t i = 0 ; i < npixels ;i++){
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	837b      	strh	r3, [r7, #26]
 8005d20:	e00c      	b.n	8005d3c <copy_to_draw_buffer2+0x6a>
			//*fb_ptr = convert_rgb888_to_rgb565(image_data[i]); //image_data[i]
			*fb_ptr = image_data[i];
 8005d22:	8b7b      	ldrh	r3, [r7, #26]
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	4413      	add	r3, r2
 8005d2a:	881a      	ldrh	r2, [r3, #0]
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	801a      	strh	r2, [r3, #0]
			fb_ptr++;
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	3302      	adds	r3, #2
 8005d34:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0 ; i < npixels ;i++){
 8005d36:	8b7b      	ldrh	r3, [r7, #26]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	837b      	strh	r3, [r7, #26]
 8005d3c:	8b7b      	ldrh	r3, [r7, #26]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d8ee      	bhi.n	8005d22 <copy_to_draw_buffer2+0x50>
		}
		hlcd->write_length = pixels_to_bytes(npixels,hlcd->pixel_format);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6978      	ldr	r0, [r7, #20]
 8005d4c:	f000 fa06 	bl	800615c <pixels_to_bytes>
 8005d50:	4602      	mov	r2, r0
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	60da      	str	r2, [r3, #12]
		while(!is_lcd_write_allowed(hlcd));
 8005d56:	bf00      	nop
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 fae4 	bl	8006326 <is_lcd_write_allowed>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f9      	beq.n	8005d58 <copy_to_draw_buffer2+0x86>
		hlcd->buff_to_flush = hlcd->buff_to_draw;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	691a      	ldr	r2, [r3, #16]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	615a      	str	r2, [r3, #20]
		hlcd->buff_to_draw = NULL;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	611a      	str	r2, [r3, #16]
		lcd_flush(hlcd);
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fabd 	bl	80062f2 <lcd_flush>
		return pixels_to_bytes(npixels,hlcd->pixel_format);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	6978      	ldr	r0, [r7, #20]
 8005d80:	f000 f9ec 	bl	800615c <pixels_to_bytes>
 8005d84:	4603      	mov	r3, r0
 8005d86:	e000      	b.n	8005d8a <copy_to_draw_buffer2+0xb8>
	}

	return 0;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <gc9a01a_set_address_window>:


static void gc9a01a_set_address_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8005d92:	b590      	push	{r4, r7, lr}
 8005d94:	b085      	sub	sp, #20
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	4604      	mov	r4, r0
 8005d9a:	4608      	mov	r0, r1
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4623      	mov	r3, r4
 8005da2:	80fb      	strh	r3, [r7, #6]
 8005da4:	4603      	mov	r3, r0
 8005da6:	80bb      	strh	r3, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	807b      	strh	r3, [r7, #2]
 8005dac:	4613      	mov	r3, r2
 8005dae:	803b      	strh	r3, [r7, #0]
	// column address set
	gc9a01a_write_cmd(0x2A); // CASET
 8005db0:	202a      	movs	r0, #42	@ 0x2a
 8005db2:	f7ff fbbb 	bl	800552c <gc9a01a_write_cmd>
	{
		uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8005db6:	88fb      	ldrh	r3, [r7, #6]
 8005db8:	0a1b      	lsrs	r3, r3, #8
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	733b      	strb	r3, [r7, #12]
 8005dc0:	88fb      	ldrh	r3, [r7, #6]
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	737b      	strb	r3, [r7, #13]
 8005dc6:	887b      	ldrh	r3, [r7, #2]
 8005dc8:	0a1b      	lsrs	r3, r3, #8
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	73bb      	strb	r3, [r7, #14]
 8005dd0:	887b      	ldrh	r3, [r7, #2]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	73fb      	strb	r3, [r7, #15]
		gc9a01a_write_data(data, sizeof(data));
 8005dd6:	f107 030c 	add.w	r3, r7, #12
 8005dda:	2104      	movs	r1, #4
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff fbcf 	bl	8005580 <gc9a01a_write_data>
	}

	// row address set
	gc9a01a_write_cmd(0x2B); // RASET
 8005de2:	202b      	movs	r0, #43	@ 0x2b
 8005de4:	f7ff fba2 	bl	800552c <gc9a01a_write_cmd>
	{
		uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8005de8:	88bb      	ldrh	r3, [r7, #4]
 8005dea:	0a1b      	lsrs	r3, r3, #8
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	723b      	strb	r3, [r7, #8]
 8005df2:	88bb      	ldrh	r3, [r7, #4]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	727b      	strb	r3, [r7, #9]
 8005df8:	883b      	ldrh	r3, [r7, #0]
 8005dfa:	0a1b      	lsrs	r3, r3, #8
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	72bb      	strb	r3, [r7, #10]
 8005e02:	883b      	ldrh	r3, [r7, #0]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	72fb      	strb	r3, [r7, #11]
		gc9a01a_write_data(data, sizeof(data));
 8005e08:	f107 0308 	add.w	r3, r7, #8
 8005e0c:	2104      	movs	r1, #4
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff fbb6 	bl	8005580 <gc9a01a_write_data>
	}

	// write to RAM
	gc9a01a_write_cmd(0x2C); // RAMWR
 8005e14:	202c      	movs	r0, #44	@ 0x2c
 8005e16:	f7ff fb89 	bl	800552c <gc9a01a_write_cmd>
}
 8005e1a:	bf00      	nop
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd90      	pop	{r4, r7, pc}

08005e22 <gc9a01a_write_char>:

static void gc9a01a_write_char(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8005e22:	b082      	sub	sp, #8
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	80fb      	strh	r3, [r7, #6]
 8005e30:	460b      	mov	r3, r1
 8005e32:	80bb      	strh	r3, [r7, #4]
 8005e34:	4613      	mov	r3, r2
 8005e36:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	gc9a01a_set_address_window(x, y, x+font.width-1, y+font.height-1);
 8005e38:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	4413      	add	r3, r2
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	88bb      	ldrh	r3, [r7, #4]
 8005e50:	440b      	add	r3, r1
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	88b9      	ldrh	r1, [r7, #4]
 8005e5a:	88f8      	ldrh	r0, [r7, #6]
 8005e5c:	f7ff ff99 	bl	8005d92 <gc9a01a_set_address_window>

	for(i = 0; i < font.height; i++) {
 8005e60:	2300      	movs	r3, #0
 8005e62:	61fb      	str	r3, [r7, #28]
 8005e64:	e041      	b.n	8005eea <gc9a01a_write_char+0xc8>
		b = font.data[(ch - 32) * font.height + i];
 8005e66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	3b20      	subs	r3, #32
 8005e6c:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8005e70:	fb01 f303 	mul.w	r3, r1, r3
 8005e74:	4619      	mov	r1, r3
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	440b      	add	r3, r1
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 8005e82:	2300      	movs	r3, #0
 8005e84:	61bb      	str	r3, [r7, #24]
 8005e86:	e027      	b.n	8005ed8 <gc9a01a_write_char+0xb6>
			if((b << j) & 0x8000)  {
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00e      	beq.n	8005eb6 <gc9a01a_write_char+0x94>
					uint8_t data[] = { color >> 8, color & 0xFF };
 8005e98:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005e9a:	0a1b      	lsrs	r3, r3, #8
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	743b      	strb	r3, [r7, #16]
 8005ea2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	747b      	strb	r3, [r7, #17]
					gc9a01a_write_data(data, sizeof(data));
 8005ea8:	f107 0310 	add.w	r3, r7, #16
 8005eac:	2102      	movs	r1, #2
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff fb66 	bl	8005580 <gc9a01a_write_data>
 8005eb4:	e00d      	b.n	8005ed2 <gc9a01a_write_char+0xb0>
			} else {
					uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8005eb6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005eb8:	0a1b      	lsrs	r3, r3, #8
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	733b      	strb	r3, [r7, #12]
 8005ec0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	737b      	strb	r3, [r7, #13]
					gc9a01a_write_data(data, sizeof(data));
 8005ec6:	f107 030c 	add.w	r3, r7, #12
 8005eca:	2102      	movs	r1, #2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff fb57 	bl	8005580 <gc9a01a_write_data>
		for(j = 0; j < font.width; j++) {
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	61bb      	str	r3, [r7, #24]
 8005ed8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005edc:	461a      	mov	r2, r3
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d3d1      	bcc.n	8005e88 <gc9a01a_write_char+0x66>
	for(i = 0; i < font.height; i++) {
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	61fb      	str	r3, [r7, #28]
 8005eea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005eee:	461a      	mov	r2, r3
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d3b7      	bcc.n	8005e66 <gc9a01a_write_char+0x44>
			}
		}
	}
}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	3720      	adds	r7, #32
 8005efc:	46bd      	mov	sp, r7
 8005efe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f02:	b002      	add	sp, #8
 8005f04:	4770      	bx	lr

08005f06 <gc9a01a_write_string>:

void gc9a01a_write_string(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8005f06:	b082      	sub	sp, #8
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af04      	add	r7, sp, #16
 8005f0e:	603a      	str	r2, [r7, #0]
 8005f10:	617b      	str	r3, [r7, #20]
 8005f12:	4603      	mov	r3, r0
 8005f14:	80fb      	strh	r3, [r7, #6]
 8005f16:	460b      	mov	r3, r1
 8005f18:	80bb      	strh	r3, [r7, #4]
	LCD_CSX_LOW();
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2110      	movs	r1, #16
 8005f1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005f22:	f7fc fd85 	bl	8002a30 <HAL_GPIO_WritePin>

	while(*str) {
 8005f26:	e02d      	b.n	8005f84 <gc9a01a_write_string+0x7e>
		if(x + font.width >= BSP_LCD_ACTIVE_WIDTH) {
 8005f28:	88fb      	ldrh	r3, [r7, #6]
 8005f2a:	7d3a      	ldrb	r2, [r7, #20]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	2bef      	cmp	r3, #239	@ 0xef
 8005f30:	dd13      	ble.n	8005f5a <gc9a01a_write_string+0x54>
			x = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8005f36:	7d7b      	ldrb	r3, [r7, #21]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	88bb      	ldrh	r3, [r7, #4]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= BSP_LCD_ACTIVE_HEIGHT) {
 8005f40:	88bb      	ldrh	r3, [r7, #4]
 8005f42:	7d7a      	ldrb	r2, [r7, #21]
 8005f44:	4413      	add	r3, r2
 8005f46:	2bef      	cmp	r3, #239	@ 0xef
 8005f48:	dc21      	bgt.n	8005f8e <gc9a01a_write_string+0x88>
				break;
			}

			if(*str == ' ') {
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b20      	cmp	r3, #32
 8005f50:	d103      	bne.n	8005f5a <gc9a01a_write_string+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	3301      	adds	r3, #1
 8005f56:	603b      	str	r3, [r7, #0]
				continue;
 8005f58:	e014      	b.n	8005f84 <gc9a01a_write_string+0x7e>
			}
		}
		gc9a01a_write_char(x, y, *str, font, color, bgcolor);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781a      	ldrb	r2, [r3, #0]
 8005f5e:	88b9      	ldrh	r1, [r7, #4]
 8005f60:	88f8      	ldrh	r0, [r7, #6]
 8005f62:	8c3b      	ldrh	r3, [r7, #32]
 8005f64:	9302      	str	r3, [sp, #8]
 8005f66:	8bbb      	ldrh	r3, [r7, #28]
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f7ff ff57 	bl	8005e22 <gc9a01a_write_char>
		x += font.width;
 8005f74:	7d3b      	ldrb	r3, [r7, #20]
 8005f76:	461a      	mov	r2, r3
 8005f78:	88fb      	ldrh	r3, [r7, #6]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	80fb      	strh	r3, [r7, #6]
		str++;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	3301      	adds	r3, #1
 8005f82:	603b      	str	r3, [r7, #0]
	while(*str) {
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1cd      	bne.n	8005f28 <gc9a01a_write_string+0x22>
 8005f8c:	e000      	b.n	8005f90 <gc9a01a_write_string+0x8a>
				break;
 8005f8e:	bf00      	nop
	}
	LCD_CSX_HIGH();
 8005f90:	2201      	movs	r2, #1
 8005f92:	2110      	movs	r1, #16
 8005f94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005f98:	f7fc fd4a 	bl	8002a30 <HAL_GPIO_WritePin>
}
 8005f9c:	bf00      	nop
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fa6:	b002      	add	sp, #8
 8005fa8:	4770      	bx	lr

08005faa <bsp_lcd_send_cmd_mem_write>:

///////////////////////////////////////////////////////////////////////////////////////////////////

void bsp_lcd_send_cmd_mem_write(void)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	af00      	add	r7, sp, #0
	gc9a01a_write_cmd(GC9A01A_RAMWR);
 8005fae:	202c      	movs	r0, #44	@ 0x2c
 8005fb0:	f7ff fabc 	bl	800552c <gc9a01a_write_cmd>
}
 8005fb4:	bf00      	nop
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <bsp_lcd_write>:


void bsp_lcd_write(uint8_t *buffer, uint32_t nbytes)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]

	uint16_t *buff_ptr;

	__disable_spi();
 8005fc2:	4b31      	ldr	r3, [pc, #196]	@ (8006088 <bsp_lcd_write+0xd0>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1f9      	bne.n	8005fc2 <bsp_lcd_write+0xa>
 8005fce:	4b2e      	ldr	r3, [pc, #184]	@ (8006088 <bsp_lcd_write+0xd0>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a2d      	ldr	r2, [pc, #180]	@ (8006088 <bsp_lcd_write+0xd0>)
 8005fd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fd8:	6013      	str	r3, [r2, #0]
	__spi_set_dff_16bit();
 8005fda:	4b2b      	ldr	r3, [pc, #172]	@ (8006088 <bsp_lcd_write+0xd0>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	4a2a      	ldr	r2, [pc, #168]	@ (8006088 <bsp_lcd_write+0xd0>)
 8005fe0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005fe4:	6053      	str	r3, [r2, #4]
 8005fe6:	4b28      	ldr	r3, [pc, #160]	@ (8006088 <bsp_lcd_write+0xd0>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	4a27      	ldr	r2, [pc, #156]	@ (8006088 <bsp_lcd_write+0xd0>)
 8005fec:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8005ff0:	6053      	str	r3, [r2, #4]
	__enable_spi();
 8005ff2:	4b25      	ldr	r3, [pc, #148]	@ (8006088 <bsp_lcd_write+0xd0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a24      	ldr	r2, [pc, #144]	@ (8006088 <bsp_lcd_write+0xd0>)
 8005ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ffc:	6013      	str	r3, [r2, #0]

	LCD_CSX_LOW();
 8005ffe:	2200      	movs	r2, #0
 8006000:	2110      	movs	r1, #16
 8006002:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006006:	f7fc fd13 	bl	8002a30 <HAL_GPIO_WritePin>

	buff_ptr = (uint16_t*)buffer;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	60fb      	str	r3, [r7, #12]
	while(nbytes){
 800600e:	e010      	b.n	8006032 <bsp_lcd_write+0x7a>
		while(!REG_READ_BIT(SPI->SR,SPI_SR_TXE_Pos));
 8006010:	bf00      	nop
 8006012:	4b1d      	ldr	r3, [pc, #116]	@ (8006088 <bsp_lcd_write+0xd0>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f9      	beq.n	8006012 <bsp_lcd_write+0x5a>
		REG_WRITE(SPI->DR,*buff_ptr);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	881a      	ldrh	r2, [r3, #0]
 8006022:	4b19      	ldr	r3, [pc, #100]	@ (8006088 <bsp_lcd_write+0xd0>)
 8006024:	60da      	str	r2, [r3, #12]
		++buff_ptr;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3302      	adds	r3, #2
 800602a:	60fb      	str	r3, [r7, #12]
		nbytes -= 2;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	3b02      	subs	r3, #2
 8006030:	603b      	str	r3, [r7, #0]
	while(nbytes){
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1eb      	bne.n	8006010 <bsp_lcd_write+0x58>
	}

	__disable_spi();
 8006038:	4b13      	ldr	r3, [pc, #76]	@ (8006088 <bsp_lcd_write+0xd0>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1f9      	bne.n	8006038 <bsp_lcd_write+0x80>
 8006044:	4b10      	ldr	r3, [pc, #64]	@ (8006088 <bsp_lcd_write+0xd0>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a0f      	ldr	r2, [pc, #60]	@ (8006088 <bsp_lcd_write+0xd0>)
 800604a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800604e:	6013      	str	r3, [r2, #0]
	LCD_CSX_HIGH();
 8006050:	2201      	movs	r2, #1
 8006052:	2110      	movs	r1, #16
 8006054:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006058:	f7fc fcea 	bl	8002a30 <HAL_GPIO_WritePin>
	__spi_set_dff_8bit();
 800605c:	4b0a      	ldr	r3, [pc, #40]	@ (8006088 <bsp_lcd_write+0xd0>)
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	4a09      	ldr	r2, [pc, #36]	@ (8006088 <bsp_lcd_write+0xd0>)
 8006062:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006066:	6053      	str	r3, [r2, #4]
 8006068:	4b07      	ldr	r3, [pc, #28]	@ (8006088 <bsp_lcd_write+0xd0>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	4a06      	ldr	r2, [pc, #24]	@ (8006088 <bsp_lcd_write+0xd0>)
 800606e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006072:	6053      	str	r3, [r2, #4]
	__enable_spi();
 8006074:	4b04      	ldr	r3, [pc, #16]	@ (8006088 <bsp_lcd_write+0xd0>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a03      	ldr	r2, [pc, #12]	@ (8006088 <bsp_lcd_write+0xd0>)
 800607a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800607e:	6013      	str	r3, [r2, #0]
}
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40013000 	.word	0x40013000

0800608c <get_total_bytes>:

static uint32_t get_total_bytes(bsp_lcd_t *hlcd,uint32_t w , uint32_t h)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
	uint8_t bytes_per_pixel = 2;
 8006098:	2302      	movs	r3, #2
 800609a:	75fb      	strb	r3, [r7, #23]
	if(hlcd->pixel_format == BSP_LCD_PIXEL_FMT_RGB565){
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	785b      	ldrb	r3, [r3, #1]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d101      	bne.n	80060a8 <get_total_bytes+0x1c>
		bytes_per_pixel = 2;
 80060a4:	2302      	movs	r3, #2
 80060a6:	75fb      	strb	r3, [r7, #23]
	}
	return (w * h * bytes_per_pixel);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	fb02 f303 	mul.w	r3, r2, r3
 80060b0:	7dfa      	ldrb	r2, [r7, #23]
 80060b2:	fb02 f303 	mul.w	r3, r2, r3
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <make_area>:

static void make_area(lcd_area_t *area,uint32_t x_start, uint32_t x_width,uint32_t y_start,uint32_t y_height){
 80060c2:	b480      	push	{r7}
 80060c4:	b087      	sub	sp, #28
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	603b      	str	r3, [r7, #0]

	uint16_t lcd_total_width,lcd_total_height;

	lcd_total_width =  BSP_LCD_ACTIVE_WIDTH-1;
 80060d0:	23ef      	movs	r3, #239	@ 0xef
 80060d2:	82fb      	strh	r3, [r7, #22]
	lcd_total_height = BSP_LCD_ACTIVE_HEIGHT -1;
 80060d4:	23ef      	movs	r3, #239	@ 0xef
 80060d6:	82bb      	strh	r3, [r7, #20]

	area->x1 = x_start;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	801a      	strh	r2, [r3, #0]
	area->x2 = x_start + x_width -1;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4413      	add	r3, r2
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	805a      	strh	r2, [r3, #2]
	area->y1 = y_start;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	809a      	strh	r2, [r3, #4]
	area->y2 = y_start + y_height -1;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	b29a      	uxth	r2, r3
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	b29b      	uxth	r3, r3
 8006104:	4413      	add	r3, r2
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	80da      	strh	r2, [r3, #6]

	area->x2 = (area->x2 > lcd_total_width) ? lcd_total_width :area->x2;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	885b      	ldrh	r3, [r3, #2]
 8006114:	8afa      	ldrh	r2, [r7, #22]
 8006116:	4293      	cmp	r3, r2
 8006118:	bf28      	it	cs
 800611a:	4613      	movcs	r3, r2
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	805a      	strh	r2, [r3, #2]
	area->y2 = (area->y2 > lcd_total_height) ? lcd_total_height : area->y2;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	88db      	ldrh	r3, [r3, #6]
 8006126:	8aba      	ldrh	r2, [r7, #20]
 8006128:	4293      	cmp	r3, r2
 800612a:	bf28      	it	cs
 800612c:	4613      	movcs	r3, r2
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	80da      	strh	r2, [r3, #6]

}
 8006134:	bf00      	nop
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <bytes_to_pixels>:


static uint32_t bytes_to_pixels(uint32_t nbytes, uint8_t pixel_format)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	70fb      	strb	r3, [r7, #3]
	UNUSED(pixel_format);
	return nbytes/2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	085b      	lsrs	r3, r3, #1
}
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <pixels_to_bytes>:


static uint32_t pixels_to_bytes(uint32_t pixels, uint8_t pixel_format)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	70fb      	strb	r3, [r7, #3]
	UNUSED(pixel_format);
	return pixels * 2UL;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	005b      	lsls	r3, r3, #1
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <copy_to_draw_buffer>:

static uint32_t copy_to_draw_buffer( bsp_lcd_t *hlcd,uint32_t nbytes,uint32_t rgb888)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
	uint16_t *fb_ptr = NULL;
 8006184:	2300      	movs	r3, #0
 8006186:	61fb      	str	r3, [r7, #28]
	uint32_t npixels;
	hlcd->buff_to_draw = get_buff(hlcd);
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 f853 	bl	8006234 <get_buff>
 800618e:	4602      	mov	r2, r0
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	611a      	str	r2, [r3, #16]
	fb_ptr = (uint16_t*)hlcd->buff_to_draw;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	61fb      	str	r3, [r7, #28]
	nbytes =  ((nbytes > hlcd->db_size)?hlcd->db_size:nbytes);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	4293      	cmp	r3, r2
 80061a2:	bf28      	it	cs
 80061a4:	4613      	movcs	r3, r2
 80061a6:	60bb      	str	r3, [r7, #8]
	npixels= bytes_to_pixels(nbytes,hlcd->pixel_format);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	4619      	mov	r1, r3
 80061ae:	68b8      	ldr	r0, [r7, #8]
 80061b0:	f7ff ffc6 	bl	8006140 <bytes_to_pixels>
 80061b4:	6178      	str	r0, [r7, #20]
	if(hlcd->buff_to_draw != NULL){
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d035      	beq.n	800622a <copy_to_draw_buffer+0xb2>
		for(uint32_t i = 0 ; i < npixels ;i++){
 80061be:	2300      	movs	r3, #0
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	e00c      	b.n	80061de <copy_to_draw_buffer+0x66>
			*fb_ptr = convert_rgb888_to_rgb565(rgb888); //image_data[i]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f86b 	bl	80062a0 <convert_rgb888_to_rgb565>
 80061ca:	4603      	mov	r3, r0
 80061cc:	461a      	mov	r2, r3
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	801a      	strh	r2, [r3, #0]
			fb_ptr++;
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	3302      	adds	r3, #2
 80061d6:	61fb      	str	r3, [r7, #28]
		for(uint32_t i = 0 ; i < npixels ;i++){
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	3301      	adds	r3, #1
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d3ee      	bcc.n	80061c4 <copy_to_draw_buffer+0x4c>
		}
		hlcd->write_length = pixels_to_bytes(npixels,hlcd->pixel_format);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	4619      	mov	r1, r3
 80061ec:	6978      	ldr	r0, [r7, #20]
 80061ee:	f7ff ffb5 	bl	800615c <pixels_to_bytes>
 80061f2:	4602      	mov	r2, r0
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	60da      	str	r2, [r3, #12]
		while(!is_lcd_write_allowed(hlcd));
 80061f8:	bf00      	nop
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 f893 	bl	8006326 <is_lcd_write_allowed>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0f9      	beq.n	80061fa <copy_to_draw_buffer+0x82>
		hlcd->buff_to_flush = hlcd->buff_to_draw;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	615a      	str	r2, [r3, #20]
		hlcd->buff_to_draw = NULL;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	611a      	str	r2, [r3, #16]
		lcd_flush(hlcd);
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f86c 	bl	80062f2 <lcd_flush>
		return pixels_to_bytes(npixels,hlcd->pixel_format);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	785b      	ldrb	r3, [r3, #1]
 800621e:	4619      	mov	r1, r3
 8006220:	6978      	ldr	r0, [r7, #20]
 8006222:	f7ff ff9b 	bl	800615c <pixels_to_bytes>
 8006226:	4603      	mov	r3, r0
 8006228:	e000      	b.n	800622c <copy_to_draw_buffer+0xb4>
	}

	return 0;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3720      	adds	r7, #32
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <get_buff>:


static uint8_t* get_buff(bsp_lcd_t *hlcd)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	uint32_t buf1 = (uint32_t)hlcd->draw_buffer1;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	60fb      	str	r3, [r7, #12]
	uint32_t buf2 = (uint32_t)hlcd->draw_buffer2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	60bb      	str	r3, [r7, #8]

	//__disable_irq();
	if(hlcd->buff_to_draw == NULL && hlcd->buff_to_flush == NULL){
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d106      	bne.n	800625e <get_buff+0x2a>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d102      	bne.n	800625e <get_buff+0x2a>
		return  hlcd->draw_buffer1;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	e01a      	b.n	8006294 <get_buff+0x60>
	}else if((uint32_t)hlcd->buff_to_flush == buf1 && hlcd->buff_to_draw == NULL ){
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	461a      	mov	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4293      	cmp	r3, r2
 8006268:	d106      	bne.n	8006278 <get_buff+0x44>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d102      	bne.n	8006278 <get_buff+0x44>
		return  hlcd->draw_buffer2;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	e00d      	b.n	8006294 <get_buff+0x60>
	}else if ((uint32_t)hlcd->buff_to_flush == buf2 && hlcd->buff_to_draw == NULL){
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	461a      	mov	r2, r3
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	4293      	cmp	r3, r2
 8006282:	d106      	bne.n	8006292 <get_buff+0x5e>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d102      	bne.n	8006292 <get_buff+0x5e>
		return  hlcd->draw_buffer1;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	e000      	b.n	8006294 <get_buff+0x60>
	}
	//__enable_irq();

	return NULL;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <convert_rgb888_to_rgb565>:

static uint16_t convert_rgb888_to_rgb565(uint32_t rgb888)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
    uint16_t r,g,b;
	r = (rgb888 >> 19) & 0x1FU;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	0cdb      	lsrs	r3, r3, #19
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	f003 031f 	and.w	r3, r3, #31
 80062b2:	81fb      	strh	r3, [r7, #14]
	g = (rgb888 >> 10) & 0x3FU;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	0a9b      	lsrs	r3, r3, #10
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062be:	81bb      	strh	r3, [r7, #12]
	b = (rgb888 >> 3)  & 0x1FU;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	08db      	lsrs	r3, r3, #3
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f003 031f 	and.w	r3, r3, #31
 80062ca:	817b      	strh	r3, [r7, #10]
	return (uint16_t)((r << 11) | (g << 5) | b);
 80062cc:	89fb      	ldrh	r3, [r7, #14]
 80062ce:	02db      	lsls	r3, r3, #11
 80062d0:	b21a      	sxth	r2, r3
 80062d2:	89bb      	ldrh	r3, [r7, #12]
 80062d4:	015b      	lsls	r3, r3, #5
 80062d6:	b21b      	sxth	r3, r3
 80062d8:	4313      	orrs	r3, r2
 80062da:	b21a      	sxth	r2, r3
 80062dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	b21b      	sxth	r3, r3
 80062e4:	b29b      	uxth	r3, r3
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <lcd_flush>:

static void lcd_flush(bsp_lcd_t *hlcd)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b082      	sub	sp, #8
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
	gc9a01a_set_display_area(&hlcd->area);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3318      	adds	r3, #24
 80062fe:	4618      	mov	r0, r3
 8006300:	f7ff f9bf 	bl	8005682 <gc9a01a_set_display_area>
	bsp_lcd_send_cmd_mem_write();
 8006304:	f7ff fe51 	bl	8005faa <bsp_lcd_send_cmd_mem_write>
	bsp_lcd_write(hlcd->buff_to_flush,hlcd->write_length);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	695a      	ldr	r2, [r3, #20]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	4619      	mov	r1, r3
 8006312:	4610      	mov	r0, r2
 8006314:	f7ff fe50 	bl	8005fb8 <bsp_lcd_write>
	hlcd->buff_to_flush = NULL;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	615a      	str	r2, [r3, #20]
}
 800631e:	bf00      	nop
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <is_lcd_write_allowed>:


static uint8_t is_lcd_write_allowed(bsp_lcd_t *hlcd)
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
	//__disable_irq();
	if(!hlcd->buff_to_flush)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <is_lcd_write_allowed+0x14>
		return TRUE;
 8006336:	2301      	movs	r3, #1
 8006338:	e000      	b.n	800633c <is_lcd_write_allowed+0x16>
	//__enable_irq();

	return FALSE;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <rand>:
 8006348:	4b16      	ldr	r3, [pc, #88]	@ (80063a4 <rand+0x5c>)
 800634a:	b510      	push	{r4, lr}
 800634c:	681c      	ldr	r4, [r3, #0]
 800634e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006350:	b9b3      	cbnz	r3, 8006380 <rand+0x38>
 8006352:	2018      	movs	r0, #24
 8006354:	f002 f806 	bl	8008364 <malloc>
 8006358:	4602      	mov	r2, r0
 800635a:	6320      	str	r0, [r4, #48]	@ 0x30
 800635c:	b920      	cbnz	r0, 8006368 <rand+0x20>
 800635e:	4b12      	ldr	r3, [pc, #72]	@ (80063a8 <rand+0x60>)
 8006360:	4812      	ldr	r0, [pc, #72]	@ (80063ac <rand+0x64>)
 8006362:	2152      	movs	r1, #82	@ 0x52
 8006364:	f001 f94a 	bl	80075fc <__assert_func>
 8006368:	4911      	ldr	r1, [pc, #68]	@ (80063b0 <rand+0x68>)
 800636a:	4b12      	ldr	r3, [pc, #72]	@ (80063b4 <rand+0x6c>)
 800636c:	e9c0 1300 	strd	r1, r3, [r0]
 8006370:	4b11      	ldr	r3, [pc, #68]	@ (80063b8 <rand+0x70>)
 8006372:	6083      	str	r3, [r0, #8]
 8006374:	230b      	movs	r3, #11
 8006376:	8183      	strh	r3, [r0, #12]
 8006378:	2100      	movs	r1, #0
 800637a:	2001      	movs	r0, #1
 800637c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006380:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006382:	480e      	ldr	r0, [pc, #56]	@ (80063bc <rand+0x74>)
 8006384:	690b      	ldr	r3, [r1, #16]
 8006386:	694c      	ldr	r4, [r1, #20]
 8006388:	4a0d      	ldr	r2, [pc, #52]	@ (80063c0 <rand+0x78>)
 800638a:	4358      	muls	r0, r3
 800638c:	fb02 0004 	mla	r0, r2, r4, r0
 8006390:	fba3 3202 	umull	r3, r2, r3, r2
 8006394:	3301      	adds	r3, #1
 8006396:	eb40 0002 	adc.w	r0, r0, r2
 800639a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800639e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80063a2:	bd10      	pop	{r4, pc}
 80063a4:	2000003c 	.word	0x2000003c
 80063a8:	08017520 	.word	0x08017520
 80063ac:	08017537 	.word	0x08017537
 80063b0:	abcd330e 	.word	0xabcd330e
 80063b4:	e66d1234 	.word	0xe66d1234
 80063b8:	0005deec 	.word	0x0005deec
 80063bc:	5851f42d 	.word	0x5851f42d
 80063c0:	4c957f2d 	.word	0x4c957f2d

080063c4 <__cvt>:
 80063c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063c8:	ec57 6b10 	vmov	r6, r7, d0
 80063cc:	2f00      	cmp	r7, #0
 80063ce:	460c      	mov	r4, r1
 80063d0:	4619      	mov	r1, r3
 80063d2:	463b      	mov	r3, r7
 80063d4:	bfbb      	ittet	lt
 80063d6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80063da:	461f      	movlt	r7, r3
 80063dc:	2300      	movge	r3, #0
 80063de:	232d      	movlt	r3, #45	@ 0x2d
 80063e0:	700b      	strb	r3, [r1, #0]
 80063e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063e4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80063e8:	4691      	mov	r9, r2
 80063ea:	f023 0820 	bic.w	r8, r3, #32
 80063ee:	bfbc      	itt	lt
 80063f0:	4632      	movlt	r2, r6
 80063f2:	4616      	movlt	r6, r2
 80063f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063f8:	d005      	beq.n	8006406 <__cvt+0x42>
 80063fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80063fe:	d100      	bne.n	8006402 <__cvt+0x3e>
 8006400:	3401      	adds	r4, #1
 8006402:	2102      	movs	r1, #2
 8006404:	e000      	b.n	8006408 <__cvt+0x44>
 8006406:	2103      	movs	r1, #3
 8006408:	ab03      	add	r3, sp, #12
 800640a:	9301      	str	r3, [sp, #4]
 800640c:	ab02      	add	r3, sp, #8
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	ec47 6b10 	vmov	d0, r6, r7
 8006414:	4653      	mov	r3, sl
 8006416:	4622      	mov	r2, r4
 8006418:	f001 f996 	bl	8007748 <_dtoa_r>
 800641c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006420:	4605      	mov	r5, r0
 8006422:	d119      	bne.n	8006458 <__cvt+0x94>
 8006424:	f019 0f01 	tst.w	r9, #1
 8006428:	d00e      	beq.n	8006448 <__cvt+0x84>
 800642a:	eb00 0904 	add.w	r9, r0, r4
 800642e:	2200      	movs	r2, #0
 8006430:	2300      	movs	r3, #0
 8006432:	4630      	mov	r0, r6
 8006434:	4639      	mov	r1, r7
 8006436:	f7fa fb47 	bl	8000ac8 <__aeabi_dcmpeq>
 800643a:	b108      	cbz	r0, 8006440 <__cvt+0x7c>
 800643c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006440:	2230      	movs	r2, #48	@ 0x30
 8006442:	9b03      	ldr	r3, [sp, #12]
 8006444:	454b      	cmp	r3, r9
 8006446:	d31e      	bcc.n	8006486 <__cvt+0xc2>
 8006448:	9b03      	ldr	r3, [sp, #12]
 800644a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800644c:	1b5b      	subs	r3, r3, r5
 800644e:	4628      	mov	r0, r5
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	b004      	add	sp, #16
 8006454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006458:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800645c:	eb00 0904 	add.w	r9, r0, r4
 8006460:	d1e5      	bne.n	800642e <__cvt+0x6a>
 8006462:	7803      	ldrb	r3, [r0, #0]
 8006464:	2b30      	cmp	r3, #48	@ 0x30
 8006466:	d10a      	bne.n	800647e <__cvt+0xba>
 8006468:	2200      	movs	r2, #0
 800646a:	2300      	movs	r3, #0
 800646c:	4630      	mov	r0, r6
 800646e:	4639      	mov	r1, r7
 8006470:	f7fa fb2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006474:	b918      	cbnz	r0, 800647e <__cvt+0xba>
 8006476:	f1c4 0401 	rsb	r4, r4, #1
 800647a:	f8ca 4000 	str.w	r4, [sl]
 800647e:	f8da 3000 	ldr.w	r3, [sl]
 8006482:	4499      	add	r9, r3
 8006484:	e7d3      	b.n	800642e <__cvt+0x6a>
 8006486:	1c59      	adds	r1, r3, #1
 8006488:	9103      	str	r1, [sp, #12]
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	e7d9      	b.n	8006442 <__cvt+0x7e>

0800648e <__exponent>:
 800648e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006490:	2900      	cmp	r1, #0
 8006492:	bfba      	itte	lt
 8006494:	4249      	neglt	r1, r1
 8006496:	232d      	movlt	r3, #45	@ 0x2d
 8006498:	232b      	movge	r3, #43	@ 0x2b
 800649a:	2909      	cmp	r1, #9
 800649c:	7002      	strb	r2, [r0, #0]
 800649e:	7043      	strb	r3, [r0, #1]
 80064a0:	dd29      	ble.n	80064f6 <__exponent+0x68>
 80064a2:	f10d 0307 	add.w	r3, sp, #7
 80064a6:	461d      	mov	r5, r3
 80064a8:	270a      	movs	r7, #10
 80064aa:	461a      	mov	r2, r3
 80064ac:	fbb1 f6f7 	udiv	r6, r1, r7
 80064b0:	fb07 1416 	mls	r4, r7, r6, r1
 80064b4:	3430      	adds	r4, #48	@ 0x30
 80064b6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80064ba:	460c      	mov	r4, r1
 80064bc:	2c63      	cmp	r4, #99	@ 0x63
 80064be:	f103 33ff 	add.w	r3, r3, #4294967295
 80064c2:	4631      	mov	r1, r6
 80064c4:	dcf1      	bgt.n	80064aa <__exponent+0x1c>
 80064c6:	3130      	adds	r1, #48	@ 0x30
 80064c8:	1e94      	subs	r4, r2, #2
 80064ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 80064ce:	1c41      	adds	r1, r0, #1
 80064d0:	4623      	mov	r3, r4
 80064d2:	42ab      	cmp	r3, r5
 80064d4:	d30a      	bcc.n	80064ec <__exponent+0x5e>
 80064d6:	f10d 0309 	add.w	r3, sp, #9
 80064da:	1a9b      	subs	r3, r3, r2
 80064dc:	42ac      	cmp	r4, r5
 80064de:	bf88      	it	hi
 80064e0:	2300      	movhi	r3, #0
 80064e2:	3302      	adds	r3, #2
 80064e4:	4403      	add	r3, r0
 80064e6:	1a18      	subs	r0, r3, r0
 80064e8:	b003      	add	sp, #12
 80064ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ec:	f813 6b01 	ldrb.w	r6, [r3], #1
 80064f0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80064f4:	e7ed      	b.n	80064d2 <__exponent+0x44>
 80064f6:	2330      	movs	r3, #48	@ 0x30
 80064f8:	3130      	adds	r1, #48	@ 0x30
 80064fa:	7083      	strb	r3, [r0, #2]
 80064fc:	70c1      	strb	r1, [r0, #3]
 80064fe:	1d03      	adds	r3, r0, #4
 8006500:	e7f1      	b.n	80064e6 <__exponent+0x58>
	...

08006504 <_printf_float>:
 8006504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006508:	b08d      	sub	sp, #52	@ 0x34
 800650a:	460c      	mov	r4, r1
 800650c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006510:	4616      	mov	r6, r2
 8006512:	461f      	mov	r7, r3
 8006514:	4605      	mov	r5, r0
 8006516:	f000 fff3 	bl	8007500 <_localeconv_r>
 800651a:	6803      	ldr	r3, [r0, #0]
 800651c:	9304      	str	r3, [sp, #16]
 800651e:	4618      	mov	r0, r3
 8006520:	f7f9 fea6 	bl	8000270 <strlen>
 8006524:	2300      	movs	r3, #0
 8006526:	930a      	str	r3, [sp, #40]	@ 0x28
 8006528:	f8d8 3000 	ldr.w	r3, [r8]
 800652c:	9005      	str	r0, [sp, #20]
 800652e:	3307      	adds	r3, #7
 8006530:	f023 0307 	bic.w	r3, r3, #7
 8006534:	f103 0208 	add.w	r2, r3, #8
 8006538:	f894 a018 	ldrb.w	sl, [r4, #24]
 800653c:	f8d4 b000 	ldr.w	fp, [r4]
 8006540:	f8c8 2000 	str.w	r2, [r8]
 8006544:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006548:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800654c:	9307      	str	r3, [sp, #28]
 800654e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006552:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006556:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800655a:	4b9c      	ldr	r3, [pc, #624]	@ (80067cc <_printf_float+0x2c8>)
 800655c:	f04f 32ff 	mov.w	r2, #4294967295
 8006560:	f7fa fae4 	bl	8000b2c <__aeabi_dcmpun>
 8006564:	bb70      	cbnz	r0, 80065c4 <_printf_float+0xc0>
 8006566:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800656a:	4b98      	ldr	r3, [pc, #608]	@ (80067cc <_printf_float+0x2c8>)
 800656c:	f04f 32ff 	mov.w	r2, #4294967295
 8006570:	f7fa fabe 	bl	8000af0 <__aeabi_dcmple>
 8006574:	bb30      	cbnz	r0, 80065c4 <_printf_float+0xc0>
 8006576:	2200      	movs	r2, #0
 8006578:	2300      	movs	r3, #0
 800657a:	4640      	mov	r0, r8
 800657c:	4649      	mov	r1, r9
 800657e:	f7fa faad 	bl	8000adc <__aeabi_dcmplt>
 8006582:	b110      	cbz	r0, 800658a <_printf_float+0x86>
 8006584:	232d      	movs	r3, #45	@ 0x2d
 8006586:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800658a:	4a91      	ldr	r2, [pc, #580]	@ (80067d0 <_printf_float+0x2cc>)
 800658c:	4b91      	ldr	r3, [pc, #580]	@ (80067d4 <_printf_float+0x2d0>)
 800658e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006592:	bf94      	ite	ls
 8006594:	4690      	movls	r8, r2
 8006596:	4698      	movhi	r8, r3
 8006598:	2303      	movs	r3, #3
 800659a:	6123      	str	r3, [r4, #16]
 800659c:	f02b 0304 	bic.w	r3, fp, #4
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	f04f 0900 	mov.w	r9, #0
 80065a6:	9700      	str	r7, [sp, #0]
 80065a8:	4633      	mov	r3, r6
 80065aa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80065ac:	4621      	mov	r1, r4
 80065ae:	4628      	mov	r0, r5
 80065b0:	f000 f9d2 	bl	8006958 <_printf_common>
 80065b4:	3001      	adds	r0, #1
 80065b6:	f040 808d 	bne.w	80066d4 <_printf_float+0x1d0>
 80065ba:	f04f 30ff 	mov.w	r0, #4294967295
 80065be:	b00d      	add	sp, #52	@ 0x34
 80065c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c4:	4642      	mov	r2, r8
 80065c6:	464b      	mov	r3, r9
 80065c8:	4640      	mov	r0, r8
 80065ca:	4649      	mov	r1, r9
 80065cc:	f7fa faae 	bl	8000b2c <__aeabi_dcmpun>
 80065d0:	b140      	cbz	r0, 80065e4 <_printf_float+0xe0>
 80065d2:	464b      	mov	r3, r9
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bfbc      	itt	lt
 80065d8:	232d      	movlt	r3, #45	@ 0x2d
 80065da:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80065de:	4a7e      	ldr	r2, [pc, #504]	@ (80067d8 <_printf_float+0x2d4>)
 80065e0:	4b7e      	ldr	r3, [pc, #504]	@ (80067dc <_printf_float+0x2d8>)
 80065e2:	e7d4      	b.n	800658e <_printf_float+0x8a>
 80065e4:	6863      	ldr	r3, [r4, #4]
 80065e6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80065ea:	9206      	str	r2, [sp, #24]
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	d13b      	bne.n	8006668 <_printf_float+0x164>
 80065f0:	2306      	movs	r3, #6
 80065f2:	6063      	str	r3, [r4, #4]
 80065f4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80065f8:	2300      	movs	r3, #0
 80065fa:	6022      	str	r2, [r4, #0]
 80065fc:	9303      	str	r3, [sp, #12]
 80065fe:	ab0a      	add	r3, sp, #40	@ 0x28
 8006600:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006604:	ab09      	add	r3, sp, #36	@ 0x24
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	6861      	ldr	r1, [r4, #4]
 800660a:	ec49 8b10 	vmov	d0, r8, r9
 800660e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006612:	4628      	mov	r0, r5
 8006614:	f7ff fed6 	bl	80063c4 <__cvt>
 8006618:	9b06      	ldr	r3, [sp, #24]
 800661a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800661c:	2b47      	cmp	r3, #71	@ 0x47
 800661e:	4680      	mov	r8, r0
 8006620:	d129      	bne.n	8006676 <_printf_float+0x172>
 8006622:	1cc8      	adds	r0, r1, #3
 8006624:	db02      	blt.n	800662c <_printf_float+0x128>
 8006626:	6863      	ldr	r3, [r4, #4]
 8006628:	4299      	cmp	r1, r3
 800662a:	dd41      	ble.n	80066b0 <_printf_float+0x1ac>
 800662c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006630:	fa5f fa8a 	uxtb.w	sl, sl
 8006634:	3901      	subs	r1, #1
 8006636:	4652      	mov	r2, sl
 8006638:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800663c:	9109      	str	r1, [sp, #36]	@ 0x24
 800663e:	f7ff ff26 	bl	800648e <__exponent>
 8006642:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006644:	1813      	adds	r3, r2, r0
 8006646:	2a01      	cmp	r2, #1
 8006648:	4681      	mov	r9, r0
 800664a:	6123      	str	r3, [r4, #16]
 800664c:	dc02      	bgt.n	8006654 <_printf_float+0x150>
 800664e:	6822      	ldr	r2, [r4, #0]
 8006650:	07d2      	lsls	r2, r2, #31
 8006652:	d501      	bpl.n	8006658 <_printf_float+0x154>
 8006654:	3301      	adds	r3, #1
 8006656:	6123      	str	r3, [r4, #16]
 8006658:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0a2      	beq.n	80065a6 <_printf_float+0xa2>
 8006660:	232d      	movs	r3, #45	@ 0x2d
 8006662:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006666:	e79e      	b.n	80065a6 <_printf_float+0xa2>
 8006668:	9a06      	ldr	r2, [sp, #24]
 800666a:	2a47      	cmp	r2, #71	@ 0x47
 800666c:	d1c2      	bne.n	80065f4 <_printf_float+0xf0>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1c0      	bne.n	80065f4 <_printf_float+0xf0>
 8006672:	2301      	movs	r3, #1
 8006674:	e7bd      	b.n	80065f2 <_printf_float+0xee>
 8006676:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800667a:	d9db      	bls.n	8006634 <_printf_float+0x130>
 800667c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006680:	d118      	bne.n	80066b4 <_printf_float+0x1b0>
 8006682:	2900      	cmp	r1, #0
 8006684:	6863      	ldr	r3, [r4, #4]
 8006686:	dd0b      	ble.n	80066a0 <_printf_float+0x19c>
 8006688:	6121      	str	r1, [r4, #16]
 800668a:	b913      	cbnz	r3, 8006692 <_printf_float+0x18e>
 800668c:	6822      	ldr	r2, [r4, #0]
 800668e:	07d0      	lsls	r0, r2, #31
 8006690:	d502      	bpl.n	8006698 <_printf_float+0x194>
 8006692:	3301      	adds	r3, #1
 8006694:	440b      	add	r3, r1
 8006696:	6123      	str	r3, [r4, #16]
 8006698:	65a1      	str	r1, [r4, #88]	@ 0x58
 800669a:	f04f 0900 	mov.w	r9, #0
 800669e:	e7db      	b.n	8006658 <_printf_float+0x154>
 80066a0:	b913      	cbnz	r3, 80066a8 <_printf_float+0x1a4>
 80066a2:	6822      	ldr	r2, [r4, #0]
 80066a4:	07d2      	lsls	r2, r2, #31
 80066a6:	d501      	bpl.n	80066ac <_printf_float+0x1a8>
 80066a8:	3302      	adds	r3, #2
 80066aa:	e7f4      	b.n	8006696 <_printf_float+0x192>
 80066ac:	2301      	movs	r3, #1
 80066ae:	e7f2      	b.n	8006696 <_printf_float+0x192>
 80066b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80066b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066b6:	4299      	cmp	r1, r3
 80066b8:	db05      	blt.n	80066c6 <_printf_float+0x1c2>
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	6121      	str	r1, [r4, #16]
 80066be:	07d8      	lsls	r0, r3, #31
 80066c0:	d5ea      	bpl.n	8006698 <_printf_float+0x194>
 80066c2:	1c4b      	adds	r3, r1, #1
 80066c4:	e7e7      	b.n	8006696 <_printf_float+0x192>
 80066c6:	2900      	cmp	r1, #0
 80066c8:	bfd4      	ite	le
 80066ca:	f1c1 0202 	rsble	r2, r1, #2
 80066ce:	2201      	movgt	r2, #1
 80066d0:	4413      	add	r3, r2
 80066d2:	e7e0      	b.n	8006696 <_printf_float+0x192>
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	055a      	lsls	r2, r3, #21
 80066d8:	d407      	bmi.n	80066ea <_printf_float+0x1e6>
 80066da:	6923      	ldr	r3, [r4, #16]
 80066dc:	4642      	mov	r2, r8
 80066de:	4631      	mov	r1, r6
 80066e0:	4628      	mov	r0, r5
 80066e2:	47b8      	blx	r7
 80066e4:	3001      	adds	r0, #1
 80066e6:	d12b      	bne.n	8006740 <_printf_float+0x23c>
 80066e8:	e767      	b.n	80065ba <_printf_float+0xb6>
 80066ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066ee:	f240 80dd 	bls.w	80068ac <_printf_float+0x3a8>
 80066f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066f6:	2200      	movs	r2, #0
 80066f8:	2300      	movs	r3, #0
 80066fa:	f7fa f9e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80066fe:	2800      	cmp	r0, #0
 8006700:	d033      	beq.n	800676a <_printf_float+0x266>
 8006702:	4a37      	ldr	r2, [pc, #220]	@ (80067e0 <_printf_float+0x2dc>)
 8006704:	2301      	movs	r3, #1
 8006706:	4631      	mov	r1, r6
 8006708:	4628      	mov	r0, r5
 800670a:	47b8      	blx	r7
 800670c:	3001      	adds	r0, #1
 800670e:	f43f af54 	beq.w	80065ba <_printf_float+0xb6>
 8006712:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006716:	4543      	cmp	r3, r8
 8006718:	db02      	blt.n	8006720 <_printf_float+0x21c>
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	07d8      	lsls	r0, r3, #31
 800671e:	d50f      	bpl.n	8006740 <_printf_float+0x23c>
 8006720:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006724:	4631      	mov	r1, r6
 8006726:	4628      	mov	r0, r5
 8006728:	47b8      	blx	r7
 800672a:	3001      	adds	r0, #1
 800672c:	f43f af45 	beq.w	80065ba <_printf_float+0xb6>
 8006730:	f04f 0900 	mov.w	r9, #0
 8006734:	f108 38ff 	add.w	r8, r8, #4294967295
 8006738:	f104 0a1a 	add.w	sl, r4, #26
 800673c:	45c8      	cmp	r8, r9
 800673e:	dc09      	bgt.n	8006754 <_printf_float+0x250>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	079b      	lsls	r3, r3, #30
 8006744:	f100 8103 	bmi.w	800694e <_printf_float+0x44a>
 8006748:	68e0      	ldr	r0, [r4, #12]
 800674a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800674c:	4298      	cmp	r0, r3
 800674e:	bfb8      	it	lt
 8006750:	4618      	movlt	r0, r3
 8006752:	e734      	b.n	80065be <_printf_float+0xba>
 8006754:	2301      	movs	r3, #1
 8006756:	4652      	mov	r2, sl
 8006758:	4631      	mov	r1, r6
 800675a:	4628      	mov	r0, r5
 800675c:	47b8      	blx	r7
 800675e:	3001      	adds	r0, #1
 8006760:	f43f af2b 	beq.w	80065ba <_printf_float+0xb6>
 8006764:	f109 0901 	add.w	r9, r9, #1
 8006768:	e7e8      	b.n	800673c <_printf_float+0x238>
 800676a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	dc39      	bgt.n	80067e4 <_printf_float+0x2e0>
 8006770:	4a1b      	ldr	r2, [pc, #108]	@ (80067e0 <_printf_float+0x2dc>)
 8006772:	2301      	movs	r3, #1
 8006774:	4631      	mov	r1, r6
 8006776:	4628      	mov	r0, r5
 8006778:	47b8      	blx	r7
 800677a:	3001      	adds	r0, #1
 800677c:	f43f af1d 	beq.w	80065ba <_printf_float+0xb6>
 8006780:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006784:	ea59 0303 	orrs.w	r3, r9, r3
 8006788:	d102      	bne.n	8006790 <_printf_float+0x28c>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	07d9      	lsls	r1, r3, #31
 800678e:	d5d7      	bpl.n	8006740 <_printf_float+0x23c>
 8006790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006794:	4631      	mov	r1, r6
 8006796:	4628      	mov	r0, r5
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	f43f af0d 	beq.w	80065ba <_printf_float+0xb6>
 80067a0:	f04f 0a00 	mov.w	sl, #0
 80067a4:	f104 0b1a 	add.w	fp, r4, #26
 80067a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067aa:	425b      	negs	r3, r3
 80067ac:	4553      	cmp	r3, sl
 80067ae:	dc01      	bgt.n	80067b4 <_printf_float+0x2b0>
 80067b0:	464b      	mov	r3, r9
 80067b2:	e793      	b.n	80066dc <_printf_float+0x1d8>
 80067b4:	2301      	movs	r3, #1
 80067b6:	465a      	mov	r2, fp
 80067b8:	4631      	mov	r1, r6
 80067ba:	4628      	mov	r0, r5
 80067bc:	47b8      	blx	r7
 80067be:	3001      	adds	r0, #1
 80067c0:	f43f aefb 	beq.w	80065ba <_printf_float+0xb6>
 80067c4:	f10a 0a01 	add.w	sl, sl, #1
 80067c8:	e7ee      	b.n	80067a8 <_printf_float+0x2a4>
 80067ca:	bf00      	nop
 80067cc:	7fefffff 	.word	0x7fefffff
 80067d0:	0801758f 	.word	0x0801758f
 80067d4:	08017593 	.word	0x08017593
 80067d8:	08017597 	.word	0x08017597
 80067dc:	0801759b 	.word	0x0801759b
 80067e0:	0801759f 	.word	0x0801759f
 80067e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067ea:	4553      	cmp	r3, sl
 80067ec:	bfa8      	it	ge
 80067ee:	4653      	movge	r3, sl
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	4699      	mov	r9, r3
 80067f4:	dc36      	bgt.n	8006864 <_printf_float+0x360>
 80067f6:	f04f 0b00 	mov.w	fp, #0
 80067fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067fe:	f104 021a 	add.w	r2, r4, #26
 8006802:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006804:	9306      	str	r3, [sp, #24]
 8006806:	eba3 0309 	sub.w	r3, r3, r9
 800680a:	455b      	cmp	r3, fp
 800680c:	dc31      	bgt.n	8006872 <_printf_float+0x36e>
 800680e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006810:	459a      	cmp	sl, r3
 8006812:	dc3a      	bgt.n	800688a <_printf_float+0x386>
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	07da      	lsls	r2, r3, #31
 8006818:	d437      	bmi.n	800688a <_printf_float+0x386>
 800681a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800681c:	ebaa 0903 	sub.w	r9, sl, r3
 8006820:	9b06      	ldr	r3, [sp, #24]
 8006822:	ebaa 0303 	sub.w	r3, sl, r3
 8006826:	4599      	cmp	r9, r3
 8006828:	bfa8      	it	ge
 800682a:	4699      	movge	r9, r3
 800682c:	f1b9 0f00 	cmp.w	r9, #0
 8006830:	dc33      	bgt.n	800689a <_printf_float+0x396>
 8006832:	f04f 0800 	mov.w	r8, #0
 8006836:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800683a:	f104 0b1a 	add.w	fp, r4, #26
 800683e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006840:	ebaa 0303 	sub.w	r3, sl, r3
 8006844:	eba3 0309 	sub.w	r3, r3, r9
 8006848:	4543      	cmp	r3, r8
 800684a:	f77f af79 	ble.w	8006740 <_printf_float+0x23c>
 800684e:	2301      	movs	r3, #1
 8006850:	465a      	mov	r2, fp
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	f43f aeae 	beq.w	80065ba <_printf_float+0xb6>
 800685e:	f108 0801 	add.w	r8, r8, #1
 8006862:	e7ec      	b.n	800683e <_printf_float+0x33a>
 8006864:	4642      	mov	r2, r8
 8006866:	4631      	mov	r1, r6
 8006868:	4628      	mov	r0, r5
 800686a:	47b8      	blx	r7
 800686c:	3001      	adds	r0, #1
 800686e:	d1c2      	bne.n	80067f6 <_printf_float+0x2f2>
 8006870:	e6a3      	b.n	80065ba <_printf_float+0xb6>
 8006872:	2301      	movs	r3, #1
 8006874:	4631      	mov	r1, r6
 8006876:	4628      	mov	r0, r5
 8006878:	9206      	str	r2, [sp, #24]
 800687a:	47b8      	blx	r7
 800687c:	3001      	adds	r0, #1
 800687e:	f43f ae9c 	beq.w	80065ba <_printf_float+0xb6>
 8006882:	9a06      	ldr	r2, [sp, #24]
 8006884:	f10b 0b01 	add.w	fp, fp, #1
 8006888:	e7bb      	b.n	8006802 <_printf_float+0x2fe>
 800688a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	47b8      	blx	r7
 8006894:	3001      	adds	r0, #1
 8006896:	d1c0      	bne.n	800681a <_printf_float+0x316>
 8006898:	e68f      	b.n	80065ba <_printf_float+0xb6>
 800689a:	9a06      	ldr	r2, [sp, #24]
 800689c:	464b      	mov	r3, r9
 800689e:	4442      	add	r2, r8
 80068a0:	4631      	mov	r1, r6
 80068a2:	4628      	mov	r0, r5
 80068a4:	47b8      	blx	r7
 80068a6:	3001      	adds	r0, #1
 80068a8:	d1c3      	bne.n	8006832 <_printf_float+0x32e>
 80068aa:	e686      	b.n	80065ba <_printf_float+0xb6>
 80068ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068b0:	f1ba 0f01 	cmp.w	sl, #1
 80068b4:	dc01      	bgt.n	80068ba <_printf_float+0x3b6>
 80068b6:	07db      	lsls	r3, r3, #31
 80068b8:	d536      	bpl.n	8006928 <_printf_float+0x424>
 80068ba:	2301      	movs	r3, #1
 80068bc:	4642      	mov	r2, r8
 80068be:	4631      	mov	r1, r6
 80068c0:	4628      	mov	r0, r5
 80068c2:	47b8      	blx	r7
 80068c4:	3001      	adds	r0, #1
 80068c6:	f43f ae78 	beq.w	80065ba <_printf_float+0xb6>
 80068ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068ce:	4631      	mov	r1, r6
 80068d0:	4628      	mov	r0, r5
 80068d2:	47b8      	blx	r7
 80068d4:	3001      	adds	r0, #1
 80068d6:	f43f ae70 	beq.w	80065ba <_printf_float+0xb6>
 80068da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068de:	2200      	movs	r2, #0
 80068e0:	2300      	movs	r3, #0
 80068e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068e6:	f7fa f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80068ea:	b9c0      	cbnz	r0, 800691e <_printf_float+0x41a>
 80068ec:	4653      	mov	r3, sl
 80068ee:	f108 0201 	add.w	r2, r8, #1
 80068f2:	4631      	mov	r1, r6
 80068f4:	4628      	mov	r0, r5
 80068f6:	47b8      	blx	r7
 80068f8:	3001      	adds	r0, #1
 80068fa:	d10c      	bne.n	8006916 <_printf_float+0x412>
 80068fc:	e65d      	b.n	80065ba <_printf_float+0xb6>
 80068fe:	2301      	movs	r3, #1
 8006900:	465a      	mov	r2, fp
 8006902:	4631      	mov	r1, r6
 8006904:	4628      	mov	r0, r5
 8006906:	47b8      	blx	r7
 8006908:	3001      	adds	r0, #1
 800690a:	f43f ae56 	beq.w	80065ba <_printf_float+0xb6>
 800690e:	f108 0801 	add.w	r8, r8, #1
 8006912:	45d0      	cmp	r8, sl
 8006914:	dbf3      	blt.n	80068fe <_printf_float+0x3fa>
 8006916:	464b      	mov	r3, r9
 8006918:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800691c:	e6df      	b.n	80066de <_printf_float+0x1da>
 800691e:	f04f 0800 	mov.w	r8, #0
 8006922:	f104 0b1a 	add.w	fp, r4, #26
 8006926:	e7f4      	b.n	8006912 <_printf_float+0x40e>
 8006928:	2301      	movs	r3, #1
 800692a:	4642      	mov	r2, r8
 800692c:	e7e1      	b.n	80068f2 <_printf_float+0x3ee>
 800692e:	2301      	movs	r3, #1
 8006930:	464a      	mov	r2, r9
 8006932:	4631      	mov	r1, r6
 8006934:	4628      	mov	r0, r5
 8006936:	47b8      	blx	r7
 8006938:	3001      	adds	r0, #1
 800693a:	f43f ae3e 	beq.w	80065ba <_printf_float+0xb6>
 800693e:	f108 0801 	add.w	r8, r8, #1
 8006942:	68e3      	ldr	r3, [r4, #12]
 8006944:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006946:	1a5b      	subs	r3, r3, r1
 8006948:	4543      	cmp	r3, r8
 800694a:	dcf0      	bgt.n	800692e <_printf_float+0x42a>
 800694c:	e6fc      	b.n	8006748 <_printf_float+0x244>
 800694e:	f04f 0800 	mov.w	r8, #0
 8006952:	f104 0919 	add.w	r9, r4, #25
 8006956:	e7f4      	b.n	8006942 <_printf_float+0x43e>

08006958 <_printf_common>:
 8006958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800695c:	4616      	mov	r6, r2
 800695e:	4698      	mov	r8, r3
 8006960:	688a      	ldr	r2, [r1, #8]
 8006962:	690b      	ldr	r3, [r1, #16]
 8006964:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006968:	4293      	cmp	r3, r2
 800696a:	bfb8      	it	lt
 800696c:	4613      	movlt	r3, r2
 800696e:	6033      	str	r3, [r6, #0]
 8006970:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006974:	4607      	mov	r7, r0
 8006976:	460c      	mov	r4, r1
 8006978:	b10a      	cbz	r2, 800697e <_printf_common+0x26>
 800697a:	3301      	adds	r3, #1
 800697c:	6033      	str	r3, [r6, #0]
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	0699      	lsls	r1, r3, #26
 8006982:	bf42      	ittt	mi
 8006984:	6833      	ldrmi	r3, [r6, #0]
 8006986:	3302      	addmi	r3, #2
 8006988:	6033      	strmi	r3, [r6, #0]
 800698a:	6825      	ldr	r5, [r4, #0]
 800698c:	f015 0506 	ands.w	r5, r5, #6
 8006990:	d106      	bne.n	80069a0 <_printf_common+0x48>
 8006992:	f104 0a19 	add.w	sl, r4, #25
 8006996:	68e3      	ldr	r3, [r4, #12]
 8006998:	6832      	ldr	r2, [r6, #0]
 800699a:	1a9b      	subs	r3, r3, r2
 800699c:	42ab      	cmp	r3, r5
 800699e:	dc26      	bgt.n	80069ee <_printf_common+0x96>
 80069a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069a4:	6822      	ldr	r2, [r4, #0]
 80069a6:	3b00      	subs	r3, #0
 80069a8:	bf18      	it	ne
 80069aa:	2301      	movne	r3, #1
 80069ac:	0692      	lsls	r2, r2, #26
 80069ae:	d42b      	bmi.n	8006a08 <_printf_common+0xb0>
 80069b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069b4:	4641      	mov	r1, r8
 80069b6:	4638      	mov	r0, r7
 80069b8:	47c8      	blx	r9
 80069ba:	3001      	adds	r0, #1
 80069bc:	d01e      	beq.n	80069fc <_printf_common+0xa4>
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	6922      	ldr	r2, [r4, #16]
 80069c2:	f003 0306 	and.w	r3, r3, #6
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	bf02      	ittt	eq
 80069ca:	68e5      	ldreq	r5, [r4, #12]
 80069cc:	6833      	ldreq	r3, [r6, #0]
 80069ce:	1aed      	subeq	r5, r5, r3
 80069d0:	68a3      	ldr	r3, [r4, #8]
 80069d2:	bf0c      	ite	eq
 80069d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069d8:	2500      	movne	r5, #0
 80069da:	4293      	cmp	r3, r2
 80069dc:	bfc4      	itt	gt
 80069de:	1a9b      	subgt	r3, r3, r2
 80069e0:	18ed      	addgt	r5, r5, r3
 80069e2:	2600      	movs	r6, #0
 80069e4:	341a      	adds	r4, #26
 80069e6:	42b5      	cmp	r5, r6
 80069e8:	d11a      	bne.n	8006a20 <_printf_common+0xc8>
 80069ea:	2000      	movs	r0, #0
 80069ec:	e008      	b.n	8006a00 <_printf_common+0xa8>
 80069ee:	2301      	movs	r3, #1
 80069f0:	4652      	mov	r2, sl
 80069f2:	4641      	mov	r1, r8
 80069f4:	4638      	mov	r0, r7
 80069f6:	47c8      	blx	r9
 80069f8:	3001      	adds	r0, #1
 80069fa:	d103      	bne.n	8006a04 <_printf_common+0xac>
 80069fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a04:	3501      	adds	r5, #1
 8006a06:	e7c6      	b.n	8006996 <_printf_common+0x3e>
 8006a08:	18e1      	adds	r1, r4, r3
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	2030      	movs	r0, #48	@ 0x30
 8006a0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a12:	4422      	add	r2, r4
 8006a14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a1c:	3302      	adds	r3, #2
 8006a1e:	e7c7      	b.n	80069b0 <_printf_common+0x58>
 8006a20:	2301      	movs	r3, #1
 8006a22:	4622      	mov	r2, r4
 8006a24:	4641      	mov	r1, r8
 8006a26:	4638      	mov	r0, r7
 8006a28:	47c8      	blx	r9
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	d0e6      	beq.n	80069fc <_printf_common+0xa4>
 8006a2e:	3601      	adds	r6, #1
 8006a30:	e7d9      	b.n	80069e6 <_printf_common+0x8e>
	...

08006a34 <_printf_i>:
 8006a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a38:	7e0f      	ldrb	r7, [r1, #24]
 8006a3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a3c:	2f78      	cmp	r7, #120	@ 0x78
 8006a3e:	4691      	mov	r9, r2
 8006a40:	4680      	mov	r8, r0
 8006a42:	460c      	mov	r4, r1
 8006a44:	469a      	mov	sl, r3
 8006a46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a4a:	d807      	bhi.n	8006a5c <_printf_i+0x28>
 8006a4c:	2f62      	cmp	r7, #98	@ 0x62
 8006a4e:	d80a      	bhi.n	8006a66 <_printf_i+0x32>
 8006a50:	2f00      	cmp	r7, #0
 8006a52:	f000 80d2 	beq.w	8006bfa <_printf_i+0x1c6>
 8006a56:	2f58      	cmp	r7, #88	@ 0x58
 8006a58:	f000 80b9 	beq.w	8006bce <_printf_i+0x19a>
 8006a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a64:	e03a      	b.n	8006adc <_printf_i+0xa8>
 8006a66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a6a:	2b15      	cmp	r3, #21
 8006a6c:	d8f6      	bhi.n	8006a5c <_printf_i+0x28>
 8006a6e:	a101      	add	r1, pc, #4	@ (adr r1, 8006a74 <_printf_i+0x40>)
 8006a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a74:	08006acd 	.word	0x08006acd
 8006a78:	08006ae1 	.word	0x08006ae1
 8006a7c:	08006a5d 	.word	0x08006a5d
 8006a80:	08006a5d 	.word	0x08006a5d
 8006a84:	08006a5d 	.word	0x08006a5d
 8006a88:	08006a5d 	.word	0x08006a5d
 8006a8c:	08006ae1 	.word	0x08006ae1
 8006a90:	08006a5d 	.word	0x08006a5d
 8006a94:	08006a5d 	.word	0x08006a5d
 8006a98:	08006a5d 	.word	0x08006a5d
 8006a9c:	08006a5d 	.word	0x08006a5d
 8006aa0:	08006be1 	.word	0x08006be1
 8006aa4:	08006b0b 	.word	0x08006b0b
 8006aa8:	08006b9b 	.word	0x08006b9b
 8006aac:	08006a5d 	.word	0x08006a5d
 8006ab0:	08006a5d 	.word	0x08006a5d
 8006ab4:	08006c03 	.word	0x08006c03
 8006ab8:	08006a5d 	.word	0x08006a5d
 8006abc:	08006b0b 	.word	0x08006b0b
 8006ac0:	08006a5d 	.word	0x08006a5d
 8006ac4:	08006a5d 	.word	0x08006a5d
 8006ac8:	08006ba3 	.word	0x08006ba3
 8006acc:	6833      	ldr	r3, [r6, #0]
 8006ace:	1d1a      	adds	r2, r3, #4
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6032      	str	r2, [r6, #0]
 8006ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006adc:	2301      	movs	r3, #1
 8006ade:	e09d      	b.n	8006c1c <_printf_i+0x1e8>
 8006ae0:	6833      	ldr	r3, [r6, #0]
 8006ae2:	6820      	ldr	r0, [r4, #0]
 8006ae4:	1d19      	adds	r1, r3, #4
 8006ae6:	6031      	str	r1, [r6, #0]
 8006ae8:	0606      	lsls	r6, r0, #24
 8006aea:	d501      	bpl.n	8006af0 <_printf_i+0xbc>
 8006aec:	681d      	ldr	r5, [r3, #0]
 8006aee:	e003      	b.n	8006af8 <_printf_i+0xc4>
 8006af0:	0645      	lsls	r5, r0, #25
 8006af2:	d5fb      	bpl.n	8006aec <_printf_i+0xb8>
 8006af4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006af8:	2d00      	cmp	r5, #0
 8006afa:	da03      	bge.n	8006b04 <_printf_i+0xd0>
 8006afc:	232d      	movs	r3, #45	@ 0x2d
 8006afe:	426d      	negs	r5, r5
 8006b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b04:	4859      	ldr	r0, [pc, #356]	@ (8006c6c <_printf_i+0x238>)
 8006b06:	230a      	movs	r3, #10
 8006b08:	e011      	b.n	8006b2e <_printf_i+0xfa>
 8006b0a:	6821      	ldr	r1, [r4, #0]
 8006b0c:	6833      	ldr	r3, [r6, #0]
 8006b0e:	0608      	lsls	r0, r1, #24
 8006b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b14:	d402      	bmi.n	8006b1c <_printf_i+0xe8>
 8006b16:	0649      	lsls	r1, r1, #25
 8006b18:	bf48      	it	mi
 8006b1a:	b2ad      	uxthmi	r5, r5
 8006b1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b1e:	4853      	ldr	r0, [pc, #332]	@ (8006c6c <_printf_i+0x238>)
 8006b20:	6033      	str	r3, [r6, #0]
 8006b22:	bf14      	ite	ne
 8006b24:	230a      	movne	r3, #10
 8006b26:	2308      	moveq	r3, #8
 8006b28:	2100      	movs	r1, #0
 8006b2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b2e:	6866      	ldr	r6, [r4, #4]
 8006b30:	60a6      	str	r6, [r4, #8]
 8006b32:	2e00      	cmp	r6, #0
 8006b34:	bfa2      	ittt	ge
 8006b36:	6821      	ldrge	r1, [r4, #0]
 8006b38:	f021 0104 	bicge.w	r1, r1, #4
 8006b3c:	6021      	strge	r1, [r4, #0]
 8006b3e:	b90d      	cbnz	r5, 8006b44 <_printf_i+0x110>
 8006b40:	2e00      	cmp	r6, #0
 8006b42:	d04b      	beq.n	8006bdc <_printf_i+0x1a8>
 8006b44:	4616      	mov	r6, r2
 8006b46:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b4a:	fb03 5711 	mls	r7, r3, r1, r5
 8006b4e:	5dc7      	ldrb	r7, [r0, r7]
 8006b50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b54:	462f      	mov	r7, r5
 8006b56:	42bb      	cmp	r3, r7
 8006b58:	460d      	mov	r5, r1
 8006b5a:	d9f4      	bls.n	8006b46 <_printf_i+0x112>
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d10b      	bne.n	8006b78 <_printf_i+0x144>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	07df      	lsls	r7, r3, #31
 8006b64:	d508      	bpl.n	8006b78 <_printf_i+0x144>
 8006b66:	6923      	ldr	r3, [r4, #16]
 8006b68:	6861      	ldr	r1, [r4, #4]
 8006b6a:	4299      	cmp	r1, r3
 8006b6c:	bfde      	ittt	le
 8006b6e:	2330      	movle	r3, #48	@ 0x30
 8006b70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b78:	1b92      	subs	r2, r2, r6
 8006b7a:	6122      	str	r2, [r4, #16]
 8006b7c:	f8cd a000 	str.w	sl, [sp]
 8006b80:	464b      	mov	r3, r9
 8006b82:	aa03      	add	r2, sp, #12
 8006b84:	4621      	mov	r1, r4
 8006b86:	4640      	mov	r0, r8
 8006b88:	f7ff fee6 	bl	8006958 <_printf_common>
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d14a      	bne.n	8006c26 <_printf_i+0x1f2>
 8006b90:	f04f 30ff 	mov.w	r0, #4294967295
 8006b94:	b004      	add	sp, #16
 8006b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	f043 0320 	orr.w	r3, r3, #32
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	4833      	ldr	r0, [pc, #204]	@ (8006c70 <_printf_i+0x23c>)
 8006ba4:	2778      	movs	r7, #120	@ 0x78
 8006ba6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	6831      	ldr	r1, [r6, #0]
 8006bae:	061f      	lsls	r7, r3, #24
 8006bb0:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bb4:	d402      	bmi.n	8006bbc <_printf_i+0x188>
 8006bb6:	065f      	lsls	r7, r3, #25
 8006bb8:	bf48      	it	mi
 8006bba:	b2ad      	uxthmi	r5, r5
 8006bbc:	6031      	str	r1, [r6, #0]
 8006bbe:	07d9      	lsls	r1, r3, #31
 8006bc0:	bf44      	itt	mi
 8006bc2:	f043 0320 	orrmi.w	r3, r3, #32
 8006bc6:	6023      	strmi	r3, [r4, #0]
 8006bc8:	b11d      	cbz	r5, 8006bd2 <_printf_i+0x19e>
 8006bca:	2310      	movs	r3, #16
 8006bcc:	e7ac      	b.n	8006b28 <_printf_i+0xf4>
 8006bce:	4827      	ldr	r0, [pc, #156]	@ (8006c6c <_printf_i+0x238>)
 8006bd0:	e7e9      	b.n	8006ba6 <_printf_i+0x172>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	f023 0320 	bic.w	r3, r3, #32
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	e7f6      	b.n	8006bca <_printf_i+0x196>
 8006bdc:	4616      	mov	r6, r2
 8006bde:	e7bd      	b.n	8006b5c <_printf_i+0x128>
 8006be0:	6833      	ldr	r3, [r6, #0]
 8006be2:	6825      	ldr	r5, [r4, #0]
 8006be4:	6961      	ldr	r1, [r4, #20]
 8006be6:	1d18      	adds	r0, r3, #4
 8006be8:	6030      	str	r0, [r6, #0]
 8006bea:	062e      	lsls	r6, r5, #24
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	d501      	bpl.n	8006bf4 <_printf_i+0x1c0>
 8006bf0:	6019      	str	r1, [r3, #0]
 8006bf2:	e002      	b.n	8006bfa <_printf_i+0x1c6>
 8006bf4:	0668      	lsls	r0, r5, #25
 8006bf6:	d5fb      	bpl.n	8006bf0 <_printf_i+0x1bc>
 8006bf8:	8019      	strh	r1, [r3, #0]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6123      	str	r3, [r4, #16]
 8006bfe:	4616      	mov	r6, r2
 8006c00:	e7bc      	b.n	8006b7c <_printf_i+0x148>
 8006c02:	6833      	ldr	r3, [r6, #0]
 8006c04:	1d1a      	adds	r2, r3, #4
 8006c06:	6032      	str	r2, [r6, #0]
 8006c08:	681e      	ldr	r6, [r3, #0]
 8006c0a:	6862      	ldr	r2, [r4, #4]
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4630      	mov	r0, r6
 8006c10:	f7f9 fade 	bl	80001d0 <memchr>
 8006c14:	b108      	cbz	r0, 8006c1a <_printf_i+0x1e6>
 8006c16:	1b80      	subs	r0, r0, r6
 8006c18:	6060      	str	r0, [r4, #4]
 8006c1a:	6863      	ldr	r3, [r4, #4]
 8006c1c:	6123      	str	r3, [r4, #16]
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c24:	e7aa      	b.n	8006b7c <_printf_i+0x148>
 8006c26:	6923      	ldr	r3, [r4, #16]
 8006c28:	4632      	mov	r2, r6
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	4640      	mov	r0, r8
 8006c2e:	47d0      	blx	sl
 8006c30:	3001      	adds	r0, #1
 8006c32:	d0ad      	beq.n	8006b90 <_printf_i+0x15c>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	079b      	lsls	r3, r3, #30
 8006c38:	d413      	bmi.n	8006c62 <_printf_i+0x22e>
 8006c3a:	68e0      	ldr	r0, [r4, #12]
 8006c3c:	9b03      	ldr	r3, [sp, #12]
 8006c3e:	4298      	cmp	r0, r3
 8006c40:	bfb8      	it	lt
 8006c42:	4618      	movlt	r0, r3
 8006c44:	e7a6      	b.n	8006b94 <_printf_i+0x160>
 8006c46:	2301      	movs	r3, #1
 8006c48:	4632      	mov	r2, r6
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	4640      	mov	r0, r8
 8006c4e:	47d0      	blx	sl
 8006c50:	3001      	adds	r0, #1
 8006c52:	d09d      	beq.n	8006b90 <_printf_i+0x15c>
 8006c54:	3501      	adds	r5, #1
 8006c56:	68e3      	ldr	r3, [r4, #12]
 8006c58:	9903      	ldr	r1, [sp, #12]
 8006c5a:	1a5b      	subs	r3, r3, r1
 8006c5c:	42ab      	cmp	r3, r5
 8006c5e:	dcf2      	bgt.n	8006c46 <_printf_i+0x212>
 8006c60:	e7eb      	b.n	8006c3a <_printf_i+0x206>
 8006c62:	2500      	movs	r5, #0
 8006c64:	f104 0619 	add.w	r6, r4, #25
 8006c68:	e7f5      	b.n	8006c56 <_printf_i+0x222>
 8006c6a:	bf00      	nop
 8006c6c:	080175a1 	.word	0x080175a1
 8006c70:	080175b2 	.word	0x080175b2

08006c74 <_scanf_float>:
 8006c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c78:	b087      	sub	sp, #28
 8006c7a:	4617      	mov	r7, r2
 8006c7c:	9303      	str	r3, [sp, #12]
 8006c7e:	688b      	ldr	r3, [r1, #8]
 8006c80:	1e5a      	subs	r2, r3, #1
 8006c82:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006c86:	bf81      	itttt	hi
 8006c88:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006c8c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006c90:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006c94:	608b      	strhi	r3, [r1, #8]
 8006c96:	680b      	ldr	r3, [r1, #0]
 8006c98:	460a      	mov	r2, r1
 8006c9a:	f04f 0500 	mov.w	r5, #0
 8006c9e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006ca2:	f842 3b1c 	str.w	r3, [r2], #28
 8006ca6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006caa:	4680      	mov	r8, r0
 8006cac:	460c      	mov	r4, r1
 8006cae:	bf98      	it	ls
 8006cb0:	f04f 0b00 	movls.w	fp, #0
 8006cb4:	9201      	str	r2, [sp, #4]
 8006cb6:	4616      	mov	r6, r2
 8006cb8:	46aa      	mov	sl, r5
 8006cba:	46a9      	mov	r9, r5
 8006cbc:	9502      	str	r5, [sp, #8]
 8006cbe:	68a2      	ldr	r2, [r4, #8]
 8006cc0:	b152      	cbz	r2, 8006cd8 <_scanf_float+0x64>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	2b4e      	cmp	r3, #78	@ 0x4e
 8006cc8:	d864      	bhi.n	8006d94 <_scanf_float+0x120>
 8006cca:	2b40      	cmp	r3, #64	@ 0x40
 8006ccc:	d83c      	bhi.n	8006d48 <_scanf_float+0xd4>
 8006cce:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006cd2:	b2c8      	uxtb	r0, r1
 8006cd4:	280e      	cmp	r0, #14
 8006cd6:	d93a      	bls.n	8006d4e <_scanf_float+0xda>
 8006cd8:	f1b9 0f00 	cmp.w	r9, #0
 8006cdc:	d003      	beq.n	8006ce6 <_scanf_float+0x72>
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ce4:	6023      	str	r3, [r4, #0]
 8006ce6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cea:	f1ba 0f01 	cmp.w	sl, #1
 8006cee:	f200 8117 	bhi.w	8006f20 <_scanf_float+0x2ac>
 8006cf2:	9b01      	ldr	r3, [sp, #4]
 8006cf4:	429e      	cmp	r6, r3
 8006cf6:	f200 8108 	bhi.w	8006f0a <_scanf_float+0x296>
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	b007      	add	sp, #28
 8006cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d02:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006d06:	2a0d      	cmp	r2, #13
 8006d08:	d8e6      	bhi.n	8006cd8 <_scanf_float+0x64>
 8006d0a:	a101      	add	r1, pc, #4	@ (adr r1, 8006d10 <_scanf_float+0x9c>)
 8006d0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d10:	08006e57 	.word	0x08006e57
 8006d14:	08006cd9 	.word	0x08006cd9
 8006d18:	08006cd9 	.word	0x08006cd9
 8006d1c:	08006cd9 	.word	0x08006cd9
 8006d20:	08006eb7 	.word	0x08006eb7
 8006d24:	08006e8f 	.word	0x08006e8f
 8006d28:	08006cd9 	.word	0x08006cd9
 8006d2c:	08006cd9 	.word	0x08006cd9
 8006d30:	08006e65 	.word	0x08006e65
 8006d34:	08006cd9 	.word	0x08006cd9
 8006d38:	08006cd9 	.word	0x08006cd9
 8006d3c:	08006cd9 	.word	0x08006cd9
 8006d40:	08006cd9 	.word	0x08006cd9
 8006d44:	08006e1d 	.word	0x08006e1d
 8006d48:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006d4c:	e7db      	b.n	8006d06 <_scanf_float+0x92>
 8006d4e:	290e      	cmp	r1, #14
 8006d50:	d8c2      	bhi.n	8006cd8 <_scanf_float+0x64>
 8006d52:	a001      	add	r0, pc, #4	@ (adr r0, 8006d58 <_scanf_float+0xe4>)
 8006d54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d58:	08006e0d 	.word	0x08006e0d
 8006d5c:	08006cd9 	.word	0x08006cd9
 8006d60:	08006e0d 	.word	0x08006e0d
 8006d64:	08006ea3 	.word	0x08006ea3
 8006d68:	08006cd9 	.word	0x08006cd9
 8006d6c:	08006db5 	.word	0x08006db5
 8006d70:	08006df3 	.word	0x08006df3
 8006d74:	08006df3 	.word	0x08006df3
 8006d78:	08006df3 	.word	0x08006df3
 8006d7c:	08006df3 	.word	0x08006df3
 8006d80:	08006df3 	.word	0x08006df3
 8006d84:	08006df3 	.word	0x08006df3
 8006d88:	08006df3 	.word	0x08006df3
 8006d8c:	08006df3 	.word	0x08006df3
 8006d90:	08006df3 	.word	0x08006df3
 8006d94:	2b6e      	cmp	r3, #110	@ 0x6e
 8006d96:	d809      	bhi.n	8006dac <_scanf_float+0x138>
 8006d98:	2b60      	cmp	r3, #96	@ 0x60
 8006d9a:	d8b2      	bhi.n	8006d02 <_scanf_float+0x8e>
 8006d9c:	2b54      	cmp	r3, #84	@ 0x54
 8006d9e:	d07b      	beq.n	8006e98 <_scanf_float+0x224>
 8006da0:	2b59      	cmp	r3, #89	@ 0x59
 8006da2:	d199      	bne.n	8006cd8 <_scanf_float+0x64>
 8006da4:	2d07      	cmp	r5, #7
 8006da6:	d197      	bne.n	8006cd8 <_scanf_float+0x64>
 8006da8:	2508      	movs	r5, #8
 8006daa:	e02c      	b.n	8006e06 <_scanf_float+0x192>
 8006dac:	2b74      	cmp	r3, #116	@ 0x74
 8006dae:	d073      	beq.n	8006e98 <_scanf_float+0x224>
 8006db0:	2b79      	cmp	r3, #121	@ 0x79
 8006db2:	e7f6      	b.n	8006da2 <_scanf_float+0x12e>
 8006db4:	6821      	ldr	r1, [r4, #0]
 8006db6:	05c8      	lsls	r0, r1, #23
 8006db8:	d51b      	bpl.n	8006df2 <_scanf_float+0x17e>
 8006dba:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006dbe:	6021      	str	r1, [r4, #0]
 8006dc0:	f109 0901 	add.w	r9, r9, #1
 8006dc4:	f1bb 0f00 	cmp.w	fp, #0
 8006dc8:	d003      	beq.n	8006dd2 <_scanf_float+0x15e>
 8006dca:	3201      	adds	r2, #1
 8006dcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006dd0:	60a2      	str	r2, [r4, #8]
 8006dd2:	68a3      	ldr	r3, [r4, #8]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	60a3      	str	r3, [r4, #8]
 8006dd8:	6923      	ldr	r3, [r4, #16]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	6123      	str	r3, [r4, #16]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	607b      	str	r3, [r7, #4]
 8006de6:	f340 8087 	ble.w	8006ef8 <_scanf_float+0x284>
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	3301      	adds	r3, #1
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	e765      	b.n	8006cbe <_scanf_float+0x4a>
 8006df2:	eb1a 0105 	adds.w	r1, sl, r5
 8006df6:	f47f af6f 	bne.w	8006cd8 <_scanf_float+0x64>
 8006dfa:	6822      	ldr	r2, [r4, #0]
 8006dfc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006e00:	6022      	str	r2, [r4, #0]
 8006e02:	460d      	mov	r5, r1
 8006e04:	468a      	mov	sl, r1
 8006e06:	f806 3b01 	strb.w	r3, [r6], #1
 8006e0a:	e7e2      	b.n	8006dd2 <_scanf_float+0x15e>
 8006e0c:	6822      	ldr	r2, [r4, #0]
 8006e0e:	0610      	lsls	r0, r2, #24
 8006e10:	f57f af62 	bpl.w	8006cd8 <_scanf_float+0x64>
 8006e14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e18:	6022      	str	r2, [r4, #0]
 8006e1a:	e7f4      	b.n	8006e06 <_scanf_float+0x192>
 8006e1c:	f1ba 0f00 	cmp.w	sl, #0
 8006e20:	d10e      	bne.n	8006e40 <_scanf_float+0x1cc>
 8006e22:	f1b9 0f00 	cmp.w	r9, #0
 8006e26:	d10e      	bne.n	8006e46 <_scanf_float+0x1d2>
 8006e28:	6822      	ldr	r2, [r4, #0]
 8006e2a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e2e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e32:	d108      	bne.n	8006e46 <_scanf_float+0x1d2>
 8006e34:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e38:	6022      	str	r2, [r4, #0]
 8006e3a:	f04f 0a01 	mov.w	sl, #1
 8006e3e:	e7e2      	b.n	8006e06 <_scanf_float+0x192>
 8006e40:	f1ba 0f02 	cmp.w	sl, #2
 8006e44:	d055      	beq.n	8006ef2 <_scanf_float+0x27e>
 8006e46:	2d01      	cmp	r5, #1
 8006e48:	d002      	beq.n	8006e50 <_scanf_float+0x1dc>
 8006e4a:	2d04      	cmp	r5, #4
 8006e4c:	f47f af44 	bne.w	8006cd8 <_scanf_float+0x64>
 8006e50:	3501      	adds	r5, #1
 8006e52:	b2ed      	uxtb	r5, r5
 8006e54:	e7d7      	b.n	8006e06 <_scanf_float+0x192>
 8006e56:	f1ba 0f01 	cmp.w	sl, #1
 8006e5a:	f47f af3d 	bne.w	8006cd8 <_scanf_float+0x64>
 8006e5e:	f04f 0a02 	mov.w	sl, #2
 8006e62:	e7d0      	b.n	8006e06 <_scanf_float+0x192>
 8006e64:	b97d      	cbnz	r5, 8006e86 <_scanf_float+0x212>
 8006e66:	f1b9 0f00 	cmp.w	r9, #0
 8006e6a:	f47f af38 	bne.w	8006cde <_scanf_float+0x6a>
 8006e6e:	6822      	ldr	r2, [r4, #0]
 8006e70:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e74:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e78:	f040 8108 	bne.w	800708c <_scanf_float+0x418>
 8006e7c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e80:	6022      	str	r2, [r4, #0]
 8006e82:	2501      	movs	r5, #1
 8006e84:	e7bf      	b.n	8006e06 <_scanf_float+0x192>
 8006e86:	2d03      	cmp	r5, #3
 8006e88:	d0e2      	beq.n	8006e50 <_scanf_float+0x1dc>
 8006e8a:	2d05      	cmp	r5, #5
 8006e8c:	e7de      	b.n	8006e4c <_scanf_float+0x1d8>
 8006e8e:	2d02      	cmp	r5, #2
 8006e90:	f47f af22 	bne.w	8006cd8 <_scanf_float+0x64>
 8006e94:	2503      	movs	r5, #3
 8006e96:	e7b6      	b.n	8006e06 <_scanf_float+0x192>
 8006e98:	2d06      	cmp	r5, #6
 8006e9a:	f47f af1d 	bne.w	8006cd8 <_scanf_float+0x64>
 8006e9e:	2507      	movs	r5, #7
 8006ea0:	e7b1      	b.n	8006e06 <_scanf_float+0x192>
 8006ea2:	6822      	ldr	r2, [r4, #0]
 8006ea4:	0591      	lsls	r1, r2, #22
 8006ea6:	f57f af17 	bpl.w	8006cd8 <_scanf_float+0x64>
 8006eaa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006eae:	6022      	str	r2, [r4, #0]
 8006eb0:	f8cd 9008 	str.w	r9, [sp, #8]
 8006eb4:	e7a7      	b.n	8006e06 <_scanf_float+0x192>
 8006eb6:	6822      	ldr	r2, [r4, #0]
 8006eb8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006ebc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006ec0:	d006      	beq.n	8006ed0 <_scanf_float+0x25c>
 8006ec2:	0550      	lsls	r0, r2, #21
 8006ec4:	f57f af08 	bpl.w	8006cd8 <_scanf_float+0x64>
 8006ec8:	f1b9 0f00 	cmp.w	r9, #0
 8006ecc:	f000 80de 	beq.w	800708c <_scanf_float+0x418>
 8006ed0:	0591      	lsls	r1, r2, #22
 8006ed2:	bf58      	it	pl
 8006ed4:	9902      	ldrpl	r1, [sp, #8]
 8006ed6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006eda:	bf58      	it	pl
 8006edc:	eba9 0101 	subpl.w	r1, r9, r1
 8006ee0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006ee4:	bf58      	it	pl
 8006ee6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006eea:	6022      	str	r2, [r4, #0]
 8006eec:	f04f 0900 	mov.w	r9, #0
 8006ef0:	e789      	b.n	8006e06 <_scanf_float+0x192>
 8006ef2:	f04f 0a03 	mov.w	sl, #3
 8006ef6:	e786      	b.n	8006e06 <_scanf_float+0x192>
 8006ef8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006efc:	4639      	mov	r1, r7
 8006efe:	4640      	mov	r0, r8
 8006f00:	4798      	blx	r3
 8006f02:	2800      	cmp	r0, #0
 8006f04:	f43f aedb 	beq.w	8006cbe <_scanf_float+0x4a>
 8006f08:	e6e6      	b.n	8006cd8 <_scanf_float+0x64>
 8006f0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f12:	463a      	mov	r2, r7
 8006f14:	4640      	mov	r0, r8
 8006f16:	4798      	blx	r3
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	6123      	str	r3, [r4, #16]
 8006f1e:	e6e8      	b.n	8006cf2 <_scanf_float+0x7e>
 8006f20:	1e6b      	subs	r3, r5, #1
 8006f22:	2b06      	cmp	r3, #6
 8006f24:	d824      	bhi.n	8006f70 <_scanf_float+0x2fc>
 8006f26:	2d02      	cmp	r5, #2
 8006f28:	d836      	bhi.n	8006f98 <_scanf_float+0x324>
 8006f2a:	9b01      	ldr	r3, [sp, #4]
 8006f2c:	429e      	cmp	r6, r3
 8006f2e:	f67f aee4 	bls.w	8006cfa <_scanf_float+0x86>
 8006f32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f3a:	463a      	mov	r2, r7
 8006f3c:	4640      	mov	r0, r8
 8006f3e:	4798      	blx	r3
 8006f40:	6923      	ldr	r3, [r4, #16]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	6123      	str	r3, [r4, #16]
 8006f46:	e7f0      	b.n	8006f2a <_scanf_float+0x2b6>
 8006f48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f4c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006f50:	463a      	mov	r2, r7
 8006f52:	4640      	mov	r0, r8
 8006f54:	4798      	blx	r3
 8006f56:	6923      	ldr	r3, [r4, #16]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	6123      	str	r3, [r4, #16]
 8006f5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f60:	fa5f fa8a 	uxtb.w	sl, sl
 8006f64:	f1ba 0f02 	cmp.w	sl, #2
 8006f68:	d1ee      	bne.n	8006f48 <_scanf_float+0x2d4>
 8006f6a:	3d03      	subs	r5, #3
 8006f6c:	b2ed      	uxtb	r5, r5
 8006f6e:	1b76      	subs	r6, r6, r5
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	05da      	lsls	r2, r3, #23
 8006f74:	d530      	bpl.n	8006fd8 <_scanf_float+0x364>
 8006f76:	055b      	lsls	r3, r3, #21
 8006f78:	d511      	bpl.n	8006f9e <_scanf_float+0x32a>
 8006f7a:	9b01      	ldr	r3, [sp, #4]
 8006f7c:	429e      	cmp	r6, r3
 8006f7e:	f67f aebc 	bls.w	8006cfa <_scanf_float+0x86>
 8006f82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f8a:	463a      	mov	r2, r7
 8006f8c:	4640      	mov	r0, r8
 8006f8e:	4798      	blx	r3
 8006f90:	6923      	ldr	r3, [r4, #16]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	6123      	str	r3, [r4, #16]
 8006f96:	e7f0      	b.n	8006f7a <_scanf_float+0x306>
 8006f98:	46aa      	mov	sl, r5
 8006f9a:	46b3      	mov	fp, r6
 8006f9c:	e7de      	b.n	8006f5c <_scanf_float+0x2e8>
 8006f9e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006fa2:	6923      	ldr	r3, [r4, #16]
 8006fa4:	2965      	cmp	r1, #101	@ 0x65
 8006fa6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006faa:	f106 35ff 	add.w	r5, r6, #4294967295
 8006fae:	6123      	str	r3, [r4, #16]
 8006fb0:	d00c      	beq.n	8006fcc <_scanf_float+0x358>
 8006fb2:	2945      	cmp	r1, #69	@ 0x45
 8006fb4:	d00a      	beq.n	8006fcc <_scanf_float+0x358>
 8006fb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fba:	463a      	mov	r2, r7
 8006fbc:	4640      	mov	r0, r8
 8006fbe:	4798      	blx	r3
 8006fc0:	6923      	ldr	r3, [r4, #16]
 8006fc2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	1eb5      	subs	r5, r6, #2
 8006fca:	6123      	str	r3, [r4, #16]
 8006fcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fd0:	463a      	mov	r2, r7
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	4798      	blx	r3
 8006fd6:	462e      	mov	r6, r5
 8006fd8:	6822      	ldr	r2, [r4, #0]
 8006fda:	f012 0210 	ands.w	r2, r2, #16
 8006fde:	d001      	beq.n	8006fe4 <_scanf_float+0x370>
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	e68b      	b.n	8006cfc <_scanf_float+0x88>
 8006fe4:	7032      	strb	r2, [r6, #0]
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ff0:	d11c      	bne.n	800702c <_scanf_float+0x3b8>
 8006ff2:	9b02      	ldr	r3, [sp, #8]
 8006ff4:	454b      	cmp	r3, r9
 8006ff6:	eba3 0209 	sub.w	r2, r3, r9
 8006ffa:	d123      	bne.n	8007044 <_scanf_float+0x3d0>
 8006ffc:	9901      	ldr	r1, [sp, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	4640      	mov	r0, r8
 8007002:	f002 fd19 	bl	8009a38 <_strtod_r>
 8007006:	9b03      	ldr	r3, [sp, #12]
 8007008:	6821      	ldr	r1, [r4, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f011 0f02 	tst.w	r1, #2
 8007010:	ec57 6b10 	vmov	r6, r7, d0
 8007014:	f103 0204 	add.w	r2, r3, #4
 8007018:	d01f      	beq.n	800705a <_scanf_float+0x3e6>
 800701a:	9903      	ldr	r1, [sp, #12]
 800701c:	600a      	str	r2, [r1, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	e9c3 6700 	strd	r6, r7, [r3]
 8007024:	68e3      	ldr	r3, [r4, #12]
 8007026:	3301      	adds	r3, #1
 8007028:	60e3      	str	r3, [r4, #12]
 800702a:	e7d9      	b.n	8006fe0 <_scanf_float+0x36c>
 800702c:	9b04      	ldr	r3, [sp, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d0e4      	beq.n	8006ffc <_scanf_float+0x388>
 8007032:	9905      	ldr	r1, [sp, #20]
 8007034:	230a      	movs	r3, #10
 8007036:	3101      	adds	r1, #1
 8007038:	4640      	mov	r0, r8
 800703a:	f002 fd7d 	bl	8009b38 <_strtol_r>
 800703e:	9b04      	ldr	r3, [sp, #16]
 8007040:	9e05      	ldr	r6, [sp, #20]
 8007042:	1ac2      	subs	r2, r0, r3
 8007044:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007048:	429e      	cmp	r6, r3
 800704a:	bf28      	it	cs
 800704c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007050:	4910      	ldr	r1, [pc, #64]	@ (8007094 <_scanf_float+0x420>)
 8007052:	4630      	mov	r0, r6
 8007054:	f000 f954 	bl	8007300 <siprintf>
 8007058:	e7d0      	b.n	8006ffc <_scanf_float+0x388>
 800705a:	f011 0f04 	tst.w	r1, #4
 800705e:	9903      	ldr	r1, [sp, #12]
 8007060:	600a      	str	r2, [r1, #0]
 8007062:	d1dc      	bne.n	800701e <_scanf_float+0x3aa>
 8007064:	681d      	ldr	r5, [r3, #0]
 8007066:	4632      	mov	r2, r6
 8007068:	463b      	mov	r3, r7
 800706a:	4630      	mov	r0, r6
 800706c:	4639      	mov	r1, r7
 800706e:	f7f9 fd5d 	bl	8000b2c <__aeabi_dcmpun>
 8007072:	b128      	cbz	r0, 8007080 <_scanf_float+0x40c>
 8007074:	4808      	ldr	r0, [pc, #32]	@ (8007098 <_scanf_float+0x424>)
 8007076:	f000 fabb 	bl	80075f0 <nanf>
 800707a:	ed85 0a00 	vstr	s0, [r5]
 800707e:	e7d1      	b.n	8007024 <_scanf_float+0x3b0>
 8007080:	4630      	mov	r0, r6
 8007082:	4639      	mov	r1, r7
 8007084:	f7f9 fdb0 	bl	8000be8 <__aeabi_d2f>
 8007088:	6028      	str	r0, [r5, #0]
 800708a:	e7cb      	b.n	8007024 <_scanf_float+0x3b0>
 800708c:	f04f 0900 	mov.w	r9, #0
 8007090:	e629      	b.n	8006ce6 <_scanf_float+0x72>
 8007092:	bf00      	nop
 8007094:	080175c3 	.word	0x080175c3
 8007098:	08017603 	.word	0x08017603

0800709c <std>:
 800709c:	2300      	movs	r3, #0
 800709e:	b510      	push	{r4, lr}
 80070a0:	4604      	mov	r4, r0
 80070a2:	e9c0 3300 	strd	r3, r3, [r0]
 80070a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070aa:	6083      	str	r3, [r0, #8]
 80070ac:	8181      	strh	r1, [r0, #12]
 80070ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80070b0:	81c2      	strh	r2, [r0, #14]
 80070b2:	6183      	str	r3, [r0, #24]
 80070b4:	4619      	mov	r1, r3
 80070b6:	2208      	movs	r2, #8
 80070b8:	305c      	adds	r0, #92	@ 0x5c
 80070ba:	f000 fa19 	bl	80074f0 <memset>
 80070be:	4b0d      	ldr	r3, [pc, #52]	@ (80070f4 <std+0x58>)
 80070c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80070c2:	4b0d      	ldr	r3, [pc, #52]	@ (80070f8 <std+0x5c>)
 80070c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070c6:	4b0d      	ldr	r3, [pc, #52]	@ (80070fc <std+0x60>)
 80070c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007100 <std+0x64>)
 80070cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80070ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007104 <std+0x68>)
 80070d0:	6224      	str	r4, [r4, #32]
 80070d2:	429c      	cmp	r4, r3
 80070d4:	d006      	beq.n	80070e4 <std+0x48>
 80070d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070da:	4294      	cmp	r4, r2
 80070dc:	d002      	beq.n	80070e4 <std+0x48>
 80070de:	33d0      	adds	r3, #208	@ 0xd0
 80070e0:	429c      	cmp	r4, r3
 80070e2:	d105      	bne.n	80070f0 <std+0x54>
 80070e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ec:	f000 ba7c 	b.w	80075e8 <__retarget_lock_init_recursive>
 80070f0:	bd10      	pop	{r4, pc}
 80070f2:	bf00      	nop
 80070f4:	08007341 	.word	0x08007341
 80070f8:	08007363 	.word	0x08007363
 80070fc:	0800739b 	.word	0x0800739b
 8007100:	080073bf 	.word	0x080073bf
 8007104:	20007b70 	.word	0x20007b70

08007108 <stdio_exit_handler>:
 8007108:	4a02      	ldr	r2, [pc, #8]	@ (8007114 <stdio_exit_handler+0xc>)
 800710a:	4903      	ldr	r1, [pc, #12]	@ (8007118 <stdio_exit_handler+0x10>)
 800710c:	4803      	ldr	r0, [pc, #12]	@ (800711c <stdio_exit_handler+0x14>)
 800710e:	f000 b869 	b.w	80071e4 <_fwalk_sglue>
 8007112:	bf00      	nop
 8007114:	20000030 	.word	0x20000030
 8007118:	0800a179 	.word	0x0800a179
 800711c:	20000040 	.word	0x20000040

08007120 <cleanup_stdio>:
 8007120:	6841      	ldr	r1, [r0, #4]
 8007122:	4b0c      	ldr	r3, [pc, #48]	@ (8007154 <cleanup_stdio+0x34>)
 8007124:	4299      	cmp	r1, r3
 8007126:	b510      	push	{r4, lr}
 8007128:	4604      	mov	r4, r0
 800712a:	d001      	beq.n	8007130 <cleanup_stdio+0x10>
 800712c:	f003 f824 	bl	800a178 <_fflush_r>
 8007130:	68a1      	ldr	r1, [r4, #8]
 8007132:	4b09      	ldr	r3, [pc, #36]	@ (8007158 <cleanup_stdio+0x38>)
 8007134:	4299      	cmp	r1, r3
 8007136:	d002      	beq.n	800713e <cleanup_stdio+0x1e>
 8007138:	4620      	mov	r0, r4
 800713a:	f003 f81d 	bl	800a178 <_fflush_r>
 800713e:	68e1      	ldr	r1, [r4, #12]
 8007140:	4b06      	ldr	r3, [pc, #24]	@ (800715c <cleanup_stdio+0x3c>)
 8007142:	4299      	cmp	r1, r3
 8007144:	d004      	beq.n	8007150 <cleanup_stdio+0x30>
 8007146:	4620      	mov	r0, r4
 8007148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800714c:	f003 b814 	b.w	800a178 <_fflush_r>
 8007150:	bd10      	pop	{r4, pc}
 8007152:	bf00      	nop
 8007154:	20007b70 	.word	0x20007b70
 8007158:	20007bd8 	.word	0x20007bd8
 800715c:	20007c40 	.word	0x20007c40

08007160 <global_stdio_init.part.0>:
 8007160:	b510      	push	{r4, lr}
 8007162:	4b0b      	ldr	r3, [pc, #44]	@ (8007190 <global_stdio_init.part.0+0x30>)
 8007164:	4c0b      	ldr	r4, [pc, #44]	@ (8007194 <global_stdio_init.part.0+0x34>)
 8007166:	4a0c      	ldr	r2, [pc, #48]	@ (8007198 <global_stdio_init.part.0+0x38>)
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	4620      	mov	r0, r4
 800716c:	2200      	movs	r2, #0
 800716e:	2104      	movs	r1, #4
 8007170:	f7ff ff94 	bl	800709c <std>
 8007174:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007178:	2201      	movs	r2, #1
 800717a:	2109      	movs	r1, #9
 800717c:	f7ff ff8e 	bl	800709c <std>
 8007180:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007184:	2202      	movs	r2, #2
 8007186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800718a:	2112      	movs	r1, #18
 800718c:	f7ff bf86 	b.w	800709c <std>
 8007190:	20007ca8 	.word	0x20007ca8
 8007194:	20007b70 	.word	0x20007b70
 8007198:	08007109 	.word	0x08007109

0800719c <__sfp_lock_acquire>:
 800719c:	4801      	ldr	r0, [pc, #4]	@ (80071a4 <__sfp_lock_acquire+0x8>)
 800719e:	f000 ba24 	b.w	80075ea <__retarget_lock_acquire_recursive>
 80071a2:	bf00      	nop
 80071a4:	20007cb1 	.word	0x20007cb1

080071a8 <__sfp_lock_release>:
 80071a8:	4801      	ldr	r0, [pc, #4]	@ (80071b0 <__sfp_lock_release+0x8>)
 80071aa:	f000 ba1f 	b.w	80075ec <__retarget_lock_release_recursive>
 80071ae:	bf00      	nop
 80071b0:	20007cb1 	.word	0x20007cb1

080071b4 <__sinit>:
 80071b4:	b510      	push	{r4, lr}
 80071b6:	4604      	mov	r4, r0
 80071b8:	f7ff fff0 	bl	800719c <__sfp_lock_acquire>
 80071bc:	6a23      	ldr	r3, [r4, #32]
 80071be:	b11b      	cbz	r3, 80071c8 <__sinit+0x14>
 80071c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c4:	f7ff bff0 	b.w	80071a8 <__sfp_lock_release>
 80071c8:	4b04      	ldr	r3, [pc, #16]	@ (80071dc <__sinit+0x28>)
 80071ca:	6223      	str	r3, [r4, #32]
 80071cc:	4b04      	ldr	r3, [pc, #16]	@ (80071e0 <__sinit+0x2c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1f5      	bne.n	80071c0 <__sinit+0xc>
 80071d4:	f7ff ffc4 	bl	8007160 <global_stdio_init.part.0>
 80071d8:	e7f2      	b.n	80071c0 <__sinit+0xc>
 80071da:	bf00      	nop
 80071dc:	08007121 	.word	0x08007121
 80071e0:	20007ca8 	.word	0x20007ca8

080071e4 <_fwalk_sglue>:
 80071e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e8:	4607      	mov	r7, r0
 80071ea:	4688      	mov	r8, r1
 80071ec:	4614      	mov	r4, r2
 80071ee:	2600      	movs	r6, #0
 80071f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071f4:	f1b9 0901 	subs.w	r9, r9, #1
 80071f8:	d505      	bpl.n	8007206 <_fwalk_sglue+0x22>
 80071fa:	6824      	ldr	r4, [r4, #0]
 80071fc:	2c00      	cmp	r4, #0
 80071fe:	d1f7      	bne.n	80071f0 <_fwalk_sglue+0xc>
 8007200:	4630      	mov	r0, r6
 8007202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007206:	89ab      	ldrh	r3, [r5, #12]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d907      	bls.n	800721c <_fwalk_sglue+0x38>
 800720c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007210:	3301      	adds	r3, #1
 8007212:	d003      	beq.n	800721c <_fwalk_sglue+0x38>
 8007214:	4629      	mov	r1, r5
 8007216:	4638      	mov	r0, r7
 8007218:	47c0      	blx	r8
 800721a:	4306      	orrs	r6, r0
 800721c:	3568      	adds	r5, #104	@ 0x68
 800721e:	e7e9      	b.n	80071f4 <_fwalk_sglue+0x10>

08007220 <iprintf>:
 8007220:	b40f      	push	{r0, r1, r2, r3}
 8007222:	b507      	push	{r0, r1, r2, lr}
 8007224:	4906      	ldr	r1, [pc, #24]	@ (8007240 <iprintf+0x20>)
 8007226:	ab04      	add	r3, sp, #16
 8007228:	6808      	ldr	r0, [r1, #0]
 800722a:	f853 2b04 	ldr.w	r2, [r3], #4
 800722e:	6881      	ldr	r1, [r0, #8]
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	f002 fe05 	bl	8009e40 <_vfiprintf_r>
 8007236:	b003      	add	sp, #12
 8007238:	f85d eb04 	ldr.w	lr, [sp], #4
 800723c:	b004      	add	sp, #16
 800723e:	4770      	bx	lr
 8007240:	2000003c 	.word	0x2000003c

08007244 <_puts_r>:
 8007244:	6a03      	ldr	r3, [r0, #32]
 8007246:	b570      	push	{r4, r5, r6, lr}
 8007248:	6884      	ldr	r4, [r0, #8]
 800724a:	4605      	mov	r5, r0
 800724c:	460e      	mov	r6, r1
 800724e:	b90b      	cbnz	r3, 8007254 <_puts_r+0x10>
 8007250:	f7ff ffb0 	bl	80071b4 <__sinit>
 8007254:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007256:	07db      	lsls	r3, r3, #31
 8007258:	d405      	bmi.n	8007266 <_puts_r+0x22>
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	0598      	lsls	r0, r3, #22
 800725e:	d402      	bmi.n	8007266 <_puts_r+0x22>
 8007260:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007262:	f000 f9c2 	bl	80075ea <__retarget_lock_acquire_recursive>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	0719      	lsls	r1, r3, #28
 800726a:	d502      	bpl.n	8007272 <_puts_r+0x2e>
 800726c:	6923      	ldr	r3, [r4, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d135      	bne.n	80072de <_puts_r+0x9a>
 8007272:	4621      	mov	r1, r4
 8007274:	4628      	mov	r0, r5
 8007276:	f000 f8e5 	bl	8007444 <__swsetup_r>
 800727a:	b380      	cbz	r0, 80072de <_puts_r+0x9a>
 800727c:	f04f 35ff 	mov.w	r5, #4294967295
 8007280:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007282:	07da      	lsls	r2, r3, #31
 8007284:	d405      	bmi.n	8007292 <_puts_r+0x4e>
 8007286:	89a3      	ldrh	r3, [r4, #12]
 8007288:	059b      	lsls	r3, r3, #22
 800728a:	d402      	bmi.n	8007292 <_puts_r+0x4e>
 800728c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800728e:	f000 f9ad 	bl	80075ec <__retarget_lock_release_recursive>
 8007292:	4628      	mov	r0, r5
 8007294:	bd70      	pop	{r4, r5, r6, pc}
 8007296:	2b00      	cmp	r3, #0
 8007298:	da04      	bge.n	80072a4 <_puts_r+0x60>
 800729a:	69a2      	ldr	r2, [r4, #24]
 800729c:	429a      	cmp	r2, r3
 800729e:	dc17      	bgt.n	80072d0 <_puts_r+0x8c>
 80072a0:	290a      	cmp	r1, #10
 80072a2:	d015      	beq.n	80072d0 <_puts_r+0x8c>
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	6022      	str	r2, [r4, #0]
 80072aa:	7019      	strb	r1, [r3, #0]
 80072ac:	68a3      	ldr	r3, [r4, #8]
 80072ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072b2:	3b01      	subs	r3, #1
 80072b4:	60a3      	str	r3, [r4, #8]
 80072b6:	2900      	cmp	r1, #0
 80072b8:	d1ed      	bne.n	8007296 <_puts_r+0x52>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	da11      	bge.n	80072e2 <_puts_r+0x9e>
 80072be:	4622      	mov	r2, r4
 80072c0:	210a      	movs	r1, #10
 80072c2:	4628      	mov	r0, r5
 80072c4:	f000 f87f 	bl	80073c6 <__swbuf_r>
 80072c8:	3001      	adds	r0, #1
 80072ca:	d0d7      	beq.n	800727c <_puts_r+0x38>
 80072cc:	250a      	movs	r5, #10
 80072ce:	e7d7      	b.n	8007280 <_puts_r+0x3c>
 80072d0:	4622      	mov	r2, r4
 80072d2:	4628      	mov	r0, r5
 80072d4:	f000 f877 	bl	80073c6 <__swbuf_r>
 80072d8:	3001      	adds	r0, #1
 80072da:	d1e7      	bne.n	80072ac <_puts_r+0x68>
 80072dc:	e7ce      	b.n	800727c <_puts_r+0x38>
 80072de:	3e01      	subs	r6, #1
 80072e0:	e7e4      	b.n	80072ac <_puts_r+0x68>
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	6022      	str	r2, [r4, #0]
 80072e8:	220a      	movs	r2, #10
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	e7ee      	b.n	80072cc <_puts_r+0x88>
	...

080072f0 <puts>:
 80072f0:	4b02      	ldr	r3, [pc, #8]	@ (80072fc <puts+0xc>)
 80072f2:	4601      	mov	r1, r0
 80072f4:	6818      	ldr	r0, [r3, #0]
 80072f6:	f7ff bfa5 	b.w	8007244 <_puts_r>
 80072fa:	bf00      	nop
 80072fc:	2000003c 	.word	0x2000003c

08007300 <siprintf>:
 8007300:	b40e      	push	{r1, r2, r3}
 8007302:	b500      	push	{lr}
 8007304:	b09c      	sub	sp, #112	@ 0x70
 8007306:	ab1d      	add	r3, sp, #116	@ 0x74
 8007308:	9002      	str	r0, [sp, #8]
 800730a:	9006      	str	r0, [sp, #24]
 800730c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007310:	4809      	ldr	r0, [pc, #36]	@ (8007338 <siprintf+0x38>)
 8007312:	9107      	str	r1, [sp, #28]
 8007314:	9104      	str	r1, [sp, #16]
 8007316:	4909      	ldr	r1, [pc, #36]	@ (800733c <siprintf+0x3c>)
 8007318:	f853 2b04 	ldr.w	r2, [r3], #4
 800731c:	9105      	str	r1, [sp, #20]
 800731e:	6800      	ldr	r0, [r0, #0]
 8007320:	9301      	str	r3, [sp, #4]
 8007322:	a902      	add	r1, sp, #8
 8007324:	f002 fc66 	bl	8009bf4 <_svfiprintf_r>
 8007328:	9b02      	ldr	r3, [sp, #8]
 800732a:	2200      	movs	r2, #0
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	b01c      	add	sp, #112	@ 0x70
 8007330:	f85d eb04 	ldr.w	lr, [sp], #4
 8007334:	b003      	add	sp, #12
 8007336:	4770      	bx	lr
 8007338:	2000003c 	.word	0x2000003c
 800733c:	ffff0208 	.word	0xffff0208

08007340 <__sread>:
 8007340:	b510      	push	{r4, lr}
 8007342:	460c      	mov	r4, r1
 8007344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007348:	f000 f900 	bl	800754c <_read_r>
 800734c:	2800      	cmp	r0, #0
 800734e:	bfab      	itete	ge
 8007350:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007352:	89a3      	ldrhlt	r3, [r4, #12]
 8007354:	181b      	addge	r3, r3, r0
 8007356:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800735a:	bfac      	ite	ge
 800735c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800735e:	81a3      	strhlt	r3, [r4, #12]
 8007360:	bd10      	pop	{r4, pc}

08007362 <__swrite>:
 8007362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007366:	461f      	mov	r7, r3
 8007368:	898b      	ldrh	r3, [r1, #12]
 800736a:	05db      	lsls	r3, r3, #23
 800736c:	4605      	mov	r5, r0
 800736e:	460c      	mov	r4, r1
 8007370:	4616      	mov	r6, r2
 8007372:	d505      	bpl.n	8007380 <__swrite+0x1e>
 8007374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007378:	2302      	movs	r3, #2
 800737a:	2200      	movs	r2, #0
 800737c:	f000 f8d4 	bl	8007528 <_lseek_r>
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007386:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800738a:	81a3      	strh	r3, [r4, #12]
 800738c:	4632      	mov	r2, r6
 800738e:	463b      	mov	r3, r7
 8007390:	4628      	mov	r0, r5
 8007392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007396:	f000 b8eb 	b.w	8007570 <_write_r>

0800739a <__sseek>:
 800739a:	b510      	push	{r4, lr}
 800739c:	460c      	mov	r4, r1
 800739e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a2:	f000 f8c1 	bl	8007528 <_lseek_r>
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	bf15      	itete	ne
 80073ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80073b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80073b6:	81a3      	strheq	r3, [r4, #12]
 80073b8:	bf18      	it	ne
 80073ba:	81a3      	strhne	r3, [r4, #12]
 80073bc:	bd10      	pop	{r4, pc}

080073be <__sclose>:
 80073be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c2:	f000 b8a1 	b.w	8007508 <_close_r>

080073c6 <__swbuf_r>:
 80073c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c8:	460e      	mov	r6, r1
 80073ca:	4614      	mov	r4, r2
 80073cc:	4605      	mov	r5, r0
 80073ce:	b118      	cbz	r0, 80073d8 <__swbuf_r+0x12>
 80073d0:	6a03      	ldr	r3, [r0, #32]
 80073d2:	b90b      	cbnz	r3, 80073d8 <__swbuf_r+0x12>
 80073d4:	f7ff feee 	bl	80071b4 <__sinit>
 80073d8:	69a3      	ldr	r3, [r4, #24]
 80073da:	60a3      	str	r3, [r4, #8]
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	071a      	lsls	r2, r3, #28
 80073e0:	d501      	bpl.n	80073e6 <__swbuf_r+0x20>
 80073e2:	6923      	ldr	r3, [r4, #16]
 80073e4:	b943      	cbnz	r3, 80073f8 <__swbuf_r+0x32>
 80073e6:	4621      	mov	r1, r4
 80073e8:	4628      	mov	r0, r5
 80073ea:	f000 f82b 	bl	8007444 <__swsetup_r>
 80073ee:	b118      	cbz	r0, 80073f8 <__swbuf_r+0x32>
 80073f0:	f04f 37ff 	mov.w	r7, #4294967295
 80073f4:	4638      	mov	r0, r7
 80073f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	6922      	ldr	r2, [r4, #16]
 80073fc:	1a98      	subs	r0, r3, r2
 80073fe:	6963      	ldr	r3, [r4, #20]
 8007400:	b2f6      	uxtb	r6, r6
 8007402:	4283      	cmp	r3, r0
 8007404:	4637      	mov	r7, r6
 8007406:	dc05      	bgt.n	8007414 <__swbuf_r+0x4e>
 8007408:	4621      	mov	r1, r4
 800740a:	4628      	mov	r0, r5
 800740c:	f002 feb4 	bl	800a178 <_fflush_r>
 8007410:	2800      	cmp	r0, #0
 8007412:	d1ed      	bne.n	80073f0 <__swbuf_r+0x2a>
 8007414:	68a3      	ldr	r3, [r4, #8]
 8007416:	3b01      	subs	r3, #1
 8007418:	60a3      	str	r3, [r4, #8]
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	6022      	str	r2, [r4, #0]
 8007420:	701e      	strb	r6, [r3, #0]
 8007422:	6962      	ldr	r2, [r4, #20]
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	429a      	cmp	r2, r3
 8007428:	d004      	beq.n	8007434 <__swbuf_r+0x6e>
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	07db      	lsls	r3, r3, #31
 800742e:	d5e1      	bpl.n	80073f4 <__swbuf_r+0x2e>
 8007430:	2e0a      	cmp	r6, #10
 8007432:	d1df      	bne.n	80073f4 <__swbuf_r+0x2e>
 8007434:	4621      	mov	r1, r4
 8007436:	4628      	mov	r0, r5
 8007438:	f002 fe9e 	bl	800a178 <_fflush_r>
 800743c:	2800      	cmp	r0, #0
 800743e:	d0d9      	beq.n	80073f4 <__swbuf_r+0x2e>
 8007440:	e7d6      	b.n	80073f0 <__swbuf_r+0x2a>
	...

08007444 <__swsetup_r>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	4b29      	ldr	r3, [pc, #164]	@ (80074ec <__swsetup_r+0xa8>)
 8007448:	4605      	mov	r5, r0
 800744a:	6818      	ldr	r0, [r3, #0]
 800744c:	460c      	mov	r4, r1
 800744e:	b118      	cbz	r0, 8007458 <__swsetup_r+0x14>
 8007450:	6a03      	ldr	r3, [r0, #32]
 8007452:	b90b      	cbnz	r3, 8007458 <__swsetup_r+0x14>
 8007454:	f7ff feae 	bl	80071b4 <__sinit>
 8007458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800745c:	0719      	lsls	r1, r3, #28
 800745e:	d422      	bmi.n	80074a6 <__swsetup_r+0x62>
 8007460:	06da      	lsls	r2, r3, #27
 8007462:	d407      	bmi.n	8007474 <__swsetup_r+0x30>
 8007464:	2209      	movs	r2, #9
 8007466:	602a      	str	r2, [r5, #0]
 8007468:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800746c:	81a3      	strh	r3, [r4, #12]
 800746e:	f04f 30ff 	mov.w	r0, #4294967295
 8007472:	e033      	b.n	80074dc <__swsetup_r+0x98>
 8007474:	0758      	lsls	r0, r3, #29
 8007476:	d512      	bpl.n	800749e <__swsetup_r+0x5a>
 8007478:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800747a:	b141      	cbz	r1, 800748e <__swsetup_r+0x4a>
 800747c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007480:	4299      	cmp	r1, r3
 8007482:	d002      	beq.n	800748a <__swsetup_r+0x46>
 8007484:	4628      	mov	r0, r5
 8007486:	f000 ff23 	bl	80082d0 <_free_r>
 800748a:	2300      	movs	r3, #0
 800748c:	6363      	str	r3, [r4, #52]	@ 0x34
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007494:	81a3      	strh	r3, [r4, #12]
 8007496:	2300      	movs	r3, #0
 8007498:	6063      	str	r3, [r4, #4]
 800749a:	6923      	ldr	r3, [r4, #16]
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	89a3      	ldrh	r3, [r4, #12]
 80074a0:	f043 0308 	orr.w	r3, r3, #8
 80074a4:	81a3      	strh	r3, [r4, #12]
 80074a6:	6923      	ldr	r3, [r4, #16]
 80074a8:	b94b      	cbnz	r3, 80074be <__swsetup_r+0x7a>
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074b4:	d003      	beq.n	80074be <__swsetup_r+0x7a>
 80074b6:	4621      	mov	r1, r4
 80074b8:	4628      	mov	r0, r5
 80074ba:	f002 febd 	bl	800a238 <__smakebuf_r>
 80074be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074c2:	f013 0201 	ands.w	r2, r3, #1
 80074c6:	d00a      	beq.n	80074de <__swsetup_r+0x9a>
 80074c8:	2200      	movs	r2, #0
 80074ca:	60a2      	str	r2, [r4, #8]
 80074cc:	6962      	ldr	r2, [r4, #20]
 80074ce:	4252      	negs	r2, r2
 80074d0:	61a2      	str	r2, [r4, #24]
 80074d2:	6922      	ldr	r2, [r4, #16]
 80074d4:	b942      	cbnz	r2, 80074e8 <__swsetup_r+0xa4>
 80074d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80074da:	d1c5      	bne.n	8007468 <__swsetup_r+0x24>
 80074dc:	bd38      	pop	{r3, r4, r5, pc}
 80074de:	0799      	lsls	r1, r3, #30
 80074e0:	bf58      	it	pl
 80074e2:	6962      	ldrpl	r2, [r4, #20]
 80074e4:	60a2      	str	r2, [r4, #8]
 80074e6:	e7f4      	b.n	80074d2 <__swsetup_r+0x8e>
 80074e8:	2000      	movs	r0, #0
 80074ea:	e7f7      	b.n	80074dc <__swsetup_r+0x98>
 80074ec:	2000003c 	.word	0x2000003c

080074f0 <memset>:
 80074f0:	4402      	add	r2, r0
 80074f2:	4603      	mov	r3, r0
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d100      	bne.n	80074fa <memset+0xa>
 80074f8:	4770      	bx	lr
 80074fa:	f803 1b01 	strb.w	r1, [r3], #1
 80074fe:	e7f9      	b.n	80074f4 <memset+0x4>

08007500 <_localeconv_r>:
 8007500:	4800      	ldr	r0, [pc, #0]	@ (8007504 <_localeconv_r+0x4>)
 8007502:	4770      	bx	lr
 8007504:	2000017c 	.word	0x2000017c

08007508 <_close_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4d06      	ldr	r5, [pc, #24]	@ (8007524 <_close_r+0x1c>)
 800750c:	2300      	movs	r3, #0
 800750e:	4604      	mov	r4, r0
 8007510:	4608      	mov	r0, r1
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	f7fa fd8e 	bl	8002034 <_close>
 8007518:	1c43      	adds	r3, r0, #1
 800751a:	d102      	bne.n	8007522 <_close_r+0x1a>
 800751c:	682b      	ldr	r3, [r5, #0]
 800751e:	b103      	cbz	r3, 8007522 <_close_r+0x1a>
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	20007cac 	.word	0x20007cac

08007528 <_lseek_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d07      	ldr	r5, [pc, #28]	@ (8007548 <_lseek_r+0x20>)
 800752c:	4604      	mov	r4, r0
 800752e:	4608      	mov	r0, r1
 8007530:	4611      	mov	r1, r2
 8007532:	2200      	movs	r2, #0
 8007534:	602a      	str	r2, [r5, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	f7fa fda3 	bl	8002082 <_lseek>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d102      	bne.n	8007546 <_lseek_r+0x1e>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	b103      	cbz	r3, 8007546 <_lseek_r+0x1e>
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	bd38      	pop	{r3, r4, r5, pc}
 8007548:	20007cac 	.word	0x20007cac

0800754c <_read_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	4d07      	ldr	r5, [pc, #28]	@ (800756c <_read_r+0x20>)
 8007550:	4604      	mov	r4, r0
 8007552:	4608      	mov	r0, r1
 8007554:	4611      	mov	r1, r2
 8007556:	2200      	movs	r2, #0
 8007558:	602a      	str	r2, [r5, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	f7fa fd31 	bl	8001fc2 <_read>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	d102      	bne.n	800756a <_read_r+0x1e>
 8007564:	682b      	ldr	r3, [r5, #0]
 8007566:	b103      	cbz	r3, 800756a <_read_r+0x1e>
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	bd38      	pop	{r3, r4, r5, pc}
 800756c:	20007cac 	.word	0x20007cac

08007570 <_write_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4d07      	ldr	r5, [pc, #28]	@ (8007590 <_write_r+0x20>)
 8007574:	4604      	mov	r4, r0
 8007576:	4608      	mov	r0, r1
 8007578:	4611      	mov	r1, r2
 800757a:	2200      	movs	r2, #0
 800757c:	602a      	str	r2, [r5, #0]
 800757e:	461a      	mov	r2, r3
 8007580:	f7fa fd3c 	bl	8001ffc <_write>
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	d102      	bne.n	800758e <_write_r+0x1e>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	b103      	cbz	r3, 800758e <_write_r+0x1e>
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	20007cac 	.word	0x20007cac

08007594 <__errno>:
 8007594:	4b01      	ldr	r3, [pc, #4]	@ (800759c <__errno+0x8>)
 8007596:	6818      	ldr	r0, [r3, #0]
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	2000003c 	.word	0x2000003c

080075a0 <__libc_init_array>:
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	4d0d      	ldr	r5, [pc, #52]	@ (80075d8 <__libc_init_array+0x38>)
 80075a4:	4c0d      	ldr	r4, [pc, #52]	@ (80075dc <__libc_init_array+0x3c>)
 80075a6:	1b64      	subs	r4, r4, r5
 80075a8:	10a4      	asrs	r4, r4, #2
 80075aa:	2600      	movs	r6, #0
 80075ac:	42a6      	cmp	r6, r4
 80075ae:	d109      	bne.n	80075c4 <__libc_init_array+0x24>
 80075b0:	4d0b      	ldr	r5, [pc, #44]	@ (80075e0 <__libc_init_array+0x40>)
 80075b2:	4c0c      	ldr	r4, [pc, #48]	@ (80075e4 <__libc_init_array+0x44>)
 80075b4:	f003 fe24 	bl	800b200 <_init>
 80075b8:	1b64      	subs	r4, r4, r5
 80075ba:	10a4      	asrs	r4, r4, #2
 80075bc:	2600      	movs	r6, #0
 80075be:	42a6      	cmp	r6, r4
 80075c0:	d105      	bne.n	80075ce <__libc_init_array+0x2e>
 80075c2:	bd70      	pop	{r4, r5, r6, pc}
 80075c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075c8:	4798      	blx	r3
 80075ca:	3601      	adds	r6, #1
 80075cc:	e7ee      	b.n	80075ac <__libc_init_array+0xc>
 80075ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d2:	4798      	blx	r3
 80075d4:	3601      	adds	r6, #1
 80075d6:	e7f2      	b.n	80075be <__libc_init_array+0x1e>
 80075d8:	080179ac 	.word	0x080179ac
 80075dc:	080179ac 	.word	0x080179ac
 80075e0:	080179ac 	.word	0x080179ac
 80075e4:	080179b0 	.word	0x080179b0

080075e8 <__retarget_lock_init_recursive>:
 80075e8:	4770      	bx	lr

080075ea <__retarget_lock_acquire_recursive>:
 80075ea:	4770      	bx	lr

080075ec <__retarget_lock_release_recursive>:
 80075ec:	4770      	bx	lr
	...

080075f0 <nanf>:
 80075f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80075f8 <nanf+0x8>
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	7fc00000 	.word	0x7fc00000

080075fc <__assert_func>:
 80075fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075fe:	4614      	mov	r4, r2
 8007600:	461a      	mov	r2, r3
 8007602:	4b09      	ldr	r3, [pc, #36]	@ (8007628 <__assert_func+0x2c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4605      	mov	r5, r0
 8007608:	68d8      	ldr	r0, [r3, #12]
 800760a:	b954      	cbnz	r4, 8007622 <__assert_func+0x26>
 800760c:	4b07      	ldr	r3, [pc, #28]	@ (800762c <__assert_func+0x30>)
 800760e:	461c      	mov	r4, r3
 8007610:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007614:	9100      	str	r1, [sp, #0]
 8007616:	462b      	mov	r3, r5
 8007618:	4905      	ldr	r1, [pc, #20]	@ (8007630 <__assert_func+0x34>)
 800761a:	f002 fdd5 	bl	800a1c8 <fiprintf>
 800761e:	f002 febb 	bl	800a398 <abort>
 8007622:	4b04      	ldr	r3, [pc, #16]	@ (8007634 <__assert_func+0x38>)
 8007624:	e7f4      	b.n	8007610 <__assert_func+0x14>
 8007626:	bf00      	nop
 8007628:	2000003c 	.word	0x2000003c
 800762c:	08017603 	.word	0x08017603
 8007630:	080175d5 	.word	0x080175d5
 8007634:	080175c8 	.word	0x080175c8

08007638 <quorem>:
 8007638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	6903      	ldr	r3, [r0, #16]
 800763e:	690c      	ldr	r4, [r1, #16]
 8007640:	42a3      	cmp	r3, r4
 8007642:	4607      	mov	r7, r0
 8007644:	db7e      	blt.n	8007744 <quorem+0x10c>
 8007646:	3c01      	subs	r4, #1
 8007648:	f101 0814 	add.w	r8, r1, #20
 800764c:	00a3      	lsls	r3, r4, #2
 800764e:	f100 0514 	add.w	r5, r0, #20
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800765e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007662:	3301      	adds	r3, #1
 8007664:	429a      	cmp	r2, r3
 8007666:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800766a:	fbb2 f6f3 	udiv	r6, r2, r3
 800766e:	d32e      	bcc.n	80076ce <quorem+0x96>
 8007670:	f04f 0a00 	mov.w	sl, #0
 8007674:	46c4      	mov	ip, r8
 8007676:	46ae      	mov	lr, r5
 8007678:	46d3      	mov	fp, sl
 800767a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800767e:	b298      	uxth	r0, r3
 8007680:	fb06 a000 	mla	r0, r6, r0, sl
 8007684:	0c02      	lsrs	r2, r0, #16
 8007686:	0c1b      	lsrs	r3, r3, #16
 8007688:	fb06 2303 	mla	r3, r6, r3, r2
 800768c:	f8de 2000 	ldr.w	r2, [lr]
 8007690:	b280      	uxth	r0, r0
 8007692:	b292      	uxth	r2, r2
 8007694:	1a12      	subs	r2, r2, r0
 8007696:	445a      	add	r2, fp
 8007698:	f8de 0000 	ldr.w	r0, [lr]
 800769c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80076a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80076aa:	b292      	uxth	r2, r2
 80076ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80076b0:	45e1      	cmp	r9, ip
 80076b2:	f84e 2b04 	str.w	r2, [lr], #4
 80076b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80076ba:	d2de      	bcs.n	800767a <quorem+0x42>
 80076bc:	9b00      	ldr	r3, [sp, #0]
 80076be:	58eb      	ldr	r3, [r5, r3]
 80076c0:	b92b      	cbnz	r3, 80076ce <quorem+0x96>
 80076c2:	9b01      	ldr	r3, [sp, #4]
 80076c4:	3b04      	subs	r3, #4
 80076c6:	429d      	cmp	r5, r3
 80076c8:	461a      	mov	r2, r3
 80076ca:	d32f      	bcc.n	800772c <quorem+0xf4>
 80076cc:	613c      	str	r4, [r7, #16]
 80076ce:	4638      	mov	r0, r7
 80076d0:	f001 f9c2 	bl	8008a58 <__mcmp>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	db25      	blt.n	8007724 <quorem+0xec>
 80076d8:	4629      	mov	r1, r5
 80076da:	2000      	movs	r0, #0
 80076dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80076e0:	f8d1 c000 	ldr.w	ip, [r1]
 80076e4:	fa1f fe82 	uxth.w	lr, r2
 80076e8:	fa1f f38c 	uxth.w	r3, ip
 80076ec:	eba3 030e 	sub.w	r3, r3, lr
 80076f0:	4403      	add	r3, r0
 80076f2:	0c12      	lsrs	r2, r2, #16
 80076f4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076f8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007702:	45c1      	cmp	r9, r8
 8007704:	f841 3b04 	str.w	r3, [r1], #4
 8007708:	ea4f 4022 	mov.w	r0, r2, asr #16
 800770c:	d2e6      	bcs.n	80076dc <quorem+0xa4>
 800770e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007712:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007716:	b922      	cbnz	r2, 8007722 <quorem+0xea>
 8007718:	3b04      	subs	r3, #4
 800771a:	429d      	cmp	r5, r3
 800771c:	461a      	mov	r2, r3
 800771e:	d30b      	bcc.n	8007738 <quorem+0x100>
 8007720:	613c      	str	r4, [r7, #16]
 8007722:	3601      	adds	r6, #1
 8007724:	4630      	mov	r0, r6
 8007726:	b003      	add	sp, #12
 8007728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772c:	6812      	ldr	r2, [r2, #0]
 800772e:	3b04      	subs	r3, #4
 8007730:	2a00      	cmp	r2, #0
 8007732:	d1cb      	bne.n	80076cc <quorem+0x94>
 8007734:	3c01      	subs	r4, #1
 8007736:	e7c6      	b.n	80076c6 <quorem+0x8e>
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	3b04      	subs	r3, #4
 800773c:	2a00      	cmp	r2, #0
 800773e:	d1ef      	bne.n	8007720 <quorem+0xe8>
 8007740:	3c01      	subs	r4, #1
 8007742:	e7ea      	b.n	800771a <quorem+0xe2>
 8007744:	2000      	movs	r0, #0
 8007746:	e7ee      	b.n	8007726 <quorem+0xee>

08007748 <_dtoa_r>:
 8007748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774c:	69c7      	ldr	r7, [r0, #28]
 800774e:	b099      	sub	sp, #100	@ 0x64
 8007750:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007754:	ec55 4b10 	vmov	r4, r5, d0
 8007758:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800775a:	9109      	str	r1, [sp, #36]	@ 0x24
 800775c:	4683      	mov	fp, r0
 800775e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007760:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007762:	b97f      	cbnz	r7, 8007784 <_dtoa_r+0x3c>
 8007764:	2010      	movs	r0, #16
 8007766:	f000 fdfd 	bl	8008364 <malloc>
 800776a:	4602      	mov	r2, r0
 800776c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007770:	b920      	cbnz	r0, 800777c <_dtoa_r+0x34>
 8007772:	4ba7      	ldr	r3, [pc, #668]	@ (8007a10 <_dtoa_r+0x2c8>)
 8007774:	21ef      	movs	r1, #239	@ 0xef
 8007776:	48a7      	ldr	r0, [pc, #668]	@ (8007a14 <_dtoa_r+0x2cc>)
 8007778:	f7ff ff40 	bl	80075fc <__assert_func>
 800777c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007780:	6007      	str	r7, [r0, #0]
 8007782:	60c7      	str	r7, [r0, #12]
 8007784:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007788:	6819      	ldr	r1, [r3, #0]
 800778a:	b159      	cbz	r1, 80077a4 <_dtoa_r+0x5c>
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	604a      	str	r2, [r1, #4]
 8007790:	2301      	movs	r3, #1
 8007792:	4093      	lsls	r3, r2
 8007794:	608b      	str	r3, [r1, #8]
 8007796:	4658      	mov	r0, fp
 8007798:	f000 feda 	bl	8008550 <_Bfree>
 800779c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	1e2b      	subs	r3, r5, #0
 80077a6:	bfb9      	ittee	lt
 80077a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80077ac:	9303      	strlt	r3, [sp, #12]
 80077ae:	2300      	movge	r3, #0
 80077b0:	6033      	strge	r3, [r6, #0]
 80077b2:	9f03      	ldr	r7, [sp, #12]
 80077b4:	4b98      	ldr	r3, [pc, #608]	@ (8007a18 <_dtoa_r+0x2d0>)
 80077b6:	bfbc      	itt	lt
 80077b8:	2201      	movlt	r2, #1
 80077ba:	6032      	strlt	r2, [r6, #0]
 80077bc:	43bb      	bics	r3, r7
 80077be:	d112      	bne.n	80077e6 <_dtoa_r+0x9e>
 80077c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80077c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80077c6:	6013      	str	r3, [r2, #0]
 80077c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077cc:	4323      	orrs	r3, r4
 80077ce:	f000 854d 	beq.w	800826c <_dtoa_r+0xb24>
 80077d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007a2c <_dtoa_r+0x2e4>
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 854f 	beq.w	800827c <_dtoa_r+0xb34>
 80077de:	f10a 0303 	add.w	r3, sl, #3
 80077e2:	f000 bd49 	b.w	8008278 <_dtoa_r+0xb30>
 80077e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077ea:	2200      	movs	r2, #0
 80077ec:	ec51 0b17 	vmov	r0, r1, d7
 80077f0:	2300      	movs	r3, #0
 80077f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80077f6:	f7f9 f967 	bl	8000ac8 <__aeabi_dcmpeq>
 80077fa:	4680      	mov	r8, r0
 80077fc:	b158      	cbz	r0, 8007816 <_dtoa_r+0xce>
 80077fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007800:	2301      	movs	r3, #1
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007806:	b113      	cbz	r3, 800780e <_dtoa_r+0xc6>
 8007808:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800780a:	4b84      	ldr	r3, [pc, #528]	@ (8007a1c <_dtoa_r+0x2d4>)
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007a30 <_dtoa_r+0x2e8>
 8007812:	f000 bd33 	b.w	800827c <_dtoa_r+0xb34>
 8007816:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800781a:	aa16      	add	r2, sp, #88	@ 0x58
 800781c:	a917      	add	r1, sp, #92	@ 0x5c
 800781e:	4658      	mov	r0, fp
 8007820:	f001 fa3a 	bl	8008c98 <__d2b>
 8007824:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007828:	4681      	mov	r9, r0
 800782a:	2e00      	cmp	r6, #0
 800782c:	d077      	beq.n	800791e <_dtoa_r+0x1d6>
 800782e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007830:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800783c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007840:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007844:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007848:	4619      	mov	r1, r3
 800784a:	2200      	movs	r2, #0
 800784c:	4b74      	ldr	r3, [pc, #464]	@ (8007a20 <_dtoa_r+0x2d8>)
 800784e:	f7f8 fd1b 	bl	8000288 <__aeabi_dsub>
 8007852:	a369      	add	r3, pc, #420	@ (adr r3, 80079f8 <_dtoa_r+0x2b0>)
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f7f8 fece 	bl	80005f8 <__aeabi_dmul>
 800785c:	a368      	add	r3, pc, #416	@ (adr r3, 8007a00 <_dtoa_r+0x2b8>)
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	f7f8 fd13 	bl	800028c <__adddf3>
 8007866:	4604      	mov	r4, r0
 8007868:	4630      	mov	r0, r6
 800786a:	460d      	mov	r5, r1
 800786c:	f7f8 fe5a 	bl	8000524 <__aeabi_i2d>
 8007870:	a365      	add	r3, pc, #404	@ (adr r3, 8007a08 <_dtoa_r+0x2c0>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	f7f8 febf 	bl	80005f8 <__aeabi_dmul>
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	4620      	mov	r0, r4
 8007880:	4629      	mov	r1, r5
 8007882:	f7f8 fd03 	bl	800028c <__adddf3>
 8007886:	4604      	mov	r4, r0
 8007888:	460d      	mov	r5, r1
 800788a:	f7f9 f965 	bl	8000b58 <__aeabi_d2iz>
 800788e:	2200      	movs	r2, #0
 8007890:	4607      	mov	r7, r0
 8007892:	2300      	movs	r3, #0
 8007894:	4620      	mov	r0, r4
 8007896:	4629      	mov	r1, r5
 8007898:	f7f9 f920 	bl	8000adc <__aeabi_dcmplt>
 800789c:	b140      	cbz	r0, 80078b0 <_dtoa_r+0x168>
 800789e:	4638      	mov	r0, r7
 80078a0:	f7f8 fe40 	bl	8000524 <__aeabi_i2d>
 80078a4:	4622      	mov	r2, r4
 80078a6:	462b      	mov	r3, r5
 80078a8:	f7f9 f90e 	bl	8000ac8 <__aeabi_dcmpeq>
 80078ac:	b900      	cbnz	r0, 80078b0 <_dtoa_r+0x168>
 80078ae:	3f01      	subs	r7, #1
 80078b0:	2f16      	cmp	r7, #22
 80078b2:	d851      	bhi.n	8007958 <_dtoa_r+0x210>
 80078b4:	4b5b      	ldr	r3, [pc, #364]	@ (8007a24 <_dtoa_r+0x2dc>)
 80078b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078c2:	f7f9 f90b 	bl	8000adc <__aeabi_dcmplt>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d048      	beq.n	800795c <_dtoa_r+0x214>
 80078ca:	3f01      	subs	r7, #1
 80078cc:	2300      	movs	r3, #0
 80078ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80078d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80078d2:	1b9b      	subs	r3, r3, r6
 80078d4:	1e5a      	subs	r2, r3, #1
 80078d6:	bf44      	itt	mi
 80078d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80078dc:	2300      	movmi	r3, #0
 80078de:	9208      	str	r2, [sp, #32]
 80078e0:	bf54      	ite	pl
 80078e2:	f04f 0800 	movpl.w	r8, #0
 80078e6:	9308      	strmi	r3, [sp, #32]
 80078e8:	2f00      	cmp	r7, #0
 80078ea:	db39      	blt.n	8007960 <_dtoa_r+0x218>
 80078ec:	9b08      	ldr	r3, [sp, #32]
 80078ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80078f0:	443b      	add	r3, r7
 80078f2:	9308      	str	r3, [sp, #32]
 80078f4:	2300      	movs	r3, #0
 80078f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80078f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078fa:	2b09      	cmp	r3, #9
 80078fc:	d864      	bhi.n	80079c8 <_dtoa_r+0x280>
 80078fe:	2b05      	cmp	r3, #5
 8007900:	bfc4      	itt	gt
 8007902:	3b04      	subgt	r3, #4
 8007904:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007908:	f1a3 0302 	sub.w	r3, r3, #2
 800790c:	bfcc      	ite	gt
 800790e:	2400      	movgt	r4, #0
 8007910:	2401      	movle	r4, #1
 8007912:	2b03      	cmp	r3, #3
 8007914:	d863      	bhi.n	80079de <_dtoa_r+0x296>
 8007916:	e8df f003 	tbb	[pc, r3]
 800791a:	372a      	.short	0x372a
 800791c:	5535      	.short	0x5535
 800791e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007922:	441e      	add	r6, r3
 8007924:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007928:	2b20      	cmp	r3, #32
 800792a:	bfc1      	itttt	gt
 800792c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007930:	409f      	lslgt	r7, r3
 8007932:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007936:	fa24 f303 	lsrgt.w	r3, r4, r3
 800793a:	bfd6      	itet	le
 800793c:	f1c3 0320 	rsble	r3, r3, #32
 8007940:	ea47 0003 	orrgt.w	r0, r7, r3
 8007944:	fa04 f003 	lslle.w	r0, r4, r3
 8007948:	f7f8 fddc 	bl	8000504 <__aeabi_ui2d>
 800794c:	2201      	movs	r2, #1
 800794e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007952:	3e01      	subs	r6, #1
 8007954:	9214      	str	r2, [sp, #80]	@ 0x50
 8007956:	e777      	b.n	8007848 <_dtoa_r+0x100>
 8007958:	2301      	movs	r3, #1
 800795a:	e7b8      	b.n	80078ce <_dtoa_r+0x186>
 800795c:	9012      	str	r0, [sp, #72]	@ 0x48
 800795e:	e7b7      	b.n	80078d0 <_dtoa_r+0x188>
 8007960:	427b      	negs	r3, r7
 8007962:	930a      	str	r3, [sp, #40]	@ 0x28
 8007964:	2300      	movs	r3, #0
 8007966:	eba8 0807 	sub.w	r8, r8, r7
 800796a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800796c:	e7c4      	b.n	80078f8 <_dtoa_r+0x1b0>
 800796e:	2300      	movs	r3, #0
 8007970:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007974:	2b00      	cmp	r3, #0
 8007976:	dc35      	bgt.n	80079e4 <_dtoa_r+0x29c>
 8007978:	2301      	movs	r3, #1
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	9307      	str	r3, [sp, #28]
 800797e:	461a      	mov	r2, r3
 8007980:	920e      	str	r2, [sp, #56]	@ 0x38
 8007982:	e00b      	b.n	800799c <_dtoa_r+0x254>
 8007984:	2301      	movs	r3, #1
 8007986:	e7f3      	b.n	8007970 <_dtoa_r+0x228>
 8007988:	2300      	movs	r3, #0
 800798a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800798c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800798e:	18fb      	adds	r3, r7, r3
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	3301      	adds	r3, #1
 8007994:	2b01      	cmp	r3, #1
 8007996:	9307      	str	r3, [sp, #28]
 8007998:	bfb8      	it	lt
 800799a:	2301      	movlt	r3, #1
 800799c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80079a0:	2100      	movs	r1, #0
 80079a2:	2204      	movs	r2, #4
 80079a4:	f102 0514 	add.w	r5, r2, #20
 80079a8:	429d      	cmp	r5, r3
 80079aa:	d91f      	bls.n	80079ec <_dtoa_r+0x2a4>
 80079ac:	6041      	str	r1, [r0, #4]
 80079ae:	4658      	mov	r0, fp
 80079b0:	f000 fd8e 	bl	80084d0 <_Balloc>
 80079b4:	4682      	mov	sl, r0
 80079b6:	2800      	cmp	r0, #0
 80079b8:	d13c      	bne.n	8007a34 <_dtoa_r+0x2ec>
 80079ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007a28 <_dtoa_r+0x2e0>)
 80079bc:	4602      	mov	r2, r0
 80079be:	f240 11af 	movw	r1, #431	@ 0x1af
 80079c2:	e6d8      	b.n	8007776 <_dtoa_r+0x2e>
 80079c4:	2301      	movs	r3, #1
 80079c6:	e7e0      	b.n	800798a <_dtoa_r+0x242>
 80079c8:	2401      	movs	r4, #1
 80079ca:	2300      	movs	r3, #0
 80079cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80079d0:	f04f 33ff 	mov.w	r3, #4294967295
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	9307      	str	r3, [sp, #28]
 80079d8:	2200      	movs	r2, #0
 80079da:	2312      	movs	r3, #18
 80079dc:	e7d0      	b.n	8007980 <_dtoa_r+0x238>
 80079de:	2301      	movs	r3, #1
 80079e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079e2:	e7f5      	b.n	80079d0 <_dtoa_r+0x288>
 80079e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	9307      	str	r3, [sp, #28]
 80079ea:	e7d7      	b.n	800799c <_dtoa_r+0x254>
 80079ec:	3101      	adds	r1, #1
 80079ee:	0052      	lsls	r2, r2, #1
 80079f0:	e7d8      	b.n	80079a4 <_dtoa_r+0x25c>
 80079f2:	bf00      	nop
 80079f4:	f3af 8000 	nop.w
 80079f8:	636f4361 	.word	0x636f4361
 80079fc:	3fd287a7 	.word	0x3fd287a7
 8007a00:	8b60c8b3 	.word	0x8b60c8b3
 8007a04:	3fc68a28 	.word	0x3fc68a28
 8007a08:	509f79fb 	.word	0x509f79fb
 8007a0c:	3fd34413 	.word	0x3fd34413
 8007a10:	08017520 	.word	0x08017520
 8007a14:	08017611 	.word	0x08017611
 8007a18:	7ff00000 	.word	0x7ff00000
 8007a1c:	080175a0 	.word	0x080175a0
 8007a20:	3ff80000 	.word	0x3ff80000
 8007a24:	08017708 	.word	0x08017708
 8007a28:	08017669 	.word	0x08017669
 8007a2c:	0801760d 	.word	0x0801760d
 8007a30:	0801759f 	.word	0x0801759f
 8007a34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a38:	6018      	str	r0, [r3, #0]
 8007a3a:	9b07      	ldr	r3, [sp, #28]
 8007a3c:	2b0e      	cmp	r3, #14
 8007a3e:	f200 80a4 	bhi.w	8007b8a <_dtoa_r+0x442>
 8007a42:	2c00      	cmp	r4, #0
 8007a44:	f000 80a1 	beq.w	8007b8a <_dtoa_r+0x442>
 8007a48:	2f00      	cmp	r7, #0
 8007a4a:	dd33      	ble.n	8007ab4 <_dtoa_r+0x36c>
 8007a4c:	4bad      	ldr	r3, [pc, #692]	@ (8007d04 <_dtoa_r+0x5bc>)
 8007a4e:	f007 020f 	and.w	r2, r7, #15
 8007a52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a56:	ed93 7b00 	vldr	d7, [r3]
 8007a5a:	05f8      	lsls	r0, r7, #23
 8007a5c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007a60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a64:	d516      	bpl.n	8007a94 <_dtoa_r+0x34c>
 8007a66:	4ba8      	ldr	r3, [pc, #672]	@ (8007d08 <_dtoa_r+0x5c0>)
 8007a68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a70:	f7f8 feec 	bl	800084c <__aeabi_ddiv>
 8007a74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a78:	f004 040f 	and.w	r4, r4, #15
 8007a7c:	2603      	movs	r6, #3
 8007a7e:	4da2      	ldr	r5, [pc, #648]	@ (8007d08 <_dtoa_r+0x5c0>)
 8007a80:	b954      	cbnz	r4, 8007a98 <_dtoa_r+0x350>
 8007a82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a8a:	f7f8 fedf 	bl	800084c <__aeabi_ddiv>
 8007a8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a92:	e028      	b.n	8007ae6 <_dtoa_r+0x39e>
 8007a94:	2602      	movs	r6, #2
 8007a96:	e7f2      	b.n	8007a7e <_dtoa_r+0x336>
 8007a98:	07e1      	lsls	r1, r4, #31
 8007a9a:	d508      	bpl.n	8007aae <_dtoa_r+0x366>
 8007a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007aa4:	f7f8 fda8 	bl	80005f8 <__aeabi_dmul>
 8007aa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007aac:	3601      	adds	r6, #1
 8007aae:	1064      	asrs	r4, r4, #1
 8007ab0:	3508      	adds	r5, #8
 8007ab2:	e7e5      	b.n	8007a80 <_dtoa_r+0x338>
 8007ab4:	f000 80d2 	beq.w	8007c5c <_dtoa_r+0x514>
 8007ab8:	427c      	negs	r4, r7
 8007aba:	4b92      	ldr	r3, [pc, #584]	@ (8007d04 <_dtoa_r+0x5bc>)
 8007abc:	4d92      	ldr	r5, [pc, #584]	@ (8007d08 <_dtoa_r+0x5c0>)
 8007abe:	f004 020f 	and.w	r2, r4, #15
 8007ac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ace:	f7f8 fd93 	bl	80005f8 <__aeabi_dmul>
 8007ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad6:	1124      	asrs	r4, r4, #4
 8007ad8:	2300      	movs	r3, #0
 8007ada:	2602      	movs	r6, #2
 8007adc:	2c00      	cmp	r4, #0
 8007ade:	f040 80b2 	bne.w	8007c46 <_dtoa_r+0x4fe>
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1d3      	bne.n	8007a8e <_dtoa_r+0x346>
 8007ae6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ae8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 80b7 	beq.w	8007c60 <_dtoa_r+0x518>
 8007af2:	4b86      	ldr	r3, [pc, #536]	@ (8007d0c <_dtoa_r+0x5c4>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	4620      	mov	r0, r4
 8007af8:	4629      	mov	r1, r5
 8007afa:	f7f8 ffef 	bl	8000adc <__aeabi_dcmplt>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f000 80ae 	beq.w	8007c60 <_dtoa_r+0x518>
 8007b04:	9b07      	ldr	r3, [sp, #28]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 80aa 	beq.w	8007c60 <_dtoa_r+0x518>
 8007b0c:	9b00      	ldr	r3, [sp, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	dd37      	ble.n	8007b82 <_dtoa_r+0x43a>
 8007b12:	1e7b      	subs	r3, r7, #1
 8007b14:	9304      	str	r3, [sp, #16]
 8007b16:	4620      	mov	r0, r4
 8007b18:	4b7d      	ldr	r3, [pc, #500]	@ (8007d10 <_dtoa_r+0x5c8>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f7f8 fd6b 	bl	80005f8 <__aeabi_dmul>
 8007b22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b26:	9c00      	ldr	r4, [sp, #0]
 8007b28:	3601      	adds	r6, #1
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f7f8 fcfa 	bl	8000524 <__aeabi_i2d>
 8007b30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b34:	f7f8 fd60 	bl	80005f8 <__aeabi_dmul>
 8007b38:	4b76      	ldr	r3, [pc, #472]	@ (8007d14 <_dtoa_r+0x5cc>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f7f8 fba6 	bl	800028c <__adddf3>
 8007b40:	4605      	mov	r5, r0
 8007b42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b46:	2c00      	cmp	r4, #0
 8007b48:	f040 808d 	bne.w	8007c66 <_dtoa_r+0x51e>
 8007b4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b50:	4b71      	ldr	r3, [pc, #452]	@ (8007d18 <_dtoa_r+0x5d0>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	f7f8 fb98 	bl	8000288 <__aeabi_dsub>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b60:	462a      	mov	r2, r5
 8007b62:	4633      	mov	r3, r6
 8007b64:	f7f8 ffd8 	bl	8000b18 <__aeabi_dcmpgt>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	f040 828b 	bne.w	8008084 <_dtoa_r+0x93c>
 8007b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b72:	462a      	mov	r2, r5
 8007b74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b78:	f7f8 ffb0 	bl	8000adc <__aeabi_dcmplt>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	f040 8128 	bne.w	8007dd2 <_dtoa_r+0x68a>
 8007b82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007b86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f2c0 815a 	blt.w	8007e46 <_dtoa_r+0x6fe>
 8007b92:	2f0e      	cmp	r7, #14
 8007b94:	f300 8157 	bgt.w	8007e46 <_dtoa_r+0x6fe>
 8007b98:	4b5a      	ldr	r3, [pc, #360]	@ (8007d04 <_dtoa_r+0x5bc>)
 8007b9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b9e:	ed93 7b00 	vldr	d7, [r3]
 8007ba2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	ed8d 7b00 	vstr	d7, [sp]
 8007baa:	da03      	bge.n	8007bb4 <_dtoa_r+0x46c>
 8007bac:	9b07      	ldr	r3, [sp, #28]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f340 8101 	ble.w	8007db6 <_dtoa_r+0x66e>
 8007bb4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007bb8:	4656      	mov	r6, sl
 8007bba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	f7f8 fe43 	bl	800084c <__aeabi_ddiv>
 8007bc6:	f7f8 ffc7 	bl	8000b58 <__aeabi_d2iz>
 8007bca:	4680      	mov	r8, r0
 8007bcc:	f7f8 fcaa 	bl	8000524 <__aeabi_i2d>
 8007bd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bd4:	f7f8 fd10 	bl	80005f8 <__aeabi_dmul>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4620      	mov	r0, r4
 8007bde:	4629      	mov	r1, r5
 8007be0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007be4:	f7f8 fb50 	bl	8000288 <__aeabi_dsub>
 8007be8:	f806 4b01 	strb.w	r4, [r6], #1
 8007bec:	9d07      	ldr	r5, [sp, #28]
 8007bee:	eba6 040a 	sub.w	r4, r6, sl
 8007bf2:	42a5      	cmp	r5, r4
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	f040 8117 	bne.w	8007e2a <_dtoa_r+0x6e2>
 8007bfc:	f7f8 fb46 	bl	800028c <__adddf3>
 8007c00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c04:	4604      	mov	r4, r0
 8007c06:	460d      	mov	r5, r1
 8007c08:	f7f8 ff86 	bl	8000b18 <__aeabi_dcmpgt>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	f040 80f9 	bne.w	8007e04 <_dtoa_r+0x6bc>
 8007c12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c16:	4620      	mov	r0, r4
 8007c18:	4629      	mov	r1, r5
 8007c1a:	f7f8 ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c1e:	b118      	cbz	r0, 8007c28 <_dtoa_r+0x4e0>
 8007c20:	f018 0f01 	tst.w	r8, #1
 8007c24:	f040 80ee 	bne.w	8007e04 <_dtoa_r+0x6bc>
 8007c28:	4649      	mov	r1, r9
 8007c2a:	4658      	mov	r0, fp
 8007c2c:	f000 fc90 	bl	8008550 <_Bfree>
 8007c30:	2300      	movs	r3, #0
 8007c32:	7033      	strb	r3, [r6, #0]
 8007c34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c36:	3701      	adds	r7, #1
 8007c38:	601f      	str	r7, [r3, #0]
 8007c3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 831d 	beq.w	800827c <_dtoa_r+0xb34>
 8007c42:	601e      	str	r6, [r3, #0]
 8007c44:	e31a      	b.n	800827c <_dtoa_r+0xb34>
 8007c46:	07e2      	lsls	r2, r4, #31
 8007c48:	d505      	bpl.n	8007c56 <_dtoa_r+0x50e>
 8007c4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c4e:	f7f8 fcd3 	bl	80005f8 <__aeabi_dmul>
 8007c52:	3601      	adds	r6, #1
 8007c54:	2301      	movs	r3, #1
 8007c56:	1064      	asrs	r4, r4, #1
 8007c58:	3508      	adds	r5, #8
 8007c5a:	e73f      	b.n	8007adc <_dtoa_r+0x394>
 8007c5c:	2602      	movs	r6, #2
 8007c5e:	e742      	b.n	8007ae6 <_dtoa_r+0x39e>
 8007c60:	9c07      	ldr	r4, [sp, #28]
 8007c62:	9704      	str	r7, [sp, #16]
 8007c64:	e761      	b.n	8007b2a <_dtoa_r+0x3e2>
 8007c66:	4b27      	ldr	r3, [pc, #156]	@ (8007d04 <_dtoa_r+0x5bc>)
 8007c68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c72:	4454      	add	r4, sl
 8007c74:	2900      	cmp	r1, #0
 8007c76:	d053      	beq.n	8007d20 <_dtoa_r+0x5d8>
 8007c78:	4928      	ldr	r1, [pc, #160]	@ (8007d1c <_dtoa_r+0x5d4>)
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	f7f8 fde6 	bl	800084c <__aeabi_ddiv>
 8007c80:	4633      	mov	r3, r6
 8007c82:	462a      	mov	r2, r5
 8007c84:	f7f8 fb00 	bl	8000288 <__aeabi_dsub>
 8007c88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c8c:	4656      	mov	r6, sl
 8007c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c92:	f7f8 ff61 	bl	8000b58 <__aeabi_d2iz>
 8007c96:	4605      	mov	r5, r0
 8007c98:	f7f8 fc44 	bl	8000524 <__aeabi_i2d>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ca4:	f7f8 faf0 	bl	8000288 <__aeabi_dsub>
 8007ca8:	3530      	adds	r5, #48	@ 0x30
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cb2:	f806 5b01 	strb.w	r5, [r6], #1
 8007cb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cba:	f7f8 ff0f 	bl	8000adc <__aeabi_dcmplt>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d171      	bne.n	8007da6 <_dtoa_r+0x65e>
 8007cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cc6:	4911      	ldr	r1, [pc, #68]	@ (8007d0c <_dtoa_r+0x5c4>)
 8007cc8:	2000      	movs	r0, #0
 8007cca:	f7f8 fadd 	bl	8000288 <__aeabi_dsub>
 8007cce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cd2:	f7f8 ff03 	bl	8000adc <__aeabi_dcmplt>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	f040 8095 	bne.w	8007e06 <_dtoa_r+0x6be>
 8007cdc:	42a6      	cmp	r6, r4
 8007cde:	f43f af50 	beq.w	8007b82 <_dtoa_r+0x43a>
 8007ce2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8007d10 <_dtoa_r+0x5c8>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f7f8 fc85 	bl	80005f8 <__aeabi_dmul>
 8007cee:	4b08      	ldr	r3, [pc, #32]	@ (8007d10 <_dtoa_r+0x5c8>)
 8007cf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cfa:	f7f8 fc7d 	bl	80005f8 <__aeabi_dmul>
 8007cfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d02:	e7c4      	b.n	8007c8e <_dtoa_r+0x546>
 8007d04:	08017708 	.word	0x08017708
 8007d08:	080176e0 	.word	0x080176e0
 8007d0c:	3ff00000 	.word	0x3ff00000
 8007d10:	40240000 	.word	0x40240000
 8007d14:	401c0000 	.word	0x401c0000
 8007d18:	40140000 	.word	0x40140000
 8007d1c:	3fe00000 	.word	0x3fe00000
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	f7f8 fc68 	bl	80005f8 <__aeabi_dmul>
 8007d28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d2c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007d2e:	4656      	mov	r6, sl
 8007d30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d34:	f7f8 ff10 	bl	8000b58 <__aeabi_d2iz>
 8007d38:	4605      	mov	r5, r0
 8007d3a:	f7f8 fbf3 	bl	8000524 <__aeabi_i2d>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d46:	f7f8 fa9f 	bl	8000288 <__aeabi_dsub>
 8007d4a:	3530      	adds	r5, #48	@ 0x30
 8007d4c:	f806 5b01 	strb.w	r5, [r6], #1
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	42a6      	cmp	r6, r4
 8007d56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d5a:	f04f 0200 	mov.w	r2, #0
 8007d5e:	d124      	bne.n	8007daa <_dtoa_r+0x662>
 8007d60:	4bac      	ldr	r3, [pc, #688]	@ (8008014 <_dtoa_r+0x8cc>)
 8007d62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d66:	f7f8 fa91 	bl	800028c <__adddf3>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d72:	f7f8 fed1 	bl	8000b18 <__aeabi_dcmpgt>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d145      	bne.n	8007e06 <_dtoa_r+0x6be>
 8007d7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d7e:	49a5      	ldr	r1, [pc, #660]	@ (8008014 <_dtoa_r+0x8cc>)
 8007d80:	2000      	movs	r0, #0
 8007d82:	f7f8 fa81 	bl	8000288 <__aeabi_dsub>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d8e:	f7f8 fea5 	bl	8000adc <__aeabi_dcmplt>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	f43f aef5 	beq.w	8007b82 <_dtoa_r+0x43a>
 8007d98:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007d9a:	1e73      	subs	r3, r6, #1
 8007d9c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007da2:	2b30      	cmp	r3, #48	@ 0x30
 8007da4:	d0f8      	beq.n	8007d98 <_dtoa_r+0x650>
 8007da6:	9f04      	ldr	r7, [sp, #16]
 8007da8:	e73e      	b.n	8007c28 <_dtoa_r+0x4e0>
 8007daa:	4b9b      	ldr	r3, [pc, #620]	@ (8008018 <_dtoa_r+0x8d0>)
 8007dac:	f7f8 fc24 	bl	80005f8 <__aeabi_dmul>
 8007db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db4:	e7bc      	b.n	8007d30 <_dtoa_r+0x5e8>
 8007db6:	d10c      	bne.n	8007dd2 <_dtoa_r+0x68a>
 8007db8:	4b98      	ldr	r3, [pc, #608]	@ (800801c <_dtoa_r+0x8d4>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dc0:	f7f8 fc1a 	bl	80005f8 <__aeabi_dmul>
 8007dc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dc8:	f7f8 fe9c 	bl	8000b04 <__aeabi_dcmpge>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	f000 8157 	beq.w	8008080 <_dtoa_r+0x938>
 8007dd2:	2400      	movs	r4, #0
 8007dd4:	4625      	mov	r5, r4
 8007dd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dd8:	43db      	mvns	r3, r3
 8007dda:	9304      	str	r3, [sp, #16]
 8007ddc:	4656      	mov	r6, sl
 8007dde:	2700      	movs	r7, #0
 8007de0:	4621      	mov	r1, r4
 8007de2:	4658      	mov	r0, fp
 8007de4:	f000 fbb4 	bl	8008550 <_Bfree>
 8007de8:	2d00      	cmp	r5, #0
 8007dea:	d0dc      	beq.n	8007da6 <_dtoa_r+0x65e>
 8007dec:	b12f      	cbz	r7, 8007dfa <_dtoa_r+0x6b2>
 8007dee:	42af      	cmp	r7, r5
 8007df0:	d003      	beq.n	8007dfa <_dtoa_r+0x6b2>
 8007df2:	4639      	mov	r1, r7
 8007df4:	4658      	mov	r0, fp
 8007df6:	f000 fbab 	bl	8008550 <_Bfree>
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	4658      	mov	r0, fp
 8007dfe:	f000 fba7 	bl	8008550 <_Bfree>
 8007e02:	e7d0      	b.n	8007da6 <_dtoa_r+0x65e>
 8007e04:	9704      	str	r7, [sp, #16]
 8007e06:	4633      	mov	r3, r6
 8007e08:	461e      	mov	r6, r3
 8007e0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e0e:	2a39      	cmp	r2, #57	@ 0x39
 8007e10:	d107      	bne.n	8007e22 <_dtoa_r+0x6da>
 8007e12:	459a      	cmp	sl, r3
 8007e14:	d1f8      	bne.n	8007e08 <_dtoa_r+0x6c0>
 8007e16:	9a04      	ldr	r2, [sp, #16]
 8007e18:	3201      	adds	r2, #1
 8007e1a:	9204      	str	r2, [sp, #16]
 8007e1c:	2230      	movs	r2, #48	@ 0x30
 8007e1e:	f88a 2000 	strb.w	r2, [sl]
 8007e22:	781a      	ldrb	r2, [r3, #0]
 8007e24:	3201      	adds	r2, #1
 8007e26:	701a      	strb	r2, [r3, #0]
 8007e28:	e7bd      	b.n	8007da6 <_dtoa_r+0x65e>
 8007e2a:	4b7b      	ldr	r3, [pc, #492]	@ (8008018 <_dtoa_r+0x8d0>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f7f8 fbe3 	bl	80005f8 <__aeabi_dmul>
 8007e32:	2200      	movs	r2, #0
 8007e34:	2300      	movs	r3, #0
 8007e36:	4604      	mov	r4, r0
 8007e38:	460d      	mov	r5, r1
 8007e3a:	f7f8 fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	f43f aebb 	beq.w	8007bba <_dtoa_r+0x472>
 8007e44:	e6f0      	b.n	8007c28 <_dtoa_r+0x4e0>
 8007e46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e48:	2a00      	cmp	r2, #0
 8007e4a:	f000 80db 	beq.w	8008004 <_dtoa_r+0x8bc>
 8007e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e50:	2a01      	cmp	r2, #1
 8007e52:	f300 80bf 	bgt.w	8007fd4 <_dtoa_r+0x88c>
 8007e56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007e58:	2a00      	cmp	r2, #0
 8007e5a:	f000 80b7 	beq.w	8007fcc <_dtoa_r+0x884>
 8007e5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e64:	4646      	mov	r6, r8
 8007e66:	9a08      	ldr	r2, [sp, #32]
 8007e68:	2101      	movs	r1, #1
 8007e6a:	441a      	add	r2, r3
 8007e6c:	4658      	mov	r0, fp
 8007e6e:	4498      	add	r8, r3
 8007e70:	9208      	str	r2, [sp, #32]
 8007e72:	f000 fc6b 	bl	800874c <__i2b>
 8007e76:	4605      	mov	r5, r0
 8007e78:	b15e      	cbz	r6, 8007e92 <_dtoa_r+0x74a>
 8007e7a:	9b08      	ldr	r3, [sp, #32]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dd08      	ble.n	8007e92 <_dtoa_r+0x74a>
 8007e80:	42b3      	cmp	r3, r6
 8007e82:	9a08      	ldr	r2, [sp, #32]
 8007e84:	bfa8      	it	ge
 8007e86:	4633      	movge	r3, r6
 8007e88:	eba8 0803 	sub.w	r8, r8, r3
 8007e8c:	1af6      	subs	r6, r6, r3
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	9308      	str	r3, [sp, #32]
 8007e92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e94:	b1f3      	cbz	r3, 8007ed4 <_dtoa_r+0x78c>
 8007e96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 80b7 	beq.w	800800c <_dtoa_r+0x8c4>
 8007e9e:	b18c      	cbz	r4, 8007ec4 <_dtoa_r+0x77c>
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	4622      	mov	r2, r4
 8007ea4:	4658      	mov	r0, fp
 8007ea6:	f000 fd11 	bl	80088cc <__pow5mult>
 8007eaa:	464a      	mov	r2, r9
 8007eac:	4601      	mov	r1, r0
 8007eae:	4605      	mov	r5, r0
 8007eb0:	4658      	mov	r0, fp
 8007eb2:	f000 fc61 	bl	8008778 <__multiply>
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	9004      	str	r0, [sp, #16]
 8007eba:	4658      	mov	r0, fp
 8007ebc:	f000 fb48 	bl	8008550 <_Bfree>
 8007ec0:	9b04      	ldr	r3, [sp, #16]
 8007ec2:	4699      	mov	r9, r3
 8007ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ec6:	1b1a      	subs	r2, r3, r4
 8007ec8:	d004      	beq.n	8007ed4 <_dtoa_r+0x78c>
 8007eca:	4649      	mov	r1, r9
 8007ecc:	4658      	mov	r0, fp
 8007ece:	f000 fcfd 	bl	80088cc <__pow5mult>
 8007ed2:	4681      	mov	r9, r0
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	4658      	mov	r0, fp
 8007ed8:	f000 fc38 	bl	800874c <__i2b>
 8007edc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ede:	4604      	mov	r4, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 81cf 	beq.w	8008284 <_dtoa_r+0xb3c>
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	4601      	mov	r1, r0
 8007eea:	4658      	mov	r0, fp
 8007eec:	f000 fcee 	bl	80088cc <__pow5mult>
 8007ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	f300 8095 	bgt.w	8008024 <_dtoa_r+0x8dc>
 8007efa:	9b02      	ldr	r3, [sp, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f040 8087 	bne.w	8008010 <_dtoa_r+0x8c8>
 8007f02:	9b03      	ldr	r3, [sp, #12]
 8007f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f040 8089 	bne.w	8008020 <_dtoa_r+0x8d8>
 8007f0e:	9b03      	ldr	r3, [sp, #12]
 8007f10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f14:	0d1b      	lsrs	r3, r3, #20
 8007f16:	051b      	lsls	r3, r3, #20
 8007f18:	b12b      	cbz	r3, 8007f26 <_dtoa_r+0x7de>
 8007f1a:	9b08      	ldr	r3, [sp, #32]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	9308      	str	r3, [sp, #32]
 8007f20:	f108 0801 	add.w	r8, r8, #1
 8007f24:	2301      	movs	r3, #1
 8007f26:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 81b0 	beq.w	8008290 <_dtoa_r+0xb48>
 8007f30:	6923      	ldr	r3, [r4, #16]
 8007f32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f36:	6918      	ldr	r0, [r3, #16]
 8007f38:	f000 fbbc 	bl	80086b4 <__hi0bits>
 8007f3c:	f1c0 0020 	rsb	r0, r0, #32
 8007f40:	9b08      	ldr	r3, [sp, #32]
 8007f42:	4418      	add	r0, r3
 8007f44:	f010 001f 	ands.w	r0, r0, #31
 8007f48:	d077      	beq.n	800803a <_dtoa_r+0x8f2>
 8007f4a:	f1c0 0320 	rsb	r3, r0, #32
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	dd6b      	ble.n	800802a <_dtoa_r+0x8e2>
 8007f52:	9b08      	ldr	r3, [sp, #32]
 8007f54:	f1c0 001c 	rsb	r0, r0, #28
 8007f58:	4403      	add	r3, r0
 8007f5a:	4480      	add	r8, r0
 8007f5c:	4406      	add	r6, r0
 8007f5e:	9308      	str	r3, [sp, #32]
 8007f60:	f1b8 0f00 	cmp.w	r8, #0
 8007f64:	dd05      	ble.n	8007f72 <_dtoa_r+0x82a>
 8007f66:	4649      	mov	r1, r9
 8007f68:	4642      	mov	r2, r8
 8007f6a:	4658      	mov	r0, fp
 8007f6c:	f000 fd08 	bl	8008980 <__lshift>
 8007f70:	4681      	mov	r9, r0
 8007f72:	9b08      	ldr	r3, [sp, #32]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dd05      	ble.n	8007f84 <_dtoa_r+0x83c>
 8007f78:	4621      	mov	r1, r4
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	4658      	mov	r0, fp
 8007f7e:	f000 fcff 	bl	8008980 <__lshift>
 8007f82:	4604      	mov	r4, r0
 8007f84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d059      	beq.n	800803e <_dtoa_r+0x8f6>
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	4648      	mov	r0, r9
 8007f8e:	f000 fd63 	bl	8008a58 <__mcmp>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	da53      	bge.n	800803e <_dtoa_r+0x8f6>
 8007f96:	1e7b      	subs	r3, r7, #1
 8007f98:	9304      	str	r3, [sp, #16]
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	220a      	movs	r2, #10
 8007fa0:	4658      	mov	r0, fp
 8007fa2:	f000 faf7 	bl	8008594 <__multadd>
 8007fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fa8:	4681      	mov	r9, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 8172 	beq.w	8008294 <_dtoa_r+0xb4c>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	220a      	movs	r2, #10
 8007fb6:	4658      	mov	r0, fp
 8007fb8:	f000 faec 	bl	8008594 <__multadd>
 8007fbc:	9b00      	ldr	r3, [sp, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	4605      	mov	r5, r0
 8007fc2:	dc67      	bgt.n	8008094 <_dtoa_r+0x94c>
 8007fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	dc41      	bgt.n	800804e <_dtoa_r+0x906>
 8007fca:	e063      	b.n	8008094 <_dtoa_r+0x94c>
 8007fcc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007fce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007fd2:	e746      	b.n	8007e62 <_dtoa_r+0x71a>
 8007fd4:	9b07      	ldr	r3, [sp, #28]
 8007fd6:	1e5c      	subs	r4, r3, #1
 8007fd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fda:	42a3      	cmp	r3, r4
 8007fdc:	bfbf      	itttt	lt
 8007fde:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007fe0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007fe2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007fe4:	1ae3      	sublt	r3, r4, r3
 8007fe6:	bfb4      	ite	lt
 8007fe8:	18d2      	addlt	r2, r2, r3
 8007fea:	1b1c      	subge	r4, r3, r4
 8007fec:	9b07      	ldr	r3, [sp, #28]
 8007fee:	bfbc      	itt	lt
 8007ff0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007ff2:	2400      	movlt	r4, #0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	bfb5      	itete	lt
 8007ff8:	eba8 0603 	sublt.w	r6, r8, r3
 8007ffc:	9b07      	ldrge	r3, [sp, #28]
 8007ffe:	2300      	movlt	r3, #0
 8008000:	4646      	movge	r6, r8
 8008002:	e730      	b.n	8007e66 <_dtoa_r+0x71e>
 8008004:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008006:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008008:	4646      	mov	r6, r8
 800800a:	e735      	b.n	8007e78 <_dtoa_r+0x730>
 800800c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800800e:	e75c      	b.n	8007eca <_dtoa_r+0x782>
 8008010:	2300      	movs	r3, #0
 8008012:	e788      	b.n	8007f26 <_dtoa_r+0x7de>
 8008014:	3fe00000 	.word	0x3fe00000
 8008018:	40240000 	.word	0x40240000
 800801c:	40140000 	.word	0x40140000
 8008020:	9b02      	ldr	r3, [sp, #8]
 8008022:	e780      	b.n	8007f26 <_dtoa_r+0x7de>
 8008024:	2300      	movs	r3, #0
 8008026:	930a      	str	r3, [sp, #40]	@ 0x28
 8008028:	e782      	b.n	8007f30 <_dtoa_r+0x7e8>
 800802a:	d099      	beq.n	8007f60 <_dtoa_r+0x818>
 800802c:	9a08      	ldr	r2, [sp, #32]
 800802e:	331c      	adds	r3, #28
 8008030:	441a      	add	r2, r3
 8008032:	4498      	add	r8, r3
 8008034:	441e      	add	r6, r3
 8008036:	9208      	str	r2, [sp, #32]
 8008038:	e792      	b.n	8007f60 <_dtoa_r+0x818>
 800803a:	4603      	mov	r3, r0
 800803c:	e7f6      	b.n	800802c <_dtoa_r+0x8e4>
 800803e:	9b07      	ldr	r3, [sp, #28]
 8008040:	9704      	str	r7, [sp, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	dc20      	bgt.n	8008088 <_dtoa_r+0x940>
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800804a:	2b02      	cmp	r3, #2
 800804c:	dd1e      	ble.n	800808c <_dtoa_r+0x944>
 800804e:	9b00      	ldr	r3, [sp, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	f47f aec0 	bne.w	8007dd6 <_dtoa_r+0x68e>
 8008056:	4621      	mov	r1, r4
 8008058:	2205      	movs	r2, #5
 800805a:	4658      	mov	r0, fp
 800805c:	f000 fa9a 	bl	8008594 <__multadd>
 8008060:	4601      	mov	r1, r0
 8008062:	4604      	mov	r4, r0
 8008064:	4648      	mov	r0, r9
 8008066:	f000 fcf7 	bl	8008a58 <__mcmp>
 800806a:	2800      	cmp	r0, #0
 800806c:	f77f aeb3 	ble.w	8007dd6 <_dtoa_r+0x68e>
 8008070:	4656      	mov	r6, sl
 8008072:	2331      	movs	r3, #49	@ 0x31
 8008074:	f806 3b01 	strb.w	r3, [r6], #1
 8008078:	9b04      	ldr	r3, [sp, #16]
 800807a:	3301      	adds	r3, #1
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	e6ae      	b.n	8007dde <_dtoa_r+0x696>
 8008080:	9c07      	ldr	r4, [sp, #28]
 8008082:	9704      	str	r7, [sp, #16]
 8008084:	4625      	mov	r5, r4
 8008086:	e7f3      	b.n	8008070 <_dtoa_r+0x928>
 8008088:	9b07      	ldr	r3, [sp, #28]
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800808e:	2b00      	cmp	r3, #0
 8008090:	f000 8104 	beq.w	800829c <_dtoa_r+0xb54>
 8008094:	2e00      	cmp	r6, #0
 8008096:	dd05      	ble.n	80080a4 <_dtoa_r+0x95c>
 8008098:	4629      	mov	r1, r5
 800809a:	4632      	mov	r2, r6
 800809c:	4658      	mov	r0, fp
 800809e:	f000 fc6f 	bl	8008980 <__lshift>
 80080a2:	4605      	mov	r5, r0
 80080a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d05a      	beq.n	8008160 <_dtoa_r+0xa18>
 80080aa:	6869      	ldr	r1, [r5, #4]
 80080ac:	4658      	mov	r0, fp
 80080ae:	f000 fa0f 	bl	80084d0 <_Balloc>
 80080b2:	4606      	mov	r6, r0
 80080b4:	b928      	cbnz	r0, 80080c2 <_dtoa_r+0x97a>
 80080b6:	4b84      	ldr	r3, [pc, #528]	@ (80082c8 <_dtoa_r+0xb80>)
 80080b8:	4602      	mov	r2, r0
 80080ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080be:	f7ff bb5a 	b.w	8007776 <_dtoa_r+0x2e>
 80080c2:	692a      	ldr	r2, [r5, #16]
 80080c4:	3202      	adds	r2, #2
 80080c6:	0092      	lsls	r2, r2, #2
 80080c8:	f105 010c 	add.w	r1, r5, #12
 80080cc:	300c      	adds	r0, #12
 80080ce:	f002 f94d 	bl	800a36c <memcpy>
 80080d2:	2201      	movs	r2, #1
 80080d4:	4631      	mov	r1, r6
 80080d6:	4658      	mov	r0, fp
 80080d8:	f000 fc52 	bl	8008980 <__lshift>
 80080dc:	f10a 0301 	add.w	r3, sl, #1
 80080e0:	9307      	str	r3, [sp, #28]
 80080e2:	9b00      	ldr	r3, [sp, #0]
 80080e4:	4453      	add	r3, sl
 80080e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080e8:	9b02      	ldr	r3, [sp, #8]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	462f      	mov	r7, r5
 80080f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80080f2:	4605      	mov	r5, r0
 80080f4:	9b07      	ldr	r3, [sp, #28]
 80080f6:	4621      	mov	r1, r4
 80080f8:	3b01      	subs	r3, #1
 80080fa:	4648      	mov	r0, r9
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	f7ff fa9b 	bl	8007638 <quorem>
 8008102:	4639      	mov	r1, r7
 8008104:	9002      	str	r0, [sp, #8]
 8008106:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800810a:	4648      	mov	r0, r9
 800810c:	f000 fca4 	bl	8008a58 <__mcmp>
 8008110:	462a      	mov	r2, r5
 8008112:	9008      	str	r0, [sp, #32]
 8008114:	4621      	mov	r1, r4
 8008116:	4658      	mov	r0, fp
 8008118:	f000 fcba 	bl	8008a90 <__mdiff>
 800811c:	68c2      	ldr	r2, [r0, #12]
 800811e:	4606      	mov	r6, r0
 8008120:	bb02      	cbnz	r2, 8008164 <_dtoa_r+0xa1c>
 8008122:	4601      	mov	r1, r0
 8008124:	4648      	mov	r0, r9
 8008126:	f000 fc97 	bl	8008a58 <__mcmp>
 800812a:	4602      	mov	r2, r0
 800812c:	4631      	mov	r1, r6
 800812e:	4658      	mov	r0, fp
 8008130:	920e      	str	r2, [sp, #56]	@ 0x38
 8008132:	f000 fa0d 	bl	8008550 <_Bfree>
 8008136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008138:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800813a:	9e07      	ldr	r6, [sp, #28]
 800813c:	ea43 0102 	orr.w	r1, r3, r2
 8008140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008142:	4319      	orrs	r1, r3
 8008144:	d110      	bne.n	8008168 <_dtoa_r+0xa20>
 8008146:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800814a:	d029      	beq.n	80081a0 <_dtoa_r+0xa58>
 800814c:	9b08      	ldr	r3, [sp, #32]
 800814e:	2b00      	cmp	r3, #0
 8008150:	dd02      	ble.n	8008158 <_dtoa_r+0xa10>
 8008152:	9b02      	ldr	r3, [sp, #8]
 8008154:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008158:	9b00      	ldr	r3, [sp, #0]
 800815a:	f883 8000 	strb.w	r8, [r3]
 800815e:	e63f      	b.n	8007de0 <_dtoa_r+0x698>
 8008160:	4628      	mov	r0, r5
 8008162:	e7bb      	b.n	80080dc <_dtoa_r+0x994>
 8008164:	2201      	movs	r2, #1
 8008166:	e7e1      	b.n	800812c <_dtoa_r+0x9e4>
 8008168:	9b08      	ldr	r3, [sp, #32]
 800816a:	2b00      	cmp	r3, #0
 800816c:	db04      	blt.n	8008178 <_dtoa_r+0xa30>
 800816e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008170:	430b      	orrs	r3, r1
 8008172:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008174:	430b      	orrs	r3, r1
 8008176:	d120      	bne.n	80081ba <_dtoa_r+0xa72>
 8008178:	2a00      	cmp	r2, #0
 800817a:	dded      	ble.n	8008158 <_dtoa_r+0xa10>
 800817c:	4649      	mov	r1, r9
 800817e:	2201      	movs	r2, #1
 8008180:	4658      	mov	r0, fp
 8008182:	f000 fbfd 	bl	8008980 <__lshift>
 8008186:	4621      	mov	r1, r4
 8008188:	4681      	mov	r9, r0
 800818a:	f000 fc65 	bl	8008a58 <__mcmp>
 800818e:	2800      	cmp	r0, #0
 8008190:	dc03      	bgt.n	800819a <_dtoa_r+0xa52>
 8008192:	d1e1      	bne.n	8008158 <_dtoa_r+0xa10>
 8008194:	f018 0f01 	tst.w	r8, #1
 8008198:	d0de      	beq.n	8008158 <_dtoa_r+0xa10>
 800819a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800819e:	d1d8      	bne.n	8008152 <_dtoa_r+0xa0a>
 80081a0:	9a00      	ldr	r2, [sp, #0]
 80081a2:	2339      	movs	r3, #57	@ 0x39
 80081a4:	7013      	strb	r3, [r2, #0]
 80081a6:	4633      	mov	r3, r6
 80081a8:	461e      	mov	r6, r3
 80081aa:	3b01      	subs	r3, #1
 80081ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081b0:	2a39      	cmp	r2, #57	@ 0x39
 80081b2:	d052      	beq.n	800825a <_dtoa_r+0xb12>
 80081b4:	3201      	adds	r2, #1
 80081b6:	701a      	strb	r2, [r3, #0]
 80081b8:	e612      	b.n	8007de0 <_dtoa_r+0x698>
 80081ba:	2a00      	cmp	r2, #0
 80081bc:	dd07      	ble.n	80081ce <_dtoa_r+0xa86>
 80081be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081c2:	d0ed      	beq.n	80081a0 <_dtoa_r+0xa58>
 80081c4:	9a00      	ldr	r2, [sp, #0]
 80081c6:	f108 0301 	add.w	r3, r8, #1
 80081ca:	7013      	strb	r3, [r2, #0]
 80081cc:	e608      	b.n	8007de0 <_dtoa_r+0x698>
 80081ce:	9b07      	ldr	r3, [sp, #28]
 80081d0:	9a07      	ldr	r2, [sp, #28]
 80081d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80081d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081d8:	4293      	cmp	r3, r2
 80081da:	d028      	beq.n	800822e <_dtoa_r+0xae6>
 80081dc:	4649      	mov	r1, r9
 80081de:	2300      	movs	r3, #0
 80081e0:	220a      	movs	r2, #10
 80081e2:	4658      	mov	r0, fp
 80081e4:	f000 f9d6 	bl	8008594 <__multadd>
 80081e8:	42af      	cmp	r7, r5
 80081ea:	4681      	mov	r9, r0
 80081ec:	f04f 0300 	mov.w	r3, #0
 80081f0:	f04f 020a 	mov.w	r2, #10
 80081f4:	4639      	mov	r1, r7
 80081f6:	4658      	mov	r0, fp
 80081f8:	d107      	bne.n	800820a <_dtoa_r+0xac2>
 80081fa:	f000 f9cb 	bl	8008594 <__multadd>
 80081fe:	4607      	mov	r7, r0
 8008200:	4605      	mov	r5, r0
 8008202:	9b07      	ldr	r3, [sp, #28]
 8008204:	3301      	adds	r3, #1
 8008206:	9307      	str	r3, [sp, #28]
 8008208:	e774      	b.n	80080f4 <_dtoa_r+0x9ac>
 800820a:	f000 f9c3 	bl	8008594 <__multadd>
 800820e:	4629      	mov	r1, r5
 8008210:	4607      	mov	r7, r0
 8008212:	2300      	movs	r3, #0
 8008214:	220a      	movs	r2, #10
 8008216:	4658      	mov	r0, fp
 8008218:	f000 f9bc 	bl	8008594 <__multadd>
 800821c:	4605      	mov	r5, r0
 800821e:	e7f0      	b.n	8008202 <_dtoa_r+0xaba>
 8008220:	9b00      	ldr	r3, [sp, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	bfcc      	ite	gt
 8008226:	461e      	movgt	r6, r3
 8008228:	2601      	movle	r6, #1
 800822a:	4456      	add	r6, sl
 800822c:	2700      	movs	r7, #0
 800822e:	4649      	mov	r1, r9
 8008230:	2201      	movs	r2, #1
 8008232:	4658      	mov	r0, fp
 8008234:	f000 fba4 	bl	8008980 <__lshift>
 8008238:	4621      	mov	r1, r4
 800823a:	4681      	mov	r9, r0
 800823c:	f000 fc0c 	bl	8008a58 <__mcmp>
 8008240:	2800      	cmp	r0, #0
 8008242:	dcb0      	bgt.n	80081a6 <_dtoa_r+0xa5e>
 8008244:	d102      	bne.n	800824c <_dtoa_r+0xb04>
 8008246:	f018 0f01 	tst.w	r8, #1
 800824a:	d1ac      	bne.n	80081a6 <_dtoa_r+0xa5e>
 800824c:	4633      	mov	r3, r6
 800824e:	461e      	mov	r6, r3
 8008250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008254:	2a30      	cmp	r2, #48	@ 0x30
 8008256:	d0fa      	beq.n	800824e <_dtoa_r+0xb06>
 8008258:	e5c2      	b.n	8007de0 <_dtoa_r+0x698>
 800825a:	459a      	cmp	sl, r3
 800825c:	d1a4      	bne.n	80081a8 <_dtoa_r+0xa60>
 800825e:	9b04      	ldr	r3, [sp, #16]
 8008260:	3301      	adds	r3, #1
 8008262:	9304      	str	r3, [sp, #16]
 8008264:	2331      	movs	r3, #49	@ 0x31
 8008266:	f88a 3000 	strb.w	r3, [sl]
 800826a:	e5b9      	b.n	8007de0 <_dtoa_r+0x698>
 800826c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800826e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80082cc <_dtoa_r+0xb84>
 8008272:	b11b      	cbz	r3, 800827c <_dtoa_r+0xb34>
 8008274:	f10a 0308 	add.w	r3, sl, #8
 8008278:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	4650      	mov	r0, sl
 800827e:	b019      	add	sp, #100	@ 0x64
 8008280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008286:	2b01      	cmp	r3, #1
 8008288:	f77f ae37 	ble.w	8007efa <_dtoa_r+0x7b2>
 800828c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800828e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008290:	2001      	movs	r0, #1
 8008292:	e655      	b.n	8007f40 <_dtoa_r+0x7f8>
 8008294:	9b00      	ldr	r3, [sp, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	f77f aed6 	ble.w	8008048 <_dtoa_r+0x900>
 800829c:	4656      	mov	r6, sl
 800829e:	4621      	mov	r1, r4
 80082a0:	4648      	mov	r0, r9
 80082a2:	f7ff f9c9 	bl	8007638 <quorem>
 80082a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80082aa:	f806 8b01 	strb.w	r8, [r6], #1
 80082ae:	9b00      	ldr	r3, [sp, #0]
 80082b0:	eba6 020a 	sub.w	r2, r6, sl
 80082b4:	4293      	cmp	r3, r2
 80082b6:	ddb3      	ble.n	8008220 <_dtoa_r+0xad8>
 80082b8:	4649      	mov	r1, r9
 80082ba:	2300      	movs	r3, #0
 80082bc:	220a      	movs	r2, #10
 80082be:	4658      	mov	r0, fp
 80082c0:	f000 f968 	bl	8008594 <__multadd>
 80082c4:	4681      	mov	r9, r0
 80082c6:	e7ea      	b.n	800829e <_dtoa_r+0xb56>
 80082c8:	08017669 	.word	0x08017669
 80082cc:	08017604 	.word	0x08017604

080082d0 <_free_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4605      	mov	r5, r0
 80082d4:	2900      	cmp	r1, #0
 80082d6:	d041      	beq.n	800835c <_free_r+0x8c>
 80082d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082dc:	1f0c      	subs	r4, r1, #4
 80082de:	2b00      	cmp	r3, #0
 80082e0:	bfb8      	it	lt
 80082e2:	18e4      	addlt	r4, r4, r3
 80082e4:	f000 f8e8 	bl	80084b8 <__malloc_lock>
 80082e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008360 <_free_r+0x90>)
 80082ea:	6813      	ldr	r3, [r2, #0]
 80082ec:	b933      	cbnz	r3, 80082fc <_free_r+0x2c>
 80082ee:	6063      	str	r3, [r4, #4]
 80082f0:	6014      	str	r4, [r2, #0]
 80082f2:	4628      	mov	r0, r5
 80082f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082f8:	f000 b8e4 	b.w	80084c4 <__malloc_unlock>
 80082fc:	42a3      	cmp	r3, r4
 80082fe:	d908      	bls.n	8008312 <_free_r+0x42>
 8008300:	6820      	ldr	r0, [r4, #0]
 8008302:	1821      	adds	r1, r4, r0
 8008304:	428b      	cmp	r3, r1
 8008306:	bf01      	itttt	eq
 8008308:	6819      	ldreq	r1, [r3, #0]
 800830a:	685b      	ldreq	r3, [r3, #4]
 800830c:	1809      	addeq	r1, r1, r0
 800830e:	6021      	streq	r1, [r4, #0]
 8008310:	e7ed      	b.n	80082ee <_free_r+0x1e>
 8008312:	461a      	mov	r2, r3
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	b10b      	cbz	r3, 800831c <_free_r+0x4c>
 8008318:	42a3      	cmp	r3, r4
 800831a:	d9fa      	bls.n	8008312 <_free_r+0x42>
 800831c:	6811      	ldr	r1, [r2, #0]
 800831e:	1850      	adds	r0, r2, r1
 8008320:	42a0      	cmp	r0, r4
 8008322:	d10b      	bne.n	800833c <_free_r+0x6c>
 8008324:	6820      	ldr	r0, [r4, #0]
 8008326:	4401      	add	r1, r0
 8008328:	1850      	adds	r0, r2, r1
 800832a:	4283      	cmp	r3, r0
 800832c:	6011      	str	r1, [r2, #0]
 800832e:	d1e0      	bne.n	80082f2 <_free_r+0x22>
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	6053      	str	r3, [r2, #4]
 8008336:	4408      	add	r0, r1
 8008338:	6010      	str	r0, [r2, #0]
 800833a:	e7da      	b.n	80082f2 <_free_r+0x22>
 800833c:	d902      	bls.n	8008344 <_free_r+0x74>
 800833e:	230c      	movs	r3, #12
 8008340:	602b      	str	r3, [r5, #0]
 8008342:	e7d6      	b.n	80082f2 <_free_r+0x22>
 8008344:	6820      	ldr	r0, [r4, #0]
 8008346:	1821      	adds	r1, r4, r0
 8008348:	428b      	cmp	r3, r1
 800834a:	bf04      	itt	eq
 800834c:	6819      	ldreq	r1, [r3, #0]
 800834e:	685b      	ldreq	r3, [r3, #4]
 8008350:	6063      	str	r3, [r4, #4]
 8008352:	bf04      	itt	eq
 8008354:	1809      	addeq	r1, r1, r0
 8008356:	6021      	streq	r1, [r4, #0]
 8008358:	6054      	str	r4, [r2, #4]
 800835a:	e7ca      	b.n	80082f2 <_free_r+0x22>
 800835c:	bd38      	pop	{r3, r4, r5, pc}
 800835e:	bf00      	nop
 8008360:	20007cb8 	.word	0x20007cb8

08008364 <malloc>:
 8008364:	4b02      	ldr	r3, [pc, #8]	@ (8008370 <malloc+0xc>)
 8008366:	4601      	mov	r1, r0
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	f000 b825 	b.w	80083b8 <_malloc_r>
 800836e:	bf00      	nop
 8008370:	2000003c 	.word	0x2000003c

08008374 <sbrk_aligned>:
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	4e0f      	ldr	r6, [pc, #60]	@ (80083b4 <sbrk_aligned+0x40>)
 8008378:	460c      	mov	r4, r1
 800837a:	6831      	ldr	r1, [r6, #0]
 800837c:	4605      	mov	r5, r0
 800837e:	b911      	cbnz	r1, 8008386 <sbrk_aligned+0x12>
 8008380:	f001 ffe4 	bl	800a34c <_sbrk_r>
 8008384:	6030      	str	r0, [r6, #0]
 8008386:	4621      	mov	r1, r4
 8008388:	4628      	mov	r0, r5
 800838a:	f001 ffdf 	bl	800a34c <_sbrk_r>
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	d103      	bne.n	800839a <sbrk_aligned+0x26>
 8008392:	f04f 34ff 	mov.w	r4, #4294967295
 8008396:	4620      	mov	r0, r4
 8008398:	bd70      	pop	{r4, r5, r6, pc}
 800839a:	1cc4      	adds	r4, r0, #3
 800839c:	f024 0403 	bic.w	r4, r4, #3
 80083a0:	42a0      	cmp	r0, r4
 80083a2:	d0f8      	beq.n	8008396 <sbrk_aligned+0x22>
 80083a4:	1a21      	subs	r1, r4, r0
 80083a6:	4628      	mov	r0, r5
 80083a8:	f001 ffd0 	bl	800a34c <_sbrk_r>
 80083ac:	3001      	adds	r0, #1
 80083ae:	d1f2      	bne.n	8008396 <sbrk_aligned+0x22>
 80083b0:	e7ef      	b.n	8008392 <sbrk_aligned+0x1e>
 80083b2:	bf00      	nop
 80083b4:	20007cb4 	.word	0x20007cb4

080083b8 <_malloc_r>:
 80083b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083bc:	1ccd      	adds	r5, r1, #3
 80083be:	f025 0503 	bic.w	r5, r5, #3
 80083c2:	3508      	adds	r5, #8
 80083c4:	2d0c      	cmp	r5, #12
 80083c6:	bf38      	it	cc
 80083c8:	250c      	movcc	r5, #12
 80083ca:	2d00      	cmp	r5, #0
 80083cc:	4606      	mov	r6, r0
 80083ce:	db01      	blt.n	80083d4 <_malloc_r+0x1c>
 80083d0:	42a9      	cmp	r1, r5
 80083d2:	d904      	bls.n	80083de <_malloc_r+0x26>
 80083d4:	230c      	movs	r3, #12
 80083d6:	6033      	str	r3, [r6, #0]
 80083d8:	2000      	movs	r0, #0
 80083da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084b4 <_malloc_r+0xfc>
 80083e2:	f000 f869 	bl	80084b8 <__malloc_lock>
 80083e6:	f8d8 3000 	ldr.w	r3, [r8]
 80083ea:	461c      	mov	r4, r3
 80083ec:	bb44      	cbnz	r4, 8008440 <_malloc_r+0x88>
 80083ee:	4629      	mov	r1, r5
 80083f0:	4630      	mov	r0, r6
 80083f2:	f7ff ffbf 	bl	8008374 <sbrk_aligned>
 80083f6:	1c43      	adds	r3, r0, #1
 80083f8:	4604      	mov	r4, r0
 80083fa:	d158      	bne.n	80084ae <_malloc_r+0xf6>
 80083fc:	f8d8 4000 	ldr.w	r4, [r8]
 8008400:	4627      	mov	r7, r4
 8008402:	2f00      	cmp	r7, #0
 8008404:	d143      	bne.n	800848e <_malloc_r+0xd6>
 8008406:	2c00      	cmp	r4, #0
 8008408:	d04b      	beq.n	80084a2 <_malloc_r+0xea>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	4639      	mov	r1, r7
 800840e:	4630      	mov	r0, r6
 8008410:	eb04 0903 	add.w	r9, r4, r3
 8008414:	f001 ff9a 	bl	800a34c <_sbrk_r>
 8008418:	4581      	cmp	r9, r0
 800841a:	d142      	bne.n	80084a2 <_malloc_r+0xea>
 800841c:	6821      	ldr	r1, [r4, #0]
 800841e:	1a6d      	subs	r5, r5, r1
 8008420:	4629      	mov	r1, r5
 8008422:	4630      	mov	r0, r6
 8008424:	f7ff ffa6 	bl	8008374 <sbrk_aligned>
 8008428:	3001      	adds	r0, #1
 800842a:	d03a      	beq.n	80084a2 <_malloc_r+0xea>
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	442b      	add	r3, r5
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	f8d8 3000 	ldr.w	r3, [r8]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	bb62      	cbnz	r2, 8008494 <_malloc_r+0xdc>
 800843a:	f8c8 7000 	str.w	r7, [r8]
 800843e:	e00f      	b.n	8008460 <_malloc_r+0xa8>
 8008440:	6822      	ldr	r2, [r4, #0]
 8008442:	1b52      	subs	r2, r2, r5
 8008444:	d420      	bmi.n	8008488 <_malloc_r+0xd0>
 8008446:	2a0b      	cmp	r2, #11
 8008448:	d917      	bls.n	800847a <_malloc_r+0xc2>
 800844a:	1961      	adds	r1, r4, r5
 800844c:	42a3      	cmp	r3, r4
 800844e:	6025      	str	r5, [r4, #0]
 8008450:	bf18      	it	ne
 8008452:	6059      	strne	r1, [r3, #4]
 8008454:	6863      	ldr	r3, [r4, #4]
 8008456:	bf08      	it	eq
 8008458:	f8c8 1000 	streq.w	r1, [r8]
 800845c:	5162      	str	r2, [r4, r5]
 800845e:	604b      	str	r3, [r1, #4]
 8008460:	4630      	mov	r0, r6
 8008462:	f000 f82f 	bl	80084c4 <__malloc_unlock>
 8008466:	f104 000b 	add.w	r0, r4, #11
 800846a:	1d23      	adds	r3, r4, #4
 800846c:	f020 0007 	bic.w	r0, r0, #7
 8008470:	1ac2      	subs	r2, r0, r3
 8008472:	bf1c      	itt	ne
 8008474:	1a1b      	subne	r3, r3, r0
 8008476:	50a3      	strne	r3, [r4, r2]
 8008478:	e7af      	b.n	80083da <_malloc_r+0x22>
 800847a:	6862      	ldr	r2, [r4, #4]
 800847c:	42a3      	cmp	r3, r4
 800847e:	bf0c      	ite	eq
 8008480:	f8c8 2000 	streq.w	r2, [r8]
 8008484:	605a      	strne	r2, [r3, #4]
 8008486:	e7eb      	b.n	8008460 <_malloc_r+0xa8>
 8008488:	4623      	mov	r3, r4
 800848a:	6864      	ldr	r4, [r4, #4]
 800848c:	e7ae      	b.n	80083ec <_malloc_r+0x34>
 800848e:	463c      	mov	r4, r7
 8008490:	687f      	ldr	r7, [r7, #4]
 8008492:	e7b6      	b.n	8008402 <_malloc_r+0x4a>
 8008494:	461a      	mov	r2, r3
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	42a3      	cmp	r3, r4
 800849a:	d1fb      	bne.n	8008494 <_malloc_r+0xdc>
 800849c:	2300      	movs	r3, #0
 800849e:	6053      	str	r3, [r2, #4]
 80084a0:	e7de      	b.n	8008460 <_malloc_r+0xa8>
 80084a2:	230c      	movs	r3, #12
 80084a4:	6033      	str	r3, [r6, #0]
 80084a6:	4630      	mov	r0, r6
 80084a8:	f000 f80c 	bl	80084c4 <__malloc_unlock>
 80084ac:	e794      	b.n	80083d8 <_malloc_r+0x20>
 80084ae:	6005      	str	r5, [r0, #0]
 80084b0:	e7d6      	b.n	8008460 <_malloc_r+0xa8>
 80084b2:	bf00      	nop
 80084b4:	20007cb8 	.word	0x20007cb8

080084b8 <__malloc_lock>:
 80084b8:	4801      	ldr	r0, [pc, #4]	@ (80084c0 <__malloc_lock+0x8>)
 80084ba:	f7ff b896 	b.w	80075ea <__retarget_lock_acquire_recursive>
 80084be:	bf00      	nop
 80084c0:	20007cb0 	.word	0x20007cb0

080084c4 <__malloc_unlock>:
 80084c4:	4801      	ldr	r0, [pc, #4]	@ (80084cc <__malloc_unlock+0x8>)
 80084c6:	f7ff b891 	b.w	80075ec <__retarget_lock_release_recursive>
 80084ca:	bf00      	nop
 80084cc:	20007cb0 	.word	0x20007cb0

080084d0 <_Balloc>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	69c6      	ldr	r6, [r0, #28]
 80084d4:	4604      	mov	r4, r0
 80084d6:	460d      	mov	r5, r1
 80084d8:	b976      	cbnz	r6, 80084f8 <_Balloc+0x28>
 80084da:	2010      	movs	r0, #16
 80084dc:	f7ff ff42 	bl	8008364 <malloc>
 80084e0:	4602      	mov	r2, r0
 80084e2:	61e0      	str	r0, [r4, #28]
 80084e4:	b920      	cbnz	r0, 80084f0 <_Balloc+0x20>
 80084e6:	4b18      	ldr	r3, [pc, #96]	@ (8008548 <_Balloc+0x78>)
 80084e8:	4818      	ldr	r0, [pc, #96]	@ (800854c <_Balloc+0x7c>)
 80084ea:	216b      	movs	r1, #107	@ 0x6b
 80084ec:	f7ff f886 	bl	80075fc <__assert_func>
 80084f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084f4:	6006      	str	r6, [r0, #0]
 80084f6:	60c6      	str	r6, [r0, #12]
 80084f8:	69e6      	ldr	r6, [r4, #28]
 80084fa:	68f3      	ldr	r3, [r6, #12]
 80084fc:	b183      	cbz	r3, 8008520 <_Balloc+0x50>
 80084fe:	69e3      	ldr	r3, [r4, #28]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008506:	b9b8      	cbnz	r0, 8008538 <_Balloc+0x68>
 8008508:	2101      	movs	r1, #1
 800850a:	fa01 f605 	lsl.w	r6, r1, r5
 800850e:	1d72      	adds	r2, r6, #5
 8008510:	0092      	lsls	r2, r2, #2
 8008512:	4620      	mov	r0, r4
 8008514:	f001 ff47 	bl	800a3a6 <_calloc_r>
 8008518:	b160      	cbz	r0, 8008534 <_Balloc+0x64>
 800851a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800851e:	e00e      	b.n	800853e <_Balloc+0x6e>
 8008520:	2221      	movs	r2, #33	@ 0x21
 8008522:	2104      	movs	r1, #4
 8008524:	4620      	mov	r0, r4
 8008526:	f001 ff3e 	bl	800a3a6 <_calloc_r>
 800852a:	69e3      	ldr	r3, [r4, #28]
 800852c:	60f0      	str	r0, [r6, #12]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e4      	bne.n	80084fe <_Balloc+0x2e>
 8008534:	2000      	movs	r0, #0
 8008536:	bd70      	pop	{r4, r5, r6, pc}
 8008538:	6802      	ldr	r2, [r0, #0]
 800853a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800853e:	2300      	movs	r3, #0
 8008540:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008544:	e7f7      	b.n	8008536 <_Balloc+0x66>
 8008546:	bf00      	nop
 8008548:	08017520 	.word	0x08017520
 800854c:	0801767a 	.word	0x0801767a

08008550 <_Bfree>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	69c6      	ldr	r6, [r0, #28]
 8008554:	4605      	mov	r5, r0
 8008556:	460c      	mov	r4, r1
 8008558:	b976      	cbnz	r6, 8008578 <_Bfree+0x28>
 800855a:	2010      	movs	r0, #16
 800855c:	f7ff ff02 	bl	8008364 <malloc>
 8008560:	4602      	mov	r2, r0
 8008562:	61e8      	str	r0, [r5, #28]
 8008564:	b920      	cbnz	r0, 8008570 <_Bfree+0x20>
 8008566:	4b09      	ldr	r3, [pc, #36]	@ (800858c <_Bfree+0x3c>)
 8008568:	4809      	ldr	r0, [pc, #36]	@ (8008590 <_Bfree+0x40>)
 800856a:	218f      	movs	r1, #143	@ 0x8f
 800856c:	f7ff f846 	bl	80075fc <__assert_func>
 8008570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008574:	6006      	str	r6, [r0, #0]
 8008576:	60c6      	str	r6, [r0, #12]
 8008578:	b13c      	cbz	r4, 800858a <_Bfree+0x3a>
 800857a:	69eb      	ldr	r3, [r5, #28]
 800857c:	6862      	ldr	r2, [r4, #4]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008584:	6021      	str	r1, [r4, #0]
 8008586:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	08017520 	.word	0x08017520
 8008590:	0801767a 	.word	0x0801767a

08008594 <__multadd>:
 8008594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008598:	690d      	ldr	r5, [r1, #16]
 800859a:	4607      	mov	r7, r0
 800859c:	460c      	mov	r4, r1
 800859e:	461e      	mov	r6, r3
 80085a0:	f101 0c14 	add.w	ip, r1, #20
 80085a4:	2000      	movs	r0, #0
 80085a6:	f8dc 3000 	ldr.w	r3, [ip]
 80085aa:	b299      	uxth	r1, r3
 80085ac:	fb02 6101 	mla	r1, r2, r1, r6
 80085b0:	0c1e      	lsrs	r6, r3, #16
 80085b2:	0c0b      	lsrs	r3, r1, #16
 80085b4:	fb02 3306 	mla	r3, r2, r6, r3
 80085b8:	b289      	uxth	r1, r1
 80085ba:	3001      	adds	r0, #1
 80085bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085c0:	4285      	cmp	r5, r0
 80085c2:	f84c 1b04 	str.w	r1, [ip], #4
 80085c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085ca:	dcec      	bgt.n	80085a6 <__multadd+0x12>
 80085cc:	b30e      	cbz	r6, 8008612 <__multadd+0x7e>
 80085ce:	68a3      	ldr	r3, [r4, #8]
 80085d0:	42ab      	cmp	r3, r5
 80085d2:	dc19      	bgt.n	8008608 <__multadd+0x74>
 80085d4:	6861      	ldr	r1, [r4, #4]
 80085d6:	4638      	mov	r0, r7
 80085d8:	3101      	adds	r1, #1
 80085da:	f7ff ff79 	bl	80084d0 <_Balloc>
 80085de:	4680      	mov	r8, r0
 80085e0:	b928      	cbnz	r0, 80085ee <__multadd+0x5a>
 80085e2:	4602      	mov	r2, r0
 80085e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008618 <__multadd+0x84>)
 80085e6:	480d      	ldr	r0, [pc, #52]	@ (800861c <__multadd+0x88>)
 80085e8:	21ba      	movs	r1, #186	@ 0xba
 80085ea:	f7ff f807 	bl	80075fc <__assert_func>
 80085ee:	6922      	ldr	r2, [r4, #16]
 80085f0:	3202      	adds	r2, #2
 80085f2:	f104 010c 	add.w	r1, r4, #12
 80085f6:	0092      	lsls	r2, r2, #2
 80085f8:	300c      	adds	r0, #12
 80085fa:	f001 feb7 	bl	800a36c <memcpy>
 80085fe:	4621      	mov	r1, r4
 8008600:	4638      	mov	r0, r7
 8008602:	f7ff ffa5 	bl	8008550 <_Bfree>
 8008606:	4644      	mov	r4, r8
 8008608:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800860c:	3501      	adds	r5, #1
 800860e:	615e      	str	r6, [r3, #20]
 8008610:	6125      	str	r5, [r4, #16]
 8008612:	4620      	mov	r0, r4
 8008614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008618:	08017669 	.word	0x08017669
 800861c:	0801767a 	.word	0x0801767a

08008620 <__s2b>:
 8008620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008624:	460c      	mov	r4, r1
 8008626:	4615      	mov	r5, r2
 8008628:	461f      	mov	r7, r3
 800862a:	2209      	movs	r2, #9
 800862c:	3308      	adds	r3, #8
 800862e:	4606      	mov	r6, r0
 8008630:	fb93 f3f2 	sdiv	r3, r3, r2
 8008634:	2100      	movs	r1, #0
 8008636:	2201      	movs	r2, #1
 8008638:	429a      	cmp	r2, r3
 800863a:	db09      	blt.n	8008650 <__s2b+0x30>
 800863c:	4630      	mov	r0, r6
 800863e:	f7ff ff47 	bl	80084d0 <_Balloc>
 8008642:	b940      	cbnz	r0, 8008656 <__s2b+0x36>
 8008644:	4602      	mov	r2, r0
 8008646:	4b19      	ldr	r3, [pc, #100]	@ (80086ac <__s2b+0x8c>)
 8008648:	4819      	ldr	r0, [pc, #100]	@ (80086b0 <__s2b+0x90>)
 800864a:	21d3      	movs	r1, #211	@ 0xd3
 800864c:	f7fe ffd6 	bl	80075fc <__assert_func>
 8008650:	0052      	lsls	r2, r2, #1
 8008652:	3101      	adds	r1, #1
 8008654:	e7f0      	b.n	8008638 <__s2b+0x18>
 8008656:	9b08      	ldr	r3, [sp, #32]
 8008658:	6143      	str	r3, [r0, #20]
 800865a:	2d09      	cmp	r5, #9
 800865c:	f04f 0301 	mov.w	r3, #1
 8008660:	6103      	str	r3, [r0, #16]
 8008662:	dd16      	ble.n	8008692 <__s2b+0x72>
 8008664:	f104 0909 	add.w	r9, r4, #9
 8008668:	46c8      	mov	r8, r9
 800866a:	442c      	add	r4, r5
 800866c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008670:	4601      	mov	r1, r0
 8008672:	3b30      	subs	r3, #48	@ 0x30
 8008674:	220a      	movs	r2, #10
 8008676:	4630      	mov	r0, r6
 8008678:	f7ff ff8c 	bl	8008594 <__multadd>
 800867c:	45a0      	cmp	r8, r4
 800867e:	d1f5      	bne.n	800866c <__s2b+0x4c>
 8008680:	f1a5 0408 	sub.w	r4, r5, #8
 8008684:	444c      	add	r4, r9
 8008686:	1b2d      	subs	r5, r5, r4
 8008688:	1963      	adds	r3, r4, r5
 800868a:	42bb      	cmp	r3, r7
 800868c:	db04      	blt.n	8008698 <__s2b+0x78>
 800868e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008692:	340a      	adds	r4, #10
 8008694:	2509      	movs	r5, #9
 8008696:	e7f6      	b.n	8008686 <__s2b+0x66>
 8008698:	f814 3b01 	ldrb.w	r3, [r4], #1
 800869c:	4601      	mov	r1, r0
 800869e:	3b30      	subs	r3, #48	@ 0x30
 80086a0:	220a      	movs	r2, #10
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7ff ff76 	bl	8008594 <__multadd>
 80086a8:	e7ee      	b.n	8008688 <__s2b+0x68>
 80086aa:	bf00      	nop
 80086ac:	08017669 	.word	0x08017669
 80086b0:	0801767a 	.word	0x0801767a

080086b4 <__hi0bits>:
 80086b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086b8:	4603      	mov	r3, r0
 80086ba:	bf36      	itet	cc
 80086bc:	0403      	lslcc	r3, r0, #16
 80086be:	2000      	movcs	r0, #0
 80086c0:	2010      	movcc	r0, #16
 80086c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086c6:	bf3c      	itt	cc
 80086c8:	021b      	lslcc	r3, r3, #8
 80086ca:	3008      	addcc	r0, #8
 80086cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086d0:	bf3c      	itt	cc
 80086d2:	011b      	lslcc	r3, r3, #4
 80086d4:	3004      	addcc	r0, #4
 80086d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086da:	bf3c      	itt	cc
 80086dc:	009b      	lslcc	r3, r3, #2
 80086de:	3002      	addcc	r0, #2
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	db05      	blt.n	80086f0 <__hi0bits+0x3c>
 80086e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086e8:	f100 0001 	add.w	r0, r0, #1
 80086ec:	bf08      	it	eq
 80086ee:	2020      	moveq	r0, #32
 80086f0:	4770      	bx	lr

080086f2 <__lo0bits>:
 80086f2:	6803      	ldr	r3, [r0, #0]
 80086f4:	4602      	mov	r2, r0
 80086f6:	f013 0007 	ands.w	r0, r3, #7
 80086fa:	d00b      	beq.n	8008714 <__lo0bits+0x22>
 80086fc:	07d9      	lsls	r1, r3, #31
 80086fe:	d421      	bmi.n	8008744 <__lo0bits+0x52>
 8008700:	0798      	lsls	r0, r3, #30
 8008702:	bf49      	itett	mi
 8008704:	085b      	lsrmi	r3, r3, #1
 8008706:	089b      	lsrpl	r3, r3, #2
 8008708:	2001      	movmi	r0, #1
 800870a:	6013      	strmi	r3, [r2, #0]
 800870c:	bf5c      	itt	pl
 800870e:	6013      	strpl	r3, [r2, #0]
 8008710:	2002      	movpl	r0, #2
 8008712:	4770      	bx	lr
 8008714:	b299      	uxth	r1, r3
 8008716:	b909      	cbnz	r1, 800871c <__lo0bits+0x2a>
 8008718:	0c1b      	lsrs	r3, r3, #16
 800871a:	2010      	movs	r0, #16
 800871c:	b2d9      	uxtb	r1, r3
 800871e:	b909      	cbnz	r1, 8008724 <__lo0bits+0x32>
 8008720:	3008      	adds	r0, #8
 8008722:	0a1b      	lsrs	r3, r3, #8
 8008724:	0719      	lsls	r1, r3, #28
 8008726:	bf04      	itt	eq
 8008728:	091b      	lsreq	r3, r3, #4
 800872a:	3004      	addeq	r0, #4
 800872c:	0799      	lsls	r1, r3, #30
 800872e:	bf04      	itt	eq
 8008730:	089b      	lsreq	r3, r3, #2
 8008732:	3002      	addeq	r0, #2
 8008734:	07d9      	lsls	r1, r3, #31
 8008736:	d403      	bmi.n	8008740 <__lo0bits+0x4e>
 8008738:	085b      	lsrs	r3, r3, #1
 800873a:	f100 0001 	add.w	r0, r0, #1
 800873e:	d003      	beq.n	8008748 <__lo0bits+0x56>
 8008740:	6013      	str	r3, [r2, #0]
 8008742:	4770      	bx	lr
 8008744:	2000      	movs	r0, #0
 8008746:	4770      	bx	lr
 8008748:	2020      	movs	r0, #32
 800874a:	4770      	bx	lr

0800874c <__i2b>:
 800874c:	b510      	push	{r4, lr}
 800874e:	460c      	mov	r4, r1
 8008750:	2101      	movs	r1, #1
 8008752:	f7ff febd 	bl	80084d0 <_Balloc>
 8008756:	4602      	mov	r2, r0
 8008758:	b928      	cbnz	r0, 8008766 <__i2b+0x1a>
 800875a:	4b05      	ldr	r3, [pc, #20]	@ (8008770 <__i2b+0x24>)
 800875c:	4805      	ldr	r0, [pc, #20]	@ (8008774 <__i2b+0x28>)
 800875e:	f240 1145 	movw	r1, #325	@ 0x145
 8008762:	f7fe ff4b 	bl	80075fc <__assert_func>
 8008766:	2301      	movs	r3, #1
 8008768:	6144      	str	r4, [r0, #20]
 800876a:	6103      	str	r3, [r0, #16]
 800876c:	bd10      	pop	{r4, pc}
 800876e:	bf00      	nop
 8008770:	08017669 	.word	0x08017669
 8008774:	0801767a 	.word	0x0801767a

08008778 <__multiply>:
 8008778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	4614      	mov	r4, r2
 800877e:	690a      	ldr	r2, [r1, #16]
 8008780:	6923      	ldr	r3, [r4, #16]
 8008782:	429a      	cmp	r2, r3
 8008784:	bfa8      	it	ge
 8008786:	4623      	movge	r3, r4
 8008788:	460f      	mov	r7, r1
 800878a:	bfa4      	itt	ge
 800878c:	460c      	movge	r4, r1
 800878e:	461f      	movge	r7, r3
 8008790:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008794:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008798:	68a3      	ldr	r3, [r4, #8]
 800879a:	6861      	ldr	r1, [r4, #4]
 800879c:	eb0a 0609 	add.w	r6, sl, r9
 80087a0:	42b3      	cmp	r3, r6
 80087a2:	b085      	sub	sp, #20
 80087a4:	bfb8      	it	lt
 80087a6:	3101      	addlt	r1, #1
 80087a8:	f7ff fe92 	bl	80084d0 <_Balloc>
 80087ac:	b930      	cbnz	r0, 80087bc <__multiply+0x44>
 80087ae:	4602      	mov	r2, r0
 80087b0:	4b44      	ldr	r3, [pc, #272]	@ (80088c4 <__multiply+0x14c>)
 80087b2:	4845      	ldr	r0, [pc, #276]	@ (80088c8 <__multiply+0x150>)
 80087b4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087b8:	f7fe ff20 	bl	80075fc <__assert_func>
 80087bc:	f100 0514 	add.w	r5, r0, #20
 80087c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087c4:	462b      	mov	r3, r5
 80087c6:	2200      	movs	r2, #0
 80087c8:	4543      	cmp	r3, r8
 80087ca:	d321      	bcc.n	8008810 <__multiply+0x98>
 80087cc:	f107 0114 	add.w	r1, r7, #20
 80087d0:	f104 0214 	add.w	r2, r4, #20
 80087d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80087d8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80087dc:	9302      	str	r3, [sp, #8]
 80087de:	1b13      	subs	r3, r2, r4
 80087e0:	3b15      	subs	r3, #21
 80087e2:	f023 0303 	bic.w	r3, r3, #3
 80087e6:	3304      	adds	r3, #4
 80087e8:	f104 0715 	add.w	r7, r4, #21
 80087ec:	42ba      	cmp	r2, r7
 80087ee:	bf38      	it	cc
 80087f0:	2304      	movcc	r3, #4
 80087f2:	9301      	str	r3, [sp, #4]
 80087f4:	9b02      	ldr	r3, [sp, #8]
 80087f6:	9103      	str	r1, [sp, #12]
 80087f8:	428b      	cmp	r3, r1
 80087fa:	d80c      	bhi.n	8008816 <__multiply+0x9e>
 80087fc:	2e00      	cmp	r6, #0
 80087fe:	dd03      	ble.n	8008808 <__multiply+0x90>
 8008800:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008804:	2b00      	cmp	r3, #0
 8008806:	d05b      	beq.n	80088c0 <__multiply+0x148>
 8008808:	6106      	str	r6, [r0, #16]
 800880a:	b005      	add	sp, #20
 800880c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008810:	f843 2b04 	str.w	r2, [r3], #4
 8008814:	e7d8      	b.n	80087c8 <__multiply+0x50>
 8008816:	f8b1 a000 	ldrh.w	sl, [r1]
 800881a:	f1ba 0f00 	cmp.w	sl, #0
 800881e:	d024      	beq.n	800886a <__multiply+0xf2>
 8008820:	f104 0e14 	add.w	lr, r4, #20
 8008824:	46a9      	mov	r9, r5
 8008826:	f04f 0c00 	mov.w	ip, #0
 800882a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800882e:	f8d9 3000 	ldr.w	r3, [r9]
 8008832:	fa1f fb87 	uxth.w	fp, r7
 8008836:	b29b      	uxth	r3, r3
 8008838:	fb0a 330b 	mla	r3, sl, fp, r3
 800883c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008840:	f8d9 7000 	ldr.w	r7, [r9]
 8008844:	4463      	add	r3, ip
 8008846:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800884a:	fb0a c70b 	mla	r7, sl, fp, ip
 800884e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008852:	b29b      	uxth	r3, r3
 8008854:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008858:	4572      	cmp	r2, lr
 800885a:	f849 3b04 	str.w	r3, [r9], #4
 800885e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008862:	d8e2      	bhi.n	800882a <__multiply+0xb2>
 8008864:	9b01      	ldr	r3, [sp, #4]
 8008866:	f845 c003 	str.w	ip, [r5, r3]
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008870:	3104      	adds	r1, #4
 8008872:	f1b9 0f00 	cmp.w	r9, #0
 8008876:	d021      	beq.n	80088bc <__multiply+0x144>
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	f104 0c14 	add.w	ip, r4, #20
 800887e:	46ae      	mov	lr, r5
 8008880:	f04f 0a00 	mov.w	sl, #0
 8008884:	f8bc b000 	ldrh.w	fp, [ip]
 8008888:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800888c:	fb09 770b 	mla	r7, r9, fp, r7
 8008890:	4457      	add	r7, sl
 8008892:	b29b      	uxth	r3, r3
 8008894:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008898:	f84e 3b04 	str.w	r3, [lr], #4
 800889c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088a4:	f8be 3000 	ldrh.w	r3, [lr]
 80088a8:	fb09 330a 	mla	r3, r9, sl, r3
 80088ac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80088b0:	4562      	cmp	r2, ip
 80088b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088b6:	d8e5      	bhi.n	8008884 <__multiply+0x10c>
 80088b8:	9f01      	ldr	r7, [sp, #4]
 80088ba:	51eb      	str	r3, [r5, r7]
 80088bc:	3504      	adds	r5, #4
 80088be:	e799      	b.n	80087f4 <__multiply+0x7c>
 80088c0:	3e01      	subs	r6, #1
 80088c2:	e79b      	b.n	80087fc <__multiply+0x84>
 80088c4:	08017669 	.word	0x08017669
 80088c8:	0801767a 	.word	0x0801767a

080088cc <__pow5mult>:
 80088cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d0:	4615      	mov	r5, r2
 80088d2:	f012 0203 	ands.w	r2, r2, #3
 80088d6:	4607      	mov	r7, r0
 80088d8:	460e      	mov	r6, r1
 80088da:	d007      	beq.n	80088ec <__pow5mult+0x20>
 80088dc:	4c25      	ldr	r4, [pc, #148]	@ (8008974 <__pow5mult+0xa8>)
 80088de:	3a01      	subs	r2, #1
 80088e0:	2300      	movs	r3, #0
 80088e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088e6:	f7ff fe55 	bl	8008594 <__multadd>
 80088ea:	4606      	mov	r6, r0
 80088ec:	10ad      	asrs	r5, r5, #2
 80088ee:	d03d      	beq.n	800896c <__pow5mult+0xa0>
 80088f0:	69fc      	ldr	r4, [r7, #28]
 80088f2:	b97c      	cbnz	r4, 8008914 <__pow5mult+0x48>
 80088f4:	2010      	movs	r0, #16
 80088f6:	f7ff fd35 	bl	8008364 <malloc>
 80088fa:	4602      	mov	r2, r0
 80088fc:	61f8      	str	r0, [r7, #28]
 80088fe:	b928      	cbnz	r0, 800890c <__pow5mult+0x40>
 8008900:	4b1d      	ldr	r3, [pc, #116]	@ (8008978 <__pow5mult+0xac>)
 8008902:	481e      	ldr	r0, [pc, #120]	@ (800897c <__pow5mult+0xb0>)
 8008904:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008908:	f7fe fe78 	bl	80075fc <__assert_func>
 800890c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008910:	6004      	str	r4, [r0, #0]
 8008912:	60c4      	str	r4, [r0, #12]
 8008914:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800891c:	b94c      	cbnz	r4, 8008932 <__pow5mult+0x66>
 800891e:	f240 2171 	movw	r1, #625	@ 0x271
 8008922:	4638      	mov	r0, r7
 8008924:	f7ff ff12 	bl	800874c <__i2b>
 8008928:	2300      	movs	r3, #0
 800892a:	f8c8 0008 	str.w	r0, [r8, #8]
 800892e:	4604      	mov	r4, r0
 8008930:	6003      	str	r3, [r0, #0]
 8008932:	f04f 0900 	mov.w	r9, #0
 8008936:	07eb      	lsls	r3, r5, #31
 8008938:	d50a      	bpl.n	8008950 <__pow5mult+0x84>
 800893a:	4631      	mov	r1, r6
 800893c:	4622      	mov	r2, r4
 800893e:	4638      	mov	r0, r7
 8008940:	f7ff ff1a 	bl	8008778 <__multiply>
 8008944:	4631      	mov	r1, r6
 8008946:	4680      	mov	r8, r0
 8008948:	4638      	mov	r0, r7
 800894a:	f7ff fe01 	bl	8008550 <_Bfree>
 800894e:	4646      	mov	r6, r8
 8008950:	106d      	asrs	r5, r5, #1
 8008952:	d00b      	beq.n	800896c <__pow5mult+0xa0>
 8008954:	6820      	ldr	r0, [r4, #0]
 8008956:	b938      	cbnz	r0, 8008968 <__pow5mult+0x9c>
 8008958:	4622      	mov	r2, r4
 800895a:	4621      	mov	r1, r4
 800895c:	4638      	mov	r0, r7
 800895e:	f7ff ff0b 	bl	8008778 <__multiply>
 8008962:	6020      	str	r0, [r4, #0]
 8008964:	f8c0 9000 	str.w	r9, [r0]
 8008968:	4604      	mov	r4, r0
 800896a:	e7e4      	b.n	8008936 <__pow5mult+0x6a>
 800896c:	4630      	mov	r0, r6
 800896e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008972:	bf00      	nop
 8008974:	080176d4 	.word	0x080176d4
 8008978:	08017520 	.word	0x08017520
 800897c:	0801767a 	.word	0x0801767a

08008980 <__lshift>:
 8008980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008984:	460c      	mov	r4, r1
 8008986:	6849      	ldr	r1, [r1, #4]
 8008988:	6923      	ldr	r3, [r4, #16]
 800898a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800898e:	68a3      	ldr	r3, [r4, #8]
 8008990:	4607      	mov	r7, r0
 8008992:	4691      	mov	r9, r2
 8008994:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008998:	f108 0601 	add.w	r6, r8, #1
 800899c:	42b3      	cmp	r3, r6
 800899e:	db0b      	blt.n	80089b8 <__lshift+0x38>
 80089a0:	4638      	mov	r0, r7
 80089a2:	f7ff fd95 	bl	80084d0 <_Balloc>
 80089a6:	4605      	mov	r5, r0
 80089a8:	b948      	cbnz	r0, 80089be <__lshift+0x3e>
 80089aa:	4602      	mov	r2, r0
 80089ac:	4b28      	ldr	r3, [pc, #160]	@ (8008a50 <__lshift+0xd0>)
 80089ae:	4829      	ldr	r0, [pc, #164]	@ (8008a54 <__lshift+0xd4>)
 80089b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089b4:	f7fe fe22 	bl	80075fc <__assert_func>
 80089b8:	3101      	adds	r1, #1
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	e7ee      	b.n	800899c <__lshift+0x1c>
 80089be:	2300      	movs	r3, #0
 80089c0:	f100 0114 	add.w	r1, r0, #20
 80089c4:	f100 0210 	add.w	r2, r0, #16
 80089c8:	4618      	mov	r0, r3
 80089ca:	4553      	cmp	r3, sl
 80089cc:	db33      	blt.n	8008a36 <__lshift+0xb6>
 80089ce:	6920      	ldr	r0, [r4, #16]
 80089d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089d4:	f104 0314 	add.w	r3, r4, #20
 80089d8:	f019 091f 	ands.w	r9, r9, #31
 80089dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089e4:	d02b      	beq.n	8008a3e <__lshift+0xbe>
 80089e6:	f1c9 0e20 	rsb	lr, r9, #32
 80089ea:	468a      	mov	sl, r1
 80089ec:	2200      	movs	r2, #0
 80089ee:	6818      	ldr	r0, [r3, #0]
 80089f0:	fa00 f009 	lsl.w	r0, r0, r9
 80089f4:	4310      	orrs	r0, r2
 80089f6:	f84a 0b04 	str.w	r0, [sl], #4
 80089fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80089fe:	459c      	cmp	ip, r3
 8008a00:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a04:	d8f3      	bhi.n	80089ee <__lshift+0x6e>
 8008a06:	ebac 0304 	sub.w	r3, ip, r4
 8008a0a:	3b15      	subs	r3, #21
 8008a0c:	f023 0303 	bic.w	r3, r3, #3
 8008a10:	3304      	adds	r3, #4
 8008a12:	f104 0015 	add.w	r0, r4, #21
 8008a16:	4584      	cmp	ip, r0
 8008a18:	bf38      	it	cc
 8008a1a:	2304      	movcc	r3, #4
 8008a1c:	50ca      	str	r2, [r1, r3]
 8008a1e:	b10a      	cbz	r2, 8008a24 <__lshift+0xa4>
 8008a20:	f108 0602 	add.w	r6, r8, #2
 8008a24:	3e01      	subs	r6, #1
 8008a26:	4638      	mov	r0, r7
 8008a28:	612e      	str	r6, [r5, #16]
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	f7ff fd90 	bl	8008550 <_Bfree>
 8008a30:	4628      	mov	r0, r5
 8008a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a36:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	e7c5      	b.n	80089ca <__lshift+0x4a>
 8008a3e:	3904      	subs	r1, #4
 8008a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a44:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a48:	459c      	cmp	ip, r3
 8008a4a:	d8f9      	bhi.n	8008a40 <__lshift+0xc0>
 8008a4c:	e7ea      	b.n	8008a24 <__lshift+0xa4>
 8008a4e:	bf00      	nop
 8008a50:	08017669 	.word	0x08017669
 8008a54:	0801767a 	.word	0x0801767a

08008a58 <__mcmp>:
 8008a58:	690a      	ldr	r2, [r1, #16]
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	6900      	ldr	r0, [r0, #16]
 8008a5e:	1a80      	subs	r0, r0, r2
 8008a60:	b530      	push	{r4, r5, lr}
 8008a62:	d10e      	bne.n	8008a82 <__mcmp+0x2a>
 8008a64:	3314      	adds	r3, #20
 8008a66:	3114      	adds	r1, #20
 8008a68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a78:	4295      	cmp	r5, r2
 8008a7a:	d003      	beq.n	8008a84 <__mcmp+0x2c>
 8008a7c:	d205      	bcs.n	8008a8a <__mcmp+0x32>
 8008a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a82:	bd30      	pop	{r4, r5, pc}
 8008a84:	42a3      	cmp	r3, r4
 8008a86:	d3f3      	bcc.n	8008a70 <__mcmp+0x18>
 8008a88:	e7fb      	b.n	8008a82 <__mcmp+0x2a>
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	e7f9      	b.n	8008a82 <__mcmp+0x2a>
	...

08008a90 <__mdiff>:
 8008a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	4689      	mov	r9, r1
 8008a96:	4606      	mov	r6, r0
 8008a98:	4611      	mov	r1, r2
 8008a9a:	4648      	mov	r0, r9
 8008a9c:	4614      	mov	r4, r2
 8008a9e:	f7ff ffdb 	bl	8008a58 <__mcmp>
 8008aa2:	1e05      	subs	r5, r0, #0
 8008aa4:	d112      	bne.n	8008acc <__mdiff+0x3c>
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f7ff fd11 	bl	80084d0 <_Balloc>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	b928      	cbnz	r0, 8008abe <__mdiff+0x2e>
 8008ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8008bb0 <__mdiff+0x120>)
 8008ab4:	f240 2137 	movw	r1, #567	@ 0x237
 8008ab8:	483e      	ldr	r0, [pc, #248]	@ (8008bb4 <__mdiff+0x124>)
 8008aba:	f7fe fd9f 	bl	80075fc <__assert_func>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	b003      	add	sp, #12
 8008ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008acc:	bfbc      	itt	lt
 8008ace:	464b      	movlt	r3, r9
 8008ad0:	46a1      	movlt	r9, r4
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ad8:	bfba      	itte	lt
 8008ada:	461c      	movlt	r4, r3
 8008adc:	2501      	movlt	r5, #1
 8008ade:	2500      	movge	r5, #0
 8008ae0:	f7ff fcf6 	bl	80084d0 <_Balloc>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	b918      	cbnz	r0, 8008af0 <__mdiff+0x60>
 8008ae8:	4b31      	ldr	r3, [pc, #196]	@ (8008bb0 <__mdiff+0x120>)
 8008aea:	f240 2145 	movw	r1, #581	@ 0x245
 8008aee:	e7e3      	b.n	8008ab8 <__mdiff+0x28>
 8008af0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008af4:	6926      	ldr	r6, [r4, #16]
 8008af6:	60c5      	str	r5, [r0, #12]
 8008af8:	f109 0310 	add.w	r3, r9, #16
 8008afc:	f109 0514 	add.w	r5, r9, #20
 8008b00:	f104 0e14 	add.w	lr, r4, #20
 8008b04:	f100 0b14 	add.w	fp, r0, #20
 8008b08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b10:	9301      	str	r3, [sp, #4]
 8008b12:	46d9      	mov	r9, fp
 8008b14:	f04f 0c00 	mov.w	ip, #0
 8008b18:	9b01      	ldr	r3, [sp, #4]
 8008b1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b22:	9301      	str	r3, [sp, #4]
 8008b24:	fa1f f38a 	uxth.w	r3, sl
 8008b28:	4619      	mov	r1, r3
 8008b2a:	b283      	uxth	r3, r0
 8008b2c:	1acb      	subs	r3, r1, r3
 8008b2e:	0c00      	lsrs	r0, r0, #16
 8008b30:	4463      	add	r3, ip
 8008b32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b40:	4576      	cmp	r6, lr
 8008b42:	f849 3b04 	str.w	r3, [r9], #4
 8008b46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b4a:	d8e5      	bhi.n	8008b18 <__mdiff+0x88>
 8008b4c:	1b33      	subs	r3, r6, r4
 8008b4e:	3b15      	subs	r3, #21
 8008b50:	f023 0303 	bic.w	r3, r3, #3
 8008b54:	3415      	adds	r4, #21
 8008b56:	3304      	adds	r3, #4
 8008b58:	42a6      	cmp	r6, r4
 8008b5a:	bf38      	it	cc
 8008b5c:	2304      	movcc	r3, #4
 8008b5e:	441d      	add	r5, r3
 8008b60:	445b      	add	r3, fp
 8008b62:	461e      	mov	r6, r3
 8008b64:	462c      	mov	r4, r5
 8008b66:	4544      	cmp	r4, r8
 8008b68:	d30e      	bcc.n	8008b88 <__mdiff+0xf8>
 8008b6a:	f108 0103 	add.w	r1, r8, #3
 8008b6e:	1b49      	subs	r1, r1, r5
 8008b70:	f021 0103 	bic.w	r1, r1, #3
 8008b74:	3d03      	subs	r5, #3
 8008b76:	45a8      	cmp	r8, r5
 8008b78:	bf38      	it	cc
 8008b7a:	2100      	movcc	r1, #0
 8008b7c:	440b      	add	r3, r1
 8008b7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b82:	b191      	cbz	r1, 8008baa <__mdiff+0x11a>
 8008b84:	6117      	str	r7, [r2, #16]
 8008b86:	e79d      	b.n	8008ac4 <__mdiff+0x34>
 8008b88:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b8c:	46e6      	mov	lr, ip
 8008b8e:	0c08      	lsrs	r0, r1, #16
 8008b90:	fa1c fc81 	uxtah	ip, ip, r1
 8008b94:	4471      	add	r1, lr
 8008b96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b9a:	b289      	uxth	r1, r1
 8008b9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ba0:	f846 1b04 	str.w	r1, [r6], #4
 8008ba4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ba8:	e7dd      	b.n	8008b66 <__mdiff+0xd6>
 8008baa:	3f01      	subs	r7, #1
 8008bac:	e7e7      	b.n	8008b7e <__mdiff+0xee>
 8008bae:	bf00      	nop
 8008bb0:	08017669 	.word	0x08017669
 8008bb4:	0801767a 	.word	0x0801767a

08008bb8 <__ulp>:
 8008bb8:	b082      	sub	sp, #8
 8008bba:	ed8d 0b00 	vstr	d0, [sp]
 8008bbe:	9a01      	ldr	r2, [sp, #4]
 8008bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8008c00 <__ulp+0x48>)
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	dc08      	bgt.n	8008bde <__ulp+0x26>
 8008bcc:	425b      	negs	r3, r3
 8008bce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008bd2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008bd6:	da04      	bge.n	8008be2 <__ulp+0x2a>
 8008bd8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008bdc:	4113      	asrs	r3, r2
 8008bde:	2200      	movs	r2, #0
 8008be0:	e008      	b.n	8008bf4 <__ulp+0x3c>
 8008be2:	f1a2 0314 	sub.w	r3, r2, #20
 8008be6:	2b1e      	cmp	r3, #30
 8008be8:	bfda      	itte	le
 8008bea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008bee:	40da      	lsrle	r2, r3
 8008bf0:	2201      	movgt	r2, #1
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	ec41 0b10 	vmov	d0, r0, r1
 8008bfc:	b002      	add	sp, #8
 8008bfe:	4770      	bx	lr
 8008c00:	7ff00000 	.word	0x7ff00000

08008c04 <__b2d>:
 8008c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c08:	6906      	ldr	r6, [r0, #16]
 8008c0a:	f100 0814 	add.w	r8, r0, #20
 8008c0e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008c12:	1f37      	subs	r7, r6, #4
 8008c14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008c18:	4610      	mov	r0, r2
 8008c1a:	f7ff fd4b 	bl	80086b4 <__hi0bits>
 8008c1e:	f1c0 0320 	rsb	r3, r0, #32
 8008c22:	280a      	cmp	r0, #10
 8008c24:	600b      	str	r3, [r1, #0]
 8008c26:	491b      	ldr	r1, [pc, #108]	@ (8008c94 <__b2d+0x90>)
 8008c28:	dc15      	bgt.n	8008c56 <__b2d+0x52>
 8008c2a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008c2e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008c32:	45b8      	cmp	r8, r7
 8008c34:	ea43 0501 	orr.w	r5, r3, r1
 8008c38:	bf34      	ite	cc
 8008c3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c3e:	2300      	movcs	r3, #0
 8008c40:	3015      	adds	r0, #21
 8008c42:	fa02 f000 	lsl.w	r0, r2, r0
 8008c46:	fa23 f30c 	lsr.w	r3, r3, ip
 8008c4a:	4303      	orrs	r3, r0
 8008c4c:	461c      	mov	r4, r3
 8008c4e:	ec45 4b10 	vmov	d0, r4, r5
 8008c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c56:	45b8      	cmp	r8, r7
 8008c58:	bf3a      	itte	cc
 8008c5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c5e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008c62:	2300      	movcs	r3, #0
 8008c64:	380b      	subs	r0, #11
 8008c66:	d012      	beq.n	8008c8e <__b2d+0x8a>
 8008c68:	f1c0 0120 	rsb	r1, r0, #32
 8008c6c:	fa23 f401 	lsr.w	r4, r3, r1
 8008c70:	4082      	lsls	r2, r0
 8008c72:	4322      	orrs	r2, r4
 8008c74:	4547      	cmp	r7, r8
 8008c76:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008c7a:	bf8c      	ite	hi
 8008c7c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008c80:	2200      	movls	r2, #0
 8008c82:	4083      	lsls	r3, r0
 8008c84:	40ca      	lsrs	r2, r1
 8008c86:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	e7de      	b.n	8008c4c <__b2d+0x48>
 8008c8e:	ea42 0501 	orr.w	r5, r2, r1
 8008c92:	e7db      	b.n	8008c4c <__b2d+0x48>
 8008c94:	3ff00000 	.word	0x3ff00000

08008c98 <__d2b>:
 8008c98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c9c:	460f      	mov	r7, r1
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	ec59 8b10 	vmov	r8, r9, d0
 8008ca4:	4616      	mov	r6, r2
 8008ca6:	f7ff fc13 	bl	80084d0 <_Balloc>
 8008caa:	4604      	mov	r4, r0
 8008cac:	b930      	cbnz	r0, 8008cbc <__d2b+0x24>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	4b23      	ldr	r3, [pc, #140]	@ (8008d40 <__d2b+0xa8>)
 8008cb2:	4824      	ldr	r0, [pc, #144]	@ (8008d44 <__d2b+0xac>)
 8008cb4:	f240 310f 	movw	r1, #783	@ 0x30f
 8008cb8:	f7fe fca0 	bl	80075fc <__assert_func>
 8008cbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008cc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cc4:	b10d      	cbz	r5, 8008cca <__d2b+0x32>
 8008cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cca:	9301      	str	r3, [sp, #4]
 8008ccc:	f1b8 0300 	subs.w	r3, r8, #0
 8008cd0:	d023      	beq.n	8008d1a <__d2b+0x82>
 8008cd2:	4668      	mov	r0, sp
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	f7ff fd0c 	bl	80086f2 <__lo0bits>
 8008cda:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008cde:	b1d0      	cbz	r0, 8008d16 <__d2b+0x7e>
 8008ce0:	f1c0 0320 	rsb	r3, r0, #32
 8008ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce8:	430b      	orrs	r3, r1
 8008cea:	40c2      	lsrs	r2, r0
 8008cec:	6163      	str	r3, [r4, #20]
 8008cee:	9201      	str	r2, [sp, #4]
 8008cf0:	9b01      	ldr	r3, [sp, #4]
 8008cf2:	61a3      	str	r3, [r4, #24]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	bf0c      	ite	eq
 8008cf8:	2201      	moveq	r2, #1
 8008cfa:	2202      	movne	r2, #2
 8008cfc:	6122      	str	r2, [r4, #16]
 8008cfe:	b1a5      	cbz	r5, 8008d2a <__d2b+0x92>
 8008d00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008d04:	4405      	add	r5, r0
 8008d06:	603d      	str	r5, [r7, #0]
 8008d08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008d0c:	6030      	str	r0, [r6, #0]
 8008d0e:	4620      	mov	r0, r4
 8008d10:	b003      	add	sp, #12
 8008d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d16:	6161      	str	r1, [r4, #20]
 8008d18:	e7ea      	b.n	8008cf0 <__d2b+0x58>
 8008d1a:	a801      	add	r0, sp, #4
 8008d1c:	f7ff fce9 	bl	80086f2 <__lo0bits>
 8008d20:	9b01      	ldr	r3, [sp, #4]
 8008d22:	6163      	str	r3, [r4, #20]
 8008d24:	3020      	adds	r0, #32
 8008d26:	2201      	movs	r2, #1
 8008d28:	e7e8      	b.n	8008cfc <__d2b+0x64>
 8008d2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008d32:	6038      	str	r0, [r7, #0]
 8008d34:	6918      	ldr	r0, [r3, #16]
 8008d36:	f7ff fcbd 	bl	80086b4 <__hi0bits>
 8008d3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d3e:	e7e5      	b.n	8008d0c <__d2b+0x74>
 8008d40:	08017669 	.word	0x08017669
 8008d44:	0801767a 	.word	0x0801767a

08008d48 <__ratio>:
 8008d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4c:	b085      	sub	sp, #20
 8008d4e:	e9cd 1000 	strd	r1, r0, [sp]
 8008d52:	a902      	add	r1, sp, #8
 8008d54:	f7ff ff56 	bl	8008c04 <__b2d>
 8008d58:	9800      	ldr	r0, [sp, #0]
 8008d5a:	a903      	add	r1, sp, #12
 8008d5c:	ec55 4b10 	vmov	r4, r5, d0
 8008d60:	f7ff ff50 	bl	8008c04 <__b2d>
 8008d64:	9b01      	ldr	r3, [sp, #4]
 8008d66:	6919      	ldr	r1, [r3, #16]
 8008d68:	9b00      	ldr	r3, [sp, #0]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	1ac9      	subs	r1, r1, r3
 8008d6e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008d72:	1a9b      	subs	r3, r3, r2
 8008d74:	ec5b ab10 	vmov	sl, fp, d0
 8008d78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	bfce      	itee	gt
 8008d80:	462a      	movgt	r2, r5
 8008d82:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d86:	465a      	movle	r2, fp
 8008d88:	462f      	mov	r7, r5
 8008d8a:	46d9      	mov	r9, fp
 8008d8c:	bfcc      	ite	gt
 8008d8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d92:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008d96:	464b      	mov	r3, r9
 8008d98:	4652      	mov	r2, sl
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	4639      	mov	r1, r7
 8008d9e:	f7f7 fd55 	bl	800084c <__aeabi_ddiv>
 8008da2:	ec41 0b10 	vmov	d0, r0, r1
 8008da6:	b005      	add	sp, #20
 8008da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008dac <__copybits>:
 8008dac:	3901      	subs	r1, #1
 8008dae:	b570      	push	{r4, r5, r6, lr}
 8008db0:	1149      	asrs	r1, r1, #5
 8008db2:	6914      	ldr	r4, [r2, #16]
 8008db4:	3101      	adds	r1, #1
 8008db6:	f102 0314 	add.w	r3, r2, #20
 8008dba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008dbe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008dc2:	1f05      	subs	r5, r0, #4
 8008dc4:	42a3      	cmp	r3, r4
 8008dc6:	d30c      	bcc.n	8008de2 <__copybits+0x36>
 8008dc8:	1aa3      	subs	r3, r4, r2
 8008dca:	3b11      	subs	r3, #17
 8008dcc:	f023 0303 	bic.w	r3, r3, #3
 8008dd0:	3211      	adds	r2, #17
 8008dd2:	42a2      	cmp	r2, r4
 8008dd4:	bf88      	it	hi
 8008dd6:	2300      	movhi	r3, #0
 8008dd8:	4418      	add	r0, r3
 8008dda:	2300      	movs	r3, #0
 8008ddc:	4288      	cmp	r0, r1
 8008dde:	d305      	bcc.n	8008dec <__copybits+0x40>
 8008de0:	bd70      	pop	{r4, r5, r6, pc}
 8008de2:	f853 6b04 	ldr.w	r6, [r3], #4
 8008de6:	f845 6f04 	str.w	r6, [r5, #4]!
 8008dea:	e7eb      	b.n	8008dc4 <__copybits+0x18>
 8008dec:	f840 3b04 	str.w	r3, [r0], #4
 8008df0:	e7f4      	b.n	8008ddc <__copybits+0x30>

08008df2 <__any_on>:
 8008df2:	f100 0214 	add.w	r2, r0, #20
 8008df6:	6900      	ldr	r0, [r0, #16]
 8008df8:	114b      	asrs	r3, r1, #5
 8008dfa:	4298      	cmp	r0, r3
 8008dfc:	b510      	push	{r4, lr}
 8008dfe:	db11      	blt.n	8008e24 <__any_on+0x32>
 8008e00:	dd0a      	ble.n	8008e18 <__any_on+0x26>
 8008e02:	f011 011f 	ands.w	r1, r1, #31
 8008e06:	d007      	beq.n	8008e18 <__any_on+0x26>
 8008e08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e0c:	fa24 f001 	lsr.w	r0, r4, r1
 8008e10:	fa00 f101 	lsl.w	r1, r0, r1
 8008e14:	428c      	cmp	r4, r1
 8008e16:	d10b      	bne.n	8008e30 <__any_on+0x3e>
 8008e18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d803      	bhi.n	8008e28 <__any_on+0x36>
 8008e20:	2000      	movs	r0, #0
 8008e22:	bd10      	pop	{r4, pc}
 8008e24:	4603      	mov	r3, r0
 8008e26:	e7f7      	b.n	8008e18 <__any_on+0x26>
 8008e28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e2c:	2900      	cmp	r1, #0
 8008e2e:	d0f5      	beq.n	8008e1c <__any_on+0x2a>
 8008e30:	2001      	movs	r0, #1
 8008e32:	e7f6      	b.n	8008e22 <__any_on+0x30>

08008e34 <sulp>:
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	4604      	mov	r4, r0
 8008e38:	460d      	mov	r5, r1
 8008e3a:	ec45 4b10 	vmov	d0, r4, r5
 8008e3e:	4616      	mov	r6, r2
 8008e40:	f7ff feba 	bl	8008bb8 <__ulp>
 8008e44:	ec51 0b10 	vmov	r0, r1, d0
 8008e48:	b17e      	cbz	r6, 8008e6a <sulp+0x36>
 8008e4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e4e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	dd09      	ble.n	8008e6a <sulp+0x36>
 8008e56:	051b      	lsls	r3, r3, #20
 8008e58:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008e5c:	2400      	movs	r4, #0
 8008e5e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008e62:	4622      	mov	r2, r4
 8008e64:	462b      	mov	r3, r5
 8008e66:	f7f7 fbc7 	bl	80005f8 <__aeabi_dmul>
 8008e6a:	ec41 0b10 	vmov	d0, r0, r1
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}

08008e70 <_strtod_l>:
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	b09f      	sub	sp, #124	@ 0x7c
 8008e76:	460c      	mov	r4, r1
 8008e78:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008e7e:	9005      	str	r0, [sp, #20]
 8008e80:	f04f 0a00 	mov.w	sl, #0
 8008e84:	f04f 0b00 	mov.w	fp, #0
 8008e88:	460a      	mov	r2, r1
 8008e8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e8c:	7811      	ldrb	r1, [r2, #0]
 8008e8e:	292b      	cmp	r1, #43	@ 0x2b
 8008e90:	d04a      	beq.n	8008f28 <_strtod_l+0xb8>
 8008e92:	d838      	bhi.n	8008f06 <_strtod_l+0x96>
 8008e94:	290d      	cmp	r1, #13
 8008e96:	d832      	bhi.n	8008efe <_strtod_l+0x8e>
 8008e98:	2908      	cmp	r1, #8
 8008e9a:	d832      	bhi.n	8008f02 <_strtod_l+0x92>
 8008e9c:	2900      	cmp	r1, #0
 8008e9e:	d03b      	beq.n	8008f18 <_strtod_l+0xa8>
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008ea4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008ea6:	782a      	ldrb	r2, [r5, #0]
 8008ea8:	2a30      	cmp	r2, #48	@ 0x30
 8008eaa:	f040 80b3 	bne.w	8009014 <_strtod_l+0x1a4>
 8008eae:	786a      	ldrb	r2, [r5, #1]
 8008eb0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008eb4:	2a58      	cmp	r2, #88	@ 0x58
 8008eb6:	d16e      	bne.n	8008f96 <_strtod_l+0x126>
 8008eb8:	9302      	str	r3, [sp, #8]
 8008eba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	ab1a      	add	r3, sp, #104	@ 0x68
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	4a8e      	ldr	r2, [pc, #568]	@ (80090fc <_strtod_l+0x28c>)
 8008ec4:	9805      	ldr	r0, [sp, #20]
 8008ec6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008ec8:	a919      	add	r1, sp, #100	@ 0x64
 8008eca:	f001 fae7 	bl	800a49c <__gethex>
 8008ece:	f010 060f 	ands.w	r6, r0, #15
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	d005      	beq.n	8008ee2 <_strtod_l+0x72>
 8008ed6:	2e06      	cmp	r6, #6
 8008ed8:	d128      	bne.n	8008f2c <_strtod_l+0xbc>
 8008eda:	3501      	adds	r5, #1
 8008edc:	2300      	movs	r3, #0
 8008ede:	9519      	str	r5, [sp, #100]	@ 0x64
 8008ee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ee2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f040 858e 	bne.w	8009a06 <_strtod_l+0xb96>
 8008eea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008eec:	b1cb      	cbz	r3, 8008f22 <_strtod_l+0xb2>
 8008eee:	4652      	mov	r2, sl
 8008ef0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008ef4:	ec43 2b10 	vmov	d0, r2, r3
 8008ef8:	b01f      	add	sp, #124	@ 0x7c
 8008efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efe:	2920      	cmp	r1, #32
 8008f00:	d1ce      	bne.n	8008ea0 <_strtod_l+0x30>
 8008f02:	3201      	adds	r2, #1
 8008f04:	e7c1      	b.n	8008e8a <_strtod_l+0x1a>
 8008f06:	292d      	cmp	r1, #45	@ 0x2d
 8008f08:	d1ca      	bne.n	8008ea0 <_strtod_l+0x30>
 8008f0a:	2101      	movs	r1, #1
 8008f0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008f0e:	1c51      	adds	r1, r2, #1
 8008f10:	9119      	str	r1, [sp, #100]	@ 0x64
 8008f12:	7852      	ldrb	r2, [r2, #1]
 8008f14:	2a00      	cmp	r2, #0
 8008f16:	d1c5      	bne.n	8008ea4 <_strtod_l+0x34>
 8008f18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f1a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f040 8570 	bne.w	8009a02 <_strtod_l+0xb92>
 8008f22:	4652      	mov	r2, sl
 8008f24:	465b      	mov	r3, fp
 8008f26:	e7e5      	b.n	8008ef4 <_strtod_l+0x84>
 8008f28:	2100      	movs	r1, #0
 8008f2a:	e7ef      	b.n	8008f0c <_strtod_l+0x9c>
 8008f2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f2e:	b13a      	cbz	r2, 8008f40 <_strtod_l+0xd0>
 8008f30:	2135      	movs	r1, #53	@ 0x35
 8008f32:	a81c      	add	r0, sp, #112	@ 0x70
 8008f34:	f7ff ff3a 	bl	8008dac <__copybits>
 8008f38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f3a:	9805      	ldr	r0, [sp, #20]
 8008f3c:	f7ff fb08 	bl	8008550 <_Bfree>
 8008f40:	3e01      	subs	r6, #1
 8008f42:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008f44:	2e04      	cmp	r6, #4
 8008f46:	d806      	bhi.n	8008f56 <_strtod_l+0xe6>
 8008f48:	e8df f006 	tbb	[pc, r6]
 8008f4c:	201d0314 	.word	0x201d0314
 8008f50:	14          	.byte	0x14
 8008f51:	00          	.byte	0x00
 8008f52:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008f56:	05e1      	lsls	r1, r4, #23
 8008f58:	bf48      	it	mi
 8008f5a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008f5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f62:	0d1b      	lsrs	r3, r3, #20
 8008f64:	051b      	lsls	r3, r3, #20
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1bb      	bne.n	8008ee2 <_strtod_l+0x72>
 8008f6a:	f7fe fb13 	bl	8007594 <__errno>
 8008f6e:	2322      	movs	r3, #34	@ 0x22
 8008f70:	6003      	str	r3, [r0, #0]
 8008f72:	e7b6      	b.n	8008ee2 <_strtod_l+0x72>
 8008f74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008f78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008f7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008f80:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f84:	e7e7      	b.n	8008f56 <_strtod_l+0xe6>
 8008f86:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009104 <_strtod_l+0x294>
 8008f8a:	e7e4      	b.n	8008f56 <_strtod_l+0xe6>
 8008f8c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008f90:	f04f 3aff 	mov.w	sl, #4294967295
 8008f94:	e7df      	b.n	8008f56 <_strtod_l+0xe6>
 8008f96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f9c:	785b      	ldrb	r3, [r3, #1]
 8008f9e:	2b30      	cmp	r3, #48	@ 0x30
 8008fa0:	d0f9      	beq.n	8008f96 <_strtod_l+0x126>
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d09d      	beq.n	8008ee2 <_strtod_l+0x72>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008faa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fac:	930c      	str	r3, [sp, #48]	@ 0x30
 8008fae:	2300      	movs	r3, #0
 8008fb0:	9308      	str	r3, [sp, #32]
 8008fb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fb4:	461f      	mov	r7, r3
 8008fb6:	220a      	movs	r2, #10
 8008fb8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008fba:	7805      	ldrb	r5, [r0, #0]
 8008fbc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008fc0:	b2d9      	uxtb	r1, r3
 8008fc2:	2909      	cmp	r1, #9
 8008fc4:	d928      	bls.n	8009018 <_strtod_l+0x1a8>
 8008fc6:	494e      	ldr	r1, [pc, #312]	@ (8009100 <_strtod_l+0x290>)
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f001 f98b 	bl	800a2e4 <strncmp>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	d032      	beq.n	8009038 <_strtod_l+0x1c8>
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	462a      	mov	r2, r5
 8008fd6:	4681      	mov	r9, r0
 8008fd8:	463d      	mov	r5, r7
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2a65      	cmp	r2, #101	@ 0x65
 8008fde:	d001      	beq.n	8008fe4 <_strtod_l+0x174>
 8008fe0:	2a45      	cmp	r2, #69	@ 0x45
 8008fe2:	d114      	bne.n	800900e <_strtod_l+0x19e>
 8008fe4:	b91d      	cbnz	r5, 8008fee <_strtod_l+0x17e>
 8008fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fe8:	4302      	orrs	r2, r0
 8008fea:	d095      	beq.n	8008f18 <_strtod_l+0xa8>
 8008fec:	2500      	movs	r5, #0
 8008fee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008ff0:	1c62      	adds	r2, r4, #1
 8008ff2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ff4:	7862      	ldrb	r2, [r4, #1]
 8008ff6:	2a2b      	cmp	r2, #43	@ 0x2b
 8008ff8:	d077      	beq.n	80090ea <_strtod_l+0x27a>
 8008ffa:	2a2d      	cmp	r2, #45	@ 0x2d
 8008ffc:	d07b      	beq.n	80090f6 <_strtod_l+0x286>
 8008ffe:	f04f 0c00 	mov.w	ip, #0
 8009002:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009006:	2909      	cmp	r1, #9
 8009008:	f240 8082 	bls.w	8009110 <_strtod_l+0x2a0>
 800900c:	9419      	str	r4, [sp, #100]	@ 0x64
 800900e:	f04f 0800 	mov.w	r8, #0
 8009012:	e0a2      	b.n	800915a <_strtod_l+0x2ea>
 8009014:	2300      	movs	r3, #0
 8009016:	e7c7      	b.n	8008fa8 <_strtod_l+0x138>
 8009018:	2f08      	cmp	r7, #8
 800901a:	bfd5      	itete	le
 800901c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800901e:	9908      	ldrgt	r1, [sp, #32]
 8009020:	fb02 3301 	mlale	r3, r2, r1, r3
 8009024:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009028:	f100 0001 	add.w	r0, r0, #1
 800902c:	bfd4      	ite	le
 800902e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009030:	9308      	strgt	r3, [sp, #32]
 8009032:	3701      	adds	r7, #1
 8009034:	9019      	str	r0, [sp, #100]	@ 0x64
 8009036:	e7bf      	b.n	8008fb8 <_strtod_l+0x148>
 8009038:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	9219      	str	r2, [sp, #100]	@ 0x64
 800903e:	785a      	ldrb	r2, [r3, #1]
 8009040:	b37f      	cbz	r7, 80090a2 <_strtod_l+0x232>
 8009042:	4681      	mov	r9, r0
 8009044:	463d      	mov	r5, r7
 8009046:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800904a:	2b09      	cmp	r3, #9
 800904c:	d912      	bls.n	8009074 <_strtod_l+0x204>
 800904e:	2301      	movs	r3, #1
 8009050:	e7c4      	b.n	8008fdc <_strtod_l+0x16c>
 8009052:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	9219      	str	r2, [sp, #100]	@ 0x64
 8009058:	785a      	ldrb	r2, [r3, #1]
 800905a:	3001      	adds	r0, #1
 800905c:	2a30      	cmp	r2, #48	@ 0x30
 800905e:	d0f8      	beq.n	8009052 <_strtod_l+0x1e2>
 8009060:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009064:	2b08      	cmp	r3, #8
 8009066:	f200 84d3 	bhi.w	8009a10 <_strtod_l+0xba0>
 800906a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800906c:	930c      	str	r3, [sp, #48]	@ 0x30
 800906e:	4681      	mov	r9, r0
 8009070:	2000      	movs	r0, #0
 8009072:	4605      	mov	r5, r0
 8009074:	3a30      	subs	r2, #48	@ 0x30
 8009076:	f100 0301 	add.w	r3, r0, #1
 800907a:	d02a      	beq.n	80090d2 <_strtod_l+0x262>
 800907c:	4499      	add	r9, r3
 800907e:	eb00 0c05 	add.w	ip, r0, r5
 8009082:	462b      	mov	r3, r5
 8009084:	210a      	movs	r1, #10
 8009086:	4563      	cmp	r3, ip
 8009088:	d10d      	bne.n	80090a6 <_strtod_l+0x236>
 800908a:	1c69      	adds	r1, r5, #1
 800908c:	4401      	add	r1, r0
 800908e:	4428      	add	r0, r5
 8009090:	2808      	cmp	r0, #8
 8009092:	dc16      	bgt.n	80090c2 <_strtod_l+0x252>
 8009094:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009096:	230a      	movs	r3, #10
 8009098:	fb03 2300 	mla	r3, r3, r0, r2
 800909c:	930a      	str	r3, [sp, #40]	@ 0x28
 800909e:	2300      	movs	r3, #0
 80090a0:	e018      	b.n	80090d4 <_strtod_l+0x264>
 80090a2:	4638      	mov	r0, r7
 80090a4:	e7da      	b.n	800905c <_strtod_l+0x1ec>
 80090a6:	2b08      	cmp	r3, #8
 80090a8:	f103 0301 	add.w	r3, r3, #1
 80090ac:	dc03      	bgt.n	80090b6 <_strtod_l+0x246>
 80090ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80090b0:	434e      	muls	r6, r1
 80090b2:	960a      	str	r6, [sp, #40]	@ 0x28
 80090b4:	e7e7      	b.n	8009086 <_strtod_l+0x216>
 80090b6:	2b10      	cmp	r3, #16
 80090b8:	bfde      	ittt	le
 80090ba:	9e08      	ldrle	r6, [sp, #32]
 80090bc:	434e      	mulle	r6, r1
 80090be:	9608      	strle	r6, [sp, #32]
 80090c0:	e7e1      	b.n	8009086 <_strtod_l+0x216>
 80090c2:	280f      	cmp	r0, #15
 80090c4:	dceb      	bgt.n	800909e <_strtod_l+0x22e>
 80090c6:	9808      	ldr	r0, [sp, #32]
 80090c8:	230a      	movs	r3, #10
 80090ca:	fb03 2300 	mla	r3, r3, r0, r2
 80090ce:	9308      	str	r3, [sp, #32]
 80090d0:	e7e5      	b.n	800909e <_strtod_l+0x22e>
 80090d2:	4629      	mov	r1, r5
 80090d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090d6:	1c50      	adds	r0, r2, #1
 80090d8:	9019      	str	r0, [sp, #100]	@ 0x64
 80090da:	7852      	ldrb	r2, [r2, #1]
 80090dc:	4618      	mov	r0, r3
 80090de:	460d      	mov	r5, r1
 80090e0:	e7b1      	b.n	8009046 <_strtod_l+0x1d6>
 80090e2:	f04f 0900 	mov.w	r9, #0
 80090e6:	2301      	movs	r3, #1
 80090e8:	e77d      	b.n	8008fe6 <_strtod_l+0x176>
 80090ea:	f04f 0c00 	mov.w	ip, #0
 80090ee:	1ca2      	adds	r2, r4, #2
 80090f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80090f2:	78a2      	ldrb	r2, [r4, #2]
 80090f4:	e785      	b.n	8009002 <_strtod_l+0x192>
 80090f6:	f04f 0c01 	mov.w	ip, #1
 80090fa:	e7f8      	b.n	80090ee <_strtod_l+0x27e>
 80090fc:	080177e8 	.word	0x080177e8
 8009100:	080177d0 	.word	0x080177d0
 8009104:	7ff00000 	.word	0x7ff00000
 8009108:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800910a:	1c51      	adds	r1, r2, #1
 800910c:	9119      	str	r1, [sp, #100]	@ 0x64
 800910e:	7852      	ldrb	r2, [r2, #1]
 8009110:	2a30      	cmp	r2, #48	@ 0x30
 8009112:	d0f9      	beq.n	8009108 <_strtod_l+0x298>
 8009114:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009118:	2908      	cmp	r1, #8
 800911a:	f63f af78 	bhi.w	800900e <_strtod_l+0x19e>
 800911e:	3a30      	subs	r2, #48	@ 0x30
 8009120:	920e      	str	r2, [sp, #56]	@ 0x38
 8009122:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009124:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009126:	f04f 080a 	mov.w	r8, #10
 800912a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800912c:	1c56      	adds	r6, r2, #1
 800912e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009130:	7852      	ldrb	r2, [r2, #1]
 8009132:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009136:	f1be 0f09 	cmp.w	lr, #9
 800913a:	d939      	bls.n	80091b0 <_strtod_l+0x340>
 800913c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800913e:	1a76      	subs	r6, r6, r1
 8009140:	2e08      	cmp	r6, #8
 8009142:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009146:	dc03      	bgt.n	8009150 <_strtod_l+0x2e0>
 8009148:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800914a:	4588      	cmp	r8, r1
 800914c:	bfa8      	it	ge
 800914e:	4688      	movge	r8, r1
 8009150:	f1bc 0f00 	cmp.w	ip, #0
 8009154:	d001      	beq.n	800915a <_strtod_l+0x2ea>
 8009156:	f1c8 0800 	rsb	r8, r8, #0
 800915a:	2d00      	cmp	r5, #0
 800915c:	d14e      	bne.n	80091fc <_strtod_l+0x38c>
 800915e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009160:	4308      	orrs	r0, r1
 8009162:	f47f aebe 	bne.w	8008ee2 <_strtod_l+0x72>
 8009166:	2b00      	cmp	r3, #0
 8009168:	f47f aed6 	bne.w	8008f18 <_strtod_l+0xa8>
 800916c:	2a69      	cmp	r2, #105	@ 0x69
 800916e:	d028      	beq.n	80091c2 <_strtod_l+0x352>
 8009170:	dc25      	bgt.n	80091be <_strtod_l+0x34e>
 8009172:	2a49      	cmp	r2, #73	@ 0x49
 8009174:	d025      	beq.n	80091c2 <_strtod_l+0x352>
 8009176:	2a4e      	cmp	r2, #78	@ 0x4e
 8009178:	f47f aece 	bne.w	8008f18 <_strtod_l+0xa8>
 800917c:	499b      	ldr	r1, [pc, #620]	@ (80093ec <_strtod_l+0x57c>)
 800917e:	a819      	add	r0, sp, #100	@ 0x64
 8009180:	f001 fbae 	bl	800a8e0 <__match>
 8009184:	2800      	cmp	r0, #0
 8009186:	f43f aec7 	beq.w	8008f18 <_strtod_l+0xa8>
 800918a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	2b28      	cmp	r3, #40	@ 0x28
 8009190:	d12e      	bne.n	80091f0 <_strtod_l+0x380>
 8009192:	4997      	ldr	r1, [pc, #604]	@ (80093f0 <_strtod_l+0x580>)
 8009194:	aa1c      	add	r2, sp, #112	@ 0x70
 8009196:	a819      	add	r0, sp, #100	@ 0x64
 8009198:	f001 fbb6 	bl	800a908 <__hexnan>
 800919c:	2805      	cmp	r0, #5
 800919e:	d127      	bne.n	80091f0 <_strtod_l+0x380>
 80091a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80091a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80091a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80091aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80091ae:	e698      	b.n	8008ee2 <_strtod_l+0x72>
 80091b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80091b2:	fb08 2101 	mla	r1, r8, r1, r2
 80091b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80091ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80091bc:	e7b5      	b.n	800912a <_strtod_l+0x2ba>
 80091be:	2a6e      	cmp	r2, #110	@ 0x6e
 80091c0:	e7da      	b.n	8009178 <_strtod_l+0x308>
 80091c2:	498c      	ldr	r1, [pc, #560]	@ (80093f4 <_strtod_l+0x584>)
 80091c4:	a819      	add	r0, sp, #100	@ 0x64
 80091c6:	f001 fb8b 	bl	800a8e0 <__match>
 80091ca:	2800      	cmp	r0, #0
 80091cc:	f43f aea4 	beq.w	8008f18 <_strtod_l+0xa8>
 80091d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091d2:	4989      	ldr	r1, [pc, #548]	@ (80093f8 <_strtod_l+0x588>)
 80091d4:	3b01      	subs	r3, #1
 80091d6:	a819      	add	r0, sp, #100	@ 0x64
 80091d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80091da:	f001 fb81 	bl	800a8e0 <__match>
 80091de:	b910      	cbnz	r0, 80091e6 <_strtod_l+0x376>
 80091e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091e2:	3301      	adds	r3, #1
 80091e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80091e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009408 <_strtod_l+0x598>
 80091ea:	f04f 0a00 	mov.w	sl, #0
 80091ee:	e678      	b.n	8008ee2 <_strtod_l+0x72>
 80091f0:	4882      	ldr	r0, [pc, #520]	@ (80093fc <_strtod_l+0x58c>)
 80091f2:	f001 f8c9 	bl	800a388 <nan>
 80091f6:	ec5b ab10 	vmov	sl, fp, d0
 80091fa:	e672      	b.n	8008ee2 <_strtod_l+0x72>
 80091fc:	eba8 0309 	sub.w	r3, r8, r9
 8009200:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009202:	9309      	str	r3, [sp, #36]	@ 0x24
 8009204:	2f00      	cmp	r7, #0
 8009206:	bf08      	it	eq
 8009208:	462f      	moveq	r7, r5
 800920a:	2d10      	cmp	r5, #16
 800920c:	462c      	mov	r4, r5
 800920e:	bfa8      	it	ge
 8009210:	2410      	movge	r4, #16
 8009212:	f7f7 f977 	bl	8000504 <__aeabi_ui2d>
 8009216:	2d09      	cmp	r5, #9
 8009218:	4682      	mov	sl, r0
 800921a:	468b      	mov	fp, r1
 800921c:	dc13      	bgt.n	8009246 <_strtod_l+0x3d6>
 800921e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009220:	2b00      	cmp	r3, #0
 8009222:	f43f ae5e 	beq.w	8008ee2 <_strtod_l+0x72>
 8009226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009228:	dd78      	ble.n	800931c <_strtod_l+0x4ac>
 800922a:	2b16      	cmp	r3, #22
 800922c:	dc5f      	bgt.n	80092ee <_strtod_l+0x47e>
 800922e:	4974      	ldr	r1, [pc, #464]	@ (8009400 <_strtod_l+0x590>)
 8009230:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009234:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009238:	4652      	mov	r2, sl
 800923a:	465b      	mov	r3, fp
 800923c:	f7f7 f9dc 	bl	80005f8 <__aeabi_dmul>
 8009240:	4682      	mov	sl, r0
 8009242:	468b      	mov	fp, r1
 8009244:	e64d      	b.n	8008ee2 <_strtod_l+0x72>
 8009246:	4b6e      	ldr	r3, [pc, #440]	@ (8009400 <_strtod_l+0x590>)
 8009248:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800924c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009250:	f7f7 f9d2 	bl	80005f8 <__aeabi_dmul>
 8009254:	4682      	mov	sl, r0
 8009256:	9808      	ldr	r0, [sp, #32]
 8009258:	468b      	mov	fp, r1
 800925a:	f7f7 f953 	bl	8000504 <__aeabi_ui2d>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4650      	mov	r0, sl
 8009264:	4659      	mov	r1, fp
 8009266:	f7f7 f811 	bl	800028c <__adddf3>
 800926a:	2d0f      	cmp	r5, #15
 800926c:	4682      	mov	sl, r0
 800926e:	468b      	mov	fp, r1
 8009270:	ddd5      	ble.n	800921e <_strtod_l+0x3ae>
 8009272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009274:	1b2c      	subs	r4, r5, r4
 8009276:	441c      	add	r4, r3
 8009278:	2c00      	cmp	r4, #0
 800927a:	f340 8096 	ble.w	80093aa <_strtod_l+0x53a>
 800927e:	f014 030f 	ands.w	r3, r4, #15
 8009282:	d00a      	beq.n	800929a <_strtod_l+0x42a>
 8009284:	495e      	ldr	r1, [pc, #376]	@ (8009400 <_strtod_l+0x590>)
 8009286:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800928a:	4652      	mov	r2, sl
 800928c:	465b      	mov	r3, fp
 800928e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009292:	f7f7 f9b1 	bl	80005f8 <__aeabi_dmul>
 8009296:	4682      	mov	sl, r0
 8009298:	468b      	mov	fp, r1
 800929a:	f034 040f 	bics.w	r4, r4, #15
 800929e:	d073      	beq.n	8009388 <_strtod_l+0x518>
 80092a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80092a4:	dd48      	ble.n	8009338 <_strtod_l+0x4c8>
 80092a6:	2400      	movs	r4, #0
 80092a8:	46a0      	mov	r8, r4
 80092aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80092ac:	46a1      	mov	r9, r4
 80092ae:	9a05      	ldr	r2, [sp, #20]
 80092b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009408 <_strtod_l+0x598>
 80092b4:	2322      	movs	r3, #34	@ 0x22
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	f04f 0a00 	mov.w	sl, #0
 80092bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f43f ae0f 	beq.w	8008ee2 <_strtod_l+0x72>
 80092c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092c6:	9805      	ldr	r0, [sp, #20]
 80092c8:	f7ff f942 	bl	8008550 <_Bfree>
 80092cc:	9805      	ldr	r0, [sp, #20]
 80092ce:	4649      	mov	r1, r9
 80092d0:	f7ff f93e 	bl	8008550 <_Bfree>
 80092d4:	9805      	ldr	r0, [sp, #20]
 80092d6:	4641      	mov	r1, r8
 80092d8:	f7ff f93a 	bl	8008550 <_Bfree>
 80092dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092de:	9805      	ldr	r0, [sp, #20]
 80092e0:	f7ff f936 	bl	8008550 <_Bfree>
 80092e4:	9805      	ldr	r0, [sp, #20]
 80092e6:	4621      	mov	r1, r4
 80092e8:	f7ff f932 	bl	8008550 <_Bfree>
 80092ec:	e5f9      	b.n	8008ee2 <_strtod_l+0x72>
 80092ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80092f4:	4293      	cmp	r3, r2
 80092f6:	dbbc      	blt.n	8009272 <_strtod_l+0x402>
 80092f8:	4c41      	ldr	r4, [pc, #260]	@ (8009400 <_strtod_l+0x590>)
 80092fa:	f1c5 050f 	rsb	r5, r5, #15
 80092fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009302:	4652      	mov	r2, sl
 8009304:	465b      	mov	r3, fp
 8009306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800930a:	f7f7 f975 	bl	80005f8 <__aeabi_dmul>
 800930e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009310:	1b5d      	subs	r5, r3, r5
 8009312:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009316:	e9d4 2300 	ldrd	r2, r3, [r4]
 800931a:	e78f      	b.n	800923c <_strtod_l+0x3cc>
 800931c:	3316      	adds	r3, #22
 800931e:	dba8      	blt.n	8009272 <_strtod_l+0x402>
 8009320:	4b37      	ldr	r3, [pc, #220]	@ (8009400 <_strtod_l+0x590>)
 8009322:	eba9 0808 	sub.w	r8, r9, r8
 8009326:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800932a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800932e:	4650      	mov	r0, sl
 8009330:	4659      	mov	r1, fp
 8009332:	f7f7 fa8b 	bl	800084c <__aeabi_ddiv>
 8009336:	e783      	b.n	8009240 <_strtod_l+0x3d0>
 8009338:	4b32      	ldr	r3, [pc, #200]	@ (8009404 <_strtod_l+0x594>)
 800933a:	9308      	str	r3, [sp, #32]
 800933c:	2300      	movs	r3, #0
 800933e:	1124      	asrs	r4, r4, #4
 8009340:	4650      	mov	r0, sl
 8009342:	4659      	mov	r1, fp
 8009344:	461e      	mov	r6, r3
 8009346:	2c01      	cmp	r4, #1
 8009348:	dc21      	bgt.n	800938e <_strtod_l+0x51e>
 800934a:	b10b      	cbz	r3, 8009350 <_strtod_l+0x4e0>
 800934c:	4682      	mov	sl, r0
 800934e:	468b      	mov	fp, r1
 8009350:	492c      	ldr	r1, [pc, #176]	@ (8009404 <_strtod_l+0x594>)
 8009352:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009356:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800935a:	4652      	mov	r2, sl
 800935c:	465b      	mov	r3, fp
 800935e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009362:	f7f7 f949 	bl	80005f8 <__aeabi_dmul>
 8009366:	4b28      	ldr	r3, [pc, #160]	@ (8009408 <_strtod_l+0x598>)
 8009368:	460a      	mov	r2, r1
 800936a:	400b      	ands	r3, r1
 800936c:	4927      	ldr	r1, [pc, #156]	@ (800940c <_strtod_l+0x59c>)
 800936e:	428b      	cmp	r3, r1
 8009370:	4682      	mov	sl, r0
 8009372:	d898      	bhi.n	80092a6 <_strtod_l+0x436>
 8009374:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009378:	428b      	cmp	r3, r1
 800937a:	bf86      	itte	hi
 800937c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009410 <_strtod_l+0x5a0>
 8009380:	f04f 3aff 	movhi.w	sl, #4294967295
 8009384:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009388:	2300      	movs	r3, #0
 800938a:	9308      	str	r3, [sp, #32]
 800938c:	e07a      	b.n	8009484 <_strtod_l+0x614>
 800938e:	07e2      	lsls	r2, r4, #31
 8009390:	d505      	bpl.n	800939e <_strtod_l+0x52e>
 8009392:	9b08      	ldr	r3, [sp, #32]
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f7f7 f92e 	bl	80005f8 <__aeabi_dmul>
 800939c:	2301      	movs	r3, #1
 800939e:	9a08      	ldr	r2, [sp, #32]
 80093a0:	3208      	adds	r2, #8
 80093a2:	3601      	adds	r6, #1
 80093a4:	1064      	asrs	r4, r4, #1
 80093a6:	9208      	str	r2, [sp, #32]
 80093a8:	e7cd      	b.n	8009346 <_strtod_l+0x4d6>
 80093aa:	d0ed      	beq.n	8009388 <_strtod_l+0x518>
 80093ac:	4264      	negs	r4, r4
 80093ae:	f014 020f 	ands.w	r2, r4, #15
 80093b2:	d00a      	beq.n	80093ca <_strtod_l+0x55a>
 80093b4:	4b12      	ldr	r3, [pc, #72]	@ (8009400 <_strtod_l+0x590>)
 80093b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093ba:	4650      	mov	r0, sl
 80093bc:	4659      	mov	r1, fp
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	f7f7 fa43 	bl	800084c <__aeabi_ddiv>
 80093c6:	4682      	mov	sl, r0
 80093c8:	468b      	mov	fp, r1
 80093ca:	1124      	asrs	r4, r4, #4
 80093cc:	d0dc      	beq.n	8009388 <_strtod_l+0x518>
 80093ce:	2c1f      	cmp	r4, #31
 80093d0:	dd20      	ble.n	8009414 <_strtod_l+0x5a4>
 80093d2:	2400      	movs	r4, #0
 80093d4:	46a0      	mov	r8, r4
 80093d6:	940a      	str	r4, [sp, #40]	@ 0x28
 80093d8:	46a1      	mov	r9, r4
 80093da:	9a05      	ldr	r2, [sp, #20]
 80093dc:	2322      	movs	r3, #34	@ 0x22
 80093de:	f04f 0a00 	mov.w	sl, #0
 80093e2:	f04f 0b00 	mov.w	fp, #0
 80093e6:	6013      	str	r3, [r2, #0]
 80093e8:	e768      	b.n	80092bc <_strtod_l+0x44c>
 80093ea:	bf00      	nop
 80093ec:	0801759c 	.word	0x0801759c
 80093f0:	080177d4 	.word	0x080177d4
 80093f4:	08017594 	.word	0x08017594
 80093f8:	08017607 	.word	0x08017607
 80093fc:	08017603 	.word	0x08017603
 8009400:	08017708 	.word	0x08017708
 8009404:	080176e0 	.word	0x080176e0
 8009408:	7ff00000 	.word	0x7ff00000
 800940c:	7ca00000 	.word	0x7ca00000
 8009410:	7fefffff 	.word	0x7fefffff
 8009414:	f014 0310 	ands.w	r3, r4, #16
 8009418:	bf18      	it	ne
 800941a:	236a      	movne	r3, #106	@ 0x6a
 800941c:	4ea9      	ldr	r6, [pc, #676]	@ (80096c4 <_strtod_l+0x854>)
 800941e:	9308      	str	r3, [sp, #32]
 8009420:	4650      	mov	r0, sl
 8009422:	4659      	mov	r1, fp
 8009424:	2300      	movs	r3, #0
 8009426:	07e2      	lsls	r2, r4, #31
 8009428:	d504      	bpl.n	8009434 <_strtod_l+0x5c4>
 800942a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800942e:	f7f7 f8e3 	bl	80005f8 <__aeabi_dmul>
 8009432:	2301      	movs	r3, #1
 8009434:	1064      	asrs	r4, r4, #1
 8009436:	f106 0608 	add.w	r6, r6, #8
 800943a:	d1f4      	bne.n	8009426 <_strtod_l+0x5b6>
 800943c:	b10b      	cbz	r3, 8009442 <_strtod_l+0x5d2>
 800943e:	4682      	mov	sl, r0
 8009440:	468b      	mov	fp, r1
 8009442:	9b08      	ldr	r3, [sp, #32]
 8009444:	b1b3      	cbz	r3, 8009474 <_strtod_l+0x604>
 8009446:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800944a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800944e:	2b00      	cmp	r3, #0
 8009450:	4659      	mov	r1, fp
 8009452:	dd0f      	ble.n	8009474 <_strtod_l+0x604>
 8009454:	2b1f      	cmp	r3, #31
 8009456:	dd55      	ble.n	8009504 <_strtod_l+0x694>
 8009458:	2b34      	cmp	r3, #52	@ 0x34
 800945a:	bfde      	ittt	le
 800945c:	f04f 33ff 	movle.w	r3, #4294967295
 8009460:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009464:	4093      	lslle	r3, r2
 8009466:	f04f 0a00 	mov.w	sl, #0
 800946a:	bfcc      	ite	gt
 800946c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009470:	ea03 0b01 	andle.w	fp, r3, r1
 8009474:	2200      	movs	r2, #0
 8009476:	2300      	movs	r3, #0
 8009478:	4650      	mov	r0, sl
 800947a:	4659      	mov	r1, fp
 800947c:	f7f7 fb24 	bl	8000ac8 <__aeabi_dcmpeq>
 8009480:	2800      	cmp	r0, #0
 8009482:	d1a6      	bne.n	80093d2 <_strtod_l+0x562>
 8009484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800948a:	9805      	ldr	r0, [sp, #20]
 800948c:	462b      	mov	r3, r5
 800948e:	463a      	mov	r2, r7
 8009490:	f7ff f8c6 	bl	8008620 <__s2b>
 8009494:	900a      	str	r0, [sp, #40]	@ 0x28
 8009496:	2800      	cmp	r0, #0
 8009498:	f43f af05 	beq.w	80092a6 <_strtod_l+0x436>
 800949c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800949e:	2a00      	cmp	r2, #0
 80094a0:	eba9 0308 	sub.w	r3, r9, r8
 80094a4:	bfa8      	it	ge
 80094a6:	2300      	movge	r3, #0
 80094a8:	9312      	str	r3, [sp, #72]	@ 0x48
 80094aa:	2400      	movs	r4, #0
 80094ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80094b0:	9316      	str	r3, [sp, #88]	@ 0x58
 80094b2:	46a0      	mov	r8, r4
 80094b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094b6:	9805      	ldr	r0, [sp, #20]
 80094b8:	6859      	ldr	r1, [r3, #4]
 80094ba:	f7ff f809 	bl	80084d0 <_Balloc>
 80094be:	4681      	mov	r9, r0
 80094c0:	2800      	cmp	r0, #0
 80094c2:	f43f aef4 	beq.w	80092ae <_strtod_l+0x43e>
 80094c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094c8:	691a      	ldr	r2, [r3, #16]
 80094ca:	3202      	adds	r2, #2
 80094cc:	f103 010c 	add.w	r1, r3, #12
 80094d0:	0092      	lsls	r2, r2, #2
 80094d2:	300c      	adds	r0, #12
 80094d4:	f000 ff4a 	bl	800a36c <memcpy>
 80094d8:	ec4b ab10 	vmov	d0, sl, fp
 80094dc:	9805      	ldr	r0, [sp, #20]
 80094de:	aa1c      	add	r2, sp, #112	@ 0x70
 80094e0:	a91b      	add	r1, sp, #108	@ 0x6c
 80094e2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80094e6:	f7ff fbd7 	bl	8008c98 <__d2b>
 80094ea:	901a      	str	r0, [sp, #104]	@ 0x68
 80094ec:	2800      	cmp	r0, #0
 80094ee:	f43f aede 	beq.w	80092ae <_strtod_l+0x43e>
 80094f2:	9805      	ldr	r0, [sp, #20]
 80094f4:	2101      	movs	r1, #1
 80094f6:	f7ff f929 	bl	800874c <__i2b>
 80094fa:	4680      	mov	r8, r0
 80094fc:	b948      	cbnz	r0, 8009512 <_strtod_l+0x6a2>
 80094fe:	f04f 0800 	mov.w	r8, #0
 8009502:	e6d4      	b.n	80092ae <_strtod_l+0x43e>
 8009504:	f04f 32ff 	mov.w	r2, #4294967295
 8009508:	fa02 f303 	lsl.w	r3, r2, r3
 800950c:	ea03 0a0a 	and.w	sl, r3, sl
 8009510:	e7b0      	b.n	8009474 <_strtod_l+0x604>
 8009512:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009514:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009516:	2d00      	cmp	r5, #0
 8009518:	bfab      	itete	ge
 800951a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800951c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800951e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009520:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009522:	bfac      	ite	ge
 8009524:	18ef      	addge	r7, r5, r3
 8009526:	1b5e      	sublt	r6, r3, r5
 8009528:	9b08      	ldr	r3, [sp, #32]
 800952a:	1aed      	subs	r5, r5, r3
 800952c:	4415      	add	r5, r2
 800952e:	4b66      	ldr	r3, [pc, #408]	@ (80096c8 <_strtod_l+0x858>)
 8009530:	3d01      	subs	r5, #1
 8009532:	429d      	cmp	r5, r3
 8009534:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009538:	da50      	bge.n	80095dc <_strtod_l+0x76c>
 800953a:	1b5b      	subs	r3, r3, r5
 800953c:	2b1f      	cmp	r3, #31
 800953e:	eba2 0203 	sub.w	r2, r2, r3
 8009542:	f04f 0101 	mov.w	r1, #1
 8009546:	dc3d      	bgt.n	80095c4 <_strtod_l+0x754>
 8009548:	fa01 f303 	lsl.w	r3, r1, r3
 800954c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800954e:	2300      	movs	r3, #0
 8009550:	9310      	str	r3, [sp, #64]	@ 0x40
 8009552:	18bd      	adds	r5, r7, r2
 8009554:	9b08      	ldr	r3, [sp, #32]
 8009556:	42af      	cmp	r7, r5
 8009558:	4416      	add	r6, r2
 800955a:	441e      	add	r6, r3
 800955c:	463b      	mov	r3, r7
 800955e:	bfa8      	it	ge
 8009560:	462b      	movge	r3, r5
 8009562:	42b3      	cmp	r3, r6
 8009564:	bfa8      	it	ge
 8009566:	4633      	movge	r3, r6
 8009568:	2b00      	cmp	r3, #0
 800956a:	bfc2      	ittt	gt
 800956c:	1aed      	subgt	r5, r5, r3
 800956e:	1af6      	subgt	r6, r6, r3
 8009570:	1aff      	subgt	r7, r7, r3
 8009572:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009574:	2b00      	cmp	r3, #0
 8009576:	dd16      	ble.n	80095a6 <_strtod_l+0x736>
 8009578:	4641      	mov	r1, r8
 800957a:	9805      	ldr	r0, [sp, #20]
 800957c:	461a      	mov	r2, r3
 800957e:	f7ff f9a5 	bl	80088cc <__pow5mult>
 8009582:	4680      	mov	r8, r0
 8009584:	2800      	cmp	r0, #0
 8009586:	d0ba      	beq.n	80094fe <_strtod_l+0x68e>
 8009588:	4601      	mov	r1, r0
 800958a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800958c:	9805      	ldr	r0, [sp, #20]
 800958e:	f7ff f8f3 	bl	8008778 <__multiply>
 8009592:	900e      	str	r0, [sp, #56]	@ 0x38
 8009594:	2800      	cmp	r0, #0
 8009596:	f43f ae8a 	beq.w	80092ae <_strtod_l+0x43e>
 800959a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800959c:	9805      	ldr	r0, [sp, #20]
 800959e:	f7fe ffd7 	bl	8008550 <_Bfree>
 80095a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80095a6:	2d00      	cmp	r5, #0
 80095a8:	dc1d      	bgt.n	80095e6 <_strtod_l+0x776>
 80095aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	dd23      	ble.n	80095f8 <_strtod_l+0x788>
 80095b0:	4649      	mov	r1, r9
 80095b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80095b4:	9805      	ldr	r0, [sp, #20]
 80095b6:	f7ff f989 	bl	80088cc <__pow5mult>
 80095ba:	4681      	mov	r9, r0
 80095bc:	b9e0      	cbnz	r0, 80095f8 <_strtod_l+0x788>
 80095be:	f04f 0900 	mov.w	r9, #0
 80095c2:	e674      	b.n	80092ae <_strtod_l+0x43e>
 80095c4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80095c8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80095cc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80095d0:	35e2      	adds	r5, #226	@ 0xe2
 80095d2:	fa01 f305 	lsl.w	r3, r1, r5
 80095d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80095d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80095da:	e7ba      	b.n	8009552 <_strtod_l+0x6e2>
 80095dc:	2300      	movs	r3, #0
 80095de:	9310      	str	r3, [sp, #64]	@ 0x40
 80095e0:	2301      	movs	r3, #1
 80095e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095e4:	e7b5      	b.n	8009552 <_strtod_l+0x6e2>
 80095e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095e8:	9805      	ldr	r0, [sp, #20]
 80095ea:	462a      	mov	r2, r5
 80095ec:	f7ff f9c8 	bl	8008980 <__lshift>
 80095f0:	901a      	str	r0, [sp, #104]	@ 0x68
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d1d9      	bne.n	80095aa <_strtod_l+0x73a>
 80095f6:	e65a      	b.n	80092ae <_strtod_l+0x43e>
 80095f8:	2e00      	cmp	r6, #0
 80095fa:	dd07      	ble.n	800960c <_strtod_l+0x79c>
 80095fc:	4649      	mov	r1, r9
 80095fe:	9805      	ldr	r0, [sp, #20]
 8009600:	4632      	mov	r2, r6
 8009602:	f7ff f9bd 	bl	8008980 <__lshift>
 8009606:	4681      	mov	r9, r0
 8009608:	2800      	cmp	r0, #0
 800960a:	d0d8      	beq.n	80095be <_strtod_l+0x74e>
 800960c:	2f00      	cmp	r7, #0
 800960e:	dd08      	ble.n	8009622 <_strtod_l+0x7b2>
 8009610:	4641      	mov	r1, r8
 8009612:	9805      	ldr	r0, [sp, #20]
 8009614:	463a      	mov	r2, r7
 8009616:	f7ff f9b3 	bl	8008980 <__lshift>
 800961a:	4680      	mov	r8, r0
 800961c:	2800      	cmp	r0, #0
 800961e:	f43f ae46 	beq.w	80092ae <_strtod_l+0x43e>
 8009622:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009624:	9805      	ldr	r0, [sp, #20]
 8009626:	464a      	mov	r2, r9
 8009628:	f7ff fa32 	bl	8008a90 <__mdiff>
 800962c:	4604      	mov	r4, r0
 800962e:	2800      	cmp	r0, #0
 8009630:	f43f ae3d 	beq.w	80092ae <_strtod_l+0x43e>
 8009634:	68c3      	ldr	r3, [r0, #12]
 8009636:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009638:	2300      	movs	r3, #0
 800963a:	60c3      	str	r3, [r0, #12]
 800963c:	4641      	mov	r1, r8
 800963e:	f7ff fa0b 	bl	8008a58 <__mcmp>
 8009642:	2800      	cmp	r0, #0
 8009644:	da46      	bge.n	80096d4 <_strtod_l+0x864>
 8009646:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009648:	ea53 030a 	orrs.w	r3, r3, sl
 800964c:	d16c      	bne.n	8009728 <_strtod_l+0x8b8>
 800964e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009652:	2b00      	cmp	r3, #0
 8009654:	d168      	bne.n	8009728 <_strtod_l+0x8b8>
 8009656:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800965a:	0d1b      	lsrs	r3, r3, #20
 800965c:	051b      	lsls	r3, r3, #20
 800965e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009662:	d961      	bls.n	8009728 <_strtod_l+0x8b8>
 8009664:	6963      	ldr	r3, [r4, #20]
 8009666:	b913      	cbnz	r3, 800966e <_strtod_l+0x7fe>
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	2b01      	cmp	r3, #1
 800966c:	dd5c      	ble.n	8009728 <_strtod_l+0x8b8>
 800966e:	4621      	mov	r1, r4
 8009670:	2201      	movs	r2, #1
 8009672:	9805      	ldr	r0, [sp, #20]
 8009674:	f7ff f984 	bl	8008980 <__lshift>
 8009678:	4641      	mov	r1, r8
 800967a:	4604      	mov	r4, r0
 800967c:	f7ff f9ec 	bl	8008a58 <__mcmp>
 8009680:	2800      	cmp	r0, #0
 8009682:	dd51      	ble.n	8009728 <_strtod_l+0x8b8>
 8009684:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009688:	9a08      	ldr	r2, [sp, #32]
 800968a:	0d1b      	lsrs	r3, r3, #20
 800968c:	051b      	lsls	r3, r3, #20
 800968e:	2a00      	cmp	r2, #0
 8009690:	d06b      	beq.n	800976a <_strtod_l+0x8fa>
 8009692:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009696:	d868      	bhi.n	800976a <_strtod_l+0x8fa>
 8009698:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800969c:	f67f ae9d 	bls.w	80093da <_strtod_l+0x56a>
 80096a0:	4b0a      	ldr	r3, [pc, #40]	@ (80096cc <_strtod_l+0x85c>)
 80096a2:	4650      	mov	r0, sl
 80096a4:	4659      	mov	r1, fp
 80096a6:	2200      	movs	r2, #0
 80096a8:	f7f6 ffa6 	bl	80005f8 <__aeabi_dmul>
 80096ac:	4b08      	ldr	r3, [pc, #32]	@ (80096d0 <_strtod_l+0x860>)
 80096ae:	400b      	ands	r3, r1
 80096b0:	4682      	mov	sl, r0
 80096b2:	468b      	mov	fp, r1
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f47f ae05 	bne.w	80092c4 <_strtod_l+0x454>
 80096ba:	9a05      	ldr	r2, [sp, #20]
 80096bc:	2322      	movs	r3, #34	@ 0x22
 80096be:	6013      	str	r3, [r2, #0]
 80096c0:	e600      	b.n	80092c4 <_strtod_l+0x454>
 80096c2:	bf00      	nop
 80096c4:	08017800 	.word	0x08017800
 80096c8:	fffffc02 	.word	0xfffffc02
 80096cc:	39500000 	.word	0x39500000
 80096d0:	7ff00000 	.word	0x7ff00000
 80096d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80096d8:	d165      	bne.n	80097a6 <_strtod_l+0x936>
 80096da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80096dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096e0:	b35a      	cbz	r2, 800973a <_strtod_l+0x8ca>
 80096e2:	4a9f      	ldr	r2, [pc, #636]	@ (8009960 <_strtod_l+0xaf0>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d12b      	bne.n	8009740 <_strtod_l+0x8d0>
 80096e8:	9b08      	ldr	r3, [sp, #32]
 80096ea:	4651      	mov	r1, sl
 80096ec:	b303      	cbz	r3, 8009730 <_strtod_l+0x8c0>
 80096ee:	4b9d      	ldr	r3, [pc, #628]	@ (8009964 <_strtod_l+0xaf4>)
 80096f0:	465a      	mov	r2, fp
 80096f2:	4013      	ands	r3, r2
 80096f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80096f8:	f04f 32ff 	mov.w	r2, #4294967295
 80096fc:	d81b      	bhi.n	8009736 <_strtod_l+0x8c6>
 80096fe:	0d1b      	lsrs	r3, r3, #20
 8009700:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009704:	fa02 f303 	lsl.w	r3, r2, r3
 8009708:	4299      	cmp	r1, r3
 800970a:	d119      	bne.n	8009740 <_strtod_l+0x8d0>
 800970c:	4b96      	ldr	r3, [pc, #600]	@ (8009968 <_strtod_l+0xaf8>)
 800970e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009710:	429a      	cmp	r2, r3
 8009712:	d102      	bne.n	800971a <_strtod_l+0x8aa>
 8009714:	3101      	adds	r1, #1
 8009716:	f43f adca 	beq.w	80092ae <_strtod_l+0x43e>
 800971a:	4b92      	ldr	r3, [pc, #584]	@ (8009964 <_strtod_l+0xaf4>)
 800971c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800971e:	401a      	ands	r2, r3
 8009720:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009724:	f04f 0a00 	mov.w	sl, #0
 8009728:	9b08      	ldr	r3, [sp, #32]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1b8      	bne.n	80096a0 <_strtod_l+0x830>
 800972e:	e5c9      	b.n	80092c4 <_strtod_l+0x454>
 8009730:	f04f 33ff 	mov.w	r3, #4294967295
 8009734:	e7e8      	b.n	8009708 <_strtod_l+0x898>
 8009736:	4613      	mov	r3, r2
 8009738:	e7e6      	b.n	8009708 <_strtod_l+0x898>
 800973a:	ea53 030a 	orrs.w	r3, r3, sl
 800973e:	d0a1      	beq.n	8009684 <_strtod_l+0x814>
 8009740:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009742:	b1db      	cbz	r3, 800977c <_strtod_l+0x90c>
 8009744:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009746:	4213      	tst	r3, r2
 8009748:	d0ee      	beq.n	8009728 <_strtod_l+0x8b8>
 800974a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800974c:	9a08      	ldr	r2, [sp, #32]
 800974e:	4650      	mov	r0, sl
 8009750:	4659      	mov	r1, fp
 8009752:	b1bb      	cbz	r3, 8009784 <_strtod_l+0x914>
 8009754:	f7ff fb6e 	bl	8008e34 <sulp>
 8009758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800975c:	ec53 2b10 	vmov	r2, r3, d0
 8009760:	f7f6 fd94 	bl	800028c <__adddf3>
 8009764:	4682      	mov	sl, r0
 8009766:	468b      	mov	fp, r1
 8009768:	e7de      	b.n	8009728 <_strtod_l+0x8b8>
 800976a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800976e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009772:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009776:	f04f 3aff 	mov.w	sl, #4294967295
 800977a:	e7d5      	b.n	8009728 <_strtod_l+0x8b8>
 800977c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800977e:	ea13 0f0a 	tst.w	r3, sl
 8009782:	e7e1      	b.n	8009748 <_strtod_l+0x8d8>
 8009784:	f7ff fb56 	bl	8008e34 <sulp>
 8009788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800978c:	ec53 2b10 	vmov	r2, r3, d0
 8009790:	f7f6 fd7a 	bl	8000288 <__aeabi_dsub>
 8009794:	2200      	movs	r2, #0
 8009796:	2300      	movs	r3, #0
 8009798:	4682      	mov	sl, r0
 800979a:	468b      	mov	fp, r1
 800979c:	f7f7 f994 	bl	8000ac8 <__aeabi_dcmpeq>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d0c1      	beq.n	8009728 <_strtod_l+0x8b8>
 80097a4:	e619      	b.n	80093da <_strtod_l+0x56a>
 80097a6:	4641      	mov	r1, r8
 80097a8:	4620      	mov	r0, r4
 80097aa:	f7ff facd 	bl	8008d48 <__ratio>
 80097ae:	ec57 6b10 	vmov	r6, r7, d0
 80097b2:	2200      	movs	r2, #0
 80097b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80097b8:	4630      	mov	r0, r6
 80097ba:	4639      	mov	r1, r7
 80097bc:	f7f7 f998 	bl	8000af0 <__aeabi_dcmple>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	d06f      	beq.n	80098a4 <_strtod_l+0xa34>
 80097c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d17a      	bne.n	80098c0 <_strtod_l+0xa50>
 80097ca:	f1ba 0f00 	cmp.w	sl, #0
 80097ce:	d158      	bne.n	8009882 <_strtod_l+0xa12>
 80097d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d15a      	bne.n	8009890 <_strtod_l+0xa20>
 80097da:	4b64      	ldr	r3, [pc, #400]	@ (800996c <_strtod_l+0xafc>)
 80097dc:	2200      	movs	r2, #0
 80097de:	4630      	mov	r0, r6
 80097e0:	4639      	mov	r1, r7
 80097e2:	f7f7 f97b 	bl	8000adc <__aeabi_dcmplt>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d159      	bne.n	800989e <_strtod_l+0xa2e>
 80097ea:	4630      	mov	r0, r6
 80097ec:	4639      	mov	r1, r7
 80097ee:	4b60      	ldr	r3, [pc, #384]	@ (8009970 <_strtod_l+0xb00>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	f7f6 ff01 	bl	80005f8 <__aeabi_dmul>
 80097f6:	4606      	mov	r6, r0
 80097f8:	460f      	mov	r7, r1
 80097fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80097fe:	9606      	str	r6, [sp, #24]
 8009800:	9307      	str	r3, [sp, #28]
 8009802:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009806:	4d57      	ldr	r5, [pc, #348]	@ (8009964 <_strtod_l+0xaf4>)
 8009808:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800980c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800980e:	401d      	ands	r5, r3
 8009810:	4b58      	ldr	r3, [pc, #352]	@ (8009974 <_strtod_l+0xb04>)
 8009812:	429d      	cmp	r5, r3
 8009814:	f040 80b2 	bne.w	800997c <_strtod_l+0xb0c>
 8009818:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800981a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800981e:	ec4b ab10 	vmov	d0, sl, fp
 8009822:	f7ff f9c9 	bl	8008bb8 <__ulp>
 8009826:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800982a:	ec51 0b10 	vmov	r0, r1, d0
 800982e:	f7f6 fee3 	bl	80005f8 <__aeabi_dmul>
 8009832:	4652      	mov	r2, sl
 8009834:	465b      	mov	r3, fp
 8009836:	f7f6 fd29 	bl	800028c <__adddf3>
 800983a:	460b      	mov	r3, r1
 800983c:	4949      	ldr	r1, [pc, #292]	@ (8009964 <_strtod_l+0xaf4>)
 800983e:	4a4e      	ldr	r2, [pc, #312]	@ (8009978 <_strtod_l+0xb08>)
 8009840:	4019      	ands	r1, r3
 8009842:	4291      	cmp	r1, r2
 8009844:	4682      	mov	sl, r0
 8009846:	d942      	bls.n	80098ce <_strtod_l+0xa5e>
 8009848:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800984a:	4b47      	ldr	r3, [pc, #284]	@ (8009968 <_strtod_l+0xaf8>)
 800984c:	429a      	cmp	r2, r3
 800984e:	d103      	bne.n	8009858 <_strtod_l+0x9e8>
 8009850:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009852:	3301      	adds	r3, #1
 8009854:	f43f ad2b 	beq.w	80092ae <_strtod_l+0x43e>
 8009858:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009968 <_strtod_l+0xaf8>
 800985c:	f04f 3aff 	mov.w	sl, #4294967295
 8009860:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009862:	9805      	ldr	r0, [sp, #20]
 8009864:	f7fe fe74 	bl	8008550 <_Bfree>
 8009868:	9805      	ldr	r0, [sp, #20]
 800986a:	4649      	mov	r1, r9
 800986c:	f7fe fe70 	bl	8008550 <_Bfree>
 8009870:	9805      	ldr	r0, [sp, #20]
 8009872:	4641      	mov	r1, r8
 8009874:	f7fe fe6c 	bl	8008550 <_Bfree>
 8009878:	9805      	ldr	r0, [sp, #20]
 800987a:	4621      	mov	r1, r4
 800987c:	f7fe fe68 	bl	8008550 <_Bfree>
 8009880:	e618      	b.n	80094b4 <_strtod_l+0x644>
 8009882:	f1ba 0f01 	cmp.w	sl, #1
 8009886:	d103      	bne.n	8009890 <_strtod_l+0xa20>
 8009888:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800988a:	2b00      	cmp	r3, #0
 800988c:	f43f ada5 	beq.w	80093da <_strtod_l+0x56a>
 8009890:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009940 <_strtod_l+0xad0>
 8009894:	4f35      	ldr	r7, [pc, #212]	@ (800996c <_strtod_l+0xafc>)
 8009896:	ed8d 7b06 	vstr	d7, [sp, #24]
 800989a:	2600      	movs	r6, #0
 800989c:	e7b1      	b.n	8009802 <_strtod_l+0x992>
 800989e:	4f34      	ldr	r7, [pc, #208]	@ (8009970 <_strtod_l+0xb00>)
 80098a0:	2600      	movs	r6, #0
 80098a2:	e7aa      	b.n	80097fa <_strtod_l+0x98a>
 80098a4:	4b32      	ldr	r3, [pc, #200]	@ (8009970 <_strtod_l+0xb00>)
 80098a6:	4630      	mov	r0, r6
 80098a8:	4639      	mov	r1, r7
 80098aa:	2200      	movs	r2, #0
 80098ac:	f7f6 fea4 	bl	80005f8 <__aeabi_dmul>
 80098b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098b2:	4606      	mov	r6, r0
 80098b4:	460f      	mov	r7, r1
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d09f      	beq.n	80097fa <_strtod_l+0x98a>
 80098ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80098be:	e7a0      	b.n	8009802 <_strtod_l+0x992>
 80098c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009948 <_strtod_l+0xad8>
 80098c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80098c8:	ec57 6b17 	vmov	r6, r7, d7
 80098cc:	e799      	b.n	8009802 <_strtod_l+0x992>
 80098ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80098d2:	9b08      	ldr	r3, [sp, #32]
 80098d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1c1      	bne.n	8009860 <_strtod_l+0x9f0>
 80098dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098e0:	0d1b      	lsrs	r3, r3, #20
 80098e2:	051b      	lsls	r3, r3, #20
 80098e4:	429d      	cmp	r5, r3
 80098e6:	d1bb      	bne.n	8009860 <_strtod_l+0x9f0>
 80098e8:	4630      	mov	r0, r6
 80098ea:	4639      	mov	r1, r7
 80098ec:	f7f7 f9cc 	bl	8000c88 <__aeabi_d2lz>
 80098f0:	f7f6 fe54 	bl	800059c <__aeabi_l2d>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	4630      	mov	r0, r6
 80098fa:	4639      	mov	r1, r7
 80098fc:	f7f6 fcc4 	bl	8000288 <__aeabi_dsub>
 8009900:	460b      	mov	r3, r1
 8009902:	4602      	mov	r2, r0
 8009904:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009908:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800990c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800990e:	ea46 060a 	orr.w	r6, r6, sl
 8009912:	431e      	orrs	r6, r3
 8009914:	d06f      	beq.n	80099f6 <_strtod_l+0xb86>
 8009916:	a30e      	add	r3, pc, #56	@ (adr r3, 8009950 <_strtod_l+0xae0>)
 8009918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991c:	f7f7 f8de 	bl	8000adc <__aeabi_dcmplt>
 8009920:	2800      	cmp	r0, #0
 8009922:	f47f accf 	bne.w	80092c4 <_strtod_l+0x454>
 8009926:	a30c      	add	r3, pc, #48	@ (adr r3, 8009958 <_strtod_l+0xae8>)
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009930:	f7f7 f8f2 	bl	8000b18 <__aeabi_dcmpgt>
 8009934:	2800      	cmp	r0, #0
 8009936:	d093      	beq.n	8009860 <_strtod_l+0x9f0>
 8009938:	e4c4      	b.n	80092c4 <_strtod_l+0x454>
 800993a:	bf00      	nop
 800993c:	f3af 8000 	nop.w
 8009940:	00000000 	.word	0x00000000
 8009944:	bff00000 	.word	0xbff00000
 8009948:	00000000 	.word	0x00000000
 800994c:	3ff00000 	.word	0x3ff00000
 8009950:	94a03595 	.word	0x94a03595
 8009954:	3fdfffff 	.word	0x3fdfffff
 8009958:	35afe535 	.word	0x35afe535
 800995c:	3fe00000 	.word	0x3fe00000
 8009960:	000fffff 	.word	0x000fffff
 8009964:	7ff00000 	.word	0x7ff00000
 8009968:	7fefffff 	.word	0x7fefffff
 800996c:	3ff00000 	.word	0x3ff00000
 8009970:	3fe00000 	.word	0x3fe00000
 8009974:	7fe00000 	.word	0x7fe00000
 8009978:	7c9fffff 	.word	0x7c9fffff
 800997c:	9b08      	ldr	r3, [sp, #32]
 800997e:	b323      	cbz	r3, 80099ca <_strtod_l+0xb5a>
 8009980:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009984:	d821      	bhi.n	80099ca <_strtod_l+0xb5a>
 8009986:	a328      	add	r3, pc, #160	@ (adr r3, 8009a28 <_strtod_l+0xbb8>)
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	4630      	mov	r0, r6
 800998e:	4639      	mov	r1, r7
 8009990:	f7f7 f8ae 	bl	8000af0 <__aeabi_dcmple>
 8009994:	b1a0      	cbz	r0, 80099c0 <_strtod_l+0xb50>
 8009996:	4639      	mov	r1, r7
 8009998:	4630      	mov	r0, r6
 800999a:	f7f7 f905 	bl	8000ba8 <__aeabi_d2uiz>
 800999e:	2801      	cmp	r0, #1
 80099a0:	bf38      	it	cc
 80099a2:	2001      	movcc	r0, #1
 80099a4:	f7f6 fdae 	bl	8000504 <__aeabi_ui2d>
 80099a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099aa:	4606      	mov	r6, r0
 80099ac:	460f      	mov	r7, r1
 80099ae:	b9fb      	cbnz	r3, 80099f0 <_strtod_l+0xb80>
 80099b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80099b4:	9014      	str	r0, [sp, #80]	@ 0x50
 80099b6:	9315      	str	r3, [sp, #84]	@ 0x54
 80099b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80099bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80099c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80099c6:	1b5b      	subs	r3, r3, r5
 80099c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80099ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80099ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80099d2:	f7ff f8f1 	bl	8008bb8 <__ulp>
 80099d6:	4650      	mov	r0, sl
 80099d8:	ec53 2b10 	vmov	r2, r3, d0
 80099dc:	4659      	mov	r1, fp
 80099de:	f7f6 fe0b 	bl	80005f8 <__aeabi_dmul>
 80099e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80099e6:	f7f6 fc51 	bl	800028c <__adddf3>
 80099ea:	4682      	mov	sl, r0
 80099ec:	468b      	mov	fp, r1
 80099ee:	e770      	b.n	80098d2 <_strtod_l+0xa62>
 80099f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80099f4:	e7e0      	b.n	80099b8 <_strtod_l+0xb48>
 80099f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009a30 <_strtod_l+0xbc0>)
 80099f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fc:	f7f7 f86e 	bl	8000adc <__aeabi_dcmplt>
 8009a00:	e798      	b.n	8009934 <_strtod_l+0xac4>
 8009a02:	2300      	movs	r3, #0
 8009a04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a06:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009a08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a0a:	6013      	str	r3, [r2, #0]
 8009a0c:	f7ff ba6d 	b.w	8008eea <_strtod_l+0x7a>
 8009a10:	2a65      	cmp	r2, #101	@ 0x65
 8009a12:	f43f ab66 	beq.w	80090e2 <_strtod_l+0x272>
 8009a16:	2a45      	cmp	r2, #69	@ 0x45
 8009a18:	f43f ab63 	beq.w	80090e2 <_strtod_l+0x272>
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	f7ff bb9e 	b.w	800915e <_strtod_l+0x2ee>
 8009a22:	bf00      	nop
 8009a24:	f3af 8000 	nop.w
 8009a28:	ffc00000 	.word	0xffc00000
 8009a2c:	41dfffff 	.word	0x41dfffff
 8009a30:	94a03595 	.word	0x94a03595
 8009a34:	3fcfffff 	.word	0x3fcfffff

08009a38 <_strtod_r>:
 8009a38:	4b01      	ldr	r3, [pc, #4]	@ (8009a40 <_strtod_r+0x8>)
 8009a3a:	f7ff ba19 	b.w	8008e70 <_strtod_l>
 8009a3e:	bf00      	nop
 8009a40:	2000008c 	.word	0x2000008c

08009a44 <_strtol_l.constprop.0>:
 8009a44:	2b24      	cmp	r3, #36	@ 0x24
 8009a46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a4a:	4686      	mov	lr, r0
 8009a4c:	4690      	mov	r8, r2
 8009a4e:	d801      	bhi.n	8009a54 <_strtol_l.constprop.0+0x10>
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d106      	bne.n	8009a62 <_strtol_l.constprop.0+0x1e>
 8009a54:	f7fd fd9e 	bl	8007594 <__errno>
 8009a58:	2316      	movs	r3, #22
 8009a5a:	6003      	str	r3, [r0, #0]
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a62:	4834      	ldr	r0, [pc, #208]	@ (8009b34 <_strtol_l.constprop.0+0xf0>)
 8009a64:	460d      	mov	r5, r1
 8009a66:	462a      	mov	r2, r5
 8009a68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a6c:	5d06      	ldrb	r6, [r0, r4]
 8009a6e:	f016 0608 	ands.w	r6, r6, #8
 8009a72:	d1f8      	bne.n	8009a66 <_strtol_l.constprop.0+0x22>
 8009a74:	2c2d      	cmp	r4, #45	@ 0x2d
 8009a76:	d12d      	bne.n	8009ad4 <_strtol_l.constprop.0+0x90>
 8009a78:	782c      	ldrb	r4, [r5, #0]
 8009a7a:	2601      	movs	r6, #1
 8009a7c:	1c95      	adds	r5, r2, #2
 8009a7e:	f033 0210 	bics.w	r2, r3, #16
 8009a82:	d109      	bne.n	8009a98 <_strtol_l.constprop.0+0x54>
 8009a84:	2c30      	cmp	r4, #48	@ 0x30
 8009a86:	d12a      	bne.n	8009ade <_strtol_l.constprop.0+0x9a>
 8009a88:	782a      	ldrb	r2, [r5, #0]
 8009a8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a8e:	2a58      	cmp	r2, #88	@ 0x58
 8009a90:	d125      	bne.n	8009ade <_strtol_l.constprop.0+0x9a>
 8009a92:	786c      	ldrb	r4, [r5, #1]
 8009a94:	2310      	movs	r3, #16
 8009a96:	3502      	adds	r5, #2
 8009a98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009a9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	fbbc f9f3 	udiv	r9, ip, r3
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	fb03 ca19 	mls	sl, r3, r9, ip
 8009aac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009ab0:	2f09      	cmp	r7, #9
 8009ab2:	d81b      	bhi.n	8009aec <_strtol_l.constprop.0+0xa8>
 8009ab4:	463c      	mov	r4, r7
 8009ab6:	42a3      	cmp	r3, r4
 8009ab8:	dd27      	ble.n	8009b0a <_strtol_l.constprop.0+0xc6>
 8009aba:	1c57      	adds	r7, r2, #1
 8009abc:	d007      	beq.n	8009ace <_strtol_l.constprop.0+0x8a>
 8009abe:	4581      	cmp	r9, r0
 8009ac0:	d320      	bcc.n	8009b04 <_strtol_l.constprop.0+0xc0>
 8009ac2:	d101      	bne.n	8009ac8 <_strtol_l.constprop.0+0x84>
 8009ac4:	45a2      	cmp	sl, r4
 8009ac6:	db1d      	blt.n	8009b04 <_strtol_l.constprop.0+0xc0>
 8009ac8:	fb00 4003 	mla	r0, r0, r3, r4
 8009acc:	2201      	movs	r2, #1
 8009ace:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ad2:	e7eb      	b.n	8009aac <_strtol_l.constprop.0+0x68>
 8009ad4:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ad6:	bf04      	itt	eq
 8009ad8:	782c      	ldrbeq	r4, [r5, #0]
 8009ada:	1c95      	addeq	r5, r2, #2
 8009adc:	e7cf      	b.n	8009a7e <_strtol_l.constprop.0+0x3a>
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1da      	bne.n	8009a98 <_strtol_l.constprop.0+0x54>
 8009ae2:	2c30      	cmp	r4, #48	@ 0x30
 8009ae4:	bf0c      	ite	eq
 8009ae6:	2308      	moveq	r3, #8
 8009ae8:	230a      	movne	r3, #10
 8009aea:	e7d5      	b.n	8009a98 <_strtol_l.constprop.0+0x54>
 8009aec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009af0:	2f19      	cmp	r7, #25
 8009af2:	d801      	bhi.n	8009af8 <_strtol_l.constprop.0+0xb4>
 8009af4:	3c37      	subs	r4, #55	@ 0x37
 8009af6:	e7de      	b.n	8009ab6 <_strtol_l.constprop.0+0x72>
 8009af8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009afc:	2f19      	cmp	r7, #25
 8009afe:	d804      	bhi.n	8009b0a <_strtol_l.constprop.0+0xc6>
 8009b00:	3c57      	subs	r4, #87	@ 0x57
 8009b02:	e7d8      	b.n	8009ab6 <_strtol_l.constprop.0+0x72>
 8009b04:	f04f 32ff 	mov.w	r2, #4294967295
 8009b08:	e7e1      	b.n	8009ace <_strtol_l.constprop.0+0x8a>
 8009b0a:	1c53      	adds	r3, r2, #1
 8009b0c:	d108      	bne.n	8009b20 <_strtol_l.constprop.0+0xdc>
 8009b0e:	2322      	movs	r3, #34	@ 0x22
 8009b10:	f8ce 3000 	str.w	r3, [lr]
 8009b14:	4660      	mov	r0, ip
 8009b16:	f1b8 0f00 	cmp.w	r8, #0
 8009b1a:	d0a0      	beq.n	8009a5e <_strtol_l.constprop.0+0x1a>
 8009b1c:	1e69      	subs	r1, r5, #1
 8009b1e:	e006      	b.n	8009b2e <_strtol_l.constprop.0+0xea>
 8009b20:	b106      	cbz	r6, 8009b24 <_strtol_l.constprop.0+0xe0>
 8009b22:	4240      	negs	r0, r0
 8009b24:	f1b8 0f00 	cmp.w	r8, #0
 8009b28:	d099      	beq.n	8009a5e <_strtol_l.constprop.0+0x1a>
 8009b2a:	2a00      	cmp	r2, #0
 8009b2c:	d1f6      	bne.n	8009b1c <_strtol_l.constprop.0+0xd8>
 8009b2e:	f8c8 1000 	str.w	r1, [r8]
 8009b32:	e794      	b.n	8009a5e <_strtol_l.constprop.0+0x1a>
 8009b34:	08017829 	.word	0x08017829

08009b38 <_strtol_r>:
 8009b38:	f7ff bf84 	b.w	8009a44 <_strtol_l.constprop.0>

08009b3c <__ssputs_r>:
 8009b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b40:	688e      	ldr	r6, [r1, #8]
 8009b42:	461f      	mov	r7, r3
 8009b44:	42be      	cmp	r6, r7
 8009b46:	680b      	ldr	r3, [r1, #0]
 8009b48:	4682      	mov	sl, r0
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	4690      	mov	r8, r2
 8009b4e:	d82d      	bhi.n	8009bac <__ssputs_r+0x70>
 8009b50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b58:	d026      	beq.n	8009ba8 <__ssputs_r+0x6c>
 8009b5a:	6965      	ldr	r5, [r4, #20]
 8009b5c:	6909      	ldr	r1, [r1, #16]
 8009b5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b62:	eba3 0901 	sub.w	r9, r3, r1
 8009b66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b6a:	1c7b      	adds	r3, r7, #1
 8009b6c:	444b      	add	r3, r9
 8009b6e:	106d      	asrs	r5, r5, #1
 8009b70:	429d      	cmp	r5, r3
 8009b72:	bf38      	it	cc
 8009b74:	461d      	movcc	r5, r3
 8009b76:	0553      	lsls	r3, r2, #21
 8009b78:	d527      	bpl.n	8009bca <__ssputs_r+0x8e>
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	f7fe fc1c 	bl	80083b8 <_malloc_r>
 8009b80:	4606      	mov	r6, r0
 8009b82:	b360      	cbz	r0, 8009bde <__ssputs_r+0xa2>
 8009b84:	6921      	ldr	r1, [r4, #16]
 8009b86:	464a      	mov	r2, r9
 8009b88:	f000 fbf0 	bl	800a36c <memcpy>
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b96:	81a3      	strh	r3, [r4, #12]
 8009b98:	6126      	str	r6, [r4, #16]
 8009b9a:	6165      	str	r5, [r4, #20]
 8009b9c:	444e      	add	r6, r9
 8009b9e:	eba5 0509 	sub.w	r5, r5, r9
 8009ba2:	6026      	str	r6, [r4, #0]
 8009ba4:	60a5      	str	r5, [r4, #8]
 8009ba6:	463e      	mov	r6, r7
 8009ba8:	42be      	cmp	r6, r7
 8009baa:	d900      	bls.n	8009bae <__ssputs_r+0x72>
 8009bac:	463e      	mov	r6, r7
 8009bae:	6820      	ldr	r0, [r4, #0]
 8009bb0:	4632      	mov	r2, r6
 8009bb2:	4641      	mov	r1, r8
 8009bb4:	f000 fb7c 	bl	800a2b0 <memmove>
 8009bb8:	68a3      	ldr	r3, [r4, #8]
 8009bba:	1b9b      	subs	r3, r3, r6
 8009bbc:	60a3      	str	r3, [r4, #8]
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	4433      	add	r3, r6
 8009bc2:	6023      	str	r3, [r4, #0]
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bca:	462a      	mov	r2, r5
 8009bcc:	f000 ff49 	bl	800aa62 <_realloc_r>
 8009bd0:	4606      	mov	r6, r0
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d1e0      	bne.n	8009b98 <__ssputs_r+0x5c>
 8009bd6:	6921      	ldr	r1, [r4, #16]
 8009bd8:	4650      	mov	r0, sl
 8009bda:	f7fe fb79 	bl	80082d0 <_free_r>
 8009bde:	230c      	movs	r3, #12
 8009be0:	f8ca 3000 	str.w	r3, [sl]
 8009be4:	89a3      	ldrh	r3, [r4, #12]
 8009be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bea:	81a3      	strh	r3, [r4, #12]
 8009bec:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf0:	e7e9      	b.n	8009bc6 <__ssputs_r+0x8a>
	...

08009bf4 <_svfiprintf_r>:
 8009bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf8:	4698      	mov	r8, r3
 8009bfa:	898b      	ldrh	r3, [r1, #12]
 8009bfc:	061b      	lsls	r3, r3, #24
 8009bfe:	b09d      	sub	sp, #116	@ 0x74
 8009c00:	4607      	mov	r7, r0
 8009c02:	460d      	mov	r5, r1
 8009c04:	4614      	mov	r4, r2
 8009c06:	d510      	bpl.n	8009c2a <_svfiprintf_r+0x36>
 8009c08:	690b      	ldr	r3, [r1, #16]
 8009c0a:	b973      	cbnz	r3, 8009c2a <_svfiprintf_r+0x36>
 8009c0c:	2140      	movs	r1, #64	@ 0x40
 8009c0e:	f7fe fbd3 	bl	80083b8 <_malloc_r>
 8009c12:	6028      	str	r0, [r5, #0]
 8009c14:	6128      	str	r0, [r5, #16]
 8009c16:	b930      	cbnz	r0, 8009c26 <_svfiprintf_r+0x32>
 8009c18:	230c      	movs	r3, #12
 8009c1a:	603b      	str	r3, [r7, #0]
 8009c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c20:	b01d      	add	sp, #116	@ 0x74
 8009c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c26:	2340      	movs	r3, #64	@ 0x40
 8009c28:	616b      	str	r3, [r5, #20]
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c2e:	2320      	movs	r3, #32
 8009c30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c34:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c38:	2330      	movs	r3, #48	@ 0x30
 8009c3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009dd8 <_svfiprintf_r+0x1e4>
 8009c3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c42:	f04f 0901 	mov.w	r9, #1
 8009c46:	4623      	mov	r3, r4
 8009c48:	469a      	mov	sl, r3
 8009c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c4e:	b10a      	cbz	r2, 8009c54 <_svfiprintf_r+0x60>
 8009c50:	2a25      	cmp	r2, #37	@ 0x25
 8009c52:	d1f9      	bne.n	8009c48 <_svfiprintf_r+0x54>
 8009c54:	ebba 0b04 	subs.w	fp, sl, r4
 8009c58:	d00b      	beq.n	8009c72 <_svfiprintf_r+0x7e>
 8009c5a:	465b      	mov	r3, fp
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	4629      	mov	r1, r5
 8009c60:	4638      	mov	r0, r7
 8009c62:	f7ff ff6b 	bl	8009b3c <__ssputs_r>
 8009c66:	3001      	adds	r0, #1
 8009c68:	f000 80a7 	beq.w	8009dba <_svfiprintf_r+0x1c6>
 8009c6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c6e:	445a      	add	r2, fp
 8009c70:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c72:	f89a 3000 	ldrb.w	r3, [sl]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f000 809f 	beq.w	8009dba <_svfiprintf_r+0x1c6>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c86:	f10a 0a01 	add.w	sl, sl, #1
 8009c8a:	9304      	str	r3, [sp, #16]
 8009c8c:	9307      	str	r3, [sp, #28]
 8009c8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c92:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c94:	4654      	mov	r4, sl
 8009c96:	2205      	movs	r2, #5
 8009c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c9c:	484e      	ldr	r0, [pc, #312]	@ (8009dd8 <_svfiprintf_r+0x1e4>)
 8009c9e:	f7f6 fa97 	bl	80001d0 <memchr>
 8009ca2:	9a04      	ldr	r2, [sp, #16]
 8009ca4:	b9d8      	cbnz	r0, 8009cde <_svfiprintf_r+0xea>
 8009ca6:	06d0      	lsls	r0, r2, #27
 8009ca8:	bf44      	itt	mi
 8009caa:	2320      	movmi	r3, #32
 8009cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cb0:	0711      	lsls	r1, r2, #28
 8009cb2:	bf44      	itt	mi
 8009cb4:	232b      	movmi	r3, #43	@ 0x2b
 8009cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cba:	f89a 3000 	ldrb.w	r3, [sl]
 8009cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cc0:	d015      	beq.n	8009cee <_svfiprintf_r+0xfa>
 8009cc2:	9a07      	ldr	r2, [sp, #28]
 8009cc4:	4654      	mov	r4, sl
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	f04f 0c0a 	mov.w	ip, #10
 8009ccc:	4621      	mov	r1, r4
 8009cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cd2:	3b30      	subs	r3, #48	@ 0x30
 8009cd4:	2b09      	cmp	r3, #9
 8009cd6:	d94b      	bls.n	8009d70 <_svfiprintf_r+0x17c>
 8009cd8:	b1b0      	cbz	r0, 8009d08 <_svfiprintf_r+0x114>
 8009cda:	9207      	str	r2, [sp, #28]
 8009cdc:	e014      	b.n	8009d08 <_svfiprintf_r+0x114>
 8009cde:	eba0 0308 	sub.w	r3, r0, r8
 8009ce2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	9304      	str	r3, [sp, #16]
 8009cea:	46a2      	mov	sl, r4
 8009cec:	e7d2      	b.n	8009c94 <_svfiprintf_r+0xa0>
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	1d19      	adds	r1, r3, #4
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	9103      	str	r1, [sp, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	bfbb      	ittet	lt
 8009cfa:	425b      	neglt	r3, r3
 8009cfc:	f042 0202 	orrlt.w	r2, r2, #2
 8009d00:	9307      	strge	r3, [sp, #28]
 8009d02:	9307      	strlt	r3, [sp, #28]
 8009d04:	bfb8      	it	lt
 8009d06:	9204      	strlt	r2, [sp, #16]
 8009d08:	7823      	ldrb	r3, [r4, #0]
 8009d0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d0c:	d10a      	bne.n	8009d24 <_svfiprintf_r+0x130>
 8009d0e:	7863      	ldrb	r3, [r4, #1]
 8009d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d12:	d132      	bne.n	8009d7a <_svfiprintf_r+0x186>
 8009d14:	9b03      	ldr	r3, [sp, #12]
 8009d16:	1d1a      	adds	r2, r3, #4
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	9203      	str	r2, [sp, #12]
 8009d1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d20:	3402      	adds	r4, #2
 8009d22:	9305      	str	r3, [sp, #20]
 8009d24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009de8 <_svfiprintf_r+0x1f4>
 8009d28:	7821      	ldrb	r1, [r4, #0]
 8009d2a:	2203      	movs	r2, #3
 8009d2c:	4650      	mov	r0, sl
 8009d2e:	f7f6 fa4f 	bl	80001d0 <memchr>
 8009d32:	b138      	cbz	r0, 8009d44 <_svfiprintf_r+0x150>
 8009d34:	9b04      	ldr	r3, [sp, #16]
 8009d36:	eba0 000a 	sub.w	r0, r0, sl
 8009d3a:	2240      	movs	r2, #64	@ 0x40
 8009d3c:	4082      	lsls	r2, r0
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	3401      	adds	r4, #1
 8009d42:	9304      	str	r3, [sp, #16]
 8009d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d48:	4824      	ldr	r0, [pc, #144]	@ (8009ddc <_svfiprintf_r+0x1e8>)
 8009d4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d4e:	2206      	movs	r2, #6
 8009d50:	f7f6 fa3e 	bl	80001d0 <memchr>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d036      	beq.n	8009dc6 <_svfiprintf_r+0x1d2>
 8009d58:	4b21      	ldr	r3, [pc, #132]	@ (8009de0 <_svfiprintf_r+0x1ec>)
 8009d5a:	bb1b      	cbnz	r3, 8009da4 <_svfiprintf_r+0x1b0>
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	3307      	adds	r3, #7
 8009d60:	f023 0307 	bic.w	r3, r3, #7
 8009d64:	3308      	adds	r3, #8
 8009d66:	9303      	str	r3, [sp, #12]
 8009d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d6a:	4433      	add	r3, r6
 8009d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d6e:	e76a      	b.n	8009c46 <_svfiprintf_r+0x52>
 8009d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d74:	460c      	mov	r4, r1
 8009d76:	2001      	movs	r0, #1
 8009d78:	e7a8      	b.n	8009ccc <_svfiprintf_r+0xd8>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	3401      	adds	r4, #1
 8009d7e:	9305      	str	r3, [sp, #20]
 8009d80:	4619      	mov	r1, r3
 8009d82:	f04f 0c0a 	mov.w	ip, #10
 8009d86:	4620      	mov	r0, r4
 8009d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d8c:	3a30      	subs	r2, #48	@ 0x30
 8009d8e:	2a09      	cmp	r2, #9
 8009d90:	d903      	bls.n	8009d9a <_svfiprintf_r+0x1a6>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0c6      	beq.n	8009d24 <_svfiprintf_r+0x130>
 8009d96:	9105      	str	r1, [sp, #20]
 8009d98:	e7c4      	b.n	8009d24 <_svfiprintf_r+0x130>
 8009d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d9e:	4604      	mov	r4, r0
 8009da0:	2301      	movs	r3, #1
 8009da2:	e7f0      	b.n	8009d86 <_svfiprintf_r+0x192>
 8009da4:	ab03      	add	r3, sp, #12
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	462a      	mov	r2, r5
 8009daa:	4b0e      	ldr	r3, [pc, #56]	@ (8009de4 <_svfiprintf_r+0x1f0>)
 8009dac:	a904      	add	r1, sp, #16
 8009dae:	4638      	mov	r0, r7
 8009db0:	f7fc fba8 	bl	8006504 <_printf_float>
 8009db4:	1c42      	adds	r2, r0, #1
 8009db6:	4606      	mov	r6, r0
 8009db8:	d1d6      	bne.n	8009d68 <_svfiprintf_r+0x174>
 8009dba:	89ab      	ldrh	r3, [r5, #12]
 8009dbc:	065b      	lsls	r3, r3, #25
 8009dbe:	f53f af2d 	bmi.w	8009c1c <_svfiprintf_r+0x28>
 8009dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dc4:	e72c      	b.n	8009c20 <_svfiprintf_r+0x2c>
 8009dc6:	ab03      	add	r3, sp, #12
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	462a      	mov	r2, r5
 8009dcc:	4b05      	ldr	r3, [pc, #20]	@ (8009de4 <_svfiprintf_r+0x1f0>)
 8009dce:	a904      	add	r1, sp, #16
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	f7fc fe2f 	bl	8006a34 <_printf_i>
 8009dd6:	e7ed      	b.n	8009db4 <_svfiprintf_r+0x1c0>
 8009dd8:	08017929 	.word	0x08017929
 8009ddc:	08017933 	.word	0x08017933
 8009de0:	08006505 	.word	0x08006505
 8009de4:	08009b3d 	.word	0x08009b3d
 8009de8:	0801792f 	.word	0x0801792f

08009dec <__sfputc_r>:
 8009dec:	6893      	ldr	r3, [r2, #8]
 8009dee:	3b01      	subs	r3, #1
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	b410      	push	{r4}
 8009df4:	6093      	str	r3, [r2, #8]
 8009df6:	da08      	bge.n	8009e0a <__sfputc_r+0x1e>
 8009df8:	6994      	ldr	r4, [r2, #24]
 8009dfa:	42a3      	cmp	r3, r4
 8009dfc:	db01      	blt.n	8009e02 <__sfputc_r+0x16>
 8009dfe:	290a      	cmp	r1, #10
 8009e00:	d103      	bne.n	8009e0a <__sfputc_r+0x1e>
 8009e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e06:	f7fd bade 	b.w	80073c6 <__swbuf_r>
 8009e0a:	6813      	ldr	r3, [r2, #0]
 8009e0c:	1c58      	adds	r0, r3, #1
 8009e0e:	6010      	str	r0, [r2, #0]
 8009e10:	7019      	strb	r1, [r3, #0]
 8009e12:	4608      	mov	r0, r1
 8009e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <__sfputs_r>:
 8009e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	460f      	mov	r7, r1
 8009e20:	4614      	mov	r4, r2
 8009e22:	18d5      	adds	r5, r2, r3
 8009e24:	42ac      	cmp	r4, r5
 8009e26:	d101      	bne.n	8009e2c <__sfputs_r+0x12>
 8009e28:	2000      	movs	r0, #0
 8009e2a:	e007      	b.n	8009e3c <__sfputs_r+0x22>
 8009e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e30:	463a      	mov	r2, r7
 8009e32:	4630      	mov	r0, r6
 8009e34:	f7ff ffda 	bl	8009dec <__sfputc_r>
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	d1f3      	bne.n	8009e24 <__sfputs_r+0xa>
 8009e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e40 <_vfiprintf_r>:
 8009e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e44:	460d      	mov	r5, r1
 8009e46:	b09d      	sub	sp, #116	@ 0x74
 8009e48:	4614      	mov	r4, r2
 8009e4a:	4698      	mov	r8, r3
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	b118      	cbz	r0, 8009e58 <_vfiprintf_r+0x18>
 8009e50:	6a03      	ldr	r3, [r0, #32]
 8009e52:	b90b      	cbnz	r3, 8009e58 <_vfiprintf_r+0x18>
 8009e54:	f7fd f9ae 	bl	80071b4 <__sinit>
 8009e58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e5a:	07d9      	lsls	r1, r3, #31
 8009e5c:	d405      	bmi.n	8009e6a <_vfiprintf_r+0x2a>
 8009e5e:	89ab      	ldrh	r3, [r5, #12]
 8009e60:	059a      	lsls	r2, r3, #22
 8009e62:	d402      	bmi.n	8009e6a <_vfiprintf_r+0x2a>
 8009e64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e66:	f7fd fbc0 	bl	80075ea <__retarget_lock_acquire_recursive>
 8009e6a:	89ab      	ldrh	r3, [r5, #12]
 8009e6c:	071b      	lsls	r3, r3, #28
 8009e6e:	d501      	bpl.n	8009e74 <_vfiprintf_r+0x34>
 8009e70:	692b      	ldr	r3, [r5, #16]
 8009e72:	b99b      	cbnz	r3, 8009e9c <_vfiprintf_r+0x5c>
 8009e74:	4629      	mov	r1, r5
 8009e76:	4630      	mov	r0, r6
 8009e78:	f7fd fae4 	bl	8007444 <__swsetup_r>
 8009e7c:	b170      	cbz	r0, 8009e9c <_vfiprintf_r+0x5c>
 8009e7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e80:	07dc      	lsls	r4, r3, #31
 8009e82:	d504      	bpl.n	8009e8e <_vfiprintf_r+0x4e>
 8009e84:	f04f 30ff 	mov.w	r0, #4294967295
 8009e88:	b01d      	add	sp, #116	@ 0x74
 8009e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8e:	89ab      	ldrh	r3, [r5, #12]
 8009e90:	0598      	lsls	r0, r3, #22
 8009e92:	d4f7      	bmi.n	8009e84 <_vfiprintf_r+0x44>
 8009e94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e96:	f7fd fba9 	bl	80075ec <__retarget_lock_release_recursive>
 8009e9a:	e7f3      	b.n	8009e84 <_vfiprintf_r+0x44>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ea0:	2320      	movs	r3, #32
 8009ea2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eaa:	2330      	movs	r3, #48	@ 0x30
 8009eac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a05c <_vfiprintf_r+0x21c>
 8009eb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009eb4:	f04f 0901 	mov.w	r9, #1
 8009eb8:	4623      	mov	r3, r4
 8009eba:	469a      	mov	sl, r3
 8009ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ec0:	b10a      	cbz	r2, 8009ec6 <_vfiprintf_r+0x86>
 8009ec2:	2a25      	cmp	r2, #37	@ 0x25
 8009ec4:	d1f9      	bne.n	8009eba <_vfiprintf_r+0x7a>
 8009ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8009eca:	d00b      	beq.n	8009ee4 <_vfiprintf_r+0xa4>
 8009ecc:	465b      	mov	r3, fp
 8009ece:	4622      	mov	r2, r4
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f7ff ffa1 	bl	8009e1a <__sfputs_r>
 8009ed8:	3001      	adds	r0, #1
 8009eda:	f000 80a7 	beq.w	800a02c <_vfiprintf_r+0x1ec>
 8009ede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ee0:	445a      	add	r2, fp
 8009ee2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f000 809f 	beq.w	800a02c <_vfiprintf_r+0x1ec>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ef8:	f10a 0a01 	add.w	sl, sl, #1
 8009efc:	9304      	str	r3, [sp, #16]
 8009efe:	9307      	str	r3, [sp, #28]
 8009f00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f04:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f06:	4654      	mov	r4, sl
 8009f08:	2205      	movs	r2, #5
 8009f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0e:	4853      	ldr	r0, [pc, #332]	@ (800a05c <_vfiprintf_r+0x21c>)
 8009f10:	f7f6 f95e 	bl	80001d0 <memchr>
 8009f14:	9a04      	ldr	r2, [sp, #16]
 8009f16:	b9d8      	cbnz	r0, 8009f50 <_vfiprintf_r+0x110>
 8009f18:	06d1      	lsls	r1, r2, #27
 8009f1a:	bf44      	itt	mi
 8009f1c:	2320      	movmi	r3, #32
 8009f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f22:	0713      	lsls	r3, r2, #28
 8009f24:	bf44      	itt	mi
 8009f26:	232b      	movmi	r3, #43	@ 0x2b
 8009f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f30:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f32:	d015      	beq.n	8009f60 <_vfiprintf_r+0x120>
 8009f34:	9a07      	ldr	r2, [sp, #28]
 8009f36:	4654      	mov	r4, sl
 8009f38:	2000      	movs	r0, #0
 8009f3a:	f04f 0c0a 	mov.w	ip, #10
 8009f3e:	4621      	mov	r1, r4
 8009f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f44:	3b30      	subs	r3, #48	@ 0x30
 8009f46:	2b09      	cmp	r3, #9
 8009f48:	d94b      	bls.n	8009fe2 <_vfiprintf_r+0x1a2>
 8009f4a:	b1b0      	cbz	r0, 8009f7a <_vfiprintf_r+0x13a>
 8009f4c:	9207      	str	r2, [sp, #28]
 8009f4e:	e014      	b.n	8009f7a <_vfiprintf_r+0x13a>
 8009f50:	eba0 0308 	sub.w	r3, r0, r8
 8009f54:	fa09 f303 	lsl.w	r3, r9, r3
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	9304      	str	r3, [sp, #16]
 8009f5c:	46a2      	mov	sl, r4
 8009f5e:	e7d2      	b.n	8009f06 <_vfiprintf_r+0xc6>
 8009f60:	9b03      	ldr	r3, [sp, #12]
 8009f62:	1d19      	adds	r1, r3, #4
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	9103      	str	r1, [sp, #12]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	bfbb      	ittet	lt
 8009f6c:	425b      	neglt	r3, r3
 8009f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f72:	9307      	strge	r3, [sp, #28]
 8009f74:	9307      	strlt	r3, [sp, #28]
 8009f76:	bfb8      	it	lt
 8009f78:	9204      	strlt	r2, [sp, #16]
 8009f7a:	7823      	ldrb	r3, [r4, #0]
 8009f7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f7e:	d10a      	bne.n	8009f96 <_vfiprintf_r+0x156>
 8009f80:	7863      	ldrb	r3, [r4, #1]
 8009f82:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f84:	d132      	bne.n	8009fec <_vfiprintf_r+0x1ac>
 8009f86:	9b03      	ldr	r3, [sp, #12]
 8009f88:	1d1a      	adds	r2, r3, #4
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	9203      	str	r2, [sp, #12]
 8009f8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f92:	3402      	adds	r4, #2
 8009f94:	9305      	str	r3, [sp, #20]
 8009f96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a06c <_vfiprintf_r+0x22c>
 8009f9a:	7821      	ldrb	r1, [r4, #0]
 8009f9c:	2203      	movs	r2, #3
 8009f9e:	4650      	mov	r0, sl
 8009fa0:	f7f6 f916 	bl	80001d0 <memchr>
 8009fa4:	b138      	cbz	r0, 8009fb6 <_vfiprintf_r+0x176>
 8009fa6:	9b04      	ldr	r3, [sp, #16]
 8009fa8:	eba0 000a 	sub.w	r0, r0, sl
 8009fac:	2240      	movs	r2, #64	@ 0x40
 8009fae:	4082      	lsls	r2, r0
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	3401      	adds	r4, #1
 8009fb4:	9304      	str	r3, [sp, #16]
 8009fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fba:	4829      	ldr	r0, [pc, #164]	@ (800a060 <_vfiprintf_r+0x220>)
 8009fbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009fc0:	2206      	movs	r2, #6
 8009fc2:	f7f6 f905 	bl	80001d0 <memchr>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	d03f      	beq.n	800a04a <_vfiprintf_r+0x20a>
 8009fca:	4b26      	ldr	r3, [pc, #152]	@ (800a064 <_vfiprintf_r+0x224>)
 8009fcc:	bb1b      	cbnz	r3, 800a016 <_vfiprintf_r+0x1d6>
 8009fce:	9b03      	ldr	r3, [sp, #12]
 8009fd0:	3307      	adds	r3, #7
 8009fd2:	f023 0307 	bic.w	r3, r3, #7
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	9303      	str	r3, [sp, #12]
 8009fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fdc:	443b      	add	r3, r7
 8009fde:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fe0:	e76a      	b.n	8009eb8 <_vfiprintf_r+0x78>
 8009fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fe6:	460c      	mov	r4, r1
 8009fe8:	2001      	movs	r0, #1
 8009fea:	e7a8      	b.n	8009f3e <_vfiprintf_r+0xfe>
 8009fec:	2300      	movs	r3, #0
 8009fee:	3401      	adds	r4, #1
 8009ff0:	9305      	str	r3, [sp, #20]
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	f04f 0c0a 	mov.w	ip, #10
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ffe:	3a30      	subs	r2, #48	@ 0x30
 800a000:	2a09      	cmp	r2, #9
 800a002:	d903      	bls.n	800a00c <_vfiprintf_r+0x1cc>
 800a004:	2b00      	cmp	r3, #0
 800a006:	d0c6      	beq.n	8009f96 <_vfiprintf_r+0x156>
 800a008:	9105      	str	r1, [sp, #20]
 800a00a:	e7c4      	b.n	8009f96 <_vfiprintf_r+0x156>
 800a00c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a010:	4604      	mov	r4, r0
 800a012:	2301      	movs	r3, #1
 800a014:	e7f0      	b.n	8009ff8 <_vfiprintf_r+0x1b8>
 800a016:	ab03      	add	r3, sp, #12
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	462a      	mov	r2, r5
 800a01c:	4b12      	ldr	r3, [pc, #72]	@ (800a068 <_vfiprintf_r+0x228>)
 800a01e:	a904      	add	r1, sp, #16
 800a020:	4630      	mov	r0, r6
 800a022:	f7fc fa6f 	bl	8006504 <_printf_float>
 800a026:	4607      	mov	r7, r0
 800a028:	1c78      	adds	r0, r7, #1
 800a02a:	d1d6      	bne.n	8009fda <_vfiprintf_r+0x19a>
 800a02c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a02e:	07d9      	lsls	r1, r3, #31
 800a030:	d405      	bmi.n	800a03e <_vfiprintf_r+0x1fe>
 800a032:	89ab      	ldrh	r3, [r5, #12]
 800a034:	059a      	lsls	r2, r3, #22
 800a036:	d402      	bmi.n	800a03e <_vfiprintf_r+0x1fe>
 800a038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a03a:	f7fd fad7 	bl	80075ec <__retarget_lock_release_recursive>
 800a03e:	89ab      	ldrh	r3, [r5, #12]
 800a040:	065b      	lsls	r3, r3, #25
 800a042:	f53f af1f 	bmi.w	8009e84 <_vfiprintf_r+0x44>
 800a046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a048:	e71e      	b.n	8009e88 <_vfiprintf_r+0x48>
 800a04a:	ab03      	add	r3, sp, #12
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	462a      	mov	r2, r5
 800a050:	4b05      	ldr	r3, [pc, #20]	@ (800a068 <_vfiprintf_r+0x228>)
 800a052:	a904      	add	r1, sp, #16
 800a054:	4630      	mov	r0, r6
 800a056:	f7fc fced 	bl	8006a34 <_printf_i>
 800a05a:	e7e4      	b.n	800a026 <_vfiprintf_r+0x1e6>
 800a05c:	08017929 	.word	0x08017929
 800a060:	08017933 	.word	0x08017933
 800a064:	08006505 	.word	0x08006505
 800a068:	08009e1b 	.word	0x08009e1b
 800a06c:	0801792f 	.word	0x0801792f

0800a070 <__sflush_r>:
 800a070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a078:	0716      	lsls	r6, r2, #28
 800a07a:	4605      	mov	r5, r0
 800a07c:	460c      	mov	r4, r1
 800a07e:	d454      	bmi.n	800a12a <__sflush_r+0xba>
 800a080:	684b      	ldr	r3, [r1, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	dc02      	bgt.n	800a08c <__sflush_r+0x1c>
 800a086:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a088:	2b00      	cmp	r3, #0
 800a08a:	dd48      	ble.n	800a11e <__sflush_r+0xae>
 800a08c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a08e:	2e00      	cmp	r6, #0
 800a090:	d045      	beq.n	800a11e <__sflush_r+0xae>
 800a092:	2300      	movs	r3, #0
 800a094:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a098:	682f      	ldr	r7, [r5, #0]
 800a09a:	6a21      	ldr	r1, [r4, #32]
 800a09c:	602b      	str	r3, [r5, #0]
 800a09e:	d030      	beq.n	800a102 <__sflush_r+0x92>
 800a0a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a0a2:	89a3      	ldrh	r3, [r4, #12]
 800a0a4:	0759      	lsls	r1, r3, #29
 800a0a6:	d505      	bpl.n	800a0b4 <__sflush_r+0x44>
 800a0a8:	6863      	ldr	r3, [r4, #4]
 800a0aa:	1ad2      	subs	r2, r2, r3
 800a0ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a0ae:	b10b      	cbz	r3, 800a0b4 <__sflush_r+0x44>
 800a0b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0b2:	1ad2      	subs	r2, r2, r3
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0b8:	6a21      	ldr	r1, [r4, #32]
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	47b0      	blx	r6
 800a0be:	1c43      	adds	r3, r0, #1
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	d106      	bne.n	800a0d2 <__sflush_r+0x62>
 800a0c4:	6829      	ldr	r1, [r5, #0]
 800a0c6:	291d      	cmp	r1, #29
 800a0c8:	d82b      	bhi.n	800a122 <__sflush_r+0xb2>
 800a0ca:	4a2a      	ldr	r2, [pc, #168]	@ (800a174 <__sflush_r+0x104>)
 800a0cc:	410a      	asrs	r2, r1
 800a0ce:	07d6      	lsls	r6, r2, #31
 800a0d0:	d427      	bmi.n	800a122 <__sflush_r+0xb2>
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	6062      	str	r2, [r4, #4]
 800a0d6:	04d9      	lsls	r1, r3, #19
 800a0d8:	6922      	ldr	r2, [r4, #16]
 800a0da:	6022      	str	r2, [r4, #0]
 800a0dc:	d504      	bpl.n	800a0e8 <__sflush_r+0x78>
 800a0de:	1c42      	adds	r2, r0, #1
 800a0e0:	d101      	bne.n	800a0e6 <__sflush_r+0x76>
 800a0e2:	682b      	ldr	r3, [r5, #0]
 800a0e4:	b903      	cbnz	r3, 800a0e8 <__sflush_r+0x78>
 800a0e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0ea:	602f      	str	r7, [r5, #0]
 800a0ec:	b1b9      	cbz	r1, 800a11e <__sflush_r+0xae>
 800a0ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0f2:	4299      	cmp	r1, r3
 800a0f4:	d002      	beq.n	800a0fc <__sflush_r+0x8c>
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	f7fe f8ea 	bl	80082d0 <_free_r>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800a100:	e00d      	b.n	800a11e <__sflush_r+0xae>
 800a102:	2301      	movs	r3, #1
 800a104:	4628      	mov	r0, r5
 800a106:	47b0      	blx	r6
 800a108:	4602      	mov	r2, r0
 800a10a:	1c50      	adds	r0, r2, #1
 800a10c:	d1c9      	bne.n	800a0a2 <__sflush_r+0x32>
 800a10e:	682b      	ldr	r3, [r5, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d0c6      	beq.n	800a0a2 <__sflush_r+0x32>
 800a114:	2b1d      	cmp	r3, #29
 800a116:	d001      	beq.n	800a11c <__sflush_r+0xac>
 800a118:	2b16      	cmp	r3, #22
 800a11a:	d11e      	bne.n	800a15a <__sflush_r+0xea>
 800a11c:	602f      	str	r7, [r5, #0]
 800a11e:	2000      	movs	r0, #0
 800a120:	e022      	b.n	800a168 <__sflush_r+0xf8>
 800a122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a126:	b21b      	sxth	r3, r3
 800a128:	e01b      	b.n	800a162 <__sflush_r+0xf2>
 800a12a:	690f      	ldr	r7, [r1, #16]
 800a12c:	2f00      	cmp	r7, #0
 800a12e:	d0f6      	beq.n	800a11e <__sflush_r+0xae>
 800a130:	0793      	lsls	r3, r2, #30
 800a132:	680e      	ldr	r6, [r1, #0]
 800a134:	bf08      	it	eq
 800a136:	694b      	ldreq	r3, [r1, #20]
 800a138:	600f      	str	r7, [r1, #0]
 800a13a:	bf18      	it	ne
 800a13c:	2300      	movne	r3, #0
 800a13e:	eba6 0807 	sub.w	r8, r6, r7
 800a142:	608b      	str	r3, [r1, #8]
 800a144:	f1b8 0f00 	cmp.w	r8, #0
 800a148:	dde9      	ble.n	800a11e <__sflush_r+0xae>
 800a14a:	6a21      	ldr	r1, [r4, #32]
 800a14c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a14e:	4643      	mov	r3, r8
 800a150:	463a      	mov	r2, r7
 800a152:	4628      	mov	r0, r5
 800a154:	47b0      	blx	r6
 800a156:	2800      	cmp	r0, #0
 800a158:	dc08      	bgt.n	800a16c <__sflush_r+0xfc>
 800a15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a15e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a162:	81a3      	strh	r3, [r4, #12]
 800a164:	f04f 30ff 	mov.w	r0, #4294967295
 800a168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a16c:	4407      	add	r7, r0
 800a16e:	eba8 0800 	sub.w	r8, r8, r0
 800a172:	e7e7      	b.n	800a144 <__sflush_r+0xd4>
 800a174:	dfbffffe 	.word	0xdfbffffe

0800a178 <_fflush_r>:
 800a178:	b538      	push	{r3, r4, r5, lr}
 800a17a:	690b      	ldr	r3, [r1, #16]
 800a17c:	4605      	mov	r5, r0
 800a17e:	460c      	mov	r4, r1
 800a180:	b913      	cbnz	r3, 800a188 <_fflush_r+0x10>
 800a182:	2500      	movs	r5, #0
 800a184:	4628      	mov	r0, r5
 800a186:	bd38      	pop	{r3, r4, r5, pc}
 800a188:	b118      	cbz	r0, 800a192 <_fflush_r+0x1a>
 800a18a:	6a03      	ldr	r3, [r0, #32]
 800a18c:	b90b      	cbnz	r3, 800a192 <_fflush_r+0x1a>
 800a18e:	f7fd f811 	bl	80071b4 <__sinit>
 800a192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d0f3      	beq.n	800a182 <_fflush_r+0xa>
 800a19a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a19c:	07d0      	lsls	r0, r2, #31
 800a19e:	d404      	bmi.n	800a1aa <_fflush_r+0x32>
 800a1a0:	0599      	lsls	r1, r3, #22
 800a1a2:	d402      	bmi.n	800a1aa <_fflush_r+0x32>
 800a1a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1a6:	f7fd fa20 	bl	80075ea <__retarget_lock_acquire_recursive>
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	4621      	mov	r1, r4
 800a1ae:	f7ff ff5f 	bl	800a070 <__sflush_r>
 800a1b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1b4:	07da      	lsls	r2, r3, #31
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	d4e4      	bmi.n	800a184 <_fflush_r+0xc>
 800a1ba:	89a3      	ldrh	r3, [r4, #12]
 800a1bc:	059b      	lsls	r3, r3, #22
 800a1be:	d4e1      	bmi.n	800a184 <_fflush_r+0xc>
 800a1c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1c2:	f7fd fa13 	bl	80075ec <__retarget_lock_release_recursive>
 800a1c6:	e7dd      	b.n	800a184 <_fflush_r+0xc>

0800a1c8 <fiprintf>:
 800a1c8:	b40e      	push	{r1, r2, r3}
 800a1ca:	b503      	push	{r0, r1, lr}
 800a1cc:	4601      	mov	r1, r0
 800a1ce:	ab03      	add	r3, sp, #12
 800a1d0:	4805      	ldr	r0, [pc, #20]	@ (800a1e8 <fiprintf+0x20>)
 800a1d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1d6:	6800      	ldr	r0, [r0, #0]
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	f7ff fe31 	bl	8009e40 <_vfiprintf_r>
 800a1de:	b002      	add	sp, #8
 800a1e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1e4:	b003      	add	sp, #12
 800a1e6:	4770      	bx	lr
 800a1e8:	2000003c 	.word	0x2000003c

0800a1ec <__swhatbuf_r>:
 800a1ec:	b570      	push	{r4, r5, r6, lr}
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f4:	2900      	cmp	r1, #0
 800a1f6:	b096      	sub	sp, #88	@ 0x58
 800a1f8:	4615      	mov	r5, r2
 800a1fa:	461e      	mov	r6, r3
 800a1fc:	da0d      	bge.n	800a21a <__swhatbuf_r+0x2e>
 800a1fe:	89a3      	ldrh	r3, [r4, #12]
 800a200:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a204:	f04f 0100 	mov.w	r1, #0
 800a208:	bf14      	ite	ne
 800a20a:	2340      	movne	r3, #64	@ 0x40
 800a20c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a210:	2000      	movs	r0, #0
 800a212:	6031      	str	r1, [r6, #0]
 800a214:	602b      	str	r3, [r5, #0]
 800a216:	b016      	add	sp, #88	@ 0x58
 800a218:	bd70      	pop	{r4, r5, r6, pc}
 800a21a:	466a      	mov	r2, sp
 800a21c:	f000 f874 	bl	800a308 <_fstat_r>
 800a220:	2800      	cmp	r0, #0
 800a222:	dbec      	blt.n	800a1fe <__swhatbuf_r+0x12>
 800a224:	9901      	ldr	r1, [sp, #4]
 800a226:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a22a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a22e:	4259      	negs	r1, r3
 800a230:	4159      	adcs	r1, r3
 800a232:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a236:	e7eb      	b.n	800a210 <__swhatbuf_r+0x24>

0800a238 <__smakebuf_r>:
 800a238:	898b      	ldrh	r3, [r1, #12]
 800a23a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a23c:	079d      	lsls	r5, r3, #30
 800a23e:	4606      	mov	r6, r0
 800a240:	460c      	mov	r4, r1
 800a242:	d507      	bpl.n	800a254 <__smakebuf_r+0x1c>
 800a244:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	6123      	str	r3, [r4, #16]
 800a24c:	2301      	movs	r3, #1
 800a24e:	6163      	str	r3, [r4, #20]
 800a250:	b003      	add	sp, #12
 800a252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a254:	ab01      	add	r3, sp, #4
 800a256:	466a      	mov	r2, sp
 800a258:	f7ff ffc8 	bl	800a1ec <__swhatbuf_r>
 800a25c:	9f00      	ldr	r7, [sp, #0]
 800a25e:	4605      	mov	r5, r0
 800a260:	4639      	mov	r1, r7
 800a262:	4630      	mov	r0, r6
 800a264:	f7fe f8a8 	bl	80083b8 <_malloc_r>
 800a268:	b948      	cbnz	r0, 800a27e <__smakebuf_r+0x46>
 800a26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a26e:	059a      	lsls	r2, r3, #22
 800a270:	d4ee      	bmi.n	800a250 <__smakebuf_r+0x18>
 800a272:	f023 0303 	bic.w	r3, r3, #3
 800a276:	f043 0302 	orr.w	r3, r3, #2
 800a27a:	81a3      	strh	r3, [r4, #12]
 800a27c:	e7e2      	b.n	800a244 <__smakebuf_r+0xc>
 800a27e:	89a3      	ldrh	r3, [r4, #12]
 800a280:	6020      	str	r0, [r4, #0]
 800a282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a286:	81a3      	strh	r3, [r4, #12]
 800a288:	9b01      	ldr	r3, [sp, #4]
 800a28a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a28e:	b15b      	cbz	r3, 800a2a8 <__smakebuf_r+0x70>
 800a290:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a294:	4630      	mov	r0, r6
 800a296:	f000 f849 	bl	800a32c <_isatty_r>
 800a29a:	b128      	cbz	r0, 800a2a8 <__smakebuf_r+0x70>
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	f023 0303 	bic.w	r3, r3, #3
 800a2a2:	f043 0301 	orr.w	r3, r3, #1
 800a2a6:	81a3      	strh	r3, [r4, #12]
 800a2a8:	89a3      	ldrh	r3, [r4, #12]
 800a2aa:	431d      	orrs	r5, r3
 800a2ac:	81a5      	strh	r5, [r4, #12]
 800a2ae:	e7cf      	b.n	800a250 <__smakebuf_r+0x18>

0800a2b0 <memmove>:
 800a2b0:	4288      	cmp	r0, r1
 800a2b2:	b510      	push	{r4, lr}
 800a2b4:	eb01 0402 	add.w	r4, r1, r2
 800a2b8:	d902      	bls.n	800a2c0 <memmove+0x10>
 800a2ba:	4284      	cmp	r4, r0
 800a2bc:	4623      	mov	r3, r4
 800a2be:	d807      	bhi.n	800a2d0 <memmove+0x20>
 800a2c0:	1e43      	subs	r3, r0, #1
 800a2c2:	42a1      	cmp	r1, r4
 800a2c4:	d008      	beq.n	800a2d8 <memmove+0x28>
 800a2c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2ce:	e7f8      	b.n	800a2c2 <memmove+0x12>
 800a2d0:	4402      	add	r2, r0
 800a2d2:	4601      	mov	r1, r0
 800a2d4:	428a      	cmp	r2, r1
 800a2d6:	d100      	bne.n	800a2da <memmove+0x2a>
 800a2d8:	bd10      	pop	{r4, pc}
 800a2da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2e2:	e7f7      	b.n	800a2d4 <memmove+0x24>

0800a2e4 <strncmp>:
 800a2e4:	b510      	push	{r4, lr}
 800a2e6:	b16a      	cbz	r2, 800a304 <strncmp+0x20>
 800a2e8:	3901      	subs	r1, #1
 800a2ea:	1884      	adds	r4, r0, r2
 800a2ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d103      	bne.n	800a300 <strncmp+0x1c>
 800a2f8:	42a0      	cmp	r0, r4
 800a2fa:	d001      	beq.n	800a300 <strncmp+0x1c>
 800a2fc:	2a00      	cmp	r2, #0
 800a2fe:	d1f5      	bne.n	800a2ec <strncmp+0x8>
 800a300:	1ad0      	subs	r0, r2, r3
 800a302:	bd10      	pop	{r4, pc}
 800a304:	4610      	mov	r0, r2
 800a306:	e7fc      	b.n	800a302 <strncmp+0x1e>

0800a308 <_fstat_r>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	4d07      	ldr	r5, [pc, #28]	@ (800a328 <_fstat_r+0x20>)
 800a30c:	2300      	movs	r3, #0
 800a30e:	4604      	mov	r4, r0
 800a310:	4608      	mov	r0, r1
 800a312:	4611      	mov	r1, r2
 800a314:	602b      	str	r3, [r5, #0]
 800a316:	f7f7 fe99 	bl	800204c <_fstat>
 800a31a:	1c43      	adds	r3, r0, #1
 800a31c:	d102      	bne.n	800a324 <_fstat_r+0x1c>
 800a31e:	682b      	ldr	r3, [r5, #0]
 800a320:	b103      	cbz	r3, 800a324 <_fstat_r+0x1c>
 800a322:	6023      	str	r3, [r4, #0]
 800a324:	bd38      	pop	{r3, r4, r5, pc}
 800a326:	bf00      	nop
 800a328:	20007cac 	.word	0x20007cac

0800a32c <_isatty_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4d06      	ldr	r5, [pc, #24]	@ (800a348 <_isatty_r+0x1c>)
 800a330:	2300      	movs	r3, #0
 800a332:	4604      	mov	r4, r0
 800a334:	4608      	mov	r0, r1
 800a336:	602b      	str	r3, [r5, #0]
 800a338:	f7f7 fe98 	bl	800206c <_isatty>
 800a33c:	1c43      	adds	r3, r0, #1
 800a33e:	d102      	bne.n	800a346 <_isatty_r+0x1a>
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	b103      	cbz	r3, 800a346 <_isatty_r+0x1a>
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	bd38      	pop	{r3, r4, r5, pc}
 800a348:	20007cac 	.word	0x20007cac

0800a34c <_sbrk_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4d06      	ldr	r5, [pc, #24]	@ (800a368 <_sbrk_r+0x1c>)
 800a350:	2300      	movs	r3, #0
 800a352:	4604      	mov	r4, r0
 800a354:	4608      	mov	r0, r1
 800a356:	602b      	str	r3, [r5, #0]
 800a358:	f7f7 fea0 	bl	800209c <_sbrk>
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	d102      	bne.n	800a366 <_sbrk_r+0x1a>
 800a360:	682b      	ldr	r3, [r5, #0]
 800a362:	b103      	cbz	r3, 800a366 <_sbrk_r+0x1a>
 800a364:	6023      	str	r3, [r4, #0]
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	20007cac 	.word	0x20007cac

0800a36c <memcpy>:
 800a36c:	440a      	add	r2, r1
 800a36e:	4291      	cmp	r1, r2
 800a370:	f100 33ff 	add.w	r3, r0, #4294967295
 800a374:	d100      	bne.n	800a378 <memcpy+0xc>
 800a376:	4770      	bx	lr
 800a378:	b510      	push	{r4, lr}
 800a37a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a37e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a382:	4291      	cmp	r1, r2
 800a384:	d1f9      	bne.n	800a37a <memcpy+0xe>
 800a386:	bd10      	pop	{r4, pc}

0800a388 <nan>:
 800a388:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a390 <nan+0x8>
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	00000000 	.word	0x00000000
 800a394:	7ff80000 	.word	0x7ff80000

0800a398 <abort>:
 800a398:	b508      	push	{r3, lr}
 800a39a:	2006      	movs	r0, #6
 800a39c:	f000 fbc4 	bl	800ab28 <raise>
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	f7f7 fe03 	bl	8001fac <_exit>

0800a3a6 <_calloc_r>:
 800a3a6:	b570      	push	{r4, r5, r6, lr}
 800a3a8:	fba1 5402 	umull	r5, r4, r1, r2
 800a3ac:	b93c      	cbnz	r4, 800a3be <_calloc_r+0x18>
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	f7fe f802 	bl	80083b8 <_malloc_r>
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	b928      	cbnz	r0, 800a3c4 <_calloc_r+0x1e>
 800a3b8:	2600      	movs	r6, #0
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	bd70      	pop	{r4, r5, r6, pc}
 800a3be:	220c      	movs	r2, #12
 800a3c0:	6002      	str	r2, [r0, #0]
 800a3c2:	e7f9      	b.n	800a3b8 <_calloc_r+0x12>
 800a3c4:	462a      	mov	r2, r5
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	f7fd f892 	bl	80074f0 <memset>
 800a3cc:	e7f5      	b.n	800a3ba <_calloc_r+0x14>

0800a3ce <rshift>:
 800a3ce:	6903      	ldr	r3, [r0, #16]
 800a3d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3d8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3dc:	f100 0414 	add.w	r4, r0, #20
 800a3e0:	dd45      	ble.n	800a46e <rshift+0xa0>
 800a3e2:	f011 011f 	ands.w	r1, r1, #31
 800a3e6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3ea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3ee:	d10c      	bne.n	800a40a <rshift+0x3c>
 800a3f0:	f100 0710 	add.w	r7, r0, #16
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	42b1      	cmp	r1, r6
 800a3f8:	d334      	bcc.n	800a464 <rshift+0x96>
 800a3fa:	1a9b      	subs	r3, r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	1eea      	subs	r2, r5, #3
 800a400:	4296      	cmp	r6, r2
 800a402:	bf38      	it	cc
 800a404:	2300      	movcc	r3, #0
 800a406:	4423      	add	r3, r4
 800a408:	e015      	b.n	800a436 <rshift+0x68>
 800a40a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a40e:	f1c1 0820 	rsb	r8, r1, #32
 800a412:	40cf      	lsrs	r7, r1
 800a414:	f105 0e04 	add.w	lr, r5, #4
 800a418:	46a1      	mov	r9, r4
 800a41a:	4576      	cmp	r6, lr
 800a41c:	46f4      	mov	ip, lr
 800a41e:	d815      	bhi.n	800a44c <rshift+0x7e>
 800a420:	1a9a      	subs	r2, r3, r2
 800a422:	0092      	lsls	r2, r2, #2
 800a424:	3a04      	subs	r2, #4
 800a426:	3501      	adds	r5, #1
 800a428:	42ae      	cmp	r6, r5
 800a42a:	bf38      	it	cc
 800a42c:	2200      	movcc	r2, #0
 800a42e:	18a3      	adds	r3, r4, r2
 800a430:	50a7      	str	r7, [r4, r2]
 800a432:	b107      	cbz	r7, 800a436 <rshift+0x68>
 800a434:	3304      	adds	r3, #4
 800a436:	1b1a      	subs	r2, r3, r4
 800a438:	42a3      	cmp	r3, r4
 800a43a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a43e:	bf08      	it	eq
 800a440:	2300      	moveq	r3, #0
 800a442:	6102      	str	r2, [r0, #16]
 800a444:	bf08      	it	eq
 800a446:	6143      	streq	r3, [r0, #20]
 800a448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a44c:	f8dc c000 	ldr.w	ip, [ip]
 800a450:	fa0c fc08 	lsl.w	ip, ip, r8
 800a454:	ea4c 0707 	orr.w	r7, ip, r7
 800a458:	f849 7b04 	str.w	r7, [r9], #4
 800a45c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a460:	40cf      	lsrs	r7, r1
 800a462:	e7da      	b.n	800a41a <rshift+0x4c>
 800a464:	f851 cb04 	ldr.w	ip, [r1], #4
 800a468:	f847 cf04 	str.w	ip, [r7, #4]!
 800a46c:	e7c3      	b.n	800a3f6 <rshift+0x28>
 800a46e:	4623      	mov	r3, r4
 800a470:	e7e1      	b.n	800a436 <rshift+0x68>

0800a472 <__hexdig_fun>:
 800a472:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a476:	2b09      	cmp	r3, #9
 800a478:	d802      	bhi.n	800a480 <__hexdig_fun+0xe>
 800a47a:	3820      	subs	r0, #32
 800a47c:	b2c0      	uxtb	r0, r0
 800a47e:	4770      	bx	lr
 800a480:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a484:	2b05      	cmp	r3, #5
 800a486:	d801      	bhi.n	800a48c <__hexdig_fun+0x1a>
 800a488:	3847      	subs	r0, #71	@ 0x47
 800a48a:	e7f7      	b.n	800a47c <__hexdig_fun+0xa>
 800a48c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a490:	2b05      	cmp	r3, #5
 800a492:	d801      	bhi.n	800a498 <__hexdig_fun+0x26>
 800a494:	3827      	subs	r0, #39	@ 0x27
 800a496:	e7f1      	b.n	800a47c <__hexdig_fun+0xa>
 800a498:	2000      	movs	r0, #0
 800a49a:	4770      	bx	lr

0800a49c <__gethex>:
 800a49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a0:	b085      	sub	sp, #20
 800a4a2:	468a      	mov	sl, r1
 800a4a4:	9302      	str	r3, [sp, #8]
 800a4a6:	680b      	ldr	r3, [r1, #0]
 800a4a8:	9001      	str	r0, [sp, #4]
 800a4aa:	4690      	mov	r8, r2
 800a4ac:	1c9c      	adds	r4, r3, #2
 800a4ae:	46a1      	mov	r9, r4
 800a4b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a4b4:	2830      	cmp	r0, #48	@ 0x30
 800a4b6:	d0fa      	beq.n	800a4ae <__gethex+0x12>
 800a4b8:	eba9 0303 	sub.w	r3, r9, r3
 800a4bc:	f1a3 0b02 	sub.w	fp, r3, #2
 800a4c0:	f7ff ffd7 	bl	800a472 <__hexdig_fun>
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d168      	bne.n	800a59c <__gethex+0x100>
 800a4ca:	49a0      	ldr	r1, [pc, #640]	@ (800a74c <__gethex+0x2b0>)
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	4648      	mov	r0, r9
 800a4d0:	f7ff ff08 	bl	800a2e4 <strncmp>
 800a4d4:	4607      	mov	r7, r0
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	d167      	bne.n	800a5aa <__gethex+0x10e>
 800a4da:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a4de:	4626      	mov	r6, r4
 800a4e0:	f7ff ffc7 	bl	800a472 <__hexdig_fun>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d062      	beq.n	800a5ae <__gethex+0x112>
 800a4e8:	4623      	mov	r3, r4
 800a4ea:	7818      	ldrb	r0, [r3, #0]
 800a4ec:	2830      	cmp	r0, #48	@ 0x30
 800a4ee:	4699      	mov	r9, r3
 800a4f0:	f103 0301 	add.w	r3, r3, #1
 800a4f4:	d0f9      	beq.n	800a4ea <__gethex+0x4e>
 800a4f6:	f7ff ffbc 	bl	800a472 <__hexdig_fun>
 800a4fa:	fab0 f580 	clz	r5, r0
 800a4fe:	096d      	lsrs	r5, r5, #5
 800a500:	f04f 0b01 	mov.w	fp, #1
 800a504:	464a      	mov	r2, r9
 800a506:	4616      	mov	r6, r2
 800a508:	3201      	adds	r2, #1
 800a50a:	7830      	ldrb	r0, [r6, #0]
 800a50c:	f7ff ffb1 	bl	800a472 <__hexdig_fun>
 800a510:	2800      	cmp	r0, #0
 800a512:	d1f8      	bne.n	800a506 <__gethex+0x6a>
 800a514:	498d      	ldr	r1, [pc, #564]	@ (800a74c <__gethex+0x2b0>)
 800a516:	2201      	movs	r2, #1
 800a518:	4630      	mov	r0, r6
 800a51a:	f7ff fee3 	bl	800a2e4 <strncmp>
 800a51e:	2800      	cmp	r0, #0
 800a520:	d13f      	bne.n	800a5a2 <__gethex+0x106>
 800a522:	b944      	cbnz	r4, 800a536 <__gethex+0x9a>
 800a524:	1c74      	adds	r4, r6, #1
 800a526:	4622      	mov	r2, r4
 800a528:	4616      	mov	r6, r2
 800a52a:	3201      	adds	r2, #1
 800a52c:	7830      	ldrb	r0, [r6, #0]
 800a52e:	f7ff ffa0 	bl	800a472 <__hexdig_fun>
 800a532:	2800      	cmp	r0, #0
 800a534:	d1f8      	bne.n	800a528 <__gethex+0x8c>
 800a536:	1ba4      	subs	r4, r4, r6
 800a538:	00a7      	lsls	r7, r4, #2
 800a53a:	7833      	ldrb	r3, [r6, #0]
 800a53c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a540:	2b50      	cmp	r3, #80	@ 0x50
 800a542:	d13e      	bne.n	800a5c2 <__gethex+0x126>
 800a544:	7873      	ldrb	r3, [r6, #1]
 800a546:	2b2b      	cmp	r3, #43	@ 0x2b
 800a548:	d033      	beq.n	800a5b2 <__gethex+0x116>
 800a54a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a54c:	d034      	beq.n	800a5b8 <__gethex+0x11c>
 800a54e:	1c71      	adds	r1, r6, #1
 800a550:	2400      	movs	r4, #0
 800a552:	7808      	ldrb	r0, [r1, #0]
 800a554:	f7ff ff8d 	bl	800a472 <__hexdig_fun>
 800a558:	1e43      	subs	r3, r0, #1
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	2b18      	cmp	r3, #24
 800a55e:	d830      	bhi.n	800a5c2 <__gethex+0x126>
 800a560:	f1a0 0210 	sub.w	r2, r0, #16
 800a564:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a568:	f7ff ff83 	bl	800a472 <__hexdig_fun>
 800a56c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a570:	fa5f fc8c 	uxtb.w	ip, ip
 800a574:	f1bc 0f18 	cmp.w	ip, #24
 800a578:	f04f 030a 	mov.w	r3, #10
 800a57c:	d91e      	bls.n	800a5bc <__gethex+0x120>
 800a57e:	b104      	cbz	r4, 800a582 <__gethex+0xe6>
 800a580:	4252      	negs	r2, r2
 800a582:	4417      	add	r7, r2
 800a584:	f8ca 1000 	str.w	r1, [sl]
 800a588:	b1ed      	cbz	r5, 800a5c6 <__gethex+0x12a>
 800a58a:	f1bb 0f00 	cmp.w	fp, #0
 800a58e:	bf0c      	ite	eq
 800a590:	2506      	moveq	r5, #6
 800a592:	2500      	movne	r5, #0
 800a594:	4628      	mov	r0, r5
 800a596:	b005      	add	sp, #20
 800a598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59c:	2500      	movs	r5, #0
 800a59e:	462c      	mov	r4, r5
 800a5a0:	e7b0      	b.n	800a504 <__gethex+0x68>
 800a5a2:	2c00      	cmp	r4, #0
 800a5a4:	d1c7      	bne.n	800a536 <__gethex+0x9a>
 800a5a6:	4627      	mov	r7, r4
 800a5a8:	e7c7      	b.n	800a53a <__gethex+0x9e>
 800a5aa:	464e      	mov	r6, r9
 800a5ac:	462f      	mov	r7, r5
 800a5ae:	2501      	movs	r5, #1
 800a5b0:	e7c3      	b.n	800a53a <__gethex+0x9e>
 800a5b2:	2400      	movs	r4, #0
 800a5b4:	1cb1      	adds	r1, r6, #2
 800a5b6:	e7cc      	b.n	800a552 <__gethex+0xb6>
 800a5b8:	2401      	movs	r4, #1
 800a5ba:	e7fb      	b.n	800a5b4 <__gethex+0x118>
 800a5bc:	fb03 0002 	mla	r0, r3, r2, r0
 800a5c0:	e7ce      	b.n	800a560 <__gethex+0xc4>
 800a5c2:	4631      	mov	r1, r6
 800a5c4:	e7de      	b.n	800a584 <__gethex+0xe8>
 800a5c6:	eba6 0309 	sub.w	r3, r6, r9
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	2b07      	cmp	r3, #7
 800a5d0:	dc0a      	bgt.n	800a5e8 <__gethex+0x14c>
 800a5d2:	9801      	ldr	r0, [sp, #4]
 800a5d4:	f7fd ff7c 	bl	80084d0 <_Balloc>
 800a5d8:	4604      	mov	r4, r0
 800a5da:	b940      	cbnz	r0, 800a5ee <__gethex+0x152>
 800a5dc:	4b5c      	ldr	r3, [pc, #368]	@ (800a750 <__gethex+0x2b4>)
 800a5de:	4602      	mov	r2, r0
 800a5e0:	21e4      	movs	r1, #228	@ 0xe4
 800a5e2:	485c      	ldr	r0, [pc, #368]	@ (800a754 <__gethex+0x2b8>)
 800a5e4:	f7fd f80a 	bl	80075fc <__assert_func>
 800a5e8:	3101      	adds	r1, #1
 800a5ea:	105b      	asrs	r3, r3, #1
 800a5ec:	e7ef      	b.n	800a5ce <__gethex+0x132>
 800a5ee:	f100 0a14 	add.w	sl, r0, #20
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	4655      	mov	r5, sl
 800a5f6:	469b      	mov	fp, r3
 800a5f8:	45b1      	cmp	r9, r6
 800a5fa:	d337      	bcc.n	800a66c <__gethex+0x1d0>
 800a5fc:	f845 bb04 	str.w	fp, [r5], #4
 800a600:	eba5 050a 	sub.w	r5, r5, sl
 800a604:	10ad      	asrs	r5, r5, #2
 800a606:	6125      	str	r5, [r4, #16]
 800a608:	4658      	mov	r0, fp
 800a60a:	f7fe f853 	bl	80086b4 <__hi0bits>
 800a60e:	016d      	lsls	r5, r5, #5
 800a610:	f8d8 6000 	ldr.w	r6, [r8]
 800a614:	1a2d      	subs	r5, r5, r0
 800a616:	42b5      	cmp	r5, r6
 800a618:	dd54      	ble.n	800a6c4 <__gethex+0x228>
 800a61a:	1bad      	subs	r5, r5, r6
 800a61c:	4629      	mov	r1, r5
 800a61e:	4620      	mov	r0, r4
 800a620:	f7fe fbe7 	bl	8008df2 <__any_on>
 800a624:	4681      	mov	r9, r0
 800a626:	b178      	cbz	r0, 800a648 <__gethex+0x1ac>
 800a628:	1e6b      	subs	r3, r5, #1
 800a62a:	1159      	asrs	r1, r3, #5
 800a62c:	f003 021f 	and.w	r2, r3, #31
 800a630:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a634:	f04f 0901 	mov.w	r9, #1
 800a638:	fa09 f202 	lsl.w	r2, r9, r2
 800a63c:	420a      	tst	r2, r1
 800a63e:	d003      	beq.n	800a648 <__gethex+0x1ac>
 800a640:	454b      	cmp	r3, r9
 800a642:	dc36      	bgt.n	800a6b2 <__gethex+0x216>
 800a644:	f04f 0902 	mov.w	r9, #2
 800a648:	4629      	mov	r1, r5
 800a64a:	4620      	mov	r0, r4
 800a64c:	f7ff febf 	bl	800a3ce <rshift>
 800a650:	442f      	add	r7, r5
 800a652:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a656:	42bb      	cmp	r3, r7
 800a658:	da42      	bge.n	800a6e0 <__gethex+0x244>
 800a65a:	9801      	ldr	r0, [sp, #4]
 800a65c:	4621      	mov	r1, r4
 800a65e:	f7fd ff77 	bl	8008550 <_Bfree>
 800a662:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a664:	2300      	movs	r3, #0
 800a666:	6013      	str	r3, [r2, #0]
 800a668:	25a3      	movs	r5, #163	@ 0xa3
 800a66a:	e793      	b.n	800a594 <__gethex+0xf8>
 800a66c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a670:	2a2e      	cmp	r2, #46	@ 0x2e
 800a672:	d012      	beq.n	800a69a <__gethex+0x1fe>
 800a674:	2b20      	cmp	r3, #32
 800a676:	d104      	bne.n	800a682 <__gethex+0x1e6>
 800a678:	f845 bb04 	str.w	fp, [r5], #4
 800a67c:	f04f 0b00 	mov.w	fp, #0
 800a680:	465b      	mov	r3, fp
 800a682:	7830      	ldrb	r0, [r6, #0]
 800a684:	9303      	str	r3, [sp, #12]
 800a686:	f7ff fef4 	bl	800a472 <__hexdig_fun>
 800a68a:	9b03      	ldr	r3, [sp, #12]
 800a68c:	f000 000f 	and.w	r0, r0, #15
 800a690:	4098      	lsls	r0, r3
 800a692:	ea4b 0b00 	orr.w	fp, fp, r0
 800a696:	3304      	adds	r3, #4
 800a698:	e7ae      	b.n	800a5f8 <__gethex+0x15c>
 800a69a:	45b1      	cmp	r9, r6
 800a69c:	d8ea      	bhi.n	800a674 <__gethex+0x1d8>
 800a69e:	492b      	ldr	r1, [pc, #172]	@ (800a74c <__gethex+0x2b0>)
 800a6a0:	9303      	str	r3, [sp, #12]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f7ff fe1d 	bl	800a2e4 <strncmp>
 800a6aa:	9b03      	ldr	r3, [sp, #12]
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d1e1      	bne.n	800a674 <__gethex+0x1d8>
 800a6b0:	e7a2      	b.n	800a5f8 <__gethex+0x15c>
 800a6b2:	1ea9      	subs	r1, r5, #2
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f7fe fb9c 	bl	8008df2 <__any_on>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d0c2      	beq.n	800a644 <__gethex+0x1a8>
 800a6be:	f04f 0903 	mov.w	r9, #3
 800a6c2:	e7c1      	b.n	800a648 <__gethex+0x1ac>
 800a6c4:	da09      	bge.n	800a6da <__gethex+0x23e>
 800a6c6:	1b75      	subs	r5, r6, r5
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	9801      	ldr	r0, [sp, #4]
 800a6cc:	462a      	mov	r2, r5
 800a6ce:	f7fe f957 	bl	8008980 <__lshift>
 800a6d2:	1b7f      	subs	r7, r7, r5
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	f100 0a14 	add.w	sl, r0, #20
 800a6da:	f04f 0900 	mov.w	r9, #0
 800a6de:	e7b8      	b.n	800a652 <__gethex+0x1b6>
 800a6e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a6e4:	42bd      	cmp	r5, r7
 800a6e6:	dd6f      	ble.n	800a7c8 <__gethex+0x32c>
 800a6e8:	1bed      	subs	r5, r5, r7
 800a6ea:	42ae      	cmp	r6, r5
 800a6ec:	dc34      	bgt.n	800a758 <__gethex+0x2bc>
 800a6ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d022      	beq.n	800a73c <__gethex+0x2a0>
 800a6f6:	2b03      	cmp	r3, #3
 800a6f8:	d024      	beq.n	800a744 <__gethex+0x2a8>
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d115      	bne.n	800a72a <__gethex+0x28e>
 800a6fe:	42ae      	cmp	r6, r5
 800a700:	d113      	bne.n	800a72a <__gethex+0x28e>
 800a702:	2e01      	cmp	r6, #1
 800a704:	d10b      	bne.n	800a71e <__gethex+0x282>
 800a706:	9a02      	ldr	r2, [sp, #8]
 800a708:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a70c:	6013      	str	r3, [r2, #0]
 800a70e:	2301      	movs	r3, #1
 800a710:	6123      	str	r3, [r4, #16]
 800a712:	f8ca 3000 	str.w	r3, [sl]
 800a716:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a718:	2562      	movs	r5, #98	@ 0x62
 800a71a:	601c      	str	r4, [r3, #0]
 800a71c:	e73a      	b.n	800a594 <__gethex+0xf8>
 800a71e:	1e71      	subs	r1, r6, #1
 800a720:	4620      	mov	r0, r4
 800a722:	f7fe fb66 	bl	8008df2 <__any_on>
 800a726:	2800      	cmp	r0, #0
 800a728:	d1ed      	bne.n	800a706 <__gethex+0x26a>
 800a72a:	9801      	ldr	r0, [sp, #4]
 800a72c:	4621      	mov	r1, r4
 800a72e:	f7fd ff0f 	bl	8008550 <_Bfree>
 800a732:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a734:	2300      	movs	r3, #0
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	2550      	movs	r5, #80	@ 0x50
 800a73a:	e72b      	b.n	800a594 <__gethex+0xf8>
 800a73c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1f3      	bne.n	800a72a <__gethex+0x28e>
 800a742:	e7e0      	b.n	800a706 <__gethex+0x26a>
 800a744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1dd      	bne.n	800a706 <__gethex+0x26a>
 800a74a:	e7ee      	b.n	800a72a <__gethex+0x28e>
 800a74c:	080177d0 	.word	0x080177d0
 800a750:	08017669 	.word	0x08017669
 800a754:	08017942 	.word	0x08017942
 800a758:	1e6f      	subs	r7, r5, #1
 800a75a:	f1b9 0f00 	cmp.w	r9, #0
 800a75e:	d130      	bne.n	800a7c2 <__gethex+0x326>
 800a760:	b127      	cbz	r7, 800a76c <__gethex+0x2d0>
 800a762:	4639      	mov	r1, r7
 800a764:	4620      	mov	r0, r4
 800a766:	f7fe fb44 	bl	8008df2 <__any_on>
 800a76a:	4681      	mov	r9, r0
 800a76c:	117a      	asrs	r2, r7, #5
 800a76e:	2301      	movs	r3, #1
 800a770:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a774:	f007 071f 	and.w	r7, r7, #31
 800a778:	40bb      	lsls	r3, r7
 800a77a:	4213      	tst	r3, r2
 800a77c:	4629      	mov	r1, r5
 800a77e:	4620      	mov	r0, r4
 800a780:	bf18      	it	ne
 800a782:	f049 0902 	orrne.w	r9, r9, #2
 800a786:	f7ff fe22 	bl	800a3ce <rshift>
 800a78a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a78e:	1b76      	subs	r6, r6, r5
 800a790:	2502      	movs	r5, #2
 800a792:	f1b9 0f00 	cmp.w	r9, #0
 800a796:	d047      	beq.n	800a828 <__gethex+0x38c>
 800a798:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	d015      	beq.n	800a7cc <__gethex+0x330>
 800a7a0:	2b03      	cmp	r3, #3
 800a7a2:	d017      	beq.n	800a7d4 <__gethex+0x338>
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d109      	bne.n	800a7bc <__gethex+0x320>
 800a7a8:	f019 0f02 	tst.w	r9, #2
 800a7ac:	d006      	beq.n	800a7bc <__gethex+0x320>
 800a7ae:	f8da 3000 	ldr.w	r3, [sl]
 800a7b2:	ea49 0903 	orr.w	r9, r9, r3
 800a7b6:	f019 0f01 	tst.w	r9, #1
 800a7ba:	d10e      	bne.n	800a7da <__gethex+0x33e>
 800a7bc:	f045 0510 	orr.w	r5, r5, #16
 800a7c0:	e032      	b.n	800a828 <__gethex+0x38c>
 800a7c2:	f04f 0901 	mov.w	r9, #1
 800a7c6:	e7d1      	b.n	800a76c <__gethex+0x2d0>
 800a7c8:	2501      	movs	r5, #1
 800a7ca:	e7e2      	b.n	800a792 <__gethex+0x2f6>
 800a7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ce:	f1c3 0301 	rsb	r3, r3, #1
 800a7d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a7d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0f0      	beq.n	800a7bc <__gethex+0x320>
 800a7da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a7de:	f104 0314 	add.w	r3, r4, #20
 800a7e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a7e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a7ea:	f04f 0c00 	mov.w	ip, #0
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a7f8:	d01b      	beq.n	800a832 <__gethex+0x396>
 800a7fa:	3201      	adds	r2, #1
 800a7fc:	6002      	str	r2, [r0, #0]
 800a7fe:	2d02      	cmp	r5, #2
 800a800:	f104 0314 	add.w	r3, r4, #20
 800a804:	d13c      	bne.n	800a880 <__gethex+0x3e4>
 800a806:	f8d8 2000 	ldr.w	r2, [r8]
 800a80a:	3a01      	subs	r2, #1
 800a80c:	42b2      	cmp	r2, r6
 800a80e:	d109      	bne.n	800a824 <__gethex+0x388>
 800a810:	1171      	asrs	r1, r6, #5
 800a812:	2201      	movs	r2, #1
 800a814:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a818:	f006 061f 	and.w	r6, r6, #31
 800a81c:	fa02 f606 	lsl.w	r6, r2, r6
 800a820:	421e      	tst	r6, r3
 800a822:	d13a      	bne.n	800a89a <__gethex+0x3fe>
 800a824:	f045 0520 	orr.w	r5, r5, #32
 800a828:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a82a:	601c      	str	r4, [r3, #0]
 800a82c:	9b02      	ldr	r3, [sp, #8]
 800a82e:	601f      	str	r7, [r3, #0]
 800a830:	e6b0      	b.n	800a594 <__gethex+0xf8>
 800a832:	4299      	cmp	r1, r3
 800a834:	f843 cc04 	str.w	ip, [r3, #-4]
 800a838:	d8d9      	bhi.n	800a7ee <__gethex+0x352>
 800a83a:	68a3      	ldr	r3, [r4, #8]
 800a83c:	459b      	cmp	fp, r3
 800a83e:	db17      	blt.n	800a870 <__gethex+0x3d4>
 800a840:	6861      	ldr	r1, [r4, #4]
 800a842:	9801      	ldr	r0, [sp, #4]
 800a844:	3101      	adds	r1, #1
 800a846:	f7fd fe43 	bl	80084d0 <_Balloc>
 800a84a:	4681      	mov	r9, r0
 800a84c:	b918      	cbnz	r0, 800a856 <__gethex+0x3ba>
 800a84e:	4b1a      	ldr	r3, [pc, #104]	@ (800a8b8 <__gethex+0x41c>)
 800a850:	4602      	mov	r2, r0
 800a852:	2184      	movs	r1, #132	@ 0x84
 800a854:	e6c5      	b.n	800a5e2 <__gethex+0x146>
 800a856:	6922      	ldr	r2, [r4, #16]
 800a858:	3202      	adds	r2, #2
 800a85a:	f104 010c 	add.w	r1, r4, #12
 800a85e:	0092      	lsls	r2, r2, #2
 800a860:	300c      	adds	r0, #12
 800a862:	f7ff fd83 	bl	800a36c <memcpy>
 800a866:	4621      	mov	r1, r4
 800a868:	9801      	ldr	r0, [sp, #4]
 800a86a:	f7fd fe71 	bl	8008550 <_Bfree>
 800a86e:	464c      	mov	r4, r9
 800a870:	6923      	ldr	r3, [r4, #16]
 800a872:	1c5a      	adds	r2, r3, #1
 800a874:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a878:	6122      	str	r2, [r4, #16]
 800a87a:	2201      	movs	r2, #1
 800a87c:	615a      	str	r2, [r3, #20]
 800a87e:	e7be      	b.n	800a7fe <__gethex+0x362>
 800a880:	6922      	ldr	r2, [r4, #16]
 800a882:	455a      	cmp	r2, fp
 800a884:	dd0b      	ble.n	800a89e <__gethex+0x402>
 800a886:	2101      	movs	r1, #1
 800a888:	4620      	mov	r0, r4
 800a88a:	f7ff fda0 	bl	800a3ce <rshift>
 800a88e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a892:	3701      	adds	r7, #1
 800a894:	42bb      	cmp	r3, r7
 800a896:	f6ff aee0 	blt.w	800a65a <__gethex+0x1be>
 800a89a:	2501      	movs	r5, #1
 800a89c:	e7c2      	b.n	800a824 <__gethex+0x388>
 800a89e:	f016 061f 	ands.w	r6, r6, #31
 800a8a2:	d0fa      	beq.n	800a89a <__gethex+0x3fe>
 800a8a4:	4453      	add	r3, sl
 800a8a6:	f1c6 0620 	rsb	r6, r6, #32
 800a8aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a8ae:	f7fd ff01 	bl	80086b4 <__hi0bits>
 800a8b2:	42b0      	cmp	r0, r6
 800a8b4:	dbe7      	blt.n	800a886 <__gethex+0x3ea>
 800a8b6:	e7f0      	b.n	800a89a <__gethex+0x3fe>
 800a8b8:	08017669 	.word	0x08017669

0800a8bc <L_shift>:
 800a8bc:	f1c2 0208 	rsb	r2, r2, #8
 800a8c0:	0092      	lsls	r2, r2, #2
 800a8c2:	b570      	push	{r4, r5, r6, lr}
 800a8c4:	f1c2 0620 	rsb	r6, r2, #32
 800a8c8:	6843      	ldr	r3, [r0, #4]
 800a8ca:	6804      	ldr	r4, [r0, #0]
 800a8cc:	fa03 f506 	lsl.w	r5, r3, r6
 800a8d0:	432c      	orrs	r4, r5
 800a8d2:	40d3      	lsrs	r3, r2
 800a8d4:	6004      	str	r4, [r0, #0]
 800a8d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8da:	4288      	cmp	r0, r1
 800a8dc:	d3f4      	bcc.n	800a8c8 <L_shift+0xc>
 800a8de:	bd70      	pop	{r4, r5, r6, pc}

0800a8e0 <__match>:
 800a8e0:	b530      	push	{r4, r5, lr}
 800a8e2:	6803      	ldr	r3, [r0, #0]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8ea:	b914      	cbnz	r4, 800a8f2 <__match+0x12>
 800a8ec:	6003      	str	r3, [r0, #0]
 800a8ee:	2001      	movs	r0, #1
 800a8f0:	bd30      	pop	{r4, r5, pc}
 800a8f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a8fa:	2d19      	cmp	r5, #25
 800a8fc:	bf98      	it	ls
 800a8fe:	3220      	addls	r2, #32
 800a900:	42a2      	cmp	r2, r4
 800a902:	d0f0      	beq.n	800a8e6 <__match+0x6>
 800a904:	2000      	movs	r0, #0
 800a906:	e7f3      	b.n	800a8f0 <__match+0x10>

0800a908 <__hexnan>:
 800a908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90c:	680b      	ldr	r3, [r1, #0]
 800a90e:	6801      	ldr	r1, [r0, #0]
 800a910:	115e      	asrs	r6, r3, #5
 800a912:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a916:	f013 031f 	ands.w	r3, r3, #31
 800a91a:	b087      	sub	sp, #28
 800a91c:	bf18      	it	ne
 800a91e:	3604      	addne	r6, #4
 800a920:	2500      	movs	r5, #0
 800a922:	1f37      	subs	r7, r6, #4
 800a924:	4682      	mov	sl, r0
 800a926:	4690      	mov	r8, r2
 800a928:	9301      	str	r3, [sp, #4]
 800a92a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a92e:	46b9      	mov	r9, r7
 800a930:	463c      	mov	r4, r7
 800a932:	9502      	str	r5, [sp, #8]
 800a934:	46ab      	mov	fp, r5
 800a936:	784a      	ldrb	r2, [r1, #1]
 800a938:	1c4b      	adds	r3, r1, #1
 800a93a:	9303      	str	r3, [sp, #12]
 800a93c:	b342      	cbz	r2, 800a990 <__hexnan+0x88>
 800a93e:	4610      	mov	r0, r2
 800a940:	9105      	str	r1, [sp, #20]
 800a942:	9204      	str	r2, [sp, #16]
 800a944:	f7ff fd95 	bl	800a472 <__hexdig_fun>
 800a948:	2800      	cmp	r0, #0
 800a94a:	d151      	bne.n	800a9f0 <__hexnan+0xe8>
 800a94c:	9a04      	ldr	r2, [sp, #16]
 800a94e:	9905      	ldr	r1, [sp, #20]
 800a950:	2a20      	cmp	r2, #32
 800a952:	d818      	bhi.n	800a986 <__hexnan+0x7e>
 800a954:	9b02      	ldr	r3, [sp, #8]
 800a956:	459b      	cmp	fp, r3
 800a958:	dd13      	ble.n	800a982 <__hexnan+0x7a>
 800a95a:	454c      	cmp	r4, r9
 800a95c:	d206      	bcs.n	800a96c <__hexnan+0x64>
 800a95e:	2d07      	cmp	r5, #7
 800a960:	dc04      	bgt.n	800a96c <__hexnan+0x64>
 800a962:	462a      	mov	r2, r5
 800a964:	4649      	mov	r1, r9
 800a966:	4620      	mov	r0, r4
 800a968:	f7ff ffa8 	bl	800a8bc <L_shift>
 800a96c:	4544      	cmp	r4, r8
 800a96e:	d952      	bls.n	800aa16 <__hexnan+0x10e>
 800a970:	2300      	movs	r3, #0
 800a972:	f1a4 0904 	sub.w	r9, r4, #4
 800a976:	f844 3c04 	str.w	r3, [r4, #-4]
 800a97a:	f8cd b008 	str.w	fp, [sp, #8]
 800a97e:	464c      	mov	r4, r9
 800a980:	461d      	mov	r5, r3
 800a982:	9903      	ldr	r1, [sp, #12]
 800a984:	e7d7      	b.n	800a936 <__hexnan+0x2e>
 800a986:	2a29      	cmp	r2, #41	@ 0x29
 800a988:	d157      	bne.n	800aa3a <__hexnan+0x132>
 800a98a:	3102      	adds	r1, #2
 800a98c:	f8ca 1000 	str.w	r1, [sl]
 800a990:	f1bb 0f00 	cmp.w	fp, #0
 800a994:	d051      	beq.n	800aa3a <__hexnan+0x132>
 800a996:	454c      	cmp	r4, r9
 800a998:	d206      	bcs.n	800a9a8 <__hexnan+0xa0>
 800a99a:	2d07      	cmp	r5, #7
 800a99c:	dc04      	bgt.n	800a9a8 <__hexnan+0xa0>
 800a99e:	462a      	mov	r2, r5
 800a9a0:	4649      	mov	r1, r9
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f7ff ff8a 	bl	800a8bc <L_shift>
 800a9a8:	4544      	cmp	r4, r8
 800a9aa:	d936      	bls.n	800aa1a <__hexnan+0x112>
 800a9ac:	f1a8 0204 	sub.w	r2, r8, #4
 800a9b0:	4623      	mov	r3, r4
 800a9b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a9b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a9ba:	429f      	cmp	r7, r3
 800a9bc:	d2f9      	bcs.n	800a9b2 <__hexnan+0xaa>
 800a9be:	1b3b      	subs	r3, r7, r4
 800a9c0:	f023 0303 	bic.w	r3, r3, #3
 800a9c4:	3304      	adds	r3, #4
 800a9c6:	3401      	adds	r4, #1
 800a9c8:	3e03      	subs	r6, #3
 800a9ca:	42b4      	cmp	r4, r6
 800a9cc:	bf88      	it	hi
 800a9ce:	2304      	movhi	r3, #4
 800a9d0:	4443      	add	r3, r8
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f843 2b04 	str.w	r2, [r3], #4
 800a9d8:	429f      	cmp	r7, r3
 800a9da:	d2fb      	bcs.n	800a9d4 <__hexnan+0xcc>
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	b91b      	cbnz	r3, 800a9e8 <__hexnan+0xe0>
 800a9e0:	4547      	cmp	r7, r8
 800a9e2:	d128      	bne.n	800aa36 <__hexnan+0x12e>
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	603b      	str	r3, [r7, #0]
 800a9e8:	2005      	movs	r0, #5
 800a9ea:	b007      	add	sp, #28
 800a9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f0:	3501      	adds	r5, #1
 800a9f2:	2d08      	cmp	r5, #8
 800a9f4:	f10b 0b01 	add.w	fp, fp, #1
 800a9f8:	dd06      	ble.n	800aa08 <__hexnan+0x100>
 800a9fa:	4544      	cmp	r4, r8
 800a9fc:	d9c1      	bls.n	800a982 <__hexnan+0x7a>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa04:	2501      	movs	r5, #1
 800aa06:	3c04      	subs	r4, #4
 800aa08:	6822      	ldr	r2, [r4, #0]
 800aa0a:	f000 000f 	and.w	r0, r0, #15
 800aa0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aa12:	6020      	str	r0, [r4, #0]
 800aa14:	e7b5      	b.n	800a982 <__hexnan+0x7a>
 800aa16:	2508      	movs	r5, #8
 800aa18:	e7b3      	b.n	800a982 <__hexnan+0x7a>
 800aa1a:	9b01      	ldr	r3, [sp, #4]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d0dd      	beq.n	800a9dc <__hexnan+0xd4>
 800aa20:	f1c3 0320 	rsb	r3, r3, #32
 800aa24:	f04f 32ff 	mov.w	r2, #4294967295
 800aa28:	40da      	lsrs	r2, r3
 800aa2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aa2e:	4013      	ands	r3, r2
 800aa30:	f846 3c04 	str.w	r3, [r6, #-4]
 800aa34:	e7d2      	b.n	800a9dc <__hexnan+0xd4>
 800aa36:	3f04      	subs	r7, #4
 800aa38:	e7d0      	b.n	800a9dc <__hexnan+0xd4>
 800aa3a:	2004      	movs	r0, #4
 800aa3c:	e7d5      	b.n	800a9ea <__hexnan+0xe2>

0800aa3e <__ascii_mbtowc>:
 800aa3e:	b082      	sub	sp, #8
 800aa40:	b901      	cbnz	r1, 800aa44 <__ascii_mbtowc+0x6>
 800aa42:	a901      	add	r1, sp, #4
 800aa44:	b142      	cbz	r2, 800aa58 <__ascii_mbtowc+0x1a>
 800aa46:	b14b      	cbz	r3, 800aa5c <__ascii_mbtowc+0x1e>
 800aa48:	7813      	ldrb	r3, [r2, #0]
 800aa4a:	600b      	str	r3, [r1, #0]
 800aa4c:	7812      	ldrb	r2, [r2, #0]
 800aa4e:	1e10      	subs	r0, r2, #0
 800aa50:	bf18      	it	ne
 800aa52:	2001      	movne	r0, #1
 800aa54:	b002      	add	sp, #8
 800aa56:	4770      	bx	lr
 800aa58:	4610      	mov	r0, r2
 800aa5a:	e7fb      	b.n	800aa54 <__ascii_mbtowc+0x16>
 800aa5c:	f06f 0001 	mvn.w	r0, #1
 800aa60:	e7f8      	b.n	800aa54 <__ascii_mbtowc+0x16>

0800aa62 <_realloc_r>:
 800aa62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa66:	4680      	mov	r8, r0
 800aa68:	4615      	mov	r5, r2
 800aa6a:	460c      	mov	r4, r1
 800aa6c:	b921      	cbnz	r1, 800aa78 <_realloc_r+0x16>
 800aa6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa72:	4611      	mov	r1, r2
 800aa74:	f7fd bca0 	b.w	80083b8 <_malloc_r>
 800aa78:	b92a      	cbnz	r2, 800aa86 <_realloc_r+0x24>
 800aa7a:	f7fd fc29 	bl	80082d0 <_free_r>
 800aa7e:	2400      	movs	r4, #0
 800aa80:	4620      	mov	r0, r4
 800aa82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa86:	f000 f86b 	bl	800ab60 <_malloc_usable_size_r>
 800aa8a:	4285      	cmp	r5, r0
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	d802      	bhi.n	800aa96 <_realloc_r+0x34>
 800aa90:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aa94:	d8f4      	bhi.n	800aa80 <_realloc_r+0x1e>
 800aa96:	4629      	mov	r1, r5
 800aa98:	4640      	mov	r0, r8
 800aa9a:	f7fd fc8d 	bl	80083b8 <_malloc_r>
 800aa9e:	4607      	mov	r7, r0
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d0ec      	beq.n	800aa7e <_realloc_r+0x1c>
 800aaa4:	42b5      	cmp	r5, r6
 800aaa6:	462a      	mov	r2, r5
 800aaa8:	4621      	mov	r1, r4
 800aaaa:	bf28      	it	cs
 800aaac:	4632      	movcs	r2, r6
 800aaae:	f7ff fc5d 	bl	800a36c <memcpy>
 800aab2:	4621      	mov	r1, r4
 800aab4:	4640      	mov	r0, r8
 800aab6:	f7fd fc0b 	bl	80082d0 <_free_r>
 800aaba:	463c      	mov	r4, r7
 800aabc:	e7e0      	b.n	800aa80 <_realloc_r+0x1e>

0800aabe <__ascii_wctomb>:
 800aabe:	4603      	mov	r3, r0
 800aac0:	4608      	mov	r0, r1
 800aac2:	b141      	cbz	r1, 800aad6 <__ascii_wctomb+0x18>
 800aac4:	2aff      	cmp	r2, #255	@ 0xff
 800aac6:	d904      	bls.n	800aad2 <__ascii_wctomb+0x14>
 800aac8:	228a      	movs	r2, #138	@ 0x8a
 800aaca:	601a      	str	r2, [r3, #0]
 800aacc:	f04f 30ff 	mov.w	r0, #4294967295
 800aad0:	4770      	bx	lr
 800aad2:	700a      	strb	r2, [r1, #0]
 800aad4:	2001      	movs	r0, #1
 800aad6:	4770      	bx	lr

0800aad8 <_raise_r>:
 800aad8:	291f      	cmp	r1, #31
 800aada:	b538      	push	{r3, r4, r5, lr}
 800aadc:	4605      	mov	r5, r0
 800aade:	460c      	mov	r4, r1
 800aae0:	d904      	bls.n	800aaec <_raise_r+0x14>
 800aae2:	2316      	movs	r3, #22
 800aae4:	6003      	str	r3, [r0, #0]
 800aae6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaea:	bd38      	pop	{r3, r4, r5, pc}
 800aaec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aaee:	b112      	cbz	r2, 800aaf6 <_raise_r+0x1e>
 800aaf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aaf4:	b94b      	cbnz	r3, 800ab0a <_raise_r+0x32>
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	f000 f830 	bl	800ab5c <_getpid_r>
 800aafc:	4622      	mov	r2, r4
 800aafe:	4601      	mov	r1, r0
 800ab00:	4628      	mov	r0, r5
 800ab02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab06:	f000 b817 	b.w	800ab38 <_kill_r>
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d00a      	beq.n	800ab24 <_raise_r+0x4c>
 800ab0e:	1c59      	adds	r1, r3, #1
 800ab10:	d103      	bne.n	800ab1a <_raise_r+0x42>
 800ab12:	2316      	movs	r3, #22
 800ab14:	6003      	str	r3, [r0, #0]
 800ab16:	2001      	movs	r0, #1
 800ab18:	e7e7      	b.n	800aaea <_raise_r+0x12>
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ab20:	4620      	mov	r0, r4
 800ab22:	4798      	blx	r3
 800ab24:	2000      	movs	r0, #0
 800ab26:	e7e0      	b.n	800aaea <_raise_r+0x12>

0800ab28 <raise>:
 800ab28:	4b02      	ldr	r3, [pc, #8]	@ (800ab34 <raise+0xc>)
 800ab2a:	4601      	mov	r1, r0
 800ab2c:	6818      	ldr	r0, [r3, #0]
 800ab2e:	f7ff bfd3 	b.w	800aad8 <_raise_r>
 800ab32:	bf00      	nop
 800ab34:	2000003c 	.word	0x2000003c

0800ab38 <_kill_r>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	4d07      	ldr	r5, [pc, #28]	@ (800ab58 <_kill_r+0x20>)
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	4604      	mov	r4, r0
 800ab40:	4608      	mov	r0, r1
 800ab42:	4611      	mov	r1, r2
 800ab44:	602b      	str	r3, [r5, #0]
 800ab46:	f7f7 fa21 	bl	8001f8c <_kill>
 800ab4a:	1c43      	adds	r3, r0, #1
 800ab4c:	d102      	bne.n	800ab54 <_kill_r+0x1c>
 800ab4e:	682b      	ldr	r3, [r5, #0]
 800ab50:	b103      	cbz	r3, 800ab54 <_kill_r+0x1c>
 800ab52:	6023      	str	r3, [r4, #0]
 800ab54:	bd38      	pop	{r3, r4, r5, pc}
 800ab56:	bf00      	nop
 800ab58:	20007cac 	.word	0x20007cac

0800ab5c <_getpid_r>:
 800ab5c:	f7f7 ba0e 	b.w	8001f7c <_getpid>

0800ab60 <_malloc_usable_size_r>:
 800ab60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab64:	1f18      	subs	r0, r3, #4
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	bfbc      	itt	lt
 800ab6a:	580b      	ldrlt	r3, [r1, r0]
 800ab6c:	18c0      	addlt	r0, r0, r3
 800ab6e:	4770      	bx	lr

0800ab70 <asin>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	ed2d 8b02 	vpush	{d8}
 800ab76:	ec55 4b10 	vmov	r4, r5, d0
 800ab7a:	f000 f93d 	bl	800adf8 <__ieee754_asin>
 800ab7e:	4622      	mov	r2, r4
 800ab80:	462b      	mov	r3, r5
 800ab82:	4620      	mov	r0, r4
 800ab84:	4629      	mov	r1, r5
 800ab86:	eeb0 8a40 	vmov.f32	s16, s0
 800ab8a:	eef0 8a60 	vmov.f32	s17, s1
 800ab8e:	f7f5 ffcd 	bl	8000b2c <__aeabi_dcmpun>
 800ab92:	b9a8      	cbnz	r0, 800abc0 <asin+0x50>
 800ab94:	ec45 4b10 	vmov	d0, r4, r5
 800ab98:	f000 f84a 	bl	800ac30 <fabs>
 800ab9c:	4b0c      	ldr	r3, [pc, #48]	@ (800abd0 <asin+0x60>)
 800ab9e:	ec51 0b10 	vmov	r0, r1, d0
 800aba2:	2200      	movs	r2, #0
 800aba4:	f7f5 ffb8 	bl	8000b18 <__aeabi_dcmpgt>
 800aba8:	b150      	cbz	r0, 800abc0 <asin+0x50>
 800abaa:	f7fc fcf3 	bl	8007594 <__errno>
 800abae:	ecbd 8b02 	vpop	{d8}
 800abb2:	2321      	movs	r3, #33	@ 0x21
 800abb4:	6003      	str	r3, [r0, #0]
 800abb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abba:	4806      	ldr	r0, [pc, #24]	@ (800abd4 <asin+0x64>)
 800abbc:	f7ff bbe4 	b.w	800a388 <nan>
 800abc0:	eeb0 0a48 	vmov.f32	s0, s16
 800abc4:	eef0 0a68 	vmov.f32	s1, s17
 800abc8:	ecbd 8b02 	vpop	{d8}
 800abcc:	bd38      	pop	{r3, r4, r5, pc}
 800abce:	bf00      	nop
 800abd0:	3ff00000 	.word	0x3ff00000
 800abd4:	08017603 	.word	0x08017603

0800abd8 <sqrt>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	ed2d 8b02 	vpush	{d8}
 800abde:	ec55 4b10 	vmov	r4, r5, d0
 800abe2:	f000 f82d 	bl	800ac40 <__ieee754_sqrt>
 800abe6:	4622      	mov	r2, r4
 800abe8:	462b      	mov	r3, r5
 800abea:	4620      	mov	r0, r4
 800abec:	4629      	mov	r1, r5
 800abee:	eeb0 8a40 	vmov.f32	s16, s0
 800abf2:	eef0 8a60 	vmov.f32	s17, s1
 800abf6:	f7f5 ff99 	bl	8000b2c <__aeabi_dcmpun>
 800abfa:	b990      	cbnz	r0, 800ac22 <sqrt+0x4a>
 800abfc:	2200      	movs	r2, #0
 800abfe:	2300      	movs	r3, #0
 800ac00:	4620      	mov	r0, r4
 800ac02:	4629      	mov	r1, r5
 800ac04:	f7f5 ff6a 	bl	8000adc <__aeabi_dcmplt>
 800ac08:	b158      	cbz	r0, 800ac22 <sqrt+0x4a>
 800ac0a:	f7fc fcc3 	bl	8007594 <__errno>
 800ac0e:	2321      	movs	r3, #33	@ 0x21
 800ac10:	6003      	str	r3, [r0, #0]
 800ac12:	2200      	movs	r2, #0
 800ac14:	2300      	movs	r3, #0
 800ac16:	4610      	mov	r0, r2
 800ac18:	4619      	mov	r1, r3
 800ac1a:	f7f5 fe17 	bl	800084c <__aeabi_ddiv>
 800ac1e:	ec41 0b18 	vmov	d8, r0, r1
 800ac22:	eeb0 0a48 	vmov.f32	s0, s16
 800ac26:	eef0 0a68 	vmov.f32	s1, s17
 800ac2a:	ecbd 8b02 	vpop	{d8}
 800ac2e:	bd38      	pop	{r3, r4, r5, pc}

0800ac30 <fabs>:
 800ac30:	ec51 0b10 	vmov	r0, r1, d0
 800ac34:	4602      	mov	r2, r0
 800ac36:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ac3a:	ec43 2b10 	vmov	d0, r2, r3
 800ac3e:	4770      	bx	lr

0800ac40 <__ieee754_sqrt>:
 800ac40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac44:	4a68      	ldr	r2, [pc, #416]	@ (800ade8 <__ieee754_sqrt+0x1a8>)
 800ac46:	ec55 4b10 	vmov	r4, r5, d0
 800ac4a:	43aa      	bics	r2, r5
 800ac4c:	462b      	mov	r3, r5
 800ac4e:	4621      	mov	r1, r4
 800ac50:	d110      	bne.n	800ac74 <__ieee754_sqrt+0x34>
 800ac52:	4622      	mov	r2, r4
 800ac54:	4620      	mov	r0, r4
 800ac56:	4629      	mov	r1, r5
 800ac58:	f7f5 fcce 	bl	80005f8 <__aeabi_dmul>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	4620      	mov	r0, r4
 800ac62:	4629      	mov	r1, r5
 800ac64:	f7f5 fb12 	bl	800028c <__adddf3>
 800ac68:	4604      	mov	r4, r0
 800ac6a:	460d      	mov	r5, r1
 800ac6c:	ec45 4b10 	vmov	d0, r4, r5
 800ac70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac74:	2d00      	cmp	r5, #0
 800ac76:	dc0e      	bgt.n	800ac96 <__ieee754_sqrt+0x56>
 800ac78:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ac7c:	4322      	orrs	r2, r4
 800ac7e:	d0f5      	beq.n	800ac6c <__ieee754_sqrt+0x2c>
 800ac80:	b19d      	cbz	r5, 800acaa <__ieee754_sqrt+0x6a>
 800ac82:	4622      	mov	r2, r4
 800ac84:	4620      	mov	r0, r4
 800ac86:	4629      	mov	r1, r5
 800ac88:	f7f5 fafe 	bl	8000288 <__aeabi_dsub>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	f7f5 fddc 	bl	800084c <__aeabi_ddiv>
 800ac94:	e7e8      	b.n	800ac68 <__ieee754_sqrt+0x28>
 800ac96:	152a      	asrs	r2, r5, #20
 800ac98:	d115      	bne.n	800acc6 <__ieee754_sqrt+0x86>
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	e009      	b.n	800acb2 <__ieee754_sqrt+0x72>
 800ac9e:	0acb      	lsrs	r3, r1, #11
 800aca0:	3a15      	subs	r2, #21
 800aca2:	0549      	lsls	r1, r1, #21
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d0fa      	beq.n	800ac9e <__ieee754_sqrt+0x5e>
 800aca8:	e7f7      	b.n	800ac9a <__ieee754_sqrt+0x5a>
 800acaa:	462a      	mov	r2, r5
 800acac:	e7fa      	b.n	800aca4 <__ieee754_sqrt+0x64>
 800acae:	005b      	lsls	r3, r3, #1
 800acb0:	3001      	adds	r0, #1
 800acb2:	02dc      	lsls	r4, r3, #11
 800acb4:	d5fb      	bpl.n	800acae <__ieee754_sqrt+0x6e>
 800acb6:	1e44      	subs	r4, r0, #1
 800acb8:	1b12      	subs	r2, r2, r4
 800acba:	f1c0 0420 	rsb	r4, r0, #32
 800acbe:	fa21 f404 	lsr.w	r4, r1, r4
 800acc2:	4323      	orrs	r3, r4
 800acc4:	4081      	lsls	r1, r0
 800acc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800acce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800acd2:	07d2      	lsls	r2, r2, #31
 800acd4:	bf5c      	itt	pl
 800acd6:	005b      	lslpl	r3, r3, #1
 800acd8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800acdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ace0:	bf58      	it	pl
 800ace2:	0049      	lslpl	r1, r1, #1
 800ace4:	2600      	movs	r6, #0
 800ace6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800acea:	106d      	asrs	r5, r5, #1
 800acec:	0049      	lsls	r1, r1, #1
 800acee:	2016      	movs	r0, #22
 800acf0:	4632      	mov	r2, r6
 800acf2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800acf6:	1917      	adds	r7, r2, r4
 800acf8:	429f      	cmp	r7, r3
 800acfa:	bfde      	ittt	le
 800acfc:	193a      	addle	r2, r7, r4
 800acfe:	1bdb      	suble	r3, r3, r7
 800ad00:	1936      	addle	r6, r6, r4
 800ad02:	0fcf      	lsrs	r7, r1, #31
 800ad04:	3801      	subs	r0, #1
 800ad06:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ad0a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ad0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ad12:	d1f0      	bne.n	800acf6 <__ieee754_sqrt+0xb6>
 800ad14:	4604      	mov	r4, r0
 800ad16:	2720      	movs	r7, #32
 800ad18:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	eb00 0e0c 	add.w	lr, r0, ip
 800ad22:	db02      	blt.n	800ad2a <__ieee754_sqrt+0xea>
 800ad24:	d113      	bne.n	800ad4e <__ieee754_sqrt+0x10e>
 800ad26:	458e      	cmp	lr, r1
 800ad28:	d811      	bhi.n	800ad4e <__ieee754_sqrt+0x10e>
 800ad2a:	f1be 0f00 	cmp.w	lr, #0
 800ad2e:	eb0e 000c 	add.w	r0, lr, ip
 800ad32:	da42      	bge.n	800adba <__ieee754_sqrt+0x17a>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	db40      	blt.n	800adba <__ieee754_sqrt+0x17a>
 800ad38:	f102 0801 	add.w	r8, r2, #1
 800ad3c:	1a9b      	subs	r3, r3, r2
 800ad3e:	458e      	cmp	lr, r1
 800ad40:	bf88      	it	hi
 800ad42:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ad46:	eba1 010e 	sub.w	r1, r1, lr
 800ad4a:	4464      	add	r4, ip
 800ad4c:	4642      	mov	r2, r8
 800ad4e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ad52:	3f01      	subs	r7, #1
 800ad54:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ad58:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ad5c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ad60:	d1dc      	bne.n	800ad1c <__ieee754_sqrt+0xdc>
 800ad62:	4319      	orrs	r1, r3
 800ad64:	d01b      	beq.n	800ad9e <__ieee754_sqrt+0x15e>
 800ad66:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800adec <__ieee754_sqrt+0x1ac>
 800ad6a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800adf0 <__ieee754_sqrt+0x1b0>
 800ad6e:	e9da 0100 	ldrd	r0, r1, [sl]
 800ad72:	e9db 2300 	ldrd	r2, r3, [fp]
 800ad76:	f7f5 fa87 	bl	8000288 <__aeabi_dsub>
 800ad7a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	4640      	mov	r0, r8
 800ad84:	4649      	mov	r1, r9
 800ad86:	f7f5 feb3 	bl	8000af0 <__aeabi_dcmple>
 800ad8a:	b140      	cbz	r0, 800ad9e <__ieee754_sqrt+0x15e>
 800ad8c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ad90:	e9da 0100 	ldrd	r0, r1, [sl]
 800ad94:	e9db 2300 	ldrd	r2, r3, [fp]
 800ad98:	d111      	bne.n	800adbe <__ieee754_sqrt+0x17e>
 800ad9a:	3601      	adds	r6, #1
 800ad9c:	463c      	mov	r4, r7
 800ad9e:	1072      	asrs	r2, r6, #1
 800ada0:	0863      	lsrs	r3, r4, #1
 800ada2:	07f1      	lsls	r1, r6, #31
 800ada4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ada8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800adac:	bf48      	it	mi
 800adae:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800adb2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800adb6:	4618      	mov	r0, r3
 800adb8:	e756      	b.n	800ac68 <__ieee754_sqrt+0x28>
 800adba:	4690      	mov	r8, r2
 800adbc:	e7be      	b.n	800ad3c <__ieee754_sqrt+0xfc>
 800adbe:	f7f5 fa65 	bl	800028c <__adddf3>
 800adc2:	e9da 8900 	ldrd	r8, r9, [sl]
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	4640      	mov	r0, r8
 800adcc:	4649      	mov	r1, r9
 800adce:	f7f5 fe85 	bl	8000adc <__aeabi_dcmplt>
 800add2:	b120      	cbz	r0, 800adde <__ieee754_sqrt+0x19e>
 800add4:	1ca0      	adds	r0, r4, #2
 800add6:	bf08      	it	eq
 800add8:	3601      	addeq	r6, #1
 800adda:	3402      	adds	r4, #2
 800addc:	e7df      	b.n	800ad9e <__ieee754_sqrt+0x15e>
 800adde:	1c63      	adds	r3, r4, #1
 800ade0:	f023 0401 	bic.w	r4, r3, #1
 800ade4:	e7db      	b.n	800ad9e <__ieee754_sqrt+0x15e>
 800ade6:	bf00      	nop
 800ade8:	7ff00000 	.word	0x7ff00000
 800adec:	20000200 	.word	0x20000200
 800adf0:	200001f8 	.word	0x200001f8
 800adf4:	00000000 	.word	0x00000000

0800adf8 <__ieee754_asin>:
 800adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	ec55 4b10 	vmov	r4, r5, d0
 800ae00:	4bc7      	ldr	r3, [pc, #796]	@ (800b120 <__ieee754_asin+0x328>)
 800ae02:	b087      	sub	sp, #28
 800ae04:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ae08:	429e      	cmp	r6, r3
 800ae0a:	9501      	str	r5, [sp, #4]
 800ae0c:	d92d      	bls.n	800ae6a <__ieee754_asin+0x72>
 800ae0e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800ae12:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800ae16:	4326      	orrs	r6, r4
 800ae18:	d116      	bne.n	800ae48 <__ieee754_asin+0x50>
 800ae1a:	a3a7      	add	r3, pc, #668	@ (adr r3, 800b0b8 <__ieee754_asin+0x2c0>)
 800ae1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae20:	4620      	mov	r0, r4
 800ae22:	4629      	mov	r1, r5
 800ae24:	f7f5 fbe8 	bl	80005f8 <__aeabi_dmul>
 800ae28:	a3a5      	add	r3, pc, #660	@ (adr r3, 800b0c0 <__ieee754_asin+0x2c8>)
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	4606      	mov	r6, r0
 800ae30:	460f      	mov	r7, r1
 800ae32:	4620      	mov	r0, r4
 800ae34:	4629      	mov	r1, r5
 800ae36:	f7f5 fbdf 	bl	80005f8 <__aeabi_dmul>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	4630      	mov	r0, r6
 800ae40:	4639      	mov	r1, r7
 800ae42:	f7f5 fa23 	bl	800028c <__adddf3>
 800ae46:	e009      	b.n	800ae5c <__ieee754_asin+0x64>
 800ae48:	4622      	mov	r2, r4
 800ae4a:	462b      	mov	r3, r5
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	4629      	mov	r1, r5
 800ae50:	f7f5 fa1a 	bl	8000288 <__aeabi_dsub>
 800ae54:	4602      	mov	r2, r0
 800ae56:	460b      	mov	r3, r1
 800ae58:	f7f5 fcf8 	bl	800084c <__aeabi_ddiv>
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	460d      	mov	r5, r1
 800ae60:	ec45 4b10 	vmov	d0, r4, r5
 800ae64:	b007      	add	sp, #28
 800ae66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae6a:	4bae      	ldr	r3, [pc, #696]	@ (800b124 <__ieee754_asin+0x32c>)
 800ae6c:	429e      	cmp	r6, r3
 800ae6e:	d810      	bhi.n	800ae92 <__ieee754_asin+0x9a>
 800ae70:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800ae74:	f080 80ad 	bcs.w	800afd2 <__ieee754_asin+0x1da>
 800ae78:	a393      	add	r3, pc, #588	@ (adr r3, 800b0c8 <__ieee754_asin+0x2d0>)
 800ae7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7e:	4620      	mov	r0, r4
 800ae80:	4629      	mov	r1, r5
 800ae82:	f7f5 fa03 	bl	800028c <__adddf3>
 800ae86:	4ba8      	ldr	r3, [pc, #672]	@ (800b128 <__ieee754_asin+0x330>)
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f7f5 fe45 	bl	8000b18 <__aeabi_dcmpgt>
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d1e6      	bne.n	800ae60 <__ieee754_asin+0x68>
 800ae92:	ec45 4b10 	vmov	d0, r4, r5
 800ae96:	f7ff fecb 	bl	800ac30 <fabs>
 800ae9a:	49a3      	ldr	r1, [pc, #652]	@ (800b128 <__ieee754_asin+0x330>)
 800ae9c:	ec53 2b10 	vmov	r2, r3, d0
 800aea0:	2000      	movs	r0, #0
 800aea2:	f7f5 f9f1 	bl	8000288 <__aeabi_dsub>
 800aea6:	4ba1      	ldr	r3, [pc, #644]	@ (800b12c <__ieee754_asin+0x334>)
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f7f5 fba5 	bl	80005f8 <__aeabi_dmul>
 800aeae:	a388      	add	r3, pc, #544	@ (adr r3, 800b0d0 <__ieee754_asin+0x2d8>)
 800aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	460d      	mov	r5, r1
 800aeb8:	f7f5 fb9e 	bl	80005f8 <__aeabi_dmul>
 800aebc:	a386      	add	r3, pc, #536	@ (adr r3, 800b0d8 <__ieee754_asin+0x2e0>)
 800aebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec2:	f7f5 f9e3 	bl	800028c <__adddf3>
 800aec6:	4622      	mov	r2, r4
 800aec8:	462b      	mov	r3, r5
 800aeca:	f7f5 fb95 	bl	80005f8 <__aeabi_dmul>
 800aece:	a384      	add	r3, pc, #528	@ (adr r3, 800b0e0 <__ieee754_asin+0x2e8>)
 800aed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed4:	f7f5 f9d8 	bl	8000288 <__aeabi_dsub>
 800aed8:	4622      	mov	r2, r4
 800aeda:	462b      	mov	r3, r5
 800aedc:	f7f5 fb8c 	bl	80005f8 <__aeabi_dmul>
 800aee0:	a381      	add	r3, pc, #516	@ (adr r3, 800b0e8 <__ieee754_asin+0x2f0>)
 800aee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee6:	f7f5 f9d1 	bl	800028c <__adddf3>
 800aeea:	4622      	mov	r2, r4
 800aeec:	462b      	mov	r3, r5
 800aeee:	f7f5 fb83 	bl	80005f8 <__aeabi_dmul>
 800aef2:	a37f      	add	r3, pc, #508	@ (adr r3, 800b0f0 <__ieee754_asin+0x2f8>)
 800aef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef8:	f7f5 f9c6 	bl	8000288 <__aeabi_dsub>
 800aefc:	4622      	mov	r2, r4
 800aefe:	462b      	mov	r3, r5
 800af00:	f7f5 fb7a 	bl	80005f8 <__aeabi_dmul>
 800af04:	a37c      	add	r3, pc, #496	@ (adr r3, 800b0f8 <__ieee754_asin+0x300>)
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	f7f5 f9bf 	bl	800028c <__adddf3>
 800af0e:	4622      	mov	r2, r4
 800af10:	462b      	mov	r3, r5
 800af12:	f7f5 fb71 	bl	80005f8 <__aeabi_dmul>
 800af16:	a37a      	add	r3, pc, #488	@ (adr r3, 800b100 <__ieee754_asin+0x308>)
 800af18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af20:	4620      	mov	r0, r4
 800af22:	4629      	mov	r1, r5
 800af24:	f7f5 fb68 	bl	80005f8 <__aeabi_dmul>
 800af28:	a377      	add	r3, pc, #476	@ (adr r3, 800b108 <__ieee754_asin+0x310>)
 800af2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2e:	f7f5 f9ab 	bl	8000288 <__aeabi_dsub>
 800af32:	4622      	mov	r2, r4
 800af34:	462b      	mov	r3, r5
 800af36:	f7f5 fb5f 	bl	80005f8 <__aeabi_dmul>
 800af3a:	a375      	add	r3, pc, #468	@ (adr r3, 800b110 <__ieee754_asin+0x318>)
 800af3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af40:	f7f5 f9a4 	bl	800028c <__adddf3>
 800af44:	4622      	mov	r2, r4
 800af46:	462b      	mov	r3, r5
 800af48:	f7f5 fb56 	bl	80005f8 <__aeabi_dmul>
 800af4c:	a372      	add	r3, pc, #456	@ (adr r3, 800b118 <__ieee754_asin+0x320>)
 800af4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af52:	f7f5 f999 	bl	8000288 <__aeabi_dsub>
 800af56:	4622      	mov	r2, r4
 800af58:	462b      	mov	r3, r5
 800af5a:	f7f5 fb4d 	bl	80005f8 <__aeabi_dmul>
 800af5e:	4b72      	ldr	r3, [pc, #456]	@ (800b128 <__ieee754_asin+0x330>)
 800af60:	2200      	movs	r2, #0
 800af62:	f7f5 f993 	bl	800028c <__adddf3>
 800af66:	ec45 4b10 	vmov	d0, r4, r5
 800af6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af6e:	f7ff fe67 	bl	800ac40 <__ieee754_sqrt>
 800af72:	4b6f      	ldr	r3, [pc, #444]	@ (800b130 <__ieee754_asin+0x338>)
 800af74:	429e      	cmp	r6, r3
 800af76:	ec5b ab10 	vmov	sl, fp, d0
 800af7a:	f240 80db 	bls.w	800b134 <__ieee754_asin+0x33c>
 800af7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af86:	f7f5 fc61 	bl	800084c <__aeabi_ddiv>
 800af8a:	4652      	mov	r2, sl
 800af8c:	465b      	mov	r3, fp
 800af8e:	f7f5 fb33 	bl	80005f8 <__aeabi_dmul>
 800af92:	4652      	mov	r2, sl
 800af94:	465b      	mov	r3, fp
 800af96:	f7f5 f979 	bl	800028c <__adddf3>
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	f7f5 f975 	bl	800028c <__adddf3>
 800afa2:	a347      	add	r3, pc, #284	@ (adr r3, 800b0c0 <__ieee754_asin+0x2c8>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	f7f5 f96e 	bl	8000288 <__aeabi_dsub>
 800afac:	4602      	mov	r2, r0
 800afae:	460b      	mov	r3, r1
 800afb0:	a141      	add	r1, pc, #260	@ (adr r1, 800b0b8 <__ieee754_asin+0x2c0>)
 800afb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afb6:	f7f5 f967 	bl	8000288 <__aeabi_dsub>
 800afba:	9b01      	ldr	r3, [sp, #4]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	bfdc      	itt	le
 800afc0:	4602      	movle	r2, r0
 800afc2:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800afc6:	4604      	mov	r4, r0
 800afc8:	460d      	mov	r5, r1
 800afca:	bfdc      	itt	le
 800afcc:	4614      	movle	r4, r2
 800afce:	461d      	movle	r5, r3
 800afd0:	e746      	b.n	800ae60 <__ieee754_asin+0x68>
 800afd2:	4622      	mov	r2, r4
 800afd4:	462b      	mov	r3, r5
 800afd6:	4620      	mov	r0, r4
 800afd8:	4629      	mov	r1, r5
 800afda:	f7f5 fb0d 	bl	80005f8 <__aeabi_dmul>
 800afde:	a33c      	add	r3, pc, #240	@ (adr r3, 800b0d0 <__ieee754_asin+0x2d8>)
 800afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe4:	4606      	mov	r6, r0
 800afe6:	460f      	mov	r7, r1
 800afe8:	f7f5 fb06 	bl	80005f8 <__aeabi_dmul>
 800afec:	a33a      	add	r3, pc, #232	@ (adr r3, 800b0d8 <__ieee754_asin+0x2e0>)
 800afee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff2:	f7f5 f94b 	bl	800028c <__adddf3>
 800aff6:	4632      	mov	r2, r6
 800aff8:	463b      	mov	r3, r7
 800affa:	f7f5 fafd 	bl	80005f8 <__aeabi_dmul>
 800affe:	a338      	add	r3, pc, #224	@ (adr r3, 800b0e0 <__ieee754_asin+0x2e8>)
 800b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b004:	f7f5 f940 	bl	8000288 <__aeabi_dsub>
 800b008:	4632      	mov	r2, r6
 800b00a:	463b      	mov	r3, r7
 800b00c:	f7f5 faf4 	bl	80005f8 <__aeabi_dmul>
 800b010:	a335      	add	r3, pc, #212	@ (adr r3, 800b0e8 <__ieee754_asin+0x2f0>)
 800b012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b016:	f7f5 f939 	bl	800028c <__adddf3>
 800b01a:	4632      	mov	r2, r6
 800b01c:	463b      	mov	r3, r7
 800b01e:	f7f5 faeb 	bl	80005f8 <__aeabi_dmul>
 800b022:	a333      	add	r3, pc, #204	@ (adr r3, 800b0f0 <__ieee754_asin+0x2f8>)
 800b024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b028:	f7f5 f92e 	bl	8000288 <__aeabi_dsub>
 800b02c:	4632      	mov	r2, r6
 800b02e:	463b      	mov	r3, r7
 800b030:	f7f5 fae2 	bl	80005f8 <__aeabi_dmul>
 800b034:	a330      	add	r3, pc, #192	@ (adr r3, 800b0f8 <__ieee754_asin+0x300>)
 800b036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03a:	f7f5 f927 	bl	800028c <__adddf3>
 800b03e:	4632      	mov	r2, r6
 800b040:	463b      	mov	r3, r7
 800b042:	f7f5 fad9 	bl	80005f8 <__aeabi_dmul>
 800b046:	a32e      	add	r3, pc, #184	@ (adr r3, 800b100 <__ieee754_asin+0x308>)
 800b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04c:	4680      	mov	r8, r0
 800b04e:	4689      	mov	r9, r1
 800b050:	4630      	mov	r0, r6
 800b052:	4639      	mov	r1, r7
 800b054:	f7f5 fad0 	bl	80005f8 <__aeabi_dmul>
 800b058:	a32b      	add	r3, pc, #172	@ (adr r3, 800b108 <__ieee754_asin+0x310>)
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	f7f5 f913 	bl	8000288 <__aeabi_dsub>
 800b062:	4632      	mov	r2, r6
 800b064:	463b      	mov	r3, r7
 800b066:	f7f5 fac7 	bl	80005f8 <__aeabi_dmul>
 800b06a:	a329      	add	r3, pc, #164	@ (adr r3, 800b110 <__ieee754_asin+0x318>)
 800b06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b070:	f7f5 f90c 	bl	800028c <__adddf3>
 800b074:	4632      	mov	r2, r6
 800b076:	463b      	mov	r3, r7
 800b078:	f7f5 fabe 	bl	80005f8 <__aeabi_dmul>
 800b07c:	a326      	add	r3, pc, #152	@ (adr r3, 800b118 <__ieee754_asin+0x320>)
 800b07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b082:	f7f5 f901 	bl	8000288 <__aeabi_dsub>
 800b086:	4632      	mov	r2, r6
 800b088:	463b      	mov	r3, r7
 800b08a:	f7f5 fab5 	bl	80005f8 <__aeabi_dmul>
 800b08e:	4b26      	ldr	r3, [pc, #152]	@ (800b128 <__ieee754_asin+0x330>)
 800b090:	2200      	movs	r2, #0
 800b092:	f7f5 f8fb 	bl	800028c <__adddf3>
 800b096:	4602      	mov	r2, r0
 800b098:	460b      	mov	r3, r1
 800b09a:	4640      	mov	r0, r8
 800b09c:	4649      	mov	r1, r9
 800b09e:	f7f5 fbd5 	bl	800084c <__aeabi_ddiv>
 800b0a2:	4622      	mov	r2, r4
 800b0a4:	462b      	mov	r3, r5
 800b0a6:	f7f5 faa7 	bl	80005f8 <__aeabi_dmul>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	4629      	mov	r1, r5
 800b0b2:	e6c6      	b.n	800ae42 <__ieee754_asin+0x4a>
 800b0b4:	f3af 8000 	nop.w
 800b0b8:	54442d18 	.word	0x54442d18
 800b0bc:	3ff921fb 	.word	0x3ff921fb
 800b0c0:	33145c07 	.word	0x33145c07
 800b0c4:	3c91a626 	.word	0x3c91a626
 800b0c8:	8800759c 	.word	0x8800759c
 800b0cc:	7e37e43c 	.word	0x7e37e43c
 800b0d0:	0dfdf709 	.word	0x0dfdf709
 800b0d4:	3f023de1 	.word	0x3f023de1
 800b0d8:	7501b288 	.word	0x7501b288
 800b0dc:	3f49efe0 	.word	0x3f49efe0
 800b0e0:	b5688f3b 	.word	0xb5688f3b
 800b0e4:	3fa48228 	.word	0x3fa48228
 800b0e8:	0e884455 	.word	0x0e884455
 800b0ec:	3fc9c155 	.word	0x3fc9c155
 800b0f0:	03eb6f7d 	.word	0x03eb6f7d
 800b0f4:	3fd4d612 	.word	0x3fd4d612
 800b0f8:	55555555 	.word	0x55555555
 800b0fc:	3fc55555 	.word	0x3fc55555
 800b100:	b12e9282 	.word	0xb12e9282
 800b104:	3fb3b8c5 	.word	0x3fb3b8c5
 800b108:	1b8d0159 	.word	0x1b8d0159
 800b10c:	3fe6066c 	.word	0x3fe6066c
 800b110:	9c598ac8 	.word	0x9c598ac8
 800b114:	40002ae5 	.word	0x40002ae5
 800b118:	1c8a2d4b 	.word	0x1c8a2d4b
 800b11c:	40033a27 	.word	0x40033a27
 800b120:	3fefffff 	.word	0x3fefffff
 800b124:	3fdfffff 	.word	0x3fdfffff
 800b128:	3ff00000 	.word	0x3ff00000
 800b12c:	3fe00000 	.word	0x3fe00000
 800b130:	3fef3332 	.word	0x3fef3332
 800b134:	4652      	mov	r2, sl
 800b136:	465b      	mov	r3, fp
 800b138:	4650      	mov	r0, sl
 800b13a:	4659      	mov	r1, fp
 800b13c:	f7f5 f8a6 	bl	800028c <__adddf3>
 800b140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b144:	4606      	mov	r6, r0
 800b146:	460f      	mov	r7, r1
 800b148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b14c:	f7f5 fb7e 	bl	800084c <__aeabi_ddiv>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4630      	mov	r0, r6
 800b156:	4639      	mov	r1, r7
 800b158:	f7f5 fa4e 	bl	80005f8 <__aeabi_dmul>
 800b15c:	f04f 0800 	mov.w	r8, #0
 800b160:	4606      	mov	r6, r0
 800b162:	460f      	mov	r7, r1
 800b164:	4642      	mov	r2, r8
 800b166:	465b      	mov	r3, fp
 800b168:	4640      	mov	r0, r8
 800b16a:	4659      	mov	r1, fp
 800b16c:	f7f5 fa44 	bl	80005f8 <__aeabi_dmul>
 800b170:	4602      	mov	r2, r0
 800b172:	460b      	mov	r3, r1
 800b174:	4620      	mov	r0, r4
 800b176:	4629      	mov	r1, r5
 800b178:	f7f5 f886 	bl	8000288 <__aeabi_dsub>
 800b17c:	4642      	mov	r2, r8
 800b17e:	4604      	mov	r4, r0
 800b180:	460d      	mov	r5, r1
 800b182:	465b      	mov	r3, fp
 800b184:	4650      	mov	r0, sl
 800b186:	4659      	mov	r1, fp
 800b188:	f7f5 f880 	bl	800028c <__adddf3>
 800b18c:	4602      	mov	r2, r0
 800b18e:	460b      	mov	r3, r1
 800b190:	4620      	mov	r0, r4
 800b192:	4629      	mov	r1, r5
 800b194:	f7f5 fb5a 	bl	800084c <__aeabi_ddiv>
 800b198:	4602      	mov	r2, r0
 800b19a:	460b      	mov	r3, r1
 800b19c:	f7f5 f876 	bl	800028c <__adddf3>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	a112      	add	r1, pc, #72	@ (adr r1, 800b1f0 <__ieee754_asin+0x3f8>)
 800b1a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1aa:	f7f5 f86d 	bl	8000288 <__aeabi_dsub>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	4639      	mov	r1, r7
 800b1b6:	f7f5 f867 	bl	8000288 <__aeabi_dsub>
 800b1ba:	4642      	mov	r2, r8
 800b1bc:	4604      	mov	r4, r0
 800b1be:	460d      	mov	r5, r1
 800b1c0:	465b      	mov	r3, fp
 800b1c2:	4640      	mov	r0, r8
 800b1c4:	4659      	mov	r1, fp
 800b1c6:	f7f5 f861 	bl	800028c <__adddf3>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	a10a      	add	r1, pc, #40	@ (adr r1, 800b1f8 <__ieee754_asin+0x400>)
 800b1d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1d4:	f7f5 f858 	bl	8000288 <__aeabi_dsub>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4620      	mov	r0, r4
 800b1de:	4629      	mov	r1, r5
 800b1e0:	f7f5 f852 	bl	8000288 <__aeabi_dsub>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	a103      	add	r1, pc, #12	@ (adr r1, 800b1f8 <__ieee754_asin+0x400>)
 800b1ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1ee:	e6e2      	b.n	800afb6 <__ieee754_asin+0x1be>
 800b1f0:	33145c07 	.word	0x33145c07
 800b1f4:	3c91a626 	.word	0x3c91a626
 800b1f8:	54442d18 	.word	0x54442d18
 800b1fc:	3fe921fb 	.word	0x3fe921fb

0800b200 <_init>:
 800b200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b202:	bf00      	nop
 800b204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b206:	bc08      	pop	{r3}
 800b208:	469e      	mov	lr, r3
 800b20a:	4770      	bx	lr

0800b20c <_fini>:
 800b20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20e:	bf00      	nop
 800b210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b212:	bc08      	pop	{r3}
 800b214:	469e      	mov	lr, r3
 800b216:	4770      	bx	lr
