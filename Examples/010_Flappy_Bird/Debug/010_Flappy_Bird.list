
010_Flappy_Bird.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae40  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c78c  0800afd0  0800afd0  0000bfd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801775c  0801775c  00019208  2**0
                  CONTENTS
  4 .ARM          00000008  0801775c  0801775c  0001875c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017764  08017764  00019208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017764  08017764  00018764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017768  08017768  00018768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0801776c  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00019208  2**0
                  CONTENTS
 10 .bss          00007a9c  20000208  20000208  00019208  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20007ca4  20007ca4  00019208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00019208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc75  00000000  00000000  00019238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000268c  00000000  00000000  00025ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c28  00000000  00000000  00028540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091b  00000000  00000000  00029168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f165  00000000  00000000  00029a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011985  00000000  00000000  00048be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af80b  00000000  00000000  0005a56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00109d78  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046fc  00000000  00000000  00109dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0010e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800afb8 	.word	0x0800afb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800afb8 	.word	0x0800afb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <bsp_lcd_set_background>:
/**
  * @brief  Set the background color on the LCD.
  * @param  hlcd: Pointer to LCD handle.
  * @retval None
  */
void bsp_lcd_set_background(bsp_lcd_t *hlcd) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_rect(hlcd, BACKGROUND,0,(BSP_LCD_BACKGROUND_WIDTH),0,(BSP_LCD_BACKGROUND_HEIGHT));
 8000cfc:	23f0      	movs	r3, #240	@ 0xf0
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	2300      	movs	r3, #0
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	23f0      	movs	r3, #240	@ 0xf0
 8000d06:	2200      	movs	r2, #0
 8000d08:	4903      	ldr	r1, [pc, #12]	@ (8000d18 <bsp_lcd_set_background+0x24>)
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f004 fdbf 	bl	800588e <bsp_lcd_fill_rect>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	009ae8f6 	.word	0x009ae8f6

08000d1c <fill_player_trace>:
/**
  * @brief  Fill the player trace area with the background color.
  * @param  hlcd: Pointer to LCD handle.
  * @retval None
  */
void fill_player_trace(bsp_lcd_t *hlcd){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af02      	add	r7, sp, #8
 8000d22:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_rect(hlcd, BACKGROUND , PLAYER_xSTART, PLAYER_WIDTH, 30, 180);
 8000d24:	23b4      	movs	r3, #180	@ 0xb4
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	231e      	movs	r3, #30
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	231e      	movs	r3, #30
 8000d2e:	2246      	movs	r2, #70	@ 0x46
 8000d30:	4903      	ldr	r1, [pc, #12]	@ (8000d40 <fill_player_trace+0x24>)
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f004 fdab 	bl	800588e <bsp_lcd_fill_rect>
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	009ae8f6 	.word	0x009ae8f6

08000d44 <display_bush>:
/**
  * @brief  Display bush images on the LCD.
  * @param  hlcd: Pointer to LCD handle.
  * @retval None
  */
void display_bush(bsp_lcd_t *hlcd) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_image(hlcd, (uint16_t *)bush, 0, 60, 210, 30);
 8000d4c:	231e      	movs	r3, #30
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	23d2      	movs	r3, #210	@ 0xd2
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	233c      	movs	r3, #60	@ 0x3c
 8000d56:	2200      	movs	r2, #0
 8000d58:	4912      	ldr	r1, [pc, #72]	@ (8000da4 <display_bush+0x60>)
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f004 fe0e 	bl	800597c <bsp_lcd_fill_image>
	bsp_lcd_fill_image(hlcd, (uint16_t *)bush, 60, 60, 210, 30);
 8000d60:	231e      	movs	r3, #30
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	23d2      	movs	r3, #210	@ 0xd2
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	233c      	movs	r3, #60	@ 0x3c
 8000d6a:	223c      	movs	r2, #60	@ 0x3c
 8000d6c:	490d      	ldr	r1, [pc, #52]	@ (8000da4 <display_bush+0x60>)
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f004 fe04 	bl	800597c <bsp_lcd_fill_image>
	bsp_lcd_fill_image(hlcd, (uint16_t *)bush, 120, 60, 210, 30);
 8000d74:	231e      	movs	r3, #30
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	23d2      	movs	r3, #210	@ 0xd2
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	233c      	movs	r3, #60	@ 0x3c
 8000d7e:	2278      	movs	r2, #120	@ 0x78
 8000d80:	4908      	ldr	r1, [pc, #32]	@ (8000da4 <display_bush+0x60>)
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f004 fdfa 	bl	800597c <bsp_lcd_fill_image>
	bsp_lcd_fill_image(hlcd, (uint16_t *)bush, 180, 60, 210, 30);
 8000d88:	231e      	movs	r3, #30
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	23d2      	movs	r3, #210	@ 0xd2
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	233c      	movs	r3, #60	@ 0x3c
 8000d92:	22b4      	movs	r2, #180	@ 0xb4
 8000d94:	4903      	ldr	r1, [pc, #12]	@ (8000da4 <display_bush+0x60>)
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f004 fdf0 	bl	800597c <bsp_lcd_fill_image>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	0800b174 	.word	0x0800b174

08000da8 <flappy_game_set_back_ground>:
/**
  * @brief  Set the background and display bush images for the Flappy Bird game.
  * @param  hlcd: Pointer to LCD handle.
  * @retval None
  */
void flappy_game_set_back_ground(bsp_lcd_t *hlcd) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	bsp_lcd_set_background(hlcd);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff9f 	bl	8000cf4 <bsp_lcd_set_background>
  display_bush(hlcd);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffc4 	bl	8000d44 <display_bush>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <fill_countdown_trace>:
/**
  * @brief  Fill the countdown trace area with the background color.
  * @param  hlcd: Pointer to LCD handle.
  * @retval None
  */
void fill_countdown_trace(bsp_lcd_t *hlcd) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_rect(hlcd, BACKGROUND,0,240,107,26);
 8000dcc:	231a      	movs	r3, #26
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	236b      	movs	r3, #107	@ 0x6b
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	23f0      	movs	r3, #240	@ 0xf0
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	4908      	ldr	r1, [pc, #32]	@ (8000dfc <fill_countdown_trace+0x38>)
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f004 fd57 	bl	800588e <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, BACKGROUND,116,16,140,26);
 8000de0:	231a      	movs	r3, #26
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	238c      	movs	r3, #140	@ 0x8c
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2310      	movs	r3, #16
 8000dea:	2274      	movs	r2, #116	@ 0x74
 8000dec:	4903      	ldr	r1, [pc, #12]	@ (8000dfc <fill_countdown_trace+0x38>)
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f004 fd4d 	bl	800588e <bsp_lcd_fill_rect>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	009ae8f6 	.word	0x009ae8f6

08000e00 <fill_gameover_trace>:
/**
  * @brief  Fill the game over trace area with the background color.
  * @param  hlcd: Pointer to LCD handle.
  * @retval None
  */
void fill_gameover_trace(bsp_lcd_t *hlcd) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_rect(hlcd, BACKGROUND , 0, 240, 96, 4);
 8000e08:	2304      	movs	r3, #4
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	2360      	movs	r3, #96	@ 0x60
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	23f0      	movs	r3, #240	@ 0xf0
 8000e12:	2200      	movs	r2, #0
 8000e14:	4903      	ldr	r1, [pc, #12]	@ (8000e24 <fill_gameover_trace+0x24>)
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f004 fd39 	bl	800588e <bsp_lcd_fill_rect>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	009ae8f6 	.word	0x009ae8f6

08000e28 <display_game_title>:
/**
  * @brief  Display the game title on the LCD.
  * @param  hlcd: Pointer to LCD handle.
  * @retval None
  */
void display_game_title(bsp_lcd_t *hlcd) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_image(hlcd, (uint16_t *)Flappy_font1, 20, 200, 30, 40);
 8000e30:	2328      	movs	r3, #40	@ 0x28
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	231e      	movs	r3, #30
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	23c8      	movs	r3, #200	@ 0xc8
 8000e3a:	2214      	movs	r2, #20
 8000e3c:	4908      	ldr	r1, [pc, #32]	@ (8000e60 <display_game_title+0x38>)
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f004 fd9c 	bl	800597c <bsp_lcd_fill_image>
	bsp_lcd_fill_image(hlcd, (uint16_t *)Flappy_font2, 20, 200, 70, 39);
 8000e44:	2327      	movs	r3, #39	@ 0x27
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	2346      	movs	r3, #70	@ 0x46
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	23c8      	movs	r3, #200	@ 0xc8
 8000e4e:	2214      	movs	r2, #20
 8000e50:	4904      	ldr	r1, [pc, #16]	@ (8000e64 <display_game_title+0x3c>)
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f004 fd92 	bl	800597c <bsp_lcd_fill_image>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	0800bf84 	.word	0x0800bf84
 8000e64:	0800fe04 	.word	0x0800fe04

08000e68 <Player_ctor>:
/* USER CODE BEGIN 0 */
GamteState game_state ;
Player player;
Obstacle obstacle;

static void Player_ctor(Player* player, int player_x, int player_y) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
	player->x = player_x;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	601a      	str	r2, [r3, #0]
	player->y = player_y;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	605a      	str	r2, [r3, #4]
	player->score = 0;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <Obstacle_ctor>:

static void Obstacle_ctor(Obstacle* obstacle, int obstacle_x, int obstacle_y) {
 8000e92:	b480      	push	{r7}
 8000e94:	b085      	sub	sp, #20
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
	obstacle->x = obstacle_x;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	601a      	str	r2, [r3, #0]
	obstacle->y = obstacle_y;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	605a      	str	r2, [r3, #4]
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	static uint32_t current_time;
	current_time = HAL_GetTick();
 8000ebe:	f001 f9eb 	bl	8002298 <HAL_GetTick>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4a3b      	ldr	r2, [pc, #236]	@ (8000fb4 <main+0xfc>)
 8000ec6:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec8:	f001 f98c 	bl	80021e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ecc:	f000 f87e 	bl	8000fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed0:	f000 f95c 	bl	800118c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ed4:	f000 f91c 	bl	8001110 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000ed8:	f000 f8d4 	bl	8001084 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Player_ctor(&player, 70, 30);
 8000edc:	221e      	movs	r2, #30
 8000ede:	2146      	movs	r1, #70	@ 0x46
 8000ee0:	4835      	ldr	r0, [pc, #212]	@ (8000fb8 <main+0x100>)
 8000ee2:	f7ff ffc1 	bl	8000e68 <Player_ctor>
  Obstacle_ctor(&obstacle, 240, 30);
 8000ee6:	221e      	movs	r2, #30
 8000ee8:	21f0      	movs	r1, #240	@ 0xf0
 8000eea:	4834      	ldr	r0, [pc, #208]	@ (8000fbc <main+0x104>)
 8000eec:	f7ff ffd1 	bl	8000e92 <Obstacle_ctor>
  mpu6050_Init();
 8000ef0:	f000 fade 	bl	80014b0 <mpu6050_Init>
  nano_lcd_Init();
 8000ef4:	f000 f9a2 	bl	800123c <nano_lcd_Init>

  double prev_degreey = degreey; // Initialize previous angle variable
 8000ef8:	4b31      	ldr	r3, [pc, #196]	@ (8000fc0 <main+0x108>)
 8000efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efe:	e9c7 2302 	strd	r2, r3, [r7, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	mpu6050_read();
 8000f02:	f000 fb59 	bl	80015b8 <mpu6050_read>

		if(HAL_GetTick() - current_time >= 5) {
 8000f06:	f001 f9c7 	bl	8002298 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	4b29      	ldr	r3, [pc, #164]	@ (8000fb4 <main+0xfc>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d9f5      	bls.n	8000f02 <main+0x4a>

			current_time = HAL_GetTick();
 8000f16:	f001 f9bf 	bl	8002298 <HAL_GetTick>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a25      	ldr	r2, [pc, #148]	@ (8000fb4 <main+0xfc>)
 8000f1e:	6013      	str	r3, [r2, #0]

			angle_delta = degreey - prev_degreey;
 8000f20:	4b27      	ldr	r3, [pc, #156]	@ (8000fc0 <main+0x108>)
 8000f22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f2a:	f7ff f9ad 	bl	8000288 <__aeabi_dsub>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4924      	ldr	r1, [pc, #144]	@ (8000fc4 <main+0x10c>)
 8000f34:	e9c1 2300 	strd	r2, r3, [r1]
			prev_degreey = degreey;
 8000f38:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <main+0x108>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	e9c7 2302 	strd	r2, r3, [r7, #8]
			double smoothing_factor = 6;
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	4b20      	ldr	r3, [pc, #128]	@ (8000fc8 <main+0x110>)
 8000f48:	e9c7 2300 	strd	r2, r3, [r7]

			player.y -= smoothing_factor * angle_delta;
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <main+0x100>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fae7 	bl	8000524 <__aeabi_i2d>
 8000f56:	4604      	mov	r4, r0
 8000f58:	460d      	mov	r5, r1
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <main+0x10c>)
 8000f5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f64:	f7ff fb48 	bl	80005f8 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	4629      	mov	r1, r5
 8000f70:	f7ff f98a 	bl	8000288 <__aeabi_dsub>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f7ff fdec 	bl	8000b58 <__aeabi_d2iz>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb8 <main+0x100>)
 8000f84:	6053      	str	r3, [r2, #4]
			player.y += GRAVITY_PULL;
 8000f86:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <main+0x100>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <main+0x100>)
 8000f8e:	6053      	str	r3, [r2, #4]

			if (player.y <= PLAYER_ySTART_POINT) {
 8000f90:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <main+0x100>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b1e      	cmp	r3, #30
 8000f96:	dc03      	bgt.n	8000fa0 <main+0xe8>
				player.y = PLAYER_ySTART_POINT;
 8000f98:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <main+0x100>)
 8000f9a:	221e      	movs	r2, #30
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	e006      	b.n	8000fae <main+0xf6>
			} else if (player.y >= PLAYER_yEND_POINT) {
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <main+0x100>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2bb3      	cmp	r3, #179	@ 0xb3
 8000fa6:	dd02      	ble.n	8000fae <main+0xf6>
				player.y = PLAYER_yEND_POINT;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <main+0x100>)
 8000faa:	22b4      	movs	r2, #180	@ 0xb4
 8000fac:	605a      	str	r2, [r3, #4]
			}
			tick();
 8000fae:	f000 f97f 	bl	80012b0 <tick>
  	mpu6050_read();
 8000fb2:	e7a6      	b.n	8000f02 <main+0x4a>
 8000fb4:	20007b38 	.word	0x20007b38
 8000fb8:	20007b24 	.word	0x20007b24
 8000fbc:	20007b30 	.word	0x20007b30
 8000fc0:	20007b10 	.word	0x20007b10
 8000fc4:	20007b40 	.word	0x20007b40
 8000fc8:	40180000 	.word	0x40180000

08000fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b09e      	sub	sp, #120	@ 0x78
 8000fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000fd6:	2228      	movs	r2, #40	@ 0x28
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f006 f964 	bl	80072a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	223c      	movs	r2, #60	@ 0x3c
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f006 f956 	bl	80072a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001000:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001004:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100a:	2301      	movs	r3, #1
 800100c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100e:	2310      	movs	r3, #16
 8001010:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001012:	2302      	movs	r3, #2
 8001014:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001016:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800101a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800101c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001020:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001022:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001026:	4618      	mov	r0, r3
 8001028:	f002 fa04 	bl	8003434 <HAL_RCC_OscConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001032:	f000 fa37 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	230f      	movs	r3, #15
 8001038:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103a:	2302      	movs	r3, #2
 800103c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001042:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001046:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001050:	2102      	movs	r1, #2
 8001052:	4618      	mov	r0, r3
 8001054:	f003 fa2c 	bl	80044b0 <HAL_RCC_ClockConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800105e:	f000 fa21 	bl	80014a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001062:	2320      	movs	r3, #32
 8001064:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4618      	mov	r0, r3
 800106e:	f003 fc05 	bl	800487c <HAL_RCCEx_PeriphCLKConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001078:	f000 fa14 	bl	80014a4 <Error_Handler>
  }
}
 800107c:	bf00      	nop
 800107e:	3778      	adds	r7, #120	@ 0x78
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001088:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <MX_I2C1_Init+0x80>)
 800108a:	4a1f      	ldr	r2, [pc, #124]	@ (8001108 <MX_I2C1_Init+0x84>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000001;
 800108e:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <MX_I2C1_Init+0x80>)
 8001090:	2201      	movs	r2, #1
 8001092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001094:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <MX_I2C1_Init+0x80>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109a:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <MX_I2C1_Init+0x80>)
 800109c:	2201      	movs	r2, #1
 800109e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a0:	4b18      	ldr	r3, [pc, #96]	@ (8001104 <MX_I2C1_Init+0x80>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010a6:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <MX_I2C1_Init+0x80>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010ac:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <MX_I2C1_Init+0x80>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_I2C1_Init+0x80>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_I2C1_Init+0x80>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010be:	4811      	ldr	r0, [pc, #68]	@ (8001104 <MX_I2C1_Init+0x80>)
 80010c0:	f001 fbaa 	bl	8002818 <HAL_I2C_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ca:	f000 f9eb 	bl	80014a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ce:	2100      	movs	r1, #0
 80010d0:	480c      	ldr	r0, [pc, #48]	@ (8001104 <MX_I2C1_Init+0x80>)
 80010d2:	f002 f917 	bl	8003304 <HAL_I2CEx_ConfigAnalogFilter>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010dc:	f000 f9e2 	bl	80014a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010e0:	2100      	movs	r1, #0
 80010e2:	4808      	ldr	r0, [pc, #32]	@ (8001104 <MX_I2C1_Init+0x80>)
 80010e4:	f002 f959 	bl	800339a <HAL_I2CEx_ConfigDigitalFilter>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010ee:	f000 f9d9 	bl	80014a4 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <MX_I2C1_Init+0x88>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a05      	ldr	r2, [pc, #20]	@ (800110c <MX_I2C1_Init+0x88>)
 80010f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80010fc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20007a50 	.word	0x20007a50
 8001108:	40005400 	.word	0x40005400
 800110c:	40010000 	.word	0x40010000

08001110 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001114:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <MX_SPI1_Init+0x74>)
 8001116:	4a1c      	ldr	r2, [pc, #112]	@ (8001188 <MX_SPI1_Init+0x78>)
 8001118:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800111a:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <MX_SPI1_Init+0x74>)
 800111c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001120:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001122:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <MX_SPI1_Init+0x74>)
 8001124:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001128:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800112a:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <MX_SPI1_Init+0x74>)
 800112c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001130:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_SPI1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <MX_SPI1_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <MX_SPI1_Init+0x74>)
 8001140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001144:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001146:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <MX_SPI1_Init+0x74>)
 8001148:	2208      	movs	r2, #8
 800114a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800114c:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <MX_SPI1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <MX_SPI1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001158:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <MX_SPI1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <MX_SPI1_Init+0x74>)
 8001160:	2207      	movs	r2, #7
 8001162:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001164:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <MX_SPI1_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <MX_SPI1_Init+0x74>)
 800116c:	2208      	movs	r2, #8
 800116e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	@ (8001184 <MX_SPI1_Init+0x74>)
 8001172:	f003 fd33 	bl	8004bdc <HAL_SPI_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800117c:	f000 f992 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20007aa4 	.word	0x20007aa4
 8001188:	40013000 	.word	0x40013000

0800118c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a2:	4b25      	ldr	r3, [pc, #148]	@ (8001238 <MX_GPIO_Init+0xac>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	4a24      	ldr	r2, [pc, #144]	@ (8001238 <MX_GPIO_Init+0xac>)
 80011a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011ac:	6153      	str	r3, [r2, #20]
 80011ae:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <MX_GPIO_Init+0xac>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <MX_GPIO_Init+0xac>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	4a1e      	ldr	r2, [pc, #120]	@ (8001238 <MX_GPIO_Init+0xac>)
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c4:	6153      	str	r3, [r2, #20]
 80011c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <MX_GPIO_Init+0xac>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <MX_GPIO_Init+0xac>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	4a18      	ldr	r2, [pc, #96]	@ (8001238 <MX_GPIO_Init+0xac>)
 80011d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011dc:	6153      	str	r3, [r2, #20]
 80011de:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <MX_GPIO_Init+0xac>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_CS_Pin|LCD_RS_A0_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2158      	movs	r1, #88	@ 0x58
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f2:	f001 faf9 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f6:	2301      	movs	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120c:	f001 f95a 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_CS_Pin LCD_RS_A0_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin|LCD_RS_A0_Pin;
 8001210:	2358      	movs	r3, #88	@ 0x58
 8001212:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4619      	mov	r1, r3
 8001226:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800122a:	f001 f94b 	bl	80024c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800122e:	bf00      	nop
 8001230:	3720      	adds	r7, #32
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000

0800123c <nano_lcd_Init>:
/**
  * @brief Initializes the Nano LCD display.
  * @param None
  * @retval None
  */
void nano_lcd_Init(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
	gc9a01a_hw_reset();
 8001242:	f004 fb05 	bl	8005850 <gc9a01a_hw_reset>
	gc9a01a_config2();
 8001246:	f004 f93a 	bl	80054be <gc9a01a_config2>
	lcd_area_t area;
	area.x1 = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	803b      	strh	r3, [r7, #0]
	area.x2 = 240;
 800124e:	23f0      	movs	r3, #240	@ 0xf0
 8001250:	807b      	strh	r3, [r7, #2]
	area.y1 = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	80bb      	strh	r3, [r7, #4]
	area.y2 = 240;
 8001256:	23f0      	movs	r3, #240	@ 0xf0
 8001258:	80fb      	strh	r3, [r7, #6]
	gc9a01a_set_display_area(&area);
 800125a:	463b      	mov	r3, r7
 800125c:	4618      	mov	r0, r3
 800125e:	f004 f8ec 	bl	800543a <gc9a01a_set_display_area>
	gc9a01a_set_orientation(LANDSCAPE);
 8001262:	2001      	movs	r0, #1
 8001264:	f004 f888 	bl	8005378 <gc9a01a_set_orientation>

	hlcd->draw_buffer1 = bsp_db;
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <nano_lcd_Init+0x68>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0e      	ldr	r2, [pc, #56]	@ (80012a8 <nano_lcd_Init+0x6c>)
 800126e:	605a      	str	r2, [r3, #4]
	hlcd->draw_buffer2 = bsp_wb;
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <nano_lcd_Init+0x68>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0d      	ldr	r2, [pc, #52]	@ (80012ac <nano_lcd_Init+0x70>)
 8001276:	609a      	str	r2, [r3, #8]
	hlcd->buff_to_draw = NULL;
 8001278:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <nano_lcd_Init+0x68>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
	hlcd->buff_to_flush = NULL;
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <nano_lcd_Init+0x68>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
	hlcd->db_size = DB_SIZE;
 8001288:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <nano_lcd_Init+0x68>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f44f 5270 	mov.w	r2, #15360	@ 0x3c00
 8001290:	621a      	str	r2, [r3, #32]

	flappy_game_set_back_ground(hlcd);
 8001292:	4b04      	ldr	r3, [pc, #16]	@ (80012a4 <nano_lcd_Init+0x68>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fd86 	bl	8000da8 <flappy_game_set_back_ground>
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000224 	.word	0x20000224
 80012ac:	20003e24 	.word	0x20003e24

080012b0 <tick>:
/**
  * @brief Updates the game state based on events and conditions.
  * @param None
  * @retval None
  */
void tick() {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af02      	add	r7, sp, #8
	switch (game_state) {
 80012b6:	4b53      	ldr	r3, [pc, #332]	@ (8001404 <tick+0x154>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	f200 809e 	bhi.w	80013fc <tick+0x14c>
 80012c0:	a201      	add	r2, pc, #4	@ (adr r2, 80012c8 <tick+0x18>)
 80012c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c6:	bf00      	nop
 80012c8:	080012d9 	.word	0x080012d9
 80012cc:	0800130f 	.word	0x0800130f
 80012d0:	08001339 	.word	0x08001339
 80012d4:	080013a9 	.word	0x080013a9
		case GAME_INIT: {
			GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80012d8:	2101      	movs	r1, #1
 80012da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012de:	f001 fa6b 	bl	80027b8 <HAL_GPIO_ReadPin>
 80012e2:	4603      	mov	r3, r0
 80012e4:	71bb      	strb	r3, [r7, #6]
			game_init_mssg(hlcd);
 80012e6:	4b48      	ldr	r3, [pc, #288]	@ (8001408 <tick+0x158>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fde2 	bl	8001eb4 <game_init_mssg>

			if (pinState == GPIO_PIN_SET) {
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d17d      	bne.n	80013f2 <tick+0x142>
				HAL_Delay(25);
 80012f6:	2019      	movs	r0, #25
 80012f8:	f000 ffda 	bl	80022b0 <HAL_Delay>
				flappy_game_set_back_ground(hlcd);
 80012fc:	4b42      	ldr	r3, [pc, #264]	@ (8001408 <tick+0x158>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fd51 	bl	8000da8 <flappy_game_set_back_ground>
				game_state = GAME_PRESTART;
 8001306:	4b3f      	ldr	r3, [pc, #252]	@ (8001404 <tick+0x154>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800130c:	e071      	b.n	80013f2 <tick+0x142>

		case GAME_PRESTART: {
			move_player(hlcd, player.y);
 800130e:	4b3e      	ldr	r3, [pc, #248]	@ (8001408 <tick+0x158>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a3e      	ldr	r2, [pc, #248]	@ (800140c <tick+0x15c>)
 8001314:	6852      	ldr	r2, [r2, #4]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fbb3 	bl	8001a84 <move_player>
			render_gamestart_countdown(hlcd);
 800131e:	4b3a      	ldr	r3, [pc, #232]	@ (8001408 <tick+0x158>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f000 fe2e 	bl	8001f84 <render_gamestart_countdown>
			if(countdown_complete == true) {
 8001328:	4b39      	ldr	r3, [pc, #228]	@ (8001410 <tick+0x160>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d162      	bne.n	80013f6 <tick+0x146>
				game_state = GAME_START;
 8001330:	4b34      	ldr	r3, [pc, #208]	@ (8001404 <tick+0x154>)
 8001332:	2202      	movs	r2, #2
 8001334:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8001336:	e05e      	b.n	80013f6 <tick+0x146>

		case GAME_START: {
			is_Collide(&obstacle, &player);
 8001338:	4934      	ldr	r1, [pc, #208]	@ (800140c <tick+0x15c>)
 800133a:	4836      	ldr	r0, [pc, #216]	@ (8001414 <tick+0x164>)
 800133c:	f000 f870 	bl	8001420 <is_Collide>
			if(collision_detected == true) {
 8001340:	4b35      	ldr	r3, [pc, #212]	@ (8001418 <tick+0x168>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d103      	bne.n	8001350 <tick+0xa0>
				game_state = GAME_OVER;
 8001348:	4b2e      	ldr	r3, [pc, #184]	@ (8001404 <tick+0x154>)
 800134a:	2203      	movs	r2, #3
 800134c:	701a      	strb	r2, [r3, #0]
					obstacle.x = 240;
				}
				player_show_score(&player);
			}
		}
		break;
 800134e:	e055      	b.n	80013fc <tick+0x14c>
				move_player(hlcd, player.y);
 8001350:	4b2d      	ldr	r3, [pc, #180]	@ (8001408 <tick+0x158>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a2d      	ldr	r2, [pc, #180]	@ (800140c <tick+0x15c>)
 8001356:	6852      	ldr	r2, [r2, #4]
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fb92 	bl	8001a84 <move_player>
				obstacle.x -= 5;
 8001360:	4b2c      	ldr	r3, [pc, #176]	@ (8001414 <tick+0x164>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	3b05      	subs	r3, #5
 8001366:	4a2b      	ldr	r2, [pc, #172]	@ (8001414 <tick+0x164>)
 8001368:	6013      	str	r3, [r2, #0]
				if(obstacle.x != 0) {
 800136a:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <tick+0x164>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d008      	beq.n	8001384 <tick+0xd4>
					move_obstacle(hlcd,obstacle.x);
 8001372:	4b25      	ldr	r3, [pc, #148]	@ (8001408 <tick+0x158>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a27      	ldr	r2, [pc, #156]	@ (8001414 <tick+0x164>)
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fb3b 	bl	80019f8 <move_obstacle>
 8001382:	e00d      	b.n	80013a0 <tick+0xf0>
					bsp_lcd_fill_rect(hlcd, BACKGROUND , 0, 40, 0, 240);
 8001384:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <tick+0x158>)
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	23f0      	movs	r3, #240	@ 0xf0
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	2300      	movs	r3, #0
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2328      	movs	r3, #40	@ 0x28
 8001392:	2200      	movs	r2, #0
 8001394:	4921      	ldr	r1, [pc, #132]	@ (800141c <tick+0x16c>)
 8001396:	f004 fa7a 	bl	800588e <bsp_lcd_fill_rect>
					obstacle.x = 240;
 800139a:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <tick+0x164>)
 800139c:	22f0      	movs	r2, #240	@ 0xf0
 800139e:	601a      	str	r2, [r3, #0]
				player_show_score(&player);
 80013a0:	481a      	ldr	r0, [pc, #104]	@ (800140c <tick+0x15c>)
 80013a2:	f000 fe5b 	bl	800205c <player_show_score>
		break;
 80013a6:	e029      	b.n	80013fc <tick+0x14c>

		case GAME_OVER: {
			collision_detected = false;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <tick+0x168>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
			game_over_mssg(hlcd);
 80013ae:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <tick+0x158>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fdb2 	bl	8001f1c <game_over_mssg>
			GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80013b8:	2101      	movs	r1, #1
 80013ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013be:	f001 f9fb 	bl	80027b8 <HAL_GPIO_ReadPin>
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
			if (pinState == GPIO_PIN_SET) {
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d116      	bne.n	80013fa <tick+0x14a>

				Player_ctor(&player, 70, 30);
 80013cc:	221e      	movs	r2, #30
 80013ce:	2146      	movs	r1, #70	@ 0x46
 80013d0:	480e      	ldr	r0, [pc, #56]	@ (800140c <tick+0x15c>)
 80013d2:	f7ff fd49 	bl	8000e68 <Player_ctor>
				Obstacle_ctor(&obstacle, 240, 30);
 80013d6:	221e      	movs	r2, #30
 80013d8:	21f0      	movs	r1, #240	@ 0xf0
 80013da:	480e      	ldr	r0, [pc, #56]	@ (8001414 <tick+0x164>)
 80013dc:	f7ff fd59 	bl	8000e92 <Obstacle_ctor>
				flappy_game_set_back_ground(hlcd);
 80013e0:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <tick+0x158>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fcdf 	bl	8000da8 <flappy_game_set_back_ground>
				game_state = GAME_PRESTART;
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <tick+0x154>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80013f0:	e003      	b.n	80013fa <tick+0x14a>
		break;
 80013f2:	bf00      	nop
 80013f4:	e002      	b.n	80013fc <tick+0x14c>
		break;
 80013f6:	bf00      	nop
 80013f8:	e000      	b.n	80013fc <tick+0x14c>
		break;
 80013fa:	bf00      	nop
	}
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20007b20 	.word	0x20007b20
 8001408:	20000000 	.word	0x20000000
 800140c:	20007b24 	.word	0x20007b24
 8001410:	20007b1c 	.word	0x20007b1c
 8001414:	20007b30 	.word	0x20007b30
 8001418:	20007b18 	.word	0x20007b18
 800141c:	009ae8f6 	.word	0x009ae8f6

08001420 <is_Collide>:
  * @brief Checks for collision between an obstacle and the player.
  * @param obstacle: Pointer to the Obstacle struct containing obstacle information.
  * @param player: Pointer to the Player struct containing player information.
  * @retval None
  */
void is_Collide(Obstacle *obstacle, Player *player) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
	int player_left = player->x;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
	int player_right = player->x + PLAYER_WIDTH -5;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3319      	adds	r3, #25
 8001436:	623b      	str	r3, [r7, #32]
	int player_top = player->y;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	61fb      	str	r3, [r7, #28]
	int player_bottom = player->y + PLAYER_HEIGHT-5;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	3319      	adds	r3, #25
 8001444:	61bb      	str	r3, [r7, #24]

	int obstacle_left = obstacle->x;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	617b      	str	r3, [r7, #20]
	int obstacle_right = obstacle->x + OBSTACLE_WIDTH;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	331e      	adds	r3, #30
 8001452:	613b      	str	r3, [r7, #16]

	int top_obstacle_height = generate_obstacle_height(obstacle->x);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f000 f9fd 	bl	8001858 <generate_obstacle_height>
 800145e:	60f8      	str	r0, [r7, #12]
	int obstacle_bottom = OBSTACLE_ySTART_POINT + top_obstacle_height -5;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3319      	adds	r3, #25
 8001464:	60bb      	str	r3, [r7, #8]

	if (player_right  >= obstacle_left && player_left <= obstacle_right ){
 8001466:	6a3a      	ldr	r2, [r7, #32]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	429a      	cmp	r2, r3
 800146c:	db14      	blt.n	8001498 <is_Collide+0x78>
 800146e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	429a      	cmp	r2, r3
 8001474:	dc10      	bgt.n	8001498 <is_Collide+0x78>
		if( (player_top  < obstacle_bottom) || (player_bottom > (obstacle_bottom + OBSTACLE_GAP +10))) {
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	429a      	cmp	r2, r3
 800147c:	db04      	blt.n	8001488 <is_Collide+0x68>
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	335a      	adds	r3, #90	@ 0x5a
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	429a      	cmp	r2, r3
 8001486:	dd02      	ble.n	800148e <is_Collide+0x6e>
			collision_detected = true;
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <is_Collide+0x80>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]
		}
		player->score += 1;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	609a      	str	r2, [r3, #8]
	}
}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	@ 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20007b18 	.word	0x20007b18

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <Error_Handler+0x8>

080014b0 <mpu6050_Init>:
/**
  * @brief Initializes the MPU6050 sensor by configuring power management, gyroscope, and accelerometer.
  * @param None
  * @retval None
  */
void mpu6050_Init() {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  PowerManagement_Config();
 80014b4:	f000 f806 	bl	80014c4 <PowerManagement_Config>
  Gyro_Config();
 80014b8:	f000 f82c 	bl	8001514 <Gyro_Config>
  Accelerometer_Config();
 80014bc:	f000 f852 	bl	8001564 <Accelerometer_Config>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <PowerManagement_Config>:
  * @brief Configures the power management settings of the MPU6050 sensor to exit sleep mode.
  * @param None
  * @retval None
  */
void PowerManagement_Config()
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af04      	add	r7, sp, #16
  /* Set the value to be written to the power management register */
  temp_data = 0x00;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <PowerManagement_Config+0x40>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]

  /* Write the value to the power management register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_USR_CTRL, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	9302      	str	r3, [sp, #8]
 80014d6:	2301      	movs	r3, #1
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <PowerManagement_Config+0x40>)
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2301      	movs	r3, #1
 80014e0:	226b      	movs	r2, #107	@ 0x6b
 80014e2:	21d0      	movs	r1, #208	@ 0xd0
 80014e4:	4808      	ldr	r0, [pc, #32]	@ (8001508 <PowerManagement_Config+0x44>)
 80014e6:	f001 fa27 	bl	8002938 <HAL_I2C_Mem_Write>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d103      	bne.n	80014f8 <PowerManagement_Config+0x34>
    /*print in SWV terminal*/
    printf("Exiting from sleep mode...\n");
 80014f0:	4806      	ldr	r0, [pc, #24]	@ (800150c <PowerManagement_Config+0x48>)
 80014f2:	f005 fdd9 	bl	80070a8 <puts>
  } else {
    printf("Failed to exit from sleep mode...\n");
  }
}
 80014f6:	e002      	b.n	80014fe <PowerManagement_Config+0x3a>
    printf("Failed to exit from sleep mode...\n");
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <PowerManagement_Config+0x4c>)
 80014fa:	f005 fdd5 	bl	80070a8 <puts>
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20007b48 	.word	0x20007b48
 8001508:	20007a50 	.word	0x20007a50
 800150c:	0800afd0 	.word	0x0800afd0
 8001510:	0800afec 	.word	0x0800afec

08001514 <Gyro_Config>:
  * @brief Configures the gyroscope settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Gyro_Config()
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af04      	add	r7, sp, #16
  /* Set the value to be written to the gyroscope configuration register */
  temp_data = FS_GYRO_500;
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <Gyro_Config+0x40>)
 800151c:	2208      	movs	r2, #8
 800151e:	701a      	strb	r2, [r3, #0]

  /* Write the value to the gyroscope configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_GYRO, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	2301      	movs	r3, #1
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <Gyro_Config+0x40>)
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2301      	movs	r3, #1
 8001530:	221b      	movs	r2, #27
 8001532:	21d0      	movs	r1, #208	@ 0xd0
 8001534:	4808      	ldr	r0, [pc, #32]	@ (8001558 <Gyro_Config+0x44>)
 8001536:	f001 f9ff 	bl	8002938 <HAL_I2C_Mem_Write>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d103      	bne.n	8001548 <Gyro_Config+0x34>
    printf("Configuring gyroscope...\n");
 8001540:	4806      	ldr	r0, [pc, #24]	@ (800155c <Gyro_Config+0x48>)
 8001542:	f005 fdb1 	bl	80070a8 <puts>
  } else {
    printf("Failed to configure gyroscope...\n");
  }
}
 8001546:	e002      	b.n	800154e <Gyro_Config+0x3a>
    printf("Failed to configure gyroscope...\n");
 8001548:	4805      	ldr	r0, [pc, #20]	@ (8001560 <Gyro_Config+0x4c>)
 800154a:	f005 fdad 	bl	80070a8 <puts>
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20007b48 	.word	0x20007b48
 8001558:	20007a50 	.word	0x20007a50
 800155c:	0800b010 	.word	0x0800b010
 8001560:	0800b02c 	.word	0x0800b02c

08001564 <Accelerometer_Config>:
  * @brief Configures the accelerometer settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Accelerometer_Config()
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af04      	add	r7, sp, #16
  /* Set the value to be written to the accelerometer configuration register */
  temp_data = FS_ACC_4G;
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <Accelerometer_Config+0x40>)
 800156c:	2208      	movs	r2, #8
 800156e:	701a      	strb	r2, [r3, #0]

  /* Write the value to the accelerometer configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_ACC, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	2301      	movs	r3, #1
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <Accelerometer_Config+0x40>)
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2301      	movs	r3, #1
 8001580:	221c      	movs	r2, #28
 8001582:	21d0      	movs	r1, #208	@ 0xd0
 8001584:	4808      	ldr	r0, [pc, #32]	@ (80015a8 <Accelerometer_Config+0x44>)
 8001586:	f001 f9d7 	bl	8002938 <HAL_I2C_Mem_Write>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d103      	bne.n	8001598 <Accelerometer_Config+0x34>
    printf("Configuring accelerometer...\n");
 8001590:	4806      	ldr	r0, [pc, #24]	@ (80015ac <Accelerometer_Config+0x48>)
 8001592:	f005 fd89 	bl	80070a8 <puts>
  } else {
    printf("Failed to configure accelerometer...\n");
  }
}
 8001596:	e002      	b.n	800159e <Accelerometer_Config+0x3a>
    printf("Failed to configure accelerometer...\n");
 8001598:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <Accelerometer_Config+0x4c>)
 800159a:	f005 fd85 	bl	80070a8 <puts>
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20007b48 	.word	0x20007b48
 80015a8:	20007a50 	.word	0x20007a50
 80015ac:	0800b050 	.word	0x0800b050
 80015b0:	0800b070 	.word	0x0800b070
 80015b4:	00000000 	.word	0x00000000

080015b8 <mpu6050_read>:
  * @brief Reads data from the MPU6050 sensor, including accelerometer and gyroscope values,
  *        and calculates roll and pitch angles using the accelerometer data.
  * @param None
  * @retval None
  */
void mpu6050_read() {
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b0a2      	sub	sp, #136	@ 0x88
 80015bc:	af0a      	add	r7, sp, #40	@ 0x28
  int16_t x_acc, y_acc, z_acc;              // Accelerometer data for x, y, and z axes
  int16_t x_gyro, y_gyro, z_gyro;           // Gyroscope data for x, y, and z axes
  double accx,accy,accz,gyrox,gyroy,gyroz;
  double radianx, radiany;
  // Read all sensor data from the MPU6050
  HAL_I2C_Mem_Read(&hi2c1, (MPU6050_ADDR << 1), REG_DATA, 1, data, 14, HAL_MAX_DELAY);
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	230e      	movs	r3, #14
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	463b      	mov	r3, r7
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2301      	movs	r3, #1
 80015ce:	223b      	movs	r2, #59	@ 0x3b
 80015d0:	21d0      	movs	r1, #208	@ 0xd0
 80015d2:	489b      	ldr	r0, [pc, #620]	@ (8001840 <mpu6050_read+0x288>)
 80015d4:	f001 fac4 	bl	8002b60 <HAL_I2C_Mem_Read>
  /* Extract accelerometer data (16-bit 2's complement format, high byte first) */
  x_acc = (int16_t)((data[0] << 8) | data[1]);
 80015d8:	783b      	ldrb	r3, [r7, #0]
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	b21a      	sxth	r2, r3
 80015de:	787b      	ldrb	r3, [r7, #1]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  y_acc = (int16_t)((data[2] << 8) | data[3]);
 80015e8:	78bb      	ldrb	r3, [r7, #2]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  z_acc = (int16_t)((data[4] << 8) | data[5]);
 80015f8:	793b      	ldrb	r3, [r7, #4]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	797b      	ldrb	r3, [r7, #5]
 8001600:	b21b      	sxth	r3, r3
 8001602:	4313      	orrs	r3, r2
 8001604:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

  /* Extract gyroscope data (16-bit 2's complement format, high byte first) */
  x_gyro = (int16_t)((data[8] << 8) | data[9]);
 8001608:	7a3b      	ldrb	r3, [r7, #8]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b21a      	sxth	r2, r3
 800160e:	7a7b      	ldrb	r3, [r7, #9]
 8001610:	b21b      	sxth	r3, r3
 8001612:	4313      	orrs	r3, r2
 8001614:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  y_gyro = (int16_t)((data[10] << 8) | data[11]);
 8001618:	7abb      	ldrb	r3, [r7, #10]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	b21a      	sxth	r2, r3
 800161e:	7afb      	ldrb	r3, [r7, #11]
 8001620:	b21b      	sxth	r3, r3
 8001622:	4313      	orrs	r3, r2
 8001624:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  z_gyro = (int16_t)((data[12] << 8) | data[13]);
 8001628:	7b3b      	ldrb	r3, [r7, #12]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	b21a      	sxth	r2, r3
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	b21b      	sxth	r3, r3
 8001632:	4313      	orrs	r3, r2
 8001634:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

  /*Convert accelerometer raw values in to 'g'(acceleration due to gravity) values */
  accx = (double)x_acc / ACC_FS_SENSITIVITY_3;
 8001638:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff71 	bl	8000524 <__aeabi_i2d>
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	4b7f      	ldr	r3, [pc, #508]	@ (8001844 <mpu6050_read+0x28c>)
 8001648:	f7ff f900 	bl	800084c <__aeabi_ddiv>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  accy = (double)y_acc / ACC_FS_SENSITIVITY_3;
 8001654:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff63 	bl	8000524 <__aeabi_i2d>
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	4b78      	ldr	r3, [pc, #480]	@ (8001844 <mpu6050_read+0x28c>)
 8001664:	f7ff f8f2 	bl	800084c <__aeabi_ddiv>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  accz = (double)z_acc / ACC_FS_SENSITIVITY_3;
 8001670:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff55 	bl	8000524 <__aeabi_i2d>
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	4b71      	ldr	r3, [pc, #452]	@ (8001844 <mpu6050_read+0x28c>)
 8001680:	f7ff f8e4 	bl	800084c <__aeabi_ddiv>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  /* Convert gyroscope raw values to degrees per second ('°/s') */
  gyrox = (double)x_gyro / GYR_FS_SENSITIVITY_3;
 800168c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff47 	bl	8000524 <__aeabi_i2d>
 8001696:	a366      	add	r3, pc, #408	@ (adr r3, 8001830 <mpu6050_read+0x278>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7ff f8d6 	bl	800084c <__aeabi_ddiv>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  gyroy = (double)y_gyro / GYR_FS_SENSITIVITY_3;
 80016a8:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff39 	bl	8000524 <__aeabi_i2d>
 80016b2:	a35f      	add	r3, pc, #380	@ (adr r3, 8001830 <mpu6050_read+0x278>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7ff f8c8 	bl	800084c <__aeabi_ddiv>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  gyroz = (double)z_gyro / GYR_FS_SENSITIVITY_3;
 80016c4:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff2b 	bl	8000524 <__aeabi_i2d>
 80016ce:	a358      	add	r3, pc, #352	@ (adr r3, 8001830 <mpu6050_read+0x278>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7ff f8ba 	bl	800084c <__aeabi_ddiv>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	e9c7 2308 	strd	r2, r3, [r7, #32]

  /* Calculate roll and pitch angles using accelerometer data */
  radianx = asin(accx / sqrt(accx * accx + accz * accz)); // Fix the arguments passed to asin
 80016e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80016e4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80016e8:	f7fe ff86 	bl	80005f8 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4614      	mov	r4, r2
 80016f2:	461d      	mov	r5, r3
 80016f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80016f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80016fc:	f7fe ff7c 	bl	80005f8 <__aeabi_dmul>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4620      	mov	r0, r4
 8001706:	4629      	mov	r1, r5
 8001708:	f7fe fdc0 	bl	800028c <__adddf3>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	ec43 2b17 	vmov	d7, r2, r3
 8001714:	eeb0 0a47 	vmov.f32	s0, s14
 8001718:	eef0 0a67 	vmov.f32	s1, s15
 800171c:	f009 f938 	bl	800a990 <sqrt>
 8001720:	ec53 2b10 	vmov	r2, r3, d0
 8001724:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001728:	f7ff f890 	bl	800084c <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	ec43 2b17 	vmov	d7, r2, r3
 8001734:	eeb0 0a47 	vmov.f32	s0, s14
 8001738:	eef0 0a67 	vmov.f32	s1, s15
 800173c:	f009 f8f4 	bl	800a928 <asin>
 8001740:	ed87 0b06 	vstr	d0, [r7, #24]
  radiany = asin(accy / sqrt(accy * accy + accz * accz)); // Fix the arguments passed to asin
 8001744:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001748:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800174c:	f7fe ff54 	bl	80005f8 <__aeabi_dmul>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4614      	mov	r4, r2
 8001756:	461d      	mov	r5, r3
 8001758:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800175c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001760:	f7fe ff4a 	bl	80005f8 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4620      	mov	r0, r4
 800176a:	4629      	mov	r1, r5
 800176c:	f7fe fd8e 	bl	800028c <__adddf3>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	ec43 2b17 	vmov	d7, r2, r3
 8001778:	eeb0 0a47 	vmov.f32	s0, s14
 800177c:	eef0 0a67 	vmov.f32	s1, s15
 8001780:	f009 f906 	bl	800a990 <sqrt>
 8001784:	ec53 2b10 	vmov	r2, r3, d0
 8001788:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800178c:	f7ff f85e 	bl	800084c <__aeabi_ddiv>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	ec43 2b17 	vmov	d7, r2, r3
 8001798:	eeb0 0a47 	vmov.f32	s0, s14
 800179c:	eef0 0a67 	vmov.f32	s1, s15
 80017a0:	f009 f8c2 	bl	800a928 <asin>
 80017a4:	ed87 0b04 	vstr	d0, [r7, #16]

  /* Convert roll and pitch angles from radians to degrees */
  degreex = radianx * (180.0 / M_PI); // Roll
 80017a8:	a323      	add	r3, pc, #140	@ (adr r3, 8001838 <mpu6050_read+0x280>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017b2:	f7fe ff21 	bl	80005f8 <__aeabi_dmul>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4923      	ldr	r1, [pc, #140]	@ (8001848 <mpu6050_read+0x290>)
 80017bc:	e9c1 2300 	strd	r2, r3, [r1]
  degreey = radiany * (180.0 / M_PI); // Pitch
 80017c0:	a31d      	add	r3, pc, #116	@ (adr r3, 8001838 <mpu6050_read+0x280>)
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017ca:	f7fe ff15 	bl	80005f8 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	491e      	ldr	r1, [pc, #120]	@ (800184c <mpu6050_read+0x294>)
 80017d4:	e9c1 2300 	strd	r2, r3, [r1]

  /* Print out the accelerometer and gyroscope values along with roll and pitch angles in SWV terminal */
  printf("Acc(g)=> X:%.2f Y:%.2f Z:%.2f   Gyro(dps)=> X:%.2f Y:%.2f Z:%.2f\n", accx, accy, accz, gyrox, gyroy, gyroz);
 80017d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80017e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80017e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80017e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80017fc:	e9cd 2300 	strd	r2, r3, [sp]
 8001800:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001804:	4812      	ldr	r0, [pc, #72]	@ (8001850 <mpu6050_read+0x298>)
 8001806:	f005 fbe7 	bl	8006fd8 <iprintf>
  printf("Roll: %.2f degrees, Pitch: %.2f degrees\n", degreex, degreey);
 800180a:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <mpu6050_read+0x290>)
 800180c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001810:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <mpu6050_read+0x294>)
 8001812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001816:	e9cd 2300 	strd	r2, r3, [sp]
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	480d      	ldr	r0, [pc, #52]	@ (8001854 <mpu6050_read+0x29c>)
 8001820:	f005 fbda 	bl	8006fd8 <iprintf>
}
 8001824:	bf00      	nop
 8001826:	3760      	adds	r7, #96	@ 0x60
 8001828:	46bd      	mov	sp, r7
 800182a:	bdb0      	pop	{r4, r5, r7, pc}
 800182c:	f3af 8000 	nop.w
 8001830:	66666666 	.word	0x66666666
 8001834:	40306666 	.word	0x40306666
 8001838:	1a63c1f8 	.word	0x1a63c1f8
 800183c:	404ca5dc 	.word	0x404ca5dc
 8001840:	20007a50 	.word	0x20007a50
 8001844:	40a00000 	.word	0x40a00000
 8001848:	20007b08 	.word	0x20007b08
 800184c:	20007b10 	.word	0x20007b10
 8001850:	0800b098 	.word	0x0800b098
 8001854:	0800b0dc 	.word	0x0800b0dc

08001858 <generate_obstacle_height>:
/**
  * @brief  Generate the height of the obstacle.
  * @param  x_start: Starting position of the obstacle.
  * @retval The height of the obstacle.
  */
int generate_obstacle_height(int x_start) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	static int top_obstacle_height = -1; // Initialize with -1 to indicate it's not set yet
	// Generate random top_obstacle_height if it's not set yet or x_start is 210
	if (top_obstacle_height == -1 || x_start == 240) {
 8001860:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <generate_obstacle_height+0x4c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d002      	beq.n	8001870 <generate_obstacle_height+0x18>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2bf0      	cmp	r3, #240	@ 0xf0
 800186e:	d113      	bne.n	8001898 <generate_obstacle_height+0x40>
		top_obstacle_height = rand() % (90 - 20 + 1) + 20;
 8001870:	f004 fc46 	bl	8006100 <rand>
 8001874:	4601      	mov	r1, r0
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <generate_obstacle_height+0x50>)
 8001878:	fb83 2301 	smull	r2, r3, r3, r1
 800187c:	440b      	add	r3, r1
 800187e:	119a      	asrs	r2, r3, #6
 8001880:	17cb      	asrs	r3, r1, #31
 8001882:	1ad2      	subs	r2, r2, r3
 8001884:	4613      	mov	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	1aca      	subs	r2, r1, r3
 8001890:	f102 0314 	add.w	r3, r2, #20
 8001894:	4a03      	ldr	r2, [pc, #12]	@ (80018a4 <generate_obstacle_height+0x4c>)
 8001896:	6013      	str	r3, [r2, #0]
	}
	return top_obstacle_height;
 8001898:	4b02      	ldr	r3, [pc, #8]	@ (80018a4 <generate_obstacle_height+0x4c>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000004 	.word	0x20000004
 80018a8:	e6c2b449 	.word	0xe6c2b449

080018ac <display_obstacle>:
  * @brief  Display the obstacle on the LCD.
  * @param  hlcd: Pointer to LCD handle.
  * @param  x_start: Starting position of the obstacle.
  * @retval None
  */
void display_obstacle(bsp_lcd_t *hlcd, int x_start) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
	score_card_background(hlcd);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f8ae 	bl	8001a18 <score_card_background>
	
	int top_obstacle_height = generate_obstacle_height(x_start);
 80018bc:	6838      	ldr	r0, [r7, #0]
 80018be:	f7ff ffcb 	bl	8001858 <generate_obstacle_height>
 80018c2:	6178      	str	r0, [r7, #20]
	int bottom_obstacle_ystart = top_obstacle_height + OBSTACLE_ySTART_POINT + OBSTACLE_GAP;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	336e      	adds	r3, #110	@ 0x6e
 80018c8:	613b      	str	r3, [r7, #16]
	int bottom_obstacle_height = OBSTACLE_yEND_POINT - bottom_obstacle_ystart;
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	f1c3 03d2 	rsb	r3, r3, #210	@ 0xd2
 80018d0:	60fb      	str	r3, [r7, #12]

	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_1,x_start,OBSTACLE_WIDTH,OBSTACLE_ySTART_POINT,top_obstacle_height);
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	231e      	movs	r3, #30
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	231e      	movs	r3, #30
 80018de:	4942      	ldr	r1, [pc, #264]	@ (80019e8 <display_obstacle+0x13c>)
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f003 ffd4 	bl	800588e <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_1,x_start,30,bottom_obstacle_ystart,bottom_obstacle_height);
 80018e6:	6839      	ldr	r1, [r7, #0]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	9201      	str	r2, [sp, #4]
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	231e      	movs	r3, #30
 80018f2:	460a      	mov	r2, r1
 80018f4:	493c      	ldr	r1, [pc, #240]	@ (80019e8 <display_obstacle+0x13c>)
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f003 ffc9 	bl	800588e <bsp_lcd_fill_rect>

	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_2,x_start+3,20,OBSTACLE_ySTART_POINT,top_obstacle_height-2);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	3303      	adds	r3, #3
 8001900:	461a      	mov	r2, r3
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3b02      	subs	r3, #2
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	231e      	movs	r3, #30
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	2314      	movs	r3, #20
 800190e:	4937      	ldr	r1, [pc, #220]	@ (80019ec <display_obstacle+0x140>)
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f003 ffbc 	bl	800588e <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_2,x_start+3,20,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	3303      	adds	r3, #3
 800191a:	4619      	mov	r1, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	3302      	adds	r3, #2
 8001920:	461a      	mov	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	3b02      	subs	r3, #2
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	9200      	str	r2, [sp, #0]
 800192a:	2314      	movs	r3, #20
 800192c:	460a      	mov	r2, r1
 800192e:	492f      	ldr	r1, [pc, #188]	@ (80019ec <display_obstacle+0x140>)
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f003 ffac 	bl	800588e <bsp_lcd_fill_rect>

	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_3,x_start+5,15,OBSTACLE_ySTART_POINT,top_obstacle_height-2);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	3305      	adds	r3, #5
 800193a:	461a      	mov	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3b02      	subs	r3, #2
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	231e      	movs	r3, #30
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	230f      	movs	r3, #15
 8001948:	4929      	ldr	r1, [pc, #164]	@ (80019f0 <display_obstacle+0x144>)
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f003 ff9f 	bl	800588e <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, OBSTACLE_SHADE_3,x_start+5,15,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	3305      	adds	r3, #5
 8001954:	4619      	mov	r1, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	3302      	adds	r3, #2
 800195a:	461a      	mov	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3b02      	subs	r3, #2
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	9200      	str	r2, [sp, #0]
 8001964:	230f      	movs	r3, #15
 8001966:	460a      	mov	r2, r1
 8001968:	4921      	ldr	r1, [pc, #132]	@ (80019f0 <display_obstacle+0x144>)
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f003 ff8f 	bl	800588e <bsp_lcd_fill_rect>

	bsp_lcd_fill_rect(hlcd, WHITE,x_start+7,10,OBSTACLE_ySTART_POINT,top_obstacle_height-2);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	3307      	adds	r3, #7
 8001974:	461a      	mov	r2, r3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3b02      	subs	r3, #2
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	231e      	movs	r3, #30
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	230a      	movs	r3, #10
 8001982:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f003 ff81 	bl	800588e <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, WHITE,x_start+7,10,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	3307      	adds	r3, #7
 8001990:	4619      	mov	r1, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	3302      	adds	r3, #2
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3b02      	subs	r3, #2
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	9200      	str	r2, [sp, #0]
 80019a0:	230a      	movs	r3, #10
 80019a2:	460a      	mov	r2, r1
 80019a4:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f003 ff70 	bl	800588e <bsp_lcd_fill_rect>

	/* filling traces of obstacle */
	bsp_lcd_fill_rect(hlcd, BACKGROUND ,(x_start+30), OBSTACLE_WIDTH, OBSTACLE_ySTART_POINT, top_obstacle_height);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	331e      	adds	r3, #30
 80019b2:	461a      	mov	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	231e      	movs	r3, #30
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	231e      	movs	r3, #30
 80019be:	490d      	ldr	r1, [pc, #52]	@ (80019f4 <display_obstacle+0x148>)
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f003 ff64 	bl	800588e <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, BACKGROUND,(x_start+30),30,bottom_obstacle_ystart,bottom_obstacle_height);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	331e      	adds	r3, #30
 80019ca:	4619      	mov	r1, r3
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	9201      	str	r2, [sp, #4]
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	231e      	movs	r3, #30
 80019d6:	460a      	mov	r2, r1
 80019d8:	4906      	ldr	r1, [pc, #24]	@ (80019f4 <display_obstacle+0x148>)
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f003 ff57 	bl	800588e <bsp_lcd_fill_rect>
}
 80019e0:	bf00      	nop
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	00517900 	.word	0x00517900
 80019ec:	0078b201 	.word	0x0078b201
 80019f0:	0098e100 	.word	0x0098e100
 80019f4:	009ae8f6 	.word	0x009ae8f6

080019f8 <move_obstacle>:
  * @brief  Move the obstacle on the LCD.
  * @param  hlcd: Pointer to LCD handle.
  * @param  x: Position to move the obstacle to.
  * @retval None
  */
void move_obstacle(bsp_lcd_t *hlcd, int x) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	display_obstacle(hlcd, x);
 8001a02:	6839      	ldr	r1, [r7, #0]
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff51 	bl	80018ac <display_obstacle>
	display_bush(hlcd);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff f99a 	bl	8000d44 <display_bush>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <score_card_background>:
/**
  * @brief  Draw the background for the score card on the LCD.
  * @param  hlcd: Pointer to LCD handle.
  * @retval None
  */
void score_card_background(bsp_lcd_t *hlcd) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	6078      	str	r0, [r7, #4]
	bsp_lcd_fill_rect(hlcd, SCORE_BOARD_SHADE_3, 0, 96,0,25);
 8001a20:	2319      	movs	r3, #25
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	2300      	movs	r3, #0
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2360      	movs	r3, #96	@ 0x60
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	4912      	ldr	r1, [pc, #72]	@ (8001a78 <score_card_background+0x60>)
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f003 ff2d 	bl	800588e <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, SCORE_BOARD_SHADE_3, 144, 96,0,25);
 8001a34:	2319      	movs	r3, #25
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	2360      	movs	r3, #96	@ 0x60
 8001a3e:	2290      	movs	r2, #144	@ 0x90
 8001a40:	490d      	ldr	r1, [pc, #52]	@ (8001a78 <score_card_background+0x60>)
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f003 ff23 	bl	800588e <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, SCORE_BOARD_SHADE_2, 0, 240,25,3);
 8001a48:	2303      	movs	r3, #3
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	2319      	movs	r3, #25
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	23f0      	movs	r3, #240	@ 0xf0
 8001a52:	2200      	movs	r2, #0
 8001a54:	4909      	ldr	r1, [pc, #36]	@ (8001a7c <score_card_background+0x64>)
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f003 ff19 	bl	800588e <bsp_lcd_fill_rect>
	bsp_lcd_fill_rect(hlcd, SCORE_BOARD_SHADE_1, 0, 240,28,2);
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	9301      	str	r3, [sp, #4]
 8001a60:	231c      	movs	r3, #28
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	23f0      	movs	r3, #240	@ 0xf0
 8001a66:	2200      	movs	r2, #0
 8001a68:	4905      	ldr	r1, [pc, #20]	@ (8001a80 <score_card_background+0x68>)
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f003 ff0f 	bl	800588e <bsp_lcd_fill_rect>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	00e4e0e0 	.word	0x00e4e0e0
 8001a7c:	00969595 	.word	0x00969595
 8001a80:	00727171 	.word	0x00727171

08001a84 <move_player>:
  * @brief  Move the player on the LCD.
  * @param  hlcd: Pointer to LCD handle.
  * @param  y_pos: Starting position of the player.
  * @retval None
  */
void move_player(bsp_lcd_t *hlcd,  int y_pos) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
	static int wing_movement=1;
	fill_player_trace(hlcd);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff f944 	bl	8000d1c <fill_player_trace>
	if(wing_movement%5==0){
 8001a94:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <move_player+0x6c>)
 8001a96:	6819      	ldr	r1, [r3, #0]
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <move_player+0x70>)
 8001a9a:	fb83 2301 	smull	r2, r3, r3, r1
 8001a9e:	105a      	asrs	r2, r3, #1
 8001aa0:	17cb      	asrs	r3, r1, #31
 8001aa2:	1ad2      	subs	r2, r2, r3
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	1aca      	subs	r2, r1, r3
 8001aac:	2a00      	cmp	r2, #0
 8001aae:	d10b      	bne.n	8001ac8 <move_player+0x44>
		bsp_lcd_fill_image(hlcd, (uint16_t *)image_data_bird, PLAYER_xSTART, PLAYER_WIDTH, y_pos, PLAYER_HEIGHT);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	221e      	movs	r2, #30
 8001ab6:	9201      	str	r2, [sp, #4]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	231e      	movs	r3, #30
 8001abc:	2246      	movs	r2, #70	@ 0x46
 8001abe:	490e      	ldr	r1, [pc, #56]	@ (8001af8 <move_player+0x74>)
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f003 ff5b 	bl	800597c <bsp_lcd_fill_image>
 8001ac6:	e00a      	b.n	8001ade <move_player+0x5a>
	} else {
		bsp_lcd_fill_image(hlcd, (uint16_t *)image_data_bird2, PLAYER_xSTART, PLAYER_WIDTH, y_pos, PLAYER_HEIGHT);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	221e      	movs	r2, #30
 8001ace:	9201      	str	r2, [sp, #4]
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	231e      	movs	r3, #30
 8001ad4:	2246      	movs	r2, #70	@ 0x46
 8001ad6:	4909      	ldr	r1, [pc, #36]	@ (8001afc <move_player+0x78>)
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f003 ff4f 	bl	800597c <bsp_lcd_fill_image>
	}
	wing_movement++;
 8001ade:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <move_player+0x6c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	4a02      	ldr	r2, [pc, #8]	@ (8001af0 <move_player+0x6c>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000008 	.word	0x20000008
 8001af4:	66666667 	.word	0x66666667
 8001af8:	08013c84 	.word	0x08013c84
 8001afc:	0801438c 	.word	0x0801438c

08001b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6193      	str	r3, [r2, #24]
 8001b12:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a08      	ldr	r2, [pc, #32]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b28:	61d3      	str	r3, [r2, #28]
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000

08001b48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	@ 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a17      	ldr	r2, [pc, #92]	@ (8001bc4 <HAL_I2C_MspInit+0x7c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d127      	bne.n	8001bba <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <HAL_I2C_MspInit+0x80>)
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	4a16      	ldr	r2, [pc, #88]	@ (8001bc8 <HAL_I2C_MspInit+0x80>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b74:	6153      	str	r3, [r2, #20]
 8001b76:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <HAL_I2C_MspInit+0x80>)
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b82:	23c0      	movs	r3, #192	@ 0xc0
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b86:	2312      	movs	r3, #18
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b92:	2304      	movs	r3, #4
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480b      	ldr	r0, [pc, #44]	@ (8001bcc <HAL_I2C_MspInit+0x84>)
 8001b9e:	f000 fc91 	bl	80024c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba2:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <HAL_I2C_MspInit+0x80>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a08      	ldr	r2, [pc, #32]	@ (8001bc8 <HAL_I2C_MspInit+0x80>)
 8001ba8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_I2C_MspInit+0x80>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	@ 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40005400 	.word	0x40005400
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	48000400 	.word	0x48000400

08001bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a17      	ldr	r2, [pc, #92]	@ (8001c4c <HAL_SPI_MspInit+0x7c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d128      	bne.n	8001c44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bf2:	4b17      	ldr	r3, [pc, #92]	@ (8001c50 <HAL_SPI_MspInit+0x80>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	4a16      	ldr	r2, [pc, #88]	@ (8001c50 <HAL_SPI_MspInit+0x80>)
 8001bf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bfc:	6193      	str	r3, [r2, #24]
 8001bfe:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <HAL_SPI_MspInit+0x80>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <HAL_SPI_MspInit+0x80>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	4a10      	ldr	r2, [pc, #64]	@ (8001c50 <HAL_SPI_MspInit+0x80>)
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c14:	6153      	str	r3, [r2, #20]
 8001c16:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <HAL_SPI_MspInit+0x80>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c22:	23a0      	movs	r3, #160	@ 0xa0
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c32:	2305      	movs	r3, #5
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c40:	f000 fc40 	bl	80024c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	@ 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40013000 	.word	0x40013000
 8001c50:	40021000 	.word	0x40021000

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <NMI_Handler+0x4>

08001c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <HardFault_Handler+0x4>

08001c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <MemManage_Handler+0x4>

08001c6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001caa:	f000 fae1 	bl	8002270 <HAL_IncTick>
//		count = 0;
//		tick_pass = True;
//	}

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  //Enable TRCENA
  DEMCR |= ( 1 << 24);
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <ITM_SendChar+0x48>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8001cfc <ITM_SendChar+0x48>)
 8001cc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cc8:	6013      	str	r3, [r2, #0]

  //enable stimulus port 0
  ITM_TRACE_EN |= ( 1 << 0);
 8001cca:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <ITM_SendChar+0x4c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a0c      	ldr	r2, [pc, #48]	@ (8001d00 <ITM_SendChar+0x4c>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6013      	str	r3, [r2, #0]

  // read FIFO status in bit [0]:
  while(!(ITM_STIMULUS_PORT0 & 1));
 8001cd6:	bf00      	nop
 8001cd8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f8      	beq.n	8001cd8 <ITM_SendChar+0x24>

  //Write to ITM stimulus port0
  ITM_STIMULUS_PORT0 = ch;
 8001ce6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	6013      	str	r3, [r2, #0]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000edfc 	.word	0xe000edfc
 8001d00:	e0000e00 	.word	0xe0000e00

08001d04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return 1;
 8001d08:	2301      	movs	r3, #1
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_kill>:

int _kill(int pid, int sig)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d1e:	f005 fb15 	bl	800734c <__errno>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2216      	movs	r2, #22
 8001d26:	601a      	str	r2, [r3, #0]
  return -1;
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_exit>:

void _exit (int status)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ffe7 	bl	8001d14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d46:	bf00      	nop
 8001d48:	e7fd      	b.n	8001d46 <_exit+0x12>

08001d4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	e00a      	b.n	8001d72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d5c:	f3af 8000 	nop.w
 8001d60:	4601      	mov	r1, r0
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	60ba      	str	r2, [r7, #8]
 8001d68:	b2ca      	uxtb	r2, r1
 8001d6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	dbf0      	blt.n	8001d5c <_read+0x12>
  }

  return len;
 8001d7a:	687b      	ldr	r3, [r7, #4]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	e009      	b.n	8001daa <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	60ba      	str	r2, [r7, #8]
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff88 	bl	8001cb4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	3301      	adds	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	dbf1      	blt.n	8001d96 <_write+0x12>
  }
  return len;
 8001db2:	687b      	ldr	r3, [r7, #4]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_close>:

int _close(int file)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001de4:	605a      	str	r2, [r3, #4]
  return 0;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_isatty>:

int _isatty(int file)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dfc:	2301      	movs	r3, #1
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e2c:	4a14      	ldr	r2, [pc, #80]	@ (8001e80 <_sbrk+0x5c>)
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <_sbrk+0x60>)
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e38:	4b13      	ldr	r3, [pc, #76]	@ (8001e88 <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <_sbrk+0x64>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <_sbrk+0x68>)
 8001e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e46:	4b10      	ldr	r3, [pc, #64]	@ (8001e88 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d207      	bcs.n	8001e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e54:	f005 fa7a 	bl	800734c <__errno>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e009      	b.n	8001e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6a:	4b07      	ldr	r3, [pc, #28]	@ (8001e88 <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a05      	ldr	r2, [pc, #20]	@ (8001e88 <_sbrk+0x64>)
 8001e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	2000a000 	.word	0x2000a000
 8001e84:	00000400 	.word	0x00000400
 8001e88:	20007b4c 	.word	0x20007b4c
 8001e8c:	20007ca8 	.word	0x20007ca8

08001e90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <SystemInit+0x20>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e9a:	4a05      	ldr	r2, [pc, #20]	@ (8001eb0 <SystemInit+0x20>)
 8001e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <game_init_mssg>:
/**
  * @brief Initializes the game message display.
  * @param None
  * @retval None
  */
void game_init_mssg(bsp_lcd_t *hlcd) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af04      	add	r7, sp, #16
 8001eba:	6078      	str	r0, [r7, #4]
	const char* game_init_message1 = " PRESS USER-BUTTON ";
 8001ebc:	4b13      	ldr	r3, [pc, #76]	@ (8001f0c <game_init_mssg+0x58>)
 8001ebe:	60fb      	str	r3, [r7, #12]
	const char* game_init_message2 = "TO START ";
 8001ec0:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <game_init_mssg+0x5c>)
 8001ec2:	60bb      	str	r3, [r7, #8]

	display_game_title(hlcd);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7fe ffaf 	bl	8000e28 <display_game_title>
	GC9A01A_WriteString(15, 140, (const char*)game_init_message1, Font_11x18, BLACK, BACKGROUND565);
 8001eca:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <game_init_mssg+0x60>)
 8001ecc:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 8001ed0:	9202      	str	r2, [sp, #8]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	9201      	str	r2, [sp, #4]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	9200      	str	r2, [sp, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	218c      	movs	r1, #140	@ 0x8c
 8001ee0:	200f      	movs	r0, #15
 8001ee2:	f003 feec 	bl	8005cbe <GC9A01A_WriteString>
	GC9A01A_WriteString(55, 170, (const char*)game_init_message2, Font_16x26, WHITE, BACKGROUND565);
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <game_init_mssg+0x64>)
 8001ee8:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 8001eec:	9202      	str	r2, [sp, #8]
 8001eee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ef2:	9201      	str	r2, [sp, #4]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	9200      	str	r2, [sp, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	21aa      	movs	r1, #170	@ 0xaa
 8001efe:	2037      	movs	r0, #55	@ 0x37
 8001f00:	f003 fedd 	bl	8005cbe <GC9A01A_WriteString>
}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	0800b108 	.word	0x0800b108
 8001f10:	0800b11c 	.word	0x0800b11c
 8001f14:	20000020 	.word	0x20000020
 8001f18:	20000028 	.word	0x20000028

08001f1c <game_over_mssg>:
/**
  * @brief Displays game over message on the screen.
  * @param None
  * @retval None
  */
void game_over_mssg(bsp_lcd_t *hlcd) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af04      	add	r7, sp, #16
 8001f22:	6078      	str	r0, [r7, #4]
	const char* game_over_message = "GAME OVER";
 8001f24:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <game_over_mssg+0x58>)
 8001f26:	60fb      	str	r3, [r7, #12]
	const char* restart_message = "PRESS USER-BUTTON TO RESTART";
 8001f28:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <game_over_mssg+0x5c>)
 8001f2a:	60bb      	str	r3, [r7, #8]

	GC9A01A_WriteString(48, 70, (const char*)game_over_message, Font_16x26, BLACK, BACKGROUND565);
 8001f2c:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <game_over_mssg+0x60>)
 8001f2e:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 8001f32:	9202      	str	r2, [sp, #8]
 8001f34:	2200      	movs	r2, #0
 8001f36:	9201      	str	r2, [sp, #4]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	9200      	str	r2, [sp, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	2146      	movs	r1, #70	@ 0x46
 8001f42:	2030      	movs	r0, #48	@ 0x30
 8001f44:	f003 febb 	bl	8005cbe <GC9A01A_WriteString>
	fill_gameover_trace(hlcd);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7fe ff59 	bl	8000e00 <fill_gameover_trace>
	GC9A01A_WriteString(22, 100, (const char*)restart_message, Font_7x10, RED565, BACKGROUND565);
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <game_over_mssg+0x64>)
 8001f50:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 8001f54:	9202      	str	r2, [sp, #8]
 8001f56:	f64f 0241 	movw	r2, #63553	@ 0xf841
 8001f5a:	9201      	str	r2, [sp, #4]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	9200      	str	r2, [sp, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	2164      	movs	r1, #100	@ 0x64
 8001f66:	2016      	movs	r0, #22
 8001f68:	f003 fea9 	bl	8005cbe <GC9A01A_WriteString>
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	0800b128 	.word	0x0800b128
 8001f78:	0800b134 	.word	0x0800b134
 8001f7c:	20000028 	.word	0x20000028
 8001f80:	20000018 	.word	0x20000018

08001f84 <render_gamestart_countdown>:
/**
  * @brief Renders the countdown before the game starts.
  * @param None
  * @retval None
  */
void render_gamestart_countdown(bsp_lcd_t *hlcd) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af04      	add	r7, sp, #16
 8001f8a:	6078      	str	r0, [r7, #4]
	static uint32_t prestart_time = 0;
	countdown_complete = false;
 8001f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002044 <render_gamestart_countdown+0xc0>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
	prestart_time++;
 8001f92:	4b2d      	ldr	r3, [pc, #180]	@ (8002048 <render_gamestart_countdown+0xc4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	3301      	adds	r3, #1
 8001f98:	4a2b      	ldr	r2, [pc, #172]	@ (8002048 <render_gamestart_countdown+0xc4>)
 8001f9a:	6013      	str	r3, [r2, #0]
	if (prestart_time < 50) {
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <render_gamestart_countdown+0xc4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b31      	cmp	r3, #49	@ 0x31
 8001fa2:	d80e      	bhi.n	8001fc2 <render_gamestart_countdown+0x3e>
		GC9A01A_WriteString(116, 107, (const char*)"3", Font_16x26, BLACK, BACKGROUND565);
 8001fa4:	4b29      	ldr	r3, [pc, #164]	@ (800204c <render_gamestart_countdown+0xc8>)
 8001fa6:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 8001faa:	9202      	str	r2, [sp, #8]
 8001fac:	2200      	movs	r2, #0
 8001fae:	9201      	str	r2, [sp, #4]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	9200      	str	r2, [sp, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a26      	ldr	r2, [pc, #152]	@ (8002050 <render_gamestart_countdown+0xcc>)
 8001fb8:	216b      	movs	r1, #107	@ 0x6b
 8001fba:	2074      	movs	r0, #116	@ 0x74
 8001fbc:	f003 fe7f 	bl	8005cbe <GC9A01A_WriteString>
	} else if(prestart_time > 150) {
		prestart_time = 0;
		fill_countdown_trace(hlcd);
		countdown_complete = true;
	}
}
 8001fc0:	e03b      	b.n	800203a <render_gamestart_countdown+0xb6>
	} else if(prestart_time > 50 && prestart_time < 100) {
 8001fc2:	4b21      	ldr	r3, [pc, #132]	@ (8002048 <render_gamestart_countdown+0xc4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b32      	cmp	r3, #50	@ 0x32
 8001fc8:	d912      	bls.n	8001ff0 <render_gamestart_countdown+0x6c>
 8001fca:	4b1f      	ldr	r3, [pc, #124]	@ (8002048 <render_gamestart_countdown+0xc4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b63      	cmp	r3, #99	@ 0x63
 8001fd0:	d80e      	bhi.n	8001ff0 <render_gamestart_countdown+0x6c>
		GC9A01A_WriteString(116, 107, (const char*)"2", Font_16x26, BLACK, BACKGROUND565);
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800204c <render_gamestart_countdown+0xc8>)
 8001fd4:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 8001fd8:	9202      	str	r2, [sp, #8]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	9201      	str	r2, [sp, #4]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	9200      	str	r2, [sp, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8002054 <render_gamestart_countdown+0xd0>)
 8001fe6:	216b      	movs	r1, #107	@ 0x6b
 8001fe8:	2074      	movs	r0, #116	@ 0x74
 8001fea:	f003 fe68 	bl	8005cbe <GC9A01A_WriteString>
 8001fee:	e024      	b.n	800203a <render_gamestart_countdown+0xb6>
	} else if(prestart_time > 100 && prestart_time < 150) {
 8001ff0:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <render_gamestart_countdown+0xc4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b64      	cmp	r3, #100	@ 0x64
 8001ff6:	d912      	bls.n	800201e <render_gamestart_countdown+0x9a>
 8001ff8:	4b13      	ldr	r3, [pc, #76]	@ (8002048 <render_gamestart_countdown+0xc4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b95      	cmp	r3, #149	@ 0x95
 8001ffe:	d80e      	bhi.n	800201e <render_gamestart_countdown+0x9a>
		GC9A01A_WriteString(116, 107, (const char*)"1", Font_16x26, BLACK, BACKGROUND565);
 8002000:	4b12      	ldr	r3, [pc, #72]	@ (800204c <render_gamestart_countdown+0xc8>)
 8002002:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 8002006:	9202      	str	r2, [sp, #8]
 8002008:	2200      	movs	r2, #0
 800200a:	9201      	str	r2, [sp, #4]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	9200      	str	r2, [sp, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a11      	ldr	r2, [pc, #68]	@ (8002058 <render_gamestart_countdown+0xd4>)
 8002014:	216b      	movs	r1, #107	@ 0x6b
 8002016:	2074      	movs	r0, #116	@ 0x74
 8002018:	f003 fe51 	bl	8005cbe <GC9A01A_WriteString>
 800201c:	e00d      	b.n	800203a <render_gamestart_countdown+0xb6>
	} else if(prestart_time > 150) {
 800201e:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <render_gamestart_countdown+0xc4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b96      	cmp	r3, #150	@ 0x96
 8002024:	d909      	bls.n	800203a <render_gamestart_countdown+0xb6>
		prestart_time = 0;
 8002026:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <render_gamestart_countdown+0xc4>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
		fill_countdown_trace(hlcd);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7fe fec9 	bl	8000dc4 <fill_countdown_trace>
		countdown_complete = true;
 8002032:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <render_gamestart_countdown+0xc0>)
 8002034:	2201      	movs	r2, #1
 8002036:	601a      	str	r2, [r3, #0]
}
 8002038:	e7ff      	b.n	800203a <render_gamestart_countdown+0xb6>
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20007b1c 	.word	0x20007b1c
 8002048:	20007b50 	.word	0x20007b50
 800204c:	20000028 	.word	0x20000028
 8002050:	0800b154 	.word	0x0800b154
 8002054:	0800b158 	.word	0x0800b158
 8002058:	0800b15c 	.word	0x0800b15c

0800205c <player_show_score>:
/**
  * @brief Displays the player's score on the screen.
  * @param player: Pointer to the Player struct containing player information.
  * @retval None
  */
void player_show_score(Player *player) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b0a0      	sub	sp, #128	@ 0x80
 8002060:	af04      	add	r7, sp, #16
 8002062:	6078      	str	r0, [r7, #4]
	char score_str[100]="000";
 8002064:	4b43      	ldr	r3, [pc, #268]	@ (8002174 <player_show_score+0x118>)
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	2260      	movs	r2, #96	@ 0x60
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f005 f919 	bl	80072a8 <memset>

	if(( player->score/12)<10){
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b77      	cmp	r3, #119	@ 0x77
 800207c:	dc1e      	bgt.n	80020bc <player_show_score+0x60>
		sprintf(score_str, "00%d", player->score/12);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	4a3d      	ldr	r2, [pc, #244]	@ (8002178 <player_show_score+0x11c>)
 8002084:	fb82 1203 	smull	r1, r2, r2, r3
 8002088:	1052      	asrs	r2, r2, #1
 800208a:	17db      	asrs	r3, r3, #31
 800208c:	1ad2      	subs	r2, r2, r3
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	493a      	ldr	r1, [pc, #232]	@ (800217c <player_show_score+0x120>)
 8002094:	4618      	mov	r0, r3
 8002096:	f005 f80f 	bl	80070b8 <siprintf>
		GC9A01A_WriteString(96, 0, score_str, Font_16x26, BLACK, OBSTACLE565);
 800209a:	4b39      	ldr	r3, [pc, #228]	@ (8002180 <player_show_score+0x124>)
 800209c:	f107 010c 	add.w	r1, r7, #12
 80020a0:	f24e 721c 	movw	r2, #59164	@ 0xe71c
 80020a4:	9202      	str	r2, [sp, #8]
 80020a6:	2200      	movs	r2, #0
 80020a8:	9201      	str	r2, [sp, #4]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	9200      	str	r2, [sp, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	460a      	mov	r2, r1
 80020b2:	2100      	movs	r1, #0
 80020b4:	2060      	movs	r0, #96	@ 0x60
 80020b6:	f003 fe02 	bl	8005cbe <GC9A01A_WriteString>
		sprintf(score_str, "%d", player->score/12);
		GC9A01A_WriteString(96, 0, score_str, Font_16x26, BLACK, OBSTACLE565);
	} else {
		GC9A01A_WriteString(96, 0, "WIN", Font_16x26, BLACK, OBSTACLE565);
	}
}
 80020ba:	e056      	b.n	800216a <player_show_score+0x10e>
	} else if( player->score/12<100){
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80020c4:	da1e      	bge.n	8002104 <player_show_score+0xa8>
		sprintf(score_str, "0%d", player->score/12);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002178 <player_show_score+0x11c>)
 80020cc:	fb82 1203 	smull	r1, r2, r2, r3
 80020d0:	1052      	asrs	r2, r2, #1
 80020d2:	17db      	asrs	r3, r3, #31
 80020d4:	1ad2      	subs	r2, r2, r3
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	492a      	ldr	r1, [pc, #168]	@ (8002184 <player_show_score+0x128>)
 80020dc:	4618      	mov	r0, r3
 80020de:	f004 ffeb 	bl	80070b8 <siprintf>
		GC9A01A_WriteString(96, 0, score_str, Font_16x26, BLACK, OBSTACLE565);
 80020e2:	4b27      	ldr	r3, [pc, #156]	@ (8002180 <player_show_score+0x124>)
 80020e4:	f107 010c 	add.w	r1, r7, #12
 80020e8:	f24e 721c 	movw	r2, #59164	@ 0xe71c
 80020ec:	9202      	str	r2, [sp, #8]
 80020ee:	2200      	movs	r2, #0
 80020f0:	9201      	str	r2, [sp, #4]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	9200      	str	r2, [sp, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	460a      	mov	r2, r1
 80020fa:	2100      	movs	r1, #0
 80020fc:	2060      	movs	r0, #96	@ 0x60
 80020fe:	f003 fdde 	bl	8005cbe <GC9A01A_WriteString>
}
 8002102:	e032      	b.n	800216a <player_show_score+0x10e>
	} else if( player->score/12<1000){
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f642 62df 	movw	r2, #11999	@ 0x2edf
 800210c:	4293      	cmp	r3, r2
 800210e:	dc1e      	bgt.n	800214e <player_show_score+0xf2>
		sprintf(score_str, "%d", player->score/12);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a18      	ldr	r2, [pc, #96]	@ (8002178 <player_show_score+0x11c>)
 8002116:	fb82 1203 	smull	r1, r2, r2, r3
 800211a:	1052      	asrs	r2, r2, #1
 800211c:	17db      	asrs	r3, r3, #31
 800211e:	1ad2      	subs	r2, r2, r3
 8002120:	f107 030c 	add.w	r3, r7, #12
 8002124:	4918      	ldr	r1, [pc, #96]	@ (8002188 <player_show_score+0x12c>)
 8002126:	4618      	mov	r0, r3
 8002128:	f004 ffc6 	bl	80070b8 <siprintf>
		GC9A01A_WriteString(96, 0, score_str, Font_16x26, BLACK, OBSTACLE565);
 800212c:	4b14      	ldr	r3, [pc, #80]	@ (8002180 <player_show_score+0x124>)
 800212e:	f107 010c 	add.w	r1, r7, #12
 8002132:	f24e 721c 	movw	r2, #59164	@ 0xe71c
 8002136:	9202      	str	r2, [sp, #8]
 8002138:	2200      	movs	r2, #0
 800213a:	9201      	str	r2, [sp, #4]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	9200      	str	r2, [sp, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	460a      	mov	r2, r1
 8002144:	2100      	movs	r1, #0
 8002146:	2060      	movs	r0, #96	@ 0x60
 8002148:	f003 fdb9 	bl	8005cbe <GC9A01A_WriteString>
}
 800214c:	e00d      	b.n	800216a <player_show_score+0x10e>
		GC9A01A_WriteString(96, 0, "WIN", Font_16x26, BLACK, OBSTACLE565);
 800214e:	4b0c      	ldr	r3, [pc, #48]	@ (8002180 <player_show_score+0x124>)
 8002150:	f24e 721c 	movw	r2, #59164	@ 0xe71c
 8002154:	9202      	str	r2, [sp, #8]
 8002156:	2200      	movs	r2, #0
 8002158:	9201      	str	r2, [sp, #4]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	9200      	str	r2, [sp, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <player_show_score+0x130>)
 8002162:	2100      	movs	r1, #0
 8002164:	2060      	movs	r0, #96	@ 0x60
 8002166:	f003 fdaa 	bl	8005cbe <GC9A01A_WriteString>
}
 800216a:	bf00      	nop
 800216c:	3770      	adds	r7, #112	@ 0x70
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	00303030 	.word	0x00303030
 8002178:	2aaaaaab 	.word	0x2aaaaaab
 800217c:	0800b160 	.word	0x0800b160
 8002180:	20000028 	.word	0x20000028
 8002184:	0800b168 	.word	0x0800b168
 8002188:	0800b16c 	.word	0x0800b16c
 800218c:	0800b170 	.word	0x0800b170

08002190 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002190:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021c8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002194:	f7ff fe7c 	bl	8001e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002198:	480c      	ldr	r0, [pc, #48]	@ (80021cc <LoopForever+0x6>)
  ldr r1, =_edata
 800219a:	490d      	ldr	r1, [pc, #52]	@ (80021d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800219c:	4a0d      	ldr	r2, [pc, #52]	@ (80021d4 <LoopForever+0xe>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a0:	e002      	b.n	80021a8 <LoopCopyDataInit>

080021a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a6:	3304      	adds	r3, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ac:	d3f9      	bcc.n	80021a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ae:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021b0:	4c0a      	ldr	r4, [pc, #40]	@ (80021dc <LoopForever+0x16>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b4:	e001      	b.n	80021ba <LoopFillZerobss>

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b8:	3204      	adds	r2, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021be:	f005 f8cb 	bl	8007358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021c2:	f7fe fe79 	bl	8000eb8 <main>

080021c6 <LoopForever>:

LoopForever:
    b LoopForever
 80021c6:	e7fe      	b.n	80021c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021c8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80021cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d0:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80021d4:	0801776c 	.word	0x0801776c
  ldr r2, =_sbss
 80021d8:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80021dc:	20007ca4 	.word	0x20007ca4

080021e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021e0:	e7fe      	b.n	80021e0 <ADC1_2_IRQHandler>
	...

080021e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e8:	4b08      	ldr	r3, [pc, #32]	@ (800220c <HAL_Init+0x28>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a07      	ldr	r2, [pc, #28]	@ (800220c <HAL_Init+0x28>)
 80021ee:	f043 0310 	orr.w	r3, r3, #16
 80021f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f4:	2003      	movs	r0, #3
 80021f6:	f000 f931 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fa:	200f      	movs	r0, #15
 80021fc:	f000 f808 	bl	8002210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002200:	f7ff fc7e 	bl	8001b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40022000 	.word	0x40022000

08002210 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002218:	4b12      	ldr	r3, [pc, #72]	@ (8002264 <HAL_InitTick+0x54>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <HAL_InitTick+0x58>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002226:	fbb3 f3f1 	udiv	r3, r3, r1
 800222a:	fbb2 f3f3 	udiv	r3, r2, r3
 800222e:	4618      	mov	r0, r3
 8002230:	f000 f93b 	bl	80024aa <HAL_SYSTICK_Config>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e00e      	b.n	800225c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b0f      	cmp	r3, #15
 8002242:	d80a      	bhi.n	800225a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002244:	2200      	movs	r2, #0
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	f000 f911 	bl	8002472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002250:	4a06      	ldr	r2, [pc, #24]	@ (800226c <HAL_InitTick+0x5c>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e000      	b.n	800225c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	2000000c 	.word	0x2000000c
 8002268:	20000014 	.word	0x20000014
 800226c:	20000010 	.word	0x20000010

08002270 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002274:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <HAL_IncTick+0x20>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <HAL_IncTick+0x24>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4413      	add	r3, r2
 8002280:	4a04      	ldr	r2, [pc, #16]	@ (8002294 <HAL_IncTick+0x24>)
 8002282:	6013      	str	r3, [r2, #0]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000014 	.word	0x20000014
 8002294:	20007b54 	.word	0x20007b54

08002298 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return uwTick;  
 800229c:	4b03      	ldr	r3, [pc, #12]	@ (80022ac <HAL_GetTick+0x14>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20007b54 	.word	0x20007b54

080022b0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff ffee 	bl	8002298 <HAL_GetTick>
 80022bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d005      	beq.n	80022d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ca:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <HAL_Delay+0x44>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80022d6:	bf00      	nop
 80022d8:	f7ff ffde 	bl	8002298 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d8f7      	bhi.n	80022d8 <HAL_Delay+0x28>
  {
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000014 	.word	0x20000014

080022f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002308:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232a:	4a04      	ldr	r2, [pc, #16]	@ (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	60d3      	str	r3, [r2, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002344:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <__NVIC_GetPriorityGrouping+0x18>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 0307 	and.w	r3, r3, #7
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	@ (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	@ (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	@ 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002428:	d301      	bcc.n	800242e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242a:	2301      	movs	r3, #1
 800242c:	e00f      	b.n	800244e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242e:	4a0a      	ldr	r2, [pc, #40]	@ (8002458 <SysTick_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002436:	210f      	movs	r1, #15
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f7ff ff8e 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <SysTick_Config+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <SysTick_Config+0x40>)
 8002448:	2207      	movs	r2, #7
 800244a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff47 	bl	80022f8 <__NVIC_SetPriorityGrouping>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002484:	f7ff ff5c 	bl	8002340 <__NVIC_GetPriorityGrouping>
 8002488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7ff ff8e 	bl	80023b0 <NVIC_EncodePriority>
 8002494:	4602      	mov	r2, r0
 8002496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff5d 	bl	800235c <__NVIC_SetPriority>
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ffb0 	bl	8002418 <SysTick_Config>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d2:	e154      	b.n	800277e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2101      	movs	r1, #1
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	4013      	ands	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8146 	beq.w	8002778 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d005      	beq.n	8002504 <HAL_GPIO_Init+0x40>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d130      	bne.n	8002566 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800253a:	2201      	movs	r2, #1
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	f003 0201 	and.w	r2, r3, #1
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b03      	cmp	r3, #3
 8002570:	d017      	beq.n	80025a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	2203      	movs	r2, #3
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d123      	bne.n	80025f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	08da      	lsrs	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3208      	adds	r2, #8
 80025b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	220f      	movs	r2, #15
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	08da      	lsrs	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3208      	adds	r2, #8
 80025f0:	6939      	ldr	r1, [r7, #16]
 80025f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0203 	and.w	r2, r3, #3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80a0 	beq.w	8002778 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002638:	4b58      	ldr	r3, [pc, #352]	@ (800279c <HAL_GPIO_Init+0x2d8>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	4a57      	ldr	r2, [pc, #348]	@ (800279c <HAL_GPIO_Init+0x2d8>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6193      	str	r3, [r2, #24]
 8002644:	4b55      	ldr	r3, [pc, #340]	@ (800279c <HAL_GPIO_Init+0x2d8>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002650:	4a53      	ldr	r2, [pc, #332]	@ (80027a0 <HAL_GPIO_Init+0x2dc>)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800267a:	d019      	beq.n	80026b0 <HAL_GPIO_Init+0x1ec>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a49      	ldr	r2, [pc, #292]	@ (80027a4 <HAL_GPIO_Init+0x2e0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d013      	beq.n	80026ac <HAL_GPIO_Init+0x1e8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a48      	ldr	r2, [pc, #288]	@ (80027a8 <HAL_GPIO_Init+0x2e4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d00d      	beq.n	80026a8 <HAL_GPIO_Init+0x1e4>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a47      	ldr	r2, [pc, #284]	@ (80027ac <HAL_GPIO_Init+0x2e8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d007      	beq.n	80026a4 <HAL_GPIO_Init+0x1e0>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a46      	ldr	r2, [pc, #280]	@ (80027b0 <HAL_GPIO_Init+0x2ec>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d101      	bne.n	80026a0 <HAL_GPIO_Init+0x1dc>
 800269c:	2304      	movs	r3, #4
 800269e:	e008      	b.n	80026b2 <HAL_GPIO_Init+0x1ee>
 80026a0:	2305      	movs	r3, #5
 80026a2:	e006      	b.n	80026b2 <HAL_GPIO_Init+0x1ee>
 80026a4:	2303      	movs	r3, #3
 80026a6:	e004      	b.n	80026b2 <HAL_GPIO_Init+0x1ee>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e002      	b.n	80026b2 <HAL_GPIO_Init+0x1ee>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <HAL_GPIO_Init+0x1ee>
 80026b0:	2300      	movs	r3, #0
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	f002 0203 	and.w	r2, r2, #3
 80026b8:	0092      	lsls	r2, r2, #2
 80026ba:	4093      	lsls	r3, r2
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026c2:	4937      	ldr	r1, [pc, #220]	@ (80027a0 <HAL_GPIO_Init+0x2dc>)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	089b      	lsrs	r3, r3, #2
 80026c8:	3302      	adds	r3, #2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d0:	4b38      	ldr	r3, [pc, #224]	@ (80027b4 <HAL_GPIO_Init+0x2f0>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	43db      	mvns	r3, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026f4:	4a2f      	ldr	r2, [pc, #188]	@ (80027b4 <HAL_GPIO_Init+0x2f0>)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026fa:	4b2e      	ldr	r3, [pc, #184]	@ (80027b4 <HAL_GPIO_Init+0x2f0>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800271e:	4a25      	ldr	r2, [pc, #148]	@ (80027b4 <HAL_GPIO_Init+0x2f0>)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002724:	4b23      	ldr	r3, [pc, #140]	@ (80027b4 <HAL_GPIO_Init+0x2f0>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	43db      	mvns	r3, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002748:	4a1a      	ldr	r2, [pc, #104]	@ (80027b4 <HAL_GPIO_Init+0x2f0>)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800274e:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <HAL_GPIO_Init+0x2f0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	43db      	mvns	r3, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002772:	4a10      	ldr	r2, [pc, #64]	@ (80027b4 <HAL_GPIO_Init+0x2f0>)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	3301      	adds	r3, #1
 800277c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	f47f aea3 	bne.w	80024d4 <HAL_GPIO_Init+0x10>
  }
}
 800278e:	bf00      	nop
 8002790:	bf00      	nop
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40021000 	.word	0x40021000
 80027a0:	40010000 	.word	0x40010000
 80027a4:	48000400 	.word	0x48000400
 80027a8:	48000800 	.word	0x48000800
 80027ac:	48000c00 	.word	0x48000c00
 80027b0:	48001000 	.word	0x48001000
 80027b4:	40010400 	.word	0x40010400

080027b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
 80027d4:	e001      	b.n	80027da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	807b      	strh	r3, [r7, #2]
 80027f4:	4613      	mov	r3, r2
 80027f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f8:	787b      	ldrb	r3, [r7, #1]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002804:	e002      	b.n	800280c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002806:	887a      	ldrh	r2, [r7, #2]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e081      	b.n	800292e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff f982 	bl	8001b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2224      	movs	r2, #36	@ 0x24
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0201 	bic.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002868:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002878:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d107      	bne.n	8002892 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	e006      	b.n	80028a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800289e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d104      	bne.n	80028b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69d9      	ldr	r1, [r3, #28]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1a      	ldr	r2, [r3, #32]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	4608      	mov	r0, r1
 8002942:	4611      	mov	r1, r2
 8002944:	461a      	mov	r2, r3
 8002946:	4603      	mov	r3, r0
 8002948:	817b      	strh	r3, [r7, #10]
 800294a:	460b      	mov	r3, r1
 800294c:	813b      	strh	r3, [r7, #8]
 800294e:	4613      	mov	r3, r2
 8002950:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b20      	cmp	r3, #32
 800295c:	f040 80f9 	bne.w	8002b52 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <HAL_I2C_Mem_Write+0x34>
 8002966:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002968:	2b00      	cmp	r3, #0
 800296a:	d105      	bne.n	8002978 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002972:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0ed      	b.n	8002b54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_I2C_Mem_Write+0x4e>
 8002982:	2302      	movs	r3, #2
 8002984:	e0e6      	b.n	8002b54 <HAL_I2C_Mem_Write+0x21c>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800298e:	f7ff fc83 	bl	8002298 <HAL_GetTick>
 8002992:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	2319      	movs	r3, #25
 800299a:	2201      	movs	r2, #1
 800299c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 fac3 	bl	8002f2c <I2C_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0d1      	b.n	8002b54 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2221      	movs	r2, #33	@ 0x21
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2240      	movs	r2, #64	@ 0x40
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a3a      	ldr	r2, [r7, #32]
 80029ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80029d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029d8:	88f8      	ldrh	r0, [r7, #6]
 80029da:	893a      	ldrh	r2, [r7, #8]
 80029dc:	8979      	ldrh	r1, [r7, #10]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	4603      	mov	r3, r0
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f9d3 	bl	8002d94 <I2C_RequestMemoryWrite>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0a9      	b.n	8002b54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2bff      	cmp	r3, #255	@ 0xff
 8002a08:	d90e      	bls.n	8002a28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	22ff      	movs	r2, #255	@ 0xff
 8002a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	8979      	ldrh	r1, [r7, #10]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 fc3d 	bl	80032a0 <I2C_TransferConfig>
 8002a26:	e00f      	b.n	8002a48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	8979      	ldrh	r1, [r7, #10]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 fc2c 	bl	80032a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fabc 	bl	8002fca <I2C_WaitOnTXISFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e07b      	b.n	8002b54 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d034      	beq.n	8002b00 <HAL_I2C_Mem_Write+0x1c8>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d130      	bne.n	8002b00 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2180      	movs	r1, #128	@ 0x80
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 fa3f 	bl	8002f2c <I2C_WaitOnFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e04d      	b.n	8002b54 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2bff      	cmp	r3, #255	@ 0xff
 8002ac0:	d90e      	bls.n	8002ae0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	22ff      	movs	r2, #255	@ 0xff
 8002ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	8979      	ldrh	r1, [r7, #10]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fbe1 	bl	80032a0 <I2C_TransferConfig>
 8002ade:	e00f      	b.n	8002b00 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	8979      	ldrh	r1, [r7, #10]
 8002af2:	2300      	movs	r3, #0
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fbd0 	bl	80032a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d19e      	bne.n	8002a48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 faa2 	bl	8003058 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e01a      	b.n	8002b54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2220      	movs	r2, #32
 8002b24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <HAL_I2C_Mem_Write+0x224>)
 8002b32:	400b      	ands	r3, r1
 8002b34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
  }
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	fe00e800 	.word	0xfe00e800

08002b60 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	4608      	mov	r0, r1
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	817b      	strh	r3, [r7, #10]
 8002b72:	460b      	mov	r3, r1
 8002b74:	813b      	strh	r3, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	f040 80fd 	bne.w	8002d82 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_I2C_Mem_Read+0x34>
 8002b8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d105      	bne.n	8002ba0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b9a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0f1      	b.n	8002d84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_I2C_Mem_Read+0x4e>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e0ea      	b.n	8002d84 <HAL_I2C_Mem_Read+0x224>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bb6:	f7ff fb6f 	bl	8002298 <HAL_GetTick>
 8002bba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2319      	movs	r3, #25
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f9af 	bl	8002f2c <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0d5      	b.n	8002d84 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2222      	movs	r2, #34	@ 0x22
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2240      	movs	r2, #64	@ 0x40
 8002be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a3a      	ldr	r2, [r7, #32]
 8002bf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c00:	88f8      	ldrh	r0, [r7, #6]
 8002c02:	893a      	ldrh	r2, [r7, #8]
 8002c04:	8979      	ldrh	r1, [r7, #10]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	4603      	mov	r3, r0
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f913 	bl	8002e3c <I2C_RequestMemoryRead>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0ad      	b.n	8002d84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2bff      	cmp	r3, #255	@ 0xff
 8002c30:	d90e      	bls.n	8002c50 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	22ff      	movs	r2, #255	@ 0xff
 8002c36:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	8979      	ldrh	r1, [r7, #10]
 8002c40:	4b52      	ldr	r3, [pc, #328]	@ (8002d8c <HAL_I2C_Mem_Read+0x22c>)
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 fb29 	bl	80032a0 <I2C_TransferConfig>
 8002c4e:	e00f      	b.n	8002c70 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	8979      	ldrh	r1, [r7, #10]
 8002c62:	4b4a      	ldr	r3, [pc, #296]	@ (8002d8c <HAL_I2C_Mem_Read+0x22c>)
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fb18 	bl	80032a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c76:	2200      	movs	r2, #0
 8002c78:	2104      	movs	r1, #4
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f956 	bl	8002f2c <I2C_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e07c      	b.n	8002d84 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d034      	beq.n	8002d30 <HAL_I2C_Mem_Read+0x1d0>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d130      	bne.n	8002d30 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2180      	movs	r1, #128	@ 0x80
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f927 	bl	8002f2c <I2C_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e04d      	b.n	8002d84 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2bff      	cmp	r3, #255	@ 0xff
 8002cf0:	d90e      	bls.n	8002d10 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	22ff      	movs	r2, #255	@ 0xff
 8002cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	8979      	ldrh	r1, [r7, #10]
 8002d00:	2300      	movs	r3, #0
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fac9 	bl	80032a0 <I2C_TransferConfig>
 8002d0e:	e00f      	b.n	8002d30 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	8979      	ldrh	r1, [r7, #10]
 8002d22:	2300      	movs	r3, #0
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 fab8 	bl	80032a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d19a      	bne.n	8002c70 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f98a 	bl	8003058 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e01a      	b.n	8002d84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2220      	movs	r2, #32
 8002d54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_I2C_Mem_Read+0x230>)
 8002d62:	400b      	ands	r3, r1
 8002d64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e000      	b.n	8002d84 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d82:	2302      	movs	r3, #2
  }
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	80002400 	.word	0x80002400
 8002d90:	fe00e800 	.word	0xfe00e800

08002d94 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	4608      	mov	r0, r1
 8002d9e:	4611      	mov	r1, r2
 8002da0:	461a      	mov	r2, r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	817b      	strh	r3, [r7, #10]
 8002da6:	460b      	mov	r3, r1
 8002da8:	813b      	strh	r3, [r7, #8]
 8002daa:	4613      	mov	r3, r2
 8002dac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	8979      	ldrh	r1, [r7, #10]
 8002db4:	4b20      	ldr	r3, [pc, #128]	@ (8002e38 <I2C_RequestMemoryWrite+0xa4>)
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 fa6f 	bl	80032a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	69b9      	ldr	r1, [r7, #24]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f8ff 	bl	8002fca <I2C_WaitOnTXISFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e02c      	b.n	8002e30 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d105      	bne.n	8002de8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ddc:	893b      	ldrh	r3, [r7, #8]
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002de6:	e015      	b.n	8002e14 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002de8:	893b      	ldrh	r3, [r7, #8]
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	69b9      	ldr	r1, [r7, #24]
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f8e5 	bl	8002fca <I2C_WaitOnTXISFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e012      	b.n	8002e30 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e0a:	893b      	ldrh	r3, [r7, #8]
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2180      	movs	r1, #128	@ 0x80
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f884 	bl	8002f2c <I2C_WaitOnFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	80002000 	.word	0x80002000

08002e3c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	4608      	mov	r0, r1
 8002e46:	4611      	mov	r1, r2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	817b      	strh	r3, [r7, #10]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	813b      	strh	r3, [r7, #8]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	8979      	ldrh	r1, [r7, #10]
 8002e5c:	4b20      	ldr	r3, [pc, #128]	@ (8002ee0 <I2C_RequestMemoryRead+0xa4>)
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	2300      	movs	r3, #0
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fa1c 	bl	80032a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	69b9      	ldr	r1, [r7, #24]
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f8ac 	bl	8002fca <I2C_WaitOnTXISFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e02c      	b.n	8002ed6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d105      	bne.n	8002e8e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e82:	893b      	ldrh	r3, [r7, #8]
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e8c:	e015      	b.n	8002eba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e8e:	893b      	ldrh	r3, [r7, #8]
 8002e90:	0a1b      	lsrs	r3, r3, #8
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	69b9      	ldr	r1, [r7, #24]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f892 	bl	8002fca <I2C_WaitOnTXISFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e012      	b.n	8002ed6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002eb0:	893b      	ldrh	r3, [r7, #8]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2140      	movs	r1, #64	@ 0x40
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f831 	bl	8002f2c <I2C_WaitOnFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	80002000 	.word	0x80002000

08002ee4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d103      	bne.n	8002f02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2200      	movs	r2, #0
 8002f00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d007      	beq.n	8002f20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	619a      	str	r2, [r3, #24]
  }
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f3c:	e031      	b.n	8002fa2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d02d      	beq.n	8002fa2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f46:	f7ff f9a7 	bl	8002298 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d302      	bcc.n	8002f5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d122      	bne.n	8002fa2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4013      	ands	r3, r2
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d113      	bne.n	8002fa2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7e:	f043 0220 	orr.w	r2, r3, #32
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00f      	b.n	8002fc2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4013      	ands	r3, r2
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	bf0c      	ite	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	2300      	movne	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d0be      	beq.n	8002f3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fd6:	e033      	b.n	8003040 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f87f 	bl	80030e0 <I2C_IsErrorOccurred>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e031      	b.n	8003050 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff2:	d025      	beq.n	8003040 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff4:	f7ff f950 	bl	8002298 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	429a      	cmp	r2, r3
 8003002:	d302      	bcc.n	800300a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11a      	bne.n	8003040 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b02      	cmp	r3, #2
 8003016:	d013      	beq.n	8003040 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301c:	f043 0220 	orr.w	r2, r3, #32
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e007      	b.n	8003050 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b02      	cmp	r3, #2
 800304c:	d1c4      	bne.n	8002fd8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003064:	e02f      	b.n	80030c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f838 	bl	80030e0 <I2C_IsErrorOccurred>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e02d      	b.n	80030d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307a:	f7ff f90d 	bl	8002298 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d11a      	bne.n	80030c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b20      	cmp	r3, #32
 800309c:	d013      	beq.n	80030c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a2:	f043 0220 	orr.w	r2, r3, #32
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e007      	b.n	80030d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d1c8      	bne.n	8003066 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	@ 0x28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b00      	cmp	r3, #0
 800310a:	d068      	beq.n	80031de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2210      	movs	r2, #16
 8003112:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003114:	e049      	b.n	80031aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d045      	beq.n	80031aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7ff f8bb 	bl	8002298 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	d302      	bcc.n	8003134 <I2C_IsErrorOccurred+0x54>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d13a      	bne.n	80031aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800313e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003146:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003152:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003156:	d121      	bne.n	800319c <I2C_IsErrorOccurred+0xbc>
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800315e:	d01d      	beq.n	800319c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003160:	7cfb      	ldrb	r3, [r7, #19]
 8003162:	2b20      	cmp	r3, #32
 8003164:	d01a      	beq.n	800319c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003174:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003176:	f7ff f88f 	bl	8002298 <HAL_GetTick>
 800317a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800317c:	e00e      	b.n	800319c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800317e:	f7ff f88b 	bl	8002298 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b19      	cmp	r3, #25
 800318a:	d907      	bls.n	800319c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	f043 0320 	orr.w	r3, r3, #32
 8003192:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800319a:	e006      	b.n	80031aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d1e9      	bne.n	800317e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d003      	beq.n	80031c0 <I2C_IsErrorOccurred+0xe0>
 80031b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0aa      	beq.n	8003116 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d103      	bne.n	80031d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2220      	movs	r2, #32
 80031ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	f043 0304 	orr.w	r3, r3, #4
 80031d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00b      	beq.n	8003208 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003200:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00b      	beq.n	800322a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	f043 0308 	orr.w	r3, r3, #8
 8003218:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003222:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00b      	beq.n	800324c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	f043 0302 	orr.w	r3, r3, #2
 800323a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003244:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800324c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01c      	beq.n	800328e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f7ff fe45 	bl	8002ee4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6859      	ldr	r1, [r3, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b0d      	ldr	r3, [pc, #52]	@ (800329c <I2C_IsErrorOccurred+0x1bc>)
 8003266:	400b      	ands	r3, r1
 8003268:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	431a      	orrs	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800328e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003292:	4618      	mov	r0, r3
 8003294:	3728      	adds	r7, #40	@ 0x28
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	fe00e800 	.word	0xfe00e800

080032a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	460b      	mov	r3, r1
 80032ac:	817b      	strh	r3, [r7, #10]
 80032ae:	4613      	mov	r3, r2
 80032b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032b2:	897b      	ldrh	r3, [r7, #10]
 80032b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032b8:	7a7b      	ldrb	r3, [r7, #9]
 80032ba:	041b      	lsls	r3, r3, #16
 80032bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	0d5b      	lsrs	r3, r3, #21
 80032da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80032de:	4b08      	ldr	r3, [pc, #32]	@ (8003300 <I2C_TransferConfig+0x60>)
 80032e0:	430b      	orrs	r3, r1
 80032e2:	43db      	mvns	r3, r3
 80032e4:	ea02 0103 	and.w	r1, r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032f2:	bf00      	nop
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	03ff63ff 	.word	0x03ff63ff

08003304 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b20      	cmp	r3, #32
 8003318:	d138      	bne.n	800338c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003324:	2302      	movs	r3, #2
 8003326:	e032      	b.n	800338e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2224      	movs	r2, #36	@ 0x24
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003356:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6819      	ldr	r1, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e000      	b.n	800338e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800339a:	b480      	push	{r7}
 800339c:	b085      	sub	sp, #20
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d139      	bne.n	8003424 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e033      	b.n	8003426 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2224      	movs	r2, #36	@ 0x24
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e000      	b.n	8003426 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
  }
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800343a:	af00      	add	r7, sp, #0
 800343c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003440:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003444:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d102      	bne.n	800345a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f001 b823 	b.w	80044a0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 817d 	beq.w	800376a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003470:	4bbc      	ldr	r3, [pc, #752]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b04      	cmp	r3, #4
 800347a:	d00c      	beq.n	8003496 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800347c:	4bb9      	ldr	r3, [pc, #740]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 030c 	and.w	r3, r3, #12
 8003484:	2b08      	cmp	r3, #8
 8003486:	d15c      	bne.n	8003542 <HAL_RCC_OscConfig+0x10e>
 8003488:	4bb6      	ldr	r3, [pc, #728]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003494:	d155      	bne.n	8003542 <HAL_RCC_OscConfig+0x10e>
 8003496:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800349a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80034a2:	fa93 f3a3 	rbit	r3, r3
 80034a6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d102      	bne.n	80034c8 <HAL_RCC_OscConfig+0x94>
 80034c2:	4ba8      	ldr	r3, [pc, #672]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	e015      	b.n	80034f4 <HAL_RCC_OscConfig+0xc0>
 80034c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034cc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80034dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034e0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80034e4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80034f0:	4b9c      	ldr	r3, [pc, #624]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034f8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80034fc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003500:	fa92 f2a2 	rbit	r2, r2
 8003504:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003508:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800350c:	fab2 f282 	clz	r2, r2
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	f042 0220 	orr.w	r2, r2, #32
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	f002 021f 	and.w	r2, r2, #31
 800351c:	2101      	movs	r1, #1
 800351e:	fa01 f202 	lsl.w	r2, r1, r2
 8003522:	4013      	ands	r3, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 811f 	beq.w	8003768 <HAL_RCC_OscConfig+0x334>
 800352a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f040 8116 	bne.w	8003768 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	f000 bfaf 	b.w	80044a0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003546:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003552:	d106      	bne.n	8003562 <HAL_RCC_OscConfig+0x12e>
 8003554:	4b83      	ldr	r3, [pc, #524]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a82      	ldr	r2, [pc, #520]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 800355a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	e036      	b.n	80035d0 <HAL_RCC_OscConfig+0x19c>
 8003562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003566:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0x158>
 8003572:	4b7c      	ldr	r3, [pc, #496]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a7b      	ldr	r2, [pc, #492]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 8003578:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b79      	ldr	r3, [pc, #484]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a78      	ldr	r2, [pc, #480]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 8003584:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e021      	b.n	80035d0 <HAL_RCC_OscConfig+0x19c>
 800358c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003590:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x184>
 800359e:	4b71      	ldr	r3, [pc, #452]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a70      	ldr	r2, [pc, #448]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 80035a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	4b6e      	ldr	r3, [pc, #440]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a6d      	ldr	r2, [pc, #436]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e00b      	b.n	80035d0 <HAL_RCC_OscConfig+0x19c>
 80035b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a69      	ldr	r2, [pc, #420]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 80035be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	4b67      	ldr	r3, [pc, #412]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a66      	ldr	r2, [pc, #408]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 80035ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035ce:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035d0:	4b64      	ldr	r3, [pc, #400]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	f023 020f 	bic.w	r2, r3, #15
 80035d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	495f      	ldr	r1, [pc, #380]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d059      	beq.n	80036ae <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fa:	f7fe fe4d 	bl	8002298 <HAL_GetTick>
 80035fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	e00a      	b.n	800361a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003604:	f7fe fe48 	bl	8002298 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b64      	cmp	r3, #100	@ 0x64
 8003612:	d902      	bls.n	800361a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	f000 bf43 	b.w	80044a0 <HAL_RCC_OscConfig+0x106c>
 800361a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800361e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800362e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d102      	bne.n	800364c <HAL_RCC_OscConfig+0x218>
 8003646:	4b47      	ldr	r3, [pc, #284]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	e015      	b.n	8003678 <HAL_RCC_OscConfig+0x244>
 800364c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003650:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003660:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003664:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003668:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003674:	4b3b      	ldr	r3, [pc, #236]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800367c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003680:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003684:	fa92 f2a2 	rbit	r2, r2
 8003688:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800368c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003690:	fab2 f282 	clz	r2, r2
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	f042 0220 	orr.w	r2, r2, #32
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	f002 021f 	and.w	r2, r2, #31
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f202 	lsl.w	r2, r1, r2
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0ab      	beq.n	8003604 <HAL_RCC_OscConfig+0x1d0>
 80036ac:	e05d      	b.n	800376a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ae:	f7fe fdf3 	bl	8002298 <HAL_GetTick>
 80036b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b8:	f7fe fdee 	bl	8002298 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b64      	cmp	r3, #100	@ 0x64
 80036c6:	d902      	bls.n	80036ce <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	f000 bee9 	b.w	80044a0 <HAL_RCC_OscConfig+0x106c>
 80036ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036d2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80036e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d102      	bne.n	8003700 <HAL_RCC_OscConfig+0x2cc>
 80036fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	e015      	b.n	800372c <HAL_RCC_OscConfig+0x2f8>
 8003700:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003704:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800370c:	fa93 f3a3 	rbit	r3, r3
 8003710:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003714:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003718:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800371c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003728:	4b0e      	ldr	r3, [pc, #56]	@ (8003764 <HAL_RCC_OscConfig+0x330>)
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003730:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003734:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003738:	fa92 f2a2 	rbit	r2, r2
 800373c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003740:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003744:	fab2 f282 	clz	r2, r2
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	f042 0220 	orr.w	r2, r2, #32
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	f002 021f 	and.w	r2, r2, #31
 8003754:	2101      	movs	r1, #1
 8003756:	fa01 f202 	lsl.w	r2, r1, r2
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1ab      	bne.n	80036b8 <HAL_RCC_OscConfig+0x284>
 8003760:	e003      	b.n	800376a <HAL_RCC_OscConfig+0x336>
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800376e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 817d 	beq.w	8003a7a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003780:	4ba6      	ldr	r3, [pc, #664]	@ (8003a1c <HAL_RCC_OscConfig+0x5e8>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800378c:	4ba3      	ldr	r3, [pc, #652]	@ (8003a1c <HAL_RCC_OscConfig+0x5e8>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 030c 	and.w	r3, r3, #12
 8003794:	2b08      	cmp	r3, #8
 8003796:	d172      	bne.n	800387e <HAL_RCC_OscConfig+0x44a>
 8003798:	4ba0      	ldr	r3, [pc, #640]	@ (8003a1c <HAL_RCC_OscConfig+0x5e8>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d16c      	bne.n	800387e <HAL_RCC_OscConfig+0x44a>
 80037a4:	2302      	movs	r3, #2
 80037a6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80037b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	095b      	lsrs	r3, r3, #5
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d102      	bne.n	80037d4 <HAL_RCC_OscConfig+0x3a0>
 80037ce:	4b93      	ldr	r3, [pc, #588]	@ (8003a1c <HAL_RCC_OscConfig+0x5e8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	e013      	b.n	80037fc <HAL_RCC_OscConfig+0x3c8>
 80037d4:	2302      	movs	r3, #2
 80037d6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80037de:	fa93 f3a3 	rbit	r3, r3
 80037e2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80037e6:	2302      	movs	r3, #2
 80037e8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80037ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80037f0:	fa93 f3a3 	rbit	r3, r3
 80037f4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80037f8:	4b88      	ldr	r3, [pc, #544]	@ (8003a1c <HAL_RCC_OscConfig+0x5e8>)
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	2202      	movs	r2, #2
 80037fe:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003802:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003806:	fa92 f2a2 	rbit	r2, r2
 800380a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800380e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003812:	fab2 f282 	clz	r2, r2
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	f042 0220 	orr.w	r2, r2, #32
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	f002 021f 	and.w	r2, r2, #31
 8003822:	2101      	movs	r1, #1
 8003824:	fa01 f202 	lsl.w	r2, r1, r2
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <HAL_RCC_OscConfig+0x410>
 800382e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003832:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d002      	beq.n	8003844 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	f000 be2e 	b.w	80044a0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003844:	4b75      	ldr	r3, [pc, #468]	@ (8003a1c <HAL_RCC_OscConfig+0x5e8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800384c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003850:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	21f8      	movs	r1, #248	@ 0xf8
 800385a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003862:	fa91 f1a1 	rbit	r1, r1
 8003866:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800386a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800386e:	fab1 f181 	clz	r1, r1
 8003872:	b2c9      	uxtb	r1, r1
 8003874:	408b      	lsls	r3, r1
 8003876:	4969      	ldr	r1, [pc, #420]	@ (8003a1c <HAL_RCC_OscConfig+0x5e8>)
 8003878:	4313      	orrs	r3, r2
 800387a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387c:	e0fd      	b.n	8003a7a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800387e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003882:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 8088 	beq.w	80039a0 <HAL_RCC_OscConfig+0x56c>
 8003890:	2301      	movs	r3, #1
 8003892:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80038a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a6:	fab3 f383 	clz	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038b0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	461a      	mov	r2, r3
 80038b8:	2301      	movs	r3, #1
 80038ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7fe fcec 	bl	8002298 <HAL_GetTick>
 80038c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c6:	f7fe fce7 	bl	8002298 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d902      	bls.n	80038dc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	f000 bde2 	b.w	80044a0 <HAL_RCC_OscConfig+0x106c>
 80038dc:	2302      	movs	r3, #2
 80038de:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80038ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d102      	bne.n	800390c <HAL_RCC_OscConfig+0x4d8>
 8003906:	4b45      	ldr	r3, [pc, #276]	@ (8003a1c <HAL_RCC_OscConfig+0x5e8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	e013      	b.n	8003934 <HAL_RCC_OscConfig+0x500>
 800390c:	2302      	movs	r3, #2
 800390e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800391e:	2302      	movs	r3, #2
 8003920:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003924:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003928:	fa93 f3a3 	rbit	r3, r3
 800392c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003930:	4b3a      	ldr	r3, [pc, #232]	@ (8003a1c <HAL_RCC_OscConfig+0x5e8>)
 8003932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003934:	2202      	movs	r2, #2
 8003936:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800393a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800393e:	fa92 f2a2 	rbit	r2, r2
 8003942:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003946:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800394a:	fab2 f282 	clz	r2, r2
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	f042 0220 	orr.w	r2, r2, #32
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	f002 021f 	and.w	r2, r2, #31
 800395a:	2101      	movs	r1, #1
 800395c:	fa01 f202 	lsl.w	r2, r1, r2
 8003960:	4013      	ands	r3, r2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0af      	beq.n	80038c6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003966:	4b2d      	ldr	r3, [pc, #180]	@ (8003a1c <HAL_RCC_OscConfig+0x5e8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800396e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003972:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	21f8      	movs	r1, #248	@ 0xf8
 800397c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003984:	fa91 f1a1 	rbit	r1, r1
 8003988:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800398c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003990:	fab1 f181 	clz	r1, r1
 8003994:	b2c9      	uxtb	r1, r1
 8003996:	408b      	lsls	r3, r1
 8003998:	4920      	ldr	r1, [pc, #128]	@ (8003a1c <HAL_RCC_OscConfig+0x5e8>)
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]
 800399e:	e06c      	b.n	8003a7a <HAL_RCC_OscConfig+0x646>
 80039a0:	2301      	movs	r3, #1
 80039a2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80039aa:	fa93 f3a3 	rbit	r3, r3
 80039ae:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80039b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b6:	fab3 f383 	clz	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80039c0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	461a      	mov	r2, r3
 80039c8:	2300      	movs	r3, #0
 80039ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7fe fc64 	bl	8002298 <HAL_GetTick>
 80039d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d4:	e00a      	b.n	80039ec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d6:	f7fe fc5f 	bl	8002298 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d902      	bls.n	80039ec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	f000 bd5a 	b.w	80044a0 <HAL_RCC_OscConfig+0x106c>
 80039ec:	2302      	movs	r3, #2
 80039ee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80039fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d104      	bne.n	8003a20 <HAL_RCC_OscConfig+0x5ec>
 8003a16:	4b01      	ldr	r3, [pc, #4]	@ (8003a1c <HAL_RCC_OscConfig+0x5e8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	e015      	b.n	8003a48 <HAL_RCC_OscConfig+0x614>
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	2302      	movs	r3, #2
 8003a22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003a2a:	fa93 f3a3 	rbit	r3, r3
 8003a2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003a32:	2302      	movs	r3, #2
 8003a34:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003a38:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a3c:	fa93 f3a3 	rbit	r3, r3
 8003a40:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003a44:	4bc8      	ldr	r3, [pc, #800]	@ (8003d68 <HAL_RCC_OscConfig+0x934>)
 8003a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a48:	2202      	movs	r2, #2
 8003a4a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003a4e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003a52:	fa92 f2a2 	rbit	r2, r2
 8003a56:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003a5a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003a5e:	fab2 f282 	clz	r2, r2
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	f042 0220 	orr.w	r2, r2, #32
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	f002 021f 	and.w	r2, r2, #31
 8003a6e:	2101      	movs	r1, #1
 8003a70:	fa01 f202 	lsl.w	r2, r1, r2
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1ad      	bne.n	80039d6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 8110 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d079      	beq.n	8003b94 <HAL_RCC_OscConfig+0x760>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab6:	fab3 f383 	clz	r3, r3
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	4bab      	ldr	r3, [pc, #684]	@ (8003d6c <HAL_RCC_OscConfig+0x938>)
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aca:	f7fe fbe5 	bl	8002298 <HAL_GetTick>
 8003ace:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad4:	f7fe fbe0 	bl	8002298 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d902      	bls.n	8003aea <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	f000 bcdb 	b.w	80044a0 <HAL_RCC_OscConfig+0x106c>
 8003aea:	2302      	movs	r3, #2
 8003aec:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003af4:	fa93 f3a3 	rbit	r3, r3
 8003af8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b00:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003b04:	2202      	movs	r2, #2
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	fa93 f2a3 	rbit	r2, r3
 8003b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b28:	2202      	movs	r2, #2
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	fa93 f2a3 	rbit	r2, r3
 8003b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003b42:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b44:	4b88      	ldr	r3, [pc, #544]	@ (8003d68 <HAL_RCC_OscConfig+0x934>)
 8003b46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003b50:	2102      	movs	r1, #2
 8003b52:	6019      	str	r1, [r3, #0]
 8003b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b58:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	fa93 f1a3 	rbit	r1, r3
 8003b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b66:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003b6a:	6019      	str	r1, [r3, #0]
  return result;
 8003b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b70:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	fab3 f383 	clz	r3, r3
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	2101      	movs	r1, #1
 8003b88:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0a0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x6a0>
 8003b92:	e08d      	b.n	8003cb0 <HAL_RCC_OscConfig+0x87c>
 8003b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	fa93 f2a3 	rbit	r2, r3
 8003bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003bb6:	601a      	str	r2, [r3, #0]
  return result;
 8003bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bbc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003bc0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc2:	fab3 f383 	clz	r3, r3
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4b68      	ldr	r3, [pc, #416]	@ (8003d6c <HAL_RCC_OscConfig+0x938>)
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd6:	f7fe fb5f 	bl	8002298 <HAL_GetTick>
 8003bda:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be0:	f7fe fb5a 	bl	8002298 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d902      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	f000 bc55 	b.w	80044a0 <HAL_RCC_OscConfig+0x106c>
 8003bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bfa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003bfe:	2202      	movs	r2, #2
 8003c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c06:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	fa93 f2a3 	rbit	r2, r3
 8003c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c14:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003c22:	2202      	movs	r2, #2
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c2a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	fa93 f2a3 	rbit	r2, r3
 8003c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c42:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003c46:	2202      	movs	r2, #2
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	fa93 f2a3 	rbit	r2, r3
 8003c58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c5c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003c60:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c62:	4b41      	ldr	r3, [pc, #260]	@ (8003d68 <HAL_RCC_OscConfig+0x934>)
 8003c64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003c6e:	2102      	movs	r1, #2
 8003c70:	6019      	str	r1, [r3, #0]
 8003c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c76:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	fa93 f1a3 	rbit	r1, r3
 8003c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c84:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003c88:	6019      	str	r1, [r3, #0]
  return result;
 8003c8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c8e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	fab3 f383 	clz	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d197      	bne.n	8003be0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 81a1 	beq.w	8004008 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ccc:	4b26      	ldr	r3, [pc, #152]	@ (8003d68 <HAL_RCC_OscConfig+0x934>)
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d116      	bne.n	8003d06 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd8:	4b23      	ldr	r3, [pc, #140]	@ (8003d68 <HAL_RCC_OscConfig+0x934>)
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	4a22      	ldr	r2, [pc, #136]	@ (8003d68 <HAL_RCC_OscConfig+0x934>)
 8003cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce2:	61d3      	str	r3, [r2, #28]
 8003ce4:	4b20      	ldr	r3, [pc, #128]	@ (8003d68 <HAL_RCC_OscConfig+0x934>)
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cfa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003cfe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d06:	4b1a      	ldr	r3, [pc, #104]	@ (8003d70 <HAL_RCC_OscConfig+0x93c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d11a      	bne.n	8003d48 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d12:	4b17      	ldr	r3, [pc, #92]	@ (8003d70 <HAL_RCC_OscConfig+0x93c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a16      	ldr	r2, [pc, #88]	@ (8003d70 <HAL_RCC_OscConfig+0x93c>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1e:	f7fe fabb 	bl	8002298 <HAL_GetTick>
 8003d22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d26:	e009      	b.n	8003d3c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d28:	f7fe fab6 	bl	8002298 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b64      	cmp	r3, #100	@ 0x64
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e3b1      	b.n	80044a0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d70 <HAL_RCC_OscConfig+0x93c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0ef      	beq.n	8003d28 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d10d      	bne.n	8003d74 <HAL_RCC_OscConfig+0x940>
 8003d58:	4b03      	ldr	r3, [pc, #12]	@ (8003d68 <HAL_RCC_OscConfig+0x934>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	4a02      	ldr	r2, [pc, #8]	@ (8003d68 <HAL_RCC_OscConfig+0x934>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6213      	str	r3, [r2, #32]
 8003d64:	e03c      	b.n	8003de0 <HAL_RCC_OscConfig+0x9ac>
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	10908120 	.word	0x10908120
 8003d70:	40007000 	.word	0x40007000
 8003d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10c      	bne.n	8003d9e <HAL_RCC_OscConfig+0x96a>
 8003d84:	4bc1      	ldr	r3, [pc, #772]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	4ac0      	ldr	r2, [pc, #768]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003d8a:	f023 0301 	bic.w	r3, r3, #1
 8003d8e:	6213      	str	r3, [r2, #32]
 8003d90:	4bbe      	ldr	r3, [pc, #760]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	4abd      	ldr	r2, [pc, #756]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003d96:	f023 0304 	bic.w	r3, r3, #4
 8003d9a:	6213      	str	r3, [r2, #32]
 8003d9c:	e020      	b.n	8003de0 <HAL_RCC_OscConfig+0x9ac>
 8003d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x994>
 8003dae:	4bb7      	ldr	r3, [pc, #732]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	4ab6      	ldr	r2, [pc, #728]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003db4:	f043 0304 	orr.w	r3, r3, #4
 8003db8:	6213      	str	r3, [r2, #32]
 8003dba:	4bb4      	ldr	r3, [pc, #720]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	4ab3      	ldr	r2, [pc, #716]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	6213      	str	r3, [r2, #32]
 8003dc6:	e00b      	b.n	8003de0 <HAL_RCC_OscConfig+0x9ac>
 8003dc8:	4bb0      	ldr	r3, [pc, #704]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	4aaf      	ldr	r2, [pc, #700]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	6213      	str	r3, [r2, #32]
 8003dd4:	4bad      	ldr	r3, [pc, #692]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	4aac      	ldr	r2, [pc, #688]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003dda:	f023 0304 	bic.w	r3, r3, #4
 8003dde:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003de0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 8081 	beq.w	8003ef4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df2:	f7fe fa51 	bl	8002298 <HAL_GetTick>
 8003df6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfa:	e00b      	b.n	8003e14 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dfc:	f7fe fa4c 	bl	8002298 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e345      	b.n	80044a0 <HAL_RCC_OscConfig+0x106c>
 8003e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e18:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e24:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	fa93 f2a3 	rbit	r2, r3
 8003e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e32:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e3c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003e40:	2202      	movs	r2, #2
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e48:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	fa93 f2a3 	rbit	r2, r3
 8003e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e56:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003e5a:	601a      	str	r2, [r3, #0]
  return result;
 8003e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e60:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003e64:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	f043 0302 	orr.w	r3, r3, #2
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d102      	bne.n	8003e80 <HAL_RCC_OscConfig+0xa4c>
 8003e7a:	4b84      	ldr	r3, [pc, #528]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	e013      	b.n	8003ea8 <HAL_RCC_OscConfig+0xa74>
 8003e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e84:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003e88:	2202      	movs	r2, #2
 8003e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e90:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	fa93 f2a3 	rbit	r2, r3
 8003e9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e9e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	4b79      	ldr	r3, [pc, #484]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003eac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	6011      	str	r1, [r2, #0]
 8003eb4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003eb8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	fa92 f1a2 	rbit	r1, r2
 8003ec2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ec6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003eca:	6011      	str	r1, [r2, #0]
  return result;
 8003ecc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ed0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	fab2 f282 	clz	r2, r2
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	f002 021f 	and.w	r2, r2, #31
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d084      	beq.n	8003dfc <HAL_RCC_OscConfig+0x9c8>
 8003ef2:	e07f      	b.n	8003ff4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef4:	f7fe f9d0 	bl	8002298 <HAL_GetTick>
 8003ef8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003efc:	e00b      	b.n	8003f16 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fe f9cb 	bl	8002298 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e2c4      	b.n	80044a0 <HAL_RCC_OscConfig+0x106c>
 8003f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f1a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003f1e:	2202      	movs	r2, #2
 8003f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f26:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	fa93 f2a3 	rbit	r2, r3
 8003f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f34:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f3e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f42:	2202      	movs	r2, #2
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	fa93 f2a3 	rbit	r2, r3
 8003f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f58:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f5c:	601a      	str	r2, [r3, #0]
  return result;
 8003f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f62:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f68:	fab3 f383 	clz	r3, r3
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f043 0302 	orr.w	r3, r3, #2
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d102      	bne.n	8003f82 <HAL_RCC_OscConfig+0xb4e>
 8003f7c:	4b43      	ldr	r3, [pc, #268]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	e013      	b.n	8003faa <HAL_RCC_OscConfig+0xb76>
 8003f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f86:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f92:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	fa93 f2a3 	rbit	r2, r3
 8003f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	4b39      	ldr	r3, [pc, #228]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fae:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	6011      	str	r1, [r2, #0]
 8003fb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fba:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	fa92 f1a2 	rbit	r1, r2
 8003fc4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fc8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003fcc:	6011      	str	r1, [r2, #0]
  return result;
 8003fce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fd2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	fab2 f282 	clz	r2, r2
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	f002 021f 	and.w	r2, r2, #31
 8003fe8:	2101      	movs	r1, #1
 8003fea:	fa01 f202 	lsl.w	r2, r1, r2
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d184      	bne.n	8003efe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ff4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d105      	bne.n	8004008 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffc:	4b23      	ldr	r3, [pc, #140]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	4a22      	ldr	r2, [pc, #136]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 8004002:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004006:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800400c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8242 	beq.w	800449e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800401a:	4b1c      	ldr	r3, [pc, #112]	@ (800408c <HAL_RCC_OscConfig+0xc58>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b08      	cmp	r3, #8
 8004024:	f000 8213 	beq.w	800444e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	2b02      	cmp	r3, #2
 8004036:	f040 8162 	bne.w	80042fe <HAL_RCC_OscConfig+0xeca>
 800403a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004042:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004046:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	fa93 f2a3 	rbit	r2, r3
 8004056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800405a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800405e:	601a      	str	r2, [r3, #0]
  return result;
 8004060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004064:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004068:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406a:	fab3 f383 	clz	r3, r3
 800406e:	b2db      	uxtb	r3, r3
 8004070:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004074:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	461a      	mov	r2, r3
 800407c:	2300      	movs	r3, #0
 800407e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7fe f90a 	bl	8002298 <HAL_GetTick>
 8004084:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004088:	e00c      	b.n	80040a4 <HAL_RCC_OscConfig+0xc70>
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004090:	f7fe f902 	bl	8002298 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e1fd      	b.n	80044a0 <HAL_RCC_OscConfig+0x106c>
 80040a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80040ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	fa93 f2a3 	rbit	r2, r3
 80040c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80040c8:	601a      	str	r2, [r3, #0]
  return result;
 80040ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ce:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80040d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d4:	fab3 f383 	clz	r3, r3
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d102      	bne.n	80040ee <HAL_RCC_OscConfig+0xcba>
 80040e8:	4bb0      	ldr	r3, [pc, #704]	@ (80043ac <HAL_RCC_OscConfig+0xf78>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	e027      	b.n	800413e <HAL_RCC_OscConfig+0xd0a>
 80040ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80040f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004100:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	fa93 f2a3 	rbit	r2, r3
 800410a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800410e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004118:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800411c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004126:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	fa93 f2a3 	rbit	r2, r3
 8004130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004134:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	4b9c      	ldr	r3, [pc, #624]	@ (80043ac <HAL_RCC_OscConfig+0xf78>)
 800413c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004142:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004146:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800414a:	6011      	str	r1, [r2, #0]
 800414c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004150:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	fa92 f1a2 	rbit	r1, r2
 800415a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800415e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004162:	6011      	str	r1, [r2, #0]
  return result;
 8004164:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004168:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800416c:	6812      	ldr	r2, [r2, #0]
 800416e:	fab2 f282 	clz	r2, r2
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	f042 0220 	orr.w	r2, r2, #32
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	f002 021f 	and.w	r2, r2, #31
 800417e:	2101      	movs	r1, #1
 8004180:	fa01 f202 	lsl.w	r2, r1, r2
 8004184:	4013      	ands	r3, r2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d182      	bne.n	8004090 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800418a:	4b88      	ldr	r3, [pc, #544]	@ (80043ac <HAL_RCC_OscConfig+0xf78>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004196:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800419e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	430b      	orrs	r3, r1
 80041ac:	497f      	ldr	r1, [pc, #508]	@ (80043ac <HAL_RCC_OscConfig+0xf78>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]
 80041b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80041ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	fa93 f2a3 	rbit	r2, r3
 80041ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80041d6:	601a      	str	r2, [r3, #0]
  return result;
 80041d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041dc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80041e0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e2:	fab3 f383 	clz	r3, r3
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80041ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	461a      	mov	r2, r3
 80041f4:	2301      	movs	r3, #1
 80041f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7fe f84e 	bl	8002298 <HAL_GetTick>
 80041fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004200:	e009      	b.n	8004216 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004202:	f7fe f849 	bl	8002298 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e144      	b.n	80044a0 <HAL_RCC_OscConfig+0x106c>
 8004216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800421a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800421e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004222:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004228:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	fa93 f2a3 	rbit	r2, r3
 8004232:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004236:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800423a:	601a      	str	r2, [r3, #0]
  return result;
 800423c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004240:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004244:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004246:	fab3 f383 	clz	r3, r3
 800424a:	b2db      	uxtb	r3, r3
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b01      	cmp	r3, #1
 8004258:	d102      	bne.n	8004260 <HAL_RCC_OscConfig+0xe2c>
 800425a:	4b54      	ldr	r3, [pc, #336]	@ (80043ac <HAL_RCC_OscConfig+0xf78>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	e027      	b.n	80042b0 <HAL_RCC_OscConfig+0xe7c>
 8004260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004264:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004268:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800426c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004272:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	fa93 f2a3 	rbit	r2, r3
 800427c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004280:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800428a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800428e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004298:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	fa93 f2a3 	rbit	r2, r3
 80042a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	4b3f      	ldr	r3, [pc, #252]	@ (80043ac <HAL_RCC_OscConfig+0xf78>)
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042b4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80042b8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80042bc:	6011      	str	r1, [r2, #0]
 80042be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042c2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	fa92 f1a2 	rbit	r1, r2
 80042cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042d0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80042d4:	6011      	str	r1, [r2, #0]
  return result;
 80042d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042da:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	fab2 f282 	clz	r2, r2
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	f042 0220 	orr.w	r2, r2, #32
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	f002 021f 	and.w	r2, r2, #31
 80042f0:	2101      	movs	r1, #1
 80042f2:	fa01 f202 	lsl.w	r2, r1, r2
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d082      	beq.n	8004202 <HAL_RCC_OscConfig+0xdce>
 80042fc:	e0cf      	b.n	800449e <HAL_RCC_OscConfig+0x106a>
 80042fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004302:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004306:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800430a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004310:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	fa93 f2a3 	rbit	r2, r3
 800431a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800431e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004322:	601a      	str	r2, [r3, #0]
  return result;
 8004324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004328:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800432c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004338:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	461a      	mov	r2, r3
 8004340:	2300      	movs	r3, #0
 8004342:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fd ffa8 	bl	8002298 <HAL_GetTick>
 8004348:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800434c:	e009      	b.n	8004362 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434e:	f7fd ffa3 	bl	8002298 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e09e      	b.n	80044a0 <HAL_RCC_OscConfig+0x106c>
 8004362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004366:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800436a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800436e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004374:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	fa93 f2a3 	rbit	r2, r3
 800437e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004382:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004386:	601a      	str	r2, [r3, #0]
  return result;
 8004388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800438c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004390:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d104      	bne.n	80043b0 <HAL_RCC_OscConfig+0xf7c>
 80043a6:	4b01      	ldr	r3, [pc, #4]	@ (80043ac <HAL_RCC_OscConfig+0xf78>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	e029      	b.n	8004400 <HAL_RCC_OscConfig+0xfcc>
 80043ac:	40021000 	.word	0x40021000
 80043b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80043b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	fa93 f2a3 	rbit	r2, r3
 80043cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043da:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80043de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	fa93 f2a3 	rbit	r2, r3
 80043f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043f6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	4b2b      	ldr	r3, [pc, #172]	@ (80044ac <HAL_RCC_OscConfig+0x1078>)
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004404:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004408:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800440c:	6011      	str	r1, [r2, #0]
 800440e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004412:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	fa92 f1a2 	rbit	r1, r2
 800441c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004420:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004424:	6011      	str	r1, [r2, #0]
  return result;
 8004426:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800442a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800442e:	6812      	ldr	r2, [r2, #0]
 8004430:	fab2 f282 	clz	r2, r2
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	f042 0220 	orr.w	r2, r2, #32
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	f002 021f 	and.w	r2, r2, #31
 8004440:	2101      	movs	r1, #1
 8004442:	fa01 f202 	lsl.w	r2, r1, r2
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d180      	bne.n	800434e <HAL_RCC_OscConfig+0xf1a>
 800444c:	e027      	b.n	800449e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800444e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004452:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e01e      	b.n	80044a0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004462:	4b12      	ldr	r3, [pc, #72]	@ (80044ac <HAL_RCC_OscConfig+0x1078>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800446a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800446e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004476:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	429a      	cmp	r2, r3
 8004480:	d10b      	bne.n	800449a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004482:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004486:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800448a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800448e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004496:	429a      	cmp	r2, r3
 8004498:	d001      	beq.n	800449e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40021000 	.word	0x40021000

080044b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b09e      	sub	sp, #120	@ 0x78
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e162      	b.n	800478e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044c8:	4b90      	ldr	r3, [pc, #576]	@ (800470c <HAL_RCC_ClockConfig+0x25c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d910      	bls.n	80044f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	4b8d      	ldr	r3, [pc, #564]	@ (800470c <HAL_RCC_ClockConfig+0x25c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 0207 	bic.w	r2, r3, #7
 80044de:	498b      	ldr	r1, [pc, #556]	@ (800470c <HAL_RCC_ClockConfig+0x25c>)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	4b89      	ldr	r3, [pc, #548]	@ (800470c <HAL_RCC_ClockConfig+0x25c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e14a      	b.n	800478e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004504:	4b82      	ldr	r3, [pc, #520]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	497f      	ldr	r1, [pc, #508]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 8004512:	4313      	orrs	r3, r2
 8004514:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 80dc 	beq.w	80046dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d13c      	bne.n	80045a6 <HAL_RCC_ClockConfig+0xf6>
 800452c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004530:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004532:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004534:	fa93 f3a3 	rbit	r3, r3
 8004538:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800453a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453c:	fab3 f383 	clz	r3, r3
 8004540:	b2db      	uxtb	r3, r3
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	b2db      	uxtb	r3, r3
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	d102      	bne.n	8004556 <HAL_RCC_ClockConfig+0xa6>
 8004550:	4b6f      	ldr	r3, [pc, #444]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	e00f      	b.n	8004576 <HAL_RCC_ClockConfig+0xc6>
 8004556:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800455a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800455e:	fa93 f3a3 	rbit	r3, r3
 8004562:	667b      	str	r3, [r7, #100]	@ 0x64
 8004564:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004568:	663b      	str	r3, [r7, #96]	@ 0x60
 800456a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800456c:	fa93 f3a3 	rbit	r3, r3
 8004570:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004572:	4b67      	ldr	r3, [pc, #412]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 8004574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004576:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800457a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800457c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800457e:	fa92 f2a2 	rbit	r2, r2
 8004582:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004584:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004586:	fab2 f282 	clz	r2, r2
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	f042 0220 	orr.w	r2, r2, #32
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	f002 021f 	and.w	r2, r2, #31
 8004596:	2101      	movs	r1, #1
 8004598:	fa01 f202 	lsl.w	r2, r1, r2
 800459c:	4013      	ands	r3, r2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d17b      	bne.n	800469a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e0f3      	b.n	800478e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d13c      	bne.n	8004628 <HAL_RCC_ClockConfig+0x178>
 80045ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045b2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045b6:	fa93 f3a3 	rbit	r3, r3
 80045ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80045bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045be:	fab3 f383 	clz	r3, r3
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d102      	bne.n	80045d8 <HAL_RCC_ClockConfig+0x128>
 80045d2:	4b4f      	ldr	r3, [pc, #316]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	e00f      	b.n	80045f8 <HAL_RCC_ClockConfig+0x148>
 80045d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045e0:	fa93 f3a3 	rbit	r3, r3
 80045e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80045ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045ee:	fa93 f3a3 	rbit	r3, r3
 80045f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045f4:	4b46      	ldr	r3, [pc, #280]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045fc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80045fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004600:	fa92 f2a2 	rbit	r2, r2
 8004604:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004606:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004608:	fab2 f282 	clz	r2, r2
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	f042 0220 	orr.w	r2, r2, #32
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	f002 021f 	and.w	r2, r2, #31
 8004618:	2101      	movs	r1, #1
 800461a:	fa01 f202 	lsl.w	r2, r1, r2
 800461e:	4013      	ands	r3, r2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d13a      	bne.n	800469a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e0b2      	b.n	800478e <HAL_RCC_ClockConfig+0x2de>
 8004628:	2302      	movs	r3, #2
 800462a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462e:	fa93 f3a3 	rbit	r3, r3
 8004632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004636:	fab3 f383 	clz	r3, r3
 800463a:	b2db      	uxtb	r3, r3
 800463c:	095b      	lsrs	r3, r3, #5
 800463e:	b2db      	uxtb	r3, r3
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b01      	cmp	r3, #1
 8004648:	d102      	bne.n	8004650 <HAL_RCC_ClockConfig+0x1a0>
 800464a:	4b31      	ldr	r3, [pc, #196]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	e00d      	b.n	800466c <HAL_RCC_ClockConfig+0x1bc>
 8004650:	2302      	movs	r3, #2
 8004652:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004656:	fa93 f3a3 	rbit	r3, r3
 800465a:	627b      	str	r3, [r7, #36]	@ 0x24
 800465c:	2302      	movs	r3, #2
 800465e:	623b      	str	r3, [r7, #32]
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	fa93 f3a3 	rbit	r3, r3
 8004666:	61fb      	str	r3, [r7, #28]
 8004668:	4b29      	ldr	r3, [pc, #164]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	2202      	movs	r2, #2
 800466e:	61ba      	str	r2, [r7, #24]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	fa92 f2a2 	rbit	r2, r2
 8004676:	617a      	str	r2, [r7, #20]
  return result;
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	fab2 f282 	clz	r2, r2
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	f042 0220 	orr.w	r2, r2, #32
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	f002 021f 	and.w	r2, r2, #31
 800468a:	2101      	movs	r1, #1
 800468c:	fa01 f202 	lsl.w	r2, r1, r2
 8004690:	4013      	ands	r3, r2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e079      	b.n	800478e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469a:	4b1d      	ldr	r3, [pc, #116]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f023 0203 	bic.w	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	491a      	ldr	r1, [pc, #104]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046ac:	f7fd fdf4 	bl	8002298 <HAL_GetTick>
 80046b0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b2:	e00a      	b.n	80046ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b4:	f7fd fdf0 	bl	8002298 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e061      	b.n	800478e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	4b11      	ldr	r3, [pc, #68]	@ (8004710 <HAL_RCC_ClockConfig+0x260>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 020c 	and.w	r2, r3, #12
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	429a      	cmp	r2, r3
 80046da:	d1eb      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046dc:	4b0b      	ldr	r3, [pc, #44]	@ (800470c <HAL_RCC_ClockConfig+0x25c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d214      	bcs.n	8004714 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b08      	ldr	r3, [pc, #32]	@ (800470c <HAL_RCC_ClockConfig+0x25c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 0207 	bic.w	r2, r3, #7
 80046f2:	4906      	ldr	r1, [pc, #24]	@ (800470c <HAL_RCC_ClockConfig+0x25c>)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b04      	ldr	r3, [pc, #16]	@ (800470c <HAL_RCC_ClockConfig+0x25c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d005      	beq.n	8004714 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e040      	b.n	800478e <HAL_RCC_ClockConfig+0x2de>
 800470c:	40022000 	.word	0x40022000
 8004710:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004720:	4b1d      	ldr	r3, [pc, #116]	@ (8004798 <HAL_RCC_ClockConfig+0x2e8>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	491a      	ldr	r1, [pc, #104]	@ (8004798 <HAL_RCC_ClockConfig+0x2e8>)
 800472e:	4313      	orrs	r3, r2
 8004730:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800473e:	4b16      	ldr	r3, [pc, #88]	@ (8004798 <HAL_RCC_ClockConfig+0x2e8>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4912      	ldr	r1, [pc, #72]	@ (8004798 <HAL_RCC_ClockConfig+0x2e8>)
 800474e:	4313      	orrs	r3, r2
 8004750:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004752:	f000 f829 	bl	80047a8 <HAL_RCC_GetSysClockFreq>
 8004756:	4601      	mov	r1, r0
 8004758:	4b0f      	ldr	r3, [pc, #60]	@ (8004798 <HAL_RCC_ClockConfig+0x2e8>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004760:	22f0      	movs	r2, #240	@ 0xf0
 8004762:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	fa92 f2a2 	rbit	r2, r2
 800476a:	60fa      	str	r2, [r7, #12]
  return result;
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	fab2 f282 	clz	r2, r2
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	40d3      	lsrs	r3, r2
 8004776:	4a09      	ldr	r2, [pc, #36]	@ (800479c <HAL_RCC_ClockConfig+0x2ec>)
 8004778:	5cd3      	ldrb	r3, [r2, r3]
 800477a:	fa21 f303 	lsr.w	r3, r1, r3
 800477e:	4a08      	ldr	r2, [pc, #32]	@ (80047a0 <HAL_RCC_ClockConfig+0x2f0>)
 8004780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004782:	4b08      	ldr	r3, [pc, #32]	@ (80047a4 <HAL_RCC_ClockConfig+0x2f4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fd fd42 	bl	8002210 <HAL_InitTick>
  
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3778      	adds	r7, #120	@ 0x78
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40021000 	.word	0x40021000
 800479c:	08014a94 	.word	0x08014a94
 80047a0:	2000000c 	.word	0x2000000c
 80047a4:	20000010 	.word	0x20000010

080047a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b08b      	sub	sp, #44	@ 0x2c
 80047ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	2300      	movs	r3, #0
 80047b4:	61bb      	str	r3, [r7, #24]
 80047b6:	2300      	movs	r3, #0
 80047b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80047c2:	4b29      	ldr	r3, [pc, #164]	@ (8004868 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d002      	beq.n	80047d8 <HAL_RCC_GetSysClockFreq+0x30>
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d003      	beq.n	80047de <HAL_RCC_GetSysClockFreq+0x36>
 80047d6:	e03c      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047d8:	4b24      	ldr	r3, [pc, #144]	@ (800486c <HAL_RCC_GetSysClockFreq+0xc4>)
 80047da:	623b      	str	r3, [r7, #32]
      break;
 80047dc:	e03c      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80047e4:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80047e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	fa92 f2a2 	rbit	r2, r2
 80047f0:	607a      	str	r2, [r7, #4]
  return result;
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	fab2 f282 	clz	r2, r2
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	40d3      	lsrs	r3, r2
 80047fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004870 <HAL_RCC_GetSysClockFreq+0xc8>)
 80047fe:	5cd3      	ldrb	r3, [r2, r3]
 8004800:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004802:	4b19      	ldr	r3, [pc, #100]	@ (8004868 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	220f      	movs	r2, #15
 800480c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	fa92 f2a2 	rbit	r2, r2
 8004814:	60fa      	str	r2, [r7, #12]
  return result;
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	fab2 f282 	clz	r2, r2
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	40d3      	lsrs	r3, r2
 8004820:	4a14      	ldr	r2, [pc, #80]	@ (8004874 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004822:	5cd3      	ldrb	r3, [r2, r3]
 8004824:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004830:	4a0e      	ldr	r2, [pc, #56]	@ (800486c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	fbb2 f2f3 	udiv	r2, r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	fb02 f303 	mul.w	r3, r2, r3
 800483e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004840:	e004      	b.n	800484c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	4a0c      	ldr	r2, [pc, #48]	@ (8004878 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	623b      	str	r3, [r7, #32]
      break;
 8004850:	e002      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004852:	4b06      	ldr	r3, [pc, #24]	@ (800486c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004854:	623b      	str	r3, [r7, #32]
      break;
 8004856:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004858:	6a3b      	ldr	r3, [r7, #32]
}
 800485a:	4618      	mov	r0, r3
 800485c:	372c      	adds	r7, #44	@ 0x2c
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40021000 	.word	0x40021000
 800486c:	007a1200 	.word	0x007a1200
 8004870:	08014aa4 	.word	0x08014aa4
 8004874:	08014ab4 	.word	0x08014ab4
 8004878:	003d0900 	.word	0x003d0900

0800487c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b092      	sub	sp, #72	@ 0x48
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800488c:	2300      	movs	r3, #0
 800488e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 80d4 	beq.w	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048a0:	4b4e      	ldr	r3, [pc, #312]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10e      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ac:	4b4b      	ldr	r3, [pc, #300]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	4a4a      	ldr	r2, [pc, #296]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b6:	61d3      	str	r3, [r2, #28]
 80048b8:	4b48      	ldr	r3, [pc, #288]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c4:	2301      	movs	r3, #1
 80048c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ca:	4b45      	ldr	r3, [pc, #276]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d118      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048d6:	4b42      	ldr	r3, [pc, #264]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a41      	ldr	r2, [pc, #260]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e2:	f7fd fcd9 	bl	8002298 <HAL_GetTick>
 80048e6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e8:	e008      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ea:	f7fd fcd5 	bl	8002298 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b64      	cmp	r3, #100	@ 0x64
 80048f6:	d901      	bls.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e169      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fc:	4b38      	ldr	r3, [pc, #224]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004908:	4b34      	ldr	r3, [pc, #208]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004910:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 8084 	beq.w	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004922:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004924:	429a      	cmp	r2, r3
 8004926:	d07c      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004928:	4b2c      	ldr	r3, [pc, #176]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004930:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004932:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004936:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493a:	fa93 f3a3 	rbit	r3, r3
 800493e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004942:	fab3 f383 	clz	r3, r3
 8004946:	b2db      	uxtb	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	4b26      	ldr	r3, [pc, #152]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	461a      	mov	r2, r3
 8004952:	2301      	movs	r3, #1
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800495a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495e:	fa93 f3a3 	rbit	r3, r3
 8004962:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004966:	fab3 f383 	clz	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	4b1d      	ldr	r3, [pc, #116]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	461a      	mov	r2, r3
 8004976:	2300      	movs	r3, #0
 8004978:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800497a:	4a18      	ldr	r2, [pc, #96]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800497c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800497e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d04b      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498a:	f7fd fc85 	bl	8002298 <HAL_GetTick>
 800498e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004990:	e00a      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004992:	f7fd fc81 	bl	8002298 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e113      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80049a8:	2302      	movs	r3, #2
 80049aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ae:	fa93 f3a3 	rbit	r3, r3
 80049b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80049b4:	2302      	movs	r3, #2
 80049b6:	623b      	str	r3, [r7, #32]
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	fa93 f3a3 	rbit	r3, r3
 80049be:	61fb      	str	r3, [r7, #28]
  return result;
 80049c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c2:	fab3 f383 	clz	r3, r3
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	f043 0302 	orr.w	r3, r3, #2
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d108      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80049d6:	4b01      	ldr	r3, [pc, #4]	@ (80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	e00d      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40007000 	.word	0x40007000
 80049e4:	10908100 	.word	0x10908100
 80049e8:	2302      	movs	r3, #2
 80049ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	fa93 f3a3 	rbit	r3, r3
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	4b78      	ldr	r3, [pc, #480]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	2202      	movs	r2, #2
 80049fa:	613a      	str	r2, [r7, #16]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	fa92 f2a2 	rbit	r2, r2
 8004a02:	60fa      	str	r2, [r7, #12]
  return result;
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	fab2 f282 	clz	r2, r2
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	f002 021f 	and.w	r2, r2, #31
 8004a16:	2101      	movs	r1, #1
 8004a18:	fa01 f202 	lsl.w	r2, r1, r2
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0b7      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004a22:	4b6d      	ldr	r3, [pc, #436]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	496a      	ldr	r1, [pc, #424]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a34:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d105      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a3c:	4b66      	ldr	r3, [pc, #408]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	4a65      	ldr	r2, [pc, #404]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a54:	4b60      	ldr	r3, [pc, #384]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a58:	f023 0203 	bic.w	r2, r3, #3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	495d      	ldr	r1, [pc, #372]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a72:	4b59      	ldr	r3, [pc, #356]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a76:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	4956      	ldr	r1, [pc, #344]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a90:	4b51      	ldr	r3, [pc, #324]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	494e      	ldr	r1, [pc, #312]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d008      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004aae:	4b4a      	ldr	r3, [pc, #296]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab2:	f023 0210 	bic.w	r2, r3, #16
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	4947      	ldr	r1, [pc, #284]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004acc:	4b42      	ldr	r3, [pc, #264]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad8:	493f      	ldr	r1, [pc, #252]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d008      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004aea:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	f023 0220 	bic.w	r2, r3, #32
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	4938      	ldr	r1, [pc, #224]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b08:	4b33      	ldr	r3, [pc, #204]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	4930      	ldr	r1, [pc, #192]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0310 	and.w	r3, r3, #16
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d008      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b26:	4b2c      	ldr	r3, [pc, #176]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	4929      	ldr	r1, [pc, #164]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b44:	4b24      	ldr	r3, [pc, #144]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b50:	4921      	ldr	r1, [pc, #132]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d008      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b62:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b66:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6e:	491a      	ldr	r1, [pc, #104]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004b80:	4b15      	ldr	r3, [pc, #84]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b84:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8c:	4912      	ldr	r1, [pc, #72]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d008      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004baa:	490b      	ldr	r1, [pc, #44]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004bbc:	4b06      	ldr	r3, [pc, #24]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc8:	4903      	ldr	r1, [pc, #12]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3748      	adds	r7, #72	@ 0x48
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40021000 	.word	0x40021000

08004bdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e09d      	b.n	8004d2a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d108      	bne.n	8004c08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bfe:	d009      	beq.n	8004c14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	61da      	str	r2, [r3, #28]
 8004c06:	e005      	b.n	8004c14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fc ffce 	bl	8001bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c54:	d902      	bls.n	8004c5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	e002      	b.n	8004c62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004c6a:	d007      	beq.n	8004c7c <HAL_SPI_Init+0xa0>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c74:	d002      	beq.n	8004c7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cbe:	ea42 0103 	orr.w	r1, r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	0c1b      	lsrs	r3, r3, #16
 8004cd8:	f003 0204 	and.w	r2, r3, #4
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004cf8:	ea42 0103 	orr.w	r1, r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b088      	sub	sp, #32
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	603b      	str	r3, [r7, #0]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_SPI_Transmit+0x22>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e15f      	b.n	8005014 <HAL_SPI_Transmit+0x2e2>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d5c:	f7fd fa9c 	bl	8002298 <HAL_GetTick>
 8004d60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d002      	beq.n	8004d78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d72:	2302      	movs	r3, #2
 8004d74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d76:	e148      	b.n	800500a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_SPI_Transmit+0x52>
 8004d7e:	88fb      	ldrh	r3, [r7, #6]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d102      	bne.n	8004d8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d88:	e13f      	b.n	800500a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	88fa      	ldrh	r2, [r7, #6]
 8004da2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	88fa      	ldrh	r2, [r7, #6]
 8004da8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dd4:	d10f      	bne.n	8004df6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004de4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004df4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e00:	2b40      	cmp	r3, #64	@ 0x40
 8004e02:	d007      	beq.n	8004e14 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e1c:	d94f      	bls.n	8004ebe <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <HAL_SPI_Transmit+0xfa>
 8004e26:	8afb      	ldrh	r3, [r7, #22]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d142      	bne.n	8004eb2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e30:	881a      	ldrh	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3c:	1c9a      	adds	r2, r3, #2
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e50:	e02f      	b.n	8004eb2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d112      	bne.n	8004e86 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e64:	881a      	ldrh	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e70:	1c9a      	adds	r2, r3, #2
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e84:	e015      	b.n	8004eb2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e86:	f7fd fa07 	bl	8002298 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d803      	bhi.n	8004e9e <HAL_SPI_Transmit+0x16c>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d102      	bne.n	8004ea4 <HAL_SPI_Transmit+0x172>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d106      	bne.n	8004eb2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004eb0:	e0ab      	b.n	800500a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1ca      	bne.n	8004e52 <HAL_SPI_Transmit+0x120>
 8004ebc:	e080      	b.n	8004fc0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_SPI_Transmit+0x19a>
 8004ec6:	8afb      	ldrh	r3, [r7, #22]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d174      	bne.n	8004fb6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d912      	bls.n	8004efc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eda:	881a      	ldrh	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee6:	1c9a      	adds	r2, r3, #2
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b02      	subs	r3, #2
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004efa:	e05c      	b.n	8004fb6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	7812      	ldrb	r2, [r2, #0]
 8004f08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f22:	e048      	b.n	8004fb6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d12b      	bne.n	8004f8a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d912      	bls.n	8004f62 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f40:	881a      	ldrh	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4c:	1c9a      	adds	r2, r3, #2
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b02      	subs	r3, #2
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f60:	e029      	b.n	8004fb6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	330c      	adds	r3, #12
 8004f6c:	7812      	ldrb	r2, [r2, #0]
 8004f6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f88:	e015      	b.n	8004fb6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f8a:	f7fd f985 	bl	8002298 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d803      	bhi.n	8004fa2 <HAL_SPI_Transmit+0x270>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d102      	bne.n	8004fa8 <HAL_SPI_Transmit+0x276>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d106      	bne.n	8004fb6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004fb4:	e029      	b.n	800500a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1b1      	bne.n	8004f24 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	6839      	ldr	r1, [r7, #0]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f947 	bl	8005258 <SPI_EndRxTxTransaction>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fde:	2300      	movs	r3, #0
 8004fe0:	613b      	str	r3, [r7, #16]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	613b      	str	r3, [r7, #16]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	77fb      	strb	r3, [r7, #31]
 8005000:	e003      	b.n	800500a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005012:	7ffb      	ldrb	r3, [r7, #31]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3720      	adds	r7, #32
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800502c:	f7fd f934 	bl	8002298 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005034:	1a9b      	subs	r3, r3, r2
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	4413      	add	r3, r2
 800503a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800503c:	f7fd f92c 	bl	8002298 <HAL_GetTick>
 8005040:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005042:	4b39      	ldr	r3, [pc, #228]	@ (8005128 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	015b      	lsls	r3, r3, #5
 8005048:	0d1b      	lsrs	r3, r3, #20
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	fb02 f303 	mul.w	r3, r2, r3
 8005050:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005052:	e054      	b.n	80050fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505a:	d050      	beq.n	80050fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800505c:	f7fd f91c 	bl	8002298 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	429a      	cmp	r2, r3
 800506a:	d902      	bls.n	8005072 <SPI_WaitFlagStateUntilTimeout+0x56>
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d13d      	bne.n	80050ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005080:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800508a:	d111      	bne.n	80050b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005094:	d004      	beq.n	80050a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800509e:	d107      	bne.n	80050b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050b8:	d10f      	bne.n	80050da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e017      	b.n	800511e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4013      	ands	r3, r2
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	429a      	cmp	r2, r3
 800510c:	bf0c      	ite	eq
 800510e:	2301      	moveq	r3, #1
 8005110:	2300      	movne	r3, #0
 8005112:	b2db      	uxtb	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	429a      	cmp	r2, r3
 800511a:	d19b      	bne.n	8005054 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3720      	adds	r7, #32
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	2000000c 	.word	0x2000000c

0800512c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08a      	sub	sp, #40	@ 0x28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800513e:	f7fd f8ab 	bl	8002298 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	4413      	add	r3, r2
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800514e:	f7fd f8a3 	bl	8002298 <HAL_GetTick>
 8005152:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	330c      	adds	r3, #12
 800515a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800515c:	4b3d      	ldr	r3, [pc, #244]	@ (8005254 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	00da      	lsls	r2, r3, #3
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	0d1b      	lsrs	r3, r3, #20
 800516c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800516e:	fb02 f303 	mul.w	r3, r2, r3
 8005172:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005174:	e060      	b.n	8005238 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800517c:	d107      	bne.n	800518e <SPI_WaitFifoStateUntilTimeout+0x62>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800518c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005194:	d050      	beq.n	8005238 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005196:	f7fd f87f 	bl	8002298 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d902      	bls.n	80051ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d13d      	bne.n	8005228 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80051ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051c4:	d111      	bne.n	80051ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ce:	d004      	beq.n	80051da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d8:	d107      	bne.n	80051ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051f2:	d10f      	bne.n	8005214 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005212:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e010      	b.n	800524a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	3b01      	subs	r3, #1
 8005236:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	4013      	ands	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	429a      	cmp	r2, r3
 8005246:	d196      	bne.n	8005176 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3728      	adds	r7, #40	@ 0x28
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	2000000c 	.word	0x2000000c

08005258 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af02      	add	r7, sp, #8
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2200      	movs	r2, #0
 800526c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff ff5b 	bl	800512c <SPI_WaitFifoStateUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d007      	beq.n	800528c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005280:	f043 0220 	orr.w	r2, r3, #32
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e027      	b.n	80052dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2200      	movs	r2, #0
 8005294:	2180      	movs	r1, #128	@ 0x80
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f7ff fec0 	bl	800501c <SPI_WaitFlagStateUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d007      	beq.n	80052b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a6:	f043 0220 	orr.w	r2, r3, #32
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e014      	b.n	80052dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f7ff ff34 	bl	800512c <SPI_WaitFifoStateUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d007      	beq.n	80052da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ce:	f043 0220 	orr.w	r2, r3, #32
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e000      	b.n	80052dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <gc9a01a_write_cmd>:
static void GC9A01A_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) ;
static void GC9A01A_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1);

//void GC4901A_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data);

static void gc9a01a_write_cmd(uint8_t cmd) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	71fb      	strb	r3, [r7, #7]
	LCD_CSX_LOW();
 80052ee:	2200      	movs	r2, #0
 80052f0:	2110      	movs	r1, #16
 80052f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80052f6:	f7fd fa77 	bl	80027e8 <HAL_GPIO_WritePin>
	LCD_DCX_LOW(); //DCX = 0 , for command
 80052fa:	2200      	movs	r2, #0
 80052fc:	2140      	movs	r1, #64	@ 0x40
 80052fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005302:	f7fd fa71 	bl	80027e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8005306:	1df9      	adds	r1, r7, #7
 8005308:	f04f 33ff 	mov.w	r3, #4294967295
 800530c:	2201      	movs	r2, #1
 800530e:	4809      	ldr	r0, [pc, #36]	@ (8005334 <gc9a01a_write_cmd+0x50>)
 8005310:	f7ff fd0f 	bl	8004d32 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(&hspi1, &cmd, 1);
	LCD_DCX_HIGH();
 8005314:	2201      	movs	r2, #1
 8005316:	2140      	movs	r1, #64	@ 0x40
 8005318:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800531c:	f7fd fa64 	bl	80027e8 <HAL_GPIO_WritePin>
	LCD_CSX_HIGH();
 8005320:	2201      	movs	r2, #1
 8005322:	2110      	movs	r1, #16
 8005324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005328:	f7fd fa5e 	bl	80027e8 <HAL_GPIO_WritePin>
}
 800532c:	bf00      	nop
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20007aa4 	.word	0x20007aa4

08005338 <gc9a01a_write_data>:


static void gc9a01a_write_data(uint8_t *buffer, uint32_t len) {
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
	LCD_CSX_LOW();
 8005342:	2200      	movs	r2, #0
 8005344:	2110      	movs	r1, #16
 8005346:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800534a:	f7fd fa4d 	bl	80027e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, buffer, len, HAL_MAX_DELAY);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	b29a      	uxth	r2, r3
 8005352:	f04f 33ff 	mov.w	r3, #4294967295
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	4806      	ldr	r0, [pc, #24]	@ (8005374 <gc9a01a_write_data+0x3c>)
 800535a:	f7ff fcea 	bl	8004d32 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(&hspi1, buffer, len);
	LCD_CSX_HIGH();
 800535e:	2201      	movs	r2, #1
 8005360:	2110      	movs	r1, #16
 8005362:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005366:	f7fd fa3f 	bl	80027e8 <HAL_GPIO_WritePin>
}
 800536a:	bf00      	nop
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20007aa4 	.word	0x20007aa4

08005378 <gc9a01a_set_orientation>:

void gc9a01a_set_orientation(uint8_t orientation)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	71fb      	strb	r3, [r7, #7]
//	gc9a01a_write_cmd(GC9A01A_MADCTL);    // Memory Access Control command
//	gc9a01a_write_data(&param, 1);
//
	//////////////////////////////////////////////////////
	uint8_t params[4];
	if(orientation == LANDSCAPE) {
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d124      	bne.n	80053d2 <gc9a01a_set_orientation+0x5a>
		gc9a01a_write_cmd(GC9A01A_RASET);
 8005388:	202b      	movs	r0, #43	@ 0x2b
 800538a:	f7ff ffab 	bl	80052e4 <gc9a01a_write_cmd>
		params[0] = 0x00;
 800538e:	2300      	movs	r3, #0
 8005390:	733b      	strb	r3, [r7, #12]
		params[1] = 0x00;
 8005392:	2300      	movs	r3, #0
 8005394:	737b      	strb	r3, [r7, #13]
		params[2] = 0x00;
 8005396:	2300      	movs	r3, #0
 8005398:	73bb      	strb	r3, [r7, #14]
		params[3] = 0xf0;
 800539a:	23f0      	movs	r3, #240	@ 0xf0
 800539c:	73fb      	strb	r3, [r7, #15]
		gc9a01a_write_data(params,4);
 800539e:	f107 030c 	add.w	r3, r7, #12
 80053a2:	2104      	movs	r1, #4
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff ffc7 	bl	8005338 <gc9a01a_write_data>

		gc9a01a_write_cmd(GC9A01A_CASET);
 80053aa:	202a      	movs	r0, #42	@ 0x2a
 80053ac:	f7ff ff9a 	bl	80052e4 <gc9a01a_write_cmd>
		params[0] = 0x00;
 80053b0:	2300      	movs	r3, #0
 80053b2:	733b      	strb	r3, [r7, #12]
		params[1] = 0x00;
 80053b4:	2300      	movs	r3, #0
 80053b6:	737b      	strb	r3, [r7, #13]
		params[2] = 0x00;
 80053b8:	2300      	movs	r3, #0
 80053ba:	73bb      	strb	r3, [r7, #14]
		params[3] = 0xf0;
 80053bc:	23f0      	movs	r3, #240	@ 0xf0
 80053be:	73fb      	strb	r3, [r7, #15]
		gc9a01a_write_data(params,4);
 80053c0:	f107 030c 	add.w	r3, r7, #12
 80053c4:	2104      	movs	r1, #4
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff ffb6 	bl	8005338 <gc9a01a_write_data>

		params[0] = MADCTL_MV | MADCTL_BGR;
 80053cc:	2328      	movs	r3, #40	@ 0x28
 80053ce:	733b      	strb	r3, [r7, #12]
 80053d0:	e026      	b.n	8005420 <gc9a01a_set_orientation+0xa8>
	} else if(orientation == PORTRAIT) {
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d123      	bne.n	8005420 <gc9a01a_set_orientation+0xa8>
		gc9a01a_write_cmd(GC9A01A_RASET);
 80053d8:	202b      	movs	r0, #43	@ 0x2b
 80053da:	f7ff ff83 	bl	80052e4 <gc9a01a_write_cmd>
		params[0] = 0x00;
 80053de:	2300      	movs	r3, #0
 80053e0:	733b      	strb	r3, [r7, #12]
		params[1] = 0x00;
 80053e2:	2300      	movs	r3, #0
 80053e4:	737b      	strb	r3, [r7, #13]
		params[2] = 0x00;
 80053e6:	2300      	movs	r3, #0
 80053e8:	73bb      	strb	r3, [r7, #14]
		params[3] = 0xf0;
 80053ea:	23f0      	movs	r3, #240	@ 0xf0
 80053ec:	73fb      	strb	r3, [r7, #15]
		gc9a01a_write_data(params,4);
 80053ee:	f107 030c 	add.w	r3, r7, #12
 80053f2:	2104      	movs	r1, #4
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff ff9f 	bl	8005338 <gc9a01a_write_data>

		gc9a01a_write_cmd(GC9A01A_CASET);
 80053fa:	202a      	movs	r0, #42	@ 0x2a
 80053fc:	f7ff ff72 	bl	80052e4 <gc9a01a_write_cmd>
		params[0] = 0x00;
 8005400:	2300      	movs	r3, #0
 8005402:	733b      	strb	r3, [r7, #12]
		params[1] = 0x00;
 8005404:	2300      	movs	r3, #0
 8005406:	737b      	strb	r3, [r7, #13]
		params[2] = 0x00;
 8005408:	2300      	movs	r3, #0
 800540a:	73bb      	strb	r3, [r7, #14]
		params[3] = 0xf0;
 800540c:	23f0      	movs	r3, #240	@ 0xf0
 800540e:	73fb      	strb	r3, [r7, #15]
		gc9a01a_write_data(params,4);
 8005410:	f107 030c 	add.w	r3, r7, #12
 8005414:	2104      	movs	r1, #4
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff ff8e 	bl	8005338 <gc9a01a_write_data>

		params[0] = MADCTL_MY | MADCTL_MX | MADCTL_BGR;
 800541c:	23c8      	movs	r3, #200	@ 0xc8
 800541e:	733b      	strb	r3, [r7, #12]
	}
	gc9a01a_write_cmd(GC9A01A_MADCTL);
 8005420:	2036      	movs	r0, #54	@ 0x36
 8005422:	f7ff ff5f 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1);
 8005426:	f107 030c 	add.w	r3, r7, #12
 800542a:	2101      	movs	r1, #1
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff ff83 	bl	8005338 <gc9a01a_write_data>

	//////////////////////////////////////////////////////
}
 8005432:	bf00      	nop
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <gc9a01a_set_display_area>:
	gc9a01a_write_cmd(GC9A01A_RAMWR);
}


 void gc9a01a_set_display_area(lcd_area_t *area)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
	uint8_t params[4];

	/*Column address set(2Ah) */
	params[0] = HIGH_16(area->x1);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	0a1b      	lsrs	r3, r3, #8
 8005448:	b29b      	uxth	r3, r3
 800544a:	b2db      	uxtb	r3, r3
 800544c:	733b      	strb	r3, [r7, #12]
	params[1] = LOW_16(area->x1);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	737b      	strb	r3, [r7, #13]
	params[2] = HIGH_16(area->x2);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	885b      	ldrh	r3, [r3, #2]
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	b29b      	uxth	r3, r3
 800545e:	b2db      	uxtb	r3, r3
 8005460:	73bb      	strb	r3, [r7, #14]
	params[3] = LOW_16(area->x2);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	885b      	ldrh	r3, [r3, #2]
 8005466:	b2db      	uxtb	r3, r3
 8005468:	73fb      	strb	r3, [r7, #15]
	gc9a01a_write_cmd(GC9A01A_CASET);
 800546a:	202a      	movs	r0, #42	@ 0x2a
 800546c:	f7ff ff3a 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params, 4);
 8005470:	f107 030c 	add.w	r3, r7, #12
 8005474:	2104      	movs	r1, #4
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff ff5e 	bl	8005338 <gc9a01a_write_data>

	params[0] = HIGH_16(area->y1);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	889b      	ldrh	r3, [r3, #4]
 8005480:	0a1b      	lsrs	r3, r3, #8
 8005482:	b29b      	uxth	r3, r3
 8005484:	b2db      	uxtb	r3, r3
 8005486:	733b      	strb	r3, [r7, #12]
	params[1] = LOW_16(area->y1);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	889b      	ldrh	r3, [r3, #4]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	737b      	strb	r3, [r7, #13]
	params[2] = HIGH_16(area->y2);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	88db      	ldrh	r3, [r3, #6]
 8005494:	0a1b      	lsrs	r3, r3, #8
 8005496:	b29b      	uxth	r3, r3
 8005498:	b2db      	uxtb	r3, r3
 800549a:	73bb      	strb	r3, [r7, #14]
	params[3] = LOW_16(area->y2);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	88db      	ldrh	r3, [r3, #6]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	73fb      	strb	r3, [r7, #15]
	gc9a01a_write_cmd(GC9A01A_RASET);
 80054a4:	202b      	movs	r0, #43	@ 0x2b
 80054a6:	f7ff ff1d 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params, 4);
 80054aa:	f107 030c 	add.w	r3, r7, #12
 80054ae:	2104      	movs	r1, #4
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff ff41 	bl	8005338 <gc9a01a_write_data>

}
 80054b6:	bf00      	nop
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <gc9a01a_config2>:
	gc9a01a_write_cmd(GC9A01A_DISPON);								///< Display ON

}


void gc9a01a_config2() {
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
	//HAL_Delay(50);
	//LCD_RST = 0;
	//HAL_Delay(50);
	//LCD_RST = 1;
	//HAL_Delay(120);
	gc9a01a_write_cmd(0xFE);		///< Inter register enable 1
 80054c4:	20fe      	movs	r0, #254	@ 0xfe
 80054c6:	f7ff ff0d 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_cmd(0xEF);		///< Inter register enable 2
 80054ca:	20ef      	movs	r0, #239	@ 0xef
 80054cc:	f7ff ff0a 	bl	80052e4 <gc9a01a_write_cmd>
	params[0] = 0x03;
	gc9a01a_write_cmd(0x8D);
	gc9a01a_write_data(params,1);  //99 en
#endif

	params[0] = 0x08;
 80054d0:	2308      	movs	r3, #8
 80054d2:	703b      	strb	r3, [r7, #0]
	params[1] = 0x09;
 80054d4:	2309      	movs	r3, #9
 80054d6:	707b      	strb	r3, [r7, #1]
	params[2] = 0x14;
 80054d8:	2314      	movs	r3, #20
 80054da:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x08;
 80054dc:	2308      	movs	r3, #8
 80054de:	70fb      	strb	r3, [r7, #3]
	gc9a01a_write_cmd(0xB5);
 80054e0:	20b5      	movs	r0, #181	@ 0xb5
 80054e2:	f7ff feff 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,4); //08->09  james 20200924
 80054e6:	463b      	mov	r3, r7
 80054e8:	2104      	movs	r1, #4
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff ff24 	bl	8005338 <gc9a01a_write_data>
	//正扫

	params[0] = 0x00;
 80054f0:	2300      	movs	r3, #0
 80054f2:	703b      	strb	r3, [r7, #0]
	params[1] = 0x00;
 80054f4:	2300      	movs	r3, #0
 80054f6:	707b      	strb	r3, [r7, #1]
	gc9a01a_write_cmd(0xB6);									///<Display Function Control
 80054f8:	20b6      	movs	r0, #182	@ 0xb6
 80054fa:	f7ff fef3 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,2);  //GS  SS  0x20
 80054fe:	463b      	mov	r3, r7
 8005500:	2102      	movs	r1, #2
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff ff18 	bl	8005338 <gc9a01a_write_data>


	params[0] = 0x48;
 8005508:	2348      	movs	r3, #72	@ 0x48
 800550a:	703b      	strb	r3, [r7, #0]
	gc9a01a_write_cmd(0x36);									///< Memory Access Control
 800550c:	2036      	movs	r0, #54	@ 0x36
 800550e:	f7ff fee9 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1);
 8005512:	463b      	mov	r3, r7
 8005514:	2101      	movs	r1, #1
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff ff0e 	bl	8005338 <gc9a01a_write_data>

	params[0] = 0x05;
 800551c:	2305      	movs	r3, #5
 800551e:	703b      	strb	r3, [r7, #0]
	gc9a01a_write_cmd(0x3A);									///< COLMOD: Pixel Format Set
 8005520:	203a      	movs	r0, #58	@ 0x3a
 8005522:	f7ff fedf 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1);
 8005526:	463b      	mov	r3, r7
 8005528:	2101      	movs	r1, #1
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff ff04 	bl	8005338 <gc9a01a_write_data>
	gc9a01a_write_data(params,4);
#endif



	params[0] = 0x01;
 8005530:	2301      	movs	r3, #1
 8005532:	703b      	strb	r3, [r7, #0]
	gc9a01a_write_cmd(0xBA);
 8005534:	20ba      	movs	r0, #186	@ 0xba
 8005536:	f7ff fed5 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1); ///TE width
 800553a:	463b      	mov	r3, r7
 800553c:	2101      	movs	r1, #1
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fefa 	bl	8005338 <gc9a01a_write_data>
	params[3] = 0x04;
	gc9a01a_write_cmd(0xFF);
	gc9a01a_write_data(params,4);
#endif

	params[0] = 0x1a;
 8005544:	231a      	movs	r3, #26
 8005546:	703b      	strb	r3, [r7, #0]
	gc9a01a_write_cmd(0xC3);								///< Power Control 2
 8005548:	20c3      	movs	r0, #195	@ 0xc3
 800554a:	f7ff fecb 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1);
 800554e:	463b      	mov	r3, r7
 8005550:	2101      	movs	r1, #1
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff fef0 	bl	8005338 <gc9a01a_write_data>

	params[0] = 0x1a;
 8005558:	231a      	movs	r3, #26
 800555a:	703b      	strb	r3, [r7, #0]
	gc9a01a_write_cmd(0xC4);								///< Power Control 3
 800555c:	20c4      	movs	r0, #196	@ 0xc4
 800555e:	f7ff fec1 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1);
 8005562:	463b      	mov	r3, r7
 8005564:	2101      	movs	r1, #1
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff fee6 	bl	8005338 <gc9a01a_write_data>


	params[0] = 0x25;
 800556c:	2325      	movs	r3, #37	@ 0x25
 800556e:	703b      	strb	r3, [r7, #0]
	gc9a01a_write_cmd(0xC9);								///< Power Control 4
 8005570:	20c9      	movs	r0, #201	@ 0xc9
 8005572:	f7ff feb7 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1);
 8005576:	463b      	mov	r3, r7
 8005578:	2101      	movs	r1, #1
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff fedc 	bl	8005338 <gc9a01a_write_data>
	params[2] = 0x02;
	gc9a01a_write_cmd(0xDF);
	gc9a01a_write_data(params,3);
#endif

	params[0] = 0x45;
 8005580:	2345      	movs	r3, #69	@ 0x45
 8005582:	703b      	strb	r3, [r7, #0]
	params[1] = 0x09;
 8005584:	2309      	movs	r3, #9
 8005586:	707b      	strb	r3, [r7, #1]
	params[2] = 0x08;
 8005588:	2308      	movs	r3, #8
 800558a:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x08;
 800558c:	2308      	movs	r3, #8
 800558e:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x26;
 8005590:	2326      	movs	r3, #38	@ 0x26
 8005592:	713b      	strb	r3, [r7, #4]
	params[5] = 0x2A;
 8005594:	232a      	movs	r3, #42	@ 0x2a
 8005596:	717b      	strb	r3, [r7, #5]
	gc9a01a_write_cmd(0xF0);										///< Set gamma 1
 8005598:	20f0      	movs	r0, #240	@ 0xf0
 800559a:	f7ff fea3 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,6);
 800559e:	463b      	mov	r3, r7
 80055a0:	2106      	movs	r1, #6
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff fec8 	bl	8005338 <gc9a01a_write_data>


	params[0] = 0x43;
 80055a8:	2343      	movs	r3, #67	@ 0x43
 80055aa:	703b      	strb	r3, [r7, #0]
	params[1] = 0x70;
 80055ac:	2370      	movs	r3, #112	@ 0x70
 80055ae:	707b      	strb	r3, [r7, #1]
	params[2] = 0x72;
 80055b0:	2372      	movs	r3, #114	@ 0x72
 80055b2:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x36;
 80055b4:	2336      	movs	r3, #54	@ 0x36
 80055b6:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x37;
 80055b8:	2337      	movs	r3, #55	@ 0x37
 80055ba:	713b      	strb	r3, [r7, #4]
	params[5] = 0x6F;
 80055bc:	236f      	movs	r3, #111	@ 0x6f
 80055be:	717b      	strb	r3, [r7, #5]
	gc9a01a_write_cmd(0xF1);										///< Set gamma 2
 80055c0:	20f1      	movs	r0, #241	@ 0xf1
 80055c2:	f7ff fe8f 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,6);
 80055c6:	463b      	mov	r3, r7
 80055c8:	2106      	movs	r1, #6
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff feb4 	bl	8005338 <gc9a01a_write_data>


	params[0] = 0x45;
 80055d0:	2345      	movs	r3, #69	@ 0x45
 80055d2:	703b      	strb	r3, [r7, #0]
	params[1] = 0x09;
 80055d4:	2309      	movs	r3, #9
 80055d6:	707b      	strb	r3, [r7, #1]
	params[2] = 0x08;
 80055d8:	2308      	movs	r3, #8
 80055da:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x08;
 80055dc:	2308      	movs	r3, #8
 80055de:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x26;
 80055e0:	2326      	movs	r3, #38	@ 0x26
 80055e2:	713b      	strb	r3, [r7, #4]
	params[5] = 0x2A;
 80055e4:	232a      	movs	r3, #42	@ 0x2a
 80055e6:	717b      	strb	r3, [r7, #5]
	gc9a01a_write_cmd(0xF2);										///< Set gamma 3
 80055e8:	20f2      	movs	r0, #242	@ 0xf2
 80055ea:	f7ff fe7b 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,6);
 80055ee:	463b      	mov	r3, r7
 80055f0:	2106      	movs	r1, #6
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff fea0 	bl	8005338 <gc9a01a_write_data>


	params[0] = 0x43;
 80055f8:	2343      	movs	r3, #67	@ 0x43
 80055fa:	703b      	strb	r3, [r7, #0]
	params[1] = 0x70;
 80055fc:	2370      	movs	r3, #112	@ 0x70
 80055fe:	707b      	strb	r3, [r7, #1]
	params[2] = 0x72;
 8005600:	2372      	movs	r3, #114	@ 0x72
 8005602:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x36;
 8005604:	2336      	movs	r3, #54	@ 0x36
 8005606:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x37;
 8005608:	2337      	movs	r3, #55	@ 0x37
 800560a:	713b      	strb	r3, [r7, #4]
	params[5] = 0x6F;
 800560c:	236f      	movs	r3, #111	@ 0x6f
 800560e:	717b      	strb	r3, [r7, #5]
	gc9a01a_write_cmd(0xF3);										///< Set gamma 4
 8005610:	20f3      	movs	r0, #243	@ 0xf3
 8005612:	f7ff fe67 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,6);
 8005616:	463b      	mov	r3, r7
 8005618:	2106      	movs	r1, #6
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff fe8c 	bl	8005338 <gc9a01a_write_data>
	gc9a01a_write_cmd(0x70);
	gc9a01a_write_data(params,9);

#endif

	params[0] = 0x34;
 8005620:	2334      	movs	r3, #52	@ 0x34
 8005622:	703b      	strb	r3, [r7, #0]
	gc9a01a_write_cmd(0xE8);													///< Frame rate control
 8005624:	20e8      	movs	r0, #232	@ 0xe8
 8005626:	f7ff fe5d 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1);
 800562a:	463b      	mov	r3, r7
 800562c:	2101      	movs	r1, #1
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff fe82 	bl	8005338 <gc9a01a_write_data>
	//gc9a01a_write_data(0x08);///spi 2 data

#if 1
	//////////////////////undocumented commands - important///////////////////////

	params[0] = 0x38;
 8005634:	2338      	movs	r3, #56	@ 0x38
 8005636:	703b      	strb	r3, [r7, #0]
	params[1] = 0x0B;
 8005638:	230b      	movs	r3, #11
 800563a:	707b      	strb	r3, [r7, #1]
	params[2] = 0x6D;
 800563c:	236d      	movs	r3, #109	@ 0x6d
 800563e:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x6D;
 8005640:	236d      	movs	r3, #109	@ 0x6d
 8005642:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x39;
 8005644:	2339      	movs	r3, #57	@ 0x39
 8005646:	713b      	strb	r3, [r7, #4]
	params[5] = 0xF0;
 8005648:	23f0      	movs	r3, #240	@ 0xf0
 800564a:	717b      	strb	r3, [r7, #5]
	params[6] = 0x6D;
 800564c:	236d      	movs	r3, #109	@ 0x6d
 800564e:	71bb      	strb	r3, [r7, #6]
	params[7] = 0x6D;
 8005650:	236d      	movs	r3, #109	@ 0x6d
 8005652:	71fb      	strb	r3, [r7, #7]
	gc9a01a_write_cmd(0x60);
 8005654:	2060      	movs	r0, #96	@ 0x60
 8005656:	f7ff fe45 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,8);
 800565a:	463b      	mov	r3, r7
 800565c:	2108      	movs	r1, #8
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff fe6a 	bl	8005338 <gc9a01a_write_data>


	params[0] = 0x38;
 8005664:	2338      	movs	r3, #56	@ 0x38
 8005666:	703b      	strb	r3, [r7, #0]
	params[1] = 0xF4;
 8005668:	23f4      	movs	r3, #244	@ 0xf4
 800566a:	707b      	strb	r3, [r7, #1]
	params[2] = 0x6D;
 800566c:	236d      	movs	r3, #109	@ 0x6d
 800566e:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x6D;
 8005670:	236d      	movs	r3, #109	@ 0x6d
 8005672:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x38;
 8005674:	2338      	movs	r3, #56	@ 0x38
 8005676:	713b      	strb	r3, [r7, #4]
	params[5] = 0xF7;//20200718
 8005678:	23f7      	movs	r3, #247	@ 0xf7
 800567a:	717b      	strb	r3, [r7, #5]
	params[6] = 0xF7;
 800567c:	23f7      	movs	r3, #247	@ 0xf7
 800567e:	71bb      	strb	r3, [r7, #6]
	params[7] = 0x6D;
 8005680:	236d      	movs	r3, #109	@ 0x6d
 8005682:	71fb      	strb	r3, [r7, #7]
	params[8] = 0x6D;
 8005684:	236d      	movs	r3, #109	@ 0x6d
 8005686:	723b      	strb	r3, [r7, #8]
	gc9a01a_write_cmd(0x61);
 8005688:	2061      	movs	r0, #97	@ 0x61
 800568a:	f7ff fe2b 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,9);
 800568e:	463b      	mov	r3, r7
 8005690:	2109      	movs	r1, #9
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff fe50 	bl	8005338 <gc9a01a_write_data>



	/////////////////////////////////////

	params[0] = 0x38;
 8005698:	2338      	movs	r3, #56	@ 0x38
 800569a:	703b      	strb	r3, [r7, #0]
	params[1] = 0x0D;
 800569c:	230d      	movs	r3, #13
 800569e:	707b      	strb	r3, [r7, #1]
	params[2] = 0x71;
 80056a0:	2371      	movs	r3, #113	@ 0x71
 80056a2:	70bb      	strb	r3, [r7, #2]
	params[3] = 0xED;
 80056a4:	23ed      	movs	r3, #237	@ 0xed
 80056a6:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x70;
 80056a8:	2370      	movs	r3, #112	@ 0x70
 80056aa:	713b      	strb	r3, [r7, #4]
	params[5] = 0x70;
 80056ac:	2370      	movs	r3, #112	@ 0x70
 80056ae:	717b      	strb	r3, [r7, #5]
	params[6] = 0x38;
 80056b0:	2338      	movs	r3, #56	@ 0x38
 80056b2:	71bb      	strb	r3, [r7, #6]
	params[7] = 0x0F;
 80056b4:	230f      	movs	r3, #15
 80056b6:	71fb      	strb	r3, [r7, #7]
	params[8] = 0x71;
 80056b8:	2371      	movs	r3, #113	@ 0x71
 80056ba:	723b      	strb	r3, [r7, #8]
	params[9] = 0xEF;
 80056bc:	23ef      	movs	r3, #239	@ 0xef
 80056be:	727b      	strb	r3, [r7, #9]
	params[10] = 0x70;
 80056c0:	2370      	movs	r3, #112	@ 0x70
 80056c2:	72bb      	strb	r3, [r7, #10]
	params[11] = 0x70;
 80056c4:	2370      	movs	r3, #112	@ 0x70
 80056c6:	72fb      	strb	r3, [r7, #11]
	gc9a01a_write_cmd(0x62);
 80056c8:	2062      	movs	r0, #98	@ 0x62
 80056ca:	f7ff fe0b 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,12);
 80056ce:	463b      	mov	r3, r7
 80056d0:	210c      	movs	r1, #12
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff fe30 	bl	8005338 <gc9a01a_write_data>



	params[0] = 0x38;
 80056d8:	2338      	movs	r3, #56	@ 0x38
 80056da:	703b      	strb	r3, [r7, #0]
	params[1] = 0x11;
 80056dc:	2311      	movs	r3, #17
 80056de:	707b      	strb	r3, [r7, #1]
	params[2] = 0x71;
 80056e0:	2371      	movs	r3, #113	@ 0x71
 80056e2:	70bb      	strb	r3, [r7, #2]
	params[3] = 0xF1;
 80056e4:	23f1      	movs	r3, #241	@ 0xf1
 80056e6:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x70;
 80056e8:	2370      	movs	r3, #112	@ 0x70
 80056ea:	713b      	strb	r3, [r7, #4]
	params[5] = 0x70;
 80056ec:	2370      	movs	r3, #112	@ 0x70
 80056ee:	717b      	strb	r3, [r7, #5]
	params[6] = 0x38;
 80056f0:	2338      	movs	r3, #56	@ 0x38
 80056f2:	71bb      	strb	r3, [r7, #6]
	params[7] = 0x13;
 80056f4:	2313      	movs	r3, #19
 80056f6:	71fb      	strb	r3, [r7, #7]
	params[8] = 0x71;
 80056f8:	2371      	movs	r3, #113	@ 0x71
 80056fa:	723b      	strb	r3, [r7, #8]
	params[9] = 0xF3;
 80056fc:	23f3      	movs	r3, #243	@ 0xf3
 80056fe:	727b      	strb	r3, [r7, #9]
	params[10] = 0x70;
 8005700:	2370      	movs	r3, #112	@ 0x70
 8005702:	72bb      	strb	r3, [r7, #10]
	params[11] = 0x70;
 8005704:	2370      	movs	r3, #112	@ 0x70
 8005706:	72fb      	strb	r3, [r7, #11]
	gc9a01a_write_cmd(0x63);
 8005708:	2063      	movs	r0, #99	@ 0x63
 800570a:	f7ff fdeb 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,12);
 800570e:	463b      	mov	r3, r7
 8005710:	210c      	movs	r1, #12
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff fe10 	bl	8005338 <gc9a01a_write_data>


	///////////////////////////////////////////////////////

	params[0] = 0x28;
 8005718:	2328      	movs	r3, #40	@ 0x28
 800571a:	703b      	strb	r3, [r7, #0]
	params[1] = 0x29;
 800571c:	2329      	movs	r3, #41	@ 0x29
 800571e:	707b      	strb	r3, [r7, #1]
	params[2] = 0xF1;
 8005720:	23f1      	movs	r3, #241	@ 0xf1
 8005722:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x01;
 8005724:	2301      	movs	r3, #1
 8005726:	70fb      	strb	r3, [r7, #3]
	params[4] = 0xF1;
 8005728:	23f1      	movs	r3, #241	@ 0xf1
 800572a:	713b      	strb	r3, [r7, #4]
	params[5] = 0x00;
 800572c:	2300      	movs	r3, #0
 800572e:	717b      	strb	r3, [r7, #5]
	params[6] = 0x07;
 8005730:	2307      	movs	r3, #7
 8005732:	71bb      	strb	r3, [r7, #6]
	gc9a01a_write_cmd(0x64);
 8005734:	2064      	movs	r0, #100	@ 0x64
 8005736:	f7ff fdd5 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,7);
 800573a:	463b      	mov	r3, r7
 800573c:	2107      	movs	r1, #7
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff fdfa 	bl	8005338 <gc9a01a_write_data>


	//正扫
	params[0] = 0x3C;
 8005744:	233c      	movs	r3, #60	@ 0x3c
 8005746:	703b      	strb	r3, [r7, #0]
	params[1] = 0x00;
 8005748:	2300      	movs	r3, #0
 800574a:	707b      	strb	r3, [r7, #1]
	params[2] = 0xCD;
 800574c:	23cd      	movs	r3, #205	@ 0xcd
 800574e:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x67;
 8005750:	2367      	movs	r3, #103	@ 0x67
 8005752:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x45;
 8005754:	2345      	movs	r3, #69	@ 0x45
 8005756:	713b      	strb	r3, [r7, #4]
	params[5] = 0x45;
 8005758:	2345      	movs	r3, #69	@ 0x45
 800575a:	717b      	strb	r3, [r7, #5]
	params[6] = 0x10;
 800575c:	2310      	movs	r3, #16
 800575e:	71bb      	strb	r3, [r7, #6]
	params[7] = 0x00;
 8005760:	2300      	movs	r3, #0
 8005762:	71fb      	strb	r3, [r7, #7]
	params[8] = 0x00;
 8005764:	2300      	movs	r3, #0
 8005766:	723b      	strb	r3, [r7, #8]
	params[9] = 0x00;
 8005768:	2300      	movs	r3, #0
 800576a:	727b      	strb	r3, [r7, #9]
	gc9a01a_write_cmd(0x66);
 800576c:	2066      	movs	r0, #102	@ 0x66
 800576e:	f7ff fdb9 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,10);
 8005772:	463b      	mov	r3, r7
 8005774:	210a      	movs	r1, #10
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff fdde 	bl	8005338 <gc9a01a_write_data>


	params[0] = 0x00;
 800577c:	2300      	movs	r3, #0
 800577e:	703b      	strb	r3, [r7, #0]
	params[1] = 0x3C;
 8005780:	233c      	movs	r3, #60	@ 0x3c
 8005782:	707b      	strb	r3, [r7, #1]
	params[2] = 0x00;
 8005784:	2300      	movs	r3, #0
 8005786:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x00;
 8005788:	2300      	movs	r3, #0
 800578a:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x00;
 800578c:	2300      	movs	r3, #0
 800578e:	713b      	strb	r3, [r7, #4]
	params[5] = 0x01;
 8005790:	2301      	movs	r3, #1
 8005792:	717b      	strb	r3, [r7, #5]
	params[6] = 0x54;
 8005794:	2354      	movs	r3, #84	@ 0x54
 8005796:	71bb      	strb	r3, [r7, #6]
	params[7] = 0x10;
 8005798:	2310      	movs	r3, #16
 800579a:	71fb      	strb	r3, [r7, #7]
	params[8] = 0x32;
 800579c:	2332      	movs	r3, #50	@ 0x32
 800579e:	723b      	strb	r3, [r7, #8]
	params[9] = 0x98;
 80057a0:	2398      	movs	r3, #152	@ 0x98
 80057a2:	727b      	strb	r3, [r7, #9]
	gc9a01a_write_cmd(0x67);
 80057a4:	2067      	movs	r0, #103	@ 0x67
 80057a6:	f7ff fd9d 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,10);
 80057aa:	463b      	mov	r3, r7
 80057ac:	210a      	movs	r1, #10
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff fdc2 	bl	8005338 <gc9a01a_write_data>



	params[0] = 0x10;
 80057b4:	2310      	movs	r3, #16
 80057b6:	703b      	strb	r3, [r7, #0]
	params[1] = 0x80;
 80057b8:	2380      	movs	r3, #128	@ 0x80
 80057ba:	707b      	strb	r3, [r7, #1]
	params[2] = 0x80;
 80057bc:	2380      	movs	r3, #128	@ 0x80
 80057be:	70bb      	strb	r3, [r7, #2]
	params[3] = 0x00;
 80057c0:	2300      	movs	r3, #0
 80057c2:	70fb      	strb	r3, [r7, #3]
	params[4] = 0x00;
 80057c4:	2300      	movs	r3, #0
 80057c6:	713b      	strb	r3, [r7, #4]
	params[5] = 0x4E;
 80057c8:	234e      	movs	r3, #78	@ 0x4e
 80057ca:	717b      	strb	r3, [r7, #5]
	params[6] = 0x00;
 80057cc:	2300      	movs	r3, #0
 80057ce:	71bb      	strb	r3, [r7, #6]
	gc9a01a_write_cmd(0x74);
 80057d0:	2074      	movs	r0, #116	@ 0x74
 80057d2:	f7ff fd87 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,7);
 80057d6:	463b      	mov	r3, r7
 80057d8:	2107      	movs	r1, #7
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff fdac 	bl	8005338 <gc9a01a_write_data>


	params[0] = 0x3e;
 80057e0:	233e      	movs	r3, #62	@ 0x3e
 80057e2:	703b      	strb	r3, [r7, #0]
	params[1] = 0x07;
 80057e4:	2307      	movs	r3, #7
 80057e6:	707b      	strb	r3, [r7, #1]
	gc9a01a_write_cmd(0x98);
 80057e8:	2098      	movs	r0, #152	@ 0x98
 80057ea:	f7ff fd7b 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,2);
 80057ee:	463b      	mov	r3, r7
 80057f0:	2102      	movs	r1, #2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff fda0 	bl	8005338 <gc9a01a_write_data>

#endif
	params[0] = 0x3e;
 80057f8:	233e      	movs	r3, #62	@ 0x3e
 80057fa:	703b      	strb	r3, [r7, #0]
	params[1] = 0x07;
 80057fc:	2307      	movs	r3, #7
 80057fe:	707b      	strb	r3, [r7, #1]
	gc9a01a_write_cmd(0x99);	//bvee 2x
 8005800:	2099      	movs	r0, #153	@ 0x99
 8005802:	f7ff fd6f 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,2);
 8005806:	463b      	mov	r3, r7
 8005808:	2102      	movs	r1, #2
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff fd94 	bl	8005338 <gc9a01a_write_data>


	params[0] = 0x00;
 8005810:	2300      	movs	r3, #0
 8005812:	703b      	strb	r3, [r7, #0]
	gc9a01a_write_cmd(0x35);
 8005814:	2035      	movs	r0, #53	@ 0x35
 8005816:	f7ff fd65 	bl	80052e4 <gc9a01a_write_cmd>
	gc9a01a_write_data(params,1);
 800581a:	463b      	mov	r3, r7
 800581c:	2101      	movs	r1, #1
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff fd8a 	bl	8005338 <gc9a01a_write_data>

	gc9a01a_write_cmd(0x21);
 8005824:	2021      	movs	r0, #33	@ 0x21
 8005826:	f7ff fd5d 	bl	80052e4 <gc9a01a_write_cmd>
	HAL_Delay(120);
 800582a:	2078      	movs	r0, #120	@ 0x78
 800582c:	f7fc fd40 	bl	80022b0 <HAL_Delay>
	//--------end gamma setting--------------//

	gc9a01a_write_cmd(0x11);
 8005830:	2011      	movs	r0, #17
 8005832:	f7ff fd57 	bl	80052e4 <gc9a01a_write_cmd>
	HAL_Delay(120);
 8005836:	2078      	movs	r0, #120	@ 0x78
 8005838:	f7fc fd3a 	bl	80022b0 <HAL_Delay>
	gc9a01a_write_cmd(0x29);
 800583c:	2029      	movs	r0, #41	@ 0x29
 800583e:	f7ff fd51 	bl	80052e4 <gc9a01a_write_cmd>



#if 1
	gc9a01a_write_cmd(0x2C);
 8005842:	202c      	movs	r0, #44	@ 0x2c
 8005844:	f7ff fd4e 	bl	80052e4 <gc9a01a_write_cmd>
#endif
}
 8005848:	bf00      	nop
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <gc9a01a_hw_reset>:

void gc9a01a_sw_reset() {

}

void gc9a01a_hw_reset() {
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
	LCD_RESX_HIGH();
 8005854:	2201      	movs	r2, #1
 8005856:	2108      	movs	r1, #8
 8005858:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800585c:	f7fc ffc4 	bl	80027e8 <HAL_GPIO_WritePin>
	HAL_Delay(LCD_HW_RESET_DELAY_MS);
 8005860:	2032      	movs	r0, #50	@ 0x32
 8005862:	f7fc fd25 	bl	80022b0 <HAL_Delay>
	LCD_RESX_LOW();
 8005866:	2200      	movs	r2, #0
 8005868:	2108      	movs	r1, #8
 800586a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800586e:	f7fc ffbb 	bl	80027e8 <HAL_GPIO_WritePin>
	HAL_Delay(LCD_HW_RESET_DELAY_MS);
 8005872:	2032      	movs	r0, #50	@ 0x32
 8005874:	f7fc fd1c 	bl	80022b0 <HAL_Delay>
	LCD_RESX_HIGH();
 8005878:	2201      	movs	r2, #1
 800587a:	2108      	movs	r1, #8
 800587c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005880:	f7fc ffb2 	bl	80027e8 <HAL_GPIO_WritePin>
	HAL_Delay(LCD_HW_RESET_DELAY_MS);
 8005884:	2032      	movs	r0, #50	@ 0x32
 8005886:	f7fc fd13 	bl	80022b0 <HAL_Delay>
}
 800588a:	bf00      	nop
 800588c:	bd80      	pop	{r7, pc}

0800588e <bsp_lcd_fill_rect>:
 * x_width : Width of the rectangle in number of pixels ( 1 <= x_width <= BSP_FB_WIDTH )
 * y_start : Vertical start position of the rectangle ( 0 <= y_start < BSP_FB_HEIGHT)
 * y_height : Height of the rectangle in number of pixels ( 1 <= y_height <= BSP_FB_HEIGHT )
 */
void bsp_lcd_fill_rect(bsp_lcd_t *hlcd, uint32_t rgb888, uint32_t x_start, uint32_t x_width,uint32_t y_start,uint32_t y_height)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b08e      	sub	sp, #56	@ 0x38
 8005892:	af02      	add	r7, sp, #8
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	603b      	str	r3, [r7, #0]

	uint32_t total_bytes_to_write = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	61fb      	str	r3, [r7, #28]
	uint32_t bytes_sent_so_far = 0;
 80058a0:	2300      	movs	r3, #0
 80058a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t remaining_bytes = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t npix;
	uint32_t pixels_sent = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	623b      	str	r3, [r7, #32]
	uint32_t x1,y1;
	uint32_t pixel_per_line = x_width;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	61bb      	str	r3, [r7, #24]

	if((x_start+x_width) > BSP_LCD_ACTIVE_WIDTH) return;
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	4413      	add	r3, r2
 80058b6:	2bf0      	cmp	r3, #240	@ 0xf0
 80058b8:	d85a      	bhi.n	8005970 <bsp_lcd_fill_rect+0xe2>
	if((y_start+y_height) > BSP_LCD_ACTIVE_HEIGHT) return;
 80058ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058be:	4413      	add	r3, r2
 80058c0:	2bf0      	cmp	r3, #240	@ 0xf0
 80058c2:	d857      	bhi.n	8005974 <bsp_lcd_fill_rect+0xe6>

	//1. calculate total number of bytes written in to DB
	total_bytes_to_write = get_total_bytes(hlcd,x_width,y_height);
 80058c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 fabb 	bl	8005e44 <get_total_bytes>
 80058ce:	61f8      	str	r0, [r7, #28]
	remaining_bytes = total_bytes_to_write;
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	while(remaining_bytes){
 80058d4:	e048      	b.n	8005968 <bsp_lcd_fill_rect+0xda>
		x1 = x_start+(pixels_sent % pixel_per_line);
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	fbb3 f2f2 	udiv	r2, r3, r2
 80058de:	69b9      	ldr	r1, [r7, #24]
 80058e0:	fb01 f202 	mul.w	r2, r1, r2
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	4413      	add	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]
		y1 = y_start+(pixels_sent / pixel_per_line);
 80058ec:	6a3a      	ldr	r2, [r7, #32]
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058f6:	4413      	add	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]

		make_area(&hlcd->area,x1,x_width,y1,y_height);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f103 0018 	add.w	r0, r3, #24
 8005900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	6979      	ldr	r1, [r7, #20]
 800590a:	f000 fab6 	bl	8005e7a <make_area>
		//make_area(lcd_area_t *area,uint32_t x_start, uint32_t x_width,uint32_t y_start,uint32_t y_height)

		if(x1 != x_start){
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	429a      	cmp	r2, r3
 8005914:	d006      	beq.n	8005924 <bsp_lcd_fill_rect+0x96>
			npix = x_start+x_width - x1;
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	441a      	add	r2, r3
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	627b      	str	r3, [r7, #36]	@ 0x24
 8005922:	e006      	b.n	8005932 <bsp_lcd_fill_rect+0xa4>
		}else{
			npix = bytes_to_pixels(remaining_bytes,hlcd->pixel_format);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	4619      	mov	r1, r3
 800592a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800592c:	f000 fae4 	bl	8005ef8 <bytes_to_pixels>
 8005930:	6278      	str	r0, [r7, #36]	@ 0x24
		}

		bytes_sent_so_far  +=  copy_to_draw_buffer(hlcd,pixels_to_bytes(npix,hlcd->pixel_format),rgb888);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	785b      	ldrb	r3, [r3, #1]
 8005936:	4619      	mov	r1, r3
 8005938:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800593a:	f000 faeb 	bl	8005f14 <pixels_to_bytes>
 800593e:	4603      	mov	r3, r0
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	4619      	mov	r1, r3
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 faf3 	bl	8005f30 <copy_to_draw_buffer>
 800594a:	4602      	mov	r2, r0
 800594c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594e:	4413      	add	r3, r2
 8005950:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pixels_sent = bytes_to_pixels(bytes_sent_so_far,hlcd->pixel_format);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	4619      	mov	r1, r3
 8005958:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800595a:	f000 facd 	bl	8005ef8 <bytes_to_pixels>
 800595e:	6238      	str	r0, [r7, #32]
		remaining_bytes = total_bytes_to_write - bytes_sent_so_far;
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	62bb      	str	r3, [r7, #40]	@ 0x28
	while(remaining_bytes){
 8005968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1b3      	bne.n	80058d6 <bsp_lcd_fill_rect+0x48>
 800596e:	e002      	b.n	8005976 <bsp_lcd_fill_rect+0xe8>
	if((x_start+x_width) > BSP_LCD_ACTIVE_WIDTH) return;
 8005970:	bf00      	nop
 8005972:	e000      	b.n	8005976 <bsp_lcd_fill_rect+0xe8>
	if((y_start+y_height) > BSP_LCD_ACTIVE_HEIGHT) return;
 8005974:	bf00      	nop
		}
}
 8005976:	3730      	adds	r7, #48	@ 0x30
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <bsp_lcd_fill_image>:
{
	bsp_lcd_fill_rect(hlcd, rgb888,0,(BSP_LCD_ACTIVE_WIDTH),0,(BSP_LCD_ACTIVE_HEIGHT));
}
////////////////////////////////////////////////////////////////////////////////////////////////////////
void bsp_lcd_fill_image(bsp_lcd_t *hlcd, uint16_t *image_data, uint16_t x_start, uint16_t x_width,uint16_t y_start,uint16_t y_height)
{
 800597c:	b590      	push	{r4, r7, lr}
 800597e:	b08b      	sub	sp, #44	@ 0x2c
 8005980:	af02      	add	r7, sp, #8
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	4611      	mov	r1, r2
 8005988:	461a      	mov	r2, r3
 800598a:	460b      	mov	r3, r1
 800598c:	80fb      	strh	r3, [r7, #6]
 800598e:	4613      	mov	r3, r2
 8005990:	80bb      	strh	r3, [r7, #4]
	uint16_t total_bytes_to_write = 0;
 8005992:	2300      	movs	r3, #0
 8005994:	82fb      	strh	r3, [r7, #22]
	uint16_t bytes_sent_so_far = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	83fb      	strh	r3, [r7, #30]
	uint16_t remaining_bytes = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	83bb      	strh	r3, [r7, #28]
	uint16_t npix;
	uint16_t pixels_sent = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	833b      	strh	r3, [r7, #24]
	uint16_t x1,y1;
	uint16_t pixel_per_line = x_width;
 80059a2:	88bb      	ldrh	r3, [r7, #4]
 80059a4:	82bb      	strh	r3, [r7, #20]

	if((x_start+x_width) > BSP_LCD_ACTIVE_WIDTH) return;
 80059a6:	88fa      	ldrh	r2, [r7, #6]
 80059a8:	88bb      	ldrh	r3, [r7, #4]
 80059aa:	4413      	add	r3, r2
 80059ac:	2bf0      	cmp	r3, #240	@ 0xf0
 80059ae:	dc66      	bgt.n	8005a7e <bsp_lcd_fill_image+0x102>
	if((y_start+y_height) > BSP_LCD_ACTIVE_HEIGHT) return;
 80059b0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80059b2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80059b4:	4413      	add	r3, r2
 80059b6:	2bf0      	cmp	r3, #240	@ 0xf0
 80059b8:	dc63      	bgt.n	8005a82 <bsp_lcd_fill_image+0x106>

	//1. calculate total number of bytes written in to DB
	total_bytes_to_write = get_total_bytes(hlcd,x_width,y_height);
 80059ba:	88bb      	ldrh	r3, [r7, #4]
 80059bc:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80059be:	4619      	mov	r1, r3
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 fa3f 	bl	8005e44 <get_total_bytes>
 80059c6:	4603      	mov	r3, r0
 80059c8:	82fb      	strh	r3, [r7, #22]
	remaining_bytes = total_bytes_to_write;
 80059ca:	8afb      	ldrh	r3, [r7, #22]
 80059cc:	83bb      	strh	r3, [r7, #28]
	while(remaining_bytes){
 80059ce:	e052      	b.n	8005a76 <bsp_lcd_fill_image+0xfa>
		x1 = x_start+(pixels_sent % pixel_per_line);
 80059d0:	8b3b      	ldrh	r3, [r7, #24]
 80059d2:	8aba      	ldrh	r2, [r7, #20]
 80059d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80059d8:	fb01 f202 	mul.w	r2, r1, r2
 80059dc:	1a9b      	subs	r3, r3, r2
 80059de:	b29a      	uxth	r2, r3
 80059e0:	88fb      	ldrh	r3, [r7, #6]
 80059e2:	4413      	add	r3, r2
 80059e4:	827b      	strh	r3, [r7, #18]
		y1 = y_start+(pixels_sent / pixel_per_line);
 80059e6:	8b3a      	ldrh	r2, [r7, #24]
 80059e8:	8abb      	ldrh	r3, [r7, #20]
 80059ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80059f2:	4413      	add	r3, r2
 80059f4:	823b      	strh	r3, [r7, #16]

		make_area(&hlcd->area,x1,x_width,y1,y_height);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f103 0018 	add.w	r0, r3, #24
 80059fc:	8a79      	ldrh	r1, [r7, #18]
 80059fe:	88ba      	ldrh	r2, [r7, #4]
 8005a00:	8a3c      	ldrh	r4, [r7, #16]
 8005a02:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	4623      	mov	r3, r4
 8005a08:	f000 fa37 	bl	8005e7a <make_area>
		//make_area(lcd_area_t *area,uint32_t x_start, uint32_t x_width,uint32_t y_start,uint32_t y_height)

		if(x1 != x_start){
 8005a0c:	8a7a      	ldrh	r2, [r7, #18]
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d007      	beq.n	8005a24 <bsp_lcd_fill_image+0xa8>
			npix = x_start+x_width - x1;
 8005a14:	88fa      	ldrh	r2, [r7, #6]
 8005a16:	88bb      	ldrh	r3, [r7, #4]
 8005a18:	4413      	add	r3, r2
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	8a7b      	ldrh	r3, [r7, #18]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	837b      	strh	r3, [r7, #26]
 8005a22:	e008      	b.n	8005a36 <bsp_lcd_fill_image+0xba>
		}else{
			npix = bytes_to_pixels(remaining_bytes,hlcd->pixel_format);
 8005a24:	8bba      	ldrh	r2, [r7, #28]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	785b      	ldrb	r3, [r3, #1]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	f000 fa63 	bl	8005ef8 <bytes_to_pixels>
 8005a32:	4603      	mov	r3, r0
 8005a34:	837b      	strh	r3, [r7, #26]
		}

		bytes_sent_so_far  +=  copy_to_draw_buffer2(hlcd,pixels_to_bytes(npix,hlcd->pixel_format),image_data);
 8005a36:	8b7a      	ldrh	r2, [r7, #26]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	785b      	ldrb	r3, [r3, #1]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f000 fa68 	bl	8005f14 <pixels_to_bytes>
 8005a44:	4603      	mov	r3, r0
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f81c 	bl	8005a8a <copy_to_draw_buffer2>
 8005a52:	4603      	mov	r3, r0
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	8bfb      	ldrh	r3, [r7, #30]
 8005a58:	4413      	add	r3, r2
 8005a5a:	83fb      	strh	r3, [r7, #30]

		pixels_sent = bytes_to_pixels(bytes_sent_so_far,hlcd->pixel_format);
 8005a5c:	8bfa      	ldrh	r2, [r7, #30]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	785b      	ldrb	r3, [r3, #1]
 8005a62:	4619      	mov	r1, r3
 8005a64:	4610      	mov	r0, r2
 8005a66:	f000 fa47 	bl	8005ef8 <bytes_to_pixels>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	833b      	strh	r3, [r7, #24]
		remaining_bytes = total_bytes_to_write - bytes_sent_so_far;
 8005a6e:	8afa      	ldrh	r2, [r7, #22]
 8005a70:	8bfb      	ldrh	r3, [r7, #30]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	83bb      	strh	r3, [r7, #28]
	while(remaining_bytes){
 8005a76:	8bbb      	ldrh	r3, [r7, #28]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1a9      	bne.n	80059d0 <bsp_lcd_fill_image+0x54>
 8005a7c:	e002      	b.n	8005a84 <bsp_lcd_fill_image+0x108>
	if((x_start+x_width) > BSP_LCD_ACTIVE_WIDTH) return;
 8005a7e:	bf00      	nop
 8005a80:	e000      	b.n	8005a84 <bsp_lcd_fill_image+0x108>
	if((y_start+y_height) > BSP_LCD_ACTIVE_HEIGHT) return;
 8005a82:	bf00      	nop
		}
}
 8005a84:	3724      	adds	r7, #36	@ 0x24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd90      	pop	{r4, r7, pc}

08005a8a <copy_to_draw_buffer2>:

static uint32_t copy_to_draw_buffer2( bsp_lcd_t *hlcd,uint16_t nbytes,uint16_t *image_data)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b088      	sub	sp, #32
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	460b      	mov	r3, r1
 8005a94:	607a      	str	r2, [r7, #4]
 8005a96:	817b      	strh	r3, [r7, #10]
	uint16_t *fb_ptr = NULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61fb      	str	r3, [r7, #28]
	uint32_t npixels;
	hlcd->buff_to_draw = get_buff(hlcd);
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 faa5 	bl	8005fec <get_buff>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	611a      	str	r2, [r3, #16]
	fb_ptr = (uint16_t*)hlcd->buff_to_draw;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	61fb      	str	r3, [r7, #28]
	nbytes =  ((nbytes > hlcd->db_size)?hlcd->db_size:nbytes);
 8005aae:	897a      	ldrh	r2, [r7, #10]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	bf28      	it	cs
 8005ab8:	4613      	movcs	r3, r2
 8005aba:	817b      	strh	r3, [r7, #10]
	npixels= bytes_to_pixels(nbytes,hlcd->pixel_format);
 8005abc:	897a      	ldrh	r2, [r7, #10]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	785b      	ldrb	r3, [r3, #1]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	f000 fa17 	bl	8005ef8 <bytes_to_pixels>
 8005aca:	6178      	str	r0, [r7, #20]
	if(hlcd->buff_to_draw != NULL){
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d035      	beq.n	8005b40 <copy_to_draw_buffer2+0xb6>
		for(uint16_t i = 0 ; i < npixels ;i++){
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	837b      	strh	r3, [r7, #26]
 8005ad8:	e00c      	b.n	8005af4 <copy_to_draw_buffer2+0x6a>
			//*fb_ptr = convert_rgb888_to_rgb565(image_data[i]); //image_data[i]
			*fb_ptr = image_data[i];
 8005ada:	8b7b      	ldrh	r3, [r7, #26]
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	881a      	ldrh	r2, [r3, #0]
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	801a      	strh	r2, [r3, #0]
			fb_ptr++;
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	3302      	adds	r3, #2
 8005aec:	61fb      	str	r3, [r7, #28]
		for(uint16_t i = 0 ; i < npixels ;i++){
 8005aee:	8b7b      	ldrh	r3, [r7, #26]
 8005af0:	3301      	adds	r3, #1
 8005af2:	837b      	strh	r3, [r7, #26]
 8005af4:	8b7b      	ldrh	r3, [r7, #26]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d8ee      	bhi.n	8005ada <copy_to_draw_buffer2+0x50>
		}
		hlcd->write_length = pixels_to_bytes(npixels,hlcd->pixel_format);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	785b      	ldrb	r3, [r3, #1]
 8005b00:	4619      	mov	r1, r3
 8005b02:	6978      	ldr	r0, [r7, #20]
 8005b04:	f000 fa06 	bl	8005f14 <pixels_to_bytes>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	60da      	str	r2, [r3, #12]
		while(!is_lcd_write_allowed(hlcd));
 8005b0e:	bf00      	nop
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 fae4 	bl	80060de <is_lcd_write_allowed>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0f9      	beq.n	8005b10 <copy_to_draw_buffer2+0x86>
		hlcd->buff_to_flush = hlcd->buff_to_draw;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	615a      	str	r2, [r3, #20]
		hlcd->buff_to_draw = NULL;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	611a      	str	r2, [r3, #16]
		lcd_flush(hlcd);
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 fabd 	bl	80060aa <lcd_flush>
		return pixels_to_bytes(npixels,hlcd->pixel_format);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	785b      	ldrb	r3, [r3, #1]
 8005b34:	4619      	mov	r1, r3
 8005b36:	6978      	ldr	r0, [r7, #20]
 8005b38:	f000 f9ec 	bl	8005f14 <pixels_to_bytes>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	e000      	b.n	8005b42 <copy_to_draw_buffer2+0xb8>
	}

	return 0;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3720      	adds	r7, #32
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <GC9A01A_SetAddressWindow>:


static void GC9A01A_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8005b4a:	b590      	push	{r4, r7, lr}
 8005b4c:	b085      	sub	sp, #20
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	4604      	mov	r4, r0
 8005b52:	4608      	mov	r0, r1
 8005b54:	4611      	mov	r1, r2
 8005b56:	461a      	mov	r2, r3
 8005b58:	4623      	mov	r3, r4
 8005b5a:	80fb      	strh	r3, [r7, #6]
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	80bb      	strh	r3, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	807b      	strh	r3, [r7, #2]
 8005b64:	4613      	mov	r3, r2
 8005b66:	803b      	strh	r3, [r7, #0]
	// column address set
	gc9a01a_write_cmd(0x2A); // CASET
 8005b68:	202a      	movs	r0, #42	@ 0x2a
 8005b6a:	f7ff fbbb 	bl	80052e4 <gc9a01a_write_cmd>
	{
		uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	0a1b      	lsrs	r3, r3, #8
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	733b      	strb	r3, [r7, #12]
 8005b78:	88fb      	ldrh	r3, [r7, #6]
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	737b      	strb	r3, [r7, #13]
 8005b7e:	887b      	ldrh	r3, [r7, #2]
 8005b80:	0a1b      	lsrs	r3, r3, #8
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	73bb      	strb	r3, [r7, #14]
 8005b88:	887b      	ldrh	r3, [r7, #2]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	73fb      	strb	r3, [r7, #15]
		gc9a01a_write_data(data, sizeof(data));
 8005b8e:	f107 030c 	add.w	r3, r7, #12
 8005b92:	2104      	movs	r1, #4
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff fbcf 	bl	8005338 <gc9a01a_write_data>
	}

	// row address set
	gc9a01a_write_cmd(0x2B); // RASET
 8005b9a:	202b      	movs	r0, #43	@ 0x2b
 8005b9c:	f7ff fba2 	bl	80052e4 <gc9a01a_write_cmd>
	{
		uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8005ba0:	88bb      	ldrh	r3, [r7, #4]
 8005ba2:	0a1b      	lsrs	r3, r3, #8
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	723b      	strb	r3, [r7, #8]
 8005baa:	88bb      	ldrh	r3, [r7, #4]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	727b      	strb	r3, [r7, #9]
 8005bb0:	883b      	ldrh	r3, [r7, #0]
 8005bb2:	0a1b      	lsrs	r3, r3, #8
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	72bb      	strb	r3, [r7, #10]
 8005bba:	883b      	ldrh	r3, [r7, #0]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	72fb      	strb	r3, [r7, #11]
		gc9a01a_write_data(data, sizeof(data));
 8005bc0:	f107 0308 	add.w	r3, r7, #8
 8005bc4:	2104      	movs	r1, #4
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff fbb6 	bl	8005338 <gc9a01a_write_data>
	}

	// write to RAM
	gc9a01a_write_cmd(0x2C); // RAMWR
 8005bcc:	202c      	movs	r0, #44	@ 0x2c
 8005bce:	f7ff fb89 	bl	80052e4 <gc9a01a_write_cmd>
}
 8005bd2:	bf00      	nop
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd90      	pop	{r4, r7, pc}

08005bda <GC9A01A_WriteChar>:
static void GC9A01A_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8005bda:	b082      	sub	sp, #8
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005be4:	4603      	mov	r3, r0
 8005be6:	80fb      	strh	r3, [r7, #6]
 8005be8:	460b      	mov	r3, r1
 8005bea:	80bb      	strh	r3, [r7, #4]
 8005bec:	4613      	mov	r3, r2
 8005bee:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	GC9A01A_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8005bf0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	88fb      	ldrh	r3, [r7, #6]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005c04:	4619      	mov	r1, r3
 8005c06:	88bb      	ldrh	r3, [r7, #4]
 8005c08:	440b      	add	r3, r1
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	88b9      	ldrh	r1, [r7, #4]
 8005c12:	88f8      	ldrh	r0, [r7, #6]
 8005c14:	f7ff ff99 	bl	8005b4a <GC9A01A_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61fb      	str	r3, [r7, #28]
 8005c1c:	e041      	b.n	8005ca2 <GC9A01A_WriteChar+0xc8>
		b = font.data[(ch - 32) * font.height + i];
 8005c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c20:	78fb      	ldrb	r3, [r7, #3]
 8005c22:	3b20      	subs	r3, #32
 8005c24:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8005c28:	fb01 f303 	mul.w	r3, r1, r3
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	440b      	add	r3, r1
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	4413      	add	r3, r2
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	e027      	b.n	8005c90 <GC9A01A_WriteChar+0xb6>
			if((b << j) & 0x8000)  {
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00e      	beq.n	8005c6e <GC9A01A_WriteChar+0x94>
					uint8_t data[] = { color >> 8, color & 0xFF };
 8005c50:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005c52:	0a1b      	lsrs	r3, r3, #8
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	743b      	strb	r3, [r7, #16]
 8005c5a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	747b      	strb	r3, [r7, #17]
					gc9a01a_write_data(data, sizeof(data));
 8005c60:	f107 0310 	add.w	r3, r7, #16
 8005c64:	2102      	movs	r1, #2
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fb66 	bl	8005338 <gc9a01a_write_data>
 8005c6c:	e00d      	b.n	8005c8a <GC9A01A_WriteChar+0xb0>
			} else {
					uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8005c6e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005c70:	0a1b      	lsrs	r3, r3, #8
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	733b      	strb	r3, [r7, #12]
 8005c78:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	737b      	strb	r3, [r7, #13]
					gc9a01a_write_data(data, sizeof(data));
 8005c7e:	f107 030c 	add.w	r3, r7, #12
 8005c82:	2102      	movs	r1, #2
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff fb57 	bl	8005338 <gc9a01a_write_data>
		for(j = 0; j < font.width; j++) {
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	61bb      	str	r3, [r7, #24]
 8005c90:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c94:	461a      	mov	r2, r3
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d3d1      	bcc.n	8005c40 <GC9A01A_WriteChar+0x66>
	for(i = 0; i < font.height; i++) {
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	61fb      	str	r3, [r7, #28]
 8005ca2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d3b7      	bcc.n	8005c1e <GC9A01A_WriteChar+0x44>
			}
		}
	}
}
 8005cae:	bf00      	nop
 8005cb0:	bf00      	nop
 8005cb2:	3720      	adds	r7, #32
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cba:	b002      	add	sp, #8
 8005cbc:	4770      	bx	lr

08005cbe <GC9A01A_WriteString>:

void GC9A01A_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af04      	add	r7, sp, #16
 8005cc6:	603a      	str	r2, [r7, #0]
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	4603      	mov	r3, r0
 8005ccc:	80fb      	strh	r3, [r7, #6]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	80bb      	strh	r3, [r7, #4]
	LCD_CSX_LOW();
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2110      	movs	r1, #16
 8005cd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005cda:	f7fc fd85 	bl	80027e8 <HAL_GPIO_WritePin>

	while(*str) {
 8005cde:	e02d      	b.n	8005d3c <GC9A01A_WriteString+0x7e>
		if(x + font.width >= BSP_LCD_ACTIVE_WIDTH) {
 8005ce0:	88fb      	ldrh	r3, [r7, #6]
 8005ce2:	7d3a      	ldrb	r2, [r7, #20]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	2bef      	cmp	r3, #239	@ 0xef
 8005ce8:	dd13      	ble.n	8005d12 <GC9A01A_WriteString+0x54>
			x = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8005cee:	7d7b      	ldrb	r3, [r7, #21]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	88bb      	ldrh	r3, [r7, #4]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= BSP_LCD_ACTIVE_HEIGHT) {
 8005cf8:	88bb      	ldrh	r3, [r7, #4]
 8005cfa:	7d7a      	ldrb	r2, [r7, #21]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	2bef      	cmp	r3, #239	@ 0xef
 8005d00:	dc21      	bgt.n	8005d46 <GC9A01A_WriteString+0x88>
				break;
			}

			if(*str == ' ') {
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d103      	bne.n	8005d12 <GC9A01A_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	603b      	str	r3, [r7, #0]
				continue;
 8005d10:	e014      	b.n	8005d3c <GC9A01A_WriteString+0x7e>
			}
		}
		GC9A01A_WriteChar(x, y, *str, font, color, bgcolor);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781a      	ldrb	r2, [r3, #0]
 8005d16:	88b9      	ldrh	r1, [r7, #4]
 8005d18:	88f8      	ldrh	r0, [r7, #6]
 8005d1a:	8c3b      	ldrh	r3, [r7, #32]
 8005d1c:	9302      	str	r3, [sp, #8]
 8005d1e:	8bbb      	ldrh	r3, [r7, #28]
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f7ff ff57 	bl	8005bda <GC9A01A_WriteChar>
		x += font.width;
 8005d2c:	7d3b      	ldrb	r3, [r7, #20]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	88fb      	ldrh	r3, [r7, #6]
 8005d32:	4413      	add	r3, r2
 8005d34:	80fb      	strh	r3, [r7, #6]
		str++;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	603b      	str	r3, [r7, #0]
	while(*str) {
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1cd      	bne.n	8005ce0 <GC9A01A_WriteString+0x22>
 8005d44:	e000      	b.n	8005d48 <GC9A01A_WriteString+0x8a>
				break;
 8005d46:	bf00      	nop
	}
	LCD_CSX_HIGH();
 8005d48:	2201      	movs	r2, #1
 8005d4a:	2110      	movs	r1, #16
 8005d4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005d50:	f7fc fd4a 	bl	80027e8 <HAL_GPIO_WritePin>
}
 8005d54:	bf00      	nop
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d5e:	b002      	add	sp, #8
 8005d60:	4770      	bx	lr

08005d62 <bsp_lcd_send_cmd_mem_write>:

///////////////////////////////////////////////////////////////////////////////////////////////////


void bsp_lcd_send_cmd_mem_write(void)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	af00      	add	r7, sp, #0
	gc9a01a_write_cmd(GC9A01A_RAMWR);
 8005d66:	202c      	movs	r0, #44	@ 0x2c
 8005d68:	f7ff fabc 	bl	80052e4 <gc9a01a_write_cmd>
}
 8005d6c:	bf00      	nop
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <bsp_lcd_write>:


void bsp_lcd_write(uint8_t *buffer, uint32_t nbytes)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]

	uint16_t *buff_ptr;

	__disable_spi();
 8005d7a:	4b31      	ldr	r3, [pc, #196]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1f9      	bne.n	8005d7a <bsp_lcd_write+0xa>
 8005d86:	4b2e      	ldr	r3, [pc, #184]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a2d      	ldr	r2, [pc, #180]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d90:	6013      	str	r3, [r2, #0]
	__spi_set_dff_16bit();
 8005d92:	4b2b      	ldr	r3, [pc, #172]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	4a2a      	ldr	r2, [pc, #168]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005d98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005d9c:	6053      	str	r3, [r2, #4]
 8005d9e:	4b28      	ldr	r3, [pc, #160]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	4a27      	ldr	r2, [pc, #156]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005da4:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8005da8:	6053      	str	r3, [r2, #4]
	__enable_spi();
 8005daa:	4b25      	ldr	r3, [pc, #148]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a24      	ldr	r2, [pc, #144]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005db0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005db4:	6013      	str	r3, [r2, #0]

	LCD_CSX_LOW();
 8005db6:	2200      	movs	r2, #0
 8005db8:	2110      	movs	r1, #16
 8005dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005dbe:	f7fc fd13 	bl	80027e8 <HAL_GPIO_WritePin>

	buff_ptr = (uint16_t*)buffer;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60fb      	str	r3, [r7, #12]
	while(nbytes){
 8005dc6:	e010      	b.n	8005dea <bsp_lcd_write+0x7a>
		while(!REG_READ_BIT(SPI->SR,SPI_SR_TXE_Pos));
 8005dc8:	bf00      	nop
 8005dca:	4b1d      	ldr	r3, [pc, #116]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f9      	beq.n	8005dca <bsp_lcd_write+0x5a>
		REG_WRITE(SPI->DR,*buff_ptr);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	881a      	ldrh	r2, [r3, #0]
 8005dda:	4b19      	ldr	r3, [pc, #100]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005ddc:	60da      	str	r2, [r3, #12]
		++buff_ptr;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	3302      	adds	r3, #2
 8005de2:	60fb      	str	r3, [r7, #12]
		nbytes -= 2;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	3b02      	subs	r3, #2
 8005de8:	603b      	str	r3, [r7, #0]
	while(nbytes){
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1eb      	bne.n	8005dc8 <bsp_lcd_write+0x58>
	}

	__disable_spi();
 8005df0:	4b13      	ldr	r3, [pc, #76]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1f9      	bne.n	8005df0 <bsp_lcd_write+0x80>
 8005dfc:	4b10      	ldr	r3, [pc, #64]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a0f      	ldr	r2, [pc, #60]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005e02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e06:	6013      	str	r3, [r2, #0]
	LCD_CSX_HIGH();
 8005e08:	2201      	movs	r2, #1
 8005e0a:	2110      	movs	r1, #16
 8005e0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005e10:	f7fc fcea 	bl	80027e8 <HAL_GPIO_WritePin>
	__spi_set_dff_8bit();
 8005e14:	4b0a      	ldr	r3, [pc, #40]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	4a09      	ldr	r2, [pc, #36]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005e1a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005e1e:	6053      	str	r3, [r2, #4]
 8005e20:	4b07      	ldr	r3, [pc, #28]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	4a06      	ldr	r2, [pc, #24]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005e26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005e2a:	6053      	str	r3, [r2, #4]
	__enable_spi();
 8005e2c:	4b04      	ldr	r3, [pc, #16]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a03      	ldr	r2, [pc, #12]	@ (8005e40 <bsp_lcd_write+0xd0>)
 8005e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e36:	6013      	str	r3, [r2, #0]
}
 8005e38:	bf00      	nop
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40013000 	.word	0x40013000

08005e44 <get_total_bytes>:

static uint32_t get_total_bytes(bsp_lcd_t *hlcd,uint32_t w , uint32_t h)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
	uint8_t bytes_per_pixel = 2;
 8005e50:	2302      	movs	r3, #2
 8005e52:	75fb      	strb	r3, [r7, #23]
	if(hlcd->pixel_format == BSP_LCD_PIXEL_FMT_RGB565){
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d101      	bne.n	8005e60 <get_total_bytes+0x1c>
		bytes_per_pixel = 2;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	75fb      	strb	r3, [r7, #23]
	}
	return (w * h * bytes_per_pixel);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	fb02 f303 	mul.w	r3, r2, r3
 8005e68:	7dfa      	ldrb	r2, [r7, #23]
 8005e6a:	fb02 f303 	mul.w	r3, r2, r3
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <make_area>:

static void make_area(lcd_area_t *area,uint32_t x_start, uint32_t x_width,uint32_t y_start,uint32_t y_height){
 8005e7a:	b480      	push	{r7}
 8005e7c:	b087      	sub	sp, #28
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	603b      	str	r3, [r7, #0]

	uint16_t lcd_total_width,lcd_total_height;

	lcd_total_width =  BSP_LCD_ACTIVE_WIDTH-1;
 8005e88:	23ef      	movs	r3, #239	@ 0xef
 8005e8a:	82fb      	strh	r3, [r7, #22]
	lcd_total_height = BSP_LCD_ACTIVE_HEIGHT -1;
 8005e8c:	23ef      	movs	r3, #239	@ 0xef
 8005e8e:	82bb      	strh	r3, [r7, #20]

	area->x1 = x_start;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	801a      	strh	r2, [r3, #0]
	area->x2 = x_start + x_width -1;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	4413      	add	r3, r2
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	805a      	strh	r2, [r3, #2]
	area->y1 = y_start;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	809a      	strh	r2, [r3, #4]
	area->y2 = y_start + y_height -1;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	80da      	strh	r2, [r3, #6]

	area->x2 = (area->x2 > lcd_total_width) ? lcd_total_width :area->x2;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	885b      	ldrh	r3, [r3, #2]
 8005ecc:	8afa      	ldrh	r2, [r7, #22]
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	bf28      	it	cs
 8005ed2:	4613      	movcs	r3, r2
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	805a      	strh	r2, [r3, #2]
	area->y2 = (area->y2 > lcd_total_height) ? lcd_total_height : area->y2;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	88db      	ldrh	r3, [r3, #6]
 8005ede:	8aba      	ldrh	r2, [r7, #20]
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	bf28      	it	cs
 8005ee4:	4613      	movcs	r3, r2
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	80da      	strh	r2, [r3, #6]

}
 8005eec:	bf00      	nop
 8005eee:	371c      	adds	r7, #28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <bytes_to_pixels>:


static uint32_t bytes_to_pixels(uint32_t nbytes, uint8_t pixel_format)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	70fb      	strb	r3, [r7, #3]
	UNUSED(pixel_format);
	return nbytes/2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	085b      	lsrs	r3, r3, #1
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <pixels_to_bytes>:


static uint32_t pixels_to_bytes(uint32_t pixels, uint8_t pixel_format)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	70fb      	strb	r3, [r7, #3]
	UNUSED(pixel_format);
	return pixels * 2UL;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	005b      	lsls	r3, r3, #1
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <copy_to_draw_buffer>:

static uint32_t copy_to_draw_buffer( bsp_lcd_t *hlcd,uint32_t nbytes,uint32_t rgb888)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b088      	sub	sp, #32
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
	uint16_t *fb_ptr = NULL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61fb      	str	r3, [r7, #28]
	uint32_t npixels;
	hlcd->buff_to_draw = get_buff(hlcd);
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 f853 	bl	8005fec <get_buff>
 8005f46:	4602      	mov	r2, r0
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	611a      	str	r2, [r3, #16]
	fb_ptr = (uint16_t*)hlcd->buff_to_draw;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	61fb      	str	r3, [r7, #28]
	nbytes =  ((nbytes > hlcd->db_size)?hlcd->db_size:nbytes);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	bf28      	it	cs
 8005f5c:	4613      	movcs	r3, r2
 8005f5e:	60bb      	str	r3, [r7, #8]
	npixels= bytes_to_pixels(nbytes,hlcd->pixel_format);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	785b      	ldrb	r3, [r3, #1]
 8005f64:	4619      	mov	r1, r3
 8005f66:	68b8      	ldr	r0, [r7, #8]
 8005f68:	f7ff ffc6 	bl	8005ef8 <bytes_to_pixels>
 8005f6c:	6178      	str	r0, [r7, #20]
	if(hlcd->buff_to_draw != NULL){
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d035      	beq.n	8005fe2 <copy_to_draw_buffer+0xb2>
		for(uint32_t i = 0 ; i < npixels ;i++){
 8005f76:	2300      	movs	r3, #0
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	e00c      	b.n	8005f96 <copy_to_draw_buffer+0x66>
			*fb_ptr = convert_rgb888_to_rgb565(rgb888); //image_data[i]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f86b 	bl	8006058 <convert_rgb888_to_rgb565>
 8005f82:	4603      	mov	r3, r0
 8005f84:	461a      	mov	r2, r3
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	801a      	strh	r2, [r3, #0]
			fb_ptr++;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	3302      	adds	r3, #2
 8005f8e:	61fb      	str	r3, [r7, #28]
		for(uint32_t i = 0 ; i < npixels ;i++){
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	3301      	adds	r3, #1
 8005f94:	61bb      	str	r3, [r7, #24]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d3ee      	bcc.n	8005f7c <copy_to_draw_buffer+0x4c>
		}
		hlcd->write_length = pixels_to_bytes(npixels,hlcd->pixel_format);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	785b      	ldrb	r3, [r3, #1]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6978      	ldr	r0, [r7, #20]
 8005fa6:	f7ff ffb5 	bl	8005f14 <pixels_to_bytes>
 8005faa:	4602      	mov	r2, r0
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	60da      	str	r2, [r3, #12]
		while(!is_lcd_write_allowed(hlcd));
 8005fb0:	bf00      	nop
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 f893 	bl	80060de <is_lcd_write_allowed>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0f9      	beq.n	8005fb2 <copy_to_draw_buffer+0x82>
		hlcd->buff_to_flush = hlcd->buff_to_draw;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	615a      	str	r2, [r3, #20]
		hlcd->buff_to_draw = NULL;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	611a      	str	r2, [r3, #16]
		lcd_flush(hlcd);
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f86c 	bl	80060aa <lcd_flush>
		return pixels_to_bytes(npixels,hlcd->pixel_format);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6978      	ldr	r0, [r7, #20]
 8005fda:	f7ff ff9b 	bl	8005f14 <pixels_to_bytes>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	e000      	b.n	8005fe4 <copy_to_draw_buffer+0xb4>
	}

	return 0;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3720      	adds	r7, #32
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <get_buff>:


static uint8_t* get_buff(bsp_lcd_t *hlcd)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	uint32_t buf1 = (uint32_t)hlcd->draw_buffer1;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	60fb      	str	r3, [r7, #12]
	uint32_t buf2 = (uint32_t)hlcd->draw_buffer2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	60bb      	str	r3, [r7, #8]

	//__disable_irq();
	if(hlcd->buff_to_draw == NULL && hlcd->buff_to_flush == NULL){
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d106      	bne.n	8006016 <get_buff+0x2a>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d102      	bne.n	8006016 <get_buff+0x2a>
		return  hlcd->draw_buffer1;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	e01a      	b.n	800604c <get_buff+0x60>
	}else if((uint32_t)hlcd->buff_to_flush == buf1 && hlcd->buff_to_draw == NULL ){
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	461a      	mov	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4293      	cmp	r3, r2
 8006020:	d106      	bne.n	8006030 <get_buff+0x44>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d102      	bne.n	8006030 <get_buff+0x44>
		return  hlcd->draw_buffer2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	e00d      	b.n	800604c <get_buff+0x60>
	}else if ((uint32_t)hlcd->buff_to_flush == buf2 && hlcd->buff_to_draw == NULL){
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	461a      	mov	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	4293      	cmp	r3, r2
 800603a:	d106      	bne.n	800604a <get_buff+0x5e>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d102      	bne.n	800604a <get_buff+0x5e>
		return  hlcd->draw_buffer1;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	e000      	b.n	800604c <get_buff+0x60>
	}
	//__enable_irq();

	return NULL;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <convert_rgb888_to_rgb565>:

static uint16_t convert_rgb888_to_rgb565(uint32_t rgb888)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
    uint16_t r,g,b;
	r = (rgb888 >> 19) & 0x1FU;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	0cdb      	lsrs	r3, r3, #19
 8006064:	b29b      	uxth	r3, r3
 8006066:	f003 031f 	and.w	r3, r3, #31
 800606a:	81fb      	strh	r3, [r7, #14]
	g = (rgb888 >> 10) & 0x3FU;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	0a9b      	lsrs	r3, r3, #10
 8006070:	b29b      	uxth	r3, r3
 8006072:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006076:	81bb      	strh	r3, [r7, #12]
	b = (rgb888 >> 3)  & 0x1FU;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	08db      	lsrs	r3, r3, #3
 800607c:	b29b      	uxth	r3, r3
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	817b      	strh	r3, [r7, #10]
	return (uint16_t)((r << 11) | (g << 5) | b);
 8006084:	89fb      	ldrh	r3, [r7, #14]
 8006086:	02db      	lsls	r3, r3, #11
 8006088:	b21a      	sxth	r2, r3
 800608a:	89bb      	ldrh	r3, [r7, #12]
 800608c:	015b      	lsls	r3, r3, #5
 800608e:	b21b      	sxth	r3, r3
 8006090:	4313      	orrs	r3, r2
 8006092:	b21a      	sxth	r2, r3
 8006094:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006098:	4313      	orrs	r3, r2
 800609a:	b21b      	sxth	r3, r3
 800609c:	b29b      	uxth	r3, r3
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <lcd_flush>:

static void lcd_flush(bsp_lcd_t *hlcd)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b082      	sub	sp, #8
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
	gc9a01a_set_display_area(&hlcd->area);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3318      	adds	r3, #24
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff f9bf 	bl	800543a <gc9a01a_set_display_area>
	bsp_lcd_send_cmd_mem_write();
 80060bc:	f7ff fe51 	bl	8005d62 <bsp_lcd_send_cmd_mem_write>
	bsp_lcd_write(hlcd->buff_to_flush,hlcd->write_length);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	695a      	ldr	r2, [r3, #20]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f7ff fe50 	bl	8005d70 <bsp_lcd_write>
	hlcd->buff_to_flush = NULL;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	615a      	str	r2, [r3, #20]
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <is_lcd_write_allowed>:


static uint8_t is_lcd_write_allowed(bsp_lcd_t *hlcd)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
	//__disable_irq();
	if(!hlcd->buff_to_flush)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <is_lcd_write_allowed+0x14>
		return TRUE;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <is_lcd_write_allowed+0x16>
	//__enable_irq();

	return FALSE;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <rand>:
 8006100:	4b16      	ldr	r3, [pc, #88]	@ (800615c <rand+0x5c>)
 8006102:	b510      	push	{r4, lr}
 8006104:	681c      	ldr	r4, [r3, #0]
 8006106:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006108:	b9b3      	cbnz	r3, 8006138 <rand+0x38>
 800610a:	2018      	movs	r0, #24
 800610c:	f002 f806 	bl	800811c <malloc>
 8006110:	4602      	mov	r2, r0
 8006112:	6320      	str	r0, [r4, #48]	@ 0x30
 8006114:	b920      	cbnz	r0, 8006120 <rand+0x20>
 8006116:	4b12      	ldr	r3, [pc, #72]	@ (8006160 <rand+0x60>)
 8006118:	4812      	ldr	r0, [pc, #72]	@ (8006164 <rand+0x64>)
 800611a:	2152      	movs	r1, #82	@ 0x52
 800611c:	f001 f94a 	bl	80073b4 <__assert_func>
 8006120:	4911      	ldr	r1, [pc, #68]	@ (8006168 <rand+0x68>)
 8006122:	4b12      	ldr	r3, [pc, #72]	@ (800616c <rand+0x6c>)
 8006124:	e9c0 1300 	strd	r1, r3, [r0]
 8006128:	4b11      	ldr	r3, [pc, #68]	@ (8006170 <rand+0x70>)
 800612a:	6083      	str	r3, [r0, #8]
 800612c:	230b      	movs	r3, #11
 800612e:	8183      	strh	r3, [r0, #12]
 8006130:	2100      	movs	r1, #0
 8006132:	2001      	movs	r0, #1
 8006134:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006138:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800613a:	480e      	ldr	r0, [pc, #56]	@ (8006174 <rand+0x74>)
 800613c:	690b      	ldr	r3, [r1, #16]
 800613e:	694c      	ldr	r4, [r1, #20]
 8006140:	4a0d      	ldr	r2, [pc, #52]	@ (8006178 <rand+0x78>)
 8006142:	4358      	muls	r0, r3
 8006144:	fb02 0004 	mla	r0, r2, r4, r0
 8006148:	fba3 3202 	umull	r3, r2, r3, r2
 800614c:	3301      	adds	r3, #1
 800614e:	eb40 0002 	adc.w	r0, r0, r2
 8006152:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006156:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800615a:	bd10      	pop	{r4, pc}
 800615c:	2000003c 	.word	0x2000003c
 8006160:	080172d8 	.word	0x080172d8
 8006164:	080172ef 	.word	0x080172ef
 8006168:	abcd330e 	.word	0xabcd330e
 800616c:	e66d1234 	.word	0xe66d1234
 8006170:	0005deec 	.word	0x0005deec
 8006174:	5851f42d 	.word	0x5851f42d
 8006178:	4c957f2d 	.word	0x4c957f2d

0800617c <__cvt>:
 800617c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006180:	ec57 6b10 	vmov	r6, r7, d0
 8006184:	2f00      	cmp	r7, #0
 8006186:	460c      	mov	r4, r1
 8006188:	4619      	mov	r1, r3
 800618a:	463b      	mov	r3, r7
 800618c:	bfbb      	ittet	lt
 800618e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006192:	461f      	movlt	r7, r3
 8006194:	2300      	movge	r3, #0
 8006196:	232d      	movlt	r3, #45	@ 0x2d
 8006198:	700b      	strb	r3, [r1, #0]
 800619a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800619c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80061a0:	4691      	mov	r9, r2
 80061a2:	f023 0820 	bic.w	r8, r3, #32
 80061a6:	bfbc      	itt	lt
 80061a8:	4632      	movlt	r2, r6
 80061aa:	4616      	movlt	r6, r2
 80061ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061b0:	d005      	beq.n	80061be <__cvt+0x42>
 80061b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80061b6:	d100      	bne.n	80061ba <__cvt+0x3e>
 80061b8:	3401      	adds	r4, #1
 80061ba:	2102      	movs	r1, #2
 80061bc:	e000      	b.n	80061c0 <__cvt+0x44>
 80061be:	2103      	movs	r1, #3
 80061c0:	ab03      	add	r3, sp, #12
 80061c2:	9301      	str	r3, [sp, #4]
 80061c4:	ab02      	add	r3, sp, #8
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	ec47 6b10 	vmov	d0, r6, r7
 80061cc:	4653      	mov	r3, sl
 80061ce:	4622      	mov	r2, r4
 80061d0:	f001 f996 	bl	8007500 <_dtoa_r>
 80061d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80061d8:	4605      	mov	r5, r0
 80061da:	d119      	bne.n	8006210 <__cvt+0x94>
 80061dc:	f019 0f01 	tst.w	r9, #1
 80061e0:	d00e      	beq.n	8006200 <__cvt+0x84>
 80061e2:	eb00 0904 	add.w	r9, r0, r4
 80061e6:	2200      	movs	r2, #0
 80061e8:	2300      	movs	r3, #0
 80061ea:	4630      	mov	r0, r6
 80061ec:	4639      	mov	r1, r7
 80061ee:	f7fa fc6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80061f2:	b108      	cbz	r0, 80061f8 <__cvt+0x7c>
 80061f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80061f8:	2230      	movs	r2, #48	@ 0x30
 80061fa:	9b03      	ldr	r3, [sp, #12]
 80061fc:	454b      	cmp	r3, r9
 80061fe:	d31e      	bcc.n	800623e <__cvt+0xc2>
 8006200:	9b03      	ldr	r3, [sp, #12]
 8006202:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006204:	1b5b      	subs	r3, r3, r5
 8006206:	4628      	mov	r0, r5
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	b004      	add	sp, #16
 800620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006210:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006214:	eb00 0904 	add.w	r9, r0, r4
 8006218:	d1e5      	bne.n	80061e6 <__cvt+0x6a>
 800621a:	7803      	ldrb	r3, [r0, #0]
 800621c:	2b30      	cmp	r3, #48	@ 0x30
 800621e:	d10a      	bne.n	8006236 <__cvt+0xba>
 8006220:	2200      	movs	r2, #0
 8006222:	2300      	movs	r3, #0
 8006224:	4630      	mov	r0, r6
 8006226:	4639      	mov	r1, r7
 8006228:	f7fa fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800622c:	b918      	cbnz	r0, 8006236 <__cvt+0xba>
 800622e:	f1c4 0401 	rsb	r4, r4, #1
 8006232:	f8ca 4000 	str.w	r4, [sl]
 8006236:	f8da 3000 	ldr.w	r3, [sl]
 800623a:	4499      	add	r9, r3
 800623c:	e7d3      	b.n	80061e6 <__cvt+0x6a>
 800623e:	1c59      	adds	r1, r3, #1
 8006240:	9103      	str	r1, [sp, #12]
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	e7d9      	b.n	80061fa <__cvt+0x7e>

08006246 <__exponent>:
 8006246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006248:	2900      	cmp	r1, #0
 800624a:	bfba      	itte	lt
 800624c:	4249      	neglt	r1, r1
 800624e:	232d      	movlt	r3, #45	@ 0x2d
 8006250:	232b      	movge	r3, #43	@ 0x2b
 8006252:	2909      	cmp	r1, #9
 8006254:	7002      	strb	r2, [r0, #0]
 8006256:	7043      	strb	r3, [r0, #1]
 8006258:	dd29      	ble.n	80062ae <__exponent+0x68>
 800625a:	f10d 0307 	add.w	r3, sp, #7
 800625e:	461d      	mov	r5, r3
 8006260:	270a      	movs	r7, #10
 8006262:	461a      	mov	r2, r3
 8006264:	fbb1 f6f7 	udiv	r6, r1, r7
 8006268:	fb07 1416 	mls	r4, r7, r6, r1
 800626c:	3430      	adds	r4, #48	@ 0x30
 800626e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006272:	460c      	mov	r4, r1
 8006274:	2c63      	cmp	r4, #99	@ 0x63
 8006276:	f103 33ff 	add.w	r3, r3, #4294967295
 800627a:	4631      	mov	r1, r6
 800627c:	dcf1      	bgt.n	8006262 <__exponent+0x1c>
 800627e:	3130      	adds	r1, #48	@ 0x30
 8006280:	1e94      	subs	r4, r2, #2
 8006282:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006286:	1c41      	adds	r1, r0, #1
 8006288:	4623      	mov	r3, r4
 800628a:	42ab      	cmp	r3, r5
 800628c:	d30a      	bcc.n	80062a4 <__exponent+0x5e>
 800628e:	f10d 0309 	add.w	r3, sp, #9
 8006292:	1a9b      	subs	r3, r3, r2
 8006294:	42ac      	cmp	r4, r5
 8006296:	bf88      	it	hi
 8006298:	2300      	movhi	r3, #0
 800629a:	3302      	adds	r3, #2
 800629c:	4403      	add	r3, r0
 800629e:	1a18      	subs	r0, r3, r0
 80062a0:	b003      	add	sp, #12
 80062a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80062a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80062ac:	e7ed      	b.n	800628a <__exponent+0x44>
 80062ae:	2330      	movs	r3, #48	@ 0x30
 80062b0:	3130      	adds	r1, #48	@ 0x30
 80062b2:	7083      	strb	r3, [r0, #2]
 80062b4:	70c1      	strb	r1, [r0, #3]
 80062b6:	1d03      	adds	r3, r0, #4
 80062b8:	e7f1      	b.n	800629e <__exponent+0x58>
	...

080062bc <_printf_float>:
 80062bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c0:	b08d      	sub	sp, #52	@ 0x34
 80062c2:	460c      	mov	r4, r1
 80062c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80062c8:	4616      	mov	r6, r2
 80062ca:	461f      	mov	r7, r3
 80062cc:	4605      	mov	r5, r0
 80062ce:	f000 fff3 	bl	80072b8 <_localeconv_r>
 80062d2:	6803      	ldr	r3, [r0, #0]
 80062d4:	9304      	str	r3, [sp, #16]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7f9 ffca 	bl	8000270 <strlen>
 80062dc:	2300      	movs	r3, #0
 80062de:	930a      	str	r3, [sp, #40]	@ 0x28
 80062e0:	f8d8 3000 	ldr.w	r3, [r8]
 80062e4:	9005      	str	r0, [sp, #20]
 80062e6:	3307      	adds	r3, #7
 80062e8:	f023 0307 	bic.w	r3, r3, #7
 80062ec:	f103 0208 	add.w	r2, r3, #8
 80062f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80062f4:	f8d4 b000 	ldr.w	fp, [r4]
 80062f8:	f8c8 2000 	str.w	r2, [r8]
 80062fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006300:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006304:	9307      	str	r3, [sp, #28]
 8006306:	f8cd 8018 	str.w	r8, [sp, #24]
 800630a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800630e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006312:	4b9c      	ldr	r3, [pc, #624]	@ (8006584 <_printf_float+0x2c8>)
 8006314:	f04f 32ff 	mov.w	r2, #4294967295
 8006318:	f7fa fc08 	bl	8000b2c <__aeabi_dcmpun>
 800631c:	bb70      	cbnz	r0, 800637c <_printf_float+0xc0>
 800631e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006322:	4b98      	ldr	r3, [pc, #608]	@ (8006584 <_printf_float+0x2c8>)
 8006324:	f04f 32ff 	mov.w	r2, #4294967295
 8006328:	f7fa fbe2 	bl	8000af0 <__aeabi_dcmple>
 800632c:	bb30      	cbnz	r0, 800637c <_printf_float+0xc0>
 800632e:	2200      	movs	r2, #0
 8006330:	2300      	movs	r3, #0
 8006332:	4640      	mov	r0, r8
 8006334:	4649      	mov	r1, r9
 8006336:	f7fa fbd1 	bl	8000adc <__aeabi_dcmplt>
 800633a:	b110      	cbz	r0, 8006342 <_printf_float+0x86>
 800633c:	232d      	movs	r3, #45	@ 0x2d
 800633e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006342:	4a91      	ldr	r2, [pc, #580]	@ (8006588 <_printf_float+0x2cc>)
 8006344:	4b91      	ldr	r3, [pc, #580]	@ (800658c <_printf_float+0x2d0>)
 8006346:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800634a:	bf94      	ite	ls
 800634c:	4690      	movls	r8, r2
 800634e:	4698      	movhi	r8, r3
 8006350:	2303      	movs	r3, #3
 8006352:	6123      	str	r3, [r4, #16]
 8006354:	f02b 0304 	bic.w	r3, fp, #4
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	f04f 0900 	mov.w	r9, #0
 800635e:	9700      	str	r7, [sp, #0]
 8006360:	4633      	mov	r3, r6
 8006362:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006364:	4621      	mov	r1, r4
 8006366:	4628      	mov	r0, r5
 8006368:	f000 f9d2 	bl	8006710 <_printf_common>
 800636c:	3001      	adds	r0, #1
 800636e:	f040 808d 	bne.w	800648c <_printf_float+0x1d0>
 8006372:	f04f 30ff 	mov.w	r0, #4294967295
 8006376:	b00d      	add	sp, #52	@ 0x34
 8006378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637c:	4642      	mov	r2, r8
 800637e:	464b      	mov	r3, r9
 8006380:	4640      	mov	r0, r8
 8006382:	4649      	mov	r1, r9
 8006384:	f7fa fbd2 	bl	8000b2c <__aeabi_dcmpun>
 8006388:	b140      	cbz	r0, 800639c <_printf_float+0xe0>
 800638a:	464b      	mov	r3, r9
 800638c:	2b00      	cmp	r3, #0
 800638e:	bfbc      	itt	lt
 8006390:	232d      	movlt	r3, #45	@ 0x2d
 8006392:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006396:	4a7e      	ldr	r2, [pc, #504]	@ (8006590 <_printf_float+0x2d4>)
 8006398:	4b7e      	ldr	r3, [pc, #504]	@ (8006594 <_printf_float+0x2d8>)
 800639a:	e7d4      	b.n	8006346 <_printf_float+0x8a>
 800639c:	6863      	ldr	r3, [r4, #4]
 800639e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80063a2:	9206      	str	r2, [sp, #24]
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	d13b      	bne.n	8006420 <_printf_float+0x164>
 80063a8:	2306      	movs	r3, #6
 80063aa:	6063      	str	r3, [r4, #4]
 80063ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80063b0:	2300      	movs	r3, #0
 80063b2:	6022      	str	r2, [r4, #0]
 80063b4:	9303      	str	r3, [sp, #12]
 80063b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80063b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80063bc:	ab09      	add	r3, sp, #36	@ 0x24
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	6861      	ldr	r1, [r4, #4]
 80063c2:	ec49 8b10 	vmov	d0, r8, r9
 80063c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80063ca:	4628      	mov	r0, r5
 80063cc:	f7ff fed6 	bl	800617c <__cvt>
 80063d0:	9b06      	ldr	r3, [sp, #24]
 80063d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80063d4:	2b47      	cmp	r3, #71	@ 0x47
 80063d6:	4680      	mov	r8, r0
 80063d8:	d129      	bne.n	800642e <_printf_float+0x172>
 80063da:	1cc8      	adds	r0, r1, #3
 80063dc:	db02      	blt.n	80063e4 <_printf_float+0x128>
 80063de:	6863      	ldr	r3, [r4, #4]
 80063e0:	4299      	cmp	r1, r3
 80063e2:	dd41      	ble.n	8006468 <_printf_float+0x1ac>
 80063e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80063e8:	fa5f fa8a 	uxtb.w	sl, sl
 80063ec:	3901      	subs	r1, #1
 80063ee:	4652      	mov	r2, sl
 80063f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80063f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80063f6:	f7ff ff26 	bl	8006246 <__exponent>
 80063fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063fc:	1813      	adds	r3, r2, r0
 80063fe:	2a01      	cmp	r2, #1
 8006400:	4681      	mov	r9, r0
 8006402:	6123      	str	r3, [r4, #16]
 8006404:	dc02      	bgt.n	800640c <_printf_float+0x150>
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	07d2      	lsls	r2, r2, #31
 800640a:	d501      	bpl.n	8006410 <_printf_float+0x154>
 800640c:	3301      	adds	r3, #1
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0a2      	beq.n	800635e <_printf_float+0xa2>
 8006418:	232d      	movs	r3, #45	@ 0x2d
 800641a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800641e:	e79e      	b.n	800635e <_printf_float+0xa2>
 8006420:	9a06      	ldr	r2, [sp, #24]
 8006422:	2a47      	cmp	r2, #71	@ 0x47
 8006424:	d1c2      	bne.n	80063ac <_printf_float+0xf0>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1c0      	bne.n	80063ac <_printf_float+0xf0>
 800642a:	2301      	movs	r3, #1
 800642c:	e7bd      	b.n	80063aa <_printf_float+0xee>
 800642e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006432:	d9db      	bls.n	80063ec <_printf_float+0x130>
 8006434:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006438:	d118      	bne.n	800646c <_printf_float+0x1b0>
 800643a:	2900      	cmp	r1, #0
 800643c:	6863      	ldr	r3, [r4, #4]
 800643e:	dd0b      	ble.n	8006458 <_printf_float+0x19c>
 8006440:	6121      	str	r1, [r4, #16]
 8006442:	b913      	cbnz	r3, 800644a <_printf_float+0x18e>
 8006444:	6822      	ldr	r2, [r4, #0]
 8006446:	07d0      	lsls	r0, r2, #31
 8006448:	d502      	bpl.n	8006450 <_printf_float+0x194>
 800644a:	3301      	adds	r3, #1
 800644c:	440b      	add	r3, r1
 800644e:	6123      	str	r3, [r4, #16]
 8006450:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006452:	f04f 0900 	mov.w	r9, #0
 8006456:	e7db      	b.n	8006410 <_printf_float+0x154>
 8006458:	b913      	cbnz	r3, 8006460 <_printf_float+0x1a4>
 800645a:	6822      	ldr	r2, [r4, #0]
 800645c:	07d2      	lsls	r2, r2, #31
 800645e:	d501      	bpl.n	8006464 <_printf_float+0x1a8>
 8006460:	3302      	adds	r3, #2
 8006462:	e7f4      	b.n	800644e <_printf_float+0x192>
 8006464:	2301      	movs	r3, #1
 8006466:	e7f2      	b.n	800644e <_printf_float+0x192>
 8006468:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800646c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800646e:	4299      	cmp	r1, r3
 8006470:	db05      	blt.n	800647e <_printf_float+0x1c2>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	6121      	str	r1, [r4, #16]
 8006476:	07d8      	lsls	r0, r3, #31
 8006478:	d5ea      	bpl.n	8006450 <_printf_float+0x194>
 800647a:	1c4b      	adds	r3, r1, #1
 800647c:	e7e7      	b.n	800644e <_printf_float+0x192>
 800647e:	2900      	cmp	r1, #0
 8006480:	bfd4      	ite	le
 8006482:	f1c1 0202 	rsble	r2, r1, #2
 8006486:	2201      	movgt	r2, #1
 8006488:	4413      	add	r3, r2
 800648a:	e7e0      	b.n	800644e <_printf_float+0x192>
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	055a      	lsls	r2, r3, #21
 8006490:	d407      	bmi.n	80064a2 <_printf_float+0x1e6>
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	4642      	mov	r2, r8
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	d12b      	bne.n	80064f8 <_printf_float+0x23c>
 80064a0:	e767      	b.n	8006372 <_printf_float+0xb6>
 80064a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064a6:	f240 80dd 	bls.w	8006664 <_printf_float+0x3a8>
 80064aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064ae:	2200      	movs	r2, #0
 80064b0:	2300      	movs	r3, #0
 80064b2:	f7fa fb09 	bl	8000ac8 <__aeabi_dcmpeq>
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d033      	beq.n	8006522 <_printf_float+0x266>
 80064ba:	4a37      	ldr	r2, [pc, #220]	@ (8006598 <_printf_float+0x2dc>)
 80064bc:	2301      	movs	r3, #1
 80064be:	4631      	mov	r1, r6
 80064c0:	4628      	mov	r0, r5
 80064c2:	47b8      	blx	r7
 80064c4:	3001      	adds	r0, #1
 80064c6:	f43f af54 	beq.w	8006372 <_printf_float+0xb6>
 80064ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80064ce:	4543      	cmp	r3, r8
 80064d0:	db02      	blt.n	80064d8 <_printf_float+0x21c>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	07d8      	lsls	r0, r3, #31
 80064d6:	d50f      	bpl.n	80064f8 <_printf_float+0x23c>
 80064d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064dc:	4631      	mov	r1, r6
 80064de:	4628      	mov	r0, r5
 80064e0:	47b8      	blx	r7
 80064e2:	3001      	adds	r0, #1
 80064e4:	f43f af45 	beq.w	8006372 <_printf_float+0xb6>
 80064e8:	f04f 0900 	mov.w	r9, #0
 80064ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80064f0:	f104 0a1a 	add.w	sl, r4, #26
 80064f4:	45c8      	cmp	r8, r9
 80064f6:	dc09      	bgt.n	800650c <_printf_float+0x250>
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	079b      	lsls	r3, r3, #30
 80064fc:	f100 8103 	bmi.w	8006706 <_printf_float+0x44a>
 8006500:	68e0      	ldr	r0, [r4, #12]
 8006502:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006504:	4298      	cmp	r0, r3
 8006506:	bfb8      	it	lt
 8006508:	4618      	movlt	r0, r3
 800650a:	e734      	b.n	8006376 <_printf_float+0xba>
 800650c:	2301      	movs	r3, #1
 800650e:	4652      	mov	r2, sl
 8006510:	4631      	mov	r1, r6
 8006512:	4628      	mov	r0, r5
 8006514:	47b8      	blx	r7
 8006516:	3001      	adds	r0, #1
 8006518:	f43f af2b 	beq.w	8006372 <_printf_float+0xb6>
 800651c:	f109 0901 	add.w	r9, r9, #1
 8006520:	e7e8      	b.n	80064f4 <_printf_float+0x238>
 8006522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006524:	2b00      	cmp	r3, #0
 8006526:	dc39      	bgt.n	800659c <_printf_float+0x2e0>
 8006528:	4a1b      	ldr	r2, [pc, #108]	@ (8006598 <_printf_float+0x2dc>)
 800652a:	2301      	movs	r3, #1
 800652c:	4631      	mov	r1, r6
 800652e:	4628      	mov	r0, r5
 8006530:	47b8      	blx	r7
 8006532:	3001      	adds	r0, #1
 8006534:	f43f af1d 	beq.w	8006372 <_printf_float+0xb6>
 8006538:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800653c:	ea59 0303 	orrs.w	r3, r9, r3
 8006540:	d102      	bne.n	8006548 <_printf_float+0x28c>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	07d9      	lsls	r1, r3, #31
 8006546:	d5d7      	bpl.n	80064f8 <_printf_float+0x23c>
 8006548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800654c:	4631      	mov	r1, r6
 800654e:	4628      	mov	r0, r5
 8006550:	47b8      	blx	r7
 8006552:	3001      	adds	r0, #1
 8006554:	f43f af0d 	beq.w	8006372 <_printf_float+0xb6>
 8006558:	f04f 0a00 	mov.w	sl, #0
 800655c:	f104 0b1a 	add.w	fp, r4, #26
 8006560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006562:	425b      	negs	r3, r3
 8006564:	4553      	cmp	r3, sl
 8006566:	dc01      	bgt.n	800656c <_printf_float+0x2b0>
 8006568:	464b      	mov	r3, r9
 800656a:	e793      	b.n	8006494 <_printf_float+0x1d8>
 800656c:	2301      	movs	r3, #1
 800656e:	465a      	mov	r2, fp
 8006570:	4631      	mov	r1, r6
 8006572:	4628      	mov	r0, r5
 8006574:	47b8      	blx	r7
 8006576:	3001      	adds	r0, #1
 8006578:	f43f aefb 	beq.w	8006372 <_printf_float+0xb6>
 800657c:	f10a 0a01 	add.w	sl, sl, #1
 8006580:	e7ee      	b.n	8006560 <_printf_float+0x2a4>
 8006582:	bf00      	nop
 8006584:	7fefffff 	.word	0x7fefffff
 8006588:	08017347 	.word	0x08017347
 800658c:	0801734b 	.word	0x0801734b
 8006590:	0801734f 	.word	0x0801734f
 8006594:	08017353 	.word	0x08017353
 8006598:	08017357 	.word	0x08017357
 800659c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800659e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80065a2:	4553      	cmp	r3, sl
 80065a4:	bfa8      	it	ge
 80065a6:	4653      	movge	r3, sl
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	4699      	mov	r9, r3
 80065ac:	dc36      	bgt.n	800661c <_printf_float+0x360>
 80065ae:	f04f 0b00 	mov.w	fp, #0
 80065b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065b6:	f104 021a 	add.w	r2, r4, #26
 80065ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065bc:	9306      	str	r3, [sp, #24]
 80065be:	eba3 0309 	sub.w	r3, r3, r9
 80065c2:	455b      	cmp	r3, fp
 80065c4:	dc31      	bgt.n	800662a <_printf_float+0x36e>
 80065c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065c8:	459a      	cmp	sl, r3
 80065ca:	dc3a      	bgt.n	8006642 <_printf_float+0x386>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	07da      	lsls	r2, r3, #31
 80065d0:	d437      	bmi.n	8006642 <_printf_float+0x386>
 80065d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065d4:	ebaa 0903 	sub.w	r9, sl, r3
 80065d8:	9b06      	ldr	r3, [sp, #24]
 80065da:	ebaa 0303 	sub.w	r3, sl, r3
 80065de:	4599      	cmp	r9, r3
 80065e0:	bfa8      	it	ge
 80065e2:	4699      	movge	r9, r3
 80065e4:	f1b9 0f00 	cmp.w	r9, #0
 80065e8:	dc33      	bgt.n	8006652 <_printf_float+0x396>
 80065ea:	f04f 0800 	mov.w	r8, #0
 80065ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065f2:	f104 0b1a 	add.w	fp, r4, #26
 80065f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f8:	ebaa 0303 	sub.w	r3, sl, r3
 80065fc:	eba3 0309 	sub.w	r3, r3, r9
 8006600:	4543      	cmp	r3, r8
 8006602:	f77f af79 	ble.w	80064f8 <_printf_float+0x23c>
 8006606:	2301      	movs	r3, #1
 8006608:	465a      	mov	r2, fp
 800660a:	4631      	mov	r1, r6
 800660c:	4628      	mov	r0, r5
 800660e:	47b8      	blx	r7
 8006610:	3001      	adds	r0, #1
 8006612:	f43f aeae 	beq.w	8006372 <_printf_float+0xb6>
 8006616:	f108 0801 	add.w	r8, r8, #1
 800661a:	e7ec      	b.n	80065f6 <_printf_float+0x33a>
 800661c:	4642      	mov	r2, r8
 800661e:	4631      	mov	r1, r6
 8006620:	4628      	mov	r0, r5
 8006622:	47b8      	blx	r7
 8006624:	3001      	adds	r0, #1
 8006626:	d1c2      	bne.n	80065ae <_printf_float+0x2f2>
 8006628:	e6a3      	b.n	8006372 <_printf_float+0xb6>
 800662a:	2301      	movs	r3, #1
 800662c:	4631      	mov	r1, r6
 800662e:	4628      	mov	r0, r5
 8006630:	9206      	str	r2, [sp, #24]
 8006632:	47b8      	blx	r7
 8006634:	3001      	adds	r0, #1
 8006636:	f43f ae9c 	beq.w	8006372 <_printf_float+0xb6>
 800663a:	9a06      	ldr	r2, [sp, #24]
 800663c:	f10b 0b01 	add.w	fp, fp, #1
 8006640:	e7bb      	b.n	80065ba <_printf_float+0x2fe>
 8006642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	d1c0      	bne.n	80065d2 <_printf_float+0x316>
 8006650:	e68f      	b.n	8006372 <_printf_float+0xb6>
 8006652:	9a06      	ldr	r2, [sp, #24]
 8006654:	464b      	mov	r3, r9
 8006656:	4442      	add	r2, r8
 8006658:	4631      	mov	r1, r6
 800665a:	4628      	mov	r0, r5
 800665c:	47b8      	blx	r7
 800665e:	3001      	adds	r0, #1
 8006660:	d1c3      	bne.n	80065ea <_printf_float+0x32e>
 8006662:	e686      	b.n	8006372 <_printf_float+0xb6>
 8006664:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006668:	f1ba 0f01 	cmp.w	sl, #1
 800666c:	dc01      	bgt.n	8006672 <_printf_float+0x3b6>
 800666e:	07db      	lsls	r3, r3, #31
 8006670:	d536      	bpl.n	80066e0 <_printf_float+0x424>
 8006672:	2301      	movs	r3, #1
 8006674:	4642      	mov	r2, r8
 8006676:	4631      	mov	r1, r6
 8006678:	4628      	mov	r0, r5
 800667a:	47b8      	blx	r7
 800667c:	3001      	adds	r0, #1
 800667e:	f43f ae78 	beq.w	8006372 <_printf_float+0xb6>
 8006682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	47b8      	blx	r7
 800668c:	3001      	adds	r0, #1
 800668e:	f43f ae70 	beq.w	8006372 <_printf_float+0xb6>
 8006692:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006696:	2200      	movs	r2, #0
 8006698:	2300      	movs	r3, #0
 800669a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800669e:	f7fa fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80066a2:	b9c0      	cbnz	r0, 80066d6 <_printf_float+0x41a>
 80066a4:	4653      	mov	r3, sl
 80066a6:	f108 0201 	add.w	r2, r8, #1
 80066aa:	4631      	mov	r1, r6
 80066ac:	4628      	mov	r0, r5
 80066ae:	47b8      	blx	r7
 80066b0:	3001      	adds	r0, #1
 80066b2:	d10c      	bne.n	80066ce <_printf_float+0x412>
 80066b4:	e65d      	b.n	8006372 <_printf_float+0xb6>
 80066b6:	2301      	movs	r3, #1
 80066b8:	465a      	mov	r2, fp
 80066ba:	4631      	mov	r1, r6
 80066bc:	4628      	mov	r0, r5
 80066be:	47b8      	blx	r7
 80066c0:	3001      	adds	r0, #1
 80066c2:	f43f ae56 	beq.w	8006372 <_printf_float+0xb6>
 80066c6:	f108 0801 	add.w	r8, r8, #1
 80066ca:	45d0      	cmp	r8, sl
 80066cc:	dbf3      	blt.n	80066b6 <_printf_float+0x3fa>
 80066ce:	464b      	mov	r3, r9
 80066d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80066d4:	e6df      	b.n	8006496 <_printf_float+0x1da>
 80066d6:	f04f 0800 	mov.w	r8, #0
 80066da:	f104 0b1a 	add.w	fp, r4, #26
 80066de:	e7f4      	b.n	80066ca <_printf_float+0x40e>
 80066e0:	2301      	movs	r3, #1
 80066e2:	4642      	mov	r2, r8
 80066e4:	e7e1      	b.n	80066aa <_printf_float+0x3ee>
 80066e6:	2301      	movs	r3, #1
 80066e8:	464a      	mov	r2, r9
 80066ea:	4631      	mov	r1, r6
 80066ec:	4628      	mov	r0, r5
 80066ee:	47b8      	blx	r7
 80066f0:	3001      	adds	r0, #1
 80066f2:	f43f ae3e 	beq.w	8006372 <_printf_float+0xb6>
 80066f6:	f108 0801 	add.w	r8, r8, #1
 80066fa:	68e3      	ldr	r3, [r4, #12]
 80066fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066fe:	1a5b      	subs	r3, r3, r1
 8006700:	4543      	cmp	r3, r8
 8006702:	dcf0      	bgt.n	80066e6 <_printf_float+0x42a>
 8006704:	e6fc      	b.n	8006500 <_printf_float+0x244>
 8006706:	f04f 0800 	mov.w	r8, #0
 800670a:	f104 0919 	add.w	r9, r4, #25
 800670e:	e7f4      	b.n	80066fa <_printf_float+0x43e>

08006710 <_printf_common>:
 8006710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006714:	4616      	mov	r6, r2
 8006716:	4698      	mov	r8, r3
 8006718:	688a      	ldr	r2, [r1, #8]
 800671a:	690b      	ldr	r3, [r1, #16]
 800671c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006720:	4293      	cmp	r3, r2
 8006722:	bfb8      	it	lt
 8006724:	4613      	movlt	r3, r2
 8006726:	6033      	str	r3, [r6, #0]
 8006728:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800672c:	4607      	mov	r7, r0
 800672e:	460c      	mov	r4, r1
 8006730:	b10a      	cbz	r2, 8006736 <_printf_common+0x26>
 8006732:	3301      	adds	r3, #1
 8006734:	6033      	str	r3, [r6, #0]
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	0699      	lsls	r1, r3, #26
 800673a:	bf42      	ittt	mi
 800673c:	6833      	ldrmi	r3, [r6, #0]
 800673e:	3302      	addmi	r3, #2
 8006740:	6033      	strmi	r3, [r6, #0]
 8006742:	6825      	ldr	r5, [r4, #0]
 8006744:	f015 0506 	ands.w	r5, r5, #6
 8006748:	d106      	bne.n	8006758 <_printf_common+0x48>
 800674a:	f104 0a19 	add.w	sl, r4, #25
 800674e:	68e3      	ldr	r3, [r4, #12]
 8006750:	6832      	ldr	r2, [r6, #0]
 8006752:	1a9b      	subs	r3, r3, r2
 8006754:	42ab      	cmp	r3, r5
 8006756:	dc26      	bgt.n	80067a6 <_printf_common+0x96>
 8006758:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800675c:	6822      	ldr	r2, [r4, #0]
 800675e:	3b00      	subs	r3, #0
 8006760:	bf18      	it	ne
 8006762:	2301      	movne	r3, #1
 8006764:	0692      	lsls	r2, r2, #26
 8006766:	d42b      	bmi.n	80067c0 <_printf_common+0xb0>
 8006768:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800676c:	4641      	mov	r1, r8
 800676e:	4638      	mov	r0, r7
 8006770:	47c8      	blx	r9
 8006772:	3001      	adds	r0, #1
 8006774:	d01e      	beq.n	80067b4 <_printf_common+0xa4>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	6922      	ldr	r2, [r4, #16]
 800677a:	f003 0306 	and.w	r3, r3, #6
 800677e:	2b04      	cmp	r3, #4
 8006780:	bf02      	ittt	eq
 8006782:	68e5      	ldreq	r5, [r4, #12]
 8006784:	6833      	ldreq	r3, [r6, #0]
 8006786:	1aed      	subeq	r5, r5, r3
 8006788:	68a3      	ldr	r3, [r4, #8]
 800678a:	bf0c      	ite	eq
 800678c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006790:	2500      	movne	r5, #0
 8006792:	4293      	cmp	r3, r2
 8006794:	bfc4      	itt	gt
 8006796:	1a9b      	subgt	r3, r3, r2
 8006798:	18ed      	addgt	r5, r5, r3
 800679a:	2600      	movs	r6, #0
 800679c:	341a      	adds	r4, #26
 800679e:	42b5      	cmp	r5, r6
 80067a0:	d11a      	bne.n	80067d8 <_printf_common+0xc8>
 80067a2:	2000      	movs	r0, #0
 80067a4:	e008      	b.n	80067b8 <_printf_common+0xa8>
 80067a6:	2301      	movs	r3, #1
 80067a8:	4652      	mov	r2, sl
 80067aa:	4641      	mov	r1, r8
 80067ac:	4638      	mov	r0, r7
 80067ae:	47c8      	blx	r9
 80067b0:	3001      	adds	r0, #1
 80067b2:	d103      	bne.n	80067bc <_printf_common+0xac>
 80067b4:	f04f 30ff 	mov.w	r0, #4294967295
 80067b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067bc:	3501      	adds	r5, #1
 80067be:	e7c6      	b.n	800674e <_printf_common+0x3e>
 80067c0:	18e1      	adds	r1, r4, r3
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	2030      	movs	r0, #48	@ 0x30
 80067c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067ca:	4422      	add	r2, r4
 80067cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067d4:	3302      	adds	r3, #2
 80067d6:	e7c7      	b.n	8006768 <_printf_common+0x58>
 80067d8:	2301      	movs	r3, #1
 80067da:	4622      	mov	r2, r4
 80067dc:	4641      	mov	r1, r8
 80067de:	4638      	mov	r0, r7
 80067e0:	47c8      	blx	r9
 80067e2:	3001      	adds	r0, #1
 80067e4:	d0e6      	beq.n	80067b4 <_printf_common+0xa4>
 80067e6:	3601      	adds	r6, #1
 80067e8:	e7d9      	b.n	800679e <_printf_common+0x8e>
	...

080067ec <_printf_i>:
 80067ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f0:	7e0f      	ldrb	r7, [r1, #24]
 80067f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067f4:	2f78      	cmp	r7, #120	@ 0x78
 80067f6:	4691      	mov	r9, r2
 80067f8:	4680      	mov	r8, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	469a      	mov	sl, r3
 80067fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006802:	d807      	bhi.n	8006814 <_printf_i+0x28>
 8006804:	2f62      	cmp	r7, #98	@ 0x62
 8006806:	d80a      	bhi.n	800681e <_printf_i+0x32>
 8006808:	2f00      	cmp	r7, #0
 800680a:	f000 80d2 	beq.w	80069b2 <_printf_i+0x1c6>
 800680e:	2f58      	cmp	r7, #88	@ 0x58
 8006810:	f000 80b9 	beq.w	8006986 <_printf_i+0x19a>
 8006814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006818:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800681c:	e03a      	b.n	8006894 <_printf_i+0xa8>
 800681e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006822:	2b15      	cmp	r3, #21
 8006824:	d8f6      	bhi.n	8006814 <_printf_i+0x28>
 8006826:	a101      	add	r1, pc, #4	@ (adr r1, 800682c <_printf_i+0x40>)
 8006828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800682c:	08006885 	.word	0x08006885
 8006830:	08006899 	.word	0x08006899
 8006834:	08006815 	.word	0x08006815
 8006838:	08006815 	.word	0x08006815
 800683c:	08006815 	.word	0x08006815
 8006840:	08006815 	.word	0x08006815
 8006844:	08006899 	.word	0x08006899
 8006848:	08006815 	.word	0x08006815
 800684c:	08006815 	.word	0x08006815
 8006850:	08006815 	.word	0x08006815
 8006854:	08006815 	.word	0x08006815
 8006858:	08006999 	.word	0x08006999
 800685c:	080068c3 	.word	0x080068c3
 8006860:	08006953 	.word	0x08006953
 8006864:	08006815 	.word	0x08006815
 8006868:	08006815 	.word	0x08006815
 800686c:	080069bb 	.word	0x080069bb
 8006870:	08006815 	.word	0x08006815
 8006874:	080068c3 	.word	0x080068c3
 8006878:	08006815 	.word	0x08006815
 800687c:	08006815 	.word	0x08006815
 8006880:	0800695b 	.word	0x0800695b
 8006884:	6833      	ldr	r3, [r6, #0]
 8006886:	1d1a      	adds	r2, r3, #4
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6032      	str	r2, [r6, #0]
 800688c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006894:	2301      	movs	r3, #1
 8006896:	e09d      	b.n	80069d4 <_printf_i+0x1e8>
 8006898:	6833      	ldr	r3, [r6, #0]
 800689a:	6820      	ldr	r0, [r4, #0]
 800689c:	1d19      	adds	r1, r3, #4
 800689e:	6031      	str	r1, [r6, #0]
 80068a0:	0606      	lsls	r6, r0, #24
 80068a2:	d501      	bpl.n	80068a8 <_printf_i+0xbc>
 80068a4:	681d      	ldr	r5, [r3, #0]
 80068a6:	e003      	b.n	80068b0 <_printf_i+0xc4>
 80068a8:	0645      	lsls	r5, r0, #25
 80068aa:	d5fb      	bpl.n	80068a4 <_printf_i+0xb8>
 80068ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068b0:	2d00      	cmp	r5, #0
 80068b2:	da03      	bge.n	80068bc <_printf_i+0xd0>
 80068b4:	232d      	movs	r3, #45	@ 0x2d
 80068b6:	426d      	negs	r5, r5
 80068b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068bc:	4859      	ldr	r0, [pc, #356]	@ (8006a24 <_printf_i+0x238>)
 80068be:	230a      	movs	r3, #10
 80068c0:	e011      	b.n	80068e6 <_printf_i+0xfa>
 80068c2:	6821      	ldr	r1, [r4, #0]
 80068c4:	6833      	ldr	r3, [r6, #0]
 80068c6:	0608      	lsls	r0, r1, #24
 80068c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80068cc:	d402      	bmi.n	80068d4 <_printf_i+0xe8>
 80068ce:	0649      	lsls	r1, r1, #25
 80068d0:	bf48      	it	mi
 80068d2:	b2ad      	uxthmi	r5, r5
 80068d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80068d6:	4853      	ldr	r0, [pc, #332]	@ (8006a24 <_printf_i+0x238>)
 80068d8:	6033      	str	r3, [r6, #0]
 80068da:	bf14      	ite	ne
 80068dc:	230a      	movne	r3, #10
 80068de:	2308      	moveq	r3, #8
 80068e0:	2100      	movs	r1, #0
 80068e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068e6:	6866      	ldr	r6, [r4, #4]
 80068e8:	60a6      	str	r6, [r4, #8]
 80068ea:	2e00      	cmp	r6, #0
 80068ec:	bfa2      	ittt	ge
 80068ee:	6821      	ldrge	r1, [r4, #0]
 80068f0:	f021 0104 	bicge.w	r1, r1, #4
 80068f4:	6021      	strge	r1, [r4, #0]
 80068f6:	b90d      	cbnz	r5, 80068fc <_printf_i+0x110>
 80068f8:	2e00      	cmp	r6, #0
 80068fa:	d04b      	beq.n	8006994 <_printf_i+0x1a8>
 80068fc:	4616      	mov	r6, r2
 80068fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006902:	fb03 5711 	mls	r7, r3, r1, r5
 8006906:	5dc7      	ldrb	r7, [r0, r7]
 8006908:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800690c:	462f      	mov	r7, r5
 800690e:	42bb      	cmp	r3, r7
 8006910:	460d      	mov	r5, r1
 8006912:	d9f4      	bls.n	80068fe <_printf_i+0x112>
 8006914:	2b08      	cmp	r3, #8
 8006916:	d10b      	bne.n	8006930 <_printf_i+0x144>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	07df      	lsls	r7, r3, #31
 800691c:	d508      	bpl.n	8006930 <_printf_i+0x144>
 800691e:	6923      	ldr	r3, [r4, #16]
 8006920:	6861      	ldr	r1, [r4, #4]
 8006922:	4299      	cmp	r1, r3
 8006924:	bfde      	ittt	le
 8006926:	2330      	movle	r3, #48	@ 0x30
 8006928:	f806 3c01 	strble.w	r3, [r6, #-1]
 800692c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006930:	1b92      	subs	r2, r2, r6
 8006932:	6122      	str	r2, [r4, #16]
 8006934:	f8cd a000 	str.w	sl, [sp]
 8006938:	464b      	mov	r3, r9
 800693a:	aa03      	add	r2, sp, #12
 800693c:	4621      	mov	r1, r4
 800693e:	4640      	mov	r0, r8
 8006940:	f7ff fee6 	bl	8006710 <_printf_common>
 8006944:	3001      	adds	r0, #1
 8006946:	d14a      	bne.n	80069de <_printf_i+0x1f2>
 8006948:	f04f 30ff 	mov.w	r0, #4294967295
 800694c:	b004      	add	sp, #16
 800694e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	f043 0320 	orr.w	r3, r3, #32
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	4833      	ldr	r0, [pc, #204]	@ (8006a28 <_printf_i+0x23c>)
 800695c:	2778      	movs	r7, #120	@ 0x78
 800695e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	6831      	ldr	r1, [r6, #0]
 8006966:	061f      	lsls	r7, r3, #24
 8006968:	f851 5b04 	ldr.w	r5, [r1], #4
 800696c:	d402      	bmi.n	8006974 <_printf_i+0x188>
 800696e:	065f      	lsls	r7, r3, #25
 8006970:	bf48      	it	mi
 8006972:	b2ad      	uxthmi	r5, r5
 8006974:	6031      	str	r1, [r6, #0]
 8006976:	07d9      	lsls	r1, r3, #31
 8006978:	bf44      	itt	mi
 800697a:	f043 0320 	orrmi.w	r3, r3, #32
 800697e:	6023      	strmi	r3, [r4, #0]
 8006980:	b11d      	cbz	r5, 800698a <_printf_i+0x19e>
 8006982:	2310      	movs	r3, #16
 8006984:	e7ac      	b.n	80068e0 <_printf_i+0xf4>
 8006986:	4827      	ldr	r0, [pc, #156]	@ (8006a24 <_printf_i+0x238>)
 8006988:	e7e9      	b.n	800695e <_printf_i+0x172>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	f023 0320 	bic.w	r3, r3, #32
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	e7f6      	b.n	8006982 <_printf_i+0x196>
 8006994:	4616      	mov	r6, r2
 8006996:	e7bd      	b.n	8006914 <_printf_i+0x128>
 8006998:	6833      	ldr	r3, [r6, #0]
 800699a:	6825      	ldr	r5, [r4, #0]
 800699c:	6961      	ldr	r1, [r4, #20]
 800699e:	1d18      	adds	r0, r3, #4
 80069a0:	6030      	str	r0, [r6, #0]
 80069a2:	062e      	lsls	r6, r5, #24
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	d501      	bpl.n	80069ac <_printf_i+0x1c0>
 80069a8:	6019      	str	r1, [r3, #0]
 80069aa:	e002      	b.n	80069b2 <_printf_i+0x1c6>
 80069ac:	0668      	lsls	r0, r5, #25
 80069ae:	d5fb      	bpl.n	80069a8 <_printf_i+0x1bc>
 80069b0:	8019      	strh	r1, [r3, #0]
 80069b2:	2300      	movs	r3, #0
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	4616      	mov	r6, r2
 80069b8:	e7bc      	b.n	8006934 <_printf_i+0x148>
 80069ba:	6833      	ldr	r3, [r6, #0]
 80069bc:	1d1a      	adds	r2, r3, #4
 80069be:	6032      	str	r2, [r6, #0]
 80069c0:	681e      	ldr	r6, [r3, #0]
 80069c2:	6862      	ldr	r2, [r4, #4]
 80069c4:	2100      	movs	r1, #0
 80069c6:	4630      	mov	r0, r6
 80069c8:	f7f9 fc02 	bl	80001d0 <memchr>
 80069cc:	b108      	cbz	r0, 80069d2 <_printf_i+0x1e6>
 80069ce:	1b80      	subs	r0, r0, r6
 80069d0:	6060      	str	r0, [r4, #4]
 80069d2:	6863      	ldr	r3, [r4, #4]
 80069d4:	6123      	str	r3, [r4, #16]
 80069d6:	2300      	movs	r3, #0
 80069d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069dc:	e7aa      	b.n	8006934 <_printf_i+0x148>
 80069de:	6923      	ldr	r3, [r4, #16]
 80069e0:	4632      	mov	r2, r6
 80069e2:	4649      	mov	r1, r9
 80069e4:	4640      	mov	r0, r8
 80069e6:	47d0      	blx	sl
 80069e8:	3001      	adds	r0, #1
 80069ea:	d0ad      	beq.n	8006948 <_printf_i+0x15c>
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	079b      	lsls	r3, r3, #30
 80069f0:	d413      	bmi.n	8006a1a <_printf_i+0x22e>
 80069f2:	68e0      	ldr	r0, [r4, #12]
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	4298      	cmp	r0, r3
 80069f8:	bfb8      	it	lt
 80069fa:	4618      	movlt	r0, r3
 80069fc:	e7a6      	b.n	800694c <_printf_i+0x160>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4632      	mov	r2, r6
 8006a02:	4649      	mov	r1, r9
 8006a04:	4640      	mov	r0, r8
 8006a06:	47d0      	blx	sl
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d09d      	beq.n	8006948 <_printf_i+0x15c>
 8006a0c:	3501      	adds	r5, #1
 8006a0e:	68e3      	ldr	r3, [r4, #12]
 8006a10:	9903      	ldr	r1, [sp, #12]
 8006a12:	1a5b      	subs	r3, r3, r1
 8006a14:	42ab      	cmp	r3, r5
 8006a16:	dcf2      	bgt.n	80069fe <_printf_i+0x212>
 8006a18:	e7eb      	b.n	80069f2 <_printf_i+0x206>
 8006a1a:	2500      	movs	r5, #0
 8006a1c:	f104 0619 	add.w	r6, r4, #25
 8006a20:	e7f5      	b.n	8006a0e <_printf_i+0x222>
 8006a22:	bf00      	nop
 8006a24:	08017359 	.word	0x08017359
 8006a28:	0801736a 	.word	0x0801736a

08006a2c <_scanf_float>:
 8006a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a30:	b087      	sub	sp, #28
 8006a32:	4617      	mov	r7, r2
 8006a34:	9303      	str	r3, [sp, #12]
 8006a36:	688b      	ldr	r3, [r1, #8]
 8006a38:	1e5a      	subs	r2, r3, #1
 8006a3a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006a3e:	bf81      	itttt	hi
 8006a40:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006a44:	eb03 0b05 	addhi.w	fp, r3, r5
 8006a48:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006a4c:	608b      	strhi	r3, [r1, #8]
 8006a4e:	680b      	ldr	r3, [r1, #0]
 8006a50:	460a      	mov	r2, r1
 8006a52:	f04f 0500 	mov.w	r5, #0
 8006a56:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006a5a:	f842 3b1c 	str.w	r3, [r2], #28
 8006a5e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a62:	4680      	mov	r8, r0
 8006a64:	460c      	mov	r4, r1
 8006a66:	bf98      	it	ls
 8006a68:	f04f 0b00 	movls.w	fp, #0
 8006a6c:	9201      	str	r2, [sp, #4]
 8006a6e:	4616      	mov	r6, r2
 8006a70:	46aa      	mov	sl, r5
 8006a72:	46a9      	mov	r9, r5
 8006a74:	9502      	str	r5, [sp, #8]
 8006a76:	68a2      	ldr	r2, [r4, #8]
 8006a78:	b152      	cbz	r2, 8006a90 <_scanf_float+0x64>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006a80:	d864      	bhi.n	8006b4c <_scanf_float+0x120>
 8006a82:	2b40      	cmp	r3, #64	@ 0x40
 8006a84:	d83c      	bhi.n	8006b00 <_scanf_float+0xd4>
 8006a86:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006a8a:	b2c8      	uxtb	r0, r1
 8006a8c:	280e      	cmp	r0, #14
 8006a8e:	d93a      	bls.n	8006b06 <_scanf_float+0xda>
 8006a90:	f1b9 0f00 	cmp.w	r9, #0
 8006a94:	d003      	beq.n	8006a9e <_scanf_float+0x72>
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aa2:	f1ba 0f01 	cmp.w	sl, #1
 8006aa6:	f200 8117 	bhi.w	8006cd8 <_scanf_float+0x2ac>
 8006aaa:	9b01      	ldr	r3, [sp, #4]
 8006aac:	429e      	cmp	r6, r3
 8006aae:	f200 8108 	bhi.w	8006cc2 <_scanf_float+0x296>
 8006ab2:	2001      	movs	r0, #1
 8006ab4:	b007      	add	sp, #28
 8006ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aba:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006abe:	2a0d      	cmp	r2, #13
 8006ac0:	d8e6      	bhi.n	8006a90 <_scanf_float+0x64>
 8006ac2:	a101      	add	r1, pc, #4	@ (adr r1, 8006ac8 <_scanf_float+0x9c>)
 8006ac4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006ac8:	08006c0f 	.word	0x08006c0f
 8006acc:	08006a91 	.word	0x08006a91
 8006ad0:	08006a91 	.word	0x08006a91
 8006ad4:	08006a91 	.word	0x08006a91
 8006ad8:	08006c6f 	.word	0x08006c6f
 8006adc:	08006c47 	.word	0x08006c47
 8006ae0:	08006a91 	.word	0x08006a91
 8006ae4:	08006a91 	.word	0x08006a91
 8006ae8:	08006c1d 	.word	0x08006c1d
 8006aec:	08006a91 	.word	0x08006a91
 8006af0:	08006a91 	.word	0x08006a91
 8006af4:	08006a91 	.word	0x08006a91
 8006af8:	08006a91 	.word	0x08006a91
 8006afc:	08006bd5 	.word	0x08006bd5
 8006b00:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006b04:	e7db      	b.n	8006abe <_scanf_float+0x92>
 8006b06:	290e      	cmp	r1, #14
 8006b08:	d8c2      	bhi.n	8006a90 <_scanf_float+0x64>
 8006b0a:	a001      	add	r0, pc, #4	@ (adr r0, 8006b10 <_scanf_float+0xe4>)
 8006b0c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b10:	08006bc5 	.word	0x08006bc5
 8006b14:	08006a91 	.word	0x08006a91
 8006b18:	08006bc5 	.word	0x08006bc5
 8006b1c:	08006c5b 	.word	0x08006c5b
 8006b20:	08006a91 	.word	0x08006a91
 8006b24:	08006b6d 	.word	0x08006b6d
 8006b28:	08006bab 	.word	0x08006bab
 8006b2c:	08006bab 	.word	0x08006bab
 8006b30:	08006bab 	.word	0x08006bab
 8006b34:	08006bab 	.word	0x08006bab
 8006b38:	08006bab 	.word	0x08006bab
 8006b3c:	08006bab 	.word	0x08006bab
 8006b40:	08006bab 	.word	0x08006bab
 8006b44:	08006bab 	.word	0x08006bab
 8006b48:	08006bab 	.word	0x08006bab
 8006b4c:	2b6e      	cmp	r3, #110	@ 0x6e
 8006b4e:	d809      	bhi.n	8006b64 <_scanf_float+0x138>
 8006b50:	2b60      	cmp	r3, #96	@ 0x60
 8006b52:	d8b2      	bhi.n	8006aba <_scanf_float+0x8e>
 8006b54:	2b54      	cmp	r3, #84	@ 0x54
 8006b56:	d07b      	beq.n	8006c50 <_scanf_float+0x224>
 8006b58:	2b59      	cmp	r3, #89	@ 0x59
 8006b5a:	d199      	bne.n	8006a90 <_scanf_float+0x64>
 8006b5c:	2d07      	cmp	r5, #7
 8006b5e:	d197      	bne.n	8006a90 <_scanf_float+0x64>
 8006b60:	2508      	movs	r5, #8
 8006b62:	e02c      	b.n	8006bbe <_scanf_float+0x192>
 8006b64:	2b74      	cmp	r3, #116	@ 0x74
 8006b66:	d073      	beq.n	8006c50 <_scanf_float+0x224>
 8006b68:	2b79      	cmp	r3, #121	@ 0x79
 8006b6a:	e7f6      	b.n	8006b5a <_scanf_float+0x12e>
 8006b6c:	6821      	ldr	r1, [r4, #0]
 8006b6e:	05c8      	lsls	r0, r1, #23
 8006b70:	d51b      	bpl.n	8006baa <_scanf_float+0x17e>
 8006b72:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006b76:	6021      	str	r1, [r4, #0]
 8006b78:	f109 0901 	add.w	r9, r9, #1
 8006b7c:	f1bb 0f00 	cmp.w	fp, #0
 8006b80:	d003      	beq.n	8006b8a <_scanf_float+0x15e>
 8006b82:	3201      	adds	r2, #1
 8006b84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b88:	60a2      	str	r2, [r4, #8]
 8006b8a:	68a3      	ldr	r3, [r4, #8]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	60a3      	str	r3, [r4, #8]
 8006b90:	6923      	ldr	r3, [r4, #16]
 8006b92:	3301      	adds	r3, #1
 8006b94:	6123      	str	r3, [r4, #16]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	607b      	str	r3, [r7, #4]
 8006b9e:	f340 8087 	ble.w	8006cb0 <_scanf_float+0x284>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	e765      	b.n	8006a76 <_scanf_float+0x4a>
 8006baa:	eb1a 0105 	adds.w	r1, sl, r5
 8006bae:	f47f af6f 	bne.w	8006a90 <_scanf_float+0x64>
 8006bb2:	6822      	ldr	r2, [r4, #0]
 8006bb4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006bb8:	6022      	str	r2, [r4, #0]
 8006bba:	460d      	mov	r5, r1
 8006bbc:	468a      	mov	sl, r1
 8006bbe:	f806 3b01 	strb.w	r3, [r6], #1
 8006bc2:	e7e2      	b.n	8006b8a <_scanf_float+0x15e>
 8006bc4:	6822      	ldr	r2, [r4, #0]
 8006bc6:	0610      	lsls	r0, r2, #24
 8006bc8:	f57f af62 	bpl.w	8006a90 <_scanf_float+0x64>
 8006bcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bd0:	6022      	str	r2, [r4, #0]
 8006bd2:	e7f4      	b.n	8006bbe <_scanf_float+0x192>
 8006bd4:	f1ba 0f00 	cmp.w	sl, #0
 8006bd8:	d10e      	bne.n	8006bf8 <_scanf_float+0x1cc>
 8006bda:	f1b9 0f00 	cmp.w	r9, #0
 8006bde:	d10e      	bne.n	8006bfe <_scanf_float+0x1d2>
 8006be0:	6822      	ldr	r2, [r4, #0]
 8006be2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006be6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006bea:	d108      	bne.n	8006bfe <_scanf_float+0x1d2>
 8006bec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006bf0:	6022      	str	r2, [r4, #0]
 8006bf2:	f04f 0a01 	mov.w	sl, #1
 8006bf6:	e7e2      	b.n	8006bbe <_scanf_float+0x192>
 8006bf8:	f1ba 0f02 	cmp.w	sl, #2
 8006bfc:	d055      	beq.n	8006caa <_scanf_float+0x27e>
 8006bfe:	2d01      	cmp	r5, #1
 8006c00:	d002      	beq.n	8006c08 <_scanf_float+0x1dc>
 8006c02:	2d04      	cmp	r5, #4
 8006c04:	f47f af44 	bne.w	8006a90 <_scanf_float+0x64>
 8006c08:	3501      	adds	r5, #1
 8006c0a:	b2ed      	uxtb	r5, r5
 8006c0c:	e7d7      	b.n	8006bbe <_scanf_float+0x192>
 8006c0e:	f1ba 0f01 	cmp.w	sl, #1
 8006c12:	f47f af3d 	bne.w	8006a90 <_scanf_float+0x64>
 8006c16:	f04f 0a02 	mov.w	sl, #2
 8006c1a:	e7d0      	b.n	8006bbe <_scanf_float+0x192>
 8006c1c:	b97d      	cbnz	r5, 8006c3e <_scanf_float+0x212>
 8006c1e:	f1b9 0f00 	cmp.w	r9, #0
 8006c22:	f47f af38 	bne.w	8006a96 <_scanf_float+0x6a>
 8006c26:	6822      	ldr	r2, [r4, #0]
 8006c28:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006c2c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006c30:	f040 8108 	bne.w	8006e44 <_scanf_float+0x418>
 8006c34:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006c38:	6022      	str	r2, [r4, #0]
 8006c3a:	2501      	movs	r5, #1
 8006c3c:	e7bf      	b.n	8006bbe <_scanf_float+0x192>
 8006c3e:	2d03      	cmp	r5, #3
 8006c40:	d0e2      	beq.n	8006c08 <_scanf_float+0x1dc>
 8006c42:	2d05      	cmp	r5, #5
 8006c44:	e7de      	b.n	8006c04 <_scanf_float+0x1d8>
 8006c46:	2d02      	cmp	r5, #2
 8006c48:	f47f af22 	bne.w	8006a90 <_scanf_float+0x64>
 8006c4c:	2503      	movs	r5, #3
 8006c4e:	e7b6      	b.n	8006bbe <_scanf_float+0x192>
 8006c50:	2d06      	cmp	r5, #6
 8006c52:	f47f af1d 	bne.w	8006a90 <_scanf_float+0x64>
 8006c56:	2507      	movs	r5, #7
 8006c58:	e7b1      	b.n	8006bbe <_scanf_float+0x192>
 8006c5a:	6822      	ldr	r2, [r4, #0]
 8006c5c:	0591      	lsls	r1, r2, #22
 8006c5e:	f57f af17 	bpl.w	8006a90 <_scanf_float+0x64>
 8006c62:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006c66:	6022      	str	r2, [r4, #0]
 8006c68:	f8cd 9008 	str.w	r9, [sp, #8]
 8006c6c:	e7a7      	b.n	8006bbe <_scanf_float+0x192>
 8006c6e:	6822      	ldr	r2, [r4, #0]
 8006c70:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006c74:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006c78:	d006      	beq.n	8006c88 <_scanf_float+0x25c>
 8006c7a:	0550      	lsls	r0, r2, #21
 8006c7c:	f57f af08 	bpl.w	8006a90 <_scanf_float+0x64>
 8006c80:	f1b9 0f00 	cmp.w	r9, #0
 8006c84:	f000 80de 	beq.w	8006e44 <_scanf_float+0x418>
 8006c88:	0591      	lsls	r1, r2, #22
 8006c8a:	bf58      	it	pl
 8006c8c:	9902      	ldrpl	r1, [sp, #8]
 8006c8e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006c92:	bf58      	it	pl
 8006c94:	eba9 0101 	subpl.w	r1, r9, r1
 8006c98:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006c9c:	bf58      	it	pl
 8006c9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ca2:	6022      	str	r2, [r4, #0]
 8006ca4:	f04f 0900 	mov.w	r9, #0
 8006ca8:	e789      	b.n	8006bbe <_scanf_float+0x192>
 8006caa:	f04f 0a03 	mov.w	sl, #3
 8006cae:	e786      	b.n	8006bbe <_scanf_float+0x192>
 8006cb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006cb4:	4639      	mov	r1, r7
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	4798      	blx	r3
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	f43f aedb 	beq.w	8006a76 <_scanf_float+0x4a>
 8006cc0:	e6e6      	b.n	8006a90 <_scanf_float+0x64>
 8006cc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006cc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cca:	463a      	mov	r2, r7
 8006ccc:	4640      	mov	r0, r8
 8006cce:	4798      	blx	r3
 8006cd0:	6923      	ldr	r3, [r4, #16]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	6123      	str	r3, [r4, #16]
 8006cd6:	e6e8      	b.n	8006aaa <_scanf_float+0x7e>
 8006cd8:	1e6b      	subs	r3, r5, #1
 8006cda:	2b06      	cmp	r3, #6
 8006cdc:	d824      	bhi.n	8006d28 <_scanf_float+0x2fc>
 8006cde:	2d02      	cmp	r5, #2
 8006ce0:	d836      	bhi.n	8006d50 <_scanf_float+0x324>
 8006ce2:	9b01      	ldr	r3, [sp, #4]
 8006ce4:	429e      	cmp	r6, r3
 8006ce6:	f67f aee4 	bls.w	8006ab2 <_scanf_float+0x86>
 8006cea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006cee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cf2:	463a      	mov	r2, r7
 8006cf4:	4640      	mov	r0, r8
 8006cf6:	4798      	blx	r3
 8006cf8:	6923      	ldr	r3, [r4, #16]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	6123      	str	r3, [r4, #16]
 8006cfe:	e7f0      	b.n	8006ce2 <_scanf_float+0x2b6>
 8006d00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d04:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006d08:	463a      	mov	r2, r7
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	4798      	blx	r3
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	3b01      	subs	r3, #1
 8006d12:	6123      	str	r3, [r4, #16]
 8006d14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d18:	fa5f fa8a 	uxtb.w	sl, sl
 8006d1c:	f1ba 0f02 	cmp.w	sl, #2
 8006d20:	d1ee      	bne.n	8006d00 <_scanf_float+0x2d4>
 8006d22:	3d03      	subs	r5, #3
 8006d24:	b2ed      	uxtb	r5, r5
 8006d26:	1b76      	subs	r6, r6, r5
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	05da      	lsls	r2, r3, #23
 8006d2c:	d530      	bpl.n	8006d90 <_scanf_float+0x364>
 8006d2e:	055b      	lsls	r3, r3, #21
 8006d30:	d511      	bpl.n	8006d56 <_scanf_float+0x32a>
 8006d32:	9b01      	ldr	r3, [sp, #4]
 8006d34:	429e      	cmp	r6, r3
 8006d36:	f67f aebc 	bls.w	8006ab2 <_scanf_float+0x86>
 8006d3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d42:	463a      	mov	r2, r7
 8006d44:	4640      	mov	r0, r8
 8006d46:	4798      	blx	r3
 8006d48:	6923      	ldr	r3, [r4, #16]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	6123      	str	r3, [r4, #16]
 8006d4e:	e7f0      	b.n	8006d32 <_scanf_float+0x306>
 8006d50:	46aa      	mov	sl, r5
 8006d52:	46b3      	mov	fp, r6
 8006d54:	e7de      	b.n	8006d14 <_scanf_float+0x2e8>
 8006d56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d5a:	6923      	ldr	r3, [r4, #16]
 8006d5c:	2965      	cmp	r1, #101	@ 0x65
 8006d5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d62:	f106 35ff 	add.w	r5, r6, #4294967295
 8006d66:	6123      	str	r3, [r4, #16]
 8006d68:	d00c      	beq.n	8006d84 <_scanf_float+0x358>
 8006d6a:	2945      	cmp	r1, #69	@ 0x45
 8006d6c:	d00a      	beq.n	8006d84 <_scanf_float+0x358>
 8006d6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d72:	463a      	mov	r2, r7
 8006d74:	4640      	mov	r0, r8
 8006d76:	4798      	blx	r3
 8006d78:	6923      	ldr	r3, [r4, #16]
 8006d7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	1eb5      	subs	r5, r6, #2
 8006d82:	6123      	str	r3, [r4, #16]
 8006d84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d88:	463a      	mov	r2, r7
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	4798      	blx	r3
 8006d8e:	462e      	mov	r6, r5
 8006d90:	6822      	ldr	r2, [r4, #0]
 8006d92:	f012 0210 	ands.w	r2, r2, #16
 8006d96:	d001      	beq.n	8006d9c <_scanf_float+0x370>
 8006d98:	2000      	movs	r0, #0
 8006d9a:	e68b      	b.n	8006ab4 <_scanf_float+0x88>
 8006d9c:	7032      	strb	r2, [r6, #0]
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006da4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006da8:	d11c      	bne.n	8006de4 <_scanf_float+0x3b8>
 8006daa:	9b02      	ldr	r3, [sp, #8]
 8006dac:	454b      	cmp	r3, r9
 8006dae:	eba3 0209 	sub.w	r2, r3, r9
 8006db2:	d123      	bne.n	8006dfc <_scanf_float+0x3d0>
 8006db4:	9901      	ldr	r1, [sp, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	4640      	mov	r0, r8
 8006dba:	f002 fd19 	bl	80097f0 <_strtod_r>
 8006dbe:	9b03      	ldr	r3, [sp, #12]
 8006dc0:	6821      	ldr	r1, [r4, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f011 0f02 	tst.w	r1, #2
 8006dc8:	ec57 6b10 	vmov	r6, r7, d0
 8006dcc:	f103 0204 	add.w	r2, r3, #4
 8006dd0:	d01f      	beq.n	8006e12 <_scanf_float+0x3e6>
 8006dd2:	9903      	ldr	r1, [sp, #12]
 8006dd4:	600a      	str	r2, [r1, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	e9c3 6700 	strd	r6, r7, [r3]
 8006ddc:	68e3      	ldr	r3, [r4, #12]
 8006dde:	3301      	adds	r3, #1
 8006de0:	60e3      	str	r3, [r4, #12]
 8006de2:	e7d9      	b.n	8006d98 <_scanf_float+0x36c>
 8006de4:	9b04      	ldr	r3, [sp, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0e4      	beq.n	8006db4 <_scanf_float+0x388>
 8006dea:	9905      	ldr	r1, [sp, #20]
 8006dec:	230a      	movs	r3, #10
 8006dee:	3101      	adds	r1, #1
 8006df0:	4640      	mov	r0, r8
 8006df2:	f002 fd7d 	bl	80098f0 <_strtol_r>
 8006df6:	9b04      	ldr	r3, [sp, #16]
 8006df8:	9e05      	ldr	r6, [sp, #20]
 8006dfa:	1ac2      	subs	r2, r0, r3
 8006dfc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006e00:	429e      	cmp	r6, r3
 8006e02:	bf28      	it	cs
 8006e04:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006e08:	4910      	ldr	r1, [pc, #64]	@ (8006e4c <_scanf_float+0x420>)
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f000 f954 	bl	80070b8 <siprintf>
 8006e10:	e7d0      	b.n	8006db4 <_scanf_float+0x388>
 8006e12:	f011 0f04 	tst.w	r1, #4
 8006e16:	9903      	ldr	r1, [sp, #12]
 8006e18:	600a      	str	r2, [r1, #0]
 8006e1a:	d1dc      	bne.n	8006dd6 <_scanf_float+0x3aa>
 8006e1c:	681d      	ldr	r5, [r3, #0]
 8006e1e:	4632      	mov	r2, r6
 8006e20:	463b      	mov	r3, r7
 8006e22:	4630      	mov	r0, r6
 8006e24:	4639      	mov	r1, r7
 8006e26:	f7f9 fe81 	bl	8000b2c <__aeabi_dcmpun>
 8006e2a:	b128      	cbz	r0, 8006e38 <_scanf_float+0x40c>
 8006e2c:	4808      	ldr	r0, [pc, #32]	@ (8006e50 <_scanf_float+0x424>)
 8006e2e:	f000 fabb 	bl	80073a8 <nanf>
 8006e32:	ed85 0a00 	vstr	s0, [r5]
 8006e36:	e7d1      	b.n	8006ddc <_scanf_float+0x3b0>
 8006e38:	4630      	mov	r0, r6
 8006e3a:	4639      	mov	r1, r7
 8006e3c:	f7f9 fed4 	bl	8000be8 <__aeabi_d2f>
 8006e40:	6028      	str	r0, [r5, #0]
 8006e42:	e7cb      	b.n	8006ddc <_scanf_float+0x3b0>
 8006e44:	f04f 0900 	mov.w	r9, #0
 8006e48:	e629      	b.n	8006a9e <_scanf_float+0x72>
 8006e4a:	bf00      	nop
 8006e4c:	0801737b 	.word	0x0801737b
 8006e50:	080173bb 	.word	0x080173bb

08006e54 <std>:
 8006e54:	2300      	movs	r3, #0
 8006e56:	b510      	push	{r4, lr}
 8006e58:	4604      	mov	r4, r0
 8006e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e62:	6083      	str	r3, [r0, #8]
 8006e64:	8181      	strh	r1, [r0, #12]
 8006e66:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e68:	81c2      	strh	r2, [r0, #14]
 8006e6a:	6183      	str	r3, [r0, #24]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	2208      	movs	r2, #8
 8006e70:	305c      	adds	r0, #92	@ 0x5c
 8006e72:	f000 fa19 	bl	80072a8 <memset>
 8006e76:	4b0d      	ldr	r3, [pc, #52]	@ (8006eac <std+0x58>)
 8006e78:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb0 <std+0x5c>)
 8006e7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb4 <std+0x60>)
 8006e80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e82:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb8 <std+0x64>)
 8006e84:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e86:	4b0d      	ldr	r3, [pc, #52]	@ (8006ebc <std+0x68>)
 8006e88:	6224      	str	r4, [r4, #32]
 8006e8a:	429c      	cmp	r4, r3
 8006e8c:	d006      	beq.n	8006e9c <std+0x48>
 8006e8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e92:	4294      	cmp	r4, r2
 8006e94:	d002      	beq.n	8006e9c <std+0x48>
 8006e96:	33d0      	adds	r3, #208	@ 0xd0
 8006e98:	429c      	cmp	r4, r3
 8006e9a:	d105      	bne.n	8006ea8 <std+0x54>
 8006e9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea4:	f000 ba7c 	b.w	80073a0 <__retarget_lock_init_recursive>
 8006ea8:	bd10      	pop	{r4, pc}
 8006eaa:	bf00      	nop
 8006eac:	080070f9 	.word	0x080070f9
 8006eb0:	0800711b 	.word	0x0800711b
 8006eb4:	08007153 	.word	0x08007153
 8006eb8:	08007177 	.word	0x08007177
 8006ebc:	20007b58 	.word	0x20007b58

08006ec0 <stdio_exit_handler>:
 8006ec0:	4a02      	ldr	r2, [pc, #8]	@ (8006ecc <stdio_exit_handler+0xc>)
 8006ec2:	4903      	ldr	r1, [pc, #12]	@ (8006ed0 <stdio_exit_handler+0x10>)
 8006ec4:	4803      	ldr	r0, [pc, #12]	@ (8006ed4 <stdio_exit_handler+0x14>)
 8006ec6:	f000 b869 	b.w	8006f9c <_fwalk_sglue>
 8006eca:	bf00      	nop
 8006ecc:	20000030 	.word	0x20000030
 8006ed0:	08009f31 	.word	0x08009f31
 8006ed4:	20000040 	.word	0x20000040

08006ed8 <cleanup_stdio>:
 8006ed8:	6841      	ldr	r1, [r0, #4]
 8006eda:	4b0c      	ldr	r3, [pc, #48]	@ (8006f0c <cleanup_stdio+0x34>)
 8006edc:	4299      	cmp	r1, r3
 8006ede:	b510      	push	{r4, lr}
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	d001      	beq.n	8006ee8 <cleanup_stdio+0x10>
 8006ee4:	f003 f824 	bl	8009f30 <_fflush_r>
 8006ee8:	68a1      	ldr	r1, [r4, #8]
 8006eea:	4b09      	ldr	r3, [pc, #36]	@ (8006f10 <cleanup_stdio+0x38>)
 8006eec:	4299      	cmp	r1, r3
 8006eee:	d002      	beq.n	8006ef6 <cleanup_stdio+0x1e>
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f003 f81d 	bl	8009f30 <_fflush_r>
 8006ef6:	68e1      	ldr	r1, [r4, #12]
 8006ef8:	4b06      	ldr	r3, [pc, #24]	@ (8006f14 <cleanup_stdio+0x3c>)
 8006efa:	4299      	cmp	r1, r3
 8006efc:	d004      	beq.n	8006f08 <cleanup_stdio+0x30>
 8006efe:	4620      	mov	r0, r4
 8006f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f04:	f003 b814 	b.w	8009f30 <_fflush_r>
 8006f08:	bd10      	pop	{r4, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20007b58 	.word	0x20007b58
 8006f10:	20007bc0 	.word	0x20007bc0
 8006f14:	20007c28 	.word	0x20007c28

08006f18 <global_stdio_init.part.0>:
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f48 <global_stdio_init.part.0+0x30>)
 8006f1c:	4c0b      	ldr	r4, [pc, #44]	@ (8006f4c <global_stdio_init.part.0+0x34>)
 8006f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8006f50 <global_stdio_init.part.0+0x38>)
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	4620      	mov	r0, r4
 8006f24:	2200      	movs	r2, #0
 8006f26:	2104      	movs	r1, #4
 8006f28:	f7ff ff94 	bl	8006e54 <std>
 8006f2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f30:	2201      	movs	r2, #1
 8006f32:	2109      	movs	r1, #9
 8006f34:	f7ff ff8e 	bl	8006e54 <std>
 8006f38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f42:	2112      	movs	r1, #18
 8006f44:	f7ff bf86 	b.w	8006e54 <std>
 8006f48:	20007c90 	.word	0x20007c90
 8006f4c:	20007b58 	.word	0x20007b58
 8006f50:	08006ec1 	.word	0x08006ec1

08006f54 <__sfp_lock_acquire>:
 8006f54:	4801      	ldr	r0, [pc, #4]	@ (8006f5c <__sfp_lock_acquire+0x8>)
 8006f56:	f000 ba24 	b.w	80073a2 <__retarget_lock_acquire_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	20007c99 	.word	0x20007c99

08006f60 <__sfp_lock_release>:
 8006f60:	4801      	ldr	r0, [pc, #4]	@ (8006f68 <__sfp_lock_release+0x8>)
 8006f62:	f000 ba1f 	b.w	80073a4 <__retarget_lock_release_recursive>
 8006f66:	bf00      	nop
 8006f68:	20007c99 	.word	0x20007c99

08006f6c <__sinit>:
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	4604      	mov	r4, r0
 8006f70:	f7ff fff0 	bl	8006f54 <__sfp_lock_acquire>
 8006f74:	6a23      	ldr	r3, [r4, #32]
 8006f76:	b11b      	cbz	r3, 8006f80 <__sinit+0x14>
 8006f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f7c:	f7ff bff0 	b.w	8006f60 <__sfp_lock_release>
 8006f80:	4b04      	ldr	r3, [pc, #16]	@ (8006f94 <__sinit+0x28>)
 8006f82:	6223      	str	r3, [r4, #32]
 8006f84:	4b04      	ldr	r3, [pc, #16]	@ (8006f98 <__sinit+0x2c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1f5      	bne.n	8006f78 <__sinit+0xc>
 8006f8c:	f7ff ffc4 	bl	8006f18 <global_stdio_init.part.0>
 8006f90:	e7f2      	b.n	8006f78 <__sinit+0xc>
 8006f92:	bf00      	nop
 8006f94:	08006ed9 	.word	0x08006ed9
 8006f98:	20007c90 	.word	0x20007c90

08006f9c <_fwalk_sglue>:
 8006f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	4688      	mov	r8, r1
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fac:	f1b9 0901 	subs.w	r9, r9, #1
 8006fb0:	d505      	bpl.n	8006fbe <_fwalk_sglue+0x22>
 8006fb2:	6824      	ldr	r4, [r4, #0]
 8006fb4:	2c00      	cmp	r4, #0
 8006fb6:	d1f7      	bne.n	8006fa8 <_fwalk_sglue+0xc>
 8006fb8:	4630      	mov	r0, r6
 8006fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fbe:	89ab      	ldrh	r3, [r5, #12]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d907      	bls.n	8006fd4 <_fwalk_sglue+0x38>
 8006fc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	d003      	beq.n	8006fd4 <_fwalk_sglue+0x38>
 8006fcc:	4629      	mov	r1, r5
 8006fce:	4638      	mov	r0, r7
 8006fd0:	47c0      	blx	r8
 8006fd2:	4306      	orrs	r6, r0
 8006fd4:	3568      	adds	r5, #104	@ 0x68
 8006fd6:	e7e9      	b.n	8006fac <_fwalk_sglue+0x10>

08006fd8 <iprintf>:
 8006fd8:	b40f      	push	{r0, r1, r2, r3}
 8006fda:	b507      	push	{r0, r1, r2, lr}
 8006fdc:	4906      	ldr	r1, [pc, #24]	@ (8006ff8 <iprintf+0x20>)
 8006fde:	ab04      	add	r3, sp, #16
 8006fe0:	6808      	ldr	r0, [r1, #0]
 8006fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe6:	6881      	ldr	r1, [r0, #8]
 8006fe8:	9301      	str	r3, [sp, #4]
 8006fea:	f002 fe05 	bl	8009bf8 <_vfiprintf_r>
 8006fee:	b003      	add	sp, #12
 8006ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ff4:	b004      	add	sp, #16
 8006ff6:	4770      	bx	lr
 8006ff8:	2000003c 	.word	0x2000003c

08006ffc <_puts_r>:
 8006ffc:	6a03      	ldr	r3, [r0, #32]
 8006ffe:	b570      	push	{r4, r5, r6, lr}
 8007000:	6884      	ldr	r4, [r0, #8]
 8007002:	4605      	mov	r5, r0
 8007004:	460e      	mov	r6, r1
 8007006:	b90b      	cbnz	r3, 800700c <_puts_r+0x10>
 8007008:	f7ff ffb0 	bl	8006f6c <__sinit>
 800700c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800700e:	07db      	lsls	r3, r3, #31
 8007010:	d405      	bmi.n	800701e <_puts_r+0x22>
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	0598      	lsls	r0, r3, #22
 8007016:	d402      	bmi.n	800701e <_puts_r+0x22>
 8007018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800701a:	f000 f9c2 	bl	80073a2 <__retarget_lock_acquire_recursive>
 800701e:	89a3      	ldrh	r3, [r4, #12]
 8007020:	0719      	lsls	r1, r3, #28
 8007022:	d502      	bpl.n	800702a <_puts_r+0x2e>
 8007024:	6923      	ldr	r3, [r4, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d135      	bne.n	8007096 <_puts_r+0x9a>
 800702a:	4621      	mov	r1, r4
 800702c:	4628      	mov	r0, r5
 800702e:	f000 f8e5 	bl	80071fc <__swsetup_r>
 8007032:	b380      	cbz	r0, 8007096 <_puts_r+0x9a>
 8007034:	f04f 35ff 	mov.w	r5, #4294967295
 8007038:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800703a:	07da      	lsls	r2, r3, #31
 800703c:	d405      	bmi.n	800704a <_puts_r+0x4e>
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	059b      	lsls	r3, r3, #22
 8007042:	d402      	bmi.n	800704a <_puts_r+0x4e>
 8007044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007046:	f000 f9ad 	bl	80073a4 <__retarget_lock_release_recursive>
 800704a:	4628      	mov	r0, r5
 800704c:	bd70      	pop	{r4, r5, r6, pc}
 800704e:	2b00      	cmp	r3, #0
 8007050:	da04      	bge.n	800705c <_puts_r+0x60>
 8007052:	69a2      	ldr	r2, [r4, #24]
 8007054:	429a      	cmp	r2, r3
 8007056:	dc17      	bgt.n	8007088 <_puts_r+0x8c>
 8007058:	290a      	cmp	r1, #10
 800705a:	d015      	beq.n	8007088 <_puts_r+0x8c>
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	6022      	str	r2, [r4, #0]
 8007062:	7019      	strb	r1, [r3, #0]
 8007064:	68a3      	ldr	r3, [r4, #8]
 8007066:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800706a:	3b01      	subs	r3, #1
 800706c:	60a3      	str	r3, [r4, #8]
 800706e:	2900      	cmp	r1, #0
 8007070:	d1ed      	bne.n	800704e <_puts_r+0x52>
 8007072:	2b00      	cmp	r3, #0
 8007074:	da11      	bge.n	800709a <_puts_r+0x9e>
 8007076:	4622      	mov	r2, r4
 8007078:	210a      	movs	r1, #10
 800707a:	4628      	mov	r0, r5
 800707c:	f000 f87f 	bl	800717e <__swbuf_r>
 8007080:	3001      	adds	r0, #1
 8007082:	d0d7      	beq.n	8007034 <_puts_r+0x38>
 8007084:	250a      	movs	r5, #10
 8007086:	e7d7      	b.n	8007038 <_puts_r+0x3c>
 8007088:	4622      	mov	r2, r4
 800708a:	4628      	mov	r0, r5
 800708c:	f000 f877 	bl	800717e <__swbuf_r>
 8007090:	3001      	adds	r0, #1
 8007092:	d1e7      	bne.n	8007064 <_puts_r+0x68>
 8007094:	e7ce      	b.n	8007034 <_puts_r+0x38>
 8007096:	3e01      	subs	r6, #1
 8007098:	e7e4      	b.n	8007064 <_puts_r+0x68>
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	6022      	str	r2, [r4, #0]
 80070a0:	220a      	movs	r2, #10
 80070a2:	701a      	strb	r2, [r3, #0]
 80070a4:	e7ee      	b.n	8007084 <_puts_r+0x88>
	...

080070a8 <puts>:
 80070a8:	4b02      	ldr	r3, [pc, #8]	@ (80070b4 <puts+0xc>)
 80070aa:	4601      	mov	r1, r0
 80070ac:	6818      	ldr	r0, [r3, #0]
 80070ae:	f7ff bfa5 	b.w	8006ffc <_puts_r>
 80070b2:	bf00      	nop
 80070b4:	2000003c 	.word	0x2000003c

080070b8 <siprintf>:
 80070b8:	b40e      	push	{r1, r2, r3}
 80070ba:	b500      	push	{lr}
 80070bc:	b09c      	sub	sp, #112	@ 0x70
 80070be:	ab1d      	add	r3, sp, #116	@ 0x74
 80070c0:	9002      	str	r0, [sp, #8]
 80070c2:	9006      	str	r0, [sp, #24]
 80070c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80070c8:	4809      	ldr	r0, [pc, #36]	@ (80070f0 <siprintf+0x38>)
 80070ca:	9107      	str	r1, [sp, #28]
 80070cc:	9104      	str	r1, [sp, #16]
 80070ce:	4909      	ldr	r1, [pc, #36]	@ (80070f4 <siprintf+0x3c>)
 80070d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070d4:	9105      	str	r1, [sp, #20]
 80070d6:	6800      	ldr	r0, [r0, #0]
 80070d8:	9301      	str	r3, [sp, #4]
 80070da:	a902      	add	r1, sp, #8
 80070dc:	f002 fc66 	bl	80099ac <_svfiprintf_r>
 80070e0:	9b02      	ldr	r3, [sp, #8]
 80070e2:	2200      	movs	r2, #0
 80070e4:	701a      	strb	r2, [r3, #0]
 80070e6:	b01c      	add	sp, #112	@ 0x70
 80070e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070ec:	b003      	add	sp, #12
 80070ee:	4770      	bx	lr
 80070f0:	2000003c 	.word	0x2000003c
 80070f4:	ffff0208 	.word	0xffff0208

080070f8 <__sread>:
 80070f8:	b510      	push	{r4, lr}
 80070fa:	460c      	mov	r4, r1
 80070fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007100:	f000 f900 	bl	8007304 <_read_r>
 8007104:	2800      	cmp	r0, #0
 8007106:	bfab      	itete	ge
 8007108:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800710a:	89a3      	ldrhlt	r3, [r4, #12]
 800710c:	181b      	addge	r3, r3, r0
 800710e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007112:	bfac      	ite	ge
 8007114:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007116:	81a3      	strhlt	r3, [r4, #12]
 8007118:	bd10      	pop	{r4, pc}

0800711a <__swrite>:
 800711a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800711e:	461f      	mov	r7, r3
 8007120:	898b      	ldrh	r3, [r1, #12]
 8007122:	05db      	lsls	r3, r3, #23
 8007124:	4605      	mov	r5, r0
 8007126:	460c      	mov	r4, r1
 8007128:	4616      	mov	r6, r2
 800712a:	d505      	bpl.n	8007138 <__swrite+0x1e>
 800712c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007130:	2302      	movs	r3, #2
 8007132:	2200      	movs	r2, #0
 8007134:	f000 f8d4 	bl	80072e0 <_lseek_r>
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800713e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007142:	81a3      	strh	r3, [r4, #12]
 8007144:	4632      	mov	r2, r6
 8007146:	463b      	mov	r3, r7
 8007148:	4628      	mov	r0, r5
 800714a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800714e:	f000 b8eb 	b.w	8007328 <_write_r>

08007152 <__sseek>:
 8007152:	b510      	push	{r4, lr}
 8007154:	460c      	mov	r4, r1
 8007156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800715a:	f000 f8c1 	bl	80072e0 <_lseek_r>
 800715e:	1c43      	adds	r3, r0, #1
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	bf15      	itete	ne
 8007164:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007166:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800716a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800716e:	81a3      	strheq	r3, [r4, #12]
 8007170:	bf18      	it	ne
 8007172:	81a3      	strhne	r3, [r4, #12]
 8007174:	bd10      	pop	{r4, pc}

08007176 <__sclose>:
 8007176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800717a:	f000 b8a1 	b.w	80072c0 <_close_r>

0800717e <__swbuf_r>:
 800717e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007180:	460e      	mov	r6, r1
 8007182:	4614      	mov	r4, r2
 8007184:	4605      	mov	r5, r0
 8007186:	b118      	cbz	r0, 8007190 <__swbuf_r+0x12>
 8007188:	6a03      	ldr	r3, [r0, #32]
 800718a:	b90b      	cbnz	r3, 8007190 <__swbuf_r+0x12>
 800718c:	f7ff feee 	bl	8006f6c <__sinit>
 8007190:	69a3      	ldr	r3, [r4, #24]
 8007192:	60a3      	str	r3, [r4, #8]
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	071a      	lsls	r2, r3, #28
 8007198:	d501      	bpl.n	800719e <__swbuf_r+0x20>
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	b943      	cbnz	r3, 80071b0 <__swbuf_r+0x32>
 800719e:	4621      	mov	r1, r4
 80071a0:	4628      	mov	r0, r5
 80071a2:	f000 f82b 	bl	80071fc <__swsetup_r>
 80071a6:	b118      	cbz	r0, 80071b0 <__swbuf_r+0x32>
 80071a8:	f04f 37ff 	mov.w	r7, #4294967295
 80071ac:	4638      	mov	r0, r7
 80071ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	6922      	ldr	r2, [r4, #16]
 80071b4:	1a98      	subs	r0, r3, r2
 80071b6:	6963      	ldr	r3, [r4, #20]
 80071b8:	b2f6      	uxtb	r6, r6
 80071ba:	4283      	cmp	r3, r0
 80071bc:	4637      	mov	r7, r6
 80071be:	dc05      	bgt.n	80071cc <__swbuf_r+0x4e>
 80071c0:	4621      	mov	r1, r4
 80071c2:	4628      	mov	r0, r5
 80071c4:	f002 feb4 	bl	8009f30 <_fflush_r>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d1ed      	bne.n	80071a8 <__swbuf_r+0x2a>
 80071cc:	68a3      	ldr	r3, [r4, #8]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	60a3      	str	r3, [r4, #8]
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	6022      	str	r2, [r4, #0]
 80071d8:	701e      	strb	r6, [r3, #0]
 80071da:	6962      	ldr	r2, [r4, #20]
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	429a      	cmp	r2, r3
 80071e0:	d004      	beq.n	80071ec <__swbuf_r+0x6e>
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	07db      	lsls	r3, r3, #31
 80071e6:	d5e1      	bpl.n	80071ac <__swbuf_r+0x2e>
 80071e8:	2e0a      	cmp	r6, #10
 80071ea:	d1df      	bne.n	80071ac <__swbuf_r+0x2e>
 80071ec:	4621      	mov	r1, r4
 80071ee:	4628      	mov	r0, r5
 80071f0:	f002 fe9e 	bl	8009f30 <_fflush_r>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d0d9      	beq.n	80071ac <__swbuf_r+0x2e>
 80071f8:	e7d6      	b.n	80071a8 <__swbuf_r+0x2a>
	...

080071fc <__swsetup_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	4b29      	ldr	r3, [pc, #164]	@ (80072a4 <__swsetup_r+0xa8>)
 8007200:	4605      	mov	r5, r0
 8007202:	6818      	ldr	r0, [r3, #0]
 8007204:	460c      	mov	r4, r1
 8007206:	b118      	cbz	r0, 8007210 <__swsetup_r+0x14>
 8007208:	6a03      	ldr	r3, [r0, #32]
 800720a:	b90b      	cbnz	r3, 8007210 <__swsetup_r+0x14>
 800720c:	f7ff feae 	bl	8006f6c <__sinit>
 8007210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007214:	0719      	lsls	r1, r3, #28
 8007216:	d422      	bmi.n	800725e <__swsetup_r+0x62>
 8007218:	06da      	lsls	r2, r3, #27
 800721a:	d407      	bmi.n	800722c <__swsetup_r+0x30>
 800721c:	2209      	movs	r2, #9
 800721e:	602a      	str	r2, [r5, #0]
 8007220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007224:	81a3      	strh	r3, [r4, #12]
 8007226:	f04f 30ff 	mov.w	r0, #4294967295
 800722a:	e033      	b.n	8007294 <__swsetup_r+0x98>
 800722c:	0758      	lsls	r0, r3, #29
 800722e:	d512      	bpl.n	8007256 <__swsetup_r+0x5a>
 8007230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007232:	b141      	cbz	r1, 8007246 <__swsetup_r+0x4a>
 8007234:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007238:	4299      	cmp	r1, r3
 800723a:	d002      	beq.n	8007242 <__swsetup_r+0x46>
 800723c:	4628      	mov	r0, r5
 800723e:	f000 ff23 	bl	8008088 <_free_r>
 8007242:	2300      	movs	r3, #0
 8007244:	6363      	str	r3, [r4, #52]	@ 0x34
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800724c:	81a3      	strh	r3, [r4, #12]
 800724e:	2300      	movs	r3, #0
 8007250:	6063      	str	r3, [r4, #4]
 8007252:	6923      	ldr	r3, [r4, #16]
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	f043 0308 	orr.w	r3, r3, #8
 800725c:	81a3      	strh	r3, [r4, #12]
 800725e:	6923      	ldr	r3, [r4, #16]
 8007260:	b94b      	cbnz	r3, 8007276 <__swsetup_r+0x7a>
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800726c:	d003      	beq.n	8007276 <__swsetup_r+0x7a>
 800726e:	4621      	mov	r1, r4
 8007270:	4628      	mov	r0, r5
 8007272:	f002 febd 	bl	8009ff0 <__smakebuf_r>
 8007276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800727a:	f013 0201 	ands.w	r2, r3, #1
 800727e:	d00a      	beq.n	8007296 <__swsetup_r+0x9a>
 8007280:	2200      	movs	r2, #0
 8007282:	60a2      	str	r2, [r4, #8]
 8007284:	6962      	ldr	r2, [r4, #20]
 8007286:	4252      	negs	r2, r2
 8007288:	61a2      	str	r2, [r4, #24]
 800728a:	6922      	ldr	r2, [r4, #16]
 800728c:	b942      	cbnz	r2, 80072a0 <__swsetup_r+0xa4>
 800728e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007292:	d1c5      	bne.n	8007220 <__swsetup_r+0x24>
 8007294:	bd38      	pop	{r3, r4, r5, pc}
 8007296:	0799      	lsls	r1, r3, #30
 8007298:	bf58      	it	pl
 800729a:	6962      	ldrpl	r2, [r4, #20]
 800729c:	60a2      	str	r2, [r4, #8]
 800729e:	e7f4      	b.n	800728a <__swsetup_r+0x8e>
 80072a0:	2000      	movs	r0, #0
 80072a2:	e7f7      	b.n	8007294 <__swsetup_r+0x98>
 80072a4:	2000003c 	.word	0x2000003c

080072a8 <memset>:
 80072a8:	4402      	add	r2, r0
 80072aa:	4603      	mov	r3, r0
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d100      	bne.n	80072b2 <memset+0xa>
 80072b0:	4770      	bx	lr
 80072b2:	f803 1b01 	strb.w	r1, [r3], #1
 80072b6:	e7f9      	b.n	80072ac <memset+0x4>

080072b8 <_localeconv_r>:
 80072b8:	4800      	ldr	r0, [pc, #0]	@ (80072bc <_localeconv_r+0x4>)
 80072ba:	4770      	bx	lr
 80072bc:	2000017c 	.word	0x2000017c

080072c0 <_close_r>:
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	4d06      	ldr	r5, [pc, #24]	@ (80072dc <_close_r+0x1c>)
 80072c4:	2300      	movs	r3, #0
 80072c6:	4604      	mov	r4, r0
 80072c8:	4608      	mov	r0, r1
 80072ca:	602b      	str	r3, [r5, #0]
 80072cc:	f7fa fd76 	bl	8001dbc <_close>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_close_r+0x1a>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_close_r+0x1a>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	20007c94 	.word	0x20007c94

080072e0 <_lseek_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4d07      	ldr	r5, [pc, #28]	@ (8007300 <_lseek_r+0x20>)
 80072e4:	4604      	mov	r4, r0
 80072e6:	4608      	mov	r0, r1
 80072e8:	4611      	mov	r1, r2
 80072ea:	2200      	movs	r2, #0
 80072ec:	602a      	str	r2, [r5, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	f7fa fd8b 	bl	8001e0a <_lseek>
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	d102      	bne.n	80072fe <_lseek_r+0x1e>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	b103      	cbz	r3, 80072fe <_lseek_r+0x1e>
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	bd38      	pop	{r3, r4, r5, pc}
 8007300:	20007c94 	.word	0x20007c94

08007304 <_read_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	4d07      	ldr	r5, [pc, #28]	@ (8007324 <_read_r+0x20>)
 8007308:	4604      	mov	r4, r0
 800730a:	4608      	mov	r0, r1
 800730c:	4611      	mov	r1, r2
 800730e:	2200      	movs	r2, #0
 8007310:	602a      	str	r2, [r5, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	f7fa fd19 	bl	8001d4a <_read>
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	d102      	bne.n	8007322 <_read_r+0x1e>
 800731c:	682b      	ldr	r3, [r5, #0]
 800731e:	b103      	cbz	r3, 8007322 <_read_r+0x1e>
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	bd38      	pop	{r3, r4, r5, pc}
 8007324:	20007c94 	.word	0x20007c94

08007328 <_write_r>:
 8007328:	b538      	push	{r3, r4, r5, lr}
 800732a:	4d07      	ldr	r5, [pc, #28]	@ (8007348 <_write_r+0x20>)
 800732c:	4604      	mov	r4, r0
 800732e:	4608      	mov	r0, r1
 8007330:	4611      	mov	r1, r2
 8007332:	2200      	movs	r2, #0
 8007334:	602a      	str	r2, [r5, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	f7fa fd24 	bl	8001d84 <_write>
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d102      	bne.n	8007346 <_write_r+0x1e>
 8007340:	682b      	ldr	r3, [r5, #0]
 8007342:	b103      	cbz	r3, 8007346 <_write_r+0x1e>
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	bd38      	pop	{r3, r4, r5, pc}
 8007348:	20007c94 	.word	0x20007c94

0800734c <__errno>:
 800734c:	4b01      	ldr	r3, [pc, #4]	@ (8007354 <__errno+0x8>)
 800734e:	6818      	ldr	r0, [r3, #0]
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	2000003c 	.word	0x2000003c

08007358 <__libc_init_array>:
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	4d0d      	ldr	r5, [pc, #52]	@ (8007390 <__libc_init_array+0x38>)
 800735c:	4c0d      	ldr	r4, [pc, #52]	@ (8007394 <__libc_init_array+0x3c>)
 800735e:	1b64      	subs	r4, r4, r5
 8007360:	10a4      	asrs	r4, r4, #2
 8007362:	2600      	movs	r6, #0
 8007364:	42a6      	cmp	r6, r4
 8007366:	d109      	bne.n	800737c <__libc_init_array+0x24>
 8007368:	4d0b      	ldr	r5, [pc, #44]	@ (8007398 <__libc_init_array+0x40>)
 800736a:	4c0c      	ldr	r4, [pc, #48]	@ (800739c <__libc_init_array+0x44>)
 800736c:	f003 fe24 	bl	800afb8 <_init>
 8007370:	1b64      	subs	r4, r4, r5
 8007372:	10a4      	asrs	r4, r4, #2
 8007374:	2600      	movs	r6, #0
 8007376:	42a6      	cmp	r6, r4
 8007378:	d105      	bne.n	8007386 <__libc_init_array+0x2e>
 800737a:	bd70      	pop	{r4, r5, r6, pc}
 800737c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007380:	4798      	blx	r3
 8007382:	3601      	adds	r6, #1
 8007384:	e7ee      	b.n	8007364 <__libc_init_array+0xc>
 8007386:	f855 3b04 	ldr.w	r3, [r5], #4
 800738a:	4798      	blx	r3
 800738c:	3601      	adds	r6, #1
 800738e:	e7f2      	b.n	8007376 <__libc_init_array+0x1e>
 8007390:	08017764 	.word	0x08017764
 8007394:	08017764 	.word	0x08017764
 8007398:	08017764 	.word	0x08017764
 800739c:	08017768 	.word	0x08017768

080073a0 <__retarget_lock_init_recursive>:
 80073a0:	4770      	bx	lr

080073a2 <__retarget_lock_acquire_recursive>:
 80073a2:	4770      	bx	lr

080073a4 <__retarget_lock_release_recursive>:
 80073a4:	4770      	bx	lr
	...

080073a8 <nanf>:
 80073a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80073b0 <nanf+0x8>
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	7fc00000 	.word	0x7fc00000

080073b4 <__assert_func>:
 80073b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073b6:	4614      	mov	r4, r2
 80073b8:	461a      	mov	r2, r3
 80073ba:	4b09      	ldr	r3, [pc, #36]	@ (80073e0 <__assert_func+0x2c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4605      	mov	r5, r0
 80073c0:	68d8      	ldr	r0, [r3, #12]
 80073c2:	b954      	cbnz	r4, 80073da <__assert_func+0x26>
 80073c4:	4b07      	ldr	r3, [pc, #28]	@ (80073e4 <__assert_func+0x30>)
 80073c6:	461c      	mov	r4, r3
 80073c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80073cc:	9100      	str	r1, [sp, #0]
 80073ce:	462b      	mov	r3, r5
 80073d0:	4905      	ldr	r1, [pc, #20]	@ (80073e8 <__assert_func+0x34>)
 80073d2:	f002 fdd5 	bl	8009f80 <fiprintf>
 80073d6:	f002 febb 	bl	800a150 <abort>
 80073da:	4b04      	ldr	r3, [pc, #16]	@ (80073ec <__assert_func+0x38>)
 80073dc:	e7f4      	b.n	80073c8 <__assert_func+0x14>
 80073de:	bf00      	nop
 80073e0:	2000003c 	.word	0x2000003c
 80073e4:	080173bb 	.word	0x080173bb
 80073e8:	0801738d 	.word	0x0801738d
 80073ec:	08017380 	.word	0x08017380

080073f0 <quorem>:
 80073f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	6903      	ldr	r3, [r0, #16]
 80073f6:	690c      	ldr	r4, [r1, #16]
 80073f8:	42a3      	cmp	r3, r4
 80073fa:	4607      	mov	r7, r0
 80073fc:	db7e      	blt.n	80074fc <quorem+0x10c>
 80073fe:	3c01      	subs	r4, #1
 8007400:	f101 0814 	add.w	r8, r1, #20
 8007404:	00a3      	lsls	r3, r4, #2
 8007406:	f100 0514 	add.w	r5, r0, #20
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007410:	9301      	str	r3, [sp, #4]
 8007412:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007416:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800741a:	3301      	adds	r3, #1
 800741c:	429a      	cmp	r2, r3
 800741e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007422:	fbb2 f6f3 	udiv	r6, r2, r3
 8007426:	d32e      	bcc.n	8007486 <quorem+0x96>
 8007428:	f04f 0a00 	mov.w	sl, #0
 800742c:	46c4      	mov	ip, r8
 800742e:	46ae      	mov	lr, r5
 8007430:	46d3      	mov	fp, sl
 8007432:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007436:	b298      	uxth	r0, r3
 8007438:	fb06 a000 	mla	r0, r6, r0, sl
 800743c:	0c02      	lsrs	r2, r0, #16
 800743e:	0c1b      	lsrs	r3, r3, #16
 8007440:	fb06 2303 	mla	r3, r6, r3, r2
 8007444:	f8de 2000 	ldr.w	r2, [lr]
 8007448:	b280      	uxth	r0, r0
 800744a:	b292      	uxth	r2, r2
 800744c:	1a12      	subs	r2, r2, r0
 800744e:	445a      	add	r2, fp
 8007450:	f8de 0000 	ldr.w	r0, [lr]
 8007454:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007458:	b29b      	uxth	r3, r3
 800745a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800745e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007462:	b292      	uxth	r2, r2
 8007464:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007468:	45e1      	cmp	r9, ip
 800746a:	f84e 2b04 	str.w	r2, [lr], #4
 800746e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007472:	d2de      	bcs.n	8007432 <quorem+0x42>
 8007474:	9b00      	ldr	r3, [sp, #0]
 8007476:	58eb      	ldr	r3, [r5, r3]
 8007478:	b92b      	cbnz	r3, 8007486 <quorem+0x96>
 800747a:	9b01      	ldr	r3, [sp, #4]
 800747c:	3b04      	subs	r3, #4
 800747e:	429d      	cmp	r5, r3
 8007480:	461a      	mov	r2, r3
 8007482:	d32f      	bcc.n	80074e4 <quorem+0xf4>
 8007484:	613c      	str	r4, [r7, #16]
 8007486:	4638      	mov	r0, r7
 8007488:	f001 f9c2 	bl	8008810 <__mcmp>
 800748c:	2800      	cmp	r0, #0
 800748e:	db25      	blt.n	80074dc <quorem+0xec>
 8007490:	4629      	mov	r1, r5
 8007492:	2000      	movs	r0, #0
 8007494:	f858 2b04 	ldr.w	r2, [r8], #4
 8007498:	f8d1 c000 	ldr.w	ip, [r1]
 800749c:	fa1f fe82 	uxth.w	lr, r2
 80074a0:	fa1f f38c 	uxth.w	r3, ip
 80074a4:	eba3 030e 	sub.w	r3, r3, lr
 80074a8:	4403      	add	r3, r0
 80074aa:	0c12      	lsrs	r2, r2, #16
 80074ac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80074b0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074ba:	45c1      	cmp	r9, r8
 80074bc:	f841 3b04 	str.w	r3, [r1], #4
 80074c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80074c4:	d2e6      	bcs.n	8007494 <quorem+0xa4>
 80074c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074ce:	b922      	cbnz	r2, 80074da <quorem+0xea>
 80074d0:	3b04      	subs	r3, #4
 80074d2:	429d      	cmp	r5, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	d30b      	bcc.n	80074f0 <quorem+0x100>
 80074d8:	613c      	str	r4, [r7, #16]
 80074da:	3601      	adds	r6, #1
 80074dc:	4630      	mov	r0, r6
 80074de:	b003      	add	sp, #12
 80074e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e4:	6812      	ldr	r2, [r2, #0]
 80074e6:	3b04      	subs	r3, #4
 80074e8:	2a00      	cmp	r2, #0
 80074ea:	d1cb      	bne.n	8007484 <quorem+0x94>
 80074ec:	3c01      	subs	r4, #1
 80074ee:	e7c6      	b.n	800747e <quorem+0x8e>
 80074f0:	6812      	ldr	r2, [r2, #0]
 80074f2:	3b04      	subs	r3, #4
 80074f4:	2a00      	cmp	r2, #0
 80074f6:	d1ef      	bne.n	80074d8 <quorem+0xe8>
 80074f8:	3c01      	subs	r4, #1
 80074fa:	e7ea      	b.n	80074d2 <quorem+0xe2>
 80074fc:	2000      	movs	r0, #0
 80074fe:	e7ee      	b.n	80074de <quorem+0xee>

08007500 <_dtoa_r>:
 8007500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007504:	69c7      	ldr	r7, [r0, #28]
 8007506:	b099      	sub	sp, #100	@ 0x64
 8007508:	ed8d 0b02 	vstr	d0, [sp, #8]
 800750c:	ec55 4b10 	vmov	r4, r5, d0
 8007510:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007512:	9109      	str	r1, [sp, #36]	@ 0x24
 8007514:	4683      	mov	fp, r0
 8007516:	920e      	str	r2, [sp, #56]	@ 0x38
 8007518:	9313      	str	r3, [sp, #76]	@ 0x4c
 800751a:	b97f      	cbnz	r7, 800753c <_dtoa_r+0x3c>
 800751c:	2010      	movs	r0, #16
 800751e:	f000 fdfd 	bl	800811c <malloc>
 8007522:	4602      	mov	r2, r0
 8007524:	f8cb 001c 	str.w	r0, [fp, #28]
 8007528:	b920      	cbnz	r0, 8007534 <_dtoa_r+0x34>
 800752a:	4ba7      	ldr	r3, [pc, #668]	@ (80077c8 <_dtoa_r+0x2c8>)
 800752c:	21ef      	movs	r1, #239	@ 0xef
 800752e:	48a7      	ldr	r0, [pc, #668]	@ (80077cc <_dtoa_r+0x2cc>)
 8007530:	f7ff ff40 	bl	80073b4 <__assert_func>
 8007534:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007538:	6007      	str	r7, [r0, #0]
 800753a:	60c7      	str	r7, [r0, #12]
 800753c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007540:	6819      	ldr	r1, [r3, #0]
 8007542:	b159      	cbz	r1, 800755c <_dtoa_r+0x5c>
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	604a      	str	r2, [r1, #4]
 8007548:	2301      	movs	r3, #1
 800754a:	4093      	lsls	r3, r2
 800754c:	608b      	str	r3, [r1, #8]
 800754e:	4658      	mov	r0, fp
 8007550:	f000 feda 	bl	8008308 <_Bfree>
 8007554:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	1e2b      	subs	r3, r5, #0
 800755e:	bfb9      	ittee	lt
 8007560:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007564:	9303      	strlt	r3, [sp, #12]
 8007566:	2300      	movge	r3, #0
 8007568:	6033      	strge	r3, [r6, #0]
 800756a:	9f03      	ldr	r7, [sp, #12]
 800756c:	4b98      	ldr	r3, [pc, #608]	@ (80077d0 <_dtoa_r+0x2d0>)
 800756e:	bfbc      	itt	lt
 8007570:	2201      	movlt	r2, #1
 8007572:	6032      	strlt	r2, [r6, #0]
 8007574:	43bb      	bics	r3, r7
 8007576:	d112      	bne.n	800759e <_dtoa_r+0x9e>
 8007578:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800757a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800757e:	6013      	str	r3, [r2, #0]
 8007580:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007584:	4323      	orrs	r3, r4
 8007586:	f000 854d 	beq.w	8008024 <_dtoa_r+0xb24>
 800758a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800758c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80077e4 <_dtoa_r+0x2e4>
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 854f 	beq.w	8008034 <_dtoa_r+0xb34>
 8007596:	f10a 0303 	add.w	r3, sl, #3
 800759a:	f000 bd49 	b.w	8008030 <_dtoa_r+0xb30>
 800759e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075a2:	2200      	movs	r2, #0
 80075a4:	ec51 0b17 	vmov	r0, r1, d7
 80075a8:	2300      	movs	r3, #0
 80075aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80075ae:	f7f9 fa8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80075b2:	4680      	mov	r8, r0
 80075b4:	b158      	cbz	r0, 80075ce <_dtoa_r+0xce>
 80075b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80075b8:	2301      	movs	r3, #1
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075be:	b113      	cbz	r3, 80075c6 <_dtoa_r+0xc6>
 80075c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80075c2:	4b84      	ldr	r3, [pc, #528]	@ (80077d4 <_dtoa_r+0x2d4>)
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80077e8 <_dtoa_r+0x2e8>
 80075ca:	f000 bd33 	b.w	8008034 <_dtoa_r+0xb34>
 80075ce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80075d2:	aa16      	add	r2, sp, #88	@ 0x58
 80075d4:	a917      	add	r1, sp, #92	@ 0x5c
 80075d6:	4658      	mov	r0, fp
 80075d8:	f001 fa3a 	bl	8008a50 <__d2b>
 80075dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80075e0:	4681      	mov	r9, r0
 80075e2:	2e00      	cmp	r6, #0
 80075e4:	d077      	beq.n	80076d6 <_dtoa_r+0x1d6>
 80075e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075e8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80075ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80075f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80075fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007600:	4619      	mov	r1, r3
 8007602:	2200      	movs	r2, #0
 8007604:	4b74      	ldr	r3, [pc, #464]	@ (80077d8 <_dtoa_r+0x2d8>)
 8007606:	f7f8 fe3f 	bl	8000288 <__aeabi_dsub>
 800760a:	a369      	add	r3, pc, #420	@ (adr r3, 80077b0 <_dtoa_r+0x2b0>)
 800760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007610:	f7f8 fff2 	bl	80005f8 <__aeabi_dmul>
 8007614:	a368      	add	r3, pc, #416	@ (adr r3, 80077b8 <_dtoa_r+0x2b8>)
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	f7f8 fe37 	bl	800028c <__adddf3>
 800761e:	4604      	mov	r4, r0
 8007620:	4630      	mov	r0, r6
 8007622:	460d      	mov	r5, r1
 8007624:	f7f8 ff7e 	bl	8000524 <__aeabi_i2d>
 8007628:	a365      	add	r3, pc, #404	@ (adr r3, 80077c0 <_dtoa_r+0x2c0>)
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f7f8 ffe3 	bl	80005f8 <__aeabi_dmul>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	4620      	mov	r0, r4
 8007638:	4629      	mov	r1, r5
 800763a:	f7f8 fe27 	bl	800028c <__adddf3>
 800763e:	4604      	mov	r4, r0
 8007640:	460d      	mov	r5, r1
 8007642:	f7f9 fa89 	bl	8000b58 <__aeabi_d2iz>
 8007646:	2200      	movs	r2, #0
 8007648:	4607      	mov	r7, r0
 800764a:	2300      	movs	r3, #0
 800764c:	4620      	mov	r0, r4
 800764e:	4629      	mov	r1, r5
 8007650:	f7f9 fa44 	bl	8000adc <__aeabi_dcmplt>
 8007654:	b140      	cbz	r0, 8007668 <_dtoa_r+0x168>
 8007656:	4638      	mov	r0, r7
 8007658:	f7f8 ff64 	bl	8000524 <__aeabi_i2d>
 800765c:	4622      	mov	r2, r4
 800765e:	462b      	mov	r3, r5
 8007660:	f7f9 fa32 	bl	8000ac8 <__aeabi_dcmpeq>
 8007664:	b900      	cbnz	r0, 8007668 <_dtoa_r+0x168>
 8007666:	3f01      	subs	r7, #1
 8007668:	2f16      	cmp	r7, #22
 800766a:	d851      	bhi.n	8007710 <_dtoa_r+0x210>
 800766c:	4b5b      	ldr	r3, [pc, #364]	@ (80077dc <_dtoa_r+0x2dc>)
 800766e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007676:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800767a:	f7f9 fa2f 	bl	8000adc <__aeabi_dcmplt>
 800767e:	2800      	cmp	r0, #0
 8007680:	d048      	beq.n	8007714 <_dtoa_r+0x214>
 8007682:	3f01      	subs	r7, #1
 8007684:	2300      	movs	r3, #0
 8007686:	9312      	str	r3, [sp, #72]	@ 0x48
 8007688:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800768a:	1b9b      	subs	r3, r3, r6
 800768c:	1e5a      	subs	r2, r3, #1
 800768e:	bf44      	itt	mi
 8007690:	f1c3 0801 	rsbmi	r8, r3, #1
 8007694:	2300      	movmi	r3, #0
 8007696:	9208      	str	r2, [sp, #32]
 8007698:	bf54      	ite	pl
 800769a:	f04f 0800 	movpl.w	r8, #0
 800769e:	9308      	strmi	r3, [sp, #32]
 80076a0:	2f00      	cmp	r7, #0
 80076a2:	db39      	blt.n	8007718 <_dtoa_r+0x218>
 80076a4:	9b08      	ldr	r3, [sp, #32]
 80076a6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80076a8:	443b      	add	r3, r7
 80076aa:	9308      	str	r3, [sp, #32]
 80076ac:	2300      	movs	r3, #0
 80076ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80076b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076b2:	2b09      	cmp	r3, #9
 80076b4:	d864      	bhi.n	8007780 <_dtoa_r+0x280>
 80076b6:	2b05      	cmp	r3, #5
 80076b8:	bfc4      	itt	gt
 80076ba:	3b04      	subgt	r3, #4
 80076bc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80076be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c0:	f1a3 0302 	sub.w	r3, r3, #2
 80076c4:	bfcc      	ite	gt
 80076c6:	2400      	movgt	r4, #0
 80076c8:	2401      	movle	r4, #1
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d863      	bhi.n	8007796 <_dtoa_r+0x296>
 80076ce:	e8df f003 	tbb	[pc, r3]
 80076d2:	372a      	.short	0x372a
 80076d4:	5535      	.short	0x5535
 80076d6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80076da:	441e      	add	r6, r3
 80076dc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80076e0:	2b20      	cmp	r3, #32
 80076e2:	bfc1      	itttt	gt
 80076e4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80076e8:	409f      	lslgt	r7, r3
 80076ea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80076ee:	fa24 f303 	lsrgt.w	r3, r4, r3
 80076f2:	bfd6      	itet	le
 80076f4:	f1c3 0320 	rsble	r3, r3, #32
 80076f8:	ea47 0003 	orrgt.w	r0, r7, r3
 80076fc:	fa04 f003 	lslle.w	r0, r4, r3
 8007700:	f7f8 ff00 	bl	8000504 <__aeabi_ui2d>
 8007704:	2201      	movs	r2, #1
 8007706:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800770a:	3e01      	subs	r6, #1
 800770c:	9214      	str	r2, [sp, #80]	@ 0x50
 800770e:	e777      	b.n	8007600 <_dtoa_r+0x100>
 8007710:	2301      	movs	r3, #1
 8007712:	e7b8      	b.n	8007686 <_dtoa_r+0x186>
 8007714:	9012      	str	r0, [sp, #72]	@ 0x48
 8007716:	e7b7      	b.n	8007688 <_dtoa_r+0x188>
 8007718:	427b      	negs	r3, r7
 800771a:	930a      	str	r3, [sp, #40]	@ 0x28
 800771c:	2300      	movs	r3, #0
 800771e:	eba8 0807 	sub.w	r8, r8, r7
 8007722:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007724:	e7c4      	b.n	80076b0 <_dtoa_r+0x1b0>
 8007726:	2300      	movs	r3, #0
 8007728:	930b      	str	r3, [sp, #44]	@ 0x2c
 800772a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800772c:	2b00      	cmp	r3, #0
 800772e:	dc35      	bgt.n	800779c <_dtoa_r+0x29c>
 8007730:	2301      	movs	r3, #1
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	9307      	str	r3, [sp, #28]
 8007736:	461a      	mov	r2, r3
 8007738:	920e      	str	r2, [sp, #56]	@ 0x38
 800773a:	e00b      	b.n	8007754 <_dtoa_r+0x254>
 800773c:	2301      	movs	r3, #1
 800773e:	e7f3      	b.n	8007728 <_dtoa_r+0x228>
 8007740:	2300      	movs	r3, #0
 8007742:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007744:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007746:	18fb      	adds	r3, r7, r3
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	3301      	adds	r3, #1
 800774c:	2b01      	cmp	r3, #1
 800774e:	9307      	str	r3, [sp, #28]
 8007750:	bfb8      	it	lt
 8007752:	2301      	movlt	r3, #1
 8007754:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007758:	2100      	movs	r1, #0
 800775a:	2204      	movs	r2, #4
 800775c:	f102 0514 	add.w	r5, r2, #20
 8007760:	429d      	cmp	r5, r3
 8007762:	d91f      	bls.n	80077a4 <_dtoa_r+0x2a4>
 8007764:	6041      	str	r1, [r0, #4]
 8007766:	4658      	mov	r0, fp
 8007768:	f000 fd8e 	bl	8008288 <_Balloc>
 800776c:	4682      	mov	sl, r0
 800776e:	2800      	cmp	r0, #0
 8007770:	d13c      	bne.n	80077ec <_dtoa_r+0x2ec>
 8007772:	4b1b      	ldr	r3, [pc, #108]	@ (80077e0 <_dtoa_r+0x2e0>)
 8007774:	4602      	mov	r2, r0
 8007776:	f240 11af 	movw	r1, #431	@ 0x1af
 800777a:	e6d8      	b.n	800752e <_dtoa_r+0x2e>
 800777c:	2301      	movs	r3, #1
 800777e:	e7e0      	b.n	8007742 <_dtoa_r+0x242>
 8007780:	2401      	movs	r4, #1
 8007782:	2300      	movs	r3, #0
 8007784:	9309      	str	r3, [sp, #36]	@ 0x24
 8007786:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007788:	f04f 33ff 	mov.w	r3, #4294967295
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	9307      	str	r3, [sp, #28]
 8007790:	2200      	movs	r2, #0
 8007792:	2312      	movs	r3, #18
 8007794:	e7d0      	b.n	8007738 <_dtoa_r+0x238>
 8007796:	2301      	movs	r3, #1
 8007798:	930b      	str	r3, [sp, #44]	@ 0x2c
 800779a:	e7f5      	b.n	8007788 <_dtoa_r+0x288>
 800779c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	9307      	str	r3, [sp, #28]
 80077a2:	e7d7      	b.n	8007754 <_dtoa_r+0x254>
 80077a4:	3101      	adds	r1, #1
 80077a6:	0052      	lsls	r2, r2, #1
 80077a8:	e7d8      	b.n	800775c <_dtoa_r+0x25c>
 80077aa:	bf00      	nop
 80077ac:	f3af 8000 	nop.w
 80077b0:	636f4361 	.word	0x636f4361
 80077b4:	3fd287a7 	.word	0x3fd287a7
 80077b8:	8b60c8b3 	.word	0x8b60c8b3
 80077bc:	3fc68a28 	.word	0x3fc68a28
 80077c0:	509f79fb 	.word	0x509f79fb
 80077c4:	3fd34413 	.word	0x3fd34413
 80077c8:	080172d8 	.word	0x080172d8
 80077cc:	080173c9 	.word	0x080173c9
 80077d0:	7ff00000 	.word	0x7ff00000
 80077d4:	08017358 	.word	0x08017358
 80077d8:	3ff80000 	.word	0x3ff80000
 80077dc:	080174c0 	.word	0x080174c0
 80077e0:	08017421 	.word	0x08017421
 80077e4:	080173c5 	.word	0x080173c5
 80077e8:	08017357 	.word	0x08017357
 80077ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077f0:	6018      	str	r0, [r3, #0]
 80077f2:	9b07      	ldr	r3, [sp, #28]
 80077f4:	2b0e      	cmp	r3, #14
 80077f6:	f200 80a4 	bhi.w	8007942 <_dtoa_r+0x442>
 80077fa:	2c00      	cmp	r4, #0
 80077fc:	f000 80a1 	beq.w	8007942 <_dtoa_r+0x442>
 8007800:	2f00      	cmp	r7, #0
 8007802:	dd33      	ble.n	800786c <_dtoa_r+0x36c>
 8007804:	4bad      	ldr	r3, [pc, #692]	@ (8007abc <_dtoa_r+0x5bc>)
 8007806:	f007 020f 	and.w	r2, r7, #15
 800780a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800780e:	ed93 7b00 	vldr	d7, [r3]
 8007812:	05f8      	lsls	r0, r7, #23
 8007814:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007818:	ea4f 1427 	mov.w	r4, r7, asr #4
 800781c:	d516      	bpl.n	800784c <_dtoa_r+0x34c>
 800781e:	4ba8      	ldr	r3, [pc, #672]	@ (8007ac0 <_dtoa_r+0x5c0>)
 8007820:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007824:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007828:	f7f9 f810 	bl	800084c <__aeabi_ddiv>
 800782c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007830:	f004 040f 	and.w	r4, r4, #15
 8007834:	2603      	movs	r6, #3
 8007836:	4da2      	ldr	r5, [pc, #648]	@ (8007ac0 <_dtoa_r+0x5c0>)
 8007838:	b954      	cbnz	r4, 8007850 <_dtoa_r+0x350>
 800783a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800783e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007842:	f7f9 f803 	bl	800084c <__aeabi_ddiv>
 8007846:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800784a:	e028      	b.n	800789e <_dtoa_r+0x39e>
 800784c:	2602      	movs	r6, #2
 800784e:	e7f2      	b.n	8007836 <_dtoa_r+0x336>
 8007850:	07e1      	lsls	r1, r4, #31
 8007852:	d508      	bpl.n	8007866 <_dtoa_r+0x366>
 8007854:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007858:	e9d5 2300 	ldrd	r2, r3, [r5]
 800785c:	f7f8 fecc 	bl	80005f8 <__aeabi_dmul>
 8007860:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007864:	3601      	adds	r6, #1
 8007866:	1064      	asrs	r4, r4, #1
 8007868:	3508      	adds	r5, #8
 800786a:	e7e5      	b.n	8007838 <_dtoa_r+0x338>
 800786c:	f000 80d2 	beq.w	8007a14 <_dtoa_r+0x514>
 8007870:	427c      	negs	r4, r7
 8007872:	4b92      	ldr	r3, [pc, #584]	@ (8007abc <_dtoa_r+0x5bc>)
 8007874:	4d92      	ldr	r5, [pc, #584]	@ (8007ac0 <_dtoa_r+0x5c0>)
 8007876:	f004 020f 	and.w	r2, r4, #15
 800787a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007886:	f7f8 feb7 	bl	80005f8 <__aeabi_dmul>
 800788a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800788e:	1124      	asrs	r4, r4, #4
 8007890:	2300      	movs	r3, #0
 8007892:	2602      	movs	r6, #2
 8007894:	2c00      	cmp	r4, #0
 8007896:	f040 80b2 	bne.w	80079fe <_dtoa_r+0x4fe>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1d3      	bne.n	8007846 <_dtoa_r+0x346>
 800789e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80078a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 80b7 	beq.w	8007a18 <_dtoa_r+0x518>
 80078aa:	4b86      	ldr	r3, [pc, #536]	@ (8007ac4 <_dtoa_r+0x5c4>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	4620      	mov	r0, r4
 80078b0:	4629      	mov	r1, r5
 80078b2:	f7f9 f913 	bl	8000adc <__aeabi_dcmplt>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	f000 80ae 	beq.w	8007a18 <_dtoa_r+0x518>
 80078bc:	9b07      	ldr	r3, [sp, #28]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 80aa 	beq.w	8007a18 <_dtoa_r+0x518>
 80078c4:	9b00      	ldr	r3, [sp, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	dd37      	ble.n	800793a <_dtoa_r+0x43a>
 80078ca:	1e7b      	subs	r3, r7, #1
 80078cc:	9304      	str	r3, [sp, #16]
 80078ce:	4620      	mov	r0, r4
 80078d0:	4b7d      	ldr	r3, [pc, #500]	@ (8007ac8 <_dtoa_r+0x5c8>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	4629      	mov	r1, r5
 80078d6:	f7f8 fe8f 	bl	80005f8 <__aeabi_dmul>
 80078da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078de:	9c00      	ldr	r4, [sp, #0]
 80078e0:	3601      	adds	r6, #1
 80078e2:	4630      	mov	r0, r6
 80078e4:	f7f8 fe1e 	bl	8000524 <__aeabi_i2d>
 80078e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078ec:	f7f8 fe84 	bl	80005f8 <__aeabi_dmul>
 80078f0:	4b76      	ldr	r3, [pc, #472]	@ (8007acc <_dtoa_r+0x5cc>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	f7f8 fcca 	bl	800028c <__adddf3>
 80078f8:	4605      	mov	r5, r0
 80078fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80078fe:	2c00      	cmp	r4, #0
 8007900:	f040 808d 	bne.w	8007a1e <_dtoa_r+0x51e>
 8007904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007908:	4b71      	ldr	r3, [pc, #452]	@ (8007ad0 <_dtoa_r+0x5d0>)
 800790a:	2200      	movs	r2, #0
 800790c:	f7f8 fcbc 	bl	8000288 <__aeabi_dsub>
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007918:	462a      	mov	r2, r5
 800791a:	4633      	mov	r3, r6
 800791c:	f7f9 f8fc 	bl	8000b18 <__aeabi_dcmpgt>
 8007920:	2800      	cmp	r0, #0
 8007922:	f040 828b 	bne.w	8007e3c <_dtoa_r+0x93c>
 8007926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800792a:	462a      	mov	r2, r5
 800792c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007930:	f7f9 f8d4 	bl	8000adc <__aeabi_dcmplt>
 8007934:	2800      	cmp	r0, #0
 8007936:	f040 8128 	bne.w	8007b8a <_dtoa_r+0x68a>
 800793a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800793e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007942:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007944:	2b00      	cmp	r3, #0
 8007946:	f2c0 815a 	blt.w	8007bfe <_dtoa_r+0x6fe>
 800794a:	2f0e      	cmp	r7, #14
 800794c:	f300 8157 	bgt.w	8007bfe <_dtoa_r+0x6fe>
 8007950:	4b5a      	ldr	r3, [pc, #360]	@ (8007abc <_dtoa_r+0x5bc>)
 8007952:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007956:	ed93 7b00 	vldr	d7, [r3]
 800795a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800795c:	2b00      	cmp	r3, #0
 800795e:	ed8d 7b00 	vstr	d7, [sp]
 8007962:	da03      	bge.n	800796c <_dtoa_r+0x46c>
 8007964:	9b07      	ldr	r3, [sp, #28]
 8007966:	2b00      	cmp	r3, #0
 8007968:	f340 8101 	ble.w	8007b6e <_dtoa_r+0x66e>
 800796c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007970:	4656      	mov	r6, sl
 8007972:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007976:	4620      	mov	r0, r4
 8007978:	4629      	mov	r1, r5
 800797a:	f7f8 ff67 	bl	800084c <__aeabi_ddiv>
 800797e:	f7f9 f8eb 	bl	8000b58 <__aeabi_d2iz>
 8007982:	4680      	mov	r8, r0
 8007984:	f7f8 fdce 	bl	8000524 <__aeabi_i2d>
 8007988:	e9dd 2300 	ldrd	r2, r3, [sp]
 800798c:	f7f8 fe34 	bl	80005f8 <__aeabi_dmul>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	4620      	mov	r0, r4
 8007996:	4629      	mov	r1, r5
 8007998:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800799c:	f7f8 fc74 	bl	8000288 <__aeabi_dsub>
 80079a0:	f806 4b01 	strb.w	r4, [r6], #1
 80079a4:	9d07      	ldr	r5, [sp, #28]
 80079a6:	eba6 040a 	sub.w	r4, r6, sl
 80079aa:	42a5      	cmp	r5, r4
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	f040 8117 	bne.w	8007be2 <_dtoa_r+0x6e2>
 80079b4:	f7f8 fc6a 	bl	800028c <__adddf3>
 80079b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079bc:	4604      	mov	r4, r0
 80079be:	460d      	mov	r5, r1
 80079c0:	f7f9 f8aa 	bl	8000b18 <__aeabi_dcmpgt>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	f040 80f9 	bne.w	8007bbc <_dtoa_r+0x6bc>
 80079ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079ce:	4620      	mov	r0, r4
 80079d0:	4629      	mov	r1, r5
 80079d2:	f7f9 f879 	bl	8000ac8 <__aeabi_dcmpeq>
 80079d6:	b118      	cbz	r0, 80079e0 <_dtoa_r+0x4e0>
 80079d8:	f018 0f01 	tst.w	r8, #1
 80079dc:	f040 80ee 	bne.w	8007bbc <_dtoa_r+0x6bc>
 80079e0:	4649      	mov	r1, r9
 80079e2:	4658      	mov	r0, fp
 80079e4:	f000 fc90 	bl	8008308 <_Bfree>
 80079e8:	2300      	movs	r3, #0
 80079ea:	7033      	strb	r3, [r6, #0]
 80079ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80079ee:	3701      	adds	r7, #1
 80079f0:	601f      	str	r7, [r3, #0]
 80079f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 831d 	beq.w	8008034 <_dtoa_r+0xb34>
 80079fa:	601e      	str	r6, [r3, #0]
 80079fc:	e31a      	b.n	8008034 <_dtoa_r+0xb34>
 80079fe:	07e2      	lsls	r2, r4, #31
 8007a00:	d505      	bpl.n	8007a0e <_dtoa_r+0x50e>
 8007a02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a06:	f7f8 fdf7 	bl	80005f8 <__aeabi_dmul>
 8007a0a:	3601      	adds	r6, #1
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	1064      	asrs	r4, r4, #1
 8007a10:	3508      	adds	r5, #8
 8007a12:	e73f      	b.n	8007894 <_dtoa_r+0x394>
 8007a14:	2602      	movs	r6, #2
 8007a16:	e742      	b.n	800789e <_dtoa_r+0x39e>
 8007a18:	9c07      	ldr	r4, [sp, #28]
 8007a1a:	9704      	str	r7, [sp, #16]
 8007a1c:	e761      	b.n	80078e2 <_dtoa_r+0x3e2>
 8007a1e:	4b27      	ldr	r3, [pc, #156]	@ (8007abc <_dtoa_r+0x5bc>)
 8007a20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a2a:	4454      	add	r4, sl
 8007a2c:	2900      	cmp	r1, #0
 8007a2e:	d053      	beq.n	8007ad8 <_dtoa_r+0x5d8>
 8007a30:	4928      	ldr	r1, [pc, #160]	@ (8007ad4 <_dtoa_r+0x5d4>)
 8007a32:	2000      	movs	r0, #0
 8007a34:	f7f8 ff0a 	bl	800084c <__aeabi_ddiv>
 8007a38:	4633      	mov	r3, r6
 8007a3a:	462a      	mov	r2, r5
 8007a3c:	f7f8 fc24 	bl	8000288 <__aeabi_dsub>
 8007a40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a44:	4656      	mov	r6, sl
 8007a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a4a:	f7f9 f885 	bl	8000b58 <__aeabi_d2iz>
 8007a4e:	4605      	mov	r5, r0
 8007a50:	f7f8 fd68 	bl	8000524 <__aeabi_i2d>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a5c:	f7f8 fc14 	bl	8000288 <__aeabi_dsub>
 8007a60:	3530      	adds	r5, #48	@ 0x30
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a6a:	f806 5b01 	strb.w	r5, [r6], #1
 8007a6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a72:	f7f9 f833 	bl	8000adc <__aeabi_dcmplt>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d171      	bne.n	8007b5e <_dtoa_r+0x65e>
 8007a7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a7e:	4911      	ldr	r1, [pc, #68]	@ (8007ac4 <_dtoa_r+0x5c4>)
 8007a80:	2000      	movs	r0, #0
 8007a82:	f7f8 fc01 	bl	8000288 <__aeabi_dsub>
 8007a86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a8a:	f7f9 f827 	bl	8000adc <__aeabi_dcmplt>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f040 8095 	bne.w	8007bbe <_dtoa_r+0x6be>
 8007a94:	42a6      	cmp	r6, r4
 8007a96:	f43f af50 	beq.w	800793a <_dtoa_r+0x43a>
 8007a9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac8 <_dtoa_r+0x5c8>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f7f8 fda9 	bl	80005f8 <__aeabi_dmul>
 8007aa6:	4b08      	ldr	r3, [pc, #32]	@ (8007ac8 <_dtoa_r+0x5c8>)
 8007aa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007aac:	2200      	movs	r2, #0
 8007aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ab2:	f7f8 fda1 	bl	80005f8 <__aeabi_dmul>
 8007ab6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aba:	e7c4      	b.n	8007a46 <_dtoa_r+0x546>
 8007abc:	080174c0 	.word	0x080174c0
 8007ac0:	08017498 	.word	0x08017498
 8007ac4:	3ff00000 	.word	0x3ff00000
 8007ac8:	40240000 	.word	0x40240000
 8007acc:	401c0000 	.word	0x401c0000
 8007ad0:	40140000 	.word	0x40140000
 8007ad4:	3fe00000 	.word	0x3fe00000
 8007ad8:	4631      	mov	r1, r6
 8007ada:	4628      	mov	r0, r5
 8007adc:	f7f8 fd8c 	bl	80005f8 <__aeabi_dmul>
 8007ae0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ae4:	9415      	str	r4, [sp, #84]	@ 0x54
 8007ae6:	4656      	mov	r6, sl
 8007ae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aec:	f7f9 f834 	bl	8000b58 <__aeabi_d2iz>
 8007af0:	4605      	mov	r5, r0
 8007af2:	f7f8 fd17 	bl	8000524 <__aeabi_i2d>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007afe:	f7f8 fbc3 	bl	8000288 <__aeabi_dsub>
 8007b02:	3530      	adds	r5, #48	@ 0x30
 8007b04:	f806 5b01 	strb.w	r5, [r6], #1
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	42a6      	cmp	r6, r4
 8007b0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b12:	f04f 0200 	mov.w	r2, #0
 8007b16:	d124      	bne.n	8007b62 <_dtoa_r+0x662>
 8007b18:	4bac      	ldr	r3, [pc, #688]	@ (8007dcc <_dtoa_r+0x8cc>)
 8007b1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007b1e:	f7f8 fbb5 	bl	800028c <__adddf3>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b2a:	f7f8 fff5 	bl	8000b18 <__aeabi_dcmpgt>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d145      	bne.n	8007bbe <_dtoa_r+0x6be>
 8007b32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b36:	49a5      	ldr	r1, [pc, #660]	@ (8007dcc <_dtoa_r+0x8cc>)
 8007b38:	2000      	movs	r0, #0
 8007b3a:	f7f8 fba5 	bl	8000288 <__aeabi_dsub>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b46:	f7f8 ffc9 	bl	8000adc <__aeabi_dcmplt>
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	f43f aef5 	beq.w	800793a <_dtoa_r+0x43a>
 8007b50:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007b52:	1e73      	subs	r3, r6, #1
 8007b54:	9315      	str	r3, [sp, #84]	@ 0x54
 8007b56:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007b5a:	2b30      	cmp	r3, #48	@ 0x30
 8007b5c:	d0f8      	beq.n	8007b50 <_dtoa_r+0x650>
 8007b5e:	9f04      	ldr	r7, [sp, #16]
 8007b60:	e73e      	b.n	80079e0 <_dtoa_r+0x4e0>
 8007b62:	4b9b      	ldr	r3, [pc, #620]	@ (8007dd0 <_dtoa_r+0x8d0>)
 8007b64:	f7f8 fd48 	bl	80005f8 <__aeabi_dmul>
 8007b68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b6c:	e7bc      	b.n	8007ae8 <_dtoa_r+0x5e8>
 8007b6e:	d10c      	bne.n	8007b8a <_dtoa_r+0x68a>
 8007b70:	4b98      	ldr	r3, [pc, #608]	@ (8007dd4 <_dtoa_r+0x8d4>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b78:	f7f8 fd3e 	bl	80005f8 <__aeabi_dmul>
 8007b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b80:	f7f8 ffc0 	bl	8000b04 <__aeabi_dcmpge>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	f000 8157 	beq.w	8007e38 <_dtoa_r+0x938>
 8007b8a:	2400      	movs	r4, #0
 8007b8c:	4625      	mov	r5, r4
 8007b8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b90:	43db      	mvns	r3, r3
 8007b92:	9304      	str	r3, [sp, #16]
 8007b94:	4656      	mov	r6, sl
 8007b96:	2700      	movs	r7, #0
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4658      	mov	r0, fp
 8007b9c:	f000 fbb4 	bl	8008308 <_Bfree>
 8007ba0:	2d00      	cmp	r5, #0
 8007ba2:	d0dc      	beq.n	8007b5e <_dtoa_r+0x65e>
 8007ba4:	b12f      	cbz	r7, 8007bb2 <_dtoa_r+0x6b2>
 8007ba6:	42af      	cmp	r7, r5
 8007ba8:	d003      	beq.n	8007bb2 <_dtoa_r+0x6b2>
 8007baa:	4639      	mov	r1, r7
 8007bac:	4658      	mov	r0, fp
 8007bae:	f000 fbab 	bl	8008308 <_Bfree>
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	4658      	mov	r0, fp
 8007bb6:	f000 fba7 	bl	8008308 <_Bfree>
 8007bba:	e7d0      	b.n	8007b5e <_dtoa_r+0x65e>
 8007bbc:	9704      	str	r7, [sp, #16]
 8007bbe:	4633      	mov	r3, r6
 8007bc0:	461e      	mov	r6, r3
 8007bc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bc6:	2a39      	cmp	r2, #57	@ 0x39
 8007bc8:	d107      	bne.n	8007bda <_dtoa_r+0x6da>
 8007bca:	459a      	cmp	sl, r3
 8007bcc:	d1f8      	bne.n	8007bc0 <_dtoa_r+0x6c0>
 8007bce:	9a04      	ldr	r2, [sp, #16]
 8007bd0:	3201      	adds	r2, #1
 8007bd2:	9204      	str	r2, [sp, #16]
 8007bd4:	2230      	movs	r2, #48	@ 0x30
 8007bd6:	f88a 2000 	strb.w	r2, [sl]
 8007bda:	781a      	ldrb	r2, [r3, #0]
 8007bdc:	3201      	adds	r2, #1
 8007bde:	701a      	strb	r2, [r3, #0]
 8007be0:	e7bd      	b.n	8007b5e <_dtoa_r+0x65e>
 8007be2:	4b7b      	ldr	r3, [pc, #492]	@ (8007dd0 <_dtoa_r+0x8d0>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	f7f8 fd07 	bl	80005f8 <__aeabi_dmul>
 8007bea:	2200      	movs	r2, #0
 8007bec:	2300      	movs	r3, #0
 8007bee:	4604      	mov	r4, r0
 8007bf0:	460d      	mov	r5, r1
 8007bf2:	f7f8 ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	f43f aebb 	beq.w	8007972 <_dtoa_r+0x472>
 8007bfc:	e6f0      	b.n	80079e0 <_dtoa_r+0x4e0>
 8007bfe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007c00:	2a00      	cmp	r2, #0
 8007c02:	f000 80db 	beq.w	8007dbc <_dtoa_r+0x8bc>
 8007c06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c08:	2a01      	cmp	r2, #1
 8007c0a:	f300 80bf 	bgt.w	8007d8c <_dtoa_r+0x88c>
 8007c0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007c10:	2a00      	cmp	r2, #0
 8007c12:	f000 80b7 	beq.w	8007d84 <_dtoa_r+0x884>
 8007c16:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007c1a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c1c:	4646      	mov	r6, r8
 8007c1e:	9a08      	ldr	r2, [sp, #32]
 8007c20:	2101      	movs	r1, #1
 8007c22:	441a      	add	r2, r3
 8007c24:	4658      	mov	r0, fp
 8007c26:	4498      	add	r8, r3
 8007c28:	9208      	str	r2, [sp, #32]
 8007c2a:	f000 fc6b 	bl	8008504 <__i2b>
 8007c2e:	4605      	mov	r5, r0
 8007c30:	b15e      	cbz	r6, 8007c4a <_dtoa_r+0x74a>
 8007c32:	9b08      	ldr	r3, [sp, #32]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	dd08      	ble.n	8007c4a <_dtoa_r+0x74a>
 8007c38:	42b3      	cmp	r3, r6
 8007c3a:	9a08      	ldr	r2, [sp, #32]
 8007c3c:	bfa8      	it	ge
 8007c3e:	4633      	movge	r3, r6
 8007c40:	eba8 0803 	sub.w	r8, r8, r3
 8007c44:	1af6      	subs	r6, r6, r3
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	9308      	str	r3, [sp, #32]
 8007c4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c4c:	b1f3      	cbz	r3, 8007c8c <_dtoa_r+0x78c>
 8007c4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 80b7 	beq.w	8007dc4 <_dtoa_r+0x8c4>
 8007c56:	b18c      	cbz	r4, 8007c7c <_dtoa_r+0x77c>
 8007c58:	4629      	mov	r1, r5
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	4658      	mov	r0, fp
 8007c5e:	f000 fd11 	bl	8008684 <__pow5mult>
 8007c62:	464a      	mov	r2, r9
 8007c64:	4601      	mov	r1, r0
 8007c66:	4605      	mov	r5, r0
 8007c68:	4658      	mov	r0, fp
 8007c6a:	f000 fc61 	bl	8008530 <__multiply>
 8007c6e:	4649      	mov	r1, r9
 8007c70:	9004      	str	r0, [sp, #16]
 8007c72:	4658      	mov	r0, fp
 8007c74:	f000 fb48 	bl	8008308 <_Bfree>
 8007c78:	9b04      	ldr	r3, [sp, #16]
 8007c7a:	4699      	mov	r9, r3
 8007c7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c7e:	1b1a      	subs	r2, r3, r4
 8007c80:	d004      	beq.n	8007c8c <_dtoa_r+0x78c>
 8007c82:	4649      	mov	r1, r9
 8007c84:	4658      	mov	r0, fp
 8007c86:	f000 fcfd 	bl	8008684 <__pow5mult>
 8007c8a:	4681      	mov	r9, r0
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	4658      	mov	r0, fp
 8007c90:	f000 fc38 	bl	8008504 <__i2b>
 8007c94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c96:	4604      	mov	r4, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 81cf 	beq.w	800803c <_dtoa_r+0xb3c>
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	4601      	mov	r1, r0
 8007ca2:	4658      	mov	r0, fp
 8007ca4:	f000 fcee 	bl	8008684 <__pow5mult>
 8007ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	4604      	mov	r4, r0
 8007cae:	f300 8095 	bgt.w	8007ddc <_dtoa_r+0x8dc>
 8007cb2:	9b02      	ldr	r3, [sp, #8]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f040 8087 	bne.w	8007dc8 <_dtoa_r+0x8c8>
 8007cba:	9b03      	ldr	r3, [sp, #12]
 8007cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f040 8089 	bne.w	8007dd8 <_dtoa_r+0x8d8>
 8007cc6:	9b03      	ldr	r3, [sp, #12]
 8007cc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ccc:	0d1b      	lsrs	r3, r3, #20
 8007cce:	051b      	lsls	r3, r3, #20
 8007cd0:	b12b      	cbz	r3, 8007cde <_dtoa_r+0x7de>
 8007cd2:	9b08      	ldr	r3, [sp, #32]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	9308      	str	r3, [sp, #32]
 8007cd8:	f108 0801 	add.w	r8, r8, #1
 8007cdc:	2301      	movs	r3, #1
 8007cde:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 81b0 	beq.w	8008048 <_dtoa_r+0xb48>
 8007ce8:	6923      	ldr	r3, [r4, #16]
 8007cea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007cee:	6918      	ldr	r0, [r3, #16]
 8007cf0:	f000 fbbc 	bl	800846c <__hi0bits>
 8007cf4:	f1c0 0020 	rsb	r0, r0, #32
 8007cf8:	9b08      	ldr	r3, [sp, #32]
 8007cfa:	4418      	add	r0, r3
 8007cfc:	f010 001f 	ands.w	r0, r0, #31
 8007d00:	d077      	beq.n	8007df2 <_dtoa_r+0x8f2>
 8007d02:	f1c0 0320 	rsb	r3, r0, #32
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	dd6b      	ble.n	8007de2 <_dtoa_r+0x8e2>
 8007d0a:	9b08      	ldr	r3, [sp, #32]
 8007d0c:	f1c0 001c 	rsb	r0, r0, #28
 8007d10:	4403      	add	r3, r0
 8007d12:	4480      	add	r8, r0
 8007d14:	4406      	add	r6, r0
 8007d16:	9308      	str	r3, [sp, #32]
 8007d18:	f1b8 0f00 	cmp.w	r8, #0
 8007d1c:	dd05      	ble.n	8007d2a <_dtoa_r+0x82a>
 8007d1e:	4649      	mov	r1, r9
 8007d20:	4642      	mov	r2, r8
 8007d22:	4658      	mov	r0, fp
 8007d24:	f000 fd08 	bl	8008738 <__lshift>
 8007d28:	4681      	mov	r9, r0
 8007d2a:	9b08      	ldr	r3, [sp, #32]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	dd05      	ble.n	8007d3c <_dtoa_r+0x83c>
 8007d30:	4621      	mov	r1, r4
 8007d32:	461a      	mov	r2, r3
 8007d34:	4658      	mov	r0, fp
 8007d36:	f000 fcff 	bl	8008738 <__lshift>
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d059      	beq.n	8007df6 <_dtoa_r+0x8f6>
 8007d42:	4621      	mov	r1, r4
 8007d44:	4648      	mov	r0, r9
 8007d46:	f000 fd63 	bl	8008810 <__mcmp>
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	da53      	bge.n	8007df6 <_dtoa_r+0x8f6>
 8007d4e:	1e7b      	subs	r3, r7, #1
 8007d50:	9304      	str	r3, [sp, #16]
 8007d52:	4649      	mov	r1, r9
 8007d54:	2300      	movs	r3, #0
 8007d56:	220a      	movs	r2, #10
 8007d58:	4658      	mov	r0, fp
 8007d5a:	f000 faf7 	bl	800834c <__multadd>
 8007d5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d60:	4681      	mov	r9, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 8172 	beq.w	800804c <_dtoa_r+0xb4c>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	220a      	movs	r2, #10
 8007d6e:	4658      	mov	r0, fp
 8007d70:	f000 faec 	bl	800834c <__multadd>
 8007d74:	9b00      	ldr	r3, [sp, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	4605      	mov	r5, r0
 8007d7a:	dc67      	bgt.n	8007e4c <_dtoa_r+0x94c>
 8007d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	dc41      	bgt.n	8007e06 <_dtoa_r+0x906>
 8007d82:	e063      	b.n	8007e4c <_dtoa_r+0x94c>
 8007d84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007d86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007d8a:	e746      	b.n	8007c1a <_dtoa_r+0x71a>
 8007d8c:	9b07      	ldr	r3, [sp, #28]
 8007d8e:	1e5c      	subs	r4, r3, #1
 8007d90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d92:	42a3      	cmp	r3, r4
 8007d94:	bfbf      	itttt	lt
 8007d96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007d98:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007d9a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007d9c:	1ae3      	sublt	r3, r4, r3
 8007d9e:	bfb4      	ite	lt
 8007da0:	18d2      	addlt	r2, r2, r3
 8007da2:	1b1c      	subge	r4, r3, r4
 8007da4:	9b07      	ldr	r3, [sp, #28]
 8007da6:	bfbc      	itt	lt
 8007da8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007daa:	2400      	movlt	r4, #0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	bfb5      	itete	lt
 8007db0:	eba8 0603 	sublt.w	r6, r8, r3
 8007db4:	9b07      	ldrge	r3, [sp, #28]
 8007db6:	2300      	movlt	r3, #0
 8007db8:	4646      	movge	r6, r8
 8007dba:	e730      	b.n	8007c1e <_dtoa_r+0x71e>
 8007dbc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007dbe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007dc0:	4646      	mov	r6, r8
 8007dc2:	e735      	b.n	8007c30 <_dtoa_r+0x730>
 8007dc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007dc6:	e75c      	b.n	8007c82 <_dtoa_r+0x782>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	e788      	b.n	8007cde <_dtoa_r+0x7de>
 8007dcc:	3fe00000 	.word	0x3fe00000
 8007dd0:	40240000 	.word	0x40240000
 8007dd4:	40140000 	.word	0x40140000
 8007dd8:	9b02      	ldr	r3, [sp, #8]
 8007dda:	e780      	b.n	8007cde <_dtoa_r+0x7de>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	930a      	str	r3, [sp, #40]	@ 0x28
 8007de0:	e782      	b.n	8007ce8 <_dtoa_r+0x7e8>
 8007de2:	d099      	beq.n	8007d18 <_dtoa_r+0x818>
 8007de4:	9a08      	ldr	r2, [sp, #32]
 8007de6:	331c      	adds	r3, #28
 8007de8:	441a      	add	r2, r3
 8007dea:	4498      	add	r8, r3
 8007dec:	441e      	add	r6, r3
 8007dee:	9208      	str	r2, [sp, #32]
 8007df0:	e792      	b.n	8007d18 <_dtoa_r+0x818>
 8007df2:	4603      	mov	r3, r0
 8007df4:	e7f6      	b.n	8007de4 <_dtoa_r+0x8e4>
 8007df6:	9b07      	ldr	r3, [sp, #28]
 8007df8:	9704      	str	r7, [sp, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	dc20      	bgt.n	8007e40 <_dtoa_r+0x940>
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	dd1e      	ble.n	8007e44 <_dtoa_r+0x944>
 8007e06:	9b00      	ldr	r3, [sp, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f47f aec0 	bne.w	8007b8e <_dtoa_r+0x68e>
 8007e0e:	4621      	mov	r1, r4
 8007e10:	2205      	movs	r2, #5
 8007e12:	4658      	mov	r0, fp
 8007e14:	f000 fa9a 	bl	800834c <__multadd>
 8007e18:	4601      	mov	r1, r0
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	4648      	mov	r0, r9
 8007e1e:	f000 fcf7 	bl	8008810 <__mcmp>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	f77f aeb3 	ble.w	8007b8e <_dtoa_r+0x68e>
 8007e28:	4656      	mov	r6, sl
 8007e2a:	2331      	movs	r3, #49	@ 0x31
 8007e2c:	f806 3b01 	strb.w	r3, [r6], #1
 8007e30:	9b04      	ldr	r3, [sp, #16]
 8007e32:	3301      	adds	r3, #1
 8007e34:	9304      	str	r3, [sp, #16]
 8007e36:	e6ae      	b.n	8007b96 <_dtoa_r+0x696>
 8007e38:	9c07      	ldr	r4, [sp, #28]
 8007e3a:	9704      	str	r7, [sp, #16]
 8007e3c:	4625      	mov	r5, r4
 8007e3e:	e7f3      	b.n	8007e28 <_dtoa_r+0x928>
 8007e40:	9b07      	ldr	r3, [sp, #28]
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 8104 	beq.w	8008054 <_dtoa_r+0xb54>
 8007e4c:	2e00      	cmp	r6, #0
 8007e4e:	dd05      	ble.n	8007e5c <_dtoa_r+0x95c>
 8007e50:	4629      	mov	r1, r5
 8007e52:	4632      	mov	r2, r6
 8007e54:	4658      	mov	r0, fp
 8007e56:	f000 fc6f 	bl	8008738 <__lshift>
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d05a      	beq.n	8007f18 <_dtoa_r+0xa18>
 8007e62:	6869      	ldr	r1, [r5, #4]
 8007e64:	4658      	mov	r0, fp
 8007e66:	f000 fa0f 	bl	8008288 <_Balloc>
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	b928      	cbnz	r0, 8007e7a <_dtoa_r+0x97a>
 8007e6e:	4b84      	ldr	r3, [pc, #528]	@ (8008080 <_dtoa_r+0xb80>)
 8007e70:	4602      	mov	r2, r0
 8007e72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007e76:	f7ff bb5a 	b.w	800752e <_dtoa_r+0x2e>
 8007e7a:	692a      	ldr	r2, [r5, #16]
 8007e7c:	3202      	adds	r2, #2
 8007e7e:	0092      	lsls	r2, r2, #2
 8007e80:	f105 010c 	add.w	r1, r5, #12
 8007e84:	300c      	adds	r0, #12
 8007e86:	f002 f94d 	bl	800a124 <memcpy>
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4658      	mov	r0, fp
 8007e90:	f000 fc52 	bl	8008738 <__lshift>
 8007e94:	f10a 0301 	add.w	r3, sl, #1
 8007e98:	9307      	str	r3, [sp, #28]
 8007e9a:	9b00      	ldr	r3, [sp, #0]
 8007e9c:	4453      	add	r3, sl
 8007e9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ea0:	9b02      	ldr	r3, [sp, #8]
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	462f      	mov	r7, r5
 8007ea8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007eaa:	4605      	mov	r5, r0
 8007eac:	9b07      	ldr	r3, [sp, #28]
 8007eae:	4621      	mov	r1, r4
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	4648      	mov	r0, r9
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	f7ff fa9b 	bl	80073f0 <quorem>
 8007eba:	4639      	mov	r1, r7
 8007ebc:	9002      	str	r0, [sp, #8]
 8007ebe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007ec2:	4648      	mov	r0, r9
 8007ec4:	f000 fca4 	bl	8008810 <__mcmp>
 8007ec8:	462a      	mov	r2, r5
 8007eca:	9008      	str	r0, [sp, #32]
 8007ecc:	4621      	mov	r1, r4
 8007ece:	4658      	mov	r0, fp
 8007ed0:	f000 fcba 	bl	8008848 <__mdiff>
 8007ed4:	68c2      	ldr	r2, [r0, #12]
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	bb02      	cbnz	r2, 8007f1c <_dtoa_r+0xa1c>
 8007eda:	4601      	mov	r1, r0
 8007edc:	4648      	mov	r0, r9
 8007ede:	f000 fc97 	bl	8008810 <__mcmp>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	4658      	mov	r0, fp
 8007ee8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007eea:	f000 fa0d 	bl	8008308 <_Bfree>
 8007eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ef2:	9e07      	ldr	r6, [sp, #28]
 8007ef4:	ea43 0102 	orr.w	r1, r3, r2
 8007ef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007efa:	4319      	orrs	r1, r3
 8007efc:	d110      	bne.n	8007f20 <_dtoa_r+0xa20>
 8007efe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f02:	d029      	beq.n	8007f58 <_dtoa_r+0xa58>
 8007f04:	9b08      	ldr	r3, [sp, #32]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	dd02      	ble.n	8007f10 <_dtoa_r+0xa10>
 8007f0a:	9b02      	ldr	r3, [sp, #8]
 8007f0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007f10:	9b00      	ldr	r3, [sp, #0]
 8007f12:	f883 8000 	strb.w	r8, [r3]
 8007f16:	e63f      	b.n	8007b98 <_dtoa_r+0x698>
 8007f18:	4628      	mov	r0, r5
 8007f1a:	e7bb      	b.n	8007e94 <_dtoa_r+0x994>
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	e7e1      	b.n	8007ee4 <_dtoa_r+0x9e4>
 8007f20:	9b08      	ldr	r3, [sp, #32]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	db04      	blt.n	8007f30 <_dtoa_r+0xa30>
 8007f26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f28:	430b      	orrs	r3, r1
 8007f2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f2c:	430b      	orrs	r3, r1
 8007f2e:	d120      	bne.n	8007f72 <_dtoa_r+0xa72>
 8007f30:	2a00      	cmp	r2, #0
 8007f32:	dded      	ble.n	8007f10 <_dtoa_r+0xa10>
 8007f34:	4649      	mov	r1, r9
 8007f36:	2201      	movs	r2, #1
 8007f38:	4658      	mov	r0, fp
 8007f3a:	f000 fbfd 	bl	8008738 <__lshift>
 8007f3e:	4621      	mov	r1, r4
 8007f40:	4681      	mov	r9, r0
 8007f42:	f000 fc65 	bl	8008810 <__mcmp>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	dc03      	bgt.n	8007f52 <_dtoa_r+0xa52>
 8007f4a:	d1e1      	bne.n	8007f10 <_dtoa_r+0xa10>
 8007f4c:	f018 0f01 	tst.w	r8, #1
 8007f50:	d0de      	beq.n	8007f10 <_dtoa_r+0xa10>
 8007f52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f56:	d1d8      	bne.n	8007f0a <_dtoa_r+0xa0a>
 8007f58:	9a00      	ldr	r2, [sp, #0]
 8007f5a:	2339      	movs	r3, #57	@ 0x39
 8007f5c:	7013      	strb	r3, [r2, #0]
 8007f5e:	4633      	mov	r3, r6
 8007f60:	461e      	mov	r6, r3
 8007f62:	3b01      	subs	r3, #1
 8007f64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007f68:	2a39      	cmp	r2, #57	@ 0x39
 8007f6a:	d052      	beq.n	8008012 <_dtoa_r+0xb12>
 8007f6c:	3201      	adds	r2, #1
 8007f6e:	701a      	strb	r2, [r3, #0]
 8007f70:	e612      	b.n	8007b98 <_dtoa_r+0x698>
 8007f72:	2a00      	cmp	r2, #0
 8007f74:	dd07      	ble.n	8007f86 <_dtoa_r+0xa86>
 8007f76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f7a:	d0ed      	beq.n	8007f58 <_dtoa_r+0xa58>
 8007f7c:	9a00      	ldr	r2, [sp, #0]
 8007f7e:	f108 0301 	add.w	r3, r8, #1
 8007f82:	7013      	strb	r3, [r2, #0]
 8007f84:	e608      	b.n	8007b98 <_dtoa_r+0x698>
 8007f86:	9b07      	ldr	r3, [sp, #28]
 8007f88:	9a07      	ldr	r2, [sp, #28]
 8007f8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007f8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d028      	beq.n	8007fe6 <_dtoa_r+0xae6>
 8007f94:	4649      	mov	r1, r9
 8007f96:	2300      	movs	r3, #0
 8007f98:	220a      	movs	r2, #10
 8007f9a:	4658      	mov	r0, fp
 8007f9c:	f000 f9d6 	bl	800834c <__multadd>
 8007fa0:	42af      	cmp	r7, r5
 8007fa2:	4681      	mov	r9, r0
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	f04f 020a 	mov.w	r2, #10
 8007fac:	4639      	mov	r1, r7
 8007fae:	4658      	mov	r0, fp
 8007fb0:	d107      	bne.n	8007fc2 <_dtoa_r+0xac2>
 8007fb2:	f000 f9cb 	bl	800834c <__multadd>
 8007fb6:	4607      	mov	r7, r0
 8007fb8:	4605      	mov	r5, r0
 8007fba:	9b07      	ldr	r3, [sp, #28]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	9307      	str	r3, [sp, #28]
 8007fc0:	e774      	b.n	8007eac <_dtoa_r+0x9ac>
 8007fc2:	f000 f9c3 	bl	800834c <__multadd>
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	4607      	mov	r7, r0
 8007fca:	2300      	movs	r3, #0
 8007fcc:	220a      	movs	r2, #10
 8007fce:	4658      	mov	r0, fp
 8007fd0:	f000 f9bc 	bl	800834c <__multadd>
 8007fd4:	4605      	mov	r5, r0
 8007fd6:	e7f0      	b.n	8007fba <_dtoa_r+0xaba>
 8007fd8:	9b00      	ldr	r3, [sp, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	bfcc      	ite	gt
 8007fde:	461e      	movgt	r6, r3
 8007fe0:	2601      	movle	r6, #1
 8007fe2:	4456      	add	r6, sl
 8007fe4:	2700      	movs	r7, #0
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	2201      	movs	r2, #1
 8007fea:	4658      	mov	r0, fp
 8007fec:	f000 fba4 	bl	8008738 <__lshift>
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	4681      	mov	r9, r0
 8007ff4:	f000 fc0c 	bl	8008810 <__mcmp>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	dcb0      	bgt.n	8007f5e <_dtoa_r+0xa5e>
 8007ffc:	d102      	bne.n	8008004 <_dtoa_r+0xb04>
 8007ffe:	f018 0f01 	tst.w	r8, #1
 8008002:	d1ac      	bne.n	8007f5e <_dtoa_r+0xa5e>
 8008004:	4633      	mov	r3, r6
 8008006:	461e      	mov	r6, r3
 8008008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800800c:	2a30      	cmp	r2, #48	@ 0x30
 800800e:	d0fa      	beq.n	8008006 <_dtoa_r+0xb06>
 8008010:	e5c2      	b.n	8007b98 <_dtoa_r+0x698>
 8008012:	459a      	cmp	sl, r3
 8008014:	d1a4      	bne.n	8007f60 <_dtoa_r+0xa60>
 8008016:	9b04      	ldr	r3, [sp, #16]
 8008018:	3301      	adds	r3, #1
 800801a:	9304      	str	r3, [sp, #16]
 800801c:	2331      	movs	r3, #49	@ 0x31
 800801e:	f88a 3000 	strb.w	r3, [sl]
 8008022:	e5b9      	b.n	8007b98 <_dtoa_r+0x698>
 8008024:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008026:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008084 <_dtoa_r+0xb84>
 800802a:	b11b      	cbz	r3, 8008034 <_dtoa_r+0xb34>
 800802c:	f10a 0308 	add.w	r3, sl, #8
 8008030:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	4650      	mov	r0, sl
 8008036:	b019      	add	sp, #100	@ 0x64
 8008038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800803e:	2b01      	cmp	r3, #1
 8008040:	f77f ae37 	ble.w	8007cb2 <_dtoa_r+0x7b2>
 8008044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008046:	930a      	str	r3, [sp, #40]	@ 0x28
 8008048:	2001      	movs	r0, #1
 800804a:	e655      	b.n	8007cf8 <_dtoa_r+0x7f8>
 800804c:	9b00      	ldr	r3, [sp, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	f77f aed6 	ble.w	8007e00 <_dtoa_r+0x900>
 8008054:	4656      	mov	r6, sl
 8008056:	4621      	mov	r1, r4
 8008058:	4648      	mov	r0, r9
 800805a:	f7ff f9c9 	bl	80073f0 <quorem>
 800805e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008062:	f806 8b01 	strb.w	r8, [r6], #1
 8008066:	9b00      	ldr	r3, [sp, #0]
 8008068:	eba6 020a 	sub.w	r2, r6, sl
 800806c:	4293      	cmp	r3, r2
 800806e:	ddb3      	ble.n	8007fd8 <_dtoa_r+0xad8>
 8008070:	4649      	mov	r1, r9
 8008072:	2300      	movs	r3, #0
 8008074:	220a      	movs	r2, #10
 8008076:	4658      	mov	r0, fp
 8008078:	f000 f968 	bl	800834c <__multadd>
 800807c:	4681      	mov	r9, r0
 800807e:	e7ea      	b.n	8008056 <_dtoa_r+0xb56>
 8008080:	08017421 	.word	0x08017421
 8008084:	080173bc 	.word	0x080173bc

08008088 <_free_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4605      	mov	r5, r0
 800808c:	2900      	cmp	r1, #0
 800808e:	d041      	beq.n	8008114 <_free_r+0x8c>
 8008090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008094:	1f0c      	subs	r4, r1, #4
 8008096:	2b00      	cmp	r3, #0
 8008098:	bfb8      	it	lt
 800809a:	18e4      	addlt	r4, r4, r3
 800809c:	f000 f8e8 	bl	8008270 <__malloc_lock>
 80080a0:	4a1d      	ldr	r2, [pc, #116]	@ (8008118 <_free_r+0x90>)
 80080a2:	6813      	ldr	r3, [r2, #0]
 80080a4:	b933      	cbnz	r3, 80080b4 <_free_r+0x2c>
 80080a6:	6063      	str	r3, [r4, #4]
 80080a8:	6014      	str	r4, [r2, #0]
 80080aa:	4628      	mov	r0, r5
 80080ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080b0:	f000 b8e4 	b.w	800827c <__malloc_unlock>
 80080b4:	42a3      	cmp	r3, r4
 80080b6:	d908      	bls.n	80080ca <_free_r+0x42>
 80080b8:	6820      	ldr	r0, [r4, #0]
 80080ba:	1821      	adds	r1, r4, r0
 80080bc:	428b      	cmp	r3, r1
 80080be:	bf01      	itttt	eq
 80080c0:	6819      	ldreq	r1, [r3, #0]
 80080c2:	685b      	ldreq	r3, [r3, #4]
 80080c4:	1809      	addeq	r1, r1, r0
 80080c6:	6021      	streq	r1, [r4, #0]
 80080c8:	e7ed      	b.n	80080a6 <_free_r+0x1e>
 80080ca:	461a      	mov	r2, r3
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	b10b      	cbz	r3, 80080d4 <_free_r+0x4c>
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	d9fa      	bls.n	80080ca <_free_r+0x42>
 80080d4:	6811      	ldr	r1, [r2, #0]
 80080d6:	1850      	adds	r0, r2, r1
 80080d8:	42a0      	cmp	r0, r4
 80080da:	d10b      	bne.n	80080f4 <_free_r+0x6c>
 80080dc:	6820      	ldr	r0, [r4, #0]
 80080de:	4401      	add	r1, r0
 80080e0:	1850      	adds	r0, r2, r1
 80080e2:	4283      	cmp	r3, r0
 80080e4:	6011      	str	r1, [r2, #0]
 80080e6:	d1e0      	bne.n	80080aa <_free_r+0x22>
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	6053      	str	r3, [r2, #4]
 80080ee:	4408      	add	r0, r1
 80080f0:	6010      	str	r0, [r2, #0]
 80080f2:	e7da      	b.n	80080aa <_free_r+0x22>
 80080f4:	d902      	bls.n	80080fc <_free_r+0x74>
 80080f6:	230c      	movs	r3, #12
 80080f8:	602b      	str	r3, [r5, #0]
 80080fa:	e7d6      	b.n	80080aa <_free_r+0x22>
 80080fc:	6820      	ldr	r0, [r4, #0]
 80080fe:	1821      	adds	r1, r4, r0
 8008100:	428b      	cmp	r3, r1
 8008102:	bf04      	itt	eq
 8008104:	6819      	ldreq	r1, [r3, #0]
 8008106:	685b      	ldreq	r3, [r3, #4]
 8008108:	6063      	str	r3, [r4, #4]
 800810a:	bf04      	itt	eq
 800810c:	1809      	addeq	r1, r1, r0
 800810e:	6021      	streq	r1, [r4, #0]
 8008110:	6054      	str	r4, [r2, #4]
 8008112:	e7ca      	b.n	80080aa <_free_r+0x22>
 8008114:	bd38      	pop	{r3, r4, r5, pc}
 8008116:	bf00      	nop
 8008118:	20007ca0 	.word	0x20007ca0

0800811c <malloc>:
 800811c:	4b02      	ldr	r3, [pc, #8]	@ (8008128 <malloc+0xc>)
 800811e:	4601      	mov	r1, r0
 8008120:	6818      	ldr	r0, [r3, #0]
 8008122:	f000 b825 	b.w	8008170 <_malloc_r>
 8008126:	bf00      	nop
 8008128:	2000003c 	.word	0x2000003c

0800812c <sbrk_aligned>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	4e0f      	ldr	r6, [pc, #60]	@ (800816c <sbrk_aligned+0x40>)
 8008130:	460c      	mov	r4, r1
 8008132:	6831      	ldr	r1, [r6, #0]
 8008134:	4605      	mov	r5, r0
 8008136:	b911      	cbnz	r1, 800813e <sbrk_aligned+0x12>
 8008138:	f001 ffe4 	bl	800a104 <_sbrk_r>
 800813c:	6030      	str	r0, [r6, #0]
 800813e:	4621      	mov	r1, r4
 8008140:	4628      	mov	r0, r5
 8008142:	f001 ffdf 	bl	800a104 <_sbrk_r>
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	d103      	bne.n	8008152 <sbrk_aligned+0x26>
 800814a:	f04f 34ff 	mov.w	r4, #4294967295
 800814e:	4620      	mov	r0, r4
 8008150:	bd70      	pop	{r4, r5, r6, pc}
 8008152:	1cc4      	adds	r4, r0, #3
 8008154:	f024 0403 	bic.w	r4, r4, #3
 8008158:	42a0      	cmp	r0, r4
 800815a:	d0f8      	beq.n	800814e <sbrk_aligned+0x22>
 800815c:	1a21      	subs	r1, r4, r0
 800815e:	4628      	mov	r0, r5
 8008160:	f001 ffd0 	bl	800a104 <_sbrk_r>
 8008164:	3001      	adds	r0, #1
 8008166:	d1f2      	bne.n	800814e <sbrk_aligned+0x22>
 8008168:	e7ef      	b.n	800814a <sbrk_aligned+0x1e>
 800816a:	bf00      	nop
 800816c:	20007c9c 	.word	0x20007c9c

08008170 <_malloc_r>:
 8008170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008174:	1ccd      	adds	r5, r1, #3
 8008176:	f025 0503 	bic.w	r5, r5, #3
 800817a:	3508      	adds	r5, #8
 800817c:	2d0c      	cmp	r5, #12
 800817e:	bf38      	it	cc
 8008180:	250c      	movcc	r5, #12
 8008182:	2d00      	cmp	r5, #0
 8008184:	4606      	mov	r6, r0
 8008186:	db01      	blt.n	800818c <_malloc_r+0x1c>
 8008188:	42a9      	cmp	r1, r5
 800818a:	d904      	bls.n	8008196 <_malloc_r+0x26>
 800818c:	230c      	movs	r3, #12
 800818e:	6033      	str	r3, [r6, #0]
 8008190:	2000      	movs	r0, #0
 8008192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008196:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800826c <_malloc_r+0xfc>
 800819a:	f000 f869 	bl	8008270 <__malloc_lock>
 800819e:	f8d8 3000 	ldr.w	r3, [r8]
 80081a2:	461c      	mov	r4, r3
 80081a4:	bb44      	cbnz	r4, 80081f8 <_malloc_r+0x88>
 80081a6:	4629      	mov	r1, r5
 80081a8:	4630      	mov	r0, r6
 80081aa:	f7ff ffbf 	bl	800812c <sbrk_aligned>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	4604      	mov	r4, r0
 80081b2:	d158      	bne.n	8008266 <_malloc_r+0xf6>
 80081b4:	f8d8 4000 	ldr.w	r4, [r8]
 80081b8:	4627      	mov	r7, r4
 80081ba:	2f00      	cmp	r7, #0
 80081bc:	d143      	bne.n	8008246 <_malloc_r+0xd6>
 80081be:	2c00      	cmp	r4, #0
 80081c0:	d04b      	beq.n	800825a <_malloc_r+0xea>
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	4639      	mov	r1, r7
 80081c6:	4630      	mov	r0, r6
 80081c8:	eb04 0903 	add.w	r9, r4, r3
 80081cc:	f001 ff9a 	bl	800a104 <_sbrk_r>
 80081d0:	4581      	cmp	r9, r0
 80081d2:	d142      	bne.n	800825a <_malloc_r+0xea>
 80081d4:	6821      	ldr	r1, [r4, #0]
 80081d6:	1a6d      	subs	r5, r5, r1
 80081d8:	4629      	mov	r1, r5
 80081da:	4630      	mov	r0, r6
 80081dc:	f7ff ffa6 	bl	800812c <sbrk_aligned>
 80081e0:	3001      	adds	r0, #1
 80081e2:	d03a      	beq.n	800825a <_malloc_r+0xea>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	442b      	add	r3, r5
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	f8d8 3000 	ldr.w	r3, [r8]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	bb62      	cbnz	r2, 800824c <_malloc_r+0xdc>
 80081f2:	f8c8 7000 	str.w	r7, [r8]
 80081f6:	e00f      	b.n	8008218 <_malloc_r+0xa8>
 80081f8:	6822      	ldr	r2, [r4, #0]
 80081fa:	1b52      	subs	r2, r2, r5
 80081fc:	d420      	bmi.n	8008240 <_malloc_r+0xd0>
 80081fe:	2a0b      	cmp	r2, #11
 8008200:	d917      	bls.n	8008232 <_malloc_r+0xc2>
 8008202:	1961      	adds	r1, r4, r5
 8008204:	42a3      	cmp	r3, r4
 8008206:	6025      	str	r5, [r4, #0]
 8008208:	bf18      	it	ne
 800820a:	6059      	strne	r1, [r3, #4]
 800820c:	6863      	ldr	r3, [r4, #4]
 800820e:	bf08      	it	eq
 8008210:	f8c8 1000 	streq.w	r1, [r8]
 8008214:	5162      	str	r2, [r4, r5]
 8008216:	604b      	str	r3, [r1, #4]
 8008218:	4630      	mov	r0, r6
 800821a:	f000 f82f 	bl	800827c <__malloc_unlock>
 800821e:	f104 000b 	add.w	r0, r4, #11
 8008222:	1d23      	adds	r3, r4, #4
 8008224:	f020 0007 	bic.w	r0, r0, #7
 8008228:	1ac2      	subs	r2, r0, r3
 800822a:	bf1c      	itt	ne
 800822c:	1a1b      	subne	r3, r3, r0
 800822e:	50a3      	strne	r3, [r4, r2]
 8008230:	e7af      	b.n	8008192 <_malloc_r+0x22>
 8008232:	6862      	ldr	r2, [r4, #4]
 8008234:	42a3      	cmp	r3, r4
 8008236:	bf0c      	ite	eq
 8008238:	f8c8 2000 	streq.w	r2, [r8]
 800823c:	605a      	strne	r2, [r3, #4]
 800823e:	e7eb      	b.n	8008218 <_malloc_r+0xa8>
 8008240:	4623      	mov	r3, r4
 8008242:	6864      	ldr	r4, [r4, #4]
 8008244:	e7ae      	b.n	80081a4 <_malloc_r+0x34>
 8008246:	463c      	mov	r4, r7
 8008248:	687f      	ldr	r7, [r7, #4]
 800824a:	e7b6      	b.n	80081ba <_malloc_r+0x4a>
 800824c:	461a      	mov	r2, r3
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	42a3      	cmp	r3, r4
 8008252:	d1fb      	bne.n	800824c <_malloc_r+0xdc>
 8008254:	2300      	movs	r3, #0
 8008256:	6053      	str	r3, [r2, #4]
 8008258:	e7de      	b.n	8008218 <_malloc_r+0xa8>
 800825a:	230c      	movs	r3, #12
 800825c:	6033      	str	r3, [r6, #0]
 800825e:	4630      	mov	r0, r6
 8008260:	f000 f80c 	bl	800827c <__malloc_unlock>
 8008264:	e794      	b.n	8008190 <_malloc_r+0x20>
 8008266:	6005      	str	r5, [r0, #0]
 8008268:	e7d6      	b.n	8008218 <_malloc_r+0xa8>
 800826a:	bf00      	nop
 800826c:	20007ca0 	.word	0x20007ca0

08008270 <__malloc_lock>:
 8008270:	4801      	ldr	r0, [pc, #4]	@ (8008278 <__malloc_lock+0x8>)
 8008272:	f7ff b896 	b.w	80073a2 <__retarget_lock_acquire_recursive>
 8008276:	bf00      	nop
 8008278:	20007c98 	.word	0x20007c98

0800827c <__malloc_unlock>:
 800827c:	4801      	ldr	r0, [pc, #4]	@ (8008284 <__malloc_unlock+0x8>)
 800827e:	f7ff b891 	b.w	80073a4 <__retarget_lock_release_recursive>
 8008282:	bf00      	nop
 8008284:	20007c98 	.word	0x20007c98

08008288 <_Balloc>:
 8008288:	b570      	push	{r4, r5, r6, lr}
 800828a:	69c6      	ldr	r6, [r0, #28]
 800828c:	4604      	mov	r4, r0
 800828e:	460d      	mov	r5, r1
 8008290:	b976      	cbnz	r6, 80082b0 <_Balloc+0x28>
 8008292:	2010      	movs	r0, #16
 8008294:	f7ff ff42 	bl	800811c <malloc>
 8008298:	4602      	mov	r2, r0
 800829a:	61e0      	str	r0, [r4, #28]
 800829c:	b920      	cbnz	r0, 80082a8 <_Balloc+0x20>
 800829e:	4b18      	ldr	r3, [pc, #96]	@ (8008300 <_Balloc+0x78>)
 80082a0:	4818      	ldr	r0, [pc, #96]	@ (8008304 <_Balloc+0x7c>)
 80082a2:	216b      	movs	r1, #107	@ 0x6b
 80082a4:	f7ff f886 	bl	80073b4 <__assert_func>
 80082a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082ac:	6006      	str	r6, [r0, #0]
 80082ae:	60c6      	str	r6, [r0, #12]
 80082b0:	69e6      	ldr	r6, [r4, #28]
 80082b2:	68f3      	ldr	r3, [r6, #12]
 80082b4:	b183      	cbz	r3, 80082d8 <_Balloc+0x50>
 80082b6:	69e3      	ldr	r3, [r4, #28]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082be:	b9b8      	cbnz	r0, 80082f0 <_Balloc+0x68>
 80082c0:	2101      	movs	r1, #1
 80082c2:	fa01 f605 	lsl.w	r6, r1, r5
 80082c6:	1d72      	adds	r2, r6, #5
 80082c8:	0092      	lsls	r2, r2, #2
 80082ca:	4620      	mov	r0, r4
 80082cc:	f001 ff47 	bl	800a15e <_calloc_r>
 80082d0:	b160      	cbz	r0, 80082ec <_Balloc+0x64>
 80082d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082d6:	e00e      	b.n	80082f6 <_Balloc+0x6e>
 80082d8:	2221      	movs	r2, #33	@ 0x21
 80082da:	2104      	movs	r1, #4
 80082dc:	4620      	mov	r0, r4
 80082de:	f001 ff3e 	bl	800a15e <_calloc_r>
 80082e2:	69e3      	ldr	r3, [r4, #28]
 80082e4:	60f0      	str	r0, [r6, #12]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1e4      	bne.n	80082b6 <_Balloc+0x2e>
 80082ec:	2000      	movs	r0, #0
 80082ee:	bd70      	pop	{r4, r5, r6, pc}
 80082f0:	6802      	ldr	r2, [r0, #0]
 80082f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082f6:	2300      	movs	r3, #0
 80082f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082fc:	e7f7      	b.n	80082ee <_Balloc+0x66>
 80082fe:	bf00      	nop
 8008300:	080172d8 	.word	0x080172d8
 8008304:	08017432 	.word	0x08017432

08008308 <_Bfree>:
 8008308:	b570      	push	{r4, r5, r6, lr}
 800830a:	69c6      	ldr	r6, [r0, #28]
 800830c:	4605      	mov	r5, r0
 800830e:	460c      	mov	r4, r1
 8008310:	b976      	cbnz	r6, 8008330 <_Bfree+0x28>
 8008312:	2010      	movs	r0, #16
 8008314:	f7ff ff02 	bl	800811c <malloc>
 8008318:	4602      	mov	r2, r0
 800831a:	61e8      	str	r0, [r5, #28]
 800831c:	b920      	cbnz	r0, 8008328 <_Bfree+0x20>
 800831e:	4b09      	ldr	r3, [pc, #36]	@ (8008344 <_Bfree+0x3c>)
 8008320:	4809      	ldr	r0, [pc, #36]	@ (8008348 <_Bfree+0x40>)
 8008322:	218f      	movs	r1, #143	@ 0x8f
 8008324:	f7ff f846 	bl	80073b4 <__assert_func>
 8008328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800832c:	6006      	str	r6, [r0, #0]
 800832e:	60c6      	str	r6, [r0, #12]
 8008330:	b13c      	cbz	r4, 8008342 <_Bfree+0x3a>
 8008332:	69eb      	ldr	r3, [r5, #28]
 8008334:	6862      	ldr	r2, [r4, #4]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800833c:	6021      	str	r1, [r4, #0]
 800833e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008342:	bd70      	pop	{r4, r5, r6, pc}
 8008344:	080172d8 	.word	0x080172d8
 8008348:	08017432 	.word	0x08017432

0800834c <__multadd>:
 800834c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008350:	690d      	ldr	r5, [r1, #16]
 8008352:	4607      	mov	r7, r0
 8008354:	460c      	mov	r4, r1
 8008356:	461e      	mov	r6, r3
 8008358:	f101 0c14 	add.w	ip, r1, #20
 800835c:	2000      	movs	r0, #0
 800835e:	f8dc 3000 	ldr.w	r3, [ip]
 8008362:	b299      	uxth	r1, r3
 8008364:	fb02 6101 	mla	r1, r2, r1, r6
 8008368:	0c1e      	lsrs	r6, r3, #16
 800836a:	0c0b      	lsrs	r3, r1, #16
 800836c:	fb02 3306 	mla	r3, r2, r6, r3
 8008370:	b289      	uxth	r1, r1
 8008372:	3001      	adds	r0, #1
 8008374:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008378:	4285      	cmp	r5, r0
 800837a:	f84c 1b04 	str.w	r1, [ip], #4
 800837e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008382:	dcec      	bgt.n	800835e <__multadd+0x12>
 8008384:	b30e      	cbz	r6, 80083ca <__multadd+0x7e>
 8008386:	68a3      	ldr	r3, [r4, #8]
 8008388:	42ab      	cmp	r3, r5
 800838a:	dc19      	bgt.n	80083c0 <__multadd+0x74>
 800838c:	6861      	ldr	r1, [r4, #4]
 800838e:	4638      	mov	r0, r7
 8008390:	3101      	adds	r1, #1
 8008392:	f7ff ff79 	bl	8008288 <_Balloc>
 8008396:	4680      	mov	r8, r0
 8008398:	b928      	cbnz	r0, 80083a6 <__multadd+0x5a>
 800839a:	4602      	mov	r2, r0
 800839c:	4b0c      	ldr	r3, [pc, #48]	@ (80083d0 <__multadd+0x84>)
 800839e:	480d      	ldr	r0, [pc, #52]	@ (80083d4 <__multadd+0x88>)
 80083a0:	21ba      	movs	r1, #186	@ 0xba
 80083a2:	f7ff f807 	bl	80073b4 <__assert_func>
 80083a6:	6922      	ldr	r2, [r4, #16]
 80083a8:	3202      	adds	r2, #2
 80083aa:	f104 010c 	add.w	r1, r4, #12
 80083ae:	0092      	lsls	r2, r2, #2
 80083b0:	300c      	adds	r0, #12
 80083b2:	f001 feb7 	bl	800a124 <memcpy>
 80083b6:	4621      	mov	r1, r4
 80083b8:	4638      	mov	r0, r7
 80083ba:	f7ff ffa5 	bl	8008308 <_Bfree>
 80083be:	4644      	mov	r4, r8
 80083c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083c4:	3501      	adds	r5, #1
 80083c6:	615e      	str	r6, [r3, #20]
 80083c8:	6125      	str	r5, [r4, #16]
 80083ca:	4620      	mov	r0, r4
 80083cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083d0:	08017421 	.word	0x08017421
 80083d4:	08017432 	.word	0x08017432

080083d8 <__s2b>:
 80083d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083dc:	460c      	mov	r4, r1
 80083de:	4615      	mov	r5, r2
 80083e0:	461f      	mov	r7, r3
 80083e2:	2209      	movs	r2, #9
 80083e4:	3308      	adds	r3, #8
 80083e6:	4606      	mov	r6, r0
 80083e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80083ec:	2100      	movs	r1, #0
 80083ee:	2201      	movs	r2, #1
 80083f0:	429a      	cmp	r2, r3
 80083f2:	db09      	blt.n	8008408 <__s2b+0x30>
 80083f4:	4630      	mov	r0, r6
 80083f6:	f7ff ff47 	bl	8008288 <_Balloc>
 80083fa:	b940      	cbnz	r0, 800840e <__s2b+0x36>
 80083fc:	4602      	mov	r2, r0
 80083fe:	4b19      	ldr	r3, [pc, #100]	@ (8008464 <__s2b+0x8c>)
 8008400:	4819      	ldr	r0, [pc, #100]	@ (8008468 <__s2b+0x90>)
 8008402:	21d3      	movs	r1, #211	@ 0xd3
 8008404:	f7fe ffd6 	bl	80073b4 <__assert_func>
 8008408:	0052      	lsls	r2, r2, #1
 800840a:	3101      	adds	r1, #1
 800840c:	e7f0      	b.n	80083f0 <__s2b+0x18>
 800840e:	9b08      	ldr	r3, [sp, #32]
 8008410:	6143      	str	r3, [r0, #20]
 8008412:	2d09      	cmp	r5, #9
 8008414:	f04f 0301 	mov.w	r3, #1
 8008418:	6103      	str	r3, [r0, #16]
 800841a:	dd16      	ble.n	800844a <__s2b+0x72>
 800841c:	f104 0909 	add.w	r9, r4, #9
 8008420:	46c8      	mov	r8, r9
 8008422:	442c      	add	r4, r5
 8008424:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008428:	4601      	mov	r1, r0
 800842a:	3b30      	subs	r3, #48	@ 0x30
 800842c:	220a      	movs	r2, #10
 800842e:	4630      	mov	r0, r6
 8008430:	f7ff ff8c 	bl	800834c <__multadd>
 8008434:	45a0      	cmp	r8, r4
 8008436:	d1f5      	bne.n	8008424 <__s2b+0x4c>
 8008438:	f1a5 0408 	sub.w	r4, r5, #8
 800843c:	444c      	add	r4, r9
 800843e:	1b2d      	subs	r5, r5, r4
 8008440:	1963      	adds	r3, r4, r5
 8008442:	42bb      	cmp	r3, r7
 8008444:	db04      	blt.n	8008450 <__s2b+0x78>
 8008446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800844a:	340a      	adds	r4, #10
 800844c:	2509      	movs	r5, #9
 800844e:	e7f6      	b.n	800843e <__s2b+0x66>
 8008450:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008454:	4601      	mov	r1, r0
 8008456:	3b30      	subs	r3, #48	@ 0x30
 8008458:	220a      	movs	r2, #10
 800845a:	4630      	mov	r0, r6
 800845c:	f7ff ff76 	bl	800834c <__multadd>
 8008460:	e7ee      	b.n	8008440 <__s2b+0x68>
 8008462:	bf00      	nop
 8008464:	08017421 	.word	0x08017421
 8008468:	08017432 	.word	0x08017432

0800846c <__hi0bits>:
 800846c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008470:	4603      	mov	r3, r0
 8008472:	bf36      	itet	cc
 8008474:	0403      	lslcc	r3, r0, #16
 8008476:	2000      	movcs	r0, #0
 8008478:	2010      	movcc	r0, #16
 800847a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800847e:	bf3c      	itt	cc
 8008480:	021b      	lslcc	r3, r3, #8
 8008482:	3008      	addcc	r0, #8
 8008484:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008488:	bf3c      	itt	cc
 800848a:	011b      	lslcc	r3, r3, #4
 800848c:	3004      	addcc	r0, #4
 800848e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008492:	bf3c      	itt	cc
 8008494:	009b      	lslcc	r3, r3, #2
 8008496:	3002      	addcc	r0, #2
 8008498:	2b00      	cmp	r3, #0
 800849a:	db05      	blt.n	80084a8 <__hi0bits+0x3c>
 800849c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80084a0:	f100 0001 	add.w	r0, r0, #1
 80084a4:	bf08      	it	eq
 80084a6:	2020      	moveq	r0, #32
 80084a8:	4770      	bx	lr

080084aa <__lo0bits>:
 80084aa:	6803      	ldr	r3, [r0, #0]
 80084ac:	4602      	mov	r2, r0
 80084ae:	f013 0007 	ands.w	r0, r3, #7
 80084b2:	d00b      	beq.n	80084cc <__lo0bits+0x22>
 80084b4:	07d9      	lsls	r1, r3, #31
 80084b6:	d421      	bmi.n	80084fc <__lo0bits+0x52>
 80084b8:	0798      	lsls	r0, r3, #30
 80084ba:	bf49      	itett	mi
 80084bc:	085b      	lsrmi	r3, r3, #1
 80084be:	089b      	lsrpl	r3, r3, #2
 80084c0:	2001      	movmi	r0, #1
 80084c2:	6013      	strmi	r3, [r2, #0]
 80084c4:	bf5c      	itt	pl
 80084c6:	6013      	strpl	r3, [r2, #0]
 80084c8:	2002      	movpl	r0, #2
 80084ca:	4770      	bx	lr
 80084cc:	b299      	uxth	r1, r3
 80084ce:	b909      	cbnz	r1, 80084d4 <__lo0bits+0x2a>
 80084d0:	0c1b      	lsrs	r3, r3, #16
 80084d2:	2010      	movs	r0, #16
 80084d4:	b2d9      	uxtb	r1, r3
 80084d6:	b909      	cbnz	r1, 80084dc <__lo0bits+0x32>
 80084d8:	3008      	adds	r0, #8
 80084da:	0a1b      	lsrs	r3, r3, #8
 80084dc:	0719      	lsls	r1, r3, #28
 80084de:	bf04      	itt	eq
 80084e0:	091b      	lsreq	r3, r3, #4
 80084e2:	3004      	addeq	r0, #4
 80084e4:	0799      	lsls	r1, r3, #30
 80084e6:	bf04      	itt	eq
 80084e8:	089b      	lsreq	r3, r3, #2
 80084ea:	3002      	addeq	r0, #2
 80084ec:	07d9      	lsls	r1, r3, #31
 80084ee:	d403      	bmi.n	80084f8 <__lo0bits+0x4e>
 80084f0:	085b      	lsrs	r3, r3, #1
 80084f2:	f100 0001 	add.w	r0, r0, #1
 80084f6:	d003      	beq.n	8008500 <__lo0bits+0x56>
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	4770      	bx	lr
 80084fc:	2000      	movs	r0, #0
 80084fe:	4770      	bx	lr
 8008500:	2020      	movs	r0, #32
 8008502:	4770      	bx	lr

08008504 <__i2b>:
 8008504:	b510      	push	{r4, lr}
 8008506:	460c      	mov	r4, r1
 8008508:	2101      	movs	r1, #1
 800850a:	f7ff febd 	bl	8008288 <_Balloc>
 800850e:	4602      	mov	r2, r0
 8008510:	b928      	cbnz	r0, 800851e <__i2b+0x1a>
 8008512:	4b05      	ldr	r3, [pc, #20]	@ (8008528 <__i2b+0x24>)
 8008514:	4805      	ldr	r0, [pc, #20]	@ (800852c <__i2b+0x28>)
 8008516:	f240 1145 	movw	r1, #325	@ 0x145
 800851a:	f7fe ff4b 	bl	80073b4 <__assert_func>
 800851e:	2301      	movs	r3, #1
 8008520:	6144      	str	r4, [r0, #20]
 8008522:	6103      	str	r3, [r0, #16]
 8008524:	bd10      	pop	{r4, pc}
 8008526:	bf00      	nop
 8008528:	08017421 	.word	0x08017421
 800852c:	08017432 	.word	0x08017432

08008530 <__multiply>:
 8008530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008534:	4614      	mov	r4, r2
 8008536:	690a      	ldr	r2, [r1, #16]
 8008538:	6923      	ldr	r3, [r4, #16]
 800853a:	429a      	cmp	r2, r3
 800853c:	bfa8      	it	ge
 800853e:	4623      	movge	r3, r4
 8008540:	460f      	mov	r7, r1
 8008542:	bfa4      	itt	ge
 8008544:	460c      	movge	r4, r1
 8008546:	461f      	movge	r7, r3
 8008548:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800854c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008550:	68a3      	ldr	r3, [r4, #8]
 8008552:	6861      	ldr	r1, [r4, #4]
 8008554:	eb0a 0609 	add.w	r6, sl, r9
 8008558:	42b3      	cmp	r3, r6
 800855a:	b085      	sub	sp, #20
 800855c:	bfb8      	it	lt
 800855e:	3101      	addlt	r1, #1
 8008560:	f7ff fe92 	bl	8008288 <_Balloc>
 8008564:	b930      	cbnz	r0, 8008574 <__multiply+0x44>
 8008566:	4602      	mov	r2, r0
 8008568:	4b44      	ldr	r3, [pc, #272]	@ (800867c <__multiply+0x14c>)
 800856a:	4845      	ldr	r0, [pc, #276]	@ (8008680 <__multiply+0x150>)
 800856c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008570:	f7fe ff20 	bl	80073b4 <__assert_func>
 8008574:	f100 0514 	add.w	r5, r0, #20
 8008578:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800857c:	462b      	mov	r3, r5
 800857e:	2200      	movs	r2, #0
 8008580:	4543      	cmp	r3, r8
 8008582:	d321      	bcc.n	80085c8 <__multiply+0x98>
 8008584:	f107 0114 	add.w	r1, r7, #20
 8008588:	f104 0214 	add.w	r2, r4, #20
 800858c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008590:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008594:	9302      	str	r3, [sp, #8]
 8008596:	1b13      	subs	r3, r2, r4
 8008598:	3b15      	subs	r3, #21
 800859a:	f023 0303 	bic.w	r3, r3, #3
 800859e:	3304      	adds	r3, #4
 80085a0:	f104 0715 	add.w	r7, r4, #21
 80085a4:	42ba      	cmp	r2, r7
 80085a6:	bf38      	it	cc
 80085a8:	2304      	movcc	r3, #4
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	9b02      	ldr	r3, [sp, #8]
 80085ae:	9103      	str	r1, [sp, #12]
 80085b0:	428b      	cmp	r3, r1
 80085b2:	d80c      	bhi.n	80085ce <__multiply+0x9e>
 80085b4:	2e00      	cmp	r6, #0
 80085b6:	dd03      	ble.n	80085c0 <__multiply+0x90>
 80085b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d05b      	beq.n	8008678 <__multiply+0x148>
 80085c0:	6106      	str	r6, [r0, #16]
 80085c2:	b005      	add	sp, #20
 80085c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c8:	f843 2b04 	str.w	r2, [r3], #4
 80085cc:	e7d8      	b.n	8008580 <__multiply+0x50>
 80085ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80085d2:	f1ba 0f00 	cmp.w	sl, #0
 80085d6:	d024      	beq.n	8008622 <__multiply+0xf2>
 80085d8:	f104 0e14 	add.w	lr, r4, #20
 80085dc:	46a9      	mov	r9, r5
 80085de:	f04f 0c00 	mov.w	ip, #0
 80085e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80085e6:	f8d9 3000 	ldr.w	r3, [r9]
 80085ea:	fa1f fb87 	uxth.w	fp, r7
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	fb0a 330b 	mla	r3, sl, fp, r3
 80085f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80085f8:	f8d9 7000 	ldr.w	r7, [r9]
 80085fc:	4463      	add	r3, ip
 80085fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008602:	fb0a c70b 	mla	r7, sl, fp, ip
 8008606:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800860a:	b29b      	uxth	r3, r3
 800860c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008610:	4572      	cmp	r2, lr
 8008612:	f849 3b04 	str.w	r3, [r9], #4
 8008616:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800861a:	d8e2      	bhi.n	80085e2 <__multiply+0xb2>
 800861c:	9b01      	ldr	r3, [sp, #4]
 800861e:	f845 c003 	str.w	ip, [r5, r3]
 8008622:	9b03      	ldr	r3, [sp, #12]
 8008624:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008628:	3104      	adds	r1, #4
 800862a:	f1b9 0f00 	cmp.w	r9, #0
 800862e:	d021      	beq.n	8008674 <__multiply+0x144>
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	f104 0c14 	add.w	ip, r4, #20
 8008636:	46ae      	mov	lr, r5
 8008638:	f04f 0a00 	mov.w	sl, #0
 800863c:	f8bc b000 	ldrh.w	fp, [ip]
 8008640:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008644:	fb09 770b 	mla	r7, r9, fp, r7
 8008648:	4457      	add	r7, sl
 800864a:	b29b      	uxth	r3, r3
 800864c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008650:	f84e 3b04 	str.w	r3, [lr], #4
 8008654:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008658:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800865c:	f8be 3000 	ldrh.w	r3, [lr]
 8008660:	fb09 330a 	mla	r3, r9, sl, r3
 8008664:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008668:	4562      	cmp	r2, ip
 800866a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800866e:	d8e5      	bhi.n	800863c <__multiply+0x10c>
 8008670:	9f01      	ldr	r7, [sp, #4]
 8008672:	51eb      	str	r3, [r5, r7]
 8008674:	3504      	adds	r5, #4
 8008676:	e799      	b.n	80085ac <__multiply+0x7c>
 8008678:	3e01      	subs	r6, #1
 800867a:	e79b      	b.n	80085b4 <__multiply+0x84>
 800867c:	08017421 	.word	0x08017421
 8008680:	08017432 	.word	0x08017432

08008684 <__pow5mult>:
 8008684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008688:	4615      	mov	r5, r2
 800868a:	f012 0203 	ands.w	r2, r2, #3
 800868e:	4607      	mov	r7, r0
 8008690:	460e      	mov	r6, r1
 8008692:	d007      	beq.n	80086a4 <__pow5mult+0x20>
 8008694:	4c25      	ldr	r4, [pc, #148]	@ (800872c <__pow5mult+0xa8>)
 8008696:	3a01      	subs	r2, #1
 8008698:	2300      	movs	r3, #0
 800869a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800869e:	f7ff fe55 	bl	800834c <__multadd>
 80086a2:	4606      	mov	r6, r0
 80086a4:	10ad      	asrs	r5, r5, #2
 80086a6:	d03d      	beq.n	8008724 <__pow5mult+0xa0>
 80086a8:	69fc      	ldr	r4, [r7, #28]
 80086aa:	b97c      	cbnz	r4, 80086cc <__pow5mult+0x48>
 80086ac:	2010      	movs	r0, #16
 80086ae:	f7ff fd35 	bl	800811c <malloc>
 80086b2:	4602      	mov	r2, r0
 80086b4:	61f8      	str	r0, [r7, #28]
 80086b6:	b928      	cbnz	r0, 80086c4 <__pow5mult+0x40>
 80086b8:	4b1d      	ldr	r3, [pc, #116]	@ (8008730 <__pow5mult+0xac>)
 80086ba:	481e      	ldr	r0, [pc, #120]	@ (8008734 <__pow5mult+0xb0>)
 80086bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80086c0:	f7fe fe78 	bl	80073b4 <__assert_func>
 80086c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086c8:	6004      	str	r4, [r0, #0]
 80086ca:	60c4      	str	r4, [r0, #12]
 80086cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80086d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086d4:	b94c      	cbnz	r4, 80086ea <__pow5mult+0x66>
 80086d6:	f240 2171 	movw	r1, #625	@ 0x271
 80086da:	4638      	mov	r0, r7
 80086dc:	f7ff ff12 	bl	8008504 <__i2b>
 80086e0:	2300      	movs	r3, #0
 80086e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80086e6:	4604      	mov	r4, r0
 80086e8:	6003      	str	r3, [r0, #0]
 80086ea:	f04f 0900 	mov.w	r9, #0
 80086ee:	07eb      	lsls	r3, r5, #31
 80086f0:	d50a      	bpl.n	8008708 <__pow5mult+0x84>
 80086f2:	4631      	mov	r1, r6
 80086f4:	4622      	mov	r2, r4
 80086f6:	4638      	mov	r0, r7
 80086f8:	f7ff ff1a 	bl	8008530 <__multiply>
 80086fc:	4631      	mov	r1, r6
 80086fe:	4680      	mov	r8, r0
 8008700:	4638      	mov	r0, r7
 8008702:	f7ff fe01 	bl	8008308 <_Bfree>
 8008706:	4646      	mov	r6, r8
 8008708:	106d      	asrs	r5, r5, #1
 800870a:	d00b      	beq.n	8008724 <__pow5mult+0xa0>
 800870c:	6820      	ldr	r0, [r4, #0]
 800870e:	b938      	cbnz	r0, 8008720 <__pow5mult+0x9c>
 8008710:	4622      	mov	r2, r4
 8008712:	4621      	mov	r1, r4
 8008714:	4638      	mov	r0, r7
 8008716:	f7ff ff0b 	bl	8008530 <__multiply>
 800871a:	6020      	str	r0, [r4, #0]
 800871c:	f8c0 9000 	str.w	r9, [r0]
 8008720:	4604      	mov	r4, r0
 8008722:	e7e4      	b.n	80086ee <__pow5mult+0x6a>
 8008724:	4630      	mov	r0, r6
 8008726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800872a:	bf00      	nop
 800872c:	0801748c 	.word	0x0801748c
 8008730:	080172d8 	.word	0x080172d8
 8008734:	08017432 	.word	0x08017432

08008738 <__lshift>:
 8008738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800873c:	460c      	mov	r4, r1
 800873e:	6849      	ldr	r1, [r1, #4]
 8008740:	6923      	ldr	r3, [r4, #16]
 8008742:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008746:	68a3      	ldr	r3, [r4, #8]
 8008748:	4607      	mov	r7, r0
 800874a:	4691      	mov	r9, r2
 800874c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008750:	f108 0601 	add.w	r6, r8, #1
 8008754:	42b3      	cmp	r3, r6
 8008756:	db0b      	blt.n	8008770 <__lshift+0x38>
 8008758:	4638      	mov	r0, r7
 800875a:	f7ff fd95 	bl	8008288 <_Balloc>
 800875e:	4605      	mov	r5, r0
 8008760:	b948      	cbnz	r0, 8008776 <__lshift+0x3e>
 8008762:	4602      	mov	r2, r0
 8008764:	4b28      	ldr	r3, [pc, #160]	@ (8008808 <__lshift+0xd0>)
 8008766:	4829      	ldr	r0, [pc, #164]	@ (800880c <__lshift+0xd4>)
 8008768:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800876c:	f7fe fe22 	bl	80073b4 <__assert_func>
 8008770:	3101      	adds	r1, #1
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	e7ee      	b.n	8008754 <__lshift+0x1c>
 8008776:	2300      	movs	r3, #0
 8008778:	f100 0114 	add.w	r1, r0, #20
 800877c:	f100 0210 	add.w	r2, r0, #16
 8008780:	4618      	mov	r0, r3
 8008782:	4553      	cmp	r3, sl
 8008784:	db33      	blt.n	80087ee <__lshift+0xb6>
 8008786:	6920      	ldr	r0, [r4, #16]
 8008788:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800878c:	f104 0314 	add.w	r3, r4, #20
 8008790:	f019 091f 	ands.w	r9, r9, #31
 8008794:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008798:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800879c:	d02b      	beq.n	80087f6 <__lshift+0xbe>
 800879e:	f1c9 0e20 	rsb	lr, r9, #32
 80087a2:	468a      	mov	sl, r1
 80087a4:	2200      	movs	r2, #0
 80087a6:	6818      	ldr	r0, [r3, #0]
 80087a8:	fa00 f009 	lsl.w	r0, r0, r9
 80087ac:	4310      	orrs	r0, r2
 80087ae:	f84a 0b04 	str.w	r0, [sl], #4
 80087b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087b6:	459c      	cmp	ip, r3
 80087b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80087bc:	d8f3      	bhi.n	80087a6 <__lshift+0x6e>
 80087be:	ebac 0304 	sub.w	r3, ip, r4
 80087c2:	3b15      	subs	r3, #21
 80087c4:	f023 0303 	bic.w	r3, r3, #3
 80087c8:	3304      	adds	r3, #4
 80087ca:	f104 0015 	add.w	r0, r4, #21
 80087ce:	4584      	cmp	ip, r0
 80087d0:	bf38      	it	cc
 80087d2:	2304      	movcc	r3, #4
 80087d4:	50ca      	str	r2, [r1, r3]
 80087d6:	b10a      	cbz	r2, 80087dc <__lshift+0xa4>
 80087d8:	f108 0602 	add.w	r6, r8, #2
 80087dc:	3e01      	subs	r6, #1
 80087de:	4638      	mov	r0, r7
 80087e0:	612e      	str	r6, [r5, #16]
 80087e2:	4621      	mov	r1, r4
 80087e4:	f7ff fd90 	bl	8008308 <_Bfree>
 80087e8:	4628      	mov	r0, r5
 80087ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80087f2:	3301      	adds	r3, #1
 80087f4:	e7c5      	b.n	8008782 <__lshift+0x4a>
 80087f6:	3904      	subs	r1, #4
 80087f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80087fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008800:	459c      	cmp	ip, r3
 8008802:	d8f9      	bhi.n	80087f8 <__lshift+0xc0>
 8008804:	e7ea      	b.n	80087dc <__lshift+0xa4>
 8008806:	bf00      	nop
 8008808:	08017421 	.word	0x08017421
 800880c:	08017432 	.word	0x08017432

08008810 <__mcmp>:
 8008810:	690a      	ldr	r2, [r1, #16]
 8008812:	4603      	mov	r3, r0
 8008814:	6900      	ldr	r0, [r0, #16]
 8008816:	1a80      	subs	r0, r0, r2
 8008818:	b530      	push	{r4, r5, lr}
 800881a:	d10e      	bne.n	800883a <__mcmp+0x2a>
 800881c:	3314      	adds	r3, #20
 800881e:	3114      	adds	r1, #20
 8008820:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008824:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008828:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800882c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008830:	4295      	cmp	r5, r2
 8008832:	d003      	beq.n	800883c <__mcmp+0x2c>
 8008834:	d205      	bcs.n	8008842 <__mcmp+0x32>
 8008836:	f04f 30ff 	mov.w	r0, #4294967295
 800883a:	bd30      	pop	{r4, r5, pc}
 800883c:	42a3      	cmp	r3, r4
 800883e:	d3f3      	bcc.n	8008828 <__mcmp+0x18>
 8008840:	e7fb      	b.n	800883a <__mcmp+0x2a>
 8008842:	2001      	movs	r0, #1
 8008844:	e7f9      	b.n	800883a <__mcmp+0x2a>
	...

08008848 <__mdiff>:
 8008848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884c:	4689      	mov	r9, r1
 800884e:	4606      	mov	r6, r0
 8008850:	4611      	mov	r1, r2
 8008852:	4648      	mov	r0, r9
 8008854:	4614      	mov	r4, r2
 8008856:	f7ff ffdb 	bl	8008810 <__mcmp>
 800885a:	1e05      	subs	r5, r0, #0
 800885c:	d112      	bne.n	8008884 <__mdiff+0x3c>
 800885e:	4629      	mov	r1, r5
 8008860:	4630      	mov	r0, r6
 8008862:	f7ff fd11 	bl	8008288 <_Balloc>
 8008866:	4602      	mov	r2, r0
 8008868:	b928      	cbnz	r0, 8008876 <__mdiff+0x2e>
 800886a:	4b3f      	ldr	r3, [pc, #252]	@ (8008968 <__mdiff+0x120>)
 800886c:	f240 2137 	movw	r1, #567	@ 0x237
 8008870:	483e      	ldr	r0, [pc, #248]	@ (800896c <__mdiff+0x124>)
 8008872:	f7fe fd9f 	bl	80073b4 <__assert_func>
 8008876:	2301      	movs	r3, #1
 8008878:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800887c:	4610      	mov	r0, r2
 800887e:	b003      	add	sp, #12
 8008880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008884:	bfbc      	itt	lt
 8008886:	464b      	movlt	r3, r9
 8008888:	46a1      	movlt	r9, r4
 800888a:	4630      	mov	r0, r6
 800888c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008890:	bfba      	itte	lt
 8008892:	461c      	movlt	r4, r3
 8008894:	2501      	movlt	r5, #1
 8008896:	2500      	movge	r5, #0
 8008898:	f7ff fcf6 	bl	8008288 <_Balloc>
 800889c:	4602      	mov	r2, r0
 800889e:	b918      	cbnz	r0, 80088a8 <__mdiff+0x60>
 80088a0:	4b31      	ldr	r3, [pc, #196]	@ (8008968 <__mdiff+0x120>)
 80088a2:	f240 2145 	movw	r1, #581	@ 0x245
 80088a6:	e7e3      	b.n	8008870 <__mdiff+0x28>
 80088a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80088ac:	6926      	ldr	r6, [r4, #16]
 80088ae:	60c5      	str	r5, [r0, #12]
 80088b0:	f109 0310 	add.w	r3, r9, #16
 80088b4:	f109 0514 	add.w	r5, r9, #20
 80088b8:	f104 0e14 	add.w	lr, r4, #20
 80088bc:	f100 0b14 	add.w	fp, r0, #20
 80088c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80088c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80088c8:	9301      	str	r3, [sp, #4]
 80088ca:	46d9      	mov	r9, fp
 80088cc:	f04f 0c00 	mov.w	ip, #0
 80088d0:	9b01      	ldr	r3, [sp, #4]
 80088d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80088d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80088da:	9301      	str	r3, [sp, #4]
 80088dc:	fa1f f38a 	uxth.w	r3, sl
 80088e0:	4619      	mov	r1, r3
 80088e2:	b283      	uxth	r3, r0
 80088e4:	1acb      	subs	r3, r1, r3
 80088e6:	0c00      	lsrs	r0, r0, #16
 80088e8:	4463      	add	r3, ip
 80088ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80088ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80088f8:	4576      	cmp	r6, lr
 80088fa:	f849 3b04 	str.w	r3, [r9], #4
 80088fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008902:	d8e5      	bhi.n	80088d0 <__mdiff+0x88>
 8008904:	1b33      	subs	r3, r6, r4
 8008906:	3b15      	subs	r3, #21
 8008908:	f023 0303 	bic.w	r3, r3, #3
 800890c:	3415      	adds	r4, #21
 800890e:	3304      	adds	r3, #4
 8008910:	42a6      	cmp	r6, r4
 8008912:	bf38      	it	cc
 8008914:	2304      	movcc	r3, #4
 8008916:	441d      	add	r5, r3
 8008918:	445b      	add	r3, fp
 800891a:	461e      	mov	r6, r3
 800891c:	462c      	mov	r4, r5
 800891e:	4544      	cmp	r4, r8
 8008920:	d30e      	bcc.n	8008940 <__mdiff+0xf8>
 8008922:	f108 0103 	add.w	r1, r8, #3
 8008926:	1b49      	subs	r1, r1, r5
 8008928:	f021 0103 	bic.w	r1, r1, #3
 800892c:	3d03      	subs	r5, #3
 800892e:	45a8      	cmp	r8, r5
 8008930:	bf38      	it	cc
 8008932:	2100      	movcc	r1, #0
 8008934:	440b      	add	r3, r1
 8008936:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800893a:	b191      	cbz	r1, 8008962 <__mdiff+0x11a>
 800893c:	6117      	str	r7, [r2, #16]
 800893e:	e79d      	b.n	800887c <__mdiff+0x34>
 8008940:	f854 1b04 	ldr.w	r1, [r4], #4
 8008944:	46e6      	mov	lr, ip
 8008946:	0c08      	lsrs	r0, r1, #16
 8008948:	fa1c fc81 	uxtah	ip, ip, r1
 800894c:	4471      	add	r1, lr
 800894e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008952:	b289      	uxth	r1, r1
 8008954:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008958:	f846 1b04 	str.w	r1, [r6], #4
 800895c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008960:	e7dd      	b.n	800891e <__mdiff+0xd6>
 8008962:	3f01      	subs	r7, #1
 8008964:	e7e7      	b.n	8008936 <__mdiff+0xee>
 8008966:	bf00      	nop
 8008968:	08017421 	.word	0x08017421
 800896c:	08017432 	.word	0x08017432

08008970 <__ulp>:
 8008970:	b082      	sub	sp, #8
 8008972:	ed8d 0b00 	vstr	d0, [sp]
 8008976:	9a01      	ldr	r2, [sp, #4]
 8008978:	4b0f      	ldr	r3, [pc, #60]	@ (80089b8 <__ulp+0x48>)
 800897a:	4013      	ands	r3, r2
 800897c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008980:	2b00      	cmp	r3, #0
 8008982:	dc08      	bgt.n	8008996 <__ulp+0x26>
 8008984:	425b      	negs	r3, r3
 8008986:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800898a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800898e:	da04      	bge.n	800899a <__ulp+0x2a>
 8008990:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008994:	4113      	asrs	r3, r2
 8008996:	2200      	movs	r2, #0
 8008998:	e008      	b.n	80089ac <__ulp+0x3c>
 800899a:	f1a2 0314 	sub.w	r3, r2, #20
 800899e:	2b1e      	cmp	r3, #30
 80089a0:	bfda      	itte	le
 80089a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80089a6:	40da      	lsrle	r2, r3
 80089a8:	2201      	movgt	r2, #1
 80089aa:	2300      	movs	r3, #0
 80089ac:	4619      	mov	r1, r3
 80089ae:	4610      	mov	r0, r2
 80089b0:	ec41 0b10 	vmov	d0, r0, r1
 80089b4:	b002      	add	sp, #8
 80089b6:	4770      	bx	lr
 80089b8:	7ff00000 	.word	0x7ff00000

080089bc <__b2d>:
 80089bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c0:	6906      	ldr	r6, [r0, #16]
 80089c2:	f100 0814 	add.w	r8, r0, #20
 80089c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80089ca:	1f37      	subs	r7, r6, #4
 80089cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80089d0:	4610      	mov	r0, r2
 80089d2:	f7ff fd4b 	bl	800846c <__hi0bits>
 80089d6:	f1c0 0320 	rsb	r3, r0, #32
 80089da:	280a      	cmp	r0, #10
 80089dc:	600b      	str	r3, [r1, #0]
 80089de:	491b      	ldr	r1, [pc, #108]	@ (8008a4c <__b2d+0x90>)
 80089e0:	dc15      	bgt.n	8008a0e <__b2d+0x52>
 80089e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80089e6:	fa22 f30c 	lsr.w	r3, r2, ip
 80089ea:	45b8      	cmp	r8, r7
 80089ec:	ea43 0501 	orr.w	r5, r3, r1
 80089f0:	bf34      	ite	cc
 80089f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80089f6:	2300      	movcs	r3, #0
 80089f8:	3015      	adds	r0, #21
 80089fa:	fa02 f000 	lsl.w	r0, r2, r0
 80089fe:	fa23 f30c 	lsr.w	r3, r3, ip
 8008a02:	4303      	orrs	r3, r0
 8008a04:	461c      	mov	r4, r3
 8008a06:	ec45 4b10 	vmov	d0, r4, r5
 8008a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a0e:	45b8      	cmp	r8, r7
 8008a10:	bf3a      	itte	cc
 8008a12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008a16:	f1a6 0708 	subcc.w	r7, r6, #8
 8008a1a:	2300      	movcs	r3, #0
 8008a1c:	380b      	subs	r0, #11
 8008a1e:	d012      	beq.n	8008a46 <__b2d+0x8a>
 8008a20:	f1c0 0120 	rsb	r1, r0, #32
 8008a24:	fa23 f401 	lsr.w	r4, r3, r1
 8008a28:	4082      	lsls	r2, r0
 8008a2a:	4322      	orrs	r2, r4
 8008a2c:	4547      	cmp	r7, r8
 8008a2e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008a32:	bf8c      	ite	hi
 8008a34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008a38:	2200      	movls	r2, #0
 8008a3a:	4083      	lsls	r3, r0
 8008a3c:	40ca      	lsrs	r2, r1
 8008a3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008a42:	4313      	orrs	r3, r2
 8008a44:	e7de      	b.n	8008a04 <__b2d+0x48>
 8008a46:	ea42 0501 	orr.w	r5, r2, r1
 8008a4a:	e7db      	b.n	8008a04 <__b2d+0x48>
 8008a4c:	3ff00000 	.word	0x3ff00000

08008a50 <__d2b>:
 8008a50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a54:	460f      	mov	r7, r1
 8008a56:	2101      	movs	r1, #1
 8008a58:	ec59 8b10 	vmov	r8, r9, d0
 8008a5c:	4616      	mov	r6, r2
 8008a5e:	f7ff fc13 	bl	8008288 <_Balloc>
 8008a62:	4604      	mov	r4, r0
 8008a64:	b930      	cbnz	r0, 8008a74 <__d2b+0x24>
 8008a66:	4602      	mov	r2, r0
 8008a68:	4b23      	ldr	r3, [pc, #140]	@ (8008af8 <__d2b+0xa8>)
 8008a6a:	4824      	ldr	r0, [pc, #144]	@ (8008afc <__d2b+0xac>)
 8008a6c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008a70:	f7fe fca0 	bl	80073b4 <__assert_func>
 8008a74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a7c:	b10d      	cbz	r5, 8008a82 <__d2b+0x32>
 8008a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a82:	9301      	str	r3, [sp, #4]
 8008a84:	f1b8 0300 	subs.w	r3, r8, #0
 8008a88:	d023      	beq.n	8008ad2 <__d2b+0x82>
 8008a8a:	4668      	mov	r0, sp
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	f7ff fd0c 	bl	80084aa <__lo0bits>
 8008a92:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a96:	b1d0      	cbz	r0, 8008ace <__d2b+0x7e>
 8008a98:	f1c0 0320 	rsb	r3, r0, #32
 8008a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa0:	430b      	orrs	r3, r1
 8008aa2:	40c2      	lsrs	r2, r0
 8008aa4:	6163      	str	r3, [r4, #20]
 8008aa6:	9201      	str	r2, [sp, #4]
 8008aa8:	9b01      	ldr	r3, [sp, #4]
 8008aaa:	61a3      	str	r3, [r4, #24]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	bf0c      	ite	eq
 8008ab0:	2201      	moveq	r2, #1
 8008ab2:	2202      	movne	r2, #2
 8008ab4:	6122      	str	r2, [r4, #16]
 8008ab6:	b1a5      	cbz	r5, 8008ae2 <__d2b+0x92>
 8008ab8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008abc:	4405      	add	r5, r0
 8008abe:	603d      	str	r5, [r7, #0]
 8008ac0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ac4:	6030      	str	r0, [r6, #0]
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	b003      	add	sp, #12
 8008aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ace:	6161      	str	r1, [r4, #20]
 8008ad0:	e7ea      	b.n	8008aa8 <__d2b+0x58>
 8008ad2:	a801      	add	r0, sp, #4
 8008ad4:	f7ff fce9 	bl	80084aa <__lo0bits>
 8008ad8:	9b01      	ldr	r3, [sp, #4]
 8008ada:	6163      	str	r3, [r4, #20]
 8008adc:	3020      	adds	r0, #32
 8008ade:	2201      	movs	r2, #1
 8008ae0:	e7e8      	b.n	8008ab4 <__d2b+0x64>
 8008ae2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ae6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008aea:	6038      	str	r0, [r7, #0]
 8008aec:	6918      	ldr	r0, [r3, #16]
 8008aee:	f7ff fcbd 	bl	800846c <__hi0bits>
 8008af2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008af6:	e7e5      	b.n	8008ac4 <__d2b+0x74>
 8008af8:	08017421 	.word	0x08017421
 8008afc:	08017432 	.word	0x08017432

08008b00 <__ratio>:
 8008b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b04:	b085      	sub	sp, #20
 8008b06:	e9cd 1000 	strd	r1, r0, [sp]
 8008b0a:	a902      	add	r1, sp, #8
 8008b0c:	f7ff ff56 	bl	80089bc <__b2d>
 8008b10:	9800      	ldr	r0, [sp, #0]
 8008b12:	a903      	add	r1, sp, #12
 8008b14:	ec55 4b10 	vmov	r4, r5, d0
 8008b18:	f7ff ff50 	bl	80089bc <__b2d>
 8008b1c:	9b01      	ldr	r3, [sp, #4]
 8008b1e:	6919      	ldr	r1, [r3, #16]
 8008b20:	9b00      	ldr	r3, [sp, #0]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	1ac9      	subs	r1, r1, r3
 8008b26:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008b2a:	1a9b      	subs	r3, r3, r2
 8008b2c:	ec5b ab10 	vmov	sl, fp, d0
 8008b30:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	bfce      	itee	gt
 8008b38:	462a      	movgt	r2, r5
 8008b3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008b3e:	465a      	movle	r2, fp
 8008b40:	462f      	mov	r7, r5
 8008b42:	46d9      	mov	r9, fp
 8008b44:	bfcc      	ite	gt
 8008b46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008b4a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008b4e:	464b      	mov	r3, r9
 8008b50:	4652      	mov	r2, sl
 8008b52:	4620      	mov	r0, r4
 8008b54:	4639      	mov	r1, r7
 8008b56:	f7f7 fe79 	bl	800084c <__aeabi_ddiv>
 8008b5a:	ec41 0b10 	vmov	d0, r0, r1
 8008b5e:	b005      	add	sp, #20
 8008b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b64 <__copybits>:
 8008b64:	3901      	subs	r1, #1
 8008b66:	b570      	push	{r4, r5, r6, lr}
 8008b68:	1149      	asrs	r1, r1, #5
 8008b6a:	6914      	ldr	r4, [r2, #16]
 8008b6c:	3101      	adds	r1, #1
 8008b6e:	f102 0314 	add.w	r3, r2, #20
 8008b72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008b76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008b7a:	1f05      	subs	r5, r0, #4
 8008b7c:	42a3      	cmp	r3, r4
 8008b7e:	d30c      	bcc.n	8008b9a <__copybits+0x36>
 8008b80:	1aa3      	subs	r3, r4, r2
 8008b82:	3b11      	subs	r3, #17
 8008b84:	f023 0303 	bic.w	r3, r3, #3
 8008b88:	3211      	adds	r2, #17
 8008b8a:	42a2      	cmp	r2, r4
 8008b8c:	bf88      	it	hi
 8008b8e:	2300      	movhi	r3, #0
 8008b90:	4418      	add	r0, r3
 8008b92:	2300      	movs	r3, #0
 8008b94:	4288      	cmp	r0, r1
 8008b96:	d305      	bcc.n	8008ba4 <__copybits+0x40>
 8008b98:	bd70      	pop	{r4, r5, r6, pc}
 8008b9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008b9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008ba2:	e7eb      	b.n	8008b7c <__copybits+0x18>
 8008ba4:	f840 3b04 	str.w	r3, [r0], #4
 8008ba8:	e7f4      	b.n	8008b94 <__copybits+0x30>

08008baa <__any_on>:
 8008baa:	f100 0214 	add.w	r2, r0, #20
 8008bae:	6900      	ldr	r0, [r0, #16]
 8008bb0:	114b      	asrs	r3, r1, #5
 8008bb2:	4298      	cmp	r0, r3
 8008bb4:	b510      	push	{r4, lr}
 8008bb6:	db11      	blt.n	8008bdc <__any_on+0x32>
 8008bb8:	dd0a      	ble.n	8008bd0 <__any_on+0x26>
 8008bba:	f011 011f 	ands.w	r1, r1, #31
 8008bbe:	d007      	beq.n	8008bd0 <__any_on+0x26>
 8008bc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008bc4:	fa24 f001 	lsr.w	r0, r4, r1
 8008bc8:	fa00 f101 	lsl.w	r1, r0, r1
 8008bcc:	428c      	cmp	r4, r1
 8008bce:	d10b      	bne.n	8008be8 <__any_on+0x3e>
 8008bd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d803      	bhi.n	8008be0 <__any_on+0x36>
 8008bd8:	2000      	movs	r0, #0
 8008bda:	bd10      	pop	{r4, pc}
 8008bdc:	4603      	mov	r3, r0
 8008bde:	e7f7      	b.n	8008bd0 <__any_on+0x26>
 8008be0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008be4:	2900      	cmp	r1, #0
 8008be6:	d0f5      	beq.n	8008bd4 <__any_on+0x2a>
 8008be8:	2001      	movs	r0, #1
 8008bea:	e7f6      	b.n	8008bda <__any_on+0x30>

08008bec <sulp>:
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	4604      	mov	r4, r0
 8008bf0:	460d      	mov	r5, r1
 8008bf2:	ec45 4b10 	vmov	d0, r4, r5
 8008bf6:	4616      	mov	r6, r2
 8008bf8:	f7ff feba 	bl	8008970 <__ulp>
 8008bfc:	ec51 0b10 	vmov	r0, r1, d0
 8008c00:	b17e      	cbz	r6, 8008c22 <sulp+0x36>
 8008c02:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008c06:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	dd09      	ble.n	8008c22 <sulp+0x36>
 8008c0e:	051b      	lsls	r3, r3, #20
 8008c10:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008c14:	2400      	movs	r4, #0
 8008c16:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008c1a:	4622      	mov	r2, r4
 8008c1c:	462b      	mov	r3, r5
 8008c1e:	f7f7 fceb 	bl	80005f8 <__aeabi_dmul>
 8008c22:	ec41 0b10 	vmov	d0, r0, r1
 8008c26:	bd70      	pop	{r4, r5, r6, pc}

08008c28 <_strtod_l>:
 8008c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2c:	b09f      	sub	sp, #124	@ 0x7c
 8008c2e:	460c      	mov	r4, r1
 8008c30:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008c32:	2200      	movs	r2, #0
 8008c34:	921a      	str	r2, [sp, #104]	@ 0x68
 8008c36:	9005      	str	r0, [sp, #20]
 8008c38:	f04f 0a00 	mov.w	sl, #0
 8008c3c:	f04f 0b00 	mov.w	fp, #0
 8008c40:	460a      	mov	r2, r1
 8008c42:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c44:	7811      	ldrb	r1, [r2, #0]
 8008c46:	292b      	cmp	r1, #43	@ 0x2b
 8008c48:	d04a      	beq.n	8008ce0 <_strtod_l+0xb8>
 8008c4a:	d838      	bhi.n	8008cbe <_strtod_l+0x96>
 8008c4c:	290d      	cmp	r1, #13
 8008c4e:	d832      	bhi.n	8008cb6 <_strtod_l+0x8e>
 8008c50:	2908      	cmp	r1, #8
 8008c52:	d832      	bhi.n	8008cba <_strtod_l+0x92>
 8008c54:	2900      	cmp	r1, #0
 8008c56:	d03b      	beq.n	8008cd0 <_strtod_l+0xa8>
 8008c58:	2200      	movs	r2, #0
 8008c5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008c5c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008c5e:	782a      	ldrb	r2, [r5, #0]
 8008c60:	2a30      	cmp	r2, #48	@ 0x30
 8008c62:	f040 80b3 	bne.w	8008dcc <_strtod_l+0x1a4>
 8008c66:	786a      	ldrb	r2, [r5, #1]
 8008c68:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c6c:	2a58      	cmp	r2, #88	@ 0x58
 8008c6e:	d16e      	bne.n	8008d4e <_strtod_l+0x126>
 8008c70:	9302      	str	r3, [sp, #8]
 8008c72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c74:	9301      	str	r3, [sp, #4]
 8008c76:	ab1a      	add	r3, sp, #104	@ 0x68
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	4a8e      	ldr	r2, [pc, #568]	@ (8008eb4 <_strtod_l+0x28c>)
 8008c7c:	9805      	ldr	r0, [sp, #20]
 8008c7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008c80:	a919      	add	r1, sp, #100	@ 0x64
 8008c82:	f001 fae7 	bl	800a254 <__gethex>
 8008c86:	f010 060f 	ands.w	r6, r0, #15
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	d005      	beq.n	8008c9a <_strtod_l+0x72>
 8008c8e:	2e06      	cmp	r6, #6
 8008c90:	d128      	bne.n	8008ce4 <_strtod_l+0xbc>
 8008c92:	3501      	adds	r5, #1
 8008c94:	2300      	movs	r3, #0
 8008c96:	9519      	str	r5, [sp, #100]	@ 0x64
 8008c98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f040 858e 	bne.w	80097be <_strtod_l+0xb96>
 8008ca2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ca4:	b1cb      	cbz	r3, 8008cda <_strtod_l+0xb2>
 8008ca6:	4652      	mov	r2, sl
 8008ca8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008cac:	ec43 2b10 	vmov	d0, r2, r3
 8008cb0:	b01f      	add	sp, #124	@ 0x7c
 8008cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb6:	2920      	cmp	r1, #32
 8008cb8:	d1ce      	bne.n	8008c58 <_strtod_l+0x30>
 8008cba:	3201      	adds	r2, #1
 8008cbc:	e7c1      	b.n	8008c42 <_strtod_l+0x1a>
 8008cbe:	292d      	cmp	r1, #45	@ 0x2d
 8008cc0:	d1ca      	bne.n	8008c58 <_strtod_l+0x30>
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008cc6:	1c51      	adds	r1, r2, #1
 8008cc8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008cca:	7852      	ldrb	r2, [r2, #1]
 8008ccc:	2a00      	cmp	r2, #0
 8008cce:	d1c5      	bne.n	8008c5c <_strtod_l+0x34>
 8008cd0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008cd2:	9419      	str	r4, [sp, #100]	@ 0x64
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f040 8570 	bne.w	80097ba <_strtod_l+0xb92>
 8008cda:	4652      	mov	r2, sl
 8008cdc:	465b      	mov	r3, fp
 8008cde:	e7e5      	b.n	8008cac <_strtod_l+0x84>
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	e7ef      	b.n	8008cc4 <_strtod_l+0x9c>
 8008ce4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ce6:	b13a      	cbz	r2, 8008cf8 <_strtod_l+0xd0>
 8008ce8:	2135      	movs	r1, #53	@ 0x35
 8008cea:	a81c      	add	r0, sp, #112	@ 0x70
 8008cec:	f7ff ff3a 	bl	8008b64 <__copybits>
 8008cf0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cf2:	9805      	ldr	r0, [sp, #20]
 8008cf4:	f7ff fb08 	bl	8008308 <_Bfree>
 8008cf8:	3e01      	subs	r6, #1
 8008cfa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008cfc:	2e04      	cmp	r6, #4
 8008cfe:	d806      	bhi.n	8008d0e <_strtod_l+0xe6>
 8008d00:	e8df f006 	tbb	[pc, r6]
 8008d04:	201d0314 	.word	0x201d0314
 8008d08:	14          	.byte	0x14
 8008d09:	00          	.byte	0x00
 8008d0a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008d0e:	05e1      	lsls	r1, r4, #23
 8008d10:	bf48      	it	mi
 8008d12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008d16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d1a:	0d1b      	lsrs	r3, r3, #20
 8008d1c:	051b      	lsls	r3, r3, #20
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1bb      	bne.n	8008c9a <_strtod_l+0x72>
 8008d22:	f7fe fb13 	bl	800734c <__errno>
 8008d26:	2322      	movs	r3, #34	@ 0x22
 8008d28:	6003      	str	r3, [r0, #0]
 8008d2a:	e7b6      	b.n	8008c9a <_strtod_l+0x72>
 8008d2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008d30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008d34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008d38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d3c:	e7e7      	b.n	8008d0e <_strtod_l+0xe6>
 8008d3e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008ebc <_strtod_l+0x294>
 8008d42:	e7e4      	b.n	8008d0e <_strtod_l+0xe6>
 8008d44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008d48:	f04f 3aff 	mov.w	sl, #4294967295
 8008d4c:	e7df      	b.n	8008d0e <_strtod_l+0xe6>
 8008d4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d54:	785b      	ldrb	r3, [r3, #1]
 8008d56:	2b30      	cmp	r3, #48	@ 0x30
 8008d58:	d0f9      	beq.n	8008d4e <_strtod_l+0x126>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d09d      	beq.n	8008c9a <_strtod_l+0x72>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d64:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d66:	2300      	movs	r3, #0
 8008d68:	9308      	str	r3, [sp, #32]
 8008d6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d6c:	461f      	mov	r7, r3
 8008d6e:	220a      	movs	r2, #10
 8008d70:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008d72:	7805      	ldrb	r5, [r0, #0]
 8008d74:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008d78:	b2d9      	uxtb	r1, r3
 8008d7a:	2909      	cmp	r1, #9
 8008d7c:	d928      	bls.n	8008dd0 <_strtod_l+0x1a8>
 8008d7e:	494e      	ldr	r1, [pc, #312]	@ (8008eb8 <_strtod_l+0x290>)
 8008d80:	2201      	movs	r2, #1
 8008d82:	f001 f98b 	bl	800a09c <strncmp>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	d032      	beq.n	8008df0 <_strtod_l+0x1c8>
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	462a      	mov	r2, r5
 8008d8e:	4681      	mov	r9, r0
 8008d90:	463d      	mov	r5, r7
 8008d92:	4603      	mov	r3, r0
 8008d94:	2a65      	cmp	r2, #101	@ 0x65
 8008d96:	d001      	beq.n	8008d9c <_strtod_l+0x174>
 8008d98:	2a45      	cmp	r2, #69	@ 0x45
 8008d9a:	d114      	bne.n	8008dc6 <_strtod_l+0x19e>
 8008d9c:	b91d      	cbnz	r5, 8008da6 <_strtod_l+0x17e>
 8008d9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008da0:	4302      	orrs	r2, r0
 8008da2:	d095      	beq.n	8008cd0 <_strtod_l+0xa8>
 8008da4:	2500      	movs	r5, #0
 8008da6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008da8:	1c62      	adds	r2, r4, #1
 8008daa:	9219      	str	r2, [sp, #100]	@ 0x64
 8008dac:	7862      	ldrb	r2, [r4, #1]
 8008dae:	2a2b      	cmp	r2, #43	@ 0x2b
 8008db0:	d077      	beq.n	8008ea2 <_strtod_l+0x27a>
 8008db2:	2a2d      	cmp	r2, #45	@ 0x2d
 8008db4:	d07b      	beq.n	8008eae <_strtod_l+0x286>
 8008db6:	f04f 0c00 	mov.w	ip, #0
 8008dba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008dbe:	2909      	cmp	r1, #9
 8008dc0:	f240 8082 	bls.w	8008ec8 <_strtod_l+0x2a0>
 8008dc4:	9419      	str	r4, [sp, #100]	@ 0x64
 8008dc6:	f04f 0800 	mov.w	r8, #0
 8008dca:	e0a2      	b.n	8008f12 <_strtod_l+0x2ea>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	e7c7      	b.n	8008d60 <_strtod_l+0x138>
 8008dd0:	2f08      	cmp	r7, #8
 8008dd2:	bfd5      	itete	le
 8008dd4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008dd6:	9908      	ldrgt	r1, [sp, #32]
 8008dd8:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ddc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008de0:	f100 0001 	add.w	r0, r0, #1
 8008de4:	bfd4      	ite	le
 8008de6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008de8:	9308      	strgt	r3, [sp, #32]
 8008dea:	3701      	adds	r7, #1
 8008dec:	9019      	str	r0, [sp, #100]	@ 0x64
 8008dee:	e7bf      	b.n	8008d70 <_strtod_l+0x148>
 8008df0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008df2:	1c5a      	adds	r2, r3, #1
 8008df4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008df6:	785a      	ldrb	r2, [r3, #1]
 8008df8:	b37f      	cbz	r7, 8008e5a <_strtod_l+0x232>
 8008dfa:	4681      	mov	r9, r0
 8008dfc:	463d      	mov	r5, r7
 8008dfe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008e02:	2b09      	cmp	r3, #9
 8008e04:	d912      	bls.n	8008e2c <_strtod_l+0x204>
 8008e06:	2301      	movs	r3, #1
 8008e08:	e7c4      	b.n	8008d94 <_strtod_l+0x16c>
 8008e0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e10:	785a      	ldrb	r2, [r3, #1]
 8008e12:	3001      	adds	r0, #1
 8008e14:	2a30      	cmp	r2, #48	@ 0x30
 8008e16:	d0f8      	beq.n	8008e0a <_strtod_l+0x1e2>
 8008e18:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008e1c:	2b08      	cmp	r3, #8
 8008e1e:	f200 84d3 	bhi.w	80097c8 <_strtod_l+0xba0>
 8008e22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e24:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e26:	4681      	mov	r9, r0
 8008e28:	2000      	movs	r0, #0
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	3a30      	subs	r2, #48	@ 0x30
 8008e2e:	f100 0301 	add.w	r3, r0, #1
 8008e32:	d02a      	beq.n	8008e8a <_strtod_l+0x262>
 8008e34:	4499      	add	r9, r3
 8008e36:	eb00 0c05 	add.w	ip, r0, r5
 8008e3a:	462b      	mov	r3, r5
 8008e3c:	210a      	movs	r1, #10
 8008e3e:	4563      	cmp	r3, ip
 8008e40:	d10d      	bne.n	8008e5e <_strtod_l+0x236>
 8008e42:	1c69      	adds	r1, r5, #1
 8008e44:	4401      	add	r1, r0
 8008e46:	4428      	add	r0, r5
 8008e48:	2808      	cmp	r0, #8
 8008e4a:	dc16      	bgt.n	8008e7a <_strtod_l+0x252>
 8008e4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e4e:	230a      	movs	r3, #10
 8008e50:	fb03 2300 	mla	r3, r3, r0, r2
 8008e54:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e56:	2300      	movs	r3, #0
 8008e58:	e018      	b.n	8008e8c <_strtod_l+0x264>
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	e7da      	b.n	8008e14 <_strtod_l+0x1ec>
 8008e5e:	2b08      	cmp	r3, #8
 8008e60:	f103 0301 	add.w	r3, r3, #1
 8008e64:	dc03      	bgt.n	8008e6e <_strtod_l+0x246>
 8008e66:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008e68:	434e      	muls	r6, r1
 8008e6a:	960a      	str	r6, [sp, #40]	@ 0x28
 8008e6c:	e7e7      	b.n	8008e3e <_strtod_l+0x216>
 8008e6e:	2b10      	cmp	r3, #16
 8008e70:	bfde      	ittt	le
 8008e72:	9e08      	ldrle	r6, [sp, #32]
 8008e74:	434e      	mulle	r6, r1
 8008e76:	9608      	strle	r6, [sp, #32]
 8008e78:	e7e1      	b.n	8008e3e <_strtod_l+0x216>
 8008e7a:	280f      	cmp	r0, #15
 8008e7c:	dceb      	bgt.n	8008e56 <_strtod_l+0x22e>
 8008e7e:	9808      	ldr	r0, [sp, #32]
 8008e80:	230a      	movs	r3, #10
 8008e82:	fb03 2300 	mla	r3, r3, r0, r2
 8008e86:	9308      	str	r3, [sp, #32]
 8008e88:	e7e5      	b.n	8008e56 <_strtod_l+0x22e>
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e8e:	1c50      	adds	r0, r2, #1
 8008e90:	9019      	str	r0, [sp, #100]	@ 0x64
 8008e92:	7852      	ldrb	r2, [r2, #1]
 8008e94:	4618      	mov	r0, r3
 8008e96:	460d      	mov	r5, r1
 8008e98:	e7b1      	b.n	8008dfe <_strtod_l+0x1d6>
 8008e9a:	f04f 0900 	mov.w	r9, #0
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e77d      	b.n	8008d9e <_strtod_l+0x176>
 8008ea2:	f04f 0c00 	mov.w	ip, #0
 8008ea6:	1ca2      	adds	r2, r4, #2
 8008ea8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008eaa:	78a2      	ldrb	r2, [r4, #2]
 8008eac:	e785      	b.n	8008dba <_strtod_l+0x192>
 8008eae:	f04f 0c01 	mov.w	ip, #1
 8008eb2:	e7f8      	b.n	8008ea6 <_strtod_l+0x27e>
 8008eb4:	080175a0 	.word	0x080175a0
 8008eb8:	08017588 	.word	0x08017588
 8008ebc:	7ff00000 	.word	0x7ff00000
 8008ec0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ec2:	1c51      	adds	r1, r2, #1
 8008ec4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ec6:	7852      	ldrb	r2, [r2, #1]
 8008ec8:	2a30      	cmp	r2, #48	@ 0x30
 8008eca:	d0f9      	beq.n	8008ec0 <_strtod_l+0x298>
 8008ecc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008ed0:	2908      	cmp	r1, #8
 8008ed2:	f63f af78 	bhi.w	8008dc6 <_strtod_l+0x19e>
 8008ed6:	3a30      	subs	r2, #48	@ 0x30
 8008ed8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008eda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008edc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008ede:	f04f 080a 	mov.w	r8, #10
 8008ee2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ee4:	1c56      	adds	r6, r2, #1
 8008ee6:	9619      	str	r6, [sp, #100]	@ 0x64
 8008ee8:	7852      	ldrb	r2, [r2, #1]
 8008eea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008eee:	f1be 0f09 	cmp.w	lr, #9
 8008ef2:	d939      	bls.n	8008f68 <_strtod_l+0x340>
 8008ef4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008ef6:	1a76      	subs	r6, r6, r1
 8008ef8:	2e08      	cmp	r6, #8
 8008efa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008efe:	dc03      	bgt.n	8008f08 <_strtod_l+0x2e0>
 8008f00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008f02:	4588      	cmp	r8, r1
 8008f04:	bfa8      	it	ge
 8008f06:	4688      	movge	r8, r1
 8008f08:	f1bc 0f00 	cmp.w	ip, #0
 8008f0c:	d001      	beq.n	8008f12 <_strtod_l+0x2ea>
 8008f0e:	f1c8 0800 	rsb	r8, r8, #0
 8008f12:	2d00      	cmp	r5, #0
 8008f14:	d14e      	bne.n	8008fb4 <_strtod_l+0x38c>
 8008f16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f18:	4308      	orrs	r0, r1
 8008f1a:	f47f aebe 	bne.w	8008c9a <_strtod_l+0x72>
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f47f aed6 	bne.w	8008cd0 <_strtod_l+0xa8>
 8008f24:	2a69      	cmp	r2, #105	@ 0x69
 8008f26:	d028      	beq.n	8008f7a <_strtod_l+0x352>
 8008f28:	dc25      	bgt.n	8008f76 <_strtod_l+0x34e>
 8008f2a:	2a49      	cmp	r2, #73	@ 0x49
 8008f2c:	d025      	beq.n	8008f7a <_strtod_l+0x352>
 8008f2e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008f30:	f47f aece 	bne.w	8008cd0 <_strtod_l+0xa8>
 8008f34:	499b      	ldr	r1, [pc, #620]	@ (80091a4 <_strtod_l+0x57c>)
 8008f36:	a819      	add	r0, sp, #100	@ 0x64
 8008f38:	f001 fbae 	bl	800a698 <__match>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	f43f aec7 	beq.w	8008cd0 <_strtod_l+0xa8>
 8008f42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	2b28      	cmp	r3, #40	@ 0x28
 8008f48:	d12e      	bne.n	8008fa8 <_strtod_l+0x380>
 8008f4a:	4997      	ldr	r1, [pc, #604]	@ (80091a8 <_strtod_l+0x580>)
 8008f4c:	aa1c      	add	r2, sp, #112	@ 0x70
 8008f4e:	a819      	add	r0, sp, #100	@ 0x64
 8008f50:	f001 fbb6 	bl	800a6c0 <__hexnan>
 8008f54:	2805      	cmp	r0, #5
 8008f56:	d127      	bne.n	8008fa8 <_strtod_l+0x380>
 8008f58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f5a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008f5e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008f62:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008f66:	e698      	b.n	8008c9a <_strtod_l+0x72>
 8008f68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008f6a:	fb08 2101 	mla	r1, r8, r1, r2
 8008f6e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008f72:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f74:	e7b5      	b.n	8008ee2 <_strtod_l+0x2ba>
 8008f76:	2a6e      	cmp	r2, #110	@ 0x6e
 8008f78:	e7da      	b.n	8008f30 <_strtod_l+0x308>
 8008f7a:	498c      	ldr	r1, [pc, #560]	@ (80091ac <_strtod_l+0x584>)
 8008f7c:	a819      	add	r0, sp, #100	@ 0x64
 8008f7e:	f001 fb8b 	bl	800a698 <__match>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	f43f aea4 	beq.w	8008cd0 <_strtod_l+0xa8>
 8008f88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f8a:	4989      	ldr	r1, [pc, #548]	@ (80091b0 <_strtod_l+0x588>)
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	a819      	add	r0, sp, #100	@ 0x64
 8008f90:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f92:	f001 fb81 	bl	800a698 <__match>
 8008f96:	b910      	cbnz	r0, 8008f9e <_strtod_l+0x376>
 8008f98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f9e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80091c0 <_strtod_l+0x598>
 8008fa2:	f04f 0a00 	mov.w	sl, #0
 8008fa6:	e678      	b.n	8008c9a <_strtod_l+0x72>
 8008fa8:	4882      	ldr	r0, [pc, #520]	@ (80091b4 <_strtod_l+0x58c>)
 8008faa:	f001 f8c9 	bl	800a140 <nan>
 8008fae:	ec5b ab10 	vmov	sl, fp, d0
 8008fb2:	e672      	b.n	8008c9a <_strtod_l+0x72>
 8008fb4:	eba8 0309 	sub.w	r3, r8, r9
 8008fb8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008fba:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fbc:	2f00      	cmp	r7, #0
 8008fbe:	bf08      	it	eq
 8008fc0:	462f      	moveq	r7, r5
 8008fc2:	2d10      	cmp	r5, #16
 8008fc4:	462c      	mov	r4, r5
 8008fc6:	bfa8      	it	ge
 8008fc8:	2410      	movge	r4, #16
 8008fca:	f7f7 fa9b 	bl	8000504 <__aeabi_ui2d>
 8008fce:	2d09      	cmp	r5, #9
 8008fd0:	4682      	mov	sl, r0
 8008fd2:	468b      	mov	fp, r1
 8008fd4:	dc13      	bgt.n	8008ffe <_strtod_l+0x3d6>
 8008fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f43f ae5e 	beq.w	8008c9a <_strtod_l+0x72>
 8008fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe0:	dd78      	ble.n	80090d4 <_strtod_l+0x4ac>
 8008fe2:	2b16      	cmp	r3, #22
 8008fe4:	dc5f      	bgt.n	80090a6 <_strtod_l+0x47e>
 8008fe6:	4974      	ldr	r1, [pc, #464]	@ (80091b8 <_strtod_l+0x590>)
 8008fe8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ff0:	4652      	mov	r2, sl
 8008ff2:	465b      	mov	r3, fp
 8008ff4:	f7f7 fb00 	bl	80005f8 <__aeabi_dmul>
 8008ff8:	4682      	mov	sl, r0
 8008ffa:	468b      	mov	fp, r1
 8008ffc:	e64d      	b.n	8008c9a <_strtod_l+0x72>
 8008ffe:	4b6e      	ldr	r3, [pc, #440]	@ (80091b8 <_strtod_l+0x590>)
 8009000:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009004:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009008:	f7f7 faf6 	bl	80005f8 <__aeabi_dmul>
 800900c:	4682      	mov	sl, r0
 800900e:	9808      	ldr	r0, [sp, #32]
 8009010:	468b      	mov	fp, r1
 8009012:	f7f7 fa77 	bl	8000504 <__aeabi_ui2d>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4650      	mov	r0, sl
 800901c:	4659      	mov	r1, fp
 800901e:	f7f7 f935 	bl	800028c <__adddf3>
 8009022:	2d0f      	cmp	r5, #15
 8009024:	4682      	mov	sl, r0
 8009026:	468b      	mov	fp, r1
 8009028:	ddd5      	ble.n	8008fd6 <_strtod_l+0x3ae>
 800902a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800902c:	1b2c      	subs	r4, r5, r4
 800902e:	441c      	add	r4, r3
 8009030:	2c00      	cmp	r4, #0
 8009032:	f340 8096 	ble.w	8009162 <_strtod_l+0x53a>
 8009036:	f014 030f 	ands.w	r3, r4, #15
 800903a:	d00a      	beq.n	8009052 <_strtod_l+0x42a>
 800903c:	495e      	ldr	r1, [pc, #376]	@ (80091b8 <_strtod_l+0x590>)
 800903e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009042:	4652      	mov	r2, sl
 8009044:	465b      	mov	r3, fp
 8009046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800904a:	f7f7 fad5 	bl	80005f8 <__aeabi_dmul>
 800904e:	4682      	mov	sl, r0
 8009050:	468b      	mov	fp, r1
 8009052:	f034 040f 	bics.w	r4, r4, #15
 8009056:	d073      	beq.n	8009140 <_strtod_l+0x518>
 8009058:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800905c:	dd48      	ble.n	80090f0 <_strtod_l+0x4c8>
 800905e:	2400      	movs	r4, #0
 8009060:	46a0      	mov	r8, r4
 8009062:	940a      	str	r4, [sp, #40]	@ 0x28
 8009064:	46a1      	mov	r9, r4
 8009066:	9a05      	ldr	r2, [sp, #20]
 8009068:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80091c0 <_strtod_l+0x598>
 800906c:	2322      	movs	r3, #34	@ 0x22
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	f04f 0a00 	mov.w	sl, #0
 8009074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009076:	2b00      	cmp	r3, #0
 8009078:	f43f ae0f 	beq.w	8008c9a <_strtod_l+0x72>
 800907c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800907e:	9805      	ldr	r0, [sp, #20]
 8009080:	f7ff f942 	bl	8008308 <_Bfree>
 8009084:	9805      	ldr	r0, [sp, #20]
 8009086:	4649      	mov	r1, r9
 8009088:	f7ff f93e 	bl	8008308 <_Bfree>
 800908c:	9805      	ldr	r0, [sp, #20]
 800908e:	4641      	mov	r1, r8
 8009090:	f7ff f93a 	bl	8008308 <_Bfree>
 8009094:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009096:	9805      	ldr	r0, [sp, #20]
 8009098:	f7ff f936 	bl	8008308 <_Bfree>
 800909c:	9805      	ldr	r0, [sp, #20]
 800909e:	4621      	mov	r1, r4
 80090a0:	f7ff f932 	bl	8008308 <_Bfree>
 80090a4:	e5f9      	b.n	8008c9a <_strtod_l+0x72>
 80090a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80090ac:	4293      	cmp	r3, r2
 80090ae:	dbbc      	blt.n	800902a <_strtod_l+0x402>
 80090b0:	4c41      	ldr	r4, [pc, #260]	@ (80091b8 <_strtod_l+0x590>)
 80090b2:	f1c5 050f 	rsb	r5, r5, #15
 80090b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80090ba:	4652      	mov	r2, sl
 80090bc:	465b      	mov	r3, fp
 80090be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090c2:	f7f7 fa99 	bl	80005f8 <__aeabi_dmul>
 80090c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c8:	1b5d      	subs	r5, r3, r5
 80090ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80090ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80090d2:	e78f      	b.n	8008ff4 <_strtod_l+0x3cc>
 80090d4:	3316      	adds	r3, #22
 80090d6:	dba8      	blt.n	800902a <_strtod_l+0x402>
 80090d8:	4b37      	ldr	r3, [pc, #220]	@ (80091b8 <_strtod_l+0x590>)
 80090da:	eba9 0808 	sub.w	r8, r9, r8
 80090de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80090e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80090e6:	4650      	mov	r0, sl
 80090e8:	4659      	mov	r1, fp
 80090ea:	f7f7 fbaf 	bl	800084c <__aeabi_ddiv>
 80090ee:	e783      	b.n	8008ff8 <_strtod_l+0x3d0>
 80090f0:	4b32      	ldr	r3, [pc, #200]	@ (80091bc <_strtod_l+0x594>)
 80090f2:	9308      	str	r3, [sp, #32]
 80090f4:	2300      	movs	r3, #0
 80090f6:	1124      	asrs	r4, r4, #4
 80090f8:	4650      	mov	r0, sl
 80090fa:	4659      	mov	r1, fp
 80090fc:	461e      	mov	r6, r3
 80090fe:	2c01      	cmp	r4, #1
 8009100:	dc21      	bgt.n	8009146 <_strtod_l+0x51e>
 8009102:	b10b      	cbz	r3, 8009108 <_strtod_l+0x4e0>
 8009104:	4682      	mov	sl, r0
 8009106:	468b      	mov	fp, r1
 8009108:	492c      	ldr	r1, [pc, #176]	@ (80091bc <_strtod_l+0x594>)
 800910a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800910e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009112:	4652      	mov	r2, sl
 8009114:	465b      	mov	r3, fp
 8009116:	e9d1 0100 	ldrd	r0, r1, [r1]
 800911a:	f7f7 fa6d 	bl	80005f8 <__aeabi_dmul>
 800911e:	4b28      	ldr	r3, [pc, #160]	@ (80091c0 <_strtod_l+0x598>)
 8009120:	460a      	mov	r2, r1
 8009122:	400b      	ands	r3, r1
 8009124:	4927      	ldr	r1, [pc, #156]	@ (80091c4 <_strtod_l+0x59c>)
 8009126:	428b      	cmp	r3, r1
 8009128:	4682      	mov	sl, r0
 800912a:	d898      	bhi.n	800905e <_strtod_l+0x436>
 800912c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009130:	428b      	cmp	r3, r1
 8009132:	bf86      	itte	hi
 8009134:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80091c8 <_strtod_l+0x5a0>
 8009138:	f04f 3aff 	movhi.w	sl, #4294967295
 800913c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009140:	2300      	movs	r3, #0
 8009142:	9308      	str	r3, [sp, #32]
 8009144:	e07a      	b.n	800923c <_strtod_l+0x614>
 8009146:	07e2      	lsls	r2, r4, #31
 8009148:	d505      	bpl.n	8009156 <_strtod_l+0x52e>
 800914a:	9b08      	ldr	r3, [sp, #32]
 800914c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009150:	f7f7 fa52 	bl	80005f8 <__aeabi_dmul>
 8009154:	2301      	movs	r3, #1
 8009156:	9a08      	ldr	r2, [sp, #32]
 8009158:	3208      	adds	r2, #8
 800915a:	3601      	adds	r6, #1
 800915c:	1064      	asrs	r4, r4, #1
 800915e:	9208      	str	r2, [sp, #32]
 8009160:	e7cd      	b.n	80090fe <_strtod_l+0x4d6>
 8009162:	d0ed      	beq.n	8009140 <_strtod_l+0x518>
 8009164:	4264      	negs	r4, r4
 8009166:	f014 020f 	ands.w	r2, r4, #15
 800916a:	d00a      	beq.n	8009182 <_strtod_l+0x55a>
 800916c:	4b12      	ldr	r3, [pc, #72]	@ (80091b8 <_strtod_l+0x590>)
 800916e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009172:	4650      	mov	r0, sl
 8009174:	4659      	mov	r1, fp
 8009176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917a:	f7f7 fb67 	bl	800084c <__aeabi_ddiv>
 800917e:	4682      	mov	sl, r0
 8009180:	468b      	mov	fp, r1
 8009182:	1124      	asrs	r4, r4, #4
 8009184:	d0dc      	beq.n	8009140 <_strtod_l+0x518>
 8009186:	2c1f      	cmp	r4, #31
 8009188:	dd20      	ble.n	80091cc <_strtod_l+0x5a4>
 800918a:	2400      	movs	r4, #0
 800918c:	46a0      	mov	r8, r4
 800918e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009190:	46a1      	mov	r9, r4
 8009192:	9a05      	ldr	r2, [sp, #20]
 8009194:	2322      	movs	r3, #34	@ 0x22
 8009196:	f04f 0a00 	mov.w	sl, #0
 800919a:	f04f 0b00 	mov.w	fp, #0
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	e768      	b.n	8009074 <_strtod_l+0x44c>
 80091a2:	bf00      	nop
 80091a4:	08017354 	.word	0x08017354
 80091a8:	0801758c 	.word	0x0801758c
 80091ac:	0801734c 	.word	0x0801734c
 80091b0:	080173bf 	.word	0x080173bf
 80091b4:	080173bb 	.word	0x080173bb
 80091b8:	080174c0 	.word	0x080174c0
 80091bc:	08017498 	.word	0x08017498
 80091c0:	7ff00000 	.word	0x7ff00000
 80091c4:	7ca00000 	.word	0x7ca00000
 80091c8:	7fefffff 	.word	0x7fefffff
 80091cc:	f014 0310 	ands.w	r3, r4, #16
 80091d0:	bf18      	it	ne
 80091d2:	236a      	movne	r3, #106	@ 0x6a
 80091d4:	4ea9      	ldr	r6, [pc, #676]	@ (800947c <_strtod_l+0x854>)
 80091d6:	9308      	str	r3, [sp, #32]
 80091d8:	4650      	mov	r0, sl
 80091da:	4659      	mov	r1, fp
 80091dc:	2300      	movs	r3, #0
 80091de:	07e2      	lsls	r2, r4, #31
 80091e0:	d504      	bpl.n	80091ec <_strtod_l+0x5c4>
 80091e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091e6:	f7f7 fa07 	bl	80005f8 <__aeabi_dmul>
 80091ea:	2301      	movs	r3, #1
 80091ec:	1064      	asrs	r4, r4, #1
 80091ee:	f106 0608 	add.w	r6, r6, #8
 80091f2:	d1f4      	bne.n	80091de <_strtod_l+0x5b6>
 80091f4:	b10b      	cbz	r3, 80091fa <_strtod_l+0x5d2>
 80091f6:	4682      	mov	sl, r0
 80091f8:	468b      	mov	fp, r1
 80091fa:	9b08      	ldr	r3, [sp, #32]
 80091fc:	b1b3      	cbz	r3, 800922c <_strtod_l+0x604>
 80091fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009202:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009206:	2b00      	cmp	r3, #0
 8009208:	4659      	mov	r1, fp
 800920a:	dd0f      	ble.n	800922c <_strtod_l+0x604>
 800920c:	2b1f      	cmp	r3, #31
 800920e:	dd55      	ble.n	80092bc <_strtod_l+0x694>
 8009210:	2b34      	cmp	r3, #52	@ 0x34
 8009212:	bfde      	ittt	le
 8009214:	f04f 33ff 	movle.w	r3, #4294967295
 8009218:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800921c:	4093      	lslle	r3, r2
 800921e:	f04f 0a00 	mov.w	sl, #0
 8009222:	bfcc      	ite	gt
 8009224:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009228:	ea03 0b01 	andle.w	fp, r3, r1
 800922c:	2200      	movs	r2, #0
 800922e:	2300      	movs	r3, #0
 8009230:	4650      	mov	r0, sl
 8009232:	4659      	mov	r1, fp
 8009234:	f7f7 fc48 	bl	8000ac8 <__aeabi_dcmpeq>
 8009238:	2800      	cmp	r0, #0
 800923a:	d1a6      	bne.n	800918a <_strtod_l+0x562>
 800923c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009242:	9805      	ldr	r0, [sp, #20]
 8009244:	462b      	mov	r3, r5
 8009246:	463a      	mov	r2, r7
 8009248:	f7ff f8c6 	bl	80083d8 <__s2b>
 800924c:	900a      	str	r0, [sp, #40]	@ 0x28
 800924e:	2800      	cmp	r0, #0
 8009250:	f43f af05 	beq.w	800905e <_strtod_l+0x436>
 8009254:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009256:	2a00      	cmp	r2, #0
 8009258:	eba9 0308 	sub.w	r3, r9, r8
 800925c:	bfa8      	it	ge
 800925e:	2300      	movge	r3, #0
 8009260:	9312      	str	r3, [sp, #72]	@ 0x48
 8009262:	2400      	movs	r4, #0
 8009264:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009268:	9316      	str	r3, [sp, #88]	@ 0x58
 800926a:	46a0      	mov	r8, r4
 800926c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800926e:	9805      	ldr	r0, [sp, #20]
 8009270:	6859      	ldr	r1, [r3, #4]
 8009272:	f7ff f809 	bl	8008288 <_Balloc>
 8009276:	4681      	mov	r9, r0
 8009278:	2800      	cmp	r0, #0
 800927a:	f43f aef4 	beq.w	8009066 <_strtod_l+0x43e>
 800927e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009280:	691a      	ldr	r2, [r3, #16]
 8009282:	3202      	adds	r2, #2
 8009284:	f103 010c 	add.w	r1, r3, #12
 8009288:	0092      	lsls	r2, r2, #2
 800928a:	300c      	adds	r0, #12
 800928c:	f000 ff4a 	bl	800a124 <memcpy>
 8009290:	ec4b ab10 	vmov	d0, sl, fp
 8009294:	9805      	ldr	r0, [sp, #20]
 8009296:	aa1c      	add	r2, sp, #112	@ 0x70
 8009298:	a91b      	add	r1, sp, #108	@ 0x6c
 800929a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800929e:	f7ff fbd7 	bl	8008a50 <__d2b>
 80092a2:	901a      	str	r0, [sp, #104]	@ 0x68
 80092a4:	2800      	cmp	r0, #0
 80092a6:	f43f aede 	beq.w	8009066 <_strtod_l+0x43e>
 80092aa:	9805      	ldr	r0, [sp, #20]
 80092ac:	2101      	movs	r1, #1
 80092ae:	f7ff f929 	bl	8008504 <__i2b>
 80092b2:	4680      	mov	r8, r0
 80092b4:	b948      	cbnz	r0, 80092ca <_strtod_l+0x6a2>
 80092b6:	f04f 0800 	mov.w	r8, #0
 80092ba:	e6d4      	b.n	8009066 <_strtod_l+0x43e>
 80092bc:	f04f 32ff 	mov.w	r2, #4294967295
 80092c0:	fa02 f303 	lsl.w	r3, r2, r3
 80092c4:	ea03 0a0a 	and.w	sl, r3, sl
 80092c8:	e7b0      	b.n	800922c <_strtod_l+0x604>
 80092ca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80092cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80092ce:	2d00      	cmp	r5, #0
 80092d0:	bfab      	itete	ge
 80092d2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80092d4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80092d6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80092d8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80092da:	bfac      	ite	ge
 80092dc:	18ef      	addge	r7, r5, r3
 80092de:	1b5e      	sublt	r6, r3, r5
 80092e0:	9b08      	ldr	r3, [sp, #32]
 80092e2:	1aed      	subs	r5, r5, r3
 80092e4:	4415      	add	r5, r2
 80092e6:	4b66      	ldr	r3, [pc, #408]	@ (8009480 <_strtod_l+0x858>)
 80092e8:	3d01      	subs	r5, #1
 80092ea:	429d      	cmp	r5, r3
 80092ec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80092f0:	da50      	bge.n	8009394 <_strtod_l+0x76c>
 80092f2:	1b5b      	subs	r3, r3, r5
 80092f4:	2b1f      	cmp	r3, #31
 80092f6:	eba2 0203 	sub.w	r2, r2, r3
 80092fa:	f04f 0101 	mov.w	r1, #1
 80092fe:	dc3d      	bgt.n	800937c <_strtod_l+0x754>
 8009300:	fa01 f303 	lsl.w	r3, r1, r3
 8009304:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009306:	2300      	movs	r3, #0
 8009308:	9310      	str	r3, [sp, #64]	@ 0x40
 800930a:	18bd      	adds	r5, r7, r2
 800930c:	9b08      	ldr	r3, [sp, #32]
 800930e:	42af      	cmp	r7, r5
 8009310:	4416      	add	r6, r2
 8009312:	441e      	add	r6, r3
 8009314:	463b      	mov	r3, r7
 8009316:	bfa8      	it	ge
 8009318:	462b      	movge	r3, r5
 800931a:	42b3      	cmp	r3, r6
 800931c:	bfa8      	it	ge
 800931e:	4633      	movge	r3, r6
 8009320:	2b00      	cmp	r3, #0
 8009322:	bfc2      	ittt	gt
 8009324:	1aed      	subgt	r5, r5, r3
 8009326:	1af6      	subgt	r6, r6, r3
 8009328:	1aff      	subgt	r7, r7, r3
 800932a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800932c:	2b00      	cmp	r3, #0
 800932e:	dd16      	ble.n	800935e <_strtod_l+0x736>
 8009330:	4641      	mov	r1, r8
 8009332:	9805      	ldr	r0, [sp, #20]
 8009334:	461a      	mov	r2, r3
 8009336:	f7ff f9a5 	bl	8008684 <__pow5mult>
 800933a:	4680      	mov	r8, r0
 800933c:	2800      	cmp	r0, #0
 800933e:	d0ba      	beq.n	80092b6 <_strtod_l+0x68e>
 8009340:	4601      	mov	r1, r0
 8009342:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009344:	9805      	ldr	r0, [sp, #20]
 8009346:	f7ff f8f3 	bl	8008530 <__multiply>
 800934a:	900e      	str	r0, [sp, #56]	@ 0x38
 800934c:	2800      	cmp	r0, #0
 800934e:	f43f ae8a 	beq.w	8009066 <_strtod_l+0x43e>
 8009352:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009354:	9805      	ldr	r0, [sp, #20]
 8009356:	f7fe ffd7 	bl	8008308 <_Bfree>
 800935a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800935c:	931a      	str	r3, [sp, #104]	@ 0x68
 800935e:	2d00      	cmp	r5, #0
 8009360:	dc1d      	bgt.n	800939e <_strtod_l+0x776>
 8009362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009364:	2b00      	cmp	r3, #0
 8009366:	dd23      	ble.n	80093b0 <_strtod_l+0x788>
 8009368:	4649      	mov	r1, r9
 800936a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800936c:	9805      	ldr	r0, [sp, #20]
 800936e:	f7ff f989 	bl	8008684 <__pow5mult>
 8009372:	4681      	mov	r9, r0
 8009374:	b9e0      	cbnz	r0, 80093b0 <_strtod_l+0x788>
 8009376:	f04f 0900 	mov.w	r9, #0
 800937a:	e674      	b.n	8009066 <_strtod_l+0x43e>
 800937c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009380:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009384:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009388:	35e2      	adds	r5, #226	@ 0xe2
 800938a:	fa01 f305 	lsl.w	r3, r1, r5
 800938e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009390:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009392:	e7ba      	b.n	800930a <_strtod_l+0x6e2>
 8009394:	2300      	movs	r3, #0
 8009396:	9310      	str	r3, [sp, #64]	@ 0x40
 8009398:	2301      	movs	r3, #1
 800939a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800939c:	e7b5      	b.n	800930a <_strtod_l+0x6e2>
 800939e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093a0:	9805      	ldr	r0, [sp, #20]
 80093a2:	462a      	mov	r2, r5
 80093a4:	f7ff f9c8 	bl	8008738 <__lshift>
 80093a8:	901a      	str	r0, [sp, #104]	@ 0x68
 80093aa:	2800      	cmp	r0, #0
 80093ac:	d1d9      	bne.n	8009362 <_strtod_l+0x73a>
 80093ae:	e65a      	b.n	8009066 <_strtod_l+0x43e>
 80093b0:	2e00      	cmp	r6, #0
 80093b2:	dd07      	ble.n	80093c4 <_strtod_l+0x79c>
 80093b4:	4649      	mov	r1, r9
 80093b6:	9805      	ldr	r0, [sp, #20]
 80093b8:	4632      	mov	r2, r6
 80093ba:	f7ff f9bd 	bl	8008738 <__lshift>
 80093be:	4681      	mov	r9, r0
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d0d8      	beq.n	8009376 <_strtod_l+0x74e>
 80093c4:	2f00      	cmp	r7, #0
 80093c6:	dd08      	ble.n	80093da <_strtod_l+0x7b2>
 80093c8:	4641      	mov	r1, r8
 80093ca:	9805      	ldr	r0, [sp, #20]
 80093cc:	463a      	mov	r2, r7
 80093ce:	f7ff f9b3 	bl	8008738 <__lshift>
 80093d2:	4680      	mov	r8, r0
 80093d4:	2800      	cmp	r0, #0
 80093d6:	f43f ae46 	beq.w	8009066 <_strtod_l+0x43e>
 80093da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093dc:	9805      	ldr	r0, [sp, #20]
 80093de:	464a      	mov	r2, r9
 80093e0:	f7ff fa32 	bl	8008848 <__mdiff>
 80093e4:	4604      	mov	r4, r0
 80093e6:	2800      	cmp	r0, #0
 80093e8:	f43f ae3d 	beq.w	8009066 <_strtod_l+0x43e>
 80093ec:	68c3      	ldr	r3, [r0, #12]
 80093ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093f0:	2300      	movs	r3, #0
 80093f2:	60c3      	str	r3, [r0, #12]
 80093f4:	4641      	mov	r1, r8
 80093f6:	f7ff fa0b 	bl	8008810 <__mcmp>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	da46      	bge.n	800948c <_strtod_l+0x864>
 80093fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009400:	ea53 030a 	orrs.w	r3, r3, sl
 8009404:	d16c      	bne.n	80094e0 <_strtod_l+0x8b8>
 8009406:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800940a:	2b00      	cmp	r3, #0
 800940c:	d168      	bne.n	80094e0 <_strtod_l+0x8b8>
 800940e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009412:	0d1b      	lsrs	r3, r3, #20
 8009414:	051b      	lsls	r3, r3, #20
 8009416:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800941a:	d961      	bls.n	80094e0 <_strtod_l+0x8b8>
 800941c:	6963      	ldr	r3, [r4, #20]
 800941e:	b913      	cbnz	r3, 8009426 <_strtod_l+0x7fe>
 8009420:	6923      	ldr	r3, [r4, #16]
 8009422:	2b01      	cmp	r3, #1
 8009424:	dd5c      	ble.n	80094e0 <_strtod_l+0x8b8>
 8009426:	4621      	mov	r1, r4
 8009428:	2201      	movs	r2, #1
 800942a:	9805      	ldr	r0, [sp, #20]
 800942c:	f7ff f984 	bl	8008738 <__lshift>
 8009430:	4641      	mov	r1, r8
 8009432:	4604      	mov	r4, r0
 8009434:	f7ff f9ec 	bl	8008810 <__mcmp>
 8009438:	2800      	cmp	r0, #0
 800943a:	dd51      	ble.n	80094e0 <_strtod_l+0x8b8>
 800943c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009440:	9a08      	ldr	r2, [sp, #32]
 8009442:	0d1b      	lsrs	r3, r3, #20
 8009444:	051b      	lsls	r3, r3, #20
 8009446:	2a00      	cmp	r2, #0
 8009448:	d06b      	beq.n	8009522 <_strtod_l+0x8fa>
 800944a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800944e:	d868      	bhi.n	8009522 <_strtod_l+0x8fa>
 8009450:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009454:	f67f ae9d 	bls.w	8009192 <_strtod_l+0x56a>
 8009458:	4b0a      	ldr	r3, [pc, #40]	@ (8009484 <_strtod_l+0x85c>)
 800945a:	4650      	mov	r0, sl
 800945c:	4659      	mov	r1, fp
 800945e:	2200      	movs	r2, #0
 8009460:	f7f7 f8ca 	bl	80005f8 <__aeabi_dmul>
 8009464:	4b08      	ldr	r3, [pc, #32]	@ (8009488 <_strtod_l+0x860>)
 8009466:	400b      	ands	r3, r1
 8009468:	4682      	mov	sl, r0
 800946a:	468b      	mov	fp, r1
 800946c:	2b00      	cmp	r3, #0
 800946e:	f47f ae05 	bne.w	800907c <_strtod_l+0x454>
 8009472:	9a05      	ldr	r2, [sp, #20]
 8009474:	2322      	movs	r3, #34	@ 0x22
 8009476:	6013      	str	r3, [r2, #0]
 8009478:	e600      	b.n	800907c <_strtod_l+0x454>
 800947a:	bf00      	nop
 800947c:	080175b8 	.word	0x080175b8
 8009480:	fffffc02 	.word	0xfffffc02
 8009484:	39500000 	.word	0x39500000
 8009488:	7ff00000 	.word	0x7ff00000
 800948c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009490:	d165      	bne.n	800955e <_strtod_l+0x936>
 8009492:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009494:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009498:	b35a      	cbz	r2, 80094f2 <_strtod_l+0x8ca>
 800949a:	4a9f      	ldr	r2, [pc, #636]	@ (8009718 <_strtod_l+0xaf0>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d12b      	bne.n	80094f8 <_strtod_l+0x8d0>
 80094a0:	9b08      	ldr	r3, [sp, #32]
 80094a2:	4651      	mov	r1, sl
 80094a4:	b303      	cbz	r3, 80094e8 <_strtod_l+0x8c0>
 80094a6:	4b9d      	ldr	r3, [pc, #628]	@ (800971c <_strtod_l+0xaf4>)
 80094a8:	465a      	mov	r2, fp
 80094aa:	4013      	ands	r3, r2
 80094ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80094b0:	f04f 32ff 	mov.w	r2, #4294967295
 80094b4:	d81b      	bhi.n	80094ee <_strtod_l+0x8c6>
 80094b6:	0d1b      	lsrs	r3, r3, #20
 80094b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80094bc:	fa02 f303 	lsl.w	r3, r2, r3
 80094c0:	4299      	cmp	r1, r3
 80094c2:	d119      	bne.n	80094f8 <_strtod_l+0x8d0>
 80094c4:	4b96      	ldr	r3, [pc, #600]	@ (8009720 <_strtod_l+0xaf8>)
 80094c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d102      	bne.n	80094d2 <_strtod_l+0x8aa>
 80094cc:	3101      	adds	r1, #1
 80094ce:	f43f adca 	beq.w	8009066 <_strtod_l+0x43e>
 80094d2:	4b92      	ldr	r3, [pc, #584]	@ (800971c <_strtod_l+0xaf4>)
 80094d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094d6:	401a      	ands	r2, r3
 80094d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80094dc:	f04f 0a00 	mov.w	sl, #0
 80094e0:	9b08      	ldr	r3, [sp, #32]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1b8      	bne.n	8009458 <_strtod_l+0x830>
 80094e6:	e5c9      	b.n	800907c <_strtod_l+0x454>
 80094e8:	f04f 33ff 	mov.w	r3, #4294967295
 80094ec:	e7e8      	b.n	80094c0 <_strtod_l+0x898>
 80094ee:	4613      	mov	r3, r2
 80094f0:	e7e6      	b.n	80094c0 <_strtod_l+0x898>
 80094f2:	ea53 030a 	orrs.w	r3, r3, sl
 80094f6:	d0a1      	beq.n	800943c <_strtod_l+0x814>
 80094f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094fa:	b1db      	cbz	r3, 8009534 <_strtod_l+0x90c>
 80094fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094fe:	4213      	tst	r3, r2
 8009500:	d0ee      	beq.n	80094e0 <_strtod_l+0x8b8>
 8009502:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009504:	9a08      	ldr	r2, [sp, #32]
 8009506:	4650      	mov	r0, sl
 8009508:	4659      	mov	r1, fp
 800950a:	b1bb      	cbz	r3, 800953c <_strtod_l+0x914>
 800950c:	f7ff fb6e 	bl	8008bec <sulp>
 8009510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009514:	ec53 2b10 	vmov	r2, r3, d0
 8009518:	f7f6 feb8 	bl	800028c <__adddf3>
 800951c:	4682      	mov	sl, r0
 800951e:	468b      	mov	fp, r1
 8009520:	e7de      	b.n	80094e0 <_strtod_l+0x8b8>
 8009522:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009526:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800952a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800952e:	f04f 3aff 	mov.w	sl, #4294967295
 8009532:	e7d5      	b.n	80094e0 <_strtod_l+0x8b8>
 8009534:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009536:	ea13 0f0a 	tst.w	r3, sl
 800953a:	e7e1      	b.n	8009500 <_strtod_l+0x8d8>
 800953c:	f7ff fb56 	bl	8008bec <sulp>
 8009540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009544:	ec53 2b10 	vmov	r2, r3, d0
 8009548:	f7f6 fe9e 	bl	8000288 <__aeabi_dsub>
 800954c:	2200      	movs	r2, #0
 800954e:	2300      	movs	r3, #0
 8009550:	4682      	mov	sl, r0
 8009552:	468b      	mov	fp, r1
 8009554:	f7f7 fab8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009558:	2800      	cmp	r0, #0
 800955a:	d0c1      	beq.n	80094e0 <_strtod_l+0x8b8>
 800955c:	e619      	b.n	8009192 <_strtod_l+0x56a>
 800955e:	4641      	mov	r1, r8
 8009560:	4620      	mov	r0, r4
 8009562:	f7ff facd 	bl	8008b00 <__ratio>
 8009566:	ec57 6b10 	vmov	r6, r7, d0
 800956a:	2200      	movs	r2, #0
 800956c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009570:	4630      	mov	r0, r6
 8009572:	4639      	mov	r1, r7
 8009574:	f7f7 fabc 	bl	8000af0 <__aeabi_dcmple>
 8009578:	2800      	cmp	r0, #0
 800957a:	d06f      	beq.n	800965c <_strtod_l+0xa34>
 800957c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800957e:	2b00      	cmp	r3, #0
 8009580:	d17a      	bne.n	8009678 <_strtod_l+0xa50>
 8009582:	f1ba 0f00 	cmp.w	sl, #0
 8009586:	d158      	bne.n	800963a <_strtod_l+0xa12>
 8009588:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800958a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800958e:	2b00      	cmp	r3, #0
 8009590:	d15a      	bne.n	8009648 <_strtod_l+0xa20>
 8009592:	4b64      	ldr	r3, [pc, #400]	@ (8009724 <_strtod_l+0xafc>)
 8009594:	2200      	movs	r2, #0
 8009596:	4630      	mov	r0, r6
 8009598:	4639      	mov	r1, r7
 800959a:	f7f7 fa9f 	bl	8000adc <__aeabi_dcmplt>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d159      	bne.n	8009656 <_strtod_l+0xa2e>
 80095a2:	4630      	mov	r0, r6
 80095a4:	4639      	mov	r1, r7
 80095a6:	4b60      	ldr	r3, [pc, #384]	@ (8009728 <_strtod_l+0xb00>)
 80095a8:	2200      	movs	r2, #0
 80095aa:	f7f7 f825 	bl	80005f8 <__aeabi_dmul>
 80095ae:	4606      	mov	r6, r0
 80095b0:	460f      	mov	r7, r1
 80095b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80095b6:	9606      	str	r6, [sp, #24]
 80095b8:	9307      	str	r3, [sp, #28]
 80095ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095be:	4d57      	ldr	r5, [pc, #348]	@ (800971c <_strtod_l+0xaf4>)
 80095c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80095c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095c6:	401d      	ands	r5, r3
 80095c8:	4b58      	ldr	r3, [pc, #352]	@ (800972c <_strtod_l+0xb04>)
 80095ca:	429d      	cmp	r5, r3
 80095cc:	f040 80b2 	bne.w	8009734 <_strtod_l+0xb0c>
 80095d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80095d6:	ec4b ab10 	vmov	d0, sl, fp
 80095da:	f7ff f9c9 	bl	8008970 <__ulp>
 80095de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095e2:	ec51 0b10 	vmov	r0, r1, d0
 80095e6:	f7f7 f807 	bl	80005f8 <__aeabi_dmul>
 80095ea:	4652      	mov	r2, sl
 80095ec:	465b      	mov	r3, fp
 80095ee:	f7f6 fe4d 	bl	800028c <__adddf3>
 80095f2:	460b      	mov	r3, r1
 80095f4:	4949      	ldr	r1, [pc, #292]	@ (800971c <_strtod_l+0xaf4>)
 80095f6:	4a4e      	ldr	r2, [pc, #312]	@ (8009730 <_strtod_l+0xb08>)
 80095f8:	4019      	ands	r1, r3
 80095fa:	4291      	cmp	r1, r2
 80095fc:	4682      	mov	sl, r0
 80095fe:	d942      	bls.n	8009686 <_strtod_l+0xa5e>
 8009600:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009602:	4b47      	ldr	r3, [pc, #284]	@ (8009720 <_strtod_l+0xaf8>)
 8009604:	429a      	cmp	r2, r3
 8009606:	d103      	bne.n	8009610 <_strtod_l+0x9e8>
 8009608:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800960a:	3301      	adds	r3, #1
 800960c:	f43f ad2b 	beq.w	8009066 <_strtod_l+0x43e>
 8009610:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009720 <_strtod_l+0xaf8>
 8009614:	f04f 3aff 	mov.w	sl, #4294967295
 8009618:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800961a:	9805      	ldr	r0, [sp, #20]
 800961c:	f7fe fe74 	bl	8008308 <_Bfree>
 8009620:	9805      	ldr	r0, [sp, #20]
 8009622:	4649      	mov	r1, r9
 8009624:	f7fe fe70 	bl	8008308 <_Bfree>
 8009628:	9805      	ldr	r0, [sp, #20]
 800962a:	4641      	mov	r1, r8
 800962c:	f7fe fe6c 	bl	8008308 <_Bfree>
 8009630:	9805      	ldr	r0, [sp, #20]
 8009632:	4621      	mov	r1, r4
 8009634:	f7fe fe68 	bl	8008308 <_Bfree>
 8009638:	e618      	b.n	800926c <_strtod_l+0x644>
 800963a:	f1ba 0f01 	cmp.w	sl, #1
 800963e:	d103      	bne.n	8009648 <_strtod_l+0xa20>
 8009640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009642:	2b00      	cmp	r3, #0
 8009644:	f43f ada5 	beq.w	8009192 <_strtod_l+0x56a>
 8009648:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80096f8 <_strtod_l+0xad0>
 800964c:	4f35      	ldr	r7, [pc, #212]	@ (8009724 <_strtod_l+0xafc>)
 800964e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009652:	2600      	movs	r6, #0
 8009654:	e7b1      	b.n	80095ba <_strtod_l+0x992>
 8009656:	4f34      	ldr	r7, [pc, #208]	@ (8009728 <_strtod_l+0xb00>)
 8009658:	2600      	movs	r6, #0
 800965a:	e7aa      	b.n	80095b2 <_strtod_l+0x98a>
 800965c:	4b32      	ldr	r3, [pc, #200]	@ (8009728 <_strtod_l+0xb00>)
 800965e:	4630      	mov	r0, r6
 8009660:	4639      	mov	r1, r7
 8009662:	2200      	movs	r2, #0
 8009664:	f7f6 ffc8 	bl	80005f8 <__aeabi_dmul>
 8009668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800966a:	4606      	mov	r6, r0
 800966c:	460f      	mov	r7, r1
 800966e:	2b00      	cmp	r3, #0
 8009670:	d09f      	beq.n	80095b2 <_strtod_l+0x98a>
 8009672:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009676:	e7a0      	b.n	80095ba <_strtod_l+0x992>
 8009678:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009700 <_strtod_l+0xad8>
 800967c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009680:	ec57 6b17 	vmov	r6, r7, d7
 8009684:	e799      	b.n	80095ba <_strtod_l+0x992>
 8009686:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800968a:	9b08      	ldr	r3, [sp, #32]
 800968c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1c1      	bne.n	8009618 <_strtod_l+0x9f0>
 8009694:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009698:	0d1b      	lsrs	r3, r3, #20
 800969a:	051b      	lsls	r3, r3, #20
 800969c:	429d      	cmp	r5, r3
 800969e:	d1bb      	bne.n	8009618 <_strtod_l+0x9f0>
 80096a0:	4630      	mov	r0, r6
 80096a2:	4639      	mov	r1, r7
 80096a4:	f7f7 faf0 	bl	8000c88 <__aeabi_d2lz>
 80096a8:	f7f6 ff78 	bl	800059c <__aeabi_l2d>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4630      	mov	r0, r6
 80096b2:	4639      	mov	r1, r7
 80096b4:	f7f6 fde8 	bl	8000288 <__aeabi_dsub>
 80096b8:	460b      	mov	r3, r1
 80096ba:	4602      	mov	r2, r0
 80096bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80096c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80096c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096c6:	ea46 060a 	orr.w	r6, r6, sl
 80096ca:	431e      	orrs	r6, r3
 80096cc:	d06f      	beq.n	80097ae <_strtod_l+0xb86>
 80096ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8009708 <_strtod_l+0xae0>)
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	f7f7 fa02 	bl	8000adc <__aeabi_dcmplt>
 80096d8:	2800      	cmp	r0, #0
 80096da:	f47f accf 	bne.w	800907c <_strtod_l+0x454>
 80096de:	a30c      	add	r3, pc, #48	@ (adr r3, 8009710 <_strtod_l+0xae8>)
 80096e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096e8:	f7f7 fa16 	bl	8000b18 <__aeabi_dcmpgt>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d093      	beq.n	8009618 <_strtod_l+0x9f0>
 80096f0:	e4c4      	b.n	800907c <_strtod_l+0x454>
 80096f2:	bf00      	nop
 80096f4:	f3af 8000 	nop.w
 80096f8:	00000000 	.word	0x00000000
 80096fc:	bff00000 	.word	0xbff00000
 8009700:	00000000 	.word	0x00000000
 8009704:	3ff00000 	.word	0x3ff00000
 8009708:	94a03595 	.word	0x94a03595
 800970c:	3fdfffff 	.word	0x3fdfffff
 8009710:	35afe535 	.word	0x35afe535
 8009714:	3fe00000 	.word	0x3fe00000
 8009718:	000fffff 	.word	0x000fffff
 800971c:	7ff00000 	.word	0x7ff00000
 8009720:	7fefffff 	.word	0x7fefffff
 8009724:	3ff00000 	.word	0x3ff00000
 8009728:	3fe00000 	.word	0x3fe00000
 800972c:	7fe00000 	.word	0x7fe00000
 8009730:	7c9fffff 	.word	0x7c9fffff
 8009734:	9b08      	ldr	r3, [sp, #32]
 8009736:	b323      	cbz	r3, 8009782 <_strtod_l+0xb5a>
 8009738:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800973c:	d821      	bhi.n	8009782 <_strtod_l+0xb5a>
 800973e:	a328      	add	r3, pc, #160	@ (adr r3, 80097e0 <_strtod_l+0xbb8>)
 8009740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009744:	4630      	mov	r0, r6
 8009746:	4639      	mov	r1, r7
 8009748:	f7f7 f9d2 	bl	8000af0 <__aeabi_dcmple>
 800974c:	b1a0      	cbz	r0, 8009778 <_strtod_l+0xb50>
 800974e:	4639      	mov	r1, r7
 8009750:	4630      	mov	r0, r6
 8009752:	f7f7 fa29 	bl	8000ba8 <__aeabi_d2uiz>
 8009756:	2801      	cmp	r0, #1
 8009758:	bf38      	it	cc
 800975a:	2001      	movcc	r0, #1
 800975c:	f7f6 fed2 	bl	8000504 <__aeabi_ui2d>
 8009760:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009762:	4606      	mov	r6, r0
 8009764:	460f      	mov	r7, r1
 8009766:	b9fb      	cbnz	r3, 80097a8 <_strtod_l+0xb80>
 8009768:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800976c:	9014      	str	r0, [sp, #80]	@ 0x50
 800976e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009770:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009774:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009778:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800977a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800977e:	1b5b      	subs	r3, r3, r5
 8009780:	9311      	str	r3, [sp, #68]	@ 0x44
 8009782:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009786:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800978a:	f7ff f8f1 	bl	8008970 <__ulp>
 800978e:	4650      	mov	r0, sl
 8009790:	ec53 2b10 	vmov	r2, r3, d0
 8009794:	4659      	mov	r1, fp
 8009796:	f7f6 ff2f 	bl	80005f8 <__aeabi_dmul>
 800979a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800979e:	f7f6 fd75 	bl	800028c <__adddf3>
 80097a2:	4682      	mov	sl, r0
 80097a4:	468b      	mov	fp, r1
 80097a6:	e770      	b.n	800968a <_strtod_l+0xa62>
 80097a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80097ac:	e7e0      	b.n	8009770 <_strtod_l+0xb48>
 80097ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80097e8 <_strtod_l+0xbc0>)
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	f7f7 f992 	bl	8000adc <__aeabi_dcmplt>
 80097b8:	e798      	b.n	80096ec <_strtod_l+0xac4>
 80097ba:	2300      	movs	r3, #0
 80097bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80097c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097c2:	6013      	str	r3, [r2, #0]
 80097c4:	f7ff ba6d 	b.w	8008ca2 <_strtod_l+0x7a>
 80097c8:	2a65      	cmp	r2, #101	@ 0x65
 80097ca:	f43f ab66 	beq.w	8008e9a <_strtod_l+0x272>
 80097ce:	2a45      	cmp	r2, #69	@ 0x45
 80097d0:	f43f ab63 	beq.w	8008e9a <_strtod_l+0x272>
 80097d4:	2301      	movs	r3, #1
 80097d6:	f7ff bb9e 	b.w	8008f16 <_strtod_l+0x2ee>
 80097da:	bf00      	nop
 80097dc:	f3af 8000 	nop.w
 80097e0:	ffc00000 	.word	0xffc00000
 80097e4:	41dfffff 	.word	0x41dfffff
 80097e8:	94a03595 	.word	0x94a03595
 80097ec:	3fcfffff 	.word	0x3fcfffff

080097f0 <_strtod_r>:
 80097f0:	4b01      	ldr	r3, [pc, #4]	@ (80097f8 <_strtod_r+0x8>)
 80097f2:	f7ff ba19 	b.w	8008c28 <_strtod_l>
 80097f6:	bf00      	nop
 80097f8:	2000008c 	.word	0x2000008c

080097fc <_strtol_l.constprop.0>:
 80097fc:	2b24      	cmp	r3, #36	@ 0x24
 80097fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009802:	4686      	mov	lr, r0
 8009804:	4690      	mov	r8, r2
 8009806:	d801      	bhi.n	800980c <_strtol_l.constprop.0+0x10>
 8009808:	2b01      	cmp	r3, #1
 800980a:	d106      	bne.n	800981a <_strtol_l.constprop.0+0x1e>
 800980c:	f7fd fd9e 	bl	800734c <__errno>
 8009810:	2316      	movs	r3, #22
 8009812:	6003      	str	r3, [r0, #0]
 8009814:	2000      	movs	r0, #0
 8009816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800981a:	4834      	ldr	r0, [pc, #208]	@ (80098ec <_strtol_l.constprop.0+0xf0>)
 800981c:	460d      	mov	r5, r1
 800981e:	462a      	mov	r2, r5
 8009820:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009824:	5d06      	ldrb	r6, [r0, r4]
 8009826:	f016 0608 	ands.w	r6, r6, #8
 800982a:	d1f8      	bne.n	800981e <_strtol_l.constprop.0+0x22>
 800982c:	2c2d      	cmp	r4, #45	@ 0x2d
 800982e:	d12d      	bne.n	800988c <_strtol_l.constprop.0+0x90>
 8009830:	782c      	ldrb	r4, [r5, #0]
 8009832:	2601      	movs	r6, #1
 8009834:	1c95      	adds	r5, r2, #2
 8009836:	f033 0210 	bics.w	r2, r3, #16
 800983a:	d109      	bne.n	8009850 <_strtol_l.constprop.0+0x54>
 800983c:	2c30      	cmp	r4, #48	@ 0x30
 800983e:	d12a      	bne.n	8009896 <_strtol_l.constprop.0+0x9a>
 8009840:	782a      	ldrb	r2, [r5, #0]
 8009842:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009846:	2a58      	cmp	r2, #88	@ 0x58
 8009848:	d125      	bne.n	8009896 <_strtol_l.constprop.0+0x9a>
 800984a:	786c      	ldrb	r4, [r5, #1]
 800984c:	2310      	movs	r3, #16
 800984e:	3502      	adds	r5, #2
 8009850:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009854:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009858:	2200      	movs	r2, #0
 800985a:	fbbc f9f3 	udiv	r9, ip, r3
 800985e:	4610      	mov	r0, r2
 8009860:	fb03 ca19 	mls	sl, r3, r9, ip
 8009864:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009868:	2f09      	cmp	r7, #9
 800986a:	d81b      	bhi.n	80098a4 <_strtol_l.constprop.0+0xa8>
 800986c:	463c      	mov	r4, r7
 800986e:	42a3      	cmp	r3, r4
 8009870:	dd27      	ble.n	80098c2 <_strtol_l.constprop.0+0xc6>
 8009872:	1c57      	adds	r7, r2, #1
 8009874:	d007      	beq.n	8009886 <_strtol_l.constprop.0+0x8a>
 8009876:	4581      	cmp	r9, r0
 8009878:	d320      	bcc.n	80098bc <_strtol_l.constprop.0+0xc0>
 800987a:	d101      	bne.n	8009880 <_strtol_l.constprop.0+0x84>
 800987c:	45a2      	cmp	sl, r4
 800987e:	db1d      	blt.n	80098bc <_strtol_l.constprop.0+0xc0>
 8009880:	fb00 4003 	mla	r0, r0, r3, r4
 8009884:	2201      	movs	r2, #1
 8009886:	f815 4b01 	ldrb.w	r4, [r5], #1
 800988a:	e7eb      	b.n	8009864 <_strtol_l.constprop.0+0x68>
 800988c:	2c2b      	cmp	r4, #43	@ 0x2b
 800988e:	bf04      	itt	eq
 8009890:	782c      	ldrbeq	r4, [r5, #0]
 8009892:	1c95      	addeq	r5, r2, #2
 8009894:	e7cf      	b.n	8009836 <_strtol_l.constprop.0+0x3a>
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1da      	bne.n	8009850 <_strtol_l.constprop.0+0x54>
 800989a:	2c30      	cmp	r4, #48	@ 0x30
 800989c:	bf0c      	ite	eq
 800989e:	2308      	moveq	r3, #8
 80098a0:	230a      	movne	r3, #10
 80098a2:	e7d5      	b.n	8009850 <_strtol_l.constprop.0+0x54>
 80098a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80098a8:	2f19      	cmp	r7, #25
 80098aa:	d801      	bhi.n	80098b0 <_strtol_l.constprop.0+0xb4>
 80098ac:	3c37      	subs	r4, #55	@ 0x37
 80098ae:	e7de      	b.n	800986e <_strtol_l.constprop.0+0x72>
 80098b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80098b4:	2f19      	cmp	r7, #25
 80098b6:	d804      	bhi.n	80098c2 <_strtol_l.constprop.0+0xc6>
 80098b8:	3c57      	subs	r4, #87	@ 0x57
 80098ba:	e7d8      	b.n	800986e <_strtol_l.constprop.0+0x72>
 80098bc:	f04f 32ff 	mov.w	r2, #4294967295
 80098c0:	e7e1      	b.n	8009886 <_strtol_l.constprop.0+0x8a>
 80098c2:	1c53      	adds	r3, r2, #1
 80098c4:	d108      	bne.n	80098d8 <_strtol_l.constprop.0+0xdc>
 80098c6:	2322      	movs	r3, #34	@ 0x22
 80098c8:	f8ce 3000 	str.w	r3, [lr]
 80098cc:	4660      	mov	r0, ip
 80098ce:	f1b8 0f00 	cmp.w	r8, #0
 80098d2:	d0a0      	beq.n	8009816 <_strtol_l.constprop.0+0x1a>
 80098d4:	1e69      	subs	r1, r5, #1
 80098d6:	e006      	b.n	80098e6 <_strtol_l.constprop.0+0xea>
 80098d8:	b106      	cbz	r6, 80098dc <_strtol_l.constprop.0+0xe0>
 80098da:	4240      	negs	r0, r0
 80098dc:	f1b8 0f00 	cmp.w	r8, #0
 80098e0:	d099      	beq.n	8009816 <_strtol_l.constprop.0+0x1a>
 80098e2:	2a00      	cmp	r2, #0
 80098e4:	d1f6      	bne.n	80098d4 <_strtol_l.constprop.0+0xd8>
 80098e6:	f8c8 1000 	str.w	r1, [r8]
 80098ea:	e794      	b.n	8009816 <_strtol_l.constprop.0+0x1a>
 80098ec:	080175e1 	.word	0x080175e1

080098f0 <_strtol_r>:
 80098f0:	f7ff bf84 	b.w	80097fc <_strtol_l.constprop.0>

080098f4 <__ssputs_r>:
 80098f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f8:	688e      	ldr	r6, [r1, #8]
 80098fa:	461f      	mov	r7, r3
 80098fc:	42be      	cmp	r6, r7
 80098fe:	680b      	ldr	r3, [r1, #0]
 8009900:	4682      	mov	sl, r0
 8009902:	460c      	mov	r4, r1
 8009904:	4690      	mov	r8, r2
 8009906:	d82d      	bhi.n	8009964 <__ssputs_r+0x70>
 8009908:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800990c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009910:	d026      	beq.n	8009960 <__ssputs_r+0x6c>
 8009912:	6965      	ldr	r5, [r4, #20]
 8009914:	6909      	ldr	r1, [r1, #16]
 8009916:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800991a:	eba3 0901 	sub.w	r9, r3, r1
 800991e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009922:	1c7b      	adds	r3, r7, #1
 8009924:	444b      	add	r3, r9
 8009926:	106d      	asrs	r5, r5, #1
 8009928:	429d      	cmp	r5, r3
 800992a:	bf38      	it	cc
 800992c:	461d      	movcc	r5, r3
 800992e:	0553      	lsls	r3, r2, #21
 8009930:	d527      	bpl.n	8009982 <__ssputs_r+0x8e>
 8009932:	4629      	mov	r1, r5
 8009934:	f7fe fc1c 	bl	8008170 <_malloc_r>
 8009938:	4606      	mov	r6, r0
 800993a:	b360      	cbz	r0, 8009996 <__ssputs_r+0xa2>
 800993c:	6921      	ldr	r1, [r4, #16]
 800993e:	464a      	mov	r2, r9
 8009940:	f000 fbf0 	bl	800a124 <memcpy>
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800994a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800994e:	81a3      	strh	r3, [r4, #12]
 8009950:	6126      	str	r6, [r4, #16]
 8009952:	6165      	str	r5, [r4, #20]
 8009954:	444e      	add	r6, r9
 8009956:	eba5 0509 	sub.w	r5, r5, r9
 800995a:	6026      	str	r6, [r4, #0]
 800995c:	60a5      	str	r5, [r4, #8]
 800995e:	463e      	mov	r6, r7
 8009960:	42be      	cmp	r6, r7
 8009962:	d900      	bls.n	8009966 <__ssputs_r+0x72>
 8009964:	463e      	mov	r6, r7
 8009966:	6820      	ldr	r0, [r4, #0]
 8009968:	4632      	mov	r2, r6
 800996a:	4641      	mov	r1, r8
 800996c:	f000 fb7c 	bl	800a068 <memmove>
 8009970:	68a3      	ldr	r3, [r4, #8]
 8009972:	1b9b      	subs	r3, r3, r6
 8009974:	60a3      	str	r3, [r4, #8]
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	4433      	add	r3, r6
 800997a:	6023      	str	r3, [r4, #0]
 800997c:	2000      	movs	r0, #0
 800997e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009982:	462a      	mov	r2, r5
 8009984:	f000 ff49 	bl	800a81a <_realloc_r>
 8009988:	4606      	mov	r6, r0
 800998a:	2800      	cmp	r0, #0
 800998c:	d1e0      	bne.n	8009950 <__ssputs_r+0x5c>
 800998e:	6921      	ldr	r1, [r4, #16]
 8009990:	4650      	mov	r0, sl
 8009992:	f7fe fb79 	bl	8008088 <_free_r>
 8009996:	230c      	movs	r3, #12
 8009998:	f8ca 3000 	str.w	r3, [sl]
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099a2:	81a3      	strh	r3, [r4, #12]
 80099a4:	f04f 30ff 	mov.w	r0, #4294967295
 80099a8:	e7e9      	b.n	800997e <__ssputs_r+0x8a>
	...

080099ac <_svfiprintf_r>:
 80099ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b0:	4698      	mov	r8, r3
 80099b2:	898b      	ldrh	r3, [r1, #12]
 80099b4:	061b      	lsls	r3, r3, #24
 80099b6:	b09d      	sub	sp, #116	@ 0x74
 80099b8:	4607      	mov	r7, r0
 80099ba:	460d      	mov	r5, r1
 80099bc:	4614      	mov	r4, r2
 80099be:	d510      	bpl.n	80099e2 <_svfiprintf_r+0x36>
 80099c0:	690b      	ldr	r3, [r1, #16]
 80099c2:	b973      	cbnz	r3, 80099e2 <_svfiprintf_r+0x36>
 80099c4:	2140      	movs	r1, #64	@ 0x40
 80099c6:	f7fe fbd3 	bl	8008170 <_malloc_r>
 80099ca:	6028      	str	r0, [r5, #0]
 80099cc:	6128      	str	r0, [r5, #16]
 80099ce:	b930      	cbnz	r0, 80099de <_svfiprintf_r+0x32>
 80099d0:	230c      	movs	r3, #12
 80099d2:	603b      	str	r3, [r7, #0]
 80099d4:	f04f 30ff 	mov.w	r0, #4294967295
 80099d8:	b01d      	add	sp, #116	@ 0x74
 80099da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099de:	2340      	movs	r3, #64	@ 0x40
 80099e0:	616b      	str	r3, [r5, #20]
 80099e2:	2300      	movs	r3, #0
 80099e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80099e6:	2320      	movs	r3, #32
 80099e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80099f0:	2330      	movs	r3, #48	@ 0x30
 80099f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009b90 <_svfiprintf_r+0x1e4>
 80099f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099fa:	f04f 0901 	mov.w	r9, #1
 80099fe:	4623      	mov	r3, r4
 8009a00:	469a      	mov	sl, r3
 8009a02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a06:	b10a      	cbz	r2, 8009a0c <_svfiprintf_r+0x60>
 8009a08:	2a25      	cmp	r2, #37	@ 0x25
 8009a0a:	d1f9      	bne.n	8009a00 <_svfiprintf_r+0x54>
 8009a0c:	ebba 0b04 	subs.w	fp, sl, r4
 8009a10:	d00b      	beq.n	8009a2a <_svfiprintf_r+0x7e>
 8009a12:	465b      	mov	r3, fp
 8009a14:	4622      	mov	r2, r4
 8009a16:	4629      	mov	r1, r5
 8009a18:	4638      	mov	r0, r7
 8009a1a:	f7ff ff6b 	bl	80098f4 <__ssputs_r>
 8009a1e:	3001      	adds	r0, #1
 8009a20:	f000 80a7 	beq.w	8009b72 <_svfiprintf_r+0x1c6>
 8009a24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a26:	445a      	add	r2, fp
 8009a28:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f000 809f 	beq.w	8009b72 <_svfiprintf_r+0x1c6>
 8009a34:	2300      	movs	r3, #0
 8009a36:	f04f 32ff 	mov.w	r2, #4294967295
 8009a3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a3e:	f10a 0a01 	add.w	sl, sl, #1
 8009a42:	9304      	str	r3, [sp, #16]
 8009a44:	9307      	str	r3, [sp, #28]
 8009a46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a4c:	4654      	mov	r4, sl
 8009a4e:	2205      	movs	r2, #5
 8009a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a54:	484e      	ldr	r0, [pc, #312]	@ (8009b90 <_svfiprintf_r+0x1e4>)
 8009a56:	f7f6 fbbb 	bl	80001d0 <memchr>
 8009a5a:	9a04      	ldr	r2, [sp, #16]
 8009a5c:	b9d8      	cbnz	r0, 8009a96 <_svfiprintf_r+0xea>
 8009a5e:	06d0      	lsls	r0, r2, #27
 8009a60:	bf44      	itt	mi
 8009a62:	2320      	movmi	r3, #32
 8009a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a68:	0711      	lsls	r1, r2, #28
 8009a6a:	bf44      	itt	mi
 8009a6c:	232b      	movmi	r3, #43	@ 0x2b
 8009a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a72:	f89a 3000 	ldrb.w	r3, [sl]
 8009a76:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a78:	d015      	beq.n	8009aa6 <_svfiprintf_r+0xfa>
 8009a7a:	9a07      	ldr	r2, [sp, #28]
 8009a7c:	4654      	mov	r4, sl
 8009a7e:	2000      	movs	r0, #0
 8009a80:	f04f 0c0a 	mov.w	ip, #10
 8009a84:	4621      	mov	r1, r4
 8009a86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a8a:	3b30      	subs	r3, #48	@ 0x30
 8009a8c:	2b09      	cmp	r3, #9
 8009a8e:	d94b      	bls.n	8009b28 <_svfiprintf_r+0x17c>
 8009a90:	b1b0      	cbz	r0, 8009ac0 <_svfiprintf_r+0x114>
 8009a92:	9207      	str	r2, [sp, #28]
 8009a94:	e014      	b.n	8009ac0 <_svfiprintf_r+0x114>
 8009a96:	eba0 0308 	sub.w	r3, r0, r8
 8009a9a:	fa09 f303 	lsl.w	r3, r9, r3
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	9304      	str	r3, [sp, #16]
 8009aa2:	46a2      	mov	sl, r4
 8009aa4:	e7d2      	b.n	8009a4c <_svfiprintf_r+0xa0>
 8009aa6:	9b03      	ldr	r3, [sp, #12]
 8009aa8:	1d19      	adds	r1, r3, #4
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	9103      	str	r1, [sp, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	bfbb      	ittet	lt
 8009ab2:	425b      	neglt	r3, r3
 8009ab4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ab8:	9307      	strge	r3, [sp, #28]
 8009aba:	9307      	strlt	r3, [sp, #28]
 8009abc:	bfb8      	it	lt
 8009abe:	9204      	strlt	r2, [sp, #16]
 8009ac0:	7823      	ldrb	r3, [r4, #0]
 8009ac2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ac4:	d10a      	bne.n	8009adc <_svfiprintf_r+0x130>
 8009ac6:	7863      	ldrb	r3, [r4, #1]
 8009ac8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aca:	d132      	bne.n	8009b32 <_svfiprintf_r+0x186>
 8009acc:	9b03      	ldr	r3, [sp, #12]
 8009ace:	1d1a      	adds	r2, r3, #4
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	9203      	str	r2, [sp, #12]
 8009ad4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ad8:	3402      	adds	r4, #2
 8009ada:	9305      	str	r3, [sp, #20]
 8009adc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ba0 <_svfiprintf_r+0x1f4>
 8009ae0:	7821      	ldrb	r1, [r4, #0]
 8009ae2:	2203      	movs	r2, #3
 8009ae4:	4650      	mov	r0, sl
 8009ae6:	f7f6 fb73 	bl	80001d0 <memchr>
 8009aea:	b138      	cbz	r0, 8009afc <_svfiprintf_r+0x150>
 8009aec:	9b04      	ldr	r3, [sp, #16]
 8009aee:	eba0 000a 	sub.w	r0, r0, sl
 8009af2:	2240      	movs	r2, #64	@ 0x40
 8009af4:	4082      	lsls	r2, r0
 8009af6:	4313      	orrs	r3, r2
 8009af8:	3401      	adds	r4, #1
 8009afa:	9304      	str	r3, [sp, #16]
 8009afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b00:	4824      	ldr	r0, [pc, #144]	@ (8009b94 <_svfiprintf_r+0x1e8>)
 8009b02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b06:	2206      	movs	r2, #6
 8009b08:	f7f6 fb62 	bl	80001d0 <memchr>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d036      	beq.n	8009b7e <_svfiprintf_r+0x1d2>
 8009b10:	4b21      	ldr	r3, [pc, #132]	@ (8009b98 <_svfiprintf_r+0x1ec>)
 8009b12:	bb1b      	cbnz	r3, 8009b5c <_svfiprintf_r+0x1b0>
 8009b14:	9b03      	ldr	r3, [sp, #12]
 8009b16:	3307      	adds	r3, #7
 8009b18:	f023 0307 	bic.w	r3, r3, #7
 8009b1c:	3308      	adds	r3, #8
 8009b1e:	9303      	str	r3, [sp, #12]
 8009b20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b22:	4433      	add	r3, r6
 8009b24:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b26:	e76a      	b.n	80099fe <_svfiprintf_r+0x52>
 8009b28:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	2001      	movs	r0, #1
 8009b30:	e7a8      	b.n	8009a84 <_svfiprintf_r+0xd8>
 8009b32:	2300      	movs	r3, #0
 8009b34:	3401      	adds	r4, #1
 8009b36:	9305      	str	r3, [sp, #20]
 8009b38:	4619      	mov	r1, r3
 8009b3a:	f04f 0c0a 	mov.w	ip, #10
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b44:	3a30      	subs	r2, #48	@ 0x30
 8009b46:	2a09      	cmp	r2, #9
 8009b48:	d903      	bls.n	8009b52 <_svfiprintf_r+0x1a6>
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d0c6      	beq.n	8009adc <_svfiprintf_r+0x130>
 8009b4e:	9105      	str	r1, [sp, #20]
 8009b50:	e7c4      	b.n	8009adc <_svfiprintf_r+0x130>
 8009b52:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b56:	4604      	mov	r4, r0
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e7f0      	b.n	8009b3e <_svfiprintf_r+0x192>
 8009b5c:	ab03      	add	r3, sp, #12
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	462a      	mov	r2, r5
 8009b62:	4b0e      	ldr	r3, [pc, #56]	@ (8009b9c <_svfiprintf_r+0x1f0>)
 8009b64:	a904      	add	r1, sp, #16
 8009b66:	4638      	mov	r0, r7
 8009b68:	f7fc fba8 	bl	80062bc <_printf_float>
 8009b6c:	1c42      	adds	r2, r0, #1
 8009b6e:	4606      	mov	r6, r0
 8009b70:	d1d6      	bne.n	8009b20 <_svfiprintf_r+0x174>
 8009b72:	89ab      	ldrh	r3, [r5, #12]
 8009b74:	065b      	lsls	r3, r3, #25
 8009b76:	f53f af2d 	bmi.w	80099d4 <_svfiprintf_r+0x28>
 8009b7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b7c:	e72c      	b.n	80099d8 <_svfiprintf_r+0x2c>
 8009b7e:	ab03      	add	r3, sp, #12
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	462a      	mov	r2, r5
 8009b84:	4b05      	ldr	r3, [pc, #20]	@ (8009b9c <_svfiprintf_r+0x1f0>)
 8009b86:	a904      	add	r1, sp, #16
 8009b88:	4638      	mov	r0, r7
 8009b8a:	f7fc fe2f 	bl	80067ec <_printf_i>
 8009b8e:	e7ed      	b.n	8009b6c <_svfiprintf_r+0x1c0>
 8009b90:	080176e1 	.word	0x080176e1
 8009b94:	080176eb 	.word	0x080176eb
 8009b98:	080062bd 	.word	0x080062bd
 8009b9c:	080098f5 	.word	0x080098f5
 8009ba0:	080176e7 	.word	0x080176e7

08009ba4 <__sfputc_r>:
 8009ba4:	6893      	ldr	r3, [r2, #8]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	b410      	push	{r4}
 8009bac:	6093      	str	r3, [r2, #8]
 8009bae:	da08      	bge.n	8009bc2 <__sfputc_r+0x1e>
 8009bb0:	6994      	ldr	r4, [r2, #24]
 8009bb2:	42a3      	cmp	r3, r4
 8009bb4:	db01      	blt.n	8009bba <__sfputc_r+0x16>
 8009bb6:	290a      	cmp	r1, #10
 8009bb8:	d103      	bne.n	8009bc2 <__sfputc_r+0x1e>
 8009bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bbe:	f7fd bade 	b.w	800717e <__swbuf_r>
 8009bc2:	6813      	ldr	r3, [r2, #0]
 8009bc4:	1c58      	adds	r0, r3, #1
 8009bc6:	6010      	str	r0, [r2, #0]
 8009bc8:	7019      	strb	r1, [r3, #0]
 8009bca:	4608      	mov	r0, r1
 8009bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <__sfputs_r>:
 8009bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	460f      	mov	r7, r1
 8009bd8:	4614      	mov	r4, r2
 8009bda:	18d5      	adds	r5, r2, r3
 8009bdc:	42ac      	cmp	r4, r5
 8009bde:	d101      	bne.n	8009be4 <__sfputs_r+0x12>
 8009be0:	2000      	movs	r0, #0
 8009be2:	e007      	b.n	8009bf4 <__sfputs_r+0x22>
 8009be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be8:	463a      	mov	r2, r7
 8009bea:	4630      	mov	r0, r6
 8009bec:	f7ff ffda 	bl	8009ba4 <__sfputc_r>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	d1f3      	bne.n	8009bdc <__sfputs_r+0xa>
 8009bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bf8 <_vfiprintf_r>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	460d      	mov	r5, r1
 8009bfe:	b09d      	sub	sp, #116	@ 0x74
 8009c00:	4614      	mov	r4, r2
 8009c02:	4698      	mov	r8, r3
 8009c04:	4606      	mov	r6, r0
 8009c06:	b118      	cbz	r0, 8009c10 <_vfiprintf_r+0x18>
 8009c08:	6a03      	ldr	r3, [r0, #32]
 8009c0a:	b90b      	cbnz	r3, 8009c10 <_vfiprintf_r+0x18>
 8009c0c:	f7fd f9ae 	bl	8006f6c <__sinit>
 8009c10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c12:	07d9      	lsls	r1, r3, #31
 8009c14:	d405      	bmi.n	8009c22 <_vfiprintf_r+0x2a>
 8009c16:	89ab      	ldrh	r3, [r5, #12]
 8009c18:	059a      	lsls	r2, r3, #22
 8009c1a:	d402      	bmi.n	8009c22 <_vfiprintf_r+0x2a>
 8009c1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c1e:	f7fd fbc0 	bl	80073a2 <__retarget_lock_acquire_recursive>
 8009c22:	89ab      	ldrh	r3, [r5, #12]
 8009c24:	071b      	lsls	r3, r3, #28
 8009c26:	d501      	bpl.n	8009c2c <_vfiprintf_r+0x34>
 8009c28:	692b      	ldr	r3, [r5, #16]
 8009c2a:	b99b      	cbnz	r3, 8009c54 <_vfiprintf_r+0x5c>
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f7fd fae4 	bl	80071fc <__swsetup_r>
 8009c34:	b170      	cbz	r0, 8009c54 <_vfiprintf_r+0x5c>
 8009c36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c38:	07dc      	lsls	r4, r3, #31
 8009c3a:	d504      	bpl.n	8009c46 <_vfiprintf_r+0x4e>
 8009c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c40:	b01d      	add	sp, #116	@ 0x74
 8009c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c46:	89ab      	ldrh	r3, [r5, #12]
 8009c48:	0598      	lsls	r0, r3, #22
 8009c4a:	d4f7      	bmi.n	8009c3c <_vfiprintf_r+0x44>
 8009c4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c4e:	f7fd fba9 	bl	80073a4 <__retarget_lock_release_recursive>
 8009c52:	e7f3      	b.n	8009c3c <_vfiprintf_r+0x44>
 8009c54:	2300      	movs	r3, #0
 8009c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c58:	2320      	movs	r3, #32
 8009c5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c62:	2330      	movs	r3, #48	@ 0x30
 8009c64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e14 <_vfiprintf_r+0x21c>
 8009c68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c6c:	f04f 0901 	mov.w	r9, #1
 8009c70:	4623      	mov	r3, r4
 8009c72:	469a      	mov	sl, r3
 8009c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c78:	b10a      	cbz	r2, 8009c7e <_vfiprintf_r+0x86>
 8009c7a:	2a25      	cmp	r2, #37	@ 0x25
 8009c7c:	d1f9      	bne.n	8009c72 <_vfiprintf_r+0x7a>
 8009c7e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c82:	d00b      	beq.n	8009c9c <_vfiprintf_r+0xa4>
 8009c84:	465b      	mov	r3, fp
 8009c86:	4622      	mov	r2, r4
 8009c88:	4629      	mov	r1, r5
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	f7ff ffa1 	bl	8009bd2 <__sfputs_r>
 8009c90:	3001      	adds	r0, #1
 8009c92:	f000 80a7 	beq.w	8009de4 <_vfiprintf_r+0x1ec>
 8009c96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c98:	445a      	add	r2, fp
 8009c9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 809f 	beq.w	8009de4 <_vfiprintf_r+0x1ec>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cb0:	f10a 0a01 	add.w	sl, sl, #1
 8009cb4:	9304      	str	r3, [sp, #16]
 8009cb6:	9307      	str	r3, [sp, #28]
 8009cb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cbe:	4654      	mov	r4, sl
 8009cc0:	2205      	movs	r2, #5
 8009cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cc6:	4853      	ldr	r0, [pc, #332]	@ (8009e14 <_vfiprintf_r+0x21c>)
 8009cc8:	f7f6 fa82 	bl	80001d0 <memchr>
 8009ccc:	9a04      	ldr	r2, [sp, #16]
 8009cce:	b9d8      	cbnz	r0, 8009d08 <_vfiprintf_r+0x110>
 8009cd0:	06d1      	lsls	r1, r2, #27
 8009cd2:	bf44      	itt	mi
 8009cd4:	2320      	movmi	r3, #32
 8009cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cda:	0713      	lsls	r3, r2, #28
 8009cdc:	bf44      	itt	mi
 8009cde:	232b      	movmi	r3, #43	@ 0x2b
 8009ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ce8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cea:	d015      	beq.n	8009d18 <_vfiprintf_r+0x120>
 8009cec:	9a07      	ldr	r2, [sp, #28]
 8009cee:	4654      	mov	r4, sl
 8009cf0:	2000      	movs	r0, #0
 8009cf2:	f04f 0c0a 	mov.w	ip, #10
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cfc:	3b30      	subs	r3, #48	@ 0x30
 8009cfe:	2b09      	cmp	r3, #9
 8009d00:	d94b      	bls.n	8009d9a <_vfiprintf_r+0x1a2>
 8009d02:	b1b0      	cbz	r0, 8009d32 <_vfiprintf_r+0x13a>
 8009d04:	9207      	str	r2, [sp, #28]
 8009d06:	e014      	b.n	8009d32 <_vfiprintf_r+0x13a>
 8009d08:	eba0 0308 	sub.w	r3, r0, r8
 8009d0c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d10:	4313      	orrs	r3, r2
 8009d12:	9304      	str	r3, [sp, #16]
 8009d14:	46a2      	mov	sl, r4
 8009d16:	e7d2      	b.n	8009cbe <_vfiprintf_r+0xc6>
 8009d18:	9b03      	ldr	r3, [sp, #12]
 8009d1a:	1d19      	adds	r1, r3, #4
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	9103      	str	r1, [sp, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	bfbb      	ittet	lt
 8009d24:	425b      	neglt	r3, r3
 8009d26:	f042 0202 	orrlt.w	r2, r2, #2
 8009d2a:	9307      	strge	r3, [sp, #28]
 8009d2c:	9307      	strlt	r3, [sp, #28]
 8009d2e:	bfb8      	it	lt
 8009d30:	9204      	strlt	r2, [sp, #16]
 8009d32:	7823      	ldrb	r3, [r4, #0]
 8009d34:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d36:	d10a      	bne.n	8009d4e <_vfiprintf_r+0x156>
 8009d38:	7863      	ldrb	r3, [r4, #1]
 8009d3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d3c:	d132      	bne.n	8009da4 <_vfiprintf_r+0x1ac>
 8009d3e:	9b03      	ldr	r3, [sp, #12]
 8009d40:	1d1a      	adds	r2, r3, #4
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	9203      	str	r2, [sp, #12]
 8009d46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d4a:	3402      	adds	r4, #2
 8009d4c:	9305      	str	r3, [sp, #20]
 8009d4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e24 <_vfiprintf_r+0x22c>
 8009d52:	7821      	ldrb	r1, [r4, #0]
 8009d54:	2203      	movs	r2, #3
 8009d56:	4650      	mov	r0, sl
 8009d58:	f7f6 fa3a 	bl	80001d0 <memchr>
 8009d5c:	b138      	cbz	r0, 8009d6e <_vfiprintf_r+0x176>
 8009d5e:	9b04      	ldr	r3, [sp, #16]
 8009d60:	eba0 000a 	sub.w	r0, r0, sl
 8009d64:	2240      	movs	r2, #64	@ 0x40
 8009d66:	4082      	lsls	r2, r0
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	3401      	adds	r4, #1
 8009d6c:	9304      	str	r3, [sp, #16]
 8009d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d72:	4829      	ldr	r0, [pc, #164]	@ (8009e18 <_vfiprintf_r+0x220>)
 8009d74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d78:	2206      	movs	r2, #6
 8009d7a:	f7f6 fa29 	bl	80001d0 <memchr>
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d03f      	beq.n	8009e02 <_vfiprintf_r+0x20a>
 8009d82:	4b26      	ldr	r3, [pc, #152]	@ (8009e1c <_vfiprintf_r+0x224>)
 8009d84:	bb1b      	cbnz	r3, 8009dce <_vfiprintf_r+0x1d6>
 8009d86:	9b03      	ldr	r3, [sp, #12]
 8009d88:	3307      	adds	r3, #7
 8009d8a:	f023 0307 	bic.w	r3, r3, #7
 8009d8e:	3308      	adds	r3, #8
 8009d90:	9303      	str	r3, [sp, #12]
 8009d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d94:	443b      	add	r3, r7
 8009d96:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d98:	e76a      	b.n	8009c70 <_vfiprintf_r+0x78>
 8009d9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d9e:	460c      	mov	r4, r1
 8009da0:	2001      	movs	r0, #1
 8009da2:	e7a8      	b.n	8009cf6 <_vfiprintf_r+0xfe>
 8009da4:	2300      	movs	r3, #0
 8009da6:	3401      	adds	r4, #1
 8009da8:	9305      	str	r3, [sp, #20]
 8009daa:	4619      	mov	r1, r3
 8009dac:	f04f 0c0a 	mov.w	ip, #10
 8009db0:	4620      	mov	r0, r4
 8009db2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009db6:	3a30      	subs	r2, #48	@ 0x30
 8009db8:	2a09      	cmp	r2, #9
 8009dba:	d903      	bls.n	8009dc4 <_vfiprintf_r+0x1cc>
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d0c6      	beq.n	8009d4e <_vfiprintf_r+0x156>
 8009dc0:	9105      	str	r1, [sp, #20]
 8009dc2:	e7c4      	b.n	8009d4e <_vfiprintf_r+0x156>
 8009dc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dc8:	4604      	mov	r4, r0
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e7f0      	b.n	8009db0 <_vfiprintf_r+0x1b8>
 8009dce:	ab03      	add	r3, sp, #12
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	462a      	mov	r2, r5
 8009dd4:	4b12      	ldr	r3, [pc, #72]	@ (8009e20 <_vfiprintf_r+0x228>)
 8009dd6:	a904      	add	r1, sp, #16
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f7fc fa6f 	bl	80062bc <_printf_float>
 8009dde:	4607      	mov	r7, r0
 8009de0:	1c78      	adds	r0, r7, #1
 8009de2:	d1d6      	bne.n	8009d92 <_vfiprintf_r+0x19a>
 8009de4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009de6:	07d9      	lsls	r1, r3, #31
 8009de8:	d405      	bmi.n	8009df6 <_vfiprintf_r+0x1fe>
 8009dea:	89ab      	ldrh	r3, [r5, #12]
 8009dec:	059a      	lsls	r2, r3, #22
 8009dee:	d402      	bmi.n	8009df6 <_vfiprintf_r+0x1fe>
 8009df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009df2:	f7fd fad7 	bl	80073a4 <__retarget_lock_release_recursive>
 8009df6:	89ab      	ldrh	r3, [r5, #12]
 8009df8:	065b      	lsls	r3, r3, #25
 8009dfa:	f53f af1f 	bmi.w	8009c3c <_vfiprintf_r+0x44>
 8009dfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e00:	e71e      	b.n	8009c40 <_vfiprintf_r+0x48>
 8009e02:	ab03      	add	r3, sp, #12
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	462a      	mov	r2, r5
 8009e08:	4b05      	ldr	r3, [pc, #20]	@ (8009e20 <_vfiprintf_r+0x228>)
 8009e0a:	a904      	add	r1, sp, #16
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f7fc fced 	bl	80067ec <_printf_i>
 8009e12:	e7e4      	b.n	8009dde <_vfiprintf_r+0x1e6>
 8009e14:	080176e1 	.word	0x080176e1
 8009e18:	080176eb 	.word	0x080176eb
 8009e1c:	080062bd 	.word	0x080062bd
 8009e20:	08009bd3 	.word	0x08009bd3
 8009e24:	080176e7 	.word	0x080176e7

08009e28 <__sflush_r>:
 8009e28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e30:	0716      	lsls	r6, r2, #28
 8009e32:	4605      	mov	r5, r0
 8009e34:	460c      	mov	r4, r1
 8009e36:	d454      	bmi.n	8009ee2 <__sflush_r+0xba>
 8009e38:	684b      	ldr	r3, [r1, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	dc02      	bgt.n	8009e44 <__sflush_r+0x1c>
 8009e3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	dd48      	ble.n	8009ed6 <__sflush_r+0xae>
 8009e44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e46:	2e00      	cmp	r6, #0
 8009e48:	d045      	beq.n	8009ed6 <__sflush_r+0xae>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009e50:	682f      	ldr	r7, [r5, #0]
 8009e52:	6a21      	ldr	r1, [r4, #32]
 8009e54:	602b      	str	r3, [r5, #0]
 8009e56:	d030      	beq.n	8009eba <__sflush_r+0x92>
 8009e58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009e5a:	89a3      	ldrh	r3, [r4, #12]
 8009e5c:	0759      	lsls	r1, r3, #29
 8009e5e:	d505      	bpl.n	8009e6c <__sflush_r+0x44>
 8009e60:	6863      	ldr	r3, [r4, #4]
 8009e62:	1ad2      	subs	r2, r2, r3
 8009e64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e66:	b10b      	cbz	r3, 8009e6c <__sflush_r+0x44>
 8009e68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e6a:	1ad2      	subs	r2, r2, r3
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e70:	6a21      	ldr	r1, [r4, #32]
 8009e72:	4628      	mov	r0, r5
 8009e74:	47b0      	blx	r6
 8009e76:	1c43      	adds	r3, r0, #1
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	d106      	bne.n	8009e8a <__sflush_r+0x62>
 8009e7c:	6829      	ldr	r1, [r5, #0]
 8009e7e:	291d      	cmp	r1, #29
 8009e80:	d82b      	bhi.n	8009eda <__sflush_r+0xb2>
 8009e82:	4a2a      	ldr	r2, [pc, #168]	@ (8009f2c <__sflush_r+0x104>)
 8009e84:	410a      	asrs	r2, r1
 8009e86:	07d6      	lsls	r6, r2, #31
 8009e88:	d427      	bmi.n	8009eda <__sflush_r+0xb2>
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	6062      	str	r2, [r4, #4]
 8009e8e:	04d9      	lsls	r1, r3, #19
 8009e90:	6922      	ldr	r2, [r4, #16]
 8009e92:	6022      	str	r2, [r4, #0]
 8009e94:	d504      	bpl.n	8009ea0 <__sflush_r+0x78>
 8009e96:	1c42      	adds	r2, r0, #1
 8009e98:	d101      	bne.n	8009e9e <__sflush_r+0x76>
 8009e9a:	682b      	ldr	r3, [r5, #0]
 8009e9c:	b903      	cbnz	r3, 8009ea0 <__sflush_r+0x78>
 8009e9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009ea0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ea2:	602f      	str	r7, [r5, #0]
 8009ea4:	b1b9      	cbz	r1, 8009ed6 <__sflush_r+0xae>
 8009ea6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009eaa:	4299      	cmp	r1, r3
 8009eac:	d002      	beq.n	8009eb4 <__sflush_r+0x8c>
 8009eae:	4628      	mov	r0, r5
 8009eb0:	f7fe f8ea 	bl	8008088 <_free_r>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	6363      	str	r3, [r4, #52]	@ 0x34
 8009eb8:	e00d      	b.n	8009ed6 <__sflush_r+0xae>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	47b0      	blx	r6
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	1c50      	adds	r0, r2, #1
 8009ec4:	d1c9      	bne.n	8009e5a <__sflush_r+0x32>
 8009ec6:	682b      	ldr	r3, [r5, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d0c6      	beq.n	8009e5a <__sflush_r+0x32>
 8009ecc:	2b1d      	cmp	r3, #29
 8009ece:	d001      	beq.n	8009ed4 <__sflush_r+0xac>
 8009ed0:	2b16      	cmp	r3, #22
 8009ed2:	d11e      	bne.n	8009f12 <__sflush_r+0xea>
 8009ed4:	602f      	str	r7, [r5, #0]
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	e022      	b.n	8009f20 <__sflush_r+0xf8>
 8009eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ede:	b21b      	sxth	r3, r3
 8009ee0:	e01b      	b.n	8009f1a <__sflush_r+0xf2>
 8009ee2:	690f      	ldr	r7, [r1, #16]
 8009ee4:	2f00      	cmp	r7, #0
 8009ee6:	d0f6      	beq.n	8009ed6 <__sflush_r+0xae>
 8009ee8:	0793      	lsls	r3, r2, #30
 8009eea:	680e      	ldr	r6, [r1, #0]
 8009eec:	bf08      	it	eq
 8009eee:	694b      	ldreq	r3, [r1, #20]
 8009ef0:	600f      	str	r7, [r1, #0]
 8009ef2:	bf18      	it	ne
 8009ef4:	2300      	movne	r3, #0
 8009ef6:	eba6 0807 	sub.w	r8, r6, r7
 8009efa:	608b      	str	r3, [r1, #8]
 8009efc:	f1b8 0f00 	cmp.w	r8, #0
 8009f00:	dde9      	ble.n	8009ed6 <__sflush_r+0xae>
 8009f02:	6a21      	ldr	r1, [r4, #32]
 8009f04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009f06:	4643      	mov	r3, r8
 8009f08:	463a      	mov	r2, r7
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	47b0      	blx	r6
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	dc08      	bgt.n	8009f24 <__sflush_r+0xfc>
 8009f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f1a:	81a3      	strh	r3, [r4, #12]
 8009f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f24:	4407      	add	r7, r0
 8009f26:	eba8 0800 	sub.w	r8, r8, r0
 8009f2a:	e7e7      	b.n	8009efc <__sflush_r+0xd4>
 8009f2c:	dfbffffe 	.word	0xdfbffffe

08009f30 <_fflush_r>:
 8009f30:	b538      	push	{r3, r4, r5, lr}
 8009f32:	690b      	ldr	r3, [r1, #16]
 8009f34:	4605      	mov	r5, r0
 8009f36:	460c      	mov	r4, r1
 8009f38:	b913      	cbnz	r3, 8009f40 <_fflush_r+0x10>
 8009f3a:	2500      	movs	r5, #0
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	bd38      	pop	{r3, r4, r5, pc}
 8009f40:	b118      	cbz	r0, 8009f4a <_fflush_r+0x1a>
 8009f42:	6a03      	ldr	r3, [r0, #32]
 8009f44:	b90b      	cbnz	r3, 8009f4a <_fflush_r+0x1a>
 8009f46:	f7fd f811 	bl	8006f6c <__sinit>
 8009f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d0f3      	beq.n	8009f3a <_fflush_r+0xa>
 8009f52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f54:	07d0      	lsls	r0, r2, #31
 8009f56:	d404      	bmi.n	8009f62 <_fflush_r+0x32>
 8009f58:	0599      	lsls	r1, r3, #22
 8009f5a:	d402      	bmi.n	8009f62 <_fflush_r+0x32>
 8009f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f5e:	f7fd fa20 	bl	80073a2 <__retarget_lock_acquire_recursive>
 8009f62:	4628      	mov	r0, r5
 8009f64:	4621      	mov	r1, r4
 8009f66:	f7ff ff5f 	bl	8009e28 <__sflush_r>
 8009f6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f6c:	07da      	lsls	r2, r3, #31
 8009f6e:	4605      	mov	r5, r0
 8009f70:	d4e4      	bmi.n	8009f3c <_fflush_r+0xc>
 8009f72:	89a3      	ldrh	r3, [r4, #12]
 8009f74:	059b      	lsls	r3, r3, #22
 8009f76:	d4e1      	bmi.n	8009f3c <_fflush_r+0xc>
 8009f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f7a:	f7fd fa13 	bl	80073a4 <__retarget_lock_release_recursive>
 8009f7e:	e7dd      	b.n	8009f3c <_fflush_r+0xc>

08009f80 <fiprintf>:
 8009f80:	b40e      	push	{r1, r2, r3}
 8009f82:	b503      	push	{r0, r1, lr}
 8009f84:	4601      	mov	r1, r0
 8009f86:	ab03      	add	r3, sp, #12
 8009f88:	4805      	ldr	r0, [pc, #20]	@ (8009fa0 <fiprintf+0x20>)
 8009f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f8e:	6800      	ldr	r0, [r0, #0]
 8009f90:	9301      	str	r3, [sp, #4]
 8009f92:	f7ff fe31 	bl	8009bf8 <_vfiprintf_r>
 8009f96:	b002      	add	sp, #8
 8009f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f9c:	b003      	add	sp, #12
 8009f9e:	4770      	bx	lr
 8009fa0:	2000003c 	.word	0x2000003c

08009fa4 <__swhatbuf_r>:
 8009fa4:	b570      	push	{r4, r5, r6, lr}
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fac:	2900      	cmp	r1, #0
 8009fae:	b096      	sub	sp, #88	@ 0x58
 8009fb0:	4615      	mov	r5, r2
 8009fb2:	461e      	mov	r6, r3
 8009fb4:	da0d      	bge.n	8009fd2 <__swhatbuf_r+0x2e>
 8009fb6:	89a3      	ldrh	r3, [r4, #12]
 8009fb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009fbc:	f04f 0100 	mov.w	r1, #0
 8009fc0:	bf14      	ite	ne
 8009fc2:	2340      	movne	r3, #64	@ 0x40
 8009fc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009fc8:	2000      	movs	r0, #0
 8009fca:	6031      	str	r1, [r6, #0]
 8009fcc:	602b      	str	r3, [r5, #0]
 8009fce:	b016      	add	sp, #88	@ 0x58
 8009fd0:	bd70      	pop	{r4, r5, r6, pc}
 8009fd2:	466a      	mov	r2, sp
 8009fd4:	f000 f874 	bl	800a0c0 <_fstat_r>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	dbec      	blt.n	8009fb6 <__swhatbuf_r+0x12>
 8009fdc:	9901      	ldr	r1, [sp, #4]
 8009fde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009fe2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009fe6:	4259      	negs	r1, r3
 8009fe8:	4159      	adcs	r1, r3
 8009fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fee:	e7eb      	b.n	8009fc8 <__swhatbuf_r+0x24>

08009ff0 <__smakebuf_r>:
 8009ff0:	898b      	ldrh	r3, [r1, #12]
 8009ff2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ff4:	079d      	lsls	r5, r3, #30
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	460c      	mov	r4, r1
 8009ffa:	d507      	bpl.n	800a00c <__smakebuf_r+0x1c>
 8009ffc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	6123      	str	r3, [r4, #16]
 800a004:	2301      	movs	r3, #1
 800a006:	6163      	str	r3, [r4, #20]
 800a008:	b003      	add	sp, #12
 800a00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a00c:	ab01      	add	r3, sp, #4
 800a00e:	466a      	mov	r2, sp
 800a010:	f7ff ffc8 	bl	8009fa4 <__swhatbuf_r>
 800a014:	9f00      	ldr	r7, [sp, #0]
 800a016:	4605      	mov	r5, r0
 800a018:	4639      	mov	r1, r7
 800a01a:	4630      	mov	r0, r6
 800a01c:	f7fe f8a8 	bl	8008170 <_malloc_r>
 800a020:	b948      	cbnz	r0, 800a036 <__smakebuf_r+0x46>
 800a022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a026:	059a      	lsls	r2, r3, #22
 800a028:	d4ee      	bmi.n	800a008 <__smakebuf_r+0x18>
 800a02a:	f023 0303 	bic.w	r3, r3, #3
 800a02e:	f043 0302 	orr.w	r3, r3, #2
 800a032:	81a3      	strh	r3, [r4, #12]
 800a034:	e7e2      	b.n	8009ffc <__smakebuf_r+0xc>
 800a036:	89a3      	ldrh	r3, [r4, #12]
 800a038:	6020      	str	r0, [r4, #0]
 800a03a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a03e:	81a3      	strh	r3, [r4, #12]
 800a040:	9b01      	ldr	r3, [sp, #4]
 800a042:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a046:	b15b      	cbz	r3, 800a060 <__smakebuf_r+0x70>
 800a048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a04c:	4630      	mov	r0, r6
 800a04e:	f000 f849 	bl	800a0e4 <_isatty_r>
 800a052:	b128      	cbz	r0, 800a060 <__smakebuf_r+0x70>
 800a054:	89a3      	ldrh	r3, [r4, #12]
 800a056:	f023 0303 	bic.w	r3, r3, #3
 800a05a:	f043 0301 	orr.w	r3, r3, #1
 800a05e:	81a3      	strh	r3, [r4, #12]
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	431d      	orrs	r5, r3
 800a064:	81a5      	strh	r5, [r4, #12]
 800a066:	e7cf      	b.n	800a008 <__smakebuf_r+0x18>

0800a068 <memmove>:
 800a068:	4288      	cmp	r0, r1
 800a06a:	b510      	push	{r4, lr}
 800a06c:	eb01 0402 	add.w	r4, r1, r2
 800a070:	d902      	bls.n	800a078 <memmove+0x10>
 800a072:	4284      	cmp	r4, r0
 800a074:	4623      	mov	r3, r4
 800a076:	d807      	bhi.n	800a088 <memmove+0x20>
 800a078:	1e43      	subs	r3, r0, #1
 800a07a:	42a1      	cmp	r1, r4
 800a07c:	d008      	beq.n	800a090 <memmove+0x28>
 800a07e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a082:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a086:	e7f8      	b.n	800a07a <memmove+0x12>
 800a088:	4402      	add	r2, r0
 800a08a:	4601      	mov	r1, r0
 800a08c:	428a      	cmp	r2, r1
 800a08e:	d100      	bne.n	800a092 <memmove+0x2a>
 800a090:	bd10      	pop	{r4, pc}
 800a092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a09a:	e7f7      	b.n	800a08c <memmove+0x24>

0800a09c <strncmp>:
 800a09c:	b510      	push	{r4, lr}
 800a09e:	b16a      	cbz	r2, 800a0bc <strncmp+0x20>
 800a0a0:	3901      	subs	r1, #1
 800a0a2:	1884      	adds	r4, r0, r2
 800a0a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d103      	bne.n	800a0b8 <strncmp+0x1c>
 800a0b0:	42a0      	cmp	r0, r4
 800a0b2:	d001      	beq.n	800a0b8 <strncmp+0x1c>
 800a0b4:	2a00      	cmp	r2, #0
 800a0b6:	d1f5      	bne.n	800a0a4 <strncmp+0x8>
 800a0b8:	1ad0      	subs	r0, r2, r3
 800a0ba:	bd10      	pop	{r4, pc}
 800a0bc:	4610      	mov	r0, r2
 800a0be:	e7fc      	b.n	800a0ba <strncmp+0x1e>

0800a0c0 <_fstat_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4d07      	ldr	r5, [pc, #28]	@ (800a0e0 <_fstat_r+0x20>)
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	4608      	mov	r0, r1
 800a0ca:	4611      	mov	r1, r2
 800a0cc:	602b      	str	r3, [r5, #0]
 800a0ce:	f7f7 fe81 	bl	8001dd4 <_fstat>
 800a0d2:	1c43      	adds	r3, r0, #1
 800a0d4:	d102      	bne.n	800a0dc <_fstat_r+0x1c>
 800a0d6:	682b      	ldr	r3, [r5, #0]
 800a0d8:	b103      	cbz	r3, 800a0dc <_fstat_r+0x1c>
 800a0da:	6023      	str	r3, [r4, #0]
 800a0dc:	bd38      	pop	{r3, r4, r5, pc}
 800a0de:	bf00      	nop
 800a0e0:	20007c94 	.word	0x20007c94

0800a0e4 <_isatty_r>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	4d06      	ldr	r5, [pc, #24]	@ (800a100 <_isatty_r+0x1c>)
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	4608      	mov	r0, r1
 800a0ee:	602b      	str	r3, [r5, #0]
 800a0f0:	f7f7 fe80 	bl	8001df4 <_isatty>
 800a0f4:	1c43      	adds	r3, r0, #1
 800a0f6:	d102      	bne.n	800a0fe <_isatty_r+0x1a>
 800a0f8:	682b      	ldr	r3, [r5, #0]
 800a0fa:	b103      	cbz	r3, 800a0fe <_isatty_r+0x1a>
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	bd38      	pop	{r3, r4, r5, pc}
 800a100:	20007c94 	.word	0x20007c94

0800a104 <_sbrk_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4d06      	ldr	r5, [pc, #24]	@ (800a120 <_sbrk_r+0x1c>)
 800a108:	2300      	movs	r3, #0
 800a10a:	4604      	mov	r4, r0
 800a10c:	4608      	mov	r0, r1
 800a10e:	602b      	str	r3, [r5, #0]
 800a110:	f7f7 fe88 	bl	8001e24 <_sbrk>
 800a114:	1c43      	adds	r3, r0, #1
 800a116:	d102      	bne.n	800a11e <_sbrk_r+0x1a>
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	b103      	cbz	r3, 800a11e <_sbrk_r+0x1a>
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	20007c94 	.word	0x20007c94

0800a124 <memcpy>:
 800a124:	440a      	add	r2, r1
 800a126:	4291      	cmp	r1, r2
 800a128:	f100 33ff 	add.w	r3, r0, #4294967295
 800a12c:	d100      	bne.n	800a130 <memcpy+0xc>
 800a12e:	4770      	bx	lr
 800a130:	b510      	push	{r4, lr}
 800a132:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a13a:	4291      	cmp	r1, r2
 800a13c:	d1f9      	bne.n	800a132 <memcpy+0xe>
 800a13e:	bd10      	pop	{r4, pc}

0800a140 <nan>:
 800a140:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a148 <nan+0x8>
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	00000000 	.word	0x00000000
 800a14c:	7ff80000 	.word	0x7ff80000

0800a150 <abort>:
 800a150:	b508      	push	{r3, lr}
 800a152:	2006      	movs	r0, #6
 800a154:	f000 fbc4 	bl	800a8e0 <raise>
 800a158:	2001      	movs	r0, #1
 800a15a:	f7f7 fdeb 	bl	8001d34 <_exit>

0800a15e <_calloc_r>:
 800a15e:	b570      	push	{r4, r5, r6, lr}
 800a160:	fba1 5402 	umull	r5, r4, r1, r2
 800a164:	b93c      	cbnz	r4, 800a176 <_calloc_r+0x18>
 800a166:	4629      	mov	r1, r5
 800a168:	f7fe f802 	bl	8008170 <_malloc_r>
 800a16c:	4606      	mov	r6, r0
 800a16e:	b928      	cbnz	r0, 800a17c <_calloc_r+0x1e>
 800a170:	2600      	movs	r6, #0
 800a172:	4630      	mov	r0, r6
 800a174:	bd70      	pop	{r4, r5, r6, pc}
 800a176:	220c      	movs	r2, #12
 800a178:	6002      	str	r2, [r0, #0]
 800a17a:	e7f9      	b.n	800a170 <_calloc_r+0x12>
 800a17c:	462a      	mov	r2, r5
 800a17e:	4621      	mov	r1, r4
 800a180:	f7fd f892 	bl	80072a8 <memset>
 800a184:	e7f5      	b.n	800a172 <_calloc_r+0x14>

0800a186 <rshift>:
 800a186:	6903      	ldr	r3, [r0, #16]
 800a188:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a18c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a190:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a194:	f100 0414 	add.w	r4, r0, #20
 800a198:	dd45      	ble.n	800a226 <rshift+0xa0>
 800a19a:	f011 011f 	ands.w	r1, r1, #31
 800a19e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a1a2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a1a6:	d10c      	bne.n	800a1c2 <rshift+0x3c>
 800a1a8:	f100 0710 	add.w	r7, r0, #16
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	42b1      	cmp	r1, r6
 800a1b0:	d334      	bcc.n	800a21c <rshift+0x96>
 800a1b2:	1a9b      	subs	r3, r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	1eea      	subs	r2, r5, #3
 800a1b8:	4296      	cmp	r6, r2
 800a1ba:	bf38      	it	cc
 800a1bc:	2300      	movcc	r3, #0
 800a1be:	4423      	add	r3, r4
 800a1c0:	e015      	b.n	800a1ee <rshift+0x68>
 800a1c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a1c6:	f1c1 0820 	rsb	r8, r1, #32
 800a1ca:	40cf      	lsrs	r7, r1
 800a1cc:	f105 0e04 	add.w	lr, r5, #4
 800a1d0:	46a1      	mov	r9, r4
 800a1d2:	4576      	cmp	r6, lr
 800a1d4:	46f4      	mov	ip, lr
 800a1d6:	d815      	bhi.n	800a204 <rshift+0x7e>
 800a1d8:	1a9a      	subs	r2, r3, r2
 800a1da:	0092      	lsls	r2, r2, #2
 800a1dc:	3a04      	subs	r2, #4
 800a1de:	3501      	adds	r5, #1
 800a1e0:	42ae      	cmp	r6, r5
 800a1e2:	bf38      	it	cc
 800a1e4:	2200      	movcc	r2, #0
 800a1e6:	18a3      	adds	r3, r4, r2
 800a1e8:	50a7      	str	r7, [r4, r2]
 800a1ea:	b107      	cbz	r7, 800a1ee <rshift+0x68>
 800a1ec:	3304      	adds	r3, #4
 800a1ee:	1b1a      	subs	r2, r3, r4
 800a1f0:	42a3      	cmp	r3, r4
 800a1f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a1f6:	bf08      	it	eq
 800a1f8:	2300      	moveq	r3, #0
 800a1fa:	6102      	str	r2, [r0, #16]
 800a1fc:	bf08      	it	eq
 800a1fe:	6143      	streq	r3, [r0, #20]
 800a200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a204:	f8dc c000 	ldr.w	ip, [ip]
 800a208:	fa0c fc08 	lsl.w	ip, ip, r8
 800a20c:	ea4c 0707 	orr.w	r7, ip, r7
 800a210:	f849 7b04 	str.w	r7, [r9], #4
 800a214:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a218:	40cf      	lsrs	r7, r1
 800a21a:	e7da      	b.n	800a1d2 <rshift+0x4c>
 800a21c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a220:	f847 cf04 	str.w	ip, [r7, #4]!
 800a224:	e7c3      	b.n	800a1ae <rshift+0x28>
 800a226:	4623      	mov	r3, r4
 800a228:	e7e1      	b.n	800a1ee <rshift+0x68>

0800a22a <__hexdig_fun>:
 800a22a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a22e:	2b09      	cmp	r3, #9
 800a230:	d802      	bhi.n	800a238 <__hexdig_fun+0xe>
 800a232:	3820      	subs	r0, #32
 800a234:	b2c0      	uxtb	r0, r0
 800a236:	4770      	bx	lr
 800a238:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a23c:	2b05      	cmp	r3, #5
 800a23e:	d801      	bhi.n	800a244 <__hexdig_fun+0x1a>
 800a240:	3847      	subs	r0, #71	@ 0x47
 800a242:	e7f7      	b.n	800a234 <__hexdig_fun+0xa>
 800a244:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a248:	2b05      	cmp	r3, #5
 800a24a:	d801      	bhi.n	800a250 <__hexdig_fun+0x26>
 800a24c:	3827      	subs	r0, #39	@ 0x27
 800a24e:	e7f1      	b.n	800a234 <__hexdig_fun+0xa>
 800a250:	2000      	movs	r0, #0
 800a252:	4770      	bx	lr

0800a254 <__gethex>:
 800a254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a258:	b085      	sub	sp, #20
 800a25a:	468a      	mov	sl, r1
 800a25c:	9302      	str	r3, [sp, #8]
 800a25e:	680b      	ldr	r3, [r1, #0]
 800a260:	9001      	str	r0, [sp, #4]
 800a262:	4690      	mov	r8, r2
 800a264:	1c9c      	adds	r4, r3, #2
 800a266:	46a1      	mov	r9, r4
 800a268:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a26c:	2830      	cmp	r0, #48	@ 0x30
 800a26e:	d0fa      	beq.n	800a266 <__gethex+0x12>
 800a270:	eba9 0303 	sub.w	r3, r9, r3
 800a274:	f1a3 0b02 	sub.w	fp, r3, #2
 800a278:	f7ff ffd7 	bl	800a22a <__hexdig_fun>
 800a27c:	4605      	mov	r5, r0
 800a27e:	2800      	cmp	r0, #0
 800a280:	d168      	bne.n	800a354 <__gethex+0x100>
 800a282:	49a0      	ldr	r1, [pc, #640]	@ (800a504 <__gethex+0x2b0>)
 800a284:	2201      	movs	r2, #1
 800a286:	4648      	mov	r0, r9
 800a288:	f7ff ff08 	bl	800a09c <strncmp>
 800a28c:	4607      	mov	r7, r0
 800a28e:	2800      	cmp	r0, #0
 800a290:	d167      	bne.n	800a362 <__gethex+0x10e>
 800a292:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a296:	4626      	mov	r6, r4
 800a298:	f7ff ffc7 	bl	800a22a <__hexdig_fun>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d062      	beq.n	800a366 <__gethex+0x112>
 800a2a0:	4623      	mov	r3, r4
 800a2a2:	7818      	ldrb	r0, [r3, #0]
 800a2a4:	2830      	cmp	r0, #48	@ 0x30
 800a2a6:	4699      	mov	r9, r3
 800a2a8:	f103 0301 	add.w	r3, r3, #1
 800a2ac:	d0f9      	beq.n	800a2a2 <__gethex+0x4e>
 800a2ae:	f7ff ffbc 	bl	800a22a <__hexdig_fun>
 800a2b2:	fab0 f580 	clz	r5, r0
 800a2b6:	096d      	lsrs	r5, r5, #5
 800a2b8:	f04f 0b01 	mov.w	fp, #1
 800a2bc:	464a      	mov	r2, r9
 800a2be:	4616      	mov	r6, r2
 800a2c0:	3201      	adds	r2, #1
 800a2c2:	7830      	ldrb	r0, [r6, #0]
 800a2c4:	f7ff ffb1 	bl	800a22a <__hexdig_fun>
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	d1f8      	bne.n	800a2be <__gethex+0x6a>
 800a2cc:	498d      	ldr	r1, [pc, #564]	@ (800a504 <__gethex+0x2b0>)
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f7ff fee3 	bl	800a09c <strncmp>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d13f      	bne.n	800a35a <__gethex+0x106>
 800a2da:	b944      	cbnz	r4, 800a2ee <__gethex+0x9a>
 800a2dc:	1c74      	adds	r4, r6, #1
 800a2de:	4622      	mov	r2, r4
 800a2e0:	4616      	mov	r6, r2
 800a2e2:	3201      	adds	r2, #1
 800a2e4:	7830      	ldrb	r0, [r6, #0]
 800a2e6:	f7ff ffa0 	bl	800a22a <__hexdig_fun>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	d1f8      	bne.n	800a2e0 <__gethex+0x8c>
 800a2ee:	1ba4      	subs	r4, r4, r6
 800a2f0:	00a7      	lsls	r7, r4, #2
 800a2f2:	7833      	ldrb	r3, [r6, #0]
 800a2f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a2f8:	2b50      	cmp	r3, #80	@ 0x50
 800a2fa:	d13e      	bne.n	800a37a <__gethex+0x126>
 800a2fc:	7873      	ldrb	r3, [r6, #1]
 800a2fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800a300:	d033      	beq.n	800a36a <__gethex+0x116>
 800a302:	2b2d      	cmp	r3, #45	@ 0x2d
 800a304:	d034      	beq.n	800a370 <__gethex+0x11c>
 800a306:	1c71      	adds	r1, r6, #1
 800a308:	2400      	movs	r4, #0
 800a30a:	7808      	ldrb	r0, [r1, #0]
 800a30c:	f7ff ff8d 	bl	800a22a <__hexdig_fun>
 800a310:	1e43      	subs	r3, r0, #1
 800a312:	b2db      	uxtb	r3, r3
 800a314:	2b18      	cmp	r3, #24
 800a316:	d830      	bhi.n	800a37a <__gethex+0x126>
 800a318:	f1a0 0210 	sub.w	r2, r0, #16
 800a31c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a320:	f7ff ff83 	bl	800a22a <__hexdig_fun>
 800a324:	f100 3cff 	add.w	ip, r0, #4294967295
 800a328:	fa5f fc8c 	uxtb.w	ip, ip
 800a32c:	f1bc 0f18 	cmp.w	ip, #24
 800a330:	f04f 030a 	mov.w	r3, #10
 800a334:	d91e      	bls.n	800a374 <__gethex+0x120>
 800a336:	b104      	cbz	r4, 800a33a <__gethex+0xe6>
 800a338:	4252      	negs	r2, r2
 800a33a:	4417      	add	r7, r2
 800a33c:	f8ca 1000 	str.w	r1, [sl]
 800a340:	b1ed      	cbz	r5, 800a37e <__gethex+0x12a>
 800a342:	f1bb 0f00 	cmp.w	fp, #0
 800a346:	bf0c      	ite	eq
 800a348:	2506      	moveq	r5, #6
 800a34a:	2500      	movne	r5, #0
 800a34c:	4628      	mov	r0, r5
 800a34e:	b005      	add	sp, #20
 800a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a354:	2500      	movs	r5, #0
 800a356:	462c      	mov	r4, r5
 800a358:	e7b0      	b.n	800a2bc <__gethex+0x68>
 800a35a:	2c00      	cmp	r4, #0
 800a35c:	d1c7      	bne.n	800a2ee <__gethex+0x9a>
 800a35e:	4627      	mov	r7, r4
 800a360:	e7c7      	b.n	800a2f2 <__gethex+0x9e>
 800a362:	464e      	mov	r6, r9
 800a364:	462f      	mov	r7, r5
 800a366:	2501      	movs	r5, #1
 800a368:	e7c3      	b.n	800a2f2 <__gethex+0x9e>
 800a36a:	2400      	movs	r4, #0
 800a36c:	1cb1      	adds	r1, r6, #2
 800a36e:	e7cc      	b.n	800a30a <__gethex+0xb6>
 800a370:	2401      	movs	r4, #1
 800a372:	e7fb      	b.n	800a36c <__gethex+0x118>
 800a374:	fb03 0002 	mla	r0, r3, r2, r0
 800a378:	e7ce      	b.n	800a318 <__gethex+0xc4>
 800a37a:	4631      	mov	r1, r6
 800a37c:	e7de      	b.n	800a33c <__gethex+0xe8>
 800a37e:	eba6 0309 	sub.w	r3, r6, r9
 800a382:	3b01      	subs	r3, #1
 800a384:	4629      	mov	r1, r5
 800a386:	2b07      	cmp	r3, #7
 800a388:	dc0a      	bgt.n	800a3a0 <__gethex+0x14c>
 800a38a:	9801      	ldr	r0, [sp, #4]
 800a38c:	f7fd ff7c 	bl	8008288 <_Balloc>
 800a390:	4604      	mov	r4, r0
 800a392:	b940      	cbnz	r0, 800a3a6 <__gethex+0x152>
 800a394:	4b5c      	ldr	r3, [pc, #368]	@ (800a508 <__gethex+0x2b4>)
 800a396:	4602      	mov	r2, r0
 800a398:	21e4      	movs	r1, #228	@ 0xe4
 800a39a:	485c      	ldr	r0, [pc, #368]	@ (800a50c <__gethex+0x2b8>)
 800a39c:	f7fd f80a 	bl	80073b4 <__assert_func>
 800a3a0:	3101      	adds	r1, #1
 800a3a2:	105b      	asrs	r3, r3, #1
 800a3a4:	e7ef      	b.n	800a386 <__gethex+0x132>
 800a3a6:	f100 0a14 	add.w	sl, r0, #20
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	4655      	mov	r5, sl
 800a3ae:	469b      	mov	fp, r3
 800a3b0:	45b1      	cmp	r9, r6
 800a3b2:	d337      	bcc.n	800a424 <__gethex+0x1d0>
 800a3b4:	f845 bb04 	str.w	fp, [r5], #4
 800a3b8:	eba5 050a 	sub.w	r5, r5, sl
 800a3bc:	10ad      	asrs	r5, r5, #2
 800a3be:	6125      	str	r5, [r4, #16]
 800a3c0:	4658      	mov	r0, fp
 800a3c2:	f7fe f853 	bl	800846c <__hi0bits>
 800a3c6:	016d      	lsls	r5, r5, #5
 800a3c8:	f8d8 6000 	ldr.w	r6, [r8]
 800a3cc:	1a2d      	subs	r5, r5, r0
 800a3ce:	42b5      	cmp	r5, r6
 800a3d0:	dd54      	ble.n	800a47c <__gethex+0x228>
 800a3d2:	1bad      	subs	r5, r5, r6
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f7fe fbe7 	bl	8008baa <__any_on>
 800a3dc:	4681      	mov	r9, r0
 800a3de:	b178      	cbz	r0, 800a400 <__gethex+0x1ac>
 800a3e0:	1e6b      	subs	r3, r5, #1
 800a3e2:	1159      	asrs	r1, r3, #5
 800a3e4:	f003 021f 	and.w	r2, r3, #31
 800a3e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a3ec:	f04f 0901 	mov.w	r9, #1
 800a3f0:	fa09 f202 	lsl.w	r2, r9, r2
 800a3f4:	420a      	tst	r2, r1
 800a3f6:	d003      	beq.n	800a400 <__gethex+0x1ac>
 800a3f8:	454b      	cmp	r3, r9
 800a3fa:	dc36      	bgt.n	800a46a <__gethex+0x216>
 800a3fc:	f04f 0902 	mov.w	r9, #2
 800a400:	4629      	mov	r1, r5
 800a402:	4620      	mov	r0, r4
 800a404:	f7ff febf 	bl	800a186 <rshift>
 800a408:	442f      	add	r7, r5
 800a40a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a40e:	42bb      	cmp	r3, r7
 800a410:	da42      	bge.n	800a498 <__gethex+0x244>
 800a412:	9801      	ldr	r0, [sp, #4]
 800a414:	4621      	mov	r1, r4
 800a416:	f7fd ff77 	bl	8008308 <_Bfree>
 800a41a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a41c:	2300      	movs	r3, #0
 800a41e:	6013      	str	r3, [r2, #0]
 800a420:	25a3      	movs	r5, #163	@ 0xa3
 800a422:	e793      	b.n	800a34c <__gethex+0xf8>
 800a424:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a428:	2a2e      	cmp	r2, #46	@ 0x2e
 800a42a:	d012      	beq.n	800a452 <__gethex+0x1fe>
 800a42c:	2b20      	cmp	r3, #32
 800a42e:	d104      	bne.n	800a43a <__gethex+0x1e6>
 800a430:	f845 bb04 	str.w	fp, [r5], #4
 800a434:	f04f 0b00 	mov.w	fp, #0
 800a438:	465b      	mov	r3, fp
 800a43a:	7830      	ldrb	r0, [r6, #0]
 800a43c:	9303      	str	r3, [sp, #12]
 800a43e:	f7ff fef4 	bl	800a22a <__hexdig_fun>
 800a442:	9b03      	ldr	r3, [sp, #12]
 800a444:	f000 000f 	and.w	r0, r0, #15
 800a448:	4098      	lsls	r0, r3
 800a44a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a44e:	3304      	adds	r3, #4
 800a450:	e7ae      	b.n	800a3b0 <__gethex+0x15c>
 800a452:	45b1      	cmp	r9, r6
 800a454:	d8ea      	bhi.n	800a42c <__gethex+0x1d8>
 800a456:	492b      	ldr	r1, [pc, #172]	@ (800a504 <__gethex+0x2b0>)
 800a458:	9303      	str	r3, [sp, #12]
 800a45a:	2201      	movs	r2, #1
 800a45c:	4630      	mov	r0, r6
 800a45e:	f7ff fe1d 	bl	800a09c <strncmp>
 800a462:	9b03      	ldr	r3, [sp, #12]
 800a464:	2800      	cmp	r0, #0
 800a466:	d1e1      	bne.n	800a42c <__gethex+0x1d8>
 800a468:	e7a2      	b.n	800a3b0 <__gethex+0x15c>
 800a46a:	1ea9      	subs	r1, r5, #2
 800a46c:	4620      	mov	r0, r4
 800a46e:	f7fe fb9c 	bl	8008baa <__any_on>
 800a472:	2800      	cmp	r0, #0
 800a474:	d0c2      	beq.n	800a3fc <__gethex+0x1a8>
 800a476:	f04f 0903 	mov.w	r9, #3
 800a47a:	e7c1      	b.n	800a400 <__gethex+0x1ac>
 800a47c:	da09      	bge.n	800a492 <__gethex+0x23e>
 800a47e:	1b75      	subs	r5, r6, r5
 800a480:	4621      	mov	r1, r4
 800a482:	9801      	ldr	r0, [sp, #4]
 800a484:	462a      	mov	r2, r5
 800a486:	f7fe f957 	bl	8008738 <__lshift>
 800a48a:	1b7f      	subs	r7, r7, r5
 800a48c:	4604      	mov	r4, r0
 800a48e:	f100 0a14 	add.w	sl, r0, #20
 800a492:	f04f 0900 	mov.w	r9, #0
 800a496:	e7b8      	b.n	800a40a <__gethex+0x1b6>
 800a498:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a49c:	42bd      	cmp	r5, r7
 800a49e:	dd6f      	ble.n	800a580 <__gethex+0x32c>
 800a4a0:	1bed      	subs	r5, r5, r7
 800a4a2:	42ae      	cmp	r6, r5
 800a4a4:	dc34      	bgt.n	800a510 <__gethex+0x2bc>
 800a4a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d022      	beq.n	800a4f4 <__gethex+0x2a0>
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	d024      	beq.n	800a4fc <__gethex+0x2a8>
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d115      	bne.n	800a4e2 <__gethex+0x28e>
 800a4b6:	42ae      	cmp	r6, r5
 800a4b8:	d113      	bne.n	800a4e2 <__gethex+0x28e>
 800a4ba:	2e01      	cmp	r6, #1
 800a4bc:	d10b      	bne.n	800a4d6 <__gethex+0x282>
 800a4be:	9a02      	ldr	r2, [sp, #8]
 800a4c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a4c4:	6013      	str	r3, [r2, #0]
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	6123      	str	r3, [r4, #16]
 800a4ca:	f8ca 3000 	str.w	r3, [sl]
 800a4ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4d0:	2562      	movs	r5, #98	@ 0x62
 800a4d2:	601c      	str	r4, [r3, #0]
 800a4d4:	e73a      	b.n	800a34c <__gethex+0xf8>
 800a4d6:	1e71      	subs	r1, r6, #1
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f7fe fb66 	bl	8008baa <__any_on>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d1ed      	bne.n	800a4be <__gethex+0x26a>
 800a4e2:	9801      	ldr	r0, [sp, #4]
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	f7fd ff0f 	bl	8008308 <_Bfree>
 800a4ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	6013      	str	r3, [r2, #0]
 800a4f0:	2550      	movs	r5, #80	@ 0x50
 800a4f2:	e72b      	b.n	800a34c <__gethex+0xf8>
 800a4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1f3      	bne.n	800a4e2 <__gethex+0x28e>
 800a4fa:	e7e0      	b.n	800a4be <__gethex+0x26a>
 800a4fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1dd      	bne.n	800a4be <__gethex+0x26a>
 800a502:	e7ee      	b.n	800a4e2 <__gethex+0x28e>
 800a504:	08017588 	.word	0x08017588
 800a508:	08017421 	.word	0x08017421
 800a50c:	080176fa 	.word	0x080176fa
 800a510:	1e6f      	subs	r7, r5, #1
 800a512:	f1b9 0f00 	cmp.w	r9, #0
 800a516:	d130      	bne.n	800a57a <__gethex+0x326>
 800a518:	b127      	cbz	r7, 800a524 <__gethex+0x2d0>
 800a51a:	4639      	mov	r1, r7
 800a51c:	4620      	mov	r0, r4
 800a51e:	f7fe fb44 	bl	8008baa <__any_on>
 800a522:	4681      	mov	r9, r0
 800a524:	117a      	asrs	r2, r7, #5
 800a526:	2301      	movs	r3, #1
 800a528:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a52c:	f007 071f 	and.w	r7, r7, #31
 800a530:	40bb      	lsls	r3, r7
 800a532:	4213      	tst	r3, r2
 800a534:	4629      	mov	r1, r5
 800a536:	4620      	mov	r0, r4
 800a538:	bf18      	it	ne
 800a53a:	f049 0902 	orrne.w	r9, r9, #2
 800a53e:	f7ff fe22 	bl	800a186 <rshift>
 800a542:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a546:	1b76      	subs	r6, r6, r5
 800a548:	2502      	movs	r5, #2
 800a54a:	f1b9 0f00 	cmp.w	r9, #0
 800a54e:	d047      	beq.n	800a5e0 <__gethex+0x38c>
 800a550:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a554:	2b02      	cmp	r3, #2
 800a556:	d015      	beq.n	800a584 <__gethex+0x330>
 800a558:	2b03      	cmp	r3, #3
 800a55a:	d017      	beq.n	800a58c <__gethex+0x338>
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d109      	bne.n	800a574 <__gethex+0x320>
 800a560:	f019 0f02 	tst.w	r9, #2
 800a564:	d006      	beq.n	800a574 <__gethex+0x320>
 800a566:	f8da 3000 	ldr.w	r3, [sl]
 800a56a:	ea49 0903 	orr.w	r9, r9, r3
 800a56e:	f019 0f01 	tst.w	r9, #1
 800a572:	d10e      	bne.n	800a592 <__gethex+0x33e>
 800a574:	f045 0510 	orr.w	r5, r5, #16
 800a578:	e032      	b.n	800a5e0 <__gethex+0x38c>
 800a57a:	f04f 0901 	mov.w	r9, #1
 800a57e:	e7d1      	b.n	800a524 <__gethex+0x2d0>
 800a580:	2501      	movs	r5, #1
 800a582:	e7e2      	b.n	800a54a <__gethex+0x2f6>
 800a584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a586:	f1c3 0301 	rsb	r3, r3, #1
 800a58a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a58c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d0f0      	beq.n	800a574 <__gethex+0x320>
 800a592:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a596:	f104 0314 	add.w	r3, r4, #20
 800a59a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a59e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a5a2:	f04f 0c00 	mov.w	ip, #0
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a5b0:	d01b      	beq.n	800a5ea <__gethex+0x396>
 800a5b2:	3201      	adds	r2, #1
 800a5b4:	6002      	str	r2, [r0, #0]
 800a5b6:	2d02      	cmp	r5, #2
 800a5b8:	f104 0314 	add.w	r3, r4, #20
 800a5bc:	d13c      	bne.n	800a638 <__gethex+0x3e4>
 800a5be:	f8d8 2000 	ldr.w	r2, [r8]
 800a5c2:	3a01      	subs	r2, #1
 800a5c4:	42b2      	cmp	r2, r6
 800a5c6:	d109      	bne.n	800a5dc <__gethex+0x388>
 800a5c8:	1171      	asrs	r1, r6, #5
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a5d0:	f006 061f 	and.w	r6, r6, #31
 800a5d4:	fa02 f606 	lsl.w	r6, r2, r6
 800a5d8:	421e      	tst	r6, r3
 800a5da:	d13a      	bne.n	800a652 <__gethex+0x3fe>
 800a5dc:	f045 0520 	orr.w	r5, r5, #32
 800a5e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5e2:	601c      	str	r4, [r3, #0]
 800a5e4:	9b02      	ldr	r3, [sp, #8]
 800a5e6:	601f      	str	r7, [r3, #0]
 800a5e8:	e6b0      	b.n	800a34c <__gethex+0xf8>
 800a5ea:	4299      	cmp	r1, r3
 800a5ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800a5f0:	d8d9      	bhi.n	800a5a6 <__gethex+0x352>
 800a5f2:	68a3      	ldr	r3, [r4, #8]
 800a5f4:	459b      	cmp	fp, r3
 800a5f6:	db17      	blt.n	800a628 <__gethex+0x3d4>
 800a5f8:	6861      	ldr	r1, [r4, #4]
 800a5fa:	9801      	ldr	r0, [sp, #4]
 800a5fc:	3101      	adds	r1, #1
 800a5fe:	f7fd fe43 	bl	8008288 <_Balloc>
 800a602:	4681      	mov	r9, r0
 800a604:	b918      	cbnz	r0, 800a60e <__gethex+0x3ba>
 800a606:	4b1a      	ldr	r3, [pc, #104]	@ (800a670 <__gethex+0x41c>)
 800a608:	4602      	mov	r2, r0
 800a60a:	2184      	movs	r1, #132	@ 0x84
 800a60c:	e6c5      	b.n	800a39a <__gethex+0x146>
 800a60e:	6922      	ldr	r2, [r4, #16]
 800a610:	3202      	adds	r2, #2
 800a612:	f104 010c 	add.w	r1, r4, #12
 800a616:	0092      	lsls	r2, r2, #2
 800a618:	300c      	adds	r0, #12
 800a61a:	f7ff fd83 	bl	800a124 <memcpy>
 800a61e:	4621      	mov	r1, r4
 800a620:	9801      	ldr	r0, [sp, #4]
 800a622:	f7fd fe71 	bl	8008308 <_Bfree>
 800a626:	464c      	mov	r4, r9
 800a628:	6923      	ldr	r3, [r4, #16]
 800a62a:	1c5a      	adds	r2, r3, #1
 800a62c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a630:	6122      	str	r2, [r4, #16]
 800a632:	2201      	movs	r2, #1
 800a634:	615a      	str	r2, [r3, #20]
 800a636:	e7be      	b.n	800a5b6 <__gethex+0x362>
 800a638:	6922      	ldr	r2, [r4, #16]
 800a63a:	455a      	cmp	r2, fp
 800a63c:	dd0b      	ble.n	800a656 <__gethex+0x402>
 800a63e:	2101      	movs	r1, #1
 800a640:	4620      	mov	r0, r4
 800a642:	f7ff fda0 	bl	800a186 <rshift>
 800a646:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a64a:	3701      	adds	r7, #1
 800a64c:	42bb      	cmp	r3, r7
 800a64e:	f6ff aee0 	blt.w	800a412 <__gethex+0x1be>
 800a652:	2501      	movs	r5, #1
 800a654:	e7c2      	b.n	800a5dc <__gethex+0x388>
 800a656:	f016 061f 	ands.w	r6, r6, #31
 800a65a:	d0fa      	beq.n	800a652 <__gethex+0x3fe>
 800a65c:	4453      	add	r3, sl
 800a65e:	f1c6 0620 	rsb	r6, r6, #32
 800a662:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a666:	f7fd ff01 	bl	800846c <__hi0bits>
 800a66a:	42b0      	cmp	r0, r6
 800a66c:	dbe7      	blt.n	800a63e <__gethex+0x3ea>
 800a66e:	e7f0      	b.n	800a652 <__gethex+0x3fe>
 800a670:	08017421 	.word	0x08017421

0800a674 <L_shift>:
 800a674:	f1c2 0208 	rsb	r2, r2, #8
 800a678:	0092      	lsls	r2, r2, #2
 800a67a:	b570      	push	{r4, r5, r6, lr}
 800a67c:	f1c2 0620 	rsb	r6, r2, #32
 800a680:	6843      	ldr	r3, [r0, #4]
 800a682:	6804      	ldr	r4, [r0, #0]
 800a684:	fa03 f506 	lsl.w	r5, r3, r6
 800a688:	432c      	orrs	r4, r5
 800a68a:	40d3      	lsrs	r3, r2
 800a68c:	6004      	str	r4, [r0, #0]
 800a68e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a692:	4288      	cmp	r0, r1
 800a694:	d3f4      	bcc.n	800a680 <L_shift+0xc>
 800a696:	bd70      	pop	{r4, r5, r6, pc}

0800a698 <__match>:
 800a698:	b530      	push	{r4, r5, lr}
 800a69a:	6803      	ldr	r3, [r0, #0]
 800a69c:	3301      	adds	r3, #1
 800a69e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6a2:	b914      	cbnz	r4, 800a6aa <__match+0x12>
 800a6a4:	6003      	str	r3, [r0, #0]
 800a6a6:	2001      	movs	r0, #1
 800a6a8:	bd30      	pop	{r4, r5, pc}
 800a6aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a6b2:	2d19      	cmp	r5, #25
 800a6b4:	bf98      	it	ls
 800a6b6:	3220      	addls	r2, #32
 800a6b8:	42a2      	cmp	r2, r4
 800a6ba:	d0f0      	beq.n	800a69e <__match+0x6>
 800a6bc:	2000      	movs	r0, #0
 800a6be:	e7f3      	b.n	800a6a8 <__match+0x10>

0800a6c0 <__hexnan>:
 800a6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c4:	680b      	ldr	r3, [r1, #0]
 800a6c6:	6801      	ldr	r1, [r0, #0]
 800a6c8:	115e      	asrs	r6, r3, #5
 800a6ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a6ce:	f013 031f 	ands.w	r3, r3, #31
 800a6d2:	b087      	sub	sp, #28
 800a6d4:	bf18      	it	ne
 800a6d6:	3604      	addne	r6, #4
 800a6d8:	2500      	movs	r5, #0
 800a6da:	1f37      	subs	r7, r6, #4
 800a6dc:	4682      	mov	sl, r0
 800a6de:	4690      	mov	r8, r2
 800a6e0:	9301      	str	r3, [sp, #4]
 800a6e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a6e6:	46b9      	mov	r9, r7
 800a6e8:	463c      	mov	r4, r7
 800a6ea:	9502      	str	r5, [sp, #8]
 800a6ec:	46ab      	mov	fp, r5
 800a6ee:	784a      	ldrb	r2, [r1, #1]
 800a6f0:	1c4b      	adds	r3, r1, #1
 800a6f2:	9303      	str	r3, [sp, #12]
 800a6f4:	b342      	cbz	r2, 800a748 <__hexnan+0x88>
 800a6f6:	4610      	mov	r0, r2
 800a6f8:	9105      	str	r1, [sp, #20]
 800a6fa:	9204      	str	r2, [sp, #16]
 800a6fc:	f7ff fd95 	bl	800a22a <__hexdig_fun>
 800a700:	2800      	cmp	r0, #0
 800a702:	d151      	bne.n	800a7a8 <__hexnan+0xe8>
 800a704:	9a04      	ldr	r2, [sp, #16]
 800a706:	9905      	ldr	r1, [sp, #20]
 800a708:	2a20      	cmp	r2, #32
 800a70a:	d818      	bhi.n	800a73e <__hexnan+0x7e>
 800a70c:	9b02      	ldr	r3, [sp, #8]
 800a70e:	459b      	cmp	fp, r3
 800a710:	dd13      	ble.n	800a73a <__hexnan+0x7a>
 800a712:	454c      	cmp	r4, r9
 800a714:	d206      	bcs.n	800a724 <__hexnan+0x64>
 800a716:	2d07      	cmp	r5, #7
 800a718:	dc04      	bgt.n	800a724 <__hexnan+0x64>
 800a71a:	462a      	mov	r2, r5
 800a71c:	4649      	mov	r1, r9
 800a71e:	4620      	mov	r0, r4
 800a720:	f7ff ffa8 	bl	800a674 <L_shift>
 800a724:	4544      	cmp	r4, r8
 800a726:	d952      	bls.n	800a7ce <__hexnan+0x10e>
 800a728:	2300      	movs	r3, #0
 800a72a:	f1a4 0904 	sub.w	r9, r4, #4
 800a72e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a732:	f8cd b008 	str.w	fp, [sp, #8]
 800a736:	464c      	mov	r4, r9
 800a738:	461d      	mov	r5, r3
 800a73a:	9903      	ldr	r1, [sp, #12]
 800a73c:	e7d7      	b.n	800a6ee <__hexnan+0x2e>
 800a73e:	2a29      	cmp	r2, #41	@ 0x29
 800a740:	d157      	bne.n	800a7f2 <__hexnan+0x132>
 800a742:	3102      	adds	r1, #2
 800a744:	f8ca 1000 	str.w	r1, [sl]
 800a748:	f1bb 0f00 	cmp.w	fp, #0
 800a74c:	d051      	beq.n	800a7f2 <__hexnan+0x132>
 800a74e:	454c      	cmp	r4, r9
 800a750:	d206      	bcs.n	800a760 <__hexnan+0xa0>
 800a752:	2d07      	cmp	r5, #7
 800a754:	dc04      	bgt.n	800a760 <__hexnan+0xa0>
 800a756:	462a      	mov	r2, r5
 800a758:	4649      	mov	r1, r9
 800a75a:	4620      	mov	r0, r4
 800a75c:	f7ff ff8a 	bl	800a674 <L_shift>
 800a760:	4544      	cmp	r4, r8
 800a762:	d936      	bls.n	800a7d2 <__hexnan+0x112>
 800a764:	f1a8 0204 	sub.w	r2, r8, #4
 800a768:	4623      	mov	r3, r4
 800a76a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a76e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a772:	429f      	cmp	r7, r3
 800a774:	d2f9      	bcs.n	800a76a <__hexnan+0xaa>
 800a776:	1b3b      	subs	r3, r7, r4
 800a778:	f023 0303 	bic.w	r3, r3, #3
 800a77c:	3304      	adds	r3, #4
 800a77e:	3401      	adds	r4, #1
 800a780:	3e03      	subs	r6, #3
 800a782:	42b4      	cmp	r4, r6
 800a784:	bf88      	it	hi
 800a786:	2304      	movhi	r3, #4
 800a788:	4443      	add	r3, r8
 800a78a:	2200      	movs	r2, #0
 800a78c:	f843 2b04 	str.w	r2, [r3], #4
 800a790:	429f      	cmp	r7, r3
 800a792:	d2fb      	bcs.n	800a78c <__hexnan+0xcc>
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	b91b      	cbnz	r3, 800a7a0 <__hexnan+0xe0>
 800a798:	4547      	cmp	r7, r8
 800a79a:	d128      	bne.n	800a7ee <__hexnan+0x12e>
 800a79c:	2301      	movs	r3, #1
 800a79e:	603b      	str	r3, [r7, #0]
 800a7a0:	2005      	movs	r0, #5
 800a7a2:	b007      	add	sp, #28
 800a7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a8:	3501      	adds	r5, #1
 800a7aa:	2d08      	cmp	r5, #8
 800a7ac:	f10b 0b01 	add.w	fp, fp, #1
 800a7b0:	dd06      	ble.n	800a7c0 <__hexnan+0x100>
 800a7b2:	4544      	cmp	r4, r8
 800a7b4:	d9c1      	bls.n	800a73a <__hexnan+0x7a>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7bc:	2501      	movs	r5, #1
 800a7be:	3c04      	subs	r4, #4
 800a7c0:	6822      	ldr	r2, [r4, #0]
 800a7c2:	f000 000f 	and.w	r0, r0, #15
 800a7c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a7ca:	6020      	str	r0, [r4, #0]
 800a7cc:	e7b5      	b.n	800a73a <__hexnan+0x7a>
 800a7ce:	2508      	movs	r5, #8
 800a7d0:	e7b3      	b.n	800a73a <__hexnan+0x7a>
 800a7d2:	9b01      	ldr	r3, [sp, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d0dd      	beq.n	800a794 <__hexnan+0xd4>
 800a7d8:	f1c3 0320 	rsb	r3, r3, #32
 800a7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e0:	40da      	lsrs	r2, r3
 800a7e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a7ec:	e7d2      	b.n	800a794 <__hexnan+0xd4>
 800a7ee:	3f04      	subs	r7, #4
 800a7f0:	e7d0      	b.n	800a794 <__hexnan+0xd4>
 800a7f2:	2004      	movs	r0, #4
 800a7f4:	e7d5      	b.n	800a7a2 <__hexnan+0xe2>

0800a7f6 <__ascii_mbtowc>:
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	b901      	cbnz	r1, 800a7fc <__ascii_mbtowc+0x6>
 800a7fa:	a901      	add	r1, sp, #4
 800a7fc:	b142      	cbz	r2, 800a810 <__ascii_mbtowc+0x1a>
 800a7fe:	b14b      	cbz	r3, 800a814 <__ascii_mbtowc+0x1e>
 800a800:	7813      	ldrb	r3, [r2, #0]
 800a802:	600b      	str	r3, [r1, #0]
 800a804:	7812      	ldrb	r2, [r2, #0]
 800a806:	1e10      	subs	r0, r2, #0
 800a808:	bf18      	it	ne
 800a80a:	2001      	movne	r0, #1
 800a80c:	b002      	add	sp, #8
 800a80e:	4770      	bx	lr
 800a810:	4610      	mov	r0, r2
 800a812:	e7fb      	b.n	800a80c <__ascii_mbtowc+0x16>
 800a814:	f06f 0001 	mvn.w	r0, #1
 800a818:	e7f8      	b.n	800a80c <__ascii_mbtowc+0x16>

0800a81a <_realloc_r>:
 800a81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a81e:	4680      	mov	r8, r0
 800a820:	4615      	mov	r5, r2
 800a822:	460c      	mov	r4, r1
 800a824:	b921      	cbnz	r1, 800a830 <_realloc_r+0x16>
 800a826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a82a:	4611      	mov	r1, r2
 800a82c:	f7fd bca0 	b.w	8008170 <_malloc_r>
 800a830:	b92a      	cbnz	r2, 800a83e <_realloc_r+0x24>
 800a832:	f7fd fc29 	bl	8008088 <_free_r>
 800a836:	2400      	movs	r4, #0
 800a838:	4620      	mov	r0, r4
 800a83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a83e:	f000 f86b 	bl	800a918 <_malloc_usable_size_r>
 800a842:	4285      	cmp	r5, r0
 800a844:	4606      	mov	r6, r0
 800a846:	d802      	bhi.n	800a84e <_realloc_r+0x34>
 800a848:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a84c:	d8f4      	bhi.n	800a838 <_realloc_r+0x1e>
 800a84e:	4629      	mov	r1, r5
 800a850:	4640      	mov	r0, r8
 800a852:	f7fd fc8d 	bl	8008170 <_malloc_r>
 800a856:	4607      	mov	r7, r0
 800a858:	2800      	cmp	r0, #0
 800a85a:	d0ec      	beq.n	800a836 <_realloc_r+0x1c>
 800a85c:	42b5      	cmp	r5, r6
 800a85e:	462a      	mov	r2, r5
 800a860:	4621      	mov	r1, r4
 800a862:	bf28      	it	cs
 800a864:	4632      	movcs	r2, r6
 800a866:	f7ff fc5d 	bl	800a124 <memcpy>
 800a86a:	4621      	mov	r1, r4
 800a86c:	4640      	mov	r0, r8
 800a86e:	f7fd fc0b 	bl	8008088 <_free_r>
 800a872:	463c      	mov	r4, r7
 800a874:	e7e0      	b.n	800a838 <_realloc_r+0x1e>

0800a876 <__ascii_wctomb>:
 800a876:	4603      	mov	r3, r0
 800a878:	4608      	mov	r0, r1
 800a87a:	b141      	cbz	r1, 800a88e <__ascii_wctomb+0x18>
 800a87c:	2aff      	cmp	r2, #255	@ 0xff
 800a87e:	d904      	bls.n	800a88a <__ascii_wctomb+0x14>
 800a880:	228a      	movs	r2, #138	@ 0x8a
 800a882:	601a      	str	r2, [r3, #0]
 800a884:	f04f 30ff 	mov.w	r0, #4294967295
 800a888:	4770      	bx	lr
 800a88a:	700a      	strb	r2, [r1, #0]
 800a88c:	2001      	movs	r0, #1
 800a88e:	4770      	bx	lr

0800a890 <_raise_r>:
 800a890:	291f      	cmp	r1, #31
 800a892:	b538      	push	{r3, r4, r5, lr}
 800a894:	4605      	mov	r5, r0
 800a896:	460c      	mov	r4, r1
 800a898:	d904      	bls.n	800a8a4 <_raise_r+0x14>
 800a89a:	2316      	movs	r3, #22
 800a89c:	6003      	str	r3, [r0, #0]
 800a89e:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a8a6:	b112      	cbz	r2, 800a8ae <_raise_r+0x1e>
 800a8a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8ac:	b94b      	cbnz	r3, 800a8c2 <_raise_r+0x32>
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f000 f830 	bl	800a914 <_getpid_r>
 800a8b4:	4622      	mov	r2, r4
 800a8b6:	4601      	mov	r1, r0
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8be:	f000 b817 	b.w	800a8f0 <_kill_r>
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d00a      	beq.n	800a8dc <_raise_r+0x4c>
 800a8c6:	1c59      	adds	r1, r3, #1
 800a8c8:	d103      	bne.n	800a8d2 <_raise_r+0x42>
 800a8ca:	2316      	movs	r3, #22
 800a8cc:	6003      	str	r3, [r0, #0]
 800a8ce:	2001      	movs	r0, #1
 800a8d0:	e7e7      	b.n	800a8a2 <_raise_r+0x12>
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a8d8:	4620      	mov	r0, r4
 800a8da:	4798      	blx	r3
 800a8dc:	2000      	movs	r0, #0
 800a8de:	e7e0      	b.n	800a8a2 <_raise_r+0x12>

0800a8e0 <raise>:
 800a8e0:	4b02      	ldr	r3, [pc, #8]	@ (800a8ec <raise+0xc>)
 800a8e2:	4601      	mov	r1, r0
 800a8e4:	6818      	ldr	r0, [r3, #0]
 800a8e6:	f7ff bfd3 	b.w	800a890 <_raise_r>
 800a8ea:	bf00      	nop
 800a8ec:	2000003c 	.word	0x2000003c

0800a8f0 <_kill_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4d07      	ldr	r5, [pc, #28]	@ (800a910 <_kill_r+0x20>)
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	4608      	mov	r0, r1
 800a8fa:	4611      	mov	r1, r2
 800a8fc:	602b      	str	r3, [r5, #0]
 800a8fe:	f7f7 fa09 	bl	8001d14 <_kill>
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	d102      	bne.n	800a90c <_kill_r+0x1c>
 800a906:	682b      	ldr	r3, [r5, #0]
 800a908:	b103      	cbz	r3, 800a90c <_kill_r+0x1c>
 800a90a:	6023      	str	r3, [r4, #0]
 800a90c:	bd38      	pop	{r3, r4, r5, pc}
 800a90e:	bf00      	nop
 800a910:	20007c94 	.word	0x20007c94

0800a914 <_getpid_r>:
 800a914:	f7f7 b9f6 	b.w	8001d04 <_getpid>

0800a918 <_malloc_usable_size_r>:
 800a918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a91c:	1f18      	subs	r0, r3, #4
 800a91e:	2b00      	cmp	r3, #0
 800a920:	bfbc      	itt	lt
 800a922:	580b      	ldrlt	r3, [r1, r0]
 800a924:	18c0      	addlt	r0, r0, r3
 800a926:	4770      	bx	lr

0800a928 <asin>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	ed2d 8b02 	vpush	{d8}
 800a92e:	ec55 4b10 	vmov	r4, r5, d0
 800a932:	f000 f93d 	bl	800abb0 <__ieee754_asin>
 800a936:	4622      	mov	r2, r4
 800a938:	462b      	mov	r3, r5
 800a93a:	4620      	mov	r0, r4
 800a93c:	4629      	mov	r1, r5
 800a93e:	eeb0 8a40 	vmov.f32	s16, s0
 800a942:	eef0 8a60 	vmov.f32	s17, s1
 800a946:	f7f6 f8f1 	bl	8000b2c <__aeabi_dcmpun>
 800a94a:	b9a8      	cbnz	r0, 800a978 <asin+0x50>
 800a94c:	ec45 4b10 	vmov	d0, r4, r5
 800a950:	f000 f84a 	bl	800a9e8 <fabs>
 800a954:	4b0c      	ldr	r3, [pc, #48]	@ (800a988 <asin+0x60>)
 800a956:	ec51 0b10 	vmov	r0, r1, d0
 800a95a:	2200      	movs	r2, #0
 800a95c:	f7f6 f8dc 	bl	8000b18 <__aeabi_dcmpgt>
 800a960:	b150      	cbz	r0, 800a978 <asin+0x50>
 800a962:	f7fc fcf3 	bl	800734c <__errno>
 800a966:	ecbd 8b02 	vpop	{d8}
 800a96a:	2321      	movs	r3, #33	@ 0x21
 800a96c:	6003      	str	r3, [r0, #0]
 800a96e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a972:	4806      	ldr	r0, [pc, #24]	@ (800a98c <asin+0x64>)
 800a974:	f7ff bbe4 	b.w	800a140 <nan>
 800a978:	eeb0 0a48 	vmov.f32	s0, s16
 800a97c:	eef0 0a68 	vmov.f32	s1, s17
 800a980:	ecbd 8b02 	vpop	{d8}
 800a984:	bd38      	pop	{r3, r4, r5, pc}
 800a986:	bf00      	nop
 800a988:	3ff00000 	.word	0x3ff00000
 800a98c:	080173bb 	.word	0x080173bb

0800a990 <sqrt>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	ed2d 8b02 	vpush	{d8}
 800a996:	ec55 4b10 	vmov	r4, r5, d0
 800a99a:	f000 f82d 	bl	800a9f8 <__ieee754_sqrt>
 800a99e:	4622      	mov	r2, r4
 800a9a0:	462b      	mov	r3, r5
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	eeb0 8a40 	vmov.f32	s16, s0
 800a9aa:	eef0 8a60 	vmov.f32	s17, s1
 800a9ae:	f7f6 f8bd 	bl	8000b2c <__aeabi_dcmpun>
 800a9b2:	b990      	cbnz	r0, 800a9da <sqrt+0x4a>
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	f7f6 f88e 	bl	8000adc <__aeabi_dcmplt>
 800a9c0:	b158      	cbz	r0, 800a9da <sqrt+0x4a>
 800a9c2:	f7fc fcc3 	bl	800734c <__errno>
 800a9c6:	2321      	movs	r3, #33	@ 0x21
 800a9c8:	6003      	str	r3, [r0, #0]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	f7f5 ff3b 	bl	800084c <__aeabi_ddiv>
 800a9d6:	ec41 0b18 	vmov	d8, r0, r1
 800a9da:	eeb0 0a48 	vmov.f32	s0, s16
 800a9de:	eef0 0a68 	vmov.f32	s1, s17
 800a9e2:	ecbd 8b02 	vpop	{d8}
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}

0800a9e8 <fabs>:
 800a9e8:	ec51 0b10 	vmov	r0, r1, d0
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a9f2:	ec43 2b10 	vmov	d0, r2, r3
 800a9f6:	4770      	bx	lr

0800a9f8 <__ieee754_sqrt>:
 800a9f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fc:	4a68      	ldr	r2, [pc, #416]	@ (800aba0 <__ieee754_sqrt+0x1a8>)
 800a9fe:	ec55 4b10 	vmov	r4, r5, d0
 800aa02:	43aa      	bics	r2, r5
 800aa04:	462b      	mov	r3, r5
 800aa06:	4621      	mov	r1, r4
 800aa08:	d110      	bne.n	800aa2c <__ieee754_sqrt+0x34>
 800aa0a:	4622      	mov	r2, r4
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	4629      	mov	r1, r5
 800aa10:	f7f5 fdf2 	bl	80005f8 <__aeabi_dmul>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	4620      	mov	r0, r4
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	f7f5 fc36 	bl	800028c <__adddf3>
 800aa20:	4604      	mov	r4, r0
 800aa22:	460d      	mov	r5, r1
 800aa24:	ec45 4b10 	vmov	d0, r4, r5
 800aa28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa2c:	2d00      	cmp	r5, #0
 800aa2e:	dc0e      	bgt.n	800aa4e <__ieee754_sqrt+0x56>
 800aa30:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800aa34:	4322      	orrs	r2, r4
 800aa36:	d0f5      	beq.n	800aa24 <__ieee754_sqrt+0x2c>
 800aa38:	b19d      	cbz	r5, 800aa62 <__ieee754_sqrt+0x6a>
 800aa3a:	4622      	mov	r2, r4
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	4629      	mov	r1, r5
 800aa40:	f7f5 fc22 	bl	8000288 <__aeabi_dsub>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	f7f5 ff00 	bl	800084c <__aeabi_ddiv>
 800aa4c:	e7e8      	b.n	800aa20 <__ieee754_sqrt+0x28>
 800aa4e:	152a      	asrs	r2, r5, #20
 800aa50:	d115      	bne.n	800aa7e <__ieee754_sqrt+0x86>
 800aa52:	2000      	movs	r0, #0
 800aa54:	e009      	b.n	800aa6a <__ieee754_sqrt+0x72>
 800aa56:	0acb      	lsrs	r3, r1, #11
 800aa58:	3a15      	subs	r2, #21
 800aa5a:	0549      	lsls	r1, r1, #21
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d0fa      	beq.n	800aa56 <__ieee754_sqrt+0x5e>
 800aa60:	e7f7      	b.n	800aa52 <__ieee754_sqrt+0x5a>
 800aa62:	462a      	mov	r2, r5
 800aa64:	e7fa      	b.n	800aa5c <__ieee754_sqrt+0x64>
 800aa66:	005b      	lsls	r3, r3, #1
 800aa68:	3001      	adds	r0, #1
 800aa6a:	02dc      	lsls	r4, r3, #11
 800aa6c:	d5fb      	bpl.n	800aa66 <__ieee754_sqrt+0x6e>
 800aa6e:	1e44      	subs	r4, r0, #1
 800aa70:	1b12      	subs	r2, r2, r4
 800aa72:	f1c0 0420 	rsb	r4, r0, #32
 800aa76:	fa21 f404 	lsr.w	r4, r1, r4
 800aa7a:	4323      	orrs	r3, r4
 800aa7c:	4081      	lsls	r1, r0
 800aa7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa82:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800aa86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa8a:	07d2      	lsls	r2, r2, #31
 800aa8c:	bf5c      	itt	pl
 800aa8e:	005b      	lslpl	r3, r3, #1
 800aa90:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800aa94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa98:	bf58      	it	pl
 800aa9a:	0049      	lslpl	r1, r1, #1
 800aa9c:	2600      	movs	r6, #0
 800aa9e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800aaa2:	106d      	asrs	r5, r5, #1
 800aaa4:	0049      	lsls	r1, r1, #1
 800aaa6:	2016      	movs	r0, #22
 800aaa8:	4632      	mov	r2, r6
 800aaaa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800aaae:	1917      	adds	r7, r2, r4
 800aab0:	429f      	cmp	r7, r3
 800aab2:	bfde      	ittt	le
 800aab4:	193a      	addle	r2, r7, r4
 800aab6:	1bdb      	suble	r3, r3, r7
 800aab8:	1936      	addle	r6, r6, r4
 800aaba:	0fcf      	lsrs	r7, r1, #31
 800aabc:	3801      	subs	r0, #1
 800aabe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800aac2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aac6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800aaca:	d1f0      	bne.n	800aaae <__ieee754_sqrt+0xb6>
 800aacc:	4604      	mov	r4, r0
 800aace:	2720      	movs	r7, #32
 800aad0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800aad4:	429a      	cmp	r2, r3
 800aad6:	eb00 0e0c 	add.w	lr, r0, ip
 800aada:	db02      	blt.n	800aae2 <__ieee754_sqrt+0xea>
 800aadc:	d113      	bne.n	800ab06 <__ieee754_sqrt+0x10e>
 800aade:	458e      	cmp	lr, r1
 800aae0:	d811      	bhi.n	800ab06 <__ieee754_sqrt+0x10e>
 800aae2:	f1be 0f00 	cmp.w	lr, #0
 800aae6:	eb0e 000c 	add.w	r0, lr, ip
 800aaea:	da42      	bge.n	800ab72 <__ieee754_sqrt+0x17a>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	db40      	blt.n	800ab72 <__ieee754_sqrt+0x17a>
 800aaf0:	f102 0801 	add.w	r8, r2, #1
 800aaf4:	1a9b      	subs	r3, r3, r2
 800aaf6:	458e      	cmp	lr, r1
 800aaf8:	bf88      	it	hi
 800aafa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800aafe:	eba1 010e 	sub.w	r1, r1, lr
 800ab02:	4464      	add	r4, ip
 800ab04:	4642      	mov	r2, r8
 800ab06:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ab0a:	3f01      	subs	r7, #1
 800ab0c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ab10:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ab14:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ab18:	d1dc      	bne.n	800aad4 <__ieee754_sqrt+0xdc>
 800ab1a:	4319      	orrs	r1, r3
 800ab1c:	d01b      	beq.n	800ab56 <__ieee754_sqrt+0x15e>
 800ab1e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800aba4 <__ieee754_sqrt+0x1ac>
 800ab22:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800aba8 <__ieee754_sqrt+0x1b0>
 800ab26:	e9da 0100 	ldrd	r0, r1, [sl]
 800ab2a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ab2e:	f7f5 fbab 	bl	8000288 <__aeabi_dsub>
 800ab32:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab36:	4602      	mov	r2, r0
 800ab38:	460b      	mov	r3, r1
 800ab3a:	4640      	mov	r0, r8
 800ab3c:	4649      	mov	r1, r9
 800ab3e:	f7f5 ffd7 	bl	8000af0 <__aeabi_dcmple>
 800ab42:	b140      	cbz	r0, 800ab56 <__ieee754_sqrt+0x15e>
 800ab44:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ab48:	e9da 0100 	ldrd	r0, r1, [sl]
 800ab4c:	e9db 2300 	ldrd	r2, r3, [fp]
 800ab50:	d111      	bne.n	800ab76 <__ieee754_sqrt+0x17e>
 800ab52:	3601      	adds	r6, #1
 800ab54:	463c      	mov	r4, r7
 800ab56:	1072      	asrs	r2, r6, #1
 800ab58:	0863      	lsrs	r3, r4, #1
 800ab5a:	07f1      	lsls	r1, r6, #31
 800ab5c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ab60:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ab64:	bf48      	it	mi
 800ab66:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ab6a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ab6e:	4618      	mov	r0, r3
 800ab70:	e756      	b.n	800aa20 <__ieee754_sqrt+0x28>
 800ab72:	4690      	mov	r8, r2
 800ab74:	e7be      	b.n	800aaf4 <__ieee754_sqrt+0xfc>
 800ab76:	f7f5 fb89 	bl	800028c <__adddf3>
 800ab7a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab7e:	4602      	mov	r2, r0
 800ab80:	460b      	mov	r3, r1
 800ab82:	4640      	mov	r0, r8
 800ab84:	4649      	mov	r1, r9
 800ab86:	f7f5 ffa9 	bl	8000adc <__aeabi_dcmplt>
 800ab8a:	b120      	cbz	r0, 800ab96 <__ieee754_sqrt+0x19e>
 800ab8c:	1ca0      	adds	r0, r4, #2
 800ab8e:	bf08      	it	eq
 800ab90:	3601      	addeq	r6, #1
 800ab92:	3402      	adds	r4, #2
 800ab94:	e7df      	b.n	800ab56 <__ieee754_sqrt+0x15e>
 800ab96:	1c63      	adds	r3, r4, #1
 800ab98:	f023 0401 	bic.w	r4, r3, #1
 800ab9c:	e7db      	b.n	800ab56 <__ieee754_sqrt+0x15e>
 800ab9e:	bf00      	nop
 800aba0:	7ff00000 	.word	0x7ff00000
 800aba4:	20000200 	.word	0x20000200
 800aba8:	200001f8 	.word	0x200001f8
 800abac:	00000000 	.word	0x00000000

0800abb0 <__ieee754_asin>:
 800abb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb4:	ec55 4b10 	vmov	r4, r5, d0
 800abb8:	4bc7      	ldr	r3, [pc, #796]	@ (800aed8 <__ieee754_asin+0x328>)
 800abba:	b087      	sub	sp, #28
 800abbc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800abc0:	429e      	cmp	r6, r3
 800abc2:	9501      	str	r5, [sp, #4]
 800abc4:	d92d      	bls.n	800ac22 <__ieee754_asin+0x72>
 800abc6:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800abca:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800abce:	4326      	orrs	r6, r4
 800abd0:	d116      	bne.n	800ac00 <__ieee754_asin+0x50>
 800abd2:	a3a7      	add	r3, pc, #668	@ (adr r3, 800ae70 <__ieee754_asin+0x2c0>)
 800abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd8:	4620      	mov	r0, r4
 800abda:	4629      	mov	r1, r5
 800abdc:	f7f5 fd0c 	bl	80005f8 <__aeabi_dmul>
 800abe0:	a3a5      	add	r3, pc, #660	@ (adr r3, 800ae78 <__ieee754_asin+0x2c8>)
 800abe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe6:	4606      	mov	r6, r0
 800abe8:	460f      	mov	r7, r1
 800abea:	4620      	mov	r0, r4
 800abec:	4629      	mov	r1, r5
 800abee:	f7f5 fd03 	bl	80005f8 <__aeabi_dmul>
 800abf2:	4602      	mov	r2, r0
 800abf4:	460b      	mov	r3, r1
 800abf6:	4630      	mov	r0, r6
 800abf8:	4639      	mov	r1, r7
 800abfa:	f7f5 fb47 	bl	800028c <__adddf3>
 800abfe:	e009      	b.n	800ac14 <__ieee754_asin+0x64>
 800ac00:	4622      	mov	r2, r4
 800ac02:	462b      	mov	r3, r5
 800ac04:	4620      	mov	r0, r4
 800ac06:	4629      	mov	r1, r5
 800ac08:	f7f5 fb3e 	bl	8000288 <__aeabi_dsub>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	460b      	mov	r3, r1
 800ac10:	f7f5 fe1c 	bl	800084c <__aeabi_ddiv>
 800ac14:	4604      	mov	r4, r0
 800ac16:	460d      	mov	r5, r1
 800ac18:	ec45 4b10 	vmov	d0, r4, r5
 800ac1c:	b007      	add	sp, #28
 800ac1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac22:	4bae      	ldr	r3, [pc, #696]	@ (800aedc <__ieee754_asin+0x32c>)
 800ac24:	429e      	cmp	r6, r3
 800ac26:	d810      	bhi.n	800ac4a <__ieee754_asin+0x9a>
 800ac28:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800ac2c:	f080 80ad 	bcs.w	800ad8a <__ieee754_asin+0x1da>
 800ac30:	a393      	add	r3, pc, #588	@ (adr r3, 800ae80 <__ieee754_asin+0x2d0>)
 800ac32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac36:	4620      	mov	r0, r4
 800ac38:	4629      	mov	r1, r5
 800ac3a:	f7f5 fb27 	bl	800028c <__adddf3>
 800ac3e:	4ba8      	ldr	r3, [pc, #672]	@ (800aee0 <__ieee754_asin+0x330>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	f7f5 ff69 	bl	8000b18 <__aeabi_dcmpgt>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d1e6      	bne.n	800ac18 <__ieee754_asin+0x68>
 800ac4a:	ec45 4b10 	vmov	d0, r4, r5
 800ac4e:	f7ff fecb 	bl	800a9e8 <fabs>
 800ac52:	49a3      	ldr	r1, [pc, #652]	@ (800aee0 <__ieee754_asin+0x330>)
 800ac54:	ec53 2b10 	vmov	r2, r3, d0
 800ac58:	2000      	movs	r0, #0
 800ac5a:	f7f5 fb15 	bl	8000288 <__aeabi_dsub>
 800ac5e:	4ba1      	ldr	r3, [pc, #644]	@ (800aee4 <__ieee754_asin+0x334>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	f7f5 fcc9 	bl	80005f8 <__aeabi_dmul>
 800ac66:	a388      	add	r3, pc, #544	@ (adr r3, 800ae88 <__ieee754_asin+0x2d8>)
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	460d      	mov	r5, r1
 800ac70:	f7f5 fcc2 	bl	80005f8 <__aeabi_dmul>
 800ac74:	a386      	add	r3, pc, #536	@ (adr r3, 800ae90 <__ieee754_asin+0x2e0>)
 800ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7a:	f7f5 fb07 	bl	800028c <__adddf3>
 800ac7e:	4622      	mov	r2, r4
 800ac80:	462b      	mov	r3, r5
 800ac82:	f7f5 fcb9 	bl	80005f8 <__aeabi_dmul>
 800ac86:	a384      	add	r3, pc, #528	@ (adr r3, 800ae98 <__ieee754_asin+0x2e8>)
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	f7f5 fafc 	bl	8000288 <__aeabi_dsub>
 800ac90:	4622      	mov	r2, r4
 800ac92:	462b      	mov	r3, r5
 800ac94:	f7f5 fcb0 	bl	80005f8 <__aeabi_dmul>
 800ac98:	a381      	add	r3, pc, #516	@ (adr r3, 800aea0 <__ieee754_asin+0x2f0>)
 800ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9e:	f7f5 faf5 	bl	800028c <__adddf3>
 800aca2:	4622      	mov	r2, r4
 800aca4:	462b      	mov	r3, r5
 800aca6:	f7f5 fca7 	bl	80005f8 <__aeabi_dmul>
 800acaa:	a37f      	add	r3, pc, #508	@ (adr r3, 800aea8 <__ieee754_asin+0x2f8>)
 800acac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb0:	f7f5 faea 	bl	8000288 <__aeabi_dsub>
 800acb4:	4622      	mov	r2, r4
 800acb6:	462b      	mov	r3, r5
 800acb8:	f7f5 fc9e 	bl	80005f8 <__aeabi_dmul>
 800acbc:	a37c      	add	r3, pc, #496	@ (adr r3, 800aeb0 <__ieee754_asin+0x300>)
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	f7f5 fae3 	bl	800028c <__adddf3>
 800acc6:	4622      	mov	r2, r4
 800acc8:	462b      	mov	r3, r5
 800acca:	f7f5 fc95 	bl	80005f8 <__aeabi_dmul>
 800acce:	a37a      	add	r3, pc, #488	@ (adr r3, 800aeb8 <__ieee754_asin+0x308>)
 800acd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acd8:	4620      	mov	r0, r4
 800acda:	4629      	mov	r1, r5
 800acdc:	f7f5 fc8c 	bl	80005f8 <__aeabi_dmul>
 800ace0:	a377      	add	r3, pc, #476	@ (adr r3, 800aec0 <__ieee754_asin+0x310>)
 800ace2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace6:	f7f5 facf 	bl	8000288 <__aeabi_dsub>
 800acea:	4622      	mov	r2, r4
 800acec:	462b      	mov	r3, r5
 800acee:	f7f5 fc83 	bl	80005f8 <__aeabi_dmul>
 800acf2:	a375      	add	r3, pc, #468	@ (adr r3, 800aec8 <__ieee754_asin+0x318>)
 800acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf8:	f7f5 fac8 	bl	800028c <__adddf3>
 800acfc:	4622      	mov	r2, r4
 800acfe:	462b      	mov	r3, r5
 800ad00:	f7f5 fc7a 	bl	80005f8 <__aeabi_dmul>
 800ad04:	a372      	add	r3, pc, #456	@ (adr r3, 800aed0 <__ieee754_asin+0x320>)
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	f7f5 fabd 	bl	8000288 <__aeabi_dsub>
 800ad0e:	4622      	mov	r2, r4
 800ad10:	462b      	mov	r3, r5
 800ad12:	f7f5 fc71 	bl	80005f8 <__aeabi_dmul>
 800ad16:	4b72      	ldr	r3, [pc, #456]	@ (800aee0 <__ieee754_asin+0x330>)
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f7f5 fab7 	bl	800028c <__adddf3>
 800ad1e:	ec45 4b10 	vmov	d0, r4, r5
 800ad22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad26:	f7ff fe67 	bl	800a9f8 <__ieee754_sqrt>
 800ad2a:	4b6f      	ldr	r3, [pc, #444]	@ (800aee8 <__ieee754_asin+0x338>)
 800ad2c:	429e      	cmp	r6, r3
 800ad2e:	ec5b ab10 	vmov	sl, fp, d0
 800ad32:	f240 80db 	bls.w	800aeec <__ieee754_asin+0x33c>
 800ad36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad3e:	f7f5 fd85 	bl	800084c <__aeabi_ddiv>
 800ad42:	4652      	mov	r2, sl
 800ad44:	465b      	mov	r3, fp
 800ad46:	f7f5 fc57 	bl	80005f8 <__aeabi_dmul>
 800ad4a:	4652      	mov	r2, sl
 800ad4c:	465b      	mov	r3, fp
 800ad4e:	f7f5 fa9d 	bl	800028c <__adddf3>
 800ad52:	4602      	mov	r2, r0
 800ad54:	460b      	mov	r3, r1
 800ad56:	f7f5 fa99 	bl	800028c <__adddf3>
 800ad5a:	a347      	add	r3, pc, #284	@ (adr r3, 800ae78 <__ieee754_asin+0x2c8>)
 800ad5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad60:	f7f5 fa92 	bl	8000288 <__aeabi_dsub>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	a141      	add	r1, pc, #260	@ (adr r1, 800ae70 <__ieee754_asin+0x2c0>)
 800ad6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad6e:	f7f5 fa8b 	bl	8000288 <__aeabi_dsub>
 800ad72:	9b01      	ldr	r3, [sp, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	bfdc      	itt	le
 800ad78:	4602      	movle	r2, r0
 800ad7a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800ad7e:	4604      	mov	r4, r0
 800ad80:	460d      	mov	r5, r1
 800ad82:	bfdc      	itt	le
 800ad84:	4614      	movle	r4, r2
 800ad86:	461d      	movle	r5, r3
 800ad88:	e746      	b.n	800ac18 <__ieee754_asin+0x68>
 800ad8a:	4622      	mov	r2, r4
 800ad8c:	462b      	mov	r3, r5
 800ad8e:	4620      	mov	r0, r4
 800ad90:	4629      	mov	r1, r5
 800ad92:	f7f5 fc31 	bl	80005f8 <__aeabi_dmul>
 800ad96:	a33c      	add	r3, pc, #240	@ (adr r3, 800ae88 <__ieee754_asin+0x2d8>)
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	4606      	mov	r6, r0
 800ad9e:	460f      	mov	r7, r1
 800ada0:	f7f5 fc2a 	bl	80005f8 <__aeabi_dmul>
 800ada4:	a33a      	add	r3, pc, #232	@ (adr r3, 800ae90 <__ieee754_asin+0x2e0>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	f7f5 fa6f 	bl	800028c <__adddf3>
 800adae:	4632      	mov	r2, r6
 800adb0:	463b      	mov	r3, r7
 800adb2:	f7f5 fc21 	bl	80005f8 <__aeabi_dmul>
 800adb6:	a338      	add	r3, pc, #224	@ (adr r3, 800ae98 <__ieee754_asin+0x2e8>)
 800adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbc:	f7f5 fa64 	bl	8000288 <__aeabi_dsub>
 800adc0:	4632      	mov	r2, r6
 800adc2:	463b      	mov	r3, r7
 800adc4:	f7f5 fc18 	bl	80005f8 <__aeabi_dmul>
 800adc8:	a335      	add	r3, pc, #212	@ (adr r3, 800aea0 <__ieee754_asin+0x2f0>)
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	f7f5 fa5d 	bl	800028c <__adddf3>
 800add2:	4632      	mov	r2, r6
 800add4:	463b      	mov	r3, r7
 800add6:	f7f5 fc0f 	bl	80005f8 <__aeabi_dmul>
 800adda:	a333      	add	r3, pc, #204	@ (adr r3, 800aea8 <__ieee754_asin+0x2f8>)
 800addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade0:	f7f5 fa52 	bl	8000288 <__aeabi_dsub>
 800ade4:	4632      	mov	r2, r6
 800ade6:	463b      	mov	r3, r7
 800ade8:	f7f5 fc06 	bl	80005f8 <__aeabi_dmul>
 800adec:	a330      	add	r3, pc, #192	@ (adr r3, 800aeb0 <__ieee754_asin+0x300>)
 800adee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf2:	f7f5 fa4b 	bl	800028c <__adddf3>
 800adf6:	4632      	mov	r2, r6
 800adf8:	463b      	mov	r3, r7
 800adfa:	f7f5 fbfd 	bl	80005f8 <__aeabi_dmul>
 800adfe:	a32e      	add	r3, pc, #184	@ (adr r3, 800aeb8 <__ieee754_asin+0x308>)
 800ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae04:	4680      	mov	r8, r0
 800ae06:	4689      	mov	r9, r1
 800ae08:	4630      	mov	r0, r6
 800ae0a:	4639      	mov	r1, r7
 800ae0c:	f7f5 fbf4 	bl	80005f8 <__aeabi_dmul>
 800ae10:	a32b      	add	r3, pc, #172	@ (adr r3, 800aec0 <__ieee754_asin+0x310>)
 800ae12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae16:	f7f5 fa37 	bl	8000288 <__aeabi_dsub>
 800ae1a:	4632      	mov	r2, r6
 800ae1c:	463b      	mov	r3, r7
 800ae1e:	f7f5 fbeb 	bl	80005f8 <__aeabi_dmul>
 800ae22:	a329      	add	r3, pc, #164	@ (adr r3, 800aec8 <__ieee754_asin+0x318>)
 800ae24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae28:	f7f5 fa30 	bl	800028c <__adddf3>
 800ae2c:	4632      	mov	r2, r6
 800ae2e:	463b      	mov	r3, r7
 800ae30:	f7f5 fbe2 	bl	80005f8 <__aeabi_dmul>
 800ae34:	a326      	add	r3, pc, #152	@ (adr r3, 800aed0 <__ieee754_asin+0x320>)
 800ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3a:	f7f5 fa25 	bl	8000288 <__aeabi_dsub>
 800ae3e:	4632      	mov	r2, r6
 800ae40:	463b      	mov	r3, r7
 800ae42:	f7f5 fbd9 	bl	80005f8 <__aeabi_dmul>
 800ae46:	4b26      	ldr	r3, [pc, #152]	@ (800aee0 <__ieee754_asin+0x330>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f7f5 fa1f 	bl	800028c <__adddf3>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4640      	mov	r0, r8
 800ae54:	4649      	mov	r1, r9
 800ae56:	f7f5 fcf9 	bl	800084c <__aeabi_ddiv>
 800ae5a:	4622      	mov	r2, r4
 800ae5c:	462b      	mov	r3, r5
 800ae5e:	f7f5 fbcb 	bl	80005f8 <__aeabi_dmul>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	4620      	mov	r0, r4
 800ae68:	4629      	mov	r1, r5
 800ae6a:	e6c6      	b.n	800abfa <__ieee754_asin+0x4a>
 800ae6c:	f3af 8000 	nop.w
 800ae70:	54442d18 	.word	0x54442d18
 800ae74:	3ff921fb 	.word	0x3ff921fb
 800ae78:	33145c07 	.word	0x33145c07
 800ae7c:	3c91a626 	.word	0x3c91a626
 800ae80:	8800759c 	.word	0x8800759c
 800ae84:	7e37e43c 	.word	0x7e37e43c
 800ae88:	0dfdf709 	.word	0x0dfdf709
 800ae8c:	3f023de1 	.word	0x3f023de1
 800ae90:	7501b288 	.word	0x7501b288
 800ae94:	3f49efe0 	.word	0x3f49efe0
 800ae98:	b5688f3b 	.word	0xb5688f3b
 800ae9c:	3fa48228 	.word	0x3fa48228
 800aea0:	0e884455 	.word	0x0e884455
 800aea4:	3fc9c155 	.word	0x3fc9c155
 800aea8:	03eb6f7d 	.word	0x03eb6f7d
 800aeac:	3fd4d612 	.word	0x3fd4d612
 800aeb0:	55555555 	.word	0x55555555
 800aeb4:	3fc55555 	.word	0x3fc55555
 800aeb8:	b12e9282 	.word	0xb12e9282
 800aebc:	3fb3b8c5 	.word	0x3fb3b8c5
 800aec0:	1b8d0159 	.word	0x1b8d0159
 800aec4:	3fe6066c 	.word	0x3fe6066c
 800aec8:	9c598ac8 	.word	0x9c598ac8
 800aecc:	40002ae5 	.word	0x40002ae5
 800aed0:	1c8a2d4b 	.word	0x1c8a2d4b
 800aed4:	40033a27 	.word	0x40033a27
 800aed8:	3fefffff 	.word	0x3fefffff
 800aedc:	3fdfffff 	.word	0x3fdfffff
 800aee0:	3ff00000 	.word	0x3ff00000
 800aee4:	3fe00000 	.word	0x3fe00000
 800aee8:	3fef3332 	.word	0x3fef3332
 800aeec:	4652      	mov	r2, sl
 800aeee:	465b      	mov	r3, fp
 800aef0:	4650      	mov	r0, sl
 800aef2:	4659      	mov	r1, fp
 800aef4:	f7f5 f9ca 	bl	800028c <__adddf3>
 800aef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aefc:	4606      	mov	r6, r0
 800aefe:	460f      	mov	r7, r1
 800af00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af04:	f7f5 fca2 	bl	800084c <__aeabi_ddiv>
 800af08:	4602      	mov	r2, r0
 800af0a:	460b      	mov	r3, r1
 800af0c:	4630      	mov	r0, r6
 800af0e:	4639      	mov	r1, r7
 800af10:	f7f5 fb72 	bl	80005f8 <__aeabi_dmul>
 800af14:	f04f 0800 	mov.w	r8, #0
 800af18:	4606      	mov	r6, r0
 800af1a:	460f      	mov	r7, r1
 800af1c:	4642      	mov	r2, r8
 800af1e:	465b      	mov	r3, fp
 800af20:	4640      	mov	r0, r8
 800af22:	4659      	mov	r1, fp
 800af24:	f7f5 fb68 	bl	80005f8 <__aeabi_dmul>
 800af28:	4602      	mov	r2, r0
 800af2a:	460b      	mov	r3, r1
 800af2c:	4620      	mov	r0, r4
 800af2e:	4629      	mov	r1, r5
 800af30:	f7f5 f9aa 	bl	8000288 <__aeabi_dsub>
 800af34:	4642      	mov	r2, r8
 800af36:	4604      	mov	r4, r0
 800af38:	460d      	mov	r5, r1
 800af3a:	465b      	mov	r3, fp
 800af3c:	4650      	mov	r0, sl
 800af3e:	4659      	mov	r1, fp
 800af40:	f7f5 f9a4 	bl	800028c <__adddf3>
 800af44:	4602      	mov	r2, r0
 800af46:	460b      	mov	r3, r1
 800af48:	4620      	mov	r0, r4
 800af4a:	4629      	mov	r1, r5
 800af4c:	f7f5 fc7e 	bl	800084c <__aeabi_ddiv>
 800af50:	4602      	mov	r2, r0
 800af52:	460b      	mov	r3, r1
 800af54:	f7f5 f99a 	bl	800028c <__adddf3>
 800af58:	4602      	mov	r2, r0
 800af5a:	460b      	mov	r3, r1
 800af5c:	a112      	add	r1, pc, #72	@ (adr r1, 800afa8 <__ieee754_asin+0x3f8>)
 800af5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af62:	f7f5 f991 	bl	8000288 <__aeabi_dsub>
 800af66:	4602      	mov	r2, r0
 800af68:	460b      	mov	r3, r1
 800af6a:	4630      	mov	r0, r6
 800af6c:	4639      	mov	r1, r7
 800af6e:	f7f5 f98b 	bl	8000288 <__aeabi_dsub>
 800af72:	4642      	mov	r2, r8
 800af74:	4604      	mov	r4, r0
 800af76:	460d      	mov	r5, r1
 800af78:	465b      	mov	r3, fp
 800af7a:	4640      	mov	r0, r8
 800af7c:	4659      	mov	r1, fp
 800af7e:	f7f5 f985 	bl	800028c <__adddf3>
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	a10a      	add	r1, pc, #40	@ (adr r1, 800afb0 <__ieee754_asin+0x400>)
 800af88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af8c:	f7f5 f97c 	bl	8000288 <__aeabi_dsub>
 800af90:	4602      	mov	r2, r0
 800af92:	460b      	mov	r3, r1
 800af94:	4620      	mov	r0, r4
 800af96:	4629      	mov	r1, r5
 800af98:	f7f5 f976 	bl	8000288 <__aeabi_dsub>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	a103      	add	r1, pc, #12	@ (adr r1, 800afb0 <__ieee754_asin+0x400>)
 800afa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afa6:	e6e2      	b.n	800ad6e <__ieee754_asin+0x1be>
 800afa8:	33145c07 	.word	0x33145c07
 800afac:	3c91a626 	.word	0x3c91a626
 800afb0:	54442d18 	.word	0x54442d18
 800afb4:	3fe921fb 	.word	0x3fe921fb

0800afb8 <_init>:
 800afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afba:	bf00      	nop
 800afbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afbe:	bc08      	pop	{r3}
 800afc0:	469e      	mov	lr, r3
 800afc2:	4770      	bx	lr

0800afc4 <_fini>:
 800afc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc6:	bf00      	nop
 800afc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afca:	bc08      	pop	{r3}
 800afcc:	469e      	mov	lr, r3
 800afce:	4770      	bx	lr
