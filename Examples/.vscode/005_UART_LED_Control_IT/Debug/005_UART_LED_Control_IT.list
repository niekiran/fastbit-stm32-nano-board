
005_UART_LED_Control_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bb8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  08009d48  08009d48  0000ad48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2fc  0800a2fc  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2fc  0800a2fc  0000b2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a304  0800a304  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a304  0800a304  0000b304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a308  0800a308  0000b308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a30c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d4  2**0
                  CONTENTS
 10 .bss          000002e4  200001d4  200001d4  0000c1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004b8  200004b8  0000c1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c4a5  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000221e  00000000  00000000  000186a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  0001a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b5  00000000  00000000  0001b1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e7ec  00000000  00000000  0001b865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d72e  00000000  00000000  0003a051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af12d  00000000  00000000  0004777f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f68ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039d4  00000000  00000000  000f68f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  000fa2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d30 	.word	0x08009d30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009d30 	.word	0x08009d30

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <led_on>:
/**
  * @brief  Turns on the specified LED.
  * @param  ledNumber: The number of the LED to turn on (1, 2, or 3).
  * @retval None
  */
void led_on(uint8_t led_number) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  switch(led_number) {
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	d014      	beq.n	8000d4e <led_on+0x3a>
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	dc19      	bgt.n	8000d5c <led_on+0x48>
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d002      	beq.n	8000d32 <led_on+0x1e>
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d007      	beq.n	8000d40 <led_on+0x2c>
 8000d30:	e014      	b.n	8000d5c <led_on+0x48>
  case 1:
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	2108      	movs	r1, #8
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3a:	f001 f8ff 	bl	8001f3c <HAL_GPIO_WritePin>
    break;
 8000d3e:	e018      	b.n	8000d72 <led_on+0x5e>
  case 2:
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2104      	movs	r1, #4
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d48:	f001 f8f8 	bl	8001f3c <HAL_GPIO_WritePin>
    break;
 8000d4c:	e011      	b.n	8000d72 <led_on+0x5e>
  case 3:
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2102      	movs	r1, #2
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d56:	f001 f8f1 	bl	8001f3c <HAL_GPIO_WritePin>
    break;
 8000d5a:	e00a      	b.n	8000d72 <led_on+0x5e>
  default:
    if (!invalid_command_printed) {
 8000d5c:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <led_on+0x68>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d106      	bne.n	8000d72 <led_on+0x5e>
      display_invalid_argument(&huart1);
 8000d64:	4806      	ldr	r0, [pc, #24]	@ (8000d80 <led_on+0x6c>)
 8000d66:	f000 fc43 	bl	80015f0 <display_invalid_argument>
      invalid_command_printed = 1; // Set the flag
 8000d6a:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <led_on+0x68>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]
    }
  }
}
 8000d70:	e7ff      	b.n	8000d72 <led_on+0x5e>
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000032c 	.word	0x2000032c
 8000d80:	200001f0 	.word	0x200001f0

08000d84 <led_off>:
/**
  * @brief  Turns off the specified LED.
  * @param  ledNumber: The number of the LED to turn off (1, 2, or 3).
  * @retval None
  */
void led_off(uint8_t led_number) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  switch(led_number) {
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	d014      	beq.n	8000dbe <led_off+0x3a>
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	dc19      	bgt.n	8000dcc <led_off+0x48>
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d002      	beq.n	8000da2 <led_off+0x1e>
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d007      	beq.n	8000db0 <led_off+0x2c>
 8000da0:	e014      	b.n	8000dcc <led_off+0x48>
  case 1:
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2108      	movs	r1, #8
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000daa:	f001 f8c7 	bl	8001f3c <HAL_GPIO_WritePin>
    break;
 8000dae:	e018      	b.n	8000de2 <led_off+0x5e>
  case 2:
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2104      	movs	r1, #4
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db8:	f001 f8c0 	bl	8001f3c <HAL_GPIO_WritePin>
    break;
 8000dbc:	e011      	b.n	8000de2 <led_off+0x5e>
  case 3:
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc6:	f001 f8b9 	bl	8001f3c <HAL_GPIO_WritePin>
    break;
 8000dca:	e00a      	b.n	8000de2 <led_off+0x5e>
  default:
    if (!invalid_command_printed) {
 8000dcc:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <led_off+0x68>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d106      	bne.n	8000de2 <led_off+0x5e>
      display_invalid_argument(&huart1);
 8000dd4:	4806      	ldr	r0, [pc, #24]	@ (8000df0 <led_off+0x6c>)
 8000dd6:	f000 fc0b 	bl	80015f0 <display_invalid_argument>
      invalid_command_printed = 1;
 8000dda:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <led_off+0x68>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
    }
  }
}
 8000de0:	e7ff      	b.n	8000de2 <led_off+0x5e>
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000032c 	.word	0x2000032c
 8000df0:	200001f0 	.word	0x200001f0

08000df4 <led_toggle>:
  * @brief  Toggles the specified LED with a specified delay.
  * @param  ledNumber: The number of the LED to toggle (1, 2, or 3).
  * @param  timedelay: The delay duration in milliseconds.
  * @retval None
  */
void led_toggle(uint8_t led_number, uint32_t time_delay) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  switch(led_number) {
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d018      	beq.n	8000e38 <led_toggle+0x44>
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	dc1f      	bgt.n	8000e4a <led_toggle+0x56>
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d002      	beq.n	8000e14 <led_toggle+0x20>
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d009      	beq.n	8000e26 <led_toggle+0x32>
 8000e12:	e01a      	b.n	8000e4a <led_toggle+0x56>
  case 1:
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8000e14:	2108      	movs	r1, #8
 8000e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1a:	f001 f8a7 	bl	8001f6c <HAL_GPIO_TogglePin>
    HAL_Delay(time_delay); break;
 8000e1e:	6838      	ldr	r0, [r7, #0]
 8000e20:	f000 fd34 	bl	800188c <HAL_Delay>
 8000e24:	e01c      	b.n	8000e60 <led_toggle+0x6c>
  case 2:
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000e26:	2104      	movs	r1, #4
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2c:	f001 f89e 	bl	8001f6c <HAL_GPIO_TogglePin>
    HAL_Delay(time_delay); break;
 8000e30:	6838      	ldr	r0, [r7, #0]
 8000e32:	f000 fd2b 	bl	800188c <HAL_Delay>
 8000e36:	e013      	b.n	8000e60 <led_toggle+0x6c>
  case 3:
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000e38:	2102      	movs	r1, #2
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3e:	f001 f895 	bl	8001f6c <HAL_GPIO_TogglePin>
    HAL_Delay(time_delay); break;
 8000e42:	6838      	ldr	r0, [r7, #0]
 8000e44:	f000 fd22 	bl	800188c <HAL_Delay>
 8000e48:	e00a      	b.n	8000e60 <led_toggle+0x6c>
  default:
    if (!invalid_command_printed) {
 8000e4a:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <led_toggle+0x74>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d106      	bne.n	8000e60 <led_toggle+0x6c>
      display_invalid_argument(&huart1);
 8000e52:	4806      	ldr	r0, [pc, #24]	@ (8000e6c <led_toggle+0x78>)
 8000e54:	f000 fbcc 	bl	80015f0 <display_invalid_argument>
      invalid_command_printed = 1;
 8000e58:	4b03      	ldr	r3, [pc, #12]	@ (8000e68 <led_toggle+0x74>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
    }
  }
}
 8000e5e:	e7ff      	b.n	8000e60 <led_toggle+0x6c>
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000032c 	.word	0x2000032c
 8000e6c:	200001f0 	.word	0x200001f0

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e74:	f000 fca4 	bl	80017c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  createQueue(&command_queue, 10, &commands[0]);
 8000e78:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <main+0x34>)
 8000e7a:	210a      	movs	r1, #10
 8000e7c:	480a      	ldr	r0, [pc, #40]	@ (8000ea8 <main+0x38>)
 8000e7e:	f000 f939 	bl	80010f4 <createQueue>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f817 	bl	8000eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f000 f89f 	bl	8000fc8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e8a:	f000 f86d 	bl	8000f68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  display_menu(&huart1);
 8000e8e:	4807      	ldr	r0, [pc, #28]	@ (8000eac <main+0x3c>)
 8000e90:	f000 fb84 	bl	800159c <display_menu>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart1, &recvdcmd, 1);
 8000e94:	2201      	movs	r2, #1
 8000e96:	4906      	ldr	r1, [pc, #24]	@ (8000eb0 <main+0x40>)
 8000e98:	4804      	ldr	r0, [pc, #16]	@ (8000eac <main+0x3c>)
 8000e9a:	f002 fd7c 	bl	8003996 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    process_command_queue();
 8000e9e:	f000 fbb9 	bl	8001614 <process_command_queue>
 8000ea2:	e7fc      	b.n	8000e9e <main+0x2e>
 8000ea4:	20000278 	.word	0x20000278
 8000ea8:	20000330 	.word	0x20000330
 8000eac:	200001f0 	.word	0x200001f0
 8000eb0:	20000304 	.word	0x20000304

08000eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b09e      	sub	sp, #120	@ 0x78
 8000eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000ebe:	2228      	movs	r2, #40	@ 0x28
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f004 fff2 	bl	8005eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed8:	463b      	mov	r3, r7
 8000eda:	223c      	movs	r2, #60	@ 0x3c
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f004 ffe4 	bl	8005eac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000efe:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f00:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f04:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f06:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 f848 	bl	8001fa0 <HAL_RCC_OscConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f16:	f000 f8e7 	bl	80010e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f30:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f34:	2102      	movs	r1, #2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f002 f870 	bl	800301c <HAL_RCC_ClockConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f42:	f000 f8d1 	bl	80010e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 fa99 	bl	8003488 <HAL_RCCEx_PeriphCLKConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f5c:	f000 f8c4 	bl	80010e8 <Error_Handler>
  }
}
 8000f60:	bf00      	nop
 8000f62:	3778      	adds	r7, #120	@ 0x78
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f6e:	4a15      	ldr	r2, [pc, #84]	@ (8000fc4 <MX_USART1_UART_Init+0x5c>)
 8000f70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000f72:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f74:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000f78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f8e:	220c      	movs	r2, #12
 8000f90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f98:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <MX_USART1_UART_Init+0x58>)
 8000fac:	f002 fc1c 	bl	80037e8 <HAL_UART_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fb6:	f000 f897 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200001f0 	.word	0x200001f0
 8000fc4:	40013800 	.word	0x40013800

08000fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fde:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <MX_GPIO_Init+0x78>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4a17      	ldr	r2, [pc, #92]	@ (8001040 <MX_GPIO_Init+0x78>)
 8000fe4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fe8:	6153      	str	r3, [r2, #20]
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <MX_GPIO_Init+0x78>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <MX_GPIO_Init+0x78>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	4a11      	ldr	r2, [pc, #68]	@ (8001040 <MX_GPIO_Init+0x78>)
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001000:	6153      	str	r3, [r2, #20]
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <MX_GPIO_Init+0x78>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	210e      	movs	r1, #14
 8001012:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001016:	f000 ff91 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800101a:	230e      	movs	r3, #14
 800101c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001034:	f000 fe08 	bl	8001c48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af02      	add	r7, sp, #8
 800104a:	6078      	str	r0, [r7, #4]
  if (recvdcmd == '\r') {
 800104c:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <HAL_UART_RxCpltCallback+0x90>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b0d      	cmp	r3, #13
 8001052:	d12a      	bne.n	80010aa <HAL_UART_RxCpltCallback+0x66>
    rx_data[rx_index++]='\r';
 8001054:	4b20      	ldr	r3, [pc, #128]	@ (80010d8 <HAL_UART_RxCpltCallback+0x94>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	b2d1      	uxtb	r1, r2
 800105c:	4a1e      	ldr	r2, [pc, #120]	@ (80010d8 <HAL_UART_RxCpltCallback+0x94>)
 800105e:	7011      	strb	r1, [r2, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b1e      	ldr	r3, [pc, #120]	@ (80010dc <HAL_UART_RxCpltCallback+0x98>)
 8001064:	210d      	movs	r1, #13
 8001066:	5499      	strb	r1, [r3, r2]
    struct led_command_data data;

    sscanf((char *)rx_data, "%s %hu %hu", data.command, &data.argument, &data.delay) ;
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	f103 010a 	add.w	r1, r3, #10
 8001070:	f107 0208 	add.w	r2, r7, #8
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	330c      	adds	r3, #12
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	460b      	mov	r3, r1
 800107e:	4918      	ldr	r1, [pc, #96]	@ (80010e0 <HAL_UART_RxCpltCallback+0x9c>)
 8001080:	4816      	ldr	r0, [pc, #88]	@ (80010dc <HAL_UART_RxCpltCallback+0x98>)
 8001082:	f004 fe0f 	bl	8005ca4 <siscanf>
    enqueue(&command_queue, data);
 8001086:	8abb      	ldrh	r3, [r7, #20]
 8001088:	f8ad 3000 	strh.w	r3, [sp]
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001092:	4814      	ldr	r0, [pc, #80]	@ (80010e4 <HAL_UART_RxCpltCallback+0xa0>)
 8001094:	f000 f872 	bl	800117c <enqueue>
    memset(rx_data, 0, sizeof(rx_data));
 8001098:	2220      	movs	r2, #32
 800109a:	2100      	movs	r1, #0
 800109c:	480f      	ldr	r0, [pc, #60]	@ (80010dc <HAL_UART_RxCpltCallback+0x98>)
 800109e:	f004 ff05 	bl	8005eac <memset>
    rx_index = 0;
 80010a2:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <HAL_UART_RxCpltCallback+0x94>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	e00a      	b.n	80010c0 <HAL_UART_RxCpltCallback+0x7c>
  } else {
    rx_data[rx_index++] = recvdcmd;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <HAL_UART_RxCpltCallback+0x94>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	b2d1      	uxtb	r1, r2
 80010b2:	4a09      	ldr	r2, [pc, #36]	@ (80010d8 <HAL_UART_RxCpltCallback+0x94>)
 80010b4:	7011      	strb	r1, [r2, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <HAL_UART_RxCpltCallback+0x90>)
 80010ba:	7819      	ldrb	r1, [r3, #0]
 80010bc:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <HAL_UART_RxCpltCallback+0x98>)
 80010be:	5499      	strb	r1, [r3, r2]
  }
  HAL_UART_Receive_IT(huart1, &recvdcmd, 1);
 80010c0:	2201      	movs	r2, #1
 80010c2:	4904      	ldr	r1, [pc, #16]	@ (80010d4 <HAL_UART_RxCpltCallback+0x90>)
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f002 fc66 	bl	8003996 <HAL_UART_Receive_IT>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000304 	.word	0x20000304
 80010d8:	20000328 	.word	0x20000328
 80010dc:	20000308 	.word	0x20000308
 80010e0:	08009d48 	.word	0x08009d48
 80010e4:	20000330 	.word	0x20000330

080010e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
}
 80010ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <Error_Handler+0x8>

080010f4 <createQueue>:
#include <stdio.h>
#include <string.h>


/* Function to initialize size of queue as 0 */
struct Queue *createQueue(struct Queue *queue, unsigned capacity, struct led_command_data *command){
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  queue->capacity = capacity;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	60da      	str	r2, [r3, #12]
  queue->front = queue->size = 0;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	601a      	str	r2, [r3, #0]
  queue->rear = capacity - 1;  // This is important, see the enqueue
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	3b01      	subs	r3, #1
 8001118:	461a      	mov	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	605a      	str	r2, [r3, #4]
  queue->items = command;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	611a      	str	r2, [r3, #16]
  return queue;
 8001124:	68fb      	ldr	r3, [r7, #12]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <isFull>:

/* Function to check if queue is full */
int isFull(struct Queue *queue) {
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
    return (queue->size == queue->capacity);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	461a      	mov	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	bf0c      	ite	eq
 8001148:	2301      	moveq	r3, #1
 800114a:	2300      	movne	r3, #0
 800114c:	b2db      	uxtb	r3, r3
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <isEmpty>:

/* Function to check if queue is empty */
int isEmpty(struct Queue *queue) {
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  return (queue->size == 0);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <enqueue>:

/* Function to add an item to the queue (enqueue) */
void enqueue(struct Queue *queue, struct led_command_data value) {
 800117c:	b084      	sub	sp, #16
 800117e:	b590      	push	{r4, r7, lr}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	f107 001c 	add.w	r0, r7, #28
 800118a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (isFull(queue)) {
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffcf 	bl	8001132 <isFull>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <enqueue+0x24>
      printf("Queue is full\n");
 800119a:	4818      	ldr	r0, [pc, #96]	@ (80011fc <enqueue+0x80>)
 800119c:	f004 fd5a 	bl	8005c54 <puts>
  }
  queue->rear = (queue->rear + 1) % queue->capacity;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	3301      	adds	r3, #1
 80011a6:	461a      	mov	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80011b0:	fb01 f303 	mul.w	r3, r1, r3
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	461a      	mov	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	605a      	str	r2, [r3, #4]
  queue->items[queue->rear] = value;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	4619      	mov	r1, r3
 80011c6:	460b      	mov	r3, r1
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	1a5b      	subs	r3, r3, r1
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	461c      	mov	r4, r3
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80011d8:	6020      	str	r0, [r4, #0]
 80011da:	6061      	str	r1, [r4, #4]
 80011dc:	60a2      	str	r2, [r4, #8]
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	81a3      	strh	r3, [r4, #12]
  queue->size++;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	609a      	str	r2, [r3, #8]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80011f6:	b004      	add	sp, #16
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	08009d54 	.word	0x08009d54

08001200 <dequeue>:

/* Function to remove an item from the queue (dequeue) */
struct led_command_data dequeue(struct Queue *queue) {
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  struct led_command_data data;
  if (isEmpty(queue)) {
 800120a:	6838      	ldr	r0, [r7, #0]
 800120c:	f7ff ffa5 	bl	800115a <isEmpty>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00c      	beq.n	8001230 <dequeue+0x30>
    strcpy(data.command, ""); // Indicating empty data
 8001216:	2300      	movs	r3, #0
 8001218:	723b      	strb	r3, [r7, #8]
    return data;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	461c      	mov	r4, r3
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001224:	6020      	str	r0, [r4, #0]
 8001226:	6061      	str	r1, [r4, #4]
 8001228:	60a2      	str	r2, [r4, #8]
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	81a3      	strh	r3, [r4, #12]
 800122e:	e02f      	b.n	8001290 <dequeue+0x90>
  } else {
    data = queue->items[queue->front];
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	460b      	mov	r3, r1
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	1a5b      	subs	r3, r3, r1
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	441a      	add	r2, r3
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	4614      	mov	r4, r2
 800124a:	6820      	ldr	r0, [r4, #0]
 800124c:	6861      	ldr	r1, [r4, #4]
 800124e:	68a2      	ldr	r2, [r4, #8]
 8001250:	c307      	stmia	r3!, {r0, r1, r2}
 8001252:	89a2      	ldrh	r2, [r4, #12]
 8001254:	801a      	strh	r2, [r3, #0]
    queue->front = (queue->front + 1) % queue->capacity;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	461a      	mov	r2, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	fbb2 f1f3 	udiv	r1, r2, r3
 8001266:	fb01 f303 	mul.w	r3, r1, r3
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	461a      	mov	r2, r3
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	601a      	str	r2, [r3, #0]
    queue->size--;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	1e5a      	subs	r2, r3, #1
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	609a      	str	r2, [r3, #8]
    return data;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	461c      	mov	r4, r3
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001286:	6020      	str	r0, [r4, #0]
 8001288:	6061      	str	r1, [r4, #4]
 800128a:	60a2      	str	r2, [r4, #8]
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	81a3      	strh	r3, [r4, #12]
  }
}
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	371c      	adds	r7, #28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd90      	pop	{r4, r7, pc}

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <HAL_MspInit+0x44>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	4a0e      	ldr	r2, [pc, #56]	@ (80012dc <HAL_MspInit+0x44>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6193      	str	r3, [r2, #24]
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <HAL_MspInit+0x44>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <HAL_MspInit+0x44>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <HAL_MspInit+0x44>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_MspInit+0x44>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	@ 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001370 <HAL_UART_MspInit+0x90>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d131      	bne.n	8001366 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001302:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <HAL_UART_MspInit+0x94>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	4a1b      	ldr	r2, [pc, #108]	@ (8001374 <HAL_UART_MspInit+0x94>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800130c:	6193      	str	r3, [r2, #24]
 800130e:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <HAL_UART_MspInit+0x94>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <HAL_UART_MspInit+0x94>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	4a15      	ldr	r2, [pc, #84]	@ (8001374 <HAL_UART_MspInit+0x94>)
 8001320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001324:	6153      	str	r3, [r2, #20]
 8001326:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <HAL_UART_MspInit+0x94>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001332:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001344:	2307      	movs	r3, #7
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001352:	f000 fc79 	bl	8001c48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	2025      	movs	r0, #37	@ 0x25
 800135c:	f000 fbb9 	bl	8001ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001360:	2025      	movs	r0, #37	@ 0x25
 8001362:	f000 fbd2 	bl	8001b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001366:	bf00      	nop
 8001368:	3728      	adds	r7, #40	@ 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40013800 	.word	0x40013800
 8001374:	40021000 	.word	0x40021000

08001378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <NMI_Handler+0x4>

08001380 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <HardFault_Handler+0x4>

08001388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <MemManage_Handler+0x4>

08001390 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <BusFault_Handler+0x4>

08001398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <UsageFault_Handler+0x4>

080013a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ce:	f000 fa3d 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013dc:	4802      	ldr	r0, [pc, #8]	@ (80013e8 <USART1_IRQHandler+0x10>)
 80013de:	f002 fb1f 	bl	8003a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200001f0 	.word	0x200001f0

080013ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return 1;
 80013f0:	2301      	movs	r3, #1
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_kill>:

int _kill(int pid, int sig)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001406:	f004 fda3 	bl	8005f50 <__errno>
 800140a:	4603      	mov	r3, r0
 800140c:	2216      	movs	r2, #22
 800140e:	601a      	str	r2, [r3, #0]
  return -1;
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <_exit>:

void _exit (int status)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ffe7 	bl	80013fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800142e:	bf00      	nop
 8001430:	e7fd      	b.n	800142e <_exit+0x12>

08001432 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	e00a      	b.n	800145a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001444:	f3af 8000 	nop.w
 8001448:	4601      	mov	r1, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	60ba      	str	r2, [r7, #8]
 8001450:	b2ca      	uxtb	r2, r1
 8001452:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	429a      	cmp	r2, r3
 8001460:	dbf0      	blt.n	8001444 <_read+0x12>
  }

  return len;
 8001462:	687b      	ldr	r3, [r7, #4]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e009      	b.n	8001492 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	60ba      	str	r2, [r7, #8]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	429a      	cmp	r2, r3
 8001498:	dbf1      	blt.n	800147e <_write+0x12>
  }
  return len;
 800149a:	687b      	ldr	r3, [r7, #4]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_close>:

int _close(int file)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014cc:	605a      	str	r2, [r3, #4]
  return 0;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_isatty>:

int _isatty(int file)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014e4:	2301      	movs	r3, #1
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b085      	sub	sp, #20
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001514:	4a14      	ldr	r2, [pc, #80]	@ (8001568 <_sbrk+0x5c>)
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <_sbrk+0x60>)
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001528:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <_sbrk+0x64>)
 800152a:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <_sbrk+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	429a      	cmp	r2, r3
 800153a:	d207      	bcs.n	800154c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800153c:	f004 fd08 	bl	8005f50 <__errno>
 8001540:	4603      	mov	r3, r0
 8001542:	220c      	movs	r2, #12
 8001544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	e009      	b.n	8001560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001552:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	4a05      	ldr	r2, [pc, #20]	@ (8001570 <_sbrk+0x64>)
 800155c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	2000a000 	.word	0x2000a000
 800156c:	00000400 	.word	0x00000400
 8001570:	20000364 	.word	0x20000364
 8001574:	200004b8 	.word	0x200004b8

08001578 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <SystemInit+0x20>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001582:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <SystemInit+0x20>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <display_menu>:
 *
 * This function transmits the menu of valid commands via UART.
 *
 * @param huart Pointer to the UART handle structure.
 */
void display_menu(UART_HandleTypeDef *huart) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  const uint8_t *menu = (const uint8_t *)"\r\nEnter Valid commands:\r\n"
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <display_menu+0x2c>)
 80015a6:	60fb      	str	r3, [r7, #12]
                          "LEDON [1/2/3] - Turn on LED 1, 2, or 3\r\n"
                          "LEDOFF [1/2/3] - Turn off LED 1, 2, or 3\r\n"
                          "LEDTOGGLE [1/2/3] [delay] - Toggle LED 1, 2, or 3 with specified delay\r\n";
  HAL_UART_Transmit(huart, menu, strlen((char *)menu), HAL_MAX_DELAY);
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7fe fe71 	bl	8000290 <strlen>
 80015ae:	4603      	mov	r3, r0
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	68f9      	ldr	r1, [r7, #12]
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f002 f963 	bl	8003884 <HAL_UART_Transmit>
}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	08009d74 	.word	0x08009d74

080015cc <display_invalid_command>:
  *
  * This function transmits the message "Invalid Argument\r\n" via UART.
  *
  * @param huart Pointer to the UART handle structure.
  */
void display_invalid_command(UART_HandleTypeDef *huart) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(huart, (uint8_t *)"Invalid Command\r\n", strlen("Invalid Command\r\n"), HAL_MAX_DELAY);
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
 80015d8:	2211      	movs	r2, #17
 80015da:	4904      	ldr	r1, [pc, #16]	@ (80015ec <display_invalid_command+0x20>)
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f002 f951 	bl	8003884 <HAL_UART_Transmit>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	08009e28 	.word	0x08009e28

080015f0 <display_invalid_argument>:
  *
  * This function transmits the message "Invalid Command\r\n" via UART.
  *
  * @param huart Pointer to the UART handle structure.
  */
void display_invalid_argument(UART_HandleTypeDef *huart) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(huart, (uint8_t *)"Invalid Argument\r\n", strlen("Invalid Argument\r\n"), HAL_MAX_DELAY);
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	2212      	movs	r2, #18
 80015fe:	4904      	ldr	r1, [pc, #16]	@ (8001610 <display_invalid_argument+0x20>)
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f002 f93f 	bl	8003884 <HAL_UART_Transmit>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	08009e3c 	.word	0x08009e3c

08001614 <process_command_queue>:
 * This function checks if the command queue is not empty. If it's not empty, it dequeues a command,
 * disables the USART1 interrupt, executes the command, enables the USART1 interrupt, resets the flag
 * for invalid command printed, transmits the menu, and updates the previous command.
 * If the command queue is empty, it executes the previous command (if it exists).
 */
void process_command_queue() {
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
  if(!isEmpty(&command_queue)) {
 800161a:	4826      	ldr	r0, [pc, #152]	@ (80016b4 <process_command_queue+0xa0>)
 800161c:	f7ff fd9d 	bl	800115a <isEmpty>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d134      	bne.n	8001690 <process_command_queue+0x7c>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001626:	2025      	movs	r0, #37	@ 0x25
 8001628:	f000 fa7d 	bl	8001b26 <HAL_NVIC_DisableIRQ>
    command = dequeue(&command_queue);
 800162c:	4c22      	ldr	r4, [pc, #136]	@ (80016b8 <process_command_queue+0xa4>)
 800162e:	463b      	mov	r3, r7
 8001630:	4920      	ldr	r1, [pc, #128]	@ (80016b4 <process_command_queue+0xa0>)
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fde4 	bl	8001200 <dequeue>
 8001638:	4622      	mov	r2, r4
 800163a:	463b      	mov	r3, r7
 800163c:	681c      	ldr	r4, [r3, #0]
 800163e:	6858      	ldr	r0, [r3, #4]
 8001640:	6899      	ldr	r1, [r3, #8]
 8001642:	6014      	str	r4, [r2, #0]
 8001644:	6050      	str	r0, [r2, #4]
 8001646:	6091      	str	r1, [r2, #8]
 8001648:	899b      	ldrh	r3, [r3, #12]
 800164a:	8193      	strh	r3, [r2, #12]
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800164c:	2025      	movs	r0, #37	@ 0x25
 800164e:	f000 fa5c 	bl	8001b0a <HAL_NVIC_EnableIRQ>
    invalid_command_printed = 0;
 8001652:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <process_command_queue+0xa8>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
    execute_command(command);
 8001658:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <process_command_queue+0xa4>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4610      	mov	r0, r2
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	4611      	mov	r1, r2
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	4614      	mov	r4, r2
 8001666:	899a      	ldrh	r2, [r3, #12]
 8001668:	2300      	movs	r3, #0
 800166a:	f362 030f 	bfi	r3, r2, #0, #16
 800166e:	4622      	mov	r2, r4
 8001670:	f000 f82a 	bl	80016c8 <execute_command>
    prev_cmd = command;
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <process_command_queue+0xac>)
 8001676:	4a10      	ldr	r2, [pc, #64]	@ (80016b8 <process_command_queue+0xa4>)
 8001678:	6814      	ldr	r4, [r2, #0]
 800167a:	6850      	ldr	r0, [r2, #4]
 800167c:	6891      	ldr	r1, [r2, #8]
 800167e:	601c      	str	r4, [r3, #0]
 8001680:	6058      	str	r0, [r3, #4]
 8001682:	6099      	str	r1, [r3, #8]
 8001684:	8992      	ldrh	r2, [r2, #12]
 8001686:	819a      	strh	r2, [r3, #12]
    /* Transmit the menu after command execution */
    display_menu(&huart1);
 8001688:	480e      	ldr	r0, [pc, #56]	@ (80016c4 <process_command_queue+0xb0>)
 800168a:	f7ff ff87 	bl	800159c <display_menu>
  }
  else {
    /* if prev_commad was toggle */
    execute_command(prev_cmd);
  }
}
 800168e:	e00d      	b.n	80016ac <process_command_queue+0x98>
    execute_command(prev_cmd);
 8001690:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <process_command_queue+0xac>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4610      	mov	r0, r2
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4611      	mov	r1, r2
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	4614      	mov	r4, r2
 800169e:	899a      	ldrh	r2, [r3, #12]
 80016a0:	2300      	movs	r3, #0
 80016a2:	f362 030f 	bfi	r3, r2, #0, #16
 80016a6:	4622      	mov	r2, r4
 80016a8:	f000 f80e 	bl	80016c8 <execute_command>
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}
 80016b4:	20000330 	.word	0x20000330
 80016b8:	20000354 	.word	0x20000354
 80016bc:	2000032c 	.word	0x2000032c
 80016c0:	20000344 	.word	0x20000344
 80016c4:	200001f0 	.word	0x200001f0

080016c8 <execute_command>:
/**
  * @brief  Processes the received commands from the queue and executes them.
  * @param  commandQueue: Pointer to the queue containing the commands to be executed.
  * @retval None
  */
void execute_command(struct led_command_data data) {
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	463c      	mov	r4, r7
 80016d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (strcmp(data.command, "LEDON") == 0) {
 80016d4:	463b      	mov	r3, r7
 80016d6:	491f      	ldr	r1, [pc, #124]	@ (8001754 <execute_command+0x8c>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fd79 	bl	80001d0 <strcmp>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <execute_command+0x28>
    led_on(data.argument);
 80016e4:	897b      	ldrh	r3, [r7, #10]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fb13 	bl	8000d14 <led_on>
    if (!isEmpty(&command_queue) && !invalid_command_printed) {
      display_invalid_command(&huart1);
      invalid_command_printed = 1; // Set the flag
    }
  }
}
 80016ee:	e02d      	b.n	800174c <execute_command+0x84>
  } else if (strcmp(data.command, "LEDOFF") == 0) {
 80016f0:	463b      	mov	r3, r7
 80016f2:	4919      	ldr	r1, [pc, #100]	@ (8001758 <execute_command+0x90>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe fd6b 	bl	80001d0 <strcmp>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <execute_command+0x44>
    led_off(data.argument);
 8001700:	897b      	ldrh	r3, [r7, #10]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fb3d 	bl	8000d84 <led_off>
}
 800170a:	e01f      	b.n	800174c <execute_command+0x84>
  } else if (strcmp(data.command, "LEDTOGGLE") == 0) {
 800170c:	463b      	mov	r3, r7
 800170e:	4913      	ldr	r1, [pc, #76]	@ (800175c <execute_command+0x94>)
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fd5d 	bl	80001d0 <strcmp>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d107      	bne.n	800172c <execute_command+0x64>
    led_toggle(data.argument, data.delay);
 800171c:	897b      	ldrh	r3, [r7, #10]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	89ba      	ldrh	r2, [r7, #12]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fb65 	bl	8000df4 <led_toggle>
}
 800172a:	e00f      	b.n	800174c <execute_command+0x84>
    if (!isEmpty(&command_queue) && !invalid_command_printed) {
 800172c:	480c      	ldr	r0, [pc, #48]	@ (8001760 <execute_command+0x98>)
 800172e:	f7ff fd14 	bl	800115a <isEmpty>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d109      	bne.n	800174c <execute_command+0x84>
 8001738:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <execute_command+0x9c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d105      	bne.n	800174c <execute_command+0x84>
      display_invalid_command(&huart1);
 8001740:	4809      	ldr	r0, [pc, #36]	@ (8001768 <execute_command+0xa0>)
 8001742:	f7ff ff43 	bl	80015cc <display_invalid_command>
      invalid_command_printed = 1; // Set the flag
 8001746:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <execute_command+0x9c>)
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bd90      	pop	{r4, r7, pc}
 8001754:	08009e50 	.word	0x08009e50
 8001758:	08009e58 	.word	0x08009e58
 800175c:	08009e60 	.word	0x08009e60
 8001760:	20000330 	.word	0x20000330
 8001764:	2000032c 	.word	0x2000032c
 8001768:	200001f0 	.word	0x200001f0

0800176c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800176c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001770:	f7ff ff02 	bl	8001578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001774:	480c      	ldr	r0, [pc, #48]	@ (80017a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001776:	490d      	ldr	r1, [pc, #52]	@ (80017ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001778:	4a0d      	ldr	r2, [pc, #52]	@ (80017b0 <LoopForever+0xe>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800177c:	e002      	b.n	8001784 <LoopCopyDataInit>

0800177e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001782:	3304      	adds	r3, #4

08001784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001788:	d3f9      	bcc.n	800177e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178a:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800178c:	4c0a      	ldr	r4, [pc, #40]	@ (80017b8 <LoopForever+0x16>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001790:	e001      	b.n	8001796 <LoopFillZerobss>

08001792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001794:	3204      	adds	r2, #4

08001796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001798:	d3fb      	bcc.n	8001792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800179a:	f004 fbdf 	bl	8005f5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800179e:	f7ff fb67 	bl	8000e70 <main>

080017a2 <LoopForever>:

LoopForever:
    b LoopForever
 80017a2:	e7fe      	b.n	80017a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017a4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80017a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ac:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017b0:	0800a30c 	.word	0x0800a30c
  ldr r2, =_sbss
 80017b4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017b8:	200004b8 	.word	0x200004b8

080017bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017bc:	e7fe      	b.n	80017bc <ADC1_2_IRQHandler>
	...

080017c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c4:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <HAL_Init+0x28>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a07      	ldr	r2, [pc, #28]	@ (80017e8 <HAL_Init+0x28>)
 80017ca:	f043 0310 	orr.w	r3, r3, #16
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d0:	2003      	movs	r0, #3
 80017d2:	f000 f973 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d6:	200f      	movs	r0, #15
 80017d8:	f000 f808 	bl	80017ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017dc:	f7ff fd5c 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40022000 	.word	0x40022000

080017ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <HAL_InitTick+0x54>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <HAL_InitTick+0x58>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001802:	fbb3 f3f1 	udiv	r3, r3, r1
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f999 	bl	8001b42 <HAL_SYSTICK_Config>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e00e      	b.n	8001838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d80a      	bhi.n	8001836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f000 f953 	bl	8001ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800182c:	4a06      	ldr	r2, [pc, #24]	@ (8001848 <HAL_InitTick+0x5c>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e000      	b.n	8001838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000000 	.word	0x20000000
 8001844:	20000008 	.word	0x20000008
 8001848:	20000004 	.word	0x20000004

0800184c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	@ (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008
 8001870:	20000368 	.word	0x20000368

08001874 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;  
 8001878:	4b03      	ldr	r3, [pc, #12]	@ (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000368 	.word	0x20000368

0800188c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff ffee 	bl	8001874 <HAL_GetTick>
 8001898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d005      	beq.n	80018b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a6:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <HAL_Delay+0x44>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80018b2:	bf00      	nop
 80018b4:	f7ff ffde 	bl	8001874 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8f7      	bhi.n	80018b4 <HAL_Delay+0x28>
  {
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000008 	.word	0x20000008

080018d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001906:	4a04      	ldr	r2, [pc, #16]	@ (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60d3      	str	r3, [r2, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db0b      	blt.n	8001962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	4907      	ldr	r1, [pc, #28]	@ (8001970 <__NVIC_EnableIRQ+0x38>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000e100 	.word	0xe000e100

08001974 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db12      	blt.n	80019ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	490a      	ldr	r1, [pc, #40]	@ (80019b8 <__NVIC_DisableIRQ+0x44>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	3320      	adds	r3, #32
 800199c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019a0:	f3bf 8f4f 	dsb	sy
}
 80019a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019a6:	f3bf 8f6f 	isb	sy
}
 80019aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	@ (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	@ (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	@ 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	@ 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f7ff ff8e 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff05 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff1a 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff8e 	bl	8001a10 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5d 	bl	80019bc <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff0d 	bl	8001938 <__NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff1d 	bl	8001974 <__NVIC_DisableIRQ>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ff94 	bl	8001a78 <SysTick_Config>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d008      	beq.n	8001b7e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2204      	movs	r2, #4
 8001b70:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e020      	b.n	8001bc0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 020e 	bic.w	r2, r2, #14
 8001b8c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0201 	bic.w	r2, r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d005      	beq.n	8001bee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2204      	movs	r2, #4
 8001be6:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	e027      	b.n	8001c3e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 020e 	bic.w	r2, r2, #14
 8001bfc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c16:	2101      	movs	r1, #1
 8001c18:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	4798      	blx	r3
    } 
  }
  return status;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c56:	e154      	b.n	8001f02 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	4013      	ands	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8146 	beq.w	8001efc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d005      	beq.n	8001c88 <HAL_GPIO_Init+0x40>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d130      	bne.n	8001cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	f003 0201 	and.w	r2, r3, #1
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d017      	beq.n	8001d26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d123      	bne.n	8001d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	08da      	lsrs	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3208      	adds	r2, #8
 8001d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	220f      	movs	r2, #15
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	08da      	lsrs	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3208      	adds	r2, #8
 8001d74:	6939      	ldr	r1, [r7, #16]
 8001d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	2203      	movs	r2, #3
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0203 	and.w	r2, r3, #3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 80a0 	beq.w	8001efc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbc:	4b58      	ldr	r3, [pc, #352]	@ (8001f20 <HAL_GPIO_Init+0x2d8>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	4a57      	ldr	r2, [pc, #348]	@ (8001f20 <HAL_GPIO_Init+0x2d8>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6193      	str	r3, [r2, #24]
 8001dc8:	4b55      	ldr	r3, [pc, #340]	@ (8001f20 <HAL_GPIO_Init+0x2d8>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dd4:	4a53      	ldr	r2, [pc, #332]	@ (8001f24 <HAL_GPIO_Init+0x2dc>)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dfe:	d019      	beq.n	8001e34 <HAL_GPIO_Init+0x1ec>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a49      	ldr	r2, [pc, #292]	@ (8001f28 <HAL_GPIO_Init+0x2e0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d013      	beq.n	8001e30 <HAL_GPIO_Init+0x1e8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a48      	ldr	r2, [pc, #288]	@ (8001f2c <HAL_GPIO_Init+0x2e4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00d      	beq.n	8001e2c <HAL_GPIO_Init+0x1e4>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a47      	ldr	r2, [pc, #284]	@ (8001f30 <HAL_GPIO_Init+0x2e8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d007      	beq.n	8001e28 <HAL_GPIO_Init+0x1e0>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a46      	ldr	r2, [pc, #280]	@ (8001f34 <HAL_GPIO_Init+0x2ec>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d101      	bne.n	8001e24 <HAL_GPIO_Init+0x1dc>
 8001e20:	2304      	movs	r3, #4
 8001e22:	e008      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e24:	2305      	movs	r3, #5
 8001e26:	e006      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e004      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e002      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_GPIO_Init+0x1ee>
 8001e34:	2300      	movs	r3, #0
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	f002 0203 	and.w	r2, r2, #3
 8001e3c:	0092      	lsls	r2, r2, #2
 8001e3e:	4093      	lsls	r3, r2
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e46:	4937      	ldr	r1, [pc, #220]	@ (8001f24 <HAL_GPIO_Init+0x2dc>)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e54:	4b38      	ldr	r3, [pc, #224]	@ (8001f38 <HAL_GPIO_Init+0x2f0>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e78:	4a2f      	ldr	r2, [pc, #188]	@ (8001f38 <HAL_GPIO_Init+0x2f0>)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f38 <HAL_GPIO_Init+0x2f0>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ea2:	4a25      	ldr	r2, [pc, #148]	@ (8001f38 <HAL_GPIO_Init+0x2f0>)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ea8:	4b23      	ldr	r3, [pc, #140]	@ (8001f38 <HAL_GPIO_Init+0x2f0>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8001f38 <HAL_GPIO_Init+0x2f0>)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed2:	4b19      	ldr	r3, [pc, #100]	@ (8001f38 <HAL_GPIO_Init+0x2f0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ef6:	4a10      	ldr	r2, [pc, #64]	@ (8001f38 <HAL_GPIO_Init+0x2f0>)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3301      	adds	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f47f aea3 	bne.w	8001c58 <HAL_GPIO_Init+0x10>
  }
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	371c      	adds	r7, #28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010000 	.word	0x40010000
 8001f28:	48000400 	.word	0x48000400
 8001f2c:	48000800 	.word	0x48000800
 8001f30:	48000c00 	.word	0x48000c00
 8001f34:	48001000 	.word	0x48001000
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f4c:	787b      	ldrb	r3, [r7, #1]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f58:	e002      	b.n	8001f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4013      	ands	r3, r2
 8001f84:	041a      	lsls	r2, r3, #16
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	43d9      	mvns	r1, r3
 8001f8a:	887b      	ldrh	r3, [r7, #2]
 8001f8c:	400b      	ands	r3, r1
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	619a      	str	r2, [r3, #24]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fb0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f001 b823 	b.w	800300c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 817d 	beq.w	80022d6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fdc:	4bbc      	ldr	r3, [pc, #752]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d00c      	beq.n	8002002 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fe8:	4bb9      	ldr	r3, [pc, #740]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d15c      	bne.n	80020ae <HAL_RCC_OscConfig+0x10e>
 8001ff4:	4bb6      	ldr	r3, [pc, #728]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002000:	d155      	bne.n	80020ae <HAL_RCC_OscConfig+0x10e>
 8002002:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002006:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002016:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d102      	bne.n	8002034 <HAL_RCC_OscConfig+0x94>
 800202e:	4ba8      	ldr	r3, [pc, #672]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	e015      	b.n	8002060 <HAL_RCC_OscConfig+0xc0>
 8002034:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002038:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002048:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800204c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002050:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800205c:	4b9c      	ldr	r3, [pc, #624]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 800205e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002060:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002064:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002068:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800206c:	fa92 f2a2 	rbit	r2, r2
 8002070:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002074:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002078:	fab2 f282 	clz	r2, r2
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	f042 0220 	orr.w	r2, r2, #32
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	f002 021f 	and.w	r2, r2, #31
 8002088:	2101      	movs	r1, #1
 800208a:	fa01 f202 	lsl.w	r2, r1, r2
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 811f 	beq.w	80022d4 <HAL_RCC_OscConfig+0x334>
 8002096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800209a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 8116 	bne.w	80022d4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	f000 bfaf 	b.w	800300c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020be:	d106      	bne.n	80020ce <HAL_RCC_OscConfig+0x12e>
 80020c0:	4b83      	ldr	r3, [pc, #524]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a82      	ldr	r2, [pc, #520]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 80020c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	e036      	b.n	800213c <HAL_RCC_OscConfig+0x19c>
 80020ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x158>
 80020de:	4b7c      	ldr	r3, [pc, #496]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a7b      	ldr	r2, [pc, #492]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 80020e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b79      	ldr	r3, [pc, #484]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a78      	ldr	r2, [pc, #480]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 80020f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e021      	b.n	800213c <HAL_RCC_OscConfig+0x19c>
 80020f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0x184>
 800210a:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a70      	ldr	r2, [pc, #448]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b6e      	ldr	r3, [pc, #440]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a6d      	ldr	r2, [pc, #436]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e00b      	b.n	800213c <HAL_RCC_OscConfig+0x19c>
 8002124:	4b6a      	ldr	r3, [pc, #424]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a69      	ldr	r2, [pc, #420]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 800212a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b67      	ldr	r3, [pc, #412]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a66      	ldr	r2, [pc, #408]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 8002136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800213a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800213c:	4b64      	ldr	r3, [pc, #400]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 800213e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002140:	f023 020f 	bic.w	r2, r3, #15
 8002144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002148:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	495f      	ldr	r1, [pc, #380]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 8002152:	4313      	orrs	r3, r2
 8002154:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d059      	beq.n	800221a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff fb85 	bl	8001874 <HAL_GetTick>
 800216a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	e00a      	b.n	8002186 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002170:	f7ff fb80 	bl	8001874 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b64      	cmp	r3, #100	@ 0x64
 800217e:	d902      	bls.n	8002186 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	f000 bf43 	b.w	800300c <HAL_RCC_OscConfig+0x106c>
 8002186:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800218a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800219a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	fab3 f383 	clz	r3, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d102      	bne.n	80021b8 <HAL_RCC_OscConfig+0x218>
 80021b2:	4b47      	ldr	r3, [pc, #284]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	e015      	b.n	80021e4 <HAL_RCC_OscConfig+0x244>
 80021b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021bc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80021c4:	fa93 f3a3 	rbit	r3, r3
 80021c8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80021cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021d0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80021d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80021e0:	4b3b      	ldr	r3, [pc, #236]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 80021e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021e8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80021ec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80021f0:	fa92 f2a2 	rbit	r2, r2
 80021f4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80021f8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80021fc:	fab2 f282 	clz	r2, r2
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	f042 0220 	orr.w	r2, r2, #32
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	f002 021f 	and.w	r2, r2, #31
 800220c:	2101      	movs	r1, #1
 800220e:	fa01 f202 	lsl.w	r2, r1, r2
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0ab      	beq.n	8002170 <HAL_RCC_OscConfig+0x1d0>
 8002218:	e05d      	b.n	80022d6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7ff fb2b 	bl	8001874 <HAL_GetTick>
 800221e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	e00a      	b.n	800223a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002224:	f7ff fb26 	bl	8001874 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b64      	cmp	r3, #100	@ 0x64
 8002232:	d902      	bls.n	800223a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	f000 bee9 	b.w	800300c <HAL_RCC_OscConfig+0x106c>
 800223a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800223e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800224e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d102      	bne.n	800226c <HAL_RCC_OscConfig+0x2cc>
 8002266:	4b1a      	ldr	r3, [pc, #104]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	e015      	b.n	8002298 <HAL_RCC_OscConfig+0x2f8>
 800226c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002270:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002280:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002284:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002288:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002294:	4b0e      	ldr	r3, [pc, #56]	@ (80022d0 <HAL_RCC_OscConfig+0x330>)
 8002296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002298:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800229c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80022a0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80022a4:	fa92 f2a2 	rbit	r2, r2
 80022a8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80022ac:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80022b0:	fab2 f282 	clz	r2, r2
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	f042 0220 	orr.w	r2, r2, #32
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	f002 021f 	and.w	r2, r2, #31
 80022c0:	2101      	movs	r1, #1
 80022c2:	fa01 f202 	lsl.w	r2, r1, r2
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1ab      	bne.n	8002224 <HAL_RCC_OscConfig+0x284>
 80022cc:	e003      	b.n	80022d6 <HAL_RCC_OscConfig+0x336>
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 817d 	beq.w	80025e6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022ec:	4ba6      	ldr	r3, [pc, #664]	@ (8002588 <HAL_RCC_OscConfig+0x5e8>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00b      	beq.n	8002310 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022f8:	4ba3      	ldr	r3, [pc, #652]	@ (8002588 <HAL_RCC_OscConfig+0x5e8>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b08      	cmp	r3, #8
 8002302:	d172      	bne.n	80023ea <HAL_RCC_OscConfig+0x44a>
 8002304:	4ba0      	ldr	r3, [pc, #640]	@ (8002588 <HAL_RCC_OscConfig+0x5e8>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d16c      	bne.n	80023ea <HAL_RCC_OscConfig+0x44a>
 8002310:	2302      	movs	r3, #2
 8002312:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002322:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	095b      	lsrs	r3, r3, #5
 800232e:	b2db      	uxtb	r3, r3
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b01      	cmp	r3, #1
 8002338:	d102      	bne.n	8002340 <HAL_RCC_OscConfig+0x3a0>
 800233a:	4b93      	ldr	r3, [pc, #588]	@ (8002588 <HAL_RCC_OscConfig+0x5e8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	e013      	b.n	8002368 <HAL_RCC_OscConfig+0x3c8>
 8002340:	2302      	movs	r3, #2
 8002342:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002352:	2302      	movs	r3, #2
 8002354:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002358:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002364:	4b88      	ldr	r3, [pc, #544]	@ (8002588 <HAL_RCC_OscConfig+0x5e8>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	2202      	movs	r2, #2
 800236a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800236e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002372:	fa92 f2a2 	rbit	r2, r2
 8002376:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800237a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800237e:	fab2 f282 	clz	r2, r2
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	f042 0220 	orr.w	r2, r2, #32
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	f002 021f 	and.w	r2, r2, #31
 800238e:	2101      	movs	r1, #1
 8002390:	fa01 f202 	lsl.w	r2, r1, r2
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <HAL_RCC_OscConfig+0x410>
 800239a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d002      	beq.n	80023b0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	f000 be2e 	b.w	800300c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b0:	4b75      	ldr	r3, [pc, #468]	@ (8002588 <HAL_RCC_OscConfig+0x5e8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	21f8      	movs	r1, #248	@ 0xf8
 80023c6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80023ce:	fa91 f1a1 	rbit	r1, r1
 80023d2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80023d6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80023da:	fab1 f181 	clz	r1, r1
 80023de:	b2c9      	uxtb	r1, r1
 80023e0:	408b      	lsls	r3, r1
 80023e2:	4969      	ldr	r1, [pc, #420]	@ (8002588 <HAL_RCC_OscConfig+0x5e8>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e8:	e0fd      	b.n	80025e6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8088 	beq.w	800250c <HAL_RCC_OscConfig+0x56c>
 80023fc:	2301      	movs	r3, #1
 80023fe:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800240e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800241c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	461a      	mov	r2, r3
 8002424:	2301      	movs	r3, #1
 8002426:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7ff fa24 	bl	8001874 <HAL_GetTick>
 800242c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002432:	f7ff fa1f 	bl	8001874 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d902      	bls.n	8002448 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	f000 bde2 	b.w	800300c <HAL_RCC_OscConfig+0x106c>
 8002448:	2302      	movs	r3, #2
 800244a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800245a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d102      	bne.n	8002478 <HAL_RCC_OscConfig+0x4d8>
 8002472:	4b45      	ldr	r3, [pc, #276]	@ (8002588 <HAL_RCC_OscConfig+0x5e8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	e013      	b.n	80024a0 <HAL_RCC_OscConfig+0x500>
 8002478:	2302      	movs	r3, #2
 800247a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800248a:	2302      	movs	r3, #2
 800248c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002490:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800249c:	4b3a      	ldr	r3, [pc, #232]	@ (8002588 <HAL_RCC_OscConfig+0x5e8>)
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	2202      	movs	r2, #2
 80024a2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80024a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80024aa:	fa92 f2a2 	rbit	r2, r2
 80024ae:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80024b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80024b6:	fab2 f282 	clz	r2, r2
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	f042 0220 	orr.w	r2, r2, #32
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	f002 021f 	and.w	r2, r2, #31
 80024c6:	2101      	movs	r1, #1
 80024c8:	fa01 f202 	lsl.w	r2, r1, r2
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0af      	beq.n	8002432 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002588 <HAL_RCC_OscConfig+0x5e8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	21f8      	movs	r1, #248	@ 0xf8
 80024e8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80024f0:	fa91 f1a1 	rbit	r1, r1
 80024f4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80024f8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80024fc:	fab1 f181 	clz	r1, r1
 8002500:	b2c9      	uxtb	r1, r1
 8002502:	408b      	lsls	r3, r1
 8002504:	4920      	ldr	r1, [pc, #128]	@ (8002588 <HAL_RCC_OscConfig+0x5e8>)
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
 800250a:	e06c      	b.n	80025e6 <HAL_RCC_OscConfig+0x646>
 800250c:	2301      	movs	r3, #1
 800250e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800251e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800252c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	461a      	mov	r2, r3
 8002534:	2300      	movs	r3, #0
 8002536:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff f99c 	bl	8001874 <HAL_GetTick>
 800253c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002540:	e00a      	b.n	8002558 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002542:	f7ff f997 	bl	8001874 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d902      	bls.n	8002558 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	f000 bd5a 	b.w	800300c <HAL_RCC_OscConfig+0x106c>
 8002558:	2302      	movs	r3, #2
 800255a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800256a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d104      	bne.n	800258c <HAL_RCC_OscConfig+0x5ec>
 8002582:	4b01      	ldr	r3, [pc, #4]	@ (8002588 <HAL_RCC_OscConfig+0x5e8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	e015      	b.n	80025b4 <HAL_RCC_OscConfig+0x614>
 8002588:	40021000 	.word	0x40021000
 800258c:	2302      	movs	r3, #2
 800258e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800259e:	2302      	movs	r3, #2
 80025a0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80025a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80025b0:	4bc8      	ldr	r3, [pc, #800]	@ (80028d4 <HAL_RCC_OscConfig+0x934>)
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	2202      	movs	r2, #2
 80025b6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80025ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80025be:	fa92 f2a2 	rbit	r2, r2
 80025c2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80025c6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80025ca:	fab2 f282 	clz	r2, r2
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	f042 0220 	orr.w	r2, r2, #32
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	f002 021f 	and.w	r2, r2, #31
 80025da:	2101      	movs	r1, #1
 80025dc:	fa01 f202 	lsl.w	r2, r1, r2
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1ad      	bne.n	8002542 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8110 	beq.w	800281c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002600:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d079      	beq.n	8002700 <HAL_RCC_OscConfig+0x760>
 800260c:	2301      	movs	r3, #1
 800260e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800261e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	4bab      	ldr	r3, [pc, #684]	@ (80028d8 <HAL_RCC_OscConfig+0x938>)
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	461a      	mov	r2, r3
 8002632:	2301      	movs	r3, #1
 8002634:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002636:	f7ff f91d 	bl	8001874 <HAL_GetTick>
 800263a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263e:	e00a      	b.n	8002656 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002640:	f7ff f918 	bl	8001874 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d902      	bls.n	8002656 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	f000 bcdb 	b.w	800300c <HAL_RCC_OscConfig+0x106c>
 8002656:	2302      	movs	r3, #2
 8002658:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002670:	2202      	movs	r2, #2
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002678:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	fa93 f2a3 	rbit	r2, r3
 8002682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002686:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002694:	2202      	movs	r2, #2
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	fa93 f2a3 	rbit	r2, r3
 80026a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b0:	4b88      	ldr	r3, [pc, #544]	@ (80028d4 <HAL_RCC_OscConfig+0x934>)
 80026b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80026bc:	2102      	movs	r1, #2
 80026be:	6019      	str	r1, [r3, #0]
 80026c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	fa93 f1a3 	rbit	r1, r3
 80026ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026d6:	6019      	str	r1, [r3, #0]
  return result;
 80026d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	2101      	movs	r1, #1
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0a0      	beq.n	8002640 <HAL_RCC_OscConfig+0x6a0>
 80026fe:	e08d      	b.n	800281c <HAL_RCC_OscConfig+0x87c>
 8002700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002704:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002708:	2201      	movs	r2, #1
 800270a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002710:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	fa93 f2a3 	rbit	r2, r3
 800271a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002722:	601a      	str	r2, [r3, #0]
  return result;
 8002724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002728:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800272c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	461a      	mov	r2, r3
 8002736:	4b68      	ldr	r3, [pc, #416]	@ (80028d8 <HAL_RCC_OscConfig+0x938>)
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	461a      	mov	r2, r3
 800273e:	2300      	movs	r3, #0
 8002740:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002742:	f7ff f897 	bl	8001874 <HAL_GetTick>
 8002746:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274a:	e00a      	b.n	8002762 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800274c:	f7ff f892 	bl	8001874 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d902      	bls.n	8002762 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	f000 bc55 	b.w	800300c <HAL_RCC_OscConfig+0x106c>
 8002762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002766:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800276a:	2202      	movs	r2, #2
 800276c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002772:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	fa93 f2a3 	rbit	r2, r3
 800277c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002780:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800278e:	2202      	movs	r2, #2
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002796:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	fa93 f2a3 	rbit	r2, r3
 80027a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027b2:	2202      	movs	r2, #2
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	fa93 f2a3 	rbit	r2, r3
 80027c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ce:	4b41      	ldr	r3, [pc, #260]	@ (80028d4 <HAL_RCC_OscConfig+0x934>)
 80027d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027da:	2102      	movs	r1, #2
 80027dc:	6019      	str	r1, [r3, #0]
 80027de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	fa93 f1a3 	rbit	r1, r3
 80027ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027f4:	6019      	str	r1, [r3, #0]
  return result;
 80027f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	2101      	movs	r1, #1
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d197      	bne.n	800274c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002820:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 81a1 	beq.w	8002b74 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002838:	4b26      	ldr	r3, [pc, #152]	@ (80028d4 <HAL_RCC_OscConfig+0x934>)
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d116      	bne.n	8002872 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002844:	4b23      	ldr	r3, [pc, #140]	@ (80028d4 <HAL_RCC_OscConfig+0x934>)
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	4a22      	ldr	r2, [pc, #136]	@ (80028d4 <HAL_RCC_OscConfig+0x934>)
 800284a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800284e:	61d3      	str	r3, [r2, #28]
 8002850:	4b20      	ldr	r3, [pc, #128]	@ (80028d4 <HAL_RCC_OscConfig+0x934>)
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002866:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800286a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800286c:	2301      	movs	r3, #1
 800286e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002872:	4b1a      	ldr	r3, [pc, #104]	@ (80028dc <HAL_RCC_OscConfig+0x93c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d11a      	bne.n	80028b4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287e:	4b17      	ldr	r3, [pc, #92]	@ (80028dc <HAL_RCC_OscConfig+0x93c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a16      	ldr	r2, [pc, #88]	@ (80028dc <HAL_RCC_OscConfig+0x93c>)
 8002884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002888:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288a:	f7fe fff3 	bl	8001874 <HAL_GetTick>
 800288e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002892:	e009      	b.n	80028a8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002894:	f7fe ffee 	bl	8001874 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b64      	cmp	r3, #100	@ 0x64
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e3b1      	b.n	800300c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a8:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <HAL_RCC_OscConfig+0x93c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0ef      	beq.n	8002894 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d10d      	bne.n	80028e0 <HAL_RCC_OscConfig+0x940>
 80028c4:	4b03      	ldr	r3, [pc, #12]	@ (80028d4 <HAL_RCC_OscConfig+0x934>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	4a02      	ldr	r2, [pc, #8]	@ (80028d4 <HAL_RCC_OscConfig+0x934>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6213      	str	r3, [r2, #32]
 80028d0:	e03c      	b.n	800294c <HAL_RCC_OscConfig+0x9ac>
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000
 80028d8:	10908120 	.word	0x10908120
 80028dc:	40007000 	.word	0x40007000
 80028e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10c      	bne.n	800290a <HAL_RCC_OscConfig+0x96a>
 80028f0:	4bc1      	ldr	r3, [pc, #772]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4ac0      	ldr	r2, [pc, #768]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	6213      	str	r3, [r2, #32]
 80028fc:	4bbe      	ldr	r3, [pc, #760]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4abd      	ldr	r2, [pc, #756]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 8002902:	f023 0304 	bic.w	r3, r3, #4
 8002906:	6213      	str	r3, [r2, #32]
 8002908:	e020      	b.n	800294c <HAL_RCC_OscConfig+0x9ac>
 800290a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	2b05      	cmp	r3, #5
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0x994>
 800291a:	4bb7      	ldr	r3, [pc, #732]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4ab6      	ldr	r2, [pc, #728]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	6213      	str	r3, [r2, #32]
 8002926:	4bb4      	ldr	r3, [pc, #720]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4ab3      	ldr	r2, [pc, #716]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6213      	str	r3, [r2, #32]
 8002932:	e00b      	b.n	800294c <HAL_RCC_OscConfig+0x9ac>
 8002934:	4bb0      	ldr	r3, [pc, #704]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	4aaf      	ldr	r2, [pc, #700]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	6213      	str	r3, [r2, #32]
 8002940:	4bad      	ldr	r3, [pc, #692]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4aac      	ldr	r2, [pc, #688]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 8002946:	f023 0304 	bic.w	r3, r3, #4
 800294a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800294c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002950:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8081 	beq.w	8002a60 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295e:	f7fe ff89 	bl	8001874 <HAL_GetTick>
 8002962:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002966:	e00b      	b.n	8002980 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002968:	f7fe ff84 	bl	8001874 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002978:	4293      	cmp	r3, r2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e345      	b.n	800300c <HAL_RCC_OscConfig+0x106c>
 8002980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002984:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002988:	2202      	movs	r2, #2
 800298a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002990:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	fa93 f2a3 	rbit	r2, r3
 800299a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029ac:	2202      	movs	r2, #2
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	fa93 f2a3 	rbit	r2, r3
 80029be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029c6:	601a      	str	r2, [r3, #0]
  return result;
 80029c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029cc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	095b      	lsrs	r3, r3, #5
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f043 0302 	orr.w	r3, r3, #2
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d102      	bne.n	80029ec <HAL_RCC_OscConfig+0xa4c>
 80029e6:	4b84      	ldr	r3, [pc, #528]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	e013      	b.n	8002a14 <HAL_RCC_OscConfig+0xa74>
 80029ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80029f4:	2202      	movs	r2, #2
 80029f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	fa93 f2a3 	rbit	r2, r3
 8002a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	4b79      	ldr	r3, [pc, #484]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a18:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	6011      	str	r1, [r2, #0]
 8002a20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a24:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	fa92 f1a2 	rbit	r1, r2
 8002a2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a32:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a36:	6011      	str	r1, [r2, #0]
  return result;
 8002a38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a3c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	fab2 f282 	clz	r2, r2
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	f002 021f 	and.w	r2, r2, #31
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f202 	lsl.w	r2, r1, r2
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d084      	beq.n	8002968 <HAL_RCC_OscConfig+0x9c8>
 8002a5e:	e07f      	b.n	8002b60 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a60:	f7fe ff08 	bl	8001874 <HAL_GetTick>
 8002a64:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a68:	e00b      	b.n	8002a82 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7fe ff03 	bl	8001874 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e2c4      	b.n	800300c <HAL_RCC_OscConfig+0x106c>
 8002a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a86:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a92:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	fa93 f2a3 	rbit	r2, r3
 8002a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aaa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002aae:	2202      	movs	r2, #2
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	fa93 f2a3 	rbit	r2, r3
 8002ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ac8:	601a      	str	r2, [r3, #0]
  return result;
 8002aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ace:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ad2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f043 0302 	orr.w	r3, r3, #2
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d102      	bne.n	8002aee <HAL_RCC_OscConfig+0xb4e>
 8002ae8:	4b43      	ldr	r3, [pc, #268]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	e013      	b.n	8002b16 <HAL_RCC_OscConfig+0xb76>
 8002aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002af6:	2202      	movs	r2, #2
 8002af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	fa93 f2a3 	rbit	r2, r3
 8002b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	4b39      	ldr	r3, [pc, #228]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b1a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002b1e:	2102      	movs	r1, #2
 8002b20:	6011      	str	r1, [r2, #0]
 8002b22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b26:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	fa92 f1a2 	rbit	r1, r2
 8002b30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b34:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b38:	6011      	str	r1, [r2, #0]
  return result;
 8002b3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b3e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	fab2 f282 	clz	r2, r2
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	f002 021f 	and.w	r2, r2, #31
 8002b54:	2101      	movs	r1, #1
 8002b56:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d184      	bne.n	8002a6a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b60:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d105      	bne.n	8002b74 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b68:	4b23      	ldr	r3, [pc, #140]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	4a22      	ldr	r2, [pc, #136]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 8002b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 8242 	beq.w	800300a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b86:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf8 <HAL_RCC_OscConfig+0xc58>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	f000 8213 	beq.w	8002fba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	f040 8162 	bne.w	8002e6a <HAL_RCC_OscConfig+0xeca>
 8002ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002baa:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002bae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	fa93 f2a3 	rbit	r2, r3
 8002bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002bca:	601a      	str	r2, [r3, #0]
  return result;
 8002bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002bd4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002be0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	461a      	mov	r2, r3
 8002be8:	2300      	movs	r3, #0
 8002bea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fe fe42 	bl	8001874 <HAL_GetTick>
 8002bf0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf4:	e00c      	b.n	8002c10 <HAL_RCC_OscConfig+0xc70>
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7fe fe3a 	bl	8001874 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e1fd      	b.n	800300c <HAL_RCC_OscConfig+0x106c>
 8002c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c14:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c22:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	fa93 f2a3 	rbit	r2, r3
 8002c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c30:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c34:	601a      	str	r2, [r3, #0]
  return result;
 8002c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c3e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d102      	bne.n	8002c5a <HAL_RCC_OscConfig+0xcba>
 8002c54:	4bb0      	ldr	r3, [pc, #704]	@ (8002f18 <HAL_RCC_OscConfig+0xf78>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	e027      	b.n	8002caa <HAL_RCC_OscConfig+0xd0a>
 8002c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	fa93 f2a3 	rbit	r2, r3
 8002c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c84:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002c88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c92:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	fa93 f2a3 	rbit	r2, r3
 8002c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	4b9c      	ldr	r3, [pc, #624]	@ (8002f18 <HAL_RCC_OscConfig+0xf78>)
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cae:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002cb2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002cb6:	6011      	str	r1, [r2, #0]
 8002cb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cbc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	fa92 f1a2 	rbit	r1, r2
 8002cc6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cca:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002cce:	6011      	str	r1, [r2, #0]
  return result;
 8002cd0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cd4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	fab2 f282 	clz	r2, r2
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	f042 0220 	orr.w	r2, r2, #32
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	f002 021f 	and.w	r2, r2, #31
 8002cea:	2101      	movs	r1, #1
 8002cec:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d182      	bne.n	8002bfc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf6:	4b88      	ldr	r3, [pc, #544]	@ (8002f18 <HAL_RCC_OscConfig+0xf78>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	430b      	orrs	r3, r1
 8002d18:	497f      	ldr	r1, [pc, #508]	@ (8002f18 <HAL_RCC_OscConfig+0xf78>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]
 8002d1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d22:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002d26:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d30:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	fa93 f2a3 	rbit	r2, r3
 8002d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d42:	601a      	str	r2, [r3, #0]
  return result;
 8002d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d48:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d4c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d58:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2301      	movs	r3, #1
 8002d62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fd86 	bl	8001874 <HAL_GetTick>
 8002d68:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d6c:	e009      	b.n	8002d82 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6e:	f7fe fd81 	bl	8001874 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e144      	b.n	800300c <HAL_RCC_OscConfig+0x106c>
 8002d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d86:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d94:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	fa93 f2a3 	rbit	r2, r3
 8002d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002da6:	601a      	str	r2, [r3, #0]
  return result;
 8002da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dac:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002db0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d102      	bne.n	8002dcc <HAL_RCC_OscConfig+0xe2c>
 8002dc6:	4b54      	ldr	r3, [pc, #336]	@ (8002f18 <HAL_RCC_OscConfig+0xf78>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	e027      	b.n	8002e1c <HAL_RCC_OscConfig+0xe7c>
 8002dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002dd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dde:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	fa93 f2a3 	rbit	r2, r3
 8002de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dec:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002dfa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e04:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	fa93 f2a3 	rbit	r2, r3
 8002e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e12:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	4b3f      	ldr	r3, [pc, #252]	@ (8002f18 <HAL_RCC_OscConfig+0xf78>)
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e20:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002e24:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e28:	6011      	str	r1, [r2, #0]
 8002e2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e2e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	fa92 f1a2 	rbit	r1, r2
 8002e38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e3c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e40:	6011      	str	r1, [r2, #0]
  return result;
 8002e42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e46:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	fab2 f282 	clz	r2, r2
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	f042 0220 	orr.w	r2, r2, #32
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	f002 021f 	and.w	r2, r2, #31
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d082      	beq.n	8002d6e <HAL_RCC_OscConfig+0xdce>
 8002e68:	e0cf      	b.n	800300a <HAL_RCC_OscConfig+0x106a>
 8002e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002e72:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	fa93 f2a3 	rbit	r2, r3
 8002e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002e8e:	601a      	str	r2, [r3, #0]
  return result;
 8002e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e94:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002e98:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ea4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2300      	movs	r3, #0
 8002eae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fce0 	bl	8001874 <HAL_GetTick>
 8002eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb8:	e009      	b.n	8002ece <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eba:	f7fe fcdb 	bl	8001874 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e09e      	b.n	800300c <HAL_RCC_OscConfig+0x106c>
 8002ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ed6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002eda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	fa93 f2a3 	rbit	r2, r3
 8002eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eee:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002ef2:	601a      	str	r2, [r3, #0]
  return result;
 8002ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002efc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d104      	bne.n	8002f1c <HAL_RCC_OscConfig+0xf7c>
 8002f12:	4b01      	ldr	r3, [pc, #4]	@ (8002f18 <HAL_RCC_OscConfig+0xf78>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	e029      	b.n	8002f6c <HAL_RCC_OscConfig+0xfcc>
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f20:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	fa93 f2a3 	rbit	r2, r3
 8002f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f46:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f54:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	fa93 f2a3 	rbit	r2, r3
 8002f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f62:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	4b2b      	ldr	r3, [pc, #172]	@ (8003018 <HAL_RCC_OscConfig+0x1078>)
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f70:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002f74:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f78:	6011      	str	r1, [r2, #0]
 8002f7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f7e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	fa92 f1a2 	rbit	r1, r2
 8002f88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f8c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002f90:	6011      	str	r1, [r2, #0]
  return result;
 8002f92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f96:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	fab2 f282 	clz	r2, r2
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	f042 0220 	orr.w	r2, r2, #32
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	f002 021f 	and.w	r2, r2, #31
 8002fac:	2101      	movs	r1, #1
 8002fae:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d180      	bne.n	8002eba <HAL_RCC_OscConfig+0xf1a>
 8002fb8:	e027      	b.n	800300a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e01e      	b.n	800300c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fce:	4b12      	ldr	r3, [pc, #72]	@ (8003018 <HAL_RCC_OscConfig+0x1078>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002fda:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d10b      	bne.n	8003006 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002fee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002ff2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003002:	429a      	cmp	r2, r3
 8003004:	d001      	beq.n	800300a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000

0800301c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b09e      	sub	sp, #120	@ 0x78
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e162      	b.n	80032fa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003034:	4b90      	ldr	r3, [pc, #576]	@ (8003278 <HAL_RCC_ClockConfig+0x25c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d910      	bls.n	8003064 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b8d      	ldr	r3, [pc, #564]	@ (8003278 <HAL_RCC_ClockConfig+0x25c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 0207 	bic.w	r2, r3, #7
 800304a:	498b      	ldr	r1, [pc, #556]	@ (8003278 <HAL_RCC_ClockConfig+0x25c>)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b89      	ldr	r3, [pc, #548]	@ (8003278 <HAL_RCC_ClockConfig+0x25c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e14a      	b.n	80032fa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003070:	4b82      	ldr	r3, [pc, #520]	@ (800327c <HAL_RCC_ClockConfig+0x260>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	497f      	ldr	r1, [pc, #508]	@ (800327c <HAL_RCC_ClockConfig+0x260>)
 800307e:	4313      	orrs	r3, r2
 8003080:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80dc 	beq.w	8003248 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d13c      	bne.n	8003112 <HAL_RCC_ClockConfig+0xf6>
 8003098:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800309c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80030a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a8:	fab3 f383 	clz	r3, r3
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d102      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xa6>
 80030bc:	4b6f      	ldr	r3, [pc, #444]	@ (800327c <HAL_RCC_ClockConfig+0x260>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	e00f      	b.n	80030e2 <HAL_RCC_ClockConfig+0xc6>
 80030c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030ca:	fa93 f3a3 	rbit	r3, r3
 80030ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80030d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80030d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030d8:	fa93 f3a3 	rbit	r3, r3
 80030dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030de:	4b67      	ldr	r3, [pc, #412]	@ (800327c <HAL_RCC_ClockConfig+0x260>)
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030ea:	fa92 f2a2 	rbit	r2, r2
 80030ee:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80030f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80030f2:	fab2 f282 	clz	r2, r2
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	f042 0220 	orr.w	r2, r2, #32
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	f002 021f 	and.w	r2, r2, #31
 8003102:	2101      	movs	r1, #1
 8003104:	fa01 f202 	lsl.w	r2, r1, r2
 8003108:	4013      	ands	r3, r2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d17b      	bne.n	8003206 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0f3      	b.n	80032fa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d13c      	bne.n	8003194 <HAL_RCC_ClockConfig+0x178>
 800311a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800311e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d102      	bne.n	8003144 <HAL_RCC_ClockConfig+0x128>
 800313e:	4b4f      	ldr	r3, [pc, #316]	@ (800327c <HAL_RCC_ClockConfig+0x260>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	e00f      	b.n	8003164 <HAL_RCC_ClockConfig+0x148>
 8003144:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003148:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	647b      	str	r3, [r7, #68]	@ 0x44
 8003152:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003156:	643b      	str	r3, [r7, #64]	@ 0x40
 8003158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003160:	4b46      	ldr	r3, [pc, #280]	@ (800327c <HAL_RCC_ClockConfig+0x260>)
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003168:	63ba      	str	r2, [r7, #56]	@ 0x38
 800316a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800316c:	fa92 f2a2 	rbit	r2, r2
 8003170:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003172:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003174:	fab2 f282 	clz	r2, r2
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	f042 0220 	orr.w	r2, r2, #32
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	f002 021f 	and.w	r2, r2, #31
 8003184:	2101      	movs	r1, #1
 8003186:	fa01 f202 	lsl.w	r2, r1, r2
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d13a      	bne.n	8003206 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0b2      	b.n	80032fa <HAL_RCC_ClockConfig+0x2de>
 8003194:	2302      	movs	r3, #2
 8003196:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319a:	fa93 f3a3 	rbit	r3, r3
 800319e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80031a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d102      	bne.n	80031bc <HAL_RCC_ClockConfig+0x1a0>
 80031b6:	4b31      	ldr	r3, [pc, #196]	@ (800327c <HAL_RCC_ClockConfig+0x260>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	e00d      	b.n	80031d8 <HAL_RCC_ClockConfig+0x1bc>
 80031bc:	2302      	movs	r3, #2
 80031be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c8:	2302      	movs	r3, #2
 80031ca:	623b      	str	r3, [r7, #32]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	4b29      	ldr	r3, [pc, #164]	@ (800327c <HAL_RCC_ClockConfig+0x260>)
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	2202      	movs	r2, #2
 80031da:	61ba      	str	r2, [r7, #24]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	fa92 f2a2 	rbit	r2, r2
 80031e2:	617a      	str	r2, [r7, #20]
  return result;
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	fab2 f282 	clz	r2, r2
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	f042 0220 	orr.w	r2, r2, #32
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	f002 021f 	and.w	r2, r2, #31
 80031f6:	2101      	movs	r1, #1
 80031f8:	fa01 f202 	lsl.w	r2, r1, r2
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e079      	b.n	80032fa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003206:	4b1d      	ldr	r3, [pc, #116]	@ (800327c <HAL_RCC_ClockConfig+0x260>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f023 0203 	bic.w	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	491a      	ldr	r1, [pc, #104]	@ (800327c <HAL_RCC_ClockConfig+0x260>)
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003218:	f7fe fb2c 	bl	8001874 <HAL_GetTick>
 800321c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321e:	e00a      	b.n	8003236 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003220:	f7fe fb28 	bl	8001874 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e061      	b.n	80032fa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003236:	4b11      	ldr	r3, [pc, #68]	@ (800327c <HAL_RCC_ClockConfig+0x260>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 020c 	and.w	r2, r3, #12
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	429a      	cmp	r2, r3
 8003246:	d1eb      	bne.n	8003220 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003248:	4b0b      	ldr	r3, [pc, #44]	@ (8003278 <HAL_RCC_ClockConfig+0x25c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d214      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003256:	4b08      	ldr	r3, [pc, #32]	@ (8003278 <HAL_RCC_ClockConfig+0x25c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 0207 	bic.w	r2, r3, #7
 800325e:	4906      	ldr	r1, [pc, #24]	@ (8003278 <HAL_RCC_ClockConfig+0x25c>)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003266:	4b04      	ldr	r3, [pc, #16]	@ (8003278 <HAL_RCC_ClockConfig+0x25c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d005      	beq.n	8003280 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e040      	b.n	80032fa <HAL_RCC_ClockConfig+0x2de>
 8003278:	40022000 	.word	0x40022000
 800327c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328c:	4b1d      	ldr	r3, [pc, #116]	@ (8003304 <HAL_RCC_ClockConfig+0x2e8>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	491a      	ldr	r1, [pc, #104]	@ (8003304 <HAL_RCC_ClockConfig+0x2e8>)
 800329a:	4313      	orrs	r3, r2
 800329c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032aa:	4b16      	ldr	r3, [pc, #88]	@ (8003304 <HAL_RCC_ClockConfig+0x2e8>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4912      	ldr	r1, [pc, #72]	@ (8003304 <HAL_RCC_ClockConfig+0x2e8>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032be:	f000 f829 	bl	8003314 <HAL_RCC_GetSysClockFreq>
 80032c2:	4601      	mov	r1, r0
 80032c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003304 <HAL_RCC_ClockConfig+0x2e8>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032cc:	22f0      	movs	r2, #240	@ 0xf0
 80032ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	fa92 f2a2 	rbit	r2, r2
 80032d6:	60fa      	str	r2, [r7, #12]
  return result;
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	fab2 f282 	clz	r2, r2
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	40d3      	lsrs	r3, r2
 80032e2:	4a09      	ldr	r2, [pc, #36]	@ (8003308 <HAL_RCC_ClockConfig+0x2ec>)
 80032e4:	5cd3      	ldrb	r3, [r2, r3]
 80032e6:	fa21 f303 	lsr.w	r3, r1, r3
 80032ea:	4a08      	ldr	r2, [pc, #32]	@ (800330c <HAL_RCC_ClockConfig+0x2f0>)
 80032ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032ee:	4b08      	ldr	r3, [pc, #32]	@ (8003310 <HAL_RCC_ClockConfig+0x2f4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe fa7a 	bl	80017ec <HAL_InitTick>
  
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3778      	adds	r7, #120	@ 0x78
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	08009e78 	.word	0x08009e78
 800330c:	20000000 	.word	0x20000000
 8003310:	20000004 	.word	0x20000004

08003314 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003314:	b480      	push	{r7}
 8003316:	b08b      	sub	sp, #44	@ 0x2c
 8003318:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	2300      	movs	r3, #0
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	2300      	movs	r3, #0
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800332e:	4b29      	ldr	r3, [pc, #164]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	2b04      	cmp	r3, #4
 800333c:	d002      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x30>
 800333e:	2b08      	cmp	r3, #8
 8003340:	d003      	beq.n	800334a <HAL_RCC_GetSysClockFreq+0x36>
 8003342:	e03c      	b.n	80033be <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003344:	4b24      	ldr	r3, [pc, #144]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003346:	623b      	str	r3, [r7, #32]
      break;
 8003348:	e03c      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003350:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003354:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	fa92 f2a2 	rbit	r2, r2
 800335c:	607a      	str	r2, [r7, #4]
  return result;
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	fab2 f282 	clz	r2, r2
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	40d3      	lsrs	r3, r2
 8003368:	4a1c      	ldr	r2, [pc, #112]	@ (80033dc <HAL_RCC_GetSysClockFreq+0xc8>)
 800336a:	5cd3      	ldrb	r3, [r2, r3]
 800336c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800336e:	4b19      	ldr	r3, [pc, #100]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	220f      	movs	r2, #15
 8003378:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	fa92 f2a2 	rbit	r2, r2
 8003380:	60fa      	str	r2, [r7, #12]
  return result;
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	fab2 f282 	clz	r2, r2
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	40d3      	lsrs	r3, r2
 800338c:	4a14      	ldr	r2, [pc, #80]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800338e:	5cd3      	ldrb	r3, [r2, r3]
 8003390:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800339c:	4a0e      	ldr	r2, [pc, #56]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ac:	e004      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	4a0c      	ldr	r2, [pc, #48]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80033b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ba:	623b      	str	r3, [r7, #32]
      break;
 80033bc:	e002      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033be:	4b06      	ldr	r3, [pc, #24]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033c0:	623b      	str	r3, [r7, #32]
      break;
 80033c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c4:	6a3b      	ldr	r3, [r7, #32]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	372c      	adds	r7, #44	@ 0x2c
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000
 80033d8:	007a1200 	.word	0x007a1200
 80033dc:	08009e90 	.word	0x08009e90
 80033e0:	08009ea0 	.word	0x08009ea0
 80033e4:	003d0900 	.word	0x003d0900

080033e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ec:	4b03      	ldr	r3, [pc, #12]	@ (80033fc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000000 	.word	0x20000000

08003400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003406:	f7ff ffef 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 800340a:	4601      	mov	r1, r0
 800340c:	4b0b      	ldr	r3, [pc, #44]	@ (800343c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003414:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003418:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	fa92 f2a2 	rbit	r2, r2
 8003420:	603a      	str	r2, [r7, #0]
  return result;
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	fab2 f282 	clz	r2, r2
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	40d3      	lsrs	r3, r2
 800342c:	4a04      	ldr	r2, [pc, #16]	@ (8003440 <HAL_RCC_GetPCLK1Freq+0x40>)
 800342e:	5cd3      	ldrb	r3, [r2, r3]
 8003430:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40021000 	.word	0x40021000
 8003440:	08009e88 	.word	0x08009e88

08003444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800344a:	f7ff ffcd 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 800344e:	4601      	mov	r1, r0
 8003450:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003458:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800345c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	fa92 f2a2 	rbit	r2, r2
 8003464:	603a      	str	r2, [r7, #0]
  return result;
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	fab2 f282 	clz	r2, r2
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	40d3      	lsrs	r3, r2
 8003470:	4a04      	ldr	r2, [pc, #16]	@ (8003484 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003472:	5cd3      	ldrb	r3, [r2, r3]
 8003474:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40021000 	.word	0x40021000
 8003484:	08009e88 	.word	0x08009e88

08003488 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b092      	sub	sp, #72	@ 0x48
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003498:	2300      	movs	r3, #0
 800349a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80d4 	beq.w	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ac:	4b4e      	ldr	r3, [pc, #312]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10e      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b8:	4b4b      	ldr	r3, [pc, #300]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	4a4a      	ldr	r2, [pc, #296]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034c2:	61d3      	str	r3, [r2, #28]
 80034c4:	4b48      	ldr	r3, [pc, #288]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d6:	4b45      	ldr	r3, [pc, #276]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d118      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034e2:	4b42      	ldr	r3, [pc, #264]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a41      	ldr	r2, [pc, #260]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ee:	f7fe f9c1 	bl	8001874 <HAL_GetTick>
 80034f2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f4:	e008      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f6:	f7fe f9bd 	bl	8001874 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b64      	cmp	r3, #100	@ 0x64
 8003502:	d901      	bls.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e169      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003508:	4b38      	ldr	r3, [pc, #224]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003514:	4b34      	ldr	r3, [pc, #208]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800351c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800351e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8084 	beq.w	800362e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800352e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003530:	429a      	cmp	r2, r3
 8003532:	d07c      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003534:	4b2c      	ldr	r3, [pc, #176]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800353c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800353e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003542:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003546:	fa93 f3a3 	rbit	r3, r3
 800354a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800354c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800354e:	fab3 f383 	clz	r3, r3
 8003552:	b2db      	uxtb	r3, r3
 8003554:	461a      	mov	r2, r3
 8003556:	4b26      	ldr	r3, [pc, #152]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	461a      	mov	r2, r3
 800355e:	2301      	movs	r3, #1
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003566:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	4b1d      	ldr	r3, [pc, #116]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	461a      	mov	r2, r3
 8003582:	2300      	movs	r3, #0
 8003584:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003586:	4a18      	ldr	r2, [pc, #96]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800358a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800358c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d04b      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fe f96d 	bl	8001874 <HAL_GetTick>
 800359a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fe f969 	bl	8001874 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e113      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x354>
 80035b4:	2302      	movs	r3, #2
 80035b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c0:	2302      	movs	r3, #2
 80035c2:	623b      	str	r3, [r7, #32]
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	fa93 f3a3 	rbit	r3, r3
 80035ca:	61fb      	str	r3, [r7, #28]
  return result;
 80035cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f043 0302 	orr.w	r3, r3, #2
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d108      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80035e2:	4b01      	ldr	r3, [pc, #4]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	e00d      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40007000 	.word	0x40007000
 80035f0:	10908100 	.word	0x10908100
 80035f4:	2302      	movs	r3, #2
 80035f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	fa93 f3a3 	rbit	r3, r3
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	4b78      	ldr	r3, [pc, #480]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	2202      	movs	r2, #2
 8003606:	613a      	str	r2, [r7, #16]
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	fa92 f2a2 	rbit	r2, r2
 800360e:	60fa      	str	r2, [r7, #12]
  return result;
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	fab2 f282 	clz	r2, r2
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	f002 021f 	and.w	r2, r2, #31
 8003622:	2101      	movs	r1, #1
 8003624:	fa01 f202 	lsl.w	r2, r1, r2
 8003628:	4013      	ands	r3, r2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0b7      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800362e:	4b6d      	ldr	r3, [pc, #436]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	496a      	ldr	r1, [pc, #424]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800363c:	4313      	orrs	r3, r2
 800363e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003640:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003644:	2b01      	cmp	r3, #1
 8003646:	d105      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003648:	4b66      	ldr	r3, [pc, #408]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	4a65      	ldr	r2, [pc, #404]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800364e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003652:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003660:	4b60      	ldr	r3, [pc, #384]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003664:	f023 0203 	bic.w	r2, r3, #3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	495d      	ldr	r1, [pc, #372]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800366e:	4313      	orrs	r3, r2
 8003670:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d008      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800367e:	4b59      	ldr	r3, [pc, #356]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	4956      	ldr	r1, [pc, #344]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800368c:	4313      	orrs	r3, r2
 800368e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800369c:	4b51      	ldr	r3, [pc, #324]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800369e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	494e      	ldr	r1, [pc, #312]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ba:	4b4a      	ldr	r3, [pc, #296]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	f023 0210 	bic.w	r2, r3, #16
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	4947      	ldr	r1, [pc, #284]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80036d8:	4b42      	ldr	r3, [pc, #264]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e4:	493f      	ldr	r1, [pc, #252]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d008      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036f6:	4b3b      	ldr	r3, [pc, #236]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fa:	f023 0220 	bic.w	r2, r3, #32
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	4938      	ldr	r1, [pc, #224]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003704:	4313      	orrs	r3, r2
 8003706:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003714:	4b33      	ldr	r3, [pc, #204]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003718:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	4930      	ldr	r1, [pc, #192]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003722:	4313      	orrs	r3, r2
 8003724:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003732:	4b2c      	ldr	r3, [pc, #176]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003736:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	4929      	ldr	r1, [pc, #164]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003740:	4313      	orrs	r3, r2
 8003742:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003750:	4b24      	ldr	r3, [pc, #144]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375c:	4921      	ldr	r1, [pc, #132]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800375e:	4313      	orrs	r3, r2
 8003760:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800376e:	4b1d      	ldr	r3, [pc, #116]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003772:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	491a      	ldr	r1, [pc, #104]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800377c:	4313      	orrs	r3, r2
 800377e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800378c:	4b15      	ldr	r3, [pc, #84]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800378e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003790:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	4912      	ldr	r1, [pc, #72]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800379a:	4313      	orrs	r3, r2
 800379c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80037aa:	4b0e      	ldr	r3, [pc, #56]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b6:	490b      	ldr	r1, [pc, #44]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80037c8:	4b06      	ldr	r3, [pc, #24]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d4:	4903      	ldr	r1, [pc, #12]	@ (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3748      	adds	r7, #72	@ 0x48
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000

080037e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e040      	b.n	800387c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fd fd68 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	@ 0x24
 8003814:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fc00 	bl	800402c <UART_SetConfig>
 800382c:	4603      	mov	r3, r0
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e022      	b.n	800387c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fdc8 	bl	80043d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003852:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003862:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fe4f 	bl	8004518 <UART_CheckIdleState>
 800387a:	4603      	mov	r3, r0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	@ 0x28
 8003888:	af02      	add	r7, sp, #8
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003898:	2b20      	cmp	r3, #32
 800389a:	d177      	bne.n	800398c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <HAL_UART_Transmit+0x24>
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e070      	b.n	800398e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2221      	movs	r2, #33	@ 0x21
 80038b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ba:	f7fd ffdb 	bl	8001874 <HAL_GetTick>
 80038be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	88fa      	ldrh	r2, [r7, #6]
 80038c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	88fa      	ldrh	r2, [r7, #6]
 80038cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038d8:	d108      	bne.n	80038ec <HAL_UART_Transmit+0x68>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d104      	bne.n	80038ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	e003      	b.n	80038f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038f4:	e02f      	b.n	8003956 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2200      	movs	r2, #0
 80038fe:	2180      	movs	r1, #128	@ 0x80
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 feb1 	bl	8004668 <UART_WaitOnFlagUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d004      	beq.n	8003916 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e03b      	b.n	800398e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10b      	bne.n	8003934 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	881a      	ldrh	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003928:	b292      	uxth	r2, r2
 800392a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	3302      	adds	r3, #2
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	e007      	b.n	8003944 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	781a      	ldrb	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3301      	adds	r3, #1
 8003942:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1c9      	bne.n	80038f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2200      	movs	r2, #0
 800396a:	2140      	movs	r1, #64	@ 0x40
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fe7b 	bl	8004668 <UART_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e005      	b.n	800398e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	e000      	b.n	800398e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800398c:	2302      	movs	r3, #2
  }
}
 800398e:	4618      	mov	r0, r3
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b08a      	sub	sp, #40	@ 0x28
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	4613      	mov	r3, r2
 80039a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d132      	bne.n	8003a14 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <HAL_UART_Receive_IT+0x24>
 80039b4:	88fb      	ldrh	r3, [r7, #6]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e02b      	b.n	8003a16 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d018      	beq.n	8003a04 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	613b      	str	r3, [r7, #16]
   return(result);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	69f9      	ldr	r1, [r7, #28]
 80039f6:	6a3a      	ldr	r2, [r7, #32]
 80039f8:	e841 2300 	strex	r3, r2, [r1]
 80039fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e6      	bne.n	80039d2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fe94 	bl	8004738 <UART_Start_Receive_IT>
 8003a10:	4603      	mov	r3, r0
 8003a12:	e000      	b.n	8003a16 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
  }
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3728      	adds	r7, #40	@ 0x28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b0ba      	sub	sp, #232	@ 0xe8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003a4a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003a4e:	4013      	ands	r3, r2
 8003a50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003a54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d115      	bne.n	8003a88 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00f      	beq.n	8003a88 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d009      	beq.n	8003a88 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 82ab 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
      }
      return;
 8003a86:	e2a5      	b.n	8003fd4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8117 	beq.w	8003cc0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003aa2:	4b85      	ldr	r3, [pc, #532]	@ (8003cb8 <HAL_UART_IRQHandler+0x298>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 810a 	beq.w	8003cc0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d011      	beq.n	8003adc <HAL_UART_IRQHandler+0xbc>
 8003ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00b      	beq.n	8003adc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ad2:	f043 0201 	orr.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d011      	beq.n	8003b0c <HAL_UART_IRQHandler+0xec>
 8003ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00b      	beq.n	8003b0c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2202      	movs	r2, #2
 8003afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b02:	f043 0204 	orr.w	r2, r3, #4
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d011      	beq.n	8003b3c <HAL_UART_IRQHandler+0x11c>
 8003b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00b      	beq.n	8003b3c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2204      	movs	r2, #4
 8003b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b32:	f043 0202 	orr.w	r2, r3, #2
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d017      	beq.n	8003b78 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00b      	beq.n	8003b78 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2208      	movs	r2, #8
 8003b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b6e:	f043 0208 	orr.w	r2, r3, #8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d012      	beq.n	8003baa <HAL_UART_IRQHandler+0x18a>
 8003b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00c      	beq.n	8003baa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ba0:	f043 0220 	orr.w	r2, r3, #32
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 8211 	beq.w	8003fd8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d007      	beq.n	8003bde <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003be4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf2:	2b40      	cmp	r3, #64	@ 0x40
 8003bf4:	d005      	beq.n	8003c02 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bfa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d04f      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fe4c 	bl	80048a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c12:	2b40      	cmp	r3, #64	@ 0x40
 8003c14:	d141      	bne.n	8003c9a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3308      	adds	r3, #8
 8003c1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1d9      	bne.n	8003c16 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d013      	beq.n	8003c92 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c6e:	4a13      	ldr	r2, [pc, #76]	@ (8003cbc <HAL_UART_IRQHandler+0x29c>)
 8003c70:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fd ffa8 	bl	8001bcc <HAL_DMA_Abort_IT>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d017      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c90:	e00f      	b.n	8003cb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f9b4 	bl	8004000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c98:	e00b      	b.n	8003cb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f9b0 	bl	8004000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca0:	e007      	b.n	8003cb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f9ac 	bl	8004000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003cb0:	e192      	b.n	8003fd8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb2:	bf00      	nop
    return;
 8003cb4:	e190      	b.n	8003fd8 <HAL_UART_IRQHandler+0x5b8>
 8003cb6:	bf00      	nop
 8003cb8:	04000120 	.word	0x04000120
 8003cbc:	08004969 	.word	0x08004969

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	f040 814b 	bne.w	8003f60 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 8144 	beq.w	8003f60 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 813d 	beq.w	8003f60 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2210      	movs	r2, #16
 8003cec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf8:	2b40      	cmp	r3, #64	@ 0x40
 8003cfa:	f040 80b5 	bne.w	8003e68 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8164 	beq.w	8003fdc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	f080 815c 	bcs.w	8003fdc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	f000 8086 	beq.w	8003e46 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d46:	e853 3f00 	ldrex	r3, [r3]
 8003d4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d68:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d70:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1da      	bne.n	8003d3a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3308      	adds	r3, #8
 8003d8a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3308      	adds	r3, #8
 8003da4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003da8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003dac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003db0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003dba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e1      	bne.n	8003d84 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003dd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3308      	adds	r3, #8
 8003de0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003de4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003de6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003dea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003df2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e3      	bne.n	8003dc0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e16:	f023 0310 	bic.w	r3, r3, #16
 8003e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e28:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e2a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e30:	e841 2300 	strex	r3, r2, [r1]
 8003e34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1e4      	bne.n	8003e06 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fd fe8a 	bl	8001b5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2202      	movs	r2, #2
 8003e4a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	4619      	mov	r1, r3
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f8d7 	bl	8004014 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e66:	e0b9      	b.n	8003fdc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80ab 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003e8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 80a6 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003eb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eb8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ebc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ebe:	e841 2300 	strex	r3, r2, [r1]
 8003ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1e4      	bne.n	8003e94 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3308      	adds	r3, #8
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3308      	adds	r3, #8
 8003eea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003eee:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e3      	bne.n	8003eca <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	e853 3f00 	ldrex	r3, [r3]
 8003f22:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 0310 	bic.w	r3, r3, #16
 8003f2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f38:	61fb      	str	r3, [r7, #28]
 8003f3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	69b9      	ldr	r1, [r7, #24]
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	e841 2300 	strex	r3, r2, [r1]
 8003f44:	617b      	str	r3, [r7, #20]
   return(result);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e4      	bne.n	8003f16 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f56:	4619      	mov	r1, r3
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f85b 	bl	8004014 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f5e:	e03f      	b.n	8003fe0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00e      	beq.n	8003f8a <HAL_UART_IRQHandler+0x56a>
 8003f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003f80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fed8 	bl	8004d38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f88:	e02d      	b.n	8003fe6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00e      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d008      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d01c      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	4798      	blx	r3
    }
    return;
 8003fb2:	e017      	b.n	8003fe4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d012      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x5c6>
 8003fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00c      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fce1 	bl	8004994 <UART_EndTransmit_IT>
    return;
 8003fd2:	e008      	b.n	8003fe6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003fd4:	bf00      	nop
 8003fd6:	e006      	b.n	8003fe6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003fd8:	bf00      	nop
 8003fda:	e004      	b.n	8003fe6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003fdc:	bf00      	nop
 8003fde:	e002      	b.n	8003fe6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003fe0:	bf00      	nop
 8003fe2:	e000      	b.n	8003fe6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003fe4:	bf00      	nop
  }

}
 8003fe6:	37e8      	adds	r7, #232	@ 0xe8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800405a:	f023 030c 	bic.w	r3, r3, #12
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	6979      	ldr	r1, [r7, #20]
 8004064:	430b      	orrs	r3, r1
 8004066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	430a      	orrs	r2, r1
 80040a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4aa7      	ldr	r2, [pc, #668]	@ (8004344 <UART_SetConfig+0x318>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d120      	bne.n	80040ee <UART_SetConfig+0xc2>
 80040ac:	4ba6      	ldr	r3, [pc, #664]	@ (8004348 <UART_SetConfig+0x31c>)
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d817      	bhi.n	80040e8 <UART_SetConfig+0xbc>
 80040b8:	a201      	add	r2, pc, #4	@ (adr r2, 80040c0 <UART_SetConfig+0x94>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040d1 	.word	0x080040d1
 80040c4:	080040dd 	.word	0x080040dd
 80040c8:	080040e3 	.word	0x080040e3
 80040cc:	080040d7 	.word	0x080040d7
 80040d0:	2301      	movs	r3, #1
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e0b5      	b.n	8004242 <UART_SetConfig+0x216>
 80040d6:	2302      	movs	r3, #2
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e0b2      	b.n	8004242 <UART_SetConfig+0x216>
 80040dc:	2304      	movs	r3, #4
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e0af      	b.n	8004242 <UART_SetConfig+0x216>
 80040e2:	2308      	movs	r3, #8
 80040e4:	77fb      	strb	r3, [r7, #31]
 80040e6:	e0ac      	b.n	8004242 <UART_SetConfig+0x216>
 80040e8:	2310      	movs	r3, #16
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e0a9      	b.n	8004242 <UART_SetConfig+0x216>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a96      	ldr	r2, [pc, #600]	@ (800434c <UART_SetConfig+0x320>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d124      	bne.n	8004142 <UART_SetConfig+0x116>
 80040f8:	4b93      	ldr	r3, [pc, #588]	@ (8004348 <UART_SetConfig+0x31c>)
 80040fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004100:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004104:	d011      	beq.n	800412a <UART_SetConfig+0xfe>
 8004106:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800410a:	d817      	bhi.n	800413c <UART_SetConfig+0x110>
 800410c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004110:	d011      	beq.n	8004136 <UART_SetConfig+0x10a>
 8004112:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004116:	d811      	bhi.n	800413c <UART_SetConfig+0x110>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <UART_SetConfig+0xf8>
 800411c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004120:	d006      	beq.n	8004130 <UART_SetConfig+0x104>
 8004122:	e00b      	b.n	800413c <UART_SetConfig+0x110>
 8004124:	2300      	movs	r3, #0
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	e08b      	b.n	8004242 <UART_SetConfig+0x216>
 800412a:	2302      	movs	r3, #2
 800412c:	77fb      	strb	r3, [r7, #31]
 800412e:	e088      	b.n	8004242 <UART_SetConfig+0x216>
 8004130:	2304      	movs	r3, #4
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e085      	b.n	8004242 <UART_SetConfig+0x216>
 8004136:	2308      	movs	r3, #8
 8004138:	77fb      	strb	r3, [r7, #31]
 800413a:	e082      	b.n	8004242 <UART_SetConfig+0x216>
 800413c:	2310      	movs	r3, #16
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e07f      	b.n	8004242 <UART_SetConfig+0x216>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a82      	ldr	r2, [pc, #520]	@ (8004350 <UART_SetConfig+0x324>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d124      	bne.n	8004196 <UART_SetConfig+0x16a>
 800414c:	4b7e      	ldr	r3, [pc, #504]	@ (8004348 <UART_SetConfig+0x31c>)
 800414e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004150:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004154:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004158:	d011      	beq.n	800417e <UART_SetConfig+0x152>
 800415a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800415e:	d817      	bhi.n	8004190 <UART_SetConfig+0x164>
 8004160:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004164:	d011      	beq.n	800418a <UART_SetConfig+0x15e>
 8004166:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800416a:	d811      	bhi.n	8004190 <UART_SetConfig+0x164>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <UART_SetConfig+0x14c>
 8004170:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004174:	d006      	beq.n	8004184 <UART_SetConfig+0x158>
 8004176:	e00b      	b.n	8004190 <UART_SetConfig+0x164>
 8004178:	2300      	movs	r3, #0
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e061      	b.n	8004242 <UART_SetConfig+0x216>
 800417e:	2302      	movs	r3, #2
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e05e      	b.n	8004242 <UART_SetConfig+0x216>
 8004184:	2304      	movs	r3, #4
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e05b      	b.n	8004242 <UART_SetConfig+0x216>
 800418a:	2308      	movs	r3, #8
 800418c:	77fb      	strb	r3, [r7, #31]
 800418e:	e058      	b.n	8004242 <UART_SetConfig+0x216>
 8004190:	2310      	movs	r3, #16
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e055      	b.n	8004242 <UART_SetConfig+0x216>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a6e      	ldr	r2, [pc, #440]	@ (8004354 <UART_SetConfig+0x328>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d124      	bne.n	80041ea <UART_SetConfig+0x1be>
 80041a0:	4b69      	ldr	r3, [pc, #420]	@ (8004348 <UART_SetConfig+0x31c>)
 80041a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80041a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041ac:	d011      	beq.n	80041d2 <UART_SetConfig+0x1a6>
 80041ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041b2:	d817      	bhi.n	80041e4 <UART_SetConfig+0x1b8>
 80041b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041b8:	d011      	beq.n	80041de <UART_SetConfig+0x1b2>
 80041ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041be:	d811      	bhi.n	80041e4 <UART_SetConfig+0x1b8>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <UART_SetConfig+0x1a0>
 80041c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041c8:	d006      	beq.n	80041d8 <UART_SetConfig+0x1ac>
 80041ca:	e00b      	b.n	80041e4 <UART_SetConfig+0x1b8>
 80041cc:	2300      	movs	r3, #0
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e037      	b.n	8004242 <UART_SetConfig+0x216>
 80041d2:	2302      	movs	r3, #2
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e034      	b.n	8004242 <UART_SetConfig+0x216>
 80041d8:	2304      	movs	r3, #4
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e031      	b.n	8004242 <UART_SetConfig+0x216>
 80041de:	2308      	movs	r3, #8
 80041e0:	77fb      	strb	r3, [r7, #31]
 80041e2:	e02e      	b.n	8004242 <UART_SetConfig+0x216>
 80041e4:	2310      	movs	r3, #16
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	e02b      	b.n	8004242 <UART_SetConfig+0x216>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a5a      	ldr	r2, [pc, #360]	@ (8004358 <UART_SetConfig+0x32c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d124      	bne.n	800423e <UART_SetConfig+0x212>
 80041f4:	4b54      	ldr	r3, [pc, #336]	@ (8004348 <UART_SetConfig+0x31c>)
 80041f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80041fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004200:	d011      	beq.n	8004226 <UART_SetConfig+0x1fa>
 8004202:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004206:	d817      	bhi.n	8004238 <UART_SetConfig+0x20c>
 8004208:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800420c:	d011      	beq.n	8004232 <UART_SetConfig+0x206>
 800420e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004212:	d811      	bhi.n	8004238 <UART_SetConfig+0x20c>
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <UART_SetConfig+0x1f4>
 8004218:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800421c:	d006      	beq.n	800422c <UART_SetConfig+0x200>
 800421e:	e00b      	b.n	8004238 <UART_SetConfig+0x20c>
 8004220:	2300      	movs	r3, #0
 8004222:	77fb      	strb	r3, [r7, #31]
 8004224:	e00d      	b.n	8004242 <UART_SetConfig+0x216>
 8004226:	2302      	movs	r3, #2
 8004228:	77fb      	strb	r3, [r7, #31]
 800422a:	e00a      	b.n	8004242 <UART_SetConfig+0x216>
 800422c:	2304      	movs	r3, #4
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e007      	b.n	8004242 <UART_SetConfig+0x216>
 8004232:	2308      	movs	r3, #8
 8004234:	77fb      	strb	r3, [r7, #31]
 8004236:	e004      	b.n	8004242 <UART_SetConfig+0x216>
 8004238:	2310      	movs	r3, #16
 800423a:	77fb      	strb	r3, [r7, #31]
 800423c:	e001      	b.n	8004242 <UART_SetConfig+0x216>
 800423e:	2310      	movs	r3, #16
 8004240:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800424a:	d15b      	bne.n	8004304 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800424c:	7ffb      	ldrb	r3, [r7, #31]
 800424e:	2b08      	cmp	r3, #8
 8004250:	d827      	bhi.n	80042a2 <UART_SetConfig+0x276>
 8004252:	a201      	add	r2, pc, #4	@ (adr r2, 8004258 <UART_SetConfig+0x22c>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	0800427d 	.word	0x0800427d
 800425c:	08004285 	.word	0x08004285
 8004260:	0800428d 	.word	0x0800428d
 8004264:	080042a3 	.word	0x080042a3
 8004268:	08004293 	.word	0x08004293
 800426c:	080042a3 	.word	0x080042a3
 8004270:	080042a3 	.word	0x080042a3
 8004274:	080042a3 	.word	0x080042a3
 8004278:	0800429b 	.word	0x0800429b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800427c:	f7ff f8c0 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8004280:	61b8      	str	r0, [r7, #24]
        break;
 8004282:	e013      	b.n	80042ac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004284:	f7ff f8de 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 8004288:	61b8      	str	r0, [r7, #24]
        break;
 800428a:	e00f      	b.n	80042ac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800428c:	4b33      	ldr	r3, [pc, #204]	@ (800435c <UART_SetConfig+0x330>)
 800428e:	61bb      	str	r3, [r7, #24]
        break;
 8004290:	e00c      	b.n	80042ac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004292:	f7ff f83f 	bl	8003314 <HAL_RCC_GetSysClockFreq>
 8004296:	61b8      	str	r0, [r7, #24]
        break;
 8004298:	e008      	b.n	80042ac <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800429a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800429e:	61bb      	str	r3, [r7, #24]
        break;
 80042a0:	e004      	b.n	80042ac <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	77bb      	strb	r3, [r7, #30]
        break;
 80042aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 8082 	beq.w	80043b8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	005a      	lsls	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	085b      	lsrs	r3, r3, #1
 80042be:	441a      	add	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b0f      	cmp	r3, #15
 80042ce:	d916      	bls.n	80042fe <UART_SetConfig+0x2d2>
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d6:	d212      	bcs.n	80042fe <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	f023 030f 	bic.w	r3, r3, #15
 80042e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	89fb      	ldrh	r3, [r7, #14]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	89fa      	ldrh	r2, [r7, #14]
 80042fa:	60da      	str	r2, [r3, #12]
 80042fc:	e05c      	b.n	80043b8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	77bb      	strb	r3, [r7, #30]
 8004302:	e059      	b.n	80043b8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004304:	7ffb      	ldrb	r3, [r7, #31]
 8004306:	2b08      	cmp	r3, #8
 8004308:	d835      	bhi.n	8004376 <UART_SetConfig+0x34a>
 800430a:	a201      	add	r2, pc, #4	@ (adr r2, 8004310 <UART_SetConfig+0x2e4>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	08004335 	.word	0x08004335
 8004314:	0800433d 	.word	0x0800433d
 8004318:	08004361 	.word	0x08004361
 800431c:	08004377 	.word	0x08004377
 8004320:	08004367 	.word	0x08004367
 8004324:	08004377 	.word	0x08004377
 8004328:	08004377 	.word	0x08004377
 800432c:	08004377 	.word	0x08004377
 8004330:	0800436f 	.word	0x0800436f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004334:	f7ff f864 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8004338:	61b8      	str	r0, [r7, #24]
        break;
 800433a:	e021      	b.n	8004380 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800433c:	f7ff f882 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 8004340:	61b8      	str	r0, [r7, #24]
        break;
 8004342:	e01d      	b.n	8004380 <UART_SetConfig+0x354>
 8004344:	40013800 	.word	0x40013800
 8004348:	40021000 	.word	0x40021000
 800434c:	40004400 	.word	0x40004400
 8004350:	40004800 	.word	0x40004800
 8004354:	40004c00 	.word	0x40004c00
 8004358:	40005000 	.word	0x40005000
 800435c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004360:	4b1b      	ldr	r3, [pc, #108]	@ (80043d0 <UART_SetConfig+0x3a4>)
 8004362:	61bb      	str	r3, [r7, #24]
        break;
 8004364:	e00c      	b.n	8004380 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004366:	f7fe ffd5 	bl	8003314 <HAL_RCC_GetSysClockFreq>
 800436a:	61b8      	str	r0, [r7, #24]
        break;
 800436c:	e008      	b.n	8004380 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800436e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004372:	61bb      	str	r3, [r7, #24]
        break;
 8004374:	e004      	b.n	8004380 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	77bb      	strb	r3, [r7, #30]
        break;
 800437e:	bf00      	nop
    }

    if (pclk != 0U)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d018      	beq.n	80043b8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	085a      	lsrs	r2, r3, #1
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	441a      	add	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	fbb2 f3f3 	udiv	r3, r2, r3
 8004398:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b0f      	cmp	r3, #15
 800439e:	d909      	bls.n	80043b4 <UART_SetConfig+0x388>
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a6:	d205      	bcs.n	80043b4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60da      	str	r2, [r3, #12]
 80043b2:	e001      	b.n	80043b8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80043c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	007a1200 	.word	0x007a1200

080043d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01a      	beq.n	80044ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044d2:	d10a      	bne.n	80044ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	605a      	str	r2, [r3, #4]
  }
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b098      	sub	sp, #96	@ 0x60
 800451c:	af02      	add	r7, sp, #8
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004528:	f7fd f9a4 	bl	8001874 <HAL_GetTick>
 800452c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b08      	cmp	r3, #8
 800453a:	d12e      	bne.n	800459a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800453c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004544:	2200      	movs	r2, #0
 8004546:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f88c 	bl	8004668 <UART_WaitOnFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d021      	beq.n	800459a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800455e:	e853 3f00 	ldrex	r3, [r3]
 8004562:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004566:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800456a:	653b      	str	r3, [r7, #80]	@ 0x50
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004574:	647b      	str	r3, [r7, #68]	@ 0x44
 8004576:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800457a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e6      	bne.n	8004556 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e062      	b.n	8004660 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d149      	bne.n	800463c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045b0:	2200      	movs	r2, #0
 80045b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f856 	bl	8004668 <UART_WaitOnFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d03c      	beq.n	800463c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	e853 3f00 	ldrex	r3, [r3]
 80045ce:	623b      	str	r3, [r7, #32]
   return(result);
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80045e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045e8:	e841 2300 	strex	r3, r2, [r1]
 80045ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e6      	bne.n	80045c2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3308      	adds	r3, #8
 80045fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	60fb      	str	r3, [r7, #12]
   return(result);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0301 	bic.w	r3, r3, #1
 800460a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3308      	adds	r3, #8
 8004612:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004614:	61fa      	str	r2, [r7, #28]
 8004616:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	69b9      	ldr	r1, [r7, #24]
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	617b      	str	r3, [r7, #20]
   return(result);
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e5      	bne.n	80045f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e011      	b.n	8004660 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3758      	adds	r7, #88	@ 0x58
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004678:	e049      	b.n	800470e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004680:	d045      	beq.n	800470e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004682:	f7fd f8f7 	bl	8001874 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	429a      	cmp	r2, r3
 8004690:	d302      	bcc.n	8004698 <UART_WaitOnFlagUntilTimeout+0x30>
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e048      	b.n	800472e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d031      	beq.n	800470e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d110      	bne.n	80046da <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2208      	movs	r2, #8
 80046be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f8ed 	bl	80048a0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2208      	movs	r2, #8
 80046ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e029      	b.n	800472e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046e8:	d111      	bne.n	800470e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f8d3 	bl	80048a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e00f      	b.n	800472e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4013      	ands	r3, r2
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	429a      	cmp	r2, r3
 800471c:	bf0c      	ite	eq
 800471e:	2301      	moveq	r3, #1
 8004720:	2300      	movne	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	429a      	cmp	r2, r3
 800472a:	d0a6      	beq.n	800467a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004738:	b480      	push	{r7}
 800473a:	b097      	sub	sp, #92	@ 0x5c
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	4613      	mov	r3, r2
 8004744:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	88fa      	ldrh	r2, [r7, #6]
 8004750:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	88fa      	ldrh	r2, [r7, #6]
 8004758:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800476a:	d10e      	bne.n	800478a <UART_Start_Receive_IT+0x52>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d105      	bne.n	8004780 <UART_Start_Receive_IT+0x48>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800477a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800477e:	e01a      	b.n	80047b6 <UART_Start_Receive_IT+0x7e>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	22ff      	movs	r2, #255	@ 0xff
 8004784:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004788:	e015      	b.n	80047b6 <UART_Start_Receive_IT+0x7e>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10d      	bne.n	80047ae <UART_Start_Receive_IT+0x76>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d104      	bne.n	80047a4 <UART_Start_Receive_IT+0x6c>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	22ff      	movs	r2, #255	@ 0xff
 800479e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80047a2:	e008      	b.n	80047b6 <UART_Start_Receive_IT+0x7e>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	227f      	movs	r2, #127	@ 0x7f
 80047a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80047ac:	e003      	b.n	80047b6 <UART_Start_Receive_IT+0x7e>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2222      	movs	r2, #34	@ 0x22
 80047c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3308      	adds	r3, #8
 80047cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3308      	adds	r3, #8
 80047e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047e6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80047e8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80047ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80047f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1e5      	bne.n	80047c6 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004802:	d107      	bne.n	8004814 <UART_Start_Receive_IT+0xdc>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d103      	bne.n	8004814 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4a22      	ldr	r2, [pc, #136]	@ (8004898 <UART_Start_Receive_IT+0x160>)
 8004810:	669a      	str	r2, [r3, #104]	@ 0x68
 8004812:	e002      	b.n	800481a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4a21      	ldr	r2, [pc, #132]	@ (800489c <UART_Start_Receive_IT+0x164>)
 8004818:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d019      	beq.n	8004856 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004832:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004840:	637b      	str	r3, [r7, #52]	@ 0x34
 8004842:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004846:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800484e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e6      	bne.n	8004822 <UART_Start_Receive_IT+0xea>
 8004854:	e018      	b.n	8004888 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	613b      	str	r3, [r7, #16]
   return(result);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f043 0320 	orr.w	r3, r3, #32
 800486a:	653b      	str	r3, [r7, #80]	@ 0x50
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004874:	623b      	str	r3, [r7, #32]
 8004876:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	69f9      	ldr	r1, [r7, #28]
 800487a:	6a3a      	ldr	r2, [r7, #32]
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	61bb      	str	r3, [r7, #24]
   return(result);
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e6      	bne.n	8004856 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	375c      	adds	r7, #92	@ 0x5c
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	08004b91 	.word	0x08004b91
 800489c:	080049e9 	.word	0x080049e9

080048a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b095      	sub	sp, #84	@ 0x54
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80048c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e6      	bne.n	80048a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3308      	adds	r3, #8
 80048e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	f023 0301 	bic.w	r3, r3, #1
 80048f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3308      	adds	r3, #8
 80048f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004900:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e5      	bne.n	80048da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004912:	2b01      	cmp	r3, #1
 8004914:	d118      	bne.n	8004948 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	60bb      	str	r3, [r7, #8]
   return(result);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f023 0310 	bic.w	r3, r3, #16
 800492a:	647b      	str	r3, [r7, #68]	@ 0x44
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6979      	ldr	r1, [r7, #20]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	613b      	str	r3, [r7, #16]
   return(result);
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e6      	bne.n	8004916 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800495c:	bf00      	nop
 800495e:	3754      	adds	r7, #84	@ 0x54
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7ff fb3a 	bl	8004000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800498c:	bf00      	nop
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	e853 3f00 	ldrex	r3, [r3]
 80049a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	61bb      	str	r3, [r7, #24]
 80049bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6979      	ldr	r1, [r7, #20]
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	613b      	str	r3, [r7, #16]
   return(result);
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e6      	bne.n	800499c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2220      	movs	r2, #32
 80049d2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff fb06 	bl	8003fec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049e0:	bf00      	nop
 80049e2:	3720      	adds	r7, #32
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b09c      	sub	sp, #112	@ 0x70
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80049f6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a00:	2b22      	cmp	r3, #34	@ 0x22
 8004a02:	f040 80b9 	bne.w	8004b78 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004a0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a10:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a14:	b2d9      	uxtb	r1, r3
 8004a16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a20:	400a      	ands	r2, r1
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f040 809c 	bne.w	8004b88 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1e6      	bne.n	8004a50 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3308      	adds	r3, #8
 8004a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8c:	e853 3f00 	ldrex	r3, [r3]
 8004a90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a94:	f023 0301 	bic.w	r3, r3, #1
 8004a98:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004aa2:	647a      	str	r2, [r7, #68]	@ 0x44
 8004aa4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004aa8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e5      	bne.n	8004a82 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d018      	beq.n	8004b0a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004aec:	663b      	str	r3, [r7, #96]	@ 0x60
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004af6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004af8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e6      	bne.n	8004ad8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d12e      	bne.n	8004b70 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f023 0310 	bic.w	r3, r3, #16
 8004b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b36:	61fb      	str	r3, [r7, #28]
 8004b38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	69b9      	ldr	r1, [r7, #24]
 8004b3c:	69fa      	ldr	r2, [r7, #28]
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	617b      	str	r3, [r7, #20]
   return(result);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e6      	bne.n	8004b18 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b10      	cmp	r3, #16
 8004b56:	d103      	bne.n	8004b60 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2210      	movs	r2, #16
 8004b5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b66:	4619      	mov	r1, r3
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff fa53 	bl	8004014 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b6e:	e00b      	b.n	8004b88 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7fc fa67 	bl	8001044 <HAL_UART_RxCpltCallback>
}
 8004b76:	e007      	b.n	8004b88 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0208 	orr.w	r2, r2, #8
 8004b86:	619a      	str	r2, [r3, #24]
}
 8004b88:	bf00      	nop
 8004b8a:	3770      	adds	r7, #112	@ 0x70
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b09c      	sub	sp, #112	@ 0x70
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b9e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ba8:	2b22      	cmp	r3, #34	@ 0x22
 8004baa:	f040 80b9 	bne.w	8004d20 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004bb4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004bbe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004bc2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bcc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd2:	1c9a      	adds	r2, r3, #2
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 809c 	bne.w	8004d30 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c16:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c18:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004c1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004c24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e6      	bne.n	8004bf8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3308      	adds	r3, #8
 8004c30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3c:	f023 0301 	bic.w	r3, r3, #1
 8004c40:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3308      	adds	r3, #8
 8004c48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c4a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e5      	bne.n	8004c2a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d018      	beq.n	8004cb2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	e853 3f00 	ldrex	r3, [r3]
 8004c8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ca0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ca4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e6      	bne.n	8004c80 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d12e      	bne.n	8004d18 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	e853 3f00 	ldrex	r3, [r3]
 8004ccc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f023 0310 	bic.w	r3, r3, #16
 8004cd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cde:	61bb      	str	r3, [r7, #24]
 8004ce0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce2:	6979      	ldr	r1, [r7, #20]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	e841 2300 	strex	r3, r2, [r1]
 8004cea:	613b      	str	r3, [r7, #16]
   return(result);
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1e6      	bne.n	8004cc0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b10      	cmp	r3, #16
 8004cfe:	d103      	bne.n	8004d08 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2210      	movs	r2, #16
 8004d06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff f97f 	bl	8004014 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d16:	e00b      	b.n	8004d30 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7fc f993 	bl	8001044 <HAL_UART_RxCpltCallback>
}
 8004d1e:	e007      	b.n	8004d30 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0208 	orr.w	r2, r2, #8
 8004d2e:	619a      	str	r2, [r3, #24]
}
 8004d30:	bf00      	nop
 8004d32:	3770      	adds	r7, #112	@ 0x70
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <__cvt>:
 8004d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d50:	ec57 6b10 	vmov	r6, r7, d0
 8004d54:	2f00      	cmp	r7, #0
 8004d56:	460c      	mov	r4, r1
 8004d58:	4619      	mov	r1, r3
 8004d5a:	463b      	mov	r3, r7
 8004d5c:	bfbb      	ittet	lt
 8004d5e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004d62:	461f      	movlt	r7, r3
 8004d64:	2300      	movge	r3, #0
 8004d66:	232d      	movlt	r3, #45	@ 0x2d
 8004d68:	700b      	strb	r3, [r1, #0]
 8004d6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d6c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004d70:	4691      	mov	r9, r2
 8004d72:	f023 0820 	bic.w	r8, r3, #32
 8004d76:	bfbc      	itt	lt
 8004d78:	4632      	movlt	r2, r6
 8004d7a:	4616      	movlt	r6, r2
 8004d7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d80:	d005      	beq.n	8004d8e <__cvt+0x42>
 8004d82:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004d86:	d100      	bne.n	8004d8a <__cvt+0x3e>
 8004d88:	3401      	adds	r4, #1
 8004d8a:	2102      	movs	r1, #2
 8004d8c:	e000      	b.n	8004d90 <__cvt+0x44>
 8004d8e:	2103      	movs	r1, #3
 8004d90:	ab03      	add	r3, sp, #12
 8004d92:	9301      	str	r3, [sp, #4]
 8004d94:	ab02      	add	r3, sp, #8
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	ec47 6b10 	vmov	d0, r6, r7
 8004d9c:	4653      	mov	r3, sl
 8004d9e:	4622      	mov	r2, r4
 8004da0:	f001 f992 	bl	80060c8 <_dtoa_r>
 8004da4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004da8:	4605      	mov	r5, r0
 8004daa:	d119      	bne.n	8004de0 <__cvt+0x94>
 8004dac:	f019 0f01 	tst.w	r9, #1
 8004db0:	d00e      	beq.n	8004dd0 <__cvt+0x84>
 8004db2:	eb00 0904 	add.w	r9, r0, r4
 8004db6:	2200      	movs	r2, #0
 8004db8:	2300      	movs	r3, #0
 8004dba:	4630      	mov	r0, r6
 8004dbc:	4639      	mov	r1, r7
 8004dbe:	f7fb fe93 	bl	8000ae8 <__aeabi_dcmpeq>
 8004dc2:	b108      	cbz	r0, 8004dc8 <__cvt+0x7c>
 8004dc4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004dc8:	2230      	movs	r2, #48	@ 0x30
 8004dca:	9b03      	ldr	r3, [sp, #12]
 8004dcc:	454b      	cmp	r3, r9
 8004dce:	d31e      	bcc.n	8004e0e <__cvt+0xc2>
 8004dd0:	9b03      	ldr	r3, [sp, #12]
 8004dd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004dd4:	1b5b      	subs	r3, r3, r5
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	b004      	add	sp, #16
 8004ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004de4:	eb00 0904 	add.w	r9, r0, r4
 8004de8:	d1e5      	bne.n	8004db6 <__cvt+0x6a>
 8004dea:	7803      	ldrb	r3, [r0, #0]
 8004dec:	2b30      	cmp	r3, #48	@ 0x30
 8004dee:	d10a      	bne.n	8004e06 <__cvt+0xba>
 8004df0:	2200      	movs	r2, #0
 8004df2:	2300      	movs	r3, #0
 8004df4:	4630      	mov	r0, r6
 8004df6:	4639      	mov	r1, r7
 8004df8:	f7fb fe76 	bl	8000ae8 <__aeabi_dcmpeq>
 8004dfc:	b918      	cbnz	r0, 8004e06 <__cvt+0xba>
 8004dfe:	f1c4 0401 	rsb	r4, r4, #1
 8004e02:	f8ca 4000 	str.w	r4, [sl]
 8004e06:	f8da 3000 	ldr.w	r3, [sl]
 8004e0a:	4499      	add	r9, r3
 8004e0c:	e7d3      	b.n	8004db6 <__cvt+0x6a>
 8004e0e:	1c59      	adds	r1, r3, #1
 8004e10:	9103      	str	r1, [sp, #12]
 8004e12:	701a      	strb	r2, [r3, #0]
 8004e14:	e7d9      	b.n	8004dca <__cvt+0x7e>

08004e16 <__exponent>:
 8004e16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e18:	2900      	cmp	r1, #0
 8004e1a:	bfba      	itte	lt
 8004e1c:	4249      	neglt	r1, r1
 8004e1e:	232d      	movlt	r3, #45	@ 0x2d
 8004e20:	232b      	movge	r3, #43	@ 0x2b
 8004e22:	2909      	cmp	r1, #9
 8004e24:	7002      	strb	r2, [r0, #0]
 8004e26:	7043      	strb	r3, [r0, #1]
 8004e28:	dd29      	ble.n	8004e7e <__exponent+0x68>
 8004e2a:	f10d 0307 	add.w	r3, sp, #7
 8004e2e:	461d      	mov	r5, r3
 8004e30:	270a      	movs	r7, #10
 8004e32:	461a      	mov	r2, r3
 8004e34:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e38:	fb07 1416 	mls	r4, r7, r6, r1
 8004e3c:	3430      	adds	r4, #48	@ 0x30
 8004e3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e42:	460c      	mov	r4, r1
 8004e44:	2c63      	cmp	r4, #99	@ 0x63
 8004e46:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	dcf1      	bgt.n	8004e32 <__exponent+0x1c>
 8004e4e:	3130      	adds	r1, #48	@ 0x30
 8004e50:	1e94      	subs	r4, r2, #2
 8004e52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e56:	1c41      	adds	r1, r0, #1
 8004e58:	4623      	mov	r3, r4
 8004e5a:	42ab      	cmp	r3, r5
 8004e5c:	d30a      	bcc.n	8004e74 <__exponent+0x5e>
 8004e5e:	f10d 0309 	add.w	r3, sp, #9
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	42ac      	cmp	r4, r5
 8004e66:	bf88      	it	hi
 8004e68:	2300      	movhi	r3, #0
 8004e6a:	3302      	adds	r3, #2
 8004e6c:	4403      	add	r3, r0
 8004e6e:	1a18      	subs	r0, r3, r0
 8004e70:	b003      	add	sp, #12
 8004e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e74:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004e78:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004e7c:	e7ed      	b.n	8004e5a <__exponent+0x44>
 8004e7e:	2330      	movs	r3, #48	@ 0x30
 8004e80:	3130      	adds	r1, #48	@ 0x30
 8004e82:	7083      	strb	r3, [r0, #2]
 8004e84:	70c1      	strb	r1, [r0, #3]
 8004e86:	1d03      	adds	r3, r0, #4
 8004e88:	e7f1      	b.n	8004e6e <__exponent+0x58>
	...

08004e8c <_printf_float>:
 8004e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e90:	b08d      	sub	sp, #52	@ 0x34
 8004e92:	460c      	mov	r4, r1
 8004e94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004e98:	4616      	mov	r6, r2
 8004e9a:	461f      	mov	r7, r3
 8004e9c:	4605      	mov	r5, r0
 8004e9e:	f001 f80d 	bl	8005ebc <_localeconv_r>
 8004ea2:	6803      	ldr	r3, [r0, #0]
 8004ea4:	9304      	str	r3, [sp, #16]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fb f9f2 	bl	8000290 <strlen>
 8004eac:	2300      	movs	r3, #0
 8004eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8004eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8004eb4:	9005      	str	r0, [sp, #20]
 8004eb6:	3307      	adds	r3, #7
 8004eb8:	f023 0307 	bic.w	r3, r3, #7
 8004ebc:	f103 0208 	add.w	r2, r3, #8
 8004ec0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004ec4:	f8d4 b000 	ldr.w	fp, [r4]
 8004ec8:	f8c8 2000 	str.w	r2, [r8]
 8004ecc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ed0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004ed4:	9307      	str	r3, [sp, #28]
 8004ed6:	f8cd 8018 	str.w	r8, [sp, #24]
 8004eda:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004ede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ee2:	4b9c      	ldr	r3, [pc, #624]	@ (8005154 <_printf_float+0x2c8>)
 8004ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee8:	f7fb fe30 	bl	8000b4c <__aeabi_dcmpun>
 8004eec:	bb70      	cbnz	r0, 8004f4c <_printf_float+0xc0>
 8004eee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ef2:	4b98      	ldr	r3, [pc, #608]	@ (8005154 <_printf_float+0x2c8>)
 8004ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef8:	f7fb fe0a 	bl	8000b10 <__aeabi_dcmple>
 8004efc:	bb30      	cbnz	r0, 8004f4c <_printf_float+0xc0>
 8004efe:	2200      	movs	r2, #0
 8004f00:	2300      	movs	r3, #0
 8004f02:	4640      	mov	r0, r8
 8004f04:	4649      	mov	r1, r9
 8004f06:	f7fb fdf9 	bl	8000afc <__aeabi_dcmplt>
 8004f0a:	b110      	cbz	r0, 8004f12 <_printf_float+0x86>
 8004f0c:	232d      	movs	r3, #45	@ 0x2d
 8004f0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f12:	4a91      	ldr	r2, [pc, #580]	@ (8005158 <_printf_float+0x2cc>)
 8004f14:	4b91      	ldr	r3, [pc, #580]	@ (800515c <_printf_float+0x2d0>)
 8004f16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f1a:	bf94      	ite	ls
 8004f1c:	4690      	movls	r8, r2
 8004f1e:	4698      	movhi	r8, r3
 8004f20:	2303      	movs	r3, #3
 8004f22:	6123      	str	r3, [r4, #16]
 8004f24:	f02b 0304 	bic.w	r3, fp, #4
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	f04f 0900 	mov.w	r9, #0
 8004f2e:	9700      	str	r7, [sp, #0]
 8004f30:	4633      	mov	r3, r6
 8004f32:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004f34:	4621      	mov	r1, r4
 8004f36:	4628      	mov	r0, r5
 8004f38:	f000 f9d2 	bl	80052e0 <_printf_common>
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	f040 808d 	bne.w	800505c <_printf_float+0x1d0>
 8004f42:	f04f 30ff 	mov.w	r0, #4294967295
 8004f46:	b00d      	add	sp, #52	@ 0x34
 8004f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	464b      	mov	r3, r9
 8004f50:	4640      	mov	r0, r8
 8004f52:	4649      	mov	r1, r9
 8004f54:	f7fb fdfa 	bl	8000b4c <__aeabi_dcmpun>
 8004f58:	b140      	cbz	r0, 8004f6c <_printf_float+0xe0>
 8004f5a:	464b      	mov	r3, r9
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bfbc      	itt	lt
 8004f60:	232d      	movlt	r3, #45	@ 0x2d
 8004f62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004f66:	4a7e      	ldr	r2, [pc, #504]	@ (8005160 <_printf_float+0x2d4>)
 8004f68:	4b7e      	ldr	r3, [pc, #504]	@ (8005164 <_printf_float+0x2d8>)
 8004f6a:	e7d4      	b.n	8004f16 <_printf_float+0x8a>
 8004f6c:	6863      	ldr	r3, [r4, #4]
 8004f6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004f72:	9206      	str	r2, [sp, #24]
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	d13b      	bne.n	8004ff0 <_printf_float+0x164>
 8004f78:	2306      	movs	r3, #6
 8004f7a:	6063      	str	r3, [r4, #4]
 8004f7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004f80:	2300      	movs	r3, #0
 8004f82:	6022      	str	r2, [r4, #0]
 8004f84:	9303      	str	r3, [sp, #12]
 8004f86:	ab0a      	add	r3, sp, #40	@ 0x28
 8004f88:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004f8c:	ab09      	add	r3, sp, #36	@ 0x24
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	6861      	ldr	r1, [r4, #4]
 8004f92:	ec49 8b10 	vmov	d0, r8, r9
 8004f96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f7ff fed6 	bl	8004d4c <__cvt>
 8004fa0:	9b06      	ldr	r3, [sp, #24]
 8004fa2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004fa4:	2b47      	cmp	r3, #71	@ 0x47
 8004fa6:	4680      	mov	r8, r0
 8004fa8:	d129      	bne.n	8004ffe <_printf_float+0x172>
 8004faa:	1cc8      	adds	r0, r1, #3
 8004fac:	db02      	blt.n	8004fb4 <_printf_float+0x128>
 8004fae:	6863      	ldr	r3, [r4, #4]
 8004fb0:	4299      	cmp	r1, r3
 8004fb2:	dd41      	ble.n	8005038 <_printf_float+0x1ac>
 8004fb4:	f1aa 0a02 	sub.w	sl, sl, #2
 8004fb8:	fa5f fa8a 	uxtb.w	sl, sl
 8004fbc:	3901      	subs	r1, #1
 8004fbe:	4652      	mov	r2, sl
 8004fc0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004fc4:	9109      	str	r1, [sp, #36]	@ 0x24
 8004fc6:	f7ff ff26 	bl	8004e16 <__exponent>
 8004fca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004fcc:	1813      	adds	r3, r2, r0
 8004fce:	2a01      	cmp	r2, #1
 8004fd0:	4681      	mov	r9, r0
 8004fd2:	6123      	str	r3, [r4, #16]
 8004fd4:	dc02      	bgt.n	8004fdc <_printf_float+0x150>
 8004fd6:	6822      	ldr	r2, [r4, #0]
 8004fd8:	07d2      	lsls	r2, r2, #31
 8004fda:	d501      	bpl.n	8004fe0 <_printf_float+0x154>
 8004fdc:	3301      	adds	r3, #1
 8004fde:	6123      	str	r3, [r4, #16]
 8004fe0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0a2      	beq.n	8004f2e <_printf_float+0xa2>
 8004fe8:	232d      	movs	r3, #45	@ 0x2d
 8004fea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fee:	e79e      	b.n	8004f2e <_printf_float+0xa2>
 8004ff0:	9a06      	ldr	r2, [sp, #24]
 8004ff2:	2a47      	cmp	r2, #71	@ 0x47
 8004ff4:	d1c2      	bne.n	8004f7c <_printf_float+0xf0>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1c0      	bne.n	8004f7c <_printf_float+0xf0>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e7bd      	b.n	8004f7a <_printf_float+0xee>
 8004ffe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005002:	d9db      	bls.n	8004fbc <_printf_float+0x130>
 8005004:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005008:	d118      	bne.n	800503c <_printf_float+0x1b0>
 800500a:	2900      	cmp	r1, #0
 800500c:	6863      	ldr	r3, [r4, #4]
 800500e:	dd0b      	ble.n	8005028 <_printf_float+0x19c>
 8005010:	6121      	str	r1, [r4, #16]
 8005012:	b913      	cbnz	r3, 800501a <_printf_float+0x18e>
 8005014:	6822      	ldr	r2, [r4, #0]
 8005016:	07d0      	lsls	r0, r2, #31
 8005018:	d502      	bpl.n	8005020 <_printf_float+0x194>
 800501a:	3301      	adds	r3, #1
 800501c:	440b      	add	r3, r1
 800501e:	6123      	str	r3, [r4, #16]
 8005020:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005022:	f04f 0900 	mov.w	r9, #0
 8005026:	e7db      	b.n	8004fe0 <_printf_float+0x154>
 8005028:	b913      	cbnz	r3, 8005030 <_printf_float+0x1a4>
 800502a:	6822      	ldr	r2, [r4, #0]
 800502c:	07d2      	lsls	r2, r2, #31
 800502e:	d501      	bpl.n	8005034 <_printf_float+0x1a8>
 8005030:	3302      	adds	r3, #2
 8005032:	e7f4      	b.n	800501e <_printf_float+0x192>
 8005034:	2301      	movs	r3, #1
 8005036:	e7f2      	b.n	800501e <_printf_float+0x192>
 8005038:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800503c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800503e:	4299      	cmp	r1, r3
 8005040:	db05      	blt.n	800504e <_printf_float+0x1c2>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	6121      	str	r1, [r4, #16]
 8005046:	07d8      	lsls	r0, r3, #31
 8005048:	d5ea      	bpl.n	8005020 <_printf_float+0x194>
 800504a:	1c4b      	adds	r3, r1, #1
 800504c:	e7e7      	b.n	800501e <_printf_float+0x192>
 800504e:	2900      	cmp	r1, #0
 8005050:	bfd4      	ite	le
 8005052:	f1c1 0202 	rsble	r2, r1, #2
 8005056:	2201      	movgt	r2, #1
 8005058:	4413      	add	r3, r2
 800505a:	e7e0      	b.n	800501e <_printf_float+0x192>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	055a      	lsls	r2, r3, #21
 8005060:	d407      	bmi.n	8005072 <_printf_float+0x1e6>
 8005062:	6923      	ldr	r3, [r4, #16]
 8005064:	4642      	mov	r2, r8
 8005066:	4631      	mov	r1, r6
 8005068:	4628      	mov	r0, r5
 800506a:	47b8      	blx	r7
 800506c:	3001      	adds	r0, #1
 800506e:	d12b      	bne.n	80050c8 <_printf_float+0x23c>
 8005070:	e767      	b.n	8004f42 <_printf_float+0xb6>
 8005072:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005076:	f240 80dd 	bls.w	8005234 <_printf_float+0x3a8>
 800507a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800507e:	2200      	movs	r2, #0
 8005080:	2300      	movs	r3, #0
 8005082:	f7fb fd31 	bl	8000ae8 <__aeabi_dcmpeq>
 8005086:	2800      	cmp	r0, #0
 8005088:	d033      	beq.n	80050f2 <_printf_float+0x266>
 800508a:	4a37      	ldr	r2, [pc, #220]	@ (8005168 <_printf_float+0x2dc>)
 800508c:	2301      	movs	r3, #1
 800508e:	4631      	mov	r1, r6
 8005090:	4628      	mov	r0, r5
 8005092:	47b8      	blx	r7
 8005094:	3001      	adds	r0, #1
 8005096:	f43f af54 	beq.w	8004f42 <_printf_float+0xb6>
 800509a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800509e:	4543      	cmp	r3, r8
 80050a0:	db02      	blt.n	80050a8 <_printf_float+0x21c>
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	07d8      	lsls	r0, r3, #31
 80050a6:	d50f      	bpl.n	80050c8 <_printf_float+0x23c>
 80050a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050ac:	4631      	mov	r1, r6
 80050ae:	4628      	mov	r0, r5
 80050b0:	47b8      	blx	r7
 80050b2:	3001      	adds	r0, #1
 80050b4:	f43f af45 	beq.w	8004f42 <_printf_float+0xb6>
 80050b8:	f04f 0900 	mov.w	r9, #0
 80050bc:	f108 38ff 	add.w	r8, r8, #4294967295
 80050c0:	f104 0a1a 	add.w	sl, r4, #26
 80050c4:	45c8      	cmp	r8, r9
 80050c6:	dc09      	bgt.n	80050dc <_printf_float+0x250>
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	079b      	lsls	r3, r3, #30
 80050cc:	f100 8103 	bmi.w	80052d6 <_printf_float+0x44a>
 80050d0:	68e0      	ldr	r0, [r4, #12]
 80050d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050d4:	4298      	cmp	r0, r3
 80050d6:	bfb8      	it	lt
 80050d8:	4618      	movlt	r0, r3
 80050da:	e734      	b.n	8004f46 <_printf_float+0xba>
 80050dc:	2301      	movs	r3, #1
 80050de:	4652      	mov	r2, sl
 80050e0:	4631      	mov	r1, r6
 80050e2:	4628      	mov	r0, r5
 80050e4:	47b8      	blx	r7
 80050e6:	3001      	adds	r0, #1
 80050e8:	f43f af2b 	beq.w	8004f42 <_printf_float+0xb6>
 80050ec:	f109 0901 	add.w	r9, r9, #1
 80050f0:	e7e8      	b.n	80050c4 <_printf_float+0x238>
 80050f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	dc39      	bgt.n	800516c <_printf_float+0x2e0>
 80050f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005168 <_printf_float+0x2dc>)
 80050fa:	2301      	movs	r3, #1
 80050fc:	4631      	mov	r1, r6
 80050fe:	4628      	mov	r0, r5
 8005100:	47b8      	blx	r7
 8005102:	3001      	adds	r0, #1
 8005104:	f43f af1d 	beq.w	8004f42 <_printf_float+0xb6>
 8005108:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800510c:	ea59 0303 	orrs.w	r3, r9, r3
 8005110:	d102      	bne.n	8005118 <_printf_float+0x28c>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	07d9      	lsls	r1, r3, #31
 8005116:	d5d7      	bpl.n	80050c8 <_printf_float+0x23c>
 8005118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800511c:	4631      	mov	r1, r6
 800511e:	4628      	mov	r0, r5
 8005120:	47b8      	blx	r7
 8005122:	3001      	adds	r0, #1
 8005124:	f43f af0d 	beq.w	8004f42 <_printf_float+0xb6>
 8005128:	f04f 0a00 	mov.w	sl, #0
 800512c:	f104 0b1a 	add.w	fp, r4, #26
 8005130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005132:	425b      	negs	r3, r3
 8005134:	4553      	cmp	r3, sl
 8005136:	dc01      	bgt.n	800513c <_printf_float+0x2b0>
 8005138:	464b      	mov	r3, r9
 800513a:	e793      	b.n	8005064 <_printf_float+0x1d8>
 800513c:	2301      	movs	r3, #1
 800513e:	465a      	mov	r2, fp
 8005140:	4631      	mov	r1, r6
 8005142:	4628      	mov	r0, r5
 8005144:	47b8      	blx	r7
 8005146:	3001      	adds	r0, #1
 8005148:	f43f aefb 	beq.w	8004f42 <_printf_float+0xb6>
 800514c:	f10a 0a01 	add.w	sl, sl, #1
 8005150:	e7ee      	b.n	8005130 <_printf_float+0x2a4>
 8005152:	bf00      	nop
 8005154:	7fefffff 	.word	0x7fefffff
 8005158:	08009eb0 	.word	0x08009eb0
 800515c:	08009eb4 	.word	0x08009eb4
 8005160:	08009eb8 	.word	0x08009eb8
 8005164:	08009ebc 	.word	0x08009ebc
 8005168:	0800a250 	.word	0x0800a250
 800516c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800516e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005172:	4553      	cmp	r3, sl
 8005174:	bfa8      	it	ge
 8005176:	4653      	movge	r3, sl
 8005178:	2b00      	cmp	r3, #0
 800517a:	4699      	mov	r9, r3
 800517c:	dc36      	bgt.n	80051ec <_printf_float+0x360>
 800517e:	f04f 0b00 	mov.w	fp, #0
 8005182:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005186:	f104 021a 	add.w	r2, r4, #26
 800518a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800518c:	9306      	str	r3, [sp, #24]
 800518e:	eba3 0309 	sub.w	r3, r3, r9
 8005192:	455b      	cmp	r3, fp
 8005194:	dc31      	bgt.n	80051fa <_printf_float+0x36e>
 8005196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005198:	459a      	cmp	sl, r3
 800519a:	dc3a      	bgt.n	8005212 <_printf_float+0x386>
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	07da      	lsls	r2, r3, #31
 80051a0:	d437      	bmi.n	8005212 <_printf_float+0x386>
 80051a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a4:	ebaa 0903 	sub.w	r9, sl, r3
 80051a8:	9b06      	ldr	r3, [sp, #24]
 80051aa:	ebaa 0303 	sub.w	r3, sl, r3
 80051ae:	4599      	cmp	r9, r3
 80051b0:	bfa8      	it	ge
 80051b2:	4699      	movge	r9, r3
 80051b4:	f1b9 0f00 	cmp.w	r9, #0
 80051b8:	dc33      	bgt.n	8005222 <_printf_float+0x396>
 80051ba:	f04f 0800 	mov.w	r8, #0
 80051be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051c2:	f104 0b1a 	add.w	fp, r4, #26
 80051c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051c8:	ebaa 0303 	sub.w	r3, sl, r3
 80051cc:	eba3 0309 	sub.w	r3, r3, r9
 80051d0:	4543      	cmp	r3, r8
 80051d2:	f77f af79 	ble.w	80050c8 <_printf_float+0x23c>
 80051d6:	2301      	movs	r3, #1
 80051d8:	465a      	mov	r2, fp
 80051da:	4631      	mov	r1, r6
 80051dc:	4628      	mov	r0, r5
 80051de:	47b8      	blx	r7
 80051e0:	3001      	adds	r0, #1
 80051e2:	f43f aeae 	beq.w	8004f42 <_printf_float+0xb6>
 80051e6:	f108 0801 	add.w	r8, r8, #1
 80051ea:	e7ec      	b.n	80051c6 <_printf_float+0x33a>
 80051ec:	4642      	mov	r2, r8
 80051ee:	4631      	mov	r1, r6
 80051f0:	4628      	mov	r0, r5
 80051f2:	47b8      	blx	r7
 80051f4:	3001      	adds	r0, #1
 80051f6:	d1c2      	bne.n	800517e <_printf_float+0x2f2>
 80051f8:	e6a3      	b.n	8004f42 <_printf_float+0xb6>
 80051fa:	2301      	movs	r3, #1
 80051fc:	4631      	mov	r1, r6
 80051fe:	4628      	mov	r0, r5
 8005200:	9206      	str	r2, [sp, #24]
 8005202:	47b8      	blx	r7
 8005204:	3001      	adds	r0, #1
 8005206:	f43f ae9c 	beq.w	8004f42 <_printf_float+0xb6>
 800520a:	9a06      	ldr	r2, [sp, #24]
 800520c:	f10b 0b01 	add.w	fp, fp, #1
 8005210:	e7bb      	b.n	800518a <_printf_float+0x2fe>
 8005212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005216:	4631      	mov	r1, r6
 8005218:	4628      	mov	r0, r5
 800521a:	47b8      	blx	r7
 800521c:	3001      	adds	r0, #1
 800521e:	d1c0      	bne.n	80051a2 <_printf_float+0x316>
 8005220:	e68f      	b.n	8004f42 <_printf_float+0xb6>
 8005222:	9a06      	ldr	r2, [sp, #24]
 8005224:	464b      	mov	r3, r9
 8005226:	4442      	add	r2, r8
 8005228:	4631      	mov	r1, r6
 800522a:	4628      	mov	r0, r5
 800522c:	47b8      	blx	r7
 800522e:	3001      	adds	r0, #1
 8005230:	d1c3      	bne.n	80051ba <_printf_float+0x32e>
 8005232:	e686      	b.n	8004f42 <_printf_float+0xb6>
 8005234:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005238:	f1ba 0f01 	cmp.w	sl, #1
 800523c:	dc01      	bgt.n	8005242 <_printf_float+0x3b6>
 800523e:	07db      	lsls	r3, r3, #31
 8005240:	d536      	bpl.n	80052b0 <_printf_float+0x424>
 8005242:	2301      	movs	r3, #1
 8005244:	4642      	mov	r2, r8
 8005246:	4631      	mov	r1, r6
 8005248:	4628      	mov	r0, r5
 800524a:	47b8      	blx	r7
 800524c:	3001      	adds	r0, #1
 800524e:	f43f ae78 	beq.w	8004f42 <_printf_float+0xb6>
 8005252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005256:	4631      	mov	r1, r6
 8005258:	4628      	mov	r0, r5
 800525a:	47b8      	blx	r7
 800525c:	3001      	adds	r0, #1
 800525e:	f43f ae70 	beq.w	8004f42 <_printf_float+0xb6>
 8005262:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005266:	2200      	movs	r2, #0
 8005268:	2300      	movs	r3, #0
 800526a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800526e:	f7fb fc3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8005272:	b9c0      	cbnz	r0, 80052a6 <_printf_float+0x41a>
 8005274:	4653      	mov	r3, sl
 8005276:	f108 0201 	add.w	r2, r8, #1
 800527a:	4631      	mov	r1, r6
 800527c:	4628      	mov	r0, r5
 800527e:	47b8      	blx	r7
 8005280:	3001      	adds	r0, #1
 8005282:	d10c      	bne.n	800529e <_printf_float+0x412>
 8005284:	e65d      	b.n	8004f42 <_printf_float+0xb6>
 8005286:	2301      	movs	r3, #1
 8005288:	465a      	mov	r2, fp
 800528a:	4631      	mov	r1, r6
 800528c:	4628      	mov	r0, r5
 800528e:	47b8      	blx	r7
 8005290:	3001      	adds	r0, #1
 8005292:	f43f ae56 	beq.w	8004f42 <_printf_float+0xb6>
 8005296:	f108 0801 	add.w	r8, r8, #1
 800529a:	45d0      	cmp	r8, sl
 800529c:	dbf3      	blt.n	8005286 <_printf_float+0x3fa>
 800529e:	464b      	mov	r3, r9
 80052a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80052a4:	e6df      	b.n	8005066 <_printf_float+0x1da>
 80052a6:	f04f 0800 	mov.w	r8, #0
 80052aa:	f104 0b1a 	add.w	fp, r4, #26
 80052ae:	e7f4      	b.n	800529a <_printf_float+0x40e>
 80052b0:	2301      	movs	r3, #1
 80052b2:	4642      	mov	r2, r8
 80052b4:	e7e1      	b.n	800527a <_printf_float+0x3ee>
 80052b6:	2301      	movs	r3, #1
 80052b8:	464a      	mov	r2, r9
 80052ba:	4631      	mov	r1, r6
 80052bc:	4628      	mov	r0, r5
 80052be:	47b8      	blx	r7
 80052c0:	3001      	adds	r0, #1
 80052c2:	f43f ae3e 	beq.w	8004f42 <_printf_float+0xb6>
 80052c6:	f108 0801 	add.w	r8, r8, #1
 80052ca:	68e3      	ldr	r3, [r4, #12]
 80052cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80052ce:	1a5b      	subs	r3, r3, r1
 80052d0:	4543      	cmp	r3, r8
 80052d2:	dcf0      	bgt.n	80052b6 <_printf_float+0x42a>
 80052d4:	e6fc      	b.n	80050d0 <_printf_float+0x244>
 80052d6:	f04f 0800 	mov.w	r8, #0
 80052da:	f104 0919 	add.w	r9, r4, #25
 80052de:	e7f4      	b.n	80052ca <_printf_float+0x43e>

080052e0 <_printf_common>:
 80052e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e4:	4616      	mov	r6, r2
 80052e6:	4698      	mov	r8, r3
 80052e8:	688a      	ldr	r2, [r1, #8]
 80052ea:	690b      	ldr	r3, [r1, #16]
 80052ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052f0:	4293      	cmp	r3, r2
 80052f2:	bfb8      	it	lt
 80052f4:	4613      	movlt	r3, r2
 80052f6:	6033      	str	r3, [r6, #0]
 80052f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052fc:	4607      	mov	r7, r0
 80052fe:	460c      	mov	r4, r1
 8005300:	b10a      	cbz	r2, 8005306 <_printf_common+0x26>
 8005302:	3301      	adds	r3, #1
 8005304:	6033      	str	r3, [r6, #0]
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	0699      	lsls	r1, r3, #26
 800530a:	bf42      	ittt	mi
 800530c:	6833      	ldrmi	r3, [r6, #0]
 800530e:	3302      	addmi	r3, #2
 8005310:	6033      	strmi	r3, [r6, #0]
 8005312:	6825      	ldr	r5, [r4, #0]
 8005314:	f015 0506 	ands.w	r5, r5, #6
 8005318:	d106      	bne.n	8005328 <_printf_common+0x48>
 800531a:	f104 0a19 	add.w	sl, r4, #25
 800531e:	68e3      	ldr	r3, [r4, #12]
 8005320:	6832      	ldr	r2, [r6, #0]
 8005322:	1a9b      	subs	r3, r3, r2
 8005324:	42ab      	cmp	r3, r5
 8005326:	dc26      	bgt.n	8005376 <_printf_common+0x96>
 8005328:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800532c:	6822      	ldr	r2, [r4, #0]
 800532e:	3b00      	subs	r3, #0
 8005330:	bf18      	it	ne
 8005332:	2301      	movne	r3, #1
 8005334:	0692      	lsls	r2, r2, #26
 8005336:	d42b      	bmi.n	8005390 <_printf_common+0xb0>
 8005338:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800533c:	4641      	mov	r1, r8
 800533e:	4638      	mov	r0, r7
 8005340:	47c8      	blx	r9
 8005342:	3001      	adds	r0, #1
 8005344:	d01e      	beq.n	8005384 <_printf_common+0xa4>
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	6922      	ldr	r2, [r4, #16]
 800534a:	f003 0306 	and.w	r3, r3, #6
 800534e:	2b04      	cmp	r3, #4
 8005350:	bf02      	ittt	eq
 8005352:	68e5      	ldreq	r5, [r4, #12]
 8005354:	6833      	ldreq	r3, [r6, #0]
 8005356:	1aed      	subeq	r5, r5, r3
 8005358:	68a3      	ldr	r3, [r4, #8]
 800535a:	bf0c      	ite	eq
 800535c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005360:	2500      	movne	r5, #0
 8005362:	4293      	cmp	r3, r2
 8005364:	bfc4      	itt	gt
 8005366:	1a9b      	subgt	r3, r3, r2
 8005368:	18ed      	addgt	r5, r5, r3
 800536a:	2600      	movs	r6, #0
 800536c:	341a      	adds	r4, #26
 800536e:	42b5      	cmp	r5, r6
 8005370:	d11a      	bne.n	80053a8 <_printf_common+0xc8>
 8005372:	2000      	movs	r0, #0
 8005374:	e008      	b.n	8005388 <_printf_common+0xa8>
 8005376:	2301      	movs	r3, #1
 8005378:	4652      	mov	r2, sl
 800537a:	4641      	mov	r1, r8
 800537c:	4638      	mov	r0, r7
 800537e:	47c8      	blx	r9
 8005380:	3001      	adds	r0, #1
 8005382:	d103      	bne.n	800538c <_printf_common+0xac>
 8005384:	f04f 30ff 	mov.w	r0, #4294967295
 8005388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800538c:	3501      	adds	r5, #1
 800538e:	e7c6      	b.n	800531e <_printf_common+0x3e>
 8005390:	18e1      	adds	r1, r4, r3
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	2030      	movs	r0, #48	@ 0x30
 8005396:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800539a:	4422      	add	r2, r4
 800539c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053a4:	3302      	adds	r3, #2
 80053a6:	e7c7      	b.n	8005338 <_printf_common+0x58>
 80053a8:	2301      	movs	r3, #1
 80053aa:	4622      	mov	r2, r4
 80053ac:	4641      	mov	r1, r8
 80053ae:	4638      	mov	r0, r7
 80053b0:	47c8      	blx	r9
 80053b2:	3001      	adds	r0, #1
 80053b4:	d0e6      	beq.n	8005384 <_printf_common+0xa4>
 80053b6:	3601      	adds	r6, #1
 80053b8:	e7d9      	b.n	800536e <_printf_common+0x8e>
	...

080053bc <_printf_i>:
 80053bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053c0:	7e0f      	ldrb	r7, [r1, #24]
 80053c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053c4:	2f78      	cmp	r7, #120	@ 0x78
 80053c6:	4691      	mov	r9, r2
 80053c8:	4680      	mov	r8, r0
 80053ca:	460c      	mov	r4, r1
 80053cc:	469a      	mov	sl, r3
 80053ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053d2:	d807      	bhi.n	80053e4 <_printf_i+0x28>
 80053d4:	2f62      	cmp	r7, #98	@ 0x62
 80053d6:	d80a      	bhi.n	80053ee <_printf_i+0x32>
 80053d8:	2f00      	cmp	r7, #0
 80053da:	f000 80d2 	beq.w	8005582 <_printf_i+0x1c6>
 80053de:	2f58      	cmp	r7, #88	@ 0x58
 80053e0:	f000 80b9 	beq.w	8005556 <_printf_i+0x19a>
 80053e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053ec:	e03a      	b.n	8005464 <_printf_i+0xa8>
 80053ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053f2:	2b15      	cmp	r3, #21
 80053f4:	d8f6      	bhi.n	80053e4 <_printf_i+0x28>
 80053f6:	a101      	add	r1, pc, #4	@ (adr r1, 80053fc <_printf_i+0x40>)
 80053f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053fc:	08005455 	.word	0x08005455
 8005400:	08005469 	.word	0x08005469
 8005404:	080053e5 	.word	0x080053e5
 8005408:	080053e5 	.word	0x080053e5
 800540c:	080053e5 	.word	0x080053e5
 8005410:	080053e5 	.word	0x080053e5
 8005414:	08005469 	.word	0x08005469
 8005418:	080053e5 	.word	0x080053e5
 800541c:	080053e5 	.word	0x080053e5
 8005420:	080053e5 	.word	0x080053e5
 8005424:	080053e5 	.word	0x080053e5
 8005428:	08005569 	.word	0x08005569
 800542c:	08005493 	.word	0x08005493
 8005430:	08005523 	.word	0x08005523
 8005434:	080053e5 	.word	0x080053e5
 8005438:	080053e5 	.word	0x080053e5
 800543c:	0800558b 	.word	0x0800558b
 8005440:	080053e5 	.word	0x080053e5
 8005444:	08005493 	.word	0x08005493
 8005448:	080053e5 	.word	0x080053e5
 800544c:	080053e5 	.word	0x080053e5
 8005450:	0800552b 	.word	0x0800552b
 8005454:	6833      	ldr	r3, [r6, #0]
 8005456:	1d1a      	adds	r2, r3, #4
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6032      	str	r2, [r6, #0]
 800545c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005460:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005464:	2301      	movs	r3, #1
 8005466:	e09d      	b.n	80055a4 <_printf_i+0x1e8>
 8005468:	6833      	ldr	r3, [r6, #0]
 800546a:	6820      	ldr	r0, [r4, #0]
 800546c:	1d19      	adds	r1, r3, #4
 800546e:	6031      	str	r1, [r6, #0]
 8005470:	0606      	lsls	r6, r0, #24
 8005472:	d501      	bpl.n	8005478 <_printf_i+0xbc>
 8005474:	681d      	ldr	r5, [r3, #0]
 8005476:	e003      	b.n	8005480 <_printf_i+0xc4>
 8005478:	0645      	lsls	r5, r0, #25
 800547a:	d5fb      	bpl.n	8005474 <_printf_i+0xb8>
 800547c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005480:	2d00      	cmp	r5, #0
 8005482:	da03      	bge.n	800548c <_printf_i+0xd0>
 8005484:	232d      	movs	r3, #45	@ 0x2d
 8005486:	426d      	negs	r5, r5
 8005488:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800548c:	4859      	ldr	r0, [pc, #356]	@ (80055f4 <_printf_i+0x238>)
 800548e:	230a      	movs	r3, #10
 8005490:	e011      	b.n	80054b6 <_printf_i+0xfa>
 8005492:	6821      	ldr	r1, [r4, #0]
 8005494:	6833      	ldr	r3, [r6, #0]
 8005496:	0608      	lsls	r0, r1, #24
 8005498:	f853 5b04 	ldr.w	r5, [r3], #4
 800549c:	d402      	bmi.n	80054a4 <_printf_i+0xe8>
 800549e:	0649      	lsls	r1, r1, #25
 80054a0:	bf48      	it	mi
 80054a2:	b2ad      	uxthmi	r5, r5
 80054a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80054a6:	4853      	ldr	r0, [pc, #332]	@ (80055f4 <_printf_i+0x238>)
 80054a8:	6033      	str	r3, [r6, #0]
 80054aa:	bf14      	ite	ne
 80054ac:	230a      	movne	r3, #10
 80054ae:	2308      	moveq	r3, #8
 80054b0:	2100      	movs	r1, #0
 80054b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054b6:	6866      	ldr	r6, [r4, #4]
 80054b8:	60a6      	str	r6, [r4, #8]
 80054ba:	2e00      	cmp	r6, #0
 80054bc:	bfa2      	ittt	ge
 80054be:	6821      	ldrge	r1, [r4, #0]
 80054c0:	f021 0104 	bicge.w	r1, r1, #4
 80054c4:	6021      	strge	r1, [r4, #0]
 80054c6:	b90d      	cbnz	r5, 80054cc <_printf_i+0x110>
 80054c8:	2e00      	cmp	r6, #0
 80054ca:	d04b      	beq.n	8005564 <_printf_i+0x1a8>
 80054cc:	4616      	mov	r6, r2
 80054ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80054d2:	fb03 5711 	mls	r7, r3, r1, r5
 80054d6:	5dc7      	ldrb	r7, [r0, r7]
 80054d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054dc:	462f      	mov	r7, r5
 80054de:	42bb      	cmp	r3, r7
 80054e0:	460d      	mov	r5, r1
 80054e2:	d9f4      	bls.n	80054ce <_printf_i+0x112>
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d10b      	bne.n	8005500 <_printf_i+0x144>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	07df      	lsls	r7, r3, #31
 80054ec:	d508      	bpl.n	8005500 <_printf_i+0x144>
 80054ee:	6923      	ldr	r3, [r4, #16]
 80054f0:	6861      	ldr	r1, [r4, #4]
 80054f2:	4299      	cmp	r1, r3
 80054f4:	bfde      	ittt	le
 80054f6:	2330      	movle	r3, #48	@ 0x30
 80054f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005500:	1b92      	subs	r2, r2, r6
 8005502:	6122      	str	r2, [r4, #16]
 8005504:	f8cd a000 	str.w	sl, [sp]
 8005508:	464b      	mov	r3, r9
 800550a:	aa03      	add	r2, sp, #12
 800550c:	4621      	mov	r1, r4
 800550e:	4640      	mov	r0, r8
 8005510:	f7ff fee6 	bl	80052e0 <_printf_common>
 8005514:	3001      	adds	r0, #1
 8005516:	d14a      	bne.n	80055ae <_printf_i+0x1f2>
 8005518:	f04f 30ff 	mov.w	r0, #4294967295
 800551c:	b004      	add	sp, #16
 800551e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	f043 0320 	orr.w	r3, r3, #32
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	4833      	ldr	r0, [pc, #204]	@ (80055f8 <_printf_i+0x23c>)
 800552c:	2778      	movs	r7, #120	@ 0x78
 800552e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	6831      	ldr	r1, [r6, #0]
 8005536:	061f      	lsls	r7, r3, #24
 8005538:	f851 5b04 	ldr.w	r5, [r1], #4
 800553c:	d402      	bmi.n	8005544 <_printf_i+0x188>
 800553e:	065f      	lsls	r7, r3, #25
 8005540:	bf48      	it	mi
 8005542:	b2ad      	uxthmi	r5, r5
 8005544:	6031      	str	r1, [r6, #0]
 8005546:	07d9      	lsls	r1, r3, #31
 8005548:	bf44      	itt	mi
 800554a:	f043 0320 	orrmi.w	r3, r3, #32
 800554e:	6023      	strmi	r3, [r4, #0]
 8005550:	b11d      	cbz	r5, 800555a <_printf_i+0x19e>
 8005552:	2310      	movs	r3, #16
 8005554:	e7ac      	b.n	80054b0 <_printf_i+0xf4>
 8005556:	4827      	ldr	r0, [pc, #156]	@ (80055f4 <_printf_i+0x238>)
 8005558:	e7e9      	b.n	800552e <_printf_i+0x172>
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	f023 0320 	bic.w	r3, r3, #32
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	e7f6      	b.n	8005552 <_printf_i+0x196>
 8005564:	4616      	mov	r6, r2
 8005566:	e7bd      	b.n	80054e4 <_printf_i+0x128>
 8005568:	6833      	ldr	r3, [r6, #0]
 800556a:	6825      	ldr	r5, [r4, #0]
 800556c:	6961      	ldr	r1, [r4, #20]
 800556e:	1d18      	adds	r0, r3, #4
 8005570:	6030      	str	r0, [r6, #0]
 8005572:	062e      	lsls	r6, r5, #24
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	d501      	bpl.n	800557c <_printf_i+0x1c0>
 8005578:	6019      	str	r1, [r3, #0]
 800557a:	e002      	b.n	8005582 <_printf_i+0x1c6>
 800557c:	0668      	lsls	r0, r5, #25
 800557e:	d5fb      	bpl.n	8005578 <_printf_i+0x1bc>
 8005580:	8019      	strh	r1, [r3, #0]
 8005582:	2300      	movs	r3, #0
 8005584:	6123      	str	r3, [r4, #16]
 8005586:	4616      	mov	r6, r2
 8005588:	e7bc      	b.n	8005504 <_printf_i+0x148>
 800558a:	6833      	ldr	r3, [r6, #0]
 800558c:	1d1a      	adds	r2, r3, #4
 800558e:	6032      	str	r2, [r6, #0]
 8005590:	681e      	ldr	r6, [r3, #0]
 8005592:	6862      	ldr	r2, [r4, #4]
 8005594:	2100      	movs	r1, #0
 8005596:	4630      	mov	r0, r6
 8005598:	f7fa fe2a 	bl	80001f0 <memchr>
 800559c:	b108      	cbz	r0, 80055a2 <_printf_i+0x1e6>
 800559e:	1b80      	subs	r0, r0, r6
 80055a0:	6060      	str	r0, [r4, #4]
 80055a2:	6863      	ldr	r3, [r4, #4]
 80055a4:	6123      	str	r3, [r4, #16]
 80055a6:	2300      	movs	r3, #0
 80055a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ac:	e7aa      	b.n	8005504 <_printf_i+0x148>
 80055ae:	6923      	ldr	r3, [r4, #16]
 80055b0:	4632      	mov	r2, r6
 80055b2:	4649      	mov	r1, r9
 80055b4:	4640      	mov	r0, r8
 80055b6:	47d0      	blx	sl
 80055b8:	3001      	adds	r0, #1
 80055ba:	d0ad      	beq.n	8005518 <_printf_i+0x15c>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	079b      	lsls	r3, r3, #30
 80055c0:	d413      	bmi.n	80055ea <_printf_i+0x22e>
 80055c2:	68e0      	ldr	r0, [r4, #12]
 80055c4:	9b03      	ldr	r3, [sp, #12]
 80055c6:	4298      	cmp	r0, r3
 80055c8:	bfb8      	it	lt
 80055ca:	4618      	movlt	r0, r3
 80055cc:	e7a6      	b.n	800551c <_printf_i+0x160>
 80055ce:	2301      	movs	r3, #1
 80055d0:	4632      	mov	r2, r6
 80055d2:	4649      	mov	r1, r9
 80055d4:	4640      	mov	r0, r8
 80055d6:	47d0      	blx	sl
 80055d8:	3001      	adds	r0, #1
 80055da:	d09d      	beq.n	8005518 <_printf_i+0x15c>
 80055dc:	3501      	adds	r5, #1
 80055de:	68e3      	ldr	r3, [r4, #12]
 80055e0:	9903      	ldr	r1, [sp, #12]
 80055e2:	1a5b      	subs	r3, r3, r1
 80055e4:	42ab      	cmp	r3, r5
 80055e6:	dcf2      	bgt.n	80055ce <_printf_i+0x212>
 80055e8:	e7eb      	b.n	80055c2 <_printf_i+0x206>
 80055ea:	2500      	movs	r5, #0
 80055ec:	f104 0619 	add.w	r6, r4, #25
 80055f0:	e7f5      	b.n	80055de <_printf_i+0x222>
 80055f2:	bf00      	nop
 80055f4:	08009ec0 	.word	0x08009ec0
 80055f8:	08009ed1 	.word	0x08009ed1

080055fc <_scanf_float>:
 80055fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005600:	b087      	sub	sp, #28
 8005602:	4617      	mov	r7, r2
 8005604:	9303      	str	r3, [sp, #12]
 8005606:	688b      	ldr	r3, [r1, #8]
 8005608:	1e5a      	subs	r2, r3, #1
 800560a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800560e:	bf81      	itttt	hi
 8005610:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005614:	eb03 0b05 	addhi.w	fp, r3, r5
 8005618:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800561c:	608b      	strhi	r3, [r1, #8]
 800561e:	680b      	ldr	r3, [r1, #0]
 8005620:	460a      	mov	r2, r1
 8005622:	f04f 0500 	mov.w	r5, #0
 8005626:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800562a:	f842 3b1c 	str.w	r3, [r2], #28
 800562e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005632:	4680      	mov	r8, r0
 8005634:	460c      	mov	r4, r1
 8005636:	bf98      	it	ls
 8005638:	f04f 0b00 	movls.w	fp, #0
 800563c:	9201      	str	r2, [sp, #4]
 800563e:	4616      	mov	r6, r2
 8005640:	46aa      	mov	sl, r5
 8005642:	46a9      	mov	r9, r5
 8005644:	9502      	str	r5, [sp, #8]
 8005646:	68a2      	ldr	r2, [r4, #8]
 8005648:	b152      	cbz	r2, 8005660 <_scanf_float+0x64>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005650:	d864      	bhi.n	800571c <_scanf_float+0x120>
 8005652:	2b40      	cmp	r3, #64	@ 0x40
 8005654:	d83c      	bhi.n	80056d0 <_scanf_float+0xd4>
 8005656:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800565a:	b2c8      	uxtb	r0, r1
 800565c:	280e      	cmp	r0, #14
 800565e:	d93a      	bls.n	80056d6 <_scanf_float+0xda>
 8005660:	f1b9 0f00 	cmp.w	r9, #0
 8005664:	d003      	beq.n	800566e <_scanf_float+0x72>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005672:	f1ba 0f01 	cmp.w	sl, #1
 8005676:	f200 8117 	bhi.w	80058a8 <_scanf_float+0x2ac>
 800567a:	9b01      	ldr	r3, [sp, #4]
 800567c:	429e      	cmp	r6, r3
 800567e:	f200 8108 	bhi.w	8005892 <_scanf_float+0x296>
 8005682:	2001      	movs	r0, #1
 8005684:	b007      	add	sp, #28
 8005686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800568e:	2a0d      	cmp	r2, #13
 8005690:	d8e6      	bhi.n	8005660 <_scanf_float+0x64>
 8005692:	a101      	add	r1, pc, #4	@ (adr r1, 8005698 <_scanf_float+0x9c>)
 8005694:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005698:	080057df 	.word	0x080057df
 800569c:	08005661 	.word	0x08005661
 80056a0:	08005661 	.word	0x08005661
 80056a4:	08005661 	.word	0x08005661
 80056a8:	0800583f 	.word	0x0800583f
 80056ac:	08005817 	.word	0x08005817
 80056b0:	08005661 	.word	0x08005661
 80056b4:	08005661 	.word	0x08005661
 80056b8:	080057ed 	.word	0x080057ed
 80056bc:	08005661 	.word	0x08005661
 80056c0:	08005661 	.word	0x08005661
 80056c4:	08005661 	.word	0x08005661
 80056c8:	08005661 	.word	0x08005661
 80056cc:	080057a5 	.word	0x080057a5
 80056d0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80056d4:	e7db      	b.n	800568e <_scanf_float+0x92>
 80056d6:	290e      	cmp	r1, #14
 80056d8:	d8c2      	bhi.n	8005660 <_scanf_float+0x64>
 80056da:	a001      	add	r0, pc, #4	@ (adr r0, 80056e0 <_scanf_float+0xe4>)
 80056dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80056e0:	08005795 	.word	0x08005795
 80056e4:	08005661 	.word	0x08005661
 80056e8:	08005795 	.word	0x08005795
 80056ec:	0800582b 	.word	0x0800582b
 80056f0:	08005661 	.word	0x08005661
 80056f4:	0800573d 	.word	0x0800573d
 80056f8:	0800577b 	.word	0x0800577b
 80056fc:	0800577b 	.word	0x0800577b
 8005700:	0800577b 	.word	0x0800577b
 8005704:	0800577b 	.word	0x0800577b
 8005708:	0800577b 	.word	0x0800577b
 800570c:	0800577b 	.word	0x0800577b
 8005710:	0800577b 	.word	0x0800577b
 8005714:	0800577b 	.word	0x0800577b
 8005718:	0800577b 	.word	0x0800577b
 800571c:	2b6e      	cmp	r3, #110	@ 0x6e
 800571e:	d809      	bhi.n	8005734 <_scanf_float+0x138>
 8005720:	2b60      	cmp	r3, #96	@ 0x60
 8005722:	d8b2      	bhi.n	800568a <_scanf_float+0x8e>
 8005724:	2b54      	cmp	r3, #84	@ 0x54
 8005726:	d07b      	beq.n	8005820 <_scanf_float+0x224>
 8005728:	2b59      	cmp	r3, #89	@ 0x59
 800572a:	d199      	bne.n	8005660 <_scanf_float+0x64>
 800572c:	2d07      	cmp	r5, #7
 800572e:	d197      	bne.n	8005660 <_scanf_float+0x64>
 8005730:	2508      	movs	r5, #8
 8005732:	e02c      	b.n	800578e <_scanf_float+0x192>
 8005734:	2b74      	cmp	r3, #116	@ 0x74
 8005736:	d073      	beq.n	8005820 <_scanf_float+0x224>
 8005738:	2b79      	cmp	r3, #121	@ 0x79
 800573a:	e7f6      	b.n	800572a <_scanf_float+0x12e>
 800573c:	6821      	ldr	r1, [r4, #0]
 800573e:	05c8      	lsls	r0, r1, #23
 8005740:	d51b      	bpl.n	800577a <_scanf_float+0x17e>
 8005742:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005746:	6021      	str	r1, [r4, #0]
 8005748:	f109 0901 	add.w	r9, r9, #1
 800574c:	f1bb 0f00 	cmp.w	fp, #0
 8005750:	d003      	beq.n	800575a <_scanf_float+0x15e>
 8005752:	3201      	adds	r2, #1
 8005754:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005758:	60a2      	str	r2, [r4, #8]
 800575a:	68a3      	ldr	r3, [r4, #8]
 800575c:	3b01      	subs	r3, #1
 800575e:	60a3      	str	r3, [r4, #8]
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	3301      	adds	r3, #1
 8005764:	6123      	str	r3, [r4, #16]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3b01      	subs	r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	607b      	str	r3, [r7, #4]
 800576e:	f340 8087 	ble.w	8005880 <_scanf_float+0x284>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	3301      	adds	r3, #1
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	e765      	b.n	8005646 <_scanf_float+0x4a>
 800577a:	eb1a 0105 	adds.w	r1, sl, r5
 800577e:	f47f af6f 	bne.w	8005660 <_scanf_float+0x64>
 8005782:	6822      	ldr	r2, [r4, #0]
 8005784:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005788:	6022      	str	r2, [r4, #0]
 800578a:	460d      	mov	r5, r1
 800578c:	468a      	mov	sl, r1
 800578e:	f806 3b01 	strb.w	r3, [r6], #1
 8005792:	e7e2      	b.n	800575a <_scanf_float+0x15e>
 8005794:	6822      	ldr	r2, [r4, #0]
 8005796:	0610      	lsls	r0, r2, #24
 8005798:	f57f af62 	bpl.w	8005660 <_scanf_float+0x64>
 800579c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057a0:	6022      	str	r2, [r4, #0]
 80057a2:	e7f4      	b.n	800578e <_scanf_float+0x192>
 80057a4:	f1ba 0f00 	cmp.w	sl, #0
 80057a8:	d10e      	bne.n	80057c8 <_scanf_float+0x1cc>
 80057aa:	f1b9 0f00 	cmp.w	r9, #0
 80057ae:	d10e      	bne.n	80057ce <_scanf_float+0x1d2>
 80057b0:	6822      	ldr	r2, [r4, #0]
 80057b2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80057b6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80057ba:	d108      	bne.n	80057ce <_scanf_float+0x1d2>
 80057bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80057c0:	6022      	str	r2, [r4, #0]
 80057c2:	f04f 0a01 	mov.w	sl, #1
 80057c6:	e7e2      	b.n	800578e <_scanf_float+0x192>
 80057c8:	f1ba 0f02 	cmp.w	sl, #2
 80057cc:	d055      	beq.n	800587a <_scanf_float+0x27e>
 80057ce:	2d01      	cmp	r5, #1
 80057d0:	d002      	beq.n	80057d8 <_scanf_float+0x1dc>
 80057d2:	2d04      	cmp	r5, #4
 80057d4:	f47f af44 	bne.w	8005660 <_scanf_float+0x64>
 80057d8:	3501      	adds	r5, #1
 80057da:	b2ed      	uxtb	r5, r5
 80057dc:	e7d7      	b.n	800578e <_scanf_float+0x192>
 80057de:	f1ba 0f01 	cmp.w	sl, #1
 80057e2:	f47f af3d 	bne.w	8005660 <_scanf_float+0x64>
 80057e6:	f04f 0a02 	mov.w	sl, #2
 80057ea:	e7d0      	b.n	800578e <_scanf_float+0x192>
 80057ec:	b97d      	cbnz	r5, 800580e <_scanf_float+0x212>
 80057ee:	f1b9 0f00 	cmp.w	r9, #0
 80057f2:	f47f af38 	bne.w	8005666 <_scanf_float+0x6a>
 80057f6:	6822      	ldr	r2, [r4, #0]
 80057f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80057fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005800:	f040 8108 	bne.w	8005a14 <_scanf_float+0x418>
 8005804:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005808:	6022      	str	r2, [r4, #0]
 800580a:	2501      	movs	r5, #1
 800580c:	e7bf      	b.n	800578e <_scanf_float+0x192>
 800580e:	2d03      	cmp	r5, #3
 8005810:	d0e2      	beq.n	80057d8 <_scanf_float+0x1dc>
 8005812:	2d05      	cmp	r5, #5
 8005814:	e7de      	b.n	80057d4 <_scanf_float+0x1d8>
 8005816:	2d02      	cmp	r5, #2
 8005818:	f47f af22 	bne.w	8005660 <_scanf_float+0x64>
 800581c:	2503      	movs	r5, #3
 800581e:	e7b6      	b.n	800578e <_scanf_float+0x192>
 8005820:	2d06      	cmp	r5, #6
 8005822:	f47f af1d 	bne.w	8005660 <_scanf_float+0x64>
 8005826:	2507      	movs	r5, #7
 8005828:	e7b1      	b.n	800578e <_scanf_float+0x192>
 800582a:	6822      	ldr	r2, [r4, #0]
 800582c:	0591      	lsls	r1, r2, #22
 800582e:	f57f af17 	bpl.w	8005660 <_scanf_float+0x64>
 8005832:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005836:	6022      	str	r2, [r4, #0]
 8005838:	f8cd 9008 	str.w	r9, [sp, #8]
 800583c:	e7a7      	b.n	800578e <_scanf_float+0x192>
 800583e:	6822      	ldr	r2, [r4, #0]
 8005840:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005844:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005848:	d006      	beq.n	8005858 <_scanf_float+0x25c>
 800584a:	0550      	lsls	r0, r2, #21
 800584c:	f57f af08 	bpl.w	8005660 <_scanf_float+0x64>
 8005850:	f1b9 0f00 	cmp.w	r9, #0
 8005854:	f000 80de 	beq.w	8005a14 <_scanf_float+0x418>
 8005858:	0591      	lsls	r1, r2, #22
 800585a:	bf58      	it	pl
 800585c:	9902      	ldrpl	r1, [sp, #8]
 800585e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005862:	bf58      	it	pl
 8005864:	eba9 0101 	subpl.w	r1, r9, r1
 8005868:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800586c:	bf58      	it	pl
 800586e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005872:	6022      	str	r2, [r4, #0]
 8005874:	f04f 0900 	mov.w	r9, #0
 8005878:	e789      	b.n	800578e <_scanf_float+0x192>
 800587a:	f04f 0a03 	mov.w	sl, #3
 800587e:	e786      	b.n	800578e <_scanf_float+0x192>
 8005880:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005884:	4639      	mov	r1, r7
 8005886:	4640      	mov	r0, r8
 8005888:	4798      	blx	r3
 800588a:	2800      	cmp	r0, #0
 800588c:	f43f aedb 	beq.w	8005646 <_scanf_float+0x4a>
 8005890:	e6e6      	b.n	8005660 <_scanf_float+0x64>
 8005892:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005896:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800589a:	463a      	mov	r2, r7
 800589c:	4640      	mov	r0, r8
 800589e:	4798      	blx	r3
 80058a0:	6923      	ldr	r3, [r4, #16]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	6123      	str	r3, [r4, #16]
 80058a6:	e6e8      	b.n	800567a <_scanf_float+0x7e>
 80058a8:	1e6b      	subs	r3, r5, #1
 80058aa:	2b06      	cmp	r3, #6
 80058ac:	d824      	bhi.n	80058f8 <_scanf_float+0x2fc>
 80058ae:	2d02      	cmp	r5, #2
 80058b0:	d836      	bhi.n	8005920 <_scanf_float+0x324>
 80058b2:	9b01      	ldr	r3, [sp, #4]
 80058b4:	429e      	cmp	r6, r3
 80058b6:	f67f aee4 	bls.w	8005682 <_scanf_float+0x86>
 80058ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058c2:	463a      	mov	r2, r7
 80058c4:	4640      	mov	r0, r8
 80058c6:	4798      	blx	r3
 80058c8:	6923      	ldr	r3, [r4, #16]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	6123      	str	r3, [r4, #16]
 80058ce:	e7f0      	b.n	80058b2 <_scanf_float+0x2b6>
 80058d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058d4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80058d8:	463a      	mov	r2, r7
 80058da:	4640      	mov	r0, r8
 80058dc:	4798      	blx	r3
 80058de:	6923      	ldr	r3, [r4, #16]
 80058e0:	3b01      	subs	r3, #1
 80058e2:	6123      	str	r3, [r4, #16]
 80058e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058e8:	fa5f fa8a 	uxtb.w	sl, sl
 80058ec:	f1ba 0f02 	cmp.w	sl, #2
 80058f0:	d1ee      	bne.n	80058d0 <_scanf_float+0x2d4>
 80058f2:	3d03      	subs	r5, #3
 80058f4:	b2ed      	uxtb	r5, r5
 80058f6:	1b76      	subs	r6, r6, r5
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	05da      	lsls	r2, r3, #23
 80058fc:	d530      	bpl.n	8005960 <_scanf_float+0x364>
 80058fe:	055b      	lsls	r3, r3, #21
 8005900:	d511      	bpl.n	8005926 <_scanf_float+0x32a>
 8005902:	9b01      	ldr	r3, [sp, #4]
 8005904:	429e      	cmp	r6, r3
 8005906:	f67f aebc 	bls.w	8005682 <_scanf_float+0x86>
 800590a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800590e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005912:	463a      	mov	r2, r7
 8005914:	4640      	mov	r0, r8
 8005916:	4798      	blx	r3
 8005918:	6923      	ldr	r3, [r4, #16]
 800591a:	3b01      	subs	r3, #1
 800591c:	6123      	str	r3, [r4, #16]
 800591e:	e7f0      	b.n	8005902 <_scanf_float+0x306>
 8005920:	46aa      	mov	sl, r5
 8005922:	46b3      	mov	fp, r6
 8005924:	e7de      	b.n	80058e4 <_scanf_float+0x2e8>
 8005926:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800592a:	6923      	ldr	r3, [r4, #16]
 800592c:	2965      	cmp	r1, #101	@ 0x65
 800592e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005932:	f106 35ff 	add.w	r5, r6, #4294967295
 8005936:	6123      	str	r3, [r4, #16]
 8005938:	d00c      	beq.n	8005954 <_scanf_float+0x358>
 800593a:	2945      	cmp	r1, #69	@ 0x45
 800593c:	d00a      	beq.n	8005954 <_scanf_float+0x358>
 800593e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005942:	463a      	mov	r2, r7
 8005944:	4640      	mov	r0, r8
 8005946:	4798      	blx	r3
 8005948:	6923      	ldr	r3, [r4, #16]
 800594a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800594e:	3b01      	subs	r3, #1
 8005950:	1eb5      	subs	r5, r6, #2
 8005952:	6123      	str	r3, [r4, #16]
 8005954:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005958:	463a      	mov	r2, r7
 800595a:	4640      	mov	r0, r8
 800595c:	4798      	blx	r3
 800595e:	462e      	mov	r6, r5
 8005960:	6822      	ldr	r2, [r4, #0]
 8005962:	f012 0210 	ands.w	r2, r2, #16
 8005966:	d001      	beq.n	800596c <_scanf_float+0x370>
 8005968:	2000      	movs	r0, #0
 800596a:	e68b      	b.n	8005684 <_scanf_float+0x88>
 800596c:	7032      	strb	r2, [r6, #0]
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005978:	d11c      	bne.n	80059b4 <_scanf_float+0x3b8>
 800597a:	9b02      	ldr	r3, [sp, #8]
 800597c:	454b      	cmp	r3, r9
 800597e:	eba3 0209 	sub.w	r2, r3, r9
 8005982:	d123      	bne.n	80059cc <_scanf_float+0x3d0>
 8005984:	9901      	ldr	r1, [sp, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	4640      	mov	r0, r8
 800598a:	f002 fd15 	bl	80083b8 <_strtod_r>
 800598e:	9b03      	ldr	r3, [sp, #12]
 8005990:	6821      	ldr	r1, [r4, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f011 0f02 	tst.w	r1, #2
 8005998:	ec57 6b10 	vmov	r6, r7, d0
 800599c:	f103 0204 	add.w	r2, r3, #4
 80059a0:	d01f      	beq.n	80059e2 <_scanf_float+0x3e6>
 80059a2:	9903      	ldr	r1, [sp, #12]
 80059a4:	600a      	str	r2, [r1, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	e9c3 6700 	strd	r6, r7, [r3]
 80059ac:	68e3      	ldr	r3, [r4, #12]
 80059ae:	3301      	adds	r3, #1
 80059b0:	60e3      	str	r3, [r4, #12]
 80059b2:	e7d9      	b.n	8005968 <_scanf_float+0x36c>
 80059b4:	9b04      	ldr	r3, [sp, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0e4      	beq.n	8005984 <_scanf_float+0x388>
 80059ba:	9905      	ldr	r1, [sp, #20]
 80059bc:	230a      	movs	r3, #10
 80059be:	3101      	adds	r1, #1
 80059c0:	4640      	mov	r0, r8
 80059c2:	f002 fd79 	bl	80084b8 <_strtol_r>
 80059c6:	9b04      	ldr	r3, [sp, #16]
 80059c8:	9e05      	ldr	r6, [sp, #20]
 80059ca:	1ac2      	subs	r2, r0, r3
 80059cc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80059d0:	429e      	cmp	r6, r3
 80059d2:	bf28      	it	cs
 80059d4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80059d8:	4910      	ldr	r1, [pc, #64]	@ (8005a1c <_scanf_float+0x420>)
 80059da:	4630      	mov	r0, r6
 80059dc:	f000 f942 	bl	8005c64 <siprintf>
 80059e0:	e7d0      	b.n	8005984 <_scanf_float+0x388>
 80059e2:	f011 0f04 	tst.w	r1, #4
 80059e6:	9903      	ldr	r1, [sp, #12]
 80059e8:	600a      	str	r2, [r1, #0]
 80059ea:	d1dc      	bne.n	80059a6 <_scanf_float+0x3aa>
 80059ec:	681d      	ldr	r5, [r3, #0]
 80059ee:	4632      	mov	r2, r6
 80059f0:	463b      	mov	r3, r7
 80059f2:	4630      	mov	r0, r6
 80059f4:	4639      	mov	r1, r7
 80059f6:	f7fb f8a9 	bl	8000b4c <__aeabi_dcmpun>
 80059fa:	b128      	cbz	r0, 8005a08 <_scanf_float+0x40c>
 80059fc:	4808      	ldr	r0, [pc, #32]	@ (8005a20 <_scanf_float+0x424>)
 80059fe:	f000 fad5 	bl	8005fac <nanf>
 8005a02:	ed85 0a00 	vstr	s0, [r5]
 8005a06:	e7d1      	b.n	80059ac <_scanf_float+0x3b0>
 8005a08:	4630      	mov	r0, r6
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	f7fb f8fc 	bl	8000c08 <__aeabi_d2f>
 8005a10:	6028      	str	r0, [r5, #0]
 8005a12:	e7cb      	b.n	80059ac <_scanf_float+0x3b0>
 8005a14:	f04f 0900 	mov.w	r9, #0
 8005a18:	e629      	b.n	800566e <_scanf_float+0x72>
 8005a1a:	bf00      	nop
 8005a1c:	08009ee2 	.word	0x08009ee2
 8005a20:	0800a298 	.word	0x0800a298

08005a24 <std>:
 8005a24:	2300      	movs	r3, #0
 8005a26:	b510      	push	{r4, lr}
 8005a28:	4604      	mov	r4, r0
 8005a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a32:	6083      	str	r3, [r0, #8]
 8005a34:	8181      	strh	r1, [r0, #12]
 8005a36:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a38:	81c2      	strh	r2, [r0, #14]
 8005a3a:	6183      	str	r3, [r0, #24]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	2208      	movs	r2, #8
 8005a40:	305c      	adds	r0, #92	@ 0x5c
 8005a42:	f000 fa33 	bl	8005eac <memset>
 8005a46:	4b0d      	ldr	r3, [pc, #52]	@ (8005a7c <std+0x58>)
 8005a48:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <std+0x5c>)
 8005a4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a84 <std+0x60>)
 8005a50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a52:	4b0d      	ldr	r3, [pc, #52]	@ (8005a88 <std+0x64>)
 8005a54:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a56:	4b0d      	ldr	r3, [pc, #52]	@ (8005a8c <std+0x68>)
 8005a58:	6224      	str	r4, [r4, #32]
 8005a5a:	429c      	cmp	r4, r3
 8005a5c:	d006      	beq.n	8005a6c <std+0x48>
 8005a5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a62:	4294      	cmp	r4, r2
 8005a64:	d002      	beq.n	8005a6c <std+0x48>
 8005a66:	33d0      	adds	r3, #208	@ 0xd0
 8005a68:	429c      	cmp	r4, r3
 8005a6a:	d105      	bne.n	8005a78 <std+0x54>
 8005a6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a74:	f000 ba96 	b.w	8005fa4 <__retarget_lock_init_recursive>
 8005a78:	bd10      	pop	{r4, pc}
 8005a7a:	bf00      	nop
 8005a7c:	08005cf9 	.word	0x08005cf9
 8005a80:	08005d1f 	.word	0x08005d1f
 8005a84:	08005d57 	.word	0x08005d57
 8005a88:	08005d7b 	.word	0x08005d7b
 8005a8c:	2000036c 	.word	0x2000036c

08005a90 <stdio_exit_handler>:
 8005a90:	4a02      	ldr	r2, [pc, #8]	@ (8005a9c <stdio_exit_handler+0xc>)
 8005a92:	4903      	ldr	r1, [pc, #12]	@ (8005aa0 <stdio_exit_handler+0x10>)
 8005a94:	4803      	ldr	r0, [pc, #12]	@ (8005aa4 <stdio_exit_handler+0x14>)
 8005a96:	f000 b869 	b.w	8005b6c <_fwalk_sglue>
 8005a9a:	bf00      	nop
 8005a9c:	2000000c 	.word	0x2000000c
 8005aa0:	08008ea9 	.word	0x08008ea9
 8005aa4:	2000001c 	.word	0x2000001c

08005aa8 <cleanup_stdio>:
 8005aa8:	6841      	ldr	r1, [r0, #4]
 8005aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8005adc <cleanup_stdio+0x34>)
 8005aac:	4299      	cmp	r1, r3
 8005aae:	b510      	push	{r4, lr}
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	d001      	beq.n	8005ab8 <cleanup_stdio+0x10>
 8005ab4:	f003 f9f8 	bl	8008ea8 <_fflush_r>
 8005ab8:	68a1      	ldr	r1, [r4, #8]
 8005aba:	4b09      	ldr	r3, [pc, #36]	@ (8005ae0 <cleanup_stdio+0x38>)
 8005abc:	4299      	cmp	r1, r3
 8005abe:	d002      	beq.n	8005ac6 <cleanup_stdio+0x1e>
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f003 f9f1 	bl	8008ea8 <_fflush_r>
 8005ac6:	68e1      	ldr	r1, [r4, #12]
 8005ac8:	4b06      	ldr	r3, [pc, #24]	@ (8005ae4 <cleanup_stdio+0x3c>)
 8005aca:	4299      	cmp	r1, r3
 8005acc:	d004      	beq.n	8005ad8 <cleanup_stdio+0x30>
 8005ace:	4620      	mov	r0, r4
 8005ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad4:	f003 b9e8 	b.w	8008ea8 <_fflush_r>
 8005ad8:	bd10      	pop	{r4, pc}
 8005ada:	bf00      	nop
 8005adc:	2000036c 	.word	0x2000036c
 8005ae0:	200003d4 	.word	0x200003d4
 8005ae4:	2000043c 	.word	0x2000043c

08005ae8 <global_stdio_init.part.0>:
 8005ae8:	b510      	push	{r4, lr}
 8005aea:	4b0b      	ldr	r3, [pc, #44]	@ (8005b18 <global_stdio_init.part.0+0x30>)
 8005aec:	4c0b      	ldr	r4, [pc, #44]	@ (8005b1c <global_stdio_init.part.0+0x34>)
 8005aee:	4a0c      	ldr	r2, [pc, #48]	@ (8005b20 <global_stdio_init.part.0+0x38>)
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	4620      	mov	r0, r4
 8005af4:	2200      	movs	r2, #0
 8005af6:	2104      	movs	r1, #4
 8005af8:	f7ff ff94 	bl	8005a24 <std>
 8005afc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b00:	2201      	movs	r2, #1
 8005b02:	2109      	movs	r1, #9
 8005b04:	f7ff ff8e 	bl	8005a24 <std>
 8005b08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b12:	2112      	movs	r1, #18
 8005b14:	f7ff bf86 	b.w	8005a24 <std>
 8005b18:	200004a4 	.word	0x200004a4
 8005b1c:	2000036c 	.word	0x2000036c
 8005b20:	08005a91 	.word	0x08005a91

08005b24 <__sfp_lock_acquire>:
 8005b24:	4801      	ldr	r0, [pc, #4]	@ (8005b2c <__sfp_lock_acquire+0x8>)
 8005b26:	f000 ba3e 	b.w	8005fa6 <__retarget_lock_acquire_recursive>
 8005b2a:	bf00      	nop
 8005b2c:	200004ad 	.word	0x200004ad

08005b30 <__sfp_lock_release>:
 8005b30:	4801      	ldr	r0, [pc, #4]	@ (8005b38 <__sfp_lock_release+0x8>)
 8005b32:	f000 ba39 	b.w	8005fa8 <__retarget_lock_release_recursive>
 8005b36:	bf00      	nop
 8005b38:	200004ad 	.word	0x200004ad

08005b3c <__sinit>:
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	4604      	mov	r4, r0
 8005b40:	f7ff fff0 	bl	8005b24 <__sfp_lock_acquire>
 8005b44:	6a23      	ldr	r3, [r4, #32]
 8005b46:	b11b      	cbz	r3, 8005b50 <__sinit+0x14>
 8005b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b4c:	f7ff bff0 	b.w	8005b30 <__sfp_lock_release>
 8005b50:	4b04      	ldr	r3, [pc, #16]	@ (8005b64 <__sinit+0x28>)
 8005b52:	6223      	str	r3, [r4, #32]
 8005b54:	4b04      	ldr	r3, [pc, #16]	@ (8005b68 <__sinit+0x2c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1f5      	bne.n	8005b48 <__sinit+0xc>
 8005b5c:	f7ff ffc4 	bl	8005ae8 <global_stdio_init.part.0>
 8005b60:	e7f2      	b.n	8005b48 <__sinit+0xc>
 8005b62:	bf00      	nop
 8005b64:	08005aa9 	.word	0x08005aa9
 8005b68:	200004a4 	.word	0x200004a4

08005b6c <_fwalk_sglue>:
 8005b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b70:	4607      	mov	r7, r0
 8005b72:	4688      	mov	r8, r1
 8005b74:	4614      	mov	r4, r2
 8005b76:	2600      	movs	r6, #0
 8005b78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b7c:	f1b9 0901 	subs.w	r9, r9, #1
 8005b80:	d505      	bpl.n	8005b8e <_fwalk_sglue+0x22>
 8005b82:	6824      	ldr	r4, [r4, #0]
 8005b84:	2c00      	cmp	r4, #0
 8005b86:	d1f7      	bne.n	8005b78 <_fwalk_sglue+0xc>
 8005b88:	4630      	mov	r0, r6
 8005b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8e:	89ab      	ldrh	r3, [r5, #12]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d907      	bls.n	8005ba4 <_fwalk_sglue+0x38>
 8005b94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	d003      	beq.n	8005ba4 <_fwalk_sglue+0x38>
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	47c0      	blx	r8
 8005ba2:	4306      	orrs	r6, r0
 8005ba4:	3568      	adds	r5, #104	@ 0x68
 8005ba6:	e7e9      	b.n	8005b7c <_fwalk_sglue+0x10>

08005ba8 <_puts_r>:
 8005ba8:	6a03      	ldr	r3, [r0, #32]
 8005baa:	b570      	push	{r4, r5, r6, lr}
 8005bac:	6884      	ldr	r4, [r0, #8]
 8005bae:	4605      	mov	r5, r0
 8005bb0:	460e      	mov	r6, r1
 8005bb2:	b90b      	cbnz	r3, 8005bb8 <_puts_r+0x10>
 8005bb4:	f7ff ffc2 	bl	8005b3c <__sinit>
 8005bb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bba:	07db      	lsls	r3, r3, #31
 8005bbc:	d405      	bmi.n	8005bca <_puts_r+0x22>
 8005bbe:	89a3      	ldrh	r3, [r4, #12]
 8005bc0:	0598      	lsls	r0, r3, #22
 8005bc2:	d402      	bmi.n	8005bca <_puts_r+0x22>
 8005bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bc6:	f000 f9ee 	bl	8005fa6 <__retarget_lock_acquire_recursive>
 8005bca:	89a3      	ldrh	r3, [r4, #12]
 8005bcc:	0719      	lsls	r1, r3, #28
 8005bce:	d502      	bpl.n	8005bd6 <_puts_r+0x2e>
 8005bd0:	6923      	ldr	r3, [r4, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d135      	bne.n	8005c42 <_puts_r+0x9a>
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f000 f911 	bl	8005e00 <__swsetup_r>
 8005bde:	b380      	cbz	r0, 8005c42 <_puts_r+0x9a>
 8005be0:	f04f 35ff 	mov.w	r5, #4294967295
 8005be4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005be6:	07da      	lsls	r2, r3, #31
 8005be8:	d405      	bmi.n	8005bf6 <_puts_r+0x4e>
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	059b      	lsls	r3, r3, #22
 8005bee:	d402      	bmi.n	8005bf6 <_puts_r+0x4e>
 8005bf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bf2:	f000 f9d9 	bl	8005fa8 <__retarget_lock_release_recursive>
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	da04      	bge.n	8005c08 <_puts_r+0x60>
 8005bfe:	69a2      	ldr	r2, [r4, #24]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	dc17      	bgt.n	8005c34 <_puts_r+0x8c>
 8005c04:	290a      	cmp	r1, #10
 8005c06:	d015      	beq.n	8005c34 <_puts_r+0x8c>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	6022      	str	r2, [r4, #0]
 8005c0e:	7019      	strb	r1, [r3, #0]
 8005c10:	68a3      	ldr	r3, [r4, #8]
 8005c12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c16:	3b01      	subs	r3, #1
 8005c18:	60a3      	str	r3, [r4, #8]
 8005c1a:	2900      	cmp	r1, #0
 8005c1c:	d1ed      	bne.n	8005bfa <_puts_r+0x52>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	da11      	bge.n	8005c46 <_puts_r+0x9e>
 8005c22:	4622      	mov	r2, r4
 8005c24:	210a      	movs	r1, #10
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 f8ab 	bl	8005d82 <__swbuf_r>
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	d0d7      	beq.n	8005be0 <_puts_r+0x38>
 8005c30:	250a      	movs	r5, #10
 8005c32:	e7d7      	b.n	8005be4 <_puts_r+0x3c>
 8005c34:	4622      	mov	r2, r4
 8005c36:	4628      	mov	r0, r5
 8005c38:	f000 f8a3 	bl	8005d82 <__swbuf_r>
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d1e7      	bne.n	8005c10 <_puts_r+0x68>
 8005c40:	e7ce      	b.n	8005be0 <_puts_r+0x38>
 8005c42:	3e01      	subs	r6, #1
 8005c44:	e7e4      	b.n	8005c10 <_puts_r+0x68>
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	6022      	str	r2, [r4, #0]
 8005c4c:	220a      	movs	r2, #10
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	e7ee      	b.n	8005c30 <_puts_r+0x88>
	...

08005c54 <puts>:
 8005c54:	4b02      	ldr	r3, [pc, #8]	@ (8005c60 <puts+0xc>)
 8005c56:	4601      	mov	r1, r0
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	f7ff bfa5 	b.w	8005ba8 <_puts_r>
 8005c5e:	bf00      	nop
 8005c60:	20000018 	.word	0x20000018

08005c64 <siprintf>:
 8005c64:	b40e      	push	{r1, r2, r3}
 8005c66:	b500      	push	{lr}
 8005c68:	b09c      	sub	sp, #112	@ 0x70
 8005c6a:	ab1d      	add	r3, sp, #116	@ 0x74
 8005c6c:	9002      	str	r0, [sp, #8]
 8005c6e:	9006      	str	r0, [sp, #24]
 8005c70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005c74:	4809      	ldr	r0, [pc, #36]	@ (8005c9c <siprintf+0x38>)
 8005c76:	9107      	str	r1, [sp, #28]
 8005c78:	9104      	str	r1, [sp, #16]
 8005c7a:	4909      	ldr	r1, [pc, #36]	@ (8005ca0 <siprintf+0x3c>)
 8005c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c80:	9105      	str	r1, [sp, #20]
 8005c82:	6800      	ldr	r0, [r0, #0]
 8005c84:	9301      	str	r3, [sp, #4]
 8005c86:	a902      	add	r1, sp, #8
 8005c88:	f002 fc74 	bl	8008574 <_svfiprintf_r>
 8005c8c:	9b02      	ldr	r3, [sp, #8]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	b01c      	add	sp, #112	@ 0x70
 8005c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c98:	b003      	add	sp, #12
 8005c9a:	4770      	bx	lr
 8005c9c:	20000018 	.word	0x20000018
 8005ca0:	ffff0208 	.word	0xffff0208

08005ca4 <siscanf>:
 8005ca4:	b40e      	push	{r1, r2, r3}
 8005ca6:	b530      	push	{r4, r5, lr}
 8005ca8:	b09c      	sub	sp, #112	@ 0x70
 8005caa:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005cac:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005cb0:	f854 5b04 	ldr.w	r5, [r4], #4
 8005cb4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005cb8:	9002      	str	r0, [sp, #8]
 8005cba:	9006      	str	r0, [sp, #24]
 8005cbc:	f7fa fae8 	bl	8000290 <strlen>
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf0 <siscanf+0x4c>)
 8005cc2:	9003      	str	r0, [sp, #12]
 8005cc4:	9007      	str	r0, [sp, #28]
 8005cc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cc8:	480a      	ldr	r0, [pc, #40]	@ (8005cf4 <siscanf+0x50>)
 8005cca:	9401      	str	r4, [sp, #4]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005cd0:	9314      	str	r3, [sp, #80]	@ 0x50
 8005cd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005cd6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005cda:	462a      	mov	r2, r5
 8005cdc:	4623      	mov	r3, r4
 8005cde:	a902      	add	r1, sp, #8
 8005ce0:	6800      	ldr	r0, [r0, #0]
 8005ce2:	f002 fd9b 	bl	800881c <__ssvfiscanf_r>
 8005ce6:	b01c      	add	sp, #112	@ 0x70
 8005ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cec:	b003      	add	sp, #12
 8005cee:	4770      	bx	lr
 8005cf0:	08005d1b 	.word	0x08005d1b
 8005cf4:	20000018 	.word	0x20000018

08005cf8 <__sread>:
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d00:	f000 f902 	bl	8005f08 <_read_r>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	bfab      	itete	ge
 8005d08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d0c:	181b      	addge	r3, r3, r0
 8005d0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d12:	bfac      	ite	ge
 8005d14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d16:	81a3      	strhlt	r3, [r4, #12]
 8005d18:	bd10      	pop	{r4, pc}

08005d1a <__seofread>:
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	4770      	bx	lr

08005d1e <__swrite>:
 8005d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d22:	461f      	mov	r7, r3
 8005d24:	898b      	ldrh	r3, [r1, #12]
 8005d26:	05db      	lsls	r3, r3, #23
 8005d28:	4605      	mov	r5, r0
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	4616      	mov	r6, r2
 8005d2e:	d505      	bpl.n	8005d3c <__swrite+0x1e>
 8005d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d34:	2302      	movs	r3, #2
 8005d36:	2200      	movs	r2, #0
 8005d38:	f000 f8d4 	bl	8005ee4 <_lseek_r>
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d46:	81a3      	strh	r3, [r4, #12]
 8005d48:	4632      	mov	r2, r6
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d52:	f000 b8eb 	b.w	8005f2c <_write_r>

08005d56 <__sseek>:
 8005d56:	b510      	push	{r4, lr}
 8005d58:	460c      	mov	r4, r1
 8005d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d5e:	f000 f8c1 	bl	8005ee4 <_lseek_r>
 8005d62:	1c43      	adds	r3, r0, #1
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	bf15      	itete	ne
 8005d68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d72:	81a3      	strheq	r3, [r4, #12]
 8005d74:	bf18      	it	ne
 8005d76:	81a3      	strhne	r3, [r4, #12]
 8005d78:	bd10      	pop	{r4, pc}

08005d7a <__sclose>:
 8005d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d7e:	f000 b8a1 	b.w	8005ec4 <_close_r>

08005d82 <__swbuf_r>:
 8005d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d84:	460e      	mov	r6, r1
 8005d86:	4614      	mov	r4, r2
 8005d88:	4605      	mov	r5, r0
 8005d8a:	b118      	cbz	r0, 8005d94 <__swbuf_r+0x12>
 8005d8c:	6a03      	ldr	r3, [r0, #32]
 8005d8e:	b90b      	cbnz	r3, 8005d94 <__swbuf_r+0x12>
 8005d90:	f7ff fed4 	bl	8005b3c <__sinit>
 8005d94:	69a3      	ldr	r3, [r4, #24]
 8005d96:	60a3      	str	r3, [r4, #8]
 8005d98:	89a3      	ldrh	r3, [r4, #12]
 8005d9a:	071a      	lsls	r2, r3, #28
 8005d9c:	d501      	bpl.n	8005da2 <__swbuf_r+0x20>
 8005d9e:	6923      	ldr	r3, [r4, #16]
 8005da0:	b943      	cbnz	r3, 8005db4 <__swbuf_r+0x32>
 8005da2:	4621      	mov	r1, r4
 8005da4:	4628      	mov	r0, r5
 8005da6:	f000 f82b 	bl	8005e00 <__swsetup_r>
 8005daa:	b118      	cbz	r0, 8005db4 <__swbuf_r+0x32>
 8005dac:	f04f 37ff 	mov.w	r7, #4294967295
 8005db0:	4638      	mov	r0, r7
 8005db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	6922      	ldr	r2, [r4, #16]
 8005db8:	1a98      	subs	r0, r3, r2
 8005dba:	6963      	ldr	r3, [r4, #20]
 8005dbc:	b2f6      	uxtb	r6, r6
 8005dbe:	4283      	cmp	r3, r0
 8005dc0:	4637      	mov	r7, r6
 8005dc2:	dc05      	bgt.n	8005dd0 <__swbuf_r+0x4e>
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f003 f86e 	bl	8008ea8 <_fflush_r>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d1ed      	bne.n	8005dac <__swbuf_r+0x2a>
 8005dd0:	68a3      	ldr	r3, [r4, #8]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	60a3      	str	r3, [r4, #8]
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	6022      	str	r2, [r4, #0]
 8005ddc:	701e      	strb	r6, [r3, #0]
 8005dde:	6962      	ldr	r2, [r4, #20]
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d004      	beq.n	8005df0 <__swbuf_r+0x6e>
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	07db      	lsls	r3, r3, #31
 8005dea:	d5e1      	bpl.n	8005db0 <__swbuf_r+0x2e>
 8005dec:	2e0a      	cmp	r6, #10
 8005dee:	d1df      	bne.n	8005db0 <__swbuf_r+0x2e>
 8005df0:	4621      	mov	r1, r4
 8005df2:	4628      	mov	r0, r5
 8005df4:	f003 f858 	bl	8008ea8 <_fflush_r>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d0d9      	beq.n	8005db0 <__swbuf_r+0x2e>
 8005dfc:	e7d6      	b.n	8005dac <__swbuf_r+0x2a>
	...

08005e00 <__swsetup_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4b29      	ldr	r3, [pc, #164]	@ (8005ea8 <__swsetup_r+0xa8>)
 8005e04:	4605      	mov	r5, r0
 8005e06:	6818      	ldr	r0, [r3, #0]
 8005e08:	460c      	mov	r4, r1
 8005e0a:	b118      	cbz	r0, 8005e14 <__swsetup_r+0x14>
 8005e0c:	6a03      	ldr	r3, [r0, #32]
 8005e0e:	b90b      	cbnz	r3, 8005e14 <__swsetup_r+0x14>
 8005e10:	f7ff fe94 	bl	8005b3c <__sinit>
 8005e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e18:	0719      	lsls	r1, r3, #28
 8005e1a:	d422      	bmi.n	8005e62 <__swsetup_r+0x62>
 8005e1c:	06da      	lsls	r2, r3, #27
 8005e1e:	d407      	bmi.n	8005e30 <__swsetup_r+0x30>
 8005e20:	2209      	movs	r2, #9
 8005e22:	602a      	str	r2, [r5, #0]
 8005e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e28:	81a3      	strh	r3, [r4, #12]
 8005e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2e:	e033      	b.n	8005e98 <__swsetup_r+0x98>
 8005e30:	0758      	lsls	r0, r3, #29
 8005e32:	d512      	bpl.n	8005e5a <__swsetup_r+0x5a>
 8005e34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e36:	b141      	cbz	r1, 8005e4a <__swsetup_r+0x4a>
 8005e38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e3c:	4299      	cmp	r1, r3
 8005e3e:	d002      	beq.n	8005e46 <__swsetup_r+0x46>
 8005e40:	4628      	mov	r0, r5
 8005e42:	f000 ff05 	bl	8006c50 <_free_r>
 8005e46:	2300      	movs	r3, #0
 8005e48:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e4a:	89a3      	ldrh	r3, [r4, #12]
 8005e4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e50:	81a3      	strh	r3, [r4, #12]
 8005e52:	2300      	movs	r3, #0
 8005e54:	6063      	str	r3, [r4, #4]
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	f043 0308 	orr.w	r3, r3, #8
 8005e60:	81a3      	strh	r3, [r4, #12]
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	b94b      	cbnz	r3, 8005e7a <__swsetup_r+0x7a>
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e70:	d003      	beq.n	8005e7a <__swsetup_r+0x7a>
 8005e72:	4621      	mov	r1, r4
 8005e74:	4628      	mov	r0, r5
 8005e76:	f003 f865 	bl	8008f44 <__smakebuf_r>
 8005e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e7e:	f013 0201 	ands.w	r2, r3, #1
 8005e82:	d00a      	beq.n	8005e9a <__swsetup_r+0x9a>
 8005e84:	2200      	movs	r2, #0
 8005e86:	60a2      	str	r2, [r4, #8]
 8005e88:	6962      	ldr	r2, [r4, #20]
 8005e8a:	4252      	negs	r2, r2
 8005e8c:	61a2      	str	r2, [r4, #24]
 8005e8e:	6922      	ldr	r2, [r4, #16]
 8005e90:	b942      	cbnz	r2, 8005ea4 <__swsetup_r+0xa4>
 8005e92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005e96:	d1c5      	bne.n	8005e24 <__swsetup_r+0x24>
 8005e98:	bd38      	pop	{r3, r4, r5, pc}
 8005e9a:	0799      	lsls	r1, r3, #30
 8005e9c:	bf58      	it	pl
 8005e9e:	6962      	ldrpl	r2, [r4, #20]
 8005ea0:	60a2      	str	r2, [r4, #8]
 8005ea2:	e7f4      	b.n	8005e8e <__swsetup_r+0x8e>
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	e7f7      	b.n	8005e98 <__swsetup_r+0x98>
 8005ea8:	20000018 	.word	0x20000018

08005eac <memset>:
 8005eac:	4402      	add	r2, r0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d100      	bne.n	8005eb6 <memset+0xa>
 8005eb4:	4770      	bx	lr
 8005eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eba:	e7f9      	b.n	8005eb0 <memset+0x4>

08005ebc <_localeconv_r>:
 8005ebc:	4800      	ldr	r0, [pc, #0]	@ (8005ec0 <_localeconv_r+0x4>)
 8005ebe:	4770      	bx	lr
 8005ec0:	20000158 	.word	0x20000158

08005ec4 <_close_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4d06      	ldr	r5, [pc, #24]	@ (8005ee0 <_close_r+0x1c>)
 8005ec8:	2300      	movs	r3, #0
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4608      	mov	r0, r1
 8005ece:	602b      	str	r3, [r5, #0]
 8005ed0:	f7fb fae8 	bl	80014a4 <_close>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	d102      	bne.n	8005ede <_close_r+0x1a>
 8005ed8:	682b      	ldr	r3, [r5, #0]
 8005eda:	b103      	cbz	r3, 8005ede <_close_r+0x1a>
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	200004a8 	.word	0x200004a8

08005ee4 <_lseek_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4d07      	ldr	r5, [pc, #28]	@ (8005f04 <_lseek_r+0x20>)
 8005ee8:	4604      	mov	r4, r0
 8005eea:	4608      	mov	r0, r1
 8005eec:	4611      	mov	r1, r2
 8005eee:	2200      	movs	r2, #0
 8005ef0:	602a      	str	r2, [r5, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f7fb fafd 	bl	80014f2 <_lseek>
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	d102      	bne.n	8005f02 <_lseek_r+0x1e>
 8005efc:	682b      	ldr	r3, [r5, #0]
 8005efe:	b103      	cbz	r3, 8005f02 <_lseek_r+0x1e>
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	bd38      	pop	{r3, r4, r5, pc}
 8005f04:	200004a8 	.word	0x200004a8

08005f08 <_read_r>:
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	4d07      	ldr	r5, [pc, #28]	@ (8005f28 <_read_r+0x20>)
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	4608      	mov	r0, r1
 8005f10:	4611      	mov	r1, r2
 8005f12:	2200      	movs	r2, #0
 8005f14:	602a      	str	r2, [r5, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	f7fb fa8b 	bl	8001432 <_read>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	d102      	bne.n	8005f26 <_read_r+0x1e>
 8005f20:	682b      	ldr	r3, [r5, #0]
 8005f22:	b103      	cbz	r3, 8005f26 <_read_r+0x1e>
 8005f24:	6023      	str	r3, [r4, #0]
 8005f26:	bd38      	pop	{r3, r4, r5, pc}
 8005f28:	200004a8 	.word	0x200004a8

08005f2c <_write_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	4d07      	ldr	r5, [pc, #28]	@ (8005f4c <_write_r+0x20>)
 8005f30:	4604      	mov	r4, r0
 8005f32:	4608      	mov	r0, r1
 8005f34:	4611      	mov	r1, r2
 8005f36:	2200      	movs	r2, #0
 8005f38:	602a      	str	r2, [r5, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f7fb fa96 	bl	800146c <_write>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d102      	bne.n	8005f4a <_write_r+0x1e>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	b103      	cbz	r3, 8005f4a <_write_r+0x1e>
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
 8005f4c:	200004a8 	.word	0x200004a8

08005f50 <__errno>:
 8005f50:	4b01      	ldr	r3, [pc, #4]	@ (8005f58 <__errno+0x8>)
 8005f52:	6818      	ldr	r0, [r3, #0]
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	20000018 	.word	0x20000018

08005f5c <__libc_init_array>:
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	4d0d      	ldr	r5, [pc, #52]	@ (8005f94 <__libc_init_array+0x38>)
 8005f60:	4c0d      	ldr	r4, [pc, #52]	@ (8005f98 <__libc_init_array+0x3c>)
 8005f62:	1b64      	subs	r4, r4, r5
 8005f64:	10a4      	asrs	r4, r4, #2
 8005f66:	2600      	movs	r6, #0
 8005f68:	42a6      	cmp	r6, r4
 8005f6a:	d109      	bne.n	8005f80 <__libc_init_array+0x24>
 8005f6c:	4d0b      	ldr	r5, [pc, #44]	@ (8005f9c <__libc_init_array+0x40>)
 8005f6e:	4c0c      	ldr	r4, [pc, #48]	@ (8005fa0 <__libc_init_array+0x44>)
 8005f70:	f003 fede 	bl	8009d30 <_init>
 8005f74:	1b64      	subs	r4, r4, r5
 8005f76:	10a4      	asrs	r4, r4, #2
 8005f78:	2600      	movs	r6, #0
 8005f7a:	42a6      	cmp	r6, r4
 8005f7c:	d105      	bne.n	8005f8a <__libc_init_array+0x2e>
 8005f7e:	bd70      	pop	{r4, r5, r6, pc}
 8005f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f84:	4798      	blx	r3
 8005f86:	3601      	adds	r6, #1
 8005f88:	e7ee      	b.n	8005f68 <__libc_init_array+0xc>
 8005f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f8e:	4798      	blx	r3
 8005f90:	3601      	adds	r6, #1
 8005f92:	e7f2      	b.n	8005f7a <__libc_init_array+0x1e>
 8005f94:	0800a304 	.word	0x0800a304
 8005f98:	0800a304 	.word	0x0800a304
 8005f9c:	0800a304 	.word	0x0800a304
 8005fa0:	0800a308 	.word	0x0800a308

08005fa4 <__retarget_lock_init_recursive>:
 8005fa4:	4770      	bx	lr

08005fa6 <__retarget_lock_acquire_recursive>:
 8005fa6:	4770      	bx	lr

08005fa8 <__retarget_lock_release_recursive>:
 8005fa8:	4770      	bx	lr
	...

08005fac <nanf>:
 8005fac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005fb4 <nanf+0x8>
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	7fc00000 	.word	0x7fc00000

08005fb8 <quorem>:
 8005fb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	6903      	ldr	r3, [r0, #16]
 8005fbe:	690c      	ldr	r4, [r1, #16]
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	4607      	mov	r7, r0
 8005fc4:	db7e      	blt.n	80060c4 <quorem+0x10c>
 8005fc6:	3c01      	subs	r4, #1
 8005fc8:	f101 0814 	add.w	r8, r1, #20
 8005fcc:	00a3      	lsls	r3, r4, #2
 8005fce:	f100 0514 	add.w	r5, r0, #20
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fd8:	9301      	str	r3, [sp, #4]
 8005fda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fea:	fbb2 f6f3 	udiv	r6, r2, r3
 8005fee:	d32e      	bcc.n	800604e <quorem+0x96>
 8005ff0:	f04f 0a00 	mov.w	sl, #0
 8005ff4:	46c4      	mov	ip, r8
 8005ff6:	46ae      	mov	lr, r5
 8005ff8:	46d3      	mov	fp, sl
 8005ffa:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ffe:	b298      	uxth	r0, r3
 8006000:	fb06 a000 	mla	r0, r6, r0, sl
 8006004:	0c02      	lsrs	r2, r0, #16
 8006006:	0c1b      	lsrs	r3, r3, #16
 8006008:	fb06 2303 	mla	r3, r6, r3, r2
 800600c:	f8de 2000 	ldr.w	r2, [lr]
 8006010:	b280      	uxth	r0, r0
 8006012:	b292      	uxth	r2, r2
 8006014:	1a12      	subs	r2, r2, r0
 8006016:	445a      	add	r2, fp
 8006018:	f8de 0000 	ldr.w	r0, [lr]
 800601c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006020:	b29b      	uxth	r3, r3
 8006022:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006026:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800602a:	b292      	uxth	r2, r2
 800602c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006030:	45e1      	cmp	r9, ip
 8006032:	f84e 2b04 	str.w	r2, [lr], #4
 8006036:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800603a:	d2de      	bcs.n	8005ffa <quorem+0x42>
 800603c:	9b00      	ldr	r3, [sp, #0]
 800603e:	58eb      	ldr	r3, [r5, r3]
 8006040:	b92b      	cbnz	r3, 800604e <quorem+0x96>
 8006042:	9b01      	ldr	r3, [sp, #4]
 8006044:	3b04      	subs	r3, #4
 8006046:	429d      	cmp	r5, r3
 8006048:	461a      	mov	r2, r3
 800604a:	d32f      	bcc.n	80060ac <quorem+0xf4>
 800604c:	613c      	str	r4, [r7, #16]
 800604e:	4638      	mov	r0, r7
 8006050:	f001 f9c2 	bl	80073d8 <__mcmp>
 8006054:	2800      	cmp	r0, #0
 8006056:	db25      	blt.n	80060a4 <quorem+0xec>
 8006058:	4629      	mov	r1, r5
 800605a:	2000      	movs	r0, #0
 800605c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006060:	f8d1 c000 	ldr.w	ip, [r1]
 8006064:	fa1f fe82 	uxth.w	lr, r2
 8006068:	fa1f f38c 	uxth.w	r3, ip
 800606c:	eba3 030e 	sub.w	r3, r3, lr
 8006070:	4403      	add	r3, r0
 8006072:	0c12      	lsrs	r2, r2, #16
 8006074:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006078:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800607c:	b29b      	uxth	r3, r3
 800607e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006082:	45c1      	cmp	r9, r8
 8006084:	f841 3b04 	str.w	r3, [r1], #4
 8006088:	ea4f 4022 	mov.w	r0, r2, asr #16
 800608c:	d2e6      	bcs.n	800605c <quorem+0xa4>
 800608e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006092:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006096:	b922      	cbnz	r2, 80060a2 <quorem+0xea>
 8006098:	3b04      	subs	r3, #4
 800609a:	429d      	cmp	r5, r3
 800609c:	461a      	mov	r2, r3
 800609e:	d30b      	bcc.n	80060b8 <quorem+0x100>
 80060a0:	613c      	str	r4, [r7, #16]
 80060a2:	3601      	adds	r6, #1
 80060a4:	4630      	mov	r0, r6
 80060a6:	b003      	add	sp, #12
 80060a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ac:	6812      	ldr	r2, [r2, #0]
 80060ae:	3b04      	subs	r3, #4
 80060b0:	2a00      	cmp	r2, #0
 80060b2:	d1cb      	bne.n	800604c <quorem+0x94>
 80060b4:	3c01      	subs	r4, #1
 80060b6:	e7c6      	b.n	8006046 <quorem+0x8e>
 80060b8:	6812      	ldr	r2, [r2, #0]
 80060ba:	3b04      	subs	r3, #4
 80060bc:	2a00      	cmp	r2, #0
 80060be:	d1ef      	bne.n	80060a0 <quorem+0xe8>
 80060c0:	3c01      	subs	r4, #1
 80060c2:	e7ea      	b.n	800609a <quorem+0xe2>
 80060c4:	2000      	movs	r0, #0
 80060c6:	e7ee      	b.n	80060a6 <quorem+0xee>

080060c8 <_dtoa_r>:
 80060c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060cc:	69c7      	ldr	r7, [r0, #28]
 80060ce:	b099      	sub	sp, #100	@ 0x64
 80060d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80060d4:	ec55 4b10 	vmov	r4, r5, d0
 80060d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80060da:	9109      	str	r1, [sp, #36]	@ 0x24
 80060dc:	4683      	mov	fp, r0
 80060de:	920e      	str	r2, [sp, #56]	@ 0x38
 80060e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80060e2:	b97f      	cbnz	r7, 8006104 <_dtoa_r+0x3c>
 80060e4:	2010      	movs	r0, #16
 80060e6:	f000 fdfd 	bl	8006ce4 <malloc>
 80060ea:	4602      	mov	r2, r0
 80060ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80060f0:	b920      	cbnz	r0, 80060fc <_dtoa_r+0x34>
 80060f2:	4ba7      	ldr	r3, [pc, #668]	@ (8006390 <_dtoa_r+0x2c8>)
 80060f4:	21ef      	movs	r1, #239	@ 0xef
 80060f6:	48a7      	ldr	r0, [pc, #668]	@ (8006394 <_dtoa_r+0x2cc>)
 80060f8:	f003 f84a 	bl	8009190 <__assert_func>
 80060fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006100:	6007      	str	r7, [r0, #0]
 8006102:	60c7      	str	r7, [r0, #12]
 8006104:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006108:	6819      	ldr	r1, [r3, #0]
 800610a:	b159      	cbz	r1, 8006124 <_dtoa_r+0x5c>
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	604a      	str	r2, [r1, #4]
 8006110:	2301      	movs	r3, #1
 8006112:	4093      	lsls	r3, r2
 8006114:	608b      	str	r3, [r1, #8]
 8006116:	4658      	mov	r0, fp
 8006118:	f000 feda 	bl	8006ed0 <_Bfree>
 800611c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	1e2b      	subs	r3, r5, #0
 8006126:	bfb9      	ittee	lt
 8006128:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800612c:	9303      	strlt	r3, [sp, #12]
 800612e:	2300      	movge	r3, #0
 8006130:	6033      	strge	r3, [r6, #0]
 8006132:	9f03      	ldr	r7, [sp, #12]
 8006134:	4b98      	ldr	r3, [pc, #608]	@ (8006398 <_dtoa_r+0x2d0>)
 8006136:	bfbc      	itt	lt
 8006138:	2201      	movlt	r2, #1
 800613a:	6032      	strlt	r2, [r6, #0]
 800613c:	43bb      	bics	r3, r7
 800613e:	d112      	bne.n	8006166 <_dtoa_r+0x9e>
 8006140:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006142:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800614c:	4323      	orrs	r3, r4
 800614e:	f000 854d 	beq.w	8006bec <_dtoa_r+0xb24>
 8006152:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006154:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80063ac <_dtoa_r+0x2e4>
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 854f 	beq.w	8006bfc <_dtoa_r+0xb34>
 800615e:	f10a 0303 	add.w	r3, sl, #3
 8006162:	f000 bd49 	b.w	8006bf8 <_dtoa_r+0xb30>
 8006166:	ed9d 7b02 	vldr	d7, [sp, #8]
 800616a:	2200      	movs	r2, #0
 800616c:	ec51 0b17 	vmov	r0, r1, d7
 8006170:	2300      	movs	r3, #0
 8006172:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006176:	f7fa fcb7 	bl	8000ae8 <__aeabi_dcmpeq>
 800617a:	4680      	mov	r8, r0
 800617c:	b158      	cbz	r0, 8006196 <_dtoa_r+0xce>
 800617e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006180:	2301      	movs	r3, #1
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006186:	b113      	cbz	r3, 800618e <_dtoa_r+0xc6>
 8006188:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800618a:	4b84      	ldr	r3, [pc, #528]	@ (800639c <_dtoa_r+0x2d4>)
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80063b0 <_dtoa_r+0x2e8>
 8006192:	f000 bd33 	b.w	8006bfc <_dtoa_r+0xb34>
 8006196:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800619a:	aa16      	add	r2, sp, #88	@ 0x58
 800619c:	a917      	add	r1, sp, #92	@ 0x5c
 800619e:	4658      	mov	r0, fp
 80061a0:	f001 fa3a 	bl	8007618 <__d2b>
 80061a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80061a8:	4681      	mov	r9, r0
 80061aa:	2e00      	cmp	r6, #0
 80061ac:	d077      	beq.n	800629e <_dtoa_r+0x1d6>
 80061ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80061b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80061c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80061c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80061c8:	4619      	mov	r1, r3
 80061ca:	2200      	movs	r2, #0
 80061cc:	4b74      	ldr	r3, [pc, #464]	@ (80063a0 <_dtoa_r+0x2d8>)
 80061ce:	f7fa f86b 	bl	80002a8 <__aeabi_dsub>
 80061d2:	a369      	add	r3, pc, #420	@ (adr r3, 8006378 <_dtoa_r+0x2b0>)
 80061d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d8:	f7fa fa1e 	bl	8000618 <__aeabi_dmul>
 80061dc:	a368      	add	r3, pc, #416	@ (adr r3, 8006380 <_dtoa_r+0x2b8>)
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	f7fa f863 	bl	80002ac <__adddf3>
 80061e6:	4604      	mov	r4, r0
 80061e8:	4630      	mov	r0, r6
 80061ea:	460d      	mov	r5, r1
 80061ec:	f7fa f9aa 	bl	8000544 <__aeabi_i2d>
 80061f0:	a365      	add	r3, pc, #404	@ (adr r3, 8006388 <_dtoa_r+0x2c0>)
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	f7fa fa0f 	bl	8000618 <__aeabi_dmul>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4620      	mov	r0, r4
 8006200:	4629      	mov	r1, r5
 8006202:	f7fa f853 	bl	80002ac <__adddf3>
 8006206:	4604      	mov	r4, r0
 8006208:	460d      	mov	r5, r1
 800620a:	f7fa fcb5 	bl	8000b78 <__aeabi_d2iz>
 800620e:	2200      	movs	r2, #0
 8006210:	4607      	mov	r7, r0
 8006212:	2300      	movs	r3, #0
 8006214:	4620      	mov	r0, r4
 8006216:	4629      	mov	r1, r5
 8006218:	f7fa fc70 	bl	8000afc <__aeabi_dcmplt>
 800621c:	b140      	cbz	r0, 8006230 <_dtoa_r+0x168>
 800621e:	4638      	mov	r0, r7
 8006220:	f7fa f990 	bl	8000544 <__aeabi_i2d>
 8006224:	4622      	mov	r2, r4
 8006226:	462b      	mov	r3, r5
 8006228:	f7fa fc5e 	bl	8000ae8 <__aeabi_dcmpeq>
 800622c:	b900      	cbnz	r0, 8006230 <_dtoa_r+0x168>
 800622e:	3f01      	subs	r7, #1
 8006230:	2f16      	cmp	r7, #22
 8006232:	d851      	bhi.n	80062d8 <_dtoa_r+0x210>
 8006234:	4b5b      	ldr	r3, [pc, #364]	@ (80063a4 <_dtoa_r+0x2dc>)
 8006236:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006242:	f7fa fc5b 	bl	8000afc <__aeabi_dcmplt>
 8006246:	2800      	cmp	r0, #0
 8006248:	d048      	beq.n	80062dc <_dtoa_r+0x214>
 800624a:	3f01      	subs	r7, #1
 800624c:	2300      	movs	r3, #0
 800624e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006250:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006252:	1b9b      	subs	r3, r3, r6
 8006254:	1e5a      	subs	r2, r3, #1
 8006256:	bf44      	itt	mi
 8006258:	f1c3 0801 	rsbmi	r8, r3, #1
 800625c:	2300      	movmi	r3, #0
 800625e:	9208      	str	r2, [sp, #32]
 8006260:	bf54      	ite	pl
 8006262:	f04f 0800 	movpl.w	r8, #0
 8006266:	9308      	strmi	r3, [sp, #32]
 8006268:	2f00      	cmp	r7, #0
 800626a:	db39      	blt.n	80062e0 <_dtoa_r+0x218>
 800626c:	9b08      	ldr	r3, [sp, #32]
 800626e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006270:	443b      	add	r3, r7
 8006272:	9308      	str	r3, [sp, #32]
 8006274:	2300      	movs	r3, #0
 8006276:	930a      	str	r3, [sp, #40]	@ 0x28
 8006278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800627a:	2b09      	cmp	r3, #9
 800627c:	d864      	bhi.n	8006348 <_dtoa_r+0x280>
 800627e:	2b05      	cmp	r3, #5
 8006280:	bfc4      	itt	gt
 8006282:	3b04      	subgt	r3, #4
 8006284:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006288:	f1a3 0302 	sub.w	r3, r3, #2
 800628c:	bfcc      	ite	gt
 800628e:	2400      	movgt	r4, #0
 8006290:	2401      	movle	r4, #1
 8006292:	2b03      	cmp	r3, #3
 8006294:	d863      	bhi.n	800635e <_dtoa_r+0x296>
 8006296:	e8df f003 	tbb	[pc, r3]
 800629a:	372a      	.short	0x372a
 800629c:	5535      	.short	0x5535
 800629e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80062a2:	441e      	add	r6, r3
 80062a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	bfc1      	itttt	gt
 80062ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80062b0:	409f      	lslgt	r7, r3
 80062b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80062b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80062ba:	bfd6      	itet	le
 80062bc:	f1c3 0320 	rsble	r3, r3, #32
 80062c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80062c4:	fa04 f003 	lslle.w	r0, r4, r3
 80062c8:	f7fa f92c 	bl	8000524 <__aeabi_ui2d>
 80062cc:	2201      	movs	r2, #1
 80062ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80062d2:	3e01      	subs	r6, #1
 80062d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80062d6:	e777      	b.n	80061c8 <_dtoa_r+0x100>
 80062d8:	2301      	movs	r3, #1
 80062da:	e7b8      	b.n	800624e <_dtoa_r+0x186>
 80062dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80062de:	e7b7      	b.n	8006250 <_dtoa_r+0x188>
 80062e0:	427b      	negs	r3, r7
 80062e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80062e4:	2300      	movs	r3, #0
 80062e6:	eba8 0807 	sub.w	r8, r8, r7
 80062ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80062ec:	e7c4      	b.n	8006278 <_dtoa_r+0x1b0>
 80062ee:	2300      	movs	r3, #0
 80062f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	dc35      	bgt.n	8006364 <_dtoa_r+0x29c>
 80062f8:	2301      	movs	r3, #1
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	9307      	str	r3, [sp, #28]
 80062fe:	461a      	mov	r2, r3
 8006300:	920e      	str	r2, [sp, #56]	@ 0x38
 8006302:	e00b      	b.n	800631c <_dtoa_r+0x254>
 8006304:	2301      	movs	r3, #1
 8006306:	e7f3      	b.n	80062f0 <_dtoa_r+0x228>
 8006308:	2300      	movs	r3, #0
 800630a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800630c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800630e:	18fb      	adds	r3, r7, r3
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	3301      	adds	r3, #1
 8006314:	2b01      	cmp	r3, #1
 8006316:	9307      	str	r3, [sp, #28]
 8006318:	bfb8      	it	lt
 800631a:	2301      	movlt	r3, #1
 800631c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006320:	2100      	movs	r1, #0
 8006322:	2204      	movs	r2, #4
 8006324:	f102 0514 	add.w	r5, r2, #20
 8006328:	429d      	cmp	r5, r3
 800632a:	d91f      	bls.n	800636c <_dtoa_r+0x2a4>
 800632c:	6041      	str	r1, [r0, #4]
 800632e:	4658      	mov	r0, fp
 8006330:	f000 fd8e 	bl	8006e50 <_Balloc>
 8006334:	4682      	mov	sl, r0
 8006336:	2800      	cmp	r0, #0
 8006338:	d13c      	bne.n	80063b4 <_dtoa_r+0x2ec>
 800633a:	4b1b      	ldr	r3, [pc, #108]	@ (80063a8 <_dtoa_r+0x2e0>)
 800633c:	4602      	mov	r2, r0
 800633e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006342:	e6d8      	b.n	80060f6 <_dtoa_r+0x2e>
 8006344:	2301      	movs	r3, #1
 8006346:	e7e0      	b.n	800630a <_dtoa_r+0x242>
 8006348:	2401      	movs	r4, #1
 800634a:	2300      	movs	r3, #0
 800634c:	9309      	str	r3, [sp, #36]	@ 0x24
 800634e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006350:	f04f 33ff 	mov.w	r3, #4294967295
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	9307      	str	r3, [sp, #28]
 8006358:	2200      	movs	r2, #0
 800635a:	2312      	movs	r3, #18
 800635c:	e7d0      	b.n	8006300 <_dtoa_r+0x238>
 800635e:	2301      	movs	r3, #1
 8006360:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006362:	e7f5      	b.n	8006350 <_dtoa_r+0x288>
 8006364:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	9307      	str	r3, [sp, #28]
 800636a:	e7d7      	b.n	800631c <_dtoa_r+0x254>
 800636c:	3101      	adds	r1, #1
 800636e:	0052      	lsls	r2, r2, #1
 8006370:	e7d8      	b.n	8006324 <_dtoa_r+0x25c>
 8006372:	bf00      	nop
 8006374:	f3af 8000 	nop.w
 8006378:	636f4361 	.word	0x636f4361
 800637c:	3fd287a7 	.word	0x3fd287a7
 8006380:	8b60c8b3 	.word	0x8b60c8b3
 8006384:	3fc68a28 	.word	0x3fc68a28
 8006388:	509f79fb 	.word	0x509f79fb
 800638c:	3fd34413 	.word	0x3fd34413
 8006390:	08009ef4 	.word	0x08009ef4
 8006394:	08009f0b 	.word	0x08009f0b
 8006398:	7ff00000 	.word	0x7ff00000
 800639c:	0800a251 	.word	0x0800a251
 80063a0:	3ff80000 	.word	0x3ff80000
 80063a4:	0800a008 	.word	0x0800a008
 80063a8:	08009f63 	.word	0x08009f63
 80063ac:	08009ef0 	.word	0x08009ef0
 80063b0:	0800a250 	.word	0x0800a250
 80063b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80063b8:	6018      	str	r0, [r3, #0]
 80063ba:	9b07      	ldr	r3, [sp, #28]
 80063bc:	2b0e      	cmp	r3, #14
 80063be:	f200 80a4 	bhi.w	800650a <_dtoa_r+0x442>
 80063c2:	2c00      	cmp	r4, #0
 80063c4:	f000 80a1 	beq.w	800650a <_dtoa_r+0x442>
 80063c8:	2f00      	cmp	r7, #0
 80063ca:	dd33      	ble.n	8006434 <_dtoa_r+0x36c>
 80063cc:	4bad      	ldr	r3, [pc, #692]	@ (8006684 <_dtoa_r+0x5bc>)
 80063ce:	f007 020f 	and.w	r2, r7, #15
 80063d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063d6:	ed93 7b00 	vldr	d7, [r3]
 80063da:	05f8      	lsls	r0, r7, #23
 80063dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80063e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80063e4:	d516      	bpl.n	8006414 <_dtoa_r+0x34c>
 80063e6:	4ba8      	ldr	r3, [pc, #672]	@ (8006688 <_dtoa_r+0x5c0>)
 80063e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063f0:	f7fa fa3c 	bl	800086c <__aeabi_ddiv>
 80063f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063f8:	f004 040f 	and.w	r4, r4, #15
 80063fc:	2603      	movs	r6, #3
 80063fe:	4da2      	ldr	r5, [pc, #648]	@ (8006688 <_dtoa_r+0x5c0>)
 8006400:	b954      	cbnz	r4, 8006418 <_dtoa_r+0x350>
 8006402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800640a:	f7fa fa2f 	bl	800086c <__aeabi_ddiv>
 800640e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006412:	e028      	b.n	8006466 <_dtoa_r+0x39e>
 8006414:	2602      	movs	r6, #2
 8006416:	e7f2      	b.n	80063fe <_dtoa_r+0x336>
 8006418:	07e1      	lsls	r1, r4, #31
 800641a:	d508      	bpl.n	800642e <_dtoa_r+0x366>
 800641c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006420:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006424:	f7fa f8f8 	bl	8000618 <__aeabi_dmul>
 8006428:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800642c:	3601      	adds	r6, #1
 800642e:	1064      	asrs	r4, r4, #1
 8006430:	3508      	adds	r5, #8
 8006432:	e7e5      	b.n	8006400 <_dtoa_r+0x338>
 8006434:	f000 80d2 	beq.w	80065dc <_dtoa_r+0x514>
 8006438:	427c      	negs	r4, r7
 800643a:	4b92      	ldr	r3, [pc, #584]	@ (8006684 <_dtoa_r+0x5bc>)
 800643c:	4d92      	ldr	r5, [pc, #584]	@ (8006688 <_dtoa_r+0x5c0>)
 800643e:	f004 020f 	and.w	r2, r4, #15
 8006442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800644e:	f7fa f8e3 	bl	8000618 <__aeabi_dmul>
 8006452:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006456:	1124      	asrs	r4, r4, #4
 8006458:	2300      	movs	r3, #0
 800645a:	2602      	movs	r6, #2
 800645c:	2c00      	cmp	r4, #0
 800645e:	f040 80b2 	bne.w	80065c6 <_dtoa_r+0x4fe>
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1d3      	bne.n	800640e <_dtoa_r+0x346>
 8006466:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006468:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 80b7 	beq.w	80065e0 <_dtoa_r+0x518>
 8006472:	4b86      	ldr	r3, [pc, #536]	@ (800668c <_dtoa_r+0x5c4>)
 8006474:	2200      	movs	r2, #0
 8006476:	4620      	mov	r0, r4
 8006478:	4629      	mov	r1, r5
 800647a:	f7fa fb3f 	bl	8000afc <__aeabi_dcmplt>
 800647e:	2800      	cmp	r0, #0
 8006480:	f000 80ae 	beq.w	80065e0 <_dtoa_r+0x518>
 8006484:	9b07      	ldr	r3, [sp, #28]
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 80aa 	beq.w	80065e0 <_dtoa_r+0x518>
 800648c:	9b00      	ldr	r3, [sp, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	dd37      	ble.n	8006502 <_dtoa_r+0x43a>
 8006492:	1e7b      	subs	r3, r7, #1
 8006494:	9304      	str	r3, [sp, #16]
 8006496:	4620      	mov	r0, r4
 8006498:	4b7d      	ldr	r3, [pc, #500]	@ (8006690 <_dtoa_r+0x5c8>)
 800649a:	2200      	movs	r2, #0
 800649c:	4629      	mov	r1, r5
 800649e:	f7fa f8bb 	bl	8000618 <__aeabi_dmul>
 80064a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a6:	9c00      	ldr	r4, [sp, #0]
 80064a8:	3601      	adds	r6, #1
 80064aa:	4630      	mov	r0, r6
 80064ac:	f7fa f84a 	bl	8000544 <__aeabi_i2d>
 80064b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064b4:	f7fa f8b0 	bl	8000618 <__aeabi_dmul>
 80064b8:	4b76      	ldr	r3, [pc, #472]	@ (8006694 <_dtoa_r+0x5cc>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	f7f9 fef6 	bl	80002ac <__adddf3>
 80064c0:	4605      	mov	r5, r0
 80064c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80064c6:	2c00      	cmp	r4, #0
 80064c8:	f040 808d 	bne.w	80065e6 <_dtoa_r+0x51e>
 80064cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064d0:	4b71      	ldr	r3, [pc, #452]	@ (8006698 <_dtoa_r+0x5d0>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	f7f9 fee8 	bl	80002a8 <__aeabi_dsub>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064e0:	462a      	mov	r2, r5
 80064e2:	4633      	mov	r3, r6
 80064e4:	f7fa fb28 	bl	8000b38 <__aeabi_dcmpgt>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	f040 828b 	bne.w	8006a04 <_dtoa_r+0x93c>
 80064ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064f2:	462a      	mov	r2, r5
 80064f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80064f8:	f7fa fb00 	bl	8000afc <__aeabi_dcmplt>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	f040 8128 	bne.w	8006752 <_dtoa_r+0x68a>
 8006502:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006506:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800650a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800650c:	2b00      	cmp	r3, #0
 800650e:	f2c0 815a 	blt.w	80067c6 <_dtoa_r+0x6fe>
 8006512:	2f0e      	cmp	r7, #14
 8006514:	f300 8157 	bgt.w	80067c6 <_dtoa_r+0x6fe>
 8006518:	4b5a      	ldr	r3, [pc, #360]	@ (8006684 <_dtoa_r+0x5bc>)
 800651a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800651e:	ed93 7b00 	vldr	d7, [r3]
 8006522:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006524:	2b00      	cmp	r3, #0
 8006526:	ed8d 7b00 	vstr	d7, [sp]
 800652a:	da03      	bge.n	8006534 <_dtoa_r+0x46c>
 800652c:	9b07      	ldr	r3, [sp, #28]
 800652e:	2b00      	cmp	r3, #0
 8006530:	f340 8101 	ble.w	8006736 <_dtoa_r+0x66e>
 8006534:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006538:	4656      	mov	r6, sl
 800653a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800653e:	4620      	mov	r0, r4
 8006540:	4629      	mov	r1, r5
 8006542:	f7fa f993 	bl	800086c <__aeabi_ddiv>
 8006546:	f7fa fb17 	bl	8000b78 <__aeabi_d2iz>
 800654a:	4680      	mov	r8, r0
 800654c:	f7f9 fffa 	bl	8000544 <__aeabi_i2d>
 8006550:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006554:	f7fa f860 	bl	8000618 <__aeabi_dmul>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4620      	mov	r0, r4
 800655e:	4629      	mov	r1, r5
 8006560:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006564:	f7f9 fea0 	bl	80002a8 <__aeabi_dsub>
 8006568:	f806 4b01 	strb.w	r4, [r6], #1
 800656c:	9d07      	ldr	r5, [sp, #28]
 800656e:	eba6 040a 	sub.w	r4, r6, sl
 8006572:	42a5      	cmp	r5, r4
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	f040 8117 	bne.w	80067aa <_dtoa_r+0x6e2>
 800657c:	f7f9 fe96 	bl	80002ac <__adddf3>
 8006580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006584:	4604      	mov	r4, r0
 8006586:	460d      	mov	r5, r1
 8006588:	f7fa fad6 	bl	8000b38 <__aeabi_dcmpgt>
 800658c:	2800      	cmp	r0, #0
 800658e:	f040 80f9 	bne.w	8006784 <_dtoa_r+0x6bc>
 8006592:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006596:	4620      	mov	r0, r4
 8006598:	4629      	mov	r1, r5
 800659a:	f7fa faa5 	bl	8000ae8 <__aeabi_dcmpeq>
 800659e:	b118      	cbz	r0, 80065a8 <_dtoa_r+0x4e0>
 80065a0:	f018 0f01 	tst.w	r8, #1
 80065a4:	f040 80ee 	bne.w	8006784 <_dtoa_r+0x6bc>
 80065a8:	4649      	mov	r1, r9
 80065aa:	4658      	mov	r0, fp
 80065ac:	f000 fc90 	bl	8006ed0 <_Bfree>
 80065b0:	2300      	movs	r3, #0
 80065b2:	7033      	strb	r3, [r6, #0]
 80065b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80065b6:	3701      	adds	r7, #1
 80065b8:	601f      	str	r7, [r3, #0]
 80065ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 831d 	beq.w	8006bfc <_dtoa_r+0xb34>
 80065c2:	601e      	str	r6, [r3, #0]
 80065c4:	e31a      	b.n	8006bfc <_dtoa_r+0xb34>
 80065c6:	07e2      	lsls	r2, r4, #31
 80065c8:	d505      	bpl.n	80065d6 <_dtoa_r+0x50e>
 80065ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065ce:	f7fa f823 	bl	8000618 <__aeabi_dmul>
 80065d2:	3601      	adds	r6, #1
 80065d4:	2301      	movs	r3, #1
 80065d6:	1064      	asrs	r4, r4, #1
 80065d8:	3508      	adds	r5, #8
 80065da:	e73f      	b.n	800645c <_dtoa_r+0x394>
 80065dc:	2602      	movs	r6, #2
 80065de:	e742      	b.n	8006466 <_dtoa_r+0x39e>
 80065e0:	9c07      	ldr	r4, [sp, #28]
 80065e2:	9704      	str	r7, [sp, #16]
 80065e4:	e761      	b.n	80064aa <_dtoa_r+0x3e2>
 80065e6:	4b27      	ldr	r3, [pc, #156]	@ (8006684 <_dtoa_r+0x5bc>)
 80065e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065f2:	4454      	add	r4, sl
 80065f4:	2900      	cmp	r1, #0
 80065f6:	d053      	beq.n	80066a0 <_dtoa_r+0x5d8>
 80065f8:	4928      	ldr	r1, [pc, #160]	@ (800669c <_dtoa_r+0x5d4>)
 80065fa:	2000      	movs	r0, #0
 80065fc:	f7fa f936 	bl	800086c <__aeabi_ddiv>
 8006600:	4633      	mov	r3, r6
 8006602:	462a      	mov	r2, r5
 8006604:	f7f9 fe50 	bl	80002a8 <__aeabi_dsub>
 8006608:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800660c:	4656      	mov	r6, sl
 800660e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006612:	f7fa fab1 	bl	8000b78 <__aeabi_d2iz>
 8006616:	4605      	mov	r5, r0
 8006618:	f7f9 ff94 	bl	8000544 <__aeabi_i2d>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006624:	f7f9 fe40 	bl	80002a8 <__aeabi_dsub>
 8006628:	3530      	adds	r5, #48	@ 0x30
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006632:	f806 5b01 	strb.w	r5, [r6], #1
 8006636:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800663a:	f7fa fa5f 	bl	8000afc <__aeabi_dcmplt>
 800663e:	2800      	cmp	r0, #0
 8006640:	d171      	bne.n	8006726 <_dtoa_r+0x65e>
 8006642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006646:	4911      	ldr	r1, [pc, #68]	@ (800668c <_dtoa_r+0x5c4>)
 8006648:	2000      	movs	r0, #0
 800664a:	f7f9 fe2d 	bl	80002a8 <__aeabi_dsub>
 800664e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006652:	f7fa fa53 	bl	8000afc <__aeabi_dcmplt>
 8006656:	2800      	cmp	r0, #0
 8006658:	f040 8095 	bne.w	8006786 <_dtoa_r+0x6be>
 800665c:	42a6      	cmp	r6, r4
 800665e:	f43f af50 	beq.w	8006502 <_dtoa_r+0x43a>
 8006662:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006666:	4b0a      	ldr	r3, [pc, #40]	@ (8006690 <_dtoa_r+0x5c8>)
 8006668:	2200      	movs	r2, #0
 800666a:	f7f9 ffd5 	bl	8000618 <__aeabi_dmul>
 800666e:	4b08      	ldr	r3, [pc, #32]	@ (8006690 <_dtoa_r+0x5c8>)
 8006670:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006674:	2200      	movs	r2, #0
 8006676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800667a:	f7f9 ffcd 	bl	8000618 <__aeabi_dmul>
 800667e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006682:	e7c4      	b.n	800660e <_dtoa_r+0x546>
 8006684:	0800a008 	.word	0x0800a008
 8006688:	08009fe0 	.word	0x08009fe0
 800668c:	3ff00000 	.word	0x3ff00000
 8006690:	40240000 	.word	0x40240000
 8006694:	401c0000 	.word	0x401c0000
 8006698:	40140000 	.word	0x40140000
 800669c:	3fe00000 	.word	0x3fe00000
 80066a0:	4631      	mov	r1, r6
 80066a2:	4628      	mov	r0, r5
 80066a4:	f7f9 ffb8 	bl	8000618 <__aeabi_dmul>
 80066a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80066ae:	4656      	mov	r6, sl
 80066b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066b4:	f7fa fa60 	bl	8000b78 <__aeabi_d2iz>
 80066b8:	4605      	mov	r5, r0
 80066ba:	f7f9 ff43 	bl	8000544 <__aeabi_i2d>
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066c6:	f7f9 fdef 	bl	80002a8 <__aeabi_dsub>
 80066ca:	3530      	adds	r5, #48	@ 0x30
 80066cc:	f806 5b01 	strb.w	r5, [r6], #1
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	42a6      	cmp	r6, r4
 80066d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066da:	f04f 0200 	mov.w	r2, #0
 80066de:	d124      	bne.n	800672a <_dtoa_r+0x662>
 80066e0:	4bac      	ldr	r3, [pc, #688]	@ (8006994 <_dtoa_r+0x8cc>)
 80066e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80066e6:	f7f9 fde1 	bl	80002ac <__adddf3>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066f2:	f7fa fa21 	bl	8000b38 <__aeabi_dcmpgt>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d145      	bne.n	8006786 <_dtoa_r+0x6be>
 80066fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066fe:	49a5      	ldr	r1, [pc, #660]	@ (8006994 <_dtoa_r+0x8cc>)
 8006700:	2000      	movs	r0, #0
 8006702:	f7f9 fdd1 	bl	80002a8 <__aeabi_dsub>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800670e:	f7fa f9f5 	bl	8000afc <__aeabi_dcmplt>
 8006712:	2800      	cmp	r0, #0
 8006714:	f43f aef5 	beq.w	8006502 <_dtoa_r+0x43a>
 8006718:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800671a:	1e73      	subs	r3, r6, #1
 800671c:	9315      	str	r3, [sp, #84]	@ 0x54
 800671e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006722:	2b30      	cmp	r3, #48	@ 0x30
 8006724:	d0f8      	beq.n	8006718 <_dtoa_r+0x650>
 8006726:	9f04      	ldr	r7, [sp, #16]
 8006728:	e73e      	b.n	80065a8 <_dtoa_r+0x4e0>
 800672a:	4b9b      	ldr	r3, [pc, #620]	@ (8006998 <_dtoa_r+0x8d0>)
 800672c:	f7f9 ff74 	bl	8000618 <__aeabi_dmul>
 8006730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006734:	e7bc      	b.n	80066b0 <_dtoa_r+0x5e8>
 8006736:	d10c      	bne.n	8006752 <_dtoa_r+0x68a>
 8006738:	4b98      	ldr	r3, [pc, #608]	@ (800699c <_dtoa_r+0x8d4>)
 800673a:	2200      	movs	r2, #0
 800673c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006740:	f7f9 ff6a 	bl	8000618 <__aeabi_dmul>
 8006744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006748:	f7fa f9ec 	bl	8000b24 <__aeabi_dcmpge>
 800674c:	2800      	cmp	r0, #0
 800674e:	f000 8157 	beq.w	8006a00 <_dtoa_r+0x938>
 8006752:	2400      	movs	r4, #0
 8006754:	4625      	mov	r5, r4
 8006756:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006758:	43db      	mvns	r3, r3
 800675a:	9304      	str	r3, [sp, #16]
 800675c:	4656      	mov	r6, sl
 800675e:	2700      	movs	r7, #0
 8006760:	4621      	mov	r1, r4
 8006762:	4658      	mov	r0, fp
 8006764:	f000 fbb4 	bl	8006ed0 <_Bfree>
 8006768:	2d00      	cmp	r5, #0
 800676a:	d0dc      	beq.n	8006726 <_dtoa_r+0x65e>
 800676c:	b12f      	cbz	r7, 800677a <_dtoa_r+0x6b2>
 800676e:	42af      	cmp	r7, r5
 8006770:	d003      	beq.n	800677a <_dtoa_r+0x6b2>
 8006772:	4639      	mov	r1, r7
 8006774:	4658      	mov	r0, fp
 8006776:	f000 fbab 	bl	8006ed0 <_Bfree>
 800677a:	4629      	mov	r1, r5
 800677c:	4658      	mov	r0, fp
 800677e:	f000 fba7 	bl	8006ed0 <_Bfree>
 8006782:	e7d0      	b.n	8006726 <_dtoa_r+0x65e>
 8006784:	9704      	str	r7, [sp, #16]
 8006786:	4633      	mov	r3, r6
 8006788:	461e      	mov	r6, r3
 800678a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800678e:	2a39      	cmp	r2, #57	@ 0x39
 8006790:	d107      	bne.n	80067a2 <_dtoa_r+0x6da>
 8006792:	459a      	cmp	sl, r3
 8006794:	d1f8      	bne.n	8006788 <_dtoa_r+0x6c0>
 8006796:	9a04      	ldr	r2, [sp, #16]
 8006798:	3201      	adds	r2, #1
 800679a:	9204      	str	r2, [sp, #16]
 800679c:	2230      	movs	r2, #48	@ 0x30
 800679e:	f88a 2000 	strb.w	r2, [sl]
 80067a2:	781a      	ldrb	r2, [r3, #0]
 80067a4:	3201      	adds	r2, #1
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e7bd      	b.n	8006726 <_dtoa_r+0x65e>
 80067aa:	4b7b      	ldr	r3, [pc, #492]	@ (8006998 <_dtoa_r+0x8d0>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	f7f9 ff33 	bl	8000618 <__aeabi_dmul>
 80067b2:	2200      	movs	r2, #0
 80067b4:	2300      	movs	r3, #0
 80067b6:	4604      	mov	r4, r0
 80067b8:	460d      	mov	r5, r1
 80067ba:	f7fa f995 	bl	8000ae8 <__aeabi_dcmpeq>
 80067be:	2800      	cmp	r0, #0
 80067c0:	f43f aebb 	beq.w	800653a <_dtoa_r+0x472>
 80067c4:	e6f0      	b.n	80065a8 <_dtoa_r+0x4e0>
 80067c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80067c8:	2a00      	cmp	r2, #0
 80067ca:	f000 80db 	beq.w	8006984 <_dtoa_r+0x8bc>
 80067ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067d0:	2a01      	cmp	r2, #1
 80067d2:	f300 80bf 	bgt.w	8006954 <_dtoa_r+0x88c>
 80067d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80067d8:	2a00      	cmp	r2, #0
 80067da:	f000 80b7 	beq.w	800694c <_dtoa_r+0x884>
 80067de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80067e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80067e4:	4646      	mov	r6, r8
 80067e6:	9a08      	ldr	r2, [sp, #32]
 80067e8:	2101      	movs	r1, #1
 80067ea:	441a      	add	r2, r3
 80067ec:	4658      	mov	r0, fp
 80067ee:	4498      	add	r8, r3
 80067f0:	9208      	str	r2, [sp, #32]
 80067f2:	f000 fc6b 	bl	80070cc <__i2b>
 80067f6:	4605      	mov	r5, r0
 80067f8:	b15e      	cbz	r6, 8006812 <_dtoa_r+0x74a>
 80067fa:	9b08      	ldr	r3, [sp, #32]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	dd08      	ble.n	8006812 <_dtoa_r+0x74a>
 8006800:	42b3      	cmp	r3, r6
 8006802:	9a08      	ldr	r2, [sp, #32]
 8006804:	bfa8      	it	ge
 8006806:	4633      	movge	r3, r6
 8006808:	eba8 0803 	sub.w	r8, r8, r3
 800680c:	1af6      	subs	r6, r6, r3
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	9308      	str	r3, [sp, #32]
 8006812:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006814:	b1f3      	cbz	r3, 8006854 <_dtoa_r+0x78c>
 8006816:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 80b7 	beq.w	800698c <_dtoa_r+0x8c4>
 800681e:	b18c      	cbz	r4, 8006844 <_dtoa_r+0x77c>
 8006820:	4629      	mov	r1, r5
 8006822:	4622      	mov	r2, r4
 8006824:	4658      	mov	r0, fp
 8006826:	f000 fd11 	bl	800724c <__pow5mult>
 800682a:	464a      	mov	r2, r9
 800682c:	4601      	mov	r1, r0
 800682e:	4605      	mov	r5, r0
 8006830:	4658      	mov	r0, fp
 8006832:	f000 fc61 	bl	80070f8 <__multiply>
 8006836:	4649      	mov	r1, r9
 8006838:	9004      	str	r0, [sp, #16]
 800683a:	4658      	mov	r0, fp
 800683c:	f000 fb48 	bl	8006ed0 <_Bfree>
 8006840:	9b04      	ldr	r3, [sp, #16]
 8006842:	4699      	mov	r9, r3
 8006844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006846:	1b1a      	subs	r2, r3, r4
 8006848:	d004      	beq.n	8006854 <_dtoa_r+0x78c>
 800684a:	4649      	mov	r1, r9
 800684c:	4658      	mov	r0, fp
 800684e:	f000 fcfd 	bl	800724c <__pow5mult>
 8006852:	4681      	mov	r9, r0
 8006854:	2101      	movs	r1, #1
 8006856:	4658      	mov	r0, fp
 8006858:	f000 fc38 	bl	80070cc <__i2b>
 800685c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800685e:	4604      	mov	r4, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 81cf 	beq.w	8006c04 <_dtoa_r+0xb3c>
 8006866:	461a      	mov	r2, r3
 8006868:	4601      	mov	r1, r0
 800686a:	4658      	mov	r0, fp
 800686c:	f000 fcee 	bl	800724c <__pow5mult>
 8006870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006872:	2b01      	cmp	r3, #1
 8006874:	4604      	mov	r4, r0
 8006876:	f300 8095 	bgt.w	80069a4 <_dtoa_r+0x8dc>
 800687a:	9b02      	ldr	r3, [sp, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f040 8087 	bne.w	8006990 <_dtoa_r+0x8c8>
 8006882:	9b03      	ldr	r3, [sp, #12]
 8006884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006888:	2b00      	cmp	r3, #0
 800688a:	f040 8089 	bne.w	80069a0 <_dtoa_r+0x8d8>
 800688e:	9b03      	ldr	r3, [sp, #12]
 8006890:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006894:	0d1b      	lsrs	r3, r3, #20
 8006896:	051b      	lsls	r3, r3, #20
 8006898:	b12b      	cbz	r3, 80068a6 <_dtoa_r+0x7de>
 800689a:	9b08      	ldr	r3, [sp, #32]
 800689c:	3301      	adds	r3, #1
 800689e:	9308      	str	r3, [sp, #32]
 80068a0:	f108 0801 	add.w	r8, r8, #1
 80068a4:	2301      	movs	r3, #1
 80068a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80068a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 81b0 	beq.w	8006c10 <_dtoa_r+0xb48>
 80068b0:	6923      	ldr	r3, [r4, #16]
 80068b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068b6:	6918      	ldr	r0, [r3, #16]
 80068b8:	f000 fbbc 	bl	8007034 <__hi0bits>
 80068bc:	f1c0 0020 	rsb	r0, r0, #32
 80068c0:	9b08      	ldr	r3, [sp, #32]
 80068c2:	4418      	add	r0, r3
 80068c4:	f010 001f 	ands.w	r0, r0, #31
 80068c8:	d077      	beq.n	80069ba <_dtoa_r+0x8f2>
 80068ca:	f1c0 0320 	rsb	r3, r0, #32
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	dd6b      	ble.n	80069aa <_dtoa_r+0x8e2>
 80068d2:	9b08      	ldr	r3, [sp, #32]
 80068d4:	f1c0 001c 	rsb	r0, r0, #28
 80068d8:	4403      	add	r3, r0
 80068da:	4480      	add	r8, r0
 80068dc:	4406      	add	r6, r0
 80068de:	9308      	str	r3, [sp, #32]
 80068e0:	f1b8 0f00 	cmp.w	r8, #0
 80068e4:	dd05      	ble.n	80068f2 <_dtoa_r+0x82a>
 80068e6:	4649      	mov	r1, r9
 80068e8:	4642      	mov	r2, r8
 80068ea:	4658      	mov	r0, fp
 80068ec:	f000 fd08 	bl	8007300 <__lshift>
 80068f0:	4681      	mov	r9, r0
 80068f2:	9b08      	ldr	r3, [sp, #32]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	dd05      	ble.n	8006904 <_dtoa_r+0x83c>
 80068f8:	4621      	mov	r1, r4
 80068fa:	461a      	mov	r2, r3
 80068fc:	4658      	mov	r0, fp
 80068fe:	f000 fcff 	bl	8007300 <__lshift>
 8006902:	4604      	mov	r4, r0
 8006904:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006906:	2b00      	cmp	r3, #0
 8006908:	d059      	beq.n	80069be <_dtoa_r+0x8f6>
 800690a:	4621      	mov	r1, r4
 800690c:	4648      	mov	r0, r9
 800690e:	f000 fd63 	bl	80073d8 <__mcmp>
 8006912:	2800      	cmp	r0, #0
 8006914:	da53      	bge.n	80069be <_dtoa_r+0x8f6>
 8006916:	1e7b      	subs	r3, r7, #1
 8006918:	9304      	str	r3, [sp, #16]
 800691a:	4649      	mov	r1, r9
 800691c:	2300      	movs	r3, #0
 800691e:	220a      	movs	r2, #10
 8006920:	4658      	mov	r0, fp
 8006922:	f000 faf7 	bl	8006f14 <__multadd>
 8006926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006928:	4681      	mov	r9, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 8172 	beq.w	8006c14 <_dtoa_r+0xb4c>
 8006930:	2300      	movs	r3, #0
 8006932:	4629      	mov	r1, r5
 8006934:	220a      	movs	r2, #10
 8006936:	4658      	mov	r0, fp
 8006938:	f000 faec 	bl	8006f14 <__multadd>
 800693c:	9b00      	ldr	r3, [sp, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	4605      	mov	r5, r0
 8006942:	dc67      	bgt.n	8006a14 <_dtoa_r+0x94c>
 8006944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006946:	2b02      	cmp	r3, #2
 8006948:	dc41      	bgt.n	80069ce <_dtoa_r+0x906>
 800694a:	e063      	b.n	8006a14 <_dtoa_r+0x94c>
 800694c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800694e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006952:	e746      	b.n	80067e2 <_dtoa_r+0x71a>
 8006954:	9b07      	ldr	r3, [sp, #28]
 8006956:	1e5c      	subs	r4, r3, #1
 8006958:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800695a:	42a3      	cmp	r3, r4
 800695c:	bfbf      	itttt	lt
 800695e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006960:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006962:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006964:	1ae3      	sublt	r3, r4, r3
 8006966:	bfb4      	ite	lt
 8006968:	18d2      	addlt	r2, r2, r3
 800696a:	1b1c      	subge	r4, r3, r4
 800696c:	9b07      	ldr	r3, [sp, #28]
 800696e:	bfbc      	itt	lt
 8006970:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006972:	2400      	movlt	r4, #0
 8006974:	2b00      	cmp	r3, #0
 8006976:	bfb5      	itete	lt
 8006978:	eba8 0603 	sublt.w	r6, r8, r3
 800697c:	9b07      	ldrge	r3, [sp, #28]
 800697e:	2300      	movlt	r3, #0
 8006980:	4646      	movge	r6, r8
 8006982:	e730      	b.n	80067e6 <_dtoa_r+0x71e>
 8006984:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006986:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006988:	4646      	mov	r6, r8
 800698a:	e735      	b.n	80067f8 <_dtoa_r+0x730>
 800698c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800698e:	e75c      	b.n	800684a <_dtoa_r+0x782>
 8006990:	2300      	movs	r3, #0
 8006992:	e788      	b.n	80068a6 <_dtoa_r+0x7de>
 8006994:	3fe00000 	.word	0x3fe00000
 8006998:	40240000 	.word	0x40240000
 800699c:	40140000 	.word	0x40140000
 80069a0:	9b02      	ldr	r3, [sp, #8]
 80069a2:	e780      	b.n	80068a6 <_dtoa_r+0x7de>
 80069a4:	2300      	movs	r3, #0
 80069a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80069a8:	e782      	b.n	80068b0 <_dtoa_r+0x7e8>
 80069aa:	d099      	beq.n	80068e0 <_dtoa_r+0x818>
 80069ac:	9a08      	ldr	r2, [sp, #32]
 80069ae:	331c      	adds	r3, #28
 80069b0:	441a      	add	r2, r3
 80069b2:	4498      	add	r8, r3
 80069b4:	441e      	add	r6, r3
 80069b6:	9208      	str	r2, [sp, #32]
 80069b8:	e792      	b.n	80068e0 <_dtoa_r+0x818>
 80069ba:	4603      	mov	r3, r0
 80069bc:	e7f6      	b.n	80069ac <_dtoa_r+0x8e4>
 80069be:	9b07      	ldr	r3, [sp, #28]
 80069c0:	9704      	str	r7, [sp, #16]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	dc20      	bgt.n	8006a08 <_dtoa_r+0x940>
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	dd1e      	ble.n	8006a0c <_dtoa_r+0x944>
 80069ce:	9b00      	ldr	r3, [sp, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f47f aec0 	bne.w	8006756 <_dtoa_r+0x68e>
 80069d6:	4621      	mov	r1, r4
 80069d8:	2205      	movs	r2, #5
 80069da:	4658      	mov	r0, fp
 80069dc:	f000 fa9a 	bl	8006f14 <__multadd>
 80069e0:	4601      	mov	r1, r0
 80069e2:	4604      	mov	r4, r0
 80069e4:	4648      	mov	r0, r9
 80069e6:	f000 fcf7 	bl	80073d8 <__mcmp>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	f77f aeb3 	ble.w	8006756 <_dtoa_r+0x68e>
 80069f0:	4656      	mov	r6, sl
 80069f2:	2331      	movs	r3, #49	@ 0x31
 80069f4:	f806 3b01 	strb.w	r3, [r6], #1
 80069f8:	9b04      	ldr	r3, [sp, #16]
 80069fa:	3301      	adds	r3, #1
 80069fc:	9304      	str	r3, [sp, #16]
 80069fe:	e6ae      	b.n	800675e <_dtoa_r+0x696>
 8006a00:	9c07      	ldr	r4, [sp, #28]
 8006a02:	9704      	str	r7, [sp, #16]
 8006a04:	4625      	mov	r5, r4
 8006a06:	e7f3      	b.n	80069f0 <_dtoa_r+0x928>
 8006a08:	9b07      	ldr	r3, [sp, #28]
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 8104 	beq.w	8006c1c <_dtoa_r+0xb54>
 8006a14:	2e00      	cmp	r6, #0
 8006a16:	dd05      	ble.n	8006a24 <_dtoa_r+0x95c>
 8006a18:	4629      	mov	r1, r5
 8006a1a:	4632      	mov	r2, r6
 8006a1c:	4658      	mov	r0, fp
 8006a1e:	f000 fc6f 	bl	8007300 <__lshift>
 8006a22:	4605      	mov	r5, r0
 8006a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d05a      	beq.n	8006ae0 <_dtoa_r+0xa18>
 8006a2a:	6869      	ldr	r1, [r5, #4]
 8006a2c:	4658      	mov	r0, fp
 8006a2e:	f000 fa0f 	bl	8006e50 <_Balloc>
 8006a32:	4606      	mov	r6, r0
 8006a34:	b928      	cbnz	r0, 8006a42 <_dtoa_r+0x97a>
 8006a36:	4b84      	ldr	r3, [pc, #528]	@ (8006c48 <_dtoa_r+0xb80>)
 8006a38:	4602      	mov	r2, r0
 8006a3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006a3e:	f7ff bb5a 	b.w	80060f6 <_dtoa_r+0x2e>
 8006a42:	692a      	ldr	r2, [r5, #16]
 8006a44:	3202      	adds	r2, #2
 8006a46:	0092      	lsls	r2, r2, #2
 8006a48:	f105 010c 	add.w	r1, r5, #12
 8006a4c:	300c      	adds	r0, #12
 8006a4e:	f002 fb87 	bl	8009160 <memcpy>
 8006a52:	2201      	movs	r2, #1
 8006a54:	4631      	mov	r1, r6
 8006a56:	4658      	mov	r0, fp
 8006a58:	f000 fc52 	bl	8007300 <__lshift>
 8006a5c:	f10a 0301 	add.w	r3, sl, #1
 8006a60:	9307      	str	r3, [sp, #28]
 8006a62:	9b00      	ldr	r3, [sp, #0]
 8006a64:	4453      	add	r3, sl
 8006a66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a68:	9b02      	ldr	r3, [sp, #8]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	462f      	mov	r7, r5
 8006a70:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a72:	4605      	mov	r5, r0
 8006a74:	9b07      	ldr	r3, [sp, #28]
 8006a76:	4621      	mov	r1, r4
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	4648      	mov	r0, r9
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	f7ff fa9b 	bl	8005fb8 <quorem>
 8006a82:	4639      	mov	r1, r7
 8006a84:	9002      	str	r0, [sp, #8]
 8006a86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006a8a:	4648      	mov	r0, r9
 8006a8c:	f000 fca4 	bl	80073d8 <__mcmp>
 8006a90:	462a      	mov	r2, r5
 8006a92:	9008      	str	r0, [sp, #32]
 8006a94:	4621      	mov	r1, r4
 8006a96:	4658      	mov	r0, fp
 8006a98:	f000 fcba 	bl	8007410 <__mdiff>
 8006a9c:	68c2      	ldr	r2, [r0, #12]
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	bb02      	cbnz	r2, 8006ae4 <_dtoa_r+0xa1c>
 8006aa2:	4601      	mov	r1, r0
 8006aa4:	4648      	mov	r0, r9
 8006aa6:	f000 fc97 	bl	80073d8 <__mcmp>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	4631      	mov	r1, r6
 8006aae:	4658      	mov	r0, fp
 8006ab0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ab2:	f000 fa0d 	bl	8006ed0 <_Bfree>
 8006ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006aba:	9e07      	ldr	r6, [sp, #28]
 8006abc:	ea43 0102 	orr.w	r1, r3, r2
 8006ac0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ac2:	4319      	orrs	r1, r3
 8006ac4:	d110      	bne.n	8006ae8 <_dtoa_r+0xa20>
 8006ac6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006aca:	d029      	beq.n	8006b20 <_dtoa_r+0xa58>
 8006acc:	9b08      	ldr	r3, [sp, #32]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	dd02      	ble.n	8006ad8 <_dtoa_r+0xa10>
 8006ad2:	9b02      	ldr	r3, [sp, #8]
 8006ad4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006ad8:	9b00      	ldr	r3, [sp, #0]
 8006ada:	f883 8000 	strb.w	r8, [r3]
 8006ade:	e63f      	b.n	8006760 <_dtoa_r+0x698>
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	e7bb      	b.n	8006a5c <_dtoa_r+0x994>
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	e7e1      	b.n	8006aac <_dtoa_r+0x9e4>
 8006ae8:	9b08      	ldr	r3, [sp, #32]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	db04      	blt.n	8006af8 <_dtoa_r+0xa30>
 8006aee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006af0:	430b      	orrs	r3, r1
 8006af2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006af4:	430b      	orrs	r3, r1
 8006af6:	d120      	bne.n	8006b3a <_dtoa_r+0xa72>
 8006af8:	2a00      	cmp	r2, #0
 8006afa:	dded      	ble.n	8006ad8 <_dtoa_r+0xa10>
 8006afc:	4649      	mov	r1, r9
 8006afe:	2201      	movs	r2, #1
 8006b00:	4658      	mov	r0, fp
 8006b02:	f000 fbfd 	bl	8007300 <__lshift>
 8006b06:	4621      	mov	r1, r4
 8006b08:	4681      	mov	r9, r0
 8006b0a:	f000 fc65 	bl	80073d8 <__mcmp>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	dc03      	bgt.n	8006b1a <_dtoa_r+0xa52>
 8006b12:	d1e1      	bne.n	8006ad8 <_dtoa_r+0xa10>
 8006b14:	f018 0f01 	tst.w	r8, #1
 8006b18:	d0de      	beq.n	8006ad8 <_dtoa_r+0xa10>
 8006b1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b1e:	d1d8      	bne.n	8006ad2 <_dtoa_r+0xa0a>
 8006b20:	9a00      	ldr	r2, [sp, #0]
 8006b22:	2339      	movs	r3, #57	@ 0x39
 8006b24:	7013      	strb	r3, [r2, #0]
 8006b26:	4633      	mov	r3, r6
 8006b28:	461e      	mov	r6, r3
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006b30:	2a39      	cmp	r2, #57	@ 0x39
 8006b32:	d052      	beq.n	8006bda <_dtoa_r+0xb12>
 8006b34:	3201      	adds	r2, #1
 8006b36:	701a      	strb	r2, [r3, #0]
 8006b38:	e612      	b.n	8006760 <_dtoa_r+0x698>
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	dd07      	ble.n	8006b4e <_dtoa_r+0xa86>
 8006b3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b42:	d0ed      	beq.n	8006b20 <_dtoa_r+0xa58>
 8006b44:	9a00      	ldr	r2, [sp, #0]
 8006b46:	f108 0301 	add.w	r3, r8, #1
 8006b4a:	7013      	strb	r3, [r2, #0]
 8006b4c:	e608      	b.n	8006760 <_dtoa_r+0x698>
 8006b4e:	9b07      	ldr	r3, [sp, #28]
 8006b50:	9a07      	ldr	r2, [sp, #28]
 8006b52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006b56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d028      	beq.n	8006bae <_dtoa_r+0xae6>
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	2300      	movs	r3, #0
 8006b60:	220a      	movs	r2, #10
 8006b62:	4658      	mov	r0, fp
 8006b64:	f000 f9d6 	bl	8006f14 <__multadd>
 8006b68:	42af      	cmp	r7, r5
 8006b6a:	4681      	mov	r9, r0
 8006b6c:	f04f 0300 	mov.w	r3, #0
 8006b70:	f04f 020a 	mov.w	r2, #10
 8006b74:	4639      	mov	r1, r7
 8006b76:	4658      	mov	r0, fp
 8006b78:	d107      	bne.n	8006b8a <_dtoa_r+0xac2>
 8006b7a:	f000 f9cb 	bl	8006f14 <__multadd>
 8006b7e:	4607      	mov	r7, r0
 8006b80:	4605      	mov	r5, r0
 8006b82:	9b07      	ldr	r3, [sp, #28]
 8006b84:	3301      	adds	r3, #1
 8006b86:	9307      	str	r3, [sp, #28]
 8006b88:	e774      	b.n	8006a74 <_dtoa_r+0x9ac>
 8006b8a:	f000 f9c3 	bl	8006f14 <__multadd>
 8006b8e:	4629      	mov	r1, r5
 8006b90:	4607      	mov	r7, r0
 8006b92:	2300      	movs	r3, #0
 8006b94:	220a      	movs	r2, #10
 8006b96:	4658      	mov	r0, fp
 8006b98:	f000 f9bc 	bl	8006f14 <__multadd>
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	e7f0      	b.n	8006b82 <_dtoa_r+0xaba>
 8006ba0:	9b00      	ldr	r3, [sp, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bfcc      	ite	gt
 8006ba6:	461e      	movgt	r6, r3
 8006ba8:	2601      	movle	r6, #1
 8006baa:	4456      	add	r6, sl
 8006bac:	2700      	movs	r7, #0
 8006bae:	4649      	mov	r1, r9
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	4658      	mov	r0, fp
 8006bb4:	f000 fba4 	bl	8007300 <__lshift>
 8006bb8:	4621      	mov	r1, r4
 8006bba:	4681      	mov	r9, r0
 8006bbc:	f000 fc0c 	bl	80073d8 <__mcmp>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	dcb0      	bgt.n	8006b26 <_dtoa_r+0xa5e>
 8006bc4:	d102      	bne.n	8006bcc <_dtoa_r+0xb04>
 8006bc6:	f018 0f01 	tst.w	r8, #1
 8006bca:	d1ac      	bne.n	8006b26 <_dtoa_r+0xa5e>
 8006bcc:	4633      	mov	r3, r6
 8006bce:	461e      	mov	r6, r3
 8006bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bd4:	2a30      	cmp	r2, #48	@ 0x30
 8006bd6:	d0fa      	beq.n	8006bce <_dtoa_r+0xb06>
 8006bd8:	e5c2      	b.n	8006760 <_dtoa_r+0x698>
 8006bda:	459a      	cmp	sl, r3
 8006bdc:	d1a4      	bne.n	8006b28 <_dtoa_r+0xa60>
 8006bde:	9b04      	ldr	r3, [sp, #16]
 8006be0:	3301      	adds	r3, #1
 8006be2:	9304      	str	r3, [sp, #16]
 8006be4:	2331      	movs	r3, #49	@ 0x31
 8006be6:	f88a 3000 	strb.w	r3, [sl]
 8006bea:	e5b9      	b.n	8006760 <_dtoa_r+0x698>
 8006bec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006bee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006c4c <_dtoa_r+0xb84>
 8006bf2:	b11b      	cbz	r3, 8006bfc <_dtoa_r+0xb34>
 8006bf4:	f10a 0308 	add.w	r3, sl, #8
 8006bf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	4650      	mov	r0, sl
 8006bfe:	b019      	add	sp, #100	@ 0x64
 8006c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	f77f ae37 	ble.w	800687a <_dtoa_r+0x7b2>
 8006c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c10:	2001      	movs	r0, #1
 8006c12:	e655      	b.n	80068c0 <_dtoa_r+0x7f8>
 8006c14:	9b00      	ldr	r3, [sp, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f77f aed6 	ble.w	80069c8 <_dtoa_r+0x900>
 8006c1c:	4656      	mov	r6, sl
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4648      	mov	r0, r9
 8006c22:	f7ff f9c9 	bl	8005fb8 <quorem>
 8006c26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006c2a:	f806 8b01 	strb.w	r8, [r6], #1
 8006c2e:	9b00      	ldr	r3, [sp, #0]
 8006c30:	eba6 020a 	sub.w	r2, r6, sl
 8006c34:	4293      	cmp	r3, r2
 8006c36:	ddb3      	ble.n	8006ba0 <_dtoa_r+0xad8>
 8006c38:	4649      	mov	r1, r9
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	220a      	movs	r2, #10
 8006c3e:	4658      	mov	r0, fp
 8006c40:	f000 f968 	bl	8006f14 <__multadd>
 8006c44:	4681      	mov	r9, r0
 8006c46:	e7ea      	b.n	8006c1e <_dtoa_r+0xb56>
 8006c48:	08009f63 	.word	0x08009f63
 8006c4c:	08009ee7 	.word	0x08009ee7

08006c50 <_free_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4605      	mov	r5, r0
 8006c54:	2900      	cmp	r1, #0
 8006c56:	d041      	beq.n	8006cdc <_free_r+0x8c>
 8006c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c5c:	1f0c      	subs	r4, r1, #4
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	bfb8      	it	lt
 8006c62:	18e4      	addlt	r4, r4, r3
 8006c64:	f000 f8e8 	bl	8006e38 <__malloc_lock>
 8006c68:	4a1d      	ldr	r2, [pc, #116]	@ (8006ce0 <_free_r+0x90>)
 8006c6a:	6813      	ldr	r3, [r2, #0]
 8006c6c:	b933      	cbnz	r3, 8006c7c <_free_r+0x2c>
 8006c6e:	6063      	str	r3, [r4, #4]
 8006c70:	6014      	str	r4, [r2, #0]
 8006c72:	4628      	mov	r0, r5
 8006c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c78:	f000 b8e4 	b.w	8006e44 <__malloc_unlock>
 8006c7c:	42a3      	cmp	r3, r4
 8006c7e:	d908      	bls.n	8006c92 <_free_r+0x42>
 8006c80:	6820      	ldr	r0, [r4, #0]
 8006c82:	1821      	adds	r1, r4, r0
 8006c84:	428b      	cmp	r3, r1
 8006c86:	bf01      	itttt	eq
 8006c88:	6819      	ldreq	r1, [r3, #0]
 8006c8a:	685b      	ldreq	r3, [r3, #4]
 8006c8c:	1809      	addeq	r1, r1, r0
 8006c8e:	6021      	streq	r1, [r4, #0]
 8006c90:	e7ed      	b.n	8006c6e <_free_r+0x1e>
 8006c92:	461a      	mov	r2, r3
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	b10b      	cbz	r3, 8006c9c <_free_r+0x4c>
 8006c98:	42a3      	cmp	r3, r4
 8006c9a:	d9fa      	bls.n	8006c92 <_free_r+0x42>
 8006c9c:	6811      	ldr	r1, [r2, #0]
 8006c9e:	1850      	adds	r0, r2, r1
 8006ca0:	42a0      	cmp	r0, r4
 8006ca2:	d10b      	bne.n	8006cbc <_free_r+0x6c>
 8006ca4:	6820      	ldr	r0, [r4, #0]
 8006ca6:	4401      	add	r1, r0
 8006ca8:	1850      	adds	r0, r2, r1
 8006caa:	4283      	cmp	r3, r0
 8006cac:	6011      	str	r1, [r2, #0]
 8006cae:	d1e0      	bne.n	8006c72 <_free_r+0x22>
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	6053      	str	r3, [r2, #4]
 8006cb6:	4408      	add	r0, r1
 8006cb8:	6010      	str	r0, [r2, #0]
 8006cba:	e7da      	b.n	8006c72 <_free_r+0x22>
 8006cbc:	d902      	bls.n	8006cc4 <_free_r+0x74>
 8006cbe:	230c      	movs	r3, #12
 8006cc0:	602b      	str	r3, [r5, #0]
 8006cc2:	e7d6      	b.n	8006c72 <_free_r+0x22>
 8006cc4:	6820      	ldr	r0, [r4, #0]
 8006cc6:	1821      	adds	r1, r4, r0
 8006cc8:	428b      	cmp	r3, r1
 8006cca:	bf04      	itt	eq
 8006ccc:	6819      	ldreq	r1, [r3, #0]
 8006cce:	685b      	ldreq	r3, [r3, #4]
 8006cd0:	6063      	str	r3, [r4, #4]
 8006cd2:	bf04      	itt	eq
 8006cd4:	1809      	addeq	r1, r1, r0
 8006cd6:	6021      	streq	r1, [r4, #0]
 8006cd8:	6054      	str	r4, [r2, #4]
 8006cda:	e7ca      	b.n	8006c72 <_free_r+0x22>
 8006cdc:	bd38      	pop	{r3, r4, r5, pc}
 8006cde:	bf00      	nop
 8006ce0:	200004b4 	.word	0x200004b4

08006ce4 <malloc>:
 8006ce4:	4b02      	ldr	r3, [pc, #8]	@ (8006cf0 <malloc+0xc>)
 8006ce6:	4601      	mov	r1, r0
 8006ce8:	6818      	ldr	r0, [r3, #0]
 8006cea:	f000 b825 	b.w	8006d38 <_malloc_r>
 8006cee:	bf00      	nop
 8006cf0:	20000018 	.word	0x20000018

08006cf4 <sbrk_aligned>:
 8006cf4:	b570      	push	{r4, r5, r6, lr}
 8006cf6:	4e0f      	ldr	r6, [pc, #60]	@ (8006d34 <sbrk_aligned+0x40>)
 8006cf8:	460c      	mov	r4, r1
 8006cfa:	6831      	ldr	r1, [r6, #0]
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	b911      	cbnz	r1, 8006d06 <sbrk_aligned+0x12>
 8006d00:	f002 fa1e 	bl	8009140 <_sbrk_r>
 8006d04:	6030      	str	r0, [r6, #0]
 8006d06:	4621      	mov	r1, r4
 8006d08:	4628      	mov	r0, r5
 8006d0a:	f002 fa19 	bl	8009140 <_sbrk_r>
 8006d0e:	1c43      	adds	r3, r0, #1
 8006d10:	d103      	bne.n	8006d1a <sbrk_aligned+0x26>
 8006d12:	f04f 34ff 	mov.w	r4, #4294967295
 8006d16:	4620      	mov	r0, r4
 8006d18:	bd70      	pop	{r4, r5, r6, pc}
 8006d1a:	1cc4      	adds	r4, r0, #3
 8006d1c:	f024 0403 	bic.w	r4, r4, #3
 8006d20:	42a0      	cmp	r0, r4
 8006d22:	d0f8      	beq.n	8006d16 <sbrk_aligned+0x22>
 8006d24:	1a21      	subs	r1, r4, r0
 8006d26:	4628      	mov	r0, r5
 8006d28:	f002 fa0a 	bl	8009140 <_sbrk_r>
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d1f2      	bne.n	8006d16 <sbrk_aligned+0x22>
 8006d30:	e7ef      	b.n	8006d12 <sbrk_aligned+0x1e>
 8006d32:	bf00      	nop
 8006d34:	200004b0 	.word	0x200004b0

08006d38 <_malloc_r>:
 8006d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d3c:	1ccd      	adds	r5, r1, #3
 8006d3e:	f025 0503 	bic.w	r5, r5, #3
 8006d42:	3508      	adds	r5, #8
 8006d44:	2d0c      	cmp	r5, #12
 8006d46:	bf38      	it	cc
 8006d48:	250c      	movcc	r5, #12
 8006d4a:	2d00      	cmp	r5, #0
 8006d4c:	4606      	mov	r6, r0
 8006d4e:	db01      	blt.n	8006d54 <_malloc_r+0x1c>
 8006d50:	42a9      	cmp	r1, r5
 8006d52:	d904      	bls.n	8006d5e <_malloc_r+0x26>
 8006d54:	230c      	movs	r3, #12
 8006d56:	6033      	str	r3, [r6, #0]
 8006d58:	2000      	movs	r0, #0
 8006d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e34 <_malloc_r+0xfc>
 8006d62:	f000 f869 	bl	8006e38 <__malloc_lock>
 8006d66:	f8d8 3000 	ldr.w	r3, [r8]
 8006d6a:	461c      	mov	r4, r3
 8006d6c:	bb44      	cbnz	r4, 8006dc0 <_malloc_r+0x88>
 8006d6e:	4629      	mov	r1, r5
 8006d70:	4630      	mov	r0, r6
 8006d72:	f7ff ffbf 	bl	8006cf4 <sbrk_aligned>
 8006d76:	1c43      	adds	r3, r0, #1
 8006d78:	4604      	mov	r4, r0
 8006d7a:	d158      	bne.n	8006e2e <_malloc_r+0xf6>
 8006d7c:	f8d8 4000 	ldr.w	r4, [r8]
 8006d80:	4627      	mov	r7, r4
 8006d82:	2f00      	cmp	r7, #0
 8006d84:	d143      	bne.n	8006e0e <_malloc_r+0xd6>
 8006d86:	2c00      	cmp	r4, #0
 8006d88:	d04b      	beq.n	8006e22 <_malloc_r+0xea>
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	4630      	mov	r0, r6
 8006d90:	eb04 0903 	add.w	r9, r4, r3
 8006d94:	f002 f9d4 	bl	8009140 <_sbrk_r>
 8006d98:	4581      	cmp	r9, r0
 8006d9a:	d142      	bne.n	8006e22 <_malloc_r+0xea>
 8006d9c:	6821      	ldr	r1, [r4, #0]
 8006d9e:	1a6d      	subs	r5, r5, r1
 8006da0:	4629      	mov	r1, r5
 8006da2:	4630      	mov	r0, r6
 8006da4:	f7ff ffa6 	bl	8006cf4 <sbrk_aligned>
 8006da8:	3001      	adds	r0, #1
 8006daa:	d03a      	beq.n	8006e22 <_malloc_r+0xea>
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	442b      	add	r3, r5
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	f8d8 3000 	ldr.w	r3, [r8]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	bb62      	cbnz	r2, 8006e14 <_malloc_r+0xdc>
 8006dba:	f8c8 7000 	str.w	r7, [r8]
 8006dbe:	e00f      	b.n	8006de0 <_malloc_r+0xa8>
 8006dc0:	6822      	ldr	r2, [r4, #0]
 8006dc2:	1b52      	subs	r2, r2, r5
 8006dc4:	d420      	bmi.n	8006e08 <_malloc_r+0xd0>
 8006dc6:	2a0b      	cmp	r2, #11
 8006dc8:	d917      	bls.n	8006dfa <_malloc_r+0xc2>
 8006dca:	1961      	adds	r1, r4, r5
 8006dcc:	42a3      	cmp	r3, r4
 8006dce:	6025      	str	r5, [r4, #0]
 8006dd0:	bf18      	it	ne
 8006dd2:	6059      	strne	r1, [r3, #4]
 8006dd4:	6863      	ldr	r3, [r4, #4]
 8006dd6:	bf08      	it	eq
 8006dd8:	f8c8 1000 	streq.w	r1, [r8]
 8006ddc:	5162      	str	r2, [r4, r5]
 8006dde:	604b      	str	r3, [r1, #4]
 8006de0:	4630      	mov	r0, r6
 8006de2:	f000 f82f 	bl	8006e44 <__malloc_unlock>
 8006de6:	f104 000b 	add.w	r0, r4, #11
 8006dea:	1d23      	adds	r3, r4, #4
 8006dec:	f020 0007 	bic.w	r0, r0, #7
 8006df0:	1ac2      	subs	r2, r0, r3
 8006df2:	bf1c      	itt	ne
 8006df4:	1a1b      	subne	r3, r3, r0
 8006df6:	50a3      	strne	r3, [r4, r2]
 8006df8:	e7af      	b.n	8006d5a <_malloc_r+0x22>
 8006dfa:	6862      	ldr	r2, [r4, #4]
 8006dfc:	42a3      	cmp	r3, r4
 8006dfe:	bf0c      	ite	eq
 8006e00:	f8c8 2000 	streq.w	r2, [r8]
 8006e04:	605a      	strne	r2, [r3, #4]
 8006e06:	e7eb      	b.n	8006de0 <_malloc_r+0xa8>
 8006e08:	4623      	mov	r3, r4
 8006e0a:	6864      	ldr	r4, [r4, #4]
 8006e0c:	e7ae      	b.n	8006d6c <_malloc_r+0x34>
 8006e0e:	463c      	mov	r4, r7
 8006e10:	687f      	ldr	r7, [r7, #4]
 8006e12:	e7b6      	b.n	8006d82 <_malloc_r+0x4a>
 8006e14:	461a      	mov	r2, r3
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	42a3      	cmp	r3, r4
 8006e1a:	d1fb      	bne.n	8006e14 <_malloc_r+0xdc>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	6053      	str	r3, [r2, #4]
 8006e20:	e7de      	b.n	8006de0 <_malloc_r+0xa8>
 8006e22:	230c      	movs	r3, #12
 8006e24:	6033      	str	r3, [r6, #0]
 8006e26:	4630      	mov	r0, r6
 8006e28:	f000 f80c 	bl	8006e44 <__malloc_unlock>
 8006e2c:	e794      	b.n	8006d58 <_malloc_r+0x20>
 8006e2e:	6005      	str	r5, [r0, #0]
 8006e30:	e7d6      	b.n	8006de0 <_malloc_r+0xa8>
 8006e32:	bf00      	nop
 8006e34:	200004b4 	.word	0x200004b4

08006e38 <__malloc_lock>:
 8006e38:	4801      	ldr	r0, [pc, #4]	@ (8006e40 <__malloc_lock+0x8>)
 8006e3a:	f7ff b8b4 	b.w	8005fa6 <__retarget_lock_acquire_recursive>
 8006e3e:	bf00      	nop
 8006e40:	200004ac 	.word	0x200004ac

08006e44 <__malloc_unlock>:
 8006e44:	4801      	ldr	r0, [pc, #4]	@ (8006e4c <__malloc_unlock+0x8>)
 8006e46:	f7ff b8af 	b.w	8005fa8 <__retarget_lock_release_recursive>
 8006e4a:	bf00      	nop
 8006e4c:	200004ac 	.word	0x200004ac

08006e50 <_Balloc>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	69c6      	ldr	r6, [r0, #28]
 8006e54:	4604      	mov	r4, r0
 8006e56:	460d      	mov	r5, r1
 8006e58:	b976      	cbnz	r6, 8006e78 <_Balloc+0x28>
 8006e5a:	2010      	movs	r0, #16
 8006e5c:	f7ff ff42 	bl	8006ce4 <malloc>
 8006e60:	4602      	mov	r2, r0
 8006e62:	61e0      	str	r0, [r4, #28]
 8006e64:	b920      	cbnz	r0, 8006e70 <_Balloc+0x20>
 8006e66:	4b18      	ldr	r3, [pc, #96]	@ (8006ec8 <_Balloc+0x78>)
 8006e68:	4818      	ldr	r0, [pc, #96]	@ (8006ecc <_Balloc+0x7c>)
 8006e6a:	216b      	movs	r1, #107	@ 0x6b
 8006e6c:	f002 f990 	bl	8009190 <__assert_func>
 8006e70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e74:	6006      	str	r6, [r0, #0]
 8006e76:	60c6      	str	r6, [r0, #12]
 8006e78:	69e6      	ldr	r6, [r4, #28]
 8006e7a:	68f3      	ldr	r3, [r6, #12]
 8006e7c:	b183      	cbz	r3, 8006ea0 <_Balloc+0x50>
 8006e7e:	69e3      	ldr	r3, [r4, #28]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e86:	b9b8      	cbnz	r0, 8006eb8 <_Balloc+0x68>
 8006e88:	2101      	movs	r1, #1
 8006e8a:	fa01 f605 	lsl.w	r6, r1, r5
 8006e8e:	1d72      	adds	r2, r6, #5
 8006e90:	0092      	lsls	r2, r2, #2
 8006e92:	4620      	mov	r0, r4
 8006e94:	f002 f99a 	bl	80091cc <_calloc_r>
 8006e98:	b160      	cbz	r0, 8006eb4 <_Balloc+0x64>
 8006e9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e9e:	e00e      	b.n	8006ebe <_Balloc+0x6e>
 8006ea0:	2221      	movs	r2, #33	@ 0x21
 8006ea2:	2104      	movs	r1, #4
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f002 f991 	bl	80091cc <_calloc_r>
 8006eaa:	69e3      	ldr	r3, [r4, #28]
 8006eac:	60f0      	str	r0, [r6, #12]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1e4      	bne.n	8006e7e <_Balloc+0x2e>
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}
 8006eb8:	6802      	ldr	r2, [r0, #0]
 8006eba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ec4:	e7f7      	b.n	8006eb6 <_Balloc+0x66>
 8006ec6:	bf00      	nop
 8006ec8:	08009ef4 	.word	0x08009ef4
 8006ecc:	08009f74 	.word	0x08009f74

08006ed0 <_Bfree>:
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	69c6      	ldr	r6, [r0, #28]
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	b976      	cbnz	r6, 8006ef8 <_Bfree+0x28>
 8006eda:	2010      	movs	r0, #16
 8006edc:	f7ff ff02 	bl	8006ce4 <malloc>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	61e8      	str	r0, [r5, #28]
 8006ee4:	b920      	cbnz	r0, 8006ef0 <_Bfree+0x20>
 8006ee6:	4b09      	ldr	r3, [pc, #36]	@ (8006f0c <_Bfree+0x3c>)
 8006ee8:	4809      	ldr	r0, [pc, #36]	@ (8006f10 <_Bfree+0x40>)
 8006eea:	218f      	movs	r1, #143	@ 0x8f
 8006eec:	f002 f950 	bl	8009190 <__assert_func>
 8006ef0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ef4:	6006      	str	r6, [r0, #0]
 8006ef6:	60c6      	str	r6, [r0, #12]
 8006ef8:	b13c      	cbz	r4, 8006f0a <_Bfree+0x3a>
 8006efa:	69eb      	ldr	r3, [r5, #28]
 8006efc:	6862      	ldr	r2, [r4, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f04:	6021      	str	r1, [r4, #0]
 8006f06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
 8006f0c:	08009ef4 	.word	0x08009ef4
 8006f10:	08009f74 	.word	0x08009f74

08006f14 <__multadd>:
 8006f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f18:	690d      	ldr	r5, [r1, #16]
 8006f1a:	4607      	mov	r7, r0
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	461e      	mov	r6, r3
 8006f20:	f101 0c14 	add.w	ip, r1, #20
 8006f24:	2000      	movs	r0, #0
 8006f26:	f8dc 3000 	ldr.w	r3, [ip]
 8006f2a:	b299      	uxth	r1, r3
 8006f2c:	fb02 6101 	mla	r1, r2, r1, r6
 8006f30:	0c1e      	lsrs	r6, r3, #16
 8006f32:	0c0b      	lsrs	r3, r1, #16
 8006f34:	fb02 3306 	mla	r3, r2, r6, r3
 8006f38:	b289      	uxth	r1, r1
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f40:	4285      	cmp	r5, r0
 8006f42:	f84c 1b04 	str.w	r1, [ip], #4
 8006f46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f4a:	dcec      	bgt.n	8006f26 <__multadd+0x12>
 8006f4c:	b30e      	cbz	r6, 8006f92 <__multadd+0x7e>
 8006f4e:	68a3      	ldr	r3, [r4, #8]
 8006f50:	42ab      	cmp	r3, r5
 8006f52:	dc19      	bgt.n	8006f88 <__multadd+0x74>
 8006f54:	6861      	ldr	r1, [r4, #4]
 8006f56:	4638      	mov	r0, r7
 8006f58:	3101      	adds	r1, #1
 8006f5a:	f7ff ff79 	bl	8006e50 <_Balloc>
 8006f5e:	4680      	mov	r8, r0
 8006f60:	b928      	cbnz	r0, 8006f6e <__multadd+0x5a>
 8006f62:	4602      	mov	r2, r0
 8006f64:	4b0c      	ldr	r3, [pc, #48]	@ (8006f98 <__multadd+0x84>)
 8006f66:	480d      	ldr	r0, [pc, #52]	@ (8006f9c <__multadd+0x88>)
 8006f68:	21ba      	movs	r1, #186	@ 0xba
 8006f6a:	f002 f911 	bl	8009190 <__assert_func>
 8006f6e:	6922      	ldr	r2, [r4, #16]
 8006f70:	3202      	adds	r2, #2
 8006f72:	f104 010c 	add.w	r1, r4, #12
 8006f76:	0092      	lsls	r2, r2, #2
 8006f78:	300c      	adds	r0, #12
 8006f7a:	f002 f8f1 	bl	8009160 <memcpy>
 8006f7e:	4621      	mov	r1, r4
 8006f80:	4638      	mov	r0, r7
 8006f82:	f7ff ffa5 	bl	8006ed0 <_Bfree>
 8006f86:	4644      	mov	r4, r8
 8006f88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f8c:	3501      	adds	r5, #1
 8006f8e:	615e      	str	r6, [r3, #20]
 8006f90:	6125      	str	r5, [r4, #16]
 8006f92:	4620      	mov	r0, r4
 8006f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f98:	08009f63 	.word	0x08009f63
 8006f9c:	08009f74 	.word	0x08009f74

08006fa0 <__s2b>:
 8006fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa4:	460c      	mov	r4, r1
 8006fa6:	4615      	mov	r5, r2
 8006fa8:	461f      	mov	r7, r3
 8006faa:	2209      	movs	r2, #9
 8006fac:	3308      	adds	r3, #8
 8006fae:	4606      	mov	r6, r0
 8006fb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	db09      	blt.n	8006fd0 <__s2b+0x30>
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f7ff ff47 	bl	8006e50 <_Balloc>
 8006fc2:	b940      	cbnz	r0, 8006fd6 <__s2b+0x36>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	4b19      	ldr	r3, [pc, #100]	@ (800702c <__s2b+0x8c>)
 8006fc8:	4819      	ldr	r0, [pc, #100]	@ (8007030 <__s2b+0x90>)
 8006fca:	21d3      	movs	r1, #211	@ 0xd3
 8006fcc:	f002 f8e0 	bl	8009190 <__assert_func>
 8006fd0:	0052      	lsls	r2, r2, #1
 8006fd2:	3101      	adds	r1, #1
 8006fd4:	e7f0      	b.n	8006fb8 <__s2b+0x18>
 8006fd6:	9b08      	ldr	r3, [sp, #32]
 8006fd8:	6143      	str	r3, [r0, #20]
 8006fda:	2d09      	cmp	r5, #9
 8006fdc:	f04f 0301 	mov.w	r3, #1
 8006fe0:	6103      	str	r3, [r0, #16]
 8006fe2:	dd16      	ble.n	8007012 <__s2b+0x72>
 8006fe4:	f104 0909 	add.w	r9, r4, #9
 8006fe8:	46c8      	mov	r8, r9
 8006fea:	442c      	add	r4, r5
 8006fec:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006ff0:	4601      	mov	r1, r0
 8006ff2:	3b30      	subs	r3, #48	@ 0x30
 8006ff4:	220a      	movs	r2, #10
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f7ff ff8c 	bl	8006f14 <__multadd>
 8006ffc:	45a0      	cmp	r8, r4
 8006ffe:	d1f5      	bne.n	8006fec <__s2b+0x4c>
 8007000:	f1a5 0408 	sub.w	r4, r5, #8
 8007004:	444c      	add	r4, r9
 8007006:	1b2d      	subs	r5, r5, r4
 8007008:	1963      	adds	r3, r4, r5
 800700a:	42bb      	cmp	r3, r7
 800700c:	db04      	blt.n	8007018 <__s2b+0x78>
 800700e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007012:	340a      	adds	r4, #10
 8007014:	2509      	movs	r5, #9
 8007016:	e7f6      	b.n	8007006 <__s2b+0x66>
 8007018:	f814 3b01 	ldrb.w	r3, [r4], #1
 800701c:	4601      	mov	r1, r0
 800701e:	3b30      	subs	r3, #48	@ 0x30
 8007020:	220a      	movs	r2, #10
 8007022:	4630      	mov	r0, r6
 8007024:	f7ff ff76 	bl	8006f14 <__multadd>
 8007028:	e7ee      	b.n	8007008 <__s2b+0x68>
 800702a:	bf00      	nop
 800702c:	08009f63 	.word	0x08009f63
 8007030:	08009f74 	.word	0x08009f74

08007034 <__hi0bits>:
 8007034:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007038:	4603      	mov	r3, r0
 800703a:	bf36      	itet	cc
 800703c:	0403      	lslcc	r3, r0, #16
 800703e:	2000      	movcs	r0, #0
 8007040:	2010      	movcc	r0, #16
 8007042:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007046:	bf3c      	itt	cc
 8007048:	021b      	lslcc	r3, r3, #8
 800704a:	3008      	addcc	r0, #8
 800704c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007050:	bf3c      	itt	cc
 8007052:	011b      	lslcc	r3, r3, #4
 8007054:	3004      	addcc	r0, #4
 8007056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800705a:	bf3c      	itt	cc
 800705c:	009b      	lslcc	r3, r3, #2
 800705e:	3002      	addcc	r0, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	db05      	blt.n	8007070 <__hi0bits+0x3c>
 8007064:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007068:	f100 0001 	add.w	r0, r0, #1
 800706c:	bf08      	it	eq
 800706e:	2020      	moveq	r0, #32
 8007070:	4770      	bx	lr

08007072 <__lo0bits>:
 8007072:	6803      	ldr	r3, [r0, #0]
 8007074:	4602      	mov	r2, r0
 8007076:	f013 0007 	ands.w	r0, r3, #7
 800707a:	d00b      	beq.n	8007094 <__lo0bits+0x22>
 800707c:	07d9      	lsls	r1, r3, #31
 800707e:	d421      	bmi.n	80070c4 <__lo0bits+0x52>
 8007080:	0798      	lsls	r0, r3, #30
 8007082:	bf49      	itett	mi
 8007084:	085b      	lsrmi	r3, r3, #1
 8007086:	089b      	lsrpl	r3, r3, #2
 8007088:	2001      	movmi	r0, #1
 800708a:	6013      	strmi	r3, [r2, #0]
 800708c:	bf5c      	itt	pl
 800708e:	6013      	strpl	r3, [r2, #0]
 8007090:	2002      	movpl	r0, #2
 8007092:	4770      	bx	lr
 8007094:	b299      	uxth	r1, r3
 8007096:	b909      	cbnz	r1, 800709c <__lo0bits+0x2a>
 8007098:	0c1b      	lsrs	r3, r3, #16
 800709a:	2010      	movs	r0, #16
 800709c:	b2d9      	uxtb	r1, r3
 800709e:	b909      	cbnz	r1, 80070a4 <__lo0bits+0x32>
 80070a0:	3008      	adds	r0, #8
 80070a2:	0a1b      	lsrs	r3, r3, #8
 80070a4:	0719      	lsls	r1, r3, #28
 80070a6:	bf04      	itt	eq
 80070a8:	091b      	lsreq	r3, r3, #4
 80070aa:	3004      	addeq	r0, #4
 80070ac:	0799      	lsls	r1, r3, #30
 80070ae:	bf04      	itt	eq
 80070b0:	089b      	lsreq	r3, r3, #2
 80070b2:	3002      	addeq	r0, #2
 80070b4:	07d9      	lsls	r1, r3, #31
 80070b6:	d403      	bmi.n	80070c0 <__lo0bits+0x4e>
 80070b8:	085b      	lsrs	r3, r3, #1
 80070ba:	f100 0001 	add.w	r0, r0, #1
 80070be:	d003      	beq.n	80070c8 <__lo0bits+0x56>
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	4770      	bx	lr
 80070c4:	2000      	movs	r0, #0
 80070c6:	4770      	bx	lr
 80070c8:	2020      	movs	r0, #32
 80070ca:	4770      	bx	lr

080070cc <__i2b>:
 80070cc:	b510      	push	{r4, lr}
 80070ce:	460c      	mov	r4, r1
 80070d0:	2101      	movs	r1, #1
 80070d2:	f7ff febd 	bl	8006e50 <_Balloc>
 80070d6:	4602      	mov	r2, r0
 80070d8:	b928      	cbnz	r0, 80070e6 <__i2b+0x1a>
 80070da:	4b05      	ldr	r3, [pc, #20]	@ (80070f0 <__i2b+0x24>)
 80070dc:	4805      	ldr	r0, [pc, #20]	@ (80070f4 <__i2b+0x28>)
 80070de:	f240 1145 	movw	r1, #325	@ 0x145
 80070e2:	f002 f855 	bl	8009190 <__assert_func>
 80070e6:	2301      	movs	r3, #1
 80070e8:	6144      	str	r4, [r0, #20]
 80070ea:	6103      	str	r3, [r0, #16]
 80070ec:	bd10      	pop	{r4, pc}
 80070ee:	bf00      	nop
 80070f0:	08009f63 	.word	0x08009f63
 80070f4:	08009f74 	.word	0x08009f74

080070f8 <__multiply>:
 80070f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	4614      	mov	r4, r2
 80070fe:	690a      	ldr	r2, [r1, #16]
 8007100:	6923      	ldr	r3, [r4, #16]
 8007102:	429a      	cmp	r2, r3
 8007104:	bfa8      	it	ge
 8007106:	4623      	movge	r3, r4
 8007108:	460f      	mov	r7, r1
 800710a:	bfa4      	itt	ge
 800710c:	460c      	movge	r4, r1
 800710e:	461f      	movge	r7, r3
 8007110:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007114:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007118:	68a3      	ldr	r3, [r4, #8]
 800711a:	6861      	ldr	r1, [r4, #4]
 800711c:	eb0a 0609 	add.w	r6, sl, r9
 8007120:	42b3      	cmp	r3, r6
 8007122:	b085      	sub	sp, #20
 8007124:	bfb8      	it	lt
 8007126:	3101      	addlt	r1, #1
 8007128:	f7ff fe92 	bl	8006e50 <_Balloc>
 800712c:	b930      	cbnz	r0, 800713c <__multiply+0x44>
 800712e:	4602      	mov	r2, r0
 8007130:	4b44      	ldr	r3, [pc, #272]	@ (8007244 <__multiply+0x14c>)
 8007132:	4845      	ldr	r0, [pc, #276]	@ (8007248 <__multiply+0x150>)
 8007134:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007138:	f002 f82a 	bl	8009190 <__assert_func>
 800713c:	f100 0514 	add.w	r5, r0, #20
 8007140:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007144:	462b      	mov	r3, r5
 8007146:	2200      	movs	r2, #0
 8007148:	4543      	cmp	r3, r8
 800714a:	d321      	bcc.n	8007190 <__multiply+0x98>
 800714c:	f107 0114 	add.w	r1, r7, #20
 8007150:	f104 0214 	add.w	r2, r4, #20
 8007154:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007158:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800715c:	9302      	str	r3, [sp, #8]
 800715e:	1b13      	subs	r3, r2, r4
 8007160:	3b15      	subs	r3, #21
 8007162:	f023 0303 	bic.w	r3, r3, #3
 8007166:	3304      	adds	r3, #4
 8007168:	f104 0715 	add.w	r7, r4, #21
 800716c:	42ba      	cmp	r2, r7
 800716e:	bf38      	it	cc
 8007170:	2304      	movcc	r3, #4
 8007172:	9301      	str	r3, [sp, #4]
 8007174:	9b02      	ldr	r3, [sp, #8]
 8007176:	9103      	str	r1, [sp, #12]
 8007178:	428b      	cmp	r3, r1
 800717a:	d80c      	bhi.n	8007196 <__multiply+0x9e>
 800717c:	2e00      	cmp	r6, #0
 800717e:	dd03      	ble.n	8007188 <__multiply+0x90>
 8007180:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007184:	2b00      	cmp	r3, #0
 8007186:	d05b      	beq.n	8007240 <__multiply+0x148>
 8007188:	6106      	str	r6, [r0, #16]
 800718a:	b005      	add	sp, #20
 800718c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007190:	f843 2b04 	str.w	r2, [r3], #4
 8007194:	e7d8      	b.n	8007148 <__multiply+0x50>
 8007196:	f8b1 a000 	ldrh.w	sl, [r1]
 800719a:	f1ba 0f00 	cmp.w	sl, #0
 800719e:	d024      	beq.n	80071ea <__multiply+0xf2>
 80071a0:	f104 0e14 	add.w	lr, r4, #20
 80071a4:	46a9      	mov	r9, r5
 80071a6:	f04f 0c00 	mov.w	ip, #0
 80071aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80071ae:	f8d9 3000 	ldr.w	r3, [r9]
 80071b2:	fa1f fb87 	uxth.w	fp, r7
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80071bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80071c0:	f8d9 7000 	ldr.w	r7, [r9]
 80071c4:	4463      	add	r3, ip
 80071c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80071ca:	fb0a c70b 	mla	r7, sl, fp, ip
 80071ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80071d8:	4572      	cmp	r2, lr
 80071da:	f849 3b04 	str.w	r3, [r9], #4
 80071de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80071e2:	d8e2      	bhi.n	80071aa <__multiply+0xb2>
 80071e4:	9b01      	ldr	r3, [sp, #4]
 80071e6:	f845 c003 	str.w	ip, [r5, r3]
 80071ea:	9b03      	ldr	r3, [sp, #12]
 80071ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80071f0:	3104      	adds	r1, #4
 80071f2:	f1b9 0f00 	cmp.w	r9, #0
 80071f6:	d021      	beq.n	800723c <__multiply+0x144>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	f104 0c14 	add.w	ip, r4, #20
 80071fe:	46ae      	mov	lr, r5
 8007200:	f04f 0a00 	mov.w	sl, #0
 8007204:	f8bc b000 	ldrh.w	fp, [ip]
 8007208:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800720c:	fb09 770b 	mla	r7, r9, fp, r7
 8007210:	4457      	add	r7, sl
 8007212:	b29b      	uxth	r3, r3
 8007214:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007218:	f84e 3b04 	str.w	r3, [lr], #4
 800721c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007220:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007224:	f8be 3000 	ldrh.w	r3, [lr]
 8007228:	fb09 330a 	mla	r3, r9, sl, r3
 800722c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007230:	4562      	cmp	r2, ip
 8007232:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007236:	d8e5      	bhi.n	8007204 <__multiply+0x10c>
 8007238:	9f01      	ldr	r7, [sp, #4]
 800723a:	51eb      	str	r3, [r5, r7]
 800723c:	3504      	adds	r5, #4
 800723e:	e799      	b.n	8007174 <__multiply+0x7c>
 8007240:	3e01      	subs	r6, #1
 8007242:	e79b      	b.n	800717c <__multiply+0x84>
 8007244:	08009f63 	.word	0x08009f63
 8007248:	08009f74 	.word	0x08009f74

0800724c <__pow5mult>:
 800724c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007250:	4615      	mov	r5, r2
 8007252:	f012 0203 	ands.w	r2, r2, #3
 8007256:	4607      	mov	r7, r0
 8007258:	460e      	mov	r6, r1
 800725a:	d007      	beq.n	800726c <__pow5mult+0x20>
 800725c:	4c25      	ldr	r4, [pc, #148]	@ (80072f4 <__pow5mult+0xa8>)
 800725e:	3a01      	subs	r2, #1
 8007260:	2300      	movs	r3, #0
 8007262:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007266:	f7ff fe55 	bl	8006f14 <__multadd>
 800726a:	4606      	mov	r6, r0
 800726c:	10ad      	asrs	r5, r5, #2
 800726e:	d03d      	beq.n	80072ec <__pow5mult+0xa0>
 8007270:	69fc      	ldr	r4, [r7, #28]
 8007272:	b97c      	cbnz	r4, 8007294 <__pow5mult+0x48>
 8007274:	2010      	movs	r0, #16
 8007276:	f7ff fd35 	bl	8006ce4 <malloc>
 800727a:	4602      	mov	r2, r0
 800727c:	61f8      	str	r0, [r7, #28]
 800727e:	b928      	cbnz	r0, 800728c <__pow5mult+0x40>
 8007280:	4b1d      	ldr	r3, [pc, #116]	@ (80072f8 <__pow5mult+0xac>)
 8007282:	481e      	ldr	r0, [pc, #120]	@ (80072fc <__pow5mult+0xb0>)
 8007284:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007288:	f001 ff82 	bl	8009190 <__assert_func>
 800728c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007290:	6004      	str	r4, [r0, #0]
 8007292:	60c4      	str	r4, [r0, #12]
 8007294:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007298:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800729c:	b94c      	cbnz	r4, 80072b2 <__pow5mult+0x66>
 800729e:	f240 2171 	movw	r1, #625	@ 0x271
 80072a2:	4638      	mov	r0, r7
 80072a4:	f7ff ff12 	bl	80070cc <__i2b>
 80072a8:	2300      	movs	r3, #0
 80072aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80072ae:	4604      	mov	r4, r0
 80072b0:	6003      	str	r3, [r0, #0]
 80072b2:	f04f 0900 	mov.w	r9, #0
 80072b6:	07eb      	lsls	r3, r5, #31
 80072b8:	d50a      	bpl.n	80072d0 <__pow5mult+0x84>
 80072ba:	4631      	mov	r1, r6
 80072bc:	4622      	mov	r2, r4
 80072be:	4638      	mov	r0, r7
 80072c0:	f7ff ff1a 	bl	80070f8 <__multiply>
 80072c4:	4631      	mov	r1, r6
 80072c6:	4680      	mov	r8, r0
 80072c8:	4638      	mov	r0, r7
 80072ca:	f7ff fe01 	bl	8006ed0 <_Bfree>
 80072ce:	4646      	mov	r6, r8
 80072d0:	106d      	asrs	r5, r5, #1
 80072d2:	d00b      	beq.n	80072ec <__pow5mult+0xa0>
 80072d4:	6820      	ldr	r0, [r4, #0]
 80072d6:	b938      	cbnz	r0, 80072e8 <__pow5mult+0x9c>
 80072d8:	4622      	mov	r2, r4
 80072da:	4621      	mov	r1, r4
 80072dc:	4638      	mov	r0, r7
 80072de:	f7ff ff0b 	bl	80070f8 <__multiply>
 80072e2:	6020      	str	r0, [r4, #0]
 80072e4:	f8c0 9000 	str.w	r9, [r0]
 80072e8:	4604      	mov	r4, r0
 80072ea:	e7e4      	b.n	80072b6 <__pow5mult+0x6a>
 80072ec:	4630      	mov	r0, r6
 80072ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072f2:	bf00      	nop
 80072f4:	08009fd0 	.word	0x08009fd0
 80072f8:	08009ef4 	.word	0x08009ef4
 80072fc:	08009f74 	.word	0x08009f74

08007300 <__lshift>:
 8007300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007304:	460c      	mov	r4, r1
 8007306:	6849      	ldr	r1, [r1, #4]
 8007308:	6923      	ldr	r3, [r4, #16]
 800730a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800730e:	68a3      	ldr	r3, [r4, #8]
 8007310:	4607      	mov	r7, r0
 8007312:	4691      	mov	r9, r2
 8007314:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007318:	f108 0601 	add.w	r6, r8, #1
 800731c:	42b3      	cmp	r3, r6
 800731e:	db0b      	blt.n	8007338 <__lshift+0x38>
 8007320:	4638      	mov	r0, r7
 8007322:	f7ff fd95 	bl	8006e50 <_Balloc>
 8007326:	4605      	mov	r5, r0
 8007328:	b948      	cbnz	r0, 800733e <__lshift+0x3e>
 800732a:	4602      	mov	r2, r0
 800732c:	4b28      	ldr	r3, [pc, #160]	@ (80073d0 <__lshift+0xd0>)
 800732e:	4829      	ldr	r0, [pc, #164]	@ (80073d4 <__lshift+0xd4>)
 8007330:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007334:	f001 ff2c 	bl	8009190 <__assert_func>
 8007338:	3101      	adds	r1, #1
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	e7ee      	b.n	800731c <__lshift+0x1c>
 800733e:	2300      	movs	r3, #0
 8007340:	f100 0114 	add.w	r1, r0, #20
 8007344:	f100 0210 	add.w	r2, r0, #16
 8007348:	4618      	mov	r0, r3
 800734a:	4553      	cmp	r3, sl
 800734c:	db33      	blt.n	80073b6 <__lshift+0xb6>
 800734e:	6920      	ldr	r0, [r4, #16]
 8007350:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007354:	f104 0314 	add.w	r3, r4, #20
 8007358:	f019 091f 	ands.w	r9, r9, #31
 800735c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007360:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007364:	d02b      	beq.n	80073be <__lshift+0xbe>
 8007366:	f1c9 0e20 	rsb	lr, r9, #32
 800736a:	468a      	mov	sl, r1
 800736c:	2200      	movs	r2, #0
 800736e:	6818      	ldr	r0, [r3, #0]
 8007370:	fa00 f009 	lsl.w	r0, r0, r9
 8007374:	4310      	orrs	r0, r2
 8007376:	f84a 0b04 	str.w	r0, [sl], #4
 800737a:	f853 2b04 	ldr.w	r2, [r3], #4
 800737e:	459c      	cmp	ip, r3
 8007380:	fa22 f20e 	lsr.w	r2, r2, lr
 8007384:	d8f3      	bhi.n	800736e <__lshift+0x6e>
 8007386:	ebac 0304 	sub.w	r3, ip, r4
 800738a:	3b15      	subs	r3, #21
 800738c:	f023 0303 	bic.w	r3, r3, #3
 8007390:	3304      	adds	r3, #4
 8007392:	f104 0015 	add.w	r0, r4, #21
 8007396:	4584      	cmp	ip, r0
 8007398:	bf38      	it	cc
 800739a:	2304      	movcc	r3, #4
 800739c:	50ca      	str	r2, [r1, r3]
 800739e:	b10a      	cbz	r2, 80073a4 <__lshift+0xa4>
 80073a0:	f108 0602 	add.w	r6, r8, #2
 80073a4:	3e01      	subs	r6, #1
 80073a6:	4638      	mov	r0, r7
 80073a8:	612e      	str	r6, [r5, #16]
 80073aa:	4621      	mov	r1, r4
 80073ac:	f7ff fd90 	bl	8006ed0 <_Bfree>
 80073b0:	4628      	mov	r0, r5
 80073b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80073ba:	3301      	adds	r3, #1
 80073bc:	e7c5      	b.n	800734a <__lshift+0x4a>
 80073be:	3904      	subs	r1, #4
 80073c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80073c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80073c8:	459c      	cmp	ip, r3
 80073ca:	d8f9      	bhi.n	80073c0 <__lshift+0xc0>
 80073cc:	e7ea      	b.n	80073a4 <__lshift+0xa4>
 80073ce:	bf00      	nop
 80073d0:	08009f63 	.word	0x08009f63
 80073d4:	08009f74 	.word	0x08009f74

080073d8 <__mcmp>:
 80073d8:	690a      	ldr	r2, [r1, #16]
 80073da:	4603      	mov	r3, r0
 80073dc:	6900      	ldr	r0, [r0, #16]
 80073de:	1a80      	subs	r0, r0, r2
 80073e0:	b530      	push	{r4, r5, lr}
 80073e2:	d10e      	bne.n	8007402 <__mcmp+0x2a>
 80073e4:	3314      	adds	r3, #20
 80073e6:	3114      	adds	r1, #20
 80073e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80073ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80073f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073f8:	4295      	cmp	r5, r2
 80073fa:	d003      	beq.n	8007404 <__mcmp+0x2c>
 80073fc:	d205      	bcs.n	800740a <__mcmp+0x32>
 80073fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007402:	bd30      	pop	{r4, r5, pc}
 8007404:	42a3      	cmp	r3, r4
 8007406:	d3f3      	bcc.n	80073f0 <__mcmp+0x18>
 8007408:	e7fb      	b.n	8007402 <__mcmp+0x2a>
 800740a:	2001      	movs	r0, #1
 800740c:	e7f9      	b.n	8007402 <__mcmp+0x2a>
	...

08007410 <__mdiff>:
 8007410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007414:	4689      	mov	r9, r1
 8007416:	4606      	mov	r6, r0
 8007418:	4611      	mov	r1, r2
 800741a:	4648      	mov	r0, r9
 800741c:	4614      	mov	r4, r2
 800741e:	f7ff ffdb 	bl	80073d8 <__mcmp>
 8007422:	1e05      	subs	r5, r0, #0
 8007424:	d112      	bne.n	800744c <__mdiff+0x3c>
 8007426:	4629      	mov	r1, r5
 8007428:	4630      	mov	r0, r6
 800742a:	f7ff fd11 	bl	8006e50 <_Balloc>
 800742e:	4602      	mov	r2, r0
 8007430:	b928      	cbnz	r0, 800743e <__mdiff+0x2e>
 8007432:	4b3f      	ldr	r3, [pc, #252]	@ (8007530 <__mdiff+0x120>)
 8007434:	f240 2137 	movw	r1, #567	@ 0x237
 8007438:	483e      	ldr	r0, [pc, #248]	@ (8007534 <__mdiff+0x124>)
 800743a:	f001 fea9 	bl	8009190 <__assert_func>
 800743e:	2301      	movs	r3, #1
 8007440:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007444:	4610      	mov	r0, r2
 8007446:	b003      	add	sp, #12
 8007448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744c:	bfbc      	itt	lt
 800744e:	464b      	movlt	r3, r9
 8007450:	46a1      	movlt	r9, r4
 8007452:	4630      	mov	r0, r6
 8007454:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007458:	bfba      	itte	lt
 800745a:	461c      	movlt	r4, r3
 800745c:	2501      	movlt	r5, #1
 800745e:	2500      	movge	r5, #0
 8007460:	f7ff fcf6 	bl	8006e50 <_Balloc>
 8007464:	4602      	mov	r2, r0
 8007466:	b918      	cbnz	r0, 8007470 <__mdiff+0x60>
 8007468:	4b31      	ldr	r3, [pc, #196]	@ (8007530 <__mdiff+0x120>)
 800746a:	f240 2145 	movw	r1, #581	@ 0x245
 800746e:	e7e3      	b.n	8007438 <__mdiff+0x28>
 8007470:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007474:	6926      	ldr	r6, [r4, #16]
 8007476:	60c5      	str	r5, [r0, #12]
 8007478:	f109 0310 	add.w	r3, r9, #16
 800747c:	f109 0514 	add.w	r5, r9, #20
 8007480:	f104 0e14 	add.w	lr, r4, #20
 8007484:	f100 0b14 	add.w	fp, r0, #20
 8007488:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800748c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	46d9      	mov	r9, fp
 8007494:	f04f 0c00 	mov.w	ip, #0
 8007498:	9b01      	ldr	r3, [sp, #4]
 800749a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800749e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	fa1f f38a 	uxth.w	r3, sl
 80074a8:	4619      	mov	r1, r3
 80074aa:	b283      	uxth	r3, r0
 80074ac:	1acb      	subs	r3, r1, r3
 80074ae:	0c00      	lsrs	r0, r0, #16
 80074b0:	4463      	add	r3, ip
 80074b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80074b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80074c0:	4576      	cmp	r6, lr
 80074c2:	f849 3b04 	str.w	r3, [r9], #4
 80074c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074ca:	d8e5      	bhi.n	8007498 <__mdiff+0x88>
 80074cc:	1b33      	subs	r3, r6, r4
 80074ce:	3b15      	subs	r3, #21
 80074d0:	f023 0303 	bic.w	r3, r3, #3
 80074d4:	3415      	adds	r4, #21
 80074d6:	3304      	adds	r3, #4
 80074d8:	42a6      	cmp	r6, r4
 80074da:	bf38      	it	cc
 80074dc:	2304      	movcc	r3, #4
 80074de:	441d      	add	r5, r3
 80074e0:	445b      	add	r3, fp
 80074e2:	461e      	mov	r6, r3
 80074e4:	462c      	mov	r4, r5
 80074e6:	4544      	cmp	r4, r8
 80074e8:	d30e      	bcc.n	8007508 <__mdiff+0xf8>
 80074ea:	f108 0103 	add.w	r1, r8, #3
 80074ee:	1b49      	subs	r1, r1, r5
 80074f0:	f021 0103 	bic.w	r1, r1, #3
 80074f4:	3d03      	subs	r5, #3
 80074f6:	45a8      	cmp	r8, r5
 80074f8:	bf38      	it	cc
 80074fa:	2100      	movcc	r1, #0
 80074fc:	440b      	add	r3, r1
 80074fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007502:	b191      	cbz	r1, 800752a <__mdiff+0x11a>
 8007504:	6117      	str	r7, [r2, #16]
 8007506:	e79d      	b.n	8007444 <__mdiff+0x34>
 8007508:	f854 1b04 	ldr.w	r1, [r4], #4
 800750c:	46e6      	mov	lr, ip
 800750e:	0c08      	lsrs	r0, r1, #16
 8007510:	fa1c fc81 	uxtah	ip, ip, r1
 8007514:	4471      	add	r1, lr
 8007516:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800751a:	b289      	uxth	r1, r1
 800751c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007520:	f846 1b04 	str.w	r1, [r6], #4
 8007524:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007528:	e7dd      	b.n	80074e6 <__mdiff+0xd6>
 800752a:	3f01      	subs	r7, #1
 800752c:	e7e7      	b.n	80074fe <__mdiff+0xee>
 800752e:	bf00      	nop
 8007530:	08009f63 	.word	0x08009f63
 8007534:	08009f74 	.word	0x08009f74

08007538 <__ulp>:
 8007538:	b082      	sub	sp, #8
 800753a:	ed8d 0b00 	vstr	d0, [sp]
 800753e:	9a01      	ldr	r2, [sp, #4]
 8007540:	4b0f      	ldr	r3, [pc, #60]	@ (8007580 <__ulp+0x48>)
 8007542:	4013      	ands	r3, r2
 8007544:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007548:	2b00      	cmp	r3, #0
 800754a:	dc08      	bgt.n	800755e <__ulp+0x26>
 800754c:	425b      	negs	r3, r3
 800754e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007552:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007556:	da04      	bge.n	8007562 <__ulp+0x2a>
 8007558:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800755c:	4113      	asrs	r3, r2
 800755e:	2200      	movs	r2, #0
 8007560:	e008      	b.n	8007574 <__ulp+0x3c>
 8007562:	f1a2 0314 	sub.w	r3, r2, #20
 8007566:	2b1e      	cmp	r3, #30
 8007568:	bfda      	itte	le
 800756a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800756e:	40da      	lsrle	r2, r3
 8007570:	2201      	movgt	r2, #1
 8007572:	2300      	movs	r3, #0
 8007574:	4619      	mov	r1, r3
 8007576:	4610      	mov	r0, r2
 8007578:	ec41 0b10 	vmov	d0, r0, r1
 800757c:	b002      	add	sp, #8
 800757e:	4770      	bx	lr
 8007580:	7ff00000 	.word	0x7ff00000

08007584 <__b2d>:
 8007584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007588:	6906      	ldr	r6, [r0, #16]
 800758a:	f100 0814 	add.w	r8, r0, #20
 800758e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007592:	1f37      	subs	r7, r6, #4
 8007594:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007598:	4610      	mov	r0, r2
 800759a:	f7ff fd4b 	bl	8007034 <__hi0bits>
 800759e:	f1c0 0320 	rsb	r3, r0, #32
 80075a2:	280a      	cmp	r0, #10
 80075a4:	600b      	str	r3, [r1, #0]
 80075a6:	491b      	ldr	r1, [pc, #108]	@ (8007614 <__b2d+0x90>)
 80075a8:	dc15      	bgt.n	80075d6 <__b2d+0x52>
 80075aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80075ae:	fa22 f30c 	lsr.w	r3, r2, ip
 80075b2:	45b8      	cmp	r8, r7
 80075b4:	ea43 0501 	orr.w	r5, r3, r1
 80075b8:	bf34      	ite	cc
 80075ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80075be:	2300      	movcs	r3, #0
 80075c0:	3015      	adds	r0, #21
 80075c2:	fa02 f000 	lsl.w	r0, r2, r0
 80075c6:	fa23 f30c 	lsr.w	r3, r3, ip
 80075ca:	4303      	orrs	r3, r0
 80075cc:	461c      	mov	r4, r3
 80075ce:	ec45 4b10 	vmov	d0, r4, r5
 80075d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d6:	45b8      	cmp	r8, r7
 80075d8:	bf3a      	itte	cc
 80075da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80075de:	f1a6 0708 	subcc.w	r7, r6, #8
 80075e2:	2300      	movcs	r3, #0
 80075e4:	380b      	subs	r0, #11
 80075e6:	d012      	beq.n	800760e <__b2d+0x8a>
 80075e8:	f1c0 0120 	rsb	r1, r0, #32
 80075ec:	fa23 f401 	lsr.w	r4, r3, r1
 80075f0:	4082      	lsls	r2, r0
 80075f2:	4322      	orrs	r2, r4
 80075f4:	4547      	cmp	r7, r8
 80075f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80075fa:	bf8c      	ite	hi
 80075fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007600:	2200      	movls	r2, #0
 8007602:	4083      	lsls	r3, r0
 8007604:	40ca      	lsrs	r2, r1
 8007606:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800760a:	4313      	orrs	r3, r2
 800760c:	e7de      	b.n	80075cc <__b2d+0x48>
 800760e:	ea42 0501 	orr.w	r5, r2, r1
 8007612:	e7db      	b.n	80075cc <__b2d+0x48>
 8007614:	3ff00000 	.word	0x3ff00000

08007618 <__d2b>:
 8007618:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800761c:	460f      	mov	r7, r1
 800761e:	2101      	movs	r1, #1
 8007620:	ec59 8b10 	vmov	r8, r9, d0
 8007624:	4616      	mov	r6, r2
 8007626:	f7ff fc13 	bl	8006e50 <_Balloc>
 800762a:	4604      	mov	r4, r0
 800762c:	b930      	cbnz	r0, 800763c <__d2b+0x24>
 800762e:	4602      	mov	r2, r0
 8007630:	4b23      	ldr	r3, [pc, #140]	@ (80076c0 <__d2b+0xa8>)
 8007632:	4824      	ldr	r0, [pc, #144]	@ (80076c4 <__d2b+0xac>)
 8007634:	f240 310f 	movw	r1, #783	@ 0x30f
 8007638:	f001 fdaa 	bl	8009190 <__assert_func>
 800763c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007644:	b10d      	cbz	r5, 800764a <__d2b+0x32>
 8007646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800764a:	9301      	str	r3, [sp, #4]
 800764c:	f1b8 0300 	subs.w	r3, r8, #0
 8007650:	d023      	beq.n	800769a <__d2b+0x82>
 8007652:	4668      	mov	r0, sp
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	f7ff fd0c 	bl	8007072 <__lo0bits>
 800765a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800765e:	b1d0      	cbz	r0, 8007696 <__d2b+0x7e>
 8007660:	f1c0 0320 	rsb	r3, r0, #32
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	430b      	orrs	r3, r1
 800766a:	40c2      	lsrs	r2, r0
 800766c:	6163      	str	r3, [r4, #20]
 800766e:	9201      	str	r2, [sp, #4]
 8007670:	9b01      	ldr	r3, [sp, #4]
 8007672:	61a3      	str	r3, [r4, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	bf0c      	ite	eq
 8007678:	2201      	moveq	r2, #1
 800767a:	2202      	movne	r2, #2
 800767c:	6122      	str	r2, [r4, #16]
 800767e:	b1a5      	cbz	r5, 80076aa <__d2b+0x92>
 8007680:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007684:	4405      	add	r5, r0
 8007686:	603d      	str	r5, [r7, #0]
 8007688:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800768c:	6030      	str	r0, [r6, #0]
 800768e:	4620      	mov	r0, r4
 8007690:	b003      	add	sp, #12
 8007692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007696:	6161      	str	r1, [r4, #20]
 8007698:	e7ea      	b.n	8007670 <__d2b+0x58>
 800769a:	a801      	add	r0, sp, #4
 800769c:	f7ff fce9 	bl	8007072 <__lo0bits>
 80076a0:	9b01      	ldr	r3, [sp, #4]
 80076a2:	6163      	str	r3, [r4, #20]
 80076a4:	3020      	adds	r0, #32
 80076a6:	2201      	movs	r2, #1
 80076a8:	e7e8      	b.n	800767c <__d2b+0x64>
 80076aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80076b2:	6038      	str	r0, [r7, #0]
 80076b4:	6918      	ldr	r0, [r3, #16]
 80076b6:	f7ff fcbd 	bl	8007034 <__hi0bits>
 80076ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076be:	e7e5      	b.n	800768c <__d2b+0x74>
 80076c0:	08009f63 	.word	0x08009f63
 80076c4:	08009f74 	.word	0x08009f74

080076c8 <__ratio>:
 80076c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	b085      	sub	sp, #20
 80076ce:	e9cd 1000 	strd	r1, r0, [sp]
 80076d2:	a902      	add	r1, sp, #8
 80076d4:	f7ff ff56 	bl	8007584 <__b2d>
 80076d8:	9800      	ldr	r0, [sp, #0]
 80076da:	a903      	add	r1, sp, #12
 80076dc:	ec55 4b10 	vmov	r4, r5, d0
 80076e0:	f7ff ff50 	bl	8007584 <__b2d>
 80076e4:	9b01      	ldr	r3, [sp, #4]
 80076e6:	6919      	ldr	r1, [r3, #16]
 80076e8:	9b00      	ldr	r3, [sp, #0]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	1ac9      	subs	r1, r1, r3
 80076ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80076f2:	1a9b      	subs	r3, r3, r2
 80076f4:	ec5b ab10 	vmov	sl, fp, d0
 80076f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	bfce      	itee	gt
 8007700:	462a      	movgt	r2, r5
 8007702:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007706:	465a      	movle	r2, fp
 8007708:	462f      	mov	r7, r5
 800770a:	46d9      	mov	r9, fp
 800770c:	bfcc      	ite	gt
 800770e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007712:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007716:	464b      	mov	r3, r9
 8007718:	4652      	mov	r2, sl
 800771a:	4620      	mov	r0, r4
 800771c:	4639      	mov	r1, r7
 800771e:	f7f9 f8a5 	bl	800086c <__aeabi_ddiv>
 8007722:	ec41 0b10 	vmov	d0, r0, r1
 8007726:	b005      	add	sp, #20
 8007728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800772c <__copybits>:
 800772c:	3901      	subs	r1, #1
 800772e:	b570      	push	{r4, r5, r6, lr}
 8007730:	1149      	asrs	r1, r1, #5
 8007732:	6914      	ldr	r4, [r2, #16]
 8007734:	3101      	adds	r1, #1
 8007736:	f102 0314 	add.w	r3, r2, #20
 800773a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800773e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007742:	1f05      	subs	r5, r0, #4
 8007744:	42a3      	cmp	r3, r4
 8007746:	d30c      	bcc.n	8007762 <__copybits+0x36>
 8007748:	1aa3      	subs	r3, r4, r2
 800774a:	3b11      	subs	r3, #17
 800774c:	f023 0303 	bic.w	r3, r3, #3
 8007750:	3211      	adds	r2, #17
 8007752:	42a2      	cmp	r2, r4
 8007754:	bf88      	it	hi
 8007756:	2300      	movhi	r3, #0
 8007758:	4418      	add	r0, r3
 800775a:	2300      	movs	r3, #0
 800775c:	4288      	cmp	r0, r1
 800775e:	d305      	bcc.n	800776c <__copybits+0x40>
 8007760:	bd70      	pop	{r4, r5, r6, pc}
 8007762:	f853 6b04 	ldr.w	r6, [r3], #4
 8007766:	f845 6f04 	str.w	r6, [r5, #4]!
 800776a:	e7eb      	b.n	8007744 <__copybits+0x18>
 800776c:	f840 3b04 	str.w	r3, [r0], #4
 8007770:	e7f4      	b.n	800775c <__copybits+0x30>

08007772 <__any_on>:
 8007772:	f100 0214 	add.w	r2, r0, #20
 8007776:	6900      	ldr	r0, [r0, #16]
 8007778:	114b      	asrs	r3, r1, #5
 800777a:	4298      	cmp	r0, r3
 800777c:	b510      	push	{r4, lr}
 800777e:	db11      	blt.n	80077a4 <__any_on+0x32>
 8007780:	dd0a      	ble.n	8007798 <__any_on+0x26>
 8007782:	f011 011f 	ands.w	r1, r1, #31
 8007786:	d007      	beq.n	8007798 <__any_on+0x26>
 8007788:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800778c:	fa24 f001 	lsr.w	r0, r4, r1
 8007790:	fa00 f101 	lsl.w	r1, r0, r1
 8007794:	428c      	cmp	r4, r1
 8007796:	d10b      	bne.n	80077b0 <__any_on+0x3e>
 8007798:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800779c:	4293      	cmp	r3, r2
 800779e:	d803      	bhi.n	80077a8 <__any_on+0x36>
 80077a0:	2000      	movs	r0, #0
 80077a2:	bd10      	pop	{r4, pc}
 80077a4:	4603      	mov	r3, r0
 80077a6:	e7f7      	b.n	8007798 <__any_on+0x26>
 80077a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077ac:	2900      	cmp	r1, #0
 80077ae:	d0f5      	beq.n	800779c <__any_on+0x2a>
 80077b0:	2001      	movs	r0, #1
 80077b2:	e7f6      	b.n	80077a2 <__any_on+0x30>

080077b4 <sulp>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	4604      	mov	r4, r0
 80077b8:	460d      	mov	r5, r1
 80077ba:	ec45 4b10 	vmov	d0, r4, r5
 80077be:	4616      	mov	r6, r2
 80077c0:	f7ff feba 	bl	8007538 <__ulp>
 80077c4:	ec51 0b10 	vmov	r0, r1, d0
 80077c8:	b17e      	cbz	r6, 80077ea <sulp+0x36>
 80077ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80077ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	dd09      	ble.n	80077ea <sulp+0x36>
 80077d6:	051b      	lsls	r3, r3, #20
 80077d8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80077dc:	2400      	movs	r4, #0
 80077de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80077e2:	4622      	mov	r2, r4
 80077e4:	462b      	mov	r3, r5
 80077e6:	f7f8 ff17 	bl	8000618 <__aeabi_dmul>
 80077ea:	ec41 0b10 	vmov	d0, r0, r1
 80077ee:	bd70      	pop	{r4, r5, r6, pc}

080077f0 <_strtod_l>:
 80077f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f4:	b09f      	sub	sp, #124	@ 0x7c
 80077f6:	460c      	mov	r4, r1
 80077f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80077fa:	2200      	movs	r2, #0
 80077fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80077fe:	9005      	str	r0, [sp, #20]
 8007800:	f04f 0a00 	mov.w	sl, #0
 8007804:	f04f 0b00 	mov.w	fp, #0
 8007808:	460a      	mov	r2, r1
 800780a:	9219      	str	r2, [sp, #100]	@ 0x64
 800780c:	7811      	ldrb	r1, [r2, #0]
 800780e:	292b      	cmp	r1, #43	@ 0x2b
 8007810:	d04a      	beq.n	80078a8 <_strtod_l+0xb8>
 8007812:	d838      	bhi.n	8007886 <_strtod_l+0x96>
 8007814:	290d      	cmp	r1, #13
 8007816:	d832      	bhi.n	800787e <_strtod_l+0x8e>
 8007818:	2908      	cmp	r1, #8
 800781a:	d832      	bhi.n	8007882 <_strtod_l+0x92>
 800781c:	2900      	cmp	r1, #0
 800781e:	d03b      	beq.n	8007898 <_strtod_l+0xa8>
 8007820:	2200      	movs	r2, #0
 8007822:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007824:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007826:	782a      	ldrb	r2, [r5, #0]
 8007828:	2a30      	cmp	r2, #48	@ 0x30
 800782a:	f040 80b3 	bne.w	8007994 <_strtod_l+0x1a4>
 800782e:	786a      	ldrb	r2, [r5, #1]
 8007830:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007834:	2a58      	cmp	r2, #88	@ 0x58
 8007836:	d16e      	bne.n	8007916 <_strtod_l+0x126>
 8007838:	9302      	str	r3, [sp, #8]
 800783a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	4a8e      	ldr	r2, [pc, #568]	@ (8007a7c <_strtod_l+0x28c>)
 8007844:	9805      	ldr	r0, [sp, #20]
 8007846:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007848:	a919      	add	r1, sp, #100	@ 0x64
 800784a:	f001 fd3b 	bl	80092c4 <__gethex>
 800784e:	f010 060f 	ands.w	r6, r0, #15
 8007852:	4604      	mov	r4, r0
 8007854:	d005      	beq.n	8007862 <_strtod_l+0x72>
 8007856:	2e06      	cmp	r6, #6
 8007858:	d128      	bne.n	80078ac <_strtod_l+0xbc>
 800785a:	3501      	adds	r5, #1
 800785c:	2300      	movs	r3, #0
 800785e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007860:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007862:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007864:	2b00      	cmp	r3, #0
 8007866:	f040 858e 	bne.w	8008386 <_strtod_l+0xb96>
 800786a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800786c:	b1cb      	cbz	r3, 80078a2 <_strtod_l+0xb2>
 800786e:	4652      	mov	r2, sl
 8007870:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007874:	ec43 2b10 	vmov	d0, r2, r3
 8007878:	b01f      	add	sp, #124	@ 0x7c
 800787a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800787e:	2920      	cmp	r1, #32
 8007880:	d1ce      	bne.n	8007820 <_strtod_l+0x30>
 8007882:	3201      	adds	r2, #1
 8007884:	e7c1      	b.n	800780a <_strtod_l+0x1a>
 8007886:	292d      	cmp	r1, #45	@ 0x2d
 8007888:	d1ca      	bne.n	8007820 <_strtod_l+0x30>
 800788a:	2101      	movs	r1, #1
 800788c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800788e:	1c51      	adds	r1, r2, #1
 8007890:	9119      	str	r1, [sp, #100]	@ 0x64
 8007892:	7852      	ldrb	r2, [r2, #1]
 8007894:	2a00      	cmp	r2, #0
 8007896:	d1c5      	bne.n	8007824 <_strtod_l+0x34>
 8007898:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800789a:	9419      	str	r4, [sp, #100]	@ 0x64
 800789c:	2b00      	cmp	r3, #0
 800789e:	f040 8570 	bne.w	8008382 <_strtod_l+0xb92>
 80078a2:	4652      	mov	r2, sl
 80078a4:	465b      	mov	r3, fp
 80078a6:	e7e5      	b.n	8007874 <_strtod_l+0x84>
 80078a8:	2100      	movs	r1, #0
 80078aa:	e7ef      	b.n	800788c <_strtod_l+0x9c>
 80078ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80078ae:	b13a      	cbz	r2, 80078c0 <_strtod_l+0xd0>
 80078b0:	2135      	movs	r1, #53	@ 0x35
 80078b2:	a81c      	add	r0, sp, #112	@ 0x70
 80078b4:	f7ff ff3a 	bl	800772c <__copybits>
 80078b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078ba:	9805      	ldr	r0, [sp, #20]
 80078bc:	f7ff fb08 	bl	8006ed0 <_Bfree>
 80078c0:	3e01      	subs	r6, #1
 80078c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80078c4:	2e04      	cmp	r6, #4
 80078c6:	d806      	bhi.n	80078d6 <_strtod_l+0xe6>
 80078c8:	e8df f006 	tbb	[pc, r6]
 80078cc:	201d0314 	.word	0x201d0314
 80078d0:	14          	.byte	0x14
 80078d1:	00          	.byte	0x00
 80078d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80078d6:	05e1      	lsls	r1, r4, #23
 80078d8:	bf48      	it	mi
 80078da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80078de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80078e2:	0d1b      	lsrs	r3, r3, #20
 80078e4:	051b      	lsls	r3, r3, #20
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1bb      	bne.n	8007862 <_strtod_l+0x72>
 80078ea:	f7fe fb31 	bl	8005f50 <__errno>
 80078ee:	2322      	movs	r3, #34	@ 0x22
 80078f0:	6003      	str	r3, [r0, #0]
 80078f2:	e7b6      	b.n	8007862 <_strtod_l+0x72>
 80078f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80078f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80078fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007900:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007904:	e7e7      	b.n	80078d6 <_strtod_l+0xe6>
 8007906:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007a84 <_strtod_l+0x294>
 800790a:	e7e4      	b.n	80078d6 <_strtod_l+0xe6>
 800790c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007910:	f04f 3aff 	mov.w	sl, #4294967295
 8007914:	e7df      	b.n	80078d6 <_strtod_l+0xe6>
 8007916:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	9219      	str	r2, [sp, #100]	@ 0x64
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	2b30      	cmp	r3, #48	@ 0x30
 8007920:	d0f9      	beq.n	8007916 <_strtod_l+0x126>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d09d      	beq.n	8007862 <_strtod_l+0x72>
 8007926:	2301      	movs	r3, #1
 8007928:	9309      	str	r3, [sp, #36]	@ 0x24
 800792a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800792c:	930c      	str	r3, [sp, #48]	@ 0x30
 800792e:	2300      	movs	r3, #0
 8007930:	9308      	str	r3, [sp, #32]
 8007932:	930a      	str	r3, [sp, #40]	@ 0x28
 8007934:	461f      	mov	r7, r3
 8007936:	220a      	movs	r2, #10
 8007938:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800793a:	7805      	ldrb	r5, [r0, #0]
 800793c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007940:	b2d9      	uxtb	r1, r3
 8007942:	2909      	cmp	r1, #9
 8007944:	d928      	bls.n	8007998 <_strtod_l+0x1a8>
 8007946:	494e      	ldr	r1, [pc, #312]	@ (8007a80 <_strtod_l+0x290>)
 8007948:	2201      	movs	r2, #1
 800794a:	f001 fbc4 	bl	80090d6 <strncmp>
 800794e:	2800      	cmp	r0, #0
 8007950:	d032      	beq.n	80079b8 <_strtod_l+0x1c8>
 8007952:	2000      	movs	r0, #0
 8007954:	462a      	mov	r2, r5
 8007956:	4681      	mov	r9, r0
 8007958:	463d      	mov	r5, r7
 800795a:	4603      	mov	r3, r0
 800795c:	2a65      	cmp	r2, #101	@ 0x65
 800795e:	d001      	beq.n	8007964 <_strtod_l+0x174>
 8007960:	2a45      	cmp	r2, #69	@ 0x45
 8007962:	d114      	bne.n	800798e <_strtod_l+0x19e>
 8007964:	b91d      	cbnz	r5, 800796e <_strtod_l+0x17e>
 8007966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007968:	4302      	orrs	r2, r0
 800796a:	d095      	beq.n	8007898 <_strtod_l+0xa8>
 800796c:	2500      	movs	r5, #0
 800796e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007970:	1c62      	adds	r2, r4, #1
 8007972:	9219      	str	r2, [sp, #100]	@ 0x64
 8007974:	7862      	ldrb	r2, [r4, #1]
 8007976:	2a2b      	cmp	r2, #43	@ 0x2b
 8007978:	d077      	beq.n	8007a6a <_strtod_l+0x27a>
 800797a:	2a2d      	cmp	r2, #45	@ 0x2d
 800797c:	d07b      	beq.n	8007a76 <_strtod_l+0x286>
 800797e:	f04f 0c00 	mov.w	ip, #0
 8007982:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007986:	2909      	cmp	r1, #9
 8007988:	f240 8082 	bls.w	8007a90 <_strtod_l+0x2a0>
 800798c:	9419      	str	r4, [sp, #100]	@ 0x64
 800798e:	f04f 0800 	mov.w	r8, #0
 8007992:	e0a2      	b.n	8007ada <_strtod_l+0x2ea>
 8007994:	2300      	movs	r3, #0
 8007996:	e7c7      	b.n	8007928 <_strtod_l+0x138>
 8007998:	2f08      	cmp	r7, #8
 800799a:	bfd5      	itete	le
 800799c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800799e:	9908      	ldrgt	r1, [sp, #32]
 80079a0:	fb02 3301 	mlale	r3, r2, r1, r3
 80079a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80079a8:	f100 0001 	add.w	r0, r0, #1
 80079ac:	bfd4      	ite	le
 80079ae:	930a      	strle	r3, [sp, #40]	@ 0x28
 80079b0:	9308      	strgt	r3, [sp, #32]
 80079b2:	3701      	adds	r7, #1
 80079b4:	9019      	str	r0, [sp, #100]	@ 0x64
 80079b6:	e7bf      	b.n	8007938 <_strtod_l+0x148>
 80079b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	9219      	str	r2, [sp, #100]	@ 0x64
 80079be:	785a      	ldrb	r2, [r3, #1]
 80079c0:	b37f      	cbz	r7, 8007a22 <_strtod_l+0x232>
 80079c2:	4681      	mov	r9, r0
 80079c4:	463d      	mov	r5, r7
 80079c6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80079ca:	2b09      	cmp	r3, #9
 80079cc:	d912      	bls.n	80079f4 <_strtod_l+0x204>
 80079ce:	2301      	movs	r3, #1
 80079d0:	e7c4      	b.n	800795c <_strtod_l+0x16c>
 80079d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	9219      	str	r2, [sp, #100]	@ 0x64
 80079d8:	785a      	ldrb	r2, [r3, #1]
 80079da:	3001      	adds	r0, #1
 80079dc:	2a30      	cmp	r2, #48	@ 0x30
 80079de:	d0f8      	beq.n	80079d2 <_strtod_l+0x1e2>
 80079e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80079e4:	2b08      	cmp	r3, #8
 80079e6:	f200 84d3 	bhi.w	8008390 <_strtod_l+0xba0>
 80079ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80079ee:	4681      	mov	r9, r0
 80079f0:	2000      	movs	r0, #0
 80079f2:	4605      	mov	r5, r0
 80079f4:	3a30      	subs	r2, #48	@ 0x30
 80079f6:	f100 0301 	add.w	r3, r0, #1
 80079fa:	d02a      	beq.n	8007a52 <_strtod_l+0x262>
 80079fc:	4499      	add	r9, r3
 80079fe:	eb00 0c05 	add.w	ip, r0, r5
 8007a02:	462b      	mov	r3, r5
 8007a04:	210a      	movs	r1, #10
 8007a06:	4563      	cmp	r3, ip
 8007a08:	d10d      	bne.n	8007a26 <_strtod_l+0x236>
 8007a0a:	1c69      	adds	r1, r5, #1
 8007a0c:	4401      	add	r1, r0
 8007a0e:	4428      	add	r0, r5
 8007a10:	2808      	cmp	r0, #8
 8007a12:	dc16      	bgt.n	8007a42 <_strtod_l+0x252>
 8007a14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007a16:	230a      	movs	r3, #10
 8007a18:	fb03 2300 	mla	r3, r3, r0, r2
 8007a1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a1e:	2300      	movs	r3, #0
 8007a20:	e018      	b.n	8007a54 <_strtod_l+0x264>
 8007a22:	4638      	mov	r0, r7
 8007a24:	e7da      	b.n	80079dc <_strtod_l+0x1ec>
 8007a26:	2b08      	cmp	r3, #8
 8007a28:	f103 0301 	add.w	r3, r3, #1
 8007a2c:	dc03      	bgt.n	8007a36 <_strtod_l+0x246>
 8007a2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007a30:	434e      	muls	r6, r1
 8007a32:	960a      	str	r6, [sp, #40]	@ 0x28
 8007a34:	e7e7      	b.n	8007a06 <_strtod_l+0x216>
 8007a36:	2b10      	cmp	r3, #16
 8007a38:	bfde      	ittt	le
 8007a3a:	9e08      	ldrle	r6, [sp, #32]
 8007a3c:	434e      	mulle	r6, r1
 8007a3e:	9608      	strle	r6, [sp, #32]
 8007a40:	e7e1      	b.n	8007a06 <_strtod_l+0x216>
 8007a42:	280f      	cmp	r0, #15
 8007a44:	dceb      	bgt.n	8007a1e <_strtod_l+0x22e>
 8007a46:	9808      	ldr	r0, [sp, #32]
 8007a48:	230a      	movs	r3, #10
 8007a4a:	fb03 2300 	mla	r3, r3, r0, r2
 8007a4e:	9308      	str	r3, [sp, #32]
 8007a50:	e7e5      	b.n	8007a1e <_strtod_l+0x22e>
 8007a52:	4629      	mov	r1, r5
 8007a54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a56:	1c50      	adds	r0, r2, #1
 8007a58:	9019      	str	r0, [sp, #100]	@ 0x64
 8007a5a:	7852      	ldrb	r2, [r2, #1]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	460d      	mov	r5, r1
 8007a60:	e7b1      	b.n	80079c6 <_strtod_l+0x1d6>
 8007a62:	f04f 0900 	mov.w	r9, #0
 8007a66:	2301      	movs	r3, #1
 8007a68:	e77d      	b.n	8007966 <_strtod_l+0x176>
 8007a6a:	f04f 0c00 	mov.w	ip, #0
 8007a6e:	1ca2      	adds	r2, r4, #2
 8007a70:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a72:	78a2      	ldrb	r2, [r4, #2]
 8007a74:	e785      	b.n	8007982 <_strtod_l+0x192>
 8007a76:	f04f 0c01 	mov.w	ip, #1
 8007a7a:	e7f8      	b.n	8007a6e <_strtod_l+0x27e>
 8007a7c:	0800a0e8 	.word	0x0800a0e8
 8007a80:	0800a0d0 	.word	0x0800a0d0
 8007a84:	7ff00000 	.word	0x7ff00000
 8007a88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a8a:	1c51      	adds	r1, r2, #1
 8007a8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007a8e:	7852      	ldrb	r2, [r2, #1]
 8007a90:	2a30      	cmp	r2, #48	@ 0x30
 8007a92:	d0f9      	beq.n	8007a88 <_strtod_l+0x298>
 8007a94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007a98:	2908      	cmp	r1, #8
 8007a9a:	f63f af78 	bhi.w	800798e <_strtod_l+0x19e>
 8007a9e:	3a30      	subs	r2, #48	@ 0x30
 8007aa0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007aa2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007aa4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007aa6:	f04f 080a 	mov.w	r8, #10
 8007aaa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007aac:	1c56      	adds	r6, r2, #1
 8007aae:	9619      	str	r6, [sp, #100]	@ 0x64
 8007ab0:	7852      	ldrb	r2, [r2, #1]
 8007ab2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007ab6:	f1be 0f09 	cmp.w	lr, #9
 8007aba:	d939      	bls.n	8007b30 <_strtod_l+0x340>
 8007abc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007abe:	1a76      	subs	r6, r6, r1
 8007ac0:	2e08      	cmp	r6, #8
 8007ac2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007ac6:	dc03      	bgt.n	8007ad0 <_strtod_l+0x2e0>
 8007ac8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007aca:	4588      	cmp	r8, r1
 8007acc:	bfa8      	it	ge
 8007ace:	4688      	movge	r8, r1
 8007ad0:	f1bc 0f00 	cmp.w	ip, #0
 8007ad4:	d001      	beq.n	8007ada <_strtod_l+0x2ea>
 8007ad6:	f1c8 0800 	rsb	r8, r8, #0
 8007ada:	2d00      	cmp	r5, #0
 8007adc:	d14e      	bne.n	8007b7c <_strtod_l+0x38c>
 8007ade:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ae0:	4308      	orrs	r0, r1
 8007ae2:	f47f aebe 	bne.w	8007862 <_strtod_l+0x72>
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f47f aed6 	bne.w	8007898 <_strtod_l+0xa8>
 8007aec:	2a69      	cmp	r2, #105	@ 0x69
 8007aee:	d028      	beq.n	8007b42 <_strtod_l+0x352>
 8007af0:	dc25      	bgt.n	8007b3e <_strtod_l+0x34e>
 8007af2:	2a49      	cmp	r2, #73	@ 0x49
 8007af4:	d025      	beq.n	8007b42 <_strtod_l+0x352>
 8007af6:	2a4e      	cmp	r2, #78	@ 0x4e
 8007af8:	f47f aece 	bne.w	8007898 <_strtod_l+0xa8>
 8007afc:	499b      	ldr	r1, [pc, #620]	@ (8007d6c <_strtod_l+0x57c>)
 8007afe:	a819      	add	r0, sp, #100	@ 0x64
 8007b00:	f001 fe02 	bl	8009708 <__match>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	f43f aec7 	beq.w	8007898 <_strtod_l+0xa8>
 8007b0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	2b28      	cmp	r3, #40	@ 0x28
 8007b10:	d12e      	bne.n	8007b70 <_strtod_l+0x380>
 8007b12:	4997      	ldr	r1, [pc, #604]	@ (8007d70 <_strtod_l+0x580>)
 8007b14:	aa1c      	add	r2, sp, #112	@ 0x70
 8007b16:	a819      	add	r0, sp, #100	@ 0x64
 8007b18:	f001 fe0a 	bl	8009730 <__hexnan>
 8007b1c:	2805      	cmp	r0, #5
 8007b1e:	d127      	bne.n	8007b70 <_strtod_l+0x380>
 8007b20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007b22:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007b26:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007b2a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007b2e:	e698      	b.n	8007862 <_strtod_l+0x72>
 8007b30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007b32:	fb08 2101 	mla	r1, r8, r1, r2
 8007b36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007b3a:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b3c:	e7b5      	b.n	8007aaa <_strtod_l+0x2ba>
 8007b3e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007b40:	e7da      	b.n	8007af8 <_strtod_l+0x308>
 8007b42:	498c      	ldr	r1, [pc, #560]	@ (8007d74 <_strtod_l+0x584>)
 8007b44:	a819      	add	r0, sp, #100	@ 0x64
 8007b46:	f001 fddf 	bl	8009708 <__match>
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	f43f aea4 	beq.w	8007898 <_strtod_l+0xa8>
 8007b50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b52:	4989      	ldr	r1, [pc, #548]	@ (8007d78 <_strtod_l+0x588>)
 8007b54:	3b01      	subs	r3, #1
 8007b56:	a819      	add	r0, sp, #100	@ 0x64
 8007b58:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b5a:	f001 fdd5 	bl	8009708 <__match>
 8007b5e:	b910      	cbnz	r0, 8007b66 <_strtod_l+0x376>
 8007b60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b62:	3301      	adds	r3, #1
 8007b64:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b66:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007d88 <_strtod_l+0x598>
 8007b6a:	f04f 0a00 	mov.w	sl, #0
 8007b6e:	e678      	b.n	8007862 <_strtod_l+0x72>
 8007b70:	4882      	ldr	r0, [pc, #520]	@ (8007d7c <_strtod_l+0x58c>)
 8007b72:	f001 fb05 	bl	8009180 <nan>
 8007b76:	ec5b ab10 	vmov	sl, fp, d0
 8007b7a:	e672      	b.n	8007862 <_strtod_l+0x72>
 8007b7c:	eba8 0309 	sub.w	r3, r8, r9
 8007b80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b82:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b84:	2f00      	cmp	r7, #0
 8007b86:	bf08      	it	eq
 8007b88:	462f      	moveq	r7, r5
 8007b8a:	2d10      	cmp	r5, #16
 8007b8c:	462c      	mov	r4, r5
 8007b8e:	bfa8      	it	ge
 8007b90:	2410      	movge	r4, #16
 8007b92:	f7f8 fcc7 	bl	8000524 <__aeabi_ui2d>
 8007b96:	2d09      	cmp	r5, #9
 8007b98:	4682      	mov	sl, r0
 8007b9a:	468b      	mov	fp, r1
 8007b9c:	dc13      	bgt.n	8007bc6 <_strtod_l+0x3d6>
 8007b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f43f ae5e 	beq.w	8007862 <_strtod_l+0x72>
 8007ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba8:	dd78      	ble.n	8007c9c <_strtod_l+0x4ac>
 8007baa:	2b16      	cmp	r3, #22
 8007bac:	dc5f      	bgt.n	8007c6e <_strtod_l+0x47e>
 8007bae:	4974      	ldr	r1, [pc, #464]	@ (8007d80 <_strtod_l+0x590>)
 8007bb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bb8:	4652      	mov	r2, sl
 8007bba:	465b      	mov	r3, fp
 8007bbc:	f7f8 fd2c 	bl	8000618 <__aeabi_dmul>
 8007bc0:	4682      	mov	sl, r0
 8007bc2:	468b      	mov	fp, r1
 8007bc4:	e64d      	b.n	8007862 <_strtod_l+0x72>
 8007bc6:	4b6e      	ldr	r3, [pc, #440]	@ (8007d80 <_strtod_l+0x590>)
 8007bc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bcc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007bd0:	f7f8 fd22 	bl	8000618 <__aeabi_dmul>
 8007bd4:	4682      	mov	sl, r0
 8007bd6:	9808      	ldr	r0, [sp, #32]
 8007bd8:	468b      	mov	fp, r1
 8007bda:	f7f8 fca3 	bl	8000524 <__aeabi_ui2d>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	4650      	mov	r0, sl
 8007be4:	4659      	mov	r1, fp
 8007be6:	f7f8 fb61 	bl	80002ac <__adddf3>
 8007bea:	2d0f      	cmp	r5, #15
 8007bec:	4682      	mov	sl, r0
 8007bee:	468b      	mov	fp, r1
 8007bf0:	ddd5      	ble.n	8007b9e <_strtod_l+0x3ae>
 8007bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bf4:	1b2c      	subs	r4, r5, r4
 8007bf6:	441c      	add	r4, r3
 8007bf8:	2c00      	cmp	r4, #0
 8007bfa:	f340 8096 	ble.w	8007d2a <_strtod_l+0x53a>
 8007bfe:	f014 030f 	ands.w	r3, r4, #15
 8007c02:	d00a      	beq.n	8007c1a <_strtod_l+0x42a>
 8007c04:	495e      	ldr	r1, [pc, #376]	@ (8007d80 <_strtod_l+0x590>)
 8007c06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c0a:	4652      	mov	r2, sl
 8007c0c:	465b      	mov	r3, fp
 8007c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c12:	f7f8 fd01 	bl	8000618 <__aeabi_dmul>
 8007c16:	4682      	mov	sl, r0
 8007c18:	468b      	mov	fp, r1
 8007c1a:	f034 040f 	bics.w	r4, r4, #15
 8007c1e:	d073      	beq.n	8007d08 <_strtod_l+0x518>
 8007c20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007c24:	dd48      	ble.n	8007cb8 <_strtod_l+0x4c8>
 8007c26:	2400      	movs	r4, #0
 8007c28:	46a0      	mov	r8, r4
 8007c2a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007c2c:	46a1      	mov	r9, r4
 8007c2e:	9a05      	ldr	r2, [sp, #20]
 8007c30:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007d88 <_strtod_l+0x598>
 8007c34:	2322      	movs	r3, #34	@ 0x22
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	f04f 0a00 	mov.w	sl, #0
 8007c3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f43f ae0f 	beq.w	8007862 <_strtod_l+0x72>
 8007c44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c46:	9805      	ldr	r0, [sp, #20]
 8007c48:	f7ff f942 	bl	8006ed0 <_Bfree>
 8007c4c:	9805      	ldr	r0, [sp, #20]
 8007c4e:	4649      	mov	r1, r9
 8007c50:	f7ff f93e 	bl	8006ed0 <_Bfree>
 8007c54:	9805      	ldr	r0, [sp, #20]
 8007c56:	4641      	mov	r1, r8
 8007c58:	f7ff f93a 	bl	8006ed0 <_Bfree>
 8007c5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c5e:	9805      	ldr	r0, [sp, #20]
 8007c60:	f7ff f936 	bl	8006ed0 <_Bfree>
 8007c64:	9805      	ldr	r0, [sp, #20]
 8007c66:	4621      	mov	r1, r4
 8007c68:	f7ff f932 	bl	8006ed0 <_Bfree>
 8007c6c:	e5f9      	b.n	8007862 <_strtod_l+0x72>
 8007c6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007c74:	4293      	cmp	r3, r2
 8007c76:	dbbc      	blt.n	8007bf2 <_strtod_l+0x402>
 8007c78:	4c41      	ldr	r4, [pc, #260]	@ (8007d80 <_strtod_l+0x590>)
 8007c7a:	f1c5 050f 	rsb	r5, r5, #15
 8007c7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007c82:	4652      	mov	r2, sl
 8007c84:	465b      	mov	r3, fp
 8007c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c8a:	f7f8 fcc5 	bl	8000618 <__aeabi_dmul>
 8007c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c90:	1b5d      	subs	r5, r3, r5
 8007c92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007c96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c9a:	e78f      	b.n	8007bbc <_strtod_l+0x3cc>
 8007c9c:	3316      	adds	r3, #22
 8007c9e:	dba8      	blt.n	8007bf2 <_strtod_l+0x402>
 8007ca0:	4b37      	ldr	r3, [pc, #220]	@ (8007d80 <_strtod_l+0x590>)
 8007ca2:	eba9 0808 	sub.w	r8, r9, r8
 8007ca6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007caa:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007cae:	4650      	mov	r0, sl
 8007cb0:	4659      	mov	r1, fp
 8007cb2:	f7f8 fddb 	bl	800086c <__aeabi_ddiv>
 8007cb6:	e783      	b.n	8007bc0 <_strtod_l+0x3d0>
 8007cb8:	4b32      	ldr	r3, [pc, #200]	@ (8007d84 <_strtod_l+0x594>)
 8007cba:	9308      	str	r3, [sp, #32]
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	1124      	asrs	r4, r4, #4
 8007cc0:	4650      	mov	r0, sl
 8007cc2:	4659      	mov	r1, fp
 8007cc4:	461e      	mov	r6, r3
 8007cc6:	2c01      	cmp	r4, #1
 8007cc8:	dc21      	bgt.n	8007d0e <_strtod_l+0x51e>
 8007cca:	b10b      	cbz	r3, 8007cd0 <_strtod_l+0x4e0>
 8007ccc:	4682      	mov	sl, r0
 8007cce:	468b      	mov	fp, r1
 8007cd0:	492c      	ldr	r1, [pc, #176]	@ (8007d84 <_strtod_l+0x594>)
 8007cd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007cd6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007cda:	4652      	mov	r2, sl
 8007cdc:	465b      	mov	r3, fp
 8007cde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ce2:	f7f8 fc99 	bl	8000618 <__aeabi_dmul>
 8007ce6:	4b28      	ldr	r3, [pc, #160]	@ (8007d88 <_strtod_l+0x598>)
 8007ce8:	460a      	mov	r2, r1
 8007cea:	400b      	ands	r3, r1
 8007cec:	4927      	ldr	r1, [pc, #156]	@ (8007d8c <_strtod_l+0x59c>)
 8007cee:	428b      	cmp	r3, r1
 8007cf0:	4682      	mov	sl, r0
 8007cf2:	d898      	bhi.n	8007c26 <_strtod_l+0x436>
 8007cf4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007cf8:	428b      	cmp	r3, r1
 8007cfa:	bf86      	itte	hi
 8007cfc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007d90 <_strtod_l+0x5a0>
 8007d00:	f04f 3aff 	movhi.w	sl, #4294967295
 8007d04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007d08:	2300      	movs	r3, #0
 8007d0a:	9308      	str	r3, [sp, #32]
 8007d0c:	e07a      	b.n	8007e04 <_strtod_l+0x614>
 8007d0e:	07e2      	lsls	r2, r4, #31
 8007d10:	d505      	bpl.n	8007d1e <_strtod_l+0x52e>
 8007d12:	9b08      	ldr	r3, [sp, #32]
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	f7f8 fc7e 	bl	8000618 <__aeabi_dmul>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	9a08      	ldr	r2, [sp, #32]
 8007d20:	3208      	adds	r2, #8
 8007d22:	3601      	adds	r6, #1
 8007d24:	1064      	asrs	r4, r4, #1
 8007d26:	9208      	str	r2, [sp, #32]
 8007d28:	e7cd      	b.n	8007cc6 <_strtod_l+0x4d6>
 8007d2a:	d0ed      	beq.n	8007d08 <_strtod_l+0x518>
 8007d2c:	4264      	negs	r4, r4
 8007d2e:	f014 020f 	ands.w	r2, r4, #15
 8007d32:	d00a      	beq.n	8007d4a <_strtod_l+0x55a>
 8007d34:	4b12      	ldr	r3, [pc, #72]	@ (8007d80 <_strtod_l+0x590>)
 8007d36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d3a:	4650      	mov	r0, sl
 8007d3c:	4659      	mov	r1, fp
 8007d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d42:	f7f8 fd93 	bl	800086c <__aeabi_ddiv>
 8007d46:	4682      	mov	sl, r0
 8007d48:	468b      	mov	fp, r1
 8007d4a:	1124      	asrs	r4, r4, #4
 8007d4c:	d0dc      	beq.n	8007d08 <_strtod_l+0x518>
 8007d4e:	2c1f      	cmp	r4, #31
 8007d50:	dd20      	ble.n	8007d94 <_strtod_l+0x5a4>
 8007d52:	2400      	movs	r4, #0
 8007d54:	46a0      	mov	r8, r4
 8007d56:	940a      	str	r4, [sp, #40]	@ 0x28
 8007d58:	46a1      	mov	r9, r4
 8007d5a:	9a05      	ldr	r2, [sp, #20]
 8007d5c:	2322      	movs	r3, #34	@ 0x22
 8007d5e:	f04f 0a00 	mov.w	sl, #0
 8007d62:	f04f 0b00 	mov.w	fp, #0
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	e768      	b.n	8007c3c <_strtod_l+0x44c>
 8007d6a:	bf00      	nop
 8007d6c:	08009ebd 	.word	0x08009ebd
 8007d70:	0800a0d4 	.word	0x0800a0d4
 8007d74:	08009eb5 	.word	0x08009eb5
 8007d78:	08009eea 	.word	0x08009eea
 8007d7c:	0800a298 	.word	0x0800a298
 8007d80:	0800a008 	.word	0x0800a008
 8007d84:	08009fe0 	.word	0x08009fe0
 8007d88:	7ff00000 	.word	0x7ff00000
 8007d8c:	7ca00000 	.word	0x7ca00000
 8007d90:	7fefffff 	.word	0x7fefffff
 8007d94:	f014 0310 	ands.w	r3, r4, #16
 8007d98:	bf18      	it	ne
 8007d9a:	236a      	movne	r3, #106	@ 0x6a
 8007d9c:	4ea9      	ldr	r6, [pc, #676]	@ (8008044 <_strtod_l+0x854>)
 8007d9e:	9308      	str	r3, [sp, #32]
 8007da0:	4650      	mov	r0, sl
 8007da2:	4659      	mov	r1, fp
 8007da4:	2300      	movs	r3, #0
 8007da6:	07e2      	lsls	r2, r4, #31
 8007da8:	d504      	bpl.n	8007db4 <_strtod_l+0x5c4>
 8007daa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007dae:	f7f8 fc33 	bl	8000618 <__aeabi_dmul>
 8007db2:	2301      	movs	r3, #1
 8007db4:	1064      	asrs	r4, r4, #1
 8007db6:	f106 0608 	add.w	r6, r6, #8
 8007dba:	d1f4      	bne.n	8007da6 <_strtod_l+0x5b6>
 8007dbc:	b10b      	cbz	r3, 8007dc2 <_strtod_l+0x5d2>
 8007dbe:	4682      	mov	sl, r0
 8007dc0:	468b      	mov	fp, r1
 8007dc2:	9b08      	ldr	r3, [sp, #32]
 8007dc4:	b1b3      	cbz	r3, 8007df4 <_strtod_l+0x604>
 8007dc6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007dca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	4659      	mov	r1, fp
 8007dd2:	dd0f      	ble.n	8007df4 <_strtod_l+0x604>
 8007dd4:	2b1f      	cmp	r3, #31
 8007dd6:	dd55      	ble.n	8007e84 <_strtod_l+0x694>
 8007dd8:	2b34      	cmp	r3, #52	@ 0x34
 8007dda:	bfde      	ittt	le
 8007ddc:	f04f 33ff 	movle.w	r3, #4294967295
 8007de0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007de4:	4093      	lslle	r3, r2
 8007de6:	f04f 0a00 	mov.w	sl, #0
 8007dea:	bfcc      	ite	gt
 8007dec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007df0:	ea03 0b01 	andle.w	fp, r3, r1
 8007df4:	2200      	movs	r2, #0
 8007df6:	2300      	movs	r3, #0
 8007df8:	4650      	mov	r0, sl
 8007dfa:	4659      	mov	r1, fp
 8007dfc:	f7f8 fe74 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d1a6      	bne.n	8007d52 <_strtod_l+0x562>
 8007e04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007e0a:	9805      	ldr	r0, [sp, #20]
 8007e0c:	462b      	mov	r3, r5
 8007e0e:	463a      	mov	r2, r7
 8007e10:	f7ff f8c6 	bl	8006fa0 <__s2b>
 8007e14:	900a      	str	r0, [sp, #40]	@ 0x28
 8007e16:	2800      	cmp	r0, #0
 8007e18:	f43f af05 	beq.w	8007c26 <_strtod_l+0x436>
 8007e1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e1e:	2a00      	cmp	r2, #0
 8007e20:	eba9 0308 	sub.w	r3, r9, r8
 8007e24:	bfa8      	it	ge
 8007e26:	2300      	movge	r3, #0
 8007e28:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e2a:	2400      	movs	r4, #0
 8007e2c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007e30:	9316      	str	r3, [sp, #88]	@ 0x58
 8007e32:	46a0      	mov	r8, r4
 8007e34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e36:	9805      	ldr	r0, [sp, #20]
 8007e38:	6859      	ldr	r1, [r3, #4]
 8007e3a:	f7ff f809 	bl	8006e50 <_Balloc>
 8007e3e:	4681      	mov	r9, r0
 8007e40:	2800      	cmp	r0, #0
 8007e42:	f43f aef4 	beq.w	8007c2e <_strtod_l+0x43e>
 8007e46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e48:	691a      	ldr	r2, [r3, #16]
 8007e4a:	3202      	adds	r2, #2
 8007e4c:	f103 010c 	add.w	r1, r3, #12
 8007e50:	0092      	lsls	r2, r2, #2
 8007e52:	300c      	adds	r0, #12
 8007e54:	f001 f984 	bl	8009160 <memcpy>
 8007e58:	ec4b ab10 	vmov	d0, sl, fp
 8007e5c:	9805      	ldr	r0, [sp, #20]
 8007e5e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007e60:	a91b      	add	r1, sp, #108	@ 0x6c
 8007e62:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007e66:	f7ff fbd7 	bl	8007618 <__d2b>
 8007e6a:	901a      	str	r0, [sp, #104]	@ 0x68
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	f43f aede 	beq.w	8007c2e <_strtod_l+0x43e>
 8007e72:	9805      	ldr	r0, [sp, #20]
 8007e74:	2101      	movs	r1, #1
 8007e76:	f7ff f929 	bl	80070cc <__i2b>
 8007e7a:	4680      	mov	r8, r0
 8007e7c:	b948      	cbnz	r0, 8007e92 <_strtod_l+0x6a2>
 8007e7e:	f04f 0800 	mov.w	r8, #0
 8007e82:	e6d4      	b.n	8007c2e <_strtod_l+0x43e>
 8007e84:	f04f 32ff 	mov.w	r2, #4294967295
 8007e88:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8c:	ea03 0a0a 	and.w	sl, r3, sl
 8007e90:	e7b0      	b.n	8007df4 <_strtod_l+0x604>
 8007e92:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007e94:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007e96:	2d00      	cmp	r5, #0
 8007e98:	bfab      	itete	ge
 8007e9a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007e9c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007e9e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007ea0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007ea2:	bfac      	ite	ge
 8007ea4:	18ef      	addge	r7, r5, r3
 8007ea6:	1b5e      	sublt	r6, r3, r5
 8007ea8:	9b08      	ldr	r3, [sp, #32]
 8007eaa:	1aed      	subs	r5, r5, r3
 8007eac:	4415      	add	r5, r2
 8007eae:	4b66      	ldr	r3, [pc, #408]	@ (8008048 <_strtod_l+0x858>)
 8007eb0:	3d01      	subs	r5, #1
 8007eb2:	429d      	cmp	r5, r3
 8007eb4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007eb8:	da50      	bge.n	8007f5c <_strtod_l+0x76c>
 8007eba:	1b5b      	subs	r3, r3, r5
 8007ebc:	2b1f      	cmp	r3, #31
 8007ebe:	eba2 0203 	sub.w	r2, r2, r3
 8007ec2:	f04f 0101 	mov.w	r1, #1
 8007ec6:	dc3d      	bgt.n	8007f44 <_strtod_l+0x754>
 8007ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ecc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ece:	2300      	movs	r3, #0
 8007ed0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ed2:	18bd      	adds	r5, r7, r2
 8007ed4:	9b08      	ldr	r3, [sp, #32]
 8007ed6:	42af      	cmp	r7, r5
 8007ed8:	4416      	add	r6, r2
 8007eda:	441e      	add	r6, r3
 8007edc:	463b      	mov	r3, r7
 8007ede:	bfa8      	it	ge
 8007ee0:	462b      	movge	r3, r5
 8007ee2:	42b3      	cmp	r3, r6
 8007ee4:	bfa8      	it	ge
 8007ee6:	4633      	movge	r3, r6
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	bfc2      	ittt	gt
 8007eec:	1aed      	subgt	r5, r5, r3
 8007eee:	1af6      	subgt	r6, r6, r3
 8007ef0:	1aff      	subgt	r7, r7, r3
 8007ef2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	dd16      	ble.n	8007f26 <_strtod_l+0x736>
 8007ef8:	4641      	mov	r1, r8
 8007efa:	9805      	ldr	r0, [sp, #20]
 8007efc:	461a      	mov	r2, r3
 8007efe:	f7ff f9a5 	bl	800724c <__pow5mult>
 8007f02:	4680      	mov	r8, r0
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d0ba      	beq.n	8007e7e <_strtod_l+0x68e>
 8007f08:	4601      	mov	r1, r0
 8007f0a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007f0c:	9805      	ldr	r0, [sp, #20]
 8007f0e:	f7ff f8f3 	bl	80070f8 <__multiply>
 8007f12:	900e      	str	r0, [sp, #56]	@ 0x38
 8007f14:	2800      	cmp	r0, #0
 8007f16:	f43f ae8a 	beq.w	8007c2e <_strtod_l+0x43e>
 8007f1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f1c:	9805      	ldr	r0, [sp, #20]
 8007f1e:	f7fe ffd7 	bl	8006ed0 <_Bfree>
 8007f22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f24:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f26:	2d00      	cmp	r5, #0
 8007f28:	dc1d      	bgt.n	8007f66 <_strtod_l+0x776>
 8007f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	dd23      	ble.n	8007f78 <_strtod_l+0x788>
 8007f30:	4649      	mov	r1, r9
 8007f32:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007f34:	9805      	ldr	r0, [sp, #20]
 8007f36:	f7ff f989 	bl	800724c <__pow5mult>
 8007f3a:	4681      	mov	r9, r0
 8007f3c:	b9e0      	cbnz	r0, 8007f78 <_strtod_l+0x788>
 8007f3e:	f04f 0900 	mov.w	r9, #0
 8007f42:	e674      	b.n	8007c2e <_strtod_l+0x43e>
 8007f44:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007f48:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007f4c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007f50:	35e2      	adds	r5, #226	@ 0xe2
 8007f52:	fa01 f305 	lsl.w	r3, r1, r5
 8007f56:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f58:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007f5a:	e7ba      	b.n	8007ed2 <_strtod_l+0x6e2>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f60:	2301      	movs	r3, #1
 8007f62:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f64:	e7b5      	b.n	8007ed2 <_strtod_l+0x6e2>
 8007f66:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f68:	9805      	ldr	r0, [sp, #20]
 8007f6a:	462a      	mov	r2, r5
 8007f6c:	f7ff f9c8 	bl	8007300 <__lshift>
 8007f70:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d1d9      	bne.n	8007f2a <_strtod_l+0x73a>
 8007f76:	e65a      	b.n	8007c2e <_strtod_l+0x43e>
 8007f78:	2e00      	cmp	r6, #0
 8007f7a:	dd07      	ble.n	8007f8c <_strtod_l+0x79c>
 8007f7c:	4649      	mov	r1, r9
 8007f7e:	9805      	ldr	r0, [sp, #20]
 8007f80:	4632      	mov	r2, r6
 8007f82:	f7ff f9bd 	bl	8007300 <__lshift>
 8007f86:	4681      	mov	r9, r0
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d0d8      	beq.n	8007f3e <_strtod_l+0x74e>
 8007f8c:	2f00      	cmp	r7, #0
 8007f8e:	dd08      	ble.n	8007fa2 <_strtod_l+0x7b2>
 8007f90:	4641      	mov	r1, r8
 8007f92:	9805      	ldr	r0, [sp, #20]
 8007f94:	463a      	mov	r2, r7
 8007f96:	f7ff f9b3 	bl	8007300 <__lshift>
 8007f9a:	4680      	mov	r8, r0
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	f43f ae46 	beq.w	8007c2e <_strtod_l+0x43e>
 8007fa2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007fa4:	9805      	ldr	r0, [sp, #20]
 8007fa6:	464a      	mov	r2, r9
 8007fa8:	f7ff fa32 	bl	8007410 <__mdiff>
 8007fac:	4604      	mov	r4, r0
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	f43f ae3d 	beq.w	8007c2e <_strtod_l+0x43e>
 8007fb4:	68c3      	ldr	r3, [r0, #12]
 8007fb6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007fb8:	2300      	movs	r3, #0
 8007fba:	60c3      	str	r3, [r0, #12]
 8007fbc:	4641      	mov	r1, r8
 8007fbe:	f7ff fa0b 	bl	80073d8 <__mcmp>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	da46      	bge.n	8008054 <_strtod_l+0x864>
 8007fc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fc8:	ea53 030a 	orrs.w	r3, r3, sl
 8007fcc:	d16c      	bne.n	80080a8 <_strtod_l+0x8b8>
 8007fce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d168      	bne.n	80080a8 <_strtod_l+0x8b8>
 8007fd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007fda:	0d1b      	lsrs	r3, r3, #20
 8007fdc:	051b      	lsls	r3, r3, #20
 8007fde:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007fe2:	d961      	bls.n	80080a8 <_strtod_l+0x8b8>
 8007fe4:	6963      	ldr	r3, [r4, #20]
 8007fe6:	b913      	cbnz	r3, 8007fee <_strtod_l+0x7fe>
 8007fe8:	6923      	ldr	r3, [r4, #16]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	dd5c      	ble.n	80080a8 <_strtod_l+0x8b8>
 8007fee:	4621      	mov	r1, r4
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	9805      	ldr	r0, [sp, #20]
 8007ff4:	f7ff f984 	bl	8007300 <__lshift>
 8007ff8:	4641      	mov	r1, r8
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	f7ff f9ec 	bl	80073d8 <__mcmp>
 8008000:	2800      	cmp	r0, #0
 8008002:	dd51      	ble.n	80080a8 <_strtod_l+0x8b8>
 8008004:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008008:	9a08      	ldr	r2, [sp, #32]
 800800a:	0d1b      	lsrs	r3, r3, #20
 800800c:	051b      	lsls	r3, r3, #20
 800800e:	2a00      	cmp	r2, #0
 8008010:	d06b      	beq.n	80080ea <_strtod_l+0x8fa>
 8008012:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008016:	d868      	bhi.n	80080ea <_strtod_l+0x8fa>
 8008018:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800801c:	f67f ae9d 	bls.w	8007d5a <_strtod_l+0x56a>
 8008020:	4b0a      	ldr	r3, [pc, #40]	@ (800804c <_strtod_l+0x85c>)
 8008022:	4650      	mov	r0, sl
 8008024:	4659      	mov	r1, fp
 8008026:	2200      	movs	r2, #0
 8008028:	f7f8 faf6 	bl	8000618 <__aeabi_dmul>
 800802c:	4b08      	ldr	r3, [pc, #32]	@ (8008050 <_strtod_l+0x860>)
 800802e:	400b      	ands	r3, r1
 8008030:	4682      	mov	sl, r0
 8008032:	468b      	mov	fp, r1
 8008034:	2b00      	cmp	r3, #0
 8008036:	f47f ae05 	bne.w	8007c44 <_strtod_l+0x454>
 800803a:	9a05      	ldr	r2, [sp, #20]
 800803c:	2322      	movs	r3, #34	@ 0x22
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	e600      	b.n	8007c44 <_strtod_l+0x454>
 8008042:	bf00      	nop
 8008044:	0800a100 	.word	0x0800a100
 8008048:	fffffc02 	.word	0xfffffc02
 800804c:	39500000 	.word	0x39500000
 8008050:	7ff00000 	.word	0x7ff00000
 8008054:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008058:	d165      	bne.n	8008126 <_strtod_l+0x936>
 800805a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800805c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008060:	b35a      	cbz	r2, 80080ba <_strtod_l+0x8ca>
 8008062:	4a9f      	ldr	r2, [pc, #636]	@ (80082e0 <_strtod_l+0xaf0>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d12b      	bne.n	80080c0 <_strtod_l+0x8d0>
 8008068:	9b08      	ldr	r3, [sp, #32]
 800806a:	4651      	mov	r1, sl
 800806c:	b303      	cbz	r3, 80080b0 <_strtod_l+0x8c0>
 800806e:	4b9d      	ldr	r3, [pc, #628]	@ (80082e4 <_strtod_l+0xaf4>)
 8008070:	465a      	mov	r2, fp
 8008072:	4013      	ands	r3, r2
 8008074:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008078:	f04f 32ff 	mov.w	r2, #4294967295
 800807c:	d81b      	bhi.n	80080b6 <_strtod_l+0x8c6>
 800807e:	0d1b      	lsrs	r3, r3, #20
 8008080:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008084:	fa02 f303 	lsl.w	r3, r2, r3
 8008088:	4299      	cmp	r1, r3
 800808a:	d119      	bne.n	80080c0 <_strtod_l+0x8d0>
 800808c:	4b96      	ldr	r3, [pc, #600]	@ (80082e8 <_strtod_l+0xaf8>)
 800808e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008090:	429a      	cmp	r2, r3
 8008092:	d102      	bne.n	800809a <_strtod_l+0x8aa>
 8008094:	3101      	adds	r1, #1
 8008096:	f43f adca 	beq.w	8007c2e <_strtod_l+0x43e>
 800809a:	4b92      	ldr	r3, [pc, #584]	@ (80082e4 <_strtod_l+0xaf4>)
 800809c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800809e:	401a      	ands	r2, r3
 80080a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80080a4:	f04f 0a00 	mov.w	sl, #0
 80080a8:	9b08      	ldr	r3, [sp, #32]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1b8      	bne.n	8008020 <_strtod_l+0x830>
 80080ae:	e5c9      	b.n	8007c44 <_strtod_l+0x454>
 80080b0:	f04f 33ff 	mov.w	r3, #4294967295
 80080b4:	e7e8      	b.n	8008088 <_strtod_l+0x898>
 80080b6:	4613      	mov	r3, r2
 80080b8:	e7e6      	b.n	8008088 <_strtod_l+0x898>
 80080ba:	ea53 030a 	orrs.w	r3, r3, sl
 80080be:	d0a1      	beq.n	8008004 <_strtod_l+0x814>
 80080c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80080c2:	b1db      	cbz	r3, 80080fc <_strtod_l+0x90c>
 80080c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080c6:	4213      	tst	r3, r2
 80080c8:	d0ee      	beq.n	80080a8 <_strtod_l+0x8b8>
 80080ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080cc:	9a08      	ldr	r2, [sp, #32]
 80080ce:	4650      	mov	r0, sl
 80080d0:	4659      	mov	r1, fp
 80080d2:	b1bb      	cbz	r3, 8008104 <_strtod_l+0x914>
 80080d4:	f7ff fb6e 	bl	80077b4 <sulp>
 80080d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080dc:	ec53 2b10 	vmov	r2, r3, d0
 80080e0:	f7f8 f8e4 	bl	80002ac <__adddf3>
 80080e4:	4682      	mov	sl, r0
 80080e6:	468b      	mov	fp, r1
 80080e8:	e7de      	b.n	80080a8 <_strtod_l+0x8b8>
 80080ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80080ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80080f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80080f6:	f04f 3aff 	mov.w	sl, #4294967295
 80080fa:	e7d5      	b.n	80080a8 <_strtod_l+0x8b8>
 80080fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80080fe:	ea13 0f0a 	tst.w	r3, sl
 8008102:	e7e1      	b.n	80080c8 <_strtod_l+0x8d8>
 8008104:	f7ff fb56 	bl	80077b4 <sulp>
 8008108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800810c:	ec53 2b10 	vmov	r2, r3, d0
 8008110:	f7f8 f8ca 	bl	80002a8 <__aeabi_dsub>
 8008114:	2200      	movs	r2, #0
 8008116:	2300      	movs	r3, #0
 8008118:	4682      	mov	sl, r0
 800811a:	468b      	mov	fp, r1
 800811c:	f7f8 fce4 	bl	8000ae8 <__aeabi_dcmpeq>
 8008120:	2800      	cmp	r0, #0
 8008122:	d0c1      	beq.n	80080a8 <_strtod_l+0x8b8>
 8008124:	e619      	b.n	8007d5a <_strtod_l+0x56a>
 8008126:	4641      	mov	r1, r8
 8008128:	4620      	mov	r0, r4
 800812a:	f7ff facd 	bl	80076c8 <__ratio>
 800812e:	ec57 6b10 	vmov	r6, r7, d0
 8008132:	2200      	movs	r2, #0
 8008134:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008138:	4630      	mov	r0, r6
 800813a:	4639      	mov	r1, r7
 800813c:	f7f8 fce8 	bl	8000b10 <__aeabi_dcmple>
 8008140:	2800      	cmp	r0, #0
 8008142:	d06f      	beq.n	8008224 <_strtod_l+0xa34>
 8008144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008146:	2b00      	cmp	r3, #0
 8008148:	d17a      	bne.n	8008240 <_strtod_l+0xa50>
 800814a:	f1ba 0f00 	cmp.w	sl, #0
 800814e:	d158      	bne.n	8008202 <_strtod_l+0xa12>
 8008150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008152:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008156:	2b00      	cmp	r3, #0
 8008158:	d15a      	bne.n	8008210 <_strtod_l+0xa20>
 800815a:	4b64      	ldr	r3, [pc, #400]	@ (80082ec <_strtod_l+0xafc>)
 800815c:	2200      	movs	r2, #0
 800815e:	4630      	mov	r0, r6
 8008160:	4639      	mov	r1, r7
 8008162:	f7f8 fccb 	bl	8000afc <__aeabi_dcmplt>
 8008166:	2800      	cmp	r0, #0
 8008168:	d159      	bne.n	800821e <_strtod_l+0xa2e>
 800816a:	4630      	mov	r0, r6
 800816c:	4639      	mov	r1, r7
 800816e:	4b60      	ldr	r3, [pc, #384]	@ (80082f0 <_strtod_l+0xb00>)
 8008170:	2200      	movs	r2, #0
 8008172:	f7f8 fa51 	bl	8000618 <__aeabi_dmul>
 8008176:	4606      	mov	r6, r0
 8008178:	460f      	mov	r7, r1
 800817a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800817e:	9606      	str	r6, [sp, #24]
 8008180:	9307      	str	r3, [sp, #28]
 8008182:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008186:	4d57      	ldr	r5, [pc, #348]	@ (80082e4 <_strtod_l+0xaf4>)
 8008188:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800818c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800818e:	401d      	ands	r5, r3
 8008190:	4b58      	ldr	r3, [pc, #352]	@ (80082f4 <_strtod_l+0xb04>)
 8008192:	429d      	cmp	r5, r3
 8008194:	f040 80b2 	bne.w	80082fc <_strtod_l+0xb0c>
 8008198:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800819a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800819e:	ec4b ab10 	vmov	d0, sl, fp
 80081a2:	f7ff f9c9 	bl	8007538 <__ulp>
 80081a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081aa:	ec51 0b10 	vmov	r0, r1, d0
 80081ae:	f7f8 fa33 	bl	8000618 <__aeabi_dmul>
 80081b2:	4652      	mov	r2, sl
 80081b4:	465b      	mov	r3, fp
 80081b6:	f7f8 f879 	bl	80002ac <__adddf3>
 80081ba:	460b      	mov	r3, r1
 80081bc:	4949      	ldr	r1, [pc, #292]	@ (80082e4 <_strtod_l+0xaf4>)
 80081be:	4a4e      	ldr	r2, [pc, #312]	@ (80082f8 <_strtod_l+0xb08>)
 80081c0:	4019      	ands	r1, r3
 80081c2:	4291      	cmp	r1, r2
 80081c4:	4682      	mov	sl, r0
 80081c6:	d942      	bls.n	800824e <_strtod_l+0xa5e>
 80081c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80081ca:	4b47      	ldr	r3, [pc, #284]	@ (80082e8 <_strtod_l+0xaf8>)
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d103      	bne.n	80081d8 <_strtod_l+0x9e8>
 80081d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081d2:	3301      	adds	r3, #1
 80081d4:	f43f ad2b 	beq.w	8007c2e <_strtod_l+0x43e>
 80081d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80082e8 <_strtod_l+0xaf8>
 80081dc:	f04f 3aff 	mov.w	sl, #4294967295
 80081e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081e2:	9805      	ldr	r0, [sp, #20]
 80081e4:	f7fe fe74 	bl	8006ed0 <_Bfree>
 80081e8:	9805      	ldr	r0, [sp, #20]
 80081ea:	4649      	mov	r1, r9
 80081ec:	f7fe fe70 	bl	8006ed0 <_Bfree>
 80081f0:	9805      	ldr	r0, [sp, #20]
 80081f2:	4641      	mov	r1, r8
 80081f4:	f7fe fe6c 	bl	8006ed0 <_Bfree>
 80081f8:	9805      	ldr	r0, [sp, #20]
 80081fa:	4621      	mov	r1, r4
 80081fc:	f7fe fe68 	bl	8006ed0 <_Bfree>
 8008200:	e618      	b.n	8007e34 <_strtod_l+0x644>
 8008202:	f1ba 0f01 	cmp.w	sl, #1
 8008206:	d103      	bne.n	8008210 <_strtod_l+0xa20>
 8008208:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800820a:	2b00      	cmp	r3, #0
 800820c:	f43f ada5 	beq.w	8007d5a <_strtod_l+0x56a>
 8008210:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80082c0 <_strtod_l+0xad0>
 8008214:	4f35      	ldr	r7, [pc, #212]	@ (80082ec <_strtod_l+0xafc>)
 8008216:	ed8d 7b06 	vstr	d7, [sp, #24]
 800821a:	2600      	movs	r6, #0
 800821c:	e7b1      	b.n	8008182 <_strtod_l+0x992>
 800821e:	4f34      	ldr	r7, [pc, #208]	@ (80082f0 <_strtod_l+0xb00>)
 8008220:	2600      	movs	r6, #0
 8008222:	e7aa      	b.n	800817a <_strtod_l+0x98a>
 8008224:	4b32      	ldr	r3, [pc, #200]	@ (80082f0 <_strtod_l+0xb00>)
 8008226:	4630      	mov	r0, r6
 8008228:	4639      	mov	r1, r7
 800822a:	2200      	movs	r2, #0
 800822c:	f7f8 f9f4 	bl	8000618 <__aeabi_dmul>
 8008230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008232:	4606      	mov	r6, r0
 8008234:	460f      	mov	r7, r1
 8008236:	2b00      	cmp	r3, #0
 8008238:	d09f      	beq.n	800817a <_strtod_l+0x98a>
 800823a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800823e:	e7a0      	b.n	8008182 <_strtod_l+0x992>
 8008240:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80082c8 <_strtod_l+0xad8>
 8008244:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008248:	ec57 6b17 	vmov	r6, r7, d7
 800824c:	e799      	b.n	8008182 <_strtod_l+0x992>
 800824e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008252:	9b08      	ldr	r3, [sp, #32]
 8008254:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1c1      	bne.n	80081e0 <_strtod_l+0x9f0>
 800825c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008260:	0d1b      	lsrs	r3, r3, #20
 8008262:	051b      	lsls	r3, r3, #20
 8008264:	429d      	cmp	r5, r3
 8008266:	d1bb      	bne.n	80081e0 <_strtod_l+0x9f0>
 8008268:	4630      	mov	r0, r6
 800826a:	4639      	mov	r1, r7
 800826c:	f7f8 fd1c 	bl	8000ca8 <__aeabi_d2lz>
 8008270:	f7f8 f9a4 	bl	80005bc <__aeabi_l2d>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4630      	mov	r0, r6
 800827a:	4639      	mov	r1, r7
 800827c:	f7f8 f814 	bl	80002a8 <__aeabi_dsub>
 8008280:	460b      	mov	r3, r1
 8008282:	4602      	mov	r2, r0
 8008284:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008288:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800828c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800828e:	ea46 060a 	orr.w	r6, r6, sl
 8008292:	431e      	orrs	r6, r3
 8008294:	d06f      	beq.n	8008376 <_strtod_l+0xb86>
 8008296:	a30e      	add	r3, pc, #56	@ (adr r3, 80082d0 <_strtod_l+0xae0>)
 8008298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829c:	f7f8 fc2e 	bl	8000afc <__aeabi_dcmplt>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	f47f accf 	bne.w	8007c44 <_strtod_l+0x454>
 80082a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80082d8 <_strtod_l+0xae8>)
 80082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082b0:	f7f8 fc42 	bl	8000b38 <__aeabi_dcmpgt>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d093      	beq.n	80081e0 <_strtod_l+0x9f0>
 80082b8:	e4c4      	b.n	8007c44 <_strtod_l+0x454>
 80082ba:	bf00      	nop
 80082bc:	f3af 8000 	nop.w
 80082c0:	00000000 	.word	0x00000000
 80082c4:	bff00000 	.word	0xbff00000
 80082c8:	00000000 	.word	0x00000000
 80082cc:	3ff00000 	.word	0x3ff00000
 80082d0:	94a03595 	.word	0x94a03595
 80082d4:	3fdfffff 	.word	0x3fdfffff
 80082d8:	35afe535 	.word	0x35afe535
 80082dc:	3fe00000 	.word	0x3fe00000
 80082e0:	000fffff 	.word	0x000fffff
 80082e4:	7ff00000 	.word	0x7ff00000
 80082e8:	7fefffff 	.word	0x7fefffff
 80082ec:	3ff00000 	.word	0x3ff00000
 80082f0:	3fe00000 	.word	0x3fe00000
 80082f4:	7fe00000 	.word	0x7fe00000
 80082f8:	7c9fffff 	.word	0x7c9fffff
 80082fc:	9b08      	ldr	r3, [sp, #32]
 80082fe:	b323      	cbz	r3, 800834a <_strtod_l+0xb5a>
 8008300:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008304:	d821      	bhi.n	800834a <_strtod_l+0xb5a>
 8008306:	a328      	add	r3, pc, #160	@ (adr r3, 80083a8 <_strtod_l+0xbb8>)
 8008308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830c:	4630      	mov	r0, r6
 800830e:	4639      	mov	r1, r7
 8008310:	f7f8 fbfe 	bl	8000b10 <__aeabi_dcmple>
 8008314:	b1a0      	cbz	r0, 8008340 <_strtod_l+0xb50>
 8008316:	4639      	mov	r1, r7
 8008318:	4630      	mov	r0, r6
 800831a:	f7f8 fc55 	bl	8000bc8 <__aeabi_d2uiz>
 800831e:	2801      	cmp	r0, #1
 8008320:	bf38      	it	cc
 8008322:	2001      	movcc	r0, #1
 8008324:	f7f8 f8fe 	bl	8000524 <__aeabi_ui2d>
 8008328:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800832a:	4606      	mov	r6, r0
 800832c:	460f      	mov	r7, r1
 800832e:	b9fb      	cbnz	r3, 8008370 <_strtod_l+0xb80>
 8008330:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008334:	9014      	str	r0, [sp, #80]	@ 0x50
 8008336:	9315      	str	r3, [sp, #84]	@ 0x54
 8008338:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800833c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008340:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008342:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008346:	1b5b      	subs	r3, r3, r5
 8008348:	9311      	str	r3, [sp, #68]	@ 0x44
 800834a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800834e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008352:	f7ff f8f1 	bl	8007538 <__ulp>
 8008356:	4650      	mov	r0, sl
 8008358:	ec53 2b10 	vmov	r2, r3, d0
 800835c:	4659      	mov	r1, fp
 800835e:	f7f8 f95b 	bl	8000618 <__aeabi_dmul>
 8008362:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008366:	f7f7 ffa1 	bl	80002ac <__adddf3>
 800836a:	4682      	mov	sl, r0
 800836c:	468b      	mov	fp, r1
 800836e:	e770      	b.n	8008252 <_strtod_l+0xa62>
 8008370:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008374:	e7e0      	b.n	8008338 <_strtod_l+0xb48>
 8008376:	a30e      	add	r3, pc, #56	@ (adr r3, 80083b0 <_strtod_l+0xbc0>)
 8008378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837c:	f7f8 fbbe 	bl	8000afc <__aeabi_dcmplt>
 8008380:	e798      	b.n	80082b4 <_strtod_l+0xac4>
 8008382:	2300      	movs	r3, #0
 8008384:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008386:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008388:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800838a:	6013      	str	r3, [r2, #0]
 800838c:	f7ff ba6d 	b.w	800786a <_strtod_l+0x7a>
 8008390:	2a65      	cmp	r2, #101	@ 0x65
 8008392:	f43f ab66 	beq.w	8007a62 <_strtod_l+0x272>
 8008396:	2a45      	cmp	r2, #69	@ 0x45
 8008398:	f43f ab63 	beq.w	8007a62 <_strtod_l+0x272>
 800839c:	2301      	movs	r3, #1
 800839e:	f7ff bb9e 	b.w	8007ade <_strtod_l+0x2ee>
 80083a2:	bf00      	nop
 80083a4:	f3af 8000 	nop.w
 80083a8:	ffc00000 	.word	0xffc00000
 80083ac:	41dfffff 	.word	0x41dfffff
 80083b0:	94a03595 	.word	0x94a03595
 80083b4:	3fcfffff 	.word	0x3fcfffff

080083b8 <_strtod_r>:
 80083b8:	4b01      	ldr	r3, [pc, #4]	@ (80083c0 <_strtod_r+0x8>)
 80083ba:	f7ff ba19 	b.w	80077f0 <_strtod_l>
 80083be:	bf00      	nop
 80083c0:	20000068 	.word	0x20000068

080083c4 <_strtol_l.constprop.0>:
 80083c4:	2b24      	cmp	r3, #36	@ 0x24
 80083c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083ca:	4686      	mov	lr, r0
 80083cc:	4690      	mov	r8, r2
 80083ce:	d801      	bhi.n	80083d4 <_strtol_l.constprop.0+0x10>
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d106      	bne.n	80083e2 <_strtol_l.constprop.0+0x1e>
 80083d4:	f7fd fdbc 	bl	8005f50 <__errno>
 80083d8:	2316      	movs	r3, #22
 80083da:	6003      	str	r3, [r0, #0]
 80083dc:	2000      	movs	r0, #0
 80083de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e2:	4834      	ldr	r0, [pc, #208]	@ (80084b4 <_strtol_l.constprop.0+0xf0>)
 80083e4:	460d      	mov	r5, r1
 80083e6:	462a      	mov	r2, r5
 80083e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083ec:	5d06      	ldrb	r6, [r0, r4]
 80083ee:	f016 0608 	ands.w	r6, r6, #8
 80083f2:	d1f8      	bne.n	80083e6 <_strtol_l.constprop.0+0x22>
 80083f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80083f6:	d12d      	bne.n	8008454 <_strtol_l.constprop.0+0x90>
 80083f8:	782c      	ldrb	r4, [r5, #0]
 80083fa:	2601      	movs	r6, #1
 80083fc:	1c95      	adds	r5, r2, #2
 80083fe:	f033 0210 	bics.w	r2, r3, #16
 8008402:	d109      	bne.n	8008418 <_strtol_l.constprop.0+0x54>
 8008404:	2c30      	cmp	r4, #48	@ 0x30
 8008406:	d12a      	bne.n	800845e <_strtol_l.constprop.0+0x9a>
 8008408:	782a      	ldrb	r2, [r5, #0]
 800840a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800840e:	2a58      	cmp	r2, #88	@ 0x58
 8008410:	d125      	bne.n	800845e <_strtol_l.constprop.0+0x9a>
 8008412:	786c      	ldrb	r4, [r5, #1]
 8008414:	2310      	movs	r3, #16
 8008416:	3502      	adds	r5, #2
 8008418:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800841c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008420:	2200      	movs	r2, #0
 8008422:	fbbc f9f3 	udiv	r9, ip, r3
 8008426:	4610      	mov	r0, r2
 8008428:	fb03 ca19 	mls	sl, r3, r9, ip
 800842c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008430:	2f09      	cmp	r7, #9
 8008432:	d81b      	bhi.n	800846c <_strtol_l.constprop.0+0xa8>
 8008434:	463c      	mov	r4, r7
 8008436:	42a3      	cmp	r3, r4
 8008438:	dd27      	ble.n	800848a <_strtol_l.constprop.0+0xc6>
 800843a:	1c57      	adds	r7, r2, #1
 800843c:	d007      	beq.n	800844e <_strtol_l.constprop.0+0x8a>
 800843e:	4581      	cmp	r9, r0
 8008440:	d320      	bcc.n	8008484 <_strtol_l.constprop.0+0xc0>
 8008442:	d101      	bne.n	8008448 <_strtol_l.constprop.0+0x84>
 8008444:	45a2      	cmp	sl, r4
 8008446:	db1d      	blt.n	8008484 <_strtol_l.constprop.0+0xc0>
 8008448:	fb00 4003 	mla	r0, r0, r3, r4
 800844c:	2201      	movs	r2, #1
 800844e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008452:	e7eb      	b.n	800842c <_strtol_l.constprop.0+0x68>
 8008454:	2c2b      	cmp	r4, #43	@ 0x2b
 8008456:	bf04      	itt	eq
 8008458:	782c      	ldrbeq	r4, [r5, #0]
 800845a:	1c95      	addeq	r5, r2, #2
 800845c:	e7cf      	b.n	80083fe <_strtol_l.constprop.0+0x3a>
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1da      	bne.n	8008418 <_strtol_l.constprop.0+0x54>
 8008462:	2c30      	cmp	r4, #48	@ 0x30
 8008464:	bf0c      	ite	eq
 8008466:	2308      	moveq	r3, #8
 8008468:	230a      	movne	r3, #10
 800846a:	e7d5      	b.n	8008418 <_strtol_l.constprop.0+0x54>
 800846c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008470:	2f19      	cmp	r7, #25
 8008472:	d801      	bhi.n	8008478 <_strtol_l.constprop.0+0xb4>
 8008474:	3c37      	subs	r4, #55	@ 0x37
 8008476:	e7de      	b.n	8008436 <_strtol_l.constprop.0+0x72>
 8008478:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800847c:	2f19      	cmp	r7, #25
 800847e:	d804      	bhi.n	800848a <_strtol_l.constprop.0+0xc6>
 8008480:	3c57      	subs	r4, #87	@ 0x57
 8008482:	e7d8      	b.n	8008436 <_strtol_l.constprop.0+0x72>
 8008484:	f04f 32ff 	mov.w	r2, #4294967295
 8008488:	e7e1      	b.n	800844e <_strtol_l.constprop.0+0x8a>
 800848a:	1c53      	adds	r3, r2, #1
 800848c:	d108      	bne.n	80084a0 <_strtol_l.constprop.0+0xdc>
 800848e:	2322      	movs	r3, #34	@ 0x22
 8008490:	f8ce 3000 	str.w	r3, [lr]
 8008494:	4660      	mov	r0, ip
 8008496:	f1b8 0f00 	cmp.w	r8, #0
 800849a:	d0a0      	beq.n	80083de <_strtol_l.constprop.0+0x1a>
 800849c:	1e69      	subs	r1, r5, #1
 800849e:	e006      	b.n	80084ae <_strtol_l.constprop.0+0xea>
 80084a0:	b106      	cbz	r6, 80084a4 <_strtol_l.constprop.0+0xe0>
 80084a2:	4240      	negs	r0, r0
 80084a4:	f1b8 0f00 	cmp.w	r8, #0
 80084a8:	d099      	beq.n	80083de <_strtol_l.constprop.0+0x1a>
 80084aa:	2a00      	cmp	r2, #0
 80084ac:	d1f6      	bne.n	800849c <_strtol_l.constprop.0+0xd8>
 80084ae:	f8c8 1000 	str.w	r1, [r8]
 80084b2:	e794      	b.n	80083de <_strtol_l.constprop.0+0x1a>
 80084b4:	0800a129 	.word	0x0800a129

080084b8 <_strtol_r>:
 80084b8:	f7ff bf84 	b.w	80083c4 <_strtol_l.constprop.0>

080084bc <__ssputs_r>:
 80084bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c0:	688e      	ldr	r6, [r1, #8]
 80084c2:	461f      	mov	r7, r3
 80084c4:	42be      	cmp	r6, r7
 80084c6:	680b      	ldr	r3, [r1, #0]
 80084c8:	4682      	mov	sl, r0
 80084ca:	460c      	mov	r4, r1
 80084cc:	4690      	mov	r8, r2
 80084ce:	d82d      	bhi.n	800852c <__ssputs_r+0x70>
 80084d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084d8:	d026      	beq.n	8008528 <__ssputs_r+0x6c>
 80084da:	6965      	ldr	r5, [r4, #20]
 80084dc:	6909      	ldr	r1, [r1, #16]
 80084de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084e2:	eba3 0901 	sub.w	r9, r3, r1
 80084e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084ea:	1c7b      	adds	r3, r7, #1
 80084ec:	444b      	add	r3, r9
 80084ee:	106d      	asrs	r5, r5, #1
 80084f0:	429d      	cmp	r5, r3
 80084f2:	bf38      	it	cc
 80084f4:	461d      	movcc	r5, r3
 80084f6:	0553      	lsls	r3, r2, #21
 80084f8:	d527      	bpl.n	800854a <__ssputs_r+0x8e>
 80084fa:	4629      	mov	r1, r5
 80084fc:	f7fe fc1c 	bl	8006d38 <_malloc_r>
 8008500:	4606      	mov	r6, r0
 8008502:	b360      	cbz	r0, 800855e <__ssputs_r+0xa2>
 8008504:	6921      	ldr	r1, [r4, #16]
 8008506:	464a      	mov	r2, r9
 8008508:	f000 fe2a 	bl	8009160 <memcpy>
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008516:	81a3      	strh	r3, [r4, #12]
 8008518:	6126      	str	r6, [r4, #16]
 800851a:	6165      	str	r5, [r4, #20]
 800851c:	444e      	add	r6, r9
 800851e:	eba5 0509 	sub.w	r5, r5, r9
 8008522:	6026      	str	r6, [r4, #0]
 8008524:	60a5      	str	r5, [r4, #8]
 8008526:	463e      	mov	r6, r7
 8008528:	42be      	cmp	r6, r7
 800852a:	d900      	bls.n	800852e <__ssputs_r+0x72>
 800852c:	463e      	mov	r6, r7
 800852e:	6820      	ldr	r0, [r4, #0]
 8008530:	4632      	mov	r2, r6
 8008532:	4641      	mov	r1, r8
 8008534:	f000 fdb5 	bl	80090a2 <memmove>
 8008538:	68a3      	ldr	r3, [r4, #8]
 800853a:	1b9b      	subs	r3, r3, r6
 800853c:	60a3      	str	r3, [r4, #8]
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	4433      	add	r3, r6
 8008542:	6023      	str	r3, [r4, #0]
 8008544:	2000      	movs	r0, #0
 8008546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854a:	462a      	mov	r2, r5
 800854c:	f001 f99d 	bl	800988a <_realloc_r>
 8008550:	4606      	mov	r6, r0
 8008552:	2800      	cmp	r0, #0
 8008554:	d1e0      	bne.n	8008518 <__ssputs_r+0x5c>
 8008556:	6921      	ldr	r1, [r4, #16]
 8008558:	4650      	mov	r0, sl
 800855a:	f7fe fb79 	bl	8006c50 <_free_r>
 800855e:	230c      	movs	r3, #12
 8008560:	f8ca 3000 	str.w	r3, [sl]
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800856a:	81a3      	strh	r3, [r4, #12]
 800856c:	f04f 30ff 	mov.w	r0, #4294967295
 8008570:	e7e9      	b.n	8008546 <__ssputs_r+0x8a>
	...

08008574 <_svfiprintf_r>:
 8008574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008578:	4698      	mov	r8, r3
 800857a:	898b      	ldrh	r3, [r1, #12]
 800857c:	061b      	lsls	r3, r3, #24
 800857e:	b09d      	sub	sp, #116	@ 0x74
 8008580:	4607      	mov	r7, r0
 8008582:	460d      	mov	r5, r1
 8008584:	4614      	mov	r4, r2
 8008586:	d510      	bpl.n	80085aa <_svfiprintf_r+0x36>
 8008588:	690b      	ldr	r3, [r1, #16]
 800858a:	b973      	cbnz	r3, 80085aa <_svfiprintf_r+0x36>
 800858c:	2140      	movs	r1, #64	@ 0x40
 800858e:	f7fe fbd3 	bl	8006d38 <_malloc_r>
 8008592:	6028      	str	r0, [r5, #0]
 8008594:	6128      	str	r0, [r5, #16]
 8008596:	b930      	cbnz	r0, 80085a6 <_svfiprintf_r+0x32>
 8008598:	230c      	movs	r3, #12
 800859a:	603b      	str	r3, [r7, #0]
 800859c:	f04f 30ff 	mov.w	r0, #4294967295
 80085a0:	b01d      	add	sp, #116	@ 0x74
 80085a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a6:	2340      	movs	r3, #64	@ 0x40
 80085a8:	616b      	str	r3, [r5, #20]
 80085aa:	2300      	movs	r3, #0
 80085ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ae:	2320      	movs	r3, #32
 80085b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80085b8:	2330      	movs	r3, #48	@ 0x30
 80085ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008758 <_svfiprintf_r+0x1e4>
 80085be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085c2:	f04f 0901 	mov.w	r9, #1
 80085c6:	4623      	mov	r3, r4
 80085c8:	469a      	mov	sl, r3
 80085ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ce:	b10a      	cbz	r2, 80085d4 <_svfiprintf_r+0x60>
 80085d0:	2a25      	cmp	r2, #37	@ 0x25
 80085d2:	d1f9      	bne.n	80085c8 <_svfiprintf_r+0x54>
 80085d4:	ebba 0b04 	subs.w	fp, sl, r4
 80085d8:	d00b      	beq.n	80085f2 <_svfiprintf_r+0x7e>
 80085da:	465b      	mov	r3, fp
 80085dc:	4622      	mov	r2, r4
 80085de:	4629      	mov	r1, r5
 80085e0:	4638      	mov	r0, r7
 80085e2:	f7ff ff6b 	bl	80084bc <__ssputs_r>
 80085e6:	3001      	adds	r0, #1
 80085e8:	f000 80a7 	beq.w	800873a <_svfiprintf_r+0x1c6>
 80085ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085ee:	445a      	add	r2, fp
 80085f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80085f2:	f89a 3000 	ldrb.w	r3, [sl]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 809f 	beq.w	800873a <_svfiprintf_r+0x1c6>
 80085fc:	2300      	movs	r3, #0
 80085fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008606:	f10a 0a01 	add.w	sl, sl, #1
 800860a:	9304      	str	r3, [sp, #16]
 800860c:	9307      	str	r3, [sp, #28]
 800860e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008612:	931a      	str	r3, [sp, #104]	@ 0x68
 8008614:	4654      	mov	r4, sl
 8008616:	2205      	movs	r2, #5
 8008618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800861c:	484e      	ldr	r0, [pc, #312]	@ (8008758 <_svfiprintf_r+0x1e4>)
 800861e:	f7f7 fde7 	bl	80001f0 <memchr>
 8008622:	9a04      	ldr	r2, [sp, #16]
 8008624:	b9d8      	cbnz	r0, 800865e <_svfiprintf_r+0xea>
 8008626:	06d0      	lsls	r0, r2, #27
 8008628:	bf44      	itt	mi
 800862a:	2320      	movmi	r3, #32
 800862c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008630:	0711      	lsls	r1, r2, #28
 8008632:	bf44      	itt	mi
 8008634:	232b      	movmi	r3, #43	@ 0x2b
 8008636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800863a:	f89a 3000 	ldrb.w	r3, [sl]
 800863e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008640:	d015      	beq.n	800866e <_svfiprintf_r+0xfa>
 8008642:	9a07      	ldr	r2, [sp, #28]
 8008644:	4654      	mov	r4, sl
 8008646:	2000      	movs	r0, #0
 8008648:	f04f 0c0a 	mov.w	ip, #10
 800864c:	4621      	mov	r1, r4
 800864e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008652:	3b30      	subs	r3, #48	@ 0x30
 8008654:	2b09      	cmp	r3, #9
 8008656:	d94b      	bls.n	80086f0 <_svfiprintf_r+0x17c>
 8008658:	b1b0      	cbz	r0, 8008688 <_svfiprintf_r+0x114>
 800865a:	9207      	str	r2, [sp, #28]
 800865c:	e014      	b.n	8008688 <_svfiprintf_r+0x114>
 800865e:	eba0 0308 	sub.w	r3, r0, r8
 8008662:	fa09 f303 	lsl.w	r3, r9, r3
 8008666:	4313      	orrs	r3, r2
 8008668:	9304      	str	r3, [sp, #16]
 800866a:	46a2      	mov	sl, r4
 800866c:	e7d2      	b.n	8008614 <_svfiprintf_r+0xa0>
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	1d19      	adds	r1, r3, #4
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	9103      	str	r1, [sp, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	bfbb      	ittet	lt
 800867a:	425b      	neglt	r3, r3
 800867c:	f042 0202 	orrlt.w	r2, r2, #2
 8008680:	9307      	strge	r3, [sp, #28]
 8008682:	9307      	strlt	r3, [sp, #28]
 8008684:	bfb8      	it	lt
 8008686:	9204      	strlt	r2, [sp, #16]
 8008688:	7823      	ldrb	r3, [r4, #0]
 800868a:	2b2e      	cmp	r3, #46	@ 0x2e
 800868c:	d10a      	bne.n	80086a4 <_svfiprintf_r+0x130>
 800868e:	7863      	ldrb	r3, [r4, #1]
 8008690:	2b2a      	cmp	r3, #42	@ 0x2a
 8008692:	d132      	bne.n	80086fa <_svfiprintf_r+0x186>
 8008694:	9b03      	ldr	r3, [sp, #12]
 8008696:	1d1a      	adds	r2, r3, #4
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	9203      	str	r2, [sp, #12]
 800869c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086a0:	3402      	adds	r4, #2
 80086a2:	9305      	str	r3, [sp, #20]
 80086a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008768 <_svfiprintf_r+0x1f4>
 80086a8:	7821      	ldrb	r1, [r4, #0]
 80086aa:	2203      	movs	r2, #3
 80086ac:	4650      	mov	r0, sl
 80086ae:	f7f7 fd9f 	bl	80001f0 <memchr>
 80086b2:	b138      	cbz	r0, 80086c4 <_svfiprintf_r+0x150>
 80086b4:	9b04      	ldr	r3, [sp, #16]
 80086b6:	eba0 000a 	sub.w	r0, r0, sl
 80086ba:	2240      	movs	r2, #64	@ 0x40
 80086bc:	4082      	lsls	r2, r0
 80086be:	4313      	orrs	r3, r2
 80086c0:	3401      	adds	r4, #1
 80086c2:	9304      	str	r3, [sp, #16]
 80086c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c8:	4824      	ldr	r0, [pc, #144]	@ (800875c <_svfiprintf_r+0x1e8>)
 80086ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086ce:	2206      	movs	r2, #6
 80086d0:	f7f7 fd8e 	bl	80001f0 <memchr>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d036      	beq.n	8008746 <_svfiprintf_r+0x1d2>
 80086d8:	4b21      	ldr	r3, [pc, #132]	@ (8008760 <_svfiprintf_r+0x1ec>)
 80086da:	bb1b      	cbnz	r3, 8008724 <_svfiprintf_r+0x1b0>
 80086dc:	9b03      	ldr	r3, [sp, #12]
 80086de:	3307      	adds	r3, #7
 80086e0:	f023 0307 	bic.w	r3, r3, #7
 80086e4:	3308      	adds	r3, #8
 80086e6:	9303      	str	r3, [sp, #12]
 80086e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ea:	4433      	add	r3, r6
 80086ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ee:	e76a      	b.n	80085c6 <_svfiprintf_r+0x52>
 80086f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80086f4:	460c      	mov	r4, r1
 80086f6:	2001      	movs	r0, #1
 80086f8:	e7a8      	b.n	800864c <_svfiprintf_r+0xd8>
 80086fa:	2300      	movs	r3, #0
 80086fc:	3401      	adds	r4, #1
 80086fe:	9305      	str	r3, [sp, #20]
 8008700:	4619      	mov	r1, r3
 8008702:	f04f 0c0a 	mov.w	ip, #10
 8008706:	4620      	mov	r0, r4
 8008708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800870c:	3a30      	subs	r2, #48	@ 0x30
 800870e:	2a09      	cmp	r2, #9
 8008710:	d903      	bls.n	800871a <_svfiprintf_r+0x1a6>
 8008712:	2b00      	cmp	r3, #0
 8008714:	d0c6      	beq.n	80086a4 <_svfiprintf_r+0x130>
 8008716:	9105      	str	r1, [sp, #20]
 8008718:	e7c4      	b.n	80086a4 <_svfiprintf_r+0x130>
 800871a:	fb0c 2101 	mla	r1, ip, r1, r2
 800871e:	4604      	mov	r4, r0
 8008720:	2301      	movs	r3, #1
 8008722:	e7f0      	b.n	8008706 <_svfiprintf_r+0x192>
 8008724:	ab03      	add	r3, sp, #12
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	462a      	mov	r2, r5
 800872a:	4b0e      	ldr	r3, [pc, #56]	@ (8008764 <_svfiprintf_r+0x1f0>)
 800872c:	a904      	add	r1, sp, #16
 800872e:	4638      	mov	r0, r7
 8008730:	f7fc fbac 	bl	8004e8c <_printf_float>
 8008734:	1c42      	adds	r2, r0, #1
 8008736:	4606      	mov	r6, r0
 8008738:	d1d6      	bne.n	80086e8 <_svfiprintf_r+0x174>
 800873a:	89ab      	ldrh	r3, [r5, #12]
 800873c:	065b      	lsls	r3, r3, #25
 800873e:	f53f af2d 	bmi.w	800859c <_svfiprintf_r+0x28>
 8008742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008744:	e72c      	b.n	80085a0 <_svfiprintf_r+0x2c>
 8008746:	ab03      	add	r3, sp, #12
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	462a      	mov	r2, r5
 800874c:	4b05      	ldr	r3, [pc, #20]	@ (8008764 <_svfiprintf_r+0x1f0>)
 800874e:	a904      	add	r1, sp, #16
 8008750:	4638      	mov	r0, r7
 8008752:	f7fc fe33 	bl	80053bc <_printf_i>
 8008756:	e7ed      	b.n	8008734 <_svfiprintf_r+0x1c0>
 8008758:	0800a229 	.word	0x0800a229
 800875c:	0800a233 	.word	0x0800a233
 8008760:	08004e8d 	.word	0x08004e8d
 8008764:	080084bd 	.word	0x080084bd
 8008768:	0800a22f 	.word	0x0800a22f

0800876c <_sungetc_r>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	1c4b      	adds	r3, r1, #1
 8008770:	4614      	mov	r4, r2
 8008772:	d103      	bne.n	800877c <_sungetc_r+0x10>
 8008774:	f04f 35ff 	mov.w	r5, #4294967295
 8008778:	4628      	mov	r0, r5
 800877a:	bd38      	pop	{r3, r4, r5, pc}
 800877c:	8993      	ldrh	r3, [r2, #12]
 800877e:	f023 0320 	bic.w	r3, r3, #32
 8008782:	8193      	strh	r3, [r2, #12]
 8008784:	6853      	ldr	r3, [r2, #4]
 8008786:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008788:	b2cd      	uxtb	r5, r1
 800878a:	b18a      	cbz	r2, 80087b0 <_sungetc_r+0x44>
 800878c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800878e:	429a      	cmp	r2, r3
 8008790:	dd08      	ble.n	80087a4 <_sungetc_r+0x38>
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	1e5a      	subs	r2, r3, #1
 8008796:	6022      	str	r2, [r4, #0]
 8008798:	f803 5c01 	strb.w	r5, [r3, #-1]
 800879c:	6863      	ldr	r3, [r4, #4]
 800879e:	3301      	adds	r3, #1
 80087a0:	6063      	str	r3, [r4, #4]
 80087a2:	e7e9      	b.n	8008778 <_sungetc_r+0xc>
 80087a4:	4621      	mov	r1, r4
 80087a6:	f000 fc42 	bl	800902e <__submore>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d0f1      	beq.n	8008792 <_sungetc_r+0x26>
 80087ae:	e7e1      	b.n	8008774 <_sungetc_r+0x8>
 80087b0:	6921      	ldr	r1, [r4, #16]
 80087b2:	6822      	ldr	r2, [r4, #0]
 80087b4:	b141      	cbz	r1, 80087c8 <_sungetc_r+0x5c>
 80087b6:	4291      	cmp	r1, r2
 80087b8:	d206      	bcs.n	80087c8 <_sungetc_r+0x5c>
 80087ba:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80087be:	42a9      	cmp	r1, r5
 80087c0:	d102      	bne.n	80087c8 <_sungetc_r+0x5c>
 80087c2:	3a01      	subs	r2, #1
 80087c4:	6022      	str	r2, [r4, #0]
 80087c6:	e7ea      	b.n	800879e <_sungetc_r+0x32>
 80087c8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80087cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80087d2:	2303      	movs	r3, #3
 80087d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80087d6:	4623      	mov	r3, r4
 80087d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80087dc:	6023      	str	r3, [r4, #0]
 80087de:	2301      	movs	r3, #1
 80087e0:	e7de      	b.n	80087a0 <_sungetc_r+0x34>

080087e2 <__ssrefill_r>:
 80087e2:	b510      	push	{r4, lr}
 80087e4:	460c      	mov	r4, r1
 80087e6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80087e8:	b169      	cbz	r1, 8008806 <__ssrefill_r+0x24>
 80087ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087ee:	4299      	cmp	r1, r3
 80087f0:	d001      	beq.n	80087f6 <__ssrefill_r+0x14>
 80087f2:	f7fe fa2d 	bl	8006c50 <_free_r>
 80087f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087f8:	6063      	str	r3, [r4, #4]
 80087fa:	2000      	movs	r0, #0
 80087fc:	6360      	str	r0, [r4, #52]	@ 0x34
 80087fe:	b113      	cbz	r3, 8008806 <__ssrefill_r+0x24>
 8008800:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008802:	6023      	str	r3, [r4, #0]
 8008804:	bd10      	pop	{r4, pc}
 8008806:	6923      	ldr	r3, [r4, #16]
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	2300      	movs	r3, #0
 800880c:	6063      	str	r3, [r4, #4]
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	f043 0320 	orr.w	r3, r3, #32
 8008814:	81a3      	strh	r3, [r4, #12]
 8008816:	f04f 30ff 	mov.w	r0, #4294967295
 800881a:	e7f3      	b.n	8008804 <__ssrefill_r+0x22>

0800881c <__ssvfiscanf_r>:
 800881c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008820:	460c      	mov	r4, r1
 8008822:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008826:	2100      	movs	r1, #0
 8008828:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800882c:	49a5      	ldr	r1, [pc, #660]	@ (8008ac4 <__ssvfiscanf_r+0x2a8>)
 800882e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008830:	f10d 0804 	add.w	r8, sp, #4
 8008834:	49a4      	ldr	r1, [pc, #656]	@ (8008ac8 <__ssvfiscanf_r+0x2ac>)
 8008836:	4fa5      	ldr	r7, [pc, #660]	@ (8008acc <__ssvfiscanf_r+0x2b0>)
 8008838:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800883c:	4606      	mov	r6, r0
 800883e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	7813      	ldrb	r3, [r2, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 8158 	beq.w	8008afa <__ssvfiscanf_r+0x2de>
 800884a:	5cf9      	ldrb	r1, [r7, r3]
 800884c:	f011 0108 	ands.w	r1, r1, #8
 8008850:	f102 0501 	add.w	r5, r2, #1
 8008854:	d019      	beq.n	800888a <__ssvfiscanf_r+0x6e>
 8008856:	6863      	ldr	r3, [r4, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	dd0f      	ble.n	800887c <__ssvfiscanf_r+0x60>
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	781a      	ldrb	r2, [r3, #0]
 8008860:	5cba      	ldrb	r2, [r7, r2]
 8008862:	0712      	lsls	r2, r2, #28
 8008864:	d401      	bmi.n	800886a <__ssvfiscanf_r+0x4e>
 8008866:	462a      	mov	r2, r5
 8008868:	e7eb      	b.n	8008842 <__ssvfiscanf_r+0x26>
 800886a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800886c:	3201      	adds	r2, #1
 800886e:	9245      	str	r2, [sp, #276]	@ 0x114
 8008870:	6862      	ldr	r2, [r4, #4]
 8008872:	3301      	adds	r3, #1
 8008874:	3a01      	subs	r2, #1
 8008876:	6062      	str	r2, [r4, #4]
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	e7ec      	b.n	8008856 <__ssvfiscanf_r+0x3a>
 800887c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800887e:	4621      	mov	r1, r4
 8008880:	4630      	mov	r0, r6
 8008882:	4798      	blx	r3
 8008884:	2800      	cmp	r0, #0
 8008886:	d0e9      	beq.n	800885c <__ssvfiscanf_r+0x40>
 8008888:	e7ed      	b.n	8008866 <__ssvfiscanf_r+0x4a>
 800888a:	2b25      	cmp	r3, #37	@ 0x25
 800888c:	d012      	beq.n	80088b4 <__ssvfiscanf_r+0x98>
 800888e:	4699      	mov	r9, r3
 8008890:	6863      	ldr	r3, [r4, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	f340 8093 	ble.w	80089be <__ssvfiscanf_r+0x1a2>
 8008898:	6822      	ldr	r2, [r4, #0]
 800889a:	7813      	ldrb	r3, [r2, #0]
 800889c:	454b      	cmp	r3, r9
 800889e:	f040 812c 	bne.w	8008afa <__ssvfiscanf_r+0x2de>
 80088a2:	6863      	ldr	r3, [r4, #4]
 80088a4:	3b01      	subs	r3, #1
 80088a6:	6063      	str	r3, [r4, #4]
 80088a8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80088aa:	3201      	adds	r2, #1
 80088ac:	3301      	adds	r3, #1
 80088ae:	6022      	str	r2, [r4, #0]
 80088b0:	9345      	str	r3, [sp, #276]	@ 0x114
 80088b2:	e7d8      	b.n	8008866 <__ssvfiscanf_r+0x4a>
 80088b4:	9141      	str	r1, [sp, #260]	@ 0x104
 80088b6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80088b8:	7853      	ldrb	r3, [r2, #1]
 80088ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80088bc:	bf02      	ittt	eq
 80088be:	2310      	moveq	r3, #16
 80088c0:	1c95      	addeq	r5, r2, #2
 80088c2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80088c4:	220a      	movs	r2, #10
 80088c6:	46a9      	mov	r9, r5
 80088c8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80088cc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80088d0:	2b09      	cmp	r3, #9
 80088d2:	d91e      	bls.n	8008912 <__ssvfiscanf_r+0xf6>
 80088d4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8008ad0 <__ssvfiscanf_r+0x2b4>
 80088d8:	2203      	movs	r2, #3
 80088da:	4650      	mov	r0, sl
 80088dc:	f7f7 fc88 	bl	80001f0 <memchr>
 80088e0:	b138      	cbz	r0, 80088f2 <__ssvfiscanf_r+0xd6>
 80088e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80088e4:	eba0 000a 	sub.w	r0, r0, sl
 80088e8:	2301      	movs	r3, #1
 80088ea:	4083      	lsls	r3, r0
 80088ec:	4313      	orrs	r3, r2
 80088ee:	9341      	str	r3, [sp, #260]	@ 0x104
 80088f0:	464d      	mov	r5, r9
 80088f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80088f6:	2b78      	cmp	r3, #120	@ 0x78
 80088f8:	d806      	bhi.n	8008908 <__ssvfiscanf_r+0xec>
 80088fa:	2b57      	cmp	r3, #87	@ 0x57
 80088fc:	d810      	bhi.n	8008920 <__ssvfiscanf_r+0x104>
 80088fe:	2b25      	cmp	r3, #37	@ 0x25
 8008900:	d0c5      	beq.n	800888e <__ssvfiscanf_r+0x72>
 8008902:	d857      	bhi.n	80089b4 <__ssvfiscanf_r+0x198>
 8008904:	2b00      	cmp	r3, #0
 8008906:	d065      	beq.n	80089d4 <__ssvfiscanf_r+0x1b8>
 8008908:	2303      	movs	r3, #3
 800890a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800890c:	230a      	movs	r3, #10
 800890e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008910:	e078      	b.n	8008a04 <__ssvfiscanf_r+0x1e8>
 8008912:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008914:	fb02 1103 	mla	r1, r2, r3, r1
 8008918:	3930      	subs	r1, #48	@ 0x30
 800891a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800891c:	464d      	mov	r5, r9
 800891e:	e7d2      	b.n	80088c6 <__ssvfiscanf_r+0xaa>
 8008920:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008924:	2a20      	cmp	r2, #32
 8008926:	d8ef      	bhi.n	8008908 <__ssvfiscanf_r+0xec>
 8008928:	a101      	add	r1, pc, #4	@ (adr r1, 8008930 <__ssvfiscanf_r+0x114>)
 800892a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800892e:	bf00      	nop
 8008930:	080089e3 	.word	0x080089e3
 8008934:	08008909 	.word	0x08008909
 8008938:	08008909 	.word	0x08008909
 800893c:	08008a3d 	.word	0x08008a3d
 8008940:	08008909 	.word	0x08008909
 8008944:	08008909 	.word	0x08008909
 8008948:	08008909 	.word	0x08008909
 800894c:	08008909 	.word	0x08008909
 8008950:	08008909 	.word	0x08008909
 8008954:	08008909 	.word	0x08008909
 8008958:	08008909 	.word	0x08008909
 800895c:	08008a53 	.word	0x08008a53
 8008960:	08008a39 	.word	0x08008a39
 8008964:	080089bb 	.word	0x080089bb
 8008968:	080089bb 	.word	0x080089bb
 800896c:	080089bb 	.word	0x080089bb
 8008970:	08008909 	.word	0x08008909
 8008974:	080089f5 	.word	0x080089f5
 8008978:	08008909 	.word	0x08008909
 800897c:	08008909 	.word	0x08008909
 8008980:	08008909 	.word	0x08008909
 8008984:	08008909 	.word	0x08008909
 8008988:	08008a63 	.word	0x08008a63
 800898c:	080089fd 	.word	0x080089fd
 8008990:	080089db 	.word	0x080089db
 8008994:	08008909 	.word	0x08008909
 8008998:	08008909 	.word	0x08008909
 800899c:	08008a5f 	.word	0x08008a5f
 80089a0:	08008909 	.word	0x08008909
 80089a4:	08008a39 	.word	0x08008a39
 80089a8:	08008909 	.word	0x08008909
 80089ac:	08008909 	.word	0x08008909
 80089b0:	080089e3 	.word	0x080089e3
 80089b4:	3b45      	subs	r3, #69	@ 0x45
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d8a6      	bhi.n	8008908 <__ssvfiscanf_r+0xec>
 80089ba:	2305      	movs	r3, #5
 80089bc:	e021      	b.n	8008a02 <__ssvfiscanf_r+0x1e6>
 80089be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80089c0:	4621      	mov	r1, r4
 80089c2:	4630      	mov	r0, r6
 80089c4:	4798      	blx	r3
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f43f af66 	beq.w	8008898 <__ssvfiscanf_r+0x7c>
 80089cc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80089ce:	2800      	cmp	r0, #0
 80089d0:	f040 808b 	bne.w	8008aea <__ssvfiscanf_r+0x2ce>
 80089d4:	f04f 30ff 	mov.w	r0, #4294967295
 80089d8:	e08b      	b.n	8008af2 <__ssvfiscanf_r+0x2d6>
 80089da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80089dc:	f042 0220 	orr.w	r2, r2, #32
 80089e0:	9241      	str	r2, [sp, #260]	@ 0x104
 80089e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80089e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089e8:	9241      	str	r2, [sp, #260]	@ 0x104
 80089ea:	2210      	movs	r2, #16
 80089ec:	2b6e      	cmp	r3, #110	@ 0x6e
 80089ee:	9242      	str	r2, [sp, #264]	@ 0x108
 80089f0:	d902      	bls.n	80089f8 <__ssvfiscanf_r+0x1dc>
 80089f2:	e005      	b.n	8008a00 <__ssvfiscanf_r+0x1e4>
 80089f4:	2300      	movs	r3, #0
 80089f6:	9342      	str	r3, [sp, #264]	@ 0x108
 80089f8:	2303      	movs	r3, #3
 80089fa:	e002      	b.n	8008a02 <__ssvfiscanf_r+0x1e6>
 80089fc:	2308      	movs	r3, #8
 80089fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8008a00:	2304      	movs	r3, #4
 8008a02:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008a04:	6863      	ldr	r3, [r4, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	dd39      	ble.n	8008a7e <__ssvfiscanf_r+0x262>
 8008a0a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008a0c:	0659      	lsls	r1, r3, #25
 8008a0e:	d404      	bmi.n	8008a1a <__ssvfiscanf_r+0x1fe>
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	781a      	ldrb	r2, [r3, #0]
 8008a14:	5cba      	ldrb	r2, [r7, r2]
 8008a16:	0712      	lsls	r2, r2, #28
 8008a18:	d438      	bmi.n	8008a8c <__ssvfiscanf_r+0x270>
 8008a1a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	dc47      	bgt.n	8008ab0 <__ssvfiscanf_r+0x294>
 8008a20:	466b      	mov	r3, sp
 8008a22:	4622      	mov	r2, r4
 8008a24:	a941      	add	r1, sp, #260	@ 0x104
 8008a26:	4630      	mov	r0, r6
 8008a28:	f000 f86c 	bl	8008b04 <_scanf_chars>
 8008a2c:	2801      	cmp	r0, #1
 8008a2e:	d064      	beq.n	8008afa <__ssvfiscanf_r+0x2de>
 8008a30:	2802      	cmp	r0, #2
 8008a32:	f47f af18 	bne.w	8008866 <__ssvfiscanf_r+0x4a>
 8008a36:	e7c9      	b.n	80089cc <__ssvfiscanf_r+0x1b0>
 8008a38:	220a      	movs	r2, #10
 8008a3a:	e7d7      	b.n	80089ec <__ssvfiscanf_r+0x1d0>
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	4640      	mov	r0, r8
 8008a40:	f000 fabc 	bl	8008fbc <__sccl>
 8008a44:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a4a:	9341      	str	r3, [sp, #260]	@ 0x104
 8008a4c:	4605      	mov	r5, r0
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e7d7      	b.n	8008a02 <__ssvfiscanf_r+0x1e6>
 8008a52:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a58:	9341      	str	r3, [sp, #260]	@ 0x104
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e7d1      	b.n	8008a02 <__ssvfiscanf_r+0x1e6>
 8008a5e:	2302      	movs	r3, #2
 8008a60:	e7cf      	b.n	8008a02 <__ssvfiscanf_r+0x1e6>
 8008a62:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008a64:	06c3      	lsls	r3, r0, #27
 8008a66:	f53f aefe 	bmi.w	8008866 <__ssvfiscanf_r+0x4a>
 8008a6a:	9b00      	ldr	r3, [sp, #0]
 8008a6c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008a6e:	1d19      	adds	r1, r3, #4
 8008a70:	9100      	str	r1, [sp, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	07c0      	lsls	r0, r0, #31
 8008a76:	bf4c      	ite	mi
 8008a78:	801a      	strhmi	r2, [r3, #0]
 8008a7a:	601a      	strpl	r2, [r3, #0]
 8008a7c:	e6f3      	b.n	8008866 <__ssvfiscanf_r+0x4a>
 8008a7e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008a80:	4621      	mov	r1, r4
 8008a82:	4630      	mov	r0, r6
 8008a84:	4798      	blx	r3
 8008a86:	2800      	cmp	r0, #0
 8008a88:	d0bf      	beq.n	8008a0a <__ssvfiscanf_r+0x1ee>
 8008a8a:	e79f      	b.n	80089cc <__ssvfiscanf_r+0x1b0>
 8008a8c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008a8e:	3201      	adds	r2, #1
 8008a90:	9245      	str	r2, [sp, #276]	@ 0x114
 8008a92:	6862      	ldr	r2, [r4, #4]
 8008a94:	3a01      	subs	r2, #1
 8008a96:	2a00      	cmp	r2, #0
 8008a98:	6062      	str	r2, [r4, #4]
 8008a9a:	dd02      	ble.n	8008aa2 <__ssvfiscanf_r+0x286>
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	6023      	str	r3, [r4, #0]
 8008aa0:	e7b6      	b.n	8008a10 <__ssvfiscanf_r+0x1f4>
 8008aa2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	4798      	blx	r3
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	d0b0      	beq.n	8008a10 <__ssvfiscanf_r+0x1f4>
 8008aae:	e78d      	b.n	80089cc <__ssvfiscanf_r+0x1b0>
 8008ab0:	2b04      	cmp	r3, #4
 8008ab2:	dc0f      	bgt.n	8008ad4 <__ssvfiscanf_r+0x2b8>
 8008ab4:	466b      	mov	r3, sp
 8008ab6:	4622      	mov	r2, r4
 8008ab8:	a941      	add	r1, sp, #260	@ 0x104
 8008aba:	4630      	mov	r0, r6
 8008abc:	f000 f87c 	bl	8008bb8 <_scanf_i>
 8008ac0:	e7b4      	b.n	8008a2c <__ssvfiscanf_r+0x210>
 8008ac2:	bf00      	nop
 8008ac4:	0800876d 	.word	0x0800876d
 8008ac8:	080087e3 	.word	0x080087e3
 8008acc:	0800a129 	.word	0x0800a129
 8008ad0:	0800a22f 	.word	0x0800a22f
 8008ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8008b00 <__ssvfiscanf_r+0x2e4>)
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f43f aec5 	beq.w	8008866 <__ssvfiscanf_r+0x4a>
 8008adc:	466b      	mov	r3, sp
 8008ade:	4622      	mov	r2, r4
 8008ae0:	a941      	add	r1, sp, #260	@ 0x104
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f7fc fd8a 	bl	80055fc <_scanf_float>
 8008ae8:	e7a0      	b.n	8008a2c <__ssvfiscanf_r+0x210>
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	065b      	lsls	r3, r3, #25
 8008aee:	f53f af71 	bmi.w	80089d4 <__ssvfiscanf_r+0x1b8>
 8008af2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008afa:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008afc:	e7f9      	b.n	8008af2 <__ssvfiscanf_r+0x2d6>
 8008afe:	bf00      	nop
 8008b00:	080055fd 	.word	0x080055fd

08008b04 <_scanf_chars>:
 8008b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b08:	4615      	mov	r5, r2
 8008b0a:	688a      	ldr	r2, [r1, #8]
 8008b0c:	4680      	mov	r8, r0
 8008b0e:	460c      	mov	r4, r1
 8008b10:	b932      	cbnz	r2, 8008b20 <_scanf_chars+0x1c>
 8008b12:	698a      	ldr	r2, [r1, #24]
 8008b14:	2a00      	cmp	r2, #0
 8008b16:	bf14      	ite	ne
 8008b18:	f04f 32ff 	movne.w	r2, #4294967295
 8008b1c:	2201      	moveq	r2, #1
 8008b1e:	608a      	str	r2, [r1, #8]
 8008b20:	6822      	ldr	r2, [r4, #0]
 8008b22:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008bb4 <_scanf_chars+0xb0>
 8008b26:	06d1      	lsls	r1, r2, #27
 8008b28:	bf5f      	itttt	pl
 8008b2a:	681a      	ldrpl	r2, [r3, #0]
 8008b2c:	1d11      	addpl	r1, r2, #4
 8008b2e:	6019      	strpl	r1, [r3, #0]
 8008b30:	6816      	ldrpl	r6, [r2, #0]
 8008b32:	2700      	movs	r7, #0
 8008b34:	69a0      	ldr	r0, [r4, #24]
 8008b36:	b188      	cbz	r0, 8008b5c <_scanf_chars+0x58>
 8008b38:	2801      	cmp	r0, #1
 8008b3a:	d107      	bne.n	8008b4c <_scanf_chars+0x48>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	781a      	ldrb	r2, [r3, #0]
 8008b40:	6963      	ldr	r3, [r4, #20]
 8008b42:	5c9b      	ldrb	r3, [r3, r2]
 8008b44:	b953      	cbnz	r3, 8008b5c <_scanf_chars+0x58>
 8008b46:	2f00      	cmp	r7, #0
 8008b48:	d031      	beq.n	8008bae <_scanf_chars+0xaa>
 8008b4a:	e022      	b.n	8008b92 <_scanf_chars+0x8e>
 8008b4c:	2802      	cmp	r0, #2
 8008b4e:	d120      	bne.n	8008b92 <_scanf_chars+0x8e>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008b58:	071b      	lsls	r3, r3, #28
 8008b5a:	d41a      	bmi.n	8008b92 <_scanf_chars+0x8e>
 8008b5c:	6823      	ldr	r3, [r4, #0]
 8008b5e:	06da      	lsls	r2, r3, #27
 8008b60:	bf5e      	ittt	pl
 8008b62:	682b      	ldrpl	r3, [r5, #0]
 8008b64:	781b      	ldrbpl	r3, [r3, #0]
 8008b66:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008b6a:	682a      	ldr	r2, [r5, #0]
 8008b6c:	686b      	ldr	r3, [r5, #4]
 8008b6e:	3201      	adds	r2, #1
 8008b70:	602a      	str	r2, [r5, #0]
 8008b72:	68a2      	ldr	r2, [r4, #8]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	3a01      	subs	r2, #1
 8008b78:	606b      	str	r3, [r5, #4]
 8008b7a:	3701      	adds	r7, #1
 8008b7c:	60a2      	str	r2, [r4, #8]
 8008b7e:	b142      	cbz	r2, 8008b92 <_scanf_chars+0x8e>
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	dcd7      	bgt.n	8008b34 <_scanf_chars+0x30>
 8008b84:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008b88:	4629      	mov	r1, r5
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	4798      	blx	r3
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d0d0      	beq.n	8008b34 <_scanf_chars+0x30>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	f013 0310 	ands.w	r3, r3, #16
 8008b98:	d105      	bne.n	8008ba6 <_scanf_chars+0xa2>
 8008b9a:	68e2      	ldr	r2, [r4, #12]
 8008b9c:	3201      	adds	r2, #1
 8008b9e:	60e2      	str	r2, [r4, #12]
 8008ba0:	69a2      	ldr	r2, [r4, #24]
 8008ba2:	b102      	cbz	r2, 8008ba6 <_scanf_chars+0xa2>
 8008ba4:	7033      	strb	r3, [r6, #0]
 8008ba6:	6923      	ldr	r3, [r4, #16]
 8008ba8:	443b      	add	r3, r7
 8008baa:	6123      	str	r3, [r4, #16]
 8008bac:	2000      	movs	r0, #0
 8008bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bb2:	bf00      	nop
 8008bb4:	0800a129 	.word	0x0800a129

08008bb8 <_scanf_i>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	4698      	mov	r8, r3
 8008bbe:	4b74      	ldr	r3, [pc, #464]	@ (8008d90 <_scanf_i+0x1d8>)
 8008bc0:	460c      	mov	r4, r1
 8008bc2:	4682      	mov	sl, r0
 8008bc4:	4616      	mov	r6, r2
 8008bc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	ab03      	add	r3, sp, #12
 8008bce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008bd2:	4b70      	ldr	r3, [pc, #448]	@ (8008d94 <_scanf_i+0x1dc>)
 8008bd4:	69a1      	ldr	r1, [r4, #24]
 8008bd6:	4a70      	ldr	r2, [pc, #448]	@ (8008d98 <_scanf_i+0x1e0>)
 8008bd8:	2903      	cmp	r1, #3
 8008bda:	bf08      	it	eq
 8008bdc:	461a      	moveq	r2, r3
 8008bde:	68a3      	ldr	r3, [r4, #8]
 8008be0:	9201      	str	r2, [sp, #4]
 8008be2:	1e5a      	subs	r2, r3, #1
 8008be4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008be8:	bf88      	it	hi
 8008bea:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008bee:	4627      	mov	r7, r4
 8008bf0:	bf82      	ittt	hi
 8008bf2:	eb03 0905 	addhi.w	r9, r3, r5
 8008bf6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008bfa:	60a3      	strhi	r3, [r4, #8]
 8008bfc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008c00:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008c04:	bf98      	it	ls
 8008c06:	f04f 0900 	movls.w	r9, #0
 8008c0a:	6023      	str	r3, [r4, #0]
 8008c0c:	463d      	mov	r5, r7
 8008c0e:	f04f 0b00 	mov.w	fp, #0
 8008c12:	6831      	ldr	r1, [r6, #0]
 8008c14:	ab03      	add	r3, sp, #12
 8008c16:	7809      	ldrb	r1, [r1, #0]
 8008c18:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	f7f7 fae7 	bl	80001f0 <memchr>
 8008c22:	b328      	cbz	r0, 8008c70 <_scanf_i+0xb8>
 8008c24:	f1bb 0f01 	cmp.w	fp, #1
 8008c28:	d159      	bne.n	8008cde <_scanf_i+0x126>
 8008c2a:	6862      	ldr	r2, [r4, #4]
 8008c2c:	b92a      	cbnz	r2, 8008c3a <_scanf_i+0x82>
 8008c2e:	6822      	ldr	r2, [r4, #0]
 8008c30:	2108      	movs	r1, #8
 8008c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c36:	6061      	str	r1, [r4, #4]
 8008c38:	6022      	str	r2, [r4, #0]
 8008c3a:	6822      	ldr	r2, [r4, #0]
 8008c3c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008c40:	6022      	str	r2, [r4, #0]
 8008c42:	68a2      	ldr	r2, [r4, #8]
 8008c44:	1e51      	subs	r1, r2, #1
 8008c46:	60a1      	str	r1, [r4, #8]
 8008c48:	b192      	cbz	r2, 8008c70 <_scanf_i+0xb8>
 8008c4a:	6832      	ldr	r2, [r6, #0]
 8008c4c:	1c51      	adds	r1, r2, #1
 8008c4e:	6031      	str	r1, [r6, #0]
 8008c50:	7812      	ldrb	r2, [r2, #0]
 8008c52:	f805 2b01 	strb.w	r2, [r5], #1
 8008c56:	6872      	ldr	r2, [r6, #4]
 8008c58:	3a01      	subs	r2, #1
 8008c5a:	2a00      	cmp	r2, #0
 8008c5c:	6072      	str	r2, [r6, #4]
 8008c5e:	dc07      	bgt.n	8008c70 <_scanf_i+0xb8>
 8008c60:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008c64:	4631      	mov	r1, r6
 8008c66:	4650      	mov	r0, sl
 8008c68:	4790      	blx	r2
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	f040 8085 	bne.w	8008d7a <_scanf_i+0x1c2>
 8008c70:	f10b 0b01 	add.w	fp, fp, #1
 8008c74:	f1bb 0f03 	cmp.w	fp, #3
 8008c78:	d1cb      	bne.n	8008c12 <_scanf_i+0x5a>
 8008c7a:	6863      	ldr	r3, [r4, #4]
 8008c7c:	b90b      	cbnz	r3, 8008c82 <_scanf_i+0xca>
 8008c7e:	230a      	movs	r3, #10
 8008c80:	6063      	str	r3, [r4, #4]
 8008c82:	6863      	ldr	r3, [r4, #4]
 8008c84:	4945      	ldr	r1, [pc, #276]	@ (8008d9c <_scanf_i+0x1e4>)
 8008c86:	6960      	ldr	r0, [r4, #20]
 8008c88:	1ac9      	subs	r1, r1, r3
 8008c8a:	f000 f997 	bl	8008fbc <__sccl>
 8008c8e:	f04f 0b00 	mov.w	fp, #0
 8008c92:	68a3      	ldr	r3, [r4, #8]
 8008c94:	6822      	ldr	r2, [r4, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d03d      	beq.n	8008d16 <_scanf_i+0x15e>
 8008c9a:	6831      	ldr	r1, [r6, #0]
 8008c9c:	6960      	ldr	r0, [r4, #20]
 8008c9e:	f891 c000 	ldrb.w	ip, [r1]
 8008ca2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d035      	beq.n	8008d16 <_scanf_i+0x15e>
 8008caa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008cae:	d124      	bne.n	8008cfa <_scanf_i+0x142>
 8008cb0:	0510      	lsls	r0, r2, #20
 8008cb2:	d522      	bpl.n	8008cfa <_scanf_i+0x142>
 8008cb4:	f10b 0b01 	add.w	fp, fp, #1
 8008cb8:	f1b9 0f00 	cmp.w	r9, #0
 8008cbc:	d003      	beq.n	8008cc6 <_scanf_i+0x10e>
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	f109 39ff 	add.w	r9, r9, #4294967295
 8008cc4:	60a3      	str	r3, [r4, #8]
 8008cc6:	6873      	ldr	r3, [r6, #4]
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	6073      	str	r3, [r6, #4]
 8008cce:	dd1b      	ble.n	8008d08 <_scanf_i+0x150>
 8008cd0:	6833      	ldr	r3, [r6, #0]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	6033      	str	r3, [r6, #0]
 8008cd6:	68a3      	ldr	r3, [r4, #8]
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	60a3      	str	r3, [r4, #8]
 8008cdc:	e7d9      	b.n	8008c92 <_scanf_i+0xda>
 8008cde:	f1bb 0f02 	cmp.w	fp, #2
 8008ce2:	d1ae      	bne.n	8008c42 <_scanf_i+0x8a>
 8008ce4:	6822      	ldr	r2, [r4, #0]
 8008ce6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008cea:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008cee:	d1bf      	bne.n	8008c70 <_scanf_i+0xb8>
 8008cf0:	2110      	movs	r1, #16
 8008cf2:	6061      	str	r1, [r4, #4]
 8008cf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008cf8:	e7a2      	b.n	8008c40 <_scanf_i+0x88>
 8008cfa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008cfe:	6022      	str	r2, [r4, #0]
 8008d00:	780b      	ldrb	r3, [r1, #0]
 8008d02:	f805 3b01 	strb.w	r3, [r5], #1
 8008d06:	e7de      	b.n	8008cc6 <_scanf_i+0x10e>
 8008d08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008d0c:	4631      	mov	r1, r6
 8008d0e:	4650      	mov	r0, sl
 8008d10:	4798      	blx	r3
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d0df      	beq.n	8008cd6 <_scanf_i+0x11e>
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	05d9      	lsls	r1, r3, #23
 8008d1a:	d50d      	bpl.n	8008d38 <_scanf_i+0x180>
 8008d1c:	42bd      	cmp	r5, r7
 8008d1e:	d909      	bls.n	8008d34 <_scanf_i+0x17c>
 8008d20:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008d24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d28:	4632      	mov	r2, r6
 8008d2a:	4650      	mov	r0, sl
 8008d2c:	4798      	blx	r3
 8008d2e:	f105 39ff 	add.w	r9, r5, #4294967295
 8008d32:	464d      	mov	r5, r9
 8008d34:	42bd      	cmp	r5, r7
 8008d36:	d028      	beq.n	8008d8a <_scanf_i+0x1d2>
 8008d38:	6822      	ldr	r2, [r4, #0]
 8008d3a:	f012 0210 	ands.w	r2, r2, #16
 8008d3e:	d113      	bne.n	8008d68 <_scanf_i+0x1b0>
 8008d40:	702a      	strb	r2, [r5, #0]
 8008d42:	6863      	ldr	r3, [r4, #4]
 8008d44:	9e01      	ldr	r6, [sp, #4]
 8008d46:	4639      	mov	r1, r7
 8008d48:	4650      	mov	r0, sl
 8008d4a:	47b0      	blx	r6
 8008d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d50:	6821      	ldr	r1, [r4, #0]
 8008d52:	1d1a      	adds	r2, r3, #4
 8008d54:	f8c8 2000 	str.w	r2, [r8]
 8008d58:	f011 0f20 	tst.w	r1, #32
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	d00f      	beq.n	8008d80 <_scanf_i+0x1c8>
 8008d60:	6018      	str	r0, [r3, #0]
 8008d62:	68e3      	ldr	r3, [r4, #12]
 8008d64:	3301      	adds	r3, #1
 8008d66:	60e3      	str	r3, [r4, #12]
 8008d68:	6923      	ldr	r3, [r4, #16]
 8008d6a:	1bed      	subs	r5, r5, r7
 8008d6c:	445d      	add	r5, fp
 8008d6e:	442b      	add	r3, r5
 8008d70:	6123      	str	r3, [r4, #16]
 8008d72:	2000      	movs	r0, #0
 8008d74:	b007      	add	sp, #28
 8008d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7a:	f04f 0b00 	mov.w	fp, #0
 8008d7e:	e7ca      	b.n	8008d16 <_scanf_i+0x15e>
 8008d80:	07ca      	lsls	r2, r1, #31
 8008d82:	bf4c      	ite	mi
 8008d84:	8018      	strhmi	r0, [r3, #0]
 8008d86:	6018      	strpl	r0, [r3, #0]
 8008d88:	e7eb      	b.n	8008d62 <_scanf_i+0x1aa>
 8008d8a:	2001      	movs	r0, #1
 8008d8c:	e7f2      	b.n	8008d74 <_scanf_i+0x1bc>
 8008d8e:	bf00      	nop
 8008d90:	08009e6c 	.word	0x08009e6c
 8008d94:	080084b9 	.word	0x080084b9
 8008d98:	080099c5 	.word	0x080099c5
 8008d9c:	0800a24a 	.word	0x0800a24a

08008da0 <__sflush_r>:
 8008da0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da8:	0716      	lsls	r6, r2, #28
 8008daa:	4605      	mov	r5, r0
 8008dac:	460c      	mov	r4, r1
 8008dae:	d454      	bmi.n	8008e5a <__sflush_r+0xba>
 8008db0:	684b      	ldr	r3, [r1, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	dc02      	bgt.n	8008dbc <__sflush_r+0x1c>
 8008db6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	dd48      	ble.n	8008e4e <__sflush_r+0xae>
 8008dbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008dbe:	2e00      	cmp	r6, #0
 8008dc0:	d045      	beq.n	8008e4e <__sflush_r+0xae>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008dc8:	682f      	ldr	r7, [r5, #0]
 8008dca:	6a21      	ldr	r1, [r4, #32]
 8008dcc:	602b      	str	r3, [r5, #0]
 8008dce:	d030      	beq.n	8008e32 <__sflush_r+0x92>
 8008dd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	0759      	lsls	r1, r3, #29
 8008dd6:	d505      	bpl.n	8008de4 <__sflush_r+0x44>
 8008dd8:	6863      	ldr	r3, [r4, #4]
 8008dda:	1ad2      	subs	r2, r2, r3
 8008ddc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008dde:	b10b      	cbz	r3, 8008de4 <__sflush_r+0x44>
 8008de0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008de2:	1ad2      	subs	r2, r2, r3
 8008de4:	2300      	movs	r3, #0
 8008de6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008de8:	6a21      	ldr	r1, [r4, #32]
 8008dea:	4628      	mov	r0, r5
 8008dec:	47b0      	blx	r6
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	d106      	bne.n	8008e02 <__sflush_r+0x62>
 8008df4:	6829      	ldr	r1, [r5, #0]
 8008df6:	291d      	cmp	r1, #29
 8008df8:	d82b      	bhi.n	8008e52 <__sflush_r+0xb2>
 8008dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8008ea4 <__sflush_r+0x104>)
 8008dfc:	410a      	asrs	r2, r1
 8008dfe:	07d6      	lsls	r6, r2, #31
 8008e00:	d427      	bmi.n	8008e52 <__sflush_r+0xb2>
 8008e02:	2200      	movs	r2, #0
 8008e04:	6062      	str	r2, [r4, #4]
 8008e06:	04d9      	lsls	r1, r3, #19
 8008e08:	6922      	ldr	r2, [r4, #16]
 8008e0a:	6022      	str	r2, [r4, #0]
 8008e0c:	d504      	bpl.n	8008e18 <__sflush_r+0x78>
 8008e0e:	1c42      	adds	r2, r0, #1
 8008e10:	d101      	bne.n	8008e16 <__sflush_r+0x76>
 8008e12:	682b      	ldr	r3, [r5, #0]
 8008e14:	b903      	cbnz	r3, 8008e18 <__sflush_r+0x78>
 8008e16:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e1a:	602f      	str	r7, [r5, #0]
 8008e1c:	b1b9      	cbz	r1, 8008e4e <__sflush_r+0xae>
 8008e1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e22:	4299      	cmp	r1, r3
 8008e24:	d002      	beq.n	8008e2c <__sflush_r+0x8c>
 8008e26:	4628      	mov	r0, r5
 8008e28:	f7fd ff12 	bl	8006c50 <_free_r>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e30:	e00d      	b.n	8008e4e <__sflush_r+0xae>
 8008e32:	2301      	movs	r3, #1
 8008e34:	4628      	mov	r0, r5
 8008e36:	47b0      	blx	r6
 8008e38:	4602      	mov	r2, r0
 8008e3a:	1c50      	adds	r0, r2, #1
 8008e3c:	d1c9      	bne.n	8008dd2 <__sflush_r+0x32>
 8008e3e:	682b      	ldr	r3, [r5, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d0c6      	beq.n	8008dd2 <__sflush_r+0x32>
 8008e44:	2b1d      	cmp	r3, #29
 8008e46:	d001      	beq.n	8008e4c <__sflush_r+0xac>
 8008e48:	2b16      	cmp	r3, #22
 8008e4a:	d11e      	bne.n	8008e8a <__sflush_r+0xea>
 8008e4c:	602f      	str	r7, [r5, #0]
 8008e4e:	2000      	movs	r0, #0
 8008e50:	e022      	b.n	8008e98 <__sflush_r+0xf8>
 8008e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e56:	b21b      	sxth	r3, r3
 8008e58:	e01b      	b.n	8008e92 <__sflush_r+0xf2>
 8008e5a:	690f      	ldr	r7, [r1, #16]
 8008e5c:	2f00      	cmp	r7, #0
 8008e5e:	d0f6      	beq.n	8008e4e <__sflush_r+0xae>
 8008e60:	0793      	lsls	r3, r2, #30
 8008e62:	680e      	ldr	r6, [r1, #0]
 8008e64:	bf08      	it	eq
 8008e66:	694b      	ldreq	r3, [r1, #20]
 8008e68:	600f      	str	r7, [r1, #0]
 8008e6a:	bf18      	it	ne
 8008e6c:	2300      	movne	r3, #0
 8008e6e:	eba6 0807 	sub.w	r8, r6, r7
 8008e72:	608b      	str	r3, [r1, #8]
 8008e74:	f1b8 0f00 	cmp.w	r8, #0
 8008e78:	dde9      	ble.n	8008e4e <__sflush_r+0xae>
 8008e7a:	6a21      	ldr	r1, [r4, #32]
 8008e7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008e7e:	4643      	mov	r3, r8
 8008e80:	463a      	mov	r2, r7
 8008e82:	4628      	mov	r0, r5
 8008e84:	47b0      	blx	r6
 8008e86:	2800      	cmp	r0, #0
 8008e88:	dc08      	bgt.n	8008e9c <__sflush_r+0xfc>
 8008e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e92:	81a3      	strh	r3, [r4, #12]
 8008e94:	f04f 30ff 	mov.w	r0, #4294967295
 8008e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e9c:	4407      	add	r7, r0
 8008e9e:	eba8 0800 	sub.w	r8, r8, r0
 8008ea2:	e7e7      	b.n	8008e74 <__sflush_r+0xd4>
 8008ea4:	dfbffffe 	.word	0xdfbffffe

08008ea8 <_fflush_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	690b      	ldr	r3, [r1, #16]
 8008eac:	4605      	mov	r5, r0
 8008eae:	460c      	mov	r4, r1
 8008eb0:	b913      	cbnz	r3, 8008eb8 <_fflush_r+0x10>
 8008eb2:	2500      	movs	r5, #0
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	bd38      	pop	{r3, r4, r5, pc}
 8008eb8:	b118      	cbz	r0, 8008ec2 <_fflush_r+0x1a>
 8008eba:	6a03      	ldr	r3, [r0, #32]
 8008ebc:	b90b      	cbnz	r3, 8008ec2 <_fflush_r+0x1a>
 8008ebe:	f7fc fe3d 	bl	8005b3c <__sinit>
 8008ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0f3      	beq.n	8008eb2 <_fflush_r+0xa>
 8008eca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ecc:	07d0      	lsls	r0, r2, #31
 8008ece:	d404      	bmi.n	8008eda <_fflush_r+0x32>
 8008ed0:	0599      	lsls	r1, r3, #22
 8008ed2:	d402      	bmi.n	8008eda <_fflush_r+0x32>
 8008ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ed6:	f7fd f866 	bl	8005fa6 <__retarget_lock_acquire_recursive>
 8008eda:	4628      	mov	r0, r5
 8008edc:	4621      	mov	r1, r4
 8008ede:	f7ff ff5f 	bl	8008da0 <__sflush_r>
 8008ee2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ee4:	07da      	lsls	r2, r3, #31
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	d4e4      	bmi.n	8008eb4 <_fflush_r+0xc>
 8008eea:	89a3      	ldrh	r3, [r4, #12]
 8008eec:	059b      	lsls	r3, r3, #22
 8008eee:	d4e1      	bmi.n	8008eb4 <_fflush_r+0xc>
 8008ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ef2:	f7fd f859 	bl	8005fa8 <__retarget_lock_release_recursive>
 8008ef6:	e7dd      	b.n	8008eb4 <_fflush_r+0xc>

08008ef8 <__swhatbuf_r>:
 8008ef8:	b570      	push	{r4, r5, r6, lr}
 8008efa:	460c      	mov	r4, r1
 8008efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f00:	2900      	cmp	r1, #0
 8008f02:	b096      	sub	sp, #88	@ 0x58
 8008f04:	4615      	mov	r5, r2
 8008f06:	461e      	mov	r6, r3
 8008f08:	da0d      	bge.n	8008f26 <__swhatbuf_r+0x2e>
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f10:	f04f 0100 	mov.w	r1, #0
 8008f14:	bf14      	ite	ne
 8008f16:	2340      	movne	r3, #64	@ 0x40
 8008f18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	6031      	str	r1, [r6, #0]
 8008f20:	602b      	str	r3, [r5, #0]
 8008f22:	b016      	add	sp, #88	@ 0x58
 8008f24:	bd70      	pop	{r4, r5, r6, pc}
 8008f26:	466a      	mov	r2, sp
 8008f28:	f000 f8e8 	bl	80090fc <_fstat_r>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	dbec      	blt.n	8008f0a <__swhatbuf_r+0x12>
 8008f30:	9901      	ldr	r1, [sp, #4]
 8008f32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f3a:	4259      	negs	r1, r3
 8008f3c:	4159      	adcs	r1, r3
 8008f3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f42:	e7eb      	b.n	8008f1c <__swhatbuf_r+0x24>

08008f44 <__smakebuf_r>:
 8008f44:	898b      	ldrh	r3, [r1, #12]
 8008f46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f48:	079d      	lsls	r5, r3, #30
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	d507      	bpl.n	8008f60 <__smakebuf_r+0x1c>
 8008f50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	6123      	str	r3, [r4, #16]
 8008f58:	2301      	movs	r3, #1
 8008f5a:	6163      	str	r3, [r4, #20]
 8008f5c:	b003      	add	sp, #12
 8008f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f60:	ab01      	add	r3, sp, #4
 8008f62:	466a      	mov	r2, sp
 8008f64:	f7ff ffc8 	bl	8008ef8 <__swhatbuf_r>
 8008f68:	9f00      	ldr	r7, [sp, #0]
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f7fd fee2 	bl	8006d38 <_malloc_r>
 8008f74:	b948      	cbnz	r0, 8008f8a <__smakebuf_r+0x46>
 8008f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7a:	059a      	lsls	r2, r3, #22
 8008f7c:	d4ee      	bmi.n	8008f5c <__smakebuf_r+0x18>
 8008f7e:	f023 0303 	bic.w	r3, r3, #3
 8008f82:	f043 0302 	orr.w	r3, r3, #2
 8008f86:	81a3      	strh	r3, [r4, #12]
 8008f88:	e7e2      	b.n	8008f50 <__smakebuf_r+0xc>
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	6020      	str	r0, [r4, #0]
 8008f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f92:	81a3      	strh	r3, [r4, #12]
 8008f94:	9b01      	ldr	r3, [sp, #4]
 8008f96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f9a:	b15b      	cbz	r3, 8008fb4 <__smakebuf_r+0x70>
 8008f9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f000 f8bd 	bl	8009120 <_isatty_r>
 8008fa6:	b128      	cbz	r0, 8008fb4 <__smakebuf_r+0x70>
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	f023 0303 	bic.w	r3, r3, #3
 8008fae:	f043 0301 	orr.w	r3, r3, #1
 8008fb2:	81a3      	strh	r3, [r4, #12]
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	431d      	orrs	r5, r3
 8008fb8:	81a5      	strh	r5, [r4, #12]
 8008fba:	e7cf      	b.n	8008f5c <__smakebuf_r+0x18>

08008fbc <__sccl>:
 8008fbc:	b570      	push	{r4, r5, r6, lr}
 8008fbe:	780b      	ldrb	r3, [r1, #0]
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	2b5e      	cmp	r3, #94	@ 0x5e
 8008fc4:	bf0b      	itete	eq
 8008fc6:	784b      	ldrbeq	r3, [r1, #1]
 8008fc8:	1c4a      	addne	r2, r1, #1
 8008fca:	1c8a      	addeq	r2, r1, #2
 8008fcc:	2100      	movne	r1, #0
 8008fce:	bf08      	it	eq
 8008fd0:	2101      	moveq	r1, #1
 8008fd2:	3801      	subs	r0, #1
 8008fd4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008fd8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008fdc:	42a8      	cmp	r0, r5
 8008fde:	d1fb      	bne.n	8008fd8 <__sccl+0x1c>
 8008fe0:	b90b      	cbnz	r3, 8008fe6 <__sccl+0x2a>
 8008fe2:	1e50      	subs	r0, r2, #1
 8008fe4:	bd70      	pop	{r4, r5, r6, pc}
 8008fe6:	f081 0101 	eor.w	r1, r1, #1
 8008fea:	54e1      	strb	r1, [r4, r3]
 8008fec:	4610      	mov	r0, r2
 8008fee:	4602      	mov	r2, r0
 8008ff0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008ff4:	2d2d      	cmp	r5, #45	@ 0x2d
 8008ff6:	d005      	beq.n	8009004 <__sccl+0x48>
 8008ff8:	2d5d      	cmp	r5, #93	@ 0x5d
 8008ffa:	d016      	beq.n	800902a <__sccl+0x6e>
 8008ffc:	2d00      	cmp	r5, #0
 8008ffe:	d0f1      	beq.n	8008fe4 <__sccl+0x28>
 8009000:	462b      	mov	r3, r5
 8009002:	e7f2      	b.n	8008fea <__sccl+0x2e>
 8009004:	7846      	ldrb	r6, [r0, #1]
 8009006:	2e5d      	cmp	r6, #93	@ 0x5d
 8009008:	d0fa      	beq.n	8009000 <__sccl+0x44>
 800900a:	42b3      	cmp	r3, r6
 800900c:	dcf8      	bgt.n	8009000 <__sccl+0x44>
 800900e:	3002      	adds	r0, #2
 8009010:	461a      	mov	r2, r3
 8009012:	3201      	adds	r2, #1
 8009014:	4296      	cmp	r6, r2
 8009016:	54a1      	strb	r1, [r4, r2]
 8009018:	dcfb      	bgt.n	8009012 <__sccl+0x56>
 800901a:	1af2      	subs	r2, r6, r3
 800901c:	3a01      	subs	r2, #1
 800901e:	1c5d      	adds	r5, r3, #1
 8009020:	42b3      	cmp	r3, r6
 8009022:	bfa8      	it	ge
 8009024:	2200      	movge	r2, #0
 8009026:	18ab      	adds	r3, r5, r2
 8009028:	e7e1      	b.n	8008fee <__sccl+0x32>
 800902a:	4610      	mov	r0, r2
 800902c:	e7da      	b.n	8008fe4 <__sccl+0x28>

0800902e <__submore>:
 800902e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009032:	460c      	mov	r4, r1
 8009034:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009036:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800903a:	4299      	cmp	r1, r3
 800903c:	d11d      	bne.n	800907a <__submore+0x4c>
 800903e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009042:	f7fd fe79 	bl	8006d38 <_malloc_r>
 8009046:	b918      	cbnz	r0, 8009050 <__submore+0x22>
 8009048:	f04f 30ff 	mov.w	r0, #4294967295
 800904c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009050:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009054:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009056:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800905a:	6360      	str	r0, [r4, #52]	@ 0x34
 800905c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009060:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009064:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009068:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800906c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009070:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009074:	6020      	str	r0, [r4, #0]
 8009076:	2000      	movs	r0, #0
 8009078:	e7e8      	b.n	800904c <__submore+0x1e>
 800907a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800907c:	0077      	lsls	r7, r6, #1
 800907e:	463a      	mov	r2, r7
 8009080:	f000 fc03 	bl	800988a <_realloc_r>
 8009084:	4605      	mov	r5, r0
 8009086:	2800      	cmp	r0, #0
 8009088:	d0de      	beq.n	8009048 <__submore+0x1a>
 800908a:	eb00 0806 	add.w	r8, r0, r6
 800908e:	4601      	mov	r1, r0
 8009090:	4632      	mov	r2, r6
 8009092:	4640      	mov	r0, r8
 8009094:	f000 f864 	bl	8009160 <memcpy>
 8009098:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800909c:	f8c4 8000 	str.w	r8, [r4]
 80090a0:	e7e9      	b.n	8009076 <__submore+0x48>

080090a2 <memmove>:
 80090a2:	4288      	cmp	r0, r1
 80090a4:	b510      	push	{r4, lr}
 80090a6:	eb01 0402 	add.w	r4, r1, r2
 80090aa:	d902      	bls.n	80090b2 <memmove+0x10>
 80090ac:	4284      	cmp	r4, r0
 80090ae:	4623      	mov	r3, r4
 80090b0:	d807      	bhi.n	80090c2 <memmove+0x20>
 80090b2:	1e43      	subs	r3, r0, #1
 80090b4:	42a1      	cmp	r1, r4
 80090b6:	d008      	beq.n	80090ca <memmove+0x28>
 80090b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090c0:	e7f8      	b.n	80090b4 <memmove+0x12>
 80090c2:	4402      	add	r2, r0
 80090c4:	4601      	mov	r1, r0
 80090c6:	428a      	cmp	r2, r1
 80090c8:	d100      	bne.n	80090cc <memmove+0x2a>
 80090ca:	bd10      	pop	{r4, pc}
 80090cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090d0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090d4:	e7f7      	b.n	80090c6 <memmove+0x24>

080090d6 <strncmp>:
 80090d6:	b510      	push	{r4, lr}
 80090d8:	b16a      	cbz	r2, 80090f6 <strncmp+0x20>
 80090da:	3901      	subs	r1, #1
 80090dc:	1884      	adds	r4, r0, r2
 80090de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d103      	bne.n	80090f2 <strncmp+0x1c>
 80090ea:	42a0      	cmp	r0, r4
 80090ec:	d001      	beq.n	80090f2 <strncmp+0x1c>
 80090ee:	2a00      	cmp	r2, #0
 80090f0:	d1f5      	bne.n	80090de <strncmp+0x8>
 80090f2:	1ad0      	subs	r0, r2, r3
 80090f4:	bd10      	pop	{r4, pc}
 80090f6:	4610      	mov	r0, r2
 80090f8:	e7fc      	b.n	80090f4 <strncmp+0x1e>
	...

080090fc <_fstat_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4d07      	ldr	r5, [pc, #28]	@ (800911c <_fstat_r+0x20>)
 8009100:	2300      	movs	r3, #0
 8009102:	4604      	mov	r4, r0
 8009104:	4608      	mov	r0, r1
 8009106:	4611      	mov	r1, r2
 8009108:	602b      	str	r3, [r5, #0]
 800910a:	f7f8 f9d7 	bl	80014bc <_fstat>
 800910e:	1c43      	adds	r3, r0, #1
 8009110:	d102      	bne.n	8009118 <_fstat_r+0x1c>
 8009112:	682b      	ldr	r3, [r5, #0]
 8009114:	b103      	cbz	r3, 8009118 <_fstat_r+0x1c>
 8009116:	6023      	str	r3, [r4, #0]
 8009118:	bd38      	pop	{r3, r4, r5, pc}
 800911a:	bf00      	nop
 800911c:	200004a8 	.word	0x200004a8

08009120 <_isatty_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	4d06      	ldr	r5, [pc, #24]	@ (800913c <_isatty_r+0x1c>)
 8009124:	2300      	movs	r3, #0
 8009126:	4604      	mov	r4, r0
 8009128:	4608      	mov	r0, r1
 800912a:	602b      	str	r3, [r5, #0]
 800912c:	f7f8 f9d6 	bl	80014dc <_isatty>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d102      	bne.n	800913a <_isatty_r+0x1a>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	b103      	cbz	r3, 800913a <_isatty_r+0x1a>
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	bd38      	pop	{r3, r4, r5, pc}
 800913c:	200004a8 	.word	0x200004a8

08009140 <_sbrk_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	4d06      	ldr	r5, [pc, #24]	@ (800915c <_sbrk_r+0x1c>)
 8009144:	2300      	movs	r3, #0
 8009146:	4604      	mov	r4, r0
 8009148:	4608      	mov	r0, r1
 800914a:	602b      	str	r3, [r5, #0]
 800914c:	f7f8 f9de 	bl	800150c <_sbrk>
 8009150:	1c43      	adds	r3, r0, #1
 8009152:	d102      	bne.n	800915a <_sbrk_r+0x1a>
 8009154:	682b      	ldr	r3, [r5, #0]
 8009156:	b103      	cbz	r3, 800915a <_sbrk_r+0x1a>
 8009158:	6023      	str	r3, [r4, #0]
 800915a:	bd38      	pop	{r3, r4, r5, pc}
 800915c:	200004a8 	.word	0x200004a8

08009160 <memcpy>:
 8009160:	440a      	add	r2, r1
 8009162:	4291      	cmp	r1, r2
 8009164:	f100 33ff 	add.w	r3, r0, #4294967295
 8009168:	d100      	bne.n	800916c <memcpy+0xc>
 800916a:	4770      	bx	lr
 800916c:	b510      	push	{r4, lr}
 800916e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009176:	4291      	cmp	r1, r2
 8009178:	d1f9      	bne.n	800916e <memcpy+0xe>
 800917a:	bd10      	pop	{r4, pc}
 800917c:	0000      	movs	r0, r0
	...

08009180 <nan>:
 8009180:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009188 <nan+0x8>
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	00000000 	.word	0x00000000
 800918c:	7ff80000 	.word	0x7ff80000

08009190 <__assert_func>:
 8009190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009192:	4614      	mov	r4, r2
 8009194:	461a      	mov	r2, r3
 8009196:	4b09      	ldr	r3, [pc, #36]	@ (80091bc <__assert_func+0x2c>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4605      	mov	r5, r0
 800919c:	68d8      	ldr	r0, [r3, #12]
 800919e:	b954      	cbnz	r4, 80091b6 <__assert_func+0x26>
 80091a0:	4b07      	ldr	r3, [pc, #28]	@ (80091c0 <__assert_func+0x30>)
 80091a2:	461c      	mov	r4, r3
 80091a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091a8:	9100      	str	r1, [sp, #0]
 80091aa:	462b      	mov	r3, r5
 80091ac:	4905      	ldr	r1, [pc, #20]	@ (80091c4 <__assert_func+0x34>)
 80091ae:	f000 fc19 	bl	80099e4 <fiprintf>
 80091b2:	f000 fc29 	bl	8009a08 <abort>
 80091b6:	4b04      	ldr	r3, [pc, #16]	@ (80091c8 <__assert_func+0x38>)
 80091b8:	e7f4      	b.n	80091a4 <__assert_func+0x14>
 80091ba:	bf00      	nop
 80091bc:	20000018 	.word	0x20000018
 80091c0:	0800a298 	.word	0x0800a298
 80091c4:	0800a26a 	.word	0x0800a26a
 80091c8:	0800a25d 	.word	0x0800a25d

080091cc <_calloc_r>:
 80091cc:	b570      	push	{r4, r5, r6, lr}
 80091ce:	fba1 5402 	umull	r5, r4, r1, r2
 80091d2:	b93c      	cbnz	r4, 80091e4 <_calloc_r+0x18>
 80091d4:	4629      	mov	r1, r5
 80091d6:	f7fd fdaf 	bl	8006d38 <_malloc_r>
 80091da:	4606      	mov	r6, r0
 80091dc:	b928      	cbnz	r0, 80091ea <_calloc_r+0x1e>
 80091de:	2600      	movs	r6, #0
 80091e0:	4630      	mov	r0, r6
 80091e2:	bd70      	pop	{r4, r5, r6, pc}
 80091e4:	220c      	movs	r2, #12
 80091e6:	6002      	str	r2, [r0, #0]
 80091e8:	e7f9      	b.n	80091de <_calloc_r+0x12>
 80091ea:	462a      	mov	r2, r5
 80091ec:	4621      	mov	r1, r4
 80091ee:	f7fc fe5d 	bl	8005eac <memset>
 80091f2:	e7f5      	b.n	80091e0 <_calloc_r+0x14>

080091f4 <rshift>:
 80091f4:	6903      	ldr	r3, [r0, #16]
 80091f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80091fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009202:	f100 0414 	add.w	r4, r0, #20
 8009206:	dd45      	ble.n	8009294 <rshift+0xa0>
 8009208:	f011 011f 	ands.w	r1, r1, #31
 800920c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009210:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009214:	d10c      	bne.n	8009230 <rshift+0x3c>
 8009216:	f100 0710 	add.w	r7, r0, #16
 800921a:	4629      	mov	r1, r5
 800921c:	42b1      	cmp	r1, r6
 800921e:	d334      	bcc.n	800928a <rshift+0x96>
 8009220:	1a9b      	subs	r3, r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	1eea      	subs	r2, r5, #3
 8009226:	4296      	cmp	r6, r2
 8009228:	bf38      	it	cc
 800922a:	2300      	movcc	r3, #0
 800922c:	4423      	add	r3, r4
 800922e:	e015      	b.n	800925c <rshift+0x68>
 8009230:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009234:	f1c1 0820 	rsb	r8, r1, #32
 8009238:	40cf      	lsrs	r7, r1
 800923a:	f105 0e04 	add.w	lr, r5, #4
 800923e:	46a1      	mov	r9, r4
 8009240:	4576      	cmp	r6, lr
 8009242:	46f4      	mov	ip, lr
 8009244:	d815      	bhi.n	8009272 <rshift+0x7e>
 8009246:	1a9a      	subs	r2, r3, r2
 8009248:	0092      	lsls	r2, r2, #2
 800924a:	3a04      	subs	r2, #4
 800924c:	3501      	adds	r5, #1
 800924e:	42ae      	cmp	r6, r5
 8009250:	bf38      	it	cc
 8009252:	2200      	movcc	r2, #0
 8009254:	18a3      	adds	r3, r4, r2
 8009256:	50a7      	str	r7, [r4, r2]
 8009258:	b107      	cbz	r7, 800925c <rshift+0x68>
 800925a:	3304      	adds	r3, #4
 800925c:	1b1a      	subs	r2, r3, r4
 800925e:	42a3      	cmp	r3, r4
 8009260:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009264:	bf08      	it	eq
 8009266:	2300      	moveq	r3, #0
 8009268:	6102      	str	r2, [r0, #16]
 800926a:	bf08      	it	eq
 800926c:	6143      	streq	r3, [r0, #20]
 800926e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009272:	f8dc c000 	ldr.w	ip, [ip]
 8009276:	fa0c fc08 	lsl.w	ip, ip, r8
 800927a:	ea4c 0707 	orr.w	r7, ip, r7
 800927e:	f849 7b04 	str.w	r7, [r9], #4
 8009282:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009286:	40cf      	lsrs	r7, r1
 8009288:	e7da      	b.n	8009240 <rshift+0x4c>
 800928a:	f851 cb04 	ldr.w	ip, [r1], #4
 800928e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009292:	e7c3      	b.n	800921c <rshift+0x28>
 8009294:	4623      	mov	r3, r4
 8009296:	e7e1      	b.n	800925c <rshift+0x68>

08009298 <__hexdig_fun>:
 8009298:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800929c:	2b09      	cmp	r3, #9
 800929e:	d802      	bhi.n	80092a6 <__hexdig_fun+0xe>
 80092a0:	3820      	subs	r0, #32
 80092a2:	b2c0      	uxtb	r0, r0
 80092a4:	4770      	bx	lr
 80092a6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80092aa:	2b05      	cmp	r3, #5
 80092ac:	d801      	bhi.n	80092b2 <__hexdig_fun+0x1a>
 80092ae:	3847      	subs	r0, #71	@ 0x47
 80092b0:	e7f7      	b.n	80092a2 <__hexdig_fun+0xa>
 80092b2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80092b6:	2b05      	cmp	r3, #5
 80092b8:	d801      	bhi.n	80092be <__hexdig_fun+0x26>
 80092ba:	3827      	subs	r0, #39	@ 0x27
 80092bc:	e7f1      	b.n	80092a2 <__hexdig_fun+0xa>
 80092be:	2000      	movs	r0, #0
 80092c0:	4770      	bx	lr
	...

080092c4 <__gethex>:
 80092c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c8:	b085      	sub	sp, #20
 80092ca:	468a      	mov	sl, r1
 80092cc:	9302      	str	r3, [sp, #8]
 80092ce:	680b      	ldr	r3, [r1, #0]
 80092d0:	9001      	str	r0, [sp, #4]
 80092d2:	4690      	mov	r8, r2
 80092d4:	1c9c      	adds	r4, r3, #2
 80092d6:	46a1      	mov	r9, r4
 80092d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80092dc:	2830      	cmp	r0, #48	@ 0x30
 80092de:	d0fa      	beq.n	80092d6 <__gethex+0x12>
 80092e0:	eba9 0303 	sub.w	r3, r9, r3
 80092e4:	f1a3 0b02 	sub.w	fp, r3, #2
 80092e8:	f7ff ffd6 	bl	8009298 <__hexdig_fun>
 80092ec:	4605      	mov	r5, r0
 80092ee:	2800      	cmp	r0, #0
 80092f0:	d168      	bne.n	80093c4 <__gethex+0x100>
 80092f2:	49a0      	ldr	r1, [pc, #640]	@ (8009574 <__gethex+0x2b0>)
 80092f4:	2201      	movs	r2, #1
 80092f6:	4648      	mov	r0, r9
 80092f8:	f7ff feed 	bl	80090d6 <strncmp>
 80092fc:	4607      	mov	r7, r0
 80092fe:	2800      	cmp	r0, #0
 8009300:	d167      	bne.n	80093d2 <__gethex+0x10e>
 8009302:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009306:	4626      	mov	r6, r4
 8009308:	f7ff ffc6 	bl	8009298 <__hexdig_fun>
 800930c:	2800      	cmp	r0, #0
 800930e:	d062      	beq.n	80093d6 <__gethex+0x112>
 8009310:	4623      	mov	r3, r4
 8009312:	7818      	ldrb	r0, [r3, #0]
 8009314:	2830      	cmp	r0, #48	@ 0x30
 8009316:	4699      	mov	r9, r3
 8009318:	f103 0301 	add.w	r3, r3, #1
 800931c:	d0f9      	beq.n	8009312 <__gethex+0x4e>
 800931e:	f7ff ffbb 	bl	8009298 <__hexdig_fun>
 8009322:	fab0 f580 	clz	r5, r0
 8009326:	096d      	lsrs	r5, r5, #5
 8009328:	f04f 0b01 	mov.w	fp, #1
 800932c:	464a      	mov	r2, r9
 800932e:	4616      	mov	r6, r2
 8009330:	3201      	adds	r2, #1
 8009332:	7830      	ldrb	r0, [r6, #0]
 8009334:	f7ff ffb0 	bl	8009298 <__hexdig_fun>
 8009338:	2800      	cmp	r0, #0
 800933a:	d1f8      	bne.n	800932e <__gethex+0x6a>
 800933c:	498d      	ldr	r1, [pc, #564]	@ (8009574 <__gethex+0x2b0>)
 800933e:	2201      	movs	r2, #1
 8009340:	4630      	mov	r0, r6
 8009342:	f7ff fec8 	bl	80090d6 <strncmp>
 8009346:	2800      	cmp	r0, #0
 8009348:	d13f      	bne.n	80093ca <__gethex+0x106>
 800934a:	b944      	cbnz	r4, 800935e <__gethex+0x9a>
 800934c:	1c74      	adds	r4, r6, #1
 800934e:	4622      	mov	r2, r4
 8009350:	4616      	mov	r6, r2
 8009352:	3201      	adds	r2, #1
 8009354:	7830      	ldrb	r0, [r6, #0]
 8009356:	f7ff ff9f 	bl	8009298 <__hexdig_fun>
 800935a:	2800      	cmp	r0, #0
 800935c:	d1f8      	bne.n	8009350 <__gethex+0x8c>
 800935e:	1ba4      	subs	r4, r4, r6
 8009360:	00a7      	lsls	r7, r4, #2
 8009362:	7833      	ldrb	r3, [r6, #0]
 8009364:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009368:	2b50      	cmp	r3, #80	@ 0x50
 800936a:	d13e      	bne.n	80093ea <__gethex+0x126>
 800936c:	7873      	ldrb	r3, [r6, #1]
 800936e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009370:	d033      	beq.n	80093da <__gethex+0x116>
 8009372:	2b2d      	cmp	r3, #45	@ 0x2d
 8009374:	d034      	beq.n	80093e0 <__gethex+0x11c>
 8009376:	1c71      	adds	r1, r6, #1
 8009378:	2400      	movs	r4, #0
 800937a:	7808      	ldrb	r0, [r1, #0]
 800937c:	f7ff ff8c 	bl	8009298 <__hexdig_fun>
 8009380:	1e43      	subs	r3, r0, #1
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b18      	cmp	r3, #24
 8009386:	d830      	bhi.n	80093ea <__gethex+0x126>
 8009388:	f1a0 0210 	sub.w	r2, r0, #16
 800938c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009390:	f7ff ff82 	bl	8009298 <__hexdig_fun>
 8009394:	f100 3cff 	add.w	ip, r0, #4294967295
 8009398:	fa5f fc8c 	uxtb.w	ip, ip
 800939c:	f1bc 0f18 	cmp.w	ip, #24
 80093a0:	f04f 030a 	mov.w	r3, #10
 80093a4:	d91e      	bls.n	80093e4 <__gethex+0x120>
 80093a6:	b104      	cbz	r4, 80093aa <__gethex+0xe6>
 80093a8:	4252      	negs	r2, r2
 80093aa:	4417      	add	r7, r2
 80093ac:	f8ca 1000 	str.w	r1, [sl]
 80093b0:	b1ed      	cbz	r5, 80093ee <__gethex+0x12a>
 80093b2:	f1bb 0f00 	cmp.w	fp, #0
 80093b6:	bf0c      	ite	eq
 80093b8:	2506      	moveq	r5, #6
 80093ba:	2500      	movne	r5, #0
 80093bc:	4628      	mov	r0, r5
 80093be:	b005      	add	sp, #20
 80093c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c4:	2500      	movs	r5, #0
 80093c6:	462c      	mov	r4, r5
 80093c8:	e7b0      	b.n	800932c <__gethex+0x68>
 80093ca:	2c00      	cmp	r4, #0
 80093cc:	d1c7      	bne.n	800935e <__gethex+0x9a>
 80093ce:	4627      	mov	r7, r4
 80093d0:	e7c7      	b.n	8009362 <__gethex+0x9e>
 80093d2:	464e      	mov	r6, r9
 80093d4:	462f      	mov	r7, r5
 80093d6:	2501      	movs	r5, #1
 80093d8:	e7c3      	b.n	8009362 <__gethex+0x9e>
 80093da:	2400      	movs	r4, #0
 80093dc:	1cb1      	adds	r1, r6, #2
 80093de:	e7cc      	b.n	800937a <__gethex+0xb6>
 80093e0:	2401      	movs	r4, #1
 80093e2:	e7fb      	b.n	80093dc <__gethex+0x118>
 80093e4:	fb03 0002 	mla	r0, r3, r2, r0
 80093e8:	e7ce      	b.n	8009388 <__gethex+0xc4>
 80093ea:	4631      	mov	r1, r6
 80093ec:	e7de      	b.n	80093ac <__gethex+0xe8>
 80093ee:	eba6 0309 	sub.w	r3, r6, r9
 80093f2:	3b01      	subs	r3, #1
 80093f4:	4629      	mov	r1, r5
 80093f6:	2b07      	cmp	r3, #7
 80093f8:	dc0a      	bgt.n	8009410 <__gethex+0x14c>
 80093fa:	9801      	ldr	r0, [sp, #4]
 80093fc:	f7fd fd28 	bl	8006e50 <_Balloc>
 8009400:	4604      	mov	r4, r0
 8009402:	b940      	cbnz	r0, 8009416 <__gethex+0x152>
 8009404:	4b5c      	ldr	r3, [pc, #368]	@ (8009578 <__gethex+0x2b4>)
 8009406:	4602      	mov	r2, r0
 8009408:	21e4      	movs	r1, #228	@ 0xe4
 800940a:	485c      	ldr	r0, [pc, #368]	@ (800957c <__gethex+0x2b8>)
 800940c:	f7ff fec0 	bl	8009190 <__assert_func>
 8009410:	3101      	adds	r1, #1
 8009412:	105b      	asrs	r3, r3, #1
 8009414:	e7ef      	b.n	80093f6 <__gethex+0x132>
 8009416:	f100 0a14 	add.w	sl, r0, #20
 800941a:	2300      	movs	r3, #0
 800941c:	4655      	mov	r5, sl
 800941e:	469b      	mov	fp, r3
 8009420:	45b1      	cmp	r9, r6
 8009422:	d337      	bcc.n	8009494 <__gethex+0x1d0>
 8009424:	f845 bb04 	str.w	fp, [r5], #4
 8009428:	eba5 050a 	sub.w	r5, r5, sl
 800942c:	10ad      	asrs	r5, r5, #2
 800942e:	6125      	str	r5, [r4, #16]
 8009430:	4658      	mov	r0, fp
 8009432:	f7fd fdff 	bl	8007034 <__hi0bits>
 8009436:	016d      	lsls	r5, r5, #5
 8009438:	f8d8 6000 	ldr.w	r6, [r8]
 800943c:	1a2d      	subs	r5, r5, r0
 800943e:	42b5      	cmp	r5, r6
 8009440:	dd54      	ble.n	80094ec <__gethex+0x228>
 8009442:	1bad      	subs	r5, r5, r6
 8009444:	4629      	mov	r1, r5
 8009446:	4620      	mov	r0, r4
 8009448:	f7fe f993 	bl	8007772 <__any_on>
 800944c:	4681      	mov	r9, r0
 800944e:	b178      	cbz	r0, 8009470 <__gethex+0x1ac>
 8009450:	1e6b      	subs	r3, r5, #1
 8009452:	1159      	asrs	r1, r3, #5
 8009454:	f003 021f 	and.w	r2, r3, #31
 8009458:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800945c:	f04f 0901 	mov.w	r9, #1
 8009460:	fa09 f202 	lsl.w	r2, r9, r2
 8009464:	420a      	tst	r2, r1
 8009466:	d003      	beq.n	8009470 <__gethex+0x1ac>
 8009468:	454b      	cmp	r3, r9
 800946a:	dc36      	bgt.n	80094da <__gethex+0x216>
 800946c:	f04f 0902 	mov.w	r9, #2
 8009470:	4629      	mov	r1, r5
 8009472:	4620      	mov	r0, r4
 8009474:	f7ff febe 	bl	80091f4 <rshift>
 8009478:	442f      	add	r7, r5
 800947a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800947e:	42bb      	cmp	r3, r7
 8009480:	da42      	bge.n	8009508 <__gethex+0x244>
 8009482:	9801      	ldr	r0, [sp, #4]
 8009484:	4621      	mov	r1, r4
 8009486:	f7fd fd23 	bl	8006ed0 <_Bfree>
 800948a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800948c:	2300      	movs	r3, #0
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	25a3      	movs	r5, #163	@ 0xa3
 8009492:	e793      	b.n	80093bc <__gethex+0xf8>
 8009494:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009498:	2a2e      	cmp	r2, #46	@ 0x2e
 800949a:	d012      	beq.n	80094c2 <__gethex+0x1fe>
 800949c:	2b20      	cmp	r3, #32
 800949e:	d104      	bne.n	80094aa <__gethex+0x1e6>
 80094a0:	f845 bb04 	str.w	fp, [r5], #4
 80094a4:	f04f 0b00 	mov.w	fp, #0
 80094a8:	465b      	mov	r3, fp
 80094aa:	7830      	ldrb	r0, [r6, #0]
 80094ac:	9303      	str	r3, [sp, #12]
 80094ae:	f7ff fef3 	bl	8009298 <__hexdig_fun>
 80094b2:	9b03      	ldr	r3, [sp, #12]
 80094b4:	f000 000f 	and.w	r0, r0, #15
 80094b8:	4098      	lsls	r0, r3
 80094ba:	ea4b 0b00 	orr.w	fp, fp, r0
 80094be:	3304      	adds	r3, #4
 80094c0:	e7ae      	b.n	8009420 <__gethex+0x15c>
 80094c2:	45b1      	cmp	r9, r6
 80094c4:	d8ea      	bhi.n	800949c <__gethex+0x1d8>
 80094c6:	492b      	ldr	r1, [pc, #172]	@ (8009574 <__gethex+0x2b0>)
 80094c8:	9303      	str	r3, [sp, #12]
 80094ca:	2201      	movs	r2, #1
 80094cc:	4630      	mov	r0, r6
 80094ce:	f7ff fe02 	bl	80090d6 <strncmp>
 80094d2:	9b03      	ldr	r3, [sp, #12]
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d1e1      	bne.n	800949c <__gethex+0x1d8>
 80094d8:	e7a2      	b.n	8009420 <__gethex+0x15c>
 80094da:	1ea9      	subs	r1, r5, #2
 80094dc:	4620      	mov	r0, r4
 80094de:	f7fe f948 	bl	8007772 <__any_on>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d0c2      	beq.n	800946c <__gethex+0x1a8>
 80094e6:	f04f 0903 	mov.w	r9, #3
 80094ea:	e7c1      	b.n	8009470 <__gethex+0x1ac>
 80094ec:	da09      	bge.n	8009502 <__gethex+0x23e>
 80094ee:	1b75      	subs	r5, r6, r5
 80094f0:	4621      	mov	r1, r4
 80094f2:	9801      	ldr	r0, [sp, #4]
 80094f4:	462a      	mov	r2, r5
 80094f6:	f7fd ff03 	bl	8007300 <__lshift>
 80094fa:	1b7f      	subs	r7, r7, r5
 80094fc:	4604      	mov	r4, r0
 80094fe:	f100 0a14 	add.w	sl, r0, #20
 8009502:	f04f 0900 	mov.w	r9, #0
 8009506:	e7b8      	b.n	800947a <__gethex+0x1b6>
 8009508:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800950c:	42bd      	cmp	r5, r7
 800950e:	dd6f      	ble.n	80095f0 <__gethex+0x32c>
 8009510:	1bed      	subs	r5, r5, r7
 8009512:	42ae      	cmp	r6, r5
 8009514:	dc34      	bgt.n	8009580 <__gethex+0x2bc>
 8009516:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800951a:	2b02      	cmp	r3, #2
 800951c:	d022      	beq.n	8009564 <__gethex+0x2a0>
 800951e:	2b03      	cmp	r3, #3
 8009520:	d024      	beq.n	800956c <__gethex+0x2a8>
 8009522:	2b01      	cmp	r3, #1
 8009524:	d115      	bne.n	8009552 <__gethex+0x28e>
 8009526:	42ae      	cmp	r6, r5
 8009528:	d113      	bne.n	8009552 <__gethex+0x28e>
 800952a:	2e01      	cmp	r6, #1
 800952c:	d10b      	bne.n	8009546 <__gethex+0x282>
 800952e:	9a02      	ldr	r2, [sp, #8]
 8009530:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009534:	6013      	str	r3, [r2, #0]
 8009536:	2301      	movs	r3, #1
 8009538:	6123      	str	r3, [r4, #16]
 800953a:	f8ca 3000 	str.w	r3, [sl]
 800953e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009540:	2562      	movs	r5, #98	@ 0x62
 8009542:	601c      	str	r4, [r3, #0]
 8009544:	e73a      	b.n	80093bc <__gethex+0xf8>
 8009546:	1e71      	subs	r1, r6, #1
 8009548:	4620      	mov	r0, r4
 800954a:	f7fe f912 	bl	8007772 <__any_on>
 800954e:	2800      	cmp	r0, #0
 8009550:	d1ed      	bne.n	800952e <__gethex+0x26a>
 8009552:	9801      	ldr	r0, [sp, #4]
 8009554:	4621      	mov	r1, r4
 8009556:	f7fd fcbb 	bl	8006ed0 <_Bfree>
 800955a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800955c:	2300      	movs	r3, #0
 800955e:	6013      	str	r3, [r2, #0]
 8009560:	2550      	movs	r5, #80	@ 0x50
 8009562:	e72b      	b.n	80093bc <__gethex+0xf8>
 8009564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1f3      	bne.n	8009552 <__gethex+0x28e>
 800956a:	e7e0      	b.n	800952e <__gethex+0x26a>
 800956c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1dd      	bne.n	800952e <__gethex+0x26a>
 8009572:	e7ee      	b.n	8009552 <__gethex+0x28e>
 8009574:	0800a0d0 	.word	0x0800a0d0
 8009578:	08009f63 	.word	0x08009f63
 800957c:	0800a299 	.word	0x0800a299
 8009580:	1e6f      	subs	r7, r5, #1
 8009582:	f1b9 0f00 	cmp.w	r9, #0
 8009586:	d130      	bne.n	80095ea <__gethex+0x326>
 8009588:	b127      	cbz	r7, 8009594 <__gethex+0x2d0>
 800958a:	4639      	mov	r1, r7
 800958c:	4620      	mov	r0, r4
 800958e:	f7fe f8f0 	bl	8007772 <__any_on>
 8009592:	4681      	mov	r9, r0
 8009594:	117a      	asrs	r2, r7, #5
 8009596:	2301      	movs	r3, #1
 8009598:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800959c:	f007 071f 	and.w	r7, r7, #31
 80095a0:	40bb      	lsls	r3, r7
 80095a2:	4213      	tst	r3, r2
 80095a4:	4629      	mov	r1, r5
 80095a6:	4620      	mov	r0, r4
 80095a8:	bf18      	it	ne
 80095aa:	f049 0902 	orrne.w	r9, r9, #2
 80095ae:	f7ff fe21 	bl	80091f4 <rshift>
 80095b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80095b6:	1b76      	subs	r6, r6, r5
 80095b8:	2502      	movs	r5, #2
 80095ba:	f1b9 0f00 	cmp.w	r9, #0
 80095be:	d047      	beq.n	8009650 <__gethex+0x38c>
 80095c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d015      	beq.n	80095f4 <__gethex+0x330>
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d017      	beq.n	80095fc <__gethex+0x338>
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d109      	bne.n	80095e4 <__gethex+0x320>
 80095d0:	f019 0f02 	tst.w	r9, #2
 80095d4:	d006      	beq.n	80095e4 <__gethex+0x320>
 80095d6:	f8da 3000 	ldr.w	r3, [sl]
 80095da:	ea49 0903 	orr.w	r9, r9, r3
 80095de:	f019 0f01 	tst.w	r9, #1
 80095e2:	d10e      	bne.n	8009602 <__gethex+0x33e>
 80095e4:	f045 0510 	orr.w	r5, r5, #16
 80095e8:	e032      	b.n	8009650 <__gethex+0x38c>
 80095ea:	f04f 0901 	mov.w	r9, #1
 80095ee:	e7d1      	b.n	8009594 <__gethex+0x2d0>
 80095f0:	2501      	movs	r5, #1
 80095f2:	e7e2      	b.n	80095ba <__gethex+0x2f6>
 80095f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095f6:	f1c3 0301 	rsb	r3, r3, #1
 80095fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d0f0      	beq.n	80095e4 <__gethex+0x320>
 8009602:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009606:	f104 0314 	add.w	r3, r4, #20
 800960a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800960e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009612:	f04f 0c00 	mov.w	ip, #0
 8009616:	4618      	mov	r0, r3
 8009618:	f853 2b04 	ldr.w	r2, [r3], #4
 800961c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009620:	d01b      	beq.n	800965a <__gethex+0x396>
 8009622:	3201      	adds	r2, #1
 8009624:	6002      	str	r2, [r0, #0]
 8009626:	2d02      	cmp	r5, #2
 8009628:	f104 0314 	add.w	r3, r4, #20
 800962c:	d13c      	bne.n	80096a8 <__gethex+0x3e4>
 800962e:	f8d8 2000 	ldr.w	r2, [r8]
 8009632:	3a01      	subs	r2, #1
 8009634:	42b2      	cmp	r2, r6
 8009636:	d109      	bne.n	800964c <__gethex+0x388>
 8009638:	1171      	asrs	r1, r6, #5
 800963a:	2201      	movs	r2, #1
 800963c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009640:	f006 061f 	and.w	r6, r6, #31
 8009644:	fa02 f606 	lsl.w	r6, r2, r6
 8009648:	421e      	tst	r6, r3
 800964a:	d13a      	bne.n	80096c2 <__gethex+0x3fe>
 800964c:	f045 0520 	orr.w	r5, r5, #32
 8009650:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009652:	601c      	str	r4, [r3, #0]
 8009654:	9b02      	ldr	r3, [sp, #8]
 8009656:	601f      	str	r7, [r3, #0]
 8009658:	e6b0      	b.n	80093bc <__gethex+0xf8>
 800965a:	4299      	cmp	r1, r3
 800965c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009660:	d8d9      	bhi.n	8009616 <__gethex+0x352>
 8009662:	68a3      	ldr	r3, [r4, #8]
 8009664:	459b      	cmp	fp, r3
 8009666:	db17      	blt.n	8009698 <__gethex+0x3d4>
 8009668:	6861      	ldr	r1, [r4, #4]
 800966a:	9801      	ldr	r0, [sp, #4]
 800966c:	3101      	adds	r1, #1
 800966e:	f7fd fbef 	bl	8006e50 <_Balloc>
 8009672:	4681      	mov	r9, r0
 8009674:	b918      	cbnz	r0, 800967e <__gethex+0x3ba>
 8009676:	4b1a      	ldr	r3, [pc, #104]	@ (80096e0 <__gethex+0x41c>)
 8009678:	4602      	mov	r2, r0
 800967a:	2184      	movs	r1, #132	@ 0x84
 800967c:	e6c5      	b.n	800940a <__gethex+0x146>
 800967e:	6922      	ldr	r2, [r4, #16]
 8009680:	3202      	adds	r2, #2
 8009682:	f104 010c 	add.w	r1, r4, #12
 8009686:	0092      	lsls	r2, r2, #2
 8009688:	300c      	adds	r0, #12
 800968a:	f7ff fd69 	bl	8009160 <memcpy>
 800968e:	4621      	mov	r1, r4
 8009690:	9801      	ldr	r0, [sp, #4]
 8009692:	f7fd fc1d 	bl	8006ed0 <_Bfree>
 8009696:	464c      	mov	r4, r9
 8009698:	6923      	ldr	r3, [r4, #16]
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096a0:	6122      	str	r2, [r4, #16]
 80096a2:	2201      	movs	r2, #1
 80096a4:	615a      	str	r2, [r3, #20]
 80096a6:	e7be      	b.n	8009626 <__gethex+0x362>
 80096a8:	6922      	ldr	r2, [r4, #16]
 80096aa:	455a      	cmp	r2, fp
 80096ac:	dd0b      	ble.n	80096c6 <__gethex+0x402>
 80096ae:	2101      	movs	r1, #1
 80096b0:	4620      	mov	r0, r4
 80096b2:	f7ff fd9f 	bl	80091f4 <rshift>
 80096b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096ba:	3701      	adds	r7, #1
 80096bc:	42bb      	cmp	r3, r7
 80096be:	f6ff aee0 	blt.w	8009482 <__gethex+0x1be>
 80096c2:	2501      	movs	r5, #1
 80096c4:	e7c2      	b.n	800964c <__gethex+0x388>
 80096c6:	f016 061f 	ands.w	r6, r6, #31
 80096ca:	d0fa      	beq.n	80096c2 <__gethex+0x3fe>
 80096cc:	4453      	add	r3, sl
 80096ce:	f1c6 0620 	rsb	r6, r6, #32
 80096d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80096d6:	f7fd fcad 	bl	8007034 <__hi0bits>
 80096da:	42b0      	cmp	r0, r6
 80096dc:	dbe7      	blt.n	80096ae <__gethex+0x3ea>
 80096de:	e7f0      	b.n	80096c2 <__gethex+0x3fe>
 80096e0:	08009f63 	.word	0x08009f63

080096e4 <L_shift>:
 80096e4:	f1c2 0208 	rsb	r2, r2, #8
 80096e8:	0092      	lsls	r2, r2, #2
 80096ea:	b570      	push	{r4, r5, r6, lr}
 80096ec:	f1c2 0620 	rsb	r6, r2, #32
 80096f0:	6843      	ldr	r3, [r0, #4]
 80096f2:	6804      	ldr	r4, [r0, #0]
 80096f4:	fa03 f506 	lsl.w	r5, r3, r6
 80096f8:	432c      	orrs	r4, r5
 80096fa:	40d3      	lsrs	r3, r2
 80096fc:	6004      	str	r4, [r0, #0]
 80096fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8009702:	4288      	cmp	r0, r1
 8009704:	d3f4      	bcc.n	80096f0 <L_shift+0xc>
 8009706:	bd70      	pop	{r4, r5, r6, pc}

08009708 <__match>:
 8009708:	b530      	push	{r4, r5, lr}
 800970a:	6803      	ldr	r3, [r0, #0]
 800970c:	3301      	adds	r3, #1
 800970e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009712:	b914      	cbnz	r4, 800971a <__match+0x12>
 8009714:	6003      	str	r3, [r0, #0]
 8009716:	2001      	movs	r0, #1
 8009718:	bd30      	pop	{r4, r5, pc}
 800971a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800971e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009722:	2d19      	cmp	r5, #25
 8009724:	bf98      	it	ls
 8009726:	3220      	addls	r2, #32
 8009728:	42a2      	cmp	r2, r4
 800972a:	d0f0      	beq.n	800970e <__match+0x6>
 800972c:	2000      	movs	r0, #0
 800972e:	e7f3      	b.n	8009718 <__match+0x10>

08009730 <__hexnan>:
 8009730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009734:	680b      	ldr	r3, [r1, #0]
 8009736:	6801      	ldr	r1, [r0, #0]
 8009738:	115e      	asrs	r6, r3, #5
 800973a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800973e:	f013 031f 	ands.w	r3, r3, #31
 8009742:	b087      	sub	sp, #28
 8009744:	bf18      	it	ne
 8009746:	3604      	addne	r6, #4
 8009748:	2500      	movs	r5, #0
 800974a:	1f37      	subs	r7, r6, #4
 800974c:	4682      	mov	sl, r0
 800974e:	4690      	mov	r8, r2
 8009750:	9301      	str	r3, [sp, #4]
 8009752:	f846 5c04 	str.w	r5, [r6, #-4]
 8009756:	46b9      	mov	r9, r7
 8009758:	463c      	mov	r4, r7
 800975a:	9502      	str	r5, [sp, #8]
 800975c:	46ab      	mov	fp, r5
 800975e:	784a      	ldrb	r2, [r1, #1]
 8009760:	1c4b      	adds	r3, r1, #1
 8009762:	9303      	str	r3, [sp, #12]
 8009764:	b342      	cbz	r2, 80097b8 <__hexnan+0x88>
 8009766:	4610      	mov	r0, r2
 8009768:	9105      	str	r1, [sp, #20]
 800976a:	9204      	str	r2, [sp, #16]
 800976c:	f7ff fd94 	bl	8009298 <__hexdig_fun>
 8009770:	2800      	cmp	r0, #0
 8009772:	d151      	bne.n	8009818 <__hexnan+0xe8>
 8009774:	9a04      	ldr	r2, [sp, #16]
 8009776:	9905      	ldr	r1, [sp, #20]
 8009778:	2a20      	cmp	r2, #32
 800977a:	d818      	bhi.n	80097ae <__hexnan+0x7e>
 800977c:	9b02      	ldr	r3, [sp, #8]
 800977e:	459b      	cmp	fp, r3
 8009780:	dd13      	ble.n	80097aa <__hexnan+0x7a>
 8009782:	454c      	cmp	r4, r9
 8009784:	d206      	bcs.n	8009794 <__hexnan+0x64>
 8009786:	2d07      	cmp	r5, #7
 8009788:	dc04      	bgt.n	8009794 <__hexnan+0x64>
 800978a:	462a      	mov	r2, r5
 800978c:	4649      	mov	r1, r9
 800978e:	4620      	mov	r0, r4
 8009790:	f7ff ffa8 	bl	80096e4 <L_shift>
 8009794:	4544      	cmp	r4, r8
 8009796:	d952      	bls.n	800983e <__hexnan+0x10e>
 8009798:	2300      	movs	r3, #0
 800979a:	f1a4 0904 	sub.w	r9, r4, #4
 800979e:	f844 3c04 	str.w	r3, [r4, #-4]
 80097a2:	f8cd b008 	str.w	fp, [sp, #8]
 80097a6:	464c      	mov	r4, r9
 80097a8:	461d      	mov	r5, r3
 80097aa:	9903      	ldr	r1, [sp, #12]
 80097ac:	e7d7      	b.n	800975e <__hexnan+0x2e>
 80097ae:	2a29      	cmp	r2, #41	@ 0x29
 80097b0:	d157      	bne.n	8009862 <__hexnan+0x132>
 80097b2:	3102      	adds	r1, #2
 80097b4:	f8ca 1000 	str.w	r1, [sl]
 80097b8:	f1bb 0f00 	cmp.w	fp, #0
 80097bc:	d051      	beq.n	8009862 <__hexnan+0x132>
 80097be:	454c      	cmp	r4, r9
 80097c0:	d206      	bcs.n	80097d0 <__hexnan+0xa0>
 80097c2:	2d07      	cmp	r5, #7
 80097c4:	dc04      	bgt.n	80097d0 <__hexnan+0xa0>
 80097c6:	462a      	mov	r2, r5
 80097c8:	4649      	mov	r1, r9
 80097ca:	4620      	mov	r0, r4
 80097cc:	f7ff ff8a 	bl	80096e4 <L_shift>
 80097d0:	4544      	cmp	r4, r8
 80097d2:	d936      	bls.n	8009842 <__hexnan+0x112>
 80097d4:	f1a8 0204 	sub.w	r2, r8, #4
 80097d8:	4623      	mov	r3, r4
 80097da:	f853 1b04 	ldr.w	r1, [r3], #4
 80097de:	f842 1f04 	str.w	r1, [r2, #4]!
 80097e2:	429f      	cmp	r7, r3
 80097e4:	d2f9      	bcs.n	80097da <__hexnan+0xaa>
 80097e6:	1b3b      	subs	r3, r7, r4
 80097e8:	f023 0303 	bic.w	r3, r3, #3
 80097ec:	3304      	adds	r3, #4
 80097ee:	3401      	adds	r4, #1
 80097f0:	3e03      	subs	r6, #3
 80097f2:	42b4      	cmp	r4, r6
 80097f4:	bf88      	it	hi
 80097f6:	2304      	movhi	r3, #4
 80097f8:	4443      	add	r3, r8
 80097fa:	2200      	movs	r2, #0
 80097fc:	f843 2b04 	str.w	r2, [r3], #4
 8009800:	429f      	cmp	r7, r3
 8009802:	d2fb      	bcs.n	80097fc <__hexnan+0xcc>
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	b91b      	cbnz	r3, 8009810 <__hexnan+0xe0>
 8009808:	4547      	cmp	r7, r8
 800980a:	d128      	bne.n	800985e <__hexnan+0x12e>
 800980c:	2301      	movs	r3, #1
 800980e:	603b      	str	r3, [r7, #0]
 8009810:	2005      	movs	r0, #5
 8009812:	b007      	add	sp, #28
 8009814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009818:	3501      	adds	r5, #1
 800981a:	2d08      	cmp	r5, #8
 800981c:	f10b 0b01 	add.w	fp, fp, #1
 8009820:	dd06      	ble.n	8009830 <__hexnan+0x100>
 8009822:	4544      	cmp	r4, r8
 8009824:	d9c1      	bls.n	80097aa <__hexnan+0x7a>
 8009826:	2300      	movs	r3, #0
 8009828:	f844 3c04 	str.w	r3, [r4, #-4]
 800982c:	2501      	movs	r5, #1
 800982e:	3c04      	subs	r4, #4
 8009830:	6822      	ldr	r2, [r4, #0]
 8009832:	f000 000f 	and.w	r0, r0, #15
 8009836:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800983a:	6020      	str	r0, [r4, #0]
 800983c:	e7b5      	b.n	80097aa <__hexnan+0x7a>
 800983e:	2508      	movs	r5, #8
 8009840:	e7b3      	b.n	80097aa <__hexnan+0x7a>
 8009842:	9b01      	ldr	r3, [sp, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d0dd      	beq.n	8009804 <__hexnan+0xd4>
 8009848:	f1c3 0320 	rsb	r3, r3, #32
 800984c:	f04f 32ff 	mov.w	r2, #4294967295
 8009850:	40da      	lsrs	r2, r3
 8009852:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009856:	4013      	ands	r3, r2
 8009858:	f846 3c04 	str.w	r3, [r6, #-4]
 800985c:	e7d2      	b.n	8009804 <__hexnan+0xd4>
 800985e:	3f04      	subs	r7, #4
 8009860:	e7d0      	b.n	8009804 <__hexnan+0xd4>
 8009862:	2004      	movs	r0, #4
 8009864:	e7d5      	b.n	8009812 <__hexnan+0xe2>

08009866 <__ascii_mbtowc>:
 8009866:	b082      	sub	sp, #8
 8009868:	b901      	cbnz	r1, 800986c <__ascii_mbtowc+0x6>
 800986a:	a901      	add	r1, sp, #4
 800986c:	b142      	cbz	r2, 8009880 <__ascii_mbtowc+0x1a>
 800986e:	b14b      	cbz	r3, 8009884 <__ascii_mbtowc+0x1e>
 8009870:	7813      	ldrb	r3, [r2, #0]
 8009872:	600b      	str	r3, [r1, #0]
 8009874:	7812      	ldrb	r2, [r2, #0]
 8009876:	1e10      	subs	r0, r2, #0
 8009878:	bf18      	it	ne
 800987a:	2001      	movne	r0, #1
 800987c:	b002      	add	sp, #8
 800987e:	4770      	bx	lr
 8009880:	4610      	mov	r0, r2
 8009882:	e7fb      	b.n	800987c <__ascii_mbtowc+0x16>
 8009884:	f06f 0001 	mvn.w	r0, #1
 8009888:	e7f8      	b.n	800987c <__ascii_mbtowc+0x16>

0800988a <_realloc_r>:
 800988a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800988e:	4680      	mov	r8, r0
 8009890:	4615      	mov	r5, r2
 8009892:	460c      	mov	r4, r1
 8009894:	b921      	cbnz	r1, 80098a0 <_realloc_r+0x16>
 8009896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800989a:	4611      	mov	r1, r2
 800989c:	f7fd ba4c 	b.w	8006d38 <_malloc_r>
 80098a0:	b92a      	cbnz	r2, 80098ae <_realloc_r+0x24>
 80098a2:	f7fd f9d5 	bl	8006c50 <_free_r>
 80098a6:	2400      	movs	r4, #0
 80098a8:	4620      	mov	r0, r4
 80098aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ae:	f000 f8b2 	bl	8009a16 <_malloc_usable_size_r>
 80098b2:	4285      	cmp	r5, r0
 80098b4:	4606      	mov	r6, r0
 80098b6:	d802      	bhi.n	80098be <_realloc_r+0x34>
 80098b8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80098bc:	d8f4      	bhi.n	80098a8 <_realloc_r+0x1e>
 80098be:	4629      	mov	r1, r5
 80098c0:	4640      	mov	r0, r8
 80098c2:	f7fd fa39 	bl	8006d38 <_malloc_r>
 80098c6:	4607      	mov	r7, r0
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d0ec      	beq.n	80098a6 <_realloc_r+0x1c>
 80098cc:	42b5      	cmp	r5, r6
 80098ce:	462a      	mov	r2, r5
 80098d0:	4621      	mov	r1, r4
 80098d2:	bf28      	it	cs
 80098d4:	4632      	movcs	r2, r6
 80098d6:	f7ff fc43 	bl	8009160 <memcpy>
 80098da:	4621      	mov	r1, r4
 80098dc:	4640      	mov	r0, r8
 80098de:	f7fd f9b7 	bl	8006c50 <_free_r>
 80098e2:	463c      	mov	r4, r7
 80098e4:	e7e0      	b.n	80098a8 <_realloc_r+0x1e>
	...

080098e8 <_strtoul_l.constprop.0>:
 80098e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098ec:	4e34      	ldr	r6, [pc, #208]	@ (80099c0 <_strtoul_l.constprop.0+0xd8>)
 80098ee:	4686      	mov	lr, r0
 80098f0:	460d      	mov	r5, r1
 80098f2:	4628      	mov	r0, r5
 80098f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098f8:	5d37      	ldrb	r7, [r6, r4]
 80098fa:	f017 0708 	ands.w	r7, r7, #8
 80098fe:	d1f8      	bne.n	80098f2 <_strtoul_l.constprop.0+0xa>
 8009900:	2c2d      	cmp	r4, #45	@ 0x2d
 8009902:	d12f      	bne.n	8009964 <_strtoul_l.constprop.0+0x7c>
 8009904:	782c      	ldrb	r4, [r5, #0]
 8009906:	2701      	movs	r7, #1
 8009908:	1c85      	adds	r5, r0, #2
 800990a:	f033 0010 	bics.w	r0, r3, #16
 800990e:	d109      	bne.n	8009924 <_strtoul_l.constprop.0+0x3c>
 8009910:	2c30      	cmp	r4, #48	@ 0x30
 8009912:	d12c      	bne.n	800996e <_strtoul_l.constprop.0+0x86>
 8009914:	7828      	ldrb	r0, [r5, #0]
 8009916:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800991a:	2858      	cmp	r0, #88	@ 0x58
 800991c:	d127      	bne.n	800996e <_strtoul_l.constprop.0+0x86>
 800991e:	786c      	ldrb	r4, [r5, #1]
 8009920:	2310      	movs	r3, #16
 8009922:	3502      	adds	r5, #2
 8009924:	f04f 38ff 	mov.w	r8, #4294967295
 8009928:	2600      	movs	r6, #0
 800992a:	fbb8 f8f3 	udiv	r8, r8, r3
 800992e:	fb03 f908 	mul.w	r9, r3, r8
 8009932:	ea6f 0909 	mvn.w	r9, r9
 8009936:	4630      	mov	r0, r6
 8009938:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800993c:	f1bc 0f09 	cmp.w	ip, #9
 8009940:	d81c      	bhi.n	800997c <_strtoul_l.constprop.0+0x94>
 8009942:	4664      	mov	r4, ip
 8009944:	42a3      	cmp	r3, r4
 8009946:	dd2a      	ble.n	800999e <_strtoul_l.constprop.0+0xb6>
 8009948:	f1b6 3fff 	cmp.w	r6, #4294967295
 800994c:	d007      	beq.n	800995e <_strtoul_l.constprop.0+0x76>
 800994e:	4580      	cmp	r8, r0
 8009950:	d322      	bcc.n	8009998 <_strtoul_l.constprop.0+0xb0>
 8009952:	d101      	bne.n	8009958 <_strtoul_l.constprop.0+0x70>
 8009954:	45a1      	cmp	r9, r4
 8009956:	db1f      	blt.n	8009998 <_strtoul_l.constprop.0+0xb0>
 8009958:	fb00 4003 	mla	r0, r0, r3, r4
 800995c:	2601      	movs	r6, #1
 800995e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009962:	e7e9      	b.n	8009938 <_strtoul_l.constprop.0+0x50>
 8009964:	2c2b      	cmp	r4, #43	@ 0x2b
 8009966:	bf04      	itt	eq
 8009968:	782c      	ldrbeq	r4, [r5, #0]
 800996a:	1c85      	addeq	r5, r0, #2
 800996c:	e7cd      	b.n	800990a <_strtoul_l.constprop.0+0x22>
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1d8      	bne.n	8009924 <_strtoul_l.constprop.0+0x3c>
 8009972:	2c30      	cmp	r4, #48	@ 0x30
 8009974:	bf0c      	ite	eq
 8009976:	2308      	moveq	r3, #8
 8009978:	230a      	movne	r3, #10
 800997a:	e7d3      	b.n	8009924 <_strtoul_l.constprop.0+0x3c>
 800997c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009980:	f1bc 0f19 	cmp.w	ip, #25
 8009984:	d801      	bhi.n	800998a <_strtoul_l.constprop.0+0xa2>
 8009986:	3c37      	subs	r4, #55	@ 0x37
 8009988:	e7dc      	b.n	8009944 <_strtoul_l.constprop.0+0x5c>
 800998a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800998e:	f1bc 0f19 	cmp.w	ip, #25
 8009992:	d804      	bhi.n	800999e <_strtoul_l.constprop.0+0xb6>
 8009994:	3c57      	subs	r4, #87	@ 0x57
 8009996:	e7d5      	b.n	8009944 <_strtoul_l.constprop.0+0x5c>
 8009998:	f04f 36ff 	mov.w	r6, #4294967295
 800999c:	e7df      	b.n	800995e <_strtoul_l.constprop.0+0x76>
 800999e:	1c73      	adds	r3, r6, #1
 80099a0:	d106      	bne.n	80099b0 <_strtoul_l.constprop.0+0xc8>
 80099a2:	2322      	movs	r3, #34	@ 0x22
 80099a4:	f8ce 3000 	str.w	r3, [lr]
 80099a8:	4630      	mov	r0, r6
 80099aa:	b932      	cbnz	r2, 80099ba <_strtoul_l.constprop.0+0xd2>
 80099ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099b0:	b107      	cbz	r7, 80099b4 <_strtoul_l.constprop.0+0xcc>
 80099b2:	4240      	negs	r0, r0
 80099b4:	2a00      	cmp	r2, #0
 80099b6:	d0f9      	beq.n	80099ac <_strtoul_l.constprop.0+0xc4>
 80099b8:	b106      	cbz	r6, 80099bc <_strtoul_l.constprop.0+0xd4>
 80099ba:	1e69      	subs	r1, r5, #1
 80099bc:	6011      	str	r1, [r2, #0]
 80099be:	e7f5      	b.n	80099ac <_strtoul_l.constprop.0+0xc4>
 80099c0:	0800a129 	.word	0x0800a129

080099c4 <_strtoul_r>:
 80099c4:	f7ff bf90 	b.w	80098e8 <_strtoul_l.constprop.0>

080099c8 <__ascii_wctomb>:
 80099c8:	4603      	mov	r3, r0
 80099ca:	4608      	mov	r0, r1
 80099cc:	b141      	cbz	r1, 80099e0 <__ascii_wctomb+0x18>
 80099ce:	2aff      	cmp	r2, #255	@ 0xff
 80099d0:	d904      	bls.n	80099dc <__ascii_wctomb+0x14>
 80099d2:	228a      	movs	r2, #138	@ 0x8a
 80099d4:	601a      	str	r2, [r3, #0]
 80099d6:	f04f 30ff 	mov.w	r0, #4294967295
 80099da:	4770      	bx	lr
 80099dc:	700a      	strb	r2, [r1, #0]
 80099de:	2001      	movs	r0, #1
 80099e0:	4770      	bx	lr
	...

080099e4 <fiprintf>:
 80099e4:	b40e      	push	{r1, r2, r3}
 80099e6:	b503      	push	{r0, r1, lr}
 80099e8:	4601      	mov	r1, r0
 80099ea:	ab03      	add	r3, sp, #12
 80099ec:	4805      	ldr	r0, [pc, #20]	@ (8009a04 <fiprintf+0x20>)
 80099ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80099f2:	6800      	ldr	r0, [r0, #0]
 80099f4:	9301      	str	r3, [sp, #4]
 80099f6:	f000 f83f 	bl	8009a78 <_vfiprintf_r>
 80099fa:	b002      	add	sp, #8
 80099fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a00:	b003      	add	sp, #12
 8009a02:	4770      	bx	lr
 8009a04:	20000018 	.word	0x20000018

08009a08 <abort>:
 8009a08:	b508      	push	{r3, lr}
 8009a0a:	2006      	movs	r0, #6
 8009a0c:	f000 f974 	bl	8009cf8 <raise>
 8009a10:	2001      	movs	r0, #1
 8009a12:	f7f7 fd03 	bl	800141c <_exit>

08009a16 <_malloc_usable_size_r>:
 8009a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a1a:	1f18      	subs	r0, r3, #4
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	bfbc      	itt	lt
 8009a20:	580b      	ldrlt	r3, [r1, r0]
 8009a22:	18c0      	addlt	r0, r0, r3
 8009a24:	4770      	bx	lr

08009a26 <__sfputc_r>:
 8009a26:	6893      	ldr	r3, [r2, #8]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	b410      	push	{r4}
 8009a2e:	6093      	str	r3, [r2, #8]
 8009a30:	da08      	bge.n	8009a44 <__sfputc_r+0x1e>
 8009a32:	6994      	ldr	r4, [r2, #24]
 8009a34:	42a3      	cmp	r3, r4
 8009a36:	db01      	blt.n	8009a3c <__sfputc_r+0x16>
 8009a38:	290a      	cmp	r1, #10
 8009a3a:	d103      	bne.n	8009a44 <__sfputc_r+0x1e>
 8009a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a40:	f7fc b99f 	b.w	8005d82 <__swbuf_r>
 8009a44:	6813      	ldr	r3, [r2, #0]
 8009a46:	1c58      	adds	r0, r3, #1
 8009a48:	6010      	str	r0, [r2, #0]
 8009a4a:	7019      	strb	r1, [r3, #0]
 8009a4c:	4608      	mov	r0, r1
 8009a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <__sfputs_r>:
 8009a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a56:	4606      	mov	r6, r0
 8009a58:	460f      	mov	r7, r1
 8009a5a:	4614      	mov	r4, r2
 8009a5c:	18d5      	adds	r5, r2, r3
 8009a5e:	42ac      	cmp	r4, r5
 8009a60:	d101      	bne.n	8009a66 <__sfputs_r+0x12>
 8009a62:	2000      	movs	r0, #0
 8009a64:	e007      	b.n	8009a76 <__sfputs_r+0x22>
 8009a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a6a:	463a      	mov	r2, r7
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	f7ff ffda 	bl	8009a26 <__sfputc_r>
 8009a72:	1c43      	adds	r3, r0, #1
 8009a74:	d1f3      	bne.n	8009a5e <__sfputs_r+0xa>
 8009a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a78 <_vfiprintf_r>:
 8009a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7c:	460d      	mov	r5, r1
 8009a7e:	b09d      	sub	sp, #116	@ 0x74
 8009a80:	4614      	mov	r4, r2
 8009a82:	4698      	mov	r8, r3
 8009a84:	4606      	mov	r6, r0
 8009a86:	b118      	cbz	r0, 8009a90 <_vfiprintf_r+0x18>
 8009a88:	6a03      	ldr	r3, [r0, #32]
 8009a8a:	b90b      	cbnz	r3, 8009a90 <_vfiprintf_r+0x18>
 8009a8c:	f7fc f856 	bl	8005b3c <__sinit>
 8009a90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a92:	07d9      	lsls	r1, r3, #31
 8009a94:	d405      	bmi.n	8009aa2 <_vfiprintf_r+0x2a>
 8009a96:	89ab      	ldrh	r3, [r5, #12]
 8009a98:	059a      	lsls	r2, r3, #22
 8009a9a:	d402      	bmi.n	8009aa2 <_vfiprintf_r+0x2a>
 8009a9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a9e:	f7fc fa82 	bl	8005fa6 <__retarget_lock_acquire_recursive>
 8009aa2:	89ab      	ldrh	r3, [r5, #12]
 8009aa4:	071b      	lsls	r3, r3, #28
 8009aa6:	d501      	bpl.n	8009aac <_vfiprintf_r+0x34>
 8009aa8:	692b      	ldr	r3, [r5, #16]
 8009aaa:	b99b      	cbnz	r3, 8009ad4 <_vfiprintf_r+0x5c>
 8009aac:	4629      	mov	r1, r5
 8009aae:	4630      	mov	r0, r6
 8009ab0:	f7fc f9a6 	bl	8005e00 <__swsetup_r>
 8009ab4:	b170      	cbz	r0, 8009ad4 <_vfiprintf_r+0x5c>
 8009ab6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ab8:	07dc      	lsls	r4, r3, #31
 8009aba:	d504      	bpl.n	8009ac6 <_vfiprintf_r+0x4e>
 8009abc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac0:	b01d      	add	sp, #116	@ 0x74
 8009ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac6:	89ab      	ldrh	r3, [r5, #12]
 8009ac8:	0598      	lsls	r0, r3, #22
 8009aca:	d4f7      	bmi.n	8009abc <_vfiprintf_r+0x44>
 8009acc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ace:	f7fc fa6b 	bl	8005fa8 <__retarget_lock_release_recursive>
 8009ad2:	e7f3      	b.n	8009abc <_vfiprintf_r+0x44>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ad8:	2320      	movs	r3, #32
 8009ada:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ade:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ae2:	2330      	movs	r3, #48	@ 0x30
 8009ae4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009c94 <_vfiprintf_r+0x21c>
 8009ae8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009aec:	f04f 0901 	mov.w	r9, #1
 8009af0:	4623      	mov	r3, r4
 8009af2:	469a      	mov	sl, r3
 8009af4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009af8:	b10a      	cbz	r2, 8009afe <_vfiprintf_r+0x86>
 8009afa:	2a25      	cmp	r2, #37	@ 0x25
 8009afc:	d1f9      	bne.n	8009af2 <_vfiprintf_r+0x7a>
 8009afe:	ebba 0b04 	subs.w	fp, sl, r4
 8009b02:	d00b      	beq.n	8009b1c <_vfiprintf_r+0xa4>
 8009b04:	465b      	mov	r3, fp
 8009b06:	4622      	mov	r2, r4
 8009b08:	4629      	mov	r1, r5
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f7ff ffa2 	bl	8009a54 <__sfputs_r>
 8009b10:	3001      	adds	r0, #1
 8009b12:	f000 80a7 	beq.w	8009c64 <_vfiprintf_r+0x1ec>
 8009b16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b18:	445a      	add	r2, fp
 8009b1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 809f 	beq.w	8009c64 <_vfiprintf_r+0x1ec>
 8009b26:	2300      	movs	r3, #0
 8009b28:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b30:	f10a 0a01 	add.w	sl, sl, #1
 8009b34:	9304      	str	r3, [sp, #16]
 8009b36:	9307      	str	r3, [sp, #28]
 8009b38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b3e:	4654      	mov	r4, sl
 8009b40:	2205      	movs	r2, #5
 8009b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b46:	4853      	ldr	r0, [pc, #332]	@ (8009c94 <_vfiprintf_r+0x21c>)
 8009b48:	f7f6 fb52 	bl	80001f0 <memchr>
 8009b4c:	9a04      	ldr	r2, [sp, #16]
 8009b4e:	b9d8      	cbnz	r0, 8009b88 <_vfiprintf_r+0x110>
 8009b50:	06d1      	lsls	r1, r2, #27
 8009b52:	bf44      	itt	mi
 8009b54:	2320      	movmi	r3, #32
 8009b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b5a:	0713      	lsls	r3, r2, #28
 8009b5c:	bf44      	itt	mi
 8009b5e:	232b      	movmi	r3, #43	@ 0x2b
 8009b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b64:	f89a 3000 	ldrb.w	r3, [sl]
 8009b68:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b6a:	d015      	beq.n	8009b98 <_vfiprintf_r+0x120>
 8009b6c:	9a07      	ldr	r2, [sp, #28]
 8009b6e:	4654      	mov	r4, sl
 8009b70:	2000      	movs	r0, #0
 8009b72:	f04f 0c0a 	mov.w	ip, #10
 8009b76:	4621      	mov	r1, r4
 8009b78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b7c:	3b30      	subs	r3, #48	@ 0x30
 8009b7e:	2b09      	cmp	r3, #9
 8009b80:	d94b      	bls.n	8009c1a <_vfiprintf_r+0x1a2>
 8009b82:	b1b0      	cbz	r0, 8009bb2 <_vfiprintf_r+0x13a>
 8009b84:	9207      	str	r2, [sp, #28]
 8009b86:	e014      	b.n	8009bb2 <_vfiprintf_r+0x13a>
 8009b88:	eba0 0308 	sub.w	r3, r0, r8
 8009b8c:	fa09 f303 	lsl.w	r3, r9, r3
 8009b90:	4313      	orrs	r3, r2
 8009b92:	9304      	str	r3, [sp, #16]
 8009b94:	46a2      	mov	sl, r4
 8009b96:	e7d2      	b.n	8009b3e <_vfiprintf_r+0xc6>
 8009b98:	9b03      	ldr	r3, [sp, #12]
 8009b9a:	1d19      	adds	r1, r3, #4
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	9103      	str	r1, [sp, #12]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	bfbb      	ittet	lt
 8009ba4:	425b      	neglt	r3, r3
 8009ba6:	f042 0202 	orrlt.w	r2, r2, #2
 8009baa:	9307      	strge	r3, [sp, #28]
 8009bac:	9307      	strlt	r3, [sp, #28]
 8009bae:	bfb8      	it	lt
 8009bb0:	9204      	strlt	r2, [sp, #16]
 8009bb2:	7823      	ldrb	r3, [r4, #0]
 8009bb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bb6:	d10a      	bne.n	8009bce <_vfiprintf_r+0x156>
 8009bb8:	7863      	ldrb	r3, [r4, #1]
 8009bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bbc:	d132      	bne.n	8009c24 <_vfiprintf_r+0x1ac>
 8009bbe:	9b03      	ldr	r3, [sp, #12]
 8009bc0:	1d1a      	adds	r2, r3, #4
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	9203      	str	r2, [sp, #12]
 8009bc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bca:	3402      	adds	r4, #2
 8009bcc:	9305      	str	r3, [sp, #20]
 8009bce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ca4 <_vfiprintf_r+0x22c>
 8009bd2:	7821      	ldrb	r1, [r4, #0]
 8009bd4:	2203      	movs	r2, #3
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	f7f6 fb0a 	bl	80001f0 <memchr>
 8009bdc:	b138      	cbz	r0, 8009bee <_vfiprintf_r+0x176>
 8009bde:	9b04      	ldr	r3, [sp, #16]
 8009be0:	eba0 000a 	sub.w	r0, r0, sl
 8009be4:	2240      	movs	r2, #64	@ 0x40
 8009be6:	4082      	lsls	r2, r0
 8009be8:	4313      	orrs	r3, r2
 8009bea:	3401      	adds	r4, #1
 8009bec:	9304      	str	r3, [sp, #16]
 8009bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf2:	4829      	ldr	r0, [pc, #164]	@ (8009c98 <_vfiprintf_r+0x220>)
 8009bf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bf8:	2206      	movs	r2, #6
 8009bfa:	f7f6 faf9 	bl	80001f0 <memchr>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d03f      	beq.n	8009c82 <_vfiprintf_r+0x20a>
 8009c02:	4b26      	ldr	r3, [pc, #152]	@ (8009c9c <_vfiprintf_r+0x224>)
 8009c04:	bb1b      	cbnz	r3, 8009c4e <_vfiprintf_r+0x1d6>
 8009c06:	9b03      	ldr	r3, [sp, #12]
 8009c08:	3307      	adds	r3, #7
 8009c0a:	f023 0307 	bic.w	r3, r3, #7
 8009c0e:	3308      	adds	r3, #8
 8009c10:	9303      	str	r3, [sp, #12]
 8009c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c14:	443b      	add	r3, r7
 8009c16:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c18:	e76a      	b.n	8009af0 <_vfiprintf_r+0x78>
 8009c1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c1e:	460c      	mov	r4, r1
 8009c20:	2001      	movs	r0, #1
 8009c22:	e7a8      	b.n	8009b76 <_vfiprintf_r+0xfe>
 8009c24:	2300      	movs	r3, #0
 8009c26:	3401      	adds	r4, #1
 8009c28:	9305      	str	r3, [sp, #20]
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	f04f 0c0a 	mov.w	ip, #10
 8009c30:	4620      	mov	r0, r4
 8009c32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c36:	3a30      	subs	r2, #48	@ 0x30
 8009c38:	2a09      	cmp	r2, #9
 8009c3a:	d903      	bls.n	8009c44 <_vfiprintf_r+0x1cc>
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d0c6      	beq.n	8009bce <_vfiprintf_r+0x156>
 8009c40:	9105      	str	r1, [sp, #20]
 8009c42:	e7c4      	b.n	8009bce <_vfiprintf_r+0x156>
 8009c44:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c48:	4604      	mov	r4, r0
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e7f0      	b.n	8009c30 <_vfiprintf_r+0x1b8>
 8009c4e:	ab03      	add	r3, sp, #12
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	462a      	mov	r2, r5
 8009c54:	4b12      	ldr	r3, [pc, #72]	@ (8009ca0 <_vfiprintf_r+0x228>)
 8009c56:	a904      	add	r1, sp, #16
 8009c58:	4630      	mov	r0, r6
 8009c5a:	f7fb f917 	bl	8004e8c <_printf_float>
 8009c5e:	4607      	mov	r7, r0
 8009c60:	1c78      	adds	r0, r7, #1
 8009c62:	d1d6      	bne.n	8009c12 <_vfiprintf_r+0x19a>
 8009c64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c66:	07d9      	lsls	r1, r3, #31
 8009c68:	d405      	bmi.n	8009c76 <_vfiprintf_r+0x1fe>
 8009c6a:	89ab      	ldrh	r3, [r5, #12]
 8009c6c:	059a      	lsls	r2, r3, #22
 8009c6e:	d402      	bmi.n	8009c76 <_vfiprintf_r+0x1fe>
 8009c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c72:	f7fc f999 	bl	8005fa8 <__retarget_lock_release_recursive>
 8009c76:	89ab      	ldrh	r3, [r5, #12]
 8009c78:	065b      	lsls	r3, r3, #25
 8009c7a:	f53f af1f 	bmi.w	8009abc <_vfiprintf_r+0x44>
 8009c7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c80:	e71e      	b.n	8009ac0 <_vfiprintf_r+0x48>
 8009c82:	ab03      	add	r3, sp, #12
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	462a      	mov	r2, r5
 8009c88:	4b05      	ldr	r3, [pc, #20]	@ (8009ca0 <_vfiprintf_r+0x228>)
 8009c8a:	a904      	add	r1, sp, #16
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f7fb fb95 	bl	80053bc <_printf_i>
 8009c92:	e7e4      	b.n	8009c5e <_vfiprintf_r+0x1e6>
 8009c94:	0800a229 	.word	0x0800a229
 8009c98:	0800a233 	.word	0x0800a233
 8009c9c:	08004e8d 	.word	0x08004e8d
 8009ca0:	08009a55 	.word	0x08009a55
 8009ca4:	0800a22f 	.word	0x0800a22f

08009ca8 <_raise_r>:
 8009ca8:	291f      	cmp	r1, #31
 8009caa:	b538      	push	{r3, r4, r5, lr}
 8009cac:	4605      	mov	r5, r0
 8009cae:	460c      	mov	r4, r1
 8009cb0:	d904      	bls.n	8009cbc <_raise_r+0x14>
 8009cb2:	2316      	movs	r3, #22
 8009cb4:	6003      	str	r3, [r0, #0]
 8009cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cba:	bd38      	pop	{r3, r4, r5, pc}
 8009cbc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009cbe:	b112      	cbz	r2, 8009cc6 <_raise_r+0x1e>
 8009cc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cc4:	b94b      	cbnz	r3, 8009cda <_raise_r+0x32>
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	f000 f830 	bl	8009d2c <_getpid_r>
 8009ccc:	4622      	mov	r2, r4
 8009cce:	4601      	mov	r1, r0
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cd6:	f000 b817 	b.w	8009d08 <_kill_r>
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d00a      	beq.n	8009cf4 <_raise_r+0x4c>
 8009cde:	1c59      	adds	r1, r3, #1
 8009ce0:	d103      	bne.n	8009cea <_raise_r+0x42>
 8009ce2:	2316      	movs	r3, #22
 8009ce4:	6003      	str	r3, [r0, #0]
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	e7e7      	b.n	8009cba <_raise_r+0x12>
 8009cea:	2100      	movs	r1, #0
 8009cec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	4798      	blx	r3
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	e7e0      	b.n	8009cba <_raise_r+0x12>

08009cf8 <raise>:
 8009cf8:	4b02      	ldr	r3, [pc, #8]	@ (8009d04 <raise+0xc>)
 8009cfa:	4601      	mov	r1, r0
 8009cfc:	6818      	ldr	r0, [r3, #0]
 8009cfe:	f7ff bfd3 	b.w	8009ca8 <_raise_r>
 8009d02:	bf00      	nop
 8009d04:	20000018 	.word	0x20000018

08009d08 <_kill_r>:
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	4d07      	ldr	r5, [pc, #28]	@ (8009d28 <_kill_r+0x20>)
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	4604      	mov	r4, r0
 8009d10:	4608      	mov	r0, r1
 8009d12:	4611      	mov	r1, r2
 8009d14:	602b      	str	r3, [r5, #0]
 8009d16:	f7f7 fb71 	bl	80013fc <_kill>
 8009d1a:	1c43      	adds	r3, r0, #1
 8009d1c:	d102      	bne.n	8009d24 <_kill_r+0x1c>
 8009d1e:	682b      	ldr	r3, [r5, #0]
 8009d20:	b103      	cbz	r3, 8009d24 <_kill_r+0x1c>
 8009d22:	6023      	str	r3, [r4, #0]
 8009d24:	bd38      	pop	{r3, r4, r5, pc}
 8009d26:	bf00      	nop
 8009d28:	200004a8 	.word	0x200004a8

08009d2c <_getpid_r>:
 8009d2c:	f7f7 bb5e 	b.w	80013ec <_getpid>

08009d30 <_init>:
 8009d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d32:	bf00      	nop
 8009d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d36:	bc08      	pop	{r3}
 8009d38:	469e      	mov	lr, r3
 8009d3a:	4770      	bx	lr

08009d3c <_fini>:
 8009d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3e:	bf00      	nop
 8009d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d42:	bc08      	pop	{r3}
 8009d44:	469e      	mov	lr, r3
 8009d46:	4770      	bx	lr
