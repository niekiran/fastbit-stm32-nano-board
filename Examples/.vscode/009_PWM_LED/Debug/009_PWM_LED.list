
009_PWM_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d1c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002ea4  08002ea4  00003ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ed4  08002ed4  0000401c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ed4  08002ed4  0000401c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ed4  08002ed4  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ed4  08002ed4  00003ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ed8  08002ed8  00003ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08002edc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000401c  2**0
                  CONTENTS
 10 .bss          00000070  2000001c  2000001c  0000401c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000008c  2000008c  0000401c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008f7e  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001686  00000000  00000000  0000cfca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  0000e650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074b  00000000  00000000  0000efc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6cc  00000000  00000000  0000f713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6cf  00000000  00000000  0002bddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae2a5  00000000  00000000  000374ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e5753  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000270c  00000000  00000000  000e5798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  000e7ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e8c 	.word	0x08002e8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08002e8c 	.word	0x08002e8c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 faac 	bl	8000728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f822 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8d6 	bl	8000384 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f864 	bl	80002a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK ||
 80001dc:	2104      	movs	r1, #4
 80001de:	480d      	ldr	r0, [pc, #52]	@ (8000214 <main+0x4c>)
 80001e0:	f002 f808 	bl	80021f4 <HAL_TIM_PWM_Start>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d10d      	bne.n	8000206 <main+0x3e>
      HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK ||
 80001ea:	210c      	movs	r1, #12
 80001ec:	4809      	ldr	r0, [pc, #36]	@ (8000214 <main+0x4c>)
 80001ee:	f002 f801 	bl	80021f4 <HAL_TIM_PWM_Start>
 80001f2:	4603      	mov	r3, r0
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK ||
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d106      	bne.n	8000206 <main+0x3e>
      HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK) {
 80001f8:	2108      	movs	r1, #8
 80001fa:	4806      	ldr	r0, [pc, #24]	@ (8000214 <main+0x4c>)
 80001fc:	f001 fffa 	bl	80021f4 <HAL_TIM_PWM_Start>
 8000200:	4603      	mov	r3, r0
      HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK ||
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <main+0x42>
    Error_Handler();
 8000206:	f000 f8e1 	bl	80003cc <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    pwm_led();
 800020a:	f000 f8e5 	bl	80003d8 <pwm_led>
  {
 800020e:	bf00      	nop
 8000210:	e7fb      	b.n	800020a <main+0x42>
 8000212:	bf00      	nop
 8000214:	20000038 	.word	0x20000038

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b090      	sub	sp, #64	@ 0x40
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	2228      	movs	r2, #40	@ 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f002 fe04 	bl	8002e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023a:	2301      	movs	r3, #1
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000242:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000248:	2301      	movs	r3, #1
 800024a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024c:	2302      	movs	r3, #2
 800024e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000250:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000254:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000256:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800025a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fd4b 	bl	8000cfc <HAL_RCC_OscConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800026c:	f000 f8ae 	bl	80003cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000270:	230f      	movs	r3, #15
 8000272:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000274:	2302      	movs	r3, #2
 8000276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fd74 	bl	8001d78 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000296:	f000 f899 	bl	80003cc <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3740      	adds	r7, #64	@ 0x40
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b08a      	sub	sp, #40	@ 0x28
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002aa:	f107 031c 	add.w	r3, r7, #28
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002b6:	463b      	mov	r3, r7
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]
 80002c0:	60da      	str	r2, [r3, #12]
 80002c2:	611a      	str	r2, [r3, #16]
 80002c4:	615a      	str	r2, [r3, #20]
 80002c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000380 <MX_TIM2_Init+0xdc>)
 80002ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000380 <MX_TIM2_Init+0xdc>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000380 <MX_TIM2_Init+0xdc>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000 - 1;
 80002dc:	4b28      	ldr	r3, [pc, #160]	@ (8000380 <MX_TIM2_Init+0xdc>)
 80002de:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e4:	4b26      	ldr	r3, [pc, #152]	@ (8000380 <MX_TIM2_Init+0xdc>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ea:	4b25      	ldr	r3, [pc, #148]	@ (8000380 <MX_TIM2_Init+0xdc>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80002f0:	4823      	ldr	r0, [pc, #140]	@ (8000380 <MX_TIM2_Init+0xdc>)
 80002f2:	f001 ff27 	bl	8002144 <HAL_TIM_PWM_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80002fc:	f000 f866 	bl	80003cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000300:	2300      	movs	r3, #0
 8000302:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000304:	2300      	movs	r3, #0
 8000306:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000308:	f107 031c 	add.w	r3, r7, #28
 800030c:	4619      	mov	r1, r3
 800030e:	481c      	ldr	r0, [pc, #112]	@ (8000380 <MX_TIM2_Init+0xdc>)
 8000310:	f002 fd10 	bl	8002d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800031a:	f000 f857 	bl	80003cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800031e:	2360      	movs	r3, #96	@ 0x60
 8000320:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000326:	2300      	movs	r3, #0
 8000328:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800032a:	2300      	movs	r3, #0
 800032c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800032e:	463b      	mov	r3, r7
 8000330:	2204      	movs	r2, #4
 8000332:	4619      	mov	r1, r3
 8000334:	4812      	ldr	r0, [pc, #72]	@ (8000380 <MX_TIM2_Init+0xdc>)
 8000336:	f002 f85d 	bl	80023f4 <HAL_TIM_PWM_ConfigChannel>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000340:	f000 f844 	bl	80003cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000344:	463b      	mov	r3, r7
 8000346:	2208      	movs	r2, #8
 8000348:	4619      	mov	r1, r3
 800034a:	480d      	ldr	r0, [pc, #52]	@ (8000380 <MX_TIM2_Init+0xdc>)
 800034c:	f002 f852 	bl	80023f4 <HAL_TIM_PWM_ConfigChannel>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000356:	f000 f839 	bl	80003cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800035a:	463b      	mov	r3, r7
 800035c:	220c      	movs	r2, #12
 800035e:	4619      	mov	r1, r3
 8000360:	4807      	ldr	r0, [pc, #28]	@ (8000380 <MX_TIM2_Init+0xdc>)
 8000362:	f002 f847 	bl	80023f4 <HAL_TIM_PWM_ConfigChannel>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800036c:	f000 f82e 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000370:	4803      	ldr	r0, [pc, #12]	@ (8000380 <MX_TIM2_Init+0xdc>)
 8000372:	f000 f939 	bl	80005e8 <HAL_TIM_MspPostInit>

}
 8000376:	bf00      	nop
 8000378:	3728      	adds	r7, #40	@ 0x28
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000038 	.word	0x20000038

08000384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <MX_GPIO_Init+0x44>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a0e      	ldr	r2, [pc, #56]	@ (80003c8 <MX_GPIO_Init+0x44>)
 8000390:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <MX_GPIO_Init+0x44>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <MX_GPIO_Init+0x44>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a08      	ldr	r2, [pc, #32]	@ (80003c8 <MX_GPIO_Init+0x44>)
 80003a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003ac:	6153      	str	r3, [r2, #20]
 80003ae:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <MX_GPIO_Init+0x44>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d0:	b672      	cpsid	i
}
 80003d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <Error_Handler+0x8>

080003d8 <pwm_led>:
/* array to store three TIM channel identifiers */
uint32_t channels[3] = {TIM_CHANNEL_2, TIM_CHANNEL_4, TIM_CHANNEL_3};
uint8_t num_channels = sizeof(channels) / sizeof(channels[0]);
extern TIM_HandleTypeDef htim2;

void pwm_led() {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
  for (int i = 0; i < num_channels; i++)
 80003de:	2300      	movs	r3, #0
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	e0ac      	b.n	800053e <pwm_led+0x166>
  {
    while (brightness < htim2.Init.Period)
    {
      brightness += 20;
 80003e4:	4b5b      	ldr	r3, [pc, #364]	@ (8000554 <pwm_led+0x17c>)
 80003e6:	881b      	ldrh	r3, [r3, #0]
 80003e8:	3314      	adds	r3, #20
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	4b59      	ldr	r3, [pc, #356]	@ (8000554 <pwm_led+0x17c>)
 80003ee:	801a      	strh	r2, [r3, #0]
      __HAL_TIM_SET_COMPARE(&htim2, channels[i], brightness);
 80003f0:	4a59      	ldr	r2, [pc, #356]	@ (8000558 <pwm_led+0x180>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d105      	bne.n	8000408 <pwm_led+0x30>
 80003fc:	4b55      	ldr	r3, [pc, #340]	@ (8000554 <pwm_led+0x17c>)
 80003fe:	881a      	ldrh	r2, [r3, #0]
 8000400:	4b56      	ldr	r3, [pc, #344]	@ (800055c <pwm_led+0x184>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	635a      	str	r2, [r3, #52]	@ 0x34
 8000406:	e039      	b.n	800047c <pwm_led+0xa4>
 8000408:	4a53      	ldr	r2, [pc, #332]	@ (8000558 <pwm_led+0x180>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000410:	2b04      	cmp	r3, #4
 8000412:	d106      	bne.n	8000422 <pwm_led+0x4a>
 8000414:	4b4f      	ldr	r3, [pc, #316]	@ (8000554 <pwm_led+0x17c>)
 8000416:	8819      	ldrh	r1, [r3, #0]
 8000418:	4b50      	ldr	r3, [pc, #320]	@ (800055c <pwm_led+0x184>)
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	460b      	mov	r3, r1
 800041e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000420:	e02c      	b.n	800047c <pwm_led+0xa4>
 8000422:	4a4d      	ldr	r2, [pc, #308]	@ (8000558 <pwm_led+0x180>)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800042a:	2b08      	cmp	r3, #8
 800042c:	d106      	bne.n	800043c <pwm_led+0x64>
 800042e:	4b49      	ldr	r3, [pc, #292]	@ (8000554 <pwm_led+0x17c>)
 8000430:	8819      	ldrh	r1, [r3, #0]
 8000432:	4b4a      	ldr	r3, [pc, #296]	@ (800055c <pwm_led+0x184>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	460b      	mov	r3, r1
 8000438:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800043a:	e01f      	b.n	800047c <pwm_led+0xa4>
 800043c:	4a46      	ldr	r2, [pc, #280]	@ (8000558 <pwm_led+0x180>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000444:	2b0c      	cmp	r3, #12
 8000446:	d106      	bne.n	8000456 <pwm_led+0x7e>
 8000448:	4b42      	ldr	r3, [pc, #264]	@ (8000554 <pwm_led+0x17c>)
 800044a:	8819      	ldrh	r1, [r3, #0]
 800044c:	4b43      	ldr	r3, [pc, #268]	@ (800055c <pwm_led+0x184>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	460b      	mov	r3, r1
 8000452:	6413      	str	r3, [r2, #64]	@ 0x40
 8000454:	e012      	b.n	800047c <pwm_led+0xa4>
 8000456:	4a40      	ldr	r2, [pc, #256]	@ (8000558 <pwm_led+0x180>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800045e:	2b10      	cmp	r3, #16
 8000460:	d106      	bne.n	8000470 <pwm_led+0x98>
 8000462:	4b3c      	ldr	r3, [pc, #240]	@ (8000554 <pwm_led+0x17c>)
 8000464:	8819      	ldrh	r1, [r3, #0]
 8000466:	4b3d      	ldr	r3, [pc, #244]	@ (800055c <pwm_led+0x184>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	460b      	mov	r3, r1
 800046c:	6593      	str	r3, [r2, #88]	@ 0x58
 800046e:	e005      	b.n	800047c <pwm_led+0xa4>
 8000470:	4b38      	ldr	r3, [pc, #224]	@ (8000554 <pwm_led+0x17c>)
 8000472:	8819      	ldrh	r1, [r3, #0]
 8000474:	4b39      	ldr	r3, [pc, #228]	@ (800055c <pwm_led+0x184>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	460b      	mov	r3, r1
 800047a:	65d3      	str	r3, [r2, #92]	@ 0x5c
      HAL_Delay(1);
 800047c:	2001      	movs	r0, #1
 800047e:	f000 f9b9 	bl	80007f4 <HAL_Delay>
    while (brightness < htim2.Init.Period)
 8000482:	4b34      	ldr	r3, [pc, #208]	@ (8000554 <pwm_led+0x17c>)
 8000484:	881b      	ldrh	r3, [r3, #0]
 8000486:	461a      	mov	r2, r3
 8000488:	4b34      	ldr	r3, [pc, #208]	@ (800055c <pwm_led+0x184>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	429a      	cmp	r2, r3
 800048e:	d3a9      	bcc.n	80003e4 <pwm_led+0xc>
    }
    while (brightness > 0)
 8000490:	e04e      	b.n	8000530 <pwm_led+0x158>
    {
      brightness -= 20;
 8000492:	4b30      	ldr	r3, [pc, #192]	@ (8000554 <pwm_led+0x17c>)
 8000494:	881b      	ldrh	r3, [r3, #0]
 8000496:	3b14      	subs	r3, #20
 8000498:	b29a      	uxth	r2, r3
 800049a:	4b2e      	ldr	r3, [pc, #184]	@ (8000554 <pwm_led+0x17c>)
 800049c:	801a      	strh	r2, [r3, #0]
      __HAL_TIM_SET_COMPARE(&htim2, channels[i], brightness);
 800049e:	4a2e      	ldr	r2, [pc, #184]	@ (8000558 <pwm_led+0x180>)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d105      	bne.n	80004b6 <pwm_led+0xde>
 80004aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000554 <pwm_led+0x17c>)
 80004ac:	881a      	ldrh	r2, [r3, #0]
 80004ae:	4b2b      	ldr	r3, [pc, #172]	@ (800055c <pwm_led+0x184>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80004b4:	e039      	b.n	800052a <pwm_led+0x152>
 80004b6:	4a28      	ldr	r2, [pc, #160]	@ (8000558 <pwm_led+0x180>)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004be:	2b04      	cmp	r3, #4
 80004c0:	d106      	bne.n	80004d0 <pwm_led+0xf8>
 80004c2:	4b24      	ldr	r3, [pc, #144]	@ (8000554 <pwm_led+0x17c>)
 80004c4:	8819      	ldrh	r1, [r3, #0]
 80004c6:	4b25      	ldr	r3, [pc, #148]	@ (800055c <pwm_led+0x184>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	460b      	mov	r3, r1
 80004cc:	6393      	str	r3, [r2, #56]	@ 0x38
 80004ce:	e02c      	b.n	800052a <pwm_led+0x152>
 80004d0:	4a21      	ldr	r2, [pc, #132]	@ (8000558 <pwm_led+0x180>)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d8:	2b08      	cmp	r3, #8
 80004da:	d106      	bne.n	80004ea <pwm_led+0x112>
 80004dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <pwm_led+0x17c>)
 80004de:	8819      	ldrh	r1, [r3, #0]
 80004e0:	4b1e      	ldr	r3, [pc, #120]	@ (800055c <pwm_led+0x184>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	460b      	mov	r3, r1
 80004e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80004e8:	e01f      	b.n	800052a <pwm_led+0x152>
 80004ea:	4a1b      	ldr	r2, [pc, #108]	@ (8000558 <pwm_led+0x180>)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f2:	2b0c      	cmp	r3, #12
 80004f4:	d106      	bne.n	8000504 <pwm_led+0x12c>
 80004f6:	4b17      	ldr	r3, [pc, #92]	@ (8000554 <pwm_led+0x17c>)
 80004f8:	8819      	ldrh	r1, [r3, #0]
 80004fa:	4b18      	ldr	r3, [pc, #96]	@ (800055c <pwm_led+0x184>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	460b      	mov	r3, r1
 8000500:	6413      	str	r3, [r2, #64]	@ 0x40
 8000502:	e012      	b.n	800052a <pwm_led+0x152>
 8000504:	4a14      	ldr	r2, [pc, #80]	@ (8000558 <pwm_led+0x180>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800050c:	2b10      	cmp	r3, #16
 800050e:	d106      	bne.n	800051e <pwm_led+0x146>
 8000510:	4b10      	ldr	r3, [pc, #64]	@ (8000554 <pwm_led+0x17c>)
 8000512:	8819      	ldrh	r1, [r3, #0]
 8000514:	4b11      	ldr	r3, [pc, #68]	@ (800055c <pwm_led+0x184>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	460b      	mov	r3, r1
 800051a:	6593      	str	r3, [r2, #88]	@ 0x58
 800051c:	e005      	b.n	800052a <pwm_led+0x152>
 800051e:	4b0d      	ldr	r3, [pc, #52]	@ (8000554 <pwm_led+0x17c>)
 8000520:	8819      	ldrh	r1, [r3, #0]
 8000522:	4b0e      	ldr	r3, [pc, #56]	@ (800055c <pwm_led+0x184>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	460b      	mov	r3, r1
 8000528:	65d3      	str	r3, [r2, #92]	@ 0x5c
      HAL_Delay(1);
 800052a:	2001      	movs	r0, #1
 800052c:	f000 f962 	bl	80007f4 <HAL_Delay>
    while (brightness > 0)
 8000530:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <pwm_led+0x17c>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d1ac      	bne.n	8000492 <pwm_led+0xba>
  for (int i = 0; i < num_channels; i++)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3301      	adds	r3, #1
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b08      	ldr	r3, [pc, #32]	@ (8000560 <pwm_led+0x188>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	461a      	mov	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4293      	cmp	r3, r2
 8000548:	db9b      	blt.n	8000482 <pwm_led+0xaa>
    }
  }
}
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000084 	.word	0x20000084
 8000558:	20000000 	.word	0x20000000
 800055c:	20000038 	.word	0x20000038
 8000560:	2000000c 	.word	0x2000000c

08000564 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056a:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <HAL_MspInit+0x44>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	4a0e      	ldr	r2, [pc, #56]	@ (80005a8 <HAL_MspInit+0x44>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6193      	str	r3, [r2, #24]
 8000576:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <HAL_MspInit+0x44>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <HAL_MspInit+0x44>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	4a08      	ldr	r2, [pc, #32]	@ (80005a8 <HAL_MspInit+0x44>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058c:	61d3      	str	r3, [r2, #28]
 800058e:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <HAL_MspInit+0x44>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005bc:	d10b      	bne.n	80005d6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005be:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <HAL_TIM_PWM_MspInit+0x38>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	4a08      	ldr	r2, [pc, #32]	@ (80005e4 <HAL_TIM_PWM_MspInit+0x38>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	61d3      	str	r3, [r2, #28]
 80005ca:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <HAL_TIM_PWM_MspInit+0x38>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000608:	d11c      	bne.n	8000644 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b10      	ldr	r3, [pc, #64]	@ (800064c <HAL_TIM_MspPostInit+0x64>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a0f      	ldr	r2, [pc, #60]	@ (800064c <HAL_TIM_MspPostInit+0x64>)
 8000610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <HAL_TIM_MspPostInit+0x64>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000622:	230e      	movs	r3, #14
 8000624:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000626:	2302      	movs	r3, #2
 8000628:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000632:	2301      	movs	r3, #1
 8000634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4619      	mov	r1, r3
 800063c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000640:	f000 f9e2 	bl	8000a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40021000 	.word	0x40021000

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <NMI_Handler+0x4>

08000658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <MemManage_Handler+0x4>

08000668 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <BusFault_Handler+0x4>

08000670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <UsageFault_Handler+0x4>

08000678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a6:	f000 f885 	bl	80007b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <SystemInit+0x20>)
 80006b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ba:	4a05      	ldr	r2, [pc, #20]	@ (80006d0 <SystemInit+0x20>)
 80006bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800070c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d8:	f7ff ffea 	bl	80006b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006dc:	480c      	ldr	r0, [pc, #48]	@ (8000710 <LoopForever+0x6>)
  ldr r1, =_edata
 80006de:	490d      	ldr	r1, [pc, #52]	@ (8000714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000718 <LoopForever+0xe>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e4:	e002      	b.n	80006ec <LoopCopyDataInit>

080006e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ea:	3304      	adds	r3, #4

080006ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f0:	d3f9      	bcc.n	80006e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f2:	4a0a      	ldr	r2, [pc, #40]	@ (800071c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000720 <LoopForever+0x16>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f8:	e001      	b.n	80006fe <LoopFillZerobss>

080006fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006fc:	3204      	adds	r2, #4

080006fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000700:	d3fb      	bcc.n	80006fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000702:	f002 fb9f 	bl	8002e44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000706:	f7ff fd5f 	bl	80001c8 <main>

0800070a <LoopForever>:

LoopForever:
    b LoopForever
 800070a:	e7fe      	b.n	800070a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800070c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000714:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000718:	08002edc 	.word	0x08002edc
  ldr r2, =_sbss
 800071c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000720:	2000008c 	.word	0x2000008c

08000724 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000724:	e7fe      	b.n	8000724 <ADC1_2_IRQHandler>
	...

08000728 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800072c:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <HAL_Init+0x28>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a07      	ldr	r2, [pc, #28]	@ (8000750 <HAL_Init+0x28>)
 8000732:	f043 0310 	orr.w	r3, r3, #16
 8000736:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000738:	2003      	movs	r0, #3
 800073a:	f000 f931 	bl	80009a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800073e:	200f      	movs	r0, #15
 8000740:	f000 f808 	bl	8000754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000744:	f7ff ff0e 	bl	8000564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40022000 	.word	0x40022000

08000754 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <HAL_InitTick+0x54>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <HAL_InitTick+0x58>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800076a:	fbb3 f3f1 	udiv	r3, r3, r1
 800076e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f93b 	bl	80009ee <HAL_SYSTICK_Config>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e00e      	b.n	80007a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b0f      	cmp	r3, #15
 8000786:	d80a      	bhi.n	800079e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000788:	2200      	movs	r2, #0
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	f04f 30ff 	mov.w	r0, #4294967295
 8000790:	f000 f911 	bl	80009b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000794:	4a06      	ldr	r2, [pc, #24]	@ (80007b0 <HAL_InitTick+0x5c>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800079a:	2300      	movs	r3, #0
 800079c:	e000      	b.n	80007a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000010 	.word	0x20000010
 80007ac:	20000018 	.word	0x20000018
 80007b0:	20000014 	.word	0x20000014

080007b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <HAL_IncTick+0x20>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <HAL_IncTick+0x24>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	4a04      	ldr	r2, [pc, #16]	@ (80007d8 <HAL_IncTick+0x24>)
 80007c6:	6013      	str	r3, [r2, #0]
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000018 	.word	0x20000018
 80007d8:	20000088 	.word	0x20000088

080007dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return uwTick;  
 80007e0:	4b03      	ldr	r3, [pc, #12]	@ (80007f0 <HAL_GetTick+0x14>)
 80007e2:	681b      	ldr	r3, [r3, #0]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	20000088 	.word	0x20000088

080007f4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007fc:	f7ff ffee 	bl	80007dc <HAL_GetTick>
 8000800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800080c:	d005      	beq.n	800081a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <HAL_Delay+0x44>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	461a      	mov	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	4413      	add	r3, r2
 8000818:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800081a:	bf00      	nop
 800081c:	f7ff ffde 	bl	80007dc <HAL_GetTick>
 8000820:	4602      	mov	r2, r0
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	429a      	cmp	r2, r3
 800082a:	d8f7      	bhi.n	800081c <HAL_Delay+0x28>
  {
  }
}
 800082c:	bf00      	nop
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000018 	.word	0x20000018

0800083c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <__NVIC_SetPriorityGrouping+0x44>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000858:	4013      	ands	r3, r2
 800085a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000864:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800086c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086e:	4a04      	ldr	r2, [pc, #16]	@ (8000880 <__NVIC_SetPriorityGrouping+0x44>)
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	60d3      	str	r3, [r2, #12]
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000888:	4b04      	ldr	r3, [pc, #16]	@ (800089c <__NVIC_GetPriorityGrouping+0x18>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	f003 0307 	and.w	r3, r3, #7
}
 8000892:	4618      	mov	r0, r3
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	db0a      	blt.n	80008ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	490c      	ldr	r1, [pc, #48]	@ (80008ec <__NVIC_SetPriority+0x4c>)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	0112      	lsls	r2, r2, #4
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	440b      	add	r3, r1
 80008c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c8:	e00a      	b.n	80008e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4908      	ldr	r1, [pc, #32]	@ (80008f0 <__NVIC_SetPriority+0x50>)
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	f003 030f 	and.w	r3, r3, #15
 80008d6:	3b04      	subs	r3, #4
 80008d8:	0112      	lsls	r2, r2, #4
 80008da:	b2d2      	uxtb	r2, r2
 80008dc:	440b      	add	r3, r1
 80008de:	761a      	strb	r2, [r3, #24]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000e100 	.word	0xe000e100
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b089      	sub	sp, #36	@ 0x24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	f1c3 0307 	rsb	r3, r3, #7
 800090e:	2b04      	cmp	r3, #4
 8000910:	bf28      	it	cs
 8000912:	2304      	movcs	r3, #4
 8000914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3304      	adds	r3, #4
 800091a:	2b06      	cmp	r3, #6
 800091c:	d902      	bls.n	8000924 <NVIC_EncodePriority+0x30>
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3b03      	subs	r3, #3
 8000922:	e000      	b.n	8000926 <NVIC_EncodePriority+0x32>
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	f04f 32ff 	mov.w	r2, #4294967295
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43da      	mvns	r2, r3
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	401a      	ands	r2, r3
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800093c:	f04f 31ff 	mov.w	r1, #4294967295
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	43d9      	mvns	r1, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	4313      	orrs	r3, r2
         );
}
 800094e:	4618      	mov	r0, r3
 8000950:	3724      	adds	r7, #36	@ 0x24
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800096c:	d301      	bcc.n	8000972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096e:	2301      	movs	r3, #1
 8000970:	e00f      	b.n	8000992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000972:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <SysTick_Config+0x40>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097a:	210f      	movs	r1, #15
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f7ff ff8e 	bl	80008a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000984:	4b05      	ldr	r3, [pc, #20]	@ (800099c <SysTick_Config+0x40>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098a:	4b04      	ldr	r3, [pc, #16]	@ (800099c <SysTick_Config+0x40>)
 800098c:	2207      	movs	r2, #7
 800098e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	e000e010 	.word	0xe000e010

080009a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff ff47 	bl	800083c <__NVIC_SetPriorityGrouping>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c8:	f7ff ff5c 	bl	8000884 <__NVIC_GetPriorityGrouping>
 80009cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	6978      	ldr	r0, [r7, #20]
 80009d4:	f7ff ff8e 	bl	80008f4 <NVIC_EncodePriority>
 80009d8:	4602      	mov	r2, r0
 80009da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff5d 	bl	80008a0 <__NVIC_SetPriority>
}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ffb0 	bl	800095c <SysTick_Config>
 80009fc:	4603      	mov	r3, r0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b087      	sub	sp, #28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a16:	e154      	b.n	8000cc2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	fa01 f303 	lsl.w	r3, r1, r3
 8000a24:	4013      	ands	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f000 8146 	beq.w	8000cbc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0303 	and.w	r3, r3, #3
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d005      	beq.n	8000a48 <HAL_GPIO_Init+0x40>
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f003 0303 	and.w	r3, r3, #3
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d130      	bne.n	8000aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	2203      	movs	r2, #3
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a7e:	2201      	movs	r2, #1
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	091b      	lsrs	r3, r3, #4
 8000a94:	f003 0201 	and.w	r2, r3, #1
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f003 0303 	and.w	r3, r3, #3
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d017      	beq.n	8000ae6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 0303 	and.w	r3, r3, #3
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d123      	bne.n	8000b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	08da      	lsrs	r2, r3, #3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3208      	adds	r2, #8
 8000afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	220f      	movs	r2, #15
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	691a      	ldr	r2, [r3, #16]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	f003 0307 	and.w	r3, r3, #7
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	08da      	lsrs	r2, r3, #3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3208      	adds	r2, #8
 8000b34:	6939      	ldr	r1, [r7, #16]
 8000b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	2203      	movs	r2, #3
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0203 	and.w	r2, r3, #3
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 80a0 	beq.w	8000cbc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7c:	4b58      	ldr	r3, [pc, #352]	@ (8000ce0 <HAL_GPIO_Init+0x2d8>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a57      	ldr	r2, [pc, #348]	@ (8000ce0 <HAL_GPIO_Init+0x2d8>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b55      	ldr	r3, [pc, #340]	@ (8000ce0 <HAL_GPIO_Init+0x2d8>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b94:	4a53      	ldr	r2, [pc, #332]	@ (8000ce4 <HAL_GPIO_Init+0x2dc>)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	089b      	lsrs	r3, r3, #2
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	f003 0303 	and.w	r3, r3, #3
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	220f      	movs	r2, #15
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bbe:	d019      	beq.n	8000bf4 <HAL_GPIO_Init+0x1ec>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a49      	ldr	r2, [pc, #292]	@ (8000ce8 <HAL_GPIO_Init+0x2e0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d013      	beq.n	8000bf0 <HAL_GPIO_Init+0x1e8>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a48      	ldr	r2, [pc, #288]	@ (8000cec <HAL_GPIO_Init+0x2e4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d00d      	beq.n	8000bec <HAL_GPIO_Init+0x1e4>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a47      	ldr	r2, [pc, #284]	@ (8000cf0 <HAL_GPIO_Init+0x2e8>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d007      	beq.n	8000be8 <HAL_GPIO_Init+0x1e0>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a46      	ldr	r2, [pc, #280]	@ (8000cf4 <HAL_GPIO_Init+0x2ec>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d101      	bne.n	8000be4 <HAL_GPIO_Init+0x1dc>
 8000be0:	2304      	movs	r3, #4
 8000be2:	e008      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000be4:	2305      	movs	r3, #5
 8000be6:	e006      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000be8:	2303      	movs	r3, #3
 8000bea:	e004      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e002      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <HAL_GPIO_Init+0x1ee>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	f002 0203 	and.w	r2, r2, #3
 8000bfc:	0092      	lsls	r2, r2, #2
 8000bfe:	4093      	lsls	r3, r2
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c06:	4937      	ldr	r1, [pc, #220]	@ (8000ce4 <HAL_GPIO_Init+0x2dc>)
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c14:	4b38      	ldr	r3, [pc, #224]	@ (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c38:	4a2f      	ldr	r2, [pc, #188]	@ (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c62:	4a25      	ldr	r2, [pc, #148]	@ (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c68:	4b23      	ldr	r3, [pc, #140]	@ (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cb6:	4a10      	ldr	r2, [pc, #64]	@ (8000cf8 <HAL_GPIO_Init+0x2f0>)
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	f47f aea3 	bne.w	8000a18 <HAL_GPIO_Init+0x10>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	371c      	adds	r7, #28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	48000400 	.word	0x48000400
 8000cec:	48000800 	.word	0x48000800
 8000cf0:	48000c00 	.word	0x48000c00
 8000cf4:	48001000 	.word	0x48001000
 8000cf8:	40010400 	.word	0x40010400

08000cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d0c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f001 b823 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 817d 	beq.w	8001032 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d38:	4bbc      	ldr	r3, [pc, #752]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 030c 	and.w	r3, r3, #12
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d00c      	beq.n	8000d5e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d44:	4bb9      	ldr	r3, [pc, #740]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 030c 	and.w	r3, r3, #12
 8000d4c:	2b08      	cmp	r3, #8
 8000d4e:	d15c      	bne.n	8000e0a <HAL_RCC_OscConfig+0x10e>
 8000d50:	4bb6      	ldr	r3, [pc, #728]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d5c:	d155      	bne.n	8000e0a <HAL_RCC_OscConfig+0x10e>
 8000d5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d62:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d66:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000d6a:	fa93 f3a3 	rbit	r3, r3
 8000d6e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d76:	fab3 f383 	clz	r3, r3
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	095b      	lsrs	r3, r3, #5
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d102      	bne.n	8000d90 <HAL_RCC_OscConfig+0x94>
 8000d8a:	4ba8      	ldr	r3, [pc, #672]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	e015      	b.n	8000dbc <HAL_RCC_OscConfig+0xc0>
 8000d90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d94:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d98:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000d9c:	fa93 f3a3 	rbit	r3, r3
 8000da0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000da4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000da8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000dac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000db0:	fa93 f3a3 	rbit	r3, r3
 8000db4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000db8:	4b9c      	ldr	r3, [pc, #624]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dbc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dc0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000dc4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000dc8:	fa92 f2a2 	rbit	r2, r2
 8000dcc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000dd0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	f042 0220 	orr.w	r2, r2, #32
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	f002 021f 	and.w	r2, r2, #31
 8000de4:	2101      	movs	r1, #1
 8000de6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dea:	4013      	ands	r3, r2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 811f 	beq.w	8001030 <HAL_RCC_OscConfig+0x334>
 8000df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000df6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f040 8116 	bne.w	8001030 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	f000 bfaf 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e1a:	d106      	bne.n	8000e2a <HAL_RCC_OscConfig+0x12e>
 8000e1c:	4b83      	ldr	r3, [pc, #524]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a82      	ldr	r2, [pc, #520]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	e036      	b.n	8000e98 <HAL_RCC_OscConfig+0x19c>
 8000e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x158>
 8000e3a:	4b7c      	ldr	r3, [pc, #496]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a7b      	ldr	r2, [pc, #492]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	4b79      	ldr	r3, [pc, #484]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a78      	ldr	r2, [pc, #480]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000e4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e021      	b.n	8000e98 <HAL_RCC_OscConfig+0x19c>
 8000e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e64:	d10c      	bne.n	8000e80 <HAL_RCC_OscConfig+0x184>
 8000e66:	4b71      	ldr	r3, [pc, #452]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a70      	ldr	r2, [pc, #448]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000e6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	4b6e      	ldr	r3, [pc, #440]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a6d      	ldr	r2, [pc, #436]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e00b      	b.n	8000e98 <HAL_RCC_OscConfig+0x19c>
 8000e80:	4b6a      	ldr	r3, [pc, #424]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a69      	ldr	r2, [pc, #420]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	4b67      	ldr	r3, [pc, #412]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a66      	ldr	r2, [pc, #408]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000e92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e96:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e98:	4b64      	ldr	r3, [pc, #400]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e9c:	f023 020f 	bic.w	r2, r3, #15
 8000ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ea4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	495f      	ldr	r1, [pc, #380]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d059      	beq.n	8000f76 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fc8b 	bl	80007dc <HAL_GetTick>
 8000ec6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eca:	e00a      	b.n	8000ee2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ecc:	f7ff fc86 	bl	80007dc <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b64      	cmp	r3, #100	@ 0x64
 8000eda:	d902      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	f000 bf43 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>
 8000ee2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ee6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000eee:	fa93 f3a3 	rbit	r3, r3
 8000ef2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000ef6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efa:	fab3 f383 	clz	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	095b      	lsrs	r3, r3, #5
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d102      	bne.n	8000f14 <HAL_RCC_OscConfig+0x218>
 8000f0e:	4b47      	ldr	r3, [pc, #284]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	e015      	b.n	8000f40 <HAL_RCC_OscConfig+0x244>
 8000f14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f18:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000f20:	fa93 f3a3 	rbit	r3, r3
 8000f24:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000f28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f2c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000f30:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000f34:	fa93 f3a3 	rbit	r3, r3
 8000f38:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000f3c:	4b3b      	ldr	r3, [pc, #236]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f44:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000f48:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000f4c:	fa92 f2a2 	rbit	r2, r2
 8000f50:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000f54:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000f58:	fab2 f282 	clz	r2, r2
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	f042 0220 	orr.w	r2, r2, #32
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	f002 021f 	and.w	r2, r2, #31
 8000f68:	2101      	movs	r1, #1
 8000f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0ab      	beq.n	8000ecc <HAL_RCC_OscConfig+0x1d0>
 8000f74:	e05d      	b.n	8001032 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f76:	f7ff fc31 	bl	80007dc <HAL_GetTick>
 8000f7a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7e:	e00a      	b.n	8000f96 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f80:	f7ff fc2c 	bl	80007dc <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b64      	cmp	r3, #100	@ 0x64
 8000f8e:	d902      	bls.n	8000f96 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	f000 bee9 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>
 8000f96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f9a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000fa2:	fa93 f3a3 	rbit	r3, r3
 8000fa6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000faa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fae:	fab3 f383 	clz	r3, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	095b      	lsrs	r3, r3, #5
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d102      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x2cc>
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	e015      	b.n	8000ff4 <HAL_RCC_OscConfig+0x2f8>
 8000fc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fcc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000fd4:	fa93 f3a3 	rbit	r3, r3
 8000fd8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000fdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fe0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000fe4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000fe8:	fa93 f3a3 	rbit	r3, r3
 8000fec:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <HAL_RCC_OscConfig+0x330>)
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ff8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000ffc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001000:	fa92 f2a2 	rbit	r2, r2
 8001004:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001008:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800100c:	fab2 f282 	clz	r2, r2
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	f042 0220 	orr.w	r2, r2, #32
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	f002 021f 	and.w	r2, r2, #31
 800101c:	2101      	movs	r1, #1
 800101e:	fa01 f202 	lsl.w	r2, r1, r2
 8001022:	4013      	ands	r3, r2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1ab      	bne.n	8000f80 <HAL_RCC_OscConfig+0x284>
 8001028:	e003      	b.n	8001032 <HAL_RCC_OscConfig+0x336>
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001036:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 817d 	beq.w	8001342 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001048:	4ba6      	ldr	r3, [pc, #664]	@ (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00b      	beq.n	800106c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001054:	4ba3      	ldr	r3, [pc, #652]	@ (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	2b08      	cmp	r3, #8
 800105e:	d172      	bne.n	8001146 <HAL_RCC_OscConfig+0x44a>
 8001060:	4ba0      	ldr	r3, [pc, #640]	@ (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d16c      	bne.n	8001146 <HAL_RCC_OscConfig+0x44a>
 800106c:	2302      	movs	r3, #2
 800106e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001072:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001076:	fa93 f3a3 	rbit	r3, r3
 800107a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800107e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001082:	fab3 f383 	clz	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	095b      	lsrs	r3, r3, #5
 800108a:	b2db      	uxtb	r3, r3
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b01      	cmp	r3, #1
 8001094:	d102      	bne.n	800109c <HAL_RCC_OscConfig+0x3a0>
 8001096:	4b93      	ldr	r3, [pc, #588]	@ (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	e013      	b.n	80010c4 <HAL_RCC_OscConfig+0x3c8>
 800109c:	2302      	movs	r3, #2
 800109e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80010a6:	fa93 f3a3 	rbit	r3, r3
 80010aa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80010ae:	2302      	movs	r3, #2
 80010b0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80010b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80010b8:	fa93 f3a3 	rbit	r3, r3
 80010bc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80010c0:	4b88      	ldr	r3, [pc, #544]	@ (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 80010c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c4:	2202      	movs	r2, #2
 80010c6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80010ca:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80010ce:	fa92 f2a2 	rbit	r2, r2
 80010d2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80010d6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80010da:	fab2 f282 	clz	r2, r2
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	f042 0220 	orr.w	r2, r2, #32
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	f002 021f 	and.w	r2, r2, #31
 80010ea:	2101      	movs	r1, #1
 80010ec:	fa01 f202 	lsl.w	r2, r1, r2
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00a      	beq.n	800110c <HAL_RCC_OscConfig+0x410>
 80010f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d002      	beq.n	800110c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	f000 be2e 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110c:	4b75      	ldr	r3, [pc, #468]	@ (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001118:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	21f8      	movs	r1, #248	@ 0xf8
 8001122:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800112a:	fa91 f1a1 	rbit	r1, r1
 800112e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001132:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001136:	fab1 f181 	clz	r1, r1
 800113a:	b2c9      	uxtb	r1, r1
 800113c:	408b      	lsls	r3, r1
 800113e:	4969      	ldr	r1, [pc, #420]	@ (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 8001140:	4313      	orrs	r3, r2
 8001142:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001144:	e0fd      	b.n	8001342 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800114a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8088 	beq.w	8001268 <HAL_RCC_OscConfig+0x56c>
 8001158:	2301      	movs	r3, #1
 800115a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800116a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800116e:	fab3 f383 	clz	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001178:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	461a      	mov	r2, r3
 8001180:	2301      	movs	r3, #1
 8001182:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fb2a 	bl	80007dc <HAL_GetTick>
 8001188:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118c:	e00a      	b.n	80011a4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800118e:	f7ff fb25 	bl	80007dc <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d902      	bls.n	80011a4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	f000 bde2 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>
 80011a4:	2302      	movs	r3, #2
 80011a6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80011ae:	fa93 f3a3 	rbit	r3, r3
 80011b2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80011b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ba:	fab3 f383 	clz	r3, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	095b      	lsrs	r3, r3, #5
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d102      	bne.n	80011d4 <HAL_RCC_OscConfig+0x4d8>
 80011ce:	4b45      	ldr	r3, [pc, #276]	@ (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	e013      	b.n	80011fc <HAL_RCC_OscConfig+0x500>
 80011d4:	2302      	movs	r3, #2
 80011d6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011da:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80011e6:	2302      	movs	r3, #2
 80011e8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80011ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80011f0:	fa93 f3a3 	rbit	r3, r3
 80011f4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80011f8:	4b3a      	ldr	r3, [pc, #232]	@ (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fc:	2202      	movs	r2, #2
 80011fe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001202:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001206:	fa92 f2a2 	rbit	r2, r2
 800120a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800120e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001212:	fab2 f282 	clz	r2, r2
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	f042 0220 	orr.w	r2, r2, #32
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	f002 021f 	and.w	r2, r2, #31
 8001222:	2101      	movs	r1, #1
 8001224:	fa01 f202 	lsl.w	r2, r1, r2
 8001228:	4013      	ands	r3, r2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0af      	beq.n	800118e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122e:	4b2d      	ldr	r3, [pc, #180]	@ (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800123a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	21f8      	movs	r1, #248	@ 0xf8
 8001244:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001248:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800124c:	fa91 f1a1 	rbit	r1, r1
 8001250:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001254:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001258:	fab1 f181 	clz	r1, r1
 800125c:	b2c9      	uxtb	r1, r1
 800125e:	408b      	lsls	r3, r1
 8001260:	4920      	ldr	r1, [pc, #128]	@ (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
 8001266:	e06c      	b.n	8001342 <HAL_RCC_OscConfig+0x646>
 8001268:	2301      	movs	r3, #1
 800126a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800127a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001288:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	461a      	mov	r2, r3
 8001290:	2300      	movs	r3, #0
 8001292:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff faa2 	bl	80007dc <HAL_GetTick>
 8001298:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129c:	e00a      	b.n	80012b4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800129e:	f7ff fa9d 	bl	80007dc <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d902      	bls.n	80012b4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	f000 bd5a 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>
 80012b4:	2302      	movs	r3, #2
 80012b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80012c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ca:	fab3 f383 	clz	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	095b      	lsrs	r3, r3, #5
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d104      	bne.n	80012e8 <HAL_RCC_OscConfig+0x5ec>
 80012de:	4b01      	ldr	r3, [pc, #4]	@ (80012e4 <HAL_RCC_OscConfig+0x5e8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	e015      	b.n	8001310 <HAL_RCC_OscConfig+0x614>
 80012e4:	40021000 	.word	0x40021000
 80012e8:	2302      	movs	r3, #2
 80012ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001300:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001304:	fa93 f3a3 	rbit	r3, r3
 8001308:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800130c:	4bc8      	ldr	r3, [pc, #800]	@ (8001630 <HAL_RCC_OscConfig+0x934>)
 800130e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001310:	2202      	movs	r2, #2
 8001312:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001316:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800131a:	fa92 f2a2 	rbit	r2, r2
 800131e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001322:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001326:	fab2 f282 	clz	r2, r2
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	f042 0220 	orr.w	r2, r2, #32
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	f002 021f 	and.w	r2, r2, #31
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f202 	lsl.w	r2, r1, r2
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1ad      	bne.n	800129e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001346:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8110 	beq.w	8001578 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800135c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d079      	beq.n	800145c <HAL_RCC_OscConfig+0x760>
 8001368:	2301      	movs	r3, #1
 800136a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001372:	fa93 f3a3 	rbit	r3, r3
 8001376:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800137a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137e:	fab3 f383 	clz	r3, r3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	4bab      	ldr	r3, [pc, #684]	@ (8001634 <HAL_RCC_OscConfig+0x938>)
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	461a      	mov	r2, r3
 800138e:	2301      	movs	r3, #1
 8001390:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001392:	f7ff fa23 	bl	80007dc <HAL_GetTick>
 8001396:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139a:	e00a      	b.n	80013b2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139c:	f7ff fa1e 	bl	80007dc <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d902      	bls.n	80013b2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	f000 bcdb 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>
 80013b2:	2302      	movs	r3, #2
 80013b4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80013bc:	fa93 f3a3 	rbit	r3, r3
 80013c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80013c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013cc:	2202      	movs	r2, #2
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	fa93 f2a3 	rbit	r2, r3
 80013de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013f0:	2202      	movs	r2, #2
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	fa93 f2a3 	rbit	r2, r3
 8001402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001406:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800140a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140c:	4b88      	ldr	r3, [pc, #544]	@ (8001630 <HAL_RCC_OscConfig+0x934>)
 800140e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001414:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001418:	2102      	movs	r1, #2
 800141a:	6019      	str	r1, [r3, #0]
 800141c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001420:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	fa93 f1a3 	rbit	r1, r3
 800142a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800142e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001432:	6019      	str	r1, [r3, #0]
  return result;
 8001434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001438:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	fab3 f383 	clz	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f003 031f 	and.w	r3, r3, #31
 800144e:	2101      	movs	r1, #1
 8001450:	fa01 f303 	lsl.w	r3, r1, r3
 8001454:	4013      	ands	r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0a0      	beq.n	800139c <HAL_RCC_OscConfig+0x6a0>
 800145a:	e08d      	b.n	8001578 <HAL_RCC_OscConfig+0x87c>
 800145c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001460:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800146c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	fa93 f2a3 	rbit	r2, r3
 8001476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800147a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800147e:	601a      	str	r2, [r3, #0]
  return result;
 8001480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001484:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001488:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	4b68      	ldr	r3, [pc, #416]	@ (8001634 <HAL_RCC_OscConfig+0x938>)
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	461a      	mov	r2, r3
 800149a:	2300      	movs	r3, #0
 800149c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff f99d 	bl	80007dc <HAL_GetTick>
 80014a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a6:	e00a      	b.n	80014be <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff f998 	bl	80007dc <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d902      	bls.n	80014be <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	f000 bc55 	b.w	8001d68 <HAL_RCC_OscConfig+0x106c>
 80014be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014c6:	2202      	movs	r2, #2
 80014c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	fa93 f2a3 	rbit	r2, r3
 80014d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014ea:	2202      	movs	r2, #2
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	fa93 f2a3 	rbit	r2, r3
 80014fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001500:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800150a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800150e:	2202      	movs	r2, #2
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001516:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001524:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001528:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800152a:	4b41      	ldr	r3, [pc, #260]	@ (8001630 <HAL_RCC_OscConfig+0x934>)
 800152c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800152e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001532:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001536:	2102      	movs	r1, #2
 8001538:	6019      	str	r1, [r3, #0]
 800153a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800153e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	fa93 f1a3 	rbit	r1, r3
 8001548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800154c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001550:	6019      	str	r1, [r3, #0]
  return result;
 8001552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001556:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	fab3 f383 	clz	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f003 031f 	and.w	r3, r3, #31
 800156c:	2101      	movs	r1, #1
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	4013      	ands	r3, r2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d197      	bne.n	80014a8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800157c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 81a1 	beq.w	80018d0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001594:	4b26      	ldr	r3, [pc, #152]	@ (8001630 <HAL_RCC_OscConfig+0x934>)
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d116      	bne.n	80015ce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a0:	4b23      	ldr	r3, [pc, #140]	@ (8001630 <HAL_RCC_OscConfig+0x934>)
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	4a22      	ldr	r2, [pc, #136]	@ (8001630 <HAL_RCC_OscConfig+0x934>)
 80015a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015aa:	61d3      	str	r3, [r2, #28]
 80015ac:	4b20      	ldr	r3, [pc, #128]	@ (8001630 <HAL_RCC_OscConfig+0x934>)
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80015b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80015c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015c8:	2301      	movs	r3, #1
 80015ca:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_RCC_OscConfig+0x93c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d11a      	bne.n	8001610 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015da:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <HAL_RCC_OscConfig+0x93c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a16      	ldr	r2, [pc, #88]	@ (8001638 <HAL_RCC_OscConfig+0x93c>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e6:	f7ff f8f9 	bl	80007dc <HAL_GetTick>
 80015ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ee:	e009      	b.n	8001604 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f0:	f7ff f8f4 	bl	80007dc <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b64      	cmp	r3, #100	@ 0x64
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e3b1      	b.n	8001d68 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <HAL_RCC_OscConfig+0x93c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0ef      	beq.n	80015f0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001614:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d10d      	bne.n	800163c <HAL_RCC_OscConfig+0x940>
 8001620:	4b03      	ldr	r3, [pc, #12]	@ (8001630 <HAL_RCC_OscConfig+0x934>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4a02      	ldr	r2, [pc, #8]	@ (8001630 <HAL_RCC_OscConfig+0x934>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6213      	str	r3, [r2, #32]
 800162c:	e03c      	b.n	80016a8 <HAL_RCC_OscConfig+0x9ac>
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000
 8001634:	10908120 	.word	0x10908120
 8001638:	40007000 	.word	0x40007000
 800163c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001640:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10c      	bne.n	8001666 <HAL_RCC_OscConfig+0x96a>
 800164c:	4bc1      	ldr	r3, [pc, #772]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4ac0      	ldr	r2, [pc, #768]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	4bbe      	ldr	r3, [pc, #760]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4abd      	ldr	r2, [pc, #756]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 800165e:	f023 0304 	bic.w	r3, r3, #4
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	e020      	b.n	80016a8 <HAL_RCC_OscConfig+0x9ac>
 8001666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800166a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b05      	cmp	r3, #5
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x994>
 8001676:	4bb7      	ldr	r3, [pc, #732]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4ab6      	ldr	r2, [pc, #728]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6213      	str	r3, [r2, #32]
 8001682:	4bb4      	ldr	r3, [pc, #720]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4ab3      	ldr	r2, [pc, #716]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6213      	str	r3, [r2, #32]
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0x9ac>
 8001690:	4bb0      	ldr	r3, [pc, #704]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4aaf      	ldr	r2, [pc, #700]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	6213      	str	r3, [r2, #32]
 800169c:	4bad      	ldr	r3, [pc, #692]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4aac      	ldr	r2, [pc, #688]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 80016a2:	f023 0304 	bic.w	r3, r3, #4
 80016a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 8081 	beq.w	80017bc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7ff f88f 	bl	80007dc <HAL_GetTick>
 80016be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c2:	e00b      	b.n	80016dc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c4:	f7ff f88a 	bl	80007dc <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e345      	b.n	8001d68 <HAL_RCC_OscConfig+0x106c>
 80016dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80016e4:	2202      	movs	r2, #2
 80016e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	fa93 f2a3 	rbit	r2, r3
 80016f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001704:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001708:	2202      	movs	r2, #2
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001710:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fa93 f2a3 	rbit	r2, r3
 800171a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800171e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001722:	601a      	str	r2, [r3, #0]
  return result;
 8001724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001728:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800172c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172e:	fab3 f383 	clz	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	095b      	lsrs	r3, r3, #5
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d102      	bne.n	8001748 <HAL_RCC_OscConfig+0xa4c>
 8001742:	4b84      	ldr	r3, [pc, #528]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	e013      	b.n	8001770 <HAL_RCC_OscConfig+0xa74>
 8001748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001750:	2202      	movs	r2, #2
 8001752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001758:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	fa93 f2a3 	rbit	r2, r3
 8001762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001766:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	4b79      	ldr	r3, [pc, #484]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 800176e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001770:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001774:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001778:	2102      	movs	r1, #2
 800177a:	6011      	str	r1, [r2, #0]
 800177c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001780:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	fa92 f1a2 	rbit	r1, r2
 800178a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800178e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001792:	6011      	str	r1, [r2, #0]
  return result;
 8001794:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001798:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	fab2 f282 	clz	r2, r2
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	f002 021f 	and.w	r2, r2, #31
 80017ae:	2101      	movs	r1, #1
 80017b0:	fa01 f202 	lsl.w	r2, r1, r2
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d084      	beq.n	80016c4 <HAL_RCC_OscConfig+0x9c8>
 80017ba:	e07f      	b.n	80018bc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017bc:	f7ff f80e 	bl	80007dc <HAL_GetTick>
 80017c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	e00b      	b.n	80017de <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	f7ff f809 	bl	80007dc <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e2c4      	b.n	8001d68 <HAL_RCC_OscConfig+0x106c>
 80017de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80017e6:	2202      	movs	r2, #2
 80017e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ee:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fa93 f2a3 	rbit	r2, r3
 80017f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001806:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800180a:	2202      	movs	r2, #2
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001812:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	fa93 f2a3 	rbit	r2, r3
 800181c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001820:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001824:	601a      	str	r2, [r3, #0]
  return result;
 8001826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800182e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001830:	fab3 f383 	clz	r3, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d102      	bne.n	800184a <HAL_RCC_OscConfig+0xb4e>
 8001844:	4b43      	ldr	r3, [pc, #268]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	e013      	b.n	8001872 <HAL_RCC_OscConfig+0xb76>
 800184a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800184e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001852:	2202      	movs	r2, #2
 8001854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800185a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001868:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	4b39      	ldr	r3, [pc, #228]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 8001870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001872:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001876:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800187a:	2102      	movs	r1, #2
 800187c:	6011      	str	r1, [r2, #0]
 800187e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001882:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	fa92 f1a2 	rbit	r1, r2
 800188c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001890:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001894:	6011      	str	r1, [r2, #0]
  return result;
 8001896:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800189a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	fab2 f282 	clz	r2, r2
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	f002 021f 	and.w	r2, r2, #31
 80018b0:	2101      	movs	r1, #1
 80018b2:	fa01 f202 	lsl.w	r2, r1, r2
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d184      	bne.n	80017c6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c4:	4b23      	ldr	r3, [pc, #140]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	4a22      	ldr	r2, [pc, #136]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 80018ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8242 	beq.w	8001d66 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <HAL_RCC_OscConfig+0xc58>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	f000 8213 	beq.w	8001d16 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	f040 8162 	bne.w	8001bc6 <HAL_RCC_OscConfig+0xeca>
 8001902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001906:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800190a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800190e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001914:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	fa93 f2a3 	rbit	r2, r3
 800191e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001922:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001926:	601a      	str	r2, [r3, #0]
  return result;
 8001928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001930:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800193c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	461a      	mov	r2, r3
 8001944:	2300      	movs	r3, #0
 8001946:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7fe ff48 	bl	80007dc <HAL_GetTick>
 800194c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001950:	e00c      	b.n	800196c <HAL_RCC_OscConfig+0xc70>
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001958:	f7fe ff40 	bl	80007dc <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e1fd      	b.n	8001d68 <HAL_RCC_OscConfig+0x106c>
 800196c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001970:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001974:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fa93 f2a3 	rbit	r2, r3
 8001988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001990:	601a      	str	r2, [r3, #0]
  return result;
 8001992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001996:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800199a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d102      	bne.n	80019b6 <HAL_RCC_OscConfig+0xcba>
 80019b0:	4bb0      	ldr	r3, [pc, #704]	@ (8001c74 <HAL_RCC_OscConfig+0xf78>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	e027      	b.n	8001a06 <HAL_RCC_OscConfig+0xd0a>
 80019b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	fa93 f2a3 	rbit	r2, r3
 80019d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80019e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	fa93 f2a3 	rbit	r2, r3
 80019f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019fc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	4b9c      	ldr	r3, [pc, #624]	@ (8001c74 <HAL_RCC_OscConfig+0xf78>)
 8001a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a0a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001a0e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a12:	6011      	str	r1, [r2, #0]
 8001a14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a18:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	fa92 f1a2 	rbit	r1, r2
 8001a22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a26:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a2a:	6011      	str	r1, [r2, #0]
  return result;
 8001a2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a30:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a34:	6812      	ldr	r2, [r2, #0]
 8001a36:	fab2 f282 	clz	r2, r2
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	f042 0220 	orr.w	r2, r2, #32
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f002 021f 	and.w	r2, r2, #31
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d182      	bne.n	8001958 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a52:	4b88      	ldr	r3, [pc, #544]	@ (8001c74 <HAL_RCC_OscConfig+0xf78>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	430b      	orrs	r3, r1
 8001a74:	497f      	ldr	r1, [pc, #508]	@ (8001c74 <HAL_RCC_OscConfig+0xf78>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]
 8001a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001a82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	fa93 f2a3 	rbit	r2, r3
 8001a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a9e:	601a      	str	r2, [r3, #0]
  return result;
 8001aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001aa8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ab4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	461a      	mov	r2, r3
 8001abc:	2301      	movs	r3, #1
 8001abe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7fe fe8c 	bl	80007dc <HAL_GetTick>
 8001ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac8:	e009      	b.n	8001ade <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aca:	f7fe fe87 	bl	80007dc <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e144      	b.n	8001d68 <HAL_RCC_OscConfig+0x106c>
 8001ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001ae6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b02:	601a      	str	r2, [r3, #0]
  return result;
 8001b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b08:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	095b      	lsrs	r3, r3, #5
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d102      	bne.n	8001b28 <HAL_RCC_OscConfig+0xe2c>
 8001b22:	4b54      	ldr	r3, [pc, #336]	@ (8001c74 <HAL_RCC_OscConfig+0xf78>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	e027      	b.n	8001b78 <HAL_RCC_OscConfig+0xe7c>
 8001b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	fa93 f2a3 	rbit	r2, r3
 8001b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b48:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b52:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b60:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	fa93 f2a3 	rbit	r2, r3
 8001b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b6e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	4b3f      	ldr	r3, [pc, #252]	@ (8001c74 <HAL_RCC_OscConfig+0xf78>)
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b7c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001b80:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b84:	6011      	str	r1, [r2, #0]
 8001b86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b8a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	fa92 f1a2 	rbit	r1, r2
 8001b94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b98:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b9c:	6011      	str	r1, [r2, #0]
  return result;
 8001b9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ba2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	fab2 f282 	clz	r2, r2
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	f042 0220 	orr.w	r2, r2, #32
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	f002 021f 	and.w	r2, r2, #31
 8001bb8:	2101      	movs	r1, #1
 8001bba:	fa01 f202 	lsl.w	r2, r1, r2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d082      	beq.n	8001aca <HAL_RCC_OscConfig+0xdce>
 8001bc4:	e0cf      	b.n	8001d66 <HAL_RCC_OscConfig+0x106a>
 8001bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bca:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001bce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	fa93 f2a3 	rbit	r2, r3
 8001be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001bea:	601a      	str	r2, [r3, #0]
  return result;
 8001bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001bf4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c00:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	461a      	mov	r2, r3
 8001c08:	2300      	movs	r3, #0
 8001c0a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7fe fde6 	bl	80007dc <HAL_GetTick>
 8001c10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c14:	e009      	b.n	8001c2a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c16:	f7fe fde1 	bl	80007dc <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e09e      	b.n	8001d68 <HAL_RCC_OscConfig+0x106c>
 8001c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	fa93 f2a3 	rbit	r2, r3
 8001c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c4e:	601a      	str	r2, [r3, #0]
  return result;
 8001c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c54:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	095b      	lsrs	r3, r3, #5
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d104      	bne.n	8001c78 <HAL_RCC_OscConfig+0xf7c>
 8001c6e:	4b01      	ldr	r3, [pc, #4]	@ (8001c74 <HAL_RCC_OscConfig+0xf78>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	e029      	b.n	8001cc8 <HAL_RCC_OscConfig+0xfcc>
 8001c74:	40021000 	.word	0x40021000
 8001c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	fa93 f2a3 	rbit	r2, r3
 8001c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c98:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001ca6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	fa93 f2a3 	rbit	r2, r3
 8001cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cbe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d74 <HAL_RCC_OscConfig+0x1078>)
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ccc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001cd0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001cd4:	6011      	str	r1, [r2, #0]
 8001cd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cda:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	fa92 f1a2 	rbit	r1, r2
 8001ce4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ce8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001cec:	6011      	str	r1, [r2, #0]
  return result;
 8001cee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cf2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	fab2 f282 	clz	r2, r2
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	f042 0220 	orr.w	r2, r2, #32
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	f002 021f 	and.w	r2, r2, #31
 8001d08:	2101      	movs	r1, #1
 8001d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d180      	bne.n	8001c16 <HAL_RCC_OscConfig+0xf1a>
 8001d14:	e027      	b.n	8001d66 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e01e      	b.n	8001d68 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d2a:	4b12      	ldr	r3, [pc, #72]	@ (8001d74 <HAL_RCC_OscConfig+0x1078>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d36:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d10b      	bne.n	8001d62 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000

08001d78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b09e      	sub	sp, #120	@ 0x78
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e162      	b.n	8002056 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d90:	4b90      	ldr	r3, [pc, #576]	@ (8001fd4 <HAL_RCC_ClockConfig+0x25c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d910      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b8d      	ldr	r3, [pc, #564]	@ (8001fd4 <HAL_RCC_ClockConfig+0x25c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0207 	bic.w	r2, r3, #7
 8001da6:	498b      	ldr	r1, [pc, #556]	@ (8001fd4 <HAL_RCC_ClockConfig+0x25c>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b89      	ldr	r3, [pc, #548]	@ (8001fd4 <HAL_RCC_ClockConfig+0x25c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e14a      	b.n	8002056 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dcc:	4b82      	ldr	r3, [pc, #520]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	497f      	ldr	r1, [pc, #508]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 80dc 	beq.w	8001fa4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d13c      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xf6>
 8001df4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001df8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e04:	fab3 f383 	clz	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d102      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xa6>
 8001e18:	4b6f      	ldr	r3, [pc, #444]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	e00f      	b.n	8001e3e <HAL_RCC_ClockConfig+0xc6>
 8001e1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e30:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e3a:	4b67      	ldr	r3, [pc, #412]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e42:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001e44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e46:	fa92 f2a2 	rbit	r2, r2
 8001e4a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001e4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e4e:	fab2 f282 	clz	r2, r2
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	f042 0220 	orr.w	r2, r2, #32
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	f002 021f 	and.w	r2, r2, #31
 8001e5e:	2101      	movs	r1, #1
 8001e60:	fa01 f202 	lsl.w	r2, r1, r2
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d17b      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0f3      	b.n	8002056 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d13c      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x178>
 8001e76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e7a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	095b      	lsrs	r3, r3, #5
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d102      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x128>
 8001e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	e00f      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x148>
 8001ea0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	647b      	str	r3, [r7, #68]	@ 0x44
 8001eae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ebc:	4b46      	ldr	r3, [pc, #280]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ec4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001ec6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ec8:	fa92 f2a2 	rbit	r2, r2
 8001ecc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001ece:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ed0:	fab2 f282 	clz	r2, r2
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	f042 0220 	orr.w	r2, r2, #32
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	f002 021f 	and.w	r2, r2, #31
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d13a      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0b2      	b.n	8002056 <HAL_RCC_ClockConfig+0x2de>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d102      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x1a0>
 8001f12:	4b31      	ldr	r3, [pc, #196]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	e00d      	b.n	8001f34 <HAL_RCC_ClockConfig+0x1bc>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f24:	2302      	movs	r3, #2
 8001f26:	623b      	str	r3, [r7, #32]
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	4b29      	ldr	r3, [pc, #164]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	2202      	movs	r2, #2
 8001f36:	61ba      	str	r2, [r7, #24]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	fa92 f2a2 	rbit	r2, r2
 8001f3e:	617a      	str	r2, [r7, #20]
  return result;
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	fab2 f282 	clz	r2, r2
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	f042 0220 	orr.w	r2, r2, #32
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	f002 021f 	and.w	r2, r2, #31
 8001f52:	2101      	movs	r1, #1
 8001f54:	fa01 f202 	lsl.w	r2, r1, r2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e079      	b.n	8002056 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	491a      	ldr	r1, [pc, #104]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f74:	f7fe fc32 	bl	80007dc <HAL_GetTick>
 8001f78:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7fe fc2e 	bl	80007dc <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e061      	b.n	8002056 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <HAL_RCC_ClockConfig+0x260>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <HAL_RCC_ClockConfig+0x25c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d214      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <HAL_RCC_ClockConfig+0x25c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 0207 	bic.w	r2, r3, #7
 8001fba:	4906      	ldr	r1, [pc, #24]	@ (8001fd4 <HAL_RCC_ClockConfig+0x25c>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <HAL_RCC_ClockConfig+0x25c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e040      	b.n	8002056 <HAL_RCC_ClockConfig+0x2de>
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8002060 <HAL_RCC_ClockConfig+0x2e8>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	491a      	ldr	r1, [pc, #104]	@ (8002060 <HAL_RCC_ClockConfig+0x2e8>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002006:	4b16      	ldr	r3, [pc, #88]	@ (8002060 <HAL_RCC_ClockConfig+0x2e8>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4912      	ldr	r1, [pc, #72]	@ (8002060 <HAL_RCC_ClockConfig+0x2e8>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800201a:	f000 f829 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 800201e:	4601      	mov	r1, r0
 8002020:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <HAL_RCC_ClockConfig+0x2e8>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002028:	22f0      	movs	r2, #240	@ 0xf0
 800202a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	fa92 f2a2 	rbit	r2, r2
 8002032:	60fa      	str	r2, [r7, #12]
  return result;
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	fab2 f282 	clz	r2, r2
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	40d3      	lsrs	r3, r2
 800203e:	4a09      	ldr	r2, [pc, #36]	@ (8002064 <HAL_RCC_ClockConfig+0x2ec>)
 8002040:	5cd3      	ldrb	r3, [r2, r3]
 8002042:	fa21 f303 	lsr.w	r3, r1, r3
 8002046:	4a08      	ldr	r2, [pc, #32]	@ (8002068 <HAL_RCC_ClockConfig+0x2f0>)
 8002048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800204a:	4b08      	ldr	r3, [pc, #32]	@ (800206c <HAL_RCC_ClockConfig+0x2f4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fb80 	bl	8000754 <HAL_InitTick>
  
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3778      	adds	r7, #120	@ 0x78
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	08002ea4 	.word	0x08002ea4
 8002068:	20000010 	.word	0x20000010
 800206c:	20000014 	.word	0x20000014

08002070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	b08b      	sub	sp, #44	@ 0x2c
 8002074:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800208a:	4b29      	ldr	r3, [pc, #164]	@ (8002130 <HAL_RCC_GetSysClockFreq+0xc0>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b04      	cmp	r3, #4
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x30>
 800209a:	2b08      	cmp	r3, #8
 800209c:	d003      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x36>
 800209e:	e03c      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a0:	4b24      	ldr	r3, [pc, #144]	@ (8002134 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020a2:	623b      	str	r3, [r7, #32]
      break;
 80020a4:	e03c      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80020ac:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80020b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	fa92 f2a2 	rbit	r2, r2
 80020b8:	607a      	str	r2, [r7, #4]
  return result;
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	fab2 f282 	clz	r2, r2
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	40d3      	lsrs	r3, r2
 80020c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002138 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020c6:	5cd3      	ldrb	r3, [r2, r3]
 80020c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020ca:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	220f      	movs	r2, #15
 80020d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	fa92 f2a2 	rbit	r2, r2
 80020dc:	60fa      	str	r2, [r7, #12]
  return result;
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	fab2 f282 	clz	r2, r2
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	40d3      	lsrs	r3, r2
 80020e8:	4a14      	ldr	r2, [pc, #80]	@ (800213c <HAL_RCC_GetSysClockFreq+0xcc>)
 80020ea:	5cd3      	ldrb	r3, [r2, r3]
 80020ec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002134 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
 8002108:	e004      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	4a0c      	ldr	r2, [pc, #48]	@ (8002140 <HAL_RCC_GetSysClockFreq+0xd0>)
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	623b      	str	r3, [r7, #32]
      break;
 8002118:	e002      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <HAL_RCC_GetSysClockFreq+0xc4>)
 800211c:	623b      	str	r3, [r7, #32]
      break;
 800211e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002120:	6a3b      	ldr	r3, [r7, #32]
}
 8002122:	4618      	mov	r0, r3
 8002124:	372c      	adds	r7, #44	@ 0x2c
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	007a1200 	.word	0x007a1200
 8002138:	08002eb4 	.word	0x08002eb4
 800213c:	08002ec4 	.word	0x08002ec4
 8002140:	003d0900 	.word	0x003d0900

08002144 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e049      	b.n	80021ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe fa1e 	bl	80005ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3304      	adds	r3, #4
 8002180:	4619      	mov	r1, r3
 8002182:	4610      	mov	r0, r2
 8002184:	f000 fa4a 	bl	800261c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d109      	bne.n	8002218 <HAL_TIM_PWM_Start+0x24>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	bf14      	ite	ne
 8002210:	2301      	movne	r3, #1
 8002212:	2300      	moveq	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	e03c      	b.n	8002292 <HAL_TIM_PWM_Start+0x9e>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d109      	bne.n	8002232 <HAL_TIM_PWM_Start+0x3e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	bf14      	ite	ne
 800222a:	2301      	movne	r3, #1
 800222c:	2300      	moveq	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	e02f      	b.n	8002292 <HAL_TIM_PWM_Start+0x9e>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b08      	cmp	r3, #8
 8002236:	d109      	bne.n	800224c <HAL_TIM_PWM_Start+0x58>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b01      	cmp	r3, #1
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	e022      	b.n	8002292 <HAL_TIM_PWM_Start+0x9e>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d109      	bne.n	8002266 <HAL_TIM_PWM_Start+0x72>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b01      	cmp	r3, #1
 800225c:	bf14      	ite	ne
 800225e:	2301      	movne	r3, #1
 8002260:	2300      	moveq	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	e015      	b.n	8002292 <HAL_TIM_PWM_Start+0x9e>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b10      	cmp	r3, #16
 800226a:	d109      	bne.n	8002280 <HAL_TIM_PWM_Start+0x8c>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b01      	cmp	r3, #1
 8002276:	bf14      	ite	ne
 8002278:	2301      	movne	r3, #1
 800227a:	2300      	moveq	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e008      	b.n	8002292 <HAL_TIM_PWM_Start+0x9e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b01      	cmp	r3, #1
 800228a:	bf14      	ite	ne
 800228c:	2301      	movne	r3, #1
 800228e:	2300      	moveq	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e097      	b.n	80023ca <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d104      	bne.n	80022aa <HAL_TIM_PWM_Start+0xb6>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022a8:	e023      	b.n	80022f2 <HAL_TIM_PWM_Start+0xfe>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d104      	bne.n	80022ba <HAL_TIM_PWM_Start+0xc6>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022b8:	e01b      	b.n	80022f2 <HAL_TIM_PWM_Start+0xfe>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d104      	bne.n	80022ca <HAL_TIM_PWM_Start+0xd6>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022c8:	e013      	b.n	80022f2 <HAL_TIM_PWM_Start+0xfe>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b0c      	cmp	r3, #12
 80022ce:	d104      	bne.n	80022da <HAL_TIM_PWM_Start+0xe6>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022d8:	e00b      	b.n	80022f2 <HAL_TIM_PWM_Start+0xfe>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b10      	cmp	r3, #16
 80022de:	d104      	bne.n	80022ea <HAL_TIM_PWM_Start+0xf6>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022e8:	e003      	b.n	80022f2 <HAL_TIM_PWM_Start+0xfe>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2202      	movs	r2, #2
 80022ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2201      	movs	r2, #1
 80022f8:	6839      	ldr	r1, [r7, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fcf4 	bl	8002ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a33      	ldr	r2, [pc, #204]	@ (80023d4 <HAL_TIM_PWM_Start+0x1e0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <HAL_TIM_PWM_Start+0x13e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a32      	ldr	r2, [pc, #200]	@ (80023d8 <HAL_TIM_PWM_Start+0x1e4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00e      	beq.n	8002332 <HAL_TIM_PWM_Start+0x13e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a30      	ldr	r2, [pc, #192]	@ (80023dc <HAL_TIM_PWM_Start+0x1e8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d009      	beq.n	8002332 <HAL_TIM_PWM_Start+0x13e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a2f      	ldr	r2, [pc, #188]	@ (80023e0 <HAL_TIM_PWM_Start+0x1ec>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d004      	beq.n	8002332 <HAL_TIM_PWM_Start+0x13e>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a2d      	ldr	r2, [pc, #180]	@ (80023e4 <HAL_TIM_PWM_Start+0x1f0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d101      	bne.n	8002336 <HAL_TIM_PWM_Start+0x142>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_TIM_PWM_Start+0x144>
 8002336:	2300      	movs	r3, #0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d007      	beq.n	800234c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800234a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a20      	ldr	r2, [pc, #128]	@ (80023d4 <HAL_TIM_PWM_Start+0x1e0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d018      	beq.n	8002388 <HAL_TIM_PWM_Start+0x194>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800235e:	d013      	beq.n	8002388 <HAL_TIM_PWM_Start+0x194>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a20      	ldr	r2, [pc, #128]	@ (80023e8 <HAL_TIM_PWM_Start+0x1f4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00e      	beq.n	8002388 <HAL_TIM_PWM_Start+0x194>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1f      	ldr	r2, [pc, #124]	@ (80023ec <HAL_TIM_PWM_Start+0x1f8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d009      	beq.n	8002388 <HAL_TIM_PWM_Start+0x194>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a17      	ldr	r2, [pc, #92]	@ (80023d8 <HAL_TIM_PWM_Start+0x1e4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d004      	beq.n	8002388 <HAL_TIM_PWM_Start+0x194>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a16      	ldr	r2, [pc, #88]	@ (80023dc <HAL_TIM_PWM_Start+0x1e8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d115      	bne.n	80023b4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	4b18      	ldr	r3, [pc, #96]	@ (80023f0 <HAL_TIM_PWM_Start+0x1fc>)
 8002390:	4013      	ands	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b06      	cmp	r3, #6
 8002398:	d015      	beq.n	80023c6 <HAL_TIM_PWM_Start+0x1d2>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a0:	d011      	beq.n	80023c6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0201 	orr.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b2:	e008      	b.n	80023c6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	e000      	b.n	80023c8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40012c00 	.word	0x40012c00
 80023d8:	40013400 	.word	0x40013400
 80023dc:	40014000 	.word	0x40014000
 80023e0:	40014400 	.word	0x40014400
 80023e4:	40014800 	.word	0x40014800
 80023e8:	40000400 	.word	0x40000400
 80023ec:	40000800 	.word	0x40000800
 80023f0:	00010007 	.word	0x00010007

080023f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800240e:	2302      	movs	r3, #2
 8002410:	e0ff      	b.n	8002612 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b14      	cmp	r3, #20
 800241e:	f200 80f0 	bhi.w	8002602 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002422:	a201      	add	r2, pc, #4	@ (adr r2, 8002428 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002428:	0800247d 	.word	0x0800247d
 800242c:	08002603 	.word	0x08002603
 8002430:	08002603 	.word	0x08002603
 8002434:	08002603 	.word	0x08002603
 8002438:	080024bd 	.word	0x080024bd
 800243c:	08002603 	.word	0x08002603
 8002440:	08002603 	.word	0x08002603
 8002444:	08002603 	.word	0x08002603
 8002448:	080024ff 	.word	0x080024ff
 800244c:	08002603 	.word	0x08002603
 8002450:	08002603 	.word	0x08002603
 8002454:	08002603 	.word	0x08002603
 8002458:	0800253f 	.word	0x0800253f
 800245c:	08002603 	.word	0x08002603
 8002460:	08002603 	.word	0x08002603
 8002464:	08002603 	.word	0x08002603
 8002468:	08002581 	.word	0x08002581
 800246c:	08002603 	.word	0x08002603
 8002470:	08002603 	.word	0x08002603
 8002474:	08002603 	.word	0x08002603
 8002478:	080025c1 	.word	0x080025c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f95a 	bl	800273c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699a      	ldr	r2, [r3, #24]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0208 	orr.w	r2, r2, #8
 8002496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0204 	bic.w	r2, r2, #4
 80024a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6999      	ldr	r1, [r3, #24]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	619a      	str	r2, [r3, #24]
      break;
 80024ba:	e0a5      	b.n	8002608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f9ca 	bl	800285c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699a      	ldr	r2, [r3, #24]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6999      	ldr	r1, [r3, #24]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	021a      	lsls	r2, r3, #8
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	619a      	str	r2, [r3, #24]
      break;
 80024fc:	e084      	b.n	8002608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fa33 	bl	8002970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69da      	ldr	r2, [r3, #28]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0208 	orr.w	r2, r2, #8
 8002518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69da      	ldr	r2, [r3, #28]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0204 	bic.w	r2, r2, #4
 8002528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69d9      	ldr	r1, [r3, #28]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	61da      	str	r2, [r3, #28]
      break;
 800253c:	e064      	b.n	8002608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fa9b 	bl	8002a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69da      	ldr	r2, [r3, #28]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	69da      	ldr	r2, [r3, #28]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69d9      	ldr	r1, [r3, #28]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	021a      	lsls	r2, r3, #8
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	61da      	str	r2, [r3, #28]
      break;
 800257e:	e043      	b.n	8002608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fae4 	bl	8002b54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0208 	orr.w	r2, r2, #8
 800259a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0204 	bic.w	r2, r2, #4
 80025aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80025be:	e023      	b.n	8002608 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fb28 	bl	8002c1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	021a      	lsls	r2, r3, #8
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002600:	e002      	b.n	8002608 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	75fb      	strb	r3, [r7, #23]
      break;
 8002606:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002610:	7dfb      	ldrb	r3, [r7, #23]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop

0800261c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a3c      	ldr	r2, [pc, #240]	@ (8002720 <TIM_Base_SetConfig+0x104>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00f      	beq.n	8002654 <TIM_Base_SetConfig+0x38>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800263a:	d00b      	beq.n	8002654 <TIM_Base_SetConfig+0x38>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a39      	ldr	r2, [pc, #228]	@ (8002724 <TIM_Base_SetConfig+0x108>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d007      	beq.n	8002654 <TIM_Base_SetConfig+0x38>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a38      	ldr	r2, [pc, #224]	@ (8002728 <TIM_Base_SetConfig+0x10c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d003      	beq.n	8002654 <TIM_Base_SetConfig+0x38>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a37      	ldr	r2, [pc, #220]	@ (800272c <TIM_Base_SetConfig+0x110>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d108      	bne.n	8002666 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800265a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a2d      	ldr	r2, [pc, #180]	@ (8002720 <TIM_Base_SetConfig+0x104>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01b      	beq.n	80026a6 <TIM_Base_SetConfig+0x8a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002674:	d017      	beq.n	80026a6 <TIM_Base_SetConfig+0x8a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a2a      	ldr	r2, [pc, #168]	@ (8002724 <TIM_Base_SetConfig+0x108>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <TIM_Base_SetConfig+0x8a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a29      	ldr	r2, [pc, #164]	@ (8002728 <TIM_Base_SetConfig+0x10c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00f      	beq.n	80026a6 <TIM_Base_SetConfig+0x8a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a28      	ldr	r2, [pc, #160]	@ (800272c <TIM_Base_SetConfig+0x110>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00b      	beq.n	80026a6 <TIM_Base_SetConfig+0x8a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a27      	ldr	r2, [pc, #156]	@ (8002730 <TIM_Base_SetConfig+0x114>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <TIM_Base_SetConfig+0x8a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a26      	ldr	r2, [pc, #152]	@ (8002734 <TIM_Base_SetConfig+0x118>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d003      	beq.n	80026a6 <TIM_Base_SetConfig+0x8a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a25      	ldr	r2, [pc, #148]	@ (8002738 <TIM_Base_SetConfig+0x11c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d108      	bne.n	80026b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a10      	ldr	r2, [pc, #64]	@ (8002720 <TIM_Base_SetConfig+0x104>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d00f      	beq.n	8002704 <TIM_Base_SetConfig+0xe8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a11      	ldr	r2, [pc, #68]	@ (800272c <TIM_Base_SetConfig+0x110>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d00b      	beq.n	8002704 <TIM_Base_SetConfig+0xe8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a10      	ldr	r2, [pc, #64]	@ (8002730 <TIM_Base_SetConfig+0x114>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d007      	beq.n	8002704 <TIM_Base_SetConfig+0xe8>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002734 <TIM_Base_SetConfig+0x118>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d003      	beq.n	8002704 <TIM_Base_SetConfig+0xe8>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002738 <TIM_Base_SetConfig+0x11c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d103      	bne.n	800270c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	615a      	str	r2, [r3, #20]
}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40012c00 	.word	0x40012c00
 8002724:	40000400 	.word	0x40000400
 8002728:	40000800 	.word	0x40000800
 800272c:	40013400 	.word	0x40013400
 8002730:	40014000 	.word	0x40014000
 8002734:	40014400 	.word	0x40014400
 8002738:	40014800 	.word	0x40014800

0800273c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	f023 0201 	bic.w	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800276a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800276e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 0303 	bic.w	r3, r3, #3
 8002776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f023 0302 	bic.w	r3, r3, #2
 8002788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a2c      	ldr	r2, [pc, #176]	@ (8002848 <TIM_OC1_SetConfig+0x10c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00f      	beq.n	80027bc <TIM_OC1_SetConfig+0x80>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a2b      	ldr	r2, [pc, #172]	@ (800284c <TIM_OC1_SetConfig+0x110>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00b      	beq.n	80027bc <TIM_OC1_SetConfig+0x80>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002850 <TIM_OC1_SetConfig+0x114>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d007      	beq.n	80027bc <TIM_OC1_SetConfig+0x80>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a29      	ldr	r2, [pc, #164]	@ (8002854 <TIM_OC1_SetConfig+0x118>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d003      	beq.n	80027bc <TIM_OC1_SetConfig+0x80>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a28      	ldr	r2, [pc, #160]	@ (8002858 <TIM_OC1_SetConfig+0x11c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d10c      	bne.n	80027d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f023 0308 	bic.w	r3, r3, #8
 80027c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f023 0304 	bic.w	r3, r3, #4
 80027d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002848 <TIM_OC1_SetConfig+0x10c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00f      	beq.n	80027fe <TIM_OC1_SetConfig+0xc2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a1a      	ldr	r2, [pc, #104]	@ (800284c <TIM_OC1_SetConfig+0x110>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00b      	beq.n	80027fe <TIM_OC1_SetConfig+0xc2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a19      	ldr	r2, [pc, #100]	@ (8002850 <TIM_OC1_SetConfig+0x114>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <TIM_OC1_SetConfig+0xc2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a18      	ldr	r2, [pc, #96]	@ (8002854 <TIM_OC1_SetConfig+0x118>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d003      	beq.n	80027fe <TIM_OC1_SetConfig+0xc2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a17      	ldr	r2, [pc, #92]	@ (8002858 <TIM_OC1_SetConfig+0x11c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d111      	bne.n	8002822 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800280c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	621a      	str	r2, [r3, #32]
}
 800283c:	bf00      	nop
 800283e:	371c      	adds	r7, #28
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	40012c00 	.word	0x40012c00
 800284c:	40013400 	.word	0x40013400
 8002850:	40014000 	.word	0x40014000
 8002854:	40014400 	.word	0x40014400
 8002858:	40014800 	.word	0x40014800

0800285c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f023 0210 	bic.w	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800288a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800288e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f023 0320 	bic.w	r3, r3, #32
 80028aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a28      	ldr	r2, [pc, #160]	@ (800295c <TIM_OC2_SetConfig+0x100>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d003      	beq.n	80028c8 <TIM_OC2_SetConfig+0x6c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a27      	ldr	r2, [pc, #156]	@ (8002960 <TIM_OC2_SetConfig+0x104>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d10d      	bne.n	80028e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a1d      	ldr	r2, [pc, #116]	@ (800295c <TIM_OC2_SetConfig+0x100>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00f      	beq.n	800290c <TIM_OC2_SetConfig+0xb0>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002960 <TIM_OC2_SetConfig+0x104>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00b      	beq.n	800290c <TIM_OC2_SetConfig+0xb0>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002964 <TIM_OC2_SetConfig+0x108>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d007      	beq.n	800290c <TIM_OC2_SetConfig+0xb0>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002968 <TIM_OC2_SetConfig+0x10c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d003      	beq.n	800290c <TIM_OC2_SetConfig+0xb0>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a19      	ldr	r2, [pc, #100]	@ (800296c <TIM_OC2_SetConfig+0x110>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d113      	bne.n	8002934 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002912:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800291a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	621a      	str	r2, [r3, #32]
}
 800294e:	bf00      	nop
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40013400 	.word	0x40013400
 8002964:	40014000 	.word	0x40014000
 8002968:	40014400 	.word	0x40014400
 800296c:	40014800 	.word	0x40014800

08002970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800299e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0303 	bic.w	r3, r3, #3
 80029aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a27      	ldr	r2, [pc, #156]	@ (8002a6c <TIM_OC3_SetConfig+0xfc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d003      	beq.n	80029da <TIM_OC3_SetConfig+0x6a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a26      	ldr	r2, [pc, #152]	@ (8002a70 <TIM_OC3_SetConfig+0x100>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10d      	bne.n	80029f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80029e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80029f4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a6c <TIM_OC3_SetConfig+0xfc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d00f      	beq.n	8002a1e <TIM_OC3_SetConfig+0xae>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a1b      	ldr	r2, [pc, #108]	@ (8002a70 <TIM_OC3_SetConfig+0x100>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00b      	beq.n	8002a1e <TIM_OC3_SetConfig+0xae>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a1a      	ldr	r2, [pc, #104]	@ (8002a74 <TIM_OC3_SetConfig+0x104>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <TIM_OC3_SetConfig+0xae>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a19      	ldr	r2, [pc, #100]	@ (8002a78 <TIM_OC3_SetConfig+0x108>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d003      	beq.n	8002a1e <TIM_OC3_SetConfig+0xae>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a18      	ldr	r2, [pc, #96]	@ (8002a7c <TIM_OC3_SetConfig+0x10c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d113      	bne.n	8002a46 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	621a      	str	r2, [r3, #32]
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40013400 	.word	0x40013400
 8002a74:	40014000 	.word	0x40014000
 8002a78:	40014400 	.word	0x40014400
 8002a7c:	40014800 	.word	0x40014800

08002a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	031b      	lsls	r3, r3, #12
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a18      	ldr	r2, [pc, #96]	@ (8002b40 <TIM_OC4_SetConfig+0xc0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d00f      	beq.n	8002b04 <TIM_OC4_SetConfig+0x84>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a17      	ldr	r2, [pc, #92]	@ (8002b44 <TIM_OC4_SetConfig+0xc4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00b      	beq.n	8002b04 <TIM_OC4_SetConfig+0x84>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a16      	ldr	r2, [pc, #88]	@ (8002b48 <TIM_OC4_SetConfig+0xc8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d007      	beq.n	8002b04 <TIM_OC4_SetConfig+0x84>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a15      	ldr	r2, [pc, #84]	@ (8002b4c <TIM_OC4_SetConfig+0xcc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d003      	beq.n	8002b04 <TIM_OC4_SetConfig+0x84>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a14      	ldr	r2, [pc, #80]	@ (8002b50 <TIM_OC4_SetConfig+0xd0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d109      	bne.n	8002b18 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	019b      	lsls	r3, r3, #6
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	621a      	str	r2, [r3, #32]
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40013400 	.word	0x40013400
 8002b48:	40014000 	.word	0x40014000
 8002b4c:	40014400 	.word	0x40014400
 8002b50:	40014800 	.word	0x40014800

08002b54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002b98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	041b      	lsls	r3, r3, #16
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a17      	ldr	r2, [pc, #92]	@ (8002c08 <TIM_OC5_SetConfig+0xb4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00f      	beq.n	8002bce <TIM_OC5_SetConfig+0x7a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a16      	ldr	r2, [pc, #88]	@ (8002c0c <TIM_OC5_SetConfig+0xb8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00b      	beq.n	8002bce <TIM_OC5_SetConfig+0x7a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a15      	ldr	r2, [pc, #84]	@ (8002c10 <TIM_OC5_SetConfig+0xbc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d007      	beq.n	8002bce <TIM_OC5_SetConfig+0x7a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a14      	ldr	r2, [pc, #80]	@ (8002c14 <TIM_OC5_SetConfig+0xc0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d003      	beq.n	8002bce <TIM_OC5_SetConfig+0x7a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a13      	ldr	r2, [pc, #76]	@ (8002c18 <TIM_OC5_SetConfig+0xc4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d109      	bne.n	8002be2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	621a      	str	r2, [r3, #32]
}
 8002bfc:	bf00      	nop
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	40012c00 	.word	0x40012c00
 8002c0c:	40013400 	.word	0x40013400
 8002c10:	40014000 	.word	0x40014000
 8002c14:	40014400 	.word	0x40014400
 8002c18:	40014800 	.word	0x40014800

08002c1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	051b      	lsls	r3, r3, #20
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a18      	ldr	r2, [pc, #96]	@ (8002cd4 <TIM_OC6_SetConfig+0xb8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d00f      	beq.n	8002c98 <TIM_OC6_SetConfig+0x7c>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <TIM_OC6_SetConfig+0xbc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00b      	beq.n	8002c98 <TIM_OC6_SetConfig+0x7c>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a16      	ldr	r2, [pc, #88]	@ (8002cdc <TIM_OC6_SetConfig+0xc0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d007      	beq.n	8002c98 <TIM_OC6_SetConfig+0x7c>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a15      	ldr	r2, [pc, #84]	@ (8002ce0 <TIM_OC6_SetConfig+0xc4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <TIM_OC6_SetConfig+0x7c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a14      	ldr	r2, [pc, #80]	@ (8002ce4 <TIM_OC6_SetConfig+0xc8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d109      	bne.n	8002cac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	029b      	lsls	r3, r3, #10
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	621a      	str	r2, [r3, #32]
}
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40012c00 	.word	0x40012c00
 8002cd8:	40013400 	.word	0x40013400
 8002cdc:	40014000 	.word	0x40014000
 8002ce0:	40014400 	.word	0x40014400
 8002ce4:	40014800 	.word	0x40014800

08002ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 031f 	and.w	r3, r3, #31
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1a      	ldr	r2, [r3, #32]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1a      	ldr	r2, [r3, #32]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	431a      	orrs	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	621a      	str	r2, [r3, #32]
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e063      	b.n	8002e14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2b      	ldr	r2, [pc, #172]	@ (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d004      	beq.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d108      	bne.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002d86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1b      	ldr	r2, [pc, #108]	@ (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d018      	beq.n	8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dbe:	d013      	beq.n	8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a18      	ldr	r2, [pc, #96]	@ (8002e28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00e      	beq.n	8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a17      	ldr	r2, [pc, #92]	@ (8002e2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d009      	beq.n	8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a12      	ldr	r2, [pc, #72]	@ (8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d004      	beq.n	8002de8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a13      	ldr	r2, [pc, #76]	@ (8002e30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d10c      	bne.n	8002e02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	40013400 	.word	0x40013400
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40000800 	.word	0x40000800
 8002e30:	40014000 	.word	0x40014000

08002e34 <memset>:
 8002e34:	4402      	add	r2, r0
 8002e36:	4603      	mov	r3, r0
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d100      	bne.n	8002e3e <memset+0xa>
 8002e3c:	4770      	bx	lr
 8002e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e42:	e7f9      	b.n	8002e38 <memset+0x4>

08002e44 <__libc_init_array>:
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	4d0d      	ldr	r5, [pc, #52]	@ (8002e7c <__libc_init_array+0x38>)
 8002e48:	4c0d      	ldr	r4, [pc, #52]	@ (8002e80 <__libc_init_array+0x3c>)
 8002e4a:	1b64      	subs	r4, r4, r5
 8002e4c:	10a4      	asrs	r4, r4, #2
 8002e4e:	2600      	movs	r6, #0
 8002e50:	42a6      	cmp	r6, r4
 8002e52:	d109      	bne.n	8002e68 <__libc_init_array+0x24>
 8002e54:	4d0b      	ldr	r5, [pc, #44]	@ (8002e84 <__libc_init_array+0x40>)
 8002e56:	4c0c      	ldr	r4, [pc, #48]	@ (8002e88 <__libc_init_array+0x44>)
 8002e58:	f000 f818 	bl	8002e8c <_init>
 8002e5c:	1b64      	subs	r4, r4, r5
 8002e5e:	10a4      	asrs	r4, r4, #2
 8002e60:	2600      	movs	r6, #0
 8002e62:	42a6      	cmp	r6, r4
 8002e64:	d105      	bne.n	8002e72 <__libc_init_array+0x2e>
 8002e66:	bd70      	pop	{r4, r5, r6, pc}
 8002e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e6c:	4798      	blx	r3
 8002e6e:	3601      	adds	r6, #1
 8002e70:	e7ee      	b.n	8002e50 <__libc_init_array+0xc>
 8002e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e76:	4798      	blx	r3
 8002e78:	3601      	adds	r6, #1
 8002e7a:	e7f2      	b.n	8002e62 <__libc_init_array+0x1e>
 8002e7c:	08002ed4 	.word	0x08002ed4
 8002e80:	08002ed4 	.word	0x08002ed4
 8002e84:	08002ed4 	.word	0x08002ed4
 8002e88:	08002ed8 	.word	0x08002ed8

08002e8c <_init>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	bf00      	nop
 8002e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e92:	bc08      	pop	{r3}
 8002e94:	469e      	mov	lr, r3
 8002e96:	4770      	bx	lr

08002e98 <_fini>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	bf00      	nop
 8002e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9e:	bc08      	pop	{r3}
 8002ea0:	469e      	mov	lr, r3
 8002ea2:	4770      	bx	lr
