
007_MPU6050_Angle_Read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d38  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08008ec8  08008ec8  00009ec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009460  08009460  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009460  08009460  0000a460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009468  08009468  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009468  08009468  0000a468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800946c  0800946c  0000a46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009470  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1e8  2**0
                  CONTENTS
 10 .bss          000001d8  200001e8  200001e8  0000b1e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200003c0  200003c0  0000b1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ab9  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b79  00000000  00000000  00013cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000848  00000000  00000000  00015850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000631  00000000  00000000  00016098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dcc4  00000000  00000000  000166c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c410  00000000  00000000  0003438d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000abaa6  00000000  00000000  0004079d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ec243  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036c8  00000000  00000000  000ec288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  000ef950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008eb0 	.word	0x08008eb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08008eb0 	.word	0x08008eb0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <led_on>:
  * @brief Turns on or off LEDs based on the condition of degree x and y.
  * @param None
  * @retval None
  */
void led_on()
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Turn on LED on pin PA2 if degreey is greater than 10 */
  if(degreey > 10) {
 8000cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8000da4 <led_on+0xb0>)
 8000cfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cfe:	f04f 0200 	mov.w	r2, #0
 8000d02:	4b29      	ldr	r3, [pc, #164]	@ (8000da8 <led_on+0xb4>)
 8000d04:	f7ff ff08 	bl	8000b18 <__aeabi_dcmpgt>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d006      	beq.n	8000d1c <led_on+0x28>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2104      	movs	r1, #4
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d16:	f000 ffaf 	bl	8001c78 <HAL_GPIO_WritePin>
 8000d1a:	e005      	b.n	8000d28 <led_on+0x34>
  } else {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2104      	movs	r1, #4
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d24:	f000 ffa8 	bl	8001c78 <HAL_GPIO_WritePin>
  }
  /* Turn on LED on pin PA3 if degreex is greater than 25 or less than -25 */
  if( (degreex > 25) || (degreex < -25)) {
 8000d28:	4b20      	ldr	r3, [pc, #128]	@ (8000dac <led_on+0xb8>)
 8000d2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d2e:	f04f 0200 	mov.w	r2, #0
 8000d32:	4b1f      	ldr	r3, [pc, #124]	@ (8000db0 <led_on+0xbc>)
 8000d34:	f7ff fef0 	bl	8000b18 <__aeabi_dcmpgt>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10a      	bne.n	8000d54 <led_on+0x60>
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dac <led_on+0xb8>)
 8000d40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <led_on+0xc0>)
 8000d4a:	f7ff fec7 	bl	8000adc <__aeabi_dcmplt>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d006      	beq.n	8000d62 <led_on+0x6e>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2108      	movs	r1, #8
 8000d58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5c:	f000 ff8c 	bl	8001c78 <HAL_GPIO_WritePin>
 8000d60:	e005      	b.n	8000d6e <led_on+0x7a>
  } else {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2108      	movs	r1, #8
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6a:	f000 ff85 	bl	8001c78 <HAL_GPIO_WritePin>
  }
  /* Turn on LED on pin PA1 if degreey is less than -10 */
  if(degreey < -10) {
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <led_on+0xb0>)
 8000d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d74:	f04f 0200 	mov.w	r2, #0
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <led_on+0xc4>)
 8000d7a:	f7ff feaf 	bl	8000adc <__aeabi_dcmplt>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <led_on+0x9e>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2102      	movs	r1, #2
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8c:	f000 ff74 	bl	8001c78 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
  }
}
 8000d90:	e005      	b.n	8000d9e <led_on+0xaa>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2102      	movs	r1, #2
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d9a:	f000 ff6d 	bl	8001c78 <HAL_GPIO_WritePin>
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000260 	.word	0x20000260
 8000da8:	40240000 	.word	0x40240000
 8000dac:	20000258 	.word	0x20000258
 8000db0:	40390000 	.word	0x40390000
 8000db4:	c0390000 	.word	0xc0390000
 8000db8:	c0240000 	.word	0xc0240000

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc0:	f000 fc94 	bl	80016ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc4:	f000 f80c 	bl	8000de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc8:	f000 f8ac 	bl	8000f24 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dcc:	f000 f864 	bl	8000e98 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the MPU6050 sensor */
  mpu6050_init();
 8000dd0:	f000 f8f8 	bl	8000fc4 <mpu6050_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* Read sensor data from the MPU6050 */
    mpu6050_read();
 8000dd4:	f000 f978 	bl	80010c8 <mpu6050_read>
    /* Check conditions to turn on/off LEDs based on sensor readings */
    led_on();
 8000dd8:	f7ff ff8c 	bl	8000cf4 <led_on>
    mpu6050_read();
 8000ddc:	bf00      	nop
 8000dde:	e7f9      	b.n	8000dd4 <main+0x18>

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b09e      	sub	sp, #120	@ 0x78
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000dea:	2228      	movs	r2, #40	@ 0x28
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f004 f9d2 	bl	8005198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	463b      	mov	r3, r7
 8000e06:	223c      	movs	r2, #60	@ 0x3c
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f004 f9c4 	bl	8005198 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e10:	2303      	movs	r3, #3
 8000e12:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e18:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e22:	2310      	movs	r3, #16
 8000e24:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e26:	2302      	movs	r3, #2
 8000e28:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e2e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e30:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e34:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e36:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fd42 	bl	80028c4 <HAL_RCC_OscConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e46:	f000 f8b7 	bl	8000fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4a:	230f      	movs	r3, #15
 8000e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e60:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e64:	2102      	movs	r1, #2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f002 fd6a 	bl	8003940 <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e72:	f000 f8a1 	bl	8000fb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e76:	2320      	movs	r3, #32
 8000e78:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7e:	463b      	mov	r3, r7
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 ff43 	bl	8003d0c <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000e8c:	f000 f894 	bl	8000fb8 <Error_Handler>
  }
}
 8000e90:	bf00      	nop
 8000e92:	3778      	adds	r7, #120	@ 0x78
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <MX_I2C1_Init+0x80>)
 8000e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000f1c <MX_I2C1_Init+0x84>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000001;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <MX_I2C1_Init+0x80>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <MX_I2C1_Init+0x80>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <MX_I2C1_Init+0x80>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	@ (8000f18 <MX_I2C1_Init+0x80>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eba:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <MX_I2C1_Init+0x80>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <MX_I2C1_Init+0x80>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <MX_I2C1_Init+0x80>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <MX_I2C1_Init+0x80>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ed2:	4811      	ldr	r0, [pc, #68]	@ (8000f18 <MX_I2C1_Init+0x80>)
 8000ed4:	f000 fee8 	bl	8001ca8 <HAL_I2C_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ede:	f000 f86b 	bl	8000fb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <MX_I2C1_Init+0x80>)
 8000ee6:	f001 fc55 	bl	8002794 <HAL_I2CEx_ConfigAnalogFilter>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ef0:	f000 f862 	bl	8000fb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4808      	ldr	r0, [pc, #32]	@ (8000f18 <MX_I2C1_Init+0x80>)
 8000ef8:	f001 fc97 	bl	800282a <HAL_I2CEx_ConfigDigitalFilter>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f02:	f000 f859 	bl	8000fb8 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <MX_I2C1_Init+0x88>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <MX_I2C1_Init+0x88>)
 8000f0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f10:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000204 	.word	0x20000204
 8000f1c:	40005400 	.word	0x40005400
 8000f20:	40010000 	.word	0x40010000

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <MX_GPIO_Init+0x90>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb4 <MX_GPIO_Init+0x90>)
 8000f40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f44:	6153      	str	r3, [r2, #20]
 8000f46:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <MX_GPIO_Init+0x90>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <MX_GPIO_Init+0x90>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4a17      	ldr	r2, [pc, #92]	@ (8000fb4 <MX_GPIO_Init+0x90>)
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f5c:	6153      	str	r3, [r2, #20]
 8000f5e:	4b15      	ldr	r3, [pc, #84]	@ (8000fb4 <MX_GPIO_Init+0x90>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <MX_GPIO_Init+0x90>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	4a11      	ldr	r2, [pc, #68]	@ (8000fb4 <MX_GPIO_Init+0x90>)
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f74:	6153      	str	r3, [r2, #20]
 8000f76:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <MX_GPIO_Init+0x90>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	210e      	movs	r1, #14
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f8a:	f000 fe75 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f8e:	230e      	movs	r3, #14
 8000f90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa8:	f000 fcec 	bl	8001984 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <Error_Handler+0x8>

08000fc4 <mpu6050_init>:
/**
  * @brief Initializes the MPU6050 sensor by configuring power management, gyroscope, and accelerometer.
  * @param None
  * @retval None
  */
void mpu6050_init() {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  PowerManagement_Config();
 8000fc8:	f000 f806 	bl	8000fd8 <PowerManagement_Config>
  Gyro_Config();
 8000fcc:	f000 f82c 	bl	8001028 <Gyro_Config>
  Accelerometer_Config();
 8000fd0:	f000 f852 	bl	8001078 <Accelerometer_Config>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <PowerManagement_Config>:
  * @brief Configures the power management settings of the MPU6050 sensor to exit sleep mode.
  * @param None
  * @retval None
  */
void PowerManagement_Config()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af04      	add	r7, sp, #16
  /* Set the value to be written to the power management register */
  temp_data = 0x00;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <PowerManagement_Config+0x40>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]

  /* Write the value to the power management register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_USR_CTRL, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	9302      	str	r3, [sp, #8]
 8000fea:	2301      	movs	r3, #1
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <PowerManagement_Config+0x40>)
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	226b      	movs	r2, #107	@ 0x6b
 8000ff6:	21d0      	movs	r1, #208	@ 0xd0
 8000ff8:	4808      	ldr	r0, [pc, #32]	@ (800101c <PowerManagement_Config+0x44>)
 8000ffa:	f000 fee5 	bl	8001dc8 <HAL_I2C_Mem_Write>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d103      	bne.n	800100c <PowerManagement_Config+0x34>
    /*print in SWV terminal*/
    printf("Exiting from sleep mode...\n");
 8001004:	4806      	ldr	r0, [pc, #24]	@ (8001020 <PowerManagement_Config+0x48>)
 8001006:	f003 ffc7 	bl	8004f98 <puts>
  } else {
    printf("Failed to exit from sleep mode...\n");
  }
}
 800100a:	e002      	b.n	8001012 <PowerManagement_Config+0x3a>
    printf("Failed to exit from sleep mode...\n");
 800100c:	4805      	ldr	r0, [pc, #20]	@ (8001024 <PowerManagement_Config+0x4c>)
 800100e:	f003 ffc3 	bl	8004f98 <puts>
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000268 	.word	0x20000268
 800101c:	20000204 	.word	0x20000204
 8001020:	08008ec8 	.word	0x08008ec8
 8001024:	08008ee4 	.word	0x08008ee4

08001028 <Gyro_Config>:
  * @brief Configures the gyroscope settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Gyro_Config()
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af04      	add	r7, sp, #16
  /* Set the value to be written to the gyroscope configuration register */
  temp_data = FS_GYRO_500;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <Gyro_Config+0x40>)
 8001030:	2208      	movs	r2, #8
 8001032:	701a      	strb	r2, [r3, #0]

  /* Write the value to the gyroscope configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_GYRO, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	2301      	movs	r3, #1
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <Gyro_Config+0x40>)
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	221b      	movs	r2, #27
 8001046:	21d0      	movs	r1, #208	@ 0xd0
 8001048:	4808      	ldr	r0, [pc, #32]	@ (800106c <Gyro_Config+0x44>)
 800104a:	f000 febd 	bl	8001dc8 <HAL_I2C_Mem_Write>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d103      	bne.n	800105c <Gyro_Config+0x34>
    printf("Configuring gyroscope...\n");
 8001054:	4806      	ldr	r0, [pc, #24]	@ (8001070 <Gyro_Config+0x48>)
 8001056:	f003 ff9f 	bl	8004f98 <puts>
  } else {
    printf("Failed to configure gyroscope...\n");
  }
}
 800105a:	e002      	b.n	8001062 <Gyro_Config+0x3a>
    printf("Failed to configure gyroscope...\n");
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <Gyro_Config+0x4c>)
 800105e:	f003 ff9b 	bl	8004f98 <puts>
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000268 	.word	0x20000268
 800106c:	20000204 	.word	0x20000204
 8001070:	08008f08 	.word	0x08008f08
 8001074:	08008f24 	.word	0x08008f24

08001078 <Accelerometer_Config>:
  * @brief Configures the accelerometer settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Accelerometer_Config()
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af04      	add	r7, sp, #16
  /* Set the value to be written to the accelerometer configuration register */
  temp_data = FS_ACC_4G;
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <Accelerometer_Config+0x40>)
 8001080:	2208      	movs	r2, #8
 8001082:	701a      	strb	r2, [r3, #0]

  /* Write the value to the accelerometer configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_ACC, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2301      	movs	r3, #1
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <Accelerometer_Config+0x40>)
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	221c      	movs	r2, #28
 8001096:	21d0      	movs	r1, #208	@ 0xd0
 8001098:	4808      	ldr	r0, [pc, #32]	@ (80010bc <Accelerometer_Config+0x44>)
 800109a:	f000 fe95 	bl	8001dc8 <HAL_I2C_Mem_Write>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d103      	bne.n	80010ac <Accelerometer_Config+0x34>
    printf("Configuring accelerometer...\n");
 80010a4:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <Accelerometer_Config+0x48>)
 80010a6:	f003 ff77 	bl	8004f98 <puts>
  } else {
    printf("Failed to configure accelerometer...\n");
  }
}
 80010aa:	e002      	b.n	80010b2 <Accelerometer_Config+0x3a>
    printf("Failed to configure accelerometer...\n");
 80010ac:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <Accelerometer_Config+0x4c>)
 80010ae:	f003 ff73 	bl	8004f98 <puts>
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000268 	.word	0x20000268
 80010bc:	20000204 	.word	0x20000204
 80010c0:	08008f48 	.word	0x08008f48
 80010c4:	08008f68 	.word	0x08008f68

080010c8 <mpu6050_read>:
  * @brief Reads data from the MPU6050 sensor, including accelerometer and gyroscope values,
  *        and calculates roll and pitch angles using the accelerometer data.
  * @param None
  * @retval None
  */
void mpu6050_read() {
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b0a2      	sub	sp, #136	@ 0x88
 80010cc:	af0a      	add	r7, sp, #40	@ 0x28
  int16_t x_gyro, y_gyro, z_gyro;           // Gyroscope data for x, y, and z axes
  double accx,accy,accz,gyrox,gyroy,gyroz;
  double radianx, radiany;

  /* Read all sensor data from the MPU6050 */
  HAL_I2C_Mem_Read(&hi2c1, (MPU6050_ADDR << 1), REG_DATA, 1, data, 14, HAL_MAX_DELAY);
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	230e      	movs	r3, #14
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	463b      	mov	r3, r7
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	223b      	movs	r2, #59	@ 0x3b
 80010e0:	21d0      	movs	r1, #208	@ 0xd0
 80010e2:	489b      	ldr	r0, [pc, #620]	@ (8001350 <mpu6050_read+0x288>)
 80010e4:	f000 ff84 	bl	8001ff0 <HAL_I2C_Mem_Read>

  /* Extract accelerometer data (16-bit 2's complement format, high byte first) */
  x_acc = (int16_t)((data[0] << 8) | data[1]);
 80010e8:	783b      	ldrb	r3, [r7, #0]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	787b      	ldrb	r3, [r7, #1]
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  y_acc = (int16_t)((data[2] << 8) | data[3]);
 80010f8:	78bb      	ldrb	r3, [r7, #2]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	78fb      	ldrb	r3, [r7, #3]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  z_acc = (int16_t)((data[4] << 8) | data[5]);
 8001108:	793b      	ldrb	r3, [r7, #4]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	b21a      	sxth	r2, r3
 800110e:	797b      	ldrb	r3, [r7, #5]
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

  /* Extract gyroscope data (16-bit 2's complement format, high byte first) */
  x_gyro = (int16_t)((data[8] << 8) | data[9]);
 8001118:	7a3b      	ldrb	r3, [r7, #8]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	7a7b      	ldrb	r3, [r7, #9]
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  y_gyro = (int16_t)((data[10] << 8) | data[11]);
 8001128:	7abb      	ldrb	r3, [r7, #10]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b21a      	sxth	r2, r3
 800112e:	7afb      	ldrb	r3, [r7, #11]
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  z_gyro = (int16_t)((data[12] << 8) | data[13]);
 8001138:	7b3b      	ldrb	r3, [r7, #12]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	7b7b      	ldrb	r3, [r7, #13]
 8001140:	b21b      	sxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

  /*Convert accelerometer raw values in to 'g'(acceleration due to gravity) values */
  accx = (double)x_acc / ACC_FS_SENSITIVITY_3;
 8001148:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f9e9 	bl	8000524 <__aeabi_i2d>
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b7f      	ldr	r3, [pc, #508]	@ (8001354 <mpu6050_read+0x28c>)
 8001158:	f7ff fb78 	bl	800084c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  accy = (double)y_acc / ACC_FS_SENSITIVITY_3;
 8001164:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f9db 	bl	8000524 <__aeabi_i2d>
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	4b78      	ldr	r3, [pc, #480]	@ (8001354 <mpu6050_read+0x28c>)
 8001174:	f7ff fb6a 	bl	800084c <__aeabi_ddiv>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  accz = (double)z_acc / ACC_FS_SENSITIVITY_3;
 8001180:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f9cd 	bl	8000524 <__aeabi_i2d>
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b71      	ldr	r3, [pc, #452]	@ (8001354 <mpu6050_read+0x28c>)
 8001190:	f7ff fb5c 	bl	800084c <__aeabi_ddiv>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  /* Convert gyroscope raw values to degrees per second ('°/s') */
  gyrox = (double)x_gyro / GYR_FS_SENSITIVITY_3;
 800119c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f9bf 	bl	8000524 <__aeabi_i2d>
 80011a6:	a366      	add	r3, pc, #408	@ (adr r3, 8001340 <mpu6050_read+0x278>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff fb4e 	bl	800084c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  gyroy = (double)y_gyro / GYR_FS_SENSITIVITY_3;
 80011b8:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f9b1 	bl	8000524 <__aeabi_i2d>
 80011c2:	a35f      	add	r3, pc, #380	@ (adr r3, 8001340 <mpu6050_read+0x278>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	f7ff fb40 	bl	800084c <__aeabi_ddiv>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  gyroz = (double)z_gyro / GYR_FS_SENSITIVITY_3;
 80011d4:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f9a3 	bl	8000524 <__aeabi_i2d>
 80011de:	a358      	add	r3, pc, #352	@ (adr r3, 8001340 <mpu6050_read+0x278>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fb32 	bl	800084c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	e9c7 2308 	strd	r2, r3, [r7, #32]

  /* Calculate roll and pitch angles using accelerometer data */
  radianx = asin(accx / sqrt(accx * accx + accz * accz)); // Fix the arguments passed to asin
 80011f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80011f4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80011f8:	f7ff f9fe 	bl	80005f8 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4614      	mov	r4, r2
 8001202:	461d      	mov	r5, r3
 8001204:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001208:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800120c:	f7ff f9f4 	bl	80005f8 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4620      	mov	r0, r4
 8001216:	4629      	mov	r1, r5
 8001218:	f7ff f838 	bl	800028c <__adddf3>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	ec43 2b17 	vmov	d7, r2, r3
 8001224:	eeb0 0a47 	vmov.f32	s0, s14
 8001228:	eef0 0a67 	vmov.f32	s1, s15
 800122c:	f007 fb2e 	bl	800888c <sqrt>
 8001230:	ec53 2b10 	vmov	r2, r3, d0
 8001234:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001238:	f7ff fb08 	bl	800084c <__aeabi_ddiv>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	ec43 2b17 	vmov	d7, r2, r3
 8001244:	eeb0 0a47 	vmov.f32	s0, s14
 8001248:	eef0 0a67 	vmov.f32	s1, s15
 800124c:	f007 faea 	bl	8008824 <asin>
 8001250:	ed87 0b06 	vstr	d0, [r7, #24]
  radiany = asin(accy / sqrt(accy * accy + accz * accz)); // Fix the arguments passed to asin
 8001254:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001258:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800125c:	f7ff f9cc 	bl	80005f8 <__aeabi_dmul>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4614      	mov	r4, r2
 8001266:	461d      	mov	r5, r3
 8001268:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800126c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001270:	f7ff f9c2 	bl	80005f8 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7ff f806 	bl	800028c <__adddf3>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	ec43 2b17 	vmov	d7, r2, r3
 8001288:	eeb0 0a47 	vmov.f32	s0, s14
 800128c:	eef0 0a67 	vmov.f32	s1, s15
 8001290:	f007 fafc 	bl	800888c <sqrt>
 8001294:	ec53 2b10 	vmov	r2, r3, d0
 8001298:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800129c:	f7ff fad6 	bl	800084c <__aeabi_ddiv>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	ec43 2b17 	vmov	d7, r2, r3
 80012a8:	eeb0 0a47 	vmov.f32	s0, s14
 80012ac:	eef0 0a67 	vmov.f32	s1, s15
 80012b0:	f007 fab8 	bl	8008824 <asin>
 80012b4:	ed87 0b04 	vstr	d0, [r7, #16]

  /* Convert roll and pitch angles from radians to degrees */
  degreex = radianx * (180.0 / M_PI); // Roll
 80012b8:	a323      	add	r3, pc, #140	@ (adr r3, 8001348 <mpu6050_read+0x280>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012c2:	f7ff f999 	bl	80005f8 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4923      	ldr	r1, [pc, #140]	@ (8001358 <mpu6050_read+0x290>)
 80012cc:	e9c1 2300 	strd	r2, r3, [r1]
  degreey = radiany * (180.0 / M_PI); // Pitch
 80012d0:	a31d      	add	r3, pc, #116	@ (adr r3, 8001348 <mpu6050_read+0x280>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012da:	f7ff f98d 	bl	80005f8 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	491e      	ldr	r1, [pc, #120]	@ (800135c <mpu6050_read+0x294>)
 80012e4:	e9c1 2300 	strd	r2, r3, [r1]

  /* Print out the accelerometer and gyroscope values along with roll and pitch angles in SWV terminal */
  printf("Acc(g)=> X:%.2f Y:%.2f Z:%.2f   Gyro(dps)=> X:%.2f Y:%.2f Z:%.2f\n", accx, accy, accz, gyrox, gyroy, gyroz);
 80012e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80012f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80012f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80012f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80012fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001304:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001308:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800130c:	e9cd 2300 	strd	r2, r3, [sp]
 8001310:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001314:	4812      	ldr	r0, [pc, #72]	@ (8001360 <mpu6050_read+0x298>)
 8001316:	f003 fdd7 	bl	8004ec8 <iprintf>
  printf("Roll: %.2f degrees, Pitch: %.2f degrees\n", degreex, degreey);
 800131a:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <mpu6050_read+0x290>)
 800131c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001320:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <mpu6050_read+0x294>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	e9cd 2300 	strd	r2, r3, [sp]
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	480d      	ldr	r0, [pc, #52]	@ (8001364 <mpu6050_read+0x29c>)
 8001330:	f003 fdca 	bl	8004ec8 <iprintf>
}
 8001334:	bf00      	nop
 8001336:	3760      	adds	r7, #96	@ 0x60
 8001338:	46bd      	mov	sp, r7
 800133a:	bdb0      	pop	{r4, r5, r7, pc}
 800133c:	f3af 8000 	nop.w
 8001340:	66666666 	.word	0x66666666
 8001344:	40306666 	.word	0x40306666
 8001348:	1a63c1f8 	.word	0x1a63c1f8
 800134c:	404ca5dc 	.word	0x404ca5dc
 8001350:	20000204 	.word	0x20000204
 8001354:	40a00000 	.word	0x40a00000
 8001358:	20000258 	.word	0x20000258
 800135c:	20000260 	.word	0x20000260
 8001360:	08008f90 	.word	0x08008f90
 8001364:	08008fd4 	.word	0x08008fd4

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <HAL_MspInit+0x44>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a0e      	ldr	r2, [pc, #56]	@ (80013ac <HAL_MspInit+0x44>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <HAL_MspInit+0x44>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <HAL_MspInit+0x44>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <HAL_MspInit+0x44>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_MspInit+0x44>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	@ 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a17      	ldr	r2, [pc, #92]	@ (800142c <HAL_I2C_MspInit+0x7c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d127      	bne.n	8001422 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <HAL_I2C_MspInit+0x80>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	4a16      	ldr	r2, [pc, #88]	@ (8001430 <HAL_I2C_MspInit+0x80>)
 80013d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013dc:	6153      	str	r3, [r2, #20]
 80013de:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <HAL_I2C_MspInit+0x80>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ea:	23c0      	movs	r3, #192	@ 0xc0
 80013ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ee:	2312      	movs	r3, #18
 80013f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013fa:	2304      	movs	r3, #4
 80013fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	480b      	ldr	r0, [pc, #44]	@ (8001434 <HAL_I2C_MspInit+0x84>)
 8001406:	f000 fabd 	bl	8001984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <HAL_I2C_MspInit+0x80>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	4a08      	ldr	r2, [pc, #32]	@ (8001430 <HAL_I2C_MspInit+0x80>)
 8001410:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001414:	61d3      	str	r3, [r2, #28]
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <HAL_I2C_MspInit+0x80>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001422:	bf00      	nop
 8001424:	3728      	adds	r7, #40	@ 0x28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40005400 	.word	0x40005400
 8001430:	40021000 	.word	0x40021000
 8001434:	48000400 	.word	0x48000400

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <NMI_Handler+0x4>

08001440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <MemManage_Handler+0x4>

08001450 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <UsageFault_Handler+0x4>

08001460 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148e:	f000 f973 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  //Enable TRCENA
  DEMCR |= ( 1 << 24);
 80014a2:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <ITM_SendChar+0x48>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a0e      	ldr	r2, [pc, #56]	@ (80014e0 <ITM_SendChar+0x48>)
 80014a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ac:	6013      	str	r3, [r2, #0]

  //enable stimulus port 0
  ITM_TRACE_EN |= ( 1 << 0);
 80014ae:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <ITM_SendChar+0x4c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a0c      	ldr	r2, [pc, #48]	@ (80014e4 <ITM_SendChar+0x4c>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6013      	str	r3, [r2, #0]

  // read FIFO status in bit [0]:
  while(!(ITM_STIMULUS_PORT0 & 1));
 80014ba:	bf00      	nop
 80014bc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f8      	beq.n	80014bc <ITM_SendChar+0x24>

  //Write to ITM stimulus port0
  ITM_STIMULUS_PORT0 = ch;
 80014ca:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	6013      	str	r3, [r2, #0]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000edfc 	.word	0xe000edfc
 80014e4:	e0000e00 	.word	0xe0000e00

080014e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return 1;
 80014ec:	2301      	movs	r3, #1
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_kill>:

int _kill(int pid, int sig)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001502:	f003 fe9b 	bl	800523c <__errno>
 8001506:	4603      	mov	r3, r0
 8001508:	2216      	movs	r2, #22
 800150a:	601a      	str	r2, [r3, #0]
  return -1;
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_exit>:

void _exit (int status)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ffe7 	bl	80014f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800152a:	bf00      	nop
 800152c:	e7fd      	b.n	800152a <_exit+0x12>

0800152e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	e00a      	b.n	8001556 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001540:	f3af 8000 	nop.w
 8001544:	4601      	mov	r1, r0
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	60ba      	str	r2, [r7, #8]
 800154c:	b2ca      	uxtb	r2, r1
 800154e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3301      	adds	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	429a      	cmp	r2, r3
 800155c:	dbf0      	blt.n	8001540 <_read+0x12>
  }

  return len;
 800155e:	687b      	ldr	r3, [r7, #4]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	e009      	b.n	800158e <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	60ba      	str	r2, [r7, #8]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff88 	bl	8001498 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3301      	adds	r3, #1
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	429a      	cmp	r2, r3
 8001594:	dbf1      	blt.n	800157a <_write+0x12>
  }
  return len;
 8001596:	687b      	ldr	r3, [r7, #4]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <_close>:

int _close(int file)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015c8:	605a      	str	r2, [r3, #4]
  return 0;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <_isatty>:

int _isatty(int file)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015e0:	2301      	movs	r3, #1
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001610:	4a14      	ldr	r2, [pc, #80]	@ (8001664 <_sbrk+0x5c>)
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <_sbrk+0x60>)
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800161c:	4b13      	ldr	r3, [pc, #76]	@ (800166c <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001624:	4b11      	ldr	r3, [pc, #68]	@ (800166c <_sbrk+0x64>)
 8001626:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <_sbrk+0x68>)
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162a:	4b10      	ldr	r3, [pc, #64]	@ (800166c <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	429a      	cmp	r2, r3
 8001636:	d207      	bcs.n	8001648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001638:	f003 fe00 	bl	800523c <__errno>
 800163c:	4603      	mov	r3, r0
 800163e:	220c      	movs	r2, #12
 8001640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	e009      	b.n	800165c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001648:	4b08      	ldr	r3, [pc, #32]	@ (800166c <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164e:	4b07      	ldr	r3, [pc, #28]	@ (800166c <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	4a05      	ldr	r2, [pc, #20]	@ (800166c <_sbrk+0x64>)
 8001658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2000a000 	.word	0x2000a000
 8001668:	00000400 	.word	0x00000400
 800166c:	2000026c 	.word	0x2000026c
 8001670:	200003c0 	.word	0x200003c0

08001674 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <SystemInit+0x20>)
 800167a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800167e:	4a05      	ldr	r2, [pc, #20]	@ (8001694 <SystemInit+0x20>)
 8001680:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001698:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016d0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800169c:	f7ff ffea 	bl	8001674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a0:	480c      	ldr	r0, [pc, #48]	@ (80016d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80016a2:	490d      	ldr	r1, [pc, #52]	@ (80016d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a4:	4a0d      	ldr	r2, [pc, #52]	@ (80016dc <LoopForever+0xe>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a8:	e002      	b.n	80016b0 <LoopCopyDataInit>

080016aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ae:	3304      	adds	r3, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b4:	d3f9      	bcc.n	80016aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b6:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b8:	4c0a      	ldr	r4, [pc, #40]	@ (80016e4 <LoopForever+0x16>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016bc:	e001      	b.n	80016c2 <LoopFillZerobss>

080016be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c0:	3204      	adds	r2, #4

080016c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c4:	d3fb      	bcc.n	80016be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016c6:	f003 fdbf 	bl	8005248 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ca:	f7ff fb77 	bl	8000dbc <main>

080016ce <LoopForever>:

LoopForever:
    b LoopForever
 80016ce:	e7fe      	b.n	80016ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016d0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80016d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80016dc:	08009470 	.word	0x08009470
  ldr r2, =_sbss
 80016e0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80016e4:	200003c0 	.word	0x200003c0

080016e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <ADC1_2_IRQHandler>
	...

080016ec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f0:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <HAL_Init+0x28>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a07      	ldr	r2, [pc, #28]	@ (8001714 <HAL_Init+0x28>)
 80016f6:	f043 0310 	orr.w	r3, r3, #16
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fc:	2003      	movs	r0, #3
 80016fe:	f000 f90d 	bl	800191c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001702:	200f      	movs	r0, #15
 8001704:	f000 f808 	bl	8001718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001708:	f7ff fe2e 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40022000 	.word	0x40022000

08001718 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_InitTick+0x54>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_InitTick+0x58>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f917 	bl	800196a <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e00e      	b.n	8001764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d80a      	bhi.n	8001762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f000 f8ed 	bl	8001932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001758:	4a06      	ldr	r2, [pc, #24]	@ (8001774 <HAL_InitTick+0x5c>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e000      	b.n	8001764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000000 	.word	0x20000000
 8001770:	20000008 	.word	0x20000008
 8001774:	20000004 	.word	0x20000004

08001778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_IncTick+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_IncTick+0x24>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a04      	ldr	r2, [pc, #16]	@ (800179c <HAL_IncTick+0x24>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000008 	.word	0x20000008
 800179c:	20000270 	.word	0x20000270

080017a0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;  
 80017a4:	4b03      	ldr	r3, [pc, #12]	@ (80017b4 <HAL_GetTick+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000270 	.word	0x20000270

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	@ (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	@ (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	@ (800186c <__NVIC_SetPriority+0x50>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	@ 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2b04      	cmp	r3, #4
 800188c:	bf28      	it	cs
 800188e:	2304      	movcs	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3304      	adds	r3, #4
 8001896:	2b06      	cmp	r3, #6
 8001898:	d902      	bls.n	80018a0 <NVIC_EncodePriority+0x30>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3b03      	subs	r3, #3
 800189e:	e000      	b.n	80018a2 <NVIC_EncodePriority+0x32>
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	4313      	orrs	r3, r2
         );
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	@ 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018e8:	d301      	bcc.n	80018ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00f      	b.n	800190e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001918 <SysTick_Config+0x40>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f6:	210f      	movs	r1, #15
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	f7ff ff8e 	bl	800181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001900:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <SysTick_Config+0x40>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001906:	4b04      	ldr	r3, [pc, #16]	@ (8001918 <SysTick_Config+0x40>)
 8001908:	2207      	movs	r2, #7
 800190a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	e000e010 	.word	0xe000e010

0800191c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff47 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001944:	f7ff ff5c 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	6978      	ldr	r0, [r7, #20]
 8001950:	f7ff ff8e 	bl	8001870 <NVIC_EncodePriority>
 8001954:	4602      	mov	r2, r0
 8001956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff5d 	bl	800181c <__NVIC_SetPriority>
}
 8001962:	bf00      	nop
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffb0 	bl	80018d8 <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001992:	e154      	b.n	8001c3e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2101      	movs	r1, #1
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	4013      	ands	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 8146 	beq.w	8001c38 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d005      	beq.n	80019c4 <HAL_GPIO_Init+0x40>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d130      	bne.n	8001a26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019fa:	2201      	movs	r2, #1
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	f003 0201 	and.w	r2, r3, #1
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d017      	beq.n	8001a62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d123      	bne.n	8001ab6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	08da      	lsrs	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	220f      	movs	r2, #15
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3208      	adds	r2, #8
 8001ab0:	6939      	ldr	r1, [r7, #16]
 8001ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0203 	and.w	r2, r3, #3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 80a0 	beq.w	8001c38 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af8:	4b58      	ldr	r3, [pc, #352]	@ (8001c5c <HAL_GPIO_Init+0x2d8>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a57      	ldr	r2, [pc, #348]	@ (8001c5c <HAL_GPIO_Init+0x2d8>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b55      	ldr	r3, [pc, #340]	@ (8001c5c <HAL_GPIO_Init+0x2d8>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b10:	4a53      	ldr	r2, [pc, #332]	@ (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	3302      	adds	r3, #2
 8001b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b3a:	d019      	beq.n	8001b70 <HAL_GPIO_Init+0x1ec>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a49      	ldr	r2, [pc, #292]	@ (8001c64 <HAL_GPIO_Init+0x2e0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d013      	beq.n	8001b6c <HAL_GPIO_Init+0x1e8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a48      	ldr	r2, [pc, #288]	@ (8001c68 <HAL_GPIO_Init+0x2e4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00d      	beq.n	8001b68 <HAL_GPIO_Init+0x1e4>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a47      	ldr	r2, [pc, #284]	@ (8001c6c <HAL_GPIO_Init+0x2e8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d007      	beq.n	8001b64 <HAL_GPIO_Init+0x1e0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a46      	ldr	r2, [pc, #280]	@ (8001c70 <HAL_GPIO_Init+0x2ec>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_GPIO_Init+0x1dc>
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	e008      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b60:	2305      	movs	r3, #5
 8001b62:	e006      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b64:	2303      	movs	r3, #3
 8001b66:	e004      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e002      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b70:	2300      	movs	r3, #0
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	f002 0203 	and.w	r2, r2, #3
 8001b78:	0092      	lsls	r2, r2, #2
 8001b7a:	4093      	lsls	r3, r2
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b82:	4937      	ldr	r1, [pc, #220]	@ (8001c60 <HAL_GPIO_Init+0x2dc>)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b90:	4b38      	ldr	r3, [pc, #224]	@ (8001c74 <HAL_GPIO_Init+0x2f0>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bb4:	4a2f      	ldr	r2, [pc, #188]	@ (8001c74 <HAL_GPIO_Init+0x2f0>)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bba:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <HAL_GPIO_Init+0x2f0>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bde:	4a25      	ldr	r2, [pc, #148]	@ (8001c74 <HAL_GPIO_Init+0x2f0>)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001be4:	4b23      	ldr	r3, [pc, #140]	@ (8001c74 <HAL_GPIO_Init+0x2f0>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c08:	4a1a      	ldr	r2, [pc, #104]	@ (8001c74 <HAL_GPIO_Init+0x2f0>)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c0e:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <HAL_GPIO_Init+0x2f0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c32:	4a10      	ldr	r2, [pc, #64]	@ (8001c74 <HAL_GPIO_Init+0x2f0>)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f47f aea3 	bne.w	8001994 <HAL_GPIO_Init+0x10>
  }
}
 8001c4e:	bf00      	nop
 8001c50:	bf00      	nop
 8001c52:	371c      	adds	r7, #28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010000 	.word	0x40010000
 8001c64:	48000400 	.word	0x48000400
 8001c68:	48000800 	.word	0x48000800
 8001c6c:	48000c00 	.word	0x48000c00
 8001c70:	48001000 	.word	0x48001000
 8001c74:	40010400 	.word	0x40010400

08001c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c94:	e002      	b.n	8001c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e081      	b.n	8001dbe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff fb6e 	bl	80013b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2224      	movs	r2, #36	@ 0x24
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cf8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d107      	bne.n	8001d22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	e006      	b.n	8001d30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d104      	bne.n	8001d42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69d9      	ldr	r1, [r3, #28]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1a      	ldr	r2, [r3, #32]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	817b      	strh	r3, [r7, #10]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	813b      	strh	r3, [r7, #8]
 8001dde:	4613      	mov	r3, r2
 8001de0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	f040 80f9 	bne.w	8001fe2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_I2C_Mem_Write+0x34>
 8001df6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e02:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0ed      	b.n	8001fe4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_I2C_Mem_Write+0x4e>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e0e6      	b.n	8001fe4 <HAL_I2C_Mem_Write+0x21c>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e1e:	f7ff fcbf 	bl	80017a0 <HAL_GetTick>
 8001e22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2319      	movs	r3, #25
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 fac3 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0d1      	b.n	8001fe4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2221      	movs	r2, #33	@ 0x21
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2240      	movs	r2, #64	@ 0x40
 8001e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a3a      	ldr	r2, [r7, #32]
 8001e5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e68:	88f8      	ldrh	r0, [r7, #6]
 8001e6a:	893a      	ldrh	r2, [r7, #8]
 8001e6c:	8979      	ldrh	r1, [r7, #10]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	4603      	mov	r3, r0
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 f9d3 	bl	8002224 <I2C_RequestMemoryWrite>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0a9      	b.n	8001fe4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2bff      	cmp	r3, #255	@ 0xff
 8001e98:	d90e      	bls.n	8001eb8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	22ff      	movs	r2, #255	@ 0xff
 8001e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	8979      	ldrh	r1, [r7, #10]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 fc3d 	bl	8002730 <I2C_TransferConfig>
 8001eb6:	e00f      	b.n	8001ed8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	8979      	ldrh	r1, [r7, #10]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fc2c 	bl	8002730 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 fabc 	bl	800245a <I2C_WaitOnTXISFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e07b      	b.n	8001fe4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef0:	781a      	ldrb	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d034      	beq.n	8001f90 <HAL_I2C_Mem_Write+0x1c8>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d130      	bne.n	8001f90 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f34:	2200      	movs	r2, #0
 8001f36:	2180      	movs	r1, #128	@ 0x80
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 fa3f 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e04d      	b.n	8001fe4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2bff      	cmp	r3, #255	@ 0xff
 8001f50:	d90e      	bls.n	8001f70 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	22ff      	movs	r2, #255	@ 0xff
 8001f56:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	8979      	ldrh	r1, [r7, #10]
 8001f60:	2300      	movs	r3, #0
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fbe1 	bl	8002730 <I2C_TransferConfig>
 8001f6e:	e00f      	b.n	8001f90 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	8979      	ldrh	r1, [r7, #10]
 8001f82:	2300      	movs	r3, #0
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 fbd0 	bl	8002730 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d19e      	bne.n	8001ed8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 faa2 	bl	80024e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e01a      	b.n	8001fe4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <HAL_I2C_Mem_Write+0x224>)
 8001fc2:	400b      	ands	r3, r1
 8001fc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e000      	b.n	8001fe4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001fe2:	2302      	movs	r3, #2
  }
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	fe00e800 	.word	0xfe00e800

08001ff0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	4608      	mov	r0, r1
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	817b      	strh	r3, [r7, #10]
 8002002:	460b      	mov	r3, r1
 8002004:	813b      	strh	r3, [r7, #8]
 8002006:	4613      	mov	r3, r2
 8002008:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b20      	cmp	r3, #32
 8002014:	f040 80fd 	bne.w	8002212 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_I2C_Mem_Read+0x34>
 800201e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002020:	2b00      	cmp	r3, #0
 8002022:	d105      	bne.n	8002030 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800202a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0f1      	b.n	8002214 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_I2C_Mem_Read+0x4e>
 800203a:	2302      	movs	r3, #2
 800203c:	e0ea      	b.n	8002214 <HAL_I2C_Mem_Read+0x224>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002046:	f7ff fbab 	bl	80017a0 <HAL_GetTick>
 800204a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2319      	movs	r3, #25
 8002052:	2201      	movs	r2, #1
 8002054:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 f9af 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0d5      	b.n	8002214 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2222      	movs	r2, #34	@ 0x22
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2240      	movs	r2, #64	@ 0x40
 8002074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a3a      	ldr	r2, [r7, #32]
 8002082:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002088:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002090:	88f8      	ldrh	r0, [r7, #6]
 8002092:	893a      	ldrh	r2, [r7, #8]
 8002094:	8979      	ldrh	r1, [r7, #10]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	4603      	mov	r3, r0
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f913 	bl	80022cc <I2C_RequestMemoryRead>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0ad      	b.n	8002214 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2bff      	cmp	r3, #255	@ 0xff
 80020c0:	d90e      	bls.n	80020e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	22ff      	movs	r2, #255	@ 0xff
 80020c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	8979      	ldrh	r1, [r7, #10]
 80020d0:	4b52      	ldr	r3, [pc, #328]	@ (800221c <HAL_I2C_Mem_Read+0x22c>)
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 fb29 	bl	8002730 <I2C_TransferConfig>
 80020de:	e00f      	b.n	8002100 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	8979      	ldrh	r1, [r7, #10]
 80020f2:	4b4a      	ldr	r3, [pc, #296]	@ (800221c <HAL_I2C_Mem_Read+0x22c>)
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 fb18 	bl	8002730 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002106:	2200      	movs	r2, #0
 8002108:	2104      	movs	r1, #4
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f956 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e07c      	b.n	8002214 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d034      	beq.n	80021c0 <HAL_I2C_Mem_Read+0x1d0>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215a:	2b00      	cmp	r3, #0
 800215c:	d130      	bne.n	80021c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002164:	2200      	movs	r2, #0
 8002166:	2180      	movs	r1, #128	@ 0x80
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f927 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e04d      	b.n	8002214 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800217c:	b29b      	uxth	r3, r3
 800217e:	2bff      	cmp	r3, #255	@ 0xff
 8002180:	d90e      	bls.n	80021a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	22ff      	movs	r2, #255	@ 0xff
 8002186:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218c:	b2da      	uxtb	r2, r3
 800218e:	8979      	ldrh	r1, [r7, #10]
 8002190:	2300      	movs	r3, #0
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 fac9 	bl	8002730 <I2C_TransferConfig>
 800219e:	e00f      	b.n	80021c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	8979      	ldrh	r1, [r7, #10]
 80021b2:	2300      	movs	r3, #0
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fab8 	bl	8002730 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d19a      	bne.n	8002100 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f98a 	bl	80024e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e01a      	b.n	8002214 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2220      	movs	r2, #32
 80021e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <HAL_I2C_Mem_Read+0x230>)
 80021f2:	400b      	ands	r3, r1
 80021f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	e000      	b.n	8002214 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002212:	2302      	movs	r3, #2
  }
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	80002400 	.word	0x80002400
 8002220:	fe00e800 	.word	0xfe00e800

08002224 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af02      	add	r7, sp, #8
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	4608      	mov	r0, r1
 800222e:	4611      	mov	r1, r2
 8002230:	461a      	mov	r2, r3
 8002232:	4603      	mov	r3, r0
 8002234:	817b      	strh	r3, [r7, #10]
 8002236:	460b      	mov	r3, r1
 8002238:	813b      	strh	r3, [r7, #8]
 800223a:	4613      	mov	r3, r2
 800223c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	b2da      	uxtb	r2, r3
 8002242:	8979      	ldrh	r1, [r7, #10]
 8002244:	4b20      	ldr	r3, [pc, #128]	@ (80022c8 <I2C_RequestMemoryWrite+0xa4>)
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 fa6f 	bl	8002730 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	69b9      	ldr	r1, [r7, #24]
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f8ff 	bl	800245a <I2C_WaitOnTXISFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e02c      	b.n	80022c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d105      	bne.n	8002278 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800226c:	893b      	ldrh	r3, [r7, #8]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	629a      	str	r2, [r3, #40]	@ 0x28
 8002276:	e015      	b.n	80022a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002278:	893b      	ldrh	r3, [r7, #8]
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	b29b      	uxth	r3, r3
 800227e:	b2da      	uxtb	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	69b9      	ldr	r1, [r7, #24]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f8e5 	bl	800245a <I2C_WaitOnTXISFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e012      	b.n	80022c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800229a:	893b      	ldrh	r3, [r7, #8]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2200      	movs	r2, #0
 80022ac:	2180      	movs	r1, #128	@ 0x80
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f884 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	80002000 	.word	0x80002000

080022cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	4608      	mov	r0, r1
 80022d6:	4611      	mov	r1, r2
 80022d8:	461a      	mov	r2, r3
 80022da:	4603      	mov	r3, r0
 80022dc:	817b      	strh	r3, [r7, #10]
 80022de:	460b      	mov	r3, r1
 80022e0:	813b      	strh	r3, [r7, #8]
 80022e2:	4613      	mov	r3, r2
 80022e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	8979      	ldrh	r1, [r7, #10]
 80022ec:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <I2C_RequestMemoryRead+0xa4>)
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	2300      	movs	r3, #0
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 fa1c 	bl	8002730 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	69b9      	ldr	r1, [r7, #24]
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 f8ac 	bl	800245a <I2C_WaitOnTXISFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e02c      	b.n	8002366 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800230c:	88fb      	ldrh	r3, [r7, #6]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002312:	893b      	ldrh	r3, [r7, #8]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	629a      	str	r2, [r3, #40]	@ 0x28
 800231c:	e015      	b.n	800234a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800231e:	893b      	ldrh	r3, [r7, #8]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	b29b      	uxth	r3, r3
 8002324:	b2da      	uxtb	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	69b9      	ldr	r1, [r7, #24]
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 f892 	bl	800245a <I2C_WaitOnTXISFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e012      	b.n	8002366 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002340:	893b      	ldrh	r3, [r7, #8]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2200      	movs	r2, #0
 8002352:	2140      	movs	r1, #64	@ 0x40
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f831 	bl	80023bc <I2C_WaitOnFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	80002000 	.word	0x80002000

08002374 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b02      	cmp	r3, #2
 8002388:	d103      	bne.n	8002392 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2200      	movs	r2, #0
 8002390:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b01      	cmp	r3, #1
 800239e:	d007      	beq.n	80023b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699a      	ldr	r2, [r3, #24]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	619a      	str	r2, [r3, #24]
  }
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023cc:	e031      	b.n	8002432 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d02d      	beq.n	8002432 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d6:	f7ff f9e3 	bl	80017a0 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d302      	bcc.n	80023ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d122      	bne.n	8002432 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	4013      	ands	r3, r2
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	429a      	cmp	r2, r3
 8002408:	d113      	bne.n	8002432 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	f043 0220 	orr.w	r2, r3, #32
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e00f      	b.n	8002452 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699a      	ldr	r2, [r3, #24]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4013      	ands	r3, r2
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	429a      	cmp	r2, r3
 8002440:	bf0c      	ite	eq
 8002442:	2301      	moveq	r3, #1
 8002444:	2300      	movne	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	429a      	cmp	r2, r3
 800244e:	d0be      	beq.n	80023ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b084      	sub	sp, #16
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002466:	e033      	b.n	80024d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 f87f 	bl	8002570 <I2C_IsErrorOccurred>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e031      	b.n	80024e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002482:	d025      	beq.n	80024d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002484:	f7ff f98c 	bl	80017a0 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	429a      	cmp	r2, r3
 8002492:	d302      	bcc.n	800249a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d11a      	bne.n	80024d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d013      	beq.n	80024d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ac:	f043 0220 	orr.w	r2, r3, #32
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e007      	b.n	80024e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d1c4      	bne.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024f4:	e02f      	b.n	8002556 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f838 	bl	8002570 <I2C_IsErrorOccurred>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e02d      	b.n	8002566 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800250a:	f7ff f949 	bl	80017a0 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	429a      	cmp	r2, r3
 8002518:	d302      	bcc.n	8002520 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d11a      	bne.n	8002556 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b20      	cmp	r3, #32
 800252c:	d013      	beq.n	8002556 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	f043 0220 	orr.w	r2, r3, #32
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e007      	b.n	8002566 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	2b20      	cmp	r3, #32
 8002562:	d1c8      	bne.n	80024f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	@ 0x28
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d068      	beq.n	800266e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2210      	movs	r2, #16
 80025a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025a4:	e049      	b.n	800263a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ac:	d045      	beq.n	800263a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025ae:	f7ff f8f7 	bl	80017a0 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d302      	bcc.n	80025c4 <I2C_IsErrorOccurred+0x54>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d13a      	bne.n	800263a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025e6:	d121      	bne.n	800262c <I2C_IsErrorOccurred+0xbc>
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025ee:	d01d      	beq.n	800262c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d01a      	beq.n	800262c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002604:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002606:	f7ff f8cb 	bl	80017a0 <HAL_GetTick>
 800260a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800260c:	e00e      	b.n	800262c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800260e:	f7ff f8c7 	bl	80017a0 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b19      	cmp	r3, #25
 800261a:	d907      	bls.n	800262c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	f043 0320 	orr.w	r3, r3, #32
 8002622:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800262a:	e006      	b.n	800263a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b20      	cmp	r3, #32
 8002638:	d1e9      	bne.n	800260e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b20      	cmp	r3, #32
 8002646:	d003      	beq.n	8002650 <I2C_IsErrorOccurred+0xe0>
 8002648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0aa      	beq.n	80025a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002650:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002654:	2b00      	cmp	r3, #0
 8002656:	d103      	bne.n	8002660 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2220      	movs	r2, #32
 800265e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00b      	beq.n	8002698 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002690:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	f043 0308 	orr.w	r3, r3, #8
 80026a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00b      	beq.n	80026dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	f043 0302 	orr.w	r3, r3, #2
 80026ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80026dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01c      	beq.n	800271e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f7ff fe45 	bl	8002374 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b0d      	ldr	r3, [pc, #52]	@ (800272c <I2C_IsErrorOccurred+0x1bc>)
 80026f6:	400b      	ands	r3, r1
 80026f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	431a      	orrs	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800271e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002722:	4618      	mov	r0, r3
 8002724:	3728      	adds	r7, #40	@ 0x28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	fe00e800 	.word	0xfe00e800

08002730 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	460b      	mov	r3, r1
 800273c:	817b      	strh	r3, [r7, #10]
 800273e:	4613      	mov	r3, r2
 8002740:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002742:	897b      	ldrh	r3, [r7, #10]
 8002744:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002748:	7a7b      	ldrb	r3, [r7, #9]
 800274a:	041b      	lsls	r3, r3, #16
 800274c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002750:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	4313      	orrs	r3, r2
 800275a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800275e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	0d5b      	lsrs	r3, r3, #21
 800276a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800276e:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <I2C_TransferConfig+0x60>)
 8002770:	430b      	orrs	r3, r1
 8002772:	43db      	mvns	r3, r3
 8002774:	ea02 0103 	and.w	r1, r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	03ff63ff 	.word	0x03ff63ff

08002794 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	d138      	bne.n	800281c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e032      	b.n	800281e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2224      	movs	r2, #36	@ 0x24
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	e000      	b.n	800281e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800281c:	2302      	movs	r3, #2
  }
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800282a:	b480      	push	{r7}
 800282c:	b085      	sub	sp, #20
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b20      	cmp	r3, #32
 800283e:	d139      	bne.n	80028b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800284a:	2302      	movs	r3, #2
 800284c:	e033      	b.n	80028b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2224      	movs	r2, #36	@ 0x24
 800285a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0201 	bic.w	r2, r2, #1
 800286c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800287c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e000      	b.n	80028b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028b4:	2302      	movs	r3, #2
  }
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	f001 b823 	b.w	8003930 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 817d 	beq.w	8002bfa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002900:	4bbc      	ldr	r3, [pc, #752]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b04      	cmp	r3, #4
 800290a:	d00c      	beq.n	8002926 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800290c:	4bb9      	ldr	r3, [pc, #740]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	2b08      	cmp	r3, #8
 8002916:	d15c      	bne.n	80029d2 <HAL_RCC_OscConfig+0x10e>
 8002918:	4bb6      	ldr	r3, [pc, #728]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002924:	d155      	bne.n	80029d2 <HAL_RCC_OscConfig+0x10e>
 8002926:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800292a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800293a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	095b      	lsrs	r3, r3, #5
 8002946:	b2db      	uxtb	r3, r3
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d102      	bne.n	8002958 <HAL_RCC_OscConfig+0x94>
 8002952:	4ba8      	ldr	r3, [pc, #672]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	e015      	b.n	8002984 <HAL_RCC_OscConfig+0xc0>
 8002958:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800295c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800296c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002970:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002974:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002980:	4b9c      	ldr	r3, [pc, #624]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002988:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800298c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002990:	fa92 f2a2 	rbit	r2, r2
 8002994:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002998:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800299c:	fab2 f282 	clz	r2, r2
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	f042 0220 	orr.w	r2, r2, #32
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	f002 021f 	and.w	r2, r2, #31
 80029ac:	2101      	movs	r1, #1
 80029ae:	fa01 f202 	lsl.w	r2, r1, r2
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 811f 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x334>
 80029ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 8116 	bne.w	8002bf8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f000 bfaf 	b.w	8003930 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029e2:	d106      	bne.n	80029f2 <HAL_RCC_OscConfig+0x12e>
 80029e4:	4b83      	ldr	r3, [pc, #524]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a82      	ldr	r2, [pc, #520]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 80029ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	e036      	b.n	8002a60 <HAL_RCC_OscConfig+0x19c>
 80029f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x158>
 8002a02:	4b7c      	ldr	r3, [pc, #496]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a7b      	ldr	r2, [pc, #492]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002a08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4b79      	ldr	r3, [pc, #484]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a78      	ldr	r2, [pc, #480]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002a14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e021      	b.n	8002a60 <HAL_RCC_OscConfig+0x19c>
 8002a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x184>
 8002a2e:	4b71      	ldr	r3, [pc, #452]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a70      	ldr	r2, [pc, #448]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002a34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b6e      	ldr	r3, [pc, #440]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a6d      	ldr	r2, [pc, #436]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e00b      	b.n	8002a60 <HAL_RCC_OscConfig+0x19c>
 8002a48:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a69      	ldr	r2, [pc, #420]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	4b67      	ldr	r3, [pc, #412]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a66      	ldr	r2, [pc, #408]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002a5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a5e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a60:	4b64      	ldr	r3, [pc, #400]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	f023 020f 	bic.w	r2, r3, #15
 8002a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	495f      	ldr	r1, [pc, #380]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d059      	beq.n	8002b3e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fe89 	bl	80017a0 <HAL_GetTick>
 8002a8e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fe fe84 	bl	80017a0 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b64      	cmp	r3, #100	@ 0x64
 8002aa2:	d902      	bls.n	8002aaa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	f000 bf43 	b.w	8003930 <HAL_RCC_OscConfig+0x106c>
 8002aaa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aae:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002abe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	095b      	lsrs	r3, r3, #5
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d102      	bne.n	8002adc <HAL_RCC_OscConfig+0x218>
 8002ad6:	4b47      	ldr	r3, [pc, #284]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	e015      	b.n	8002b08 <HAL_RCC_OscConfig+0x244>
 8002adc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ae0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002af0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002af4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002af8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002b04:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b0c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002b10:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002b14:	fa92 f2a2 	rbit	r2, r2
 8002b18:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002b1c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002b20:	fab2 f282 	clz	r2, r2
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	f042 0220 	orr.w	r2, r2, #32
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	f002 021f 	and.w	r2, r2, #31
 8002b30:	2101      	movs	r1, #1
 8002b32:	fa01 f202 	lsl.w	r2, r1, r2
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0ab      	beq.n	8002a94 <HAL_RCC_OscConfig+0x1d0>
 8002b3c:	e05d      	b.n	8002bfa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fe2f 	bl	80017a0 <HAL_GetTick>
 8002b42:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fe fe2a 	bl	80017a0 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b64      	cmp	r3, #100	@ 0x64
 8002b56:	d902      	bls.n	8002b5e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	f000 bee9 	b.w	8003930 <HAL_RCC_OscConfig+0x106c>
 8002b5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b62:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002b72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d102      	bne.n	8002b90 <HAL_RCC_OscConfig+0x2cc>
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	e015      	b.n	8002bbc <HAL_RCC_OscConfig+0x2f8>
 8002b90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b94:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002ba4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ba8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002bac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf4 <HAL_RCC_OscConfig+0x330>)
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bc0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002bc4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002bc8:	fa92 f2a2 	rbit	r2, r2
 8002bcc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002bd0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002bd4:	fab2 f282 	clz	r2, r2
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	f042 0220 	orr.w	r2, r2, #32
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	f002 021f 	and.w	r2, r2, #31
 8002be4:	2101      	movs	r1, #1
 8002be6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ab      	bne.n	8002b48 <HAL_RCC_OscConfig+0x284>
 8002bf0:	e003      	b.n	8002bfa <HAL_RCC_OscConfig+0x336>
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 817d 	beq.w	8002f0a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c10:	4ba6      	ldr	r3, [pc, #664]	@ (8002eac <HAL_RCC_OscConfig+0x5e8>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c1c:	4ba3      	ldr	r3, [pc, #652]	@ (8002eac <HAL_RCC_OscConfig+0x5e8>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 030c 	and.w	r3, r3, #12
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d172      	bne.n	8002d0e <HAL_RCC_OscConfig+0x44a>
 8002c28:	4ba0      	ldr	r3, [pc, #640]	@ (8002eac <HAL_RCC_OscConfig+0x5e8>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d16c      	bne.n	8002d0e <HAL_RCC_OscConfig+0x44a>
 8002c34:	2302      	movs	r3, #2
 8002c36:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002c46:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d102      	bne.n	8002c64 <HAL_RCC_OscConfig+0x3a0>
 8002c5e:	4b93      	ldr	r3, [pc, #588]	@ (8002eac <HAL_RCC_OscConfig+0x5e8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	e013      	b.n	8002c8c <HAL_RCC_OscConfig+0x3c8>
 8002c64:	2302      	movs	r3, #2
 8002c66:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002c76:	2302      	movs	r3, #2
 8002c78:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002c7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002c88:	4b88      	ldr	r3, [pc, #544]	@ (8002eac <HAL_RCC_OscConfig+0x5e8>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002c92:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002c96:	fa92 f2a2 	rbit	r2, r2
 8002c9a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002c9e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002ca2:	fab2 f282 	clz	r2, r2
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	f042 0220 	orr.w	r2, r2, #32
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	f002 021f 	and.w	r2, r2, #31
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x410>
 8002cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d002      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f000 be2e 	b.w	8003930 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd4:	4b75      	ldr	r3, [pc, #468]	@ (8002eac <HAL_RCC_OscConfig+0x5e8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	21f8      	movs	r1, #248	@ 0xf8
 8002cea:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002cf2:	fa91 f1a1 	rbit	r1, r1
 8002cf6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002cfa:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002cfe:	fab1 f181 	clz	r1, r1
 8002d02:	b2c9      	uxtb	r1, r1
 8002d04:	408b      	lsls	r3, r1
 8002d06:	4969      	ldr	r1, [pc, #420]	@ (8002eac <HAL_RCC_OscConfig+0x5e8>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0c:	e0fd      	b.n	8002f0a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8088 	beq.w	8002e30 <HAL_RCC_OscConfig+0x56c>
 8002d20:	2301      	movs	r3, #1
 8002d22:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002d32:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d40:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	461a      	mov	r2, r3
 8002d48:	2301      	movs	r3, #1
 8002d4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fd28 	bl	80017a0 <HAL_GetTick>
 8002d50:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d56:	f7fe fd23 	bl	80017a0 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d902      	bls.n	8002d6c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	f000 bde2 	b.w	8003930 <HAL_RCC_OscConfig+0x106c>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002d7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d102      	bne.n	8002d9c <HAL_RCC_OscConfig+0x4d8>
 8002d96:	4b45      	ldr	r3, [pc, #276]	@ (8002eac <HAL_RCC_OscConfig+0x5e8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	e013      	b.n	8002dc4 <HAL_RCC_OscConfig+0x500>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002dae:	2302      	movs	r3, #2
 8002db0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002db4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002dc0:	4b3a      	ldr	r3, [pc, #232]	@ (8002eac <HAL_RCC_OscConfig+0x5e8>)
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002dca:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002dce:	fa92 f2a2 	rbit	r2, r2
 8002dd2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002dd6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002dda:	fab2 f282 	clz	r2, r2
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	f042 0220 	orr.w	r2, r2, #32
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	f002 021f 	and.w	r2, r2, #31
 8002dea:	2101      	movs	r1, #1
 8002dec:	fa01 f202 	lsl.w	r2, r1, r2
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0af      	beq.n	8002d56 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	4b2d      	ldr	r3, [pc, #180]	@ (8002eac <HAL_RCC_OscConfig+0x5e8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	21f8      	movs	r1, #248	@ 0xf8
 8002e0c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002e14:	fa91 f1a1 	rbit	r1, r1
 8002e18:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002e1c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002e20:	fab1 f181 	clz	r1, r1
 8002e24:	b2c9      	uxtb	r1, r1
 8002e26:	408b      	lsls	r3, r1
 8002e28:	4920      	ldr	r1, [pc, #128]	@ (8002eac <HAL_RCC_OscConfig+0x5e8>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]
 8002e2e:	e06c      	b.n	8002f0a <HAL_RCC_OscConfig+0x646>
 8002e30:	2301      	movs	r3, #1
 8002e32:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002e42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e46:	fab3 f383 	clz	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e50:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	461a      	mov	r2, r3
 8002e58:	2300      	movs	r3, #0
 8002e5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fca0 	bl	80017a0 <HAL_GetTick>
 8002e60:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e66:	f7fe fc9b 	bl	80017a0 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d902      	bls.n	8002e7c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	f000 bd5a 	b.w	8003930 <HAL_RCC_OscConfig+0x106c>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d104      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x5ec>
 8002ea6:	4b01      	ldr	r3, [pc, #4]	@ (8002eac <HAL_RCC_OscConfig+0x5e8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	e015      	b.n	8002ed8 <HAL_RCC_OscConfig+0x614>
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002ec8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002ed4:	4bc8      	ldr	r3, [pc, #800]	@ (80031f8 <HAL_RCC_OscConfig+0x934>)
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	2202      	movs	r2, #2
 8002eda:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002ede:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002ee2:	fa92 f2a2 	rbit	r2, r2
 8002ee6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002eea:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002eee:	fab2 f282 	clz	r2, r2
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	f042 0220 	orr.w	r2, r2, #32
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	f002 021f 	and.w	r2, r2, #31
 8002efe:	2101      	movs	r1, #1
 8002f00:	fa01 f202 	lsl.w	r2, r1, r2
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1ad      	bne.n	8002e66 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8110 	beq.w	8003140 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d079      	beq.n	8003024 <HAL_RCC_OscConfig+0x760>
 8002f30:	2301      	movs	r3, #1
 8002f32:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4bab      	ldr	r3, [pc, #684]	@ (80031fc <HAL_RCC_OscConfig+0x938>)
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	461a      	mov	r2, r3
 8002f56:	2301      	movs	r3, #1
 8002f58:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fc21 	bl	80017a0 <HAL_GetTick>
 8002f5e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f64:	f7fe fc1c 	bl	80017a0 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d902      	bls.n	8002f7a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	f000 bcdb 	b.w	8003930 <HAL_RCC_OscConfig+0x106c>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f90:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002f94:	2202      	movs	r2, #2
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	fa93 f2a3 	rbit	r2, r3
 8002fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002faa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002fb8:	2202      	movs	r2, #2
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	fa93 f2a3 	rbit	r2, r3
 8002fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002fd2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd4:	4b88      	ldr	r3, [pc, #544]	@ (80031f8 <HAL_RCC_OscConfig+0x934>)
 8002fd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fdc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	6019      	str	r1, [r3, #0]
 8002fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	fa93 f1a3 	rbit	r1, r3
 8002ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ffa:	6019      	str	r1, [r3, #0]
  return result;
 8002ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003000:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	fab3 f383 	clz	r3, r3
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003010:	b2db      	uxtb	r3, r3
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	2101      	movs	r1, #1
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	4013      	ands	r3, r2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0a0      	beq.n	8002f64 <HAL_RCC_OscConfig+0x6a0>
 8003022:	e08d      	b.n	8003140 <HAL_RCC_OscConfig+0x87c>
 8003024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003028:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800302c:	2201      	movs	r2, #1
 800302e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003034:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	fa93 f2a3 	rbit	r2, r3
 800303e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003042:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003046:	601a      	str	r2, [r3, #0]
  return result;
 8003048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003050:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003052:	fab3 f383 	clz	r3, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	4b68      	ldr	r3, [pc, #416]	@ (80031fc <HAL_RCC_OscConfig+0x938>)
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	461a      	mov	r2, r3
 8003062:	2300      	movs	r3, #0
 8003064:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003066:	f7fe fb9b 	bl	80017a0 <HAL_GetTick>
 800306a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306e:	e00a      	b.n	8003086 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003070:	f7fe fb96 	bl	80017a0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d902      	bls.n	8003086 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	f000 bc55 	b.w	8003930 <HAL_RCC_OscConfig+0x106c>
 8003086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800308e:	2202      	movs	r2, #2
 8003090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003096:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fa93 f2a3 	rbit	r2, r3
 80030a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80030b2:	2202      	movs	r2, #2
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	fa93 f2a3 	rbit	r2, r3
 80030c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80030d6:	2202      	movs	r2, #2
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	fa93 f2a3 	rbit	r2, r3
 80030e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80030f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f2:	4b41      	ldr	r3, [pc, #260]	@ (80031f8 <HAL_RCC_OscConfig+0x934>)
 80030f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80030fe:	2102      	movs	r1, #2
 8003100:	6019      	str	r1, [r3, #0]
 8003102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003106:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	fa93 f1a3 	rbit	r1, r3
 8003110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003114:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003118:	6019      	str	r1, [r3, #0]
  return result;
 800311a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	2101      	movs	r1, #1
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d197      	bne.n	8003070 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003144:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 81a1 	beq.w	8003498 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003156:	2300      	movs	r3, #0
 8003158:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800315c:	4b26      	ldr	r3, [pc, #152]	@ (80031f8 <HAL_RCC_OscConfig+0x934>)
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d116      	bne.n	8003196 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003168:	4b23      	ldr	r3, [pc, #140]	@ (80031f8 <HAL_RCC_OscConfig+0x934>)
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	4a22      	ldr	r2, [pc, #136]	@ (80031f8 <HAL_RCC_OscConfig+0x934>)
 800316e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003172:	61d3      	str	r3, [r2, #28]
 8003174:	4b20      	ldr	r3, [pc, #128]	@ (80031f8 <HAL_RCC_OscConfig+0x934>)
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800317c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003180:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800318e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003196:	4b1a      	ldr	r3, [pc, #104]	@ (8003200 <HAL_RCC_OscConfig+0x93c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d11a      	bne.n	80031d8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031a2:	4b17      	ldr	r3, [pc, #92]	@ (8003200 <HAL_RCC_OscConfig+0x93c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a16      	ldr	r2, [pc, #88]	@ (8003200 <HAL_RCC_OscConfig+0x93c>)
 80031a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ae:	f7fe faf7 	bl	80017a0 <HAL_GetTick>
 80031b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b6:	e009      	b.n	80031cc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b8:	f7fe faf2 	bl	80017a0 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b64      	cmp	r3, #100	@ 0x64
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e3b1      	b.n	8003930 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <HAL_RCC_OscConfig+0x93c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ef      	beq.n	80031b8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d10d      	bne.n	8003204 <HAL_RCC_OscConfig+0x940>
 80031e8:	4b03      	ldr	r3, [pc, #12]	@ (80031f8 <HAL_RCC_OscConfig+0x934>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	4a02      	ldr	r2, [pc, #8]	@ (80031f8 <HAL_RCC_OscConfig+0x934>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6213      	str	r3, [r2, #32]
 80031f4:	e03c      	b.n	8003270 <HAL_RCC_OscConfig+0x9ac>
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000
 80031fc:	10908120 	.word	0x10908120
 8003200:	40007000 	.word	0x40007000
 8003204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003208:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10c      	bne.n	800322e <HAL_RCC_OscConfig+0x96a>
 8003214:	4bc1      	ldr	r3, [pc, #772]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4ac0      	ldr	r2, [pc, #768]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	6213      	str	r3, [r2, #32]
 8003220:	4bbe      	ldr	r3, [pc, #760]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	4abd      	ldr	r2, [pc, #756]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 8003226:	f023 0304 	bic.w	r3, r3, #4
 800322a:	6213      	str	r3, [r2, #32]
 800322c:	e020      	b.n	8003270 <HAL_RCC_OscConfig+0x9ac>
 800322e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003232:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	2b05      	cmp	r3, #5
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0x994>
 800323e:	4bb7      	ldr	r3, [pc, #732]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	4ab6      	ldr	r2, [pc, #728]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 8003244:	f043 0304 	orr.w	r3, r3, #4
 8003248:	6213      	str	r3, [r2, #32]
 800324a:	4bb4      	ldr	r3, [pc, #720]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4ab3      	ldr	r2, [pc, #716]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6213      	str	r3, [r2, #32]
 8003256:	e00b      	b.n	8003270 <HAL_RCC_OscConfig+0x9ac>
 8003258:	4bb0      	ldr	r3, [pc, #704]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4aaf      	ldr	r2, [pc, #700]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 800325e:	f023 0301 	bic.w	r3, r3, #1
 8003262:	6213      	str	r3, [r2, #32]
 8003264:	4bad      	ldr	r3, [pc, #692]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	4aac      	ldr	r2, [pc, #688]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 800326a:	f023 0304 	bic.w	r3, r3, #4
 800326e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003274:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8081 	beq.w	8003384 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003282:	f7fe fa8d 	bl	80017a0 <HAL_GetTick>
 8003286:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328a:	e00b      	b.n	80032a4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7fe fa88 	bl	80017a0 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e345      	b.n	8003930 <HAL_RCC_OscConfig+0x106c>
 80032a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80032ac:	2202      	movs	r2, #2
 80032ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	fa93 f2a3 	rbit	r2, r3
 80032be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032cc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80032d0:	2202      	movs	r2, #2
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	fa93 f2a3 	rbit	r2, r3
 80032e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80032ea:	601a      	str	r2, [r3, #0]
  return result;
 80032ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80032f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f043 0302 	orr.w	r3, r3, #2
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d102      	bne.n	8003310 <HAL_RCC_OscConfig+0xa4c>
 800330a:	4b84      	ldr	r3, [pc, #528]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	e013      	b.n	8003338 <HAL_RCC_OscConfig+0xa74>
 8003310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003314:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003318:	2202      	movs	r2, #2
 800331a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003320:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	fa93 f2a3 	rbit	r2, r3
 800332a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	4b79      	ldr	r3, [pc, #484]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 8003336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003338:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800333c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003340:	2102      	movs	r1, #2
 8003342:	6011      	str	r1, [r2, #0]
 8003344:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003348:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	fa92 f1a2 	rbit	r1, r2
 8003352:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003356:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800335a:	6011      	str	r1, [r2, #0]
  return result;
 800335c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003360:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003364:	6812      	ldr	r2, [r2, #0]
 8003366:	fab2 f282 	clz	r2, r2
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	f002 021f 	and.w	r2, r2, #31
 8003376:	2101      	movs	r1, #1
 8003378:	fa01 f202 	lsl.w	r2, r1, r2
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d084      	beq.n	800328c <HAL_RCC_OscConfig+0x9c8>
 8003382:	e07f      	b.n	8003484 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003384:	f7fe fa0c 	bl	80017a0 <HAL_GetTick>
 8003388:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338c:	e00b      	b.n	80033a6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fe fa07 	bl	80017a0 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e2c4      	b.n	8003930 <HAL_RCC_OscConfig+0x106c>
 80033a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033aa:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80033ae:	2202      	movs	r2, #2
 80033b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	fa93 f2a3 	rbit	r2, r3
 80033c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ce:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80033d2:	2202      	movs	r2, #2
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	fa93 f2a3 	rbit	r2, r3
 80033e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80033ec:	601a      	str	r2, [r3, #0]
  return result;
 80033ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80033f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f8:	fab3 f383 	clz	r3, r3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f043 0302 	orr.w	r3, r3, #2
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d102      	bne.n	8003412 <HAL_RCC_OscConfig+0xb4e>
 800340c:	4b43      	ldr	r3, [pc, #268]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	e013      	b.n	800343a <HAL_RCC_OscConfig+0xb76>
 8003412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003416:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800341a:	2202      	movs	r2, #2
 800341c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003422:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	fa93 f2a3 	rbit	r2, r3
 800342c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003430:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	4b39      	ldr	r3, [pc, #228]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800343e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003442:	2102      	movs	r1, #2
 8003444:	6011      	str	r1, [r2, #0]
 8003446:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800344a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	fa92 f1a2 	rbit	r1, r2
 8003454:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003458:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800345c:	6011      	str	r1, [r2, #0]
  return result;
 800345e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003462:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	fab2 f282 	clz	r2, r2
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	f002 021f 	and.w	r2, r2, #31
 8003478:	2101      	movs	r1, #1
 800347a:	fa01 f202 	lsl.w	r2, r1, r2
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d184      	bne.n	800338e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003484:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003488:	2b01      	cmp	r3, #1
 800348a:	d105      	bne.n	8003498 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800348c:	4b23      	ldr	r3, [pc, #140]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	4a22      	ldr	r2, [pc, #136]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 8003492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003496:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8242 	beq.w	800392e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034aa:	4b1c      	ldr	r3, [pc, #112]	@ (800351c <HAL_RCC_OscConfig+0xc58>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	f000 8213 	beq.w	80038de <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	f040 8162 	bne.w	800378e <HAL_RCC_OscConfig+0xeca>
 80034ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ce:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80034d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034dc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	fa93 f2a3 	rbit	r2, r3
 80034e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ea:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80034ee:	601a      	str	r2, [r3, #0]
  return result;
 80034f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80034f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003504:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	461a      	mov	r2, r3
 800350c:	2300      	movs	r3, #0
 800350e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fe f946 	bl	80017a0 <HAL_GetTick>
 8003514:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003518:	e00c      	b.n	8003534 <HAL_RCC_OscConfig+0xc70>
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003520:	f7fe f93e 	bl	80017a0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e1fd      	b.n	8003930 <HAL_RCC_OscConfig+0x106c>
 8003534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003538:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800353c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003546:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	fa93 f2a3 	rbit	r2, r3
 8003550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003554:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003558:	601a      	str	r2, [r3, #0]
  return result;
 800355a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800355e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003562:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003564:	fab3 f383 	clz	r3, r3
 8003568:	b2db      	uxtb	r3, r3
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	d102      	bne.n	800357e <HAL_RCC_OscConfig+0xcba>
 8003578:	4bb0      	ldr	r3, [pc, #704]	@ (800383c <HAL_RCC_OscConfig+0xf78>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	e027      	b.n	80035ce <HAL_RCC_OscConfig+0xd0a>
 800357e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003582:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003586:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800358a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003590:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	fa93 f2a3 	rbit	r2, r3
 800359a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80035ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	fa93 f2a3 	rbit	r2, r3
 80035c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	4b9c      	ldr	r3, [pc, #624]	@ (800383c <HAL_RCC_OscConfig+0xf78>)
 80035cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035d2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80035d6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80035da:	6011      	str	r1, [r2, #0]
 80035dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035e0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	fa92 f1a2 	rbit	r1, r2
 80035ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035ee:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80035f2:	6011      	str	r1, [r2, #0]
  return result;
 80035f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035f8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	fab2 f282 	clz	r2, r2
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	f042 0220 	orr.w	r2, r2, #32
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	f002 021f 	and.w	r2, r2, #31
 800360e:	2101      	movs	r1, #1
 8003610:	fa01 f202 	lsl.w	r2, r1, r2
 8003614:	4013      	ands	r3, r2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d182      	bne.n	8003520 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800361a:	4b88      	ldr	r3, [pc, #544]	@ (800383c <HAL_RCC_OscConfig+0xf78>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003626:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800362e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003632:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	430b      	orrs	r3, r1
 800363c:	497f      	ldr	r1, [pc, #508]	@ (800383c <HAL_RCC_OscConfig+0xf78>)
 800363e:	4313      	orrs	r3, r2
 8003640:	604b      	str	r3, [r1, #4]
 8003642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003646:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800364a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800364e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003654:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	fa93 f2a3 	rbit	r2, r3
 800365e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003662:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003666:	601a      	str	r2, [r3, #0]
  return result;
 8003668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003670:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800367c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	461a      	mov	r2, r3
 8003684:	2301      	movs	r3, #1
 8003686:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fe f88a 	bl	80017a0 <HAL_GetTick>
 800368c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003690:	e009      	b.n	80036a6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003692:	f7fe f885 	bl	80017a0 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e144      	b.n	8003930 <HAL_RCC_OscConfig+0x106c>
 80036a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036aa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80036ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	fa93 f2a3 	rbit	r2, r3
 80036c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80036ca:	601a      	str	r2, [r3, #0]
  return result;
 80036cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80036d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d102      	bne.n	80036f0 <HAL_RCC_OscConfig+0xe2c>
 80036ea:	4b54      	ldr	r3, [pc, #336]	@ (800383c <HAL_RCC_OscConfig+0xf78>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	e027      	b.n	8003740 <HAL_RCC_OscConfig+0xe7c>
 80036f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80036f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003702:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	fa93 f2a3 	rbit	r2, r3
 800370c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003710:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800371a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800371e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003728:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	fa93 f2a3 	rbit	r2, r3
 8003732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003736:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	4b3f      	ldr	r3, [pc, #252]	@ (800383c <HAL_RCC_OscConfig+0xf78>)
 800373e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003740:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003744:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003748:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800374c:	6011      	str	r1, [r2, #0]
 800374e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003752:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	fa92 f1a2 	rbit	r1, r2
 800375c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003760:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003764:	6011      	str	r1, [r2, #0]
  return result;
 8003766:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800376a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	fab2 f282 	clz	r2, r2
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	f042 0220 	orr.w	r2, r2, #32
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	f002 021f 	and.w	r2, r2, #31
 8003780:	2101      	movs	r1, #1
 8003782:	fa01 f202 	lsl.w	r2, r1, r2
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d082      	beq.n	8003692 <HAL_RCC_OscConfig+0xdce>
 800378c:	e0cf      	b.n	800392e <HAL_RCC_OscConfig+0x106a>
 800378e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003792:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003796:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800379a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	fa93 f2a3 	rbit	r2, r3
 80037aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ae:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80037b2:	601a      	str	r2, [r3, #0]
  return result;
 80037b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80037bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037c8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	461a      	mov	r2, r3
 80037d0:	2300      	movs	r3, #0
 80037d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fd ffe4 	bl	80017a0 <HAL_GetTick>
 80037d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037dc:	e009      	b.n	80037f2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037de:	f7fd ffdf 	bl	80017a0 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e09e      	b.n	8003930 <HAL_RCC_OscConfig+0x106c>
 80037f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80037fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003804:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	fa93 f2a3 	rbit	r2, r3
 800380e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003812:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003816:	601a      	str	r2, [r3, #0]
  return result;
 8003818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003820:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003822:	fab3 f383 	clz	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b01      	cmp	r3, #1
 8003834:	d104      	bne.n	8003840 <HAL_RCC_OscConfig+0xf7c>
 8003836:	4b01      	ldr	r3, [pc, #4]	@ (800383c <HAL_RCC_OscConfig+0xf78>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	e029      	b.n	8003890 <HAL_RCC_OscConfig+0xfcc>
 800383c:	40021000 	.word	0x40021000
 8003840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003844:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003848:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800384c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003852:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	fa93 f2a3 	rbit	r2, r3
 800385c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003860:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800386e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003878:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	fa93 f2a3 	rbit	r2, r3
 8003882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003886:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	4b2b      	ldr	r3, [pc, #172]	@ (800393c <HAL_RCC_OscConfig+0x1078>)
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003894:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003898:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800389c:	6011      	str	r1, [r2, #0]
 800389e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038a2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	fa92 f1a2 	rbit	r1, r2
 80038ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038b0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80038b4:	6011      	str	r1, [r2, #0]
  return result;
 80038b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038ba:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	fab2 f282 	clz	r2, r2
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	f042 0220 	orr.w	r2, r2, #32
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	f002 021f 	and.w	r2, r2, #31
 80038d0:	2101      	movs	r1, #1
 80038d2:	fa01 f202 	lsl.w	r2, r1, r2
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d180      	bne.n	80037de <HAL_RCC_OscConfig+0xf1a>
 80038dc:	e027      	b.n	800392e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e01e      	b.n	8003930 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038f2:	4b12      	ldr	r3, [pc, #72]	@ (800393c <HAL_RCC_OscConfig+0x1078>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80038fe:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003906:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	429a      	cmp	r2, r3
 8003910:	d10b      	bne.n	800392a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003912:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003916:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800391a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003926:	429a      	cmp	r2, r3
 8003928:	d001      	beq.n	800392e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000

08003940 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b09e      	sub	sp, #120	@ 0x78
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e162      	b.n	8003c1e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003958:	4b90      	ldr	r3, [pc, #576]	@ (8003b9c <HAL_RCC_ClockConfig+0x25c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d910      	bls.n	8003988 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b8d      	ldr	r3, [pc, #564]	@ (8003b9c <HAL_RCC_ClockConfig+0x25c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 0207 	bic.w	r2, r3, #7
 800396e:	498b      	ldr	r1, [pc, #556]	@ (8003b9c <HAL_RCC_ClockConfig+0x25c>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b89      	ldr	r3, [pc, #548]	@ (8003b9c <HAL_RCC_ClockConfig+0x25c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e14a      	b.n	8003c1e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003994:	4b82      	ldr	r3, [pc, #520]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	497f      	ldr	r1, [pc, #508]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80dc 	beq.w	8003b6c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d13c      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xf6>
 80039bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039c0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039c4:	fa93 f3a3 	rbit	r3, r3
 80039c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80039ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039cc:	fab3 f383 	clz	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d102      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xa6>
 80039e0:	4b6f      	ldr	r3, [pc, #444]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	e00f      	b.n	8003a06 <HAL_RCC_ClockConfig+0xc6>
 80039e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039ea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039ee:	fa93 f3a3 	rbit	r3, r3
 80039f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80039f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80039fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a02:	4b67      	ldr	r3, [pc, #412]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a0a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a0e:	fa92 f2a2 	rbit	r2, r2
 8003a12:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003a14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a16:	fab2 f282 	clz	r2, r2
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	f042 0220 	orr.w	r2, r2, #32
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	f002 021f 	and.w	r2, r2, #31
 8003a26:	2101      	movs	r1, #1
 8003a28:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d17b      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e0f3      	b.n	8003c1e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d13c      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x178>
 8003a3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a42:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a46:	fa93 f3a3 	rbit	r3, r3
 8003a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003a4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d102      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x128>
 8003a62:	4b4f      	ldr	r3, [pc, #316]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	e00f      	b.n	8003a88 <HAL_RCC_ClockConfig+0x148>
 8003a68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a70:	fa93 f3a3 	rbit	r3, r3
 8003a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a7e:	fa93 f3a3 	rbit	r3, r3
 8003a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a84:	4b46      	ldr	r3, [pc, #280]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a8c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003a8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a90:	fa92 f2a2 	rbit	r2, r2
 8003a94:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003a96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a98:	fab2 f282 	clz	r2, r2
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	f042 0220 	orr.w	r2, r2, #32
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	f002 021f 	and.w	r2, r2, #31
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d13a      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0b2      	b.n	8003c1e <HAL_RCC_ClockConfig+0x2de>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003abe:	fa93 f3a3 	rbit	r3, r3
 8003ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac6:	fab3 f383 	clz	r3, r3
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d102      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x1a0>
 8003ada:	4b31      	ldr	r3, [pc, #196]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	e00d      	b.n	8003afc <HAL_RCC_ClockConfig+0x1bc>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae6:	fa93 f3a3 	rbit	r3, r3
 8003aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aec:	2302      	movs	r3, #2
 8003aee:	623b      	str	r3, [r7, #32]
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	61fb      	str	r3, [r7, #28]
 8003af8:	4b29      	ldr	r3, [pc, #164]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	2202      	movs	r2, #2
 8003afe:	61ba      	str	r2, [r7, #24]
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	fa92 f2a2 	rbit	r2, r2
 8003b06:	617a      	str	r2, [r7, #20]
  return result;
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	fab2 f282 	clz	r2, r2
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	f042 0220 	orr.w	r2, r2, #32
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	f002 021f 	and.w	r2, r2, #31
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b20:	4013      	ands	r3, r2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e079      	b.n	8003c1e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f023 0203 	bic.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	491a      	ldr	r1, [pc, #104]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b3c:	f7fd fe30 	bl	80017a0 <HAL_GetTick>
 8003b40:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b44:	f7fd fe2c 	bl	80017a0 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e061      	b.n	8003c1e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ba0 <HAL_RCC_ClockConfig+0x260>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 020c 	and.w	r2, r3, #12
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d1eb      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <HAL_RCC_ClockConfig+0x25c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d214      	bcs.n	8003ba4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <HAL_RCC_ClockConfig+0x25c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 0207 	bic.w	r2, r3, #7
 8003b82:	4906      	ldr	r1, [pc, #24]	@ (8003b9c <HAL_RCC_ClockConfig+0x25c>)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8a:	4b04      	ldr	r3, [pc, #16]	@ (8003b9c <HAL_RCC_ClockConfig+0x25c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e040      	b.n	8003c1e <HAL_RCC_ClockConfig+0x2de>
 8003b9c:	40022000 	.word	0x40022000
 8003ba0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <HAL_RCC_ClockConfig+0x2e8>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	491a      	ldr	r1, [pc, #104]	@ (8003c28 <HAL_RCC_ClockConfig+0x2e8>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bce:	4b16      	ldr	r3, [pc, #88]	@ (8003c28 <HAL_RCC_ClockConfig+0x2e8>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4912      	ldr	r1, [pc, #72]	@ (8003c28 <HAL_RCC_ClockConfig+0x2e8>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003be2:	f000 f829 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003be6:	4601      	mov	r1, r0
 8003be8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c28 <HAL_RCC_ClockConfig+0x2e8>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bf0:	22f0      	movs	r2, #240	@ 0xf0
 8003bf2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	fa92 f2a2 	rbit	r2, r2
 8003bfa:	60fa      	str	r2, [r7, #12]
  return result;
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	fab2 f282 	clz	r2, r2
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	40d3      	lsrs	r3, r2
 8003c06:	4a09      	ldr	r2, [pc, #36]	@ (8003c2c <HAL_RCC_ClockConfig+0x2ec>)
 8003c08:	5cd3      	ldrb	r3, [r2, r3]
 8003c0a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c0e:	4a08      	ldr	r2, [pc, #32]	@ (8003c30 <HAL_RCC_ClockConfig+0x2f0>)
 8003c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c12:	4b08      	ldr	r3, [pc, #32]	@ (8003c34 <HAL_RCC_ClockConfig+0x2f4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fd fd7e 	bl	8001718 <HAL_InitTick>
  
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3778      	adds	r7, #120	@ 0x78
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	08009000 	.word	0x08009000
 8003c30:	20000000 	.word	0x20000000
 8003c34:	20000004 	.word	0x20000004

08003c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b08b      	sub	sp, #44	@ 0x2c
 8003c3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	2300      	movs	r3, #0
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c52:	4b29      	ldr	r3, [pc, #164]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d002      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x30>
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d003      	beq.n	8003c6e <HAL_RCC_GetSysClockFreq+0x36>
 8003c66:	e03c      	b.n	8003ce2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c68:	4b24      	ldr	r3, [pc, #144]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c6a:	623b      	str	r3, [r7, #32]
      break;
 8003c6c:	e03c      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003c74:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003c78:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	fa92 f2a2 	rbit	r2, r2
 8003c80:	607a      	str	r2, [r7, #4]
  return result;
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	fab2 f282 	clz	r2, r2
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	40d3      	lsrs	r3, r2
 8003c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c8e:	5cd3      	ldrb	r3, [r2, r3]
 8003c90:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003c92:	4b19      	ldr	r3, [pc, #100]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	220f      	movs	r2, #15
 8003c9c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	fa92 f2a2 	rbit	r2, r2
 8003ca4:	60fa      	str	r2, [r7, #12]
  return result;
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	fab2 f282 	clz	r2, r2
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	40d3      	lsrs	r3, r2
 8003cb0:	4a14      	ldr	r2, [pc, #80]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cb2:	5cd3      	ldrb	r3, [r2, r3]
 8003cb4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cc0:	4a0e      	ldr	r2, [pc, #56]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd0:	e004      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	623b      	str	r3, [r7, #32]
      break;
 8003ce0:	e002      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ce2:	4b06      	ldr	r3, [pc, #24]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ce4:	623b      	str	r3, [r7, #32]
      break;
 8003ce6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	372c      	adds	r7, #44	@ 0x2c
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	007a1200 	.word	0x007a1200
 8003d00:	08009010 	.word	0x08009010
 8003d04:	08009020 	.word	0x08009020
 8003d08:	003d0900 	.word	0x003d0900

08003d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b092      	sub	sp, #72	@ 0x48
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80d4 	beq.w	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d30:	4b4e      	ldr	r3, [pc, #312]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10e      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	4a4a      	ldr	r2, [pc, #296]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d46:	61d3      	str	r3, [r2, #28]
 8003d48:	4b48      	ldr	r3, [pc, #288]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5a:	4b45      	ldr	r3, [pc, #276]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d118      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d66:	4b42      	ldr	r3, [pc, #264]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a41      	ldr	r2, [pc, #260]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d72:	f7fd fd15 	bl	80017a0 <HAL_GetTick>
 8003d76:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d78:	e008      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7a:	f7fd fd11 	bl	80017a0 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b64      	cmp	r3, #100	@ 0x64
 8003d86:	d901      	bls.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e169      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8c:	4b38      	ldr	r3, [pc, #224]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d98:	4b34      	ldr	r3, [pc, #208]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8084 	beq.w	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003db2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d07c      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003db8:	4b2c      	ldr	r3, [pc, #176]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003dc6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dca:	fa93 f3a3 	rbit	r3, r3
 8003dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dd2:	fab3 f383 	clz	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4b26      	ldr	r3, [pc, #152]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	461a      	mov	r2, r3
 8003de2:	2301      	movs	r3, #1
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003dea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003df6:	fab3 f383 	clz	r3, r3
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	461a      	mov	r2, r3
 8003e06:	2300      	movs	r3, #0
 8003e08:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e0a:	4a18      	ldr	r2, [pc, #96]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e0e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d04b      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1a:	f7fd fcc1 	bl	80017a0 <HAL_GetTick>
 8003e1e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e20:	e00a      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e22:	f7fd fcbd 	bl	80017a0 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e113      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3e:	fa93 f3a3 	rbit	r3, r3
 8003e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e44:	2302      	movs	r3, #2
 8003e46:	623b      	str	r3, [r7, #32]
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	fa93 f3a3 	rbit	r3, r3
 8003e4e:	61fb      	str	r3, [r7, #28]
  return result;
 8003e50:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e52:	fab3 f383 	clz	r3, r3
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f043 0302 	orr.w	r3, r3, #2
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d108      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003e66:	4b01      	ldr	r3, [pc, #4]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	e00d      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40007000 	.word	0x40007000
 8003e74:	10908100 	.word	0x10908100
 8003e78:	2302      	movs	r3, #2
 8003e7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	4b78      	ldr	r3, [pc, #480]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	2202      	movs	r2, #2
 8003e8a:	613a      	str	r2, [r7, #16]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	fa92 f2a2 	rbit	r2, r2
 8003e92:	60fa      	str	r2, [r7, #12]
  return result;
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	fab2 f282 	clz	r2, r2
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	f002 021f 	and.w	r2, r2, #31
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0b7      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	496a      	ldr	r1, [pc, #424]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ec4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d105      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ecc:	4b66      	ldr	r3, [pc, #408]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	4a65      	ldr	r2, [pc, #404]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ed6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ee4:	4b60      	ldr	r3, [pc, #384]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee8:	f023 0203 	bic.w	r2, r3, #3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	495d      	ldr	r1, [pc, #372]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d008      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f02:	4b59      	ldr	r3, [pc, #356]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4956      	ldr	r1, [pc, #344]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f20:	4b51      	ldr	r3, [pc, #324]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	494e      	ldr	r1, [pc, #312]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d008      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f42:	f023 0210 	bic.w	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	4947      	ldr	r1, [pc, #284]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003f5c:	4b42      	ldr	r3, [pc, #264]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f68:	493f      	ldr	r1, [pc, #252]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	f023 0220 	bic.w	r2, r3, #32
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	4938      	ldr	r1, [pc, #224]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f98:	4b33      	ldr	r3, [pc, #204]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	4930      	ldr	r1, [pc, #192]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	4929      	ldr	r1, [pc, #164]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fd4:	4b24      	ldr	r3, [pc, #144]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	4921      	ldr	r1, [pc, #132]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d008      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffe:	491a      	ldr	r1, [pc, #104]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004000:	4313      	orrs	r3, r2
 8004002:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004010:	4b15      	ldr	r3, [pc, #84]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004014:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401c:	4912      	ldr	r1, [pc, #72]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800401e:	4313      	orrs	r3, r2
 8004020:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d008      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800402e:	4b0e      	ldr	r3, [pc, #56]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004032:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403a:	490b      	ldr	r1, [pc, #44]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800403c:	4313      	orrs	r3, r2
 800403e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800404c:	4b06      	ldr	r3, [pc, #24]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800404e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004050:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004058:	4903      	ldr	r1, [pc, #12]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800405a:	4313      	orrs	r3, r2
 800405c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3748      	adds	r7, #72	@ 0x48
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021000 	.word	0x40021000

0800406c <__cvt>:
 800406c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004070:	ec57 6b10 	vmov	r6, r7, d0
 8004074:	2f00      	cmp	r7, #0
 8004076:	460c      	mov	r4, r1
 8004078:	4619      	mov	r1, r3
 800407a:	463b      	mov	r3, r7
 800407c:	bfbb      	ittet	lt
 800407e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004082:	461f      	movlt	r7, r3
 8004084:	2300      	movge	r3, #0
 8004086:	232d      	movlt	r3, #45	@ 0x2d
 8004088:	700b      	strb	r3, [r1, #0]
 800408a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800408c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004090:	4691      	mov	r9, r2
 8004092:	f023 0820 	bic.w	r8, r3, #32
 8004096:	bfbc      	itt	lt
 8004098:	4632      	movlt	r2, r6
 800409a:	4616      	movlt	r6, r2
 800409c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80040a0:	d005      	beq.n	80040ae <__cvt+0x42>
 80040a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80040a6:	d100      	bne.n	80040aa <__cvt+0x3e>
 80040a8:	3401      	adds	r4, #1
 80040aa:	2102      	movs	r1, #2
 80040ac:	e000      	b.n	80040b0 <__cvt+0x44>
 80040ae:	2103      	movs	r1, #3
 80040b0:	ab03      	add	r3, sp, #12
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	ab02      	add	r3, sp, #8
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	ec47 6b10 	vmov	d0, r6, r7
 80040bc:	4653      	mov	r3, sl
 80040be:	4622      	mov	r2, r4
 80040c0:	f001 f97a 	bl	80053b8 <_dtoa_r>
 80040c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80040c8:	4605      	mov	r5, r0
 80040ca:	d119      	bne.n	8004100 <__cvt+0x94>
 80040cc:	f019 0f01 	tst.w	r9, #1
 80040d0:	d00e      	beq.n	80040f0 <__cvt+0x84>
 80040d2:	eb00 0904 	add.w	r9, r0, r4
 80040d6:	2200      	movs	r2, #0
 80040d8:	2300      	movs	r3, #0
 80040da:	4630      	mov	r0, r6
 80040dc:	4639      	mov	r1, r7
 80040de:	f7fc fcf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80040e2:	b108      	cbz	r0, 80040e8 <__cvt+0x7c>
 80040e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80040e8:	2230      	movs	r2, #48	@ 0x30
 80040ea:	9b03      	ldr	r3, [sp, #12]
 80040ec:	454b      	cmp	r3, r9
 80040ee:	d31e      	bcc.n	800412e <__cvt+0xc2>
 80040f0:	9b03      	ldr	r3, [sp, #12]
 80040f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80040f4:	1b5b      	subs	r3, r3, r5
 80040f6:	4628      	mov	r0, r5
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	b004      	add	sp, #16
 80040fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004100:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004104:	eb00 0904 	add.w	r9, r0, r4
 8004108:	d1e5      	bne.n	80040d6 <__cvt+0x6a>
 800410a:	7803      	ldrb	r3, [r0, #0]
 800410c:	2b30      	cmp	r3, #48	@ 0x30
 800410e:	d10a      	bne.n	8004126 <__cvt+0xba>
 8004110:	2200      	movs	r2, #0
 8004112:	2300      	movs	r3, #0
 8004114:	4630      	mov	r0, r6
 8004116:	4639      	mov	r1, r7
 8004118:	f7fc fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800411c:	b918      	cbnz	r0, 8004126 <__cvt+0xba>
 800411e:	f1c4 0401 	rsb	r4, r4, #1
 8004122:	f8ca 4000 	str.w	r4, [sl]
 8004126:	f8da 3000 	ldr.w	r3, [sl]
 800412a:	4499      	add	r9, r3
 800412c:	e7d3      	b.n	80040d6 <__cvt+0x6a>
 800412e:	1c59      	adds	r1, r3, #1
 8004130:	9103      	str	r1, [sp, #12]
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	e7d9      	b.n	80040ea <__cvt+0x7e>

08004136 <__exponent>:
 8004136:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004138:	2900      	cmp	r1, #0
 800413a:	bfba      	itte	lt
 800413c:	4249      	neglt	r1, r1
 800413e:	232d      	movlt	r3, #45	@ 0x2d
 8004140:	232b      	movge	r3, #43	@ 0x2b
 8004142:	2909      	cmp	r1, #9
 8004144:	7002      	strb	r2, [r0, #0]
 8004146:	7043      	strb	r3, [r0, #1]
 8004148:	dd29      	ble.n	800419e <__exponent+0x68>
 800414a:	f10d 0307 	add.w	r3, sp, #7
 800414e:	461d      	mov	r5, r3
 8004150:	270a      	movs	r7, #10
 8004152:	461a      	mov	r2, r3
 8004154:	fbb1 f6f7 	udiv	r6, r1, r7
 8004158:	fb07 1416 	mls	r4, r7, r6, r1
 800415c:	3430      	adds	r4, #48	@ 0x30
 800415e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004162:	460c      	mov	r4, r1
 8004164:	2c63      	cmp	r4, #99	@ 0x63
 8004166:	f103 33ff 	add.w	r3, r3, #4294967295
 800416a:	4631      	mov	r1, r6
 800416c:	dcf1      	bgt.n	8004152 <__exponent+0x1c>
 800416e:	3130      	adds	r1, #48	@ 0x30
 8004170:	1e94      	subs	r4, r2, #2
 8004172:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004176:	1c41      	adds	r1, r0, #1
 8004178:	4623      	mov	r3, r4
 800417a:	42ab      	cmp	r3, r5
 800417c:	d30a      	bcc.n	8004194 <__exponent+0x5e>
 800417e:	f10d 0309 	add.w	r3, sp, #9
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	42ac      	cmp	r4, r5
 8004186:	bf88      	it	hi
 8004188:	2300      	movhi	r3, #0
 800418a:	3302      	adds	r3, #2
 800418c:	4403      	add	r3, r0
 800418e:	1a18      	subs	r0, r3, r0
 8004190:	b003      	add	sp, #12
 8004192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004194:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004198:	f801 6f01 	strb.w	r6, [r1, #1]!
 800419c:	e7ed      	b.n	800417a <__exponent+0x44>
 800419e:	2330      	movs	r3, #48	@ 0x30
 80041a0:	3130      	adds	r1, #48	@ 0x30
 80041a2:	7083      	strb	r3, [r0, #2]
 80041a4:	70c1      	strb	r1, [r0, #3]
 80041a6:	1d03      	adds	r3, r0, #4
 80041a8:	e7f1      	b.n	800418e <__exponent+0x58>
	...

080041ac <_printf_float>:
 80041ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b0:	b08d      	sub	sp, #52	@ 0x34
 80041b2:	460c      	mov	r4, r1
 80041b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80041b8:	4616      	mov	r6, r2
 80041ba:	461f      	mov	r7, r3
 80041bc:	4605      	mov	r5, r0
 80041be:	f000 fff3 	bl	80051a8 <_localeconv_r>
 80041c2:	6803      	ldr	r3, [r0, #0]
 80041c4:	9304      	str	r3, [sp, #16]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fc f852 	bl	8000270 <strlen>
 80041cc:	2300      	movs	r3, #0
 80041ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80041d0:	f8d8 3000 	ldr.w	r3, [r8]
 80041d4:	9005      	str	r0, [sp, #20]
 80041d6:	3307      	adds	r3, #7
 80041d8:	f023 0307 	bic.w	r3, r3, #7
 80041dc:	f103 0208 	add.w	r2, r3, #8
 80041e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80041e4:	f8d4 b000 	ldr.w	fp, [r4]
 80041e8:	f8c8 2000 	str.w	r2, [r8]
 80041ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80041f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80041f4:	9307      	str	r3, [sp, #28]
 80041f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80041fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80041fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004202:	4b9c      	ldr	r3, [pc, #624]	@ (8004474 <_printf_float+0x2c8>)
 8004204:	f04f 32ff 	mov.w	r2, #4294967295
 8004208:	f7fc fc90 	bl	8000b2c <__aeabi_dcmpun>
 800420c:	bb70      	cbnz	r0, 800426c <_printf_float+0xc0>
 800420e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004212:	4b98      	ldr	r3, [pc, #608]	@ (8004474 <_printf_float+0x2c8>)
 8004214:	f04f 32ff 	mov.w	r2, #4294967295
 8004218:	f7fc fc6a 	bl	8000af0 <__aeabi_dcmple>
 800421c:	bb30      	cbnz	r0, 800426c <_printf_float+0xc0>
 800421e:	2200      	movs	r2, #0
 8004220:	2300      	movs	r3, #0
 8004222:	4640      	mov	r0, r8
 8004224:	4649      	mov	r1, r9
 8004226:	f7fc fc59 	bl	8000adc <__aeabi_dcmplt>
 800422a:	b110      	cbz	r0, 8004232 <_printf_float+0x86>
 800422c:	232d      	movs	r3, #45	@ 0x2d
 800422e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004232:	4a91      	ldr	r2, [pc, #580]	@ (8004478 <_printf_float+0x2cc>)
 8004234:	4b91      	ldr	r3, [pc, #580]	@ (800447c <_printf_float+0x2d0>)
 8004236:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800423a:	bf94      	ite	ls
 800423c:	4690      	movls	r8, r2
 800423e:	4698      	movhi	r8, r3
 8004240:	2303      	movs	r3, #3
 8004242:	6123      	str	r3, [r4, #16]
 8004244:	f02b 0304 	bic.w	r3, fp, #4
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	f04f 0900 	mov.w	r9, #0
 800424e:	9700      	str	r7, [sp, #0]
 8004250:	4633      	mov	r3, r6
 8004252:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004254:	4621      	mov	r1, r4
 8004256:	4628      	mov	r0, r5
 8004258:	f000 f9d2 	bl	8004600 <_printf_common>
 800425c:	3001      	adds	r0, #1
 800425e:	f040 808d 	bne.w	800437c <_printf_float+0x1d0>
 8004262:	f04f 30ff 	mov.w	r0, #4294967295
 8004266:	b00d      	add	sp, #52	@ 0x34
 8004268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800426c:	4642      	mov	r2, r8
 800426e:	464b      	mov	r3, r9
 8004270:	4640      	mov	r0, r8
 8004272:	4649      	mov	r1, r9
 8004274:	f7fc fc5a 	bl	8000b2c <__aeabi_dcmpun>
 8004278:	b140      	cbz	r0, 800428c <_printf_float+0xe0>
 800427a:	464b      	mov	r3, r9
 800427c:	2b00      	cmp	r3, #0
 800427e:	bfbc      	itt	lt
 8004280:	232d      	movlt	r3, #45	@ 0x2d
 8004282:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004286:	4a7e      	ldr	r2, [pc, #504]	@ (8004480 <_printf_float+0x2d4>)
 8004288:	4b7e      	ldr	r3, [pc, #504]	@ (8004484 <_printf_float+0x2d8>)
 800428a:	e7d4      	b.n	8004236 <_printf_float+0x8a>
 800428c:	6863      	ldr	r3, [r4, #4]
 800428e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004292:	9206      	str	r2, [sp, #24]
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	d13b      	bne.n	8004310 <_printf_float+0x164>
 8004298:	2306      	movs	r3, #6
 800429a:	6063      	str	r3, [r4, #4]
 800429c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80042a0:	2300      	movs	r3, #0
 80042a2:	6022      	str	r2, [r4, #0]
 80042a4:	9303      	str	r3, [sp, #12]
 80042a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80042a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80042ac:	ab09      	add	r3, sp, #36	@ 0x24
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	6861      	ldr	r1, [r4, #4]
 80042b2:	ec49 8b10 	vmov	d0, r8, r9
 80042b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80042ba:	4628      	mov	r0, r5
 80042bc:	f7ff fed6 	bl	800406c <__cvt>
 80042c0:	9b06      	ldr	r3, [sp, #24]
 80042c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80042c4:	2b47      	cmp	r3, #71	@ 0x47
 80042c6:	4680      	mov	r8, r0
 80042c8:	d129      	bne.n	800431e <_printf_float+0x172>
 80042ca:	1cc8      	adds	r0, r1, #3
 80042cc:	db02      	blt.n	80042d4 <_printf_float+0x128>
 80042ce:	6863      	ldr	r3, [r4, #4]
 80042d0:	4299      	cmp	r1, r3
 80042d2:	dd41      	ble.n	8004358 <_printf_float+0x1ac>
 80042d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80042d8:	fa5f fa8a 	uxtb.w	sl, sl
 80042dc:	3901      	subs	r1, #1
 80042de:	4652      	mov	r2, sl
 80042e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80042e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80042e6:	f7ff ff26 	bl	8004136 <__exponent>
 80042ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80042ec:	1813      	adds	r3, r2, r0
 80042ee:	2a01      	cmp	r2, #1
 80042f0:	4681      	mov	r9, r0
 80042f2:	6123      	str	r3, [r4, #16]
 80042f4:	dc02      	bgt.n	80042fc <_printf_float+0x150>
 80042f6:	6822      	ldr	r2, [r4, #0]
 80042f8:	07d2      	lsls	r2, r2, #31
 80042fa:	d501      	bpl.n	8004300 <_printf_float+0x154>
 80042fc:	3301      	adds	r3, #1
 80042fe:	6123      	str	r3, [r4, #16]
 8004300:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0a2      	beq.n	800424e <_printf_float+0xa2>
 8004308:	232d      	movs	r3, #45	@ 0x2d
 800430a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800430e:	e79e      	b.n	800424e <_printf_float+0xa2>
 8004310:	9a06      	ldr	r2, [sp, #24]
 8004312:	2a47      	cmp	r2, #71	@ 0x47
 8004314:	d1c2      	bne.n	800429c <_printf_float+0xf0>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1c0      	bne.n	800429c <_printf_float+0xf0>
 800431a:	2301      	movs	r3, #1
 800431c:	e7bd      	b.n	800429a <_printf_float+0xee>
 800431e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004322:	d9db      	bls.n	80042dc <_printf_float+0x130>
 8004324:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004328:	d118      	bne.n	800435c <_printf_float+0x1b0>
 800432a:	2900      	cmp	r1, #0
 800432c:	6863      	ldr	r3, [r4, #4]
 800432e:	dd0b      	ble.n	8004348 <_printf_float+0x19c>
 8004330:	6121      	str	r1, [r4, #16]
 8004332:	b913      	cbnz	r3, 800433a <_printf_float+0x18e>
 8004334:	6822      	ldr	r2, [r4, #0]
 8004336:	07d0      	lsls	r0, r2, #31
 8004338:	d502      	bpl.n	8004340 <_printf_float+0x194>
 800433a:	3301      	adds	r3, #1
 800433c:	440b      	add	r3, r1
 800433e:	6123      	str	r3, [r4, #16]
 8004340:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004342:	f04f 0900 	mov.w	r9, #0
 8004346:	e7db      	b.n	8004300 <_printf_float+0x154>
 8004348:	b913      	cbnz	r3, 8004350 <_printf_float+0x1a4>
 800434a:	6822      	ldr	r2, [r4, #0]
 800434c:	07d2      	lsls	r2, r2, #31
 800434e:	d501      	bpl.n	8004354 <_printf_float+0x1a8>
 8004350:	3302      	adds	r3, #2
 8004352:	e7f4      	b.n	800433e <_printf_float+0x192>
 8004354:	2301      	movs	r3, #1
 8004356:	e7f2      	b.n	800433e <_printf_float+0x192>
 8004358:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800435c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800435e:	4299      	cmp	r1, r3
 8004360:	db05      	blt.n	800436e <_printf_float+0x1c2>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	6121      	str	r1, [r4, #16]
 8004366:	07d8      	lsls	r0, r3, #31
 8004368:	d5ea      	bpl.n	8004340 <_printf_float+0x194>
 800436a:	1c4b      	adds	r3, r1, #1
 800436c:	e7e7      	b.n	800433e <_printf_float+0x192>
 800436e:	2900      	cmp	r1, #0
 8004370:	bfd4      	ite	le
 8004372:	f1c1 0202 	rsble	r2, r1, #2
 8004376:	2201      	movgt	r2, #1
 8004378:	4413      	add	r3, r2
 800437a:	e7e0      	b.n	800433e <_printf_float+0x192>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	055a      	lsls	r2, r3, #21
 8004380:	d407      	bmi.n	8004392 <_printf_float+0x1e6>
 8004382:	6923      	ldr	r3, [r4, #16]
 8004384:	4642      	mov	r2, r8
 8004386:	4631      	mov	r1, r6
 8004388:	4628      	mov	r0, r5
 800438a:	47b8      	blx	r7
 800438c:	3001      	adds	r0, #1
 800438e:	d12b      	bne.n	80043e8 <_printf_float+0x23c>
 8004390:	e767      	b.n	8004262 <_printf_float+0xb6>
 8004392:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004396:	f240 80dd 	bls.w	8004554 <_printf_float+0x3a8>
 800439a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800439e:	2200      	movs	r2, #0
 80043a0:	2300      	movs	r3, #0
 80043a2:	f7fc fb91 	bl	8000ac8 <__aeabi_dcmpeq>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d033      	beq.n	8004412 <_printf_float+0x266>
 80043aa:	4a37      	ldr	r2, [pc, #220]	@ (8004488 <_printf_float+0x2dc>)
 80043ac:	2301      	movs	r3, #1
 80043ae:	4631      	mov	r1, r6
 80043b0:	4628      	mov	r0, r5
 80043b2:	47b8      	blx	r7
 80043b4:	3001      	adds	r0, #1
 80043b6:	f43f af54 	beq.w	8004262 <_printf_float+0xb6>
 80043ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80043be:	4543      	cmp	r3, r8
 80043c0:	db02      	blt.n	80043c8 <_printf_float+0x21c>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	07d8      	lsls	r0, r3, #31
 80043c6:	d50f      	bpl.n	80043e8 <_printf_float+0x23c>
 80043c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043cc:	4631      	mov	r1, r6
 80043ce:	4628      	mov	r0, r5
 80043d0:	47b8      	blx	r7
 80043d2:	3001      	adds	r0, #1
 80043d4:	f43f af45 	beq.w	8004262 <_printf_float+0xb6>
 80043d8:	f04f 0900 	mov.w	r9, #0
 80043dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80043e0:	f104 0a1a 	add.w	sl, r4, #26
 80043e4:	45c8      	cmp	r8, r9
 80043e6:	dc09      	bgt.n	80043fc <_printf_float+0x250>
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	079b      	lsls	r3, r3, #30
 80043ec:	f100 8103 	bmi.w	80045f6 <_printf_float+0x44a>
 80043f0:	68e0      	ldr	r0, [r4, #12]
 80043f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80043f4:	4298      	cmp	r0, r3
 80043f6:	bfb8      	it	lt
 80043f8:	4618      	movlt	r0, r3
 80043fa:	e734      	b.n	8004266 <_printf_float+0xba>
 80043fc:	2301      	movs	r3, #1
 80043fe:	4652      	mov	r2, sl
 8004400:	4631      	mov	r1, r6
 8004402:	4628      	mov	r0, r5
 8004404:	47b8      	blx	r7
 8004406:	3001      	adds	r0, #1
 8004408:	f43f af2b 	beq.w	8004262 <_printf_float+0xb6>
 800440c:	f109 0901 	add.w	r9, r9, #1
 8004410:	e7e8      	b.n	80043e4 <_printf_float+0x238>
 8004412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004414:	2b00      	cmp	r3, #0
 8004416:	dc39      	bgt.n	800448c <_printf_float+0x2e0>
 8004418:	4a1b      	ldr	r2, [pc, #108]	@ (8004488 <_printf_float+0x2dc>)
 800441a:	2301      	movs	r3, #1
 800441c:	4631      	mov	r1, r6
 800441e:	4628      	mov	r0, r5
 8004420:	47b8      	blx	r7
 8004422:	3001      	adds	r0, #1
 8004424:	f43f af1d 	beq.w	8004262 <_printf_float+0xb6>
 8004428:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800442c:	ea59 0303 	orrs.w	r3, r9, r3
 8004430:	d102      	bne.n	8004438 <_printf_float+0x28c>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	07d9      	lsls	r1, r3, #31
 8004436:	d5d7      	bpl.n	80043e8 <_printf_float+0x23c>
 8004438:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800443c:	4631      	mov	r1, r6
 800443e:	4628      	mov	r0, r5
 8004440:	47b8      	blx	r7
 8004442:	3001      	adds	r0, #1
 8004444:	f43f af0d 	beq.w	8004262 <_printf_float+0xb6>
 8004448:	f04f 0a00 	mov.w	sl, #0
 800444c:	f104 0b1a 	add.w	fp, r4, #26
 8004450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004452:	425b      	negs	r3, r3
 8004454:	4553      	cmp	r3, sl
 8004456:	dc01      	bgt.n	800445c <_printf_float+0x2b0>
 8004458:	464b      	mov	r3, r9
 800445a:	e793      	b.n	8004384 <_printf_float+0x1d8>
 800445c:	2301      	movs	r3, #1
 800445e:	465a      	mov	r2, fp
 8004460:	4631      	mov	r1, r6
 8004462:	4628      	mov	r0, r5
 8004464:	47b8      	blx	r7
 8004466:	3001      	adds	r0, #1
 8004468:	f43f aefb 	beq.w	8004262 <_printf_float+0xb6>
 800446c:	f10a 0a01 	add.w	sl, sl, #1
 8004470:	e7ee      	b.n	8004450 <_printf_float+0x2a4>
 8004472:	bf00      	nop
 8004474:	7fefffff 	.word	0x7fefffff
 8004478:	08009030 	.word	0x08009030
 800447c:	08009034 	.word	0x08009034
 8004480:	08009038 	.word	0x08009038
 8004484:	0800903c 	.word	0x0800903c
 8004488:	08009040 	.word	0x08009040
 800448c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800448e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004492:	4553      	cmp	r3, sl
 8004494:	bfa8      	it	ge
 8004496:	4653      	movge	r3, sl
 8004498:	2b00      	cmp	r3, #0
 800449a:	4699      	mov	r9, r3
 800449c:	dc36      	bgt.n	800450c <_printf_float+0x360>
 800449e:	f04f 0b00 	mov.w	fp, #0
 80044a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044a6:	f104 021a 	add.w	r2, r4, #26
 80044aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80044ac:	9306      	str	r3, [sp, #24]
 80044ae:	eba3 0309 	sub.w	r3, r3, r9
 80044b2:	455b      	cmp	r3, fp
 80044b4:	dc31      	bgt.n	800451a <_printf_float+0x36e>
 80044b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044b8:	459a      	cmp	sl, r3
 80044ba:	dc3a      	bgt.n	8004532 <_printf_float+0x386>
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	07da      	lsls	r2, r3, #31
 80044c0:	d437      	bmi.n	8004532 <_printf_float+0x386>
 80044c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044c4:	ebaa 0903 	sub.w	r9, sl, r3
 80044c8:	9b06      	ldr	r3, [sp, #24]
 80044ca:	ebaa 0303 	sub.w	r3, sl, r3
 80044ce:	4599      	cmp	r9, r3
 80044d0:	bfa8      	it	ge
 80044d2:	4699      	movge	r9, r3
 80044d4:	f1b9 0f00 	cmp.w	r9, #0
 80044d8:	dc33      	bgt.n	8004542 <_printf_float+0x396>
 80044da:	f04f 0800 	mov.w	r8, #0
 80044de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044e2:	f104 0b1a 	add.w	fp, r4, #26
 80044e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044e8:	ebaa 0303 	sub.w	r3, sl, r3
 80044ec:	eba3 0309 	sub.w	r3, r3, r9
 80044f0:	4543      	cmp	r3, r8
 80044f2:	f77f af79 	ble.w	80043e8 <_printf_float+0x23c>
 80044f6:	2301      	movs	r3, #1
 80044f8:	465a      	mov	r2, fp
 80044fa:	4631      	mov	r1, r6
 80044fc:	4628      	mov	r0, r5
 80044fe:	47b8      	blx	r7
 8004500:	3001      	adds	r0, #1
 8004502:	f43f aeae 	beq.w	8004262 <_printf_float+0xb6>
 8004506:	f108 0801 	add.w	r8, r8, #1
 800450a:	e7ec      	b.n	80044e6 <_printf_float+0x33a>
 800450c:	4642      	mov	r2, r8
 800450e:	4631      	mov	r1, r6
 8004510:	4628      	mov	r0, r5
 8004512:	47b8      	blx	r7
 8004514:	3001      	adds	r0, #1
 8004516:	d1c2      	bne.n	800449e <_printf_float+0x2f2>
 8004518:	e6a3      	b.n	8004262 <_printf_float+0xb6>
 800451a:	2301      	movs	r3, #1
 800451c:	4631      	mov	r1, r6
 800451e:	4628      	mov	r0, r5
 8004520:	9206      	str	r2, [sp, #24]
 8004522:	47b8      	blx	r7
 8004524:	3001      	adds	r0, #1
 8004526:	f43f ae9c 	beq.w	8004262 <_printf_float+0xb6>
 800452a:	9a06      	ldr	r2, [sp, #24]
 800452c:	f10b 0b01 	add.w	fp, fp, #1
 8004530:	e7bb      	b.n	80044aa <_printf_float+0x2fe>
 8004532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004536:	4631      	mov	r1, r6
 8004538:	4628      	mov	r0, r5
 800453a:	47b8      	blx	r7
 800453c:	3001      	adds	r0, #1
 800453e:	d1c0      	bne.n	80044c2 <_printf_float+0x316>
 8004540:	e68f      	b.n	8004262 <_printf_float+0xb6>
 8004542:	9a06      	ldr	r2, [sp, #24]
 8004544:	464b      	mov	r3, r9
 8004546:	4442      	add	r2, r8
 8004548:	4631      	mov	r1, r6
 800454a:	4628      	mov	r0, r5
 800454c:	47b8      	blx	r7
 800454e:	3001      	adds	r0, #1
 8004550:	d1c3      	bne.n	80044da <_printf_float+0x32e>
 8004552:	e686      	b.n	8004262 <_printf_float+0xb6>
 8004554:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004558:	f1ba 0f01 	cmp.w	sl, #1
 800455c:	dc01      	bgt.n	8004562 <_printf_float+0x3b6>
 800455e:	07db      	lsls	r3, r3, #31
 8004560:	d536      	bpl.n	80045d0 <_printf_float+0x424>
 8004562:	2301      	movs	r3, #1
 8004564:	4642      	mov	r2, r8
 8004566:	4631      	mov	r1, r6
 8004568:	4628      	mov	r0, r5
 800456a:	47b8      	blx	r7
 800456c:	3001      	adds	r0, #1
 800456e:	f43f ae78 	beq.w	8004262 <_printf_float+0xb6>
 8004572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004576:	4631      	mov	r1, r6
 8004578:	4628      	mov	r0, r5
 800457a:	47b8      	blx	r7
 800457c:	3001      	adds	r0, #1
 800457e:	f43f ae70 	beq.w	8004262 <_printf_float+0xb6>
 8004582:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004586:	2200      	movs	r2, #0
 8004588:	2300      	movs	r3, #0
 800458a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800458e:	f7fc fa9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004592:	b9c0      	cbnz	r0, 80045c6 <_printf_float+0x41a>
 8004594:	4653      	mov	r3, sl
 8004596:	f108 0201 	add.w	r2, r8, #1
 800459a:	4631      	mov	r1, r6
 800459c:	4628      	mov	r0, r5
 800459e:	47b8      	blx	r7
 80045a0:	3001      	adds	r0, #1
 80045a2:	d10c      	bne.n	80045be <_printf_float+0x412>
 80045a4:	e65d      	b.n	8004262 <_printf_float+0xb6>
 80045a6:	2301      	movs	r3, #1
 80045a8:	465a      	mov	r2, fp
 80045aa:	4631      	mov	r1, r6
 80045ac:	4628      	mov	r0, r5
 80045ae:	47b8      	blx	r7
 80045b0:	3001      	adds	r0, #1
 80045b2:	f43f ae56 	beq.w	8004262 <_printf_float+0xb6>
 80045b6:	f108 0801 	add.w	r8, r8, #1
 80045ba:	45d0      	cmp	r8, sl
 80045bc:	dbf3      	blt.n	80045a6 <_printf_float+0x3fa>
 80045be:	464b      	mov	r3, r9
 80045c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80045c4:	e6df      	b.n	8004386 <_printf_float+0x1da>
 80045c6:	f04f 0800 	mov.w	r8, #0
 80045ca:	f104 0b1a 	add.w	fp, r4, #26
 80045ce:	e7f4      	b.n	80045ba <_printf_float+0x40e>
 80045d0:	2301      	movs	r3, #1
 80045d2:	4642      	mov	r2, r8
 80045d4:	e7e1      	b.n	800459a <_printf_float+0x3ee>
 80045d6:	2301      	movs	r3, #1
 80045d8:	464a      	mov	r2, r9
 80045da:	4631      	mov	r1, r6
 80045dc:	4628      	mov	r0, r5
 80045de:	47b8      	blx	r7
 80045e0:	3001      	adds	r0, #1
 80045e2:	f43f ae3e 	beq.w	8004262 <_printf_float+0xb6>
 80045e6:	f108 0801 	add.w	r8, r8, #1
 80045ea:	68e3      	ldr	r3, [r4, #12]
 80045ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80045ee:	1a5b      	subs	r3, r3, r1
 80045f0:	4543      	cmp	r3, r8
 80045f2:	dcf0      	bgt.n	80045d6 <_printf_float+0x42a>
 80045f4:	e6fc      	b.n	80043f0 <_printf_float+0x244>
 80045f6:	f04f 0800 	mov.w	r8, #0
 80045fa:	f104 0919 	add.w	r9, r4, #25
 80045fe:	e7f4      	b.n	80045ea <_printf_float+0x43e>

08004600 <_printf_common>:
 8004600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004604:	4616      	mov	r6, r2
 8004606:	4698      	mov	r8, r3
 8004608:	688a      	ldr	r2, [r1, #8]
 800460a:	690b      	ldr	r3, [r1, #16]
 800460c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004610:	4293      	cmp	r3, r2
 8004612:	bfb8      	it	lt
 8004614:	4613      	movlt	r3, r2
 8004616:	6033      	str	r3, [r6, #0]
 8004618:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800461c:	4607      	mov	r7, r0
 800461e:	460c      	mov	r4, r1
 8004620:	b10a      	cbz	r2, 8004626 <_printf_common+0x26>
 8004622:	3301      	adds	r3, #1
 8004624:	6033      	str	r3, [r6, #0]
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	0699      	lsls	r1, r3, #26
 800462a:	bf42      	ittt	mi
 800462c:	6833      	ldrmi	r3, [r6, #0]
 800462e:	3302      	addmi	r3, #2
 8004630:	6033      	strmi	r3, [r6, #0]
 8004632:	6825      	ldr	r5, [r4, #0]
 8004634:	f015 0506 	ands.w	r5, r5, #6
 8004638:	d106      	bne.n	8004648 <_printf_common+0x48>
 800463a:	f104 0a19 	add.w	sl, r4, #25
 800463e:	68e3      	ldr	r3, [r4, #12]
 8004640:	6832      	ldr	r2, [r6, #0]
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	42ab      	cmp	r3, r5
 8004646:	dc26      	bgt.n	8004696 <_printf_common+0x96>
 8004648:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800464c:	6822      	ldr	r2, [r4, #0]
 800464e:	3b00      	subs	r3, #0
 8004650:	bf18      	it	ne
 8004652:	2301      	movne	r3, #1
 8004654:	0692      	lsls	r2, r2, #26
 8004656:	d42b      	bmi.n	80046b0 <_printf_common+0xb0>
 8004658:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800465c:	4641      	mov	r1, r8
 800465e:	4638      	mov	r0, r7
 8004660:	47c8      	blx	r9
 8004662:	3001      	adds	r0, #1
 8004664:	d01e      	beq.n	80046a4 <_printf_common+0xa4>
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	6922      	ldr	r2, [r4, #16]
 800466a:	f003 0306 	and.w	r3, r3, #6
 800466e:	2b04      	cmp	r3, #4
 8004670:	bf02      	ittt	eq
 8004672:	68e5      	ldreq	r5, [r4, #12]
 8004674:	6833      	ldreq	r3, [r6, #0]
 8004676:	1aed      	subeq	r5, r5, r3
 8004678:	68a3      	ldr	r3, [r4, #8]
 800467a:	bf0c      	ite	eq
 800467c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004680:	2500      	movne	r5, #0
 8004682:	4293      	cmp	r3, r2
 8004684:	bfc4      	itt	gt
 8004686:	1a9b      	subgt	r3, r3, r2
 8004688:	18ed      	addgt	r5, r5, r3
 800468a:	2600      	movs	r6, #0
 800468c:	341a      	adds	r4, #26
 800468e:	42b5      	cmp	r5, r6
 8004690:	d11a      	bne.n	80046c8 <_printf_common+0xc8>
 8004692:	2000      	movs	r0, #0
 8004694:	e008      	b.n	80046a8 <_printf_common+0xa8>
 8004696:	2301      	movs	r3, #1
 8004698:	4652      	mov	r2, sl
 800469a:	4641      	mov	r1, r8
 800469c:	4638      	mov	r0, r7
 800469e:	47c8      	blx	r9
 80046a0:	3001      	adds	r0, #1
 80046a2:	d103      	bne.n	80046ac <_printf_common+0xac>
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295
 80046a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ac:	3501      	adds	r5, #1
 80046ae:	e7c6      	b.n	800463e <_printf_common+0x3e>
 80046b0:	18e1      	adds	r1, r4, r3
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	2030      	movs	r0, #48	@ 0x30
 80046b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046ba:	4422      	add	r2, r4
 80046bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046c4:	3302      	adds	r3, #2
 80046c6:	e7c7      	b.n	8004658 <_printf_common+0x58>
 80046c8:	2301      	movs	r3, #1
 80046ca:	4622      	mov	r2, r4
 80046cc:	4641      	mov	r1, r8
 80046ce:	4638      	mov	r0, r7
 80046d0:	47c8      	blx	r9
 80046d2:	3001      	adds	r0, #1
 80046d4:	d0e6      	beq.n	80046a4 <_printf_common+0xa4>
 80046d6:	3601      	adds	r6, #1
 80046d8:	e7d9      	b.n	800468e <_printf_common+0x8e>
	...

080046dc <_printf_i>:
 80046dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046e0:	7e0f      	ldrb	r7, [r1, #24]
 80046e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046e4:	2f78      	cmp	r7, #120	@ 0x78
 80046e6:	4691      	mov	r9, r2
 80046e8:	4680      	mov	r8, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	469a      	mov	sl, r3
 80046ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046f2:	d807      	bhi.n	8004704 <_printf_i+0x28>
 80046f4:	2f62      	cmp	r7, #98	@ 0x62
 80046f6:	d80a      	bhi.n	800470e <_printf_i+0x32>
 80046f8:	2f00      	cmp	r7, #0
 80046fa:	f000 80d2 	beq.w	80048a2 <_printf_i+0x1c6>
 80046fe:	2f58      	cmp	r7, #88	@ 0x58
 8004700:	f000 80b9 	beq.w	8004876 <_printf_i+0x19a>
 8004704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004708:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800470c:	e03a      	b.n	8004784 <_printf_i+0xa8>
 800470e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004712:	2b15      	cmp	r3, #21
 8004714:	d8f6      	bhi.n	8004704 <_printf_i+0x28>
 8004716:	a101      	add	r1, pc, #4	@ (adr r1, 800471c <_printf_i+0x40>)
 8004718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800471c:	08004775 	.word	0x08004775
 8004720:	08004789 	.word	0x08004789
 8004724:	08004705 	.word	0x08004705
 8004728:	08004705 	.word	0x08004705
 800472c:	08004705 	.word	0x08004705
 8004730:	08004705 	.word	0x08004705
 8004734:	08004789 	.word	0x08004789
 8004738:	08004705 	.word	0x08004705
 800473c:	08004705 	.word	0x08004705
 8004740:	08004705 	.word	0x08004705
 8004744:	08004705 	.word	0x08004705
 8004748:	08004889 	.word	0x08004889
 800474c:	080047b3 	.word	0x080047b3
 8004750:	08004843 	.word	0x08004843
 8004754:	08004705 	.word	0x08004705
 8004758:	08004705 	.word	0x08004705
 800475c:	080048ab 	.word	0x080048ab
 8004760:	08004705 	.word	0x08004705
 8004764:	080047b3 	.word	0x080047b3
 8004768:	08004705 	.word	0x08004705
 800476c:	08004705 	.word	0x08004705
 8004770:	0800484b 	.word	0x0800484b
 8004774:	6833      	ldr	r3, [r6, #0]
 8004776:	1d1a      	adds	r2, r3, #4
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6032      	str	r2, [r6, #0]
 800477c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004780:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004784:	2301      	movs	r3, #1
 8004786:	e09d      	b.n	80048c4 <_printf_i+0x1e8>
 8004788:	6833      	ldr	r3, [r6, #0]
 800478a:	6820      	ldr	r0, [r4, #0]
 800478c:	1d19      	adds	r1, r3, #4
 800478e:	6031      	str	r1, [r6, #0]
 8004790:	0606      	lsls	r6, r0, #24
 8004792:	d501      	bpl.n	8004798 <_printf_i+0xbc>
 8004794:	681d      	ldr	r5, [r3, #0]
 8004796:	e003      	b.n	80047a0 <_printf_i+0xc4>
 8004798:	0645      	lsls	r5, r0, #25
 800479a:	d5fb      	bpl.n	8004794 <_printf_i+0xb8>
 800479c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047a0:	2d00      	cmp	r5, #0
 80047a2:	da03      	bge.n	80047ac <_printf_i+0xd0>
 80047a4:	232d      	movs	r3, #45	@ 0x2d
 80047a6:	426d      	negs	r5, r5
 80047a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047ac:	4859      	ldr	r0, [pc, #356]	@ (8004914 <_printf_i+0x238>)
 80047ae:	230a      	movs	r3, #10
 80047b0:	e011      	b.n	80047d6 <_printf_i+0xfa>
 80047b2:	6821      	ldr	r1, [r4, #0]
 80047b4:	6833      	ldr	r3, [r6, #0]
 80047b6:	0608      	lsls	r0, r1, #24
 80047b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80047bc:	d402      	bmi.n	80047c4 <_printf_i+0xe8>
 80047be:	0649      	lsls	r1, r1, #25
 80047c0:	bf48      	it	mi
 80047c2:	b2ad      	uxthmi	r5, r5
 80047c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80047c6:	4853      	ldr	r0, [pc, #332]	@ (8004914 <_printf_i+0x238>)
 80047c8:	6033      	str	r3, [r6, #0]
 80047ca:	bf14      	ite	ne
 80047cc:	230a      	movne	r3, #10
 80047ce:	2308      	moveq	r3, #8
 80047d0:	2100      	movs	r1, #0
 80047d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047d6:	6866      	ldr	r6, [r4, #4]
 80047d8:	60a6      	str	r6, [r4, #8]
 80047da:	2e00      	cmp	r6, #0
 80047dc:	bfa2      	ittt	ge
 80047de:	6821      	ldrge	r1, [r4, #0]
 80047e0:	f021 0104 	bicge.w	r1, r1, #4
 80047e4:	6021      	strge	r1, [r4, #0]
 80047e6:	b90d      	cbnz	r5, 80047ec <_printf_i+0x110>
 80047e8:	2e00      	cmp	r6, #0
 80047ea:	d04b      	beq.n	8004884 <_printf_i+0x1a8>
 80047ec:	4616      	mov	r6, r2
 80047ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80047f2:	fb03 5711 	mls	r7, r3, r1, r5
 80047f6:	5dc7      	ldrb	r7, [r0, r7]
 80047f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047fc:	462f      	mov	r7, r5
 80047fe:	42bb      	cmp	r3, r7
 8004800:	460d      	mov	r5, r1
 8004802:	d9f4      	bls.n	80047ee <_printf_i+0x112>
 8004804:	2b08      	cmp	r3, #8
 8004806:	d10b      	bne.n	8004820 <_printf_i+0x144>
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	07df      	lsls	r7, r3, #31
 800480c:	d508      	bpl.n	8004820 <_printf_i+0x144>
 800480e:	6923      	ldr	r3, [r4, #16]
 8004810:	6861      	ldr	r1, [r4, #4]
 8004812:	4299      	cmp	r1, r3
 8004814:	bfde      	ittt	le
 8004816:	2330      	movle	r3, #48	@ 0x30
 8004818:	f806 3c01 	strble.w	r3, [r6, #-1]
 800481c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004820:	1b92      	subs	r2, r2, r6
 8004822:	6122      	str	r2, [r4, #16]
 8004824:	f8cd a000 	str.w	sl, [sp]
 8004828:	464b      	mov	r3, r9
 800482a:	aa03      	add	r2, sp, #12
 800482c:	4621      	mov	r1, r4
 800482e:	4640      	mov	r0, r8
 8004830:	f7ff fee6 	bl	8004600 <_printf_common>
 8004834:	3001      	adds	r0, #1
 8004836:	d14a      	bne.n	80048ce <_printf_i+0x1f2>
 8004838:	f04f 30ff 	mov.w	r0, #4294967295
 800483c:	b004      	add	sp, #16
 800483e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	f043 0320 	orr.w	r3, r3, #32
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	4833      	ldr	r0, [pc, #204]	@ (8004918 <_printf_i+0x23c>)
 800484c:	2778      	movs	r7, #120	@ 0x78
 800484e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	6831      	ldr	r1, [r6, #0]
 8004856:	061f      	lsls	r7, r3, #24
 8004858:	f851 5b04 	ldr.w	r5, [r1], #4
 800485c:	d402      	bmi.n	8004864 <_printf_i+0x188>
 800485e:	065f      	lsls	r7, r3, #25
 8004860:	bf48      	it	mi
 8004862:	b2ad      	uxthmi	r5, r5
 8004864:	6031      	str	r1, [r6, #0]
 8004866:	07d9      	lsls	r1, r3, #31
 8004868:	bf44      	itt	mi
 800486a:	f043 0320 	orrmi.w	r3, r3, #32
 800486e:	6023      	strmi	r3, [r4, #0]
 8004870:	b11d      	cbz	r5, 800487a <_printf_i+0x19e>
 8004872:	2310      	movs	r3, #16
 8004874:	e7ac      	b.n	80047d0 <_printf_i+0xf4>
 8004876:	4827      	ldr	r0, [pc, #156]	@ (8004914 <_printf_i+0x238>)
 8004878:	e7e9      	b.n	800484e <_printf_i+0x172>
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	f023 0320 	bic.w	r3, r3, #32
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	e7f6      	b.n	8004872 <_printf_i+0x196>
 8004884:	4616      	mov	r6, r2
 8004886:	e7bd      	b.n	8004804 <_printf_i+0x128>
 8004888:	6833      	ldr	r3, [r6, #0]
 800488a:	6825      	ldr	r5, [r4, #0]
 800488c:	6961      	ldr	r1, [r4, #20]
 800488e:	1d18      	adds	r0, r3, #4
 8004890:	6030      	str	r0, [r6, #0]
 8004892:	062e      	lsls	r6, r5, #24
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	d501      	bpl.n	800489c <_printf_i+0x1c0>
 8004898:	6019      	str	r1, [r3, #0]
 800489a:	e002      	b.n	80048a2 <_printf_i+0x1c6>
 800489c:	0668      	lsls	r0, r5, #25
 800489e:	d5fb      	bpl.n	8004898 <_printf_i+0x1bc>
 80048a0:	8019      	strh	r1, [r3, #0]
 80048a2:	2300      	movs	r3, #0
 80048a4:	6123      	str	r3, [r4, #16]
 80048a6:	4616      	mov	r6, r2
 80048a8:	e7bc      	b.n	8004824 <_printf_i+0x148>
 80048aa:	6833      	ldr	r3, [r6, #0]
 80048ac:	1d1a      	adds	r2, r3, #4
 80048ae:	6032      	str	r2, [r6, #0]
 80048b0:	681e      	ldr	r6, [r3, #0]
 80048b2:	6862      	ldr	r2, [r4, #4]
 80048b4:	2100      	movs	r1, #0
 80048b6:	4630      	mov	r0, r6
 80048b8:	f7fb fc8a 	bl	80001d0 <memchr>
 80048bc:	b108      	cbz	r0, 80048c2 <_printf_i+0x1e6>
 80048be:	1b80      	subs	r0, r0, r6
 80048c0:	6060      	str	r0, [r4, #4]
 80048c2:	6863      	ldr	r3, [r4, #4]
 80048c4:	6123      	str	r3, [r4, #16]
 80048c6:	2300      	movs	r3, #0
 80048c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048cc:	e7aa      	b.n	8004824 <_printf_i+0x148>
 80048ce:	6923      	ldr	r3, [r4, #16]
 80048d0:	4632      	mov	r2, r6
 80048d2:	4649      	mov	r1, r9
 80048d4:	4640      	mov	r0, r8
 80048d6:	47d0      	blx	sl
 80048d8:	3001      	adds	r0, #1
 80048da:	d0ad      	beq.n	8004838 <_printf_i+0x15c>
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	079b      	lsls	r3, r3, #30
 80048e0:	d413      	bmi.n	800490a <_printf_i+0x22e>
 80048e2:	68e0      	ldr	r0, [r4, #12]
 80048e4:	9b03      	ldr	r3, [sp, #12]
 80048e6:	4298      	cmp	r0, r3
 80048e8:	bfb8      	it	lt
 80048ea:	4618      	movlt	r0, r3
 80048ec:	e7a6      	b.n	800483c <_printf_i+0x160>
 80048ee:	2301      	movs	r3, #1
 80048f0:	4632      	mov	r2, r6
 80048f2:	4649      	mov	r1, r9
 80048f4:	4640      	mov	r0, r8
 80048f6:	47d0      	blx	sl
 80048f8:	3001      	adds	r0, #1
 80048fa:	d09d      	beq.n	8004838 <_printf_i+0x15c>
 80048fc:	3501      	adds	r5, #1
 80048fe:	68e3      	ldr	r3, [r4, #12]
 8004900:	9903      	ldr	r1, [sp, #12]
 8004902:	1a5b      	subs	r3, r3, r1
 8004904:	42ab      	cmp	r3, r5
 8004906:	dcf2      	bgt.n	80048ee <_printf_i+0x212>
 8004908:	e7eb      	b.n	80048e2 <_printf_i+0x206>
 800490a:	2500      	movs	r5, #0
 800490c:	f104 0619 	add.w	r6, r4, #25
 8004910:	e7f5      	b.n	80048fe <_printf_i+0x222>
 8004912:	bf00      	nop
 8004914:	08009042 	.word	0x08009042
 8004918:	08009053 	.word	0x08009053

0800491c <_scanf_float>:
 800491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004920:	b087      	sub	sp, #28
 8004922:	4617      	mov	r7, r2
 8004924:	9303      	str	r3, [sp, #12]
 8004926:	688b      	ldr	r3, [r1, #8]
 8004928:	1e5a      	subs	r2, r3, #1
 800492a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800492e:	bf81      	itttt	hi
 8004930:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004934:	eb03 0b05 	addhi.w	fp, r3, r5
 8004938:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800493c:	608b      	strhi	r3, [r1, #8]
 800493e:	680b      	ldr	r3, [r1, #0]
 8004940:	460a      	mov	r2, r1
 8004942:	f04f 0500 	mov.w	r5, #0
 8004946:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800494a:	f842 3b1c 	str.w	r3, [r2], #28
 800494e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004952:	4680      	mov	r8, r0
 8004954:	460c      	mov	r4, r1
 8004956:	bf98      	it	ls
 8004958:	f04f 0b00 	movls.w	fp, #0
 800495c:	9201      	str	r2, [sp, #4]
 800495e:	4616      	mov	r6, r2
 8004960:	46aa      	mov	sl, r5
 8004962:	46a9      	mov	r9, r5
 8004964:	9502      	str	r5, [sp, #8]
 8004966:	68a2      	ldr	r2, [r4, #8]
 8004968:	b152      	cbz	r2, 8004980 <_scanf_float+0x64>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004970:	d864      	bhi.n	8004a3c <_scanf_float+0x120>
 8004972:	2b40      	cmp	r3, #64	@ 0x40
 8004974:	d83c      	bhi.n	80049f0 <_scanf_float+0xd4>
 8004976:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800497a:	b2c8      	uxtb	r0, r1
 800497c:	280e      	cmp	r0, #14
 800497e:	d93a      	bls.n	80049f6 <_scanf_float+0xda>
 8004980:	f1b9 0f00 	cmp.w	r9, #0
 8004984:	d003      	beq.n	800498e <_scanf_float+0x72>
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004992:	f1ba 0f01 	cmp.w	sl, #1
 8004996:	f200 8117 	bhi.w	8004bc8 <_scanf_float+0x2ac>
 800499a:	9b01      	ldr	r3, [sp, #4]
 800499c:	429e      	cmp	r6, r3
 800499e:	f200 8108 	bhi.w	8004bb2 <_scanf_float+0x296>
 80049a2:	2001      	movs	r0, #1
 80049a4:	b007      	add	sp, #28
 80049a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049aa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80049ae:	2a0d      	cmp	r2, #13
 80049b0:	d8e6      	bhi.n	8004980 <_scanf_float+0x64>
 80049b2:	a101      	add	r1, pc, #4	@ (adr r1, 80049b8 <_scanf_float+0x9c>)
 80049b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80049b8:	08004aff 	.word	0x08004aff
 80049bc:	08004981 	.word	0x08004981
 80049c0:	08004981 	.word	0x08004981
 80049c4:	08004981 	.word	0x08004981
 80049c8:	08004b5f 	.word	0x08004b5f
 80049cc:	08004b37 	.word	0x08004b37
 80049d0:	08004981 	.word	0x08004981
 80049d4:	08004981 	.word	0x08004981
 80049d8:	08004b0d 	.word	0x08004b0d
 80049dc:	08004981 	.word	0x08004981
 80049e0:	08004981 	.word	0x08004981
 80049e4:	08004981 	.word	0x08004981
 80049e8:	08004981 	.word	0x08004981
 80049ec:	08004ac5 	.word	0x08004ac5
 80049f0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80049f4:	e7db      	b.n	80049ae <_scanf_float+0x92>
 80049f6:	290e      	cmp	r1, #14
 80049f8:	d8c2      	bhi.n	8004980 <_scanf_float+0x64>
 80049fa:	a001      	add	r0, pc, #4	@ (adr r0, 8004a00 <_scanf_float+0xe4>)
 80049fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004a00:	08004ab5 	.word	0x08004ab5
 8004a04:	08004981 	.word	0x08004981
 8004a08:	08004ab5 	.word	0x08004ab5
 8004a0c:	08004b4b 	.word	0x08004b4b
 8004a10:	08004981 	.word	0x08004981
 8004a14:	08004a5d 	.word	0x08004a5d
 8004a18:	08004a9b 	.word	0x08004a9b
 8004a1c:	08004a9b 	.word	0x08004a9b
 8004a20:	08004a9b 	.word	0x08004a9b
 8004a24:	08004a9b 	.word	0x08004a9b
 8004a28:	08004a9b 	.word	0x08004a9b
 8004a2c:	08004a9b 	.word	0x08004a9b
 8004a30:	08004a9b 	.word	0x08004a9b
 8004a34:	08004a9b 	.word	0x08004a9b
 8004a38:	08004a9b 	.word	0x08004a9b
 8004a3c:	2b6e      	cmp	r3, #110	@ 0x6e
 8004a3e:	d809      	bhi.n	8004a54 <_scanf_float+0x138>
 8004a40:	2b60      	cmp	r3, #96	@ 0x60
 8004a42:	d8b2      	bhi.n	80049aa <_scanf_float+0x8e>
 8004a44:	2b54      	cmp	r3, #84	@ 0x54
 8004a46:	d07b      	beq.n	8004b40 <_scanf_float+0x224>
 8004a48:	2b59      	cmp	r3, #89	@ 0x59
 8004a4a:	d199      	bne.n	8004980 <_scanf_float+0x64>
 8004a4c:	2d07      	cmp	r5, #7
 8004a4e:	d197      	bne.n	8004980 <_scanf_float+0x64>
 8004a50:	2508      	movs	r5, #8
 8004a52:	e02c      	b.n	8004aae <_scanf_float+0x192>
 8004a54:	2b74      	cmp	r3, #116	@ 0x74
 8004a56:	d073      	beq.n	8004b40 <_scanf_float+0x224>
 8004a58:	2b79      	cmp	r3, #121	@ 0x79
 8004a5a:	e7f6      	b.n	8004a4a <_scanf_float+0x12e>
 8004a5c:	6821      	ldr	r1, [r4, #0]
 8004a5e:	05c8      	lsls	r0, r1, #23
 8004a60:	d51b      	bpl.n	8004a9a <_scanf_float+0x17e>
 8004a62:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004a66:	6021      	str	r1, [r4, #0]
 8004a68:	f109 0901 	add.w	r9, r9, #1
 8004a6c:	f1bb 0f00 	cmp.w	fp, #0
 8004a70:	d003      	beq.n	8004a7a <_scanf_float+0x15e>
 8004a72:	3201      	adds	r2, #1
 8004a74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004a78:	60a2      	str	r2, [r4, #8]
 8004a7a:	68a3      	ldr	r3, [r4, #8]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	60a3      	str	r3, [r4, #8]
 8004a80:	6923      	ldr	r3, [r4, #16]
 8004a82:	3301      	adds	r3, #1
 8004a84:	6123      	str	r3, [r4, #16]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	607b      	str	r3, [r7, #4]
 8004a8e:	f340 8087 	ble.w	8004ba0 <_scanf_float+0x284>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	3301      	adds	r3, #1
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	e765      	b.n	8004966 <_scanf_float+0x4a>
 8004a9a:	eb1a 0105 	adds.w	r1, sl, r5
 8004a9e:	f47f af6f 	bne.w	8004980 <_scanf_float+0x64>
 8004aa2:	6822      	ldr	r2, [r4, #0]
 8004aa4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004aa8:	6022      	str	r2, [r4, #0]
 8004aaa:	460d      	mov	r5, r1
 8004aac:	468a      	mov	sl, r1
 8004aae:	f806 3b01 	strb.w	r3, [r6], #1
 8004ab2:	e7e2      	b.n	8004a7a <_scanf_float+0x15e>
 8004ab4:	6822      	ldr	r2, [r4, #0]
 8004ab6:	0610      	lsls	r0, r2, #24
 8004ab8:	f57f af62 	bpl.w	8004980 <_scanf_float+0x64>
 8004abc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ac0:	6022      	str	r2, [r4, #0]
 8004ac2:	e7f4      	b.n	8004aae <_scanf_float+0x192>
 8004ac4:	f1ba 0f00 	cmp.w	sl, #0
 8004ac8:	d10e      	bne.n	8004ae8 <_scanf_float+0x1cc>
 8004aca:	f1b9 0f00 	cmp.w	r9, #0
 8004ace:	d10e      	bne.n	8004aee <_scanf_float+0x1d2>
 8004ad0:	6822      	ldr	r2, [r4, #0]
 8004ad2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004ad6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004ada:	d108      	bne.n	8004aee <_scanf_float+0x1d2>
 8004adc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004ae0:	6022      	str	r2, [r4, #0]
 8004ae2:	f04f 0a01 	mov.w	sl, #1
 8004ae6:	e7e2      	b.n	8004aae <_scanf_float+0x192>
 8004ae8:	f1ba 0f02 	cmp.w	sl, #2
 8004aec:	d055      	beq.n	8004b9a <_scanf_float+0x27e>
 8004aee:	2d01      	cmp	r5, #1
 8004af0:	d002      	beq.n	8004af8 <_scanf_float+0x1dc>
 8004af2:	2d04      	cmp	r5, #4
 8004af4:	f47f af44 	bne.w	8004980 <_scanf_float+0x64>
 8004af8:	3501      	adds	r5, #1
 8004afa:	b2ed      	uxtb	r5, r5
 8004afc:	e7d7      	b.n	8004aae <_scanf_float+0x192>
 8004afe:	f1ba 0f01 	cmp.w	sl, #1
 8004b02:	f47f af3d 	bne.w	8004980 <_scanf_float+0x64>
 8004b06:	f04f 0a02 	mov.w	sl, #2
 8004b0a:	e7d0      	b.n	8004aae <_scanf_float+0x192>
 8004b0c:	b97d      	cbnz	r5, 8004b2e <_scanf_float+0x212>
 8004b0e:	f1b9 0f00 	cmp.w	r9, #0
 8004b12:	f47f af38 	bne.w	8004986 <_scanf_float+0x6a>
 8004b16:	6822      	ldr	r2, [r4, #0]
 8004b18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004b1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004b20:	f040 8108 	bne.w	8004d34 <_scanf_float+0x418>
 8004b24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004b28:	6022      	str	r2, [r4, #0]
 8004b2a:	2501      	movs	r5, #1
 8004b2c:	e7bf      	b.n	8004aae <_scanf_float+0x192>
 8004b2e:	2d03      	cmp	r5, #3
 8004b30:	d0e2      	beq.n	8004af8 <_scanf_float+0x1dc>
 8004b32:	2d05      	cmp	r5, #5
 8004b34:	e7de      	b.n	8004af4 <_scanf_float+0x1d8>
 8004b36:	2d02      	cmp	r5, #2
 8004b38:	f47f af22 	bne.w	8004980 <_scanf_float+0x64>
 8004b3c:	2503      	movs	r5, #3
 8004b3e:	e7b6      	b.n	8004aae <_scanf_float+0x192>
 8004b40:	2d06      	cmp	r5, #6
 8004b42:	f47f af1d 	bne.w	8004980 <_scanf_float+0x64>
 8004b46:	2507      	movs	r5, #7
 8004b48:	e7b1      	b.n	8004aae <_scanf_float+0x192>
 8004b4a:	6822      	ldr	r2, [r4, #0]
 8004b4c:	0591      	lsls	r1, r2, #22
 8004b4e:	f57f af17 	bpl.w	8004980 <_scanf_float+0x64>
 8004b52:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004b56:	6022      	str	r2, [r4, #0]
 8004b58:	f8cd 9008 	str.w	r9, [sp, #8]
 8004b5c:	e7a7      	b.n	8004aae <_scanf_float+0x192>
 8004b5e:	6822      	ldr	r2, [r4, #0]
 8004b60:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004b64:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004b68:	d006      	beq.n	8004b78 <_scanf_float+0x25c>
 8004b6a:	0550      	lsls	r0, r2, #21
 8004b6c:	f57f af08 	bpl.w	8004980 <_scanf_float+0x64>
 8004b70:	f1b9 0f00 	cmp.w	r9, #0
 8004b74:	f000 80de 	beq.w	8004d34 <_scanf_float+0x418>
 8004b78:	0591      	lsls	r1, r2, #22
 8004b7a:	bf58      	it	pl
 8004b7c:	9902      	ldrpl	r1, [sp, #8]
 8004b7e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004b82:	bf58      	it	pl
 8004b84:	eba9 0101 	subpl.w	r1, r9, r1
 8004b88:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004b8c:	bf58      	it	pl
 8004b8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004b92:	6022      	str	r2, [r4, #0]
 8004b94:	f04f 0900 	mov.w	r9, #0
 8004b98:	e789      	b.n	8004aae <_scanf_float+0x192>
 8004b9a:	f04f 0a03 	mov.w	sl, #3
 8004b9e:	e786      	b.n	8004aae <_scanf_float+0x192>
 8004ba0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004ba4:	4639      	mov	r1, r7
 8004ba6:	4640      	mov	r0, r8
 8004ba8:	4798      	blx	r3
 8004baa:	2800      	cmp	r0, #0
 8004bac:	f43f aedb 	beq.w	8004966 <_scanf_float+0x4a>
 8004bb0:	e6e6      	b.n	8004980 <_scanf_float+0x64>
 8004bb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004bb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004bba:	463a      	mov	r2, r7
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	4798      	blx	r3
 8004bc0:	6923      	ldr	r3, [r4, #16]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	6123      	str	r3, [r4, #16]
 8004bc6:	e6e8      	b.n	800499a <_scanf_float+0x7e>
 8004bc8:	1e6b      	subs	r3, r5, #1
 8004bca:	2b06      	cmp	r3, #6
 8004bcc:	d824      	bhi.n	8004c18 <_scanf_float+0x2fc>
 8004bce:	2d02      	cmp	r5, #2
 8004bd0:	d836      	bhi.n	8004c40 <_scanf_float+0x324>
 8004bd2:	9b01      	ldr	r3, [sp, #4]
 8004bd4:	429e      	cmp	r6, r3
 8004bd6:	f67f aee4 	bls.w	80049a2 <_scanf_float+0x86>
 8004bda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004bde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004be2:	463a      	mov	r2, r7
 8004be4:	4640      	mov	r0, r8
 8004be6:	4798      	blx	r3
 8004be8:	6923      	ldr	r3, [r4, #16]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	6123      	str	r3, [r4, #16]
 8004bee:	e7f0      	b.n	8004bd2 <_scanf_float+0x2b6>
 8004bf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004bf4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004bf8:	463a      	mov	r2, r7
 8004bfa:	4640      	mov	r0, r8
 8004bfc:	4798      	blx	r3
 8004bfe:	6923      	ldr	r3, [r4, #16]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	6123      	str	r3, [r4, #16]
 8004c04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c08:	fa5f fa8a 	uxtb.w	sl, sl
 8004c0c:	f1ba 0f02 	cmp.w	sl, #2
 8004c10:	d1ee      	bne.n	8004bf0 <_scanf_float+0x2d4>
 8004c12:	3d03      	subs	r5, #3
 8004c14:	b2ed      	uxtb	r5, r5
 8004c16:	1b76      	subs	r6, r6, r5
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	05da      	lsls	r2, r3, #23
 8004c1c:	d530      	bpl.n	8004c80 <_scanf_float+0x364>
 8004c1e:	055b      	lsls	r3, r3, #21
 8004c20:	d511      	bpl.n	8004c46 <_scanf_float+0x32a>
 8004c22:	9b01      	ldr	r3, [sp, #4]
 8004c24:	429e      	cmp	r6, r3
 8004c26:	f67f aebc 	bls.w	80049a2 <_scanf_float+0x86>
 8004c2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c32:	463a      	mov	r2, r7
 8004c34:	4640      	mov	r0, r8
 8004c36:	4798      	blx	r3
 8004c38:	6923      	ldr	r3, [r4, #16]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	6123      	str	r3, [r4, #16]
 8004c3e:	e7f0      	b.n	8004c22 <_scanf_float+0x306>
 8004c40:	46aa      	mov	sl, r5
 8004c42:	46b3      	mov	fp, r6
 8004c44:	e7de      	b.n	8004c04 <_scanf_float+0x2e8>
 8004c46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004c4a:	6923      	ldr	r3, [r4, #16]
 8004c4c:	2965      	cmp	r1, #101	@ 0x65
 8004c4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c52:	f106 35ff 	add.w	r5, r6, #4294967295
 8004c56:	6123      	str	r3, [r4, #16]
 8004c58:	d00c      	beq.n	8004c74 <_scanf_float+0x358>
 8004c5a:	2945      	cmp	r1, #69	@ 0x45
 8004c5c:	d00a      	beq.n	8004c74 <_scanf_float+0x358>
 8004c5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c62:	463a      	mov	r2, r7
 8004c64:	4640      	mov	r0, r8
 8004c66:	4798      	blx	r3
 8004c68:	6923      	ldr	r3, [r4, #16]
 8004c6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	1eb5      	subs	r5, r6, #2
 8004c72:	6123      	str	r3, [r4, #16]
 8004c74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c78:	463a      	mov	r2, r7
 8004c7a:	4640      	mov	r0, r8
 8004c7c:	4798      	blx	r3
 8004c7e:	462e      	mov	r6, r5
 8004c80:	6822      	ldr	r2, [r4, #0]
 8004c82:	f012 0210 	ands.w	r2, r2, #16
 8004c86:	d001      	beq.n	8004c8c <_scanf_float+0x370>
 8004c88:	2000      	movs	r0, #0
 8004c8a:	e68b      	b.n	80049a4 <_scanf_float+0x88>
 8004c8c:	7032      	strb	r2, [r6, #0]
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c98:	d11c      	bne.n	8004cd4 <_scanf_float+0x3b8>
 8004c9a:	9b02      	ldr	r3, [sp, #8]
 8004c9c:	454b      	cmp	r3, r9
 8004c9e:	eba3 0209 	sub.w	r2, r3, r9
 8004ca2:	d123      	bne.n	8004cec <_scanf_float+0x3d0>
 8004ca4:	9901      	ldr	r1, [sp, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	4640      	mov	r0, r8
 8004caa:	f002 fcfd 	bl	80076a8 <_strtod_r>
 8004cae:	9b03      	ldr	r3, [sp, #12]
 8004cb0:	6821      	ldr	r1, [r4, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f011 0f02 	tst.w	r1, #2
 8004cb8:	ec57 6b10 	vmov	r6, r7, d0
 8004cbc:	f103 0204 	add.w	r2, r3, #4
 8004cc0:	d01f      	beq.n	8004d02 <_scanf_float+0x3e6>
 8004cc2:	9903      	ldr	r1, [sp, #12]
 8004cc4:	600a      	str	r2, [r1, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	e9c3 6700 	strd	r6, r7, [r3]
 8004ccc:	68e3      	ldr	r3, [r4, #12]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	60e3      	str	r3, [r4, #12]
 8004cd2:	e7d9      	b.n	8004c88 <_scanf_float+0x36c>
 8004cd4:	9b04      	ldr	r3, [sp, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0e4      	beq.n	8004ca4 <_scanf_float+0x388>
 8004cda:	9905      	ldr	r1, [sp, #20]
 8004cdc:	230a      	movs	r3, #10
 8004cde:	3101      	adds	r1, #1
 8004ce0:	4640      	mov	r0, r8
 8004ce2:	f002 fd61 	bl	80077a8 <_strtol_r>
 8004ce6:	9b04      	ldr	r3, [sp, #16]
 8004ce8:	9e05      	ldr	r6, [sp, #20]
 8004cea:	1ac2      	subs	r2, r0, r3
 8004cec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004cf0:	429e      	cmp	r6, r3
 8004cf2:	bf28      	it	cs
 8004cf4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004cf8:	4910      	ldr	r1, [pc, #64]	@ (8004d3c <_scanf_float+0x420>)
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f000 f954 	bl	8004fa8 <siprintf>
 8004d00:	e7d0      	b.n	8004ca4 <_scanf_float+0x388>
 8004d02:	f011 0f04 	tst.w	r1, #4
 8004d06:	9903      	ldr	r1, [sp, #12]
 8004d08:	600a      	str	r2, [r1, #0]
 8004d0a:	d1dc      	bne.n	8004cc6 <_scanf_float+0x3aa>
 8004d0c:	681d      	ldr	r5, [r3, #0]
 8004d0e:	4632      	mov	r2, r6
 8004d10:	463b      	mov	r3, r7
 8004d12:	4630      	mov	r0, r6
 8004d14:	4639      	mov	r1, r7
 8004d16:	f7fb ff09 	bl	8000b2c <__aeabi_dcmpun>
 8004d1a:	b128      	cbz	r0, 8004d28 <_scanf_float+0x40c>
 8004d1c:	4808      	ldr	r0, [pc, #32]	@ (8004d40 <_scanf_float+0x424>)
 8004d1e:	f000 fabb 	bl	8005298 <nanf>
 8004d22:	ed85 0a00 	vstr	s0, [r5]
 8004d26:	e7d1      	b.n	8004ccc <_scanf_float+0x3b0>
 8004d28:	4630      	mov	r0, r6
 8004d2a:	4639      	mov	r1, r7
 8004d2c:	f7fb ff5c 	bl	8000be8 <__aeabi_d2f>
 8004d30:	6028      	str	r0, [r5, #0]
 8004d32:	e7cb      	b.n	8004ccc <_scanf_float+0x3b0>
 8004d34:	f04f 0900 	mov.w	r9, #0
 8004d38:	e629      	b.n	800498e <_scanf_float+0x72>
 8004d3a:	bf00      	nop
 8004d3c:	08009064 	.word	0x08009064
 8004d40:	080093fd 	.word	0x080093fd

08004d44 <std>:
 8004d44:	2300      	movs	r3, #0
 8004d46:	b510      	push	{r4, lr}
 8004d48:	4604      	mov	r4, r0
 8004d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8004d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d52:	6083      	str	r3, [r0, #8]
 8004d54:	8181      	strh	r1, [r0, #12]
 8004d56:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d58:	81c2      	strh	r2, [r0, #14]
 8004d5a:	6183      	str	r3, [r0, #24]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	2208      	movs	r2, #8
 8004d60:	305c      	adds	r0, #92	@ 0x5c
 8004d62:	f000 fa19 	bl	8005198 <memset>
 8004d66:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <std+0x58>)
 8004d68:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004da0 <std+0x5c>)
 8004d6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004da4 <std+0x60>)
 8004d70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d72:	4b0d      	ldr	r3, [pc, #52]	@ (8004da8 <std+0x64>)
 8004d74:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d76:	4b0d      	ldr	r3, [pc, #52]	@ (8004dac <std+0x68>)
 8004d78:	6224      	str	r4, [r4, #32]
 8004d7a:	429c      	cmp	r4, r3
 8004d7c:	d006      	beq.n	8004d8c <std+0x48>
 8004d7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d82:	4294      	cmp	r4, r2
 8004d84:	d002      	beq.n	8004d8c <std+0x48>
 8004d86:	33d0      	adds	r3, #208	@ 0xd0
 8004d88:	429c      	cmp	r4, r3
 8004d8a:	d105      	bne.n	8004d98 <std+0x54>
 8004d8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d94:	f000 ba7c 	b.w	8005290 <__retarget_lock_init_recursive>
 8004d98:	bd10      	pop	{r4, pc}
 8004d9a:	bf00      	nop
 8004d9c:	08004fe9 	.word	0x08004fe9
 8004da0:	0800500b 	.word	0x0800500b
 8004da4:	08005043 	.word	0x08005043
 8004da8:	08005067 	.word	0x08005067
 8004dac:	20000274 	.word	0x20000274

08004db0 <stdio_exit_handler>:
 8004db0:	4a02      	ldr	r2, [pc, #8]	@ (8004dbc <stdio_exit_handler+0xc>)
 8004db2:	4903      	ldr	r1, [pc, #12]	@ (8004dc0 <stdio_exit_handler+0x10>)
 8004db4:	4803      	ldr	r0, [pc, #12]	@ (8004dc4 <stdio_exit_handler+0x14>)
 8004db6:	f000 b869 	b.w	8004e8c <_fwalk_sglue>
 8004dba:	bf00      	nop
 8004dbc:	2000000c 	.word	0x2000000c
 8004dc0:	08007de9 	.word	0x08007de9
 8004dc4:	2000001c 	.word	0x2000001c

08004dc8 <cleanup_stdio>:
 8004dc8:	6841      	ldr	r1, [r0, #4]
 8004dca:	4b0c      	ldr	r3, [pc, #48]	@ (8004dfc <cleanup_stdio+0x34>)
 8004dcc:	4299      	cmp	r1, r3
 8004dce:	b510      	push	{r4, lr}
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	d001      	beq.n	8004dd8 <cleanup_stdio+0x10>
 8004dd4:	f003 f808 	bl	8007de8 <_fflush_r>
 8004dd8:	68a1      	ldr	r1, [r4, #8]
 8004dda:	4b09      	ldr	r3, [pc, #36]	@ (8004e00 <cleanup_stdio+0x38>)
 8004ddc:	4299      	cmp	r1, r3
 8004dde:	d002      	beq.n	8004de6 <cleanup_stdio+0x1e>
 8004de0:	4620      	mov	r0, r4
 8004de2:	f003 f801 	bl	8007de8 <_fflush_r>
 8004de6:	68e1      	ldr	r1, [r4, #12]
 8004de8:	4b06      	ldr	r3, [pc, #24]	@ (8004e04 <cleanup_stdio+0x3c>)
 8004dea:	4299      	cmp	r1, r3
 8004dec:	d004      	beq.n	8004df8 <cleanup_stdio+0x30>
 8004dee:	4620      	mov	r0, r4
 8004df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df4:	f002 bff8 	b.w	8007de8 <_fflush_r>
 8004df8:	bd10      	pop	{r4, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000274 	.word	0x20000274
 8004e00:	200002dc 	.word	0x200002dc
 8004e04:	20000344 	.word	0x20000344

08004e08 <global_stdio_init.part.0>:
 8004e08:	b510      	push	{r4, lr}
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e38 <global_stdio_init.part.0+0x30>)
 8004e0c:	4c0b      	ldr	r4, [pc, #44]	@ (8004e3c <global_stdio_init.part.0+0x34>)
 8004e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e40 <global_stdio_init.part.0+0x38>)
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	4620      	mov	r0, r4
 8004e14:	2200      	movs	r2, #0
 8004e16:	2104      	movs	r1, #4
 8004e18:	f7ff ff94 	bl	8004d44 <std>
 8004e1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e20:	2201      	movs	r2, #1
 8004e22:	2109      	movs	r1, #9
 8004e24:	f7ff ff8e 	bl	8004d44 <std>
 8004e28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e32:	2112      	movs	r1, #18
 8004e34:	f7ff bf86 	b.w	8004d44 <std>
 8004e38:	200003ac 	.word	0x200003ac
 8004e3c:	20000274 	.word	0x20000274
 8004e40:	08004db1 	.word	0x08004db1

08004e44 <__sfp_lock_acquire>:
 8004e44:	4801      	ldr	r0, [pc, #4]	@ (8004e4c <__sfp_lock_acquire+0x8>)
 8004e46:	f000 ba24 	b.w	8005292 <__retarget_lock_acquire_recursive>
 8004e4a:	bf00      	nop
 8004e4c:	200003b5 	.word	0x200003b5

08004e50 <__sfp_lock_release>:
 8004e50:	4801      	ldr	r0, [pc, #4]	@ (8004e58 <__sfp_lock_release+0x8>)
 8004e52:	f000 ba1f 	b.w	8005294 <__retarget_lock_release_recursive>
 8004e56:	bf00      	nop
 8004e58:	200003b5 	.word	0x200003b5

08004e5c <__sinit>:
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	4604      	mov	r4, r0
 8004e60:	f7ff fff0 	bl	8004e44 <__sfp_lock_acquire>
 8004e64:	6a23      	ldr	r3, [r4, #32]
 8004e66:	b11b      	cbz	r3, 8004e70 <__sinit+0x14>
 8004e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e6c:	f7ff bff0 	b.w	8004e50 <__sfp_lock_release>
 8004e70:	4b04      	ldr	r3, [pc, #16]	@ (8004e84 <__sinit+0x28>)
 8004e72:	6223      	str	r3, [r4, #32]
 8004e74:	4b04      	ldr	r3, [pc, #16]	@ (8004e88 <__sinit+0x2c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1f5      	bne.n	8004e68 <__sinit+0xc>
 8004e7c:	f7ff ffc4 	bl	8004e08 <global_stdio_init.part.0>
 8004e80:	e7f2      	b.n	8004e68 <__sinit+0xc>
 8004e82:	bf00      	nop
 8004e84:	08004dc9 	.word	0x08004dc9
 8004e88:	200003ac 	.word	0x200003ac

08004e8c <_fwalk_sglue>:
 8004e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e90:	4607      	mov	r7, r0
 8004e92:	4688      	mov	r8, r1
 8004e94:	4614      	mov	r4, r2
 8004e96:	2600      	movs	r6, #0
 8004e98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e9c:	f1b9 0901 	subs.w	r9, r9, #1
 8004ea0:	d505      	bpl.n	8004eae <_fwalk_sglue+0x22>
 8004ea2:	6824      	ldr	r4, [r4, #0]
 8004ea4:	2c00      	cmp	r4, #0
 8004ea6:	d1f7      	bne.n	8004e98 <_fwalk_sglue+0xc>
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eae:	89ab      	ldrh	r3, [r5, #12]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d907      	bls.n	8004ec4 <_fwalk_sglue+0x38>
 8004eb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	d003      	beq.n	8004ec4 <_fwalk_sglue+0x38>
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	47c0      	blx	r8
 8004ec2:	4306      	orrs	r6, r0
 8004ec4:	3568      	adds	r5, #104	@ 0x68
 8004ec6:	e7e9      	b.n	8004e9c <_fwalk_sglue+0x10>

08004ec8 <iprintf>:
 8004ec8:	b40f      	push	{r0, r1, r2, r3}
 8004eca:	b507      	push	{r0, r1, r2, lr}
 8004ecc:	4906      	ldr	r1, [pc, #24]	@ (8004ee8 <iprintf+0x20>)
 8004ece:	ab04      	add	r3, sp, #16
 8004ed0:	6808      	ldr	r0, [r1, #0]
 8004ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ed6:	6881      	ldr	r1, [r0, #8]
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	f002 fde9 	bl	8007ab0 <_vfiprintf_r>
 8004ede:	b003      	add	sp, #12
 8004ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ee4:	b004      	add	sp, #16
 8004ee6:	4770      	bx	lr
 8004ee8:	20000018 	.word	0x20000018

08004eec <_puts_r>:
 8004eec:	6a03      	ldr	r3, [r0, #32]
 8004eee:	b570      	push	{r4, r5, r6, lr}
 8004ef0:	6884      	ldr	r4, [r0, #8]
 8004ef2:	4605      	mov	r5, r0
 8004ef4:	460e      	mov	r6, r1
 8004ef6:	b90b      	cbnz	r3, 8004efc <_puts_r+0x10>
 8004ef8:	f7ff ffb0 	bl	8004e5c <__sinit>
 8004efc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004efe:	07db      	lsls	r3, r3, #31
 8004f00:	d405      	bmi.n	8004f0e <_puts_r+0x22>
 8004f02:	89a3      	ldrh	r3, [r4, #12]
 8004f04:	0598      	lsls	r0, r3, #22
 8004f06:	d402      	bmi.n	8004f0e <_puts_r+0x22>
 8004f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f0a:	f000 f9c2 	bl	8005292 <__retarget_lock_acquire_recursive>
 8004f0e:	89a3      	ldrh	r3, [r4, #12]
 8004f10:	0719      	lsls	r1, r3, #28
 8004f12:	d502      	bpl.n	8004f1a <_puts_r+0x2e>
 8004f14:	6923      	ldr	r3, [r4, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d135      	bne.n	8004f86 <_puts_r+0x9a>
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	f000 f8e5 	bl	80050ec <__swsetup_r>
 8004f22:	b380      	cbz	r0, 8004f86 <_puts_r+0x9a>
 8004f24:	f04f 35ff 	mov.w	r5, #4294967295
 8004f28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f2a:	07da      	lsls	r2, r3, #31
 8004f2c:	d405      	bmi.n	8004f3a <_puts_r+0x4e>
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	059b      	lsls	r3, r3, #22
 8004f32:	d402      	bmi.n	8004f3a <_puts_r+0x4e>
 8004f34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f36:	f000 f9ad 	bl	8005294 <__retarget_lock_release_recursive>
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	bd70      	pop	{r4, r5, r6, pc}
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	da04      	bge.n	8004f4c <_puts_r+0x60>
 8004f42:	69a2      	ldr	r2, [r4, #24]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	dc17      	bgt.n	8004f78 <_puts_r+0x8c>
 8004f48:	290a      	cmp	r1, #10
 8004f4a:	d015      	beq.n	8004f78 <_puts_r+0x8c>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	6022      	str	r2, [r4, #0]
 8004f52:	7019      	strb	r1, [r3, #0]
 8004f54:	68a3      	ldr	r3, [r4, #8]
 8004f56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	60a3      	str	r3, [r4, #8]
 8004f5e:	2900      	cmp	r1, #0
 8004f60:	d1ed      	bne.n	8004f3e <_puts_r+0x52>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	da11      	bge.n	8004f8a <_puts_r+0x9e>
 8004f66:	4622      	mov	r2, r4
 8004f68:	210a      	movs	r1, #10
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 f87f 	bl	800506e <__swbuf_r>
 8004f70:	3001      	adds	r0, #1
 8004f72:	d0d7      	beq.n	8004f24 <_puts_r+0x38>
 8004f74:	250a      	movs	r5, #10
 8004f76:	e7d7      	b.n	8004f28 <_puts_r+0x3c>
 8004f78:	4622      	mov	r2, r4
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f000 f877 	bl	800506e <__swbuf_r>
 8004f80:	3001      	adds	r0, #1
 8004f82:	d1e7      	bne.n	8004f54 <_puts_r+0x68>
 8004f84:	e7ce      	b.n	8004f24 <_puts_r+0x38>
 8004f86:	3e01      	subs	r6, #1
 8004f88:	e7e4      	b.n	8004f54 <_puts_r+0x68>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	6022      	str	r2, [r4, #0]
 8004f90:	220a      	movs	r2, #10
 8004f92:	701a      	strb	r2, [r3, #0]
 8004f94:	e7ee      	b.n	8004f74 <_puts_r+0x88>
	...

08004f98 <puts>:
 8004f98:	4b02      	ldr	r3, [pc, #8]	@ (8004fa4 <puts+0xc>)
 8004f9a:	4601      	mov	r1, r0
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	f7ff bfa5 	b.w	8004eec <_puts_r>
 8004fa2:	bf00      	nop
 8004fa4:	20000018 	.word	0x20000018

08004fa8 <siprintf>:
 8004fa8:	b40e      	push	{r1, r2, r3}
 8004faa:	b500      	push	{lr}
 8004fac:	b09c      	sub	sp, #112	@ 0x70
 8004fae:	ab1d      	add	r3, sp, #116	@ 0x74
 8004fb0:	9002      	str	r0, [sp, #8]
 8004fb2:	9006      	str	r0, [sp, #24]
 8004fb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004fb8:	4809      	ldr	r0, [pc, #36]	@ (8004fe0 <siprintf+0x38>)
 8004fba:	9107      	str	r1, [sp, #28]
 8004fbc:	9104      	str	r1, [sp, #16]
 8004fbe:	4909      	ldr	r1, [pc, #36]	@ (8004fe4 <siprintf+0x3c>)
 8004fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fc4:	9105      	str	r1, [sp, #20]
 8004fc6:	6800      	ldr	r0, [r0, #0]
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	a902      	add	r1, sp, #8
 8004fcc:	f002 fc4a 	bl	8007864 <_svfiprintf_r>
 8004fd0:	9b02      	ldr	r3, [sp, #8]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	b01c      	add	sp, #112	@ 0x70
 8004fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fdc:	b003      	add	sp, #12
 8004fde:	4770      	bx	lr
 8004fe0:	20000018 	.word	0x20000018
 8004fe4:	ffff0208 	.word	0xffff0208

08004fe8 <__sread>:
 8004fe8:	b510      	push	{r4, lr}
 8004fea:	460c      	mov	r4, r1
 8004fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff0:	f000 f900 	bl	80051f4 <_read_r>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	bfab      	itete	ge
 8004ff8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8004ffc:	181b      	addge	r3, r3, r0
 8004ffe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005002:	bfac      	ite	ge
 8005004:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005006:	81a3      	strhlt	r3, [r4, #12]
 8005008:	bd10      	pop	{r4, pc}

0800500a <__swrite>:
 800500a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800500e:	461f      	mov	r7, r3
 8005010:	898b      	ldrh	r3, [r1, #12]
 8005012:	05db      	lsls	r3, r3, #23
 8005014:	4605      	mov	r5, r0
 8005016:	460c      	mov	r4, r1
 8005018:	4616      	mov	r6, r2
 800501a:	d505      	bpl.n	8005028 <__swrite+0x1e>
 800501c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005020:	2302      	movs	r3, #2
 8005022:	2200      	movs	r2, #0
 8005024:	f000 f8d4 	bl	80051d0 <_lseek_r>
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800502e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005032:	81a3      	strh	r3, [r4, #12]
 8005034:	4632      	mov	r2, r6
 8005036:	463b      	mov	r3, r7
 8005038:	4628      	mov	r0, r5
 800503a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800503e:	f000 b8eb 	b.w	8005218 <_write_r>

08005042 <__sseek>:
 8005042:	b510      	push	{r4, lr}
 8005044:	460c      	mov	r4, r1
 8005046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800504a:	f000 f8c1 	bl	80051d0 <_lseek_r>
 800504e:	1c43      	adds	r3, r0, #1
 8005050:	89a3      	ldrh	r3, [r4, #12]
 8005052:	bf15      	itete	ne
 8005054:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005056:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800505a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800505e:	81a3      	strheq	r3, [r4, #12]
 8005060:	bf18      	it	ne
 8005062:	81a3      	strhne	r3, [r4, #12]
 8005064:	bd10      	pop	{r4, pc}

08005066 <__sclose>:
 8005066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800506a:	f000 b8a1 	b.w	80051b0 <_close_r>

0800506e <__swbuf_r>:
 800506e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005070:	460e      	mov	r6, r1
 8005072:	4614      	mov	r4, r2
 8005074:	4605      	mov	r5, r0
 8005076:	b118      	cbz	r0, 8005080 <__swbuf_r+0x12>
 8005078:	6a03      	ldr	r3, [r0, #32]
 800507a:	b90b      	cbnz	r3, 8005080 <__swbuf_r+0x12>
 800507c:	f7ff feee 	bl	8004e5c <__sinit>
 8005080:	69a3      	ldr	r3, [r4, #24]
 8005082:	60a3      	str	r3, [r4, #8]
 8005084:	89a3      	ldrh	r3, [r4, #12]
 8005086:	071a      	lsls	r2, r3, #28
 8005088:	d501      	bpl.n	800508e <__swbuf_r+0x20>
 800508a:	6923      	ldr	r3, [r4, #16]
 800508c:	b943      	cbnz	r3, 80050a0 <__swbuf_r+0x32>
 800508e:	4621      	mov	r1, r4
 8005090:	4628      	mov	r0, r5
 8005092:	f000 f82b 	bl	80050ec <__swsetup_r>
 8005096:	b118      	cbz	r0, 80050a0 <__swbuf_r+0x32>
 8005098:	f04f 37ff 	mov.w	r7, #4294967295
 800509c:	4638      	mov	r0, r7
 800509e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	6922      	ldr	r2, [r4, #16]
 80050a4:	1a98      	subs	r0, r3, r2
 80050a6:	6963      	ldr	r3, [r4, #20]
 80050a8:	b2f6      	uxtb	r6, r6
 80050aa:	4283      	cmp	r3, r0
 80050ac:	4637      	mov	r7, r6
 80050ae:	dc05      	bgt.n	80050bc <__swbuf_r+0x4e>
 80050b0:	4621      	mov	r1, r4
 80050b2:	4628      	mov	r0, r5
 80050b4:	f002 fe98 	bl	8007de8 <_fflush_r>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d1ed      	bne.n	8005098 <__swbuf_r+0x2a>
 80050bc:	68a3      	ldr	r3, [r4, #8]
 80050be:	3b01      	subs	r3, #1
 80050c0:	60a3      	str	r3, [r4, #8]
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	6022      	str	r2, [r4, #0]
 80050c8:	701e      	strb	r6, [r3, #0]
 80050ca:	6962      	ldr	r2, [r4, #20]
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d004      	beq.n	80050dc <__swbuf_r+0x6e>
 80050d2:	89a3      	ldrh	r3, [r4, #12]
 80050d4:	07db      	lsls	r3, r3, #31
 80050d6:	d5e1      	bpl.n	800509c <__swbuf_r+0x2e>
 80050d8:	2e0a      	cmp	r6, #10
 80050da:	d1df      	bne.n	800509c <__swbuf_r+0x2e>
 80050dc:	4621      	mov	r1, r4
 80050de:	4628      	mov	r0, r5
 80050e0:	f002 fe82 	bl	8007de8 <_fflush_r>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	d0d9      	beq.n	800509c <__swbuf_r+0x2e>
 80050e8:	e7d6      	b.n	8005098 <__swbuf_r+0x2a>
	...

080050ec <__swsetup_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4b29      	ldr	r3, [pc, #164]	@ (8005194 <__swsetup_r+0xa8>)
 80050f0:	4605      	mov	r5, r0
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	460c      	mov	r4, r1
 80050f6:	b118      	cbz	r0, 8005100 <__swsetup_r+0x14>
 80050f8:	6a03      	ldr	r3, [r0, #32]
 80050fa:	b90b      	cbnz	r3, 8005100 <__swsetup_r+0x14>
 80050fc:	f7ff feae 	bl	8004e5c <__sinit>
 8005100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005104:	0719      	lsls	r1, r3, #28
 8005106:	d422      	bmi.n	800514e <__swsetup_r+0x62>
 8005108:	06da      	lsls	r2, r3, #27
 800510a:	d407      	bmi.n	800511c <__swsetup_r+0x30>
 800510c:	2209      	movs	r2, #9
 800510e:	602a      	str	r2, [r5, #0]
 8005110:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005114:	81a3      	strh	r3, [r4, #12]
 8005116:	f04f 30ff 	mov.w	r0, #4294967295
 800511a:	e033      	b.n	8005184 <__swsetup_r+0x98>
 800511c:	0758      	lsls	r0, r3, #29
 800511e:	d512      	bpl.n	8005146 <__swsetup_r+0x5a>
 8005120:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005122:	b141      	cbz	r1, 8005136 <__swsetup_r+0x4a>
 8005124:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005128:	4299      	cmp	r1, r3
 800512a:	d002      	beq.n	8005132 <__swsetup_r+0x46>
 800512c:	4628      	mov	r0, r5
 800512e:	f000 ff07 	bl	8005f40 <_free_r>
 8005132:	2300      	movs	r3, #0
 8005134:	6363      	str	r3, [r4, #52]	@ 0x34
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800513c:	81a3      	strh	r3, [r4, #12]
 800513e:	2300      	movs	r3, #0
 8005140:	6063      	str	r3, [r4, #4]
 8005142:	6923      	ldr	r3, [r4, #16]
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	89a3      	ldrh	r3, [r4, #12]
 8005148:	f043 0308 	orr.w	r3, r3, #8
 800514c:	81a3      	strh	r3, [r4, #12]
 800514e:	6923      	ldr	r3, [r4, #16]
 8005150:	b94b      	cbnz	r3, 8005166 <__swsetup_r+0x7a>
 8005152:	89a3      	ldrh	r3, [r4, #12]
 8005154:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800515c:	d003      	beq.n	8005166 <__swsetup_r+0x7a>
 800515e:	4621      	mov	r1, r4
 8005160:	4628      	mov	r0, r5
 8005162:	f002 fe8f 	bl	8007e84 <__smakebuf_r>
 8005166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800516a:	f013 0201 	ands.w	r2, r3, #1
 800516e:	d00a      	beq.n	8005186 <__swsetup_r+0x9a>
 8005170:	2200      	movs	r2, #0
 8005172:	60a2      	str	r2, [r4, #8]
 8005174:	6962      	ldr	r2, [r4, #20]
 8005176:	4252      	negs	r2, r2
 8005178:	61a2      	str	r2, [r4, #24]
 800517a:	6922      	ldr	r2, [r4, #16]
 800517c:	b942      	cbnz	r2, 8005190 <__swsetup_r+0xa4>
 800517e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005182:	d1c5      	bne.n	8005110 <__swsetup_r+0x24>
 8005184:	bd38      	pop	{r3, r4, r5, pc}
 8005186:	0799      	lsls	r1, r3, #30
 8005188:	bf58      	it	pl
 800518a:	6962      	ldrpl	r2, [r4, #20]
 800518c:	60a2      	str	r2, [r4, #8]
 800518e:	e7f4      	b.n	800517a <__swsetup_r+0x8e>
 8005190:	2000      	movs	r0, #0
 8005192:	e7f7      	b.n	8005184 <__swsetup_r+0x98>
 8005194:	20000018 	.word	0x20000018

08005198 <memset>:
 8005198:	4402      	add	r2, r0
 800519a:	4603      	mov	r3, r0
 800519c:	4293      	cmp	r3, r2
 800519e:	d100      	bne.n	80051a2 <memset+0xa>
 80051a0:	4770      	bx	lr
 80051a2:	f803 1b01 	strb.w	r1, [r3], #1
 80051a6:	e7f9      	b.n	800519c <memset+0x4>

080051a8 <_localeconv_r>:
 80051a8:	4800      	ldr	r0, [pc, #0]	@ (80051ac <_localeconv_r+0x4>)
 80051aa:	4770      	bx	lr
 80051ac:	20000158 	.word	0x20000158

080051b0 <_close_r>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	4d06      	ldr	r5, [pc, #24]	@ (80051cc <_close_r+0x1c>)
 80051b4:	2300      	movs	r3, #0
 80051b6:	4604      	mov	r4, r0
 80051b8:	4608      	mov	r0, r1
 80051ba:	602b      	str	r3, [r5, #0]
 80051bc:	f7fc f9f0 	bl	80015a0 <_close>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_close_r+0x1a>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_close_r+0x1a>
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	200003b0 	.word	0x200003b0

080051d0 <_lseek_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4d07      	ldr	r5, [pc, #28]	@ (80051f0 <_lseek_r+0x20>)
 80051d4:	4604      	mov	r4, r0
 80051d6:	4608      	mov	r0, r1
 80051d8:	4611      	mov	r1, r2
 80051da:	2200      	movs	r2, #0
 80051dc:	602a      	str	r2, [r5, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	f7fc fa05 	bl	80015ee <_lseek>
 80051e4:	1c43      	adds	r3, r0, #1
 80051e6:	d102      	bne.n	80051ee <_lseek_r+0x1e>
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	b103      	cbz	r3, 80051ee <_lseek_r+0x1e>
 80051ec:	6023      	str	r3, [r4, #0]
 80051ee:	bd38      	pop	{r3, r4, r5, pc}
 80051f0:	200003b0 	.word	0x200003b0

080051f4 <_read_r>:
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	4d07      	ldr	r5, [pc, #28]	@ (8005214 <_read_r+0x20>)
 80051f8:	4604      	mov	r4, r0
 80051fa:	4608      	mov	r0, r1
 80051fc:	4611      	mov	r1, r2
 80051fe:	2200      	movs	r2, #0
 8005200:	602a      	str	r2, [r5, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	f7fc f993 	bl	800152e <_read>
 8005208:	1c43      	adds	r3, r0, #1
 800520a:	d102      	bne.n	8005212 <_read_r+0x1e>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	b103      	cbz	r3, 8005212 <_read_r+0x1e>
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	bd38      	pop	{r3, r4, r5, pc}
 8005214:	200003b0 	.word	0x200003b0

08005218 <_write_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4d07      	ldr	r5, [pc, #28]	@ (8005238 <_write_r+0x20>)
 800521c:	4604      	mov	r4, r0
 800521e:	4608      	mov	r0, r1
 8005220:	4611      	mov	r1, r2
 8005222:	2200      	movs	r2, #0
 8005224:	602a      	str	r2, [r5, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	f7fc f99e 	bl	8001568 <_write>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_write_r+0x1e>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	b103      	cbz	r3, 8005236 <_write_r+0x1e>
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	200003b0 	.word	0x200003b0

0800523c <__errno>:
 800523c:	4b01      	ldr	r3, [pc, #4]	@ (8005244 <__errno+0x8>)
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	20000018 	.word	0x20000018

08005248 <__libc_init_array>:
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	4d0d      	ldr	r5, [pc, #52]	@ (8005280 <__libc_init_array+0x38>)
 800524c:	4c0d      	ldr	r4, [pc, #52]	@ (8005284 <__libc_init_array+0x3c>)
 800524e:	1b64      	subs	r4, r4, r5
 8005250:	10a4      	asrs	r4, r4, #2
 8005252:	2600      	movs	r6, #0
 8005254:	42a6      	cmp	r6, r4
 8005256:	d109      	bne.n	800526c <__libc_init_array+0x24>
 8005258:	4d0b      	ldr	r5, [pc, #44]	@ (8005288 <__libc_init_array+0x40>)
 800525a:	4c0c      	ldr	r4, [pc, #48]	@ (800528c <__libc_init_array+0x44>)
 800525c:	f003 fe28 	bl	8008eb0 <_init>
 8005260:	1b64      	subs	r4, r4, r5
 8005262:	10a4      	asrs	r4, r4, #2
 8005264:	2600      	movs	r6, #0
 8005266:	42a6      	cmp	r6, r4
 8005268:	d105      	bne.n	8005276 <__libc_init_array+0x2e>
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005270:	4798      	blx	r3
 8005272:	3601      	adds	r6, #1
 8005274:	e7ee      	b.n	8005254 <__libc_init_array+0xc>
 8005276:	f855 3b04 	ldr.w	r3, [r5], #4
 800527a:	4798      	blx	r3
 800527c:	3601      	adds	r6, #1
 800527e:	e7f2      	b.n	8005266 <__libc_init_array+0x1e>
 8005280:	08009468 	.word	0x08009468
 8005284:	08009468 	.word	0x08009468
 8005288:	08009468 	.word	0x08009468
 800528c:	0800946c 	.word	0x0800946c

08005290 <__retarget_lock_init_recursive>:
 8005290:	4770      	bx	lr

08005292 <__retarget_lock_acquire_recursive>:
 8005292:	4770      	bx	lr

08005294 <__retarget_lock_release_recursive>:
 8005294:	4770      	bx	lr
	...

08005298 <nanf>:
 8005298:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80052a0 <nanf+0x8>
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	7fc00000 	.word	0x7fc00000

080052a4 <quorem>:
 80052a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a8:	6903      	ldr	r3, [r0, #16]
 80052aa:	690c      	ldr	r4, [r1, #16]
 80052ac:	42a3      	cmp	r3, r4
 80052ae:	4607      	mov	r7, r0
 80052b0:	db7e      	blt.n	80053b0 <quorem+0x10c>
 80052b2:	3c01      	subs	r4, #1
 80052b4:	f101 0814 	add.w	r8, r1, #20
 80052b8:	00a3      	lsls	r3, r4, #2
 80052ba:	f100 0514 	add.w	r5, r0, #20
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052c4:	9301      	str	r3, [sp, #4]
 80052c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052ce:	3301      	adds	r3, #1
 80052d0:	429a      	cmp	r2, r3
 80052d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80052da:	d32e      	bcc.n	800533a <quorem+0x96>
 80052dc:	f04f 0a00 	mov.w	sl, #0
 80052e0:	46c4      	mov	ip, r8
 80052e2:	46ae      	mov	lr, r5
 80052e4:	46d3      	mov	fp, sl
 80052e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80052ea:	b298      	uxth	r0, r3
 80052ec:	fb06 a000 	mla	r0, r6, r0, sl
 80052f0:	0c02      	lsrs	r2, r0, #16
 80052f2:	0c1b      	lsrs	r3, r3, #16
 80052f4:	fb06 2303 	mla	r3, r6, r3, r2
 80052f8:	f8de 2000 	ldr.w	r2, [lr]
 80052fc:	b280      	uxth	r0, r0
 80052fe:	b292      	uxth	r2, r2
 8005300:	1a12      	subs	r2, r2, r0
 8005302:	445a      	add	r2, fp
 8005304:	f8de 0000 	ldr.w	r0, [lr]
 8005308:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800530c:	b29b      	uxth	r3, r3
 800530e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005312:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005316:	b292      	uxth	r2, r2
 8005318:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800531c:	45e1      	cmp	r9, ip
 800531e:	f84e 2b04 	str.w	r2, [lr], #4
 8005322:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005326:	d2de      	bcs.n	80052e6 <quorem+0x42>
 8005328:	9b00      	ldr	r3, [sp, #0]
 800532a:	58eb      	ldr	r3, [r5, r3]
 800532c:	b92b      	cbnz	r3, 800533a <quorem+0x96>
 800532e:	9b01      	ldr	r3, [sp, #4]
 8005330:	3b04      	subs	r3, #4
 8005332:	429d      	cmp	r5, r3
 8005334:	461a      	mov	r2, r3
 8005336:	d32f      	bcc.n	8005398 <quorem+0xf4>
 8005338:	613c      	str	r4, [r7, #16]
 800533a:	4638      	mov	r0, r7
 800533c:	f001 f9c4 	bl	80066c8 <__mcmp>
 8005340:	2800      	cmp	r0, #0
 8005342:	db25      	blt.n	8005390 <quorem+0xec>
 8005344:	4629      	mov	r1, r5
 8005346:	2000      	movs	r0, #0
 8005348:	f858 2b04 	ldr.w	r2, [r8], #4
 800534c:	f8d1 c000 	ldr.w	ip, [r1]
 8005350:	fa1f fe82 	uxth.w	lr, r2
 8005354:	fa1f f38c 	uxth.w	r3, ip
 8005358:	eba3 030e 	sub.w	r3, r3, lr
 800535c:	4403      	add	r3, r0
 800535e:	0c12      	lsrs	r2, r2, #16
 8005360:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005364:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005368:	b29b      	uxth	r3, r3
 800536a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800536e:	45c1      	cmp	r9, r8
 8005370:	f841 3b04 	str.w	r3, [r1], #4
 8005374:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005378:	d2e6      	bcs.n	8005348 <quorem+0xa4>
 800537a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800537e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005382:	b922      	cbnz	r2, 800538e <quorem+0xea>
 8005384:	3b04      	subs	r3, #4
 8005386:	429d      	cmp	r5, r3
 8005388:	461a      	mov	r2, r3
 800538a:	d30b      	bcc.n	80053a4 <quorem+0x100>
 800538c:	613c      	str	r4, [r7, #16]
 800538e:	3601      	adds	r6, #1
 8005390:	4630      	mov	r0, r6
 8005392:	b003      	add	sp, #12
 8005394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	3b04      	subs	r3, #4
 800539c:	2a00      	cmp	r2, #0
 800539e:	d1cb      	bne.n	8005338 <quorem+0x94>
 80053a0:	3c01      	subs	r4, #1
 80053a2:	e7c6      	b.n	8005332 <quorem+0x8e>
 80053a4:	6812      	ldr	r2, [r2, #0]
 80053a6:	3b04      	subs	r3, #4
 80053a8:	2a00      	cmp	r2, #0
 80053aa:	d1ef      	bne.n	800538c <quorem+0xe8>
 80053ac:	3c01      	subs	r4, #1
 80053ae:	e7ea      	b.n	8005386 <quorem+0xe2>
 80053b0:	2000      	movs	r0, #0
 80053b2:	e7ee      	b.n	8005392 <quorem+0xee>
 80053b4:	0000      	movs	r0, r0
	...

080053b8 <_dtoa_r>:
 80053b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053bc:	69c7      	ldr	r7, [r0, #28]
 80053be:	b099      	sub	sp, #100	@ 0x64
 80053c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80053c4:	ec55 4b10 	vmov	r4, r5, d0
 80053c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80053ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80053cc:	4683      	mov	fp, r0
 80053ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80053d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80053d2:	b97f      	cbnz	r7, 80053f4 <_dtoa_r+0x3c>
 80053d4:	2010      	movs	r0, #16
 80053d6:	f000 fdfd 	bl	8005fd4 <malloc>
 80053da:	4602      	mov	r2, r0
 80053dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80053e0:	b920      	cbnz	r0, 80053ec <_dtoa_r+0x34>
 80053e2:	4ba7      	ldr	r3, [pc, #668]	@ (8005680 <_dtoa_r+0x2c8>)
 80053e4:	21ef      	movs	r1, #239	@ 0xef
 80053e6:	48a7      	ldr	r0, [pc, #668]	@ (8005684 <_dtoa_r+0x2cc>)
 80053e8:	f002 fdfe 	bl	8007fe8 <__assert_func>
 80053ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80053f0:	6007      	str	r7, [r0, #0]
 80053f2:	60c7      	str	r7, [r0, #12]
 80053f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80053f8:	6819      	ldr	r1, [r3, #0]
 80053fa:	b159      	cbz	r1, 8005414 <_dtoa_r+0x5c>
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	604a      	str	r2, [r1, #4]
 8005400:	2301      	movs	r3, #1
 8005402:	4093      	lsls	r3, r2
 8005404:	608b      	str	r3, [r1, #8]
 8005406:	4658      	mov	r0, fp
 8005408:	f000 feda 	bl	80061c0 <_Bfree>
 800540c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	1e2b      	subs	r3, r5, #0
 8005416:	bfb9      	ittee	lt
 8005418:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800541c:	9303      	strlt	r3, [sp, #12]
 800541e:	2300      	movge	r3, #0
 8005420:	6033      	strge	r3, [r6, #0]
 8005422:	9f03      	ldr	r7, [sp, #12]
 8005424:	4b98      	ldr	r3, [pc, #608]	@ (8005688 <_dtoa_r+0x2d0>)
 8005426:	bfbc      	itt	lt
 8005428:	2201      	movlt	r2, #1
 800542a:	6032      	strlt	r2, [r6, #0]
 800542c:	43bb      	bics	r3, r7
 800542e:	d112      	bne.n	8005456 <_dtoa_r+0x9e>
 8005430:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005432:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800543c:	4323      	orrs	r3, r4
 800543e:	f000 854d 	beq.w	8005edc <_dtoa_r+0xb24>
 8005442:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005444:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800569c <_dtoa_r+0x2e4>
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 854f 	beq.w	8005eec <_dtoa_r+0xb34>
 800544e:	f10a 0303 	add.w	r3, sl, #3
 8005452:	f000 bd49 	b.w	8005ee8 <_dtoa_r+0xb30>
 8005456:	ed9d 7b02 	vldr	d7, [sp, #8]
 800545a:	2200      	movs	r2, #0
 800545c:	ec51 0b17 	vmov	r0, r1, d7
 8005460:	2300      	movs	r3, #0
 8005462:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005466:	f7fb fb2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800546a:	4680      	mov	r8, r0
 800546c:	b158      	cbz	r0, 8005486 <_dtoa_r+0xce>
 800546e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005470:	2301      	movs	r3, #1
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005476:	b113      	cbz	r3, 800547e <_dtoa_r+0xc6>
 8005478:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800547a:	4b84      	ldr	r3, [pc, #528]	@ (800568c <_dtoa_r+0x2d4>)
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80056a0 <_dtoa_r+0x2e8>
 8005482:	f000 bd33 	b.w	8005eec <_dtoa_r+0xb34>
 8005486:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800548a:	aa16      	add	r2, sp, #88	@ 0x58
 800548c:	a917      	add	r1, sp, #92	@ 0x5c
 800548e:	4658      	mov	r0, fp
 8005490:	f001 fa3a 	bl	8006908 <__d2b>
 8005494:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005498:	4681      	mov	r9, r0
 800549a:	2e00      	cmp	r6, #0
 800549c:	d077      	beq.n	800558e <_dtoa_r+0x1d6>
 800549e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80054a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80054b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80054b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80054b8:	4619      	mov	r1, r3
 80054ba:	2200      	movs	r2, #0
 80054bc:	4b74      	ldr	r3, [pc, #464]	@ (8005690 <_dtoa_r+0x2d8>)
 80054be:	f7fa fee3 	bl	8000288 <__aeabi_dsub>
 80054c2:	a369      	add	r3, pc, #420	@ (adr r3, 8005668 <_dtoa_r+0x2b0>)
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	f7fb f896 	bl	80005f8 <__aeabi_dmul>
 80054cc:	a368      	add	r3, pc, #416	@ (adr r3, 8005670 <_dtoa_r+0x2b8>)
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	f7fa fedb 	bl	800028c <__adddf3>
 80054d6:	4604      	mov	r4, r0
 80054d8:	4630      	mov	r0, r6
 80054da:	460d      	mov	r5, r1
 80054dc:	f7fb f822 	bl	8000524 <__aeabi_i2d>
 80054e0:	a365      	add	r3, pc, #404	@ (adr r3, 8005678 <_dtoa_r+0x2c0>)
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f7fb f887 	bl	80005f8 <__aeabi_dmul>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4620      	mov	r0, r4
 80054f0:	4629      	mov	r1, r5
 80054f2:	f7fa fecb 	bl	800028c <__adddf3>
 80054f6:	4604      	mov	r4, r0
 80054f8:	460d      	mov	r5, r1
 80054fa:	f7fb fb2d 	bl	8000b58 <__aeabi_d2iz>
 80054fe:	2200      	movs	r2, #0
 8005500:	4607      	mov	r7, r0
 8005502:	2300      	movs	r3, #0
 8005504:	4620      	mov	r0, r4
 8005506:	4629      	mov	r1, r5
 8005508:	f7fb fae8 	bl	8000adc <__aeabi_dcmplt>
 800550c:	b140      	cbz	r0, 8005520 <_dtoa_r+0x168>
 800550e:	4638      	mov	r0, r7
 8005510:	f7fb f808 	bl	8000524 <__aeabi_i2d>
 8005514:	4622      	mov	r2, r4
 8005516:	462b      	mov	r3, r5
 8005518:	f7fb fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 800551c:	b900      	cbnz	r0, 8005520 <_dtoa_r+0x168>
 800551e:	3f01      	subs	r7, #1
 8005520:	2f16      	cmp	r7, #22
 8005522:	d851      	bhi.n	80055c8 <_dtoa_r+0x210>
 8005524:	4b5b      	ldr	r3, [pc, #364]	@ (8005694 <_dtoa_r+0x2dc>)
 8005526:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005532:	f7fb fad3 	bl	8000adc <__aeabi_dcmplt>
 8005536:	2800      	cmp	r0, #0
 8005538:	d048      	beq.n	80055cc <_dtoa_r+0x214>
 800553a:	3f01      	subs	r7, #1
 800553c:	2300      	movs	r3, #0
 800553e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005540:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005542:	1b9b      	subs	r3, r3, r6
 8005544:	1e5a      	subs	r2, r3, #1
 8005546:	bf44      	itt	mi
 8005548:	f1c3 0801 	rsbmi	r8, r3, #1
 800554c:	2300      	movmi	r3, #0
 800554e:	9208      	str	r2, [sp, #32]
 8005550:	bf54      	ite	pl
 8005552:	f04f 0800 	movpl.w	r8, #0
 8005556:	9308      	strmi	r3, [sp, #32]
 8005558:	2f00      	cmp	r7, #0
 800555a:	db39      	blt.n	80055d0 <_dtoa_r+0x218>
 800555c:	9b08      	ldr	r3, [sp, #32]
 800555e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005560:	443b      	add	r3, r7
 8005562:	9308      	str	r3, [sp, #32]
 8005564:	2300      	movs	r3, #0
 8005566:	930a      	str	r3, [sp, #40]	@ 0x28
 8005568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800556a:	2b09      	cmp	r3, #9
 800556c:	d864      	bhi.n	8005638 <_dtoa_r+0x280>
 800556e:	2b05      	cmp	r3, #5
 8005570:	bfc4      	itt	gt
 8005572:	3b04      	subgt	r3, #4
 8005574:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005578:	f1a3 0302 	sub.w	r3, r3, #2
 800557c:	bfcc      	ite	gt
 800557e:	2400      	movgt	r4, #0
 8005580:	2401      	movle	r4, #1
 8005582:	2b03      	cmp	r3, #3
 8005584:	d863      	bhi.n	800564e <_dtoa_r+0x296>
 8005586:	e8df f003 	tbb	[pc, r3]
 800558a:	372a      	.short	0x372a
 800558c:	5535      	.short	0x5535
 800558e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005592:	441e      	add	r6, r3
 8005594:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005598:	2b20      	cmp	r3, #32
 800559a:	bfc1      	itttt	gt
 800559c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80055a0:	409f      	lslgt	r7, r3
 80055a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80055a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80055aa:	bfd6      	itet	le
 80055ac:	f1c3 0320 	rsble	r3, r3, #32
 80055b0:	ea47 0003 	orrgt.w	r0, r7, r3
 80055b4:	fa04 f003 	lslle.w	r0, r4, r3
 80055b8:	f7fa ffa4 	bl	8000504 <__aeabi_ui2d>
 80055bc:	2201      	movs	r2, #1
 80055be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80055c2:	3e01      	subs	r6, #1
 80055c4:	9214      	str	r2, [sp, #80]	@ 0x50
 80055c6:	e777      	b.n	80054b8 <_dtoa_r+0x100>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e7b8      	b.n	800553e <_dtoa_r+0x186>
 80055cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80055ce:	e7b7      	b.n	8005540 <_dtoa_r+0x188>
 80055d0:	427b      	negs	r3, r7
 80055d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80055d4:	2300      	movs	r3, #0
 80055d6:	eba8 0807 	sub.w	r8, r8, r7
 80055da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80055dc:	e7c4      	b.n	8005568 <_dtoa_r+0x1b0>
 80055de:	2300      	movs	r3, #0
 80055e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	dc35      	bgt.n	8005654 <_dtoa_r+0x29c>
 80055e8:	2301      	movs	r3, #1
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	9307      	str	r3, [sp, #28]
 80055ee:	461a      	mov	r2, r3
 80055f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80055f2:	e00b      	b.n	800560c <_dtoa_r+0x254>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e7f3      	b.n	80055e0 <_dtoa_r+0x228>
 80055f8:	2300      	movs	r3, #0
 80055fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055fe:	18fb      	adds	r3, r7, r3
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	3301      	adds	r3, #1
 8005604:	2b01      	cmp	r3, #1
 8005606:	9307      	str	r3, [sp, #28]
 8005608:	bfb8      	it	lt
 800560a:	2301      	movlt	r3, #1
 800560c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005610:	2100      	movs	r1, #0
 8005612:	2204      	movs	r2, #4
 8005614:	f102 0514 	add.w	r5, r2, #20
 8005618:	429d      	cmp	r5, r3
 800561a:	d91f      	bls.n	800565c <_dtoa_r+0x2a4>
 800561c:	6041      	str	r1, [r0, #4]
 800561e:	4658      	mov	r0, fp
 8005620:	f000 fd8e 	bl	8006140 <_Balloc>
 8005624:	4682      	mov	sl, r0
 8005626:	2800      	cmp	r0, #0
 8005628:	d13c      	bne.n	80056a4 <_dtoa_r+0x2ec>
 800562a:	4b1b      	ldr	r3, [pc, #108]	@ (8005698 <_dtoa_r+0x2e0>)
 800562c:	4602      	mov	r2, r0
 800562e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005632:	e6d8      	b.n	80053e6 <_dtoa_r+0x2e>
 8005634:	2301      	movs	r3, #1
 8005636:	e7e0      	b.n	80055fa <_dtoa_r+0x242>
 8005638:	2401      	movs	r4, #1
 800563a:	2300      	movs	r3, #0
 800563c:	9309      	str	r3, [sp, #36]	@ 0x24
 800563e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005640:	f04f 33ff 	mov.w	r3, #4294967295
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	9307      	str	r3, [sp, #28]
 8005648:	2200      	movs	r2, #0
 800564a:	2312      	movs	r3, #18
 800564c:	e7d0      	b.n	80055f0 <_dtoa_r+0x238>
 800564e:	2301      	movs	r3, #1
 8005650:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005652:	e7f5      	b.n	8005640 <_dtoa_r+0x288>
 8005654:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	9307      	str	r3, [sp, #28]
 800565a:	e7d7      	b.n	800560c <_dtoa_r+0x254>
 800565c:	3101      	adds	r1, #1
 800565e:	0052      	lsls	r2, r2, #1
 8005660:	e7d8      	b.n	8005614 <_dtoa_r+0x25c>
 8005662:	bf00      	nop
 8005664:	f3af 8000 	nop.w
 8005668:	636f4361 	.word	0x636f4361
 800566c:	3fd287a7 	.word	0x3fd287a7
 8005670:	8b60c8b3 	.word	0x8b60c8b3
 8005674:	3fc68a28 	.word	0x3fc68a28
 8005678:	509f79fb 	.word	0x509f79fb
 800567c:	3fd34413 	.word	0x3fd34413
 8005680:	08009076 	.word	0x08009076
 8005684:	0800908d 	.word	0x0800908d
 8005688:	7ff00000 	.word	0x7ff00000
 800568c:	08009041 	.word	0x08009041
 8005690:	3ff80000 	.word	0x3ff80000
 8005694:	08009188 	.word	0x08009188
 8005698:	080090e5 	.word	0x080090e5
 800569c:	08009072 	.word	0x08009072
 80056a0:	08009040 	.word	0x08009040
 80056a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056a8:	6018      	str	r0, [r3, #0]
 80056aa:	9b07      	ldr	r3, [sp, #28]
 80056ac:	2b0e      	cmp	r3, #14
 80056ae:	f200 80a4 	bhi.w	80057fa <_dtoa_r+0x442>
 80056b2:	2c00      	cmp	r4, #0
 80056b4:	f000 80a1 	beq.w	80057fa <_dtoa_r+0x442>
 80056b8:	2f00      	cmp	r7, #0
 80056ba:	dd33      	ble.n	8005724 <_dtoa_r+0x36c>
 80056bc:	4bad      	ldr	r3, [pc, #692]	@ (8005974 <_dtoa_r+0x5bc>)
 80056be:	f007 020f 	and.w	r2, r7, #15
 80056c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056c6:	ed93 7b00 	vldr	d7, [r3]
 80056ca:	05f8      	lsls	r0, r7, #23
 80056cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80056d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80056d4:	d516      	bpl.n	8005704 <_dtoa_r+0x34c>
 80056d6:	4ba8      	ldr	r3, [pc, #672]	@ (8005978 <_dtoa_r+0x5c0>)
 80056d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056e0:	f7fb f8b4 	bl	800084c <__aeabi_ddiv>
 80056e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056e8:	f004 040f 	and.w	r4, r4, #15
 80056ec:	2603      	movs	r6, #3
 80056ee:	4da2      	ldr	r5, [pc, #648]	@ (8005978 <_dtoa_r+0x5c0>)
 80056f0:	b954      	cbnz	r4, 8005708 <_dtoa_r+0x350>
 80056f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056fa:	f7fb f8a7 	bl	800084c <__aeabi_ddiv>
 80056fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005702:	e028      	b.n	8005756 <_dtoa_r+0x39e>
 8005704:	2602      	movs	r6, #2
 8005706:	e7f2      	b.n	80056ee <_dtoa_r+0x336>
 8005708:	07e1      	lsls	r1, r4, #31
 800570a:	d508      	bpl.n	800571e <_dtoa_r+0x366>
 800570c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005710:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005714:	f7fa ff70 	bl	80005f8 <__aeabi_dmul>
 8005718:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800571c:	3601      	adds	r6, #1
 800571e:	1064      	asrs	r4, r4, #1
 8005720:	3508      	adds	r5, #8
 8005722:	e7e5      	b.n	80056f0 <_dtoa_r+0x338>
 8005724:	f000 80d2 	beq.w	80058cc <_dtoa_r+0x514>
 8005728:	427c      	negs	r4, r7
 800572a:	4b92      	ldr	r3, [pc, #584]	@ (8005974 <_dtoa_r+0x5bc>)
 800572c:	4d92      	ldr	r5, [pc, #584]	@ (8005978 <_dtoa_r+0x5c0>)
 800572e:	f004 020f 	and.w	r2, r4, #15
 8005732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800573e:	f7fa ff5b 	bl	80005f8 <__aeabi_dmul>
 8005742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005746:	1124      	asrs	r4, r4, #4
 8005748:	2300      	movs	r3, #0
 800574a:	2602      	movs	r6, #2
 800574c:	2c00      	cmp	r4, #0
 800574e:	f040 80b2 	bne.w	80058b6 <_dtoa_r+0x4fe>
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1d3      	bne.n	80056fe <_dtoa_r+0x346>
 8005756:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005758:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80b7 	beq.w	80058d0 <_dtoa_r+0x518>
 8005762:	4b86      	ldr	r3, [pc, #536]	@ (800597c <_dtoa_r+0x5c4>)
 8005764:	2200      	movs	r2, #0
 8005766:	4620      	mov	r0, r4
 8005768:	4629      	mov	r1, r5
 800576a:	f7fb f9b7 	bl	8000adc <__aeabi_dcmplt>
 800576e:	2800      	cmp	r0, #0
 8005770:	f000 80ae 	beq.w	80058d0 <_dtoa_r+0x518>
 8005774:	9b07      	ldr	r3, [sp, #28]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 80aa 	beq.w	80058d0 <_dtoa_r+0x518>
 800577c:	9b00      	ldr	r3, [sp, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	dd37      	ble.n	80057f2 <_dtoa_r+0x43a>
 8005782:	1e7b      	subs	r3, r7, #1
 8005784:	9304      	str	r3, [sp, #16]
 8005786:	4620      	mov	r0, r4
 8005788:	4b7d      	ldr	r3, [pc, #500]	@ (8005980 <_dtoa_r+0x5c8>)
 800578a:	2200      	movs	r2, #0
 800578c:	4629      	mov	r1, r5
 800578e:	f7fa ff33 	bl	80005f8 <__aeabi_dmul>
 8005792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005796:	9c00      	ldr	r4, [sp, #0]
 8005798:	3601      	adds	r6, #1
 800579a:	4630      	mov	r0, r6
 800579c:	f7fa fec2 	bl	8000524 <__aeabi_i2d>
 80057a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057a4:	f7fa ff28 	bl	80005f8 <__aeabi_dmul>
 80057a8:	4b76      	ldr	r3, [pc, #472]	@ (8005984 <_dtoa_r+0x5cc>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	f7fa fd6e 	bl	800028c <__adddf3>
 80057b0:	4605      	mov	r5, r0
 80057b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80057b6:	2c00      	cmp	r4, #0
 80057b8:	f040 808d 	bne.w	80058d6 <_dtoa_r+0x51e>
 80057bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057c0:	4b71      	ldr	r3, [pc, #452]	@ (8005988 <_dtoa_r+0x5d0>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	f7fa fd60 	bl	8000288 <__aeabi_dsub>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057d0:	462a      	mov	r2, r5
 80057d2:	4633      	mov	r3, r6
 80057d4:	f7fb f9a0 	bl	8000b18 <__aeabi_dcmpgt>
 80057d8:	2800      	cmp	r0, #0
 80057da:	f040 828b 	bne.w	8005cf4 <_dtoa_r+0x93c>
 80057de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057e2:	462a      	mov	r2, r5
 80057e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80057e8:	f7fb f978 	bl	8000adc <__aeabi_dcmplt>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	f040 8128 	bne.w	8005a42 <_dtoa_r+0x68a>
 80057f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80057f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80057fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f2c0 815a 	blt.w	8005ab6 <_dtoa_r+0x6fe>
 8005802:	2f0e      	cmp	r7, #14
 8005804:	f300 8157 	bgt.w	8005ab6 <_dtoa_r+0x6fe>
 8005808:	4b5a      	ldr	r3, [pc, #360]	@ (8005974 <_dtoa_r+0x5bc>)
 800580a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800580e:	ed93 7b00 	vldr	d7, [r3]
 8005812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005814:	2b00      	cmp	r3, #0
 8005816:	ed8d 7b00 	vstr	d7, [sp]
 800581a:	da03      	bge.n	8005824 <_dtoa_r+0x46c>
 800581c:	9b07      	ldr	r3, [sp, #28]
 800581e:	2b00      	cmp	r3, #0
 8005820:	f340 8101 	ble.w	8005a26 <_dtoa_r+0x66e>
 8005824:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005828:	4656      	mov	r6, sl
 800582a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800582e:	4620      	mov	r0, r4
 8005830:	4629      	mov	r1, r5
 8005832:	f7fb f80b 	bl	800084c <__aeabi_ddiv>
 8005836:	f7fb f98f 	bl	8000b58 <__aeabi_d2iz>
 800583a:	4680      	mov	r8, r0
 800583c:	f7fa fe72 	bl	8000524 <__aeabi_i2d>
 8005840:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005844:	f7fa fed8 	bl	80005f8 <__aeabi_dmul>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4620      	mov	r0, r4
 800584e:	4629      	mov	r1, r5
 8005850:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005854:	f7fa fd18 	bl	8000288 <__aeabi_dsub>
 8005858:	f806 4b01 	strb.w	r4, [r6], #1
 800585c:	9d07      	ldr	r5, [sp, #28]
 800585e:	eba6 040a 	sub.w	r4, r6, sl
 8005862:	42a5      	cmp	r5, r4
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	f040 8117 	bne.w	8005a9a <_dtoa_r+0x6e2>
 800586c:	f7fa fd0e 	bl	800028c <__adddf3>
 8005870:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005874:	4604      	mov	r4, r0
 8005876:	460d      	mov	r5, r1
 8005878:	f7fb f94e 	bl	8000b18 <__aeabi_dcmpgt>
 800587c:	2800      	cmp	r0, #0
 800587e:	f040 80f9 	bne.w	8005a74 <_dtoa_r+0x6bc>
 8005882:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005886:	4620      	mov	r0, r4
 8005888:	4629      	mov	r1, r5
 800588a:	f7fb f91d 	bl	8000ac8 <__aeabi_dcmpeq>
 800588e:	b118      	cbz	r0, 8005898 <_dtoa_r+0x4e0>
 8005890:	f018 0f01 	tst.w	r8, #1
 8005894:	f040 80ee 	bne.w	8005a74 <_dtoa_r+0x6bc>
 8005898:	4649      	mov	r1, r9
 800589a:	4658      	mov	r0, fp
 800589c:	f000 fc90 	bl	80061c0 <_Bfree>
 80058a0:	2300      	movs	r3, #0
 80058a2:	7033      	strb	r3, [r6, #0]
 80058a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80058a6:	3701      	adds	r7, #1
 80058a8:	601f      	str	r7, [r3, #0]
 80058aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 831d 	beq.w	8005eec <_dtoa_r+0xb34>
 80058b2:	601e      	str	r6, [r3, #0]
 80058b4:	e31a      	b.n	8005eec <_dtoa_r+0xb34>
 80058b6:	07e2      	lsls	r2, r4, #31
 80058b8:	d505      	bpl.n	80058c6 <_dtoa_r+0x50e>
 80058ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058be:	f7fa fe9b 	bl	80005f8 <__aeabi_dmul>
 80058c2:	3601      	adds	r6, #1
 80058c4:	2301      	movs	r3, #1
 80058c6:	1064      	asrs	r4, r4, #1
 80058c8:	3508      	adds	r5, #8
 80058ca:	e73f      	b.n	800574c <_dtoa_r+0x394>
 80058cc:	2602      	movs	r6, #2
 80058ce:	e742      	b.n	8005756 <_dtoa_r+0x39e>
 80058d0:	9c07      	ldr	r4, [sp, #28]
 80058d2:	9704      	str	r7, [sp, #16]
 80058d4:	e761      	b.n	800579a <_dtoa_r+0x3e2>
 80058d6:	4b27      	ldr	r3, [pc, #156]	@ (8005974 <_dtoa_r+0x5bc>)
 80058d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80058da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058e2:	4454      	add	r4, sl
 80058e4:	2900      	cmp	r1, #0
 80058e6:	d053      	beq.n	8005990 <_dtoa_r+0x5d8>
 80058e8:	4928      	ldr	r1, [pc, #160]	@ (800598c <_dtoa_r+0x5d4>)
 80058ea:	2000      	movs	r0, #0
 80058ec:	f7fa ffae 	bl	800084c <__aeabi_ddiv>
 80058f0:	4633      	mov	r3, r6
 80058f2:	462a      	mov	r2, r5
 80058f4:	f7fa fcc8 	bl	8000288 <__aeabi_dsub>
 80058f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80058fc:	4656      	mov	r6, sl
 80058fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005902:	f7fb f929 	bl	8000b58 <__aeabi_d2iz>
 8005906:	4605      	mov	r5, r0
 8005908:	f7fa fe0c 	bl	8000524 <__aeabi_i2d>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005914:	f7fa fcb8 	bl	8000288 <__aeabi_dsub>
 8005918:	3530      	adds	r5, #48	@ 0x30
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005922:	f806 5b01 	strb.w	r5, [r6], #1
 8005926:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800592a:	f7fb f8d7 	bl	8000adc <__aeabi_dcmplt>
 800592e:	2800      	cmp	r0, #0
 8005930:	d171      	bne.n	8005a16 <_dtoa_r+0x65e>
 8005932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005936:	4911      	ldr	r1, [pc, #68]	@ (800597c <_dtoa_r+0x5c4>)
 8005938:	2000      	movs	r0, #0
 800593a:	f7fa fca5 	bl	8000288 <__aeabi_dsub>
 800593e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005942:	f7fb f8cb 	bl	8000adc <__aeabi_dcmplt>
 8005946:	2800      	cmp	r0, #0
 8005948:	f040 8095 	bne.w	8005a76 <_dtoa_r+0x6be>
 800594c:	42a6      	cmp	r6, r4
 800594e:	f43f af50 	beq.w	80057f2 <_dtoa_r+0x43a>
 8005952:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005956:	4b0a      	ldr	r3, [pc, #40]	@ (8005980 <_dtoa_r+0x5c8>)
 8005958:	2200      	movs	r2, #0
 800595a:	f7fa fe4d 	bl	80005f8 <__aeabi_dmul>
 800595e:	4b08      	ldr	r3, [pc, #32]	@ (8005980 <_dtoa_r+0x5c8>)
 8005960:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005964:	2200      	movs	r2, #0
 8005966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800596a:	f7fa fe45 	bl	80005f8 <__aeabi_dmul>
 800596e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005972:	e7c4      	b.n	80058fe <_dtoa_r+0x546>
 8005974:	08009188 	.word	0x08009188
 8005978:	08009160 	.word	0x08009160
 800597c:	3ff00000 	.word	0x3ff00000
 8005980:	40240000 	.word	0x40240000
 8005984:	401c0000 	.word	0x401c0000
 8005988:	40140000 	.word	0x40140000
 800598c:	3fe00000 	.word	0x3fe00000
 8005990:	4631      	mov	r1, r6
 8005992:	4628      	mov	r0, r5
 8005994:	f7fa fe30 	bl	80005f8 <__aeabi_dmul>
 8005998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800599c:	9415      	str	r4, [sp, #84]	@ 0x54
 800599e:	4656      	mov	r6, sl
 80059a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059a4:	f7fb f8d8 	bl	8000b58 <__aeabi_d2iz>
 80059a8:	4605      	mov	r5, r0
 80059aa:	f7fa fdbb 	bl	8000524 <__aeabi_i2d>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059b6:	f7fa fc67 	bl	8000288 <__aeabi_dsub>
 80059ba:	3530      	adds	r5, #48	@ 0x30
 80059bc:	f806 5b01 	strb.w	r5, [r6], #1
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	42a6      	cmp	r6, r4
 80059c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	d124      	bne.n	8005a1a <_dtoa_r+0x662>
 80059d0:	4bac      	ldr	r3, [pc, #688]	@ (8005c84 <_dtoa_r+0x8cc>)
 80059d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80059d6:	f7fa fc59 	bl	800028c <__adddf3>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059e2:	f7fb f899 	bl	8000b18 <__aeabi_dcmpgt>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d145      	bne.n	8005a76 <_dtoa_r+0x6be>
 80059ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80059ee:	49a5      	ldr	r1, [pc, #660]	@ (8005c84 <_dtoa_r+0x8cc>)
 80059f0:	2000      	movs	r0, #0
 80059f2:	f7fa fc49 	bl	8000288 <__aeabi_dsub>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059fe:	f7fb f86d 	bl	8000adc <__aeabi_dcmplt>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	f43f aef5 	beq.w	80057f2 <_dtoa_r+0x43a>
 8005a08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005a0a:	1e73      	subs	r3, r6, #1
 8005a0c:	9315      	str	r3, [sp, #84]	@ 0x54
 8005a0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a12:	2b30      	cmp	r3, #48	@ 0x30
 8005a14:	d0f8      	beq.n	8005a08 <_dtoa_r+0x650>
 8005a16:	9f04      	ldr	r7, [sp, #16]
 8005a18:	e73e      	b.n	8005898 <_dtoa_r+0x4e0>
 8005a1a:	4b9b      	ldr	r3, [pc, #620]	@ (8005c88 <_dtoa_r+0x8d0>)
 8005a1c:	f7fa fdec 	bl	80005f8 <__aeabi_dmul>
 8005a20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a24:	e7bc      	b.n	80059a0 <_dtoa_r+0x5e8>
 8005a26:	d10c      	bne.n	8005a42 <_dtoa_r+0x68a>
 8005a28:	4b98      	ldr	r3, [pc, #608]	@ (8005c8c <_dtoa_r+0x8d4>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a30:	f7fa fde2 	bl	80005f8 <__aeabi_dmul>
 8005a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a38:	f7fb f864 	bl	8000b04 <__aeabi_dcmpge>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	f000 8157 	beq.w	8005cf0 <_dtoa_r+0x938>
 8005a42:	2400      	movs	r4, #0
 8005a44:	4625      	mov	r5, r4
 8005a46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	9304      	str	r3, [sp, #16]
 8005a4c:	4656      	mov	r6, sl
 8005a4e:	2700      	movs	r7, #0
 8005a50:	4621      	mov	r1, r4
 8005a52:	4658      	mov	r0, fp
 8005a54:	f000 fbb4 	bl	80061c0 <_Bfree>
 8005a58:	2d00      	cmp	r5, #0
 8005a5a:	d0dc      	beq.n	8005a16 <_dtoa_r+0x65e>
 8005a5c:	b12f      	cbz	r7, 8005a6a <_dtoa_r+0x6b2>
 8005a5e:	42af      	cmp	r7, r5
 8005a60:	d003      	beq.n	8005a6a <_dtoa_r+0x6b2>
 8005a62:	4639      	mov	r1, r7
 8005a64:	4658      	mov	r0, fp
 8005a66:	f000 fbab 	bl	80061c0 <_Bfree>
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	4658      	mov	r0, fp
 8005a6e:	f000 fba7 	bl	80061c0 <_Bfree>
 8005a72:	e7d0      	b.n	8005a16 <_dtoa_r+0x65e>
 8005a74:	9704      	str	r7, [sp, #16]
 8005a76:	4633      	mov	r3, r6
 8005a78:	461e      	mov	r6, r3
 8005a7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a7e:	2a39      	cmp	r2, #57	@ 0x39
 8005a80:	d107      	bne.n	8005a92 <_dtoa_r+0x6da>
 8005a82:	459a      	cmp	sl, r3
 8005a84:	d1f8      	bne.n	8005a78 <_dtoa_r+0x6c0>
 8005a86:	9a04      	ldr	r2, [sp, #16]
 8005a88:	3201      	adds	r2, #1
 8005a8a:	9204      	str	r2, [sp, #16]
 8005a8c:	2230      	movs	r2, #48	@ 0x30
 8005a8e:	f88a 2000 	strb.w	r2, [sl]
 8005a92:	781a      	ldrb	r2, [r3, #0]
 8005a94:	3201      	adds	r2, #1
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	e7bd      	b.n	8005a16 <_dtoa_r+0x65e>
 8005a9a:	4b7b      	ldr	r3, [pc, #492]	@ (8005c88 <_dtoa_r+0x8d0>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f7fa fdab 	bl	80005f8 <__aeabi_dmul>
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	460d      	mov	r5, r1
 8005aaa:	f7fb f80d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	f43f aebb 	beq.w	800582a <_dtoa_r+0x472>
 8005ab4:	e6f0      	b.n	8005898 <_dtoa_r+0x4e0>
 8005ab6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ab8:	2a00      	cmp	r2, #0
 8005aba:	f000 80db 	beq.w	8005c74 <_dtoa_r+0x8bc>
 8005abe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ac0:	2a01      	cmp	r2, #1
 8005ac2:	f300 80bf 	bgt.w	8005c44 <_dtoa_r+0x88c>
 8005ac6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005ac8:	2a00      	cmp	r2, #0
 8005aca:	f000 80b7 	beq.w	8005c3c <_dtoa_r+0x884>
 8005ace:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005ad2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ad4:	4646      	mov	r6, r8
 8005ad6:	9a08      	ldr	r2, [sp, #32]
 8005ad8:	2101      	movs	r1, #1
 8005ada:	441a      	add	r2, r3
 8005adc:	4658      	mov	r0, fp
 8005ade:	4498      	add	r8, r3
 8005ae0:	9208      	str	r2, [sp, #32]
 8005ae2:	f000 fc6b 	bl	80063bc <__i2b>
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	b15e      	cbz	r6, 8005b02 <_dtoa_r+0x74a>
 8005aea:	9b08      	ldr	r3, [sp, #32]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dd08      	ble.n	8005b02 <_dtoa_r+0x74a>
 8005af0:	42b3      	cmp	r3, r6
 8005af2:	9a08      	ldr	r2, [sp, #32]
 8005af4:	bfa8      	it	ge
 8005af6:	4633      	movge	r3, r6
 8005af8:	eba8 0803 	sub.w	r8, r8, r3
 8005afc:	1af6      	subs	r6, r6, r3
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	9308      	str	r3, [sp, #32]
 8005b02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b04:	b1f3      	cbz	r3, 8005b44 <_dtoa_r+0x78c>
 8005b06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 80b7 	beq.w	8005c7c <_dtoa_r+0x8c4>
 8005b0e:	b18c      	cbz	r4, 8005b34 <_dtoa_r+0x77c>
 8005b10:	4629      	mov	r1, r5
 8005b12:	4622      	mov	r2, r4
 8005b14:	4658      	mov	r0, fp
 8005b16:	f000 fd11 	bl	800653c <__pow5mult>
 8005b1a:	464a      	mov	r2, r9
 8005b1c:	4601      	mov	r1, r0
 8005b1e:	4605      	mov	r5, r0
 8005b20:	4658      	mov	r0, fp
 8005b22:	f000 fc61 	bl	80063e8 <__multiply>
 8005b26:	4649      	mov	r1, r9
 8005b28:	9004      	str	r0, [sp, #16]
 8005b2a:	4658      	mov	r0, fp
 8005b2c:	f000 fb48 	bl	80061c0 <_Bfree>
 8005b30:	9b04      	ldr	r3, [sp, #16]
 8005b32:	4699      	mov	r9, r3
 8005b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b36:	1b1a      	subs	r2, r3, r4
 8005b38:	d004      	beq.n	8005b44 <_dtoa_r+0x78c>
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	4658      	mov	r0, fp
 8005b3e:	f000 fcfd 	bl	800653c <__pow5mult>
 8005b42:	4681      	mov	r9, r0
 8005b44:	2101      	movs	r1, #1
 8005b46:	4658      	mov	r0, fp
 8005b48:	f000 fc38 	bl	80063bc <__i2b>
 8005b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b4e:	4604      	mov	r4, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 81cf 	beq.w	8005ef4 <_dtoa_r+0xb3c>
 8005b56:	461a      	mov	r2, r3
 8005b58:	4601      	mov	r1, r0
 8005b5a:	4658      	mov	r0, fp
 8005b5c:	f000 fcee 	bl	800653c <__pow5mult>
 8005b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	4604      	mov	r4, r0
 8005b66:	f300 8095 	bgt.w	8005c94 <_dtoa_r+0x8dc>
 8005b6a:	9b02      	ldr	r3, [sp, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f040 8087 	bne.w	8005c80 <_dtoa_r+0x8c8>
 8005b72:	9b03      	ldr	r3, [sp, #12]
 8005b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f040 8089 	bne.w	8005c90 <_dtoa_r+0x8d8>
 8005b7e:	9b03      	ldr	r3, [sp, #12]
 8005b80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b84:	0d1b      	lsrs	r3, r3, #20
 8005b86:	051b      	lsls	r3, r3, #20
 8005b88:	b12b      	cbz	r3, 8005b96 <_dtoa_r+0x7de>
 8005b8a:	9b08      	ldr	r3, [sp, #32]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	9308      	str	r3, [sp, #32]
 8005b90:	f108 0801 	add.w	r8, r8, #1
 8005b94:	2301      	movs	r3, #1
 8005b96:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 81b0 	beq.w	8005f00 <_dtoa_r+0xb48>
 8005ba0:	6923      	ldr	r3, [r4, #16]
 8005ba2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ba6:	6918      	ldr	r0, [r3, #16]
 8005ba8:	f000 fbbc 	bl	8006324 <__hi0bits>
 8005bac:	f1c0 0020 	rsb	r0, r0, #32
 8005bb0:	9b08      	ldr	r3, [sp, #32]
 8005bb2:	4418      	add	r0, r3
 8005bb4:	f010 001f 	ands.w	r0, r0, #31
 8005bb8:	d077      	beq.n	8005caa <_dtoa_r+0x8f2>
 8005bba:	f1c0 0320 	rsb	r3, r0, #32
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	dd6b      	ble.n	8005c9a <_dtoa_r+0x8e2>
 8005bc2:	9b08      	ldr	r3, [sp, #32]
 8005bc4:	f1c0 001c 	rsb	r0, r0, #28
 8005bc8:	4403      	add	r3, r0
 8005bca:	4480      	add	r8, r0
 8005bcc:	4406      	add	r6, r0
 8005bce:	9308      	str	r3, [sp, #32]
 8005bd0:	f1b8 0f00 	cmp.w	r8, #0
 8005bd4:	dd05      	ble.n	8005be2 <_dtoa_r+0x82a>
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	4642      	mov	r2, r8
 8005bda:	4658      	mov	r0, fp
 8005bdc:	f000 fd08 	bl	80065f0 <__lshift>
 8005be0:	4681      	mov	r9, r0
 8005be2:	9b08      	ldr	r3, [sp, #32]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	dd05      	ble.n	8005bf4 <_dtoa_r+0x83c>
 8005be8:	4621      	mov	r1, r4
 8005bea:	461a      	mov	r2, r3
 8005bec:	4658      	mov	r0, fp
 8005bee:	f000 fcff 	bl	80065f0 <__lshift>
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d059      	beq.n	8005cae <_dtoa_r+0x8f6>
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4648      	mov	r0, r9
 8005bfe:	f000 fd63 	bl	80066c8 <__mcmp>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	da53      	bge.n	8005cae <_dtoa_r+0x8f6>
 8005c06:	1e7b      	subs	r3, r7, #1
 8005c08:	9304      	str	r3, [sp, #16]
 8005c0a:	4649      	mov	r1, r9
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	220a      	movs	r2, #10
 8005c10:	4658      	mov	r0, fp
 8005c12:	f000 faf7 	bl	8006204 <__multadd>
 8005c16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c18:	4681      	mov	r9, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 8172 	beq.w	8005f04 <_dtoa_r+0xb4c>
 8005c20:	2300      	movs	r3, #0
 8005c22:	4629      	mov	r1, r5
 8005c24:	220a      	movs	r2, #10
 8005c26:	4658      	mov	r0, fp
 8005c28:	f000 faec 	bl	8006204 <__multadd>
 8005c2c:	9b00      	ldr	r3, [sp, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	4605      	mov	r5, r0
 8005c32:	dc67      	bgt.n	8005d04 <_dtoa_r+0x94c>
 8005c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	dc41      	bgt.n	8005cbe <_dtoa_r+0x906>
 8005c3a:	e063      	b.n	8005d04 <_dtoa_r+0x94c>
 8005c3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005c3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005c42:	e746      	b.n	8005ad2 <_dtoa_r+0x71a>
 8005c44:	9b07      	ldr	r3, [sp, #28]
 8005c46:	1e5c      	subs	r4, r3, #1
 8005c48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c4a:	42a3      	cmp	r3, r4
 8005c4c:	bfbf      	itttt	lt
 8005c4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005c50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005c52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005c54:	1ae3      	sublt	r3, r4, r3
 8005c56:	bfb4      	ite	lt
 8005c58:	18d2      	addlt	r2, r2, r3
 8005c5a:	1b1c      	subge	r4, r3, r4
 8005c5c:	9b07      	ldr	r3, [sp, #28]
 8005c5e:	bfbc      	itt	lt
 8005c60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005c62:	2400      	movlt	r4, #0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bfb5      	itete	lt
 8005c68:	eba8 0603 	sublt.w	r6, r8, r3
 8005c6c:	9b07      	ldrge	r3, [sp, #28]
 8005c6e:	2300      	movlt	r3, #0
 8005c70:	4646      	movge	r6, r8
 8005c72:	e730      	b.n	8005ad6 <_dtoa_r+0x71e>
 8005c74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005c76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005c78:	4646      	mov	r6, r8
 8005c7a:	e735      	b.n	8005ae8 <_dtoa_r+0x730>
 8005c7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c7e:	e75c      	b.n	8005b3a <_dtoa_r+0x782>
 8005c80:	2300      	movs	r3, #0
 8005c82:	e788      	b.n	8005b96 <_dtoa_r+0x7de>
 8005c84:	3fe00000 	.word	0x3fe00000
 8005c88:	40240000 	.word	0x40240000
 8005c8c:	40140000 	.word	0x40140000
 8005c90:	9b02      	ldr	r3, [sp, #8]
 8005c92:	e780      	b.n	8005b96 <_dtoa_r+0x7de>
 8005c94:	2300      	movs	r3, #0
 8005c96:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c98:	e782      	b.n	8005ba0 <_dtoa_r+0x7e8>
 8005c9a:	d099      	beq.n	8005bd0 <_dtoa_r+0x818>
 8005c9c:	9a08      	ldr	r2, [sp, #32]
 8005c9e:	331c      	adds	r3, #28
 8005ca0:	441a      	add	r2, r3
 8005ca2:	4498      	add	r8, r3
 8005ca4:	441e      	add	r6, r3
 8005ca6:	9208      	str	r2, [sp, #32]
 8005ca8:	e792      	b.n	8005bd0 <_dtoa_r+0x818>
 8005caa:	4603      	mov	r3, r0
 8005cac:	e7f6      	b.n	8005c9c <_dtoa_r+0x8e4>
 8005cae:	9b07      	ldr	r3, [sp, #28]
 8005cb0:	9704      	str	r7, [sp, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	dc20      	bgt.n	8005cf8 <_dtoa_r+0x940>
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	dd1e      	ble.n	8005cfc <_dtoa_r+0x944>
 8005cbe:	9b00      	ldr	r3, [sp, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f47f aec0 	bne.w	8005a46 <_dtoa_r+0x68e>
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	2205      	movs	r2, #5
 8005cca:	4658      	mov	r0, fp
 8005ccc:	f000 fa9a 	bl	8006204 <__multadd>
 8005cd0:	4601      	mov	r1, r0
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	4648      	mov	r0, r9
 8005cd6:	f000 fcf7 	bl	80066c8 <__mcmp>
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	f77f aeb3 	ble.w	8005a46 <_dtoa_r+0x68e>
 8005ce0:	4656      	mov	r6, sl
 8005ce2:	2331      	movs	r3, #49	@ 0x31
 8005ce4:	f806 3b01 	strb.w	r3, [r6], #1
 8005ce8:	9b04      	ldr	r3, [sp, #16]
 8005cea:	3301      	adds	r3, #1
 8005cec:	9304      	str	r3, [sp, #16]
 8005cee:	e6ae      	b.n	8005a4e <_dtoa_r+0x696>
 8005cf0:	9c07      	ldr	r4, [sp, #28]
 8005cf2:	9704      	str	r7, [sp, #16]
 8005cf4:	4625      	mov	r5, r4
 8005cf6:	e7f3      	b.n	8005ce0 <_dtoa_r+0x928>
 8005cf8:	9b07      	ldr	r3, [sp, #28]
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 8104 	beq.w	8005f0c <_dtoa_r+0xb54>
 8005d04:	2e00      	cmp	r6, #0
 8005d06:	dd05      	ble.n	8005d14 <_dtoa_r+0x95c>
 8005d08:	4629      	mov	r1, r5
 8005d0a:	4632      	mov	r2, r6
 8005d0c:	4658      	mov	r0, fp
 8005d0e:	f000 fc6f 	bl	80065f0 <__lshift>
 8005d12:	4605      	mov	r5, r0
 8005d14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d05a      	beq.n	8005dd0 <_dtoa_r+0xa18>
 8005d1a:	6869      	ldr	r1, [r5, #4]
 8005d1c:	4658      	mov	r0, fp
 8005d1e:	f000 fa0f 	bl	8006140 <_Balloc>
 8005d22:	4606      	mov	r6, r0
 8005d24:	b928      	cbnz	r0, 8005d32 <_dtoa_r+0x97a>
 8005d26:	4b84      	ldr	r3, [pc, #528]	@ (8005f38 <_dtoa_r+0xb80>)
 8005d28:	4602      	mov	r2, r0
 8005d2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005d2e:	f7ff bb5a 	b.w	80053e6 <_dtoa_r+0x2e>
 8005d32:	692a      	ldr	r2, [r5, #16]
 8005d34:	3202      	adds	r2, #2
 8005d36:	0092      	lsls	r2, r2, #2
 8005d38:	f105 010c 	add.w	r1, r5, #12
 8005d3c:	300c      	adds	r0, #12
 8005d3e:	f002 f93b 	bl	8007fb8 <memcpy>
 8005d42:	2201      	movs	r2, #1
 8005d44:	4631      	mov	r1, r6
 8005d46:	4658      	mov	r0, fp
 8005d48:	f000 fc52 	bl	80065f0 <__lshift>
 8005d4c:	f10a 0301 	add.w	r3, sl, #1
 8005d50:	9307      	str	r3, [sp, #28]
 8005d52:	9b00      	ldr	r3, [sp, #0]
 8005d54:	4453      	add	r3, sl
 8005d56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d58:	9b02      	ldr	r3, [sp, #8]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	462f      	mov	r7, r5
 8005d60:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d62:	4605      	mov	r5, r0
 8005d64:	9b07      	ldr	r3, [sp, #28]
 8005d66:	4621      	mov	r1, r4
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	4648      	mov	r0, r9
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	f7ff fa99 	bl	80052a4 <quorem>
 8005d72:	4639      	mov	r1, r7
 8005d74:	9002      	str	r0, [sp, #8]
 8005d76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005d7a:	4648      	mov	r0, r9
 8005d7c:	f000 fca4 	bl	80066c8 <__mcmp>
 8005d80:	462a      	mov	r2, r5
 8005d82:	9008      	str	r0, [sp, #32]
 8005d84:	4621      	mov	r1, r4
 8005d86:	4658      	mov	r0, fp
 8005d88:	f000 fcba 	bl	8006700 <__mdiff>
 8005d8c:	68c2      	ldr	r2, [r0, #12]
 8005d8e:	4606      	mov	r6, r0
 8005d90:	bb02      	cbnz	r2, 8005dd4 <_dtoa_r+0xa1c>
 8005d92:	4601      	mov	r1, r0
 8005d94:	4648      	mov	r0, r9
 8005d96:	f000 fc97 	bl	80066c8 <__mcmp>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	4631      	mov	r1, r6
 8005d9e:	4658      	mov	r0, fp
 8005da0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005da2:	f000 fa0d 	bl	80061c0 <_Bfree>
 8005da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005da8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005daa:	9e07      	ldr	r6, [sp, #28]
 8005dac:	ea43 0102 	orr.w	r1, r3, r2
 8005db0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005db2:	4319      	orrs	r1, r3
 8005db4:	d110      	bne.n	8005dd8 <_dtoa_r+0xa20>
 8005db6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005dba:	d029      	beq.n	8005e10 <_dtoa_r+0xa58>
 8005dbc:	9b08      	ldr	r3, [sp, #32]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	dd02      	ble.n	8005dc8 <_dtoa_r+0xa10>
 8005dc2:	9b02      	ldr	r3, [sp, #8]
 8005dc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005dc8:	9b00      	ldr	r3, [sp, #0]
 8005dca:	f883 8000 	strb.w	r8, [r3]
 8005dce:	e63f      	b.n	8005a50 <_dtoa_r+0x698>
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	e7bb      	b.n	8005d4c <_dtoa_r+0x994>
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	e7e1      	b.n	8005d9c <_dtoa_r+0x9e4>
 8005dd8:	9b08      	ldr	r3, [sp, #32]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	db04      	blt.n	8005de8 <_dtoa_r+0xa30>
 8005dde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005de0:	430b      	orrs	r3, r1
 8005de2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005de4:	430b      	orrs	r3, r1
 8005de6:	d120      	bne.n	8005e2a <_dtoa_r+0xa72>
 8005de8:	2a00      	cmp	r2, #0
 8005dea:	dded      	ble.n	8005dc8 <_dtoa_r+0xa10>
 8005dec:	4649      	mov	r1, r9
 8005dee:	2201      	movs	r2, #1
 8005df0:	4658      	mov	r0, fp
 8005df2:	f000 fbfd 	bl	80065f0 <__lshift>
 8005df6:	4621      	mov	r1, r4
 8005df8:	4681      	mov	r9, r0
 8005dfa:	f000 fc65 	bl	80066c8 <__mcmp>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	dc03      	bgt.n	8005e0a <_dtoa_r+0xa52>
 8005e02:	d1e1      	bne.n	8005dc8 <_dtoa_r+0xa10>
 8005e04:	f018 0f01 	tst.w	r8, #1
 8005e08:	d0de      	beq.n	8005dc8 <_dtoa_r+0xa10>
 8005e0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e0e:	d1d8      	bne.n	8005dc2 <_dtoa_r+0xa0a>
 8005e10:	9a00      	ldr	r2, [sp, #0]
 8005e12:	2339      	movs	r3, #57	@ 0x39
 8005e14:	7013      	strb	r3, [r2, #0]
 8005e16:	4633      	mov	r3, r6
 8005e18:	461e      	mov	r6, r3
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e20:	2a39      	cmp	r2, #57	@ 0x39
 8005e22:	d052      	beq.n	8005eca <_dtoa_r+0xb12>
 8005e24:	3201      	adds	r2, #1
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	e612      	b.n	8005a50 <_dtoa_r+0x698>
 8005e2a:	2a00      	cmp	r2, #0
 8005e2c:	dd07      	ble.n	8005e3e <_dtoa_r+0xa86>
 8005e2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e32:	d0ed      	beq.n	8005e10 <_dtoa_r+0xa58>
 8005e34:	9a00      	ldr	r2, [sp, #0]
 8005e36:	f108 0301 	add.w	r3, r8, #1
 8005e3a:	7013      	strb	r3, [r2, #0]
 8005e3c:	e608      	b.n	8005a50 <_dtoa_r+0x698>
 8005e3e:	9b07      	ldr	r3, [sp, #28]
 8005e40:	9a07      	ldr	r2, [sp, #28]
 8005e42:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005e46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d028      	beq.n	8005e9e <_dtoa_r+0xae6>
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	2300      	movs	r3, #0
 8005e50:	220a      	movs	r2, #10
 8005e52:	4658      	mov	r0, fp
 8005e54:	f000 f9d6 	bl	8006204 <__multadd>
 8005e58:	42af      	cmp	r7, r5
 8005e5a:	4681      	mov	r9, r0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	f04f 020a 	mov.w	r2, #10
 8005e64:	4639      	mov	r1, r7
 8005e66:	4658      	mov	r0, fp
 8005e68:	d107      	bne.n	8005e7a <_dtoa_r+0xac2>
 8005e6a:	f000 f9cb 	bl	8006204 <__multadd>
 8005e6e:	4607      	mov	r7, r0
 8005e70:	4605      	mov	r5, r0
 8005e72:	9b07      	ldr	r3, [sp, #28]
 8005e74:	3301      	adds	r3, #1
 8005e76:	9307      	str	r3, [sp, #28]
 8005e78:	e774      	b.n	8005d64 <_dtoa_r+0x9ac>
 8005e7a:	f000 f9c3 	bl	8006204 <__multadd>
 8005e7e:	4629      	mov	r1, r5
 8005e80:	4607      	mov	r7, r0
 8005e82:	2300      	movs	r3, #0
 8005e84:	220a      	movs	r2, #10
 8005e86:	4658      	mov	r0, fp
 8005e88:	f000 f9bc 	bl	8006204 <__multadd>
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	e7f0      	b.n	8005e72 <_dtoa_r+0xaba>
 8005e90:	9b00      	ldr	r3, [sp, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bfcc      	ite	gt
 8005e96:	461e      	movgt	r6, r3
 8005e98:	2601      	movle	r6, #1
 8005e9a:	4456      	add	r6, sl
 8005e9c:	2700      	movs	r7, #0
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	4658      	mov	r0, fp
 8005ea4:	f000 fba4 	bl	80065f0 <__lshift>
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4681      	mov	r9, r0
 8005eac:	f000 fc0c 	bl	80066c8 <__mcmp>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	dcb0      	bgt.n	8005e16 <_dtoa_r+0xa5e>
 8005eb4:	d102      	bne.n	8005ebc <_dtoa_r+0xb04>
 8005eb6:	f018 0f01 	tst.w	r8, #1
 8005eba:	d1ac      	bne.n	8005e16 <_dtoa_r+0xa5e>
 8005ebc:	4633      	mov	r3, r6
 8005ebe:	461e      	mov	r6, r3
 8005ec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ec4:	2a30      	cmp	r2, #48	@ 0x30
 8005ec6:	d0fa      	beq.n	8005ebe <_dtoa_r+0xb06>
 8005ec8:	e5c2      	b.n	8005a50 <_dtoa_r+0x698>
 8005eca:	459a      	cmp	sl, r3
 8005ecc:	d1a4      	bne.n	8005e18 <_dtoa_r+0xa60>
 8005ece:	9b04      	ldr	r3, [sp, #16]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	9304      	str	r3, [sp, #16]
 8005ed4:	2331      	movs	r3, #49	@ 0x31
 8005ed6:	f88a 3000 	strb.w	r3, [sl]
 8005eda:	e5b9      	b.n	8005a50 <_dtoa_r+0x698>
 8005edc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ede:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005f3c <_dtoa_r+0xb84>
 8005ee2:	b11b      	cbz	r3, 8005eec <_dtoa_r+0xb34>
 8005ee4:	f10a 0308 	add.w	r3, sl, #8
 8005ee8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	4650      	mov	r0, sl
 8005eee:	b019      	add	sp, #100	@ 0x64
 8005ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	f77f ae37 	ble.w	8005b6a <_dtoa_r+0x7b2>
 8005efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005efe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f00:	2001      	movs	r0, #1
 8005f02:	e655      	b.n	8005bb0 <_dtoa_r+0x7f8>
 8005f04:	9b00      	ldr	r3, [sp, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f77f aed6 	ble.w	8005cb8 <_dtoa_r+0x900>
 8005f0c:	4656      	mov	r6, sl
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4648      	mov	r0, r9
 8005f12:	f7ff f9c7 	bl	80052a4 <quorem>
 8005f16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005f1a:	f806 8b01 	strb.w	r8, [r6], #1
 8005f1e:	9b00      	ldr	r3, [sp, #0]
 8005f20:	eba6 020a 	sub.w	r2, r6, sl
 8005f24:	4293      	cmp	r3, r2
 8005f26:	ddb3      	ble.n	8005e90 <_dtoa_r+0xad8>
 8005f28:	4649      	mov	r1, r9
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	220a      	movs	r2, #10
 8005f2e:	4658      	mov	r0, fp
 8005f30:	f000 f968 	bl	8006204 <__multadd>
 8005f34:	4681      	mov	r9, r0
 8005f36:	e7ea      	b.n	8005f0e <_dtoa_r+0xb56>
 8005f38:	080090e5 	.word	0x080090e5
 8005f3c:	08009069 	.word	0x08009069

08005f40 <_free_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4605      	mov	r5, r0
 8005f44:	2900      	cmp	r1, #0
 8005f46:	d041      	beq.n	8005fcc <_free_r+0x8c>
 8005f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f4c:	1f0c      	subs	r4, r1, #4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	bfb8      	it	lt
 8005f52:	18e4      	addlt	r4, r4, r3
 8005f54:	f000 f8e8 	bl	8006128 <__malloc_lock>
 8005f58:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd0 <_free_r+0x90>)
 8005f5a:	6813      	ldr	r3, [r2, #0]
 8005f5c:	b933      	cbnz	r3, 8005f6c <_free_r+0x2c>
 8005f5e:	6063      	str	r3, [r4, #4]
 8005f60:	6014      	str	r4, [r2, #0]
 8005f62:	4628      	mov	r0, r5
 8005f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f68:	f000 b8e4 	b.w	8006134 <__malloc_unlock>
 8005f6c:	42a3      	cmp	r3, r4
 8005f6e:	d908      	bls.n	8005f82 <_free_r+0x42>
 8005f70:	6820      	ldr	r0, [r4, #0]
 8005f72:	1821      	adds	r1, r4, r0
 8005f74:	428b      	cmp	r3, r1
 8005f76:	bf01      	itttt	eq
 8005f78:	6819      	ldreq	r1, [r3, #0]
 8005f7a:	685b      	ldreq	r3, [r3, #4]
 8005f7c:	1809      	addeq	r1, r1, r0
 8005f7e:	6021      	streq	r1, [r4, #0]
 8005f80:	e7ed      	b.n	8005f5e <_free_r+0x1e>
 8005f82:	461a      	mov	r2, r3
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	b10b      	cbz	r3, 8005f8c <_free_r+0x4c>
 8005f88:	42a3      	cmp	r3, r4
 8005f8a:	d9fa      	bls.n	8005f82 <_free_r+0x42>
 8005f8c:	6811      	ldr	r1, [r2, #0]
 8005f8e:	1850      	adds	r0, r2, r1
 8005f90:	42a0      	cmp	r0, r4
 8005f92:	d10b      	bne.n	8005fac <_free_r+0x6c>
 8005f94:	6820      	ldr	r0, [r4, #0]
 8005f96:	4401      	add	r1, r0
 8005f98:	1850      	adds	r0, r2, r1
 8005f9a:	4283      	cmp	r3, r0
 8005f9c:	6011      	str	r1, [r2, #0]
 8005f9e:	d1e0      	bne.n	8005f62 <_free_r+0x22>
 8005fa0:	6818      	ldr	r0, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	6053      	str	r3, [r2, #4]
 8005fa6:	4408      	add	r0, r1
 8005fa8:	6010      	str	r0, [r2, #0]
 8005faa:	e7da      	b.n	8005f62 <_free_r+0x22>
 8005fac:	d902      	bls.n	8005fb4 <_free_r+0x74>
 8005fae:	230c      	movs	r3, #12
 8005fb0:	602b      	str	r3, [r5, #0]
 8005fb2:	e7d6      	b.n	8005f62 <_free_r+0x22>
 8005fb4:	6820      	ldr	r0, [r4, #0]
 8005fb6:	1821      	adds	r1, r4, r0
 8005fb8:	428b      	cmp	r3, r1
 8005fba:	bf04      	itt	eq
 8005fbc:	6819      	ldreq	r1, [r3, #0]
 8005fbe:	685b      	ldreq	r3, [r3, #4]
 8005fc0:	6063      	str	r3, [r4, #4]
 8005fc2:	bf04      	itt	eq
 8005fc4:	1809      	addeq	r1, r1, r0
 8005fc6:	6021      	streq	r1, [r4, #0]
 8005fc8:	6054      	str	r4, [r2, #4]
 8005fca:	e7ca      	b.n	8005f62 <_free_r+0x22>
 8005fcc:	bd38      	pop	{r3, r4, r5, pc}
 8005fce:	bf00      	nop
 8005fd0:	200003bc 	.word	0x200003bc

08005fd4 <malloc>:
 8005fd4:	4b02      	ldr	r3, [pc, #8]	@ (8005fe0 <malloc+0xc>)
 8005fd6:	4601      	mov	r1, r0
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	f000 b825 	b.w	8006028 <_malloc_r>
 8005fde:	bf00      	nop
 8005fe0:	20000018 	.word	0x20000018

08005fe4 <sbrk_aligned>:
 8005fe4:	b570      	push	{r4, r5, r6, lr}
 8005fe6:	4e0f      	ldr	r6, [pc, #60]	@ (8006024 <sbrk_aligned+0x40>)
 8005fe8:	460c      	mov	r4, r1
 8005fea:	6831      	ldr	r1, [r6, #0]
 8005fec:	4605      	mov	r5, r0
 8005fee:	b911      	cbnz	r1, 8005ff6 <sbrk_aligned+0x12>
 8005ff0:	f001 ffd2 	bl	8007f98 <_sbrk_r>
 8005ff4:	6030      	str	r0, [r6, #0]
 8005ff6:	4621      	mov	r1, r4
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	f001 ffcd 	bl	8007f98 <_sbrk_r>
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	d103      	bne.n	800600a <sbrk_aligned+0x26>
 8006002:	f04f 34ff 	mov.w	r4, #4294967295
 8006006:	4620      	mov	r0, r4
 8006008:	bd70      	pop	{r4, r5, r6, pc}
 800600a:	1cc4      	adds	r4, r0, #3
 800600c:	f024 0403 	bic.w	r4, r4, #3
 8006010:	42a0      	cmp	r0, r4
 8006012:	d0f8      	beq.n	8006006 <sbrk_aligned+0x22>
 8006014:	1a21      	subs	r1, r4, r0
 8006016:	4628      	mov	r0, r5
 8006018:	f001 ffbe 	bl	8007f98 <_sbrk_r>
 800601c:	3001      	adds	r0, #1
 800601e:	d1f2      	bne.n	8006006 <sbrk_aligned+0x22>
 8006020:	e7ef      	b.n	8006002 <sbrk_aligned+0x1e>
 8006022:	bf00      	nop
 8006024:	200003b8 	.word	0x200003b8

08006028 <_malloc_r>:
 8006028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800602c:	1ccd      	adds	r5, r1, #3
 800602e:	f025 0503 	bic.w	r5, r5, #3
 8006032:	3508      	adds	r5, #8
 8006034:	2d0c      	cmp	r5, #12
 8006036:	bf38      	it	cc
 8006038:	250c      	movcc	r5, #12
 800603a:	2d00      	cmp	r5, #0
 800603c:	4606      	mov	r6, r0
 800603e:	db01      	blt.n	8006044 <_malloc_r+0x1c>
 8006040:	42a9      	cmp	r1, r5
 8006042:	d904      	bls.n	800604e <_malloc_r+0x26>
 8006044:	230c      	movs	r3, #12
 8006046:	6033      	str	r3, [r6, #0]
 8006048:	2000      	movs	r0, #0
 800604a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800604e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006124 <_malloc_r+0xfc>
 8006052:	f000 f869 	bl	8006128 <__malloc_lock>
 8006056:	f8d8 3000 	ldr.w	r3, [r8]
 800605a:	461c      	mov	r4, r3
 800605c:	bb44      	cbnz	r4, 80060b0 <_malloc_r+0x88>
 800605e:	4629      	mov	r1, r5
 8006060:	4630      	mov	r0, r6
 8006062:	f7ff ffbf 	bl	8005fe4 <sbrk_aligned>
 8006066:	1c43      	adds	r3, r0, #1
 8006068:	4604      	mov	r4, r0
 800606a:	d158      	bne.n	800611e <_malloc_r+0xf6>
 800606c:	f8d8 4000 	ldr.w	r4, [r8]
 8006070:	4627      	mov	r7, r4
 8006072:	2f00      	cmp	r7, #0
 8006074:	d143      	bne.n	80060fe <_malloc_r+0xd6>
 8006076:	2c00      	cmp	r4, #0
 8006078:	d04b      	beq.n	8006112 <_malloc_r+0xea>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	4639      	mov	r1, r7
 800607e:	4630      	mov	r0, r6
 8006080:	eb04 0903 	add.w	r9, r4, r3
 8006084:	f001 ff88 	bl	8007f98 <_sbrk_r>
 8006088:	4581      	cmp	r9, r0
 800608a:	d142      	bne.n	8006112 <_malloc_r+0xea>
 800608c:	6821      	ldr	r1, [r4, #0]
 800608e:	1a6d      	subs	r5, r5, r1
 8006090:	4629      	mov	r1, r5
 8006092:	4630      	mov	r0, r6
 8006094:	f7ff ffa6 	bl	8005fe4 <sbrk_aligned>
 8006098:	3001      	adds	r0, #1
 800609a:	d03a      	beq.n	8006112 <_malloc_r+0xea>
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	442b      	add	r3, r5
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	f8d8 3000 	ldr.w	r3, [r8]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	bb62      	cbnz	r2, 8006104 <_malloc_r+0xdc>
 80060aa:	f8c8 7000 	str.w	r7, [r8]
 80060ae:	e00f      	b.n	80060d0 <_malloc_r+0xa8>
 80060b0:	6822      	ldr	r2, [r4, #0]
 80060b2:	1b52      	subs	r2, r2, r5
 80060b4:	d420      	bmi.n	80060f8 <_malloc_r+0xd0>
 80060b6:	2a0b      	cmp	r2, #11
 80060b8:	d917      	bls.n	80060ea <_malloc_r+0xc2>
 80060ba:	1961      	adds	r1, r4, r5
 80060bc:	42a3      	cmp	r3, r4
 80060be:	6025      	str	r5, [r4, #0]
 80060c0:	bf18      	it	ne
 80060c2:	6059      	strne	r1, [r3, #4]
 80060c4:	6863      	ldr	r3, [r4, #4]
 80060c6:	bf08      	it	eq
 80060c8:	f8c8 1000 	streq.w	r1, [r8]
 80060cc:	5162      	str	r2, [r4, r5]
 80060ce:	604b      	str	r3, [r1, #4]
 80060d0:	4630      	mov	r0, r6
 80060d2:	f000 f82f 	bl	8006134 <__malloc_unlock>
 80060d6:	f104 000b 	add.w	r0, r4, #11
 80060da:	1d23      	adds	r3, r4, #4
 80060dc:	f020 0007 	bic.w	r0, r0, #7
 80060e0:	1ac2      	subs	r2, r0, r3
 80060e2:	bf1c      	itt	ne
 80060e4:	1a1b      	subne	r3, r3, r0
 80060e6:	50a3      	strne	r3, [r4, r2]
 80060e8:	e7af      	b.n	800604a <_malloc_r+0x22>
 80060ea:	6862      	ldr	r2, [r4, #4]
 80060ec:	42a3      	cmp	r3, r4
 80060ee:	bf0c      	ite	eq
 80060f0:	f8c8 2000 	streq.w	r2, [r8]
 80060f4:	605a      	strne	r2, [r3, #4]
 80060f6:	e7eb      	b.n	80060d0 <_malloc_r+0xa8>
 80060f8:	4623      	mov	r3, r4
 80060fa:	6864      	ldr	r4, [r4, #4]
 80060fc:	e7ae      	b.n	800605c <_malloc_r+0x34>
 80060fe:	463c      	mov	r4, r7
 8006100:	687f      	ldr	r7, [r7, #4]
 8006102:	e7b6      	b.n	8006072 <_malloc_r+0x4a>
 8006104:	461a      	mov	r2, r3
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	42a3      	cmp	r3, r4
 800610a:	d1fb      	bne.n	8006104 <_malloc_r+0xdc>
 800610c:	2300      	movs	r3, #0
 800610e:	6053      	str	r3, [r2, #4]
 8006110:	e7de      	b.n	80060d0 <_malloc_r+0xa8>
 8006112:	230c      	movs	r3, #12
 8006114:	6033      	str	r3, [r6, #0]
 8006116:	4630      	mov	r0, r6
 8006118:	f000 f80c 	bl	8006134 <__malloc_unlock>
 800611c:	e794      	b.n	8006048 <_malloc_r+0x20>
 800611e:	6005      	str	r5, [r0, #0]
 8006120:	e7d6      	b.n	80060d0 <_malloc_r+0xa8>
 8006122:	bf00      	nop
 8006124:	200003bc 	.word	0x200003bc

08006128 <__malloc_lock>:
 8006128:	4801      	ldr	r0, [pc, #4]	@ (8006130 <__malloc_lock+0x8>)
 800612a:	f7ff b8b2 	b.w	8005292 <__retarget_lock_acquire_recursive>
 800612e:	bf00      	nop
 8006130:	200003b4 	.word	0x200003b4

08006134 <__malloc_unlock>:
 8006134:	4801      	ldr	r0, [pc, #4]	@ (800613c <__malloc_unlock+0x8>)
 8006136:	f7ff b8ad 	b.w	8005294 <__retarget_lock_release_recursive>
 800613a:	bf00      	nop
 800613c:	200003b4 	.word	0x200003b4

08006140 <_Balloc>:
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	69c6      	ldr	r6, [r0, #28]
 8006144:	4604      	mov	r4, r0
 8006146:	460d      	mov	r5, r1
 8006148:	b976      	cbnz	r6, 8006168 <_Balloc+0x28>
 800614a:	2010      	movs	r0, #16
 800614c:	f7ff ff42 	bl	8005fd4 <malloc>
 8006150:	4602      	mov	r2, r0
 8006152:	61e0      	str	r0, [r4, #28]
 8006154:	b920      	cbnz	r0, 8006160 <_Balloc+0x20>
 8006156:	4b18      	ldr	r3, [pc, #96]	@ (80061b8 <_Balloc+0x78>)
 8006158:	4818      	ldr	r0, [pc, #96]	@ (80061bc <_Balloc+0x7c>)
 800615a:	216b      	movs	r1, #107	@ 0x6b
 800615c:	f001 ff44 	bl	8007fe8 <__assert_func>
 8006160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006164:	6006      	str	r6, [r0, #0]
 8006166:	60c6      	str	r6, [r0, #12]
 8006168:	69e6      	ldr	r6, [r4, #28]
 800616a:	68f3      	ldr	r3, [r6, #12]
 800616c:	b183      	cbz	r3, 8006190 <_Balloc+0x50>
 800616e:	69e3      	ldr	r3, [r4, #28]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006176:	b9b8      	cbnz	r0, 80061a8 <_Balloc+0x68>
 8006178:	2101      	movs	r1, #1
 800617a:	fa01 f605 	lsl.w	r6, r1, r5
 800617e:	1d72      	adds	r2, r6, #5
 8006180:	0092      	lsls	r2, r2, #2
 8006182:	4620      	mov	r0, r4
 8006184:	f001 ff4e 	bl	8008024 <_calloc_r>
 8006188:	b160      	cbz	r0, 80061a4 <_Balloc+0x64>
 800618a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800618e:	e00e      	b.n	80061ae <_Balloc+0x6e>
 8006190:	2221      	movs	r2, #33	@ 0x21
 8006192:	2104      	movs	r1, #4
 8006194:	4620      	mov	r0, r4
 8006196:	f001 ff45 	bl	8008024 <_calloc_r>
 800619a:	69e3      	ldr	r3, [r4, #28]
 800619c:	60f0      	str	r0, [r6, #12]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e4      	bne.n	800616e <_Balloc+0x2e>
 80061a4:	2000      	movs	r0, #0
 80061a6:	bd70      	pop	{r4, r5, r6, pc}
 80061a8:	6802      	ldr	r2, [r0, #0]
 80061aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061ae:	2300      	movs	r3, #0
 80061b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061b4:	e7f7      	b.n	80061a6 <_Balloc+0x66>
 80061b6:	bf00      	nop
 80061b8:	08009076 	.word	0x08009076
 80061bc:	080090f6 	.word	0x080090f6

080061c0 <_Bfree>:
 80061c0:	b570      	push	{r4, r5, r6, lr}
 80061c2:	69c6      	ldr	r6, [r0, #28]
 80061c4:	4605      	mov	r5, r0
 80061c6:	460c      	mov	r4, r1
 80061c8:	b976      	cbnz	r6, 80061e8 <_Bfree+0x28>
 80061ca:	2010      	movs	r0, #16
 80061cc:	f7ff ff02 	bl	8005fd4 <malloc>
 80061d0:	4602      	mov	r2, r0
 80061d2:	61e8      	str	r0, [r5, #28]
 80061d4:	b920      	cbnz	r0, 80061e0 <_Bfree+0x20>
 80061d6:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <_Bfree+0x3c>)
 80061d8:	4809      	ldr	r0, [pc, #36]	@ (8006200 <_Bfree+0x40>)
 80061da:	218f      	movs	r1, #143	@ 0x8f
 80061dc:	f001 ff04 	bl	8007fe8 <__assert_func>
 80061e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061e4:	6006      	str	r6, [r0, #0]
 80061e6:	60c6      	str	r6, [r0, #12]
 80061e8:	b13c      	cbz	r4, 80061fa <_Bfree+0x3a>
 80061ea:	69eb      	ldr	r3, [r5, #28]
 80061ec:	6862      	ldr	r2, [r4, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061f4:	6021      	str	r1, [r4, #0]
 80061f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
 80061fc:	08009076 	.word	0x08009076
 8006200:	080090f6 	.word	0x080090f6

08006204 <__multadd>:
 8006204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006208:	690d      	ldr	r5, [r1, #16]
 800620a:	4607      	mov	r7, r0
 800620c:	460c      	mov	r4, r1
 800620e:	461e      	mov	r6, r3
 8006210:	f101 0c14 	add.w	ip, r1, #20
 8006214:	2000      	movs	r0, #0
 8006216:	f8dc 3000 	ldr.w	r3, [ip]
 800621a:	b299      	uxth	r1, r3
 800621c:	fb02 6101 	mla	r1, r2, r1, r6
 8006220:	0c1e      	lsrs	r6, r3, #16
 8006222:	0c0b      	lsrs	r3, r1, #16
 8006224:	fb02 3306 	mla	r3, r2, r6, r3
 8006228:	b289      	uxth	r1, r1
 800622a:	3001      	adds	r0, #1
 800622c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006230:	4285      	cmp	r5, r0
 8006232:	f84c 1b04 	str.w	r1, [ip], #4
 8006236:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800623a:	dcec      	bgt.n	8006216 <__multadd+0x12>
 800623c:	b30e      	cbz	r6, 8006282 <__multadd+0x7e>
 800623e:	68a3      	ldr	r3, [r4, #8]
 8006240:	42ab      	cmp	r3, r5
 8006242:	dc19      	bgt.n	8006278 <__multadd+0x74>
 8006244:	6861      	ldr	r1, [r4, #4]
 8006246:	4638      	mov	r0, r7
 8006248:	3101      	adds	r1, #1
 800624a:	f7ff ff79 	bl	8006140 <_Balloc>
 800624e:	4680      	mov	r8, r0
 8006250:	b928      	cbnz	r0, 800625e <__multadd+0x5a>
 8006252:	4602      	mov	r2, r0
 8006254:	4b0c      	ldr	r3, [pc, #48]	@ (8006288 <__multadd+0x84>)
 8006256:	480d      	ldr	r0, [pc, #52]	@ (800628c <__multadd+0x88>)
 8006258:	21ba      	movs	r1, #186	@ 0xba
 800625a:	f001 fec5 	bl	8007fe8 <__assert_func>
 800625e:	6922      	ldr	r2, [r4, #16]
 8006260:	3202      	adds	r2, #2
 8006262:	f104 010c 	add.w	r1, r4, #12
 8006266:	0092      	lsls	r2, r2, #2
 8006268:	300c      	adds	r0, #12
 800626a:	f001 fea5 	bl	8007fb8 <memcpy>
 800626e:	4621      	mov	r1, r4
 8006270:	4638      	mov	r0, r7
 8006272:	f7ff ffa5 	bl	80061c0 <_Bfree>
 8006276:	4644      	mov	r4, r8
 8006278:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800627c:	3501      	adds	r5, #1
 800627e:	615e      	str	r6, [r3, #20]
 8006280:	6125      	str	r5, [r4, #16]
 8006282:	4620      	mov	r0, r4
 8006284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006288:	080090e5 	.word	0x080090e5
 800628c:	080090f6 	.word	0x080090f6

08006290 <__s2b>:
 8006290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006294:	460c      	mov	r4, r1
 8006296:	4615      	mov	r5, r2
 8006298:	461f      	mov	r7, r3
 800629a:	2209      	movs	r2, #9
 800629c:	3308      	adds	r3, #8
 800629e:	4606      	mov	r6, r0
 80062a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80062a4:	2100      	movs	r1, #0
 80062a6:	2201      	movs	r2, #1
 80062a8:	429a      	cmp	r2, r3
 80062aa:	db09      	blt.n	80062c0 <__s2b+0x30>
 80062ac:	4630      	mov	r0, r6
 80062ae:	f7ff ff47 	bl	8006140 <_Balloc>
 80062b2:	b940      	cbnz	r0, 80062c6 <__s2b+0x36>
 80062b4:	4602      	mov	r2, r0
 80062b6:	4b19      	ldr	r3, [pc, #100]	@ (800631c <__s2b+0x8c>)
 80062b8:	4819      	ldr	r0, [pc, #100]	@ (8006320 <__s2b+0x90>)
 80062ba:	21d3      	movs	r1, #211	@ 0xd3
 80062bc:	f001 fe94 	bl	8007fe8 <__assert_func>
 80062c0:	0052      	lsls	r2, r2, #1
 80062c2:	3101      	adds	r1, #1
 80062c4:	e7f0      	b.n	80062a8 <__s2b+0x18>
 80062c6:	9b08      	ldr	r3, [sp, #32]
 80062c8:	6143      	str	r3, [r0, #20]
 80062ca:	2d09      	cmp	r5, #9
 80062cc:	f04f 0301 	mov.w	r3, #1
 80062d0:	6103      	str	r3, [r0, #16]
 80062d2:	dd16      	ble.n	8006302 <__s2b+0x72>
 80062d4:	f104 0909 	add.w	r9, r4, #9
 80062d8:	46c8      	mov	r8, r9
 80062da:	442c      	add	r4, r5
 80062dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80062e0:	4601      	mov	r1, r0
 80062e2:	3b30      	subs	r3, #48	@ 0x30
 80062e4:	220a      	movs	r2, #10
 80062e6:	4630      	mov	r0, r6
 80062e8:	f7ff ff8c 	bl	8006204 <__multadd>
 80062ec:	45a0      	cmp	r8, r4
 80062ee:	d1f5      	bne.n	80062dc <__s2b+0x4c>
 80062f0:	f1a5 0408 	sub.w	r4, r5, #8
 80062f4:	444c      	add	r4, r9
 80062f6:	1b2d      	subs	r5, r5, r4
 80062f8:	1963      	adds	r3, r4, r5
 80062fa:	42bb      	cmp	r3, r7
 80062fc:	db04      	blt.n	8006308 <__s2b+0x78>
 80062fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006302:	340a      	adds	r4, #10
 8006304:	2509      	movs	r5, #9
 8006306:	e7f6      	b.n	80062f6 <__s2b+0x66>
 8006308:	f814 3b01 	ldrb.w	r3, [r4], #1
 800630c:	4601      	mov	r1, r0
 800630e:	3b30      	subs	r3, #48	@ 0x30
 8006310:	220a      	movs	r2, #10
 8006312:	4630      	mov	r0, r6
 8006314:	f7ff ff76 	bl	8006204 <__multadd>
 8006318:	e7ee      	b.n	80062f8 <__s2b+0x68>
 800631a:	bf00      	nop
 800631c:	080090e5 	.word	0x080090e5
 8006320:	080090f6 	.word	0x080090f6

08006324 <__hi0bits>:
 8006324:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006328:	4603      	mov	r3, r0
 800632a:	bf36      	itet	cc
 800632c:	0403      	lslcc	r3, r0, #16
 800632e:	2000      	movcs	r0, #0
 8006330:	2010      	movcc	r0, #16
 8006332:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006336:	bf3c      	itt	cc
 8006338:	021b      	lslcc	r3, r3, #8
 800633a:	3008      	addcc	r0, #8
 800633c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006340:	bf3c      	itt	cc
 8006342:	011b      	lslcc	r3, r3, #4
 8006344:	3004      	addcc	r0, #4
 8006346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800634a:	bf3c      	itt	cc
 800634c:	009b      	lslcc	r3, r3, #2
 800634e:	3002      	addcc	r0, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	db05      	blt.n	8006360 <__hi0bits+0x3c>
 8006354:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006358:	f100 0001 	add.w	r0, r0, #1
 800635c:	bf08      	it	eq
 800635e:	2020      	moveq	r0, #32
 8006360:	4770      	bx	lr

08006362 <__lo0bits>:
 8006362:	6803      	ldr	r3, [r0, #0]
 8006364:	4602      	mov	r2, r0
 8006366:	f013 0007 	ands.w	r0, r3, #7
 800636a:	d00b      	beq.n	8006384 <__lo0bits+0x22>
 800636c:	07d9      	lsls	r1, r3, #31
 800636e:	d421      	bmi.n	80063b4 <__lo0bits+0x52>
 8006370:	0798      	lsls	r0, r3, #30
 8006372:	bf49      	itett	mi
 8006374:	085b      	lsrmi	r3, r3, #1
 8006376:	089b      	lsrpl	r3, r3, #2
 8006378:	2001      	movmi	r0, #1
 800637a:	6013      	strmi	r3, [r2, #0]
 800637c:	bf5c      	itt	pl
 800637e:	6013      	strpl	r3, [r2, #0]
 8006380:	2002      	movpl	r0, #2
 8006382:	4770      	bx	lr
 8006384:	b299      	uxth	r1, r3
 8006386:	b909      	cbnz	r1, 800638c <__lo0bits+0x2a>
 8006388:	0c1b      	lsrs	r3, r3, #16
 800638a:	2010      	movs	r0, #16
 800638c:	b2d9      	uxtb	r1, r3
 800638e:	b909      	cbnz	r1, 8006394 <__lo0bits+0x32>
 8006390:	3008      	adds	r0, #8
 8006392:	0a1b      	lsrs	r3, r3, #8
 8006394:	0719      	lsls	r1, r3, #28
 8006396:	bf04      	itt	eq
 8006398:	091b      	lsreq	r3, r3, #4
 800639a:	3004      	addeq	r0, #4
 800639c:	0799      	lsls	r1, r3, #30
 800639e:	bf04      	itt	eq
 80063a0:	089b      	lsreq	r3, r3, #2
 80063a2:	3002      	addeq	r0, #2
 80063a4:	07d9      	lsls	r1, r3, #31
 80063a6:	d403      	bmi.n	80063b0 <__lo0bits+0x4e>
 80063a8:	085b      	lsrs	r3, r3, #1
 80063aa:	f100 0001 	add.w	r0, r0, #1
 80063ae:	d003      	beq.n	80063b8 <__lo0bits+0x56>
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	4770      	bx	lr
 80063b4:	2000      	movs	r0, #0
 80063b6:	4770      	bx	lr
 80063b8:	2020      	movs	r0, #32
 80063ba:	4770      	bx	lr

080063bc <__i2b>:
 80063bc:	b510      	push	{r4, lr}
 80063be:	460c      	mov	r4, r1
 80063c0:	2101      	movs	r1, #1
 80063c2:	f7ff febd 	bl	8006140 <_Balloc>
 80063c6:	4602      	mov	r2, r0
 80063c8:	b928      	cbnz	r0, 80063d6 <__i2b+0x1a>
 80063ca:	4b05      	ldr	r3, [pc, #20]	@ (80063e0 <__i2b+0x24>)
 80063cc:	4805      	ldr	r0, [pc, #20]	@ (80063e4 <__i2b+0x28>)
 80063ce:	f240 1145 	movw	r1, #325	@ 0x145
 80063d2:	f001 fe09 	bl	8007fe8 <__assert_func>
 80063d6:	2301      	movs	r3, #1
 80063d8:	6144      	str	r4, [r0, #20]
 80063da:	6103      	str	r3, [r0, #16]
 80063dc:	bd10      	pop	{r4, pc}
 80063de:	bf00      	nop
 80063e0:	080090e5 	.word	0x080090e5
 80063e4:	080090f6 	.word	0x080090f6

080063e8 <__multiply>:
 80063e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ec:	4614      	mov	r4, r2
 80063ee:	690a      	ldr	r2, [r1, #16]
 80063f0:	6923      	ldr	r3, [r4, #16]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	bfa8      	it	ge
 80063f6:	4623      	movge	r3, r4
 80063f8:	460f      	mov	r7, r1
 80063fa:	bfa4      	itt	ge
 80063fc:	460c      	movge	r4, r1
 80063fe:	461f      	movge	r7, r3
 8006400:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006404:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006408:	68a3      	ldr	r3, [r4, #8]
 800640a:	6861      	ldr	r1, [r4, #4]
 800640c:	eb0a 0609 	add.w	r6, sl, r9
 8006410:	42b3      	cmp	r3, r6
 8006412:	b085      	sub	sp, #20
 8006414:	bfb8      	it	lt
 8006416:	3101      	addlt	r1, #1
 8006418:	f7ff fe92 	bl	8006140 <_Balloc>
 800641c:	b930      	cbnz	r0, 800642c <__multiply+0x44>
 800641e:	4602      	mov	r2, r0
 8006420:	4b44      	ldr	r3, [pc, #272]	@ (8006534 <__multiply+0x14c>)
 8006422:	4845      	ldr	r0, [pc, #276]	@ (8006538 <__multiply+0x150>)
 8006424:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006428:	f001 fdde 	bl	8007fe8 <__assert_func>
 800642c:	f100 0514 	add.w	r5, r0, #20
 8006430:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006434:	462b      	mov	r3, r5
 8006436:	2200      	movs	r2, #0
 8006438:	4543      	cmp	r3, r8
 800643a:	d321      	bcc.n	8006480 <__multiply+0x98>
 800643c:	f107 0114 	add.w	r1, r7, #20
 8006440:	f104 0214 	add.w	r2, r4, #20
 8006444:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006448:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800644c:	9302      	str	r3, [sp, #8]
 800644e:	1b13      	subs	r3, r2, r4
 8006450:	3b15      	subs	r3, #21
 8006452:	f023 0303 	bic.w	r3, r3, #3
 8006456:	3304      	adds	r3, #4
 8006458:	f104 0715 	add.w	r7, r4, #21
 800645c:	42ba      	cmp	r2, r7
 800645e:	bf38      	it	cc
 8006460:	2304      	movcc	r3, #4
 8006462:	9301      	str	r3, [sp, #4]
 8006464:	9b02      	ldr	r3, [sp, #8]
 8006466:	9103      	str	r1, [sp, #12]
 8006468:	428b      	cmp	r3, r1
 800646a:	d80c      	bhi.n	8006486 <__multiply+0x9e>
 800646c:	2e00      	cmp	r6, #0
 800646e:	dd03      	ble.n	8006478 <__multiply+0x90>
 8006470:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006474:	2b00      	cmp	r3, #0
 8006476:	d05b      	beq.n	8006530 <__multiply+0x148>
 8006478:	6106      	str	r6, [r0, #16]
 800647a:	b005      	add	sp, #20
 800647c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006480:	f843 2b04 	str.w	r2, [r3], #4
 8006484:	e7d8      	b.n	8006438 <__multiply+0x50>
 8006486:	f8b1 a000 	ldrh.w	sl, [r1]
 800648a:	f1ba 0f00 	cmp.w	sl, #0
 800648e:	d024      	beq.n	80064da <__multiply+0xf2>
 8006490:	f104 0e14 	add.w	lr, r4, #20
 8006494:	46a9      	mov	r9, r5
 8006496:	f04f 0c00 	mov.w	ip, #0
 800649a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800649e:	f8d9 3000 	ldr.w	r3, [r9]
 80064a2:	fa1f fb87 	uxth.w	fp, r7
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80064ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80064b0:	f8d9 7000 	ldr.w	r7, [r9]
 80064b4:	4463      	add	r3, ip
 80064b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80064ba:	fb0a c70b 	mla	r7, sl, fp, ip
 80064be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80064c8:	4572      	cmp	r2, lr
 80064ca:	f849 3b04 	str.w	r3, [r9], #4
 80064ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80064d2:	d8e2      	bhi.n	800649a <__multiply+0xb2>
 80064d4:	9b01      	ldr	r3, [sp, #4]
 80064d6:	f845 c003 	str.w	ip, [r5, r3]
 80064da:	9b03      	ldr	r3, [sp, #12]
 80064dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80064e0:	3104      	adds	r1, #4
 80064e2:	f1b9 0f00 	cmp.w	r9, #0
 80064e6:	d021      	beq.n	800652c <__multiply+0x144>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	f104 0c14 	add.w	ip, r4, #20
 80064ee:	46ae      	mov	lr, r5
 80064f0:	f04f 0a00 	mov.w	sl, #0
 80064f4:	f8bc b000 	ldrh.w	fp, [ip]
 80064f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80064fc:	fb09 770b 	mla	r7, r9, fp, r7
 8006500:	4457      	add	r7, sl
 8006502:	b29b      	uxth	r3, r3
 8006504:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006508:	f84e 3b04 	str.w	r3, [lr], #4
 800650c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006510:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006514:	f8be 3000 	ldrh.w	r3, [lr]
 8006518:	fb09 330a 	mla	r3, r9, sl, r3
 800651c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006520:	4562      	cmp	r2, ip
 8006522:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006526:	d8e5      	bhi.n	80064f4 <__multiply+0x10c>
 8006528:	9f01      	ldr	r7, [sp, #4]
 800652a:	51eb      	str	r3, [r5, r7]
 800652c:	3504      	adds	r5, #4
 800652e:	e799      	b.n	8006464 <__multiply+0x7c>
 8006530:	3e01      	subs	r6, #1
 8006532:	e79b      	b.n	800646c <__multiply+0x84>
 8006534:	080090e5 	.word	0x080090e5
 8006538:	080090f6 	.word	0x080090f6

0800653c <__pow5mult>:
 800653c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006540:	4615      	mov	r5, r2
 8006542:	f012 0203 	ands.w	r2, r2, #3
 8006546:	4607      	mov	r7, r0
 8006548:	460e      	mov	r6, r1
 800654a:	d007      	beq.n	800655c <__pow5mult+0x20>
 800654c:	4c25      	ldr	r4, [pc, #148]	@ (80065e4 <__pow5mult+0xa8>)
 800654e:	3a01      	subs	r2, #1
 8006550:	2300      	movs	r3, #0
 8006552:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006556:	f7ff fe55 	bl	8006204 <__multadd>
 800655a:	4606      	mov	r6, r0
 800655c:	10ad      	asrs	r5, r5, #2
 800655e:	d03d      	beq.n	80065dc <__pow5mult+0xa0>
 8006560:	69fc      	ldr	r4, [r7, #28]
 8006562:	b97c      	cbnz	r4, 8006584 <__pow5mult+0x48>
 8006564:	2010      	movs	r0, #16
 8006566:	f7ff fd35 	bl	8005fd4 <malloc>
 800656a:	4602      	mov	r2, r0
 800656c:	61f8      	str	r0, [r7, #28]
 800656e:	b928      	cbnz	r0, 800657c <__pow5mult+0x40>
 8006570:	4b1d      	ldr	r3, [pc, #116]	@ (80065e8 <__pow5mult+0xac>)
 8006572:	481e      	ldr	r0, [pc, #120]	@ (80065ec <__pow5mult+0xb0>)
 8006574:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006578:	f001 fd36 	bl	8007fe8 <__assert_func>
 800657c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006580:	6004      	str	r4, [r0, #0]
 8006582:	60c4      	str	r4, [r0, #12]
 8006584:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006588:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800658c:	b94c      	cbnz	r4, 80065a2 <__pow5mult+0x66>
 800658e:	f240 2171 	movw	r1, #625	@ 0x271
 8006592:	4638      	mov	r0, r7
 8006594:	f7ff ff12 	bl	80063bc <__i2b>
 8006598:	2300      	movs	r3, #0
 800659a:	f8c8 0008 	str.w	r0, [r8, #8]
 800659e:	4604      	mov	r4, r0
 80065a0:	6003      	str	r3, [r0, #0]
 80065a2:	f04f 0900 	mov.w	r9, #0
 80065a6:	07eb      	lsls	r3, r5, #31
 80065a8:	d50a      	bpl.n	80065c0 <__pow5mult+0x84>
 80065aa:	4631      	mov	r1, r6
 80065ac:	4622      	mov	r2, r4
 80065ae:	4638      	mov	r0, r7
 80065b0:	f7ff ff1a 	bl	80063e8 <__multiply>
 80065b4:	4631      	mov	r1, r6
 80065b6:	4680      	mov	r8, r0
 80065b8:	4638      	mov	r0, r7
 80065ba:	f7ff fe01 	bl	80061c0 <_Bfree>
 80065be:	4646      	mov	r6, r8
 80065c0:	106d      	asrs	r5, r5, #1
 80065c2:	d00b      	beq.n	80065dc <__pow5mult+0xa0>
 80065c4:	6820      	ldr	r0, [r4, #0]
 80065c6:	b938      	cbnz	r0, 80065d8 <__pow5mult+0x9c>
 80065c8:	4622      	mov	r2, r4
 80065ca:	4621      	mov	r1, r4
 80065cc:	4638      	mov	r0, r7
 80065ce:	f7ff ff0b 	bl	80063e8 <__multiply>
 80065d2:	6020      	str	r0, [r4, #0]
 80065d4:	f8c0 9000 	str.w	r9, [r0]
 80065d8:	4604      	mov	r4, r0
 80065da:	e7e4      	b.n	80065a6 <__pow5mult+0x6a>
 80065dc:	4630      	mov	r0, r6
 80065de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065e2:	bf00      	nop
 80065e4:	08009150 	.word	0x08009150
 80065e8:	08009076 	.word	0x08009076
 80065ec:	080090f6 	.word	0x080090f6

080065f0 <__lshift>:
 80065f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f4:	460c      	mov	r4, r1
 80065f6:	6849      	ldr	r1, [r1, #4]
 80065f8:	6923      	ldr	r3, [r4, #16]
 80065fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80065fe:	68a3      	ldr	r3, [r4, #8]
 8006600:	4607      	mov	r7, r0
 8006602:	4691      	mov	r9, r2
 8006604:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006608:	f108 0601 	add.w	r6, r8, #1
 800660c:	42b3      	cmp	r3, r6
 800660e:	db0b      	blt.n	8006628 <__lshift+0x38>
 8006610:	4638      	mov	r0, r7
 8006612:	f7ff fd95 	bl	8006140 <_Balloc>
 8006616:	4605      	mov	r5, r0
 8006618:	b948      	cbnz	r0, 800662e <__lshift+0x3e>
 800661a:	4602      	mov	r2, r0
 800661c:	4b28      	ldr	r3, [pc, #160]	@ (80066c0 <__lshift+0xd0>)
 800661e:	4829      	ldr	r0, [pc, #164]	@ (80066c4 <__lshift+0xd4>)
 8006620:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006624:	f001 fce0 	bl	8007fe8 <__assert_func>
 8006628:	3101      	adds	r1, #1
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	e7ee      	b.n	800660c <__lshift+0x1c>
 800662e:	2300      	movs	r3, #0
 8006630:	f100 0114 	add.w	r1, r0, #20
 8006634:	f100 0210 	add.w	r2, r0, #16
 8006638:	4618      	mov	r0, r3
 800663a:	4553      	cmp	r3, sl
 800663c:	db33      	blt.n	80066a6 <__lshift+0xb6>
 800663e:	6920      	ldr	r0, [r4, #16]
 8006640:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006644:	f104 0314 	add.w	r3, r4, #20
 8006648:	f019 091f 	ands.w	r9, r9, #31
 800664c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006650:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006654:	d02b      	beq.n	80066ae <__lshift+0xbe>
 8006656:	f1c9 0e20 	rsb	lr, r9, #32
 800665a:	468a      	mov	sl, r1
 800665c:	2200      	movs	r2, #0
 800665e:	6818      	ldr	r0, [r3, #0]
 8006660:	fa00 f009 	lsl.w	r0, r0, r9
 8006664:	4310      	orrs	r0, r2
 8006666:	f84a 0b04 	str.w	r0, [sl], #4
 800666a:	f853 2b04 	ldr.w	r2, [r3], #4
 800666e:	459c      	cmp	ip, r3
 8006670:	fa22 f20e 	lsr.w	r2, r2, lr
 8006674:	d8f3      	bhi.n	800665e <__lshift+0x6e>
 8006676:	ebac 0304 	sub.w	r3, ip, r4
 800667a:	3b15      	subs	r3, #21
 800667c:	f023 0303 	bic.w	r3, r3, #3
 8006680:	3304      	adds	r3, #4
 8006682:	f104 0015 	add.w	r0, r4, #21
 8006686:	4584      	cmp	ip, r0
 8006688:	bf38      	it	cc
 800668a:	2304      	movcc	r3, #4
 800668c:	50ca      	str	r2, [r1, r3]
 800668e:	b10a      	cbz	r2, 8006694 <__lshift+0xa4>
 8006690:	f108 0602 	add.w	r6, r8, #2
 8006694:	3e01      	subs	r6, #1
 8006696:	4638      	mov	r0, r7
 8006698:	612e      	str	r6, [r5, #16]
 800669a:	4621      	mov	r1, r4
 800669c:	f7ff fd90 	bl	80061c0 <_Bfree>
 80066a0:	4628      	mov	r0, r5
 80066a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80066aa:	3301      	adds	r3, #1
 80066ac:	e7c5      	b.n	800663a <__lshift+0x4a>
 80066ae:	3904      	subs	r1, #4
 80066b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80066b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80066b8:	459c      	cmp	ip, r3
 80066ba:	d8f9      	bhi.n	80066b0 <__lshift+0xc0>
 80066bc:	e7ea      	b.n	8006694 <__lshift+0xa4>
 80066be:	bf00      	nop
 80066c0:	080090e5 	.word	0x080090e5
 80066c4:	080090f6 	.word	0x080090f6

080066c8 <__mcmp>:
 80066c8:	690a      	ldr	r2, [r1, #16]
 80066ca:	4603      	mov	r3, r0
 80066cc:	6900      	ldr	r0, [r0, #16]
 80066ce:	1a80      	subs	r0, r0, r2
 80066d0:	b530      	push	{r4, r5, lr}
 80066d2:	d10e      	bne.n	80066f2 <__mcmp+0x2a>
 80066d4:	3314      	adds	r3, #20
 80066d6:	3114      	adds	r1, #20
 80066d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80066dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80066e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80066e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80066e8:	4295      	cmp	r5, r2
 80066ea:	d003      	beq.n	80066f4 <__mcmp+0x2c>
 80066ec:	d205      	bcs.n	80066fa <__mcmp+0x32>
 80066ee:	f04f 30ff 	mov.w	r0, #4294967295
 80066f2:	bd30      	pop	{r4, r5, pc}
 80066f4:	42a3      	cmp	r3, r4
 80066f6:	d3f3      	bcc.n	80066e0 <__mcmp+0x18>
 80066f8:	e7fb      	b.n	80066f2 <__mcmp+0x2a>
 80066fa:	2001      	movs	r0, #1
 80066fc:	e7f9      	b.n	80066f2 <__mcmp+0x2a>
	...

08006700 <__mdiff>:
 8006700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	4689      	mov	r9, r1
 8006706:	4606      	mov	r6, r0
 8006708:	4611      	mov	r1, r2
 800670a:	4648      	mov	r0, r9
 800670c:	4614      	mov	r4, r2
 800670e:	f7ff ffdb 	bl	80066c8 <__mcmp>
 8006712:	1e05      	subs	r5, r0, #0
 8006714:	d112      	bne.n	800673c <__mdiff+0x3c>
 8006716:	4629      	mov	r1, r5
 8006718:	4630      	mov	r0, r6
 800671a:	f7ff fd11 	bl	8006140 <_Balloc>
 800671e:	4602      	mov	r2, r0
 8006720:	b928      	cbnz	r0, 800672e <__mdiff+0x2e>
 8006722:	4b3f      	ldr	r3, [pc, #252]	@ (8006820 <__mdiff+0x120>)
 8006724:	f240 2137 	movw	r1, #567	@ 0x237
 8006728:	483e      	ldr	r0, [pc, #248]	@ (8006824 <__mdiff+0x124>)
 800672a:	f001 fc5d 	bl	8007fe8 <__assert_func>
 800672e:	2301      	movs	r3, #1
 8006730:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006734:	4610      	mov	r0, r2
 8006736:	b003      	add	sp, #12
 8006738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800673c:	bfbc      	itt	lt
 800673e:	464b      	movlt	r3, r9
 8006740:	46a1      	movlt	r9, r4
 8006742:	4630      	mov	r0, r6
 8006744:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006748:	bfba      	itte	lt
 800674a:	461c      	movlt	r4, r3
 800674c:	2501      	movlt	r5, #1
 800674e:	2500      	movge	r5, #0
 8006750:	f7ff fcf6 	bl	8006140 <_Balloc>
 8006754:	4602      	mov	r2, r0
 8006756:	b918      	cbnz	r0, 8006760 <__mdiff+0x60>
 8006758:	4b31      	ldr	r3, [pc, #196]	@ (8006820 <__mdiff+0x120>)
 800675a:	f240 2145 	movw	r1, #581	@ 0x245
 800675e:	e7e3      	b.n	8006728 <__mdiff+0x28>
 8006760:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006764:	6926      	ldr	r6, [r4, #16]
 8006766:	60c5      	str	r5, [r0, #12]
 8006768:	f109 0310 	add.w	r3, r9, #16
 800676c:	f109 0514 	add.w	r5, r9, #20
 8006770:	f104 0e14 	add.w	lr, r4, #20
 8006774:	f100 0b14 	add.w	fp, r0, #20
 8006778:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800677c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	46d9      	mov	r9, fp
 8006784:	f04f 0c00 	mov.w	ip, #0
 8006788:	9b01      	ldr	r3, [sp, #4]
 800678a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800678e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006792:	9301      	str	r3, [sp, #4]
 8006794:	fa1f f38a 	uxth.w	r3, sl
 8006798:	4619      	mov	r1, r3
 800679a:	b283      	uxth	r3, r0
 800679c:	1acb      	subs	r3, r1, r3
 800679e:	0c00      	lsrs	r0, r0, #16
 80067a0:	4463      	add	r3, ip
 80067a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80067a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80067b0:	4576      	cmp	r6, lr
 80067b2:	f849 3b04 	str.w	r3, [r9], #4
 80067b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80067ba:	d8e5      	bhi.n	8006788 <__mdiff+0x88>
 80067bc:	1b33      	subs	r3, r6, r4
 80067be:	3b15      	subs	r3, #21
 80067c0:	f023 0303 	bic.w	r3, r3, #3
 80067c4:	3415      	adds	r4, #21
 80067c6:	3304      	adds	r3, #4
 80067c8:	42a6      	cmp	r6, r4
 80067ca:	bf38      	it	cc
 80067cc:	2304      	movcc	r3, #4
 80067ce:	441d      	add	r5, r3
 80067d0:	445b      	add	r3, fp
 80067d2:	461e      	mov	r6, r3
 80067d4:	462c      	mov	r4, r5
 80067d6:	4544      	cmp	r4, r8
 80067d8:	d30e      	bcc.n	80067f8 <__mdiff+0xf8>
 80067da:	f108 0103 	add.w	r1, r8, #3
 80067de:	1b49      	subs	r1, r1, r5
 80067e0:	f021 0103 	bic.w	r1, r1, #3
 80067e4:	3d03      	subs	r5, #3
 80067e6:	45a8      	cmp	r8, r5
 80067e8:	bf38      	it	cc
 80067ea:	2100      	movcc	r1, #0
 80067ec:	440b      	add	r3, r1
 80067ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80067f2:	b191      	cbz	r1, 800681a <__mdiff+0x11a>
 80067f4:	6117      	str	r7, [r2, #16]
 80067f6:	e79d      	b.n	8006734 <__mdiff+0x34>
 80067f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80067fc:	46e6      	mov	lr, ip
 80067fe:	0c08      	lsrs	r0, r1, #16
 8006800:	fa1c fc81 	uxtah	ip, ip, r1
 8006804:	4471      	add	r1, lr
 8006806:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800680a:	b289      	uxth	r1, r1
 800680c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006810:	f846 1b04 	str.w	r1, [r6], #4
 8006814:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006818:	e7dd      	b.n	80067d6 <__mdiff+0xd6>
 800681a:	3f01      	subs	r7, #1
 800681c:	e7e7      	b.n	80067ee <__mdiff+0xee>
 800681e:	bf00      	nop
 8006820:	080090e5 	.word	0x080090e5
 8006824:	080090f6 	.word	0x080090f6

08006828 <__ulp>:
 8006828:	b082      	sub	sp, #8
 800682a:	ed8d 0b00 	vstr	d0, [sp]
 800682e:	9a01      	ldr	r2, [sp, #4]
 8006830:	4b0f      	ldr	r3, [pc, #60]	@ (8006870 <__ulp+0x48>)
 8006832:	4013      	ands	r3, r2
 8006834:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006838:	2b00      	cmp	r3, #0
 800683a:	dc08      	bgt.n	800684e <__ulp+0x26>
 800683c:	425b      	negs	r3, r3
 800683e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006842:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006846:	da04      	bge.n	8006852 <__ulp+0x2a>
 8006848:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800684c:	4113      	asrs	r3, r2
 800684e:	2200      	movs	r2, #0
 8006850:	e008      	b.n	8006864 <__ulp+0x3c>
 8006852:	f1a2 0314 	sub.w	r3, r2, #20
 8006856:	2b1e      	cmp	r3, #30
 8006858:	bfda      	itte	le
 800685a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800685e:	40da      	lsrle	r2, r3
 8006860:	2201      	movgt	r2, #1
 8006862:	2300      	movs	r3, #0
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	ec41 0b10 	vmov	d0, r0, r1
 800686c:	b002      	add	sp, #8
 800686e:	4770      	bx	lr
 8006870:	7ff00000 	.word	0x7ff00000

08006874 <__b2d>:
 8006874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006878:	6906      	ldr	r6, [r0, #16]
 800687a:	f100 0814 	add.w	r8, r0, #20
 800687e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006882:	1f37      	subs	r7, r6, #4
 8006884:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006888:	4610      	mov	r0, r2
 800688a:	f7ff fd4b 	bl	8006324 <__hi0bits>
 800688e:	f1c0 0320 	rsb	r3, r0, #32
 8006892:	280a      	cmp	r0, #10
 8006894:	600b      	str	r3, [r1, #0]
 8006896:	491b      	ldr	r1, [pc, #108]	@ (8006904 <__b2d+0x90>)
 8006898:	dc15      	bgt.n	80068c6 <__b2d+0x52>
 800689a:	f1c0 0c0b 	rsb	ip, r0, #11
 800689e:	fa22 f30c 	lsr.w	r3, r2, ip
 80068a2:	45b8      	cmp	r8, r7
 80068a4:	ea43 0501 	orr.w	r5, r3, r1
 80068a8:	bf34      	ite	cc
 80068aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80068ae:	2300      	movcs	r3, #0
 80068b0:	3015      	adds	r0, #21
 80068b2:	fa02 f000 	lsl.w	r0, r2, r0
 80068b6:	fa23 f30c 	lsr.w	r3, r3, ip
 80068ba:	4303      	orrs	r3, r0
 80068bc:	461c      	mov	r4, r3
 80068be:	ec45 4b10 	vmov	d0, r4, r5
 80068c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068c6:	45b8      	cmp	r8, r7
 80068c8:	bf3a      	itte	cc
 80068ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80068ce:	f1a6 0708 	subcc.w	r7, r6, #8
 80068d2:	2300      	movcs	r3, #0
 80068d4:	380b      	subs	r0, #11
 80068d6:	d012      	beq.n	80068fe <__b2d+0x8a>
 80068d8:	f1c0 0120 	rsb	r1, r0, #32
 80068dc:	fa23 f401 	lsr.w	r4, r3, r1
 80068e0:	4082      	lsls	r2, r0
 80068e2:	4322      	orrs	r2, r4
 80068e4:	4547      	cmp	r7, r8
 80068e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80068ea:	bf8c      	ite	hi
 80068ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80068f0:	2200      	movls	r2, #0
 80068f2:	4083      	lsls	r3, r0
 80068f4:	40ca      	lsrs	r2, r1
 80068f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80068fa:	4313      	orrs	r3, r2
 80068fc:	e7de      	b.n	80068bc <__b2d+0x48>
 80068fe:	ea42 0501 	orr.w	r5, r2, r1
 8006902:	e7db      	b.n	80068bc <__b2d+0x48>
 8006904:	3ff00000 	.word	0x3ff00000

08006908 <__d2b>:
 8006908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800690c:	460f      	mov	r7, r1
 800690e:	2101      	movs	r1, #1
 8006910:	ec59 8b10 	vmov	r8, r9, d0
 8006914:	4616      	mov	r6, r2
 8006916:	f7ff fc13 	bl	8006140 <_Balloc>
 800691a:	4604      	mov	r4, r0
 800691c:	b930      	cbnz	r0, 800692c <__d2b+0x24>
 800691e:	4602      	mov	r2, r0
 8006920:	4b23      	ldr	r3, [pc, #140]	@ (80069b0 <__d2b+0xa8>)
 8006922:	4824      	ldr	r0, [pc, #144]	@ (80069b4 <__d2b+0xac>)
 8006924:	f240 310f 	movw	r1, #783	@ 0x30f
 8006928:	f001 fb5e 	bl	8007fe8 <__assert_func>
 800692c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006930:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006934:	b10d      	cbz	r5, 800693a <__d2b+0x32>
 8006936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800693a:	9301      	str	r3, [sp, #4]
 800693c:	f1b8 0300 	subs.w	r3, r8, #0
 8006940:	d023      	beq.n	800698a <__d2b+0x82>
 8006942:	4668      	mov	r0, sp
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	f7ff fd0c 	bl	8006362 <__lo0bits>
 800694a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800694e:	b1d0      	cbz	r0, 8006986 <__d2b+0x7e>
 8006950:	f1c0 0320 	rsb	r3, r0, #32
 8006954:	fa02 f303 	lsl.w	r3, r2, r3
 8006958:	430b      	orrs	r3, r1
 800695a:	40c2      	lsrs	r2, r0
 800695c:	6163      	str	r3, [r4, #20]
 800695e:	9201      	str	r2, [sp, #4]
 8006960:	9b01      	ldr	r3, [sp, #4]
 8006962:	61a3      	str	r3, [r4, #24]
 8006964:	2b00      	cmp	r3, #0
 8006966:	bf0c      	ite	eq
 8006968:	2201      	moveq	r2, #1
 800696a:	2202      	movne	r2, #2
 800696c:	6122      	str	r2, [r4, #16]
 800696e:	b1a5      	cbz	r5, 800699a <__d2b+0x92>
 8006970:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006974:	4405      	add	r5, r0
 8006976:	603d      	str	r5, [r7, #0]
 8006978:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800697c:	6030      	str	r0, [r6, #0]
 800697e:	4620      	mov	r0, r4
 8006980:	b003      	add	sp, #12
 8006982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006986:	6161      	str	r1, [r4, #20]
 8006988:	e7ea      	b.n	8006960 <__d2b+0x58>
 800698a:	a801      	add	r0, sp, #4
 800698c:	f7ff fce9 	bl	8006362 <__lo0bits>
 8006990:	9b01      	ldr	r3, [sp, #4]
 8006992:	6163      	str	r3, [r4, #20]
 8006994:	3020      	adds	r0, #32
 8006996:	2201      	movs	r2, #1
 8006998:	e7e8      	b.n	800696c <__d2b+0x64>
 800699a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800699e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80069a2:	6038      	str	r0, [r7, #0]
 80069a4:	6918      	ldr	r0, [r3, #16]
 80069a6:	f7ff fcbd 	bl	8006324 <__hi0bits>
 80069aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80069ae:	e7e5      	b.n	800697c <__d2b+0x74>
 80069b0:	080090e5 	.word	0x080090e5
 80069b4:	080090f6 	.word	0x080090f6

080069b8 <__ratio>:
 80069b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069bc:	b085      	sub	sp, #20
 80069be:	e9cd 1000 	strd	r1, r0, [sp]
 80069c2:	a902      	add	r1, sp, #8
 80069c4:	f7ff ff56 	bl	8006874 <__b2d>
 80069c8:	9800      	ldr	r0, [sp, #0]
 80069ca:	a903      	add	r1, sp, #12
 80069cc:	ec55 4b10 	vmov	r4, r5, d0
 80069d0:	f7ff ff50 	bl	8006874 <__b2d>
 80069d4:	9b01      	ldr	r3, [sp, #4]
 80069d6:	6919      	ldr	r1, [r3, #16]
 80069d8:	9b00      	ldr	r3, [sp, #0]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	1ac9      	subs	r1, r1, r3
 80069de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80069e2:	1a9b      	subs	r3, r3, r2
 80069e4:	ec5b ab10 	vmov	sl, fp, d0
 80069e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	bfce      	itee	gt
 80069f0:	462a      	movgt	r2, r5
 80069f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80069f6:	465a      	movle	r2, fp
 80069f8:	462f      	mov	r7, r5
 80069fa:	46d9      	mov	r9, fp
 80069fc:	bfcc      	ite	gt
 80069fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006a02:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006a06:	464b      	mov	r3, r9
 8006a08:	4652      	mov	r2, sl
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	4639      	mov	r1, r7
 8006a0e:	f7f9 ff1d 	bl	800084c <__aeabi_ddiv>
 8006a12:	ec41 0b10 	vmov	d0, r0, r1
 8006a16:	b005      	add	sp, #20
 8006a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a1c <__copybits>:
 8006a1c:	3901      	subs	r1, #1
 8006a1e:	b570      	push	{r4, r5, r6, lr}
 8006a20:	1149      	asrs	r1, r1, #5
 8006a22:	6914      	ldr	r4, [r2, #16]
 8006a24:	3101      	adds	r1, #1
 8006a26:	f102 0314 	add.w	r3, r2, #20
 8006a2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006a2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006a32:	1f05      	subs	r5, r0, #4
 8006a34:	42a3      	cmp	r3, r4
 8006a36:	d30c      	bcc.n	8006a52 <__copybits+0x36>
 8006a38:	1aa3      	subs	r3, r4, r2
 8006a3a:	3b11      	subs	r3, #17
 8006a3c:	f023 0303 	bic.w	r3, r3, #3
 8006a40:	3211      	adds	r2, #17
 8006a42:	42a2      	cmp	r2, r4
 8006a44:	bf88      	it	hi
 8006a46:	2300      	movhi	r3, #0
 8006a48:	4418      	add	r0, r3
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	4288      	cmp	r0, r1
 8006a4e:	d305      	bcc.n	8006a5c <__copybits+0x40>
 8006a50:	bd70      	pop	{r4, r5, r6, pc}
 8006a52:	f853 6b04 	ldr.w	r6, [r3], #4
 8006a56:	f845 6f04 	str.w	r6, [r5, #4]!
 8006a5a:	e7eb      	b.n	8006a34 <__copybits+0x18>
 8006a5c:	f840 3b04 	str.w	r3, [r0], #4
 8006a60:	e7f4      	b.n	8006a4c <__copybits+0x30>

08006a62 <__any_on>:
 8006a62:	f100 0214 	add.w	r2, r0, #20
 8006a66:	6900      	ldr	r0, [r0, #16]
 8006a68:	114b      	asrs	r3, r1, #5
 8006a6a:	4298      	cmp	r0, r3
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	db11      	blt.n	8006a94 <__any_on+0x32>
 8006a70:	dd0a      	ble.n	8006a88 <__any_on+0x26>
 8006a72:	f011 011f 	ands.w	r1, r1, #31
 8006a76:	d007      	beq.n	8006a88 <__any_on+0x26>
 8006a78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006a7c:	fa24 f001 	lsr.w	r0, r4, r1
 8006a80:	fa00 f101 	lsl.w	r1, r0, r1
 8006a84:	428c      	cmp	r4, r1
 8006a86:	d10b      	bne.n	8006aa0 <__any_on+0x3e>
 8006a88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d803      	bhi.n	8006a98 <__any_on+0x36>
 8006a90:	2000      	movs	r0, #0
 8006a92:	bd10      	pop	{r4, pc}
 8006a94:	4603      	mov	r3, r0
 8006a96:	e7f7      	b.n	8006a88 <__any_on+0x26>
 8006a98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a9c:	2900      	cmp	r1, #0
 8006a9e:	d0f5      	beq.n	8006a8c <__any_on+0x2a>
 8006aa0:	2001      	movs	r0, #1
 8006aa2:	e7f6      	b.n	8006a92 <__any_on+0x30>

08006aa4 <sulp>:
 8006aa4:	b570      	push	{r4, r5, r6, lr}
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	460d      	mov	r5, r1
 8006aaa:	ec45 4b10 	vmov	d0, r4, r5
 8006aae:	4616      	mov	r6, r2
 8006ab0:	f7ff feba 	bl	8006828 <__ulp>
 8006ab4:	ec51 0b10 	vmov	r0, r1, d0
 8006ab8:	b17e      	cbz	r6, 8006ada <sulp+0x36>
 8006aba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006abe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	dd09      	ble.n	8006ada <sulp+0x36>
 8006ac6:	051b      	lsls	r3, r3, #20
 8006ac8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006acc:	2400      	movs	r4, #0
 8006ace:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	462b      	mov	r3, r5
 8006ad6:	f7f9 fd8f 	bl	80005f8 <__aeabi_dmul>
 8006ada:	ec41 0b10 	vmov	d0, r0, r1
 8006ade:	bd70      	pop	{r4, r5, r6, pc}

08006ae0 <_strtod_l>:
 8006ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae4:	b09f      	sub	sp, #124	@ 0x7c
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006aea:	2200      	movs	r2, #0
 8006aec:	921a      	str	r2, [sp, #104]	@ 0x68
 8006aee:	9005      	str	r0, [sp, #20]
 8006af0:	f04f 0a00 	mov.w	sl, #0
 8006af4:	f04f 0b00 	mov.w	fp, #0
 8006af8:	460a      	mov	r2, r1
 8006afa:	9219      	str	r2, [sp, #100]	@ 0x64
 8006afc:	7811      	ldrb	r1, [r2, #0]
 8006afe:	292b      	cmp	r1, #43	@ 0x2b
 8006b00:	d04a      	beq.n	8006b98 <_strtod_l+0xb8>
 8006b02:	d838      	bhi.n	8006b76 <_strtod_l+0x96>
 8006b04:	290d      	cmp	r1, #13
 8006b06:	d832      	bhi.n	8006b6e <_strtod_l+0x8e>
 8006b08:	2908      	cmp	r1, #8
 8006b0a:	d832      	bhi.n	8006b72 <_strtod_l+0x92>
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	d03b      	beq.n	8006b88 <_strtod_l+0xa8>
 8006b10:	2200      	movs	r2, #0
 8006b12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006b14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006b16:	782a      	ldrb	r2, [r5, #0]
 8006b18:	2a30      	cmp	r2, #48	@ 0x30
 8006b1a:	f040 80b3 	bne.w	8006c84 <_strtod_l+0x1a4>
 8006b1e:	786a      	ldrb	r2, [r5, #1]
 8006b20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006b24:	2a58      	cmp	r2, #88	@ 0x58
 8006b26:	d16e      	bne.n	8006c06 <_strtod_l+0x126>
 8006b28:	9302      	str	r3, [sp, #8]
 8006b2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	4a8e      	ldr	r2, [pc, #568]	@ (8006d6c <_strtod_l+0x28c>)
 8006b34:	9805      	ldr	r0, [sp, #20]
 8006b36:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006b38:	a919      	add	r1, sp, #100	@ 0x64
 8006b3a:	f001 faef 	bl	800811c <__gethex>
 8006b3e:	f010 060f 	ands.w	r6, r0, #15
 8006b42:	4604      	mov	r4, r0
 8006b44:	d005      	beq.n	8006b52 <_strtod_l+0x72>
 8006b46:	2e06      	cmp	r6, #6
 8006b48:	d128      	bne.n	8006b9c <_strtod_l+0xbc>
 8006b4a:	3501      	adds	r5, #1
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f040 858e 	bne.w	8007676 <_strtod_l+0xb96>
 8006b5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b5c:	b1cb      	cbz	r3, 8006b92 <_strtod_l+0xb2>
 8006b5e:	4652      	mov	r2, sl
 8006b60:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006b64:	ec43 2b10 	vmov	d0, r2, r3
 8006b68:	b01f      	add	sp, #124	@ 0x7c
 8006b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b6e:	2920      	cmp	r1, #32
 8006b70:	d1ce      	bne.n	8006b10 <_strtod_l+0x30>
 8006b72:	3201      	adds	r2, #1
 8006b74:	e7c1      	b.n	8006afa <_strtod_l+0x1a>
 8006b76:	292d      	cmp	r1, #45	@ 0x2d
 8006b78:	d1ca      	bne.n	8006b10 <_strtod_l+0x30>
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006b7e:	1c51      	adds	r1, r2, #1
 8006b80:	9119      	str	r1, [sp, #100]	@ 0x64
 8006b82:	7852      	ldrb	r2, [r2, #1]
 8006b84:	2a00      	cmp	r2, #0
 8006b86:	d1c5      	bne.n	8006b14 <_strtod_l+0x34>
 8006b88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b8a:	9419      	str	r4, [sp, #100]	@ 0x64
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f040 8570 	bne.w	8007672 <_strtod_l+0xb92>
 8006b92:	4652      	mov	r2, sl
 8006b94:	465b      	mov	r3, fp
 8006b96:	e7e5      	b.n	8006b64 <_strtod_l+0x84>
 8006b98:	2100      	movs	r1, #0
 8006b9a:	e7ef      	b.n	8006b7c <_strtod_l+0x9c>
 8006b9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006b9e:	b13a      	cbz	r2, 8006bb0 <_strtod_l+0xd0>
 8006ba0:	2135      	movs	r1, #53	@ 0x35
 8006ba2:	a81c      	add	r0, sp, #112	@ 0x70
 8006ba4:	f7ff ff3a 	bl	8006a1c <__copybits>
 8006ba8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006baa:	9805      	ldr	r0, [sp, #20]
 8006bac:	f7ff fb08 	bl	80061c0 <_Bfree>
 8006bb0:	3e01      	subs	r6, #1
 8006bb2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006bb4:	2e04      	cmp	r6, #4
 8006bb6:	d806      	bhi.n	8006bc6 <_strtod_l+0xe6>
 8006bb8:	e8df f006 	tbb	[pc, r6]
 8006bbc:	201d0314 	.word	0x201d0314
 8006bc0:	14          	.byte	0x14
 8006bc1:	00          	.byte	0x00
 8006bc2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006bc6:	05e1      	lsls	r1, r4, #23
 8006bc8:	bf48      	it	mi
 8006bca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006bce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006bd2:	0d1b      	lsrs	r3, r3, #20
 8006bd4:	051b      	lsls	r3, r3, #20
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1bb      	bne.n	8006b52 <_strtod_l+0x72>
 8006bda:	f7fe fb2f 	bl	800523c <__errno>
 8006bde:	2322      	movs	r3, #34	@ 0x22
 8006be0:	6003      	str	r3, [r0, #0]
 8006be2:	e7b6      	b.n	8006b52 <_strtod_l+0x72>
 8006be4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006be8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006bec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006bf0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006bf4:	e7e7      	b.n	8006bc6 <_strtod_l+0xe6>
 8006bf6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006d74 <_strtod_l+0x294>
 8006bfa:	e7e4      	b.n	8006bc6 <_strtod_l+0xe6>
 8006bfc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006c00:	f04f 3aff 	mov.w	sl, #4294967295
 8006c04:	e7df      	b.n	8006bc6 <_strtod_l+0xe6>
 8006c06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c0c:	785b      	ldrb	r3, [r3, #1]
 8006c0e:	2b30      	cmp	r3, #48	@ 0x30
 8006c10:	d0f9      	beq.n	8006c06 <_strtod_l+0x126>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d09d      	beq.n	8006b52 <_strtod_l+0x72>
 8006c16:	2301      	movs	r3, #1
 8006c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c1e:	2300      	movs	r3, #0
 8006c20:	9308      	str	r3, [sp, #32]
 8006c22:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c24:	461f      	mov	r7, r3
 8006c26:	220a      	movs	r2, #10
 8006c28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006c2a:	7805      	ldrb	r5, [r0, #0]
 8006c2c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006c30:	b2d9      	uxtb	r1, r3
 8006c32:	2909      	cmp	r1, #9
 8006c34:	d928      	bls.n	8006c88 <_strtod_l+0x1a8>
 8006c36:	494e      	ldr	r1, [pc, #312]	@ (8006d70 <_strtod_l+0x290>)
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f001 f979 	bl	8007f30 <strncmp>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d032      	beq.n	8006ca8 <_strtod_l+0x1c8>
 8006c42:	2000      	movs	r0, #0
 8006c44:	462a      	mov	r2, r5
 8006c46:	4681      	mov	r9, r0
 8006c48:	463d      	mov	r5, r7
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2a65      	cmp	r2, #101	@ 0x65
 8006c4e:	d001      	beq.n	8006c54 <_strtod_l+0x174>
 8006c50:	2a45      	cmp	r2, #69	@ 0x45
 8006c52:	d114      	bne.n	8006c7e <_strtod_l+0x19e>
 8006c54:	b91d      	cbnz	r5, 8006c5e <_strtod_l+0x17e>
 8006c56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c58:	4302      	orrs	r2, r0
 8006c5a:	d095      	beq.n	8006b88 <_strtod_l+0xa8>
 8006c5c:	2500      	movs	r5, #0
 8006c5e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006c60:	1c62      	adds	r2, r4, #1
 8006c62:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c64:	7862      	ldrb	r2, [r4, #1]
 8006c66:	2a2b      	cmp	r2, #43	@ 0x2b
 8006c68:	d077      	beq.n	8006d5a <_strtod_l+0x27a>
 8006c6a:	2a2d      	cmp	r2, #45	@ 0x2d
 8006c6c:	d07b      	beq.n	8006d66 <_strtod_l+0x286>
 8006c6e:	f04f 0c00 	mov.w	ip, #0
 8006c72:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006c76:	2909      	cmp	r1, #9
 8006c78:	f240 8082 	bls.w	8006d80 <_strtod_l+0x2a0>
 8006c7c:	9419      	str	r4, [sp, #100]	@ 0x64
 8006c7e:	f04f 0800 	mov.w	r8, #0
 8006c82:	e0a2      	b.n	8006dca <_strtod_l+0x2ea>
 8006c84:	2300      	movs	r3, #0
 8006c86:	e7c7      	b.n	8006c18 <_strtod_l+0x138>
 8006c88:	2f08      	cmp	r7, #8
 8006c8a:	bfd5      	itete	le
 8006c8c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006c8e:	9908      	ldrgt	r1, [sp, #32]
 8006c90:	fb02 3301 	mlale	r3, r2, r1, r3
 8006c94:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006c98:	f100 0001 	add.w	r0, r0, #1
 8006c9c:	bfd4      	ite	le
 8006c9e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006ca0:	9308      	strgt	r3, [sp, #32]
 8006ca2:	3701      	adds	r7, #1
 8006ca4:	9019      	str	r0, [sp, #100]	@ 0x64
 8006ca6:	e7bf      	b.n	8006c28 <_strtod_l+0x148>
 8006ca8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cae:	785a      	ldrb	r2, [r3, #1]
 8006cb0:	b37f      	cbz	r7, 8006d12 <_strtod_l+0x232>
 8006cb2:	4681      	mov	r9, r0
 8006cb4:	463d      	mov	r5, r7
 8006cb6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006cba:	2b09      	cmp	r3, #9
 8006cbc:	d912      	bls.n	8006ce4 <_strtod_l+0x204>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e7c4      	b.n	8006c4c <_strtod_l+0x16c>
 8006cc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cc8:	785a      	ldrb	r2, [r3, #1]
 8006cca:	3001      	adds	r0, #1
 8006ccc:	2a30      	cmp	r2, #48	@ 0x30
 8006cce:	d0f8      	beq.n	8006cc2 <_strtod_l+0x1e2>
 8006cd0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006cd4:	2b08      	cmp	r3, #8
 8006cd6:	f200 84d3 	bhi.w	8007680 <_strtod_l+0xba0>
 8006cda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8006cde:	4681      	mov	r9, r0
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	3a30      	subs	r2, #48	@ 0x30
 8006ce6:	f100 0301 	add.w	r3, r0, #1
 8006cea:	d02a      	beq.n	8006d42 <_strtod_l+0x262>
 8006cec:	4499      	add	r9, r3
 8006cee:	eb00 0c05 	add.w	ip, r0, r5
 8006cf2:	462b      	mov	r3, r5
 8006cf4:	210a      	movs	r1, #10
 8006cf6:	4563      	cmp	r3, ip
 8006cf8:	d10d      	bne.n	8006d16 <_strtod_l+0x236>
 8006cfa:	1c69      	adds	r1, r5, #1
 8006cfc:	4401      	add	r1, r0
 8006cfe:	4428      	add	r0, r5
 8006d00:	2808      	cmp	r0, #8
 8006d02:	dc16      	bgt.n	8006d32 <_strtod_l+0x252>
 8006d04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006d06:	230a      	movs	r3, #10
 8006d08:	fb03 2300 	mla	r3, r3, r0, r2
 8006d0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d0e:	2300      	movs	r3, #0
 8006d10:	e018      	b.n	8006d44 <_strtod_l+0x264>
 8006d12:	4638      	mov	r0, r7
 8006d14:	e7da      	b.n	8006ccc <_strtod_l+0x1ec>
 8006d16:	2b08      	cmp	r3, #8
 8006d18:	f103 0301 	add.w	r3, r3, #1
 8006d1c:	dc03      	bgt.n	8006d26 <_strtod_l+0x246>
 8006d1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006d20:	434e      	muls	r6, r1
 8006d22:	960a      	str	r6, [sp, #40]	@ 0x28
 8006d24:	e7e7      	b.n	8006cf6 <_strtod_l+0x216>
 8006d26:	2b10      	cmp	r3, #16
 8006d28:	bfde      	ittt	le
 8006d2a:	9e08      	ldrle	r6, [sp, #32]
 8006d2c:	434e      	mulle	r6, r1
 8006d2e:	9608      	strle	r6, [sp, #32]
 8006d30:	e7e1      	b.n	8006cf6 <_strtod_l+0x216>
 8006d32:	280f      	cmp	r0, #15
 8006d34:	dceb      	bgt.n	8006d0e <_strtod_l+0x22e>
 8006d36:	9808      	ldr	r0, [sp, #32]
 8006d38:	230a      	movs	r3, #10
 8006d3a:	fb03 2300 	mla	r3, r3, r0, r2
 8006d3e:	9308      	str	r3, [sp, #32]
 8006d40:	e7e5      	b.n	8006d0e <_strtod_l+0x22e>
 8006d42:	4629      	mov	r1, r5
 8006d44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d46:	1c50      	adds	r0, r2, #1
 8006d48:	9019      	str	r0, [sp, #100]	@ 0x64
 8006d4a:	7852      	ldrb	r2, [r2, #1]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	460d      	mov	r5, r1
 8006d50:	e7b1      	b.n	8006cb6 <_strtod_l+0x1d6>
 8006d52:	f04f 0900 	mov.w	r9, #0
 8006d56:	2301      	movs	r3, #1
 8006d58:	e77d      	b.n	8006c56 <_strtod_l+0x176>
 8006d5a:	f04f 0c00 	mov.w	ip, #0
 8006d5e:	1ca2      	adds	r2, r4, #2
 8006d60:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d62:	78a2      	ldrb	r2, [r4, #2]
 8006d64:	e785      	b.n	8006c72 <_strtod_l+0x192>
 8006d66:	f04f 0c01 	mov.w	ip, #1
 8006d6a:	e7f8      	b.n	8006d5e <_strtod_l+0x27e>
 8006d6c:	08009268 	.word	0x08009268
 8006d70:	08009250 	.word	0x08009250
 8006d74:	7ff00000 	.word	0x7ff00000
 8006d78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d7a:	1c51      	adds	r1, r2, #1
 8006d7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006d7e:	7852      	ldrb	r2, [r2, #1]
 8006d80:	2a30      	cmp	r2, #48	@ 0x30
 8006d82:	d0f9      	beq.n	8006d78 <_strtod_l+0x298>
 8006d84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006d88:	2908      	cmp	r1, #8
 8006d8a:	f63f af78 	bhi.w	8006c7e <_strtod_l+0x19e>
 8006d8e:	3a30      	subs	r2, #48	@ 0x30
 8006d90:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d94:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006d96:	f04f 080a 	mov.w	r8, #10
 8006d9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d9c:	1c56      	adds	r6, r2, #1
 8006d9e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006da0:	7852      	ldrb	r2, [r2, #1]
 8006da2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006da6:	f1be 0f09 	cmp.w	lr, #9
 8006daa:	d939      	bls.n	8006e20 <_strtod_l+0x340>
 8006dac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006dae:	1a76      	subs	r6, r6, r1
 8006db0:	2e08      	cmp	r6, #8
 8006db2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006db6:	dc03      	bgt.n	8006dc0 <_strtod_l+0x2e0>
 8006db8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006dba:	4588      	cmp	r8, r1
 8006dbc:	bfa8      	it	ge
 8006dbe:	4688      	movge	r8, r1
 8006dc0:	f1bc 0f00 	cmp.w	ip, #0
 8006dc4:	d001      	beq.n	8006dca <_strtod_l+0x2ea>
 8006dc6:	f1c8 0800 	rsb	r8, r8, #0
 8006dca:	2d00      	cmp	r5, #0
 8006dcc:	d14e      	bne.n	8006e6c <_strtod_l+0x38c>
 8006dce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006dd0:	4308      	orrs	r0, r1
 8006dd2:	f47f aebe 	bne.w	8006b52 <_strtod_l+0x72>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f47f aed6 	bne.w	8006b88 <_strtod_l+0xa8>
 8006ddc:	2a69      	cmp	r2, #105	@ 0x69
 8006dde:	d028      	beq.n	8006e32 <_strtod_l+0x352>
 8006de0:	dc25      	bgt.n	8006e2e <_strtod_l+0x34e>
 8006de2:	2a49      	cmp	r2, #73	@ 0x49
 8006de4:	d025      	beq.n	8006e32 <_strtod_l+0x352>
 8006de6:	2a4e      	cmp	r2, #78	@ 0x4e
 8006de8:	f47f aece 	bne.w	8006b88 <_strtod_l+0xa8>
 8006dec:	499b      	ldr	r1, [pc, #620]	@ (800705c <_strtod_l+0x57c>)
 8006dee:	a819      	add	r0, sp, #100	@ 0x64
 8006df0:	f001 fbb6 	bl	8008560 <__match>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	f43f aec7 	beq.w	8006b88 <_strtod_l+0xa8>
 8006dfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b28      	cmp	r3, #40	@ 0x28
 8006e00:	d12e      	bne.n	8006e60 <_strtod_l+0x380>
 8006e02:	4997      	ldr	r1, [pc, #604]	@ (8007060 <_strtod_l+0x580>)
 8006e04:	aa1c      	add	r2, sp, #112	@ 0x70
 8006e06:	a819      	add	r0, sp, #100	@ 0x64
 8006e08:	f001 fbbe 	bl	8008588 <__hexnan>
 8006e0c:	2805      	cmp	r0, #5
 8006e0e:	d127      	bne.n	8006e60 <_strtod_l+0x380>
 8006e10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006e12:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006e16:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006e1a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006e1e:	e698      	b.n	8006b52 <_strtod_l+0x72>
 8006e20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006e22:	fb08 2101 	mla	r1, r8, r1, r2
 8006e26:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006e2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e2c:	e7b5      	b.n	8006d9a <_strtod_l+0x2ba>
 8006e2e:	2a6e      	cmp	r2, #110	@ 0x6e
 8006e30:	e7da      	b.n	8006de8 <_strtod_l+0x308>
 8006e32:	498c      	ldr	r1, [pc, #560]	@ (8007064 <_strtod_l+0x584>)
 8006e34:	a819      	add	r0, sp, #100	@ 0x64
 8006e36:	f001 fb93 	bl	8008560 <__match>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	f43f aea4 	beq.w	8006b88 <_strtod_l+0xa8>
 8006e40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e42:	4989      	ldr	r1, [pc, #548]	@ (8007068 <_strtod_l+0x588>)
 8006e44:	3b01      	subs	r3, #1
 8006e46:	a819      	add	r0, sp, #100	@ 0x64
 8006e48:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e4a:	f001 fb89 	bl	8008560 <__match>
 8006e4e:	b910      	cbnz	r0, 8006e56 <_strtod_l+0x376>
 8006e50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e52:	3301      	adds	r3, #1
 8006e54:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e56:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007078 <_strtod_l+0x598>
 8006e5a:	f04f 0a00 	mov.w	sl, #0
 8006e5e:	e678      	b.n	8006b52 <_strtod_l+0x72>
 8006e60:	4882      	ldr	r0, [pc, #520]	@ (800706c <_strtod_l+0x58c>)
 8006e62:	f001 f8b9 	bl	8007fd8 <nan>
 8006e66:	ec5b ab10 	vmov	sl, fp, d0
 8006e6a:	e672      	b.n	8006b52 <_strtod_l+0x72>
 8006e6c:	eba8 0309 	sub.w	r3, r8, r9
 8006e70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e74:	2f00      	cmp	r7, #0
 8006e76:	bf08      	it	eq
 8006e78:	462f      	moveq	r7, r5
 8006e7a:	2d10      	cmp	r5, #16
 8006e7c:	462c      	mov	r4, r5
 8006e7e:	bfa8      	it	ge
 8006e80:	2410      	movge	r4, #16
 8006e82:	f7f9 fb3f 	bl	8000504 <__aeabi_ui2d>
 8006e86:	2d09      	cmp	r5, #9
 8006e88:	4682      	mov	sl, r0
 8006e8a:	468b      	mov	fp, r1
 8006e8c:	dc13      	bgt.n	8006eb6 <_strtod_l+0x3d6>
 8006e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f43f ae5e 	beq.w	8006b52 <_strtod_l+0x72>
 8006e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e98:	dd78      	ble.n	8006f8c <_strtod_l+0x4ac>
 8006e9a:	2b16      	cmp	r3, #22
 8006e9c:	dc5f      	bgt.n	8006f5e <_strtod_l+0x47e>
 8006e9e:	4974      	ldr	r1, [pc, #464]	@ (8007070 <_strtod_l+0x590>)
 8006ea0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ea8:	4652      	mov	r2, sl
 8006eaa:	465b      	mov	r3, fp
 8006eac:	f7f9 fba4 	bl	80005f8 <__aeabi_dmul>
 8006eb0:	4682      	mov	sl, r0
 8006eb2:	468b      	mov	fp, r1
 8006eb4:	e64d      	b.n	8006b52 <_strtod_l+0x72>
 8006eb6:	4b6e      	ldr	r3, [pc, #440]	@ (8007070 <_strtod_l+0x590>)
 8006eb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ebc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006ec0:	f7f9 fb9a 	bl	80005f8 <__aeabi_dmul>
 8006ec4:	4682      	mov	sl, r0
 8006ec6:	9808      	ldr	r0, [sp, #32]
 8006ec8:	468b      	mov	fp, r1
 8006eca:	f7f9 fb1b 	bl	8000504 <__aeabi_ui2d>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4650      	mov	r0, sl
 8006ed4:	4659      	mov	r1, fp
 8006ed6:	f7f9 f9d9 	bl	800028c <__adddf3>
 8006eda:	2d0f      	cmp	r5, #15
 8006edc:	4682      	mov	sl, r0
 8006ede:	468b      	mov	fp, r1
 8006ee0:	ddd5      	ble.n	8006e8e <_strtod_l+0x3ae>
 8006ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee4:	1b2c      	subs	r4, r5, r4
 8006ee6:	441c      	add	r4, r3
 8006ee8:	2c00      	cmp	r4, #0
 8006eea:	f340 8096 	ble.w	800701a <_strtod_l+0x53a>
 8006eee:	f014 030f 	ands.w	r3, r4, #15
 8006ef2:	d00a      	beq.n	8006f0a <_strtod_l+0x42a>
 8006ef4:	495e      	ldr	r1, [pc, #376]	@ (8007070 <_strtod_l+0x590>)
 8006ef6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006efa:	4652      	mov	r2, sl
 8006efc:	465b      	mov	r3, fp
 8006efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f02:	f7f9 fb79 	bl	80005f8 <__aeabi_dmul>
 8006f06:	4682      	mov	sl, r0
 8006f08:	468b      	mov	fp, r1
 8006f0a:	f034 040f 	bics.w	r4, r4, #15
 8006f0e:	d073      	beq.n	8006ff8 <_strtod_l+0x518>
 8006f10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006f14:	dd48      	ble.n	8006fa8 <_strtod_l+0x4c8>
 8006f16:	2400      	movs	r4, #0
 8006f18:	46a0      	mov	r8, r4
 8006f1a:	940a      	str	r4, [sp, #40]	@ 0x28
 8006f1c:	46a1      	mov	r9, r4
 8006f1e:	9a05      	ldr	r2, [sp, #20]
 8006f20:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007078 <_strtod_l+0x598>
 8006f24:	2322      	movs	r3, #34	@ 0x22
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	f04f 0a00 	mov.w	sl, #0
 8006f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f43f ae0f 	beq.w	8006b52 <_strtod_l+0x72>
 8006f34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f36:	9805      	ldr	r0, [sp, #20]
 8006f38:	f7ff f942 	bl	80061c0 <_Bfree>
 8006f3c:	9805      	ldr	r0, [sp, #20]
 8006f3e:	4649      	mov	r1, r9
 8006f40:	f7ff f93e 	bl	80061c0 <_Bfree>
 8006f44:	9805      	ldr	r0, [sp, #20]
 8006f46:	4641      	mov	r1, r8
 8006f48:	f7ff f93a 	bl	80061c0 <_Bfree>
 8006f4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f4e:	9805      	ldr	r0, [sp, #20]
 8006f50:	f7ff f936 	bl	80061c0 <_Bfree>
 8006f54:	9805      	ldr	r0, [sp, #20]
 8006f56:	4621      	mov	r1, r4
 8006f58:	f7ff f932 	bl	80061c0 <_Bfree>
 8006f5c:	e5f9      	b.n	8006b52 <_strtod_l+0x72>
 8006f5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006f64:	4293      	cmp	r3, r2
 8006f66:	dbbc      	blt.n	8006ee2 <_strtod_l+0x402>
 8006f68:	4c41      	ldr	r4, [pc, #260]	@ (8007070 <_strtod_l+0x590>)
 8006f6a:	f1c5 050f 	rsb	r5, r5, #15
 8006f6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006f72:	4652      	mov	r2, sl
 8006f74:	465b      	mov	r3, fp
 8006f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f7a:	f7f9 fb3d 	bl	80005f8 <__aeabi_dmul>
 8006f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f80:	1b5d      	subs	r5, r3, r5
 8006f82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006f86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006f8a:	e78f      	b.n	8006eac <_strtod_l+0x3cc>
 8006f8c:	3316      	adds	r3, #22
 8006f8e:	dba8      	blt.n	8006ee2 <_strtod_l+0x402>
 8006f90:	4b37      	ldr	r3, [pc, #220]	@ (8007070 <_strtod_l+0x590>)
 8006f92:	eba9 0808 	sub.w	r8, r9, r8
 8006f96:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006f9a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006f9e:	4650      	mov	r0, sl
 8006fa0:	4659      	mov	r1, fp
 8006fa2:	f7f9 fc53 	bl	800084c <__aeabi_ddiv>
 8006fa6:	e783      	b.n	8006eb0 <_strtod_l+0x3d0>
 8006fa8:	4b32      	ldr	r3, [pc, #200]	@ (8007074 <_strtod_l+0x594>)
 8006faa:	9308      	str	r3, [sp, #32]
 8006fac:	2300      	movs	r3, #0
 8006fae:	1124      	asrs	r4, r4, #4
 8006fb0:	4650      	mov	r0, sl
 8006fb2:	4659      	mov	r1, fp
 8006fb4:	461e      	mov	r6, r3
 8006fb6:	2c01      	cmp	r4, #1
 8006fb8:	dc21      	bgt.n	8006ffe <_strtod_l+0x51e>
 8006fba:	b10b      	cbz	r3, 8006fc0 <_strtod_l+0x4e0>
 8006fbc:	4682      	mov	sl, r0
 8006fbe:	468b      	mov	fp, r1
 8006fc0:	492c      	ldr	r1, [pc, #176]	@ (8007074 <_strtod_l+0x594>)
 8006fc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006fc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006fca:	4652      	mov	r2, sl
 8006fcc:	465b      	mov	r3, fp
 8006fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fd2:	f7f9 fb11 	bl	80005f8 <__aeabi_dmul>
 8006fd6:	4b28      	ldr	r3, [pc, #160]	@ (8007078 <_strtod_l+0x598>)
 8006fd8:	460a      	mov	r2, r1
 8006fda:	400b      	ands	r3, r1
 8006fdc:	4927      	ldr	r1, [pc, #156]	@ (800707c <_strtod_l+0x59c>)
 8006fde:	428b      	cmp	r3, r1
 8006fe0:	4682      	mov	sl, r0
 8006fe2:	d898      	bhi.n	8006f16 <_strtod_l+0x436>
 8006fe4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006fe8:	428b      	cmp	r3, r1
 8006fea:	bf86      	itte	hi
 8006fec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007080 <_strtod_l+0x5a0>
 8006ff0:	f04f 3aff 	movhi.w	sl, #4294967295
 8006ff4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	9308      	str	r3, [sp, #32]
 8006ffc:	e07a      	b.n	80070f4 <_strtod_l+0x614>
 8006ffe:	07e2      	lsls	r2, r4, #31
 8007000:	d505      	bpl.n	800700e <_strtod_l+0x52e>
 8007002:	9b08      	ldr	r3, [sp, #32]
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	f7f9 faf6 	bl	80005f8 <__aeabi_dmul>
 800700c:	2301      	movs	r3, #1
 800700e:	9a08      	ldr	r2, [sp, #32]
 8007010:	3208      	adds	r2, #8
 8007012:	3601      	adds	r6, #1
 8007014:	1064      	asrs	r4, r4, #1
 8007016:	9208      	str	r2, [sp, #32]
 8007018:	e7cd      	b.n	8006fb6 <_strtod_l+0x4d6>
 800701a:	d0ed      	beq.n	8006ff8 <_strtod_l+0x518>
 800701c:	4264      	negs	r4, r4
 800701e:	f014 020f 	ands.w	r2, r4, #15
 8007022:	d00a      	beq.n	800703a <_strtod_l+0x55a>
 8007024:	4b12      	ldr	r3, [pc, #72]	@ (8007070 <_strtod_l+0x590>)
 8007026:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800702a:	4650      	mov	r0, sl
 800702c:	4659      	mov	r1, fp
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f7f9 fc0b 	bl	800084c <__aeabi_ddiv>
 8007036:	4682      	mov	sl, r0
 8007038:	468b      	mov	fp, r1
 800703a:	1124      	asrs	r4, r4, #4
 800703c:	d0dc      	beq.n	8006ff8 <_strtod_l+0x518>
 800703e:	2c1f      	cmp	r4, #31
 8007040:	dd20      	ble.n	8007084 <_strtod_l+0x5a4>
 8007042:	2400      	movs	r4, #0
 8007044:	46a0      	mov	r8, r4
 8007046:	940a      	str	r4, [sp, #40]	@ 0x28
 8007048:	46a1      	mov	r9, r4
 800704a:	9a05      	ldr	r2, [sp, #20]
 800704c:	2322      	movs	r3, #34	@ 0x22
 800704e:	f04f 0a00 	mov.w	sl, #0
 8007052:	f04f 0b00 	mov.w	fp, #0
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	e768      	b.n	8006f2c <_strtod_l+0x44c>
 800705a:	bf00      	nop
 800705c:	0800903d 	.word	0x0800903d
 8007060:	08009254 	.word	0x08009254
 8007064:	08009035 	.word	0x08009035
 8007068:	0800906c 	.word	0x0800906c
 800706c:	080093fd 	.word	0x080093fd
 8007070:	08009188 	.word	0x08009188
 8007074:	08009160 	.word	0x08009160
 8007078:	7ff00000 	.word	0x7ff00000
 800707c:	7ca00000 	.word	0x7ca00000
 8007080:	7fefffff 	.word	0x7fefffff
 8007084:	f014 0310 	ands.w	r3, r4, #16
 8007088:	bf18      	it	ne
 800708a:	236a      	movne	r3, #106	@ 0x6a
 800708c:	4ea9      	ldr	r6, [pc, #676]	@ (8007334 <_strtod_l+0x854>)
 800708e:	9308      	str	r3, [sp, #32]
 8007090:	4650      	mov	r0, sl
 8007092:	4659      	mov	r1, fp
 8007094:	2300      	movs	r3, #0
 8007096:	07e2      	lsls	r2, r4, #31
 8007098:	d504      	bpl.n	80070a4 <_strtod_l+0x5c4>
 800709a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800709e:	f7f9 faab 	bl	80005f8 <__aeabi_dmul>
 80070a2:	2301      	movs	r3, #1
 80070a4:	1064      	asrs	r4, r4, #1
 80070a6:	f106 0608 	add.w	r6, r6, #8
 80070aa:	d1f4      	bne.n	8007096 <_strtod_l+0x5b6>
 80070ac:	b10b      	cbz	r3, 80070b2 <_strtod_l+0x5d2>
 80070ae:	4682      	mov	sl, r0
 80070b0:	468b      	mov	fp, r1
 80070b2:	9b08      	ldr	r3, [sp, #32]
 80070b4:	b1b3      	cbz	r3, 80070e4 <_strtod_l+0x604>
 80070b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80070ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80070be:	2b00      	cmp	r3, #0
 80070c0:	4659      	mov	r1, fp
 80070c2:	dd0f      	ble.n	80070e4 <_strtod_l+0x604>
 80070c4:	2b1f      	cmp	r3, #31
 80070c6:	dd55      	ble.n	8007174 <_strtod_l+0x694>
 80070c8:	2b34      	cmp	r3, #52	@ 0x34
 80070ca:	bfde      	ittt	le
 80070cc:	f04f 33ff 	movle.w	r3, #4294967295
 80070d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80070d4:	4093      	lslle	r3, r2
 80070d6:	f04f 0a00 	mov.w	sl, #0
 80070da:	bfcc      	ite	gt
 80070dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80070e0:	ea03 0b01 	andle.w	fp, r3, r1
 80070e4:	2200      	movs	r2, #0
 80070e6:	2300      	movs	r3, #0
 80070e8:	4650      	mov	r0, sl
 80070ea:	4659      	mov	r1, fp
 80070ec:	f7f9 fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d1a6      	bne.n	8007042 <_strtod_l+0x562>
 80070f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80070fa:	9805      	ldr	r0, [sp, #20]
 80070fc:	462b      	mov	r3, r5
 80070fe:	463a      	mov	r2, r7
 8007100:	f7ff f8c6 	bl	8006290 <__s2b>
 8007104:	900a      	str	r0, [sp, #40]	@ 0x28
 8007106:	2800      	cmp	r0, #0
 8007108:	f43f af05 	beq.w	8006f16 <_strtod_l+0x436>
 800710c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800710e:	2a00      	cmp	r2, #0
 8007110:	eba9 0308 	sub.w	r3, r9, r8
 8007114:	bfa8      	it	ge
 8007116:	2300      	movge	r3, #0
 8007118:	9312      	str	r3, [sp, #72]	@ 0x48
 800711a:	2400      	movs	r4, #0
 800711c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007120:	9316      	str	r3, [sp, #88]	@ 0x58
 8007122:	46a0      	mov	r8, r4
 8007124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007126:	9805      	ldr	r0, [sp, #20]
 8007128:	6859      	ldr	r1, [r3, #4]
 800712a:	f7ff f809 	bl	8006140 <_Balloc>
 800712e:	4681      	mov	r9, r0
 8007130:	2800      	cmp	r0, #0
 8007132:	f43f aef4 	beq.w	8006f1e <_strtod_l+0x43e>
 8007136:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007138:	691a      	ldr	r2, [r3, #16]
 800713a:	3202      	adds	r2, #2
 800713c:	f103 010c 	add.w	r1, r3, #12
 8007140:	0092      	lsls	r2, r2, #2
 8007142:	300c      	adds	r0, #12
 8007144:	f000 ff38 	bl	8007fb8 <memcpy>
 8007148:	ec4b ab10 	vmov	d0, sl, fp
 800714c:	9805      	ldr	r0, [sp, #20]
 800714e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007150:	a91b      	add	r1, sp, #108	@ 0x6c
 8007152:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007156:	f7ff fbd7 	bl	8006908 <__d2b>
 800715a:	901a      	str	r0, [sp, #104]	@ 0x68
 800715c:	2800      	cmp	r0, #0
 800715e:	f43f aede 	beq.w	8006f1e <_strtod_l+0x43e>
 8007162:	9805      	ldr	r0, [sp, #20]
 8007164:	2101      	movs	r1, #1
 8007166:	f7ff f929 	bl	80063bc <__i2b>
 800716a:	4680      	mov	r8, r0
 800716c:	b948      	cbnz	r0, 8007182 <_strtod_l+0x6a2>
 800716e:	f04f 0800 	mov.w	r8, #0
 8007172:	e6d4      	b.n	8006f1e <_strtod_l+0x43e>
 8007174:	f04f 32ff 	mov.w	r2, #4294967295
 8007178:	fa02 f303 	lsl.w	r3, r2, r3
 800717c:	ea03 0a0a 	and.w	sl, r3, sl
 8007180:	e7b0      	b.n	80070e4 <_strtod_l+0x604>
 8007182:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007184:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007186:	2d00      	cmp	r5, #0
 8007188:	bfab      	itete	ge
 800718a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800718c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800718e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007190:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007192:	bfac      	ite	ge
 8007194:	18ef      	addge	r7, r5, r3
 8007196:	1b5e      	sublt	r6, r3, r5
 8007198:	9b08      	ldr	r3, [sp, #32]
 800719a:	1aed      	subs	r5, r5, r3
 800719c:	4415      	add	r5, r2
 800719e:	4b66      	ldr	r3, [pc, #408]	@ (8007338 <_strtod_l+0x858>)
 80071a0:	3d01      	subs	r5, #1
 80071a2:	429d      	cmp	r5, r3
 80071a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80071a8:	da50      	bge.n	800724c <_strtod_l+0x76c>
 80071aa:	1b5b      	subs	r3, r3, r5
 80071ac:	2b1f      	cmp	r3, #31
 80071ae:	eba2 0203 	sub.w	r2, r2, r3
 80071b2:	f04f 0101 	mov.w	r1, #1
 80071b6:	dc3d      	bgt.n	8007234 <_strtod_l+0x754>
 80071b8:	fa01 f303 	lsl.w	r3, r1, r3
 80071bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071be:	2300      	movs	r3, #0
 80071c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80071c2:	18bd      	adds	r5, r7, r2
 80071c4:	9b08      	ldr	r3, [sp, #32]
 80071c6:	42af      	cmp	r7, r5
 80071c8:	4416      	add	r6, r2
 80071ca:	441e      	add	r6, r3
 80071cc:	463b      	mov	r3, r7
 80071ce:	bfa8      	it	ge
 80071d0:	462b      	movge	r3, r5
 80071d2:	42b3      	cmp	r3, r6
 80071d4:	bfa8      	it	ge
 80071d6:	4633      	movge	r3, r6
 80071d8:	2b00      	cmp	r3, #0
 80071da:	bfc2      	ittt	gt
 80071dc:	1aed      	subgt	r5, r5, r3
 80071de:	1af6      	subgt	r6, r6, r3
 80071e0:	1aff      	subgt	r7, r7, r3
 80071e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	dd16      	ble.n	8007216 <_strtod_l+0x736>
 80071e8:	4641      	mov	r1, r8
 80071ea:	9805      	ldr	r0, [sp, #20]
 80071ec:	461a      	mov	r2, r3
 80071ee:	f7ff f9a5 	bl	800653c <__pow5mult>
 80071f2:	4680      	mov	r8, r0
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d0ba      	beq.n	800716e <_strtod_l+0x68e>
 80071f8:	4601      	mov	r1, r0
 80071fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80071fc:	9805      	ldr	r0, [sp, #20]
 80071fe:	f7ff f8f3 	bl	80063e8 <__multiply>
 8007202:	900e      	str	r0, [sp, #56]	@ 0x38
 8007204:	2800      	cmp	r0, #0
 8007206:	f43f ae8a 	beq.w	8006f1e <_strtod_l+0x43e>
 800720a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800720c:	9805      	ldr	r0, [sp, #20]
 800720e:	f7fe ffd7 	bl	80061c0 <_Bfree>
 8007212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007214:	931a      	str	r3, [sp, #104]	@ 0x68
 8007216:	2d00      	cmp	r5, #0
 8007218:	dc1d      	bgt.n	8007256 <_strtod_l+0x776>
 800721a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	dd23      	ble.n	8007268 <_strtod_l+0x788>
 8007220:	4649      	mov	r1, r9
 8007222:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007224:	9805      	ldr	r0, [sp, #20]
 8007226:	f7ff f989 	bl	800653c <__pow5mult>
 800722a:	4681      	mov	r9, r0
 800722c:	b9e0      	cbnz	r0, 8007268 <_strtod_l+0x788>
 800722e:	f04f 0900 	mov.w	r9, #0
 8007232:	e674      	b.n	8006f1e <_strtod_l+0x43e>
 8007234:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007238:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800723c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007240:	35e2      	adds	r5, #226	@ 0xe2
 8007242:	fa01 f305 	lsl.w	r3, r1, r5
 8007246:	9310      	str	r3, [sp, #64]	@ 0x40
 8007248:	9113      	str	r1, [sp, #76]	@ 0x4c
 800724a:	e7ba      	b.n	80071c2 <_strtod_l+0x6e2>
 800724c:	2300      	movs	r3, #0
 800724e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007250:	2301      	movs	r3, #1
 8007252:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007254:	e7b5      	b.n	80071c2 <_strtod_l+0x6e2>
 8007256:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007258:	9805      	ldr	r0, [sp, #20]
 800725a:	462a      	mov	r2, r5
 800725c:	f7ff f9c8 	bl	80065f0 <__lshift>
 8007260:	901a      	str	r0, [sp, #104]	@ 0x68
 8007262:	2800      	cmp	r0, #0
 8007264:	d1d9      	bne.n	800721a <_strtod_l+0x73a>
 8007266:	e65a      	b.n	8006f1e <_strtod_l+0x43e>
 8007268:	2e00      	cmp	r6, #0
 800726a:	dd07      	ble.n	800727c <_strtod_l+0x79c>
 800726c:	4649      	mov	r1, r9
 800726e:	9805      	ldr	r0, [sp, #20]
 8007270:	4632      	mov	r2, r6
 8007272:	f7ff f9bd 	bl	80065f0 <__lshift>
 8007276:	4681      	mov	r9, r0
 8007278:	2800      	cmp	r0, #0
 800727a:	d0d8      	beq.n	800722e <_strtod_l+0x74e>
 800727c:	2f00      	cmp	r7, #0
 800727e:	dd08      	ble.n	8007292 <_strtod_l+0x7b2>
 8007280:	4641      	mov	r1, r8
 8007282:	9805      	ldr	r0, [sp, #20]
 8007284:	463a      	mov	r2, r7
 8007286:	f7ff f9b3 	bl	80065f0 <__lshift>
 800728a:	4680      	mov	r8, r0
 800728c:	2800      	cmp	r0, #0
 800728e:	f43f ae46 	beq.w	8006f1e <_strtod_l+0x43e>
 8007292:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007294:	9805      	ldr	r0, [sp, #20]
 8007296:	464a      	mov	r2, r9
 8007298:	f7ff fa32 	bl	8006700 <__mdiff>
 800729c:	4604      	mov	r4, r0
 800729e:	2800      	cmp	r0, #0
 80072a0:	f43f ae3d 	beq.w	8006f1e <_strtod_l+0x43e>
 80072a4:	68c3      	ldr	r3, [r0, #12]
 80072a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80072a8:	2300      	movs	r3, #0
 80072aa:	60c3      	str	r3, [r0, #12]
 80072ac:	4641      	mov	r1, r8
 80072ae:	f7ff fa0b 	bl	80066c8 <__mcmp>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	da46      	bge.n	8007344 <_strtod_l+0x864>
 80072b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072b8:	ea53 030a 	orrs.w	r3, r3, sl
 80072bc:	d16c      	bne.n	8007398 <_strtod_l+0x8b8>
 80072be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d168      	bne.n	8007398 <_strtod_l+0x8b8>
 80072c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80072ca:	0d1b      	lsrs	r3, r3, #20
 80072cc:	051b      	lsls	r3, r3, #20
 80072ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80072d2:	d961      	bls.n	8007398 <_strtod_l+0x8b8>
 80072d4:	6963      	ldr	r3, [r4, #20]
 80072d6:	b913      	cbnz	r3, 80072de <_strtod_l+0x7fe>
 80072d8:	6923      	ldr	r3, [r4, #16]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	dd5c      	ble.n	8007398 <_strtod_l+0x8b8>
 80072de:	4621      	mov	r1, r4
 80072e0:	2201      	movs	r2, #1
 80072e2:	9805      	ldr	r0, [sp, #20]
 80072e4:	f7ff f984 	bl	80065f0 <__lshift>
 80072e8:	4641      	mov	r1, r8
 80072ea:	4604      	mov	r4, r0
 80072ec:	f7ff f9ec 	bl	80066c8 <__mcmp>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	dd51      	ble.n	8007398 <_strtod_l+0x8b8>
 80072f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80072f8:	9a08      	ldr	r2, [sp, #32]
 80072fa:	0d1b      	lsrs	r3, r3, #20
 80072fc:	051b      	lsls	r3, r3, #20
 80072fe:	2a00      	cmp	r2, #0
 8007300:	d06b      	beq.n	80073da <_strtod_l+0x8fa>
 8007302:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007306:	d868      	bhi.n	80073da <_strtod_l+0x8fa>
 8007308:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800730c:	f67f ae9d 	bls.w	800704a <_strtod_l+0x56a>
 8007310:	4b0a      	ldr	r3, [pc, #40]	@ (800733c <_strtod_l+0x85c>)
 8007312:	4650      	mov	r0, sl
 8007314:	4659      	mov	r1, fp
 8007316:	2200      	movs	r2, #0
 8007318:	f7f9 f96e 	bl	80005f8 <__aeabi_dmul>
 800731c:	4b08      	ldr	r3, [pc, #32]	@ (8007340 <_strtod_l+0x860>)
 800731e:	400b      	ands	r3, r1
 8007320:	4682      	mov	sl, r0
 8007322:	468b      	mov	fp, r1
 8007324:	2b00      	cmp	r3, #0
 8007326:	f47f ae05 	bne.w	8006f34 <_strtod_l+0x454>
 800732a:	9a05      	ldr	r2, [sp, #20]
 800732c:	2322      	movs	r3, #34	@ 0x22
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	e600      	b.n	8006f34 <_strtod_l+0x454>
 8007332:	bf00      	nop
 8007334:	08009280 	.word	0x08009280
 8007338:	fffffc02 	.word	0xfffffc02
 800733c:	39500000 	.word	0x39500000
 8007340:	7ff00000 	.word	0x7ff00000
 8007344:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007348:	d165      	bne.n	8007416 <_strtod_l+0x936>
 800734a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800734c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007350:	b35a      	cbz	r2, 80073aa <_strtod_l+0x8ca>
 8007352:	4a9f      	ldr	r2, [pc, #636]	@ (80075d0 <_strtod_l+0xaf0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d12b      	bne.n	80073b0 <_strtod_l+0x8d0>
 8007358:	9b08      	ldr	r3, [sp, #32]
 800735a:	4651      	mov	r1, sl
 800735c:	b303      	cbz	r3, 80073a0 <_strtod_l+0x8c0>
 800735e:	4b9d      	ldr	r3, [pc, #628]	@ (80075d4 <_strtod_l+0xaf4>)
 8007360:	465a      	mov	r2, fp
 8007362:	4013      	ands	r3, r2
 8007364:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007368:	f04f 32ff 	mov.w	r2, #4294967295
 800736c:	d81b      	bhi.n	80073a6 <_strtod_l+0x8c6>
 800736e:	0d1b      	lsrs	r3, r3, #20
 8007370:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007374:	fa02 f303 	lsl.w	r3, r2, r3
 8007378:	4299      	cmp	r1, r3
 800737a:	d119      	bne.n	80073b0 <_strtod_l+0x8d0>
 800737c:	4b96      	ldr	r3, [pc, #600]	@ (80075d8 <_strtod_l+0xaf8>)
 800737e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007380:	429a      	cmp	r2, r3
 8007382:	d102      	bne.n	800738a <_strtod_l+0x8aa>
 8007384:	3101      	adds	r1, #1
 8007386:	f43f adca 	beq.w	8006f1e <_strtod_l+0x43e>
 800738a:	4b92      	ldr	r3, [pc, #584]	@ (80075d4 <_strtod_l+0xaf4>)
 800738c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800738e:	401a      	ands	r2, r3
 8007390:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007394:	f04f 0a00 	mov.w	sl, #0
 8007398:	9b08      	ldr	r3, [sp, #32]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1b8      	bne.n	8007310 <_strtod_l+0x830>
 800739e:	e5c9      	b.n	8006f34 <_strtod_l+0x454>
 80073a0:	f04f 33ff 	mov.w	r3, #4294967295
 80073a4:	e7e8      	b.n	8007378 <_strtod_l+0x898>
 80073a6:	4613      	mov	r3, r2
 80073a8:	e7e6      	b.n	8007378 <_strtod_l+0x898>
 80073aa:	ea53 030a 	orrs.w	r3, r3, sl
 80073ae:	d0a1      	beq.n	80072f4 <_strtod_l+0x814>
 80073b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073b2:	b1db      	cbz	r3, 80073ec <_strtod_l+0x90c>
 80073b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073b6:	4213      	tst	r3, r2
 80073b8:	d0ee      	beq.n	8007398 <_strtod_l+0x8b8>
 80073ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073bc:	9a08      	ldr	r2, [sp, #32]
 80073be:	4650      	mov	r0, sl
 80073c0:	4659      	mov	r1, fp
 80073c2:	b1bb      	cbz	r3, 80073f4 <_strtod_l+0x914>
 80073c4:	f7ff fb6e 	bl	8006aa4 <sulp>
 80073c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073cc:	ec53 2b10 	vmov	r2, r3, d0
 80073d0:	f7f8 ff5c 	bl	800028c <__adddf3>
 80073d4:	4682      	mov	sl, r0
 80073d6:	468b      	mov	fp, r1
 80073d8:	e7de      	b.n	8007398 <_strtod_l+0x8b8>
 80073da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80073de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80073e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80073e6:	f04f 3aff 	mov.w	sl, #4294967295
 80073ea:	e7d5      	b.n	8007398 <_strtod_l+0x8b8>
 80073ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80073ee:	ea13 0f0a 	tst.w	r3, sl
 80073f2:	e7e1      	b.n	80073b8 <_strtod_l+0x8d8>
 80073f4:	f7ff fb56 	bl	8006aa4 <sulp>
 80073f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073fc:	ec53 2b10 	vmov	r2, r3, d0
 8007400:	f7f8 ff42 	bl	8000288 <__aeabi_dsub>
 8007404:	2200      	movs	r2, #0
 8007406:	2300      	movs	r3, #0
 8007408:	4682      	mov	sl, r0
 800740a:	468b      	mov	fp, r1
 800740c:	f7f9 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007410:	2800      	cmp	r0, #0
 8007412:	d0c1      	beq.n	8007398 <_strtod_l+0x8b8>
 8007414:	e619      	b.n	800704a <_strtod_l+0x56a>
 8007416:	4641      	mov	r1, r8
 8007418:	4620      	mov	r0, r4
 800741a:	f7ff facd 	bl	80069b8 <__ratio>
 800741e:	ec57 6b10 	vmov	r6, r7, d0
 8007422:	2200      	movs	r2, #0
 8007424:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007428:	4630      	mov	r0, r6
 800742a:	4639      	mov	r1, r7
 800742c:	f7f9 fb60 	bl	8000af0 <__aeabi_dcmple>
 8007430:	2800      	cmp	r0, #0
 8007432:	d06f      	beq.n	8007514 <_strtod_l+0xa34>
 8007434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007436:	2b00      	cmp	r3, #0
 8007438:	d17a      	bne.n	8007530 <_strtod_l+0xa50>
 800743a:	f1ba 0f00 	cmp.w	sl, #0
 800743e:	d158      	bne.n	80074f2 <_strtod_l+0xa12>
 8007440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007442:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007446:	2b00      	cmp	r3, #0
 8007448:	d15a      	bne.n	8007500 <_strtod_l+0xa20>
 800744a:	4b64      	ldr	r3, [pc, #400]	@ (80075dc <_strtod_l+0xafc>)
 800744c:	2200      	movs	r2, #0
 800744e:	4630      	mov	r0, r6
 8007450:	4639      	mov	r1, r7
 8007452:	f7f9 fb43 	bl	8000adc <__aeabi_dcmplt>
 8007456:	2800      	cmp	r0, #0
 8007458:	d159      	bne.n	800750e <_strtod_l+0xa2e>
 800745a:	4630      	mov	r0, r6
 800745c:	4639      	mov	r1, r7
 800745e:	4b60      	ldr	r3, [pc, #384]	@ (80075e0 <_strtod_l+0xb00>)
 8007460:	2200      	movs	r2, #0
 8007462:	f7f9 f8c9 	bl	80005f8 <__aeabi_dmul>
 8007466:	4606      	mov	r6, r0
 8007468:	460f      	mov	r7, r1
 800746a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800746e:	9606      	str	r6, [sp, #24]
 8007470:	9307      	str	r3, [sp, #28]
 8007472:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007476:	4d57      	ldr	r5, [pc, #348]	@ (80075d4 <_strtod_l+0xaf4>)
 8007478:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800747c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800747e:	401d      	ands	r5, r3
 8007480:	4b58      	ldr	r3, [pc, #352]	@ (80075e4 <_strtod_l+0xb04>)
 8007482:	429d      	cmp	r5, r3
 8007484:	f040 80b2 	bne.w	80075ec <_strtod_l+0xb0c>
 8007488:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800748a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800748e:	ec4b ab10 	vmov	d0, sl, fp
 8007492:	f7ff f9c9 	bl	8006828 <__ulp>
 8007496:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800749a:	ec51 0b10 	vmov	r0, r1, d0
 800749e:	f7f9 f8ab 	bl	80005f8 <__aeabi_dmul>
 80074a2:	4652      	mov	r2, sl
 80074a4:	465b      	mov	r3, fp
 80074a6:	f7f8 fef1 	bl	800028c <__adddf3>
 80074aa:	460b      	mov	r3, r1
 80074ac:	4949      	ldr	r1, [pc, #292]	@ (80075d4 <_strtod_l+0xaf4>)
 80074ae:	4a4e      	ldr	r2, [pc, #312]	@ (80075e8 <_strtod_l+0xb08>)
 80074b0:	4019      	ands	r1, r3
 80074b2:	4291      	cmp	r1, r2
 80074b4:	4682      	mov	sl, r0
 80074b6:	d942      	bls.n	800753e <_strtod_l+0xa5e>
 80074b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80074ba:	4b47      	ldr	r3, [pc, #284]	@ (80075d8 <_strtod_l+0xaf8>)
 80074bc:	429a      	cmp	r2, r3
 80074be:	d103      	bne.n	80074c8 <_strtod_l+0x9e8>
 80074c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074c2:	3301      	adds	r3, #1
 80074c4:	f43f ad2b 	beq.w	8006f1e <_strtod_l+0x43e>
 80074c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80075d8 <_strtod_l+0xaf8>
 80074cc:	f04f 3aff 	mov.w	sl, #4294967295
 80074d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074d2:	9805      	ldr	r0, [sp, #20]
 80074d4:	f7fe fe74 	bl	80061c0 <_Bfree>
 80074d8:	9805      	ldr	r0, [sp, #20]
 80074da:	4649      	mov	r1, r9
 80074dc:	f7fe fe70 	bl	80061c0 <_Bfree>
 80074e0:	9805      	ldr	r0, [sp, #20]
 80074e2:	4641      	mov	r1, r8
 80074e4:	f7fe fe6c 	bl	80061c0 <_Bfree>
 80074e8:	9805      	ldr	r0, [sp, #20]
 80074ea:	4621      	mov	r1, r4
 80074ec:	f7fe fe68 	bl	80061c0 <_Bfree>
 80074f0:	e618      	b.n	8007124 <_strtod_l+0x644>
 80074f2:	f1ba 0f01 	cmp.w	sl, #1
 80074f6:	d103      	bne.n	8007500 <_strtod_l+0xa20>
 80074f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f43f ada5 	beq.w	800704a <_strtod_l+0x56a>
 8007500:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80075b0 <_strtod_l+0xad0>
 8007504:	4f35      	ldr	r7, [pc, #212]	@ (80075dc <_strtod_l+0xafc>)
 8007506:	ed8d 7b06 	vstr	d7, [sp, #24]
 800750a:	2600      	movs	r6, #0
 800750c:	e7b1      	b.n	8007472 <_strtod_l+0x992>
 800750e:	4f34      	ldr	r7, [pc, #208]	@ (80075e0 <_strtod_l+0xb00>)
 8007510:	2600      	movs	r6, #0
 8007512:	e7aa      	b.n	800746a <_strtod_l+0x98a>
 8007514:	4b32      	ldr	r3, [pc, #200]	@ (80075e0 <_strtod_l+0xb00>)
 8007516:	4630      	mov	r0, r6
 8007518:	4639      	mov	r1, r7
 800751a:	2200      	movs	r2, #0
 800751c:	f7f9 f86c 	bl	80005f8 <__aeabi_dmul>
 8007520:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007522:	4606      	mov	r6, r0
 8007524:	460f      	mov	r7, r1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d09f      	beq.n	800746a <_strtod_l+0x98a>
 800752a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800752e:	e7a0      	b.n	8007472 <_strtod_l+0x992>
 8007530:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80075b8 <_strtod_l+0xad8>
 8007534:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007538:	ec57 6b17 	vmov	r6, r7, d7
 800753c:	e799      	b.n	8007472 <_strtod_l+0x992>
 800753e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007542:	9b08      	ldr	r3, [sp, #32]
 8007544:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1c1      	bne.n	80074d0 <_strtod_l+0x9f0>
 800754c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007550:	0d1b      	lsrs	r3, r3, #20
 8007552:	051b      	lsls	r3, r3, #20
 8007554:	429d      	cmp	r5, r3
 8007556:	d1bb      	bne.n	80074d0 <_strtod_l+0x9f0>
 8007558:	4630      	mov	r0, r6
 800755a:	4639      	mov	r1, r7
 800755c:	f7f9 fb94 	bl	8000c88 <__aeabi_d2lz>
 8007560:	f7f9 f81c 	bl	800059c <__aeabi_l2d>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4630      	mov	r0, r6
 800756a:	4639      	mov	r1, r7
 800756c:	f7f8 fe8c 	bl	8000288 <__aeabi_dsub>
 8007570:	460b      	mov	r3, r1
 8007572:	4602      	mov	r2, r0
 8007574:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007578:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800757c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800757e:	ea46 060a 	orr.w	r6, r6, sl
 8007582:	431e      	orrs	r6, r3
 8007584:	d06f      	beq.n	8007666 <_strtod_l+0xb86>
 8007586:	a30e      	add	r3, pc, #56	@ (adr r3, 80075c0 <_strtod_l+0xae0>)
 8007588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758c:	f7f9 faa6 	bl	8000adc <__aeabi_dcmplt>
 8007590:	2800      	cmp	r0, #0
 8007592:	f47f accf 	bne.w	8006f34 <_strtod_l+0x454>
 8007596:	a30c      	add	r3, pc, #48	@ (adr r3, 80075c8 <_strtod_l+0xae8>)
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075a0:	f7f9 faba 	bl	8000b18 <__aeabi_dcmpgt>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d093      	beq.n	80074d0 <_strtod_l+0x9f0>
 80075a8:	e4c4      	b.n	8006f34 <_strtod_l+0x454>
 80075aa:	bf00      	nop
 80075ac:	f3af 8000 	nop.w
 80075b0:	00000000 	.word	0x00000000
 80075b4:	bff00000 	.word	0xbff00000
 80075b8:	00000000 	.word	0x00000000
 80075bc:	3ff00000 	.word	0x3ff00000
 80075c0:	94a03595 	.word	0x94a03595
 80075c4:	3fdfffff 	.word	0x3fdfffff
 80075c8:	35afe535 	.word	0x35afe535
 80075cc:	3fe00000 	.word	0x3fe00000
 80075d0:	000fffff 	.word	0x000fffff
 80075d4:	7ff00000 	.word	0x7ff00000
 80075d8:	7fefffff 	.word	0x7fefffff
 80075dc:	3ff00000 	.word	0x3ff00000
 80075e0:	3fe00000 	.word	0x3fe00000
 80075e4:	7fe00000 	.word	0x7fe00000
 80075e8:	7c9fffff 	.word	0x7c9fffff
 80075ec:	9b08      	ldr	r3, [sp, #32]
 80075ee:	b323      	cbz	r3, 800763a <_strtod_l+0xb5a>
 80075f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80075f4:	d821      	bhi.n	800763a <_strtod_l+0xb5a>
 80075f6:	a328      	add	r3, pc, #160	@ (adr r3, 8007698 <_strtod_l+0xbb8>)
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	4630      	mov	r0, r6
 80075fe:	4639      	mov	r1, r7
 8007600:	f7f9 fa76 	bl	8000af0 <__aeabi_dcmple>
 8007604:	b1a0      	cbz	r0, 8007630 <_strtod_l+0xb50>
 8007606:	4639      	mov	r1, r7
 8007608:	4630      	mov	r0, r6
 800760a:	f7f9 facd 	bl	8000ba8 <__aeabi_d2uiz>
 800760e:	2801      	cmp	r0, #1
 8007610:	bf38      	it	cc
 8007612:	2001      	movcc	r0, #1
 8007614:	f7f8 ff76 	bl	8000504 <__aeabi_ui2d>
 8007618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800761a:	4606      	mov	r6, r0
 800761c:	460f      	mov	r7, r1
 800761e:	b9fb      	cbnz	r3, 8007660 <_strtod_l+0xb80>
 8007620:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007624:	9014      	str	r0, [sp, #80]	@ 0x50
 8007626:	9315      	str	r3, [sp, #84]	@ 0x54
 8007628:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800762c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007630:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007632:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007636:	1b5b      	subs	r3, r3, r5
 8007638:	9311      	str	r3, [sp, #68]	@ 0x44
 800763a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800763e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007642:	f7ff f8f1 	bl	8006828 <__ulp>
 8007646:	4650      	mov	r0, sl
 8007648:	ec53 2b10 	vmov	r2, r3, d0
 800764c:	4659      	mov	r1, fp
 800764e:	f7f8 ffd3 	bl	80005f8 <__aeabi_dmul>
 8007652:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007656:	f7f8 fe19 	bl	800028c <__adddf3>
 800765a:	4682      	mov	sl, r0
 800765c:	468b      	mov	fp, r1
 800765e:	e770      	b.n	8007542 <_strtod_l+0xa62>
 8007660:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007664:	e7e0      	b.n	8007628 <_strtod_l+0xb48>
 8007666:	a30e      	add	r3, pc, #56	@ (adr r3, 80076a0 <_strtod_l+0xbc0>)
 8007668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766c:	f7f9 fa36 	bl	8000adc <__aeabi_dcmplt>
 8007670:	e798      	b.n	80075a4 <_strtod_l+0xac4>
 8007672:	2300      	movs	r3, #0
 8007674:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007676:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007678:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	f7ff ba6d 	b.w	8006b5a <_strtod_l+0x7a>
 8007680:	2a65      	cmp	r2, #101	@ 0x65
 8007682:	f43f ab66 	beq.w	8006d52 <_strtod_l+0x272>
 8007686:	2a45      	cmp	r2, #69	@ 0x45
 8007688:	f43f ab63 	beq.w	8006d52 <_strtod_l+0x272>
 800768c:	2301      	movs	r3, #1
 800768e:	f7ff bb9e 	b.w	8006dce <_strtod_l+0x2ee>
 8007692:	bf00      	nop
 8007694:	f3af 8000 	nop.w
 8007698:	ffc00000 	.word	0xffc00000
 800769c:	41dfffff 	.word	0x41dfffff
 80076a0:	94a03595 	.word	0x94a03595
 80076a4:	3fcfffff 	.word	0x3fcfffff

080076a8 <_strtod_r>:
 80076a8:	4b01      	ldr	r3, [pc, #4]	@ (80076b0 <_strtod_r+0x8>)
 80076aa:	f7ff ba19 	b.w	8006ae0 <_strtod_l>
 80076ae:	bf00      	nop
 80076b0:	20000068 	.word	0x20000068

080076b4 <_strtol_l.constprop.0>:
 80076b4:	2b24      	cmp	r3, #36	@ 0x24
 80076b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ba:	4686      	mov	lr, r0
 80076bc:	4690      	mov	r8, r2
 80076be:	d801      	bhi.n	80076c4 <_strtol_l.constprop.0+0x10>
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d106      	bne.n	80076d2 <_strtol_l.constprop.0+0x1e>
 80076c4:	f7fd fdba 	bl	800523c <__errno>
 80076c8:	2316      	movs	r3, #22
 80076ca:	6003      	str	r3, [r0, #0]
 80076cc:	2000      	movs	r0, #0
 80076ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d2:	4834      	ldr	r0, [pc, #208]	@ (80077a4 <_strtol_l.constprop.0+0xf0>)
 80076d4:	460d      	mov	r5, r1
 80076d6:	462a      	mov	r2, r5
 80076d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076dc:	5d06      	ldrb	r6, [r0, r4]
 80076de:	f016 0608 	ands.w	r6, r6, #8
 80076e2:	d1f8      	bne.n	80076d6 <_strtol_l.constprop.0+0x22>
 80076e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80076e6:	d12d      	bne.n	8007744 <_strtol_l.constprop.0+0x90>
 80076e8:	782c      	ldrb	r4, [r5, #0]
 80076ea:	2601      	movs	r6, #1
 80076ec:	1c95      	adds	r5, r2, #2
 80076ee:	f033 0210 	bics.w	r2, r3, #16
 80076f2:	d109      	bne.n	8007708 <_strtol_l.constprop.0+0x54>
 80076f4:	2c30      	cmp	r4, #48	@ 0x30
 80076f6:	d12a      	bne.n	800774e <_strtol_l.constprop.0+0x9a>
 80076f8:	782a      	ldrb	r2, [r5, #0]
 80076fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80076fe:	2a58      	cmp	r2, #88	@ 0x58
 8007700:	d125      	bne.n	800774e <_strtol_l.constprop.0+0x9a>
 8007702:	786c      	ldrb	r4, [r5, #1]
 8007704:	2310      	movs	r3, #16
 8007706:	3502      	adds	r5, #2
 8007708:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800770c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007710:	2200      	movs	r2, #0
 8007712:	fbbc f9f3 	udiv	r9, ip, r3
 8007716:	4610      	mov	r0, r2
 8007718:	fb03 ca19 	mls	sl, r3, r9, ip
 800771c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007720:	2f09      	cmp	r7, #9
 8007722:	d81b      	bhi.n	800775c <_strtol_l.constprop.0+0xa8>
 8007724:	463c      	mov	r4, r7
 8007726:	42a3      	cmp	r3, r4
 8007728:	dd27      	ble.n	800777a <_strtol_l.constprop.0+0xc6>
 800772a:	1c57      	adds	r7, r2, #1
 800772c:	d007      	beq.n	800773e <_strtol_l.constprop.0+0x8a>
 800772e:	4581      	cmp	r9, r0
 8007730:	d320      	bcc.n	8007774 <_strtol_l.constprop.0+0xc0>
 8007732:	d101      	bne.n	8007738 <_strtol_l.constprop.0+0x84>
 8007734:	45a2      	cmp	sl, r4
 8007736:	db1d      	blt.n	8007774 <_strtol_l.constprop.0+0xc0>
 8007738:	fb00 4003 	mla	r0, r0, r3, r4
 800773c:	2201      	movs	r2, #1
 800773e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007742:	e7eb      	b.n	800771c <_strtol_l.constprop.0+0x68>
 8007744:	2c2b      	cmp	r4, #43	@ 0x2b
 8007746:	bf04      	itt	eq
 8007748:	782c      	ldrbeq	r4, [r5, #0]
 800774a:	1c95      	addeq	r5, r2, #2
 800774c:	e7cf      	b.n	80076ee <_strtol_l.constprop.0+0x3a>
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1da      	bne.n	8007708 <_strtol_l.constprop.0+0x54>
 8007752:	2c30      	cmp	r4, #48	@ 0x30
 8007754:	bf0c      	ite	eq
 8007756:	2308      	moveq	r3, #8
 8007758:	230a      	movne	r3, #10
 800775a:	e7d5      	b.n	8007708 <_strtol_l.constprop.0+0x54>
 800775c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007760:	2f19      	cmp	r7, #25
 8007762:	d801      	bhi.n	8007768 <_strtol_l.constprop.0+0xb4>
 8007764:	3c37      	subs	r4, #55	@ 0x37
 8007766:	e7de      	b.n	8007726 <_strtol_l.constprop.0+0x72>
 8007768:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800776c:	2f19      	cmp	r7, #25
 800776e:	d804      	bhi.n	800777a <_strtol_l.constprop.0+0xc6>
 8007770:	3c57      	subs	r4, #87	@ 0x57
 8007772:	e7d8      	b.n	8007726 <_strtol_l.constprop.0+0x72>
 8007774:	f04f 32ff 	mov.w	r2, #4294967295
 8007778:	e7e1      	b.n	800773e <_strtol_l.constprop.0+0x8a>
 800777a:	1c53      	adds	r3, r2, #1
 800777c:	d108      	bne.n	8007790 <_strtol_l.constprop.0+0xdc>
 800777e:	2322      	movs	r3, #34	@ 0x22
 8007780:	f8ce 3000 	str.w	r3, [lr]
 8007784:	4660      	mov	r0, ip
 8007786:	f1b8 0f00 	cmp.w	r8, #0
 800778a:	d0a0      	beq.n	80076ce <_strtol_l.constprop.0+0x1a>
 800778c:	1e69      	subs	r1, r5, #1
 800778e:	e006      	b.n	800779e <_strtol_l.constprop.0+0xea>
 8007790:	b106      	cbz	r6, 8007794 <_strtol_l.constprop.0+0xe0>
 8007792:	4240      	negs	r0, r0
 8007794:	f1b8 0f00 	cmp.w	r8, #0
 8007798:	d099      	beq.n	80076ce <_strtol_l.constprop.0+0x1a>
 800779a:	2a00      	cmp	r2, #0
 800779c:	d1f6      	bne.n	800778c <_strtol_l.constprop.0+0xd8>
 800779e:	f8c8 1000 	str.w	r1, [r8]
 80077a2:	e794      	b.n	80076ce <_strtol_l.constprop.0+0x1a>
 80077a4:	080092a9 	.word	0x080092a9

080077a8 <_strtol_r>:
 80077a8:	f7ff bf84 	b.w	80076b4 <_strtol_l.constprop.0>

080077ac <__ssputs_r>:
 80077ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b0:	688e      	ldr	r6, [r1, #8]
 80077b2:	461f      	mov	r7, r3
 80077b4:	42be      	cmp	r6, r7
 80077b6:	680b      	ldr	r3, [r1, #0]
 80077b8:	4682      	mov	sl, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	4690      	mov	r8, r2
 80077be:	d82d      	bhi.n	800781c <__ssputs_r+0x70>
 80077c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80077c8:	d026      	beq.n	8007818 <__ssputs_r+0x6c>
 80077ca:	6965      	ldr	r5, [r4, #20]
 80077cc:	6909      	ldr	r1, [r1, #16]
 80077ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077d2:	eba3 0901 	sub.w	r9, r3, r1
 80077d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077da:	1c7b      	adds	r3, r7, #1
 80077dc:	444b      	add	r3, r9
 80077de:	106d      	asrs	r5, r5, #1
 80077e0:	429d      	cmp	r5, r3
 80077e2:	bf38      	it	cc
 80077e4:	461d      	movcc	r5, r3
 80077e6:	0553      	lsls	r3, r2, #21
 80077e8:	d527      	bpl.n	800783a <__ssputs_r+0x8e>
 80077ea:	4629      	mov	r1, r5
 80077ec:	f7fe fc1c 	bl	8006028 <_malloc_r>
 80077f0:	4606      	mov	r6, r0
 80077f2:	b360      	cbz	r0, 800784e <__ssputs_r+0xa2>
 80077f4:	6921      	ldr	r1, [r4, #16]
 80077f6:	464a      	mov	r2, r9
 80077f8:	f000 fbde 	bl	8007fb8 <memcpy>
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007806:	81a3      	strh	r3, [r4, #12]
 8007808:	6126      	str	r6, [r4, #16]
 800780a:	6165      	str	r5, [r4, #20]
 800780c:	444e      	add	r6, r9
 800780e:	eba5 0509 	sub.w	r5, r5, r9
 8007812:	6026      	str	r6, [r4, #0]
 8007814:	60a5      	str	r5, [r4, #8]
 8007816:	463e      	mov	r6, r7
 8007818:	42be      	cmp	r6, r7
 800781a:	d900      	bls.n	800781e <__ssputs_r+0x72>
 800781c:	463e      	mov	r6, r7
 800781e:	6820      	ldr	r0, [r4, #0]
 8007820:	4632      	mov	r2, r6
 8007822:	4641      	mov	r1, r8
 8007824:	f000 fb6a 	bl	8007efc <memmove>
 8007828:	68a3      	ldr	r3, [r4, #8]
 800782a:	1b9b      	subs	r3, r3, r6
 800782c:	60a3      	str	r3, [r4, #8]
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	4433      	add	r3, r6
 8007832:	6023      	str	r3, [r4, #0]
 8007834:	2000      	movs	r0, #0
 8007836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800783a:	462a      	mov	r2, r5
 800783c:	f000 ff51 	bl	80086e2 <_realloc_r>
 8007840:	4606      	mov	r6, r0
 8007842:	2800      	cmp	r0, #0
 8007844:	d1e0      	bne.n	8007808 <__ssputs_r+0x5c>
 8007846:	6921      	ldr	r1, [r4, #16]
 8007848:	4650      	mov	r0, sl
 800784a:	f7fe fb79 	bl	8005f40 <_free_r>
 800784e:	230c      	movs	r3, #12
 8007850:	f8ca 3000 	str.w	r3, [sl]
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800785a:	81a3      	strh	r3, [r4, #12]
 800785c:	f04f 30ff 	mov.w	r0, #4294967295
 8007860:	e7e9      	b.n	8007836 <__ssputs_r+0x8a>
	...

08007864 <_svfiprintf_r>:
 8007864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007868:	4698      	mov	r8, r3
 800786a:	898b      	ldrh	r3, [r1, #12]
 800786c:	061b      	lsls	r3, r3, #24
 800786e:	b09d      	sub	sp, #116	@ 0x74
 8007870:	4607      	mov	r7, r0
 8007872:	460d      	mov	r5, r1
 8007874:	4614      	mov	r4, r2
 8007876:	d510      	bpl.n	800789a <_svfiprintf_r+0x36>
 8007878:	690b      	ldr	r3, [r1, #16]
 800787a:	b973      	cbnz	r3, 800789a <_svfiprintf_r+0x36>
 800787c:	2140      	movs	r1, #64	@ 0x40
 800787e:	f7fe fbd3 	bl	8006028 <_malloc_r>
 8007882:	6028      	str	r0, [r5, #0]
 8007884:	6128      	str	r0, [r5, #16]
 8007886:	b930      	cbnz	r0, 8007896 <_svfiprintf_r+0x32>
 8007888:	230c      	movs	r3, #12
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	f04f 30ff 	mov.w	r0, #4294967295
 8007890:	b01d      	add	sp, #116	@ 0x74
 8007892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007896:	2340      	movs	r3, #64	@ 0x40
 8007898:	616b      	str	r3, [r5, #20]
 800789a:	2300      	movs	r3, #0
 800789c:	9309      	str	r3, [sp, #36]	@ 0x24
 800789e:	2320      	movs	r3, #32
 80078a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80078a8:	2330      	movs	r3, #48	@ 0x30
 80078aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a48 <_svfiprintf_r+0x1e4>
 80078ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078b2:	f04f 0901 	mov.w	r9, #1
 80078b6:	4623      	mov	r3, r4
 80078b8:	469a      	mov	sl, r3
 80078ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078be:	b10a      	cbz	r2, 80078c4 <_svfiprintf_r+0x60>
 80078c0:	2a25      	cmp	r2, #37	@ 0x25
 80078c2:	d1f9      	bne.n	80078b8 <_svfiprintf_r+0x54>
 80078c4:	ebba 0b04 	subs.w	fp, sl, r4
 80078c8:	d00b      	beq.n	80078e2 <_svfiprintf_r+0x7e>
 80078ca:	465b      	mov	r3, fp
 80078cc:	4622      	mov	r2, r4
 80078ce:	4629      	mov	r1, r5
 80078d0:	4638      	mov	r0, r7
 80078d2:	f7ff ff6b 	bl	80077ac <__ssputs_r>
 80078d6:	3001      	adds	r0, #1
 80078d8:	f000 80a7 	beq.w	8007a2a <_svfiprintf_r+0x1c6>
 80078dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078de:	445a      	add	r2, fp
 80078e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80078e2:	f89a 3000 	ldrb.w	r3, [sl]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 809f 	beq.w	8007a2a <_svfiprintf_r+0x1c6>
 80078ec:	2300      	movs	r3, #0
 80078ee:	f04f 32ff 	mov.w	r2, #4294967295
 80078f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078f6:	f10a 0a01 	add.w	sl, sl, #1
 80078fa:	9304      	str	r3, [sp, #16]
 80078fc:	9307      	str	r3, [sp, #28]
 80078fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007902:	931a      	str	r3, [sp, #104]	@ 0x68
 8007904:	4654      	mov	r4, sl
 8007906:	2205      	movs	r2, #5
 8007908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800790c:	484e      	ldr	r0, [pc, #312]	@ (8007a48 <_svfiprintf_r+0x1e4>)
 800790e:	f7f8 fc5f 	bl	80001d0 <memchr>
 8007912:	9a04      	ldr	r2, [sp, #16]
 8007914:	b9d8      	cbnz	r0, 800794e <_svfiprintf_r+0xea>
 8007916:	06d0      	lsls	r0, r2, #27
 8007918:	bf44      	itt	mi
 800791a:	2320      	movmi	r3, #32
 800791c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007920:	0711      	lsls	r1, r2, #28
 8007922:	bf44      	itt	mi
 8007924:	232b      	movmi	r3, #43	@ 0x2b
 8007926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800792a:	f89a 3000 	ldrb.w	r3, [sl]
 800792e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007930:	d015      	beq.n	800795e <_svfiprintf_r+0xfa>
 8007932:	9a07      	ldr	r2, [sp, #28]
 8007934:	4654      	mov	r4, sl
 8007936:	2000      	movs	r0, #0
 8007938:	f04f 0c0a 	mov.w	ip, #10
 800793c:	4621      	mov	r1, r4
 800793e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007942:	3b30      	subs	r3, #48	@ 0x30
 8007944:	2b09      	cmp	r3, #9
 8007946:	d94b      	bls.n	80079e0 <_svfiprintf_r+0x17c>
 8007948:	b1b0      	cbz	r0, 8007978 <_svfiprintf_r+0x114>
 800794a:	9207      	str	r2, [sp, #28]
 800794c:	e014      	b.n	8007978 <_svfiprintf_r+0x114>
 800794e:	eba0 0308 	sub.w	r3, r0, r8
 8007952:	fa09 f303 	lsl.w	r3, r9, r3
 8007956:	4313      	orrs	r3, r2
 8007958:	9304      	str	r3, [sp, #16]
 800795a:	46a2      	mov	sl, r4
 800795c:	e7d2      	b.n	8007904 <_svfiprintf_r+0xa0>
 800795e:	9b03      	ldr	r3, [sp, #12]
 8007960:	1d19      	adds	r1, r3, #4
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	9103      	str	r1, [sp, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	bfbb      	ittet	lt
 800796a:	425b      	neglt	r3, r3
 800796c:	f042 0202 	orrlt.w	r2, r2, #2
 8007970:	9307      	strge	r3, [sp, #28]
 8007972:	9307      	strlt	r3, [sp, #28]
 8007974:	bfb8      	it	lt
 8007976:	9204      	strlt	r2, [sp, #16]
 8007978:	7823      	ldrb	r3, [r4, #0]
 800797a:	2b2e      	cmp	r3, #46	@ 0x2e
 800797c:	d10a      	bne.n	8007994 <_svfiprintf_r+0x130>
 800797e:	7863      	ldrb	r3, [r4, #1]
 8007980:	2b2a      	cmp	r3, #42	@ 0x2a
 8007982:	d132      	bne.n	80079ea <_svfiprintf_r+0x186>
 8007984:	9b03      	ldr	r3, [sp, #12]
 8007986:	1d1a      	adds	r2, r3, #4
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	9203      	str	r2, [sp, #12]
 800798c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007990:	3402      	adds	r4, #2
 8007992:	9305      	str	r3, [sp, #20]
 8007994:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a58 <_svfiprintf_r+0x1f4>
 8007998:	7821      	ldrb	r1, [r4, #0]
 800799a:	2203      	movs	r2, #3
 800799c:	4650      	mov	r0, sl
 800799e:	f7f8 fc17 	bl	80001d0 <memchr>
 80079a2:	b138      	cbz	r0, 80079b4 <_svfiprintf_r+0x150>
 80079a4:	9b04      	ldr	r3, [sp, #16]
 80079a6:	eba0 000a 	sub.w	r0, r0, sl
 80079aa:	2240      	movs	r2, #64	@ 0x40
 80079ac:	4082      	lsls	r2, r0
 80079ae:	4313      	orrs	r3, r2
 80079b0:	3401      	adds	r4, #1
 80079b2:	9304      	str	r3, [sp, #16]
 80079b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b8:	4824      	ldr	r0, [pc, #144]	@ (8007a4c <_svfiprintf_r+0x1e8>)
 80079ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079be:	2206      	movs	r2, #6
 80079c0:	f7f8 fc06 	bl	80001d0 <memchr>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d036      	beq.n	8007a36 <_svfiprintf_r+0x1d2>
 80079c8:	4b21      	ldr	r3, [pc, #132]	@ (8007a50 <_svfiprintf_r+0x1ec>)
 80079ca:	bb1b      	cbnz	r3, 8007a14 <_svfiprintf_r+0x1b0>
 80079cc:	9b03      	ldr	r3, [sp, #12]
 80079ce:	3307      	adds	r3, #7
 80079d0:	f023 0307 	bic.w	r3, r3, #7
 80079d4:	3308      	adds	r3, #8
 80079d6:	9303      	str	r3, [sp, #12]
 80079d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079da:	4433      	add	r3, r6
 80079dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80079de:	e76a      	b.n	80078b6 <_svfiprintf_r+0x52>
 80079e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80079e4:	460c      	mov	r4, r1
 80079e6:	2001      	movs	r0, #1
 80079e8:	e7a8      	b.n	800793c <_svfiprintf_r+0xd8>
 80079ea:	2300      	movs	r3, #0
 80079ec:	3401      	adds	r4, #1
 80079ee:	9305      	str	r3, [sp, #20]
 80079f0:	4619      	mov	r1, r3
 80079f2:	f04f 0c0a 	mov.w	ip, #10
 80079f6:	4620      	mov	r0, r4
 80079f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079fc:	3a30      	subs	r2, #48	@ 0x30
 80079fe:	2a09      	cmp	r2, #9
 8007a00:	d903      	bls.n	8007a0a <_svfiprintf_r+0x1a6>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0c6      	beq.n	8007994 <_svfiprintf_r+0x130>
 8007a06:	9105      	str	r1, [sp, #20]
 8007a08:	e7c4      	b.n	8007994 <_svfiprintf_r+0x130>
 8007a0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a0e:	4604      	mov	r4, r0
 8007a10:	2301      	movs	r3, #1
 8007a12:	e7f0      	b.n	80079f6 <_svfiprintf_r+0x192>
 8007a14:	ab03      	add	r3, sp, #12
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	462a      	mov	r2, r5
 8007a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8007a54 <_svfiprintf_r+0x1f0>)
 8007a1c:	a904      	add	r1, sp, #16
 8007a1e:	4638      	mov	r0, r7
 8007a20:	f7fc fbc4 	bl	80041ac <_printf_float>
 8007a24:	1c42      	adds	r2, r0, #1
 8007a26:	4606      	mov	r6, r0
 8007a28:	d1d6      	bne.n	80079d8 <_svfiprintf_r+0x174>
 8007a2a:	89ab      	ldrh	r3, [r5, #12]
 8007a2c:	065b      	lsls	r3, r3, #25
 8007a2e:	f53f af2d 	bmi.w	800788c <_svfiprintf_r+0x28>
 8007a32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a34:	e72c      	b.n	8007890 <_svfiprintf_r+0x2c>
 8007a36:	ab03      	add	r3, sp, #12
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	462a      	mov	r2, r5
 8007a3c:	4b05      	ldr	r3, [pc, #20]	@ (8007a54 <_svfiprintf_r+0x1f0>)
 8007a3e:	a904      	add	r1, sp, #16
 8007a40:	4638      	mov	r0, r7
 8007a42:	f7fc fe4b 	bl	80046dc <_printf_i>
 8007a46:	e7ed      	b.n	8007a24 <_svfiprintf_r+0x1c0>
 8007a48:	080093a9 	.word	0x080093a9
 8007a4c:	080093b3 	.word	0x080093b3
 8007a50:	080041ad 	.word	0x080041ad
 8007a54:	080077ad 	.word	0x080077ad
 8007a58:	080093af 	.word	0x080093af

08007a5c <__sfputc_r>:
 8007a5c:	6893      	ldr	r3, [r2, #8]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	b410      	push	{r4}
 8007a64:	6093      	str	r3, [r2, #8]
 8007a66:	da08      	bge.n	8007a7a <__sfputc_r+0x1e>
 8007a68:	6994      	ldr	r4, [r2, #24]
 8007a6a:	42a3      	cmp	r3, r4
 8007a6c:	db01      	blt.n	8007a72 <__sfputc_r+0x16>
 8007a6e:	290a      	cmp	r1, #10
 8007a70:	d103      	bne.n	8007a7a <__sfputc_r+0x1e>
 8007a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a76:	f7fd bafa 	b.w	800506e <__swbuf_r>
 8007a7a:	6813      	ldr	r3, [r2, #0]
 8007a7c:	1c58      	adds	r0, r3, #1
 8007a7e:	6010      	str	r0, [r2, #0]
 8007a80:	7019      	strb	r1, [r3, #0]
 8007a82:	4608      	mov	r0, r1
 8007a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <__sfputs_r>:
 8007a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8c:	4606      	mov	r6, r0
 8007a8e:	460f      	mov	r7, r1
 8007a90:	4614      	mov	r4, r2
 8007a92:	18d5      	adds	r5, r2, r3
 8007a94:	42ac      	cmp	r4, r5
 8007a96:	d101      	bne.n	8007a9c <__sfputs_r+0x12>
 8007a98:	2000      	movs	r0, #0
 8007a9a:	e007      	b.n	8007aac <__sfputs_r+0x22>
 8007a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa0:	463a      	mov	r2, r7
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f7ff ffda 	bl	8007a5c <__sfputc_r>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d1f3      	bne.n	8007a94 <__sfputs_r+0xa>
 8007aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ab0 <_vfiprintf_r>:
 8007ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	460d      	mov	r5, r1
 8007ab6:	b09d      	sub	sp, #116	@ 0x74
 8007ab8:	4614      	mov	r4, r2
 8007aba:	4698      	mov	r8, r3
 8007abc:	4606      	mov	r6, r0
 8007abe:	b118      	cbz	r0, 8007ac8 <_vfiprintf_r+0x18>
 8007ac0:	6a03      	ldr	r3, [r0, #32]
 8007ac2:	b90b      	cbnz	r3, 8007ac8 <_vfiprintf_r+0x18>
 8007ac4:	f7fd f9ca 	bl	8004e5c <__sinit>
 8007ac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007aca:	07d9      	lsls	r1, r3, #31
 8007acc:	d405      	bmi.n	8007ada <_vfiprintf_r+0x2a>
 8007ace:	89ab      	ldrh	r3, [r5, #12]
 8007ad0:	059a      	lsls	r2, r3, #22
 8007ad2:	d402      	bmi.n	8007ada <_vfiprintf_r+0x2a>
 8007ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ad6:	f7fd fbdc 	bl	8005292 <__retarget_lock_acquire_recursive>
 8007ada:	89ab      	ldrh	r3, [r5, #12]
 8007adc:	071b      	lsls	r3, r3, #28
 8007ade:	d501      	bpl.n	8007ae4 <_vfiprintf_r+0x34>
 8007ae0:	692b      	ldr	r3, [r5, #16]
 8007ae2:	b99b      	cbnz	r3, 8007b0c <_vfiprintf_r+0x5c>
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	f7fd fb00 	bl	80050ec <__swsetup_r>
 8007aec:	b170      	cbz	r0, 8007b0c <_vfiprintf_r+0x5c>
 8007aee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007af0:	07dc      	lsls	r4, r3, #31
 8007af2:	d504      	bpl.n	8007afe <_vfiprintf_r+0x4e>
 8007af4:	f04f 30ff 	mov.w	r0, #4294967295
 8007af8:	b01d      	add	sp, #116	@ 0x74
 8007afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afe:	89ab      	ldrh	r3, [r5, #12]
 8007b00:	0598      	lsls	r0, r3, #22
 8007b02:	d4f7      	bmi.n	8007af4 <_vfiprintf_r+0x44>
 8007b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b06:	f7fd fbc5 	bl	8005294 <__retarget_lock_release_recursive>
 8007b0a:	e7f3      	b.n	8007af4 <_vfiprintf_r+0x44>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b10:	2320      	movs	r3, #32
 8007b12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b1a:	2330      	movs	r3, #48	@ 0x30
 8007b1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ccc <_vfiprintf_r+0x21c>
 8007b20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b24:	f04f 0901 	mov.w	r9, #1
 8007b28:	4623      	mov	r3, r4
 8007b2a:	469a      	mov	sl, r3
 8007b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b30:	b10a      	cbz	r2, 8007b36 <_vfiprintf_r+0x86>
 8007b32:	2a25      	cmp	r2, #37	@ 0x25
 8007b34:	d1f9      	bne.n	8007b2a <_vfiprintf_r+0x7a>
 8007b36:	ebba 0b04 	subs.w	fp, sl, r4
 8007b3a:	d00b      	beq.n	8007b54 <_vfiprintf_r+0xa4>
 8007b3c:	465b      	mov	r3, fp
 8007b3e:	4622      	mov	r2, r4
 8007b40:	4629      	mov	r1, r5
 8007b42:	4630      	mov	r0, r6
 8007b44:	f7ff ffa1 	bl	8007a8a <__sfputs_r>
 8007b48:	3001      	adds	r0, #1
 8007b4a:	f000 80a7 	beq.w	8007c9c <_vfiprintf_r+0x1ec>
 8007b4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b50:	445a      	add	r2, fp
 8007b52:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b54:	f89a 3000 	ldrb.w	r3, [sl]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 809f 	beq.w	8007c9c <_vfiprintf_r+0x1ec>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f04f 32ff 	mov.w	r2, #4294967295
 8007b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b68:	f10a 0a01 	add.w	sl, sl, #1
 8007b6c:	9304      	str	r3, [sp, #16]
 8007b6e:	9307      	str	r3, [sp, #28]
 8007b70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b74:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b76:	4654      	mov	r4, sl
 8007b78:	2205      	movs	r2, #5
 8007b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b7e:	4853      	ldr	r0, [pc, #332]	@ (8007ccc <_vfiprintf_r+0x21c>)
 8007b80:	f7f8 fb26 	bl	80001d0 <memchr>
 8007b84:	9a04      	ldr	r2, [sp, #16]
 8007b86:	b9d8      	cbnz	r0, 8007bc0 <_vfiprintf_r+0x110>
 8007b88:	06d1      	lsls	r1, r2, #27
 8007b8a:	bf44      	itt	mi
 8007b8c:	2320      	movmi	r3, #32
 8007b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b92:	0713      	lsls	r3, r2, #28
 8007b94:	bf44      	itt	mi
 8007b96:	232b      	movmi	r3, #43	@ 0x2b
 8007b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ba2:	d015      	beq.n	8007bd0 <_vfiprintf_r+0x120>
 8007ba4:	9a07      	ldr	r2, [sp, #28]
 8007ba6:	4654      	mov	r4, sl
 8007ba8:	2000      	movs	r0, #0
 8007baa:	f04f 0c0a 	mov.w	ip, #10
 8007bae:	4621      	mov	r1, r4
 8007bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bb4:	3b30      	subs	r3, #48	@ 0x30
 8007bb6:	2b09      	cmp	r3, #9
 8007bb8:	d94b      	bls.n	8007c52 <_vfiprintf_r+0x1a2>
 8007bba:	b1b0      	cbz	r0, 8007bea <_vfiprintf_r+0x13a>
 8007bbc:	9207      	str	r2, [sp, #28]
 8007bbe:	e014      	b.n	8007bea <_vfiprintf_r+0x13a>
 8007bc0:	eba0 0308 	sub.w	r3, r0, r8
 8007bc4:	fa09 f303 	lsl.w	r3, r9, r3
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	9304      	str	r3, [sp, #16]
 8007bcc:	46a2      	mov	sl, r4
 8007bce:	e7d2      	b.n	8007b76 <_vfiprintf_r+0xc6>
 8007bd0:	9b03      	ldr	r3, [sp, #12]
 8007bd2:	1d19      	adds	r1, r3, #4
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	9103      	str	r1, [sp, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	bfbb      	ittet	lt
 8007bdc:	425b      	neglt	r3, r3
 8007bde:	f042 0202 	orrlt.w	r2, r2, #2
 8007be2:	9307      	strge	r3, [sp, #28]
 8007be4:	9307      	strlt	r3, [sp, #28]
 8007be6:	bfb8      	it	lt
 8007be8:	9204      	strlt	r2, [sp, #16]
 8007bea:	7823      	ldrb	r3, [r4, #0]
 8007bec:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bee:	d10a      	bne.n	8007c06 <_vfiprintf_r+0x156>
 8007bf0:	7863      	ldrb	r3, [r4, #1]
 8007bf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bf4:	d132      	bne.n	8007c5c <_vfiprintf_r+0x1ac>
 8007bf6:	9b03      	ldr	r3, [sp, #12]
 8007bf8:	1d1a      	adds	r2, r3, #4
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	9203      	str	r2, [sp, #12]
 8007bfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c02:	3402      	adds	r4, #2
 8007c04:	9305      	str	r3, [sp, #20]
 8007c06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007cdc <_vfiprintf_r+0x22c>
 8007c0a:	7821      	ldrb	r1, [r4, #0]
 8007c0c:	2203      	movs	r2, #3
 8007c0e:	4650      	mov	r0, sl
 8007c10:	f7f8 fade 	bl	80001d0 <memchr>
 8007c14:	b138      	cbz	r0, 8007c26 <_vfiprintf_r+0x176>
 8007c16:	9b04      	ldr	r3, [sp, #16]
 8007c18:	eba0 000a 	sub.w	r0, r0, sl
 8007c1c:	2240      	movs	r2, #64	@ 0x40
 8007c1e:	4082      	lsls	r2, r0
 8007c20:	4313      	orrs	r3, r2
 8007c22:	3401      	adds	r4, #1
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2a:	4829      	ldr	r0, [pc, #164]	@ (8007cd0 <_vfiprintf_r+0x220>)
 8007c2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c30:	2206      	movs	r2, #6
 8007c32:	f7f8 facd 	bl	80001d0 <memchr>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d03f      	beq.n	8007cba <_vfiprintf_r+0x20a>
 8007c3a:	4b26      	ldr	r3, [pc, #152]	@ (8007cd4 <_vfiprintf_r+0x224>)
 8007c3c:	bb1b      	cbnz	r3, 8007c86 <_vfiprintf_r+0x1d6>
 8007c3e:	9b03      	ldr	r3, [sp, #12]
 8007c40:	3307      	adds	r3, #7
 8007c42:	f023 0307 	bic.w	r3, r3, #7
 8007c46:	3308      	adds	r3, #8
 8007c48:	9303      	str	r3, [sp, #12]
 8007c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c4c:	443b      	add	r3, r7
 8007c4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c50:	e76a      	b.n	8007b28 <_vfiprintf_r+0x78>
 8007c52:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c56:	460c      	mov	r4, r1
 8007c58:	2001      	movs	r0, #1
 8007c5a:	e7a8      	b.n	8007bae <_vfiprintf_r+0xfe>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	3401      	adds	r4, #1
 8007c60:	9305      	str	r3, [sp, #20]
 8007c62:	4619      	mov	r1, r3
 8007c64:	f04f 0c0a 	mov.w	ip, #10
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c6e:	3a30      	subs	r2, #48	@ 0x30
 8007c70:	2a09      	cmp	r2, #9
 8007c72:	d903      	bls.n	8007c7c <_vfiprintf_r+0x1cc>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0c6      	beq.n	8007c06 <_vfiprintf_r+0x156>
 8007c78:	9105      	str	r1, [sp, #20]
 8007c7a:	e7c4      	b.n	8007c06 <_vfiprintf_r+0x156>
 8007c7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c80:	4604      	mov	r4, r0
 8007c82:	2301      	movs	r3, #1
 8007c84:	e7f0      	b.n	8007c68 <_vfiprintf_r+0x1b8>
 8007c86:	ab03      	add	r3, sp, #12
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	462a      	mov	r2, r5
 8007c8c:	4b12      	ldr	r3, [pc, #72]	@ (8007cd8 <_vfiprintf_r+0x228>)
 8007c8e:	a904      	add	r1, sp, #16
 8007c90:	4630      	mov	r0, r6
 8007c92:	f7fc fa8b 	bl	80041ac <_printf_float>
 8007c96:	4607      	mov	r7, r0
 8007c98:	1c78      	adds	r0, r7, #1
 8007c9a:	d1d6      	bne.n	8007c4a <_vfiprintf_r+0x19a>
 8007c9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c9e:	07d9      	lsls	r1, r3, #31
 8007ca0:	d405      	bmi.n	8007cae <_vfiprintf_r+0x1fe>
 8007ca2:	89ab      	ldrh	r3, [r5, #12]
 8007ca4:	059a      	lsls	r2, r3, #22
 8007ca6:	d402      	bmi.n	8007cae <_vfiprintf_r+0x1fe>
 8007ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007caa:	f7fd faf3 	bl	8005294 <__retarget_lock_release_recursive>
 8007cae:	89ab      	ldrh	r3, [r5, #12]
 8007cb0:	065b      	lsls	r3, r3, #25
 8007cb2:	f53f af1f 	bmi.w	8007af4 <_vfiprintf_r+0x44>
 8007cb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cb8:	e71e      	b.n	8007af8 <_vfiprintf_r+0x48>
 8007cba:	ab03      	add	r3, sp, #12
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	462a      	mov	r2, r5
 8007cc0:	4b05      	ldr	r3, [pc, #20]	@ (8007cd8 <_vfiprintf_r+0x228>)
 8007cc2:	a904      	add	r1, sp, #16
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	f7fc fd09 	bl	80046dc <_printf_i>
 8007cca:	e7e4      	b.n	8007c96 <_vfiprintf_r+0x1e6>
 8007ccc:	080093a9 	.word	0x080093a9
 8007cd0:	080093b3 	.word	0x080093b3
 8007cd4:	080041ad 	.word	0x080041ad
 8007cd8:	08007a8b 	.word	0x08007a8b
 8007cdc:	080093af 	.word	0x080093af

08007ce0 <__sflush_r>:
 8007ce0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce8:	0716      	lsls	r6, r2, #28
 8007cea:	4605      	mov	r5, r0
 8007cec:	460c      	mov	r4, r1
 8007cee:	d454      	bmi.n	8007d9a <__sflush_r+0xba>
 8007cf0:	684b      	ldr	r3, [r1, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	dc02      	bgt.n	8007cfc <__sflush_r+0x1c>
 8007cf6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	dd48      	ble.n	8007d8e <__sflush_r+0xae>
 8007cfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007cfe:	2e00      	cmp	r6, #0
 8007d00:	d045      	beq.n	8007d8e <__sflush_r+0xae>
 8007d02:	2300      	movs	r3, #0
 8007d04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d08:	682f      	ldr	r7, [r5, #0]
 8007d0a:	6a21      	ldr	r1, [r4, #32]
 8007d0c:	602b      	str	r3, [r5, #0]
 8007d0e:	d030      	beq.n	8007d72 <__sflush_r+0x92>
 8007d10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d12:	89a3      	ldrh	r3, [r4, #12]
 8007d14:	0759      	lsls	r1, r3, #29
 8007d16:	d505      	bpl.n	8007d24 <__sflush_r+0x44>
 8007d18:	6863      	ldr	r3, [r4, #4]
 8007d1a:	1ad2      	subs	r2, r2, r3
 8007d1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d1e:	b10b      	cbz	r3, 8007d24 <__sflush_r+0x44>
 8007d20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d22:	1ad2      	subs	r2, r2, r3
 8007d24:	2300      	movs	r3, #0
 8007d26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d28:	6a21      	ldr	r1, [r4, #32]
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	47b0      	blx	r6
 8007d2e:	1c43      	adds	r3, r0, #1
 8007d30:	89a3      	ldrh	r3, [r4, #12]
 8007d32:	d106      	bne.n	8007d42 <__sflush_r+0x62>
 8007d34:	6829      	ldr	r1, [r5, #0]
 8007d36:	291d      	cmp	r1, #29
 8007d38:	d82b      	bhi.n	8007d92 <__sflush_r+0xb2>
 8007d3a:	4a2a      	ldr	r2, [pc, #168]	@ (8007de4 <__sflush_r+0x104>)
 8007d3c:	410a      	asrs	r2, r1
 8007d3e:	07d6      	lsls	r6, r2, #31
 8007d40:	d427      	bmi.n	8007d92 <__sflush_r+0xb2>
 8007d42:	2200      	movs	r2, #0
 8007d44:	6062      	str	r2, [r4, #4]
 8007d46:	04d9      	lsls	r1, r3, #19
 8007d48:	6922      	ldr	r2, [r4, #16]
 8007d4a:	6022      	str	r2, [r4, #0]
 8007d4c:	d504      	bpl.n	8007d58 <__sflush_r+0x78>
 8007d4e:	1c42      	adds	r2, r0, #1
 8007d50:	d101      	bne.n	8007d56 <__sflush_r+0x76>
 8007d52:	682b      	ldr	r3, [r5, #0]
 8007d54:	b903      	cbnz	r3, 8007d58 <__sflush_r+0x78>
 8007d56:	6560      	str	r0, [r4, #84]	@ 0x54
 8007d58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d5a:	602f      	str	r7, [r5, #0]
 8007d5c:	b1b9      	cbz	r1, 8007d8e <__sflush_r+0xae>
 8007d5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d62:	4299      	cmp	r1, r3
 8007d64:	d002      	beq.n	8007d6c <__sflush_r+0x8c>
 8007d66:	4628      	mov	r0, r5
 8007d68:	f7fe f8ea 	bl	8005f40 <_free_r>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d70:	e00d      	b.n	8007d8e <__sflush_r+0xae>
 8007d72:	2301      	movs	r3, #1
 8007d74:	4628      	mov	r0, r5
 8007d76:	47b0      	blx	r6
 8007d78:	4602      	mov	r2, r0
 8007d7a:	1c50      	adds	r0, r2, #1
 8007d7c:	d1c9      	bne.n	8007d12 <__sflush_r+0x32>
 8007d7e:	682b      	ldr	r3, [r5, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d0c6      	beq.n	8007d12 <__sflush_r+0x32>
 8007d84:	2b1d      	cmp	r3, #29
 8007d86:	d001      	beq.n	8007d8c <__sflush_r+0xac>
 8007d88:	2b16      	cmp	r3, #22
 8007d8a:	d11e      	bne.n	8007dca <__sflush_r+0xea>
 8007d8c:	602f      	str	r7, [r5, #0]
 8007d8e:	2000      	movs	r0, #0
 8007d90:	e022      	b.n	8007dd8 <__sflush_r+0xf8>
 8007d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d96:	b21b      	sxth	r3, r3
 8007d98:	e01b      	b.n	8007dd2 <__sflush_r+0xf2>
 8007d9a:	690f      	ldr	r7, [r1, #16]
 8007d9c:	2f00      	cmp	r7, #0
 8007d9e:	d0f6      	beq.n	8007d8e <__sflush_r+0xae>
 8007da0:	0793      	lsls	r3, r2, #30
 8007da2:	680e      	ldr	r6, [r1, #0]
 8007da4:	bf08      	it	eq
 8007da6:	694b      	ldreq	r3, [r1, #20]
 8007da8:	600f      	str	r7, [r1, #0]
 8007daa:	bf18      	it	ne
 8007dac:	2300      	movne	r3, #0
 8007dae:	eba6 0807 	sub.w	r8, r6, r7
 8007db2:	608b      	str	r3, [r1, #8]
 8007db4:	f1b8 0f00 	cmp.w	r8, #0
 8007db8:	dde9      	ble.n	8007d8e <__sflush_r+0xae>
 8007dba:	6a21      	ldr	r1, [r4, #32]
 8007dbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007dbe:	4643      	mov	r3, r8
 8007dc0:	463a      	mov	r2, r7
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	47b0      	blx	r6
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	dc08      	bgt.n	8007ddc <__sflush_r+0xfc>
 8007dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dd2:	81a3      	strh	r3, [r4, #12]
 8007dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ddc:	4407      	add	r7, r0
 8007dde:	eba8 0800 	sub.w	r8, r8, r0
 8007de2:	e7e7      	b.n	8007db4 <__sflush_r+0xd4>
 8007de4:	dfbffffe 	.word	0xdfbffffe

08007de8 <_fflush_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	690b      	ldr	r3, [r1, #16]
 8007dec:	4605      	mov	r5, r0
 8007dee:	460c      	mov	r4, r1
 8007df0:	b913      	cbnz	r3, 8007df8 <_fflush_r+0x10>
 8007df2:	2500      	movs	r5, #0
 8007df4:	4628      	mov	r0, r5
 8007df6:	bd38      	pop	{r3, r4, r5, pc}
 8007df8:	b118      	cbz	r0, 8007e02 <_fflush_r+0x1a>
 8007dfa:	6a03      	ldr	r3, [r0, #32]
 8007dfc:	b90b      	cbnz	r3, 8007e02 <_fflush_r+0x1a>
 8007dfe:	f7fd f82d 	bl	8004e5c <__sinit>
 8007e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0f3      	beq.n	8007df2 <_fflush_r+0xa>
 8007e0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e0c:	07d0      	lsls	r0, r2, #31
 8007e0e:	d404      	bmi.n	8007e1a <_fflush_r+0x32>
 8007e10:	0599      	lsls	r1, r3, #22
 8007e12:	d402      	bmi.n	8007e1a <_fflush_r+0x32>
 8007e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e16:	f7fd fa3c 	bl	8005292 <__retarget_lock_acquire_recursive>
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	f7ff ff5f 	bl	8007ce0 <__sflush_r>
 8007e22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e24:	07da      	lsls	r2, r3, #31
 8007e26:	4605      	mov	r5, r0
 8007e28:	d4e4      	bmi.n	8007df4 <_fflush_r+0xc>
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	059b      	lsls	r3, r3, #22
 8007e2e:	d4e1      	bmi.n	8007df4 <_fflush_r+0xc>
 8007e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e32:	f7fd fa2f 	bl	8005294 <__retarget_lock_release_recursive>
 8007e36:	e7dd      	b.n	8007df4 <_fflush_r+0xc>

08007e38 <__swhatbuf_r>:
 8007e38:	b570      	push	{r4, r5, r6, lr}
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e40:	2900      	cmp	r1, #0
 8007e42:	b096      	sub	sp, #88	@ 0x58
 8007e44:	4615      	mov	r5, r2
 8007e46:	461e      	mov	r6, r3
 8007e48:	da0d      	bge.n	8007e66 <__swhatbuf_r+0x2e>
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e50:	f04f 0100 	mov.w	r1, #0
 8007e54:	bf14      	ite	ne
 8007e56:	2340      	movne	r3, #64	@ 0x40
 8007e58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	6031      	str	r1, [r6, #0]
 8007e60:	602b      	str	r3, [r5, #0]
 8007e62:	b016      	add	sp, #88	@ 0x58
 8007e64:	bd70      	pop	{r4, r5, r6, pc}
 8007e66:	466a      	mov	r2, sp
 8007e68:	f000 f874 	bl	8007f54 <_fstat_r>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	dbec      	blt.n	8007e4a <__swhatbuf_r+0x12>
 8007e70:	9901      	ldr	r1, [sp, #4]
 8007e72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e7a:	4259      	negs	r1, r3
 8007e7c:	4159      	adcs	r1, r3
 8007e7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e82:	e7eb      	b.n	8007e5c <__swhatbuf_r+0x24>

08007e84 <__smakebuf_r>:
 8007e84:	898b      	ldrh	r3, [r1, #12]
 8007e86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e88:	079d      	lsls	r5, r3, #30
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	d507      	bpl.n	8007ea0 <__smakebuf_r+0x1c>
 8007e90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	6123      	str	r3, [r4, #16]
 8007e98:	2301      	movs	r3, #1
 8007e9a:	6163      	str	r3, [r4, #20]
 8007e9c:	b003      	add	sp, #12
 8007e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ea0:	ab01      	add	r3, sp, #4
 8007ea2:	466a      	mov	r2, sp
 8007ea4:	f7ff ffc8 	bl	8007e38 <__swhatbuf_r>
 8007ea8:	9f00      	ldr	r7, [sp, #0]
 8007eaa:	4605      	mov	r5, r0
 8007eac:	4639      	mov	r1, r7
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f7fe f8ba 	bl	8006028 <_malloc_r>
 8007eb4:	b948      	cbnz	r0, 8007eca <__smakebuf_r+0x46>
 8007eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eba:	059a      	lsls	r2, r3, #22
 8007ebc:	d4ee      	bmi.n	8007e9c <__smakebuf_r+0x18>
 8007ebe:	f023 0303 	bic.w	r3, r3, #3
 8007ec2:	f043 0302 	orr.w	r3, r3, #2
 8007ec6:	81a3      	strh	r3, [r4, #12]
 8007ec8:	e7e2      	b.n	8007e90 <__smakebuf_r+0xc>
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	6020      	str	r0, [r4, #0]
 8007ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ed2:	81a3      	strh	r3, [r4, #12]
 8007ed4:	9b01      	ldr	r3, [sp, #4]
 8007ed6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007eda:	b15b      	cbz	r3, 8007ef4 <__smakebuf_r+0x70>
 8007edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f000 f849 	bl	8007f78 <_isatty_r>
 8007ee6:	b128      	cbz	r0, 8007ef4 <__smakebuf_r+0x70>
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	f023 0303 	bic.w	r3, r3, #3
 8007eee:	f043 0301 	orr.w	r3, r3, #1
 8007ef2:	81a3      	strh	r3, [r4, #12]
 8007ef4:	89a3      	ldrh	r3, [r4, #12]
 8007ef6:	431d      	orrs	r5, r3
 8007ef8:	81a5      	strh	r5, [r4, #12]
 8007efa:	e7cf      	b.n	8007e9c <__smakebuf_r+0x18>

08007efc <memmove>:
 8007efc:	4288      	cmp	r0, r1
 8007efe:	b510      	push	{r4, lr}
 8007f00:	eb01 0402 	add.w	r4, r1, r2
 8007f04:	d902      	bls.n	8007f0c <memmove+0x10>
 8007f06:	4284      	cmp	r4, r0
 8007f08:	4623      	mov	r3, r4
 8007f0a:	d807      	bhi.n	8007f1c <memmove+0x20>
 8007f0c:	1e43      	subs	r3, r0, #1
 8007f0e:	42a1      	cmp	r1, r4
 8007f10:	d008      	beq.n	8007f24 <memmove+0x28>
 8007f12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f1a:	e7f8      	b.n	8007f0e <memmove+0x12>
 8007f1c:	4402      	add	r2, r0
 8007f1e:	4601      	mov	r1, r0
 8007f20:	428a      	cmp	r2, r1
 8007f22:	d100      	bne.n	8007f26 <memmove+0x2a>
 8007f24:	bd10      	pop	{r4, pc}
 8007f26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f2e:	e7f7      	b.n	8007f20 <memmove+0x24>

08007f30 <strncmp>:
 8007f30:	b510      	push	{r4, lr}
 8007f32:	b16a      	cbz	r2, 8007f50 <strncmp+0x20>
 8007f34:	3901      	subs	r1, #1
 8007f36:	1884      	adds	r4, r0, r2
 8007f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d103      	bne.n	8007f4c <strncmp+0x1c>
 8007f44:	42a0      	cmp	r0, r4
 8007f46:	d001      	beq.n	8007f4c <strncmp+0x1c>
 8007f48:	2a00      	cmp	r2, #0
 8007f4a:	d1f5      	bne.n	8007f38 <strncmp+0x8>
 8007f4c:	1ad0      	subs	r0, r2, r3
 8007f4e:	bd10      	pop	{r4, pc}
 8007f50:	4610      	mov	r0, r2
 8007f52:	e7fc      	b.n	8007f4e <strncmp+0x1e>

08007f54 <_fstat_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	4d07      	ldr	r5, [pc, #28]	@ (8007f74 <_fstat_r+0x20>)
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	4608      	mov	r0, r1
 8007f5e:	4611      	mov	r1, r2
 8007f60:	602b      	str	r3, [r5, #0]
 8007f62:	f7f9 fb29 	bl	80015b8 <_fstat>
 8007f66:	1c43      	adds	r3, r0, #1
 8007f68:	d102      	bne.n	8007f70 <_fstat_r+0x1c>
 8007f6a:	682b      	ldr	r3, [r5, #0]
 8007f6c:	b103      	cbz	r3, 8007f70 <_fstat_r+0x1c>
 8007f6e:	6023      	str	r3, [r4, #0]
 8007f70:	bd38      	pop	{r3, r4, r5, pc}
 8007f72:	bf00      	nop
 8007f74:	200003b0 	.word	0x200003b0

08007f78 <_isatty_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4d06      	ldr	r5, [pc, #24]	@ (8007f94 <_isatty_r+0x1c>)
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	4604      	mov	r4, r0
 8007f80:	4608      	mov	r0, r1
 8007f82:	602b      	str	r3, [r5, #0]
 8007f84:	f7f9 fb28 	bl	80015d8 <_isatty>
 8007f88:	1c43      	adds	r3, r0, #1
 8007f8a:	d102      	bne.n	8007f92 <_isatty_r+0x1a>
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	b103      	cbz	r3, 8007f92 <_isatty_r+0x1a>
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	bd38      	pop	{r3, r4, r5, pc}
 8007f94:	200003b0 	.word	0x200003b0

08007f98 <_sbrk_r>:
 8007f98:	b538      	push	{r3, r4, r5, lr}
 8007f9a:	4d06      	ldr	r5, [pc, #24]	@ (8007fb4 <_sbrk_r+0x1c>)
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	4608      	mov	r0, r1
 8007fa2:	602b      	str	r3, [r5, #0]
 8007fa4:	f7f9 fb30 	bl	8001608 <_sbrk>
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	d102      	bne.n	8007fb2 <_sbrk_r+0x1a>
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	b103      	cbz	r3, 8007fb2 <_sbrk_r+0x1a>
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	bd38      	pop	{r3, r4, r5, pc}
 8007fb4:	200003b0 	.word	0x200003b0

08007fb8 <memcpy>:
 8007fb8:	440a      	add	r2, r1
 8007fba:	4291      	cmp	r1, r2
 8007fbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fc0:	d100      	bne.n	8007fc4 <memcpy+0xc>
 8007fc2:	4770      	bx	lr
 8007fc4:	b510      	push	{r4, lr}
 8007fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fce:	4291      	cmp	r1, r2
 8007fd0:	d1f9      	bne.n	8007fc6 <memcpy+0xe>
 8007fd2:	bd10      	pop	{r4, pc}
 8007fd4:	0000      	movs	r0, r0
	...

08007fd8 <nan>:
 8007fd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007fe0 <nan+0x8>
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	00000000 	.word	0x00000000
 8007fe4:	7ff80000 	.word	0x7ff80000

08007fe8 <__assert_func>:
 8007fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007fea:	4614      	mov	r4, r2
 8007fec:	461a      	mov	r2, r3
 8007fee:	4b09      	ldr	r3, [pc, #36]	@ (8008014 <__assert_func+0x2c>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4605      	mov	r5, r0
 8007ff4:	68d8      	ldr	r0, [r3, #12]
 8007ff6:	b954      	cbnz	r4, 800800e <__assert_func+0x26>
 8007ff8:	4b07      	ldr	r3, [pc, #28]	@ (8008018 <__assert_func+0x30>)
 8007ffa:	461c      	mov	r4, r3
 8007ffc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008000:	9100      	str	r1, [sp, #0]
 8008002:	462b      	mov	r3, r5
 8008004:	4905      	ldr	r1, [pc, #20]	@ (800801c <__assert_func+0x34>)
 8008006:	f000 fba7 	bl	8008758 <fiprintf>
 800800a:	f000 fbb7 	bl	800877c <abort>
 800800e:	4b04      	ldr	r3, [pc, #16]	@ (8008020 <__assert_func+0x38>)
 8008010:	e7f4      	b.n	8007ffc <__assert_func+0x14>
 8008012:	bf00      	nop
 8008014:	20000018 	.word	0x20000018
 8008018:	080093fd 	.word	0x080093fd
 800801c:	080093cf 	.word	0x080093cf
 8008020:	080093c2 	.word	0x080093c2

08008024 <_calloc_r>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	fba1 5402 	umull	r5, r4, r1, r2
 800802a:	b93c      	cbnz	r4, 800803c <_calloc_r+0x18>
 800802c:	4629      	mov	r1, r5
 800802e:	f7fd fffb 	bl	8006028 <_malloc_r>
 8008032:	4606      	mov	r6, r0
 8008034:	b928      	cbnz	r0, 8008042 <_calloc_r+0x1e>
 8008036:	2600      	movs	r6, #0
 8008038:	4630      	mov	r0, r6
 800803a:	bd70      	pop	{r4, r5, r6, pc}
 800803c:	220c      	movs	r2, #12
 800803e:	6002      	str	r2, [r0, #0]
 8008040:	e7f9      	b.n	8008036 <_calloc_r+0x12>
 8008042:	462a      	mov	r2, r5
 8008044:	4621      	mov	r1, r4
 8008046:	f7fd f8a7 	bl	8005198 <memset>
 800804a:	e7f5      	b.n	8008038 <_calloc_r+0x14>

0800804c <rshift>:
 800804c:	6903      	ldr	r3, [r0, #16]
 800804e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008052:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008056:	ea4f 1261 	mov.w	r2, r1, asr #5
 800805a:	f100 0414 	add.w	r4, r0, #20
 800805e:	dd45      	ble.n	80080ec <rshift+0xa0>
 8008060:	f011 011f 	ands.w	r1, r1, #31
 8008064:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008068:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800806c:	d10c      	bne.n	8008088 <rshift+0x3c>
 800806e:	f100 0710 	add.w	r7, r0, #16
 8008072:	4629      	mov	r1, r5
 8008074:	42b1      	cmp	r1, r6
 8008076:	d334      	bcc.n	80080e2 <rshift+0x96>
 8008078:	1a9b      	subs	r3, r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	1eea      	subs	r2, r5, #3
 800807e:	4296      	cmp	r6, r2
 8008080:	bf38      	it	cc
 8008082:	2300      	movcc	r3, #0
 8008084:	4423      	add	r3, r4
 8008086:	e015      	b.n	80080b4 <rshift+0x68>
 8008088:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800808c:	f1c1 0820 	rsb	r8, r1, #32
 8008090:	40cf      	lsrs	r7, r1
 8008092:	f105 0e04 	add.w	lr, r5, #4
 8008096:	46a1      	mov	r9, r4
 8008098:	4576      	cmp	r6, lr
 800809a:	46f4      	mov	ip, lr
 800809c:	d815      	bhi.n	80080ca <rshift+0x7e>
 800809e:	1a9a      	subs	r2, r3, r2
 80080a0:	0092      	lsls	r2, r2, #2
 80080a2:	3a04      	subs	r2, #4
 80080a4:	3501      	adds	r5, #1
 80080a6:	42ae      	cmp	r6, r5
 80080a8:	bf38      	it	cc
 80080aa:	2200      	movcc	r2, #0
 80080ac:	18a3      	adds	r3, r4, r2
 80080ae:	50a7      	str	r7, [r4, r2]
 80080b0:	b107      	cbz	r7, 80080b4 <rshift+0x68>
 80080b2:	3304      	adds	r3, #4
 80080b4:	1b1a      	subs	r2, r3, r4
 80080b6:	42a3      	cmp	r3, r4
 80080b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80080bc:	bf08      	it	eq
 80080be:	2300      	moveq	r3, #0
 80080c0:	6102      	str	r2, [r0, #16]
 80080c2:	bf08      	it	eq
 80080c4:	6143      	streq	r3, [r0, #20]
 80080c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080ca:	f8dc c000 	ldr.w	ip, [ip]
 80080ce:	fa0c fc08 	lsl.w	ip, ip, r8
 80080d2:	ea4c 0707 	orr.w	r7, ip, r7
 80080d6:	f849 7b04 	str.w	r7, [r9], #4
 80080da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80080de:	40cf      	lsrs	r7, r1
 80080e0:	e7da      	b.n	8008098 <rshift+0x4c>
 80080e2:	f851 cb04 	ldr.w	ip, [r1], #4
 80080e6:	f847 cf04 	str.w	ip, [r7, #4]!
 80080ea:	e7c3      	b.n	8008074 <rshift+0x28>
 80080ec:	4623      	mov	r3, r4
 80080ee:	e7e1      	b.n	80080b4 <rshift+0x68>

080080f0 <__hexdig_fun>:
 80080f0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80080f4:	2b09      	cmp	r3, #9
 80080f6:	d802      	bhi.n	80080fe <__hexdig_fun+0xe>
 80080f8:	3820      	subs	r0, #32
 80080fa:	b2c0      	uxtb	r0, r0
 80080fc:	4770      	bx	lr
 80080fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008102:	2b05      	cmp	r3, #5
 8008104:	d801      	bhi.n	800810a <__hexdig_fun+0x1a>
 8008106:	3847      	subs	r0, #71	@ 0x47
 8008108:	e7f7      	b.n	80080fa <__hexdig_fun+0xa>
 800810a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800810e:	2b05      	cmp	r3, #5
 8008110:	d801      	bhi.n	8008116 <__hexdig_fun+0x26>
 8008112:	3827      	subs	r0, #39	@ 0x27
 8008114:	e7f1      	b.n	80080fa <__hexdig_fun+0xa>
 8008116:	2000      	movs	r0, #0
 8008118:	4770      	bx	lr
	...

0800811c <__gethex>:
 800811c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008120:	b085      	sub	sp, #20
 8008122:	468a      	mov	sl, r1
 8008124:	9302      	str	r3, [sp, #8]
 8008126:	680b      	ldr	r3, [r1, #0]
 8008128:	9001      	str	r0, [sp, #4]
 800812a:	4690      	mov	r8, r2
 800812c:	1c9c      	adds	r4, r3, #2
 800812e:	46a1      	mov	r9, r4
 8008130:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008134:	2830      	cmp	r0, #48	@ 0x30
 8008136:	d0fa      	beq.n	800812e <__gethex+0x12>
 8008138:	eba9 0303 	sub.w	r3, r9, r3
 800813c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008140:	f7ff ffd6 	bl	80080f0 <__hexdig_fun>
 8008144:	4605      	mov	r5, r0
 8008146:	2800      	cmp	r0, #0
 8008148:	d168      	bne.n	800821c <__gethex+0x100>
 800814a:	49a0      	ldr	r1, [pc, #640]	@ (80083cc <__gethex+0x2b0>)
 800814c:	2201      	movs	r2, #1
 800814e:	4648      	mov	r0, r9
 8008150:	f7ff feee 	bl	8007f30 <strncmp>
 8008154:	4607      	mov	r7, r0
 8008156:	2800      	cmp	r0, #0
 8008158:	d167      	bne.n	800822a <__gethex+0x10e>
 800815a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800815e:	4626      	mov	r6, r4
 8008160:	f7ff ffc6 	bl	80080f0 <__hexdig_fun>
 8008164:	2800      	cmp	r0, #0
 8008166:	d062      	beq.n	800822e <__gethex+0x112>
 8008168:	4623      	mov	r3, r4
 800816a:	7818      	ldrb	r0, [r3, #0]
 800816c:	2830      	cmp	r0, #48	@ 0x30
 800816e:	4699      	mov	r9, r3
 8008170:	f103 0301 	add.w	r3, r3, #1
 8008174:	d0f9      	beq.n	800816a <__gethex+0x4e>
 8008176:	f7ff ffbb 	bl	80080f0 <__hexdig_fun>
 800817a:	fab0 f580 	clz	r5, r0
 800817e:	096d      	lsrs	r5, r5, #5
 8008180:	f04f 0b01 	mov.w	fp, #1
 8008184:	464a      	mov	r2, r9
 8008186:	4616      	mov	r6, r2
 8008188:	3201      	adds	r2, #1
 800818a:	7830      	ldrb	r0, [r6, #0]
 800818c:	f7ff ffb0 	bl	80080f0 <__hexdig_fun>
 8008190:	2800      	cmp	r0, #0
 8008192:	d1f8      	bne.n	8008186 <__gethex+0x6a>
 8008194:	498d      	ldr	r1, [pc, #564]	@ (80083cc <__gethex+0x2b0>)
 8008196:	2201      	movs	r2, #1
 8008198:	4630      	mov	r0, r6
 800819a:	f7ff fec9 	bl	8007f30 <strncmp>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d13f      	bne.n	8008222 <__gethex+0x106>
 80081a2:	b944      	cbnz	r4, 80081b6 <__gethex+0x9a>
 80081a4:	1c74      	adds	r4, r6, #1
 80081a6:	4622      	mov	r2, r4
 80081a8:	4616      	mov	r6, r2
 80081aa:	3201      	adds	r2, #1
 80081ac:	7830      	ldrb	r0, [r6, #0]
 80081ae:	f7ff ff9f 	bl	80080f0 <__hexdig_fun>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d1f8      	bne.n	80081a8 <__gethex+0x8c>
 80081b6:	1ba4      	subs	r4, r4, r6
 80081b8:	00a7      	lsls	r7, r4, #2
 80081ba:	7833      	ldrb	r3, [r6, #0]
 80081bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80081c0:	2b50      	cmp	r3, #80	@ 0x50
 80081c2:	d13e      	bne.n	8008242 <__gethex+0x126>
 80081c4:	7873      	ldrb	r3, [r6, #1]
 80081c6:	2b2b      	cmp	r3, #43	@ 0x2b
 80081c8:	d033      	beq.n	8008232 <__gethex+0x116>
 80081ca:	2b2d      	cmp	r3, #45	@ 0x2d
 80081cc:	d034      	beq.n	8008238 <__gethex+0x11c>
 80081ce:	1c71      	adds	r1, r6, #1
 80081d0:	2400      	movs	r4, #0
 80081d2:	7808      	ldrb	r0, [r1, #0]
 80081d4:	f7ff ff8c 	bl	80080f0 <__hexdig_fun>
 80081d8:	1e43      	subs	r3, r0, #1
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b18      	cmp	r3, #24
 80081de:	d830      	bhi.n	8008242 <__gethex+0x126>
 80081e0:	f1a0 0210 	sub.w	r2, r0, #16
 80081e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80081e8:	f7ff ff82 	bl	80080f0 <__hexdig_fun>
 80081ec:	f100 3cff 	add.w	ip, r0, #4294967295
 80081f0:	fa5f fc8c 	uxtb.w	ip, ip
 80081f4:	f1bc 0f18 	cmp.w	ip, #24
 80081f8:	f04f 030a 	mov.w	r3, #10
 80081fc:	d91e      	bls.n	800823c <__gethex+0x120>
 80081fe:	b104      	cbz	r4, 8008202 <__gethex+0xe6>
 8008200:	4252      	negs	r2, r2
 8008202:	4417      	add	r7, r2
 8008204:	f8ca 1000 	str.w	r1, [sl]
 8008208:	b1ed      	cbz	r5, 8008246 <__gethex+0x12a>
 800820a:	f1bb 0f00 	cmp.w	fp, #0
 800820e:	bf0c      	ite	eq
 8008210:	2506      	moveq	r5, #6
 8008212:	2500      	movne	r5, #0
 8008214:	4628      	mov	r0, r5
 8008216:	b005      	add	sp, #20
 8008218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821c:	2500      	movs	r5, #0
 800821e:	462c      	mov	r4, r5
 8008220:	e7b0      	b.n	8008184 <__gethex+0x68>
 8008222:	2c00      	cmp	r4, #0
 8008224:	d1c7      	bne.n	80081b6 <__gethex+0x9a>
 8008226:	4627      	mov	r7, r4
 8008228:	e7c7      	b.n	80081ba <__gethex+0x9e>
 800822a:	464e      	mov	r6, r9
 800822c:	462f      	mov	r7, r5
 800822e:	2501      	movs	r5, #1
 8008230:	e7c3      	b.n	80081ba <__gethex+0x9e>
 8008232:	2400      	movs	r4, #0
 8008234:	1cb1      	adds	r1, r6, #2
 8008236:	e7cc      	b.n	80081d2 <__gethex+0xb6>
 8008238:	2401      	movs	r4, #1
 800823a:	e7fb      	b.n	8008234 <__gethex+0x118>
 800823c:	fb03 0002 	mla	r0, r3, r2, r0
 8008240:	e7ce      	b.n	80081e0 <__gethex+0xc4>
 8008242:	4631      	mov	r1, r6
 8008244:	e7de      	b.n	8008204 <__gethex+0xe8>
 8008246:	eba6 0309 	sub.w	r3, r6, r9
 800824a:	3b01      	subs	r3, #1
 800824c:	4629      	mov	r1, r5
 800824e:	2b07      	cmp	r3, #7
 8008250:	dc0a      	bgt.n	8008268 <__gethex+0x14c>
 8008252:	9801      	ldr	r0, [sp, #4]
 8008254:	f7fd ff74 	bl	8006140 <_Balloc>
 8008258:	4604      	mov	r4, r0
 800825a:	b940      	cbnz	r0, 800826e <__gethex+0x152>
 800825c:	4b5c      	ldr	r3, [pc, #368]	@ (80083d0 <__gethex+0x2b4>)
 800825e:	4602      	mov	r2, r0
 8008260:	21e4      	movs	r1, #228	@ 0xe4
 8008262:	485c      	ldr	r0, [pc, #368]	@ (80083d4 <__gethex+0x2b8>)
 8008264:	f7ff fec0 	bl	8007fe8 <__assert_func>
 8008268:	3101      	adds	r1, #1
 800826a:	105b      	asrs	r3, r3, #1
 800826c:	e7ef      	b.n	800824e <__gethex+0x132>
 800826e:	f100 0a14 	add.w	sl, r0, #20
 8008272:	2300      	movs	r3, #0
 8008274:	4655      	mov	r5, sl
 8008276:	469b      	mov	fp, r3
 8008278:	45b1      	cmp	r9, r6
 800827a:	d337      	bcc.n	80082ec <__gethex+0x1d0>
 800827c:	f845 bb04 	str.w	fp, [r5], #4
 8008280:	eba5 050a 	sub.w	r5, r5, sl
 8008284:	10ad      	asrs	r5, r5, #2
 8008286:	6125      	str	r5, [r4, #16]
 8008288:	4658      	mov	r0, fp
 800828a:	f7fe f84b 	bl	8006324 <__hi0bits>
 800828e:	016d      	lsls	r5, r5, #5
 8008290:	f8d8 6000 	ldr.w	r6, [r8]
 8008294:	1a2d      	subs	r5, r5, r0
 8008296:	42b5      	cmp	r5, r6
 8008298:	dd54      	ble.n	8008344 <__gethex+0x228>
 800829a:	1bad      	subs	r5, r5, r6
 800829c:	4629      	mov	r1, r5
 800829e:	4620      	mov	r0, r4
 80082a0:	f7fe fbdf 	bl	8006a62 <__any_on>
 80082a4:	4681      	mov	r9, r0
 80082a6:	b178      	cbz	r0, 80082c8 <__gethex+0x1ac>
 80082a8:	1e6b      	subs	r3, r5, #1
 80082aa:	1159      	asrs	r1, r3, #5
 80082ac:	f003 021f 	and.w	r2, r3, #31
 80082b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80082b4:	f04f 0901 	mov.w	r9, #1
 80082b8:	fa09 f202 	lsl.w	r2, r9, r2
 80082bc:	420a      	tst	r2, r1
 80082be:	d003      	beq.n	80082c8 <__gethex+0x1ac>
 80082c0:	454b      	cmp	r3, r9
 80082c2:	dc36      	bgt.n	8008332 <__gethex+0x216>
 80082c4:	f04f 0902 	mov.w	r9, #2
 80082c8:	4629      	mov	r1, r5
 80082ca:	4620      	mov	r0, r4
 80082cc:	f7ff febe 	bl	800804c <rshift>
 80082d0:	442f      	add	r7, r5
 80082d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082d6:	42bb      	cmp	r3, r7
 80082d8:	da42      	bge.n	8008360 <__gethex+0x244>
 80082da:	9801      	ldr	r0, [sp, #4]
 80082dc:	4621      	mov	r1, r4
 80082de:	f7fd ff6f 	bl	80061c0 <_Bfree>
 80082e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082e4:	2300      	movs	r3, #0
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	25a3      	movs	r5, #163	@ 0xa3
 80082ea:	e793      	b.n	8008214 <__gethex+0xf8>
 80082ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80082f0:	2a2e      	cmp	r2, #46	@ 0x2e
 80082f2:	d012      	beq.n	800831a <__gethex+0x1fe>
 80082f4:	2b20      	cmp	r3, #32
 80082f6:	d104      	bne.n	8008302 <__gethex+0x1e6>
 80082f8:	f845 bb04 	str.w	fp, [r5], #4
 80082fc:	f04f 0b00 	mov.w	fp, #0
 8008300:	465b      	mov	r3, fp
 8008302:	7830      	ldrb	r0, [r6, #0]
 8008304:	9303      	str	r3, [sp, #12]
 8008306:	f7ff fef3 	bl	80080f0 <__hexdig_fun>
 800830a:	9b03      	ldr	r3, [sp, #12]
 800830c:	f000 000f 	and.w	r0, r0, #15
 8008310:	4098      	lsls	r0, r3
 8008312:	ea4b 0b00 	orr.w	fp, fp, r0
 8008316:	3304      	adds	r3, #4
 8008318:	e7ae      	b.n	8008278 <__gethex+0x15c>
 800831a:	45b1      	cmp	r9, r6
 800831c:	d8ea      	bhi.n	80082f4 <__gethex+0x1d8>
 800831e:	492b      	ldr	r1, [pc, #172]	@ (80083cc <__gethex+0x2b0>)
 8008320:	9303      	str	r3, [sp, #12]
 8008322:	2201      	movs	r2, #1
 8008324:	4630      	mov	r0, r6
 8008326:	f7ff fe03 	bl	8007f30 <strncmp>
 800832a:	9b03      	ldr	r3, [sp, #12]
 800832c:	2800      	cmp	r0, #0
 800832e:	d1e1      	bne.n	80082f4 <__gethex+0x1d8>
 8008330:	e7a2      	b.n	8008278 <__gethex+0x15c>
 8008332:	1ea9      	subs	r1, r5, #2
 8008334:	4620      	mov	r0, r4
 8008336:	f7fe fb94 	bl	8006a62 <__any_on>
 800833a:	2800      	cmp	r0, #0
 800833c:	d0c2      	beq.n	80082c4 <__gethex+0x1a8>
 800833e:	f04f 0903 	mov.w	r9, #3
 8008342:	e7c1      	b.n	80082c8 <__gethex+0x1ac>
 8008344:	da09      	bge.n	800835a <__gethex+0x23e>
 8008346:	1b75      	subs	r5, r6, r5
 8008348:	4621      	mov	r1, r4
 800834a:	9801      	ldr	r0, [sp, #4]
 800834c:	462a      	mov	r2, r5
 800834e:	f7fe f94f 	bl	80065f0 <__lshift>
 8008352:	1b7f      	subs	r7, r7, r5
 8008354:	4604      	mov	r4, r0
 8008356:	f100 0a14 	add.w	sl, r0, #20
 800835a:	f04f 0900 	mov.w	r9, #0
 800835e:	e7b8      	b.n	80082d2 <__gethex+0x1b6>
 8008360:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008364:	42bd      	cmp	r5, r7
 8008366:	dd6f      	ble.n	8008448 <__gethex+0x32c>
 8008368:	1bed      	subs	r5, r5, r7
 800836a:	42ae      	cmp	r6, r5
 800836c:	dc34      	bgt.n	80083d8 <__gethex+0x2bc>
 800836e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008372:	2b02      	cmp	r3, #2
 8008374:	d022      	beq.n	80083bc <__gethex+0x2a0>
 8008376:	2b03      	cmp	r3, #3
 8008378:	d024      	beq.n	80083c4 <__gethex+0x2a8>
 800837a:	2b01      	cmp	r3, #1
 800837c:	d115      	bne.n	80083aa <__gethex+0x28e>
 800837e:	42ae      	cmp	r6, r5
 8008380:	d113      	bne.n	80083aa <__gethex+0x28e>
 8008382:	2e01      	cmp	r6, #1
 8008384:	d10b      	bne.n	800839e <__gethex+0x282>
 8008386:	9a02      	ldr	r2, [sp, #8]
 8008388:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800838c:	6013      	str	r3, [r2, #0]
 800838e:	2301      	movs	r3, #1
 8008390:	6123      	str	r3, [r4, #16]
 8008392:	f8ca 3000 	str.w	r3, [sl]
 8008396:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008398:	2562      	movs	r5, #98	@ 0x62
 800839a:	601c      	str	r4, [r3, #0]
 800839c:	e73a      	b.n	8008214 <__gethex+0xf8>
 800839e:	1e71      	subs	r1, r6, #1
 80083a0:	4620      	mov	r0, r4
 80083a2:	f7fe fb5e 	bl	8006a62 <__any_on>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d1ed      	bne.n	8008386 <__gethex+0x26a>
 80083aa:	9801      	ldr	r0, [sp, #4]
 80083ac:	4621      	mov	r1, r4
 80083ae:	f7fd ff07 	bl	80061c0 <_Bfree>
 80083b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083b4:	2300      	movs	r3, #0
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	2550      	movs	r5, #80	@ 0x50
 80083ba:	e72b      	b.n	8008214 <__gethex+0xf8>
 80083bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1f3      	bne.n	80083aa <__gethex+0x28e>
 80083c2:	e7e0      	b.n	8008386 <__gethex+0x26a>
 80083c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1dd      	bne.n	8008386 <__gethex+0x26a>
 80083ca:	e7ee      	b.n	80083aa <__gethex+0x28e>
 80083cc:	08009250 	.word	0x08009250
 80083d0:	080090e5 	.word	0x080090e5
 80083d4:	080093fe 	.word	0x080093fe
 80083d8:	1e6f      	subs	r7, r5, #1
 80083da:	f1b9 0f00 	cmp.w	r9, #0
 80083de:	d130      	bne.n	8008442 <__gethex+0x326>
 80083e0:	b127      	cbz	r7, 80083ec <__gethex+0x2d0>
 80083e2:	4639      	mov	r1, r7
 80083e4:	4620      	mov	r0, r4
 80083e6:	f7fe fb3c 	bl	8006a62 <__any_on>
 80083ea:	4681      	mov	r9, r0
 80083ec:	117a      	asrs	r2, r7, #5
 80083ee:	2301      	movs	r3, #1
 80083f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80083f4:	f007 071f 	and.w	r7, r7, #31
 80083f8:	40bb      	lsls	r3, r7
 80083fa:	4213      	tst	r3, r2
 80083fc:	4629      	mov	r1, r5
 80083fe:	4620      	mov	r0, r4
 8008400:	bf18      	it	ne
 8008402:	f049 0902 	orrne.w	r9, r9, #2
 8008406:	f7ff fe21 	bl	800804c <rshift>
 800840a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800840e:	1b76      	subs	r6, r6, r5
 8008410:	2502      	movs	r5, #2
 8008412:	f1b9 0f00 	cmp.w	r9, #0
 8008416:	d047      	beq.n	80084a8 <__gethex+0x38c>
 8008418:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800841c:	2b02      	cmp	r3, #2
 800841e:	d015      	beq.n	800844c <__gethex+0x330>
 8008420:	2b03      	cmp	r3, #3
 8008422:	d017      	beq.n	8008454 <__gethex+0x338>
 8008424:	2b01      	cmp	r3, #1
 8008426:	d109      	bne.n	800843c <__gethex+0x320>
 8008428:	f019 0f02 	tst.w	r9, #2
 800842c:	d006      	beq.n	800843c <__gethex+0x320>
 800842e:	f8da 3000 	ldr.w	r3, [sl]
 8008432:	ea49 0903 	orr.w	r9, r9, r3
 8008436:	f019 0f01 	tst.w	r9, #1
 800843a:	d10e      	bne.n	800845a <__gethex+0x33e>
 800843c:	f045 0510 	orr.w	r5, r5, #16
 8008440:	e032      	b.n	80084a8 <__gethex+0x38c>
 8008442:	f04f 0901 	mov.w	r9, #1
 8008446:	e7d1      	b.n	80083ec <__gethex+0x2d0>
 8008448:	2501      	movs	r5, #1
 800844a:	e7e2      	b.n	8008412 <__gethex+0x2f6>
 800844c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800844e:	f1c3 0301 	rsb	r3, r3, #1
 8008452:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0f0      	beq.n	800843c <__gethex+0x320>
 800845a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800845e:	f104 0314 	add.w	r3, r4, #20
 8008462:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008466:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800846a:	f04f 0c00 	mov.w	ip, #0
 800846e:	4618      	mov	r0, r3
 8008470:	f853 2b04 	ldr.w	r2, [r3], #4
 8008474:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008478:	d01b      	beq.n	80084b2 <__gethex+0x396>
 800847a:	3201      	adds	r2, #1
 800847c:	6002      	str	r2, [r0, #0]
 800847e:	2d02      	cmp	r5, #2
 8008480:	f104 0314 	add.w	r3, r4, #20
 8008484:	d13c      	bne.n	8008500 <__gethex+0x3e4>
 8008486:	f8d8 2000 	ldr.w	r2, [r8]
 800848a:	3a01      	subs	r2, #1
 800848c:	42b2      	cmp	r2, r6
 800848e:	d109      	bne.n	80084a4 <__gethex+0x388>
 8008490:	1171      	asrs	r1, r6, #5
 8008492:	2201      	movs	r2, #1
 8008494:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008498:	f006 061f 	and.w	r6, r6, #31
 800849c:	fa02 f606 	lsl.w	r6, r2, r6
 80084a0:	421e      	tst	r6, r3
 80084a2:	d13a      	bne.n	800851a <__gethex+0x3fe>
 80084a4:	f045 0520 	orr.w	r5, r5, #32
 80084a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084aa:	601c      	str	r4, [r3, #0]
 80084ac:	9b02      	ldr	r3, [sp, #8]
 80084ae:	601f      	str	r7, [r3, #0]
 80084b0:	e6b0      	b.n	8008214 <__gethex+0xf8>
 80084b2:	4299      	cmp	r1, r3
 80084b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80084b8:	d8d9      	bhi.n	800846e <__gethex+0x352>
 80084ba:	68a3      	ldr	r3, [r4, #8]
 80084bc:	459b      	cmp	fp, r3
 80084be:	db17      	blt.n	80084f0 <__gethex+0x3d4>
 80084c0:	6861      	ldr	r1, [r4, #4]
 80084c2:	9801      	ldr	r0, [sp, #4]
 80084c4:	3101      	adds	r1, #1
 80084c6:	f7fd fe3b 	bl	8006140 <_Balloc>
 80084ca:	4681      	mov	r9, r0
 80084cc:	b918      	cbnz	r0, 80084d6 <__gethex+0x3ba>
 80084ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008538 <__gethex+0x41c>)
 80084d0:	4602      	mov	r2, r0
 80084d2:	2184      	movs	r1, #132	@ 0x84
 80084d4:	e6c5      	b.n	8008262 <__gethex+0x146>
 80084d6:	6922      	ldr	r2, [r4, #16]
 80084d8:	3202      	adds	r2, #2
 80084da:	f104 010c 	add.w	r1, r4, #12
 80084de:	0092      	lsls	r2, r2, #2
 80084e0:	300c      	adds	r0, #12
 80084e2:	f7ff fd69 	bl	8007fb8 <memcpy>
 80084e6:	4621      	mov	r1, r4
 80084e8:	9801      	ldr	r0, [sp, #4]
 80084ea:	f7fd fe69 	bl	80061c0 <_Bfree>
 80084ee:	464c      	mov	r4, r9
 80084f0:	6923      	ldr	r3, [r4, #16]
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084f8:	6122      	str	r2, [r4, #16]
 80084fa:	2201      	movs	r2, #1
 80084fc:	615a      	str	r2, [r3, #20]
 80084fe:	e7be      	b.n	800847e <__gethex+0x362>
 8008500:	6922      	ldr	r2, [r4, #16]
 8008502:	455a      	cmp	r2, fp
 8008504:	dd0b      	ble.n	800851e <__gethex+0x402>
 8008506:	2101      	movs	r1, #1
 8008508:	4620      	mov	r0, r4
 800850a:	f7ff fd9f 	bl	800804c <rshift>
 800850e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008512:	3701      	adds	r7, #1
 8008514:	42bb      	cmp	r3, r7
 8008516:	f6ff aee0 	blt.w	80082da <__gethex+0x1be>
 800851a:	2501      	movs	r5, #1
 800851c:	e7c2      	b.n	80084a4 <__gethex+0x388>
 800851e:	f016 061f 	ands.w	r6, r6, #31
 8008522:	d0fa      	beq.n	800851a <__gethex+0x3fe>
 8008524:	4453      	add	r3, sl
 8008526:	f1c6 0620 	rsb	r6, r6, #32
 800852a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800852e:	f7fd fef9 	bl	8006324 <__hi0bits>
 8008532:	42b0      	cmp	r0, r6
 8008534:	dbe7      	blt.n	8008506 <__gethex+0x3ea>
 8008536:	e7f0      	b.n	800851a <__gethex+0x3fe>
 8008538:	080090e5 	.word	0x080090e5

0800853c <L_shift>:
 800853c:	f1c2 0208 	rsb	r2, r2, #8
 8008540:	0092      	lsls	r2, r2, #2
 8008542:	b570      	push	{r4, r5, r6, lr}
 8008544:	f1c2 0620 	rsb	r6, r2, #32
 8008548:	6843      	ldr	r3, [r0, #4]
 800854a:	6804      	ldr	r4, [r0, #0]
 800854c:	fa03 f506 	lsl.w	r5, r3, r6
 8008550:	432c      	orrs	r4, r5
 8008552:	40d3      	lsrs	r3, r2
 8008554:	6004      	str	r4, [r0, #0]
 8008556:	f840 3f04 	str.w	r3, [r0, #4]!
 800855a:	4288      	cmp	r0, r1
 800855c:	d3f4      	bcc.n	8008548 <L_shift+0xc>
 800855e:	bd70      	pop	{r4, r5, r6, pc}

08008560 <__match>:
 8008560:	b530      	push	{r4, r5, lr}
 8008562:	6803      	ldr	r3, [r0, #0]
 8008564:	3301      	adds	r3, #1
 8008566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800856a:	b914      	cbnz	r4, 8008572 <__match+0x12>
 800856c:	6003      	str	r3, [r0, #0]
 800856e:	2001      	movs	r0, #1
 8008570:	bd30      	pop	{r4, r5, pc}
 8008572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008576:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800857a:	2d19      	cmp	r5, #25
 800857c:	bf98      	it	ls
 800857e:	3220      	addls	r2, #32
 8008580:	42a2      	cmp	r2, r4
 8008582:	d0f0      	beq.n	8008566 <__match+0x6>
 8008584:	2000      	movs	r0, #0
 8008586:	e7f3      	b.n	8008570 <__match+0x10>

08008588 <__hexnan>:
 8008588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858c:	680b      	ldr	r3, [r1, #0]
 800858e:	6801      	ldr	r1, [r0, #0]
 8008590:	115e      	asrs	r6, r3, #5
 8008592:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008596:	f013 031f 	ands.w	r3, r3, #31
 800859a:	b087      	sub	sp, #28
 800859c:	bf18      	it	ne
 800859e:	3604      	addne	r6, #4
 80085a0:	2500      	movs	r5, #0
 80085a2:	1f37      	subs	r7, r6, #4
 80085a4:	4682      	mov	sl, r0
 80085a6:	4690      	mov	r8, r2
 80085a8:	9301      	str	r3, [sp, #4]
 80085aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80085ae:	46b9      	mov	r9, r7
 80085b0:	463c      	mov	r4, r7
 80085b2:	9502      	str	r5, [sp, #8]
 80085b4:	46ab      	mov	fp, r5
 80085b6:	784a      	ldrb	r2, [r1, #1]
 80085b8:	1c4b      	adds	r3, r1, #1
 80085ba:	9303      	str	r3, [sp, #12]
 80085bc:	b342      	cbz	r2, 8008610 <__hexnan+0x88>
 80085be:	4610      	mov	r0, r2
 80085c0:	9105      	str	r1, [sp, #20]
 80085c2:	9204      	str	r2, [sp, #16]
 80085c4:	f7ff fd94 	bl	80080f0 <__hexdig_fun>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d151      	bne.n	8008670 <__hexnan+0xe8>
 80085cc:	9a04      	ldr	r2, [sp, #16]
 80085ce:	9905      	ldr	r1, [sp, #20]
 80085d0:	2a20      	cmp	r2, #32
 80085d2:	d818      	bhi.n	8008606 <__hexnan+0x7e>
 80085d4:	9b02      	ldr	r3, [sp, #8]
 80085d6:	459b      	cmp	fp, r3
 80085d8:	dd13      	ble.n	8008602 <__hexnan+0x7a>
 80085da:	454c      	cmp	r4, r9
 80085dc:	d206      	bcs.n	80085ec <__hexnan+0x64>
 80085de:	2d07      	cmp	r5, #7
 80085e0:	dc04      	bgt.n	80085ec <__hexnan+0x64>
 80085e2:	462a      	mov	r2, r5
 80085e4:	4649      	mov	r1, r9
 80085e6:	4620      	mov	r0, r4
 80085e8:	f7ff ffa8 	bl	800853c <L_shift>
 80085ec:	4544      	cmp	r4, r8
 80085ee:	d952      	bls.n	8008696 <__hexnan+0x10e>
 80085f0:	2300      	movs	r3, #0
 80085f2:	f1a4 0904 	sub.w	r9, r4, #4
 80085f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80085fa:	f8cd b008 	str.w	fp, [sp, #8]
 80085fe:	464c      	mov	r4, r9
 8008600:	461d      	mov	r5, r3
 8008602:	9903      	ldr	r1, [sp, #12]
 8008604:	e7d7      	b.n	80085b6 <__hexnan+0x2e>
 8008606:	2a29      	cmp	r2, #41	@ 0x29
 8008608:	d157      	bne.n	80086ba <__hexnan+0x132>
 800860a:	3102      	adds	r1, #2
 800860c:	f8ca 1000 	str.w	r1, [sl]
 8008610:	f1bb 0f00 	cmp.w	fp, #0
 8008614:	d051      	beq.n	80086ba <__hexnan+0x132>
 8008616:	454c      	cmp	r4, r9
 8008618:	d206      	bcs.n	8008628 <__hexnan+0xa0>
 800861a:	2d07      	cmp	r5, #7
 800861c:	dc04      	bgt.n	8008628 <__hexnan+0xa0>
 800861e:	462a      	mov	r2, r5
 8008620:	4649      	mov	r1, r9
 8008622:	4620      	mov	r0, r4
 8008624:	f7ff ff8a 	bl	800853c <L_shift>
 8008628:	4544      	cmp	r4, r8
 800862a:	d936      	bls.n	800869a <__hexnan+0x112>
 800862c:	f1a8 0204 	sub.w	r2, r8, #4
 8008630:	4623      	mov	r3, r4
 8008632:	f853 1b04 	ldr.w	r1, [r3], #4
 8008636:	f842 1f04 	str.w	r1, [r2, #4]!
 800863a:	429f      	cmp	r7, r3
 800863c:	d2f9      	bcs.n	8008632 <__hexnan+0xaa>
 800863e:	1b3b      	subs	r3, r7, r4
 8008640:	f023 0303 	bic.w	r3, r3, #3
 8008644:	3304      	adds	r3, #4
 8008646:	3401      	adds	r4, #1
 8008648:	3e03      	subs	r6, #3
 800864a:	42b4      	cmp	r4, r6
 800864c:	bf88      	it	hi
 800864e:	2304      	movhi	r3, #4
 8008650:	4443      	add	r3, r8
 8008652:	2200      	movs	r2, #0
 8008654:	f843 2b04 	str.w	r2, [r3], #4
 8008658:	429f      	cmp	r7, r3
 800865a:	d2fb      	bcs.n	8008654 <__hexnan+0xcc>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	b91b      	cbnz	r3, 8008668 <__hexnan+0xe0>
 8008660:	4547      	cmp	r7, r8
 8008662:	d128      	bne.n	80086b6 <__hexnan+0x12e>
 8008664:	2301      	movs	r3, #1
 8008666:	603b      	str	r3, [r7, #0]
 8008668:	2005      	movs	r0, #5
 800866a:	b007      	add	sp, #28
 800866c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008670:	3501      	adds	r5, #1
 8008672:	2d08      	cmp	r5, #8
 8008674:	f10b 0b01 	add.w	fp, fp, #1
 8008678:	dd06      	ble.n	8008688 <__hexnan+0x100>
 800867a:	4544      	cmp	r4, r8
 800867c:	d9c1      	bls.n	8008602 <__hexnan+0x7a>
 800867e:	2300      	movs	r3, #0
 8008680:	f844 3c04 	str.w	r3, [r4, #-4]
 8008684:	2501      	movs	r5, #1
 8008686:	3c04      	subs	r4, #4
 8008688:	6822      	ldr	r2, [r4, #0]
 800868a:	f000 000f 	and.w	r0, r0, #15
 800868e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008692:	6020      	str	r0, [r4, #0]
 8008694:	e7b5      	b.n	8008602 <__hexnan+0x7a>
 8008696:	2508      	movs	r5, #8
 8008698:	e7b3      	b.n	8008602 <__hexnan+0x7a>
 800869a:	9b01      	ldr	r3, [sp, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0dd      	beq.n	800865c <__hexnan+0xd4>
 80086a0:	f1c3 0320 	rsb	r3, r3, #32
 80086a4:	f04f 32ff 	mov.w	r2, #4294967295
 80086a8:	40da      	lsrs	r2, r3
 80086aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80086ae:	4013      	ands	r3, r2
 80086b0:	f846 3c04 	str.w	r3, [r6, #-4]
 80086b4:	e7d2      	b.n	800865c <__hexnan+0xd4>
 80086b6:	3f04      	subs	r7, #4
 80086b8:	e7d0      	b.n	800865c <__hexnan+0xd4>
 80086ba:	2004      	movs	r0, #4
 80086bc:	e7d5      	b.n	800866a <__hexnan+0xe2>

080086be <__ascii_mbtowc>:
 80086be:	b082      	sub	sp, #8
 80086c0:	b901      	cbnz	r1, 80086c4 <__ascii_mbtowc+0x6>
 80086c2:	a901      	add	r1, sp, #4
 80086c4:	b142      	cbz	r2, 80086d8 <__ascii_mbtowc+0x1a>
 80086c6:	b14b      	cbz	r3, 80086dc <__ascii_mbtowc+0x1e>
 80086c8:	7813      	ldrb	r3, [r2, #0]
 80086ca:	600b      	str	r3, [r1, #0]
 80086cc:	7812      	ldrb	r2, [r2, #0]
 80086ce:	1e10      	subs	r0, r2, #0
 80086d0:	bf18      	it	ne
 80086d2:	2001      	movne	r0, #1
 80086d4:	b002      	add	sp, #8
 80086d6:	4770      	bx	lr
 80086d8:	4610      	mov	r0, r2
 80086da:	e7fb      	b.n	80086d4 <__ascii_mbtowc+0x16>
 80086dc:	f06f 0001 	mvn.w	r0, #1
 80086e0:	e7f8      	b.n	80086d4 <__ascii_mbtowc+0x16>

080086e2 <_realloc_r>:
 80086e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e6:	4680      	mov	r8, r0
 80086e8:	4615      	mov	r5, r2
 80086ea:	460c      	mov	r4, r1
 80086ec:	b921      	cbnz	r1, 80086f8 <_realloc_r+0x16>
 80086ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086f2:	4611      	mov	r1, r2
 80086f4:	f7fd bc98 	b.w	8006028 <_malloc_r>
 80086f8:	b92a      	cbnz	r2, 8008706 <_realloc_r+0x24>
 80086fa:	f7fd fc21 	bl	8005f40 <_free_r>
 80086fe:	2400      	movs	r4, #0
 8008700:	4620      	mov	r0, r4
 8008702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008706:	f000 f840 	bl	800878a <_malloc_usable_size_r>
 800870a:	4285      	cmp	r5, r0
 800870c:	4606      	mov	r6, r0
 800870e:	d802      	bhi.n	8008716 <_realloc_r+0x34>
 8008710:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008714:	d8f4      	bhi.n	8008700 <_realloc_r+0x1e>
 8008716:	4629      	mov	r1, r5
 8008718:	4640      	mov	r0, r8
 800871a:	f7fd fc85 	bl	8006028 <_malloc_r>
 800871e:	4607      	mov	r7, r0
 8008720:	2800      	cmp	r0, #0
 8008722:	d0ec      	beq.n	80086fe <_realloc_r+0x1c>
 8008724:	42b5      	cmp	r5, r6
 8008726:	462a      	mov	r2, r5
 8008728:	4621      	mov	r1, r4
 800872a:	bf28      	it	cs
 800872c:	4632      	movcs	r2, r6
 800872e:	f7ff fc43 	bl	8007fb8 <memcpy>
 8008732:	4621      	mov	r1, r4
 8008734:	4640      	mov	r0, r8
 8008736:	f7fd fc03 	bl	8005f40 <_free_r>
 800873a:	463c      	mov	r4, r7
 800873c:	e7e0      	b.n	8008700 <_realloc_r+0x1e>

0800873e <__ascii_wctomb>:
 800873e:	4603      	mov	r3, r0
 8008740:	4608      	mov	r0, r1
 8008742:	b141      	cbz	r1, 8008756 <__ascii_wctomb+0x18>
 8008744:	2aff      	cmp	r2, #255	@ 0xff
 8008746:	d904      	bls.n	8008752 <__ascii_wctomb+0x14>
 8008748:	228a      	movs	r2, #138	@ 0x8a
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	f04f 30ff 	mov.w	r0, #4294967295
 8008750:	4770      	bx	lr
 8008752:	700a      	strb	r2, [r1, #0]
 8008754:	2001      	movs	r0, #1
 8008756:	4770      	bx	lr

08008758 <fiprintf>:
 8008758:	b40e      	push	{r1, r2, r3}
 800875a:	b503      	push	{r0, r1, lr}
 800875c:	4601      	mov	r1, r0
 800875e:	ab03      	add	r3, sp, #12
 8008760:	4805      	ldr	r0, [pc, #20]	@ (8008778 <fiprintf+0x20>)
 8008762:	f853 2b04 	ldr.w	r2, [r3], #4
 8008766:	6800      	ldr	r0, [r0, #0]
 8008768:	9301      	str	r3, [sp, #4]
 800876a:	f7ff f9a1 	bl	8007ab0 <_vfiprintf_r>
 800876e:	b002      	add	sp, #8
 8008770:	f85d eb04 	ldr.w	lr, [sp], #4
 8008774:	b003      	add	sp, #12
 8008776:	4770      	bx	lr
 8008778:	20000018 	.word	0x20000018

0800877c <abort>:
 800877c:	b508      	push	{r3, lr}
 800877e:	2006      	movs	r0, #6
 8008780:	f000 f834 	bl	80087ec <raise>
 8008784:	2001      	movs	r0, #1
 8008786:	f7f8 fec7 	bl	8001518 <_exit>

0800878a <_malloc_usable_size_r>:
 800878a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800878e:	1f18      	subs	r0, r3, #4
 8008790:	2b00      	cmp	r3, #0
 8008792:	bfbc      	itt	lt
 8008794:	580b      	ldrlt	r3, [r1, r0]
 8008796:	18c0      	addlt	r0, r0, r3
 8008798:	4770      	bx	lr

0800879a <_raise_r>:
 800879a:	291f      	cmp	r1, #31
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4605      	mov	r5, r0
 80087a0:	460c      	mov	r4, r1
 80087a2:	d904      	bls.n	80087ae <_raise_r+0x14>
 80087a4:	2316      	movs	r3, #22
 80087a6:	6003      	str	r3, [r0, #0]
 80087a8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ac:	bd38      	pop	{r3, r4, r5, pc}
 80087ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80087b0:	b112      	cbz	r2, 80087b8 <_raise_r+0x1e>
 80087b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087b6:	b94b      	cbnz	r3, 80087cc <_raise_r+0x32>
 80087b8:	4628      	mov	r0, r5
 80087ba:	f000 f831 	bl	8008820 <_getpid_r>
 80087be:	4622      	mov	r2, r4
 80087c0:	4601      	mov	r1, r0
 80087c2:	4628      	mov	r0, r5
 80087c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087c8:	f000 b818 	b.w	80087fc <_kill_r>
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d00a      	beq.n	80087e6 <_raise_r+0x4c>
 80087d0:	1c59      	adds	r1, r3, #1
 80087d2:	d103      	bne.n	80087dc <_raise_r+0x42>
 80087d4:	2316      	movs	r3, #22
 80087d6:	6003      	str	r3, [r0, #0]
 80087d8:	2001      	movs	r0, #1
 80087da:	e7e7      	b.n	80087ac <_raise_r+0x12>
 80087dc:	2100      	movs	r1, #0
 80087de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80087e2:	4620      	mov	r0, r4
 80087e4:	4798      	blx	r3
 80087e6:	2000      	movs	r0, #0
 80087e8:	e7e0      	b.n	80087ac <_raise_r+0x12>
	...

080087ec <raise>:
 80087ec:	4b02      	ldr	r3, [pc, #8]	@ (80087f8 <raise+0xc>)
 80087ee:	4601      	mov	r1, r0
 80087f0:	6818      	ldr	r0, [r3, #0]
 80087f2:	f7ff bfd2 	b.w	800879a <_raise_r>
 80087f6:	bf00      	nop
 80087f8:	20000018 	.word	0x20000018

080087fc <_kill_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	4d07      	ldr	r5, [pc, #28]	@ (800881c <_kill_r+0x20>)
 8008800:	2300      	movs	r3, #0
 8008802:	4604      	mov	r4, r0
 8008804:	4608      	mov	r0, r1
 8008806:	4611      	mov	r1, r2
 8008808:	602b      	str	r3, [r5, #0]
 800880a:	f7f8 fe75 	bl	80014f8 <_kill>
 800880e:	1c43      	adds	r3, r0, #1
 8008810:	d102      	bne.n	8008818 <_kill_r+0x1c>
 8008812:	682b      	ldr	r3, [r5, #0]
 8008814:	b103      	cbz	r3, 8008818 <_kill_r+0x1c>
 8008816:	6023      	str	r3, [r4, #0]
 8008818:	bd38      	pop	{r3, r4, r5, pc}
 800881a:	bf00      	nop
 800881c:	200003b0 	.word	0x200003b0

08008820 <_getpid_r>:
 8008820:	f7f8 be62 	b.w	80014e8 <_getpid>

08008824 <asin>:
 8008824:	b538      	push	{r3, r4, r5, lr}
 8008826:	ed2d 8b02 	vpush	{d8}
 800882a:	ec55 4b10 	vmov	r4, r5, d0
 800882e:	f000 f93b 	bl	8008aa8 <__ieee754_asin>
 8008832:	4622      	mov	r2, r4
 8008834:	462b      	mov	r3, r5
 8008836:	4620      	mov	r0, r4
 8008838:	4629      	mov	r1, r5
 800883a:	eeb0 8a40 	vmov.f32	s16, s0
 800883e:	eef0 8a60 	vmov.f32	s17, s1
 8008842:	f7f8 f973 	bl	8000b2c <__aeabi_dcmpun>
 8008846:	b9a8      	cbnz	r0, 8008874 <asin+0x50>
 8008848:	ec45 4b10 	vmov	d0, r4, r5
 800884c:	f000 f84a 	bl	80088e4 <fabs>
 8008850:	4b0c      	ldr	r3, [pc, #48]	@ (8008884 <asin+0x60>)
 8008852:	ec51 0b10 	vmov	r0, r1, d0
 8008856:	2200      	movs	r2, #0
 8008858:	f7f8 f95e 	bl	8000b18 <__aeabi_dcmpgt>
 800885c:	b150      	cbz	r0, 8008874 <asin+0x50>
 800885e:	f7fc fced 	bl	800523c <__errno>
 8008862:	ecbd 8b02 	vpop	{d8}
 8008866:	2321      	movs	r3, #33	@ 0x21
 8008868:	6003      	str	r3, [r0, #0]
 800886a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800886e:	4806      	ldr	r0, [pc, #24]	@ (8008888 <asin+0x64>)
 8008870:	f7ff bbb2 	b.w	8007fd8 <nan>
 8008874:	eeb0 0a48 	vmov.f32	s0, s16
 8008878:	eef0 0a68 	vmov.f32	s1, s17
 800887c:	ecbd 8b02 	vpop	{d8}
 8008880:	bd38      	pop	{r3, r4, r5, pc}
 8008882:	bf00      	nop
 8008884:	3ff00000 	.word	0x3ff00000
 8008888:	080093fd 	.word	0x080093fd

0800888c <sqrt>:
 800888c:	b538      	push	{r3, r4, r5, lr}
 800888e:	ed2d 8b02 	vpush	{d8}
 8008892:	ec55 4b10 	vmov	r4, r5, d0
 8008896:	f000 f82d 	bl	80088f4 <__ieee754_sqrt>
 800889a:	4622      	mov	r2, r4
 800889c:	462b      	mov	r3, r5
 800889e:	4620      	mov	r0, r4
 80088a0:	4629      	mov	r1, r5
 80088a2:	eeb0 8a40 	vmov.f32	s16, s0
 80088a6:	eef0 8a60 	vmov.f32	s17, s1
 80088aa:	f7f8 f93f 	bl	8000b2c <__aeabi_dcmpun>
 80088ae:	b990      	cbnz	r0, 80088d6 <sqrt+0x4a>
 80088b0:	2200      	movs	r2, #0
 80088b2:	2300      	movs	r3, #0
 80088b4:	4620      	mov	r0, r4
 80088b6:	4629      	mov	r1, r5
 80088b8:	f7f8 f910 	bl	8000adc <__aeabi_dcmplt>
 80088bc:	b158      	cbz	r0, 80088d6 <sqrt+0x4a>
 80088be:	f7fc fcbd 	bl	800523c <__errno>
 80088c2:	2321      	movs	r3, #33	@ 0x21
 80088c4:	6003      	str	r3, [r0, #0]
 80088c6:	2200      	movs	r2, #0
 80088c8:	2300      	movs	r3, #0
 80088ca:	4610      	mov	r0, r2
 80088cc:	4619      	mov	r1, r3
 80088ce:	f7f7 ffbd 	bl	800084c <__aeabi_ddiv>
 80088d2:	ec41 0b18 	vmov	d8, r0, r1
 80088d6:	eeb0 0a48 	vmov.f32	s0, s16
 80088da:	eef0 0a68 	vmov.f32	s1, s17
 80088de:	ecbd 8b02 	vpop	{d8}
 80088e2:	bd38      	pop	{r3, r4, r5, pc}

080088e4 <fabs>:
 80088e4:	ec51 0b10 	vmov	r0, r1, d0
 80088e8:	4602      	mov	r2, r0
 80088ea:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80088ee:	ec43 2b10 	vmov	d0, r2, r3
 80088f2:	4770      	bx	lr

080088f4 <__ieee754_sqrt>:
 80088f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f8:	4a68      	ldr	r2, [pc, #416]	@ (8008a9c <__ieee754_sqrt+0x1a8>)
 80088fa:	ec55 4b10 	vmov	r4, r5, d0
 80088fe:	43aa      	bics	r2, r5
 8008900:	462b      	mov	r3, r5
 8008902:	4621      	mov	r1, r4
 8008904:	d110      	bne.n	8008928 <__ieee754_sqrt+0x34>
 8008906:	4622      	mov	r2, r4
 8008908:	4620      	mov	r0, r4
 800890a:	4629      	mov	r1, r5
 800890c:	f7f7 fe74 	bl	80005f8 <__aeabi_dmul>
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	4620      	mov	r0, r4
 8008916:	4629      	mov	r1, r5
 8008918:	f7f7 fcb8 	bl	800028c <__adddf3>
 800891c:	4604      	mov	r4, r0
 800891e:	460d      	mov	r5, r1
 8008920:	ec45 4b10 	vmov	d0, r4, r5
 8008924:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008928:	2d00      	cmp	r5, #0
 800892a:	dc0e      	bgt.n	800894a <__ieee754_sqrt+0x56>
 800892c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008930:	4322      	orrs	r2, r4
 8008932:	d0f5      	beq.n	8008920 <__ieee754_sqrt+0x2c>
 8008934:	b19d      	cbz	r5, 800895e <__ieee754_sqrt+0x6a>
 8008936:	4622      	mov	r2, r4
 8008938:	4620      	mov	r0, r4
 800893a:	4629      	mov	r1, r5
 800893c:	f7f7 fca4 	bl	8000288 <__aeabi_dsub>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	f7f7 ff82 	bl	800084c <__aeabi_ddiv>
 8008948:	e7e8      	b.n	800891c <__ieee754_sqrt+0x28>
 800894a:	152a      	asrs	r2, r5, #20
 800894c:	d115      	bne.n	800897a <__ieee754_sqrt+0x86>
 800894e:	2000      	movs	r0, #0
 8008950:	e009      	b.n	8008966 <__ieee754_sqrt+0x72>
 8008952:	0acb      	lsrs	r3, r1, #11
 8008954:	3a15      	subs	r2, #21
 8008956:	0549      	lsls	r1, r1, #21
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0fa      	beq.n	8008952 <__ieee754_sqrt+0x5e>
 800895c:	e7f7      	b.n	800894e <__ieee754_sqrt+0x5a>
 800895e:	462a      	mov	r2, r5
 8008960:	e7fa      	b.n	8008958 <__ieee754_sqrt+0x64>
 8008962:	005b      	lsls	r3, r3, #1
 8008964:	3001      	adds	r0, #1
 8008966:	02dc      	lsls	r4, r3, #11
 8008968:	d5fb      	bpl.n	8008962 <__ieee754_sqrt+0x6e>
 800896a:	1e44      	subs	r4, r0, #1
 800896c:	1b12      	subs	r2, r2, r4
 800896e:	f1c0 0420 	rsb	r4, r0, #32
 8008972:	fa21 f404 	lsr.w	r4, r1, r4
 8008976:	4323      	orrs	r3, r4
 8008978:	4081      	lsls	r1, r0
 800897a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800897e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8008982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008986:	07d2      	lsls	r2, r2, #31
 8008988:	bf5c      	itt	pl
 800898a:	005b      	lslpl	r3, r3, #1
 800898c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008990:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008994:	bf58      	it	pl
 8008996:	0049      	lslpl	r1, r1, #1
 8008998:	2600      	movs	r6, #0
 800899a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800899e:	106d      	asrs	r5, r5, #1
 80089a0:	0049      	lsls	r1, r1, #1
 80089a2:	2016      	movs	r0, #22
 80089a4:	4632      	mov	r2, r6
 80089a6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80089aa:	1917      	adds	r7, r2, r4
 80089ac:	429f      	cmp	r7, r3
 80089ae:	bfde      	ittt	le
 80089b0:	193a      	addle	r2, r7, r4
 80089b2:	1bdb      	suble	r3, r3, r7
 80089b4:	1936      	addle	r6, r6, r4
 80089b6:	0fcf      	lsrs	r7, r1, #31
 80089b8:	3801      	subs	r0, #1
 80089ba:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80089be:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80089c2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80089c6:	d1f0      	bne.n	80089aa <__ieee754_sqrt+0xb6>
 80089c8:	4604      	mov	r4, r0
 80089ca:	2720      	movs	r7, #32
 80089cc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80089d0:	429a      	cmp	r2, r3
 80089d2:	eb00 0e0c 	add.w	lr, r0, ip
 80089d6:	db02      	blt.n	80089de <__ieee754_sqrt+0xea>
 80089d8:	d113      	bne.n	8008a02 <__ieee754_sqrt+0x10e>
 80089da:	458e      	cmp	lr, r1
 80089dc:	d811      	bhi.n	8008a02 <__ieee754_sqrt+0x10e>
 80089de:	f1be 0f00 	cmp.w	lr, #0
 80089e2:	eb0e 000c 	add.w	r0, lr, ip
 80089e6:	da42      	bge.n	8008a6e <__ieee754_sqrt+0x17a>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	db40      	blt.n	8008a6e <__ieee754_sqrt+0x17a>
 80089ec:	f102 0801 	add.w	r8, r2, #1
 80089f0:	1a9b      	subs	r3, r3, r2
 80089f2:	458e      	cmp	lr, r1
 80089f4:	bf88      	it	hi
 80089f6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80089fa:	eba1 010e 	sub.w	r1, r1, lr
 80089fe:	4464      	add	r4, ip
 8008a00:	4642      	mov	r2, r8
 8008a02:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008a06:	3f01      	subs	r7, #1
 8008a08:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008a0c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008a10:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008a14:	d1dc      	bne.n	80089d0 <__ieee754_sqrt+0xdc>
 8008a16:	4319      	orrs	r1, r3
 8008a18:	d01b      	beq.n	8008a52 <__ieee754_sqrt+0x15e>
 8008a1a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8008aa0 <__ieee754_sqrt+0x1ac>
 8008a1e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008aa4 <__ieee754_sqrt+0x1b0>
 8008a22:	e9da 0100 	ldrd	r0, r1, [sl]
 8008a26:	e9db 2300 	ldrd	r2, r3, [fp]
 8008a2a:	f7f7 fc2d 	bl	8000288 <__aeabi_dsub>
 8008a2e:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4640      	mov	r0, r8
 8008a38:	4649      	mov	r1, r9
 8008a3a:	f7f8 f859 	bl	8000af0 <__aeabi_dcmple>
 8008a3e:	b140      	cbz	r0, 8008a52 <__ieee754_sqrt+0x15e>
 8008a40:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008a44:	e9da 0100 	ldrd	r0, r1, [sl]
 8008a48:	e9db 2300 	ldrd	r2, r3, [fp]
 8008a4c:	d111      	bne.n	8008a72 <__ieee754_sqrt+0x17e>
 8008a4e:	3601      	adds	r6, #1
 8008a50:	463c      	mov	r4, r7
 8008a52:	1072      	asrs	r2, r6, #1
 8008a54:	0863      	lsrs	r3, r4, #1
 8008a56:	07f1      	lsls	r1, r6, #31
 8008a58:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008a5c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008a60:	bf48      	it	mi
 8008a62:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008a66:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	e756      	b.n	800891c <__ieee754_sqrt+0x28>
 8008a6e:	4690      	mov	r8, r2
 8008a70:	e7be      	b.n	80089f0 <__ieee754_sqrt+0xfc>
 8008a72:	f7f7 fc0b 	bl	800028c <__adddf3>
 8008a76:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	4640      	mov	r0, r8
 8008a80:	4649      	mov	r1, r9
 8008a82:	f7f8 f82b 	bl	8000adc <__aeabi_dcmplt>
 8008a86:	b120      	cbz	r0, 8008a92 <__ieee754_sqrt+0x19e>
 8008a88:	1ca0      	adds	r0, r4, #2
 8008a8a:	bf08      	it	eq
 8008a8c:	3601      	addeq	r6, #1
 8008a8e:	3402      	adds	r4, #2
 8008a90:	e7df      	b.n	8008a52 <__ieee754_sqrt+0x15e>
 8008a92:	1c63      	adds	r3, r4, #1
 8008a94:	f023 0401 	bic.w	r4, r3, #1
 8008a98:	e7db      	b.n	8008a52 <__ieee754_sqrt+0x15e>
 8008a9a:	bf00      	nop
 8008a9c:	7ff00000 	.word	0x7ff00000
 8008aa0:	200001e0 	.word	0x200001e0
 8008aa4:	200001d8 	.word	0x200001d8

08008aa8 <__ieee754_asin>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	ec55 4b10 	vmov	r4, r5, d0
 8008ab0:	4bc7      	ldr	r3, [pc, #796]	@ (8008dd0 <__ieee754_asin+0x328>)
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008ab8:	429e      	cmp	r6, r3
 8008aba:	9501      	str	r5, [sp, #4]
 8008abc:	d92d      	bls.n	8008b1a <__ieee754_asin+0x72>
 8008abe:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8008ac2:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8008ac6:	4326      	orrs	r6, r4
 8008ac8:	d116      	bne.n	8008af8 <__ieee754_asin+0x50>
 8008aca:	a3a7      	add	r3, pc, #668	@ (adr r3, 8008d68 <__ieee754_asin+0x2c0>)
 8008acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	f7f7 fd90 	bl	80005f8 <__aeabi_dmul>
 8008ad8:	a3a5      	add	r3, pc, #660	@ (adr r3, 8008d70 <__ieee754_asin+0x2c8>)
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	4606      	mov	r6, r0
 8008ae0:	460f      	mov	r7, r1
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	f7f7 fd87 	bl	80005f8 <__aeabi_dmul>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	4630      	mov	r0, r6
 8008af0:	4639      	mov	r1, r7
 8008af2:	f7f7 fbcb 	bl	800028c <__adddf3>
 8008af6:	e009      	b.n	8008b0c <__ieee754_asin+0x64>
 8008af8:	4622      	mov	r2, r4
 8008afa:	462b      	mov	r3, r5
 8008afc:	4620      	mov	r0, r4
 8008afe:	4629      	mov	r1, r5
 8008b00:	f7f7 fbc2 	bl	8000288 <__aeabi_dsub>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	f7f7 fea0 	bl	800084c <__aeabi_ddiv>
 8008b0c:	4604      	mov	r4, r0
 8008b0e:	460d      	mov	r5, r1
 8008b10:	ec45 4b10 	vmov	d0, r4, r5
 8008b14:	b007      	add	sp, #28
 8008b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1a:	4bae      	ldr	r3, [pc, #696]	@ (8008dd4 <__ieee754_asin+0x32c>)
 8008b1c:	429e      	cmp	r6, r3
 8008b1e:	d810      	bhi.n	8008b42 <__ieee754_asin+0x9a>
 8008b20:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8008b24:	f080 80ad 	bcs.w	8008c82 <__ieee754_asin+0x1da>
 8008b28:	a393      	add	r3, pc, #588	@ (adr r3, 8008d78 <__ieee754_asin+0x2d0>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	4620      	mov	r0, r4
 8008b30:	4629      	mov	r1, r5
 8008b32:	f7f7 fbab 	bl	800028c <__adddf3>
 8008b36:	4ba8      	ldr	r3, [pc, #672]	@ (8008dd8 <__ieee754_asin+0x330>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f7f7 ffed 	bl	8000b18 <__aeabi_dcmpgt>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d1e6      	bne.n	8008b10 <__ieee754_asin+0x68>
 8008b42:	ec45 4b10 	vmov	d0, r4, r5
 8008b46:	f7ff fecd 	bl	80088e4 <fabs>
 8008b4a:	49a3      	ldr	r1, [pc, #652]	@ (8008dd8 <__ieee754_asin+0x330>)
 8008b4c:	ec53 2b10 	vmov	r2, r3, d0
 8008b50:	2000      	movs	r0, #0
 8008b52:	f7f7 fb99 	bl	8000288 <__aeabi_dsub>
 8008b56:	4ba1      	ldr	r3, [pc, #644]	@ (8008ddc <__ieee754_asin+0x334>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f7f7 fd4d 	bl	80005f8 <__aeabi_dmul>
 8008b5e:	a388      	add	r3, pc, #544	@ (adr r3, 8008d80 <__ieee754_asin+0x2d8>)
 8008b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b64:	4604      	mov	r4, r0
 8008b66:	460d      	mov	r5, r1
 8008b68:	f7f7 fd46 	bl	80005f8 <__aeabi_dmul>
 8008b6c:	a386      	add	r3, pc, #536	@ (adr r3, 8008d88 <__ieee754_asin+0x2e0>)
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	f7f7 fb8b 	bl	800028c <__adddf3>
 8008b76:	4622      	mov	r2, r4
 8008b78:	462b      	mov	r3, r5
 8008b7a:	f7f7 fd3d 	bl	80005f8 <__aeabi_dmul>
 8008b7e:	a384      	add	r3, pc, #528	@ (adr r3, 8008d90 <__ieee754_asin+0x2e8>)
 8008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b84:	f7f7 fb80 	bl	8000288 <__aeabi_dsub>
 8008b88:	4622      	mov	r2, r4
 8008b8a:	462b      	mov	r3, r5
 8008b8c:	f7f7 fd34 	bl	80005f8 <__aeabi_dmul>
 8008b90:	a381      	add	r3, pc, #516	@ (adr r3, 8008d98 <__ieee754_asin+0x2f0>)
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	f7f7 fb79 	bl	800028c <__adddf3>
 8008b9a:	4622      	mov	r2, r4
 8008b9c:	462b      	mov	r3, r5
 8008b9e:	f7f7 fd2b 	bl	80005f8 <__aeabi_dmul>
 8008ba2:	a37f      	add	r3, pc, #508	@ (adr r3, 8008da0 <__ieee754_asin+0x2f8>)
 8008ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba8:	f7f7 fb6e 	bl	8000288 <__aeabi_dsub>
 8008bac:	4622      	mov	r2, r4
 8008bae:	462b      	mov	r3, r5
 8008bb0:	f7f7 fd22 	bl	80005f8 <__aeabi_dmul>
 8008bb4:	a37c      	add	r3, pc, #496	@ (adr r3, 8008da8 <__ieee754_asin+0x300>)
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	f7f7 fb67 	bl	800028c <__adddf3>
 8008bbe:	4622      	mov	r2, r4
 8008bc0:	462b      	mov	r3, r5
 8008bc2:	f7f7 fd19 	bl	80005f8 <__aeabi_dmul>
 8008bc6:	a37a      	add	r3, pc, #488	@ (adr r3, 8008db0 <__ieee754_asin+0x308>)
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	f7f7 fd10 	bl	80005f8 <__aeabi_dmul>
 8008bd8:	a377      	add	r3, pc, #476	@ (adr r3, 8008db8 <__ieee754_asin+0x310>)
 8008bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bde:	f7f7 fb53 	bl	8000288 <__aeabi_dsub>
 8008be2:	4622      	mov	r2, r4
 8008be4:	462b      	mov	r3, r5
 8008be6:	f7f7 fd07 	bl	80005f8 <__aeabi_dmul>
 8008bea:	a375      	add	r3, pc, #468	@ (adr r3, 8008dc0 <__ieee754_asin+0x318>)
 8008bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf0:	f7f7 fb4c 	bl	800028c <__adddf3>
 8008bf4:	4622      	mov	r2, r4
 8008bf6:	462b      	mov	r3, r5
 8008bf8:	f7f7 fcfe 	bl	80005f8 <__aeabi_dmul>
 8008bfc:	a372      	add	r3, pc, #456	@ (adr r3, 8008dc8 <__ieee754_asin+0x320>)
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	f7f7 fb41 	bl	8000288 <__aeabi_dsub>
 8008c06:	4622      	mov	r2, r4
 8008c08:	462b      	mov	r3, r5
 8008c0a:	f7f7 fcf5 	bl	80005f8 <__aeabi_dmul>
 8008c0e:	4b72      	ldr	r3, [pc, #456]	@ (8008dd8 <__ieee754_asin+0x330>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	f7f7 fb3b 	bl	800028c <__adddf3>
 8008c16:	ec45 4b10 	vmov	d0, r4, r5
 8008c1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c1e:	f7ff fe69 	bl	80088f4 <__ieee754_sqrt>
 8008c22:	4b6f      	ldr	r3, [pc, #444]	@ (8008de0 <__ieee754_asin+0x338>)
 8008c24:	429e      	cmp	r6, r3
 8008c26:	ec5b ab10 	vmov	sl, fp, d0
 8008c2a:	f240 80db 	bls.w	8008de4 <__ieee754_asin+0x33c>
 8008c2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c36:	f7f7 fe09 	bl	800084c <__aeabi_ddiv>
 8008c3a:	4652      	mov	r2, sl
 8008c3c:	465b      	mov	r3, fp
 8008c3e:	f7f7 fcdb 	bl	80005f8 <__aeabi_dmul>
 8008c42:	4652      	mov	r2, sl
 8008c44:	465b      	mov	r3, fp
 8008c46:	f7f7 fb21 	bl	800028c <__adddf3>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	f7f7 fb1d 	bl	800028c <__adddf3>
 8008c52:	a347      	add	r3, pc, #284	@ (adr r3, 8008d70 <__ieee754_asin+0x2c8>)
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	f7f7 fb16 	bl	8000288 <__aeabi_dsub>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	a141      	add	r1, pc, #260	@ (adr r1, 8008d68 <__ieee754_asin+0x2c0>)
 8008c62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c66:	f7f7 fb0f 	bl	8000288 <__aeabi_dsub>
 8008c6a:	9b01      	ldr	r3, [sp, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	bfdc      	itt	le
 8008c70:	4602      	movle	r2, r0
 8008c72:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8008c76:	4604      	mov	r4, r0
 8008c78:	460d      	mov	r5, r1
 8008c7a:	bfdc      	itt	le
 8008c7c:	4614      	movle	r4, r2
 8008c7e:	461d      	movle	r5, r3
 8008c80:	e746      	b.n	8008b10 <__ieee754_asin+0x68>
 8008c82:	4622      	mov	r2, r4
 8008c84:	462b      	mov	r3, r5
 8008c86:	4620      	mov	r0, r4
 8008c88:	4629      	mov	r1, r5
 8008c8a:	f7f7 fcb5 	bl	80005f8 <__aeabi_dmul>
 8008c8e:	a33c      	add	r3, pc, #240	@ (adr r3, 8008d80 <__ieee754_asin+0x2d8>)
 8008c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c94:	4606      	mov	r6, r0
 8008c96:	460f      	mov	r7, r1
 8008c98:	f7f7 fcae 	bl	80005f8 <__aeabi_dmul>
 8008c9c:	a33a      	add	r3, pc, #232	@ (adr r3, 8008d88 <__ieee754_asin+0x2e0>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 faf3 	bl	800028c <__adddf3>
 8008ca6:	4632      	mov	r2, r6
 8008ca8:	463b      	mov	r3, r7
 8008caa:	f7f7 fca5 	bl	80005f8 <__aeabi_dmul>
 8008cae:	a338      	add	r3, pc, #224	@ (adr r3, 8008d90 <__ieee754_asin+0x2e8>)
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	f7f7 fae8 	bl	8000288 <__aeabi_dsub>
 8008cb8:	4632      	mov	r2, r6
 8008cba:	463b      	mov	r3, r7
 8008cbc:	f7f7 fc9c 	bl	80005f8 <__aeabi_dmul>
 8008cc0:	a335      	add	r3, pc, #212	@ (adr r3, 8008d98 <__ieee754_asin+0x2f0>)
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	f7f7 fae1 	bl	800028c <__adddf3>
 8008cca:	4632      	mov	r2, r6
 8008ccc:	463b      	mov	r3, r7
 8008cce:	f7f7 fc93 	bl	80005f8 <__aeabi_dmul>
 8008cd2:	a333      	add	r3, pc, #204	@ (adr r3, 8008da0 <__ieee754_asin+0x2f8>)
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	f7f7 fad6 	bl	8000288 <__aeabi_dsub>
 8008cdc:	4632      	mov	r2, r6
 8008cde:	463b      	mov	r3, r7
 8008ce0:	f7f7 fc8a 	bl	80005f8 <__aeabi_dmul>
 8008ce4:	a330      	add	r3, pc, #192	@ (adr r3, 8008da8 <__ieee754_asin+0x300>)
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	f7f7 facf 	bl	800028c <__adddf3>
 8008cee:	4632      	mov	r2, r6
 8008cf0:	463b      	mov	r3, r7
 8008cf2:	f7f7 fc81 	bl	80005f8 <__aeabi_dmul>
 8008cf6:	a32e      	add	r3, pc, #184	@ (adr r3, 8008db0 <__ieee754_asin+0x308>)
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	4680      	mov	r8, r0
 8008cfe:	4689      	mov	r9, r1
 8008d00:	4630      	mov	r0, r6
 8008d02:	4639      	mov	r1, r7
 8008d04:	f7f7 fc78 	bl	80005f8 <__aeabi_dmul>
 8008d08:	a32b      	add	r3, pc, #172	@ (adr r3, 8008db8 <__ieee754_asin+0x310>)
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f7f7 fabb 	bl	8000288 <__aeabi_dsub>
 8008d12:	4632      	mov	r2, r6
 8008d14:	463b      	mov	r3, r7
 8008d16:	f7f7 fc6f 	bl	80005f8 <__aeabi_dmul>
 8008d1a:	a329      	add	r3, pc, #164	@ (adr r3, 8008dc0 <__ieee754_asin+0x318>)
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	f7f7 fab4 	bl	800028c <__adddf3>
 8008d24:	4632      	mov	r2, r6
 8008d26:	463b      	mov	r3, r7
 8008d28:	f7f7 fc66 	bl	80005f8 <__aeabi_dmul>
 8008d2c:	a326      	add	r3, pc, #152	@ (adr r3, 8008dc8 <__ieee754_asin+0x320>)
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	f7f7 faa9 	bl	8000288 <__aeabi_dsub>
 8008d36:	4632      	mov	r2, r6
 8008d38:	463b      	mov	r3, r7
 8008d3a:	f7f7 fc5d 	bl	80005f8 <__aeabi_dmul>
 8008d3e:	4b26      	ldr	r3, [pc, #152]	@ (8008dd8 <__ieee754_asin+0x330>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	f7f7 faa3 	bl	800028c <__adddf3>
 8008d46:	4602      	mov	r2, r0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	f7f7 fd7d 	bl	800084c <__aeabi_ddiv>
 8008d52:	4622      	mov	r2, r4
 8008d54:	462b      	mov	r3, r5
 8008d56:	f7f7 fc4f 	bl	80005f8 <__aeabi_dmul>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	4620      	mov	r0, r4
 8008d60:	4629      	mov	r1, r5
 8008d62:	e6c6      	b.n	8008af2 <__ieee754_asin+0x4a>
 8008d64:	f3af 8000 	nop.w
 8008d68:	54442d18 	.word	0x54442d18
 8008d6c:	3ff921fb 	.word	0x3ff921fb
 8008d70:	33145c07 	.word	0x33145c07
 8008d74:	3c91a626 	.word	0x3c91a626
 8008d78:	8800759c 	.word	0x8800759c
 8008d7c:	7e37e43c 	.word	0x7e37e43c
 8008d80:	0dfdf709 	.word	0x0dfdf709
 8008d84:	3f023de1 	.word	0x3f023de1
 8008d88:	7501b288 	.word	0x7501b288
 8008d8c:	3f49efe0 	.word	0x3f49efe0
 8008d90:	b5688f3b 	.word	0xb5688f3b
 8008d94:	3fa48228 	.word	0x3fa48228
 8008d98:	0e884455 	.word	0x0e884455
 8008d9c:	3fc9c155 	.word	0x3fc9c155
 8008da0:	03eb6f7d 	.word	0x03eb6f7d
 8008da4:	3fd4d612 	.word	0x3fd4d612
 8008da8:	55555555 	.word	0x55555555
 8008dac:	3fc55555 	.word	0x3fc55555
 8008db0:	b12e9282 	.word	0xb12e9282
 8008db4:	3fb3b8c5 	.word	0x3fb3b8c5
 8008db8:	1b8d0159 	.word	0x1b8d0159
 8008dbc:	3fe6066c 	.word	0x3fe6066c
 8008dc0:	9c598ac8 	.word	0x9c598ac8
 8008dc4:	40002ae5 	.word	0x40002ae5
 8008dc8:	1c8a2d4b 	.word	0x1c8a2d4b
 8008dcc:	40033a27 	.word	0x40033a27
 8008dd0:	3fefffff 	.word	0x3fefffff
 8008dd4:	3fdfffff 	.word	0x3fdfffff
 8008dd8:	3ff00000 	.word	0x3ff00000
 8008ddc:	3fe00000 	.word	0x3fe00000
 8008de0:	3fef3332 	.word	0x3fef3332
 8008de4:	4652      	mov	r2, sl
 8008de6:	465b      	mov	r3, fp
 8008de8:	4650      	mov	r0, sl
 8008dea:	4659      	mov	r1, fp
 8008dec:	f7f7 fa4e 	bl	800028c <__adddf3>
 8008df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008df4:	4606      	mov	r6, r0
 8008df6:	460f      	mov	r7, r1
 8008df8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dfc:	f7f7 fd26 	bl	800084c <__aeabi_ddiv>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4630      	mov	r0, r6
 8008e06:	4639      	mov	r1, r7
 8008e08:	f7f7 fbf6 	bl	80005f8 <__aeabi_dmul>
 8008e0c:	f04f 0800 	mov.w	r8, #0
 8008e10:	4606      	mov	r6, r0
 8008e12:	460f      	mov	r7, r1
 8008e14:	4642      	mov	r2, r8
 8008e16:	465b      	mov	r3, fp
 8008e18:	4640      	mov	r0, r8
 8008e1a:	4659      	mov	r1, fp
 8008e1c:	f7f7 fbec 	bl	80005f8 <__aeabi_dmul>
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	4620      	mov	r0, r4
 8008e26:	4629      	mov	r1, r5
 8008e28:	f7f7 fa2e 	bl	8000288 <__aeabi_dsub>
 8008e2c:	4642      	mov	r2, r8
 8008e2e:	4604      	mov	r4, r0
 8008e30:	460d      	mov	r5, r1
 8008e32:	465b      	mov	r3, fp
 8008e34:	4650      	mov	r0, sl
 8008e36:	4659      	mov	r1, fp
 8008e38:	f7f7 fa28 	bl	800028c <__adddf3>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4620      	mov	r0, r4
 8008e42:	4629      	mov	r1, r5
 8008e44:	f7f7 fd02 	bl	800084c <__aeabi_ddiv>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	f7f7 fa1e 	bl	800028c <__adddf3>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	a112      	add	r1, pc, #72	@ (adr r1, 8008ea0 <__ieee754_asin+0x3f8>)
 8008e56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e5a:	f7f7 fa15 	bl	8000288 <__aeabi_dsub>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	460b      	mov	r3, r1
 8008e62:	4630      	mov	r0, r6
 8008e64:	4639      	mov	r1, r7
 8008e66:	f7f7 fa0f 	bl	8000288 <__aeabi_dsub>
 8008e6a:	4642      	mov	r2, r8
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	460d      	mov	r5, r1
 8008e70:	465b      	mov	r3, fp
 8008e72:	4640      	mov	r0, r8
 8008e74:	4659      	mov	r1, fp
 8008e76:	f7f7 fa09 	bl	800028c <__adddf3>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	a10a      	add	r1, pc, #40	@ (adr r1, 8008ea8 <__ieee754_asin+0x400>)
 8008e80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e84:	f7f7 fa00 	bl	8000288 <__aeabi_dsub>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	4629      	mov	r1, r5
 8008e90:	f7f7 f9fa 	bl	8000288 <__aeabi_dsub>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	a103      	add	r1, pc, #12	@ (adr r1, 8008ea8 <__ieee754_asin+0x400>)
 8008e9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e9e:	e6e2      	b.n	8008c66 <__ieee754_asin+0x1be>
 8008ea0:	33145c07 	.word	0x33145c07
 8008ea4:	3c91a626 	.word	0x3c91a626
 8008ea8:	54442d18 	.word	0x54442d18
 8008eac:	3fe921fb 	.word	0x3fe921fb

08008eb0 <_init>:
 8008eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb2:	bf00      	nop
 8008eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eb6:	bc08      	pop	{r3}
 8008eb8:	469e      	mov	lr, r3
 8008eba:	4770      	bx	lr

08008ebc <_fini>:
 8008ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ebe:	bf00      	nop
 8008ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ec2:	bc08      	pop	{r3}
 8008ec4:	469e      	mov	lr, r3
 8008ec6:	4770      	bx	lr
