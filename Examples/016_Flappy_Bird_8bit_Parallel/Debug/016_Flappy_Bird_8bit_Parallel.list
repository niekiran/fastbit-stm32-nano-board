
016_Flappy_Bird_8bit_Parallel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b050  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b354  0800b1e0  0800b1e0  0000c1e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016534  08016534  000181f8  2**0
                  CONTENTS
  4 .ARM          00000008  08016534  08016534  00017534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801653c  0801653c  000181f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801653c  0801653c  0001753c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016540  08016540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08016544  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000181f8  2**0
                  CONTENTS
 10 .bss          0000023c  200001f8  200001f8  000181f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000a04  20000434  20000434  000181f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000181f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afdf  00000000  00000000  00018228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026ca  00000000  00000000  00023207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  000258d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007b1  00000000  00000000  00026340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ee99  00000000  00000000  00026af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff6b  00000000  00000000  0004598a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad439  00000000  00000000  000558f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00102d2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ea4  00000000  00000000  00102d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  00106c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b1c8 	.word	0x0800b1c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800b1c8 	.word	0x0800b1c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <CST816S_i2c_read>:
  * @param  reg_addr: Address of the register to read from.
  * @param  reg_data: Pointer to a buffer where the read data will be stored.
  * @param  length: Number of bytes to read.
  * @retval None
  */
static void CST816S_i2c_read(uint16_t addr, uint8_t reg_addr, uint8_t *reg_data, size_t length) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	60ba      	str	r2, [r7, #8]
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4603      	mov	r3, r0
 8000d00:	81fb      	strh	r3, [r7, #14]
 8000d02:	460b      	mov	r3, r1
 8000d04:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Mem_Read(&hi2c1, addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, length, HAL_MAX_DELAY);
 8000d06:	89fb      	ldrh	r3, [r7, #14]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	b299      	uxth	r1, r3
 8000d0c:	7b7b      	ldrb	r3, [r7, #13]
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	9002      	str	r0, [sp, #8]
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2301      	movs	r3, #1
 8000d22:	4803      	ldr	r0, [pc, #12]	@ (8000d30 <CST816S_i2c_read+0x3c>)
 8000d24:	f003 fa9e 	bl	8004264 <HAL_I2C_Mem_Read>
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000228 	.word	0x20000228

08000d34 <CST816S_read_touch>:

/**
  * @brief  Reads touch data from the CST816S touch sensor.
  * @retval None
  */
void CST816S_read_touch(void) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
  uint8_t data_raw[8];
  uint8_t reg_addr = 0x01;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]

  CST816S_i2c_read(CST816S_ADDRESS, reg_addr, (uint8_t *)data_raw, 6);
 8000d3e:	1d3a      	adds	r2, r7, #4
 8000d40:	7bf9      	ldrb	r1, [r7, #15]
 8000d42:	2306      	movs	r3, #6
 8000d44:	2015      	movs	r0, #21
 8000d46:	f7ff ffd5 	bl	8000cf4 <CST816S_i2c_read>

  data.gestureID = data_raw[0];
 8000d4a:	793a      	ldrb	r2, [r7, #4]
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <CST816S_read_touch+0x54>)
 8000d4e:	701a      	strb	r2, [r3, #0]
  data.points = data_raw[1];
 8000d50:	797a      	ldrb	r2, [r7, #5]
 8000d52:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <CST816S_read_touch+0x54>)
 8000d54:	705a      	strb	r2, [r3, #1]
  data.event = data_raw[2] >> 6;
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	099b      	lsrs	r3, r3, #6
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <CST816S_read_touch+0x54>)
 8000d5e:	709a      	strb	r2, [r3, #2]
  data.x = ((data_raw[2] & 0xF) << 8) + data_raw[3];
 8000d60:	79bb      	ldrb	r3, [r7, #6]
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000d68:	79fa      	ldrb	r2, [r7, #7]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a06      	ldr	r2, [pc, #24]	@ (8000d88 <CST816S_read_touch+0x54>)
 8000d6e:	6053      	str	r3, [r2, #4]
  data.y = ((data_raw[4] & 0xF) << 8) + data_raw[5];
 8000d70:	7a3b      	ldrb	r3, [r7, #8]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000d78:	7a7a      	ldrb	r2, [r7, #9]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a02      	ldr	r2, [pc, #8]	@ (8000d88 <CST816S_read_touch+0x54>)
 8000d7e:	6093      	str	r3, [r2, #8]
}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000218 	.word	0x20000218

08000d8c <CST816S_get_data>:

/**
  * @brief  Returns a pointer to the structure containing the latest touch data.
  * @retval Pointer to the touch_data structure containing the latest touch information.
  */
struct touch_data* CST816S_get_data(void) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return &data;
 8000d90:	4b02      	ldr	r3, [pc, #8]	@ (8000d9c <CST816S_get_data+0x10>)
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	20000218 	.word	0x20000218

08000da0 <HAL_GPIO_EXTI_Callback>:
/**
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == TP_IN_Pin) {
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	2b20      	cmp	r3, #32
 8000dae:	d102      	bne.n	8000db6 <HAL_GPIO_EXTI_Callback+0x16>
    is_touch_detected = 1;
 8000db0:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <HAL_GPIO_EXTI_Callback+0x24>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
  }
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000214 	.word	0x20000214

08000dc8 <CST816S_hw_reset>:

void CST816S_hw_reset(void) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2110      	movs	r1, #16
 8000dd0:	480b      	ldr	r0, [pc, #44]	@ (8000e00 <CST816S_hw_reset+0x38>)
 8000dd2:	f003 f867 	bl	8003ea4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000dd6:	2032      	movs	r0, #50	@ 0x32
 8000dd8:	f002 fd82 	bl	80038e0 <HAL_Delay>
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2110      	movs	r1, #16
 8000de0:	4807      	ldr	r0, [pc, #28]	@ (8000e00 <CST816S_hw_reset+0x38>)
 8000de2:	f003 f85f 	bl	8003ea4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000de6:	2005      	movs	r0, #5
 8000de8:	f002 fd7a 	bl	80038e0 <HAL_Delay>
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2110      	movs	r1, #16
 8000df0:	4803      	ldr	r0, [pc, #12]	@ (8000e00 <CST816S_hw_reset+0x38>)
 8000df2:	f003 f857 	bl	8003ea4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000df6:	2032      	movs	r0, #50	@ 0x32
 8000df8:	f002 fd72 	bl	80038e0 <HAL_Delay>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	48000400 	.word	0x48000400

08000e04 <CST816S_init>:
/**
  * @brief  Performs a hardware reset of the CST816S touch sensor.
  *         This function assumes GPIO pins and delays are configured appropriately.
  * @retval None
  */
void CST816S_init(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  CST816S_hw_reset();
 8000e08:	f7ff ffde 	bl	8000dc8 <CST816S_hw_reset>

  CST816S_i2c_read(CST816S_ADDRESS, 0x15, &data.version, 1);
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e4c <CST816S_init+0x48>)
 8000e10:	2115      	movs	r1, #21
 8000e12:	2015      	movs	r0, #21
 8000e14:	f7ff ff6e 	bl	8000cf4 <CST816S_i2c_read>
  HAL_Delay(5);
 8000e18:	2005      	movs	r0, #5
 8000e1a:	f002 fd61 	bl	80038e0 <HAL_Delay>
  CST816S_i2c_read(CST816S_ADDRESS, 0xA7, data.versionInfo, 3);
 8000e1e:	2303      	movs	r3, #3
 8000e20:	4a0b      	ldr	r2, [pc, #44]	@ (8000e50 <CST816S_init+0x4c>)
 8000e22:	21a7      	movs	r1, #167	@ 0xa7
 8000e24:	2015      	movs	r0, #21
 8000e26:	f7ff ff65 	bl	8000cf4 <CST816S_i2c_read>

  if(data.versionInfo[0] == 0xB4){
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <CST816S_init+0x50>)
 8000e2c:	7b5b      	ldrb	r3, [r3, #13]
 8000e2e:	2bb4      	cmp	r3, #180	@ 0xb4
 8000e30:	d103      	bne.n	8000e3a <CST816S_init+0x36>
    printf("CST86S detected.\n\t");
 8000e32:	4809      	ldr	r0, [pc, #36]	@ (8000e58 <CST816S_init+0x54>)
 8000e34:	f006 f9d4 	bl	80071e0 <iprintf>
 8000e38:	e002      	b.n	8000e40 <CST816S_init+0x3c>
  } else {
    printf("CST86S not detected.\n\t");
 8000e3a:	4808      	ldr	r0, [pc, #32]	@ (8000e5c <CST816S_init+0x58>)
 8000e3c:	f006 f9d0 	bl	80071e0 <iprintf>
  }
  HAL_Delay(50);
 8000e40:	2032      	movs	r0, #50	@ 0x32
 8000e42:	f002 fd4d 	bl	80038e0 <HAL_Delay>
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000224 	.word	0x20000224
 8000e50:	20000225 	.word	0x20000225
 8000e54:	20000218 	.word	0x20000218
 8000e58:	0800b1e0 	.word	0x0800b1e0
 8000e5c:	0800b1f4 	.word	0x0800b1f4

08000e60 <CST816S_data_available>:

/**
  * @brief  Checks if touch data is available from the CST816S touch sensor.
  * @retval 1 if touch data is available, 0 otherwise.
  */
uint8_t CST816S_data_available(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
  uint8_t data_flag = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000e6a:	2017      	movs	r0, #23
 8000e6c:	f002 fe85 	bl	8003b7a <HAL_NVIC_DisableIRQ>
  if (is_touch_detected) {
 8000e70:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <CST816S_data_available+0x3c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d007      	beq.n	8000e88 <CST816S_data_available+0x28>
    CST816S_read_touch();
 8000e78:	f7ff ff5c 	bl	8000d34 <CST816S_read_touch>
    is_touch_detected = 0;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <CST816S_data_available+0x3c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
    data_flag = 1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	e001      	b.n	8000e8c <CST816S_data_available+0x2c>
  } else {
    data_flag = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	71fb      	strb	r3, [r7, #7]
  }
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e8c:	2017      	movs	r0, #23
 8000e8e:	f002 fe66 	bl	8003b5e <HAL_NVIC_EnableIRQ>

  return data_flag;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000214 	.word	0x20000214

08000ea0 <gc9a01a_write_cmd>:
/**
  * @brief  Sends a command to the GC9A01A LCD display.
  * @param  cmd: The command byte to be sent to the display.
  * @retval None
  */
static void gc9a01a_write_cmd(uint8_t cmd) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  GC9A01A_DC_CMD;
 8000eaa:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <gc9a01a_write_cmd+0x9c>)
 8000eac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000eb0:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT(cmd);
 8000eb2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000eb6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000eba:	619a      	str	r2, [r3, #24]
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f3c <gc9a01a_write_cmd+0x9c>)
 8000ebe:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8000ec2:	619a      	str	r2, [r3, #24]
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	029b      	lsls	r3, r3, #10
 8000ec8:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000eda:	619a      	str	r2, [r3, #24]
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	035b      	lsls	r3, r3, #13
 8000ee0:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	02db      	lsls	r3, r3, #11
 8000ee8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eec:	431a      	orrs	r2, r3
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	025b      	lsls	r3, r3, #9
 8000ef2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	01db      	lsls	r3, r3, #7
 8000efc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f00:	431a      	orrs	r2, r3
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f14:	431a      	orrs	r2, r3
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <gc9a01a_write_cmd+0x9c>)
 8000f18:	619a      	str	r2, [r3, #24]
 8000f1a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000f22:	619a      	str	r2, [r3, #24]
 8000f24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f2c:	619a      	str	r2, [r3, #24]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	48000400 	.word	0x48000400

08000f40 <gc9a01a_write_data>:
  * @brief  Sends a buffer of data to the GC9A01A LCD display.
  * @param  buff: Pointer to the buffer containing the data to be sent.
  * @param  buff_size: Size of the buffer.
  * @retval None
  */
static void gc9a01a_write_data(uint8_t* buff, uint32_t buff_size) {
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  GC9A01A_DC_DATA;
 8000f4a:	4b35      	ldr	r3, [pc, #212]	@ (8001020 <gc9a01a_write_data+0xe0>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	619a      	str	r2, [r3, #24]

  for(uint32_t i = 0; i < buff_size; i++) {
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e058      	b.n	8001008 <gc9a01a_write_data+0xc8>
    GC9A01A_WRITE_8BIT(buff[i]);
 8000f56:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f5a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000f5e:	619a      	str	r2, [r3, #24]
 8000f60:	4b2f      	ldr	r3, [pc, #188]	@ (8001020 <gc9a01a_write_data+0xe0>)
 8000f62:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8000f66:	619a      	str	r2, [r3, #24]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	029b      	lsls	r3, r3, #10
 8000f72:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	440b      	add	r3, r1
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f84:	431a      	orrs	r2, r3
 8000f86:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f8a:	619a      	str	r2, [r3, #24]
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4413      	add	r3, r2
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	035b      	lsls	r3, r3, #13
 8000f96:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	440b      	add	r3, r1
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	02db      	lsls	r3, r3, #11
 8000fa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	440b      	add	r3, r1
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	025b      	lsls	r3, r3, #9
 8000fb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	440b      	add	r3, r1
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	01db      	lsls	r3, r3, #7
 8000fc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	440b      	add	r3, r1
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	015b      	lsls	r3, r3, #5
 8000fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	440b      	add	r3, r1
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <gc9a01a_write_data+0xe0>)
 8000fec:	619a      	str	r2, [r3, #24]
 8000fee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ff2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000ff6:	619a      	str	r2, [r3, #24]
 8000ff8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ffc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001000:	619a      	str	r2, [r3, #24]
  for(uint32_t i = 0; i < buff_size; i++) {
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3301      	adds	r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	429a      	cmp	r2, r3
 800100e:	d3a2      	bcc.n	8000f56 <gc9a01a_write_data+0x16>
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	48000400 	.word	0x48000400

08001024 <gc9a01a_hw_reset>:
/**
  * @brief  Hardware reset for GC9A01A LCD
  * @param  None
  * @retval None
  */
static void gc9a01a_hw_reset() {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  GC9A01A_RST_HIGH  ;
 8001028:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <gc9a01a_hw_reset+0x34>)
 800102a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800102e:	619a      	str	r2, [r3, #24]
  HAL_Delay(10);
 8001030:	200a      	movs	r0, #10
 8001032:	f002 fc55 	bl	80038e0 <HAL_Delay>
  GC9A01A_RST_LOW;
 8001036:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <gc9a01a_hw_reset+0x34>)
 8001038:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800103c:	619a      	str	r2, [r3, #24]
  HAL_Delay(10);
 800103e:	200a      	movs	r0, #10
 8001040:	f002 fc4e 	bl	80038e0 <HAL_Delay>
  GC9A01A_RST_HIGH ;
 8001044:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <gc9a01a_hw_reset+0x34>)
 8001046:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800104a:	619a      	str	r2, [r3, #24]
  HAL_Delay(10);
 800104c:	200a      	movs	r0, #10
 800104e:	f002 fc47 	bl	80038e0 <HAL_Delay>
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	48000400 	.word	0x48000400

0800105c <gc9a01a_set_address_window>:
 * @param x0 start column address.
 * @param x1 end column address.
 * @param y0 start row address.
 * @param y1 end row address.
 */
void gc9a01a_set_address_window(uint16_t x0, uint16_t x1, uint16_t y0, uint16_t y1) {
 800105c:	b490      	push	{r4, r7}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	4611      	mov	r1, r2
 8001068:	461a      	mov	r2, r3
 800106a:	4623      	mov	r3, r4
 800106c:	80fb      	strh	r3, [r7, #6]
 800106e:	4603      	mov	r3, r0
 8001070:	80bb      	strh	r3, [r7, #4]
 8001072:	460b      	mov	r3, r1
 8001074:	807b      	strh	r3, [r7, #2]
 8001076:	4613      	mov	r3, r2
 8001078:	803b      	strh	r3, [r7, #0]
  // Send commands to set column address (x2 to x2)
  GC9A01A_DC_CMD;
 800107a:	4bbb      	ldr	r3, [pc, #748]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 800107c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001080:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT(GC9A01A_CASET); // Column address set command
 8001082:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001086:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800108a:	619a      	str	r2, [r3, #24]
 800108c:	4bb6      	ldr	r3, [pc, #728]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 800108e:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8001092:	619a      	str	r2, [r3, #24]
 8001094:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001098:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800109c:	619a      	str	r2, [r3, #24]
 800109e:	4bb2      	ldr	r3, [pc, #712]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 80010a0:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80010a4:	619a      	str	r2, [r3, #24]
 80010a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80010aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80010ae:	619a      	str	r2, [r3, #24]
 80010b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80010b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010b8:	619a      	str	r2, [r3, #24]
  GC9A01A_DC_DATA;
 80010ba:	4bab      	ldr	r3, [pc, #684]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 80010bc:	2202      	movs	r2, #2
 80010be:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT((uint8_t)(x0 >> 8));
 80010c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80010c4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80010c8:	619a      	str	r2, [r3, #24]
 80010ca:	4ba7      	ldr	r3, [pc, #668]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 80010cc:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 80010d0:	619a      	str	r2, [r3, #24]
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	029b      	lsls	r3, r3, #10
 80010dc:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010ee:	431a      	orrs	r2, r3
 80010f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80010f4:	619a      	str	r2, [r3, #24]
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	035b      	lsls	r3, r3, #13
 8001100:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	0a1b      	lsrs	r3, r3, #8
 8001108:	b29b      	uxth	r3, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	02db      	lsls	r3, r3, #11
 800110e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001112:	431a      	orrs	r2, r3
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	0a1b      	lsrs	r3, r3, #8
 8001118:	b29b      	uxth	r3, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	025b      	lsls	r3, r3, #9
 800111e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001122:	431a      	orrs	r2, r3
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	b29b      	uxth	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	01db      	lsls	r3, r3, #7
 800112e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001132:	431a      	orrs	r2, r3
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	0a1b      	lsrs	r3, r3, #8
 8001138:	b29b      	uxth	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	015b      	lsls	r3, r3, #5
 800113e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001142:	431a      	orrs	r2, r3
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	0a1b      	lsrs	r3, r3, #8
 8001148:	b29b      	uxth	r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001152:	431a      	orrs	r2, r3
 8001154:	4b84      	ldr	r3, [pc, #528]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 8001156:	619a      	str	r2, [r3, #24]
 8001158:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800115c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001160:	619a      	str	r2, [r3, #24]
 8001162:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001166:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800116a:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT((uint8_t)x0);
 800116c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001170:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001174:	619a      	str	r2, [r3, #24]
 8001176:	4b7c      	ldr	r3, [pc, #496]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 8001178:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 800117c:	619a      	str	r2, [r3, #24]
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	029b      	lsls	r3, r3, #10
 8001184:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001192:	431a      	orrs	r2, r3
 8001194:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001198:	619a      	str	r2, [r3, #24]
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	035b      	lsls	r3, r3, #13
 80011a0:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	02db      	lsls	r3, r3, #11
 80011aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ae:	431a      	orrs	r2, r3
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011ba:	431a      	orrs	r2, r3
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	01db      	lsls	r3, r3, #7
 80011c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011c6:	431a      	orrs	r2, r3
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	015b      	lsls	r3, r3, #5
 80011ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011d2:	431a      	orrs	r2, r3
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011de:	431a      	orrs	r2, r3
 80011e0:	4b61      	ldr	r3, [pc, #388]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 80011e2:	619a      	str	r2, [r3, #24]
 80011e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011e8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80011ec:	619a      	str	r2, [r3, #24]
 80011ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011f2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011f6:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT((uint8_t)(x1 >> 8));
 80011f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011fc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001200:	619a      	str	r2, [r3, #24]
 8001202:	4b59      	ldr	r3, [pc, #356]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 8001204:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8001208:	619a      	str	r2, [r3, #24]
 800120a:	88bb      	ldrh	r3, [r7, #4]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	b29b      	uxth	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	029b      	lsls	r3, r3, #10
 8001214:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001218:	88bb      	ldrh	r3, [r7, #4]
 800121a:	0a1b      	lsrs	r3, r3, #8
 800121c:	b29b      	uxth	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001226:	431a      	orrs	r2, r3
 8001228:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800122c:	619a      	str	r2, [r3, #24]
 800122e:	88bb      	ldrh	r3, [r7, #4]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	b29b      	uxth	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	035b      	lsls	r3, r3, #13
 8001238:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b29b      	uxth	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	02db      	lsls	r3, r3, #11
 8001246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124a:	431a      	orrs	r2, r3
 800124c:	88bb      	ldrh	r3, [r7, #4]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	b29b      	uxth	r3, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	025b      	lsls	r3, r3, #9
 8001256:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800125a:	431a      	orrs	r2, r3
 800125c:	88bb      	ldrh	r3, [r7, #4]
 800125e:	0a1b      	lsrs	r3, r3, #8
 8001260:	b29b      	uxth	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	01db      	lsls	r3, r3, #7
 8001266:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800126a:	431a      	orrs	r2, r3
 800126c:	88bb      	ldrh	r3, [r7, #4]
 800126e:	0a1b      	lsrs	r3, r3, #8
 8001270:	b29b      	uxth	r3, r3
 8001272:	b2db      	uxtb	r3, r3
 8001274:	015b      	lsls	r3, r3, #5
 8001276:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800127a:	431a      	orrs	r2, r3
 800127c:	88bb      	ldrh	r3, [r7, #4]
 800127e:	0a1b      	lsrs	r3, r3, #8
 8001280:	b29b      	uxth	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800128a:	431a      	orrs	r2, r3
 800128c:	4b36      	ldr	r3, [pc, #216]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 800128e:	619a      	str	r2, [r3, #24]
 8001290:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001294:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001298:	619a      	str	r2, [r3, #24]
 800129a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800129e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012a2:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT((uint8_t)x1);
 80012a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012a8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80012ac:	619a      	str	r2, [r3, #24]
 80012ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 80012b0:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 80012b4:	619a      	str	r2, [r3, #24]
 80012b6:	88bb      	ldrh	r3, [r7, #4]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	029b      	lsls	r3, r3, #10
 80012bc:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012ca:	431a      	orrs	r2, r3
 80012cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012d0:	619a      	str	r2, [r3, #24]
 80012d2:	88bb      	ldrh	r3, [r7, #4]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	035b      	lsls	r3, r3, #13
 80012d8:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	02db      	lsls	r3, r3, #11
 80012e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e6:	431a      	orrs	r2, r3
 80012e8:	88bb      	ldrh	r3, [r7, #4]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	025b      	lsls	r3, r3, #9
 80012ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012f2:	431a      	orrs	r2, r3
 80012f4:	88bb      	ldrh	r3, [r7, #4]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	01db      	lsls	r3, r3, #7
 80012fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012fe:	431a      	orrs	r2, r3
 8001300:	88bb      	ldrh	r3, [r7, #4]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	015b      	lsls	r3, r3, #5
 8001306:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800130a:	431a      	orrs	r2, r3
 800130c:	88bb      	ldrh	r3, [r7, #4]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001316:	431a      	orrs	r2, r3
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 800131a:	619a      	str	r2, [r3, #24]
 800131c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001320:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001324:	619a      	str	r2, [r3, #24]
 8001326:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800132a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800132e:	619a      	str	r2, [r3, #24]

  // Send commands to set row address (y2 to y2)
  GC9A01A_DC_CMD;
 8001330:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 8001332:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001336:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT(GC9A01A_RASET); // Row address set command
 8001338:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800133c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001340:	619a      	str	r2, [r3, #24]
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 8001344:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8001348:	619a      	str	r2, [r3, #24]
 800134a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800134e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001352:	619a      	str	r2, [r3, #24]
 8001354:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 8001356:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800135a:	619a      	str	r2, [r3, #24]
 800135c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001360:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001364:	619a      	str	r2, [r3, #24]
 8001366:	e001      	b.n	800136c <gc9a01a_set_address_window+0x310>
 8001368:	48000400 	.word	0x48000400
 800136c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001370:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001374:	619a      	str	r2, [r3, #24]
  GC9A01A_DC_DATA;
 8001376:	4bb1      	ldr	r3, [pc, #708]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 8001378:	2202      	movs	r2, #2
 800137a:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT((uint8_t)(y0 >> 8));
 800137c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001380:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001384:	619a      	str	r2, [r3, #24]
 8001386:	4bad      	ldr	r3, [pc, #692]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 8001388:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 800138c:	619a      	str	r2, [r3, #24]
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	b29b      	uxth	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	029b      	lsls	r3, r3, #10
 8001398:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	0a1b      	lsrs	r3, r3, #8
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013aa:	431a      	orrs	r2, r3
 80013ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013b0:	619a      	str	r2, [r3, #24]
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	035b      	lsls	r3, r3, #13
 80013bc:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	0a1b      	lsrs	r3, r3, #8
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	02db      	lsls	r3, r3, #11
 80013ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ce:	431a      	orrs	r2, r3
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	0a1b      	lsrs	r3, r3, #8
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	025b      	lsls	r3, r3, #9
 80013da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013de:	431a      	orrs	r2, r3
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	01db      	lsls	r3, r3, #7
 80013ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ee:	431a      	orrs	r2, r3
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	0a1b      	lsrs	r3, r3, #8
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	015b      	lsls	r3, r3, #5
 80013fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013fe:	431a      	orrs	r2, r3
 8001400:	887b      	ldrh	r3, [r7, #2]
 8001402:	0a1b      	lsrs	r3, r3, #8
 8001404:	b29b      	uxth	r3, r3
 8001406:	b2db      	uxtb	r3, r3
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800140e:	431a      	orrs	r2, r3
 8001410:	4b8a      	ldr	r3, [pc, #552]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 8001412:	619a      	str	r2, [r3, #24]
 8001414:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001418:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800141c:	619a      	str	r2, [r3, #24]
 800141e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001422:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001426:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT((uint8_t)y0);
 8001428:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800142c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001430:	619a      	str	r2, [r3, #24]
 8001432:	4b82      	ldr	r3, [pc, #520]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 8001434:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8001438:	619a      	str	r2, [r3, #24]
 800143a:	887b      	ldrh	r3, [r7, #2]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	029b      	lsls	r3, r3, #10
 8001440:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800144e:	431a      	orrs	r2, r3
 8001450:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001454:	619a      	str	r2, [r3, #24]
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	035b      	lsls	r3, r3, #13
 800145c:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8001460:	887b      	ldrh	r3, [r7, #2]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	02db      	lsls	r3, r3, #11
 8001466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800146a:	431a      	orrs	r2, r3
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	025b      	lsls	r3, r3, #9
 8001472:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001476:	431a      	orrs	r2, r3
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	01db      	lsls	r3, r3, #7
 800147e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001482:	431a      	orrs	r2, r3
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	015b      	lsls	r3, r3, #5
 800148a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800148e:	431a      	orrs	r2, r3
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800149a:	431a      	orrs	r2, r3
 800149c:	4b67      	ldr	r3, [pc, #412]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 800149e:	619a      	str	r2, [r3, #24]
 80014a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014a4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80014a8:	619a      	str	r2, [r3, #24]
 80014aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014ae:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014b2:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT((uint8_t)(y1 >> 8));
 80014b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014b8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80014bc:	619a      	str	r2, [r3, #24]
 80014be:	4b5f      	ldr	r3, [pc, #380]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 80014c0:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 80014c4:	619a      	str	r2, [r3, #24]
 80014c6:	883b      	ldrh	r3, [r7, #0]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	029b      	lsls	r3, r3, #10
 80014d0:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80014d4:	883b      	ldrh	r3, [r7, #0]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014e2:	431a      	orrs	r2, r3
 80014e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014e8:	619a      	str	r2, [r3, #24]
 80014ea:	883b      	ldrh	r3, [r7, #0]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	035b      	lsls	r3, r3, #13
 80014f4:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80014f8:	883b      	ldrh	r3, [r7, #0]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	02db      	lsls	r3, r3, #11
 8001502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001506:	431a      	orrs	r2, r3
 8001508:	883b      	ldrh	r3, [r7, #0]
 800150a:	0a1b      	lsrs	r3, r3, #8
 800150c:	b29b      	uxth	r3, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	025b      	lsls	r3, r3, #9
 8001512:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001516:	431a      	orrs	r2, r3
 8001518:	883b      	ldrh	r3, [r7, #0]
 800151a:	0a1b      	lsrs	r3, r3, #8
 800151c:	b29b      	uxth	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	01db      	lsls	r3, r3, #7
 8001522:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001526:	431a      	orrs	r2, r3
 8001528:	883b      	ldrh	r3, [r7, #0]
 800152a:	0a1b      	lsrs	r3, r3, #8
 800152c:	b29b      	uxth	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	015b      	lsls	r3, r3, #5
 8001532:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001536:	431a      	orrs	r2, r3
 8001538:	883b      	ldrh	r3, [r7, #0]
 800153a:	0a1b      	lsrs	r3, r3, #8
 800153c:	b29b      	uxth	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001546:	431a      	orrs	r2, r3
 8001548:	4b3c      	ldr	r3, [pc, #240]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 800154a:	619a      	str	r2, [r3, #24]
 800154c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001550:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001554:	619a      	str	r2, [r3, #24]
 8001556:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800155a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800155e:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT((uint8_t)y1);
 8001560:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001564:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001568:	619a      	str	r2, [r3, #24]
 800156a:	4b34      	ldr	r3, [pc, #208]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 800156c:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8001570:	619a      	str	r2, [r3, #24]
 8001572:	883b      	ldrh	r3, [r7, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	029b      	lsls	r3, r3, #10
 8001578:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800157c:	883b      	ldrh	r3, [r7, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001586:	431a      	orrs	r2, r3
 8001588:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800158c:	619a      	str	r2, [r3, #24]
 800158e:	883b      	ldrh	r3, [r7, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	035b      	lsls	r3, r3, #13
 8001594:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8001598:	883b      	ldrh	r3, [r7, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	02db      	lsls	r3, r3, #11
 800159e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a2:	431a      	orrs	r2, r3
 80015a4:	883b      	ldrh	r3, [r7, #0]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015ae:	431a      	orrs	r2, r3
 80015b0:	883b      	ldrh	r3, [r7, #0]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	01db      	lsls	r3, r3, #7
 80015b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ba:	431a      	orrs	r2, r3
 80015bc:	883b      	ldrh	r3, [r7, #0]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	015b      	lsls	r3, r3, #5
 80015c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015c6:	431a      	orrs	r2, r3
 80015c8:	883b      	ldrh	r3, [r7, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d2:	431a      	orrs	r2, r3
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 80015d6:	619a      	str	r2, [r3, #24]
 80015d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015dc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80015e0:	619a      	str	r2, [r3, #24]
 80015e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015ea:	619a      	str	r2, [r3, #24]

  // Send command to write to RAM
  GC9A01A_DC_CMD;
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 80015ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015f2:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT(GC9A01A_RAMWR); // Write to RAM command
 80015f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015f8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80015fc:	619a      	str	r2, [r3, #24]
 80015fe:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 8001600:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8001604:	619a      	str	r2, [r3, #24]
 8001606:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
 800160e:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 8001610:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8001614:	619a      	str	r2, [r3, #24]
 8001616:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800161a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800161e:	619a      	str	r2, [r3, #24]
 8001620:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001624:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001628:	619a      	str	r2, [r3, #24]
  GC9A01A_DC_DATA;
 800162a:	4b04      	ldr	r3, [pc, #16]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 800162c:	2202      	movs	r2, #2
 800162e:	619a      	str	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bc90      	pop	{r4, r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	48000400 	.word	0x48000400

08001640 <gc9a01a_init>:
/**
  * @brief  Initialize the GC9A01A LCD
  * @param  None
  * @retval None
  */
static void gc9a01a_init() {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
  uint8_t params[15];
  GC9A01A_CS_LOW;
 8001646:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800164a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800164e:	619a      	str	r2, [r3, #24]

  gc9a01a_write_cmd(GC9A01A_INREGEN1);      ///< Inter register enable 1
 8001650:	20fe      	movs	r0, #254	@ 0xfe
 8001652:	f7ff fc25 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_cmd(GC9A01A_INREGEN2);      ///< Inter register enable 2
 8001656:	20ef      	movs	r0, #239	@ 0xef
 8001658:	f7ff fc22 	bl	8000ea0 <gc9a01a_write_cmd>

  params[0] = 0x14;
 800165c:	2314      	movs	r3, #20
 800165e:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xEB);
 8001660:	20eb      	movs	r0, #235	@ 0xeb
 8001662:	f7ff fc1d 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001666:	463b      	mov	r3, r7
 8001668:	2101      	movs	r1, #1
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fc68 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x60;
 8001670:	2360      	movs	r3, #96	@ 0x60
 8001672:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x84);
 8001674:	2084      	movs	r0, #132	@ 0x84
 8001676:	f7ff fc13 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800167a:	463b      	mov	r3, r7
 800167c:	2101      	movs	r1, #1
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fc5e 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0xFF;
 8001684:	23ff      	movs	r3, #255	@ 0xff
 8001686:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x85);
 8001688:	2085      	movs	r0, #133	@ 0x85
 800168a:	f7ff fc09 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800168e:	463b      	mov	r3, r7
 8001690:	2101      	movs	r1, #1
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fc54 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0xFF;
 8001698:	23ff      	movs	r3, #255	@ 0xff
 800169a:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x86);
 800169c:	2086      	movs	r0, #134	@ 0x86
 800169e:	f7ff fbff 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80016a2:	463b      	mov	r3, r7
 80016a4:	2101      	movs	r1, #1
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fc4a 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0xFF;
 80016ac:	23ff      	movs	r3, #255	@ 0xff
 80016ae:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x87);
 80016b0:	2087      	movs	r0, #135	@ 0x87
 80016b2:	f7ff fbf5 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80016b6:	463b      	mov	r3, r7
 80016b8:	2101      	movs	r1, #1
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fc40 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0xFF;
 80016c0:	23ff      	movs	r3, #255	@ 0xff
 80016c2:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8E);
 80016c4:	208e      	movs	r0, #142	@ 0x8e
 80016c6:	f7ff fbeb 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80016ca:	463b      	mov	r3, r7
 80016cc:	2101      	movs	r1, #1
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fc36 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0xFF;
 80016d4:	23ff      	movs	r3, #255	@ 0xff
 80016d6:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8F);
 80016d8:	208f      	movs	r0, #143	@ 0x8f
 80016da:	f7ff fbe1 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80016de:	463b      	mov	r3, r7
 80016e0:	2101      	movs	r1, #1
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fc2c 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x0A;
 80016e8:	230a      	movs	r3, #10
 80016ea:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x88);
 80016ec:	2088      	movs	r0, #136	@ 0x88
 80016ee:	f7ff fbd7 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80016f2:	463b      	mov	r3, r7
 80016f4:	2101      	movs	r1, #1
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fc22 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x21;
 80016fc:	2321      	movs	r3, #33	@ 0x21
 80016fe:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x89);
 8001700:	2089      	movs	r0, #137	@ 0x89
 8001702:	f7ff fbcd 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001706:	463b      	mov	r3, r7
 8001708:	2101      	movs	r1, #1
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fc18 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x00;
 8001710:	2300      	movs	r3, #0
 8001712:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8A);
 8001714:	208a      	movs	r0, #138	@ 0x8a
 8001716:	f7ff fbc3 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800171a:	463b      	mov	r3, r7
 800171c:	2101      	movs	r1, #1
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fc0e 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x80;
 8001724:	2380      	movs	r3, #128	@ 0x80
 8001726:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8B);
 8001728:	208b      	movs	r0, #139	@ 0x8b
 800172a:	f7ff fbb9 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800172e:	463b      	mov	r3, r7
 8001730:	2101      	movs	r1, #1
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fc04 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x01;
 8001738:	2301      	movs	r3, #1
 800173a:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8C);
 800173c:	208c      	movs	r0, #140	@ 0x8c
 800173e:	f7ff fbaf 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001742:	463b      	mov	r3, r7
 8001744:	2101      	movs	r1, #1
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fbfa 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x03;
 800174c:	2303      	movs	r3, #3
 800174e:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8D);
 8001750:	208d      	movs	r0, #141	@ 0x8d
 8001752:	f7ff fba5 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001756:	463b      	mov	r3, r7
 8001758:	2101      	movs	r1, #1
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fbf0 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x08;
 8001760:	2308      	movs	r3, #8
 8001762:	703b      	strb	r3, [r7, #0]
  params[1] = 0x09;
 8001764:	2309      	movs	r3, #9
 8001766:	707b      	strb	r3, [r7, #1]
  params[2] = 0x14;
 8001768:	2314      	movs	r3, #20
 800176a:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x08;
 800176c:	2308      	movs	r3, #8
 800176e:	70fb      	strb	r3, [r7, #3]
  gc9a01a_write_cmd(0xB5);
 8001770:	20b5      	movs	r0, #181	@ 0xb5
 8001772:	f7ff fb95 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 4);
 8001776:	463b      	mov	r3, r7
 8001778:	2104      	movs	r1, #4
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fbe0 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x00;
 8001780:	2300      	movs	r3, #0
 8001782:	703b      	strb	r3, [r7, #0]
  params[1] = 0x00;
 8001784:	2300      	movs	r3, #0
 8001786:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(GC9A01A_DISP_CTRL);     ///<Display Function Control
 8001788:	20b6      	movs	r0, #182	@ 0xb6
 800178a:	f7ff fb89 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 800178e:	463b      	mov	r3, r7
 8001790:	2102      	movs	r1, #2
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fbd4 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x48;
 8001798:	2348      	movs	r3, #72	@ 0x48
 800179a:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A_MADCTL);        ///< Memory Access Control
 800179c:	2036      	movs	r0, #54	@ 0x36
 800179e:	f7ff fb7f 	bl	8000ea0 <gc9a01a_write_cmd>

  gc9a01a_write_data(params, 1);
 80017a2:	463b      	mov	r3, r7
 80017a4:	2101      	movs	r1, #1
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fbca 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x05;
 80017ac:	2305      	movs	r3, #5
 80017ae:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A_COLMOD);        ///< Pixel Format Set
 80017b0:	203a      	movs	r0, #58	@ 0x3a
 80017b2:	f7ff fb75 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80017b6:	463b      	mov	r3, r7
 80017b8:	2101      	movs	r1, #1
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fbc0 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x08;
 80017c0:	2308      	movs	r3, #8
 80017c2:	703b      	strb	r3, [r7, #0]
  params[1] = 0x08;
 80017c4:	2308      	movs	r3, #8
 80017c6:	707b      	strb	r3, [r7, #1]
  params[2] = 0x08;
 80017c8:	2308      	movs	r3, #8
 80017ca:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x08;
 80017cc:	2308      	movs	r3, #8
 80017ce:	70fb      	strb	r3, [r7, #3]
  gc9a01a_write_cmd(0x90);
 80017d0:	2090      	movs	r0, #144	@ 0x90
 80017d2:	f7ff fb65 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 4);
 80017d6:	463b      	mov	r3, r7
 80017d8:	2104      	movs	r1, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fbb0 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x06;
 80017e0:	2306      	movs	r3, #6
 80017e2:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xBD);
 80017e4:	20bd      	movs	r0, #189	@ 0xbd
 80017e6:	f7ff fb5b 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80017ea:	463b      	mov	r3, r7
 80017ec:	2101      	movs	r1, #1
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fba6 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x01;
 80017f4:	2301      	movs	r3, #1
 80017f6:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xBA);
 80017f8:	20ba      	movs	r0, #186	@ 0xba
 80017fa:	f7ff fb51 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80017fe:	463b      	mov	r3, r7
 8001800:	2101      	movs	r1, #1
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fb9c 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x00;
 8001808:	2300      	movs	r3, #0
 800180a:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xBC);
 800180c:	20bc      	movs	r0, #188	@ 0xbc
 800180e:	f7ff fb47 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001812:	463b      	mov	r3, r7
 8001814:	2101      	movs	r1, #1
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fb92 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x60;
 800181c:	2360      	movs	r3, #96	@ 0x60
 800181e:	703b      	strb	r3, [r7, #0]
  params[1] = 0x01;
 8001820:	2301      	movs	r3, #1
 8001822:	707b      	strb	r3, [r7, #1]
  params[2] = 0x04;
 8001824:	2304      	movs	r3, #4
 8001826:	70bb      	strb	r3, [r7, #2]
  gc9a01a_write_cmd(0xFF);
 8001828:	20ff      	movs	r0, #255	@ 0xff
 800182a:	f7ff fb39 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 3);
 800182e:	463b      	mov	r3, r7
 8001830:	2103      	movs	r1, #3
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fb84 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x14;
 8001838:	2314      	movs	r3, #20
 800183a:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A1_POWER2);       ///< Power Control 2
 800183c:	20c3      	movs	r0, #195	@ 0xc3
 800183e:	f7ff fb2f 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001842:	463b      	mov	r3, r7
 8001844:	2101      	movs	r1, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fb7a 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x14;
 800184c:	2314      	movs	r3, #20
 800184e:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A1_POWER3);       ///< Power Control 3
 8001850:	20c4      	movs	r0, #196	@ 0xc4
 8001852:	f7ff fb25 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001856:	463b      	mov	r3, r7
 8001858:	2101      	movs	r1, #1
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fb70 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x25;
 8001860:	2325      	movs	r3, #37	@ 0x25
 8001862:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A1_POWER4);       ///< Power Control 4
 8001864:	20c9      	movs	r0, #201	@ 0xc9
 8001866:	f7ff fb1b 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800186a:	463b      	mov	r3, r7
 800186c:	2101      	movs	r1, #1
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fb66 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x11;
 8001874:	2311      	movs	r3, #17
 8001876:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xBE);
 8001878:	20be      	movs	r0, #190	@ 0xbe
 800187a:	f7ff fb11 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800187e:	463b      	mov	r3, r7
 8001880:	2101      	movs	r1, #1
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fb5c 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x10;
 8001888:	2310      	movs	r3, #16
 800188a:	703b      	strb	r3, [r7, #0]
  params[1] = 0x0e;
 800188c:	230e      	movs	r3, #14
 800188e:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(0xE1);
 8001890:	20e1      	movs	r0, #225	@ 0xe1
 8001892:	f7ff fb05 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 8001896:	463b      	mov	r3, r7
 8001898:	2102      	movs	r1, #2
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fb50 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x21;
 80018a0:	2321      	movs	r3, #33	@ 0x21
 80018a2:	703b      	strb	r3, [r7, #0]
  params[1] = 0x0c;
 80018a4:	230c      	movs	r3, #12
 80018a6:	707b      	strb	r3, [r7, #1]
  params[2] = 0x02;
 80018a8:	2302      	movs	r3, #2
 80018aa:	70bb      	strb	r3, [r7, #2]
  gc9a01a_write_cmd(0xDF);
 80018ac:	20df      	movs	r0, #223	@ 0xdf
 80018ae:	f7ff faf7 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 3);
 80018b2:	463b      	mov	r3, r7
 80018b4:	2103      	movs	r1, #3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fb42 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x45;
 80018bc:	2345      	movs	r3, #69	@ 0x45
 80018be:	703b      	strb	r3, [r7, #0]
  params[1] = 0x09;
 80018c0:	2309      	movs	r3, #9
 80018c2:	707b      	strb	r3, [r7, #1]
  params[2] = 0x08;
 80018c4:	2308      	movs	r3, #8
 80018c6:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x08;
 80018c8:	2308      	movs	r3, #8
 80018ca:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x26;
 80018cc:	2326      	movs	r3, #38	@ 0x26
 80018ce:	713b      	strb	r3, [r7, #4]
  params[5] = 0x2A;
 80018d0:	232a      	movs	r3, #42	@ 0x2a
 80018d2:	717b      	strb	r3, [r7, #5]
  gc9a01a_write_cmd(GC9A01A_GAMMA1);        ///< Set gamma 1
 80018d4:	20f0      	movs	r0, #240	@ 0xf0
 80018d6:	f7ff fae3 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 6);
 80018da:	463b      	mov	r3, r7
 80018dc:	2106      	movs	r1, #6
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fb2e 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x43;
 80018e4:	2343      	movs	r3, #67	@ 0x43
 80018e6:	703b      	strb	r3, [r7, #0]
  params[1] = 0x70;
 80018e8:	2370      	movs	r3, #112	@ 0x70
 80018ea:	707b      	strb	r3, [r7, #1]
  params[2] = 0x72;
 80018ec:	2372      	movs	r3, #114	@ 0x72
 80018ee:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x36;
 80018f0:	2336      	movs	r3, #54	@ 0x36
 80018f2:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x37;
 80018f4:	2337      	movs	r3, #55	@ 0x37
 80018f6:	713b      	strb	r3, [r7, #4]
  params[5] = 0x6F;
 80018f8:	236f      	movs	r3, #111	@ 0x6f
 80018fa:	717b      	strb	r3, [r7, #5]
  gc9a01a_write_cmd(GC9A01A_GAMMA2);        ///< Set gamma 2
 80018fc:	20f1      	movs	r0, #241	@ 0xf1
 80018fe:	f7ff facf 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 6);
 8001902:	463b      	mov	r3, r7
 8001904:	2106      	movs	r1, #6
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fb1a 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x45;
 800190c:	2345      	movs	r3, #69	@ 0x45
 800190e:	703b      	strb	r3, [r7, #0]
  params[1] = 0x09;
 8001910:	2309      	movs	r3, #9
 8001912:	707b      	strb	r3, [r7, #1]
  params[2] = 0x08;
 8001914:	2308      	movs	r3, #8
 8001916:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x08;
 8001918:	2308      	movs	r3, #8
 800191a:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x26;
 800191c:	2326      	movs	r3, #38	@ 0x26
 800191e:	713b      	strb	r3, [r7, #4]
  params[5] = 0x2A;
 8001920:	232a      	movs	r3, #42	@ 0x2a
 8001922:	717b      	strb	r3, [r7, #5]
  gc9a01a_write_cmd(GC9A01A_GAMMA3);        ///< Set gamma 3
 8001924:	20f2      	movs	r0, #242	@ 0xf2
 8001926:	f7ff fabb 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 6);
 800192a:	463b      	mov	r3, r7
 800192c:	2106      	movs	r1, #6
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fb06 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x43;
 8001934:	2343      	movs	r3, #67	@ 0x43
 8001936:	703b      	strb	r3, [r7, #0]
  params[1] = 0x70;
 8001938:	2370      	movs	r3, #112	@ 0x70
 800193a:	707b      	strb	r3, [r7, #1]
  params[2] = 0x72;
 800193c:	2372      	movs	r3, #114	@ 0x72
 800193e:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x36;
 8001940:	2336      	movs	r3, #54	@ 0x36
 8001942:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x37;
 8001944:	2337      	movs	r3, #55	@ 0x37
 8001946:	713b      	strb	r3, [r7, #4]
  params[5] = 0x6F;
 8001948:	236f      	movs	r3, #111	@ 0x6f
 800194a:	717b      	strb	r3, [r7, #5]
  gc9a01a_write_cmd(GC9A01A_GAMMA4);        ///< Set gamma 4
 800194c:	20f3      	movs	r0, #243	@ 0xf3
 800194e:	f7ff faa7 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 6);
 8001952:	463b      	mov	r3, r7
 8001954:	2106      	movs	r1, #6
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff faf2 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x1B;
 800195c:	231b      	movs	r3, #27
 800195e:	703b      	strb	r3, [r7, #0]
  params[1] = 0x0B;
 8001960:	230b      	movs	r3, #11
 8001962:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(0xED);
 8001964:	20ed      	movs	r0, #237	@ 0xed
 8001966:	f7ff fa9b 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 800196a:	463b      	mov	r3, r7
 800196c:	2102      	movs	r1, #2
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fae6 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x77;
 8001974:	2377      	movs	r3, #119	@ 0x77
 8001976:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xAE);
 8001978:	20ae      	movs	r0, #174	@ 0xae
 800197a:	f7ff fa91 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800197e:	463b      	mov	r3, r7
 8001980:	2101      	movs	r1, #1
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fadc 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x63;
 8001988:	2363      	movs	r3, #99	@ 0x63
 800198a:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xCD);
 800198c:	20cd      	movs	r0, #205	@ 0xcd
 800198e:	f7ff fa87 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001992:	463b      	mov	r3, r7
 8001994:	2101      	movs	r1, #1
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fad2 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x07;
 800199c:	2307      	movs	r3, #7
 800199e:	703b      	strb	r3, [r7, #0]
  params[1] = 0x07;
 80019a0:	2307      	movs	r3, #7
 80019a2:	707b      	strb	r3, [r7, #1]
  params[2] = 0x04;
 80019a4:	2304      	movs	r3, #4
 80019a6:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x0E;
 80019a8:	230e      	movs	r3, #14
 80019aa:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x0F;
 80019ac:	230f      	movs	r3, #15
 80019ae:	713b      	strb	r3, [r7, #4]
  params[5] = 0x09;
 80019b0:	2309      	movs	r3, #9
 80019b2:	717b      	strb	r3, [r7, #5]
  params[6] = 0x07;
 80019b4:	2307      	movs	r3, #7
 80019b6:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x08;
 80019b8:	2308      	movs	r3, #8
 80019ba:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x03;
 80019bc:	2303      	movs	r3, #3
 80019be:	723b      	strb	r3, [r7, #8]
  gc9a01a_write_cmd(0x70);
 80019c0:	2070      	movs	r0, #112	@ 0x70
 80019c2:	f7ff fa6d 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 9);
 80019c6:	463b      	mov	r3, r7
 80019c8:	2109      	movs	r1, #9
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fab8 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x34;
 80019d0:	2334      	movs	r3, #52	@ 0x34
 80019d2:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A_FRAMERATE);     ///< Frame rate control
 80019d4:	20e8      	movs	r0, #232	@ 0xe8
 80019d6:	f7ff fa63 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80019da:	463b      	mov	r3, r7
 80019dc:	2101      	movs	r1, #1
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff faae 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x18;
 80019e4:	2318      	movs	r3, #24
 80019e6:	703b      	strb	r3, [r7, #0]
  params[1] = 0x0D;
 80019e8:	230d      	movs	r3, #13
 80019ea:	707b      	strb	r3, [r7, #1]
  params[2] = 0x71;
 80019ec:	2371      	movs	r3, #113	@ 0x71
 80019ee:	70bb      	strb	r3, [r7, #2]
  params[3] = 0xED;
 80019f0:	23ed      	movs	r3, #237	@ 0xed
 80019f2:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x70;
 80019f4:	2370      	movs	r3, #112	@ 0x70
 80019f6:	713b      	strb	r3, [r7, #4]
  params[5] = 0x70;
 80019f8:	2370      	movs	r3, #112	@ 0x70
 80019fa:	717b      	strb	r3, [r7, #5]
  params[6] = 0x18;
 80019fc:	2318      	movs	r3, #24
 80019fe:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x0F;
 8001a00:	230f      	movs	r3, #15
 8001a02:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x71;
 8001a04:	2371      	movs	r3, #113	@ 0x71
 8001a06:	723b      	strb	r3, [r7, #8]
  params[9] = 0xEF;
 8001a08:	23ef      	movs	r3, #239	@ 0xef
 8001a0a:	727b      	strb	r3, [r7, #9]
  params[10] = 0x70;
 8001a0c:	2370      	movs	r3, #112	@ 0x70
 8001a0e:	72bb      	strb	r3, [r7, #10]
  params[11] = 0x70;
 8001a10:	2370      	movs	r3, #112	@ 0x70
 8001a12:	72fb      	strb	r3, [r7, #11]
  gc9a01a_write_cmd(0x62);
 8001a14:	2062      	movs	r0, #98	@ 0x62
 8001a16:	f7ff fa43 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 12);
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	210c      	movs	r1, #12
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fa8e 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x18;
 8001a24:	2318      	movs	r3, #24
 8001a26:	703b      	strb	r3, [r7, #0]
  params[1] = 0x11;
 8001a28:	2311      	movs	r3, #17
 8001a2a:	707b      	strb	r3, [r7, #1]
  params[2] = 0x71;
 8001a2c:	2371      	movs	r3, #113	@ 0x71
 8001a2e:	70bb      	strb	r3, [r7, #2]
  params[3] = 0xF1;
 8001a30:	23f1      	movs	r3, #241	@ 0xf1
 8001a32:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x70;
 8001a34:	2370      	movs	r3, #112	@ 0x70
 8001a36:	713b      	strb	r3, [r7, #4]
  params[5] = 0x70;
 8001a38:	2370      	movs	r3, #112	@ 0x70
 8001a3a:	717b      	strb	r3, [r7, #5]
  params[6] = 0x18;
 8001a3c:	2318      	movs	r3, #24
 8001a3e:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x13;
 8001a40:	2313      	movs	r3, #19
 8001a42:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x71;
 8001a44:	2371      	movs	r3, #113	@ 0x71
 8001a46:	723b      	strb	r3, [r7, #8]
  params[9] = 0xF3;
 8001a48:	23f3      	movs	r3, #243	@ 0xf3
 8001a4a:	727b      	strb	r3, [r7, #9]
  params[10] = 0x70;
 8001a4c:	2370      	movs	r3, #112	@ 0x70
 8001a4e:	72bb      	strb	r3, [r7, #10]
  params[11] = 0x70;
 8001a50:	2370      	movs	r3, #112	@ 0x70
 8001a52:	72fb      	strb	r3, [r7, #11]
  gc9a01a_write_cmd(0x63);
 8001a54:	2063      	movs	r0, #99	@ 0x63
 8001a56:	f7ff fa23 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 12);
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	210c      	movs	r1, #12
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fa6e 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x28;
 8001a64:	2328      	movs	r3, #40	@ 0x28
 8001a66:	703b      	strb	r3, [r7, #0]
  params[1] = 0x29;
 8001a68:	2329      	movs	r3, #41	@ 0x29
 8001a6a:	707b      	strb	r3, [r7, #1]
  params[2] = 0xF1;
 8001a6c:	23f1      	movs	r3, #241	@ 0xf1
 8001a6e:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x01;
 8001a70:	2301      	movs	r3, #1
 8001a72:	70fb      	strb	r3, [r7, #3]
  params[4] = 0xF1;
 8001a74:	23f1      	movs	r3, #241	@ 0xf1
 8001a76:	713b      	strb	r3, [r7, #4]
  params[5] = 0x00;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	717b      	strb	r3, [r7, #5]
  params[6] = 0x07;
 8001a7c:	2307      	movs	r3, #7
 8001a7e:	71bb      	strb	r3, [r7, #6]
  gc9a01a_write_cmd(0x64);
 8001a80:	2064      	movs	r0, #100	@ 0x64
 8001a82:	f7ff fa0d 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 7);
 8001a86:	463b      	mov	r3, r7
 8001a88:	2107      	movs	r1, #7
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fa58 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x3C;
 8001a90:	233c      	movs	r3, #60	@ 0x3c
 8001a92:	703b      	strb	r3, [r7, #0]
  params[1] = 0x00;
 8001a94:	2300      	movs	r3, #0
 8001a96:	707b      	strb	r3, [r7, #1]
  params[2] = 0xCD;
 8001a98:	23cd      	movs	r3, #205	@ 0xcd
 8001a9a:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x67;
 8001a9c:	2367      	movs	r3, #103	@ 0x67
 8001a9e:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x45;
 8001aa0:	2345      	movs	r3, #69	@ 0x45
 8001aa2:	713b      	strb	r3, [r7, #4]
  params[5] = 0x45;
 8001aa4:	2345      	movs	r3, #69	@ 0x45
 8001aa6:	717b      	strb	r3, [r7, #5]
  params[6] = 0x10;
 8001aa8:	2310      	movs	r3, #16
 8001aaa:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x00;
 8001aac:	2300      	movs	r3, #0
 8001aae:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x00;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	723b      	strb	r3, [r7, #8]
  params[9] = 0x00;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	727b      	strb	r3, [r7, #9]
  gc9a01a_write_cmd(0x66);
 8001ab8:	2066      	movs	r0, #102	@ 0x66
 8001aba:	f7ff f9f1 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 10);
 8001abe:	463b      	mov	r3, r7
 8001ac0:	210a      	movs	r1, #10
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fa3c 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x00;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	703b      	strb	r3, [r7, #0]
  params[1] = 0x3C;
 8001acc:	233c      	movs	r3, #60	@ 0x3c
 8001ace:	707b      	strb	r3, [r7, #1]
  params[2] = 0x00;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x00;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x00;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	713b      	strb	r3, [r7, #4]
  params[5] = 0x01;
 8001adc:	2301      	movs	r3, #1
 8001ade:	717b      	strb	r3, [r7, #5]
  params[6] = 0x54;
 8001ae0:	2354      	movs	r3, #84	@ 0x54
 8001ae2:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x10;
 8001ae4:	2310      	movs	r3, #16
 8001ae6:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x32;
 8001ae8:	2332      	movs	r3, #50	@ 0x32
 8001aea:	723b      	strb	r3, [r7, #8]
  params[9] = 0x98;
 8001aec:	2398      	movs	r3, #152	@ 0x98
 8001aee:	727b      	strb	r3, [r7, #9]
  gc9a01a_write_cmd(0x67);
 8001af0:	2067      	movs	r0, #103	@ 0x67
 8001af2:	f7ff f9d5 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 10);
 8001af6:	463b      	mov	r3, r7
 8001af8:	210a      	movs	r1, #10
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fa20 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x10;
 8001b00:	2310      	movs	r3, #16
 8001b02:	703b      	strb	r3, [r7, #0]
  params[1] = 0x85;
 8001b04:	2385      	movs	r3, #133	@ 0x85
 8001b06:	707b      	strb	r3, [r7, #1]
  params[2] = 0x80;
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x00;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x00;
 8001b10:	2300      	movs	r3, #0
 8001b12:	713b      	strb	r3, [r7, #4]
  params[5] = 0x4E;
 8001b14:	234e      	movs	r3, #78	@ 0x4e
 8001b16:	717b      	strb	r3, [r7, #5]
  params[6] = 0x00;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	71bb      	strb	r3, [r7, #6]
  gc9a01a_write_cmd(0x74);
 8001b1c:	2074      	movs	r0, #116	@ 0x74
 8001b1e:	f7ff f9bf 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 7);
 8001b22:	463b      	mov	r3, r7
 8001b24:	2107      	movs	r1, #7
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fa0a 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x3E;
 8001b2c:	233e      	movs	r3, #62	@ 0x3e
 8001b2e:	703b      	strb	r3, [r7, #0]
  params[1] = 0x07;
 8001b30:	2307      	movs	r3, #7
 8001b32:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(0x98);
 8001b34:	2098      	movs	r0, #152	@ 0x98
 8001b36:	f7ff f9b3 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f9fe 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x3E;
 8001b44:	233e      	movs	r3, #62	@ 0x3e
 8001b46:	703b      	strb	r3, [r7, #0]
  params[1] = 0x07;
 8001b48:	2307      	movs	r3, #7
 8001b4a:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(0x99);
 8001b4c:	2099      	movs	r0, #153	@ 0x99
 8001b4e:	f7ff f9a7 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 8001b52:	463b      	mov	r3, r7
 8001b54:	2102      	movs	r1, #2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f9f2 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x00;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A_TEON);          ///< Tearing Effect Line ON
 8001b60:	2035      	movs	r0, #53	@ 0x35
 8001b62:	f7ff f99d 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001b66:	463b      	mov	r3, r7
 8001b68:	2101      	movs	r1, #1
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f9e8 	bl	8000f40 <gc9a01a_write_data>

  gc9a01a_write_cmd(GC9A01A_INVON);         ///< Display Inversion ON
 8001b70:	2021      	movs	r0, #33	@ 0x21
 8001b72:	f7ff f995 	bl	8000ea0 <gc9a01a_write_cmd>
  HAL_Delay(120);
 8001b76:	2078      	movs	r0, #120	@ 0x78
 8001b78:	f001 feb2 	bl	80038e0 <HAL_Delay>
  gc9a01a_write_cmd(GC9A01A_SLPOUT);        ///< Sleep Out
 8001b7c:	2011      	movs	r0, #17
 8001b7e:	f7ff f98f 	bl	8000ea0 <gc9a01a_write_cmd>
  HAL_Delay(120);
 8001b82:	2078      	movs	r0, #120	@ 0x78
 8001b84:	f001 feac 	bl	80038e0 <HAL_Delay>
  gc9a01a_write_cmd(GC9A01A_DISPON);        ///< Display ON
 8001b88:	2029      	movs	r0, #41	@ 0x29
 8001b8a:	f7ff f989 	bl	8000ea0 <gc9a01a_write_cmd>
  HAL_Delay(20);
 8001b8e:	2014      	movs	r0, #20
 8001b90:	f001 fea6 	bl	80038e0 <HAL_Delay>


  //GC9A01A_CS_HIGH;
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <bsp_lcd_init>:



void bsp_lcd_init() {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  //GC9A01A_CS_HIGH;
  GC9A01A_BL_ON;
 8001ba0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	619a      	str	r2, [r3, #24]
  GC9A01A_TE_LOW;
 8001ba8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001bac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bb0:	619a      	str	r2, [r3, #24]
  GC9A01A_RD_HIGH;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <bsp_lcd_init+0x30>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	619a      	str	r2, [r3, #24]
  //GC9A01A_CS_LOW;

  gc9a01a_hw_reset();
 8001bb8:	f7ff fa34 	bl	8001024 <gc9a01a_hw_reset>
  gc9a01a_init();
 8001bbc:	f7ff fd40 	bl	8001640 <gc9a01a_init>
  gc9a01a_set_orientation(LANDSCAPE);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f000 f995 	bl	8001ef0 <gc9a01a_set_orientation>
  //gc9a01a_fill_screen(WHITE);
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	48000400 	.word	0x48000400

08001bd0 <gc9a01a_write_char>:
  * @param  font: Font definition structure
  * @param  color: Color of the character (RGB565 format)
  * @param  bgcolor: Background color of the character (RGB565 format)
  * @retval None
  */
static void gc9a01a_write_char(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b088      	sub	sp, #32
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
 8001bde:	460b      	mov	r3, r1
 8001be0:	80bb      	strh	r3, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	70fb      	strb	r3, [r7, #3]
  uint32_t i, b, j;

  gc9a01a_set_address_window(x, x+font.width-1, y, y+font.height-1);
 8001be6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001bea:	461a      	mov	r2, r3
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	4413      	add	r3, r2
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b299      	uxth	r1, r3
 8001bf6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	88bb      	ldrh	r3, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	88ba      	ldrh	r2, [r7, #4]
 8001c08:	88f8      	ldrh	r0, [r7, #6]
 8001c0a:	f7ff fa27 	bl	800105c <gc9a01a_set_address_window>

  for(i = 0; i < font.height; i++) {
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	e041      	b.n	8001c98 <gc9a01a_write_char+0xc8>
    b = font.data[(ch - 32) * font.height + i];
 8001c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	3b20      	subs	r3, #32
 8001c1a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	4619      	mov	r1, r3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	440b      	add	r3, r1
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	617b      	str	r3, [r7, #20]
    for(j = 0; j < font.width; j++) {
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	e027      	b.n	8001c86 <gc9a01a_write_char+0xb6>
      if((b << j) & 0x8000)  {
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00e      	beq.n	8001c64 <gc9a01a_write_char+0x94>
        uint8_t data[] = { color >> 8, color & 0xFF };
 8001c46:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	743b      	strb	r3, [r7, #16]
 8001c50:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	747b      	strb	r3, [r7, #17]
        gc9a01a_write_data(data, sizeof(data));
 8001c56:	f107 0310 	add.w	r3, r7, #16
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff f96f 	bl	8000f40 <gc9a01a_write_data>
 8001c62:	e00d      	b.n	8001c80 <gc9a01a_write_char+0xb0>
      } else {
        uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001c64:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	733b      	strb	r3, [r7, #12]
 8001c6e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	737b      	strb	r3, [r7, #13]
        gc9a01a_write_data(data, sizeof(data));
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2102      	movs	r1, #2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f960 	bl	8000f40 <gc9a01a_write_data>
    for(j = 0; j < font.width; j++) {
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	3301      	adds	r3, #1
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d3d1      	bcc.n	8001c36 <gc9a01a_write_char+0x66>
  for(i = 0; i < font.height; i++) {
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3301      	adds	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d3b7      	bcc.n	8001c14 <gc9a01a_write_char+0x44>
      }
    }
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3720      	adds	r7, #32
 8001caa:	46bd      	mov	sp, r7
 8001cac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cb0:	b002      	add	sp, #8
 8001cb2:	4770      	bx	lr

08001cb4 <gc9a01a_write_string>:
  * @param  font: Font definition structure
  * @param  color: Text color (RGB565 format)
  * @param  bgcolor: Background color (RGB565 format)
  * @retval None
  */
void gc9a01a_write_string(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af04      	add	r7, sp, #16
 8001cbc:	603a      	str	r2, [r7, #0]
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	80fb      	strh	r3, [r7, #6]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	80bb      	strh	r3, [r7, #4]
  //GC9A01A_CS_LOW;

  while(*str) {
 8001cc8:	e02d      	b.n	8001d26 <gc9a01a_write_string+0x72>
    if(x + font.width >= GC9A01A_WIDTH) {
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	7d3a      	ldrb	r2, [r7, #20]
 8001cce:	4413      	add	r3, r2
 8001cd0:	2bef      	cmp	r3, #239	@ 0xef
 8001cd2:	dd13      	ble.n	8001cfc <gc9a01a_write_string+0x48>
      x = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	80fb      	strh	r3, [r7, #6]
      y += font.height;
 8001cd8:	7d7b      	ldrb	r3, [r7, #21]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	88bb      	ldrh	r3, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	80bb      	strh	r3, [r7, #4]
      if(y + font.height >= GC9A01A_HEIGHT) {
 8001ce2:	88bb      	ldrh	r3, [r7, #4]
 8001ce4:	7d7a      	ldrb	r2, [r7, #21]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	2bef      	cmp	r3, #239	@ 0xef
 8001cea:	dc21      	bgt.n	8001d30 <gc9a01a_write_string+0x7c>
        break;
      }

      if(*str == ' ') {
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d103      	bne.n	8001cfc <gc9a01a_write_string+0x48>
        // skip spaces in the beginning of the new line
        str++;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	603b      	str	r3, [r7, #0]
        continue;
 8001cfa:	e014      	b.n	8001d26 <gc9a01a_write_string+0x72>
      }
    }

    gc9a01a_write_char(x, y, *str, font, color, bgcolor);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	781a      	ldrb	r2, [r3, #0]
 8001d00:	88b9      	ldrh	r1, [r7, #4]
 8001d02:	88f8      	ldrh	r0, [r7, #6]
 8001d04:	8c3b      	ldrh	r3, [r7, #32]
 8001d06:	9302      	str	r3, [sp, #8]
 8001d08:	8bbb      	ldrh	r3, [r7, #28]
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f7ff ff5d 	bl	8001bd0 <gc9a01a_write_char>
    x += font.width;
 8001d16:	7d3b      	ldrb	r3, [r7, #20]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	80fb      	strh	r3, [r7, #6]
    str++;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	603b      	str	r3, [r7, #0]
  while(*str) {
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1cd      	bne.n	8001cca <gc9a01a_write_string+0x16>
  }

  //GC9A01A_CS_HIGH;
}
 8001d2e:	e000      	b.n	8001d32 <gc9a01a_write_string+0x7e>
        break;
 8001d30:	bf00      	nop
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d3c:	b002      	add	sp, #8
 8001d3e:	4770      	bx	lr

08001d40 <gc9a01a_fill_rect>:
  * @param  y: Y-coordinate of the top-left corner of the rectangle.
  * @param  h: Height of the rectangle.
  * @param  color: Color to fill the rectangle with.
  * @retval None
  */
void gc9a01a_fill_rect(uint16_t x, uint16_t w, uint16_t y, uint16_t h, uint16_t color) {
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4604      	mov	r4, r0
 8001d48:	4608      	mov	r0, r1
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4623      	mov	r3, r4
 8001d50:	80fb      	strh	r3, [r7, #6]
 8001d52:	4603      	mov	r3, r0
 8001d54:	80bb      	strh	r3, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	807b      	strh	r3, [r7, #2]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	803b      	strh	r3, [r7, #0]
  if((x >= BSP_LCD_ACTIVE_WIDTH) || (y >= BSP_LCD_ACTIVE_HEIGHT)) return;
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	2bef      	cmp	r3, #239	@ 0xef
 8001d62:	f200 80bf 	bhi.w	8001ee4 <gc9a01a_fill_rect+0x1a4>
 8001d66:	887b      	ldrh	r3, [r7, #2]
 8001d68:	2bef      	cmp	r3, #239	@ 0xef
 8001d6a:	f200 80bb 	bhi.w	8001ee4 <gc9a01a_fill_rect+0x1a4>
  if((x + w - 1) >= BSP_LCD_ACTIVE_WIDTH) w = BSP_LCD_ACTIVE_WIDTH - x;
 8001d6e:	88fa      	ldrh	r2, [r7, #6]
 8001d70:	88bb      	ldrh	r3, [r7, #4]
 8001d72:	4413      	add	r3, r2
 8001d74:	2bf0      	cmp	r3, #240	@ 0xf0
 8001d76:	dd03      	ble.n	8001d80 <gc9a01a_fill_rect+0x40>
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001d7e:	80bb      	strh	r3, [r7, #4]
  if((y + h - 1) >= BSP_LCD_ACTIVE_HEIGHT) h = BSP_LCD_ACTIVE_HEIGHT - y;
 8001d80:	887a      	ldrh	r2, [r7, #2]
 8001d82:	883b      	ldrh	r3, [r7, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	2bf0      	cmp	r3, #240	@ 0xf0
 8001d88:	dd03      	ble.n	8001d92 <gc9a01a_fill_rect+0x52>
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001d90:	803b      	strh	r3, [r7, #0]
  //GC9A01A_CS_LOW;
  gc9a01a_set_address_window(x,(x+w-1), y, (y+h-1));
 8001d92:	88fa      	ldrh	r2, [r7, #6]
 8001d94:	88bb      	ldrh	r3, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b299      	uxth	r1, r3
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	883b      	ldrh	r3, [r7, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	88f8      	ldrh	r0, [r7, #6]
 8001dae:	f7ff f955 	bl	800105c <gc9a01a_set_address_window>
  uint8_t data[] = { color >> 8, color & 0xFF };
 8001db2:	8c3b      	ldrh	r3, [r7, #32]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	733b      	strb	r3, [r7, #12]
 8001dbc:	8c3b      	ldrh	r3, [r7, #32]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	737b      	strb	r3, [r7, #13]

  for(y = h; y > 0; y--) {
 8001dc2:	883b      	ldrh	r3, [r7, #0]
 8001dc4:	807b      	strh	r3, [r7, #2]
 8001dc6:	e088      	b.n	8001eda <gc9a01a_fill_rect+0x19a>
    for(x = w; x > 0; x--) {
 8001dc8:	88bb      	ldrh	r3, [r7, #4]
 8001dca:	80fb      	strh	r3, [r7, #6]
 8001dcc:	e07e      	b.n	8001ecc <gc9a01a_fill_rect+0x18c>
      GC9A01A_WRITE_8BIT(data[0]);
 8001dce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001dd2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001dd6:	619a      	str	r2, [r3, #24]
 8001dd8:	4b44      	ldr	r3, [pc, #272]	@ (8001eec <gc9a01a_fill_rect+0x1ac>)
 8001dda:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8001dde:	619a      	str	r2, [r3, #24]
 8001de0:	7b3b      	ldrb	r3, [r7, #12]
 8001de2:	029b      	lsls	r3, r3, #10
 8001de4:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001de8:	7b3b      	ldrb	r3, [r7, #12]
 8001dea:	021b      	lsls	r3, r3, #8
 8001dec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001df0:	431a      	orrs	r2, r3
 8001df2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001df6:	619a      	str	r2, [r3, #24]
 8001df8:	7b3b      	ldrb	r3, [r7, #12]
 8001dfa:	035b      	lsls	r3, r3, #13
 8001dfc:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8001e00:	7b3b      	ldrb	r3, [r7, #12]
 8001e02:	02db      	lsls	r3, r3, #11
 8001e04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	7b3b      	ldrb	r3, [r7, #12]
 8001e0c:	025b      	lsls	r3, r3, #9
 8001e0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e12:	431a      	orrs	r2, r3
 8001e14:	7b3b      	ldrb	r3, [r7, #12]
 8001e16:	01db      	lsls	r3, r3, #7
 8001e18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	7b3b      	ldrb	r3, [r7, #12]
 8001e20:	015b      	lsls	r3, r3, #5
 8001e22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e26:	431a      	orrs	r2, r3
 8001e28:	7b3b      	ldrb	r3, [r7, #12]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e30:	431a      	orrs	r2, r3
 8001e32:	4b2e      	ldr	r3, [pc, #184]	@ (8001eec <gc9a01a_fill_rect+0x1ac>)
 8001e34:	619a      	str	r2, [r3, #24]
 8001e36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001e3e:	619a      	str	r2, [r3, #24]
 8001e40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e44:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e48:	619a      	str	r2, [r3, #24]
      GC9A01A_WRITE_8BIT(data[1]);
 8001e4a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e4e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001e52:	619a      	str	r2, [r3, #24]
 8001e54:	4b25      	ldr	r3, [pc, #148]	@ (8001eec <gc9a01a_fill_rect+0x1ac>)
 8001e56:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8001e5a:	619a      	str	r2, [r3, #24]
 8001e5c:	7b7b      	ldrb	r3, [r7, #13]
 8001e5e:	029b      	lsls	r3, r3, #10
 8001e60:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001e64:	7b7b      	ldrb	r3, [r7, #13]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e72:	619a      	str	r2, [r3, #24]
 8001e74:	7b7b      	ldrb	r3, [r7, #13]
 8001e76:	035b      	lsls	r3, r3, #13
 8001e78:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8001e7c:	7b7b      	ldrb	r3, [r7, #13]
 8001e7e:	02db      	lsls	r3, r3, #11
 8001e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e84:	431a      	orrs	r2, r3
 8001e86:	7b7b      	ldrb	r3, [r7, #13]
 8001e88:	025b      	lsls	r3, r3, #9
 8001e8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	7b7b      	ldrb	r3, [r7, #13]
 8001e92:	01db      	lsls	r3, r3, #7
 8001e94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	7b7b      	ldrb	r3, [r7, #13]
 8001e9c:	015b      	lsls	r3, r3, #5
 8001e9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	7b7b      	ldrb	r3, [r7, #13]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eac:	431a      	orrs	r2, r3
 8001eae:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <gc9a01a_fill_rect+0x1ac>)
 8001eb0:	619a      	str	r2, [r3, #24]
 8001eb2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001eb6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001eba:	619a      	str	r2, [r3, #24]
 8001ebc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ec0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ec4:	619a      	str	r2, [r3, #24]
    for(x = w; x > 0; x--) {
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	80fb      	strh	r3, [r7, #6]
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f47f af7d 	bne.w	8001dce <gc9a01a_fill_rect+0x8e>
  for(y = h; y > 0; y--) {
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	807b      	strh	r3, [r7, #2]
 8001eda:	887b      	ldrh	r3, [r7, #2]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f47f af73 	bne.w	8001dc8 <gc9a01a_fill_rect+0x88>
 8001ee2:	e000      	b.n	8001ee6 <gc9a01a_fill_rect+0x1a6>
  if((x >= BSP_LCD_ACTIVE_WIDTH) || (y >= BSP_LCD_ACTIVE_HEIGHT)) return;
 8001ee4:	bf00      	nop
    }
  }
  //GC9A01A_CS_HIGH;
}
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd90      	pop	{r4, r7, pc}
 8001eec:	48000400 	.word	0x48000400

08001ef0 <gc9a01a_set_orientation>:
/**
  * @brief  Set the orientation of the GC9A01A LCD display
  * @param  orientation: Orientation mode (LANDSCAPE or PORTRAIT)
  * @retval None
  */
void gc9a01a_set_orientation(uint8_t orientation) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  uint8_t params[4];
  //GC9A01A_CS_LOW;
  if (orientation == LANDSCAPE) {
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d11c      	bne.n	8001f3a <gc9a01a_set_orientation+0x4a>
    // Set column address for landscape orientation
    gc9a01a_write_cmd(GC9A01A_CASET);
 8001f00:	202a      	movs	r0, #42	@ 0x2a
 8001f02:	f7fe ffcd 	bl	8000ea0 <gc9a01a_write_cmd>
    params[0] = 0x00;
 8001f06:	2300      	movs	r3, #0
 8001f08:	733b      	strb	r3, [r7, #12]
    params[1] = 0x00;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	737b      	strb	r3, [r7, #13]
    params[2] = 0x00;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73bb      	strb	r3, [r7, #14]
    params[3] = 0xf0;
 8001f12:	23f0      	movs	r3, #240	@ 0xf0
 8001f14:	73fb      	strb	r3, [r7, #15]
    gc9a01a_write_data(params, 4);
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	2104      	movs	r1, #4
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff f80f 	bl	8000f40 <gc9a01a_write_data>

    // Set row address for landscape orientation
    gc9a01a_write_cmd(GC9A01A_RASET);
 8001f22:	202b      	movs	r0, #43	@ 0x2b
 8001f24:	f7fe ffbc 	bl	8000ea0 <gc9a01a_write_cmd>
    gc9a01a_write_data(params, 4);
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	2104      	movs	r1, #4
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f806 	bl	8000f40 <gc9a01a_write_data>

    // Set orientation parameters for landscape mode
    params[0] = MADCTL_MV | MADCTL_BGR;
 8001f34:	2328      	movs	r3, #40	@ 0x28
 8001f36:	733b      	strb	r3, [r7, #12]
 8001f38:	e01e      	b.n	8001f78 <gc9a01a_set_orientation+0x88>
  } else if (orientation == PORTRAIT) {
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d11b      	bne.n	8001f78 <gc9a01a_set_orientation+0x88>
    // Set column address for portrait orientation
    gc9a01a_write_cmd(GC9A01A_CASET);
 8001f40:	202a      	movs	r0, #42	@ 0x2a
 8001f42:	f7fe ffad 	bl	8000ea0 <gc9a01a_write_cmd>
    params[0] = 0x00;
 8001f46:	2300      	movs	r3, #0
 8001f48:	733b      	strb	r3, [r7, #12]
    params[1] = 0x00;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	737b      	strb	r3, [r7, #13]
    params[2] = 0x00;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	73bb      	strb	r3, [r7, #14]
    params[3] = 0xf0;
 8001f52:	23f0      	movs	r3, #240	@ 0xf0
 8001f54:	73fb      	strb	r3, [r7, #15]
    gc9a01a_write_data(params, 4);
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe ffef 	bl	8000f40 <gc9a01a_write_data>

    // Set row address for portrait orientation
    gc9a01a_write_cmd(GC9A01A_RASET);
 8001f62:	202b      	movs	r0, #43	@ 0x2b
 8001f64:	f7fe ff9c 	bl	8000ea0 <gc9a01a_write_cmd>
    gc9a01a_write_data(params, 4);
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe ffe6 	bl	8000f40 <gc9a01a_write_data>

    // Set orientation parameters for portrait mode
    params[0] =  MADCTL_MX | MADCTL_BGR;
 8001f74:	2348      	movs	r3, #72	@ 0x48
 8001f76:	733b      	strb	r3, [r7, #12]
  }

  // Set MADCTL register with the configured parameters
  gc9a01a_write_cmd(GC9A01A_MADCTL);
 8001f78:	2036      	movs	r0, #54	@ 0x36
 8001f7a:	f7fe ff91 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	2101      	movs	r1, #1
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe ffdb 	bl	8000f40 <gc9a01a_write_data>
  //GC9A01A_CS_HIGH;
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <gc9a01a_draw_image>:
  * @param  y: Start row address
  * @param  h: Height of the image
  * @param  data: Pointer to the image data (RGB565 format)
  * @retval None
  */
void gc9a01a_draw_image(uint16_t x, uint16_t w, uint16_t y, uint16_t h, const uint16_t* data) {
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4604      	mov	r4, r0
 8001f9c:	4608      	mov	r0, r1
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4623      	mov	r3, r4
 8001fa4:	80fb      	strh	r3, [r7, #6]
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80bb      	strh	r3, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	807b      	strh	r3, [r7, #2]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	803b      	strh	r3, [r7, #0]
  if ((x >= GC9A01A_WIDTH) || (y >= GC9A01A_HEIGHT)) return;
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	2bef      	cmp	r3, #239	@ 0xef
 8001fb6:	f200 80c0 	bhi.w	800213a <gc9a01a_draw_image+0x1a6>
 8001fba:	887b      	ldrh	r3, [r7, #2]
 8001fbc:	2bef      	cmp	r3, #239	@ 0xef
 8001fbe:	f200 80bc 	bhi.w	800213a <gc9a01a_draw_image+0x1a6>
  if ((x + w - 1) >= GC9A01A_WIDTH) w = GC9A01A_HEIGHT - x;
 8001fc2:	88fa      	ldrh	r2, [r7, #6]
 8001fc4:	88bb      	ldrh	r3, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	2bf0      	cmp	r3, #240	@ 0xf0
 8001fca:	dd03      	ble.n	8001fd4 <gc9a01a_draw_image+0x40>
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001fd2:	80bb      	strh	r3, [r7, #4]
  if ((y + h - 1) >= GC9A01A_WIDTH) h = GC9A01A_HEIGHT - y;
 8001fd4:	887a      	ldrh	r2, [r7, #2]
 8001fd6:	883b      	ldrh	r3, [r7, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	2bf0      	cmp	r3, #240	@ 0xf0
 8001fdc:	dd03      	ble.n	8001fe6 <gc9a01a_draw_image+0x52>
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001fe4:	803b      	strh	r3, [r7, #0]
  //GC9A01A_CS_LOW;
  gc9a01a_set_address_window(x, (x+w-1), y, (y+h-1));
 8001fe6:	88fa      	ldrh	r2, [r7, #6]
 8001fe8:	88bb      	ldrh	r3, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b299      	uxth	r1, r3
 8001ff2:	887a      	ldrh	r2, [r7, #2]
 8001ff4:	883b      	ldrh	r3, [r7, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	88f8      	ldrh	r0, [r7, #6]
 8002002:	f7ff f82b 	bl	800105c <gc9a01a_set_address_window>

  for (uint32_t i = 0; i < w * h; i++) {
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	e08c      	b.n	8002126 <gc9a01a_draw_image+0x192>
    uint8_t color_high = (data[i] >> 8) & 0xFF;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	6a3a      	ldr	r2, [r7, #32]
 8002012:	4413      	add	r3, r2
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	b29b      	uxth	r3, r3
 800201a:	72fb      	strb	r3, [r7, #11]
    uint8_t color_low = data[i] & 0xFF;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	6a3a      	ldr	r2, [r7, #32]
 8002022:	4413      	add	r3, r2
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	72bb      	strb	r3, [r7, #10]
    GC9A01A_WRITE_8BIT(color_high);
 8002028:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800202c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002030:	619a      	str	r2, [r3, #24]
 8002032:	4b44      	ldr	r3, [pc, #272]	@ (8002144 <gc9a01a_draw_image+0x1b0>)
 8002034:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8002038:	619a      	str	r2, [r3, #24]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	029b      	lsls	r3, r3, #10
 800203e:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8002042:	7afb      	ldrb	r3, [r7, #11]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800204a:	431a      	orrs	r2, r3
 800204c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002050:	619a      	str	r2, [r3, #24]
 8002052:	7afb      	ldrb	r3, [r7, #11]
 8002054:	035b      	lsls	r3, r3, #13
 8002056:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 800205a:	7afb      	ldrb	r3, [r7, #11]
 800205c:	02db      	lsls	r3, r3, #11
 800205e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002062:	431a      	orrs	r2, r3
 8002064:	7afb      	ldrb	r3, [r7, #11]
 8002066:	025b      	lsls	r3, r3, #9
 8002068:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800206c:	431a      	orrs	r2, r3
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	01db      	lsls	r3, r3, #7
 8002072:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002076:	431a      	orrs	r2, r3
 8002078:	7afb      	ldrb	r3, [r7, #11]
 800207a:	015b      	lsls	r3, r3, #5
 800207c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002080:	431a      	orrs	r2, r3
 8002082:	7afb      	ldrb	r3, [r7, #11]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800208a:	431a      	orrs	r2, r3
 800208c:	4b2d      	ldr	r3, [pc, #180]	@ (8002144 <gc9a01a_draw_image+0x1b0>)
 800208e:	619a      	str	r2, [r3, #24]
 8002090:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002094:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002098:	619a      	str	r2, [r3, #24]
 800209a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800209e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020a2:	619a      	str	r2, [r3, #24]
    GC9A01A_WRITE_8BIT(color_low);
 80020a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80020a8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80020ac:	619a      	str	r2, [r3, #24]
 80020ae:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <gc9a01a_draw_image+0x1b0>)
 80020b0:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 80020b4:	619a      	str	r2, [r3, #24]
 80020b6:	7abb      	ldrb	r3, [r7, #10]
 80020b8:	029b      	lsls	r3, r3, #10
 80020ba:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80020be:	7abb      	ldrb	r3, [r7, #10]
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c6:	431a      	orrs	r2, r3
 80020c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80020cc:	619a      	str	r2, [r3, #24]
 80020ce:	7abb      	ldrb	r3, [r7, #10]
 80020d0:	035b      	lsls	r3, r3, #13
 80020d2:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80020d6:	7abb      	ldrb	r3, [r7, #10]
 80020d8:	02db      	lsls	r3, r3, #11
 80020da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020de:	431a      	orrs	r2, r3
 80020e0:	7abb      	ldrb	r3, [r7, #10]
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020e8:	431a      	orrs	r2, r3
 80020ea:	7abb      	ldrb	r3, [r7, #10]
 80020ec:	01db      	lsls	r3, r3, #7
 80020ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020f2:	431a      	orrs	r2, r3
 80020f4:	7abb      	ldrb	r3, [r7, #10]
 80020f6:	015b      	lsls	r3, r3, #5
 80020f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020fc:	431a      	orrs	r2, r3
 80020fe:	7abb      	ldrb	r3, [r7, #10]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002106:	431a      	orrs	r2, r3
 8002108:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <gc9a01a_draw_image+0x1b0>)
 800210a:	619a      	str	r2, [r3, #24]
 800210c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002110:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002114:	619a      	str	r2, [r3, #24]
 8002116:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800211a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800211e:	619a      	str	r2, [r3, #24]
  for (uint32_t i = 0; i < w * h; i++) {
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3301      	adds	r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	88bb      	ldrh	r3, [r7, #4]
 8002128:	883a      	ldrh	r2, [r7, #0]
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4293      	cmp	r3, r2
 8002134:	f4ff af6a 	bcc.w	800200c <gc9a01a_draw_image+0x78>
 8002138:	e000      	b.n	800213c <gc9a01a_draw_image+0x1a8>
  if ((x >= GC9A01A_WIDTH) || (y >= GC9A01A_HEIGHT)) return;
 800213a:	bf00      	nop
  }
  //GC9A01A_CS_HIGH;
}
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bd90      	pop	{r4, r7, pc}
 8002142:	bf00      	nop
 8002144:	48000400 	.word	0x48000400

08002148 <bsp_lcd_set_background>:

/**
  * @brief  Set the background color on the LCD.
  * @retval None
  */
void bsp_lcd_set_background() {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af02      	add	r7, sp, #8
	gc9a01a_fill_rect(0,(BSP_LCD_BACKGROUND_WIDTH),0,(BSP_LCD_BACKGROUND_HEIGHT), BACKGROUND);
 800214e:	f649 735e 	movw	r3, #40798	@ 0x9f5e
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	23f0      	movs	r3, #240	@ 0xf0
 8002156:	2200      	movs	r2, #0
 8002158:	21f0      	movs	r1, #240	@ 0xf0
 800215a:	2000      	movs	r0, #0
 800215c:	f7ff fdf0 	bl	8001d40 <gc9a01a_fill_rect>
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <fill_player_trace>:

/**
  * @brief  Fill the player trace area with the background color.
  * @retval None
  */
void fill_player_trace(){
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b083      	sub	sp, #12
 800216c:	af02      	add	r7, sp, #8
  if( obstacle.x >= (player.x + player.w) || obstacle.x + 30 <= player.x) {
 800216e:	4b25      	ldr	r3, [pc, #148]	@ (8002204 <fill_player_trace+0x9c>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <fill_player_trace+0xa0>)
 8002174:	6819      	ldr	r1, [r3, #0]
 8002176:	4b24      	ldr	r3, [pc, #144]	@ (8002208 <fill_player_trace+0xa0>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	440b      	add	r3, r1
 800217c:	429a      	cmp	r2, r3
 800217e:	da07      	bge.n	8002190 <fill_player_trace+0x28>
 8002180:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <fill_player_trace+0x9c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f103 021d 	add.w	r2, r3, #29
 8002188:	4b1f      	ldr	r3, [pc, #124]	@ (8002208 <fill_player_trace+0xa0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	da0d      	bge.n	80021ac <fill_player_trace+0x44>
    gc9a01a_fill_rect(player.x, player.w, 30, 180, BACKGROUND);
 8002190:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <fill_player_trace+0xa0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	b298      	uxth	r0, r3
 8002196:	4b1c      	ldr	r3, [pc, #112]	@ (8002208 <fill_player_trace+0xa0>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	b299      	uxth	r1, r3
 800219c:	f649 735e 	movw	r3, #40798	@ 0x9f5e
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	23b4      	movs	r3, #180	@ 0xb4
 80021a4:	221e      	movs	r2, #30
 80021a6:	f7ff fdcb 	bl	8001d40 <gc9a01a_fill_rect>
  } else if( obstacle.x <= (player.x + player.w) || obstacle.x + 30 >= player.x) {
    gc9a01a_fill_rect(player.x, player.w, (obstacle.y + obstacle.h),  obstacle.g, BACKGROUND);
  }
}
 80021aa:	e026      	b.n	80021fa <fill_player_trace+0x92>
  } else if( obstacle.x <= (player.x + player.w) || obstacle.x + 30 >= player.x) {
 80021ac:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <fill_player_trace+0x9c>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <fill_player_trace+0xa0>)
 80021b2:	6819      	ldr	r1, [r3, #0]
 80021b4:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <fill_player_trace+0xa0>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	440b      	add	r3, r1
 80021ba:	429a      	cmp	r2, r3
 80021bc:	dd07      	ble.n	80021ce <fill_player_trace+0x66>
 80021be:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <fill_player_trace+0x9c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f103 021e 	add.w	r2, r3, #30
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <fill_player_trace+0xa0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	db15      	blt.n	80021fa <fill_player_trace+0x92>
    gc9a01a_fill_rect(player.x, player.w, (obstacle.y + obstacle.h),  obstacle.g, BACKGROUND);
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <fill_player_trace+0xa0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	b298      	uxth	r0, r3
 80021d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <fill_player_trace+0xa0>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	b299      	uxth	r1, r3
 80021da:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <fill_player_trace+0x9c>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <fill_player_trace+0x9c>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <fill_player_trace+0x9c>)
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f649 745e 	movw	r4, #40798	@ 0x9f5e
 80021f4:	9400      	str	r4, [sp, #0]
 80021f6:	f7ff fda3 	bl	8001d40 <gc9a01a_fill_rect>
}
 80021fa:	bf00      	nop
 80021fc:	3704      	adds	r7, #4
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd90      	pop	{r4, r7, pc}
 8002202:	bf00      	nop
 8002204:	200002b0 	.word	0x200002b0
 8002208:	2000029c 	.word	0x2000029c

0800220c <display_bush>:

/**
  * @brief  Display bush images on the LCD.
  * @retval None
  */
void display_bush() {
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af02      	add	r7, sp, #8
  gc9a01a_draw_image(0, 60, 210, 30, (uint16_t *)bush);
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <display_bush+0x4c>)
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	231e      	movs	r3, #30
 8002218:	22d2      	movs	r2, #210	@ 0xd2
 800221a:	213c      	movs	r1, #60	@ 0x3c
 800221c:	2000      	movs	r0, #0
 800221e:	f7ff feb9 	bl	8001f94 <gc9a01a_draw_image>
  gc9a01a_draw_image(60,60, 210, 30, (uint16_t *)bush);
 8002222:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <display_bush+0x4c>)
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	231e      	movs	r3, #30
 8002228:	22d2      	movs	r2, #210	@ 0xd2
 800222a:	213c      	movs	r1, #60	@ 0x3c
 800222c:	203c      	movs	r0, #60	@ 0x3c
 800222e:	f7ff feb1 	bl	8001f94 <gc9a01a_draw_image>
  gc9a01a_draw_image(120, 60, 210, 30, (uint16_t *)bush);
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <display_bush+0x4c>)
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	231e      	movs	r3, #30
 8002238:	22d2      	movs	r2, #210	@ 0xd2
 800223a:	213c      	movs	r1, #60	@ 0x3c
 800223c:	2078      	movs	r0, #120	@ 0x78
 800223e:	f7ff fea9 	bl	8001f94 <gc9a01a_draw_image>
  gc9a01a_draw_image(180, 60, 210, 30, (uint16_t *)bush);
 8002242:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <display_bush+0x4c>)
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	231e      	movs	r3, #30
 8002248:	22d2      	movs	r2, #210	@ 0xd2
 800224a:	213c      	movs	r1, #60	@ 0x3c
 800224c:	20b4      	movs	r0, #180	@ 0xb4
 800224e:	f7ff fea1 	bl	8001f94 <gc9a01a_draw_image>
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	0800b410 	.word	0x0800b410

0800225c <flappy_game_set_back_ground>:

/**
  * @brief  Set the background and display bush images for the Flappy Bird game.
  * @retval None
  */
void flappy_game_set_back_ground() {
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	bsp_lcd_set_background();
 8002260:	f7ff ff72 	bl	8002148 <bsp_lcd_set_background>
  display_bush();
 8002264:	f7ff ffd2 	bl	800220c <display_bush>
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <fill_countdown_trace>:

/**
  * @brief  Fill the countdown trace area with the background color.
  * @retval None
  */
void fill_countdown_trace() {
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af02      	add	r7, sp, #8
  gc9a01a_fill_rect(0,240,107,26, BACKGROUND);
 8002272:	f649 735e 	movw	r3, #40798	@ 0x9f5e
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	231a      	movs	r3, #26
 800227a:	226b      	movs	r2, #107	@ 0x6b
 800227c:	21f0      	movs	r1, #240	@ 0xf0
 800227e:	2000      	movs	r0, #0
 8002280:	f7ff fd5e 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(116,16,140,26, BACKGROUND);
 8002284:	f649 735e 	movw	r3, #40798	@ 0x9f5e
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	231a      	movs	r3, #26
 800228c:	228c      	movs	r2, #140	@ 0x8c
 800228e:	2110      	movs	r1, #16
 8002290:	2074      	movs	r0, #116	@ 0x74
 8002292:	f7ff fd55 	bl	8001d40 <gc9a01a_fill_rect>
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <set_gameover_background>:

/**
  * @brief  Fill the game over trace area with the background color.
  * @retval None
  */
void set_gameover_background() {
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af02      	add	r7, sp, #8
  gc9a01a_fill_rect(0, 240, 30, 180, BACKGROUND);
 80022a2:	f649 735e 	movw	r3, #40798	@ 0x9f5e
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	23b4      	movs	r3, #180	@ 0xb4
 80022aa:	221e      	movs	r2, #30
 80022ac:	21f0      	movs	r1, #240	@ 0xf0
 80022ae:	2000      	movs	r0, #0
 80022b0:	f7ff fd46 	bl	8001d40 <gc9a01a_fill_rect>
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <display_game_title>:

/**
  * @brief  Display the game title on the LCD.
  * @retval None
  */
void display_game_title() {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af02      	add	r7, sp, #8
  gc9a01a_draw_image(20, 200, 30, 40, (uint16_t *)Flappy_font1);
 80022c2:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <display_game_title+0x2c>)
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	2328      	movs	r3, #40	@ 0x28
 80022c8:	221e      	movs	r2, #30
 80022ca:	21c8      	movs	r1, #200	@ 0xc8
 80022cc:	2014      	movs	r0, #20
 80022ce:	f7ff fe61 	bl	8001f94 <gc9a01a_draw_image>
  gc9a01a_draw_image(20, 200, 70, 39, (uint16_t *)Flappy_font2);
 80022d2:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <display_game_title+0x30>)
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2327      	movs	r3, #39	@ 0x27
 80022d8:	2246      	movs	r2, #70	@ 0x46
 80022da:	21c8      	movs	r1, #200	@ 0xc8
 80022dc:	2014      	movs	r0, #20
 80022de:	f7ff fe59 	bl	8001f94 <gc9a01a_draw_image>
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	0800c220 	.word	0x0800c220
 80022ec:	080100a0 	.word	0x080100a0

080022f0 <Player_ctor>:
/* USER CODE BEGIN 0 */
GamteState game_state ;
Player player;
Obstacle obstacle;

static void Player_ctor(Player* player, int player_x, int player_w, int player_y, int player_h) {
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
	player->x = player_x;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	601a      	str	r2, [r3, #0]
	player->w = player_w;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	605a      	str	r2, [r3, #4]
	player->y = player_y;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	609a      	str	r2, [r3, #8]
	player->h = player_h;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	60da      	str	r2, [r3, #12]
	player->score = 0;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <Obstacle_ctor>:

static void Obstacle_ctor(Obstacle* obstacle, int obstacle_x, int obstacle_w, int obstacle_y, int obstacle_g,
                            int obstacle_s) {
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
	obstacle->x = obstacle_x;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	601a      	str	r2, [r3, #0]
	obstacle->w = obstacle_w;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	605a      	str	r2, [r3, #4]
	obstacle->y = obstacle_y;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	609a      	str	r2, [r3, #8]
	obstacle->h = 0;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]
	obstacle->g = obstacle_g;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	611a      	str	r2, [r3, #16]
	obstacle->speed  = obstacle_s;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	615a      	str	r2, [r3, #20]
	obstacle->passed = false;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	761a      	strb	r2, [r3, #24]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800236c:	b5b0      	push	{r4, r5, r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	static uint32_t current_time;
	current_time = HAL_GetTick();
 8002372:	f001 faa9 	bl	80038c8 <HAL_GetTick>
 8002376:	4603      	mov	r3, r0
 8002378:	4a40      	ldr	r2, [pc, #256]	@ (800247c <main+0x110>)
 800237a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800237c:	f001 fa4a 	bl	8003814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002380:	f000 f888 	bl	8002494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002384:	f000 f922 	bl	80025cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8002388:	f000 f8e0 	bl	800254c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Player_ctor(&player, 70, 30, 100, 30);
 800238c:	231e      	movs	r3, #30
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2364      	movs	r3, #100	@ 0x64
 8002392:	221e      	movs	r2, #30
 8002394:	2146      	movs	r1, #70	@ 0x46
 8002396:	483a      	ldr	r0, [pc, #232]	@ (8002480 <main+0x114>)
 8002398:	f7ff ffaa 	bl	80022f0 <Player_ctor>
  Obstacle_ctor(&obstacle, 240, 30, 30, 80, 5);
 800239c:	2305      	movs	r3, #5
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	2350      	movs	r3, #80	@ 0x50
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	231e      	movs	r3, #30
 80023a6:	221e      	movs	r2, #30
 80023a8:	21f0      	movs	r1, #240	@ 0xf0
 80023aa:	4836      	ldr	r0, [pc, #216]	@ (8002484 <main+0x118>)
 80023ac:	f7ff ffbc 	bl	8002328 <Obstacle_ctor>
  mpu6050_init();
 80023b0:	f000 fa96 	bl	80028e0 <mpu6050_init>
  bsp_lcd_init();
 80023b4:	f7ff fbf2 	bl	8001b9c <bsp_lcd_init>
  CST816S_init();
 80023b8:	f7fe fd24 	bl	8000e04 <CST816S_init>
  flappy_game_set_back_ground();
 80023bc:	f7ff ff4e 	bl	800225c <flappy_game_set_back_ground>

  double prev_degreey = degreey; // Initialize previous angle variable
 80023c0:	4b31      	ldr	r3, [pc, #196]	@ (8002488 <main+0x11c>)
 80023c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	mpu6050_read();
 80023ca:	f000 fb19 	bl	8002a00 <mpu6050_read>

    if(HAL_GetTick() - current_time >= 2) {
 80023ce:	f001 fa7b 	bl	80038c8 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b29      	ldr	r3, [pc, #164]	@ (800247c <main+0x110>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d9f5      	bls.n	80023ca <main+0x5e>

      current_time = HAL_GetTick();
 80023de:	f001 fa73 	bl	80038c8 <HAL_GetTick>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4a25      	ldr	r2, [pc, #148]	@ (800247c <main+0x110>)
 80023e6:	6013      	str	r3, [r2, #0]

      angle_delta = degreey - prev_degreey;
 80023e8:	4b27      	ldr	r3, [pc, #156]	@ (8002488 <main+0x11c>)
 80023ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023f2:	f7fd ff49 	bl	8000288 <__aeabi_dsub>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4924      	ldr	r1, [pc, #144]	@ (800248c <main+0x120>)
 80023fc:	e9c1 2300 	strd	r2, r3, [r1]
      prev_degreey = degreey;
 8002400:	4b21      	ldr	r3, [pc, #132]	@ (8002488 <main+0x11c>)
 8002402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002406:	e9c7 2302 	strd	r2, r3, [r7, #8]
      double smoothing_factor = 6;
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <main+0x124>)
 8002410:	e9c7 2300 	strd	r2, r3, [r7]

      player.y -= smoothing_factor * angle_delta;
 8002414:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <main+0x114>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe f883 	bl	8000524 <__aeabi_i2d>
 800241e:	4604      	mov	r4, r0
 8002420:	460d      	mov	r5, r1
 8002422:	4b1a      	ldr	r3, [pc, #104]	@ (800248c <main+0x120>)
 8002424:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800242c:	f7fe f8e4 	bl	80005f8 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4620      	mov	r0, r4
 8002436:	4629      	mov	r1, r5
 8002438:	f7fd ff26 	bl	8000288 <__aeabi_dsub>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f7fe fb88 	bl	8000b58 <__aeabi_d2iz>
 8002448:	4603      	mov	r3, r0
 800244a:	4a0d      	ldr	r2, [pc, #52]	@ (8002480 <main+0x114>)
 800244c:	6093      	str	r3, [r2, #8]
      player.y += GRAVITY_PULL;
 800244e:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <main+0x114>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	3302      	adds	r3, #2
 8002454:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <main+0x114>)
 8002456:	6093      	str	r3, [r2, #8]

      if (player.y <= PLAYER_ySTART_POINT) {
 8002458:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <main+0x114>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b1e      	cmp	r3, #30
 800245e:	dc03      	bgt.n	8002468 <main+0xfc>
        player.y = PLAYER_ySTART_POINT;
 8002460:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <main+0x114>)
 8002462:	221e      	movs	r2, #30
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	e006      	b.n	8002476 <main+0x10a>
      } else if (player.y >= PLAYER_yEND_POINT) {
 8002468:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <main+0x114>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2bb3      	cmp	r3, #179	@ 0xb3
 800246e:	dd02      	ble.n	8002476 <main+0x10a>
        player.y = PLAYER_yEND_POINT;
 8002470:	4b03      	ldr	r3, [pc, #12]	@ (8002480 <main+0x114>)
 8002472:	22b4      	movs	r2, #180	@ 0xb4
 8002474:	609a      	str	r2, [r3, #8]
      }
      tick();
 8002476:	f000 f925 	bl	80026c4 <tick>
  	mpu6050_read();
 800247a:	e7a6      	b.n	80023ca <main+0x5e>
 800247c:	200002cc 	.word	0x200002cc
 8002480:	2000029c 	.word	0x2000029c
 8002484:	200002b0 	.word	0x200002b0
 8002488:	20000288 	.word	0x20000288
 800248c:	200002d0 	.word	0x200002d0
 8002490:	40180000 	.word	0x40180000

08002494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b09e      	sub	sp, #120	@ 0x78
 8002498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800249a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800249e:	2228      	movs	r2, #40	@ 0x28
 80024a0:	2100      	movs	r1, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f005 f804 	bl	80074b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024b8:	463b      	mov	r3, r7
 80024ba:	223c      	movs	r2, #60	@ 0x3c
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f004 fff6 	bl	80074b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80024c4:	2303      	movs	r3, #3
 80024c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024cc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80024ce:	2300      	movs	r3, #0
 80024d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024d2:	2301      	movs	r3, #1
 80024d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024d6:	2310      	movs	r3, #16
 80024d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024da:	2302      	movs	r3, #2
 80024dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024e2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024e4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80024e8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80024ee:	4618      	mov	r0, r3
 80024f0:	f002 fb4c 	bl	8004b8c <HAL_RCC_OscConfig>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80024fa:	f000 f9eb 	bl	80028d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024fe:	230f      	movs	r3, #15
 8002500:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002502:	2302      	movs	r3, #2
 8002504:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002506:	2300      	movs	r3, #0
 8002508:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800250a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800250e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002510:	2300      	movs	r3, #0
 8002512:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002514:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002518:	2102      	movs	r1, #2
 800251a:	4618      	mov	r0, r3
 800251c:	f003 fb74 	bl	8005c08 <HAL_RCC_ClockConfig>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002526:	f000 f9d5 	bl	80028d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800252a:	2320      	movs	r3, #32
 800252c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002532:	463b      	mov	r3, r7
 8002534:	4618      	mov	r0, r3
 8002536:	f003 fd37 	bl	8005fa8 <HAL_RCCEx_PeriphCLKConfig>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002540:	f000 f9c8 	bl	80028d4 <Error_Handler>
  }
}
 8002544:	bf00      	nop
 8002546:	3778      	adds	r7, #120	@ 0x78
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002550:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <MX_I2C1_Init+0x74>)
 8002552:	4a1c      	ldr	r2, [pc, #112]	@ (80025c4 <MX_I2C1_Init+0x78>)
 8002554:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002556:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <MX_I2C1_Init+0x74>)
 8002558:	4a1b      	ldr	r2, [pc, #108]	@ (80025c8 <MX_I2C1_Init+0x7c>)
 800255a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800255c:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <MX_I2C1_Init+0x74>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002562:	4b17      	ldr	r3, [pc, #92]	@ (80025c0 <MX_I2C1_Init+0x74>)
 8002564:	2201      	movs	r2, #1
 8002566:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002568:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <MX_I2C1_Init+0x74>)
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800256e:	4b14      	ldr	r3, [pc, #80]	@ (80025c0 <MX_I2C1_Init+0x74>)
 8002570:	2200      	movs	r2, #0
 8002572:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002574:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <MX_I2C1_Init+0x74>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800257a:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <MX_I2C1_Init+0x74>)
 800257c:	2200      	movs	r2, #0
 800257e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002580:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <MX_I2C1_Init+0x74>)
 8002582:	2200      	movs	r2, #0
 8002584:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002586:	480e      	ldr	r0, [pc, #56]	@ (80025c0 <MX_I2C1_Init+0x74>)
 8002588:	f001 fcbc 	bl	8003f04 <HAL_I2C_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002592:	f000 f99f 	bl	80028d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002596:	2100      	movs	r1, #0
 8002598:	4809      	ldr	r0, [pc, #36]	@ (80025c0 <MX_I2C1_Init+0x74>)
 800259a:	f002 fa3f 	bl	8004a1c <HAL_I2CEx_ConfigAnalogFilter>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80025a4:	f000 f996 	bl	80028d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025a8:	2100      	movs	r1, #0
 80025aa:	4805      	ldr	r0, [pc, #20]	@ (80025c0 <MX_I2C1_Init+0x74>)
 80025ac:	f002 fa81 	bl	8004ab2 <HAL_I2CEx_ConfigDigitalFilter>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80025b6:	f000 f98d 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000228 	.word	0x20000228
 80025c4:	40005400 	.word	0x40005400
 80025c8:	2000090e 	.word	0x2000090e

080025cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025e2:	4b36      	ldr	r3, [pc, #216]	@ (80026bc <MX_GPIO_Init+0xf0>)
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	4a35      	ldr	r2, [pc, #212]	@ (80026bc <MX_GPIO_Init+0xf0>)
 80025e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025ec:	6153      	str	r3, [r2, #20]
 80025ee:	4b33      	ldr	r3, [pc, #204]	@ (80026bc <MX_GPIO_Init+0xf0>)
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	4b30      	ldr	r3, [pc, #192]	@ (80026bc <MX_GPIO_Init+0xf0>)
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	4a2f      	ldr	r2, [pc, #188]	@ (80026bc <MX_GPIO_Init+0xf0>)
 8002600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002604:	6153      	str	r3, [r2, #20]
 8002606:	4b2d      	ldr	r3, [pc, #180]	@ (80026bc <MX_GPIO_Init+0xf0>)
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002612:	4b2a      	ldr	r3, [pc, #168]	@ (80026bc <MX_GPIO_Init+0xf0>)
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	4a29      	ldr	r2, [pc, #164]	@ (80026bc <MX_GPIO_Init+0xf0>)
 8002618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800261c:	6153      	str	r3, [r2, #20]
 800261e:	4b27      	ldr	r3, [pc, #156]	@ (80026bc <MX_GPIO_Init+0xf0>)
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_TE_Pin|LCD_CSX_Pin|BL_A_Pin|BD1_Pin
 800262a:	2200      	movs	r2, #0
 800262c:	f248 611a 	movw	r1, #34330	@ 0x861a
 8002630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002634:	f001 fc36 	bl	8003ea4 <HAL_GPIO_WritePin>
                          |BD0_Pin|WRD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RDX_Pin|DCX_Pin|BD7_Pin|BD6_Pin
 8002638:	2200      	movs	r2, #0
 800263a:	f64f 5113 	movw	r1, #64787	@ 0xfd13
 800263e:	4820      	ldr	r0, [pc, #128]	@ (80026c0 <MX_GPIO_Init+0xf4>)
 8002640:	f001 fc30 	bl	8003ea4 <HAL_GPIO_WritePin>
                          |BD5_Pin|BD4_Pin|BD3_Pin|BD2_Pin
                          |TP_RST_Pin|LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_TE_Pin LCD_CSX_Pin BL_A_Pin BD1_Pin
                           BD0_Pin WRD_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin|LCD_CSX_Pin|BL_A_Pin|BD1_Pin
 8002644:	f248 631a 	movw	r3, #34330	@ 0x861a
 8002648:	60fb      	str	r3, [r7, #12]
                          |BD0_Pin|WRD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264a:	2301      	movs	r3, #1
 800264c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002652:	2303      	movs	r3, #3
 8002654:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	4619      	mov	r1, r3
 800265c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002660:	f001 faa6 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RDX_Pin DCX_Pin BD7_Pin BD6_Pin
                           BD5_Pin BD4_Pin BD3_Pin BD2_Pin
                           TP_RST_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RDX_Pin|DCX_Pin|BD7_Pin|BD6_Pin
 8002664:	f64f 5313 	movw	r3, #64787	@ 0xfd13
 8002668:	60fb      	str	r3, [r7, #12]
                          |BD5_Pin|BD4_Pin|BD3_Pin|BD2_Pin
                          |TP_RST_Pin|LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800266a:	2301      	movs	r3, #1
 800266c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002672:	2303      	movs	r3, #3
 8002674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	4619      	mov	r1, r3
 800267c:	4810      	ldr	r0, [pc, #64]	@ (80026c0 <MX_GPIO_Init+0xf4>)
 800267e:	f001 fa97 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IN_Pin */
  GPIO_InitStruct.Pin = TP_IN_Pin;
 8002682:	2320      	movs	r3, #32
 8002684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002686:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800268a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_IN_GPIO_Port, &GPIO_InitStruct);
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	4619      	mov	r1, r3
 8002696:	480a      	ldr	r0, [pc, #40]	@ (80026c0 <MX_GPIO_Init+0xf4>)
 8002698:	f001 fa8a 	bl	8003bb0 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB8_FMP);
 800269c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80026a0:	f002 fa54 	bl	8004b4c <HAL_I2CEx_EnableFastModePlus>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80026a4:	2200      	movs	r2, #0
 80026a6:	2100      	movs	r1, #0
 80026a8:	2017      	movs	r0, #23
 80026aa:	f001 fa3c 	bl	8003b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80026ae:	2017      	movs	r0, #23
 80026b0:	f001 fa55 	bl	8003b5e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026b4:	bf00      	nop
 80026b6:	3720      	adds	r7, #32
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	48000400 	.word	0x48000400

080026c4 <tick>:
/**
  * @brief Updates the game state based on events and conditions.
  * @param None
  * @retval None
  */
void tick() {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af02      	add	r7, sp, #8
	switch (game_state) {
 80026ca:	4b4c      	ldr	r3, [pc, #304]	@ (80027fc <tick+0x138>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	f200 8090 	bhi.w	80027f4 <tick+0x130>
 80026d4:	a201      	add	r2, pc, #4	@ (adr r2, 80026dc <tick+0x18>)
 80026d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026da:	bf00      	nop
 80026dc:	080026ed 	.word	0x080026ed
 80026e0:	0800270b 	.word	0x0800270b
 80026e4:	08002729 	.word	0x08002729
 80026e8:	080027a3 	.word	0x080027a3
		case GAME_INIT: {
		  uint8_t start_btn =  start_btn_state();
 80026ec:	f001 f822 	bl	8003734 <start_btn_state>
 80026f0:	4603      	mov	r3, r0
 80026f2:	71bb      	strb	r3, [r7, #6]
			game_init_mssg();
 80026f4:	f000 fe9c 	bl	8003430 <game_init_mssg>

			if (start_btn == PRESSED) {
 80026f8:	79bb      	ldrb	r3, [r7, #6]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d175      	bne.n	80027ea <tick+0x126>
				flappy_game_set_back_ground();
 80026fe:	f7ff fdad 	bl	800225c <flappy_game_set_back_ground>
				game_state = GAME_PRESTART;
 8002702:	4b3e      	ldr	r3, [pc, #248]	@ (80027fc <tick+0x138>)
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8002708:	e06f      	b.n	80027ea <tick+0x126>

		case GAME_PRESTART: {
			move_player(player.y);
 800270a:	4b3d      	ldr	r3, [pc, #244]	@ (8002800 <tick+0x13c>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fcaa 	bl	8003068 <move_player>
			render_gamestart_countdown();
 8002714:	f000 ff22 	bl	800355c <render_gamestart_countdown>
			if(countdown_complete == true) {
 8002718:	4b3a      	ldr	r3, [pc, #232]	@ (8002804 <tick+0x140>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d166      	bne.n	80027ee <tick+0x12a>
				game_state = GAME_START;
 8002720:	4b36      	ldr	r3, [pc, #216]	@ (80027fc <tick+0x138>)
 8002722:	2202      	movs	r2, #2
 8002724:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8002726:	e062      	b.n	80027ee <tick+0x12a>

		case GAME_START: {
			is_Collide(&obstacle, &player);
 8002728:	4935      	ldr	r1, [pc, #212]	@ (8002800 <tick+0x13c>)
 800272a:	4837      	ldr	r0, [pc, #220]	@ (8002808 <tick+0x144>)
 800272c:	f000 f870 	bl	8002810 <is_Collide>
			if(collision_detected == true) {
 8002730:	4b36      	ldr	r3, [pc, #216]	@ (800280c <tick+0x148>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d105      	bne.n	8002744 <tick+0x80>
			  set_gameover_background();
 8002738:	f7ff fdb0 	bl	800229c <set_gameover_background>
				game_state = GAME_OVER;
 800273c:	4b2f      	ldr	r3, [pc, #188]	@ (80027fc <tick+0x138>)
 800273e:	2203      	movs	r2, #3
 8002740:	701a      	strb	r2, [r3, #0]
					obstacle.x = 240;
				}
				player_show_score(&player);
			}
		}
		break;
 8002742:	e057      	b.n	80027f4 <tick+0x130>
			  obstacle.speed = get_obstacle_speed(player.score);
 8002744:	4b2e      	ldr	r3, [pc, #184]	@ (8002800 <tick+0x13c>)
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fc6d 	bl	8003028 <get_obstacle_speed>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	4b2d      	ldr	r3, [pc, #180]	@ (8002808 <tick+0x144>)
 8002754:	615a      	str	r2, [r3, #20]
			  obstacle.x -= obstacle.speed;
 8002756:	4b2c      	ldr	r3, [pc, #176]	@ (8002808 <tick+0x144>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4b2b      	ldr	r3, [pc, #172]	@ (8002808 <tick+0x144>)
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	4a29      	ldr	r2, [pc, #164]	@ (8002808 <tick+0x144>)
 8002762:	6013      	str	r3, [r2, #0]
			  move_player( player.y);
 8002764:	4b26      	ldr	r3, [pc, #152]	@ (8002800 <tick+0x13c>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fc7d 	bl	8003068 <move_player>
				if(obstacle.x >= 0) {
 800276e:	4b26      	ldr	r3, [pc, #152]	@ (8002808 <tick+0x144>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	db05      	blt.n	8002782 <tick+0xbe>
					move_obstacle(obstacle.x);
 8002776:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <tick+0x144>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fc1c 	bl	8002fb8 <move_obstacle>
 8002780:	e00b      	b.n	800279a <tick+0xd6>
				  gc9a01a_fill_rect(0, 40, 0, 240,BACKGROUND);
 8002782:	f649 735e 	movw	r3, #40798	@ 0x9f5e
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	23f0      	movs	r3, #240	@ 0xf0
 800278a:	2200      	movs	r2, #0
 800278c:	2128      	movs	r1, #40	@ 0x28
 800278e:	2000      	movs	r0, #0
 8002790:	f7ff fad6 	bl	8001d40 <gc9a01a_fill_rect>
					obstacle.x = 240;
 8002794:	4b1c      	ldr	r3, [pc, #112]	@ (8002808 <tick+0x144>)
 8002796:	22f0      	movs	r2, #240	@ 0xf0
 8002798:	601a      	str	r2, [r3, #0]
				player_show_score(&player);
 800279a:	4819      	ldr	r0, [pc, #100]	@ (8002800 <tick+0x13c>)
 800279c:	f000 ff46 	bl	800362c <player_show_score>
		break;
 80027a0:	e028      	b.n	80027f4 <tick+0x130>

		case GAME_OVER: {
			collision_detected = false;
 80027a2:	4b1a      	ldr	r3, [pc, #104]	@ (800280c <tick+0x148>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
			game_over_mssg();
 80027a8:	f000 fe84 	bl	80034b4 <game_over_mssg>
			uint8_t restart_btn =  restart_btn_state();
 80027ac:	f000 ffe5 	bl	800377a <restart_btn_state>
 80027b0:	4603      	mov	r3, r0
 80027b2:	71fb      	strb	r3, [r7, #7]
			if (restart_btn == PRESSED) {
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d11b      	bne.n	80027f2 <tick+0x12e>
			  Player_ctor(&player, 70, 30, 100, 30);
 80027ba:	231e      	movs	r3, #30
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	2364      	movs	r3, #100	@ 0x64
 80027c0:	221e      	movs	r2, #30
 80027c2:	2146      	movs	r1, #70	@ 0x46
 80027c4:	480e      	ldr	r0, [pc, #56]	@ (8002800 <tick+0x13c>)
 80027c6:	f7ff fd93 	bl	80022f0 <Player_ctor>
				Obstacle_ctor(&obstacle, 240, 30, 30, 80, 5);
 80027ca:	2305      	movs	r3, #5
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	2350      	movs	r3, #80	@ 0x50
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	231e      	movs	r3, #30
 80027d4:	221e      	movs	r2, #30
 80027d6:	21f0      	movs	r1, #240	@ 0xf0
 80027d8:	480b      	ldr	r0, [pc, #44]	@ (8002808 <tick+0x144>)
 80027da:	f7ff fda5 	bl	8002328 <Obstacle_ctor>
				flappy_game_set_back_ground();
 80027de:	f7ff fd3d 	bl	800225c <flappy_game_set_back_ground>
				game_state = GAME_PRESTART;
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <tick+0x138>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80027e8:	e003      	b.n	80027f2 <tick+0x12e>
		break;
 80027ea:	bf00      	nop
 80027ec:	e002      	b.n	80027f4 <tick+0x130>
		break;
 80027ee:	bf00      	nop
 80027f0:	e000      	b.n	80027f4 <tick+0x130>
		break;
 80027f2:	bf00      	nop
	}
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000298 	.word	0x20000298
 8002800:	2000029c 	.word	0x2000029c
 8002804:	20000294 	.word	0x20000294
 8002808:	200002b0 	.word	0x200002b0
 800280c:	20000290 	.word	0x20000290

08002810 <is_Collide>:
  * @brief Checks for collision between an obstacle and the player.
  * @param obstacle: Pointer to the Obstacle struct containing obstacle information.
  * @param player: Pointer to the Player struct containing player information.
  * @retval None
  */
void is_Collide(Obstacle *obstacle, Player *player) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	@ 0x28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
	int player_left = player->x;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
	int player_right = player->x + player->w -5;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4413      	add	r3, r2
 800282a:	3b05      	subs	r3, #5
 800282c:	623b      	str	r3, [r7, #32]
	int player_top = player->y;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	61fb      	str	r3, [r7, #28]
	int player_bottom = player->y + player->h-5;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4413      	add	r3, r2
 800283e:	3b05      	subs	r3, #5
 8002840:	61bb      	str	r3, [r7, #24]

	int obstacle_left = obstacle->x;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	617b      	str	r3, [r7, #20]
	int obstacle_right = obstacle->x + obstacle->w;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4413      	add	r3, r2
 8002852:	613b      	str	r3, [r7, #16]

	obstacle->h = generate_obstacle_height(obstacle->x);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fa21 	bl	8002ca0 <generate_obstacle_height>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	60da      	str	r2, [r3, #12]
	int obstacle_bottom = OBSTACLE_ySTART_POINT + obstacle->h -5;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	3319      	adds	r3, #25
 800286c:	60fb      	str	r3, [r7, #12]

	if (player_right  >= obstacle_left && player_left <= obstacle_right ){
 800286e:	6a3a      	ldr	r2, [r7, #32]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	429a      	cmp	r2, r3
 8002874:	db23      	blt.n	80028be <is_Collide+0xae>
 8002876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	429a      	cmp	r2, r3
 800287c:	dc1f      	bgt.n	80028be <is_Collide+0xae>
		if( (player_top  < obstacle_bottom) || (player_bottom > (obstacle_bottom + obstacle->g +10))) {
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	429a      	cmp	r2, r3
 8002884:	db07      	blt.n	8002896 <is_Collide+0x86>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4413      	add	r3, r2
 800288e:	330a      	adds	r3, #10
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	429a      	cmp	r2, r3
 8002894:	dd03      	ble.n	800289e <is_Collide+0x8e>
			collision_detected = true;
 8002896:	4b0e      	ldr	r3, [pc, #56]	@ (80028d0 <is_Collide+0xc0>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
		if( (player_top  < obstacle_bottom) || (player_bottom > (obstacle_bottom + obstacle->g +10))) {
 800289c:	e013      	b.n	80028c6 <is_Collide+0xb6>
		} else if (!obstacle->passed) {  // Only update score if the obstacle hasn't been passed
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	7e1b      	ldrb	r3, [r3, #24]
 80028a2:	f083 0301 	eor.w	r3, r3, #1
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00c      	beq.n	80028c6 <is_Collide+0xb6>
      player->score += 1;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	611a      	str	r2, [r3, #16]
      obstacle->passed = true;  // Mark the obstacle as passed
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	761a      	strb	r2, [r3, #24]
		if( (player_top  < obstacle_bottom) || (player_bottom > (obstacle_bottom + obstacle->g +10))) {
 80028bc:	e003      	b.n	80028c6 <is_Collide+0xb6>
    }
	} else {
    obstacle->passed = false;   // Reset the flag when the player is not near the obstacle
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	761a      	strb	r2, [r3, #24]
  }
}
 80028c4:	e000      	b.n	80028c8 <is_Collide+0xb8>
		if( (player_top  < obstacle_bottom) || (player_bottom > (obstacle_bottom + obstacle->g +10))) {
 80028c6:	bf00      	nop
}
 80028c8:	bf00      	nop
 80028ca:	3728      	adds	r7, #40	@ 0x28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000290 	.word	0x20000290

080028d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028d8:	b672      	cpsid	i
}
 80028da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <Error_Handler+0x8>

080028e0 <mpu6050_init>:
/**
  * @brief Initializes the MPU6050 sensor by configuring power management, gyroscope, and accelerometer.
  * @param None
  * @retval None
  */
void mpu6050_init() {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
	init_delay(100);
 80028e4:	2064      	movs	r0, #100	@ 0x64
 80028e6:	f000 f808 	bl	80028fa <init_delay>
	power_management_config();
 80028ea:	f000 f811 	bl	8002910 <power_management_config>
	gyro_config();
 80028ee:	f000 f837 	bl	8002960 <gyro_config>
	accelerometer_config();
 80028f2:	f000 f85d 	bl	80029b0 <accelerometer_config>
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}

080028fa <init_delay>:
/**
 * @brief Applies a delay for initialization purposes.
 * @param delay The delay time in milliseconds.
 * @retval None
 */
static void init_delay(uint32_t delay) {
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 ffec 	bl	80038e0 <HAL_Delay>
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <power_management_config>:
  * @brief Configures the power management settings of the MPU6050 sensor to exit sleep mode.
  * @param None
  * @retval None
  */
static void power_management_config()
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af04      	add	r7, sp, #16
  /* Set the value to be written to the power management register */
  temp_data = 0x00;
 8002916:	4b0e      	ldr	r3, [pc, #56]	@ (8002950 <power_management_config+0x40>)
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]

  /* Write the value to the power management register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_USR_CTRL, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 800291c:	f04f 33ff 	mov.w	r3, #4294967295
 8002920:	9302      	str	r3, [sp, #8]
 8002922:	2301      	movs	r3, #1
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <power_management_config+0x40>)
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2301      	movs	r3, #1
 800292c:	226b      	movs	r2, #107	@ 0x6b
 800292e:	21d0      	movs	r1, #208	@ 0xd0
 8002930:	4808      	ldr	r0, [pc, #32]	@ (8002954 <power_management_config+0x44>)
 8002932:	f001 fb83 	bl	800403c <HAL_I2C_Mem_Write>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d103      	bne.n	8002944 <power_management_config+0x34>
    /*print in SWV terminal*/
    printf("Exiting from sleep mode...\n");
 800293c:	4806      	ldr	r0, [pc, #24]	@ (8002958 <power_management_config+0x48>)
 800293e:	f004 fcb7 	bl	80072b0 <puts>
  } else {
    printf("Failed to exit from sleep mode...\n");
  }
}
 8002942:	e002      	b.n	800294a <power_management_config+0x3a>
    printf("Failed to exit from sleep mode...\n");
 8002944:	4805      	ldr	r0, [pc, #20]	@ (800295c <power_management_config+0x4c>)
 8002946:	f004 fcb3 	bl	80072b0 <puts>
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	200002d8 	.word	0x200002d8
 8002954:	20000228 	.word	0x20000228
 8002958:	0800b29c 	.word	0x0800b29c
 800295c:	0800b2b8 	.word	0x0800b2b8

08002960 <gyro_config>:
  * @brief Configures the gyroscope settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
static void gyro_config()
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af04      	add	r7, sp, #16
  /* Set the value to be written to the gyroscope configuration register */
  temp_data = FS_GYRO_500;
 8002966:	4b0e      	ldr	r3, [pc, #56]	@ (80029a0 <gyro_config+0x40>)
 8002968:	2208      	movs	r2, #8
 800296a:	701a      	strb	r2, [r3, #0]

  /* Write the value to the gyroscope configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_GYRO, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 800296c:	f04f 33ff 	mov.w	r3, #4294967295
 8002970:	9302      	str	r3, [sp, #8]
 8002972:	2301      	movs	r3, #1
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	4b0a      	ldr	r3, [pc, #40]	@ (80029a0 <gyro_config+0x40>)
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2301      	movs	r3, #1
 800297c:	221b      	movs	r2, #27
 800297e:	21d0      	movs	r1, #208	@ 0xd0
 8002980:	4808      	ldr	r0, [pc, #32]	@ (80029a4 <gyro_config+0x44>)
 8002982:	f001 fb5b 	bl	800403c <HAL_I2C_Mem_Write>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d103      	bne.n	8002994 <gyro_config+0x34>
    printf("Configuring gyroscope...\n");
 800298c:	4806      	ldr	r0, [pc, #24]	@ (80029a8 <gyro_config+0x48>)
 800298e:	f004 fc8f 	bl	80072b0 <puts>
  } else {
    printf("Failed to configure gyroscope...\n");
  }
}
 8002992:	e002      	b.n	800299a <gyro_config+0x3a>
    printf("Failed to configure gyroscope...\n");
 8002994:	4805      	ldr	r0, [pc, #20]	@ (80029ac <gyro_config+0x4c>)
 8002996:	f004 fc8b 	bl	80072b0 <puts>
}
 800299a:	bf00      	nop
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200002d8 	.word	0x200002d8
 80029a4:	20000228 	.word	0x20000228
 80029a8:	0800b2dc 	.word	0x0800b2dc
 80029ac:	0800b2f8 	.word	0x0800b2f8

080029b0 <accelerometer_config>:
  * @brief Configures the accelerometer settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
static void accelerometer_config()
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af04      	add	r7, sp, #16
  /* Set the value to be written to the accelerometer configuration register */
  temp_data = FS_ACC_4G;
 80029b6:	4b0e      	ldr	r3, [pc, #56]	@ (80029f0 <accelerometer_config+0x40>)
 80029b8:	2208      	movs	r2, #8
 80029ba:	701a      	strb	r2, [r3, #0]

  /* Write the value to the accelerometer configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_ACC, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295
 80029c0:	9302      	str	r3, [sp, #8]
 80029c2:	2301      	movs	r3, #1
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <accelerometer_config+0x40>)
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	2301      	movs	r3, #1
 80029cc:	221c      	movs	r2, #28
 80029ce:	21d0      	movs	r1, #208	@ 0xd0
 80029d0:	4808      	ldr	r0, [pc, #32]	@ (80029f4 <accelerometer_config+0x44>)
 80029d2:	f001 fb33 	bl	800403c <HAL_I2C_Mem_Write>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d103      	bne.n	80029e4 <accelerometer_config+0x34>
    printf("Configuring accelerometer...\n");
 80029dc:	4806      	ldr	r0, [pc, #24]	@ (80029f8 <accelerometer_config+0x48>)
 80029de:	f004 fc67 	bl	80072b0 <puts>
  } else {
    printf("Failed to configure accelerometer...\n");
  }
}
 80029e2:	e002      	b.n	80029ea <accelerometer_config+0x3a>
    printf("Failed to configure accelerometer...\n");
 80029e4:	4805      	ldr	r0, [pc, #20]	@ (80029fc <accelerometer_config+0x4c>)
 80029e6:	f004 fc63 	bl	80072b0 <puts>
}
 80029ea:	bf00      	nop
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	200002d8 	.word	0x200002d8
 80029f4:	20000228 	.word	0x20000228
 80029f8:	0800b31c 	.word	0x0800b31c
 80029fc:	0800b33c 	.word	0x0800b33c

08002a00 <mpu6050_read>:
  * @brief Reads data from the MPU6050 sensor, including accelerometer and gyroscope values,
  *        and calculates roll and pitch angles using the accelerometer data.
  * @param None
  * @retval None
  */
void mpu6050_read() {
 8002a00:	b5b0      	push	{r4, r5, r7, lr}
 8002a02:	b0a2      	sub	sp, #136	@ 0x88
 8002a04:	af0a      	add	r7, sp, #40	@ 0x28
  int16_t x_acc, y_acc, z_acc;              // Accelerometer data for x, y, and z axes
  int16_t x_gyro, y_gyro, z_gyro;           // Gyroscope data for x, y, and z axes
  double accx,accy,accz,gyrox,gyroy,gyroz;
  double radianx, radiany;
  // Read all sensor data from the MPU6050
  HAL_I2C_Mem_Read(&hi2c1, (MPU6050_ADDR << 1), REG_DATA, 1, data, 14, HAL_MAX_DELAY);
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0a:	9302      	str	r3, [sp, #8]
 8002a0c:	230e      	movs	r3, #14
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	463b      	mov	r3, r7
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	2301      	movs	r3, #1
 8002a16:	223b      	movs	r2, #59	@ 0x3b
 8002a18:	21d0      	movs	r1, #208	@ 0xd0
 8002a1a:	489b      	ldr	r0, [pc, #620]	@ (8002c88 <mpu6050_read+0x288>)
 8002a1c:	f001 fc22 	bl	8004264 <HAL_I2C_Mem_Read>
  /* Extract accelerometer data (16-bit 2's complement format, high byte first) */
  x_acc = (int16_t)((data[0] << 8) | data[1]);
 8002a20:	783b      	ldrb	r3, [r7, #0]
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	b21a      	sxth	r2, r3
 8002a26:	787b      	ldrb	r3, [r7, #1]
 8002a28:	b21b      	sxth	r3, r3
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  y_acc = (int16_t)((data[2] << 8) | data[3]);
 8002a30:	78bb      	ldrb	r3, [r7, #2]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	b21a      	sxth	r2, r3
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	b21b      	sxth	r3, r3
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  z_acc = (int16_t)((data[4] << 8) | data[5]);
 8002a40:	793b      	ldrb	r3, [r7, #4]
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	b21a      	sxth	r2, r3
 8002a46:	797b      	ldrb	r3, [r7, #5]
 8002a48:	b21b      	sxth	r3, r3
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

  /* Extract gyroscope data (16-bit 2's complement format, high byte first) */
  x_gyro = (int16_t)((data[8] << 8) | data[9]);
 8002a50:	7a3b      	ldrb	r3, [r7, #8]
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	b21a      	sxth	r2, r3
 8002a56:	7a7b      	ldrb	r3, [r7, #9]
 8002a58:	b21b      	sxth	r3, r3
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  y_gyro = (int16_t)((data[10] << 8) | data[11]);
 8002a60:	7abb      	ldrb	r3, [r7, #10]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	b21a      	sxth	r2, r3
 8002a66:	7afb      	ldrb	r3, [r7, #11]
 8002a68:	b21b      	sxth	r3, r3
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  z_gyro = (int16_t)((data[12] << 8) | data[13]);
 8002a70:	7b3b      	ldrb	r3, [r7, #12]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	b21a      	sxth	r2, r3
 8002a76:	7b7b      	ldrb	r3, [r7, #13]
 8002a78:	b21b      	sxth	r3, r3
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

  /*Convert accelerometer raw values in to 'g'(acceleration due to gravity) values */
  accx = (double)x_acc / ACC_FS_SENSITIVITY_3;
 8002a80:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fd4d 	bl	8000524 <__aeabi_i2d>
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c8c <mpu6050_read+0x28c>)
 8002a90:	f7fd fedc 	bl	800084c <__aeabi_ddiv>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  accy = (double)y_acc / ACC_FS_SENSITIVITY_3;
 8002a9c:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fd3f 	bl	8000524 <__aeabi_i2d>
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	4b78      	ldr	r3, [pc, #480]	@ (8002c8c <mpu6050_read+0x28c>)
 8002aac:	f7fd fece 	bl	800084c <__aeabi_ddiv>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  accz = (double)z_acc / ACC_FS_SENSITIVITY_3;
 8002ab8:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fd fd31 	bl	8000524 <__aeabi_i2d>
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	4b71      	ldr	r3, [pc, #452]	@ (8002c8c <mpu6050_read+0x28c>)
 8002ac8:	f7fd fec0 	bl	800084c <__aeabi_ddiv>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  /* Convert gyroscope raw values to degrees per second ('°/s') */
  gyrox = (double)x_gyro / GYR_FS_SENSITIVITY_3;
 8002ad4:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fd23 	bl	8000524 <__aeabi_i2d>
 8002ade:	a366      	add	r3, pc, #408	@ (adr r3, 8002c78 <mpu6050_read+0x278>)
 8002ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae4:	f7fd feb2 	bl	800084c <__aeabi_ddiv>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  gyroy = (double)y_gyro / GYR_FS_SENSITIVITY_3;
 8002af0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fd fd15 	bl	8000524 <__aeabi_i2d>
 8002afa:	a35f      	add	r3, pc, #380	@ (adr r3, 8002c78 <mpu6050_read+0x278>)
 8002afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b00:	f7fd fea4 	bl	800084c <__aeabi_ddiv>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  gyroz = (double)z_gyro / GYR_FS_SENSITIVITY_3;
 8002b0c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fd fd07 	bl	8000524 <__aeabi_i2d>
 8002b16:	a358      	add	r3, pc, #352	@ (adr r3, 8002c78 <mpu6050_read+0x278>)
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	f7fd fe96 	bl	800084c <__aeabi_ddiv>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	e9c7 2308 	strd	r2, r3, [r7, #32]

  /* Calculate roll and pitch angles using accelerometer data */
  radianx = asin(accx / sqrt(accx * accx + accz * accz)); // Fix the arguments passed to asin
 8002b28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b2c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002b30:	f7fd fd62 	bl	80005f8 <__aeabi_dmul>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4614      	mov	r4, r2
 8002b3a:	461d      	mov	r5, r3
 8002b3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b40:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002b44:	f7fd fd58 	bl	80005f8 <__aeabi_dmul>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	4629      	mov	r1, r5
 8002b50:	f7fd fb9c 	bl	800028c <__adddf3>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	ec43 2b17 	vmov	d7, r2, r3
 8002b5c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b60:	eef0 0a67 	vmov.f32	s1, s15
 8002b64:	f008 f81c 	bl	800aba0 <sqrt>
 8002b68:	ec53 2b10 	vmov	r2, r3, d0
 8002b6c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002b70:	f7fd fe6c 	bl	800084c <__aeabi_ddiv>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	ec43 2b17 	vmov	d7, r2, r3
 8002b7c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b80:	eef0 0a67 	vmov.f32	s1, s15
 8002b84:	f007 ffd8 	bl	800ab38 <asin>
 8002b88:	ed87 0b06 	vstr	d0, [r7, #24]
  radiany = asin(accy / sqrt(accy * accy + accz * accz)); // Fix the arguments passed to asin
 8002b8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b90:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002b94:	f7fd fd30 	bl	80005f8 <__aeabi_dmul>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4614      	mov	r4, r2
 8002b9e:	461d      	mov	r5, r3
 8002ba0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ba4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002ba8:	f7fd fd26 	bl	80005f8 <__aeabi_dmul>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	f7fd fb6a 	bl	800028c <__adddf3>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	ec43 2b17 	vmov	d7, r2, r3
 8002bc0:	eeb0 0a47 	vmov.f32	s0, s14
 8002bc4:	eef0 0a67 	vmov.f32	s1, s15
 8002bc8:	f007 ffea 	bl	800aba0 <sqrt>
 8002bcc:	ec53 2b10 	vmov	r2, r3, d0
 8002bd0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002bd4:	f7fd fe3a 	bl	800084c <__aeabi_ddiv>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	ec43 2b17 	vmov	d7, r2, r3
 8002be0:	eeb0 0a47 	vmov.f32	s0, s14
 8002be4:	eef0 0a67 	vmov.f32	s1, s15
 8002be8:	f007 ffa6 	bl	800ab38 <asin>
 8002bec:	ed87 0b04 	vstr	d0, [r7, #16]

  /* Convert roll and pitch angles from radians to degrees */
  degreex = radianx * (180.0 / M_PI); // Roll
 8002bf0:	a323      	add	r3, pc, #140	@ (adr r3, 8002c80 <mpu6050_read+0x280>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bfa:	f7fd fcfd 	bl	80005f8 <__aeabi_dmul>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4923      	ldr	r1, [pc, #140]	@ (8002c90 <mpu6050_read+0x290>)
 8002c04:	e9c1 2300 	strd	r2, r3, [r1]
  degreey = radiany * (180.0 / M_PI); // Pitch
 8002c08:	a31d      	add	r3, pc, #116	@ (adr r3, 8002c80 <mpu6050_read+0x280>)
 8002c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c12:	f7fd fcf1 	bl	80005f8 <__aeabi_dmul>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	491e      	ldr	r1, [pc, #120]	@ (8002c94 <mpu6050_read+0x294>)
 8002c1c:	e9c1 2300 	strd	r2, r3, [r1]

  /* Print out the accelerometer and gyroscope values along with roll and pitch angles in SWV terminal */
  printf("Acc(g)=> X:%.2f Y:%.2f Z:%.2f   Gyro(dps)=> X:%.2f Y:%.2f Z:%.2f\n", accx, accy, accz, gyrox, gyroy, gyroz);
 8002c20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c24:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002c28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002c30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002c34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c44:	e9cd 2300 	strd	r2, r3, [sp]
 8002c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c4c:	4812      	ldr	r0, [pc, #72]	@ (8002c98 <mpu6050_read+0x298>)
 8002c4e:	f004 fac7 	bl	80071e0 <iprintf>
  printf("Roll: %.2f degrees, Pitch: %.2f degrees\n", degreex, degreey);
 8002c52:	4b0f      	ldr	r3, [pc, #60]	@ (8002c90 <mpu6050_read+0x290>)
 8002c54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c58:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <mpu6050_read+0x294>)
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	e9cd 2300 	strd	r2, r3, [sp]
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	480d      	ldr	r0, [pc, #52]	@ (8002c9c <mpu6050_read+0x29c>)
 8002c68:	f004 faba 	bl	80071e0 <iprintf>
}
 8002c6c:	bf00      	nop
 8002c6e:	3760      	adds	r7, #96	@ 0x60
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bdb0      	pop	{r4, r5, r7, pc}
 8002c74:	f3af 8000 	nop.w
 8002c78:	66666666 	.word	0x66666666
 8002c7c:	40306666 	.word	0x40306666
 8002c80:	1a63c1f8 	.word	0x1a63c1f8
 8002c84:	404ca5dc 	.word	0x404ca5dc
 8002c88:	20000228 	.word	0x20000228
 8002c8c:	40a00000 	.word	0x40a00000
 8002c90:	20000280 	.word	0x20000280
 8002c94:	20000288 	.word	0x20000288
 8002c98:	0800b364 	.word	0x0800b364
 8002c9c:	0800b3a8 	.word	0x0800b3a8

08002ca0 <generate_obstacle_height>:
/**
  * @brief  Generate the height of the obstacle.
  * @param  x_start: Starting position of the obstacle.
  * @retval The height of the obstacle.
  */
uint8_t generate_obstacle_height(int x_start) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	static int top_obstacle_height = -1; // Initialize with -1 to indicate it's not set yet
	// Generate random top_obstacle_height if it's not set yet or x_start is 210
	if (top_obstacle_height == -1 || x_start == 240) {
 8002ca8:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <generate_obstacle_height+0x50>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d002      	beq.n	8002cb8 <generate_obstacle_height+0x18>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2bf0      	cmp	r3, #240	@ 0xf0
 8002cb6:	d113      	bne.n	8002ce0 <generate_obstacle_height+0x40>
		top_obstacle_height = rand() % (90 - 20 + 1) + 20;
 8002cb8:	f003 fb26 	bl	8006308 <rand>
 8002cbc:	4601      	mov	r1, r0
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf4 <generate_obstacle_height+0x54>)
 8002cc0:	fb83 2301 	smull	r2, r3, r3, r1
 8002cc4:	440b      	add	r3, r1
 8002cc6:	119a      	asrs	r2, r3, #6
 8002cc8:	17cb      	asrs	r3, r1, #31
 8002cca:	1ad2      	subs	r2, r2, r3
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	1aca      	subs	r2, r1, r3
 8002cd8:	f102 0314 	add.w	r3, r2, #20
 8002cdc:	4a04      	ldr	r2, [pc, #16]	@ (8002cf0 <generate_obstacle_height+0x50>)
 8002cde:	6013      	str	r3, [r2, #0]
	}
	return top_obstacle_height;
 8002ce0:	4b03      	ldr	r3, [pc, #12]	@ (8002cf0 <generate_obstacle_height+0x50>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	b2db      	uxtb	r3, r3
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000008 	.word	0x20000008
 8002cf4:	e6c2b449 	.word	0xe6c2b449

08002cf8 <display_obstacle>:
/**
  * @brief  Display the obstacle on the LCD.
  * @param  x_start: Starting position of the obstacle.
  * @retval None
  */
void display_obstacle(int x_start) {
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	6078      	str	r0, [r7, #4]
  score_card_background();
 8002d00:	f000 f967 	bl	8002fd2 <score_card_background>

  obstacle.h = generate_obstacle_height(x_start);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ffcb 	bl	8002ca0 <generate_obstacle_height>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b9e      	ldr	r3, [pc, #632]	@ (8002f88 <display_obstacle+0x290>)
 8002d10:	60da      	str	r2, [r3, #12]
  int bottom_obstacle_ystart =  obstacle.h + obstacle.y + obstacle.g;
 8002d12:	4b9d      	ldr	r3, [pc, #628]	@ (8002f88 <display_obstacle+0x290>)
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	4b9c      	ldr	r3, [pc, #624]	@ (8002f88 <display_obstacle+0x290>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	441a      	add	r2, r3
 8002d1c:	4b9a      	ldr	r3, [pc, #616]	@ (8002f88 <display_obstacle+0x290>)
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	4413      	add	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  int bottom_obstacle_height = OBSTACLE_yEND_POINT - bottom_obstacle_ystart;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f1c3 03d2 	rsb	r3, r3, #210	@ 0xd2
 8002d2a:	60bb      	str	r3, [r7, #8]

  gc9a01a_fill_rect(x_start,3, obstacle.y, obstacle.h-2, OBSTACLE_SHADE_1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	b298      	uxth	r0, r3
 8002d30:	4b95      	ldr	r3, [pc, #596]	@ (8002f88 <display_obstacle+0x290>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	4b94      	ldr	r3, [pc, #592]	@ (8002f88 <display_obstacle+0x290>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b02      	subs	r3, #2
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f245 31c0 	movw	r1, #21440	@ 0x53c0
 8002d44:	9100      	str	r1, [sp, #0]
 8002d46:	2103      	movs	r1, #3
 8002d48:	f7fe fffa 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start,3,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2), OBSTACLE_SHADE_1);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	b298      	uxth	r0, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3302      	adds	r3, #2
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b02      	subs	r3, #2
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	f245 31c0 	movw	r1, #21440	@ 0x53c0
 8002d64:	9100      	str	r1, [sp, #0]
 8002d66:	2103      	movs	r1, #3
 8002d68:	f7fe ffea 	bl	8001d40 <gc9a01a_fill_rect>

  gc9a01a_fill_rect(x_start,obstacle.w,( obstacle.h+obstacle.y-2),2, OBSTACLE_SHADE_1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	b298      	uxth	r0, r3
 8002d70:	4b85      	ldr	r3, [pc, #532]	@ (8002f88 <display_obstacle+0x290>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	b299      	uxth	r1, r3
 8002d76:	4b84      	ldr	r3, [pc, #528]	@ (8002f88 <display_obstacle+0x290>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	4b82      	ldr	r3, [pc, #520]	@ (8002f88 <display_obstacle+0x290>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b02      	subs	r3, #2
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	f245 33c0 	movw	r3, #21440	@ 0x53c0
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	2302      	movs	r3, #2
 8002d92:	f7fe ffd5 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start,obstacle.w,bottom_obstacle_ystart,2, OBSTACLE_SHADE_1);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	b298      	uxth	r0, r3
 8002d9a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f88 <display_obstacle+0x290>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	b299      	uxth	r1, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	f245 33c0 	movw	r3, #21440	@ 0x53c0
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2302      	movs	r3, #2
 8002dac:	f7fe ffc8 	bl	8001d40 <gc9a01a_fill_rect>

  gc9a01a_fill_rect(x_start+3,2,obstacle.y, obstacle.h-2, OBSTACLE_SHADE_2);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3303      	adds	r3, #3
 8002db6:	b298      	uxth	r0, r3
 8002db8:	4b73      	ldr	r3, [pc, #460]	@ (8002f88 <display_obstacle+0x290>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	4b72      	ldr	r3, [pc, #456]	@ (8002f88 <display_obstacle+0x290>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b02      	subs	r3, #2
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f44f 41fb 	mov.w	r1, #32128	@ 0x7d80
 8002dcc:	9100      	str	r1, [sp, #0]
 8002dce:	2102      	movs	r1, #2
 8002dd0:	f7fe ffb6 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start+3,2,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2), OBSTACLE_SHADE_2);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3303      	adds	r3, #3
 8002dda:	b298      	uxth	r0, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3302      	adds	r3, #2
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b02      	subs	r3, #2
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	f44f 41fb 	mov.w	r1, #32128	@ 0x7d80
 8002df0:	9100      	str	r1, [sp, #0]
 8002df2:	2102      	movs	r1, #2
 8002df4:	f7fe ffa4 	bl	8001d40 <gc9a01a_fill_rect>

  gc9a01a_fill_rect(x_start+5,2,obstacle.y, obstacle.h-2, OBSTACLE_SHADE_3);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3305      	adds	r3, #5
 8002dfe:	b298      	uxth	r0, r3
 8002e00:	4b61      	ldr	r3, [pc, #388]	@ (8002f88 <display_obstacle+0x290>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	4b60      	ldr	r3, [pc, #384]	@ (8002f88 <display_obstacle+0x290>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b02      	subs	r3, #2
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	f44f 411f 	mov.w	r1, #40704	@ 0x9f00
 8002e14:	9100      	str	r1, [sp, #0]
 8002e16:	2102      	movs	r1, #2
 8002e18:	f7fe ff92 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start+5,2,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2), OBSTACLE_SHADE_3);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3305      	adds	r3, #5
 8002e22:	b298      	uxth	r0, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3302      	adds	r3, #2
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b02      	subs	r3, #2
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f44f 411f 	mov.w	r1, #40704	@ 0x9f00
 8002e38:	9100      	str	r1, [sp, #0]
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	f7fe ff80 	bl	8001d40 <gc9a01a_fill_rect>

  gc9a01a_fill_rect(x_start+7,10,obstacle.y, obstacle.h-2, WHITE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3307      	adds	r3, #7
 8002e46:	b298      	uxth	r0, r3
 8002e48:	4b4f      	ldr	r3, [pc, #316]	@ (8002f88 <display_obstacle+0x290>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	4b4e      	ldr	r3, [pc, #312]	@ (8002f88 <display_obstacle+0x290>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b02      	subs	r3, #2
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002e5c:	9100      	str	r1, [sp, #0]
 8002e5e:	210a      	movs	r1, #10
 8002e60:	f7fe ff6e 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start+7,10,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2), WHITE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3307      	adds	r3, #7
 8002e6a:	b298      	uxth	r0, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3302      	adds	r3, #2
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b02      	subs	r3, #2
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002e80:	9100      	str	r1, [sp, #0]
 8002e82:	210a      	movs	r1, #10
 8002e84:	f7fe ff5c 	bl	8001d40 <gc9a01a_fill_rect>

  gc9a01a_fill_rect(x_start+17,3,obstacle.y, obstacle.h-2, OBSTACLE_SHADE_3);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3311      	adds	r3, #17
 8002e8e:	b298      	uxth	r0, r3
 8002e90:	4b3d      	ldr	r3, [pc, #244]	@ (8002f88 <display_obstacle+0x290>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	4b3c      	ldr	r3, [pc, #240]	@ (8002f88 <display_obstacle+0x290>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b02      	subs	r3, #2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	f44f 411f 	mov.w	r1, #40704	@ 0x9f00
 8002ea4:	9100      	str	r1, [sp, #0]
 8002ea6:	2103      	movs	r1, #3
 8002ea8:	f7fe ff4a 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start+17,3,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2), OBSTACLE_SHADE_3);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3311      	adds	r3, #17
 8002eb2:	b298      	uxth	r0, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3302      	adds	r3, #2
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b02      	subs	r3, #2
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	f44f 411f 	mov.w	r1, #40704	@ 0x9f00
 8002ec8:	9100      	str	r1, [sp, #0]
 8002eca:	2103      	movs	r1, #3
 8002ecc:	f7fe ff38 	bl	8001d40 <gc9a01a_fill_rect>

  gc9a01a_fill_rect(x_start+20,3,obstacle.y, obstacle.h-2, OBSTACLE_SHADE_2);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3314      	adds	r3, #20
 8002ed6:	b298      	uxth	r0, r3
 8002ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f88 <display_obstacle+0x290>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	4b2a      	ldr	r3, [pc, #168]	@ (8002f88 <display_obstacle+0x290>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b02      	subs	r3, #2
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f44f 41fb 	mov.w	r1, #32128	@ 0x7d80
 8002eec:	9100      	str	r1, [sp, #0]
 8002eee:	2103      	movs	r1, #3
 8002ef0:	f7fe ff26 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start+20,3,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2), OBSTACLE_SHADE_2);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3314      	adds	r3, #20
 8002efa:	b298      	uxth	r0, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3302      	adds	r3, #2
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b02      	subs	r3, #2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	f44f 41fb 	mov.w	r1, #32128	@ 0x7d80
 8002f10:	9100      	str	r1, [sp, #0]
 8002f12:	2103      	movs	r1, #3
 8002f14:	f7fe ff14 	bl	8001d40 <gc9a01a_fill_rect>

  gc9a01a_fill_rect(x_start+23,7,obstacle.y, obstacle.h-2, OBSTACLE_SHADE_1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3317      	adds	r3, #23
 8002f1e:	b298      	uxth	r0, r3
 8002f20:	4b19      	ldr	r3, [pc, #100]	@ (8002f88 <display_obstacle+0x290>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	4b18      	ldr	r3, [pc, #96]	@ (8002f88 <display_obstacle+0x290>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b02      	subs	r3, #2
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	f245 31c0 	movw	r1, #21440	@ 0x53c0
 8002f34:	9100      	str	r1, [sp, #0]
 8002f36:	2107      	movs	r1, #7
 8002f38:	f7fe ff02 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start+23,7,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2), OBSTACLE_SHADE_1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3317      	adds	r3, #23
 8002f42:	b298      	uxth	r0, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3302      	adds	r3, #2
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b02      	subs	r3, #2
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f245 31c0 	movw	r1, #21440	@ 0x53c0
 8002f58:	9100      	str	r1, [sp, #0]
 8002f5a:	2107      	movs	r1, #7
 8002f5c:	f7fe fef0 	bl	8001d40 <gc9a01a_fill_rect>

  /* filling traces of obstacle */
  gc9a01a_fill_rect((x_start+30), obstacle.speed, obstacle.y,  obstacle.h, BACKGROUND);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	331e      	adds	r3, #30
 8002f66:	b298      	uxth	r0, r3
 8002f68:	4b07      	ldr	r3, [pc, #28]	@ (8002f88 <display_obstacle+0x290>)
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	b299      	uxth	r1, r3
 8002f6e:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <display_obstacle+0x290>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	4b04      	ldr	r3, [pc, #16]	@ (8002f88 <display_obstacle+0x290>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	f649 745e 	movw	r4, #40798	@ 0x9f5e
 8002f7e:	9400      	str	r4, [sp, #0]
 8002f80:	f7fe fede 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect((x_start+30), obstacle.speed, bottom_obstacle_ystart, bottom_obstacle_height, BACKGROUND);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	e001      	b.n	8002f8c <display_obstacle+0x294>
 8002f88:	200002b0 	.word	0x200002b0
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	331e      	adds	r3, #30
 8002f90:	b298      	uxth	r0, r3
 8002f92:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <display_obstacle+0x2bc>)
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	b299      	uxth	r1, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f649 745e 	movw	r4, #40798	@ 0x9f5e
 8002fa4:	9400      	str	r4, [sp, #0]
 8002fa6:	f7fe fecb 	bl	8001d40 <gc9a01a_fill_rect>
}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd90      	pop	{r4, r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	200002b0 	.word	0x200002b0

08002fb8 <move_obstacle>:
/**
  * @brief  Move the obstacle on the LCD.
  * @param  x: Position to move the obstacle to.
  * @retval None
  */
void move_obstacle( int x) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	display_obstacle(x);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff fe99 	bl	8002cf8 <display_obstacle>
	display_bush();
 8002fc6:	f7ff f921 	bl	800220c <display_bush>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <score_card_background>:

/**
  * @brief  Draw the background for the score card on the LCD.
  * @retval None
  */
void score_card_background() {
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af02      	add	r7, sp, #8
  gc9a01a_fill_rect(0, 96,0,26, SCORE_BOARD_SHADE_3);
 8002fd8:	f24e 731c 	movw	r3, #59164	@ 0xe71c
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	231a      	movs	r3, #26
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2160      	movs	r1, #96	@ 0x60
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7fe feab 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(144, 96,0,26, SCORE_BOARD_SHADE_3);
 8002fea:	f24e 731c 	movw	r3, #59164	@ 0xe71c
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	231a      	movs	r3, #26
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2160      	movs	r1, #96	@ 0x60
 8002ff6:	2090      	movs	r0, #144	@ 0x90
 8002ff8:	f7fe fea2 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect( 0, 240,26,2, SCORE_BOARD_SHADE_2);
 8002ffc:	f249 43b2 	movw	r3, #38066	@ 0x94b2
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	2302      	movs	r3, #2
 8003004:	221a      	movs	r2, #26
 8003006:	21f0      	movs	r1, #240	@ 0xf0
 8003008:	2000      	movs	r0, #0
 800300a:	f7fe fe99 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect( 0, 240,28,2, SCORE_BOARD_SHADE_1);
 800300e:	f247 338e 	movw	r3, #29582	@ 0x738e
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2302      	movs	r3, #2
 8003016:	221c      	movs	r2, #28
 8003018:	21f0      	movs	r1, #240	@ 0xf0
 800301a:	2000      	movs	r0, #0
 800301c:	f7fe fe90 	bl	8001d40 <gc9a01a_fill_rect>
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <get_obstacle_speed>:
/**
  * @brief  Calculates the speed of obstacles based on the player's score.
  * @param  score: The player's score.
  * @retval uint8_t: The calculated obstacle speed.
  */
uint8_t get_obstacle_speed(int score) {
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  int base_speed = 5;
 8003030:	2305      	movs	r3, #5
 8003032:	60fb      	str	r3, [r7, #12]
  float speed_increment = 1.6;
 8003034:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <get_obstacle_speed+0x3c>)
 8003036:	60bb      	str	r3, [r7, #8]
  return base_speed * speed_increment;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	ee07 3a90 	vmov	s15, r3
 800303e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003042:	edd7 7a02 	vldr	s15, [r7, #8]
 8003046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800304e:	edc7 7a00 	vstr	s15, [r7]
 8003052:	783b      	ldrb	r3, [r7, #0]
 8003054:	b2db      	uxtb	r3, r3
}
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	3fcccccd 	.word	0x3fcccccd

08003068 <move_player>:
/**
  * @brief  Move the player on the LCD.
  * @param  y_pos: Starting position of the player.
  * @retval None
  */
void move_player( int y_pos) {
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b085      	sub	sp, #20
 800306c:	af02      	add	r7, sp, #8
 800306e:	6078      	str	r0, [r7, #4]
	static int wing_movement=1;
	fill_player_trace();
 8003070:	f7ff f87a 	bl	8002168 <fill_player_trace>
	if(wing_movement%5==0){
 8003074:	4b1a      	ldr	r3, [pc, #104]	@ (80030e0 <move_player+0x78>)
 8003076:	6819      	ldr	r1, [r3, #0]
 8003078:	4b1a      	ldr	r3, [pc, #104]	@ (80030e4 <move_player+0x7c>)
 800307a:	fb83 2301 	smull	r2, r3, r3, r1
 800307e:	105a      	asrs	r2, r3, #1
 8003080:	17cb      	asrs	r3, r1, #31
 8003082:	1ad2      	subs	r2, r2, r3
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	1aca      	subs	r2, r1, r3
 800308c:	2a00      	cmp	r2, #0
 800308e:	d10f      	bne.n	80030b0 <move_player+0x48>
	  gc9a01a_draw_image( player.x, player.w, y_pos, player.h, (uint16_t *)image_data_bird);
 8003090:	4b15      	ldr	r3, [pc, #84]	@ (80030e8 <move_player+0x80>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	b298      	uxth	r0, r3
 8003096:	4b14      	ldr	r3, [pc, #80]	@ (80030e8 <move_player+0x80>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	b299      	uxth	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	b29a      	uxth	r2, r3
 80030a0:	4b11      	ldr	r3, [pc, #68]	@ (80030e8 <move_player+0x80>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	4c11      	ldr	r4, [pc, #68]	@ (80030ec <move_player+0x84>)
 80030a8:	9400      	str	r4, [sp, #0]
 80030aa:	f7fe ff73 	bl	8001f94 <gc9a01a_draw_image>
 80030ae:	e00e      	b.n	80030ce <move_player+0x66>
	} else {
	  gc9a01a_draw_image( player.x, player.w, y_pos, player.h, (uint16_t *)image_data_bird2);
 80030b0:	4b0d      	ldr	r3, [pc, #52]	@ (80030e8 <move_player+0x80>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	b298      	uxth	r0, r3
 80030b6:	4b0c      	ldr	r3, [pc, #48]	@ (80030e8 <move_player+0x80>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	b299      	uxth	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	b29a      	uxth	r2, r3
 80030c0:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <move_player+0x80>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	4c0a      	ldr	r4, [pc, #40]	@ (80030f0 <move_player+0x88>)
 80030c8:	9400      	str	r4, [sp, #0]
 80030ca:	f7fe ff63 	bl	8001f94 <gc9a01a_draw_image>
	}
	wing_movement++;
 80030ce:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <move_player+0x78>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	4a02      	ldr	r2, [pc, #8]	@ (80030e0 <move_player+0x78>)
 80030d6:	6013      	str	r3, [r2, #0]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd90      	pop	{r4, r7, pc}
 80030e0:	2000000c 	.word	0x2000000c
 80030e4:	66666667 	.word	0x66666667
 80030e8:	2000029c 	.word	0x2000029c
 80030ec:	0801526c 	.word	0x0801526c
 80030f0:	08015974 	.word	0x08015974

080030f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003138 <HAL_MspInit+0x44>)
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003138 <HAL_MspInit+0x44>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6193      	str	r3, [r2, #24]
 8003106:	4b0c      	ldr	r3, [pc, #48]	@ (8003138 <HAL_MspInit+0x44>)
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	4b09      	ldr	r3, [pc, #36]	@ (8003138 <HAL_MspInit+0x44>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	4a08      	ldr	r2, [pc, #32]	@ (8003138 <HAL_MspInit+0x44>)
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800311c:	61d3      	str	r3, [r2, #28]
 800311e:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_MspInit+0x44>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40021000 	.word	0x40021000

0800313c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	@ 0x28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	f107 0314 	add.w	r3, r7, #20
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a17      	ldr	r2, [pc, #92]	@ (80031b8 <HAL_I2C_MspInit+0x7c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d127      	bne.n	80031ae <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315e:	4b17      	ldr	r3, [pc, #92]	@ (80031bc <HAL_I2C_MspInit+0x80>)
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	4a16      	ldr	r2, [pc, #88]	@ (80031bc <HAL_I2C_MspInit+0x80>)
 8003164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003168:	6153      	str	r3, [r2, #20]
 800316a:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <HAL_I2C_MspInit+0x80>)
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TP_SCL_Pin|TP_SDA_Pin;
 8003176:	23c0      	movs	r3, #192	@ 0xc0
 8003178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800317a:	2312      	movs	r3, #18
 800317c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003182:	2303      	movs	r3, #3
 8003184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003186:	2304      	movs	r3, #4
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	4619      	mov	r1, r3
 8003190:	480b      	ldr	r0, [pc, #44]	@ (80031c0 <HAL_I2C_MspInit+0x84>)
 8003192:	f000 fd0d 	bl	8003bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003196:	4b09      	ldr	r3, [pc, #36]	@ (80031bc <HAL_I2C_MspInit+0x80>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	4a08      	ldr	r2, [pc, #32]	@ (80031bc <HAL_I2C_MspInit+0x80>)
 800319c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031a0:	61d3      	str	r3, [r2, #28]
 80031a2:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <HAL_I2C_MspInit+0x80>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031ae:	bf00      	nop
 80031b0:	3728      	adds	r7, #40	@ 0x28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40005400 	.word	0x40005400
 80031bc:	40021000 	.word	0x40021000
 80031c0:	48000400 	.word	0x48000400

080031c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031c8:	bf00      	nop
 80031ca:	e7fd      	b.n	80031c8 <NMI_Handler+0x4>

080031cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031d0:	bf00      	nop
 80031d2:	e7fd      	b.n	80031d0 <HardFault_Handler+0x4>

080031d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031d8:	bf00      	nop
 80031da:	e7fd      	b.n	80031d8 <MemManage_Handler+0x4>

080031dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031e0:	bf00      	nop
 80031e2:	e7fd      	b.n	80031e0 <BusFault_Handler+0x4>

080031e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e8:	bf00      	nop
 80031ea:	e7fd      	b.n	80031e8 <UsageFault_Handler+0x4>

080031ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800321a:	f000 fb41 	bl	80038a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}

08003222 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IN_Pin);
 8003226:	2020      	movs	r0, #32
 8003228:	f000 fe54 	bl	8003ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800322c:	bf00      	nop
 800322e:	bd80      	pop	{r7, pc}

08003230 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	71fb      	strb	r3, [r7, #7]
  //Enable TRCENA
  DEMCR |= ( 1 << 24);
 800323a:	4b0f      	ldr	r3, [pc, #60]	@ (8003278 <ITM_SendChar+0x48>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a0e      	ldr	r2, [pc, #56]	@ (8003278 <ITM_SendChar+0x48>)
 8003240:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003244:	6013      	str	r3, [r2, #0]

  //enable stimulus port 0
  ITM_TRACE_EN |= ( 1 << 0);
 8003246:	4b0d      	ldr	r3, [pc, #52]	@ (800327c <ITM_SendChar+0x4c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a0c      	ldr	r2, [pc, #48]	@ (800327c <ITM_SendChar+0x4c>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6013      	str	r3, [r2, #0]

  // read FIFO status in bit [0]:
  while(!(ITM_STIMULUS_PORT0 & 1));
 8003252:	bf00      	nop
 8003254:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f8      	beq.n	8003254 <ITM_SendChar+0x24>

  //Write to ITM stimulus port0
  ITM_STIMULUS_PORT0 = ch;
 8003262:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	6013      	str	r3, [r2, #0]
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	e000edfc 	.word	0xe000edfc
 800327c:	e0000e00 	.word	0xe0000e00

08003280 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return 1;
 8003284:	2301      	movs	r3, #1
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <_kill>:

int _kill(int pid, int sig)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800329a:	f004 f95b 	bl	8007554 <__errno>
 800329e:	4603      	mov	r3, r0
 80032a0:	2216      	movs	r2, #22
 80032a2:	601a      	str	r2, [r3, #0]
  return -1;
 80032a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <_exit>:

void _exit (int status)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032b8:	f04f 31ff 	mov.w	r1, #4294967295
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ffe7 	bl	8003290 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032c2:	bf00      	nop
 80032c4:	e7fd      	b.n	80032c2 <_exit+0x12>

080032c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	e00a      	b.n	80032ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032d8:	f3af 8000 	nop.w
 80032dc:	4601      	mov	r1, r0
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	60ba      	str	r2, [r7, #8]
 80032e4:	b2ca      	uxtb	r2, r1
 80032e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	3301      	adds	r3, #1
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	dbf0      	blt.n	80032d8 <_read+0x12>
  }

  return len;
 80032f6:	687b      	ldr	r3, [r7, #4]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	e009      	b.n	8003326 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	60ba      	str	r2, [r7, #8]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff88 	bl	8003230 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	3301      	adds	r3, #1
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	dbf1      	blt.n	8003312 <_write+0x12>
  }
  return len;
 800332e:	687b      	ldr	r3, [r7, #4]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <_close>:

int _close(int file)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003340:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003360:	605a      	str	r2, [r3, #4]
  return 0;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <_isatty>:

int _isatty(int file)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003378:	2301      	movs	r3, #1
}
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003386:	b480      	push	{r7}
 8003388:	b085      	sub	sp, #20
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033a8:	4a14      	ldr	r2, [pc, #80]	@ (80033fc <_sbrk+0x5c>)
 80033aa:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <_sbrk+0x60>)
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033b4:	4b13      	ldr	r3, [pc, #76]	@ (8003404 <_sbrk+0x64>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033bc:	4b11      	ldr	r3, [pc, #68]	@ (8003404 <_sbrk+0x64>)
 80033be:	4a12      	ldr	r2, [pc, #72]	@ (8003408 <_sbrk+0x68>)
 80033c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033c2:	4b10      	ldr	r3, [pc, #64]	@ (8003404 <_sbrk+0x64>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d207      	bcs.n	80033e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033d0:	f004 f8c0 	bl	8007554 <__errno>
 80033d4:	4603      	mov	r3, r0
 80033d6:	220c      	movs	r2, #12
 80033d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033da:	f04f 33ff 	mov.w	r3, #4294967295
 80033de:	e009      	b.n	80033f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033e0:	4b08      	ldr	r3, [pc, #32]	@ (8003404 <_sbrk+0x64>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033e6:	4b07      	ldr	r3, [pc, #28]	@ (8003404 <_sbrk+0x64>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	4a05      	ldr	r2, [pc, #20]	@ (8003404 <_sbrk+0x64>)
 80033f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033f2:	68fb      	ldr	r3, [r7, #12]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	2000a000 	.word	0x2000a000
 8003400:	00000600 	.word	0x00000600
 8003404:	200002dc 	.word	0x200002dc
 8003408:	20000438 	.word	0x20000438

0800340c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003410:	4b06      	ldr	r3, [pc, #24]	@ (800342c <SystemInit+0x20>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003416:	4a05      	ldr	r2, [pc, #20]	@ (800342c <SystemInit+0x20>)
 8003418:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800341c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <game_init_mssg>:
/**
  * @brief Initializes the game message display.
  * @param None
  * @retval None
  */
void game_init_mssg() {
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af04      	add	r7, sp, #16
  const char* game_start_btn = "START";
 8003436:	4b1d      	ldr	r3, [pc, #116]	@ (80034ac <game_init_mssg+0x7c>)
 8003438:	607b      	str	r3, [r7, #4]
  display_game_title();
 800343a:	f7fe ff3f 	bl	80022bc <display_game_title>

  gc9a01a_fill_rect( 70, 10, 140, 26, BUTTON);
 800343e:	f640 3385 	movw	r3, #2949	@ 0xb85
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	231a      	movs	r3, #26
 8003446:	228c      	movs	r2, #140	@ 0x8c
 8003448:	210a      	movs	r1, #10
 800344a:	2046      	movs	r0, #70	@ 0x46
 800344c:	f7fe fc78 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(160, 10, 140, 26, BUTTON);
 8003450:	f640 3385 	movw	r3, #2949	@ 0xb85
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	231a      	movs	r3, #26
 8003458:	228c      	movs	r2, #140	@ 0x8c
 800345a:	210a      	movs	r1, #10
 800345c:	20a0      	movs	r0, #160	@ 0xa0
 800345e:	f7fe fc6f 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect( 70,100, 130, 10, BUTTON);
 8003462:	f640 3385 	movw	r3, #2949	@ 0xb85
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	230a      	movs	r3, #10
 800346a:	2282      	movs	r2, #130	@ 0x82
 800346c:	2164      	movs	r1, #100	@ 0x64
 800346e:	2046      	movs	r0, #70	@ 0x46
 8003470:	f7fe fc66 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect( 70,100, 166, 10, BUTTON);
 8003474:	f640 3385 	movw	r3, #2949	@ 0xb85
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	230a      	movs	r3, #10
 800347c:	22a6      	movs	r2, #166	@ 0xa6
 800347e:	2164      	movs	r1, #100	@ 0x64
 8003480:	2046      	movs	r0, #70	@ 0x46
 8003482:	f7fe fc5d 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_write_string(80, 140, (const char*)game_start_btn, Font_16x26, BTN_TXT, BUTTON);
 8003486:	4b0a      	ldr	r3, [pc, #40]	@ (80034b0 <game_init_mssg+0x80>)
 8003488:	f640 3285 	movw	r2, #2949	@ 0xb85
 800348c:	9202      	str	r2, [sp, #8]
 800348e:	f64f 72fb 	movw	r2, #65531	@ 0xfffb
 8003492:	9201      	str	r2, [sp, #4]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	9200      	str	r2, [sp, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	218c      	movs	r1, #140	@ 0x8c
 800349e:	2050      	movs	r0, #80	@ 0x50
 80034a0:	f7fe fc08 	bl	8001cb4 <gc9a01a_write_string>
}
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	0800b3d4 	.word	0x0800b3d4
 80034b0:	20000000 	.word	0x20000000

080034b4 <game_over_mssg>:
/**
  * @brief Displays game over message on the screen.
  * @param None
  * @retval None
  */
void game_over_mssg() {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af04      	add	r7, sp, #16
	const char* game_over_message = "GAME OVER";
 80034ba:	4b25      	ldr	r3, [pc, #148]	@ (8003550 <game_over_mssg+0x9c>)
 80034bc:	607b      	str	r3, [r7, #4]
	const char* restart_message = "RESTART";
 80034be:	4b25      	ldr	r3, [pc, #148]	@ (8003554 <game_over_mssg+0xa0>)
 80034c0:	603b      	str	r3, [r7, #0]

	gc9a01a_write_string(48, 70, (const char*)game_over_message, Font_16x26, RED, BACKGROUND);
 80034c2:	4b25      	ldr	r3, [pc, #148]	@ (8003558 <game_over_mssg+0xa4>)
 80034c4:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 80034c8:	9202      	str	r2, [sp, #8]
 80034ca:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80034ce:	9201      	str	r2, [sp, #4]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	9200      	str	r2, [sp, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	2146      	movs	r1, #70	@ 0x46
 80034da:	2030      	movs	r0, #48	@ 0x30
 80034dc:	f7fe fbea 	bl	8001cb4 <gc9a01a_write_string>
  gc9a01a_fill_rect( 54, 10, 140, 26, BUTTON);
 80034e0:	f640 3385 	movw	r3, #2949	@ 0xb85
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	231a      	movs	r3, #26
 80034e8:	228c      	movs	r2, #140	@ 0x8c
 80034ea:	210a      	movs	r1, #10
 80034ec:	2036      	movs	r0, #54	@ 0x36
 80034ee:	f7fe fc27 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(176, 10, 140, 26, BUTTON);
 80034f2:	f640 3385 	movw	r3, #2949	@ 0xb85
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	231a      	movs	r3, #26
 80034fa:	228c      	movs	r2, #140	@ 0x8c
 80034fc:	210a      	movs	r1, #10
 80034fe:	20b0      	movs	r0, #176	@ 0xb0
 8003500:	f7fe fc1e 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect( 54,132, 130, 10, BUTTON);
 8003504:	f640 3385 	movw	r3, #2949	@ 0xb85
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	230a      	movs	r3, #10
 800350c:	2282      	movs	r2, #130	@ 0x82
 800350e:	2184      	movs	r1, #132	@ 0x84
 8003510:	2036      	movs	r0, #54	@ 0x36
 8003512:	f7fe fc15 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect( 54,132, 166, 10, BUTTON);
 8003516:	f640 3385 	movw	r3, #2949	@ 0xb85
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	230a      	movs	r3, #10
 800351e:	22a6      	movs	r2, #166	@ 0xa6
 8003520:	2184      	movs	r1, #132	@ 0x84
 8003522:	2036      	movs	r0, #54	@ 0x36
 8003524:	f7fe fc0c 	bl	8001d40 <gc9a01a_fill_rect>
	gc9a01a_write_string(64, 140, (const char*)restart_message, Font_16x26, BTN_TXT, BUTTON);
 8003528:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <game_over_mssg+0xa4>)
 800352a:	f640 3285 	movw	r2, #2949	@ 0xb85
 800352e:	9202      	str	r2, [sp, #8]
 8003530:	f64f 72fb 	movw	r2, #65531	@ 0xfffb
 8003534:	9201      	str	r2, [sp, #4]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	9200      	str	r2, [sp, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	218c      	movs	r1, #140	@ 0x8c
 8003540:	2040      	movs	r0, #64	@ 0x40
 8003542:	f7fe fbb7 	bl	8001cb4 <gc9a01a_write_string>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	0800b3dc 	.word	0x0800b3dc
 8003554:	0800b3e8 	.word	0x0800b3e8
 8003558:	20000000 	.word	0x20000000

0800355c <render_gamestart_countdown>:
/**
  * @brief Renders the countdown before the game starts.
  * @param None
  * @retval None
  */
void render_gamestart_countdown() {
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af04      	add	r7, sp, #16
	static uint32_t prestart_time = 0;
	countdown_complete = false;
 8003562:	4b2c      	ldr	r3, [pc, #176]	@ (8003614 <render_gamestart_countdown+0xb8>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
	prestart_time++;
 8003568:	4b2b      	ldr	r3, [pc, #172]	@ (8003618 <render_gamestart_countdown+0xbc>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3301      	adds	r3, #1
 800356e:	4a2a      	ldr	r2, [pc, #168]	@ (8003618 <render_gamestart_countdown+0xbc>)
 8003570:	6013      	str	r3, [r2, #0]
	if (prestart_time < 50) {
 8003572:	4b29      	ldr	r3, [pc, #164]	@ (8003618 <render_gamestart_countdown+0xbc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b31      	cmp	r3, #49	@ 0x31
 8003578:	d80e      	bhi.n	8003598 <render_gamestart_countdown+0x3c>
		gc9a01a_write_string(116, 107, (const char*)"3", Font_16x26, BLACK, BACKGROUND);
 800357a:	4b28      	ldr	r3, [pc, #160]	@ (800361c <render_gamestart_countdown+0xc0>)
 800357c:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 8003580:	9202      	str	r2, [sp, #8]
 8003582:	2200      	movs	r2, #0
 8003584:	9201      	str	r2, [sp, #4]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	9200      	str	r2, [sp, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a24      	ldr	r2, [pc, #144]	@ (8003620 <render_gamestart_countdown+0xc4>)
 800358e:	216b      	movs	r1, #107	@ 0x6b
 8003590:	2074      	movs	r0, #116	@ 0x74
 8003592:	f7fe fb8f 	bl	8001cb4 <gc9a01a_write_string>
	} else if(prestart_time > 150) {
		prestart_time = 0;
		fill_countdown_trace();
		countdown_complete = true;
	}
}
 8003596:	e03a      	b.n	800360e <render_gamestart_countdown+0xb2>
	} else if(prestart_time > 50 && prestart_time < 100) {
 8003598:	4b1f      	ldr	r3, [pc, #124]	@ (8003618 <render_gamestart_countdown+0xbc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b32      	cmp	r3, #50	@ 0x32
 800359e:	d912      	bls.n	80035c6 <render_gamestart_countdown+0x6a>
 80035a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003618 <render_gamestart_countdown+0xbc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b63      	cmp	r3, #99	@ 0x63
 80035a6:	d80e      	bhi.n	80035c6 <render_gamestart_countdown+0x6a>
		gc9a01a_write_string(116, 107, (const char*)"2", Font_16x26, BLACK, BACKGROUND);
 80035a8:	4b1c      	ldr	r3, [pc, #112]	@ (800361c <render_gamestart_countdown+0xc0>)
 80035aa:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 80035ae:	9202      	str	r2, [sp, #8]
 80035b0:	2200      	movs	r2, #0
 80035b2:	9201      	str	r2, [sp, #4]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	9200      	str	r2, [sp, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003624 <render_gamestart_countdown+0xc8>)
 80035bc:	216b      	movs	r1, #107	@ 0x6b
 80035be:	2074      	movs	r0, #116	@ 0x74
 80035c0:	f7fe fb78 	bl	8001cb4 <gc9a01a_write_string>
 80035c4:	e023      	b.n	800360e <render_gamestart_countdown+0xb2>
	} else if(prestart_time > 100 && prestart_time < 150) {
 80035c6:	4b14      	ldr	r3, [pc, #80]	@ (8003618 <render_gamestart_countdown+0xbc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b64      	cmp	r3, #100	@ 0x64
 80035cc:	d912      	bls.n	80035f4 <render_gamestart_countdown+0x98>
 80035ce:	4b12      	ldr	r3, [pc, #72]	@ (8003618 <render_gamestart_countdown+0xbc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b95      	cmp	r3, #149	@ 0x95
 80035d4:	d80e      	bhi.n	80035f4 <render_gamestart_countdown+0x98>
		gc9a01a_write_string(116, 107, (const char*)"1", Font_16x26, BLACK, BACKGROUND);
 80035d6:	4b11      	ldr	r3, [pc, #68]	@ (800361c <render_gamestart_countdown+0xc0>)
 80035d8:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 80035dc:	9202      	str	r2, [sp, #8]
 80035de:	2200      	movs	r2, #0
 80035e0:	9201      	str	r2, [sp, #4]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	9200      	str	r2, [sp, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003628 <render_gamestart_countdown+0xcc>)
 80035ea:	216b      	movs	r1, #107	@ 0x6b
 80035ec:	2074      	movs	r0, #116	@ 0x74
 80035ee:	f7fe fb61 	bl	8001cb4 <gc9a01a_write_string>
 80035f2:	e00c      	b.n	800360e <render_gamestart_countdown+0xb2>
	} else if(prestart_time > 150) {
 80035f4:	4b08      	ldr	r3, [pc, #32]	@ (8003618 <render_gamestart_countdown+0xbc>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b96      	cmp	r3, #150	@ 0x96
 80035fa:	d908      	bls.n	800360e <render_gamestart_countdown+0xb2>
		prestart_time = 0;
 80035fc:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <render_gamestart_countdown+0xbc>)
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
		fill_countdown_trace();
 8003602:	f7fe fe33 	bl	800226c <fill_countdown_trace>
		countdown_complete = true;
 8003606:	4b03      	ldr	r3, [pc, #12]	@ (8003614 <render_gamestart_countdown+0xb8>)
 8003608:	2201      	movs	r2, #1
 800360a:	601a      	str	r2, [r3, #0]
}
 800360c:	e7ff      	b.n	800360e <render_gamestart_countdown+0xb2>
 800360e:	bf00      	nop
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000294 	.word	0x20000294
 8003618:	200002e0 	.word	0x200002e0
 800361c:	20000000 	.word	0x20000000
 8003620:	0800b3f0 	.word	0x0800b3f0
 8003624:	0800b3f4 	.word	0x0800b3f4
 8003628:	0800b3f8 	.word	0x0800b3f8

0800362c <player_show_score>:
/**
  * @brief Displays the player's score on the screen.
  * @param player: Pointer to the Player struct containing player information.
  * @retval None
  */
void player_show_score(Player *player) {
 800362c:	b580      	push	{r7, lr}
 800362e:	b0a0      	sub	sp, #128	@ 0x80
 8003630:	af04      	add	r7, sp, #16
 8003632:	6078      	str	r0, [r7, #4]
	char score_str[100]="000";
 8003634:	4b39      	ldr	r3, [pc, #228]	@ (800371c <player_show_score+0xf0>)
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	f107 0310 	add.w	r3, r7, #16
 800363c:	2260      	movs	r2, #96	@ 0x60
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f003 ff35 	bl	80074b0 <memset>

	if(( player->score)<10){
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b09      	cmp	r3, #9
 800364c:	dc18      	bgt.n	8003680 <player_show_score+0x54>
		sprintf(score_str, "00%d", player->score);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	f107 030c 	add.w	r3, r7, #12
 8003656:	4932      	ldr	r1, [pc, #200]	@ (8003720 <player_show_score+0xf4>)
 8003658:	4618      	mov	r0, r3
 800365a:	f003 fe31 	bl	80072c0 <siprintf>
		gc9a01a_write_string(96, 0, score_str, Font_16x26, BLACK, SCORE_BOARD);
 800365e:	4b31      	ldr	r3, [pc, #196]	@ (8003724 <player_show_score+0xf8>)
 8003660:	f107 010c 	add.w	r1, r7, #12
 8003664:	f24e 721c 	movw	r2, #59164	@ 0xe71c
 8003668:	9202      	str	r2, [sp, #8]
 800366a:	2200      	movs	r2, #0
 800366c:	9201      	str	r2, [sp, #4]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	9200      	str	r2, [sp, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	460a      	mov	r2, r1
 8003676:	2100      	movs	r1, #0
 8003678:	2060      	movs	r0, #96	@ 0x60
 800367a:	f7fe fb1b 	bl	8001cb4 <gc9a01a_write_string>
		sprintf(score_str, "%d", player->score);
		gc9a01a_write_string(96, 0, score_str, Font_16x26, BLACK, SCORE_BOARD);
	} else {
		gc9a01a_write_string(96, 0, "WIN", Font_16x26, BLACK, SCORE_BOARD);
	}
}
 800367e:	e048      	b.n	8003712 <player_show_score+0xe6>
	} else if( player->score<100){
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	2b63      	cmp	r3, #99	@ 0x63
 8003686:	dc18      	bgt.n	80036ba <player_show_score+0x8e>
		sprintf(score_str, "0%d", player->score);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	4925      	ldr	r1, [pc, #148]	@ (8003728 <player_show_score+0xfc>)
 8003692:	4618      	mov	r0, r3
 8003694:	f003 fe14 	bl	80072c0 <siprintf>
		gc9a01a_write_string(96, 0, score_str, Font_16x26, BLACK, SCORE_BOARD);
 8003698:	4b22      	ldr	r3, [pc, #136]	@ (8003724 <player_show_score+0xf8>)
 800369a:	f107 010c 	add.w	r1, r7, #12
 800369e:	f24e 721c 	movw	r2, #59164	@ 0xe71c
 80036a2:	9202      	str	r2, [sp, #8]
 80036a4:	2200      	movs	r2, #0
 80036a6:	9201      	str	r2, [sp, #4]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	9200      	str	r2, [sp, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	460a      	mov	r2, r1
 80036b0:	2100      	movs	r1, #0
 80036b2:	2060      	movs	r0, #96	@ 0x60
 80036b4:	f7fe fafe 	bl	8001cb4 <gc9a01a_write_string>
}
 80036b8:	e02b      	b.n	8003712 <player_show_score+0xe6>
	} else if( player->score<1000){
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036c2:	da18      	bge.n	80036f6 <player_show_score+0xca>
		sprintf(score_str, "%d", player->score);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	f107 030c 	add.w	r3, r7, #12
 80036cc:	4917      	ldr	r1, [pc, #92]	@ (800372c <player_show_score+0x100>)
 80036ce:	4618      	mov	r0, r3
 80036d0:	f003 fdf6 	bl	80072c0 <siprintf>
		gc9a01a_write_string(96, 0, score_str, Font_16x26, BLACK, SCORE_BOARD);
 80036d4:	4b13      	ldr	r3, [pc, #76]	@ (8003724 <player_show_score+0xf8>)
 80036d6:	f107 010c 	add.w	r1, r7, #12
 80036da:	f24e 721c 	movw	r2, #59164	@ 0xe71c
 80036de:	9202      	str	r2, [sp, #8]
 80036e0:	2200      	movs	r2, #0
 80036e2:	9201      	str	r2, [sp, #4]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	9200      	str	r2, [sp, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	460a      	mov	r2, r1
 80036ec:	2100      	movs	r1, #0
 80036ee:	2060      	movs	r0, #96	@ 0x60
 80036f0:	f7fe fae0 	bl	8001cb4 <gc9a01a_write_string>
}
 80036f4:	e00d      	b.n	8003712 <player_show_score+0xe6>
		gc9a01a_write_string(96, 0, "WIN", Font_16x26, BLACK, SCORE_BOARD);
 80036f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <player_show_score+0xf8>)
 80036f8:	f24e 721c 	movw	r2, #59164	@ 0xe71c
 80036fc:	9202      	str	r2, [sp, #8]
 80036fe:	2200      	movs	r2, #0
 8003700:	9201      	str	r2, [sp, #4]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	9200      	str	r2, [sp, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a09      	ldr	r2, [pc, #36]	@ (8003730 <player_show_score+0x104>)
 800370a:	2100      	movs	r1, #0
 800370c:	2060      	movs	r0, #96	@ 0x60
 800370e:	f7fe fad1 	bl	8001cb4 <gc9a01a_write_string>
}
 8003712:	bf00      	nop
 8003714:	3770      	adds	r7, #112	@ 0x70
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	00303030 	.word	0x00303030
 8003720:	0800b3fc 	.word	0x0800b3fc
 8003724:	20000000 	.word	0x20000000
 8003728:	0800b404 	.word	0x0800b404
 800372c:	0800b408 	.word	0x0800b408
 8003730:	0800b40c 	.word	0x0800b40c

08003734 <start_btn_state>:

/**
  * @brief  Checks if the start button is pressed based on touch coordinates.
  * @retval uint8_t: PRESSED if the start button is pressed, otherwise NOT_PRESSED.
  */
uint8_t start_btn_state() {
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
  struct touch_data data;
  if(CST816S_data_available()) {
 800373a:	f7fd fb91 	bl	8000e60 <CST816S_data_available>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d015      	beq.n	8003770 <start_btn_state+0x3c>
    memcpy(&data, CST816S_get_data(), sizeof(struct touch_data));
 8003744:	f7fd fb22 	bl	8000d8c <CST816S_get_data>
 8003748:	4601      	mov	r1, r0
 800374a:	463b      	mov	r3, r7
 800374c:	2210      	movs	r2, #16
 800374e:	4618      	mov	r0, r3
 8003750:	f003 ff2d 	bl	80075ae <memcpy>
    if(data.y >= 70 && data.y <= 170) {
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b45      	cmp	r3, #69	@ 0x45
 8003758:	dd0a      	ble.n	8003770 <start_btn_state+0x3c>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2baa      	cmp	r3, #170	@ 0xaa
 800375e:	dc07      	bgt.n	8003770 <start_btn_state+0x3c>
      if(data.x >= 130 && data.x <= 176) {
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b81      	cmp	r3, #129	@ 0x81
 8003764:	dd04      	ble.n	8003770 <start_btn_state+0x3c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2bb0      	cmp	r3, #176	@ 0xb0
 800376a:	dc01      	bgt.n	8003770 <start_btn_state+0x3c>
        return PRESSED;
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <start_btn_state+0x3e>
      }
    }
  }
  return NOT_PRESSED;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <restart_btn_state>:

/**
  * @brief  Checks if the restart button is pressed based on touch coordinates.
  * @retval uint8_t: PRESSED if the restart button is pressed, otherwise NOT_PRESSED.
  */
uint8_t restart_btn_state() {
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
  struct touch_data data;
  if(CST816S_data_available()) {
 8003780:	f7fd fb6e 	bl	8000e60 <CST816S_data_available>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d015      	beq.n	80037b6 <restart_btn_state+0x3c>
    memcpy(&data, CST816S_get_data(), sizeof(struct touch_data));
 800378a:	f7fd faff 	bl	8000d8c <CST816S_get_data>
 800378e:	4601      	mov	r1, r0
 8003790:	463b      	mov	r3, r7
 8003792:	2210      	movs	r2, #16
 8003794:	4618      	mov	r0, r3
 8003796:	f003 ff0a 	bl	80075ae <memcpy>
    if(data.y >= 54 && data.y <= 186) {
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b35      	cmp	r3, #53	@ 0x35
 800379e:	dd0a      	ble.n	80037b6 <restart_btn_state+0x3c>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2bba      	cmp	r3, #186	@ 0xba
 80037a4:	dc07      	bgt.n	80037b6 <restart_btn_state+0x3c>
      if(data.x >= 130 && data.x <= 176) {
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b81      	cmp	r3, #129	@ 0x81
 80037aa:	dd04      	ble.n	80037b6 <restart_btn_state+0x3c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2bb0      	cmp	r3, #176	@ 0xb0
 80037b0:	dc01      	bgt.n	80037b6 <restart_btn_state+0x3c>
        return PRESSED;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <restart_btn_state+0x3e>
      }
    }
  }
  return NOT_PRESSED;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037f8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80037c4:	f7ff fe22 	bl	800340c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037c8:	480c      	ldr	r0, [pc, #48]	@ (80037fc <LoopForever+0x6>)
  ldr r1, =_edata
 80037ca:	490d      	ldr	r1, [pc, #52]	@ (8003800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003804 <LoopForever+0xe>)
  movs r3, #0
 80037ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037d0:	e002      	b.n	80037d8 <LoopCopyDataInit>

080037d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037d6:	3304      	adds	r3, #4

080037d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037dc:	d3f9      	bcc.n	80037d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037de:	4a0a      	ldr	r2, [pc, #40]	@ (8003808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037e0:	4c0a      	ldr	r4, [pc, #40]	@ (800380c <LoopForever+0x16>)
  movs r3, #0
 80037e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037e4:	e001      	b.n	80037ea <LoopFillZerobss>

080037e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037e8:	3204      	adds	r2, #4

080037ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037ec:	d3fb      	bcc.n	80037e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037ee:	f003 feb7 	bl	8007560 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037f2:	f7fe fdbb 	bl	800236c <main>

080037f6 <LoopForever>:

LoopForever:
    b LoopForever
 80037f6:	e7fe      	b.n	80037f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037f8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80037fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003800:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003804:	08016544 	.word	0x08016544
  ldr r2, =_sbss
 8003808:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800380c:	20000434 	.word	0x20000434

08003810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003810:	e7fe      	b.n	8003810 <ADC1_2_IRQHandler>
	...

08003814 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003818:	4b08      	ldr	r3, [pc, #32]	@ (800383c <HAL_Init+0x28>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a07      	ldr	r2, [pc, #28]	@ (800383c <HAL_Init+0x28>)
 800381e:	f043 0310 	orr.w	r3, r3, #16
 8003822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003824:	2003      	movs	r0, #3
 8003826:	f000 f973 	bl	8003b10 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800382a:	200f      	movs	r0, #15
 800382c:	f000 f808 	bl	8003840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003830:	f7ff fc60 	bl	80030f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40022000 	.word	0x40022000

08003840 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003848:	4b12      	ldr	r3, [pc, #72]	@ (8003894 <HAL_InitTick+0x54>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	4b12      	ldr	r3, [pc, #72]	@ (8003898 <HAL_InitTick+0x58>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	4619      	mov	r1, r3
 8003852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003856:	fbb3 f3f1 	udiv	r3, r3, r1
 800385a:	fbb2 f3f3 	udiv	r3, r2, r3
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f999 	bl	8003b96 <HAL_SYSTICK_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e00e      	b.n	800388c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b0f      	cmp	r3, #15
 8003872:	d80a      	bhi.n	800388a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003874:	2200      	movs	r2, #0
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	f04f 30ff 	mov.w	r0, #4294967295
 800387c:	f000 f953 	bl	8003b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003880:	4a06      	ldr	r2, [pc, #24]	@ (800389c <HAL_InitTick+0x5c>)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	e000      	b.n	800388c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000010 	.word	0x20000010
 8003898:	20000018 	.word	0x20000018
 800389c:	20000014 	.word	0x20000014

080038a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038a4:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <HAL_IncTick+0x20>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <HAL_IncTick+0x24>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4413      	add	r3, r2
 80038b0:	4a04      	ldr	r2, [pc, #16]	@ (80038c4 <HAL_IncTick+0x24>)
 80038b2:	6013      	str	r3, [r2, #0]
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20000018 	.word	0x20000018
 80038c4:	200002e4 	.word	0x200002e4

080038c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80038cc:	4b03      	ldr	r3, [pc, #12]	@ (80038dc <HAL_GetTick+0x14>)
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	200002e4 	.word	0x200002e4

080038e0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038e8:	f7ff ffee 	bl	80038c8 <HAL_GetTick>
 80038ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d005      	beq.n	8003906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003924 <HAL_Delay+0x44>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003906:	bf00      	nop
 8003908:	f7ff ffde 	bl	80038c8 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	429a      	cmp	r2, r3
 8003916:	d8f7      	bhi.n	8003908 <HAL_Delay+0x28>
  {
  }
}
 8003918:	bf00      	nop
 800391a:	bf00      	nop
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000018 	.word	0x20000018

08003928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003938:	4b0c      	ldr	r3, [pc, #48]	@ (800396c <__NVIC_SetPriorityGrouping+0x44>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003944:	4013      	ands	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003950:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800395a:	4a04      	ldr	r2, [pc, #16]	@ (800396c <__NVIC_SetPriorityGrouping+0x44>)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	60d3      	str	r3, [r2, #12]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003974:	4b04      	ldr	r3, [pc, #16]	@ (8003988 <__NVIC_GetPriorityGrouping+0x18>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	0a1b      	lsrs	r3, r3, #8
 800397a:	f003 0307 	and.w	r3, r3, #7
}
 800397e:	4618      	mov	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	2b00      	cmp	r3, #0
 800399c:	db0b      	blt.n	80039b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	f003 021f 	and.w	r2, r3, #31
 80039a4:	4907      	ldr	r1, [pc, #28]	@ (80039c4 <__NVIC_EnableIRQ+0x38>)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	2001      	movs	r0, #1
 80039ae:	fa00 f202 	lsl.w	r2, r0, r2
 80039b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	e000e100 	.word	0xe000e100

080039c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	db12      	blt.n	8003a00 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	f003 021f 	and.w	r2, r3, #31
 80039e0:	490a      	ldr	r1, [pc, #40]	@ (8003a0c <__NVIC_DisableIRQ+0x44>)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2001      	movs	r0, #1
 80039ea:	fa00 f202 	lsl.w	r2, r0, r2
 80039ee:	3320      	adds	r3, #32
 80039f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80039f4:	f3bf 8f4f 	dsb	sy
}
 80039f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039fa:	f3bf 8f6f 	isb	sy
}
 80039fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	e000e100 	.word	0xe000e100

08003a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	6039      	str	r1, [r7, #0]
 8003a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	db0a      	blt.n	8003a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	490c      	ldr	r1, [pc, #48]	@ (8003a5c <__NVIC_SetPriority+0x4c>)
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	0112      	lsls	r2, r2, #4
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	440b      	add	r3, r1
 8003a34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a38:	e00a      	b.n	8003a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4908      	ldr	r1, [pc, #32]	@ (8003a60 <__NVIC_SetPriority+0x50>)
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	3b04      	subs	r3, #4
 8003a48:	0112      	lsls	r2, r2, #4
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	761a      	strb	r2, [r3, #24]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000e100 	.word	0xe000e100
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b089      	sub	sp, #36	@ 0x24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f1c3 0307 	rsb	r3, r3, #7
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	bf28      	it	cs
 8003a82:	2304      	movcs	r3, #4
 8003a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	d902      	bls.n	8003a94 <NVIC_EncodePriority+0x30>
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3b03      	subs	r3, #3
 8003a92:	e000      	b.n	8003a96 <NVIC_EncodePriority+0x32>
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aac:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	43d9      	mvns	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003abc:	4313      	orrs	r3, r2
         );
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3724      	adds	r7, #36	@ 0x24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003adc:	d301      	bcc.n	8003ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e00f      	b.n	8003b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b0c <SysTick_Config+0x40>)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aea:	210f      	movs	r1, #15
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	f7ff ff8e 	bl	8003a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af4:	4b05      	ldr	r3, [pc, #20]	@ (8003b0c <SysTick_Config+0x40>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003afa:	4b04      	ldr	r3, [pc, #16]	@ (8003b0c <SysTick_Config+0x40>)
 8003afc:	2207      	movs	r2, #7
 8003afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	e000e010 	.word	0xe000e010

08003b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff05 	bl	8003928 <__NVIC_SetPriorityGrouping>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b086      	sub	sp, #24
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b38:	f7ff ff1a 	bl	8003970 <__NVIC_GetPriorityGrouping>
 8003b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	6978      	ldr	r0, [r7, #20]
 8003b44:	f7ff ff8e 	bl	8003a64 <NVIC_EncodePriority>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ff5d 	bl	8003a10 <__NVIC_SetPriority>
}
 8003b56:	bf00      	nop
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	4603      	mov	r3, r0
 8003b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ff0d 	bl	800398c <__NVIC_EnableIRQ>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	4603      	mov	r3, r0
 8003b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff ff1d 	bl	80039c8 <__NVIC_DisableIRQ>
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff ff94 	bl	8003acc <SysTick_Config>
 8003ba4:	4603      	mov	r3, r0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bbe:	e154      	b.n	8003e6a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bcc:	4013      	ands	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8146 	beq.w	8003e64 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d005      	beq.n	8003bf0 <HAL_GPIO_Init+0x40>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d130      	bne.n	8003c52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c26:	2201      	movs	r2, #1
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	f003 0201 	and.w	r2, r3, #1
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d017      	beq.n	8003c8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	2203      	movs	r2, #3
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d123      	bne.n	8003ce2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	08da      	lsrs	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3208      	adds	r2, #8
 8003ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	220f      	movs	r2, #15
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	08da      	lsrs	r2, r3, #3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3208      	adds	r2, #8
 8003cdc:	6939      	ldr	r1, [r7, #16]
 8003cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	2203      	movs	r2, #3
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 0203 	and.w	r2, r3, #3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 80a0 	beq.w	8003e64 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d24:	4b58      	ldr	r3, [pc, #352]	@ (8003e88 <HAL_GPIO_Init+0x2d8>)
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	4a57      	ldr	r2, [pc, #348]	@ (8003e88 <HAL_GPIO_Init+0x2d8>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6193      	str	r3, [r2, #24]
 8003d30:	4b55      	ldr	r3, [pc, #340]	@ (8003e88 <HAL_GPIO_Init+0x2d8>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d3c:	4a53      	ldr	r2, [pc, #332]	@ (8003e8c <HAL_GPIO_Init+0x2dc>)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	089b      	lsrs	r3, r3, #2
 8003d42:	3302      	adds	r3, #2
 8003d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	220f      	movs	r2, #15
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d66:	d019      	beq.n	8003d9c <HAL_GPIO_Init+0x1ec>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a49      	ldr	r2, [pc, #292]	@ (8003e90 <HAL_GPIO_Init+0x2e0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <HAL_GPIO_Init+0x1e8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a48      	ldr	r2, [pc, #288]	@ (8003e94 <HAL_GPIO_Init+0x2e4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00d      	beq.n	8003d94 <HAL_GPIO_Init+0x1e4>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a47      	ldr	r2, [pc, #284]	@ (8003e98 <HAL_GPIO_Init+0x2e8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <HAL_GPIO_Init+0x1e0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a46      	ldr	r2, [pc, #280]	@ (8003e9c <HAL_GPIO_Init+0x2ec>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d101      	bne.n	8003d8c <HAL_GPIO_Init+0x1dc>
 8003d88:	2304      	movs	r3, #4
 8003d8a:	e008      	b.n	8003d9e <HAL_GPIO_Init+0x1ee>
 8003d8c:	2305      	movs	r3, #5
 8003d8e:	e006      	b.n	8003d9e <HAL_GPIO_Init+0x1ee>
 8003d90:	2303      	movs	r3, #3
 8003d92:	e004      	b.n	8003d9e <HAL_GPIO_Init+0x1ee>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e002      	b.n	8003d9e <HAL_GPIO_Init+0x1ee>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <HAL_GPIO_Init+0x1ee>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	f002 0203 	and.w	r2, r2, #3
 8003da4:	0092      	lsls	r2, r2, #2
 8003da6:	4093      	lsls	r3, r2
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dae:	4937      	ldr	r1, [pc, #220]	@ (8003e8c <HAL_GPIO_Init+0x2dc>)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	089b      	lsrs	r3, r3, #2
 8003db4:	3302      	adds	r3, #2
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dbc:	4b38      	ldr	r3, [pc, #224]	@ (8003ea0 <HAL_GPIO_Init+0x2f0>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003de0:	4a2f      	ldr	r2, [pc, #188]	@ (8003ea0 <HAL_GPIO_Init+0x2f0>)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003de6:	4b2e      	ldr	r3, [pc, #184]	@ (8003ea0 <HAL_GPIO_Init+0x2f0>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4013      	ands	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e0a:	4a25      	ldr	r2, [pc, #148]	@ (8003ea0 <HAL_GPIO_Init+0x2f0>)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e10:	4b23      	ldr	r3, [pc, #140]	@ (8003ea0 <HAL_GPIO_Init+0x2f0>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e34:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea0 <HAL_GPIO_Init+0x2f0>)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e3a:	4b19      	ldr	r3, [pc, #100]	@ (8003ea0 <HAL_GPIO_Init+0x2f0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e5e:	4a10      	ldr	r2, [pc, #64]	@ (8003ea0 <HAL_GPIO_Init+0x2f0>)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	3301      	adds	r3, #1
 8003e68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f47f aea3 	bne.w	8003bc0 <HAL_GPIO_Init+0x10>
  }
}
 8003e7a:	bf00      	nop
 8003e7c:	bf00      	nop
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	48000400 	.word	0x48000400
 8003e94:	48000800 	.word	0x48000800
 8003e98:	48000c00 	.word	0x48000c00
 8003e9c:	48001000 	.word	0x48001000
 8003ea0:	40010400 	.word	0x40010400

08003ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	807b      	strh	r3, [r7, #2]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb4:	787b      	ldrb	r3, [r7, #1]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eba:	887a      	ldrh	r2, [r7, #2]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ec0:	e002      	b.n	8003ec8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ec2:	887a      	ldrh	r2, [r7, #2]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ede:	4b08      	ldr	r3, [pc, #32]	@ (8003f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d006      	beq.n	8003ef8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eea:	4a05      	ldr	r2, [pc, #20]	@ (8003f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eec:	88fb      	ldrh	r3, [r7, #6]
 8003eee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ef0:	88fb      	ldrh	r3, [r7, #6]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fc ff54 	bl	8000da0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40010400 	.word	0x40010400

08003f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e08d      	b.n	8004032 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff f906 	bl	800313c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2224      	movs	r2, #36	@ 0x24
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0201 	bic.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d107      	bne.n	8003f7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f7a:	609a      	str	r2, [r3, #8]
 8003f7c:	e006      	b.n	8003f8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d108      	bne.n	8003fa6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fa2:	605a      	str	r2, [r3, #4]
 8003fa4:	e007      	b.n	8003fb6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69d9      	ldr	r1, [r3, #28]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1a      	ldr	r2, [r3, #32]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af02      	add	r7, sp, #8
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	4608      	mov	r0, r1
 8004046:	4611      	mov	r1, r2
 8004048:	461a      	mov	r2, r3
 800404a:	4603      	mov	r3, r0
 800404c:	817b      	strh	r3, [r7, #10]
 800404e:	460b      	mov	r3, r1
 8004050:	813b      	strh	r3, [r7, #8]
 8004052:	4613      	mov	r3, r2
 8004054:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b20      	cmp	r3, #32
 8004060:	f040 80f9 	bne.w	8004256 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_I2C_Mem_Write+0x34>
 800406a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800406c:	2b00      	cmp	r3, #0
 800406e:	d105      	bne.n	800407c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004076:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0ed      	b.n	8004258 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_I2C_Mem_Write+0x4e>
 8004086:	2302      	movs	r3, #2
 8004088:	e0e6      	b.n	8004258 <HAL_I2C_Mem_Write+0x21c>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004092:	f7ff fc19 	bl	80038c8 <HAL_GetTick>
 8004096:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2319      	movs	r3, #25
 800409e:	2201      	movs	r2, #1
 80040a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fac3 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0d1      	b.n	8004258 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2221      	movs	r2, #33	@ 0x21
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2240      	movs	r2, #64	@ 0x40
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a3a      	ldr	r2, [r7, #32]
 80040ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040dc:	88f8      	ldrh	r0, [r7, #6]
 80040de:	893a      	ldrh	r2, [r7, #8]
 80040e0:	8979      	ldrh	r1, [r7, #10]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	4603      	mov	r3, r0
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f9d3 	bl	8004498 <I2C_RequestMemoryWrite>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0a9      	b.n	8004258 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004108:	b29b      	uxth	r3, r3
 800410a:	2bff      	cmp	r3, #255	@ 0xff
 800410c:	d90e      	bls.n	800412c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	22ff      	movs	r2, #255	@ 0xff
 8004112:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004118:	b2da      	uxtb	r2, r3
 800411a:	8979      	ldrh	r1, [r7, #10]
 800411c:	2300      	movs	r3, #0
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 fc47 	bl	80049b8 <I2C_TransferConfig>
 800412a:	e00f      	b.n	800414c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413a:	b2da      	uxtb	r2, r3
 800413c:	8979      	ldrh	r1, [r7, #10]
 800413e:	2300      	movs	r3, #0
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fc36 	bl	80049b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fac6 	bl	80046e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e07b      	b.n	8004258 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	781a      	ldrb	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d034      	beq.n	8004204 <HAL_I2C_Mem_Write+0x1c8>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d130      	bne.n	8004204 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a8:	2200      	movs	r2, #0
 80041aa:	2180      	movs	r1, #128	@ 0x80
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 fa3f 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e04d      	b.n	8004258 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2bff      	cmp	r3, #255	@ 0xff
 80041c4:	d90e      	bls.n	80041e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	22ff      	movs	r2, #255	@ 0xff
 80041ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	8979      	ldrh	r1, [r7, #10]
 80041d4:	2300      	movs	r3, #0
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fbeb 	bl	80049b8 <I2C_TransferConfig>
 80041e2:	e00f      	b.n	8004204 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	8979      	ldrh	r1, [r7, #10]
 80041f6:	2300      	movs	r3, #0
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fbda 	bl	80049b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d19e      	bne.n	800414c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 faac 	bl	8004770 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e01a      	b.n	8004258 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2220      	movs	r2, #32
 8004228:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6859      	ldr	r1, [r3, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4b0a      	ldr	r3, [pc, #40]	@ (8004260 <HAL_I2C_Mem_Write+0x224>)
 8004236:	400b      	ands	r3, r1
 8004238:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	e000      	b.n	8004258 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004256:	2302      	movs	r3, #2
  }
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	fe00e800 	.word	0xfe00e800

08004264 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	4608      	mov	r0, r1
 800426e:	4611      	mov	r1, r2
 8004270:	461a      	mov	r2, r3
 8004272:	4603      	mov	r3, r0
 8004274:	817b      	strh	r3, [r7, #10]
 8004276:	460b      	mov	r3, r1
 8004278:	813b      	strh	r3, [r7, #8]
 800427a:	4613      	mov	r3, r2
 800427c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b20      	cmp	r3, #32
 8004288:	f040 80fd 	bne.w	8004486 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_I2C_Mem_Read+0x34>
 8004292:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004294:	2b00      	cmp	r3, #0
 8004296:	d105      	bne.n	80042a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800429e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0f1      	b.n	8004488 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_I2C_Mem_Read+0x4e>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e0ea      	b.n	8004488 <HAL_I2C_Mem_Read+0x224>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042ba:	f7ff fb05 	bl	80038c8 <HAL_GetTick>
 80042be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	2319      	movs	r3, #25
 80042c6:	2201      	movs	r2, #1
 80042c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f9af 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0d5      	b.n	8004488 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2222      	movs	r2, #34	@ 0x22
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2240      	movs	r2, #64	@ 0x40
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a3a      	ldr	r2, [r7, #32]
 80042f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004304:	88f8      	ldrh	r0, [r7, #6]
 8004306:	893a      	ldrh	r2, [r7, #8]
 8004308:	8979      	ldrh	r1, [r7, #10]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	4603      	mov	r3, r0
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f913 	bl	8004540 <I2C_RequestMemoryRead>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0ad      	b.n	8004488 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	2bff      	cmp	r3, #255	@ 0xff
 8004334:	d90e      	bls.n	8004354 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004340:	b2da      	uxtb	r2, r3
 8004342:	8979      	ldrh	r1, [r7, #10]
 8004344:	4b52      	ldr	r3, [pc, #328]	@ (8004490 <HAL_I2C_Mem_Read+0x22c>)
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 fb33 	bl	80049b8 <I2C_TransferConfig>
 8004352:	e00f      	b.n	8004374 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004362:	b2da      	uxtb	r2, r3
 8004364:	8979      	ldrh	r1, [r7, #10]
 8004366:	4b4a      	ldr	r3, [pc, #296]	@ (8004490 <HAL_I2C_Mem_Read+0x22c>)
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fb22 	bl	80049b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437a:	2200      	movs	r2, #0
 800437c:	2104      	movs	r1, #4
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f956 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e07c      	b.n	8004488 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d034      	beq.n	8004434 <HAL_I2C_Mem_Read+0x1d0>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d130      	bne.n	8004434 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d8:	2200      	movs	r2, #0
 80043da:	2180      	movs	r1, #128	@ 0x80
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f927 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e04d      	b.n	8004488 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2bff      	cmp	r3, #255	@ 0xff
 80043f4:	d90e      	bls.n	8004414 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004400:	b2da      	uxtb	r2, r3
 8004402:	8979      	ldrh	r1, [r7, #10]
 8004404:	2300      	movs	r3, #0
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fad3 	bl	80049b8 <I2C_TransferConfig>
 8004412:	e00f      	b.n	8004434 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004422:	b2da      	uxtb	r2, r3
 8004424:	8979      	ldrh	r1, [r7, #10]
 8004426:	2300      	movs	r3, #0
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fac2 	bl	80049b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d19a      	bne.n	8004374 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f994 	bl	8004770 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e01a      	b.n	8004488 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2220      	movs	r2, #32
 8004458:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <HAL_I2C_Mem_Read+0x230>)
 8004466:	400b      	ands	r3, r1
 8004468:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	e000      	b.n	8004488 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004486:	2302      	movs	r3, #2
  }
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	80002400 	.word	0x80002400
 8004494:	fe00e800 	.word	0xfe00e800

08004498 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	4608      	mov	r0, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	461a      	mov	r2, r3
 80044a6:	4603      	mov	r3, r0
 80044a8:	817b      	strh	r3, [r7, #10]
 80044aa:	460b      	mov	r3, r1
 80044ac:	813b      	strh	r3, [r7, #8]
 80044ae:	4613      	mov	r3, r2
 80044b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	8979      	ldrh	r1, [r7, #10]
 80044b8:	4b20      	ldr	r3, [pc, #128]	@ (800453c <I2C_RequestMemoryWrite+0xa4>)
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fa79 	bl	80049b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	69b9      	ldr	r1, [r7, #24]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f909 	bl	80046e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e02c      	b.n	8004534 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d105      	bne.n	80044ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044e0:	893b      	ldrh	r3, [r7, #8]
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80044ea:	e015      	b.n	8004518 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044ec:	893b      	ldrh	r3, [r7, #8]
 80044ee:	0a1b      	lsrs	r3, r3, #8
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044fa:	69fa      	ldr	r2, [r7, #28]
 80044fc:	69b9      	ldr	r1, [r7, #24]
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f8ef 	bl	80046e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e012      	b.n	8004534 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800450e:	893b      	ldrh	r3, [r7, #8]
 8004510:	b2da      	uxtb	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2200      	movs	r2, #0
 8004520:	2180      	movs	r1, #128	@ 0x80
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f884 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	80002000 	.word	0x80002000

08004540 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	4608      	mov	r0, r1
 800454a:	4611      	mov	r1, r2
 800454c:	461a      	mov	r2, r3
 800454e:	4603      	mov	r3, r0
 8004550:	817b      	strh	r3, [r7, #10]
 8004552:	460b      	mov	r3, r1
 8004554:	813b      	strh	r3, [r7, #8]
 8004556:	4613      	mov	r3, r2
 8004558:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800455a:	88fb      	ldrh	r3, [r7, #6]
 800455c:	b2da      	uxtb	r2, r3
 800455e:	8979      	ldrh	r1, [r7, #10]
 8004560:	4b20      	ldr	r3, [pc, #128]	@ (80045e4 <I2C_RequestMemoryRead+0xa4>)
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	2300      	movs	r3, #0
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fa26 	bl	80049b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	69b9      	ldr	r1, [r7, #24]
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f8b6 	bl	80046e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e02c      	b.n	80045da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004580:	88fb      	ldrh	r3, [r7, #6]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d105      	bne.n	8004592 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004586:	893b      	ldrh	r3, [r7, #8]
 8004588:	b2da      	uxtb	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004590:	e015      	b.n	80045be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004592:	893b      	ldrh	r3, [r7, #8]
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	b29b      	uxth	r3, r3
 8004598:	b2da      	uxtb	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	69b9      	ldr	r1, [r7, #24]
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f89c 	bl	80046e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e012      	b.n	80045da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045b4:	893b      	ldrh	r3, [r7, #8]
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	2200      	movs	r2, #0
 80045c6:	2140      	movs	r1, #64	@ 0x40
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f831 	bl	8004630 <I2C_WaitOnFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	80002000 	.word	0x80002000

080045e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d103      	bne.n	8004606 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2200      	movs	r2, #0
 8004604:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b01      	cmp	r3, #1
 8004612:	d007      	beq.n	8004624 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	619a      	str	r2, [r3, #24]
  }
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	4613      	mov	r3, r2
 800463e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004640:	e03b      	b.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	6839      	ldr	r1, [r7, #0]
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f8d6 	bl	80047f8 <I2C_IsErrorOccurred>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e041      	b.n	80046da <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d02d      	beq.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465e:	f7ff f933 	bl	80038c8 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d302      	bcc.n	8004674 <I2C_WaitOnFlagUntilTimeout+0x44>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d122      	bne.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4013      	ands	r3, r2
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	429a      	cmp	r2, r3
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	429a      	cmp	r2, r3
 8004690:	d113      	bne.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004696:	f043 0220 	orr.w	r2, r3, #32
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e00f      	b.n	80046da <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699a      	ldr	r2, [r3, #24]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4013      	ands	r3, r2
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	bf0c      	ite	eq
 80046ca:	2301      	moveq	r3, #1
 80046cc:	2300      	movne	r3, #0
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d0b4      	beq.n	8004642 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046ee:	e033      	b.n	8004758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f87f 	bl	80047f8 <I2C_IsErrorOccurred>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e031      	b.n	8004768 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470a:	d025      	beq.n	8004758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470c:	f7ff f8dc 	bl	80038c8 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	d302      	bcc.n	8004722 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d11a      	bne.n	8004758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b02      	cmp	r3, #2
 800472e:	d013      	beq.n	8004758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004734:	f043 0220 	orr.w	r2, r3, #32
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e007      	b.n	8004768 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d1c4      	bne.n	80046f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800477c:	e02f      	b.n	80047de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f838 	bl	80047f8 <I2C_IsErrorOccurred>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e02d      	b.n	80047ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004792:	f7ff f899 	bl	80038c8 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d302      	bcc.n	80047a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d11a      	bne.n	80047de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d013      	beq.n	80047de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e007      	b.n	80047ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d1c8      	bne.n	800477e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08a      	sub	sp, #40	@ 0x28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b00      	cmp	r3, #0
 8004822:	d068      	beq.n	80048f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2210      	movs	r2, #16
 800482a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800482c:	e049      	b.n	80048c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004834:	d045      	beq.n	80048c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004836:	f7ff f847 	bl	80038c8 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	429a      	cmp	r2, r3
 8004844:	d302      	bcc.n	800484c <I2C_IsErrorOccurred+0x54>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d13a      	bne.n	80048c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004856:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800485e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800486a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800486e:	d121      	bne.n	80048b4 <I2C_IsErrorOccurred+0xbc>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004876:	d01d      	beq.n	80048b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004878:	7cfb      	ldrb	r3, [r7, #19]
 800487a:	2b20      	cmp	r3, #32
 800487c:	d01a      	beq.n	80048b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800488c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800488e:	f7ff f81b 	bl	80038c8 <HAL_GetTick>
 8004892:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004894:	e00e      	b.n	80048b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004896:	f7ff f817 	bl	80038c8 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b19      	cmp	r3, #25
 80048a2:	d907      	bls.n	80048b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	f043 0320 	orr.w	r3, r3, #32
 80048aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80048b2:	e006      	b.n	80048c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d1e9      	bne.n	8004896 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f003 0320 	and.w	r3, r3, #32
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d003      	beq.n	80048d8 <I2C_IsErrorOccurred+0xe0>
 80048d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0aa      	beq.n	800482e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80048d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d103      	bne.n	80048e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2220      	movs	r2, #32
 80048e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	f043 0304 	orr.w	r3, r3, #4
 80048ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00b      	beq.n	8004920 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004918:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	f043 0308 	orr.w	r3, r3, #8
 8004930:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800493a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00b      	beq.n	8004964 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	f043 0302 	orr.w	r3, r3, #2
 8004952:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800495c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01c      	beq.n	80049a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff fe3b 	bl	80045e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6859      	ldr	r1, [r3, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4b0d      	ldr	r3, [pc, #52]	@ (80049b4 <I2C_IsErrorOccurred+0x1bc>)
 800497e:	400b      	ands	r3, r1
 8004980:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	431a      	orrs	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80049a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3728      	adds	r7, #40	@ 0x28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	fe00e800 	.word	0xfe00e800

080049b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	607b      	str	r3, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	817b      	strh	r3, [r7, #10]
 80049c6:	4613      	mov	r3, r2
 80049c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049ca:	897b      	ldrh	r3, [r7, #10]
 80049cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049d0:	7a7b      	ldrb	r3, [r7, #9]
 80049d2:	041b      	lsls	r3, r3, #16
 80049d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	0d5b      	lsrs	r3, r3, #21
 80049f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80049f6:	4b08      	ldr	r3, [pc, #32]	@ (8004a18 <I2C_TransferConfig+0x60>)
 80049f8:	430b      	orrs	r3, r1
 80049fa:	43db      	mvns	r3, r3
 80049fc:	ea02 0103 	and.w	r1, r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	03ff63ff 	.word	0x03ff63ff

08004a1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d138      	bne.n	8004aa4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e032      	b.n	8004aa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2224      	movs	r2, #36	@ 0x24
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6819      	ldr	r1, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e000      	b.n	8004aa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
  }
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d139      	bne.n	8004b3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e033      	b.n	8004b3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2224      	movs	r2, #36	@ 0x24
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0201 	bic.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e000      	b.n	8004b3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
  }
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
	...

08004b4c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b54:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	4a0a      	ldr	r2, [pc, #40]	@ (8004b84 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	6193      	str	r3, [r2, #24]
 8004b60:	4b08      	ldr	r3, [pc, #32]	@ (8004b84 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8004b6c:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4905      	ldr	r1, [pc, #20]	@ (8004b88 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	40021000 	.word	0x40021000
 8004b88:	40010000 	.word	0x40010000

08004b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b9c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f001 b823 	b.w	8005bf8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 817d 	beq.w	8004ec2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004bc8:	4bbc      	ldr	r3, [pc, #752]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 030c 	and.w	r3, r3, #12
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d00c      	beq.n	8004bee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bd4:	4bb9      	ldr	r3, [pc, #740]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f003 030c 	and.w	r3, r3, #12
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d15c      	bne.n	8004c9a <HAL_RCC_OscConfig+0x10e>
 8004be0:	4bb6      	ldr	r3, [pc, #728]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bec:	d155      	bne.n	8004c9a <HAL_RCC_OscConfig+0x10e>
 8004bee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004bf2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8004bfa:	fa93 f3a3 	rbit	r3, r3
 8004bfe:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c06:	fab3 f383 	clz	r3, r3
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	095b      	lsrs	r3, r3, #5
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d102      	bne.n	8004c20 <HAL_RCC_OscConfig+0x94>
 8004c1a:	4ba8      	ldr	r3, [pc, #672]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	e015      	b.n	8004c4c <HAL_RCC_OscConfig+0xc0>
 8004c20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c24:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c28:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004c2c:	fa93 f3a3 	rbit	r3, r3
 8004c30:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004c34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c38:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004c3c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004c40:	fa93 f3a3 	rbit	r3, r3
 8004c44:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004c48:	4b9c      	ldr	r3, [pc, #624]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c50:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8004c54:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004c58:	fa92 f2a2 	rbit	r2, r2
 8004c5c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004c60:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004c64:	fab2 f282 	clz	r2, r2
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	f042 0220 	orr.w	r2, r2, #32
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	f002 021f 	and.w	r2, r2, #31
 8004c74:	2101      	movs	r1, #1
 8004c76:	fa01 f202 	lsl.w	r2, r1, r2
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 811f 	beq.w	8004ec0 <HAL_RCC_OscConfig+0x334>
 8004c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f040 8116 	bne.w	8004ec0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	f000 bfaf 	b.w	8005bf8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004caa:	d106      	bne.n	8004cba <HAL_RCC_OscConfig+0x12e>
 8004cac:	4b83      	ldr	r3, [pc, #524]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a82      	ldr	r2, [pc, #520]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004cb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	e036      	b.n	8004d28 <HAL_RCC_OscConfig+0x19c>
 8004cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x158>
 8004cca:	4b7c      	ldr	r3, [pc, #496]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a7b      	ldr	r2, [pc, #492]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004cd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	4b79      	ldr	r3, [pc, #484]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a78      	ldr	r2, [pc, #480]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004cdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	e021      	b.n	8004d28 <HAL_RCC_OscConfig+0x19c>
 8004ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ce8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x184>
 8004cf6:	4b71      	ldr	r3, [pc, #452]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a70      	ldr	r2, [pc, #448]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004cfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	4b6e      	ldr	r3, [pc, #440]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a6d      	ldr	r2, [pc, #436]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e00b      	b.n	8004d28 <HAL_RCC_OscConfig+0x19c>
 8004d10:	4b6a      	ldr	r3, [pc, #424]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a69      	ldr	r2, [pc, #420]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	4b67      	ldr	r3, [pc, #412]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a66      	ldr	r2, [pc, #408]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004d22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d26:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d28:	4b64      	ldr	r3, [pc, #400]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	f023 020f 	bic.w	r2, r3, #15
 8004d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	495f      	ldr	r1, [pc, #380]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d059      	beq.n	8004e06 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d52:	f7fe fdb9 	bl	80038c8 <HAL_GetTick>
 8004d56:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	e00a      	b.n	8004d72 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d5c:	f7fe fdb4 	bl	80038c8 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b64      	cmp	r3, #100	@ 0x64
 8004d6a:	d902      	bls.n	8004d72 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	f000 bf43 	b.w	8005bf8 <HAL_RCC_OscConfig+0x106c>
 8004d72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d76:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8004d7e:	fa93 f3a3 	rbit	r3, r3
 8004d82:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8004d86:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8a:	fab3 f383 	clz	r3, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d102      	bne.n	8004da4 <HAL_RCC_OscConfig+0x218>
 8004d9e:	4b47      	ldr	r3, [pc, #284]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	e015      	b.n	8004dd0 <HAL_RCC_OscConfig+0x244>
 8004da4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004da8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004db0:	fa93 f3a3 	rbit	r3, r3
 8004db4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004db8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004dbc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004dc0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004dc4:	fa93 f3a3 	rbit	r3, r3
 8004dc8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004dd4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004dd8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004ddc:	fa92 f2a2 	rbit	r2, r2
 8004de0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004de4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004de8:	fab2 f282 	clz	r2, r2
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	f042 0220 	orr.w	r2, r2, #32
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	f002 021f 	and.w	r2, r2, #31
 8004df8:	2101      	movs	r1, #1
 8004dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0ab      	beq.n	8004d5c <HAL_RCC_OscConfig+0x1d0>
 8004e04:	e05d      	b.n	8004ec2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e06:	f7fe fd5f 	bl	80038c8 <HAL_GetTick>
 8004e0a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e0e:	e00a      	b.n	8004e26 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e10:	f7fe fd5a 	bl	80038c8 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b64      	cmp	r3, #100	@ 0x64
 8004e1e:	d902      	bls.n	8004e26 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	f000 bee9 	b.w	8005bf8 <HAL_RCC_OscConfig+0x106c>
 8004e26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e2a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004e32:	fa93 f3a3 	rbit	r3, r3
 8004e36:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8004e3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e3e:	fab3 f383 	clz	r3, r3
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d102      	bne.n	8004e58 <HAL_RCC_OscConfig+0x2cc>
 8004e52:	4b1a      	ldr	r3, [pc, #104]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	e015      	b.n	8004e84 <HAL_RCC_OscConfig+0x2f8>
 8004e58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e5c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e60:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004e64:	fa93 f3a3 	rbit	r3, r3
 8004e68:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004e6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e70:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004e74:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004e78:	fa93 f3a3 	rbit	r3, r3
 8004e7c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004e80:	4b0e      	ldr	r3, [pc, #56]	@ (8004ebc <HAL_RCC_OscConfig+0x330>)
 8004e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e84:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004e88:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8004e8c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004e90:	fa92 f2a2 	rbit	r2, r2
 8004e94:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8004e98:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004e9c:	fab2 f282 	clz	r2, r2
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	f042 0220 	orr.w	r2, r2, #32
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	f002 021f 	and.w	r2, r2, #31
 8004eac:	2101      	movs	r1, #1
 8004eae:	fa01 f202 	lsl.w	r2, r1, r2
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1ab      	bne.n	8004e10 <HAL_RCC_OscConfig+0x284>
 8004eb8:	e003      	b.n	8004ec2 <HAL_RCC_OscConfig+0x336>
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ec6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 817d 	beq.w	80051d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004ed8:	4ba6      	ldr	r3, [pc, #664]	@ (8005174 <HAL_RCC_OscConfig+0x5e8>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 030c 	and.w	r3, r3, #12
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00b      	beq.n	8004efc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ee4:	4ba3      	ldr	r3, [pc, #652]	@ (8005174 <HAL_RCC_OscConfig+0x5e8>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 030c 	and.w	r3, r3, #12
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d172      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x44a>
 8004ef0:	4ba0      	ldr	r3, [pc, #640]	@ (8005174 <HAL_RCC_OscConfig+0x5e8>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d16c      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x44a>
 8004efc:	2302      	movs	r3, #2
 8004efe:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f02:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004f06:	fa93 f3a3 	rbit	r3, r3
 8004f0a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8004f0e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f12:	fab3 f383 	clz	r3, r3
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	095b      	lsrs	r3, r3, #5
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	f043 0301 	orr.w	r3, r3, #1
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d102      	bne.n	8004f2c <HAL_RCC_OscConfig+0x3a0>
 8004f26:	4b93      	ldr	r3, [pc, #588]	@ (8005174 <HAL_RCC_OscConfig+0x5e8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	e013      	b.n	8004f54 <HAL_RCC_OscConfig+0x3c8>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f32:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004f36:	fa93 f3a3 	rbit	r3, r3
 8004f3a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004f3e:	2302      	movs	r3, #2
 8004f40:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004f44:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004f48:	fa93 f3a3 	rbit	r3, r3
 8004f4c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004f50:	4b88      	ldr	r3, [pc, #544]	@ (8005174 <HAL_RCC_OscConfig+0x5e8>)
 8004f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f54:	2202      	movs	r2, #2
 8004f56:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004f5a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004f5e:	fa92 f2a2 	rbit	r2, r2
 8004f62:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8004f66:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004f6a:	fab2 f282 	clz	r2, r2
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	f042 0220 	orr.w	r2, r2, #32
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	f002 021f 	and.w	r2, r2, #31
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f80:	4013      	ands	r3, r2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_RCC_OscConfig+0x410>
 8004f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d002      	beq.n	8004f9c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f000 be2e 	b.w	8005bf8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9c:	4b75      	ldr	r3, [pc, #468]	@ (8005174 <HAL_RCC_OscConfig+0x5e8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fa8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	21f8      	movs	r1, #248	@ 0xf8
 8004fb2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004fba:	fa91 f1a1 	rbit	r1, r1
 8004fbe:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004fc2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004fc6:	fab1 f181 	clz	r1, r1
 8004fca:	b2c9      	uxtb	r1, r1
 8004fcc:	408b      	lsls	r3, r1
 8004fce:	4969      	ldr	r1, [pc, #420]	@ (8005174 <HAL_RCC_OscConfig+0x5e8>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd4:	e0fd      	b.n	80051d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 8088 	beq.w	80050f8 <HAL_RCC_OscConfig+0x56c>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fee:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004ff2:	fa93 f3a3 	rbit	r3, r3
 8004ff6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8004ffa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ffe:	fab3 f383 	clz	r3, r3
 8005002:	b2db      	uxtb	r3, r3
 8005004:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005008:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	461a      	mov	r2, r3
 8005010:	2301      	movs	r3, #1
 8005012:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005014:	f7fe fc58 	bl	80038c8 <HAL_GetTick>
 8005018:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501c:	e00a      	b.n	8005034 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800501e:	f7fe fc53 	bl	80038c8 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d902      	bls.n	8005034 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	f000 bde2 	b.w	8005bf8 <HAL_RCC_OscConfig+0x106c>
 8005034:	2302      	movs	r3, #2
 8005036:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800503e:	fa93 f3a3 	rbit	r3, r3
 8005042:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8005046:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800504a:	fab3 f383 	clz	r3, r3
 800504e:	b2db      	uxtb	r3, r3
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b01      	cmp	r3, #1
 800505c:	d102      	bne.n	8005064 <HAL_RCC_OscConfig+0x4d8>
 800505e:	4b45      	ldr	r3, [pc, #276]	@ (8005174 <HAL_RCC_OscConfig+0x5e8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	e013      	b.n	800508c <HAL_RCC_OscConfig+0x500>
 8005064:	2302      	movs	r3, #2
 8005066:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800506e:	fa93 f3a3 	rbit	r3, r3
 8005072:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005076:	2302      	movs	r3, #2
 8005078:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800507c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8005080:	fa93 f3a3 	rbit	r3, r3
 8005084:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8005088:	4b3a      	ldr	r3, [pc, #232]	@ (8005174 <HAL_RCC_OscConfig+0x5e8>)
 800508a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508c:	2202      	movs	r2, #2
 800508e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8005092:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8005096:	fa92 f2a2 	rbit	r2, r2
 800509a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800509e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80050a2:	fab2 f282 	clz	r2, r2
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	f042 0220 	orr.w	r2, r2, #32
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	f002 021f 	and.w	r2, r2, #31
 80050b2:	2101      	movs	r1, #1
 80050b4:	fa01 f202 	lsl.w	r2, r1, r2
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0af      	beq.n	800501e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050be:	4b2d      	ldr	r3, [pc, #180]	@ (8005174 <HAL_RCC_OscConfig+0x5e8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	21f8      	movs	r1, #248	@ 0xf8
 80050d4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80050dc:	fa91 f1a1 	rbit	r1, r1
 80050e0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80050e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80050e8:	fab1 f181 	clz	r1, r1
 80050ec:	b2c9      	uxtb	r1, r1
 80050ee:	408b      	lsls	r3, r1
 80050f0:	4920      	ldr	r1, [pc, #128]	@ (8005174 <HAL_RCC_OscConfig+0x5e8>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	600b      	str	r3, [r1, #0]
 80050f6:	e06c      	b.n	80051d2 <HAL_RCC_OscConfig+0x646>
 80050f8:	2301      	movs	r3, #1
 80050fa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005102:	fa93 f3a3 	rbit	r3, r3
 8005106:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800510a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800510e:	fab3 f383 	clz	r3, r3
 8005112:	b2db      	uxtb	r3, r3
 8005114:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005118:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	461a      	mov	r2, r3
 8005120:	2300      	movs	r3, #0
 8005122:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005124:	f7fe fbd0 	bl	80038c8 <HAL_GetTick>
 8005128:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800512c:	e00a      	b.n	8005144 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800512e:	f7fe fbcb 	bl	80038c8 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d902      	bls.n	8005144 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	f000 bd5a 	b.w	8005bf8 <HAL_RCC_OscConfig+0x106c>
 8005144:	2302      	movs	r3, #2
 8005146:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800514e:	fa93 f3a3 	rbit	r3, r3
 8005152:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8005156:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515a:	fab3 f383 	clz	r3, r3
 800515e:	b2db      	uxtb	r3, r3
 8005160:	095b      	lsrs	r3, r3, #5
 8005162:	b2db      	uxtb	r3, r3
 8005164:	f043 0301 	orr.w	r3, r3, #1
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b01      	cmp	r3, #1
 800516c:	d104      	bne.n	8005178 <HAL_RCC_OscConfig+0x5ec>
 800516e:	4b01      	ldr	r3, [pc, #4]	@ (8005174 <HAL_RCC_OscConfig+0x5e8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	e015      	b.n	80051a0 <HAL_RCC_OscConfig+0x614>
 8005174:	40021000 	.word	0x40021000
 8005178:	2302      	movs	r3, #2
 800517a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005182:	fa93 f3a3 	rbit	r3, r3
 8005186:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800518a:	2302      	movs	r3, #2
 800518c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005190:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005194:	fa93 f3a3 	rbit	r3, r3
 8005198:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800519c:	4bc8      	ldr	r3, [pc, #800]	@ (80054c0 <HAL_RCC_OscConfig+0x934>)
 800519e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a0:	2202      	movs	r2, #2
 80051a2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80051a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80051aa:	fa92 f2a2 	rbit	r2, r2
 80051ae:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80051b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80051b6:	fab2 f282 	clz	r2, r2
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	f042 0220 	orr.w	r2, r2, #32
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	f002 021f 	and.w	r2, r2, #31
 80051c6:	2101      	movs	r1, #1
 80051c8:	fa01 f202 	lsl.w	r2, r1, r2
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1ad      	bne.n	800512e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 8110 	beq.w	8005408 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d079      	beq.n	80052ec <HAL_RCC_OscConfig+0x760>
 80051f8:	2301      	movs	r3, #1
 80051fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005202:	fa93 f3a3 	rbit	r3, r3
 8005206:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800520a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800520e:	fab3 f383 	clz	r3, r3
 8005212:	b2db      	uxtb	r3, r3
 8005214:	461a      	mov	r2, r3
 8005216:	4bab      	ldr	r3, [pc, #684]	@ (80054c4 <HAL_RCC_OscConfig+0x938>)
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	461a      	mov	r2, r3
 800521e:	2301      	movs	r3, #1
 8005220:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005222:	f7fe fb51 	bl	80038c8 <HAL_GetTick>
 8005226:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522a:	e00a      	b.n	8005242 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800522c:	f7fe fb4c 	bl	80038c8 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d902      	bls.n	8005242 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	f000 bcdb 	b.w	8005bf8 <HAL_RCC_OscConfig+0x106c>
 8005242:	2302      	movs	r3, #2
 8005244:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005248:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800524c:	fa93 f3a3 	rbit	r3, r3
 8005250:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005258:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800525c:	2202      	movs	r2, #2
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005264:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	fa93 f2a3 	rbit	r2, r3
 800526e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005272:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800527c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005280:	2202      	movs	r2, #2
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	fa93 f2a3 	rbit	r2, r3
 8005292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005296:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800529a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800529c:	4b88      	ldr	r3, [pc, #544]	@ (80054c0 <HAL_RCC_OscConfig+0x934>)
 800529e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80052a8:	2102      	movs	r1, #2
 80052aa:	6019      	str	r1, [r3, #0]
 80052ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	fa93 f1a3 	rbit	r1, r3
 80052ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80052c2:	6019      	str	r1, [r3, #0]
  return result;
 80052c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	fab3 f383 	clz	r3, r3
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	f003 031f 	and.w	r3, r3, #31
 80052de:	2101      	movs	r1, #1
 80052e0:	fa01 f303 	lsl.w	r3, r1, r3
 80052e4:	4013      	ands	r3, r2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0a0      	beq.n	800522c <HAL_RCC_OscConfig+0x6a0>
 80052ea:	e08d      	b.n	8005408 <HAL_RCC_OscConfig+0x87c>
 80052ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80052f4:	2201      	movs	r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052fc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	fa93 f2a3 	rbit	r2, r3
 8005306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800530a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800530e:	601a      	str	r2, [r3, #0]
  return result;
 8005310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005314:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005318:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800531a:	fab3 f383 	clz	r3, r3
 800531e:	b2db      	uxtb	r3, r3
 8005320:	461a      	mov	r2, r3
 8005322:	4b68      	ldr	r3, [pc, #416]	@ (80054c4 <HAL_RCC_OscConfig+0x938>)
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	461a      	mov	r2, r3
 800532a:	2300      	movs	r3, #0
 800532c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800532e:	f7fe facb 	bl	80038c8 <HAL_GetTick>
 8005332:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005336:	e00a      	b.n	800534e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005338:	f7fe fac6 	bl	80038c8 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d902      	bls.n	800534e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	f000 bc55 	b.w	8005bf8 <HAL_RCC_OscConfig+0x106c>
 800534e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005352:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005356:	2202      	movs	r2, #2
 8005358:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800535e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	fa93 f2a3 	rbit	r2, r3
 8005368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800536c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005376:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800537a:	2202      	movs	r2, #2
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005382:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	fa93 f2a3 	rbit	r2, r3
 800538c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005390:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800539a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800539e:	2202      	movs	r2, #2
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053a6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	fa93 f2a3 	rbit	r2, r3
 80053b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80053b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ba:	4b41      	ldr	r3, [pc, #260]	@ (80054c0 <HAL_RCC_OscConfig+0x934>)
 80053bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80053c6:	2102      	movs	r1, #2
 80053c8:	6019      	str	r1, [r3, #0]
 80053ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053ce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	fa93 f1a3 	rbit	r1, r3
 80053d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80053e0:	6019      	str	r1, [r3, #0]
  return result;
 80053e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053e6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	fab3 f383 	clz	r3, r3
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	f003 031f 	and.w	r3, r3, #31
 80053fc:	2101      	movs	r1, #1
 80053fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005402:	4013      	ands	r3, r2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d197      	bne.n	8005338 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800540c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 81a1 	beq.w	8005760 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800541e:	2300      	movs	r3, #0
 8005420:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005424:	4b26      	ldr	r3, [pc, #152]	@ (80054c0 <HAL_RCC_OscConfig+0x934>)
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d116      	bne.n	800545e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005430:	4b23      	ldr	r3, [pc, #140]	@ (80054c0 <HAL_RCC_OscConfig+0x934>)
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	4a22      	ldr	r2, [pc, #136]	@ (80054c0 <HAL_RCC_OscConfig+0x934>)
 8005436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800543a:	61d3      	str	r3, [r2, #28]
 800543c:	4b20      	ldr	r3, [pc, #128]	@ (80054c0 <HAL_RCC_OscConfig+0x934>)
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8005444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005448:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005452:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8005456:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005458:	2301      	movs	r3, #1
 800545a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545e:	4b1a      	ldr	r3, [pc, #104]	@ (80054c8 <HAL_RCC_OscConfig+0x93c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005466:	2b00      	cmp	r3, #0
 8005468:	d11a      	bne.n	80054a0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800546a:	4b17      	ldr	r3, [pc, #92]	@ (80054c8 <HAL_RCC_OscConfig+0x93c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a16      	ldr	r2, [pc, #88]	@ (80054c8 <HAL_RCC_OscConfig+0x93c>)
 8005470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005474:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005476:	f7fe fa27 	bl	80038c8 <HAL_GetTick>
 800547a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547e:	e009      	b.n	8005494 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005480:	f7fe fa22 	bl	80038c8 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b64      	cmp	r3, #100	@ 0x64
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e3b1      	b.n	8005bf8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005494:	4b0c      	ldr	r3, [pc, #48]	@ (80054c8 <HAL_RCC_OscConfig+0x93c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0ef      	beq.n	8005480 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d10d      	bne.n	80054cc <HAL_RCC_OscConfig+0x940>
 80054b0:	4b03      	ldr	r3, [pc, #12]	@ (80054c0 <HAL_RCC_OscConfig+0x934>)
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	4a02      	ldr	r2, [pc, #8]	@ (80054c0 <HAL_RCC_OscConfig+0x934>)
 80054b6:	f043 0301 	orr.w	r3, r3, #1
 80054ba:	6213      	str	r3, [r2, #32]
 80054bc:	e03c      	b.n	8005538 <HAL_RCC_OscConfig+0x9ac>
 80054be:	bf00      	nop
 80054c0:	40021000 	.word	0x40021000
 80054c4:	10908120 	.word	0x10908120
 80054c8:	40007000 	.word	0x40007000
 80054cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10c      	bne.n	80054f6 <HAL_RCC_OscConfig+0x96a>
 80054dc:	4bc1      	ldr	r3, [pc, #772]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	4ac0      	ldr	r2, [pc, #768]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 80054e2:	f023 0301 	bic.w	r3, r3, #1
 80054e6:	6213      	str	r3, [r2, #32]
 80054e8:	4bbe      	ldr	r3, [pc, #760]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	4abd      	ldr	r2, [pc, #756]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 80054ee:	f023 0304 	bic.w	r3, r3, #4
 80054f2:	6213      	str	r3, [r2, #32]
 80054f4:	e020      	b.n	8005538 <HAL_RCC_OscConfig+0x9ac>
 80054f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	2b05      	cmp	r3, #5
 8005504:	d10c      	bne.n	8005520 <HAL_RCC_OscConfig+0x994>
 8005506:	4bb7      	ldr	r3, [pc, #732]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	4ab6      	ldr	r2, [pc, #728]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 800550c:	f043 0304 	orr.w	r3, r3, #4
 8005510:	6213      	str	r3, [r2, #32]
 8005512:	4bb4      	ldr	r3, [pc, #720]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	4ab3      	ldr	r2, [pc, #716]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 8005518:	f043 0301 	orr.w	r3, r3, #1
 800551c:	6213      	str	r3, [r2, #32]
 800551e:	e00b      	b.n	8005538 <HAL_RCC_OscConfig+0x9ac>
 8005520:	4bb0      	ldr	r3, [pc, #704]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	4aaf      	ldr	r2, [pc, #700]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	6213      	str	r3, [r2, #32]
 800552c:	4bad      	ldr	r3, [pc, #692]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	4aac      	ldr	r2, [pc, #688]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 8005532:	f023 0304 	bic.w	r3, r3, #4
 8005536:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800553c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 8081 	beq.w	800564c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800554a:	f7fe f9bd 	bl	80038c8 <HAL_GetTick>
 800554e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005552:	e00b      	b.n	800556c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005554:	f7fe f9b8 	bl	80038c8 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005564:	4293      	cmp	r3, r2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e345      	b.n	8005bf8 <HAL_RCC_OscConfig+0x106c>
 800556c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005570:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005574:	2202      	movs	r2, #2
 8005576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800557c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	fa93 f2a3 	rbit	r2, r3
 8005586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800558a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005594:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005598:	2202      	movs	r2, #2
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055a0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	fa93 f2a3 	rbit	r2, r3
 80055aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055ae:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80055b2:	601a      	str	r2, [r3, #0]
  return result;
 80055b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055b8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80055bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055be:	fab3 f383 	clz	r3, r3
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f043 0302 	orr.w	r3, r3, #2
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d102      	bne.n	80055d8 <HAL_RCC_OscConfig+0xa4c>
 80055d2:	4b84      	ldr	r3, [pc, #528]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	e013      	b.n	8005600 <HAL_RCC_OscConfig+0xa74>
 80055d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055dc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80055e0:	2202      	movs	r2, #2
 80055e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055e8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	fa93 f2a3 	rbit	r2, r3
 80055f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055f6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	4b79      	ldr	r3, [pc, #484]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 80055fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005600:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005604:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005608:	2102      	movs	r1, #2
 800560a:	6011      	str	r1, [r2, #0]
 800560c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005610:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	fa92 f1a2 	rbit	r1, r2
 800561a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800561e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005622:	6011      	str	r1, [r2, #0]
  return result;
 8005624:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005628:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800562c:	6812      	ldr	r2, [r2, #0]
 800562e:	fab2 f282 	clz	r2, r2
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	f002 021f 	and.w	r2, r2, #31
 800563e:	2101      	movs	r1, #1
 8005640:	fa01 f202 	lsl.w	r2, r1, r2
 8005644:	4013      	ands	r3, r2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d084      	beq.n	8005554 <HAL_RCC_OscConfig+0x9c8>
 800564a:	e07f      	b.n	800574c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800564c:	f7fe f93c 	bl	80038c8 <HAL_GetTick>
 8005650:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005654:	e00b      	b.n	800566e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005656:	f7fe f937 	bl	80038c8 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005666:	4293      	cmp	r3, r2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e2c4      	b.n	8005bf8 <HAL_RCC_OscConfig+0x106c>
 800566e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005672:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005676:	2202      	movs	r2, #2
 8005678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800567e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	fa93 f2a3 	rbit	r2, r3
 8005688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800568c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005696:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800569a:	2202      	movs	r2, #2
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056a2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	fa93 f2a3 	rbit	r2, r3
 80056ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056b0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80056b4:	601a      	str	r2, [r3, #0]
  return result;
 80056b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056ba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80056be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056c0:	fab3 f383 	clz	r3, r3
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	f043 0302 	orr.w	r3, r3, #2
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d102      	bne.n	80056da <HAL_RCC_OscConfig+0xb4e>
 80056d4:	4b43      	ldr	r3, [pc, #268]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	e013      	b.n	8005702 <HAL_RCC_OscConfig+0xb76>
 80056da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056de:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80056e2:	2202      	movs	r2, #2
 80056e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056ea:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	fa93 f2a3 	rbit	r2, r3
 80056f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056f8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	4b39      	ldr	r3, [pc, #228]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 8005700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005702:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005706:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800570a:	2102      	movs	r1, #2
 800570c:	6011      	str	r1, [r2, #0]
 800570e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005712:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	fa92 f1a2 	rbit	r1, r2
 800571c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005720:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005724:	6011      	str	r1, [r2, #0]
  return result;
 8005726:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800572a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	fab2 f282 	clz	r2, r2
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	f002 021f 	and.w	r2, r2, #31
 8005740:	2101      	movs	r1, #1
 8005742:	fa01 f202 	lsl.w	r2, r1, r2
 8005746:	4013      	ands	r3, r2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d184      	bne.n	8005656 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800574c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8005750:	2b01      	cmp	r3, #1
 8005752:	d105      	bne.n	8005760 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005754:	4b23      	ldr	r3, [pc, #140]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	4a22      	ldr	r2, [pc, #136]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 800575a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800575e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005764:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8242 	beq.w	8005bf6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005772:	4b1c      	ldr	r3, [pc, #112]	@ (80057e4 <HAL_RCC_OscConfig+0xc58>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f003 030c 	and.w	r3, r3, #12
 800577a:	2b08      	cmp	r3, #8
 800577c:	f000 8213 	beq.w	8005ba6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005784:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	2b02      	cmp	r3, #2
 800578e:	f040 8162 	bne.w	8005a56 <HAL_RCC_OscConfig+0xeca>
 8005792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005796:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800579a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800579e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057a4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	fa93 f2a3 	rbit	r2, r3
 80057ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057b2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80057b6:	601a      	str	r2, [r3, #0]
  return result;
 80057b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057bc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80057c0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c2:	fab3 f383 	clz	r3, r3
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80057cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	461a      	mov	r2, r3
 80057d4:	2300      	movs	r3, #0
 80057d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d8:	f7fe f876 	bl	80038c8 <HAL_GetTick>
 80057dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057e0:	e00c      	b.n	80057fc <HAL_RCC_OscConfig+0xc70>
 80057e2:	bf00      	nop
 80057e4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e8:	f7fe f86e 	bl	80038c8 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e1fd      	b.n	8005bf8 <HAL_RCC_OscConfig+0x106c>
 80057fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005800:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005804:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800580e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	fa93 f2a3 	rbit	r2, r3
 8005818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800581c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005820:	601a      	str	r2, [r3, #0]
  return result;
 8005822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005826:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800582a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800582c:	fab3 f383 	clz	r3, r3
 8005830:	b2db      	uxtb	r3, r3
 8005832:	095b      	lsrs	r3, r3, #5
 8005834:	b2db      	uxtb	r3, r3
 8005836:	f043 0301 	orr.w	r3, r3, #1
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	d102      	bne.n	8005846 <HAL_RCC_OscConfig+0xcba>
 8005840:	4bb0      	ldr	r3, [pc, #704]	@ (8005b04 <HAL_RCC_OscConfig+0xf78>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	e027      	b.n	8005896 <HAL_RCC_OscConfig+0xd0a>
 8005846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800584a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800584e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005852:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005858:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	fa93 f2a3 	rbit	r2, r3
 8005862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005866:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005870:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005874:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800587e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	fa93 f2a3 	rbit	r2, r3
 8005888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800588c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	4b9c      	ldr	r3, [pc, #624]	@ (8005b04 <HAL_RCC_OscConfig+0xf78>)
 8005894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005896:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800589a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800589e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80058a2:	6011      	str	r1, [r2, #0]
 80058a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80058a8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	fa92 f1a2 	rbit	r1, r2
 80058b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80058b6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80058ba:	6011      	str	r1, [r2, #0]
  return result;
 80058bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80058c0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80058c4:	6812      	ldr	r2, [r2, #0]
 80058c6:	fab2 f282 	clz	r2, r2
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	f042 0220 	orr.w	r2, r2, #32
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	f002 021f 	and.w	r2, r2, #31
 80058d6:	2101      	movs	r1, #1
 80058d8:	fa01 f202 	lsl.w	r2, r1, r2
 80058dc:	4013      	ands	r3, r2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d182      	bne.n	80057e8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058e2:	4b88      	ldr	r3, [pc, #544]	@ (8005b04 <HAL_RCC_OscConfig+0xf78>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80058ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80058f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	430b      	orrs	r3, r1
 8005904:	497f      	ldr	r1, [pc, #508]	@ (8005b04 <HAL_RCC_OscConfig+0xf78>)
 8005906:	4313      	orrs	r3, r2
 8005908:	604b      	str	r3, [r1, #4]
 800590a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800590e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005912:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800591c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	fa93 f2a3 	rbit	r2, r3
 8005926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800592a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800592e:	601a      	str	r2, [r3, #0]
  return result;
 8005930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005934:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005938:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800593a:	fab3 f383 	clz	r3, r3
 800593e:	b2db      	uxtb	r3, r3
 8005940:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005944:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	461a      	mov	r2, r3
 800594c:	2301      	movs	r3, #1
 800594e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005950:	f7fd ffba 	bl	80038c8 <HAL_GetTick>
 8005954:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005958:	e009      	b.n	800596e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800595a:	f7fd ffb5 	bl	80038c8 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e144      	b.n	8005bf8 <HAL_RCC_OscConfig+0x106c>
 800596e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005972:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005976:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800597a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005980:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	fa93 f2a3 	rbit	r2, r3
 800598a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800598e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005992:	601a      	str	r2, [r3, #0]
  return result;
 8005994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005998:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800599c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800599e:	fab3 f383 	clz	r3, r3
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d102      	bne.n	80059b8 <HAL_RCC_OscConfig+0xe2c>
 80059b2:	4b54      	ldr	r3, [pc, #336]	@ (8005b04 <HAL_RCC_OscConfig+0xf78>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	e027      	b.n	8005a08 <HAL_RCC_OscConfig+0xe7c>
 80059b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059bc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80059c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80059c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059ca:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	fa93 f2a3 	rbit	r2, r3
 80059d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059d8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059e2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80059e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059f0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	fa93 f2a3 	rbit	r2, r3
 80059fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059fe:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	4b3f      	ldr	r3, [pc, #252]	@ (8005b04 <HAL_RCC_OscConfig+0xf78>)
 8005a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a0c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005a10:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005a14:	6011      	str	r1, [r2, #0]
 8005a16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a1a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	fa92 f1a2 	rbit	r1, r2
 8005a24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a28:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005a2c:	6011      	str	r1, [r2, #0]
  return result;
 8005a2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a32:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005a36:	6812      	ldr	r2, [r2, #0]
 8005a38:	fab2 f282 	clz	r2, r2
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	f042 0220 	orr.w	r2, r2, #32
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	f002 021f 	and.w	r2, r2, #31
 8005a48:	2101      	movs	r1, #1
 8005a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d082      	beq.n	800595a <HAL_RCC_OscConfig+0xdce>
 8005a54:	e0cf      	b.n	8005bf6 <HAL_RCC_OscConfig+0x106a>
 8005a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a5a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005a5e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005a62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a68:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	fa93 f2a3 	rbit	r2, r3
 8005a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a76:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005a7a:	601a      	str	r2, [r3, #0]
  return result;
 8005a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a80:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005a84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a86:	fab3 f383 	clz	r3, r3
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005a90:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	461a      	mov	r2, r3
 8005a98:	2300      	movs	r3, #0
 8005a9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a9c:	f7fd ff14 	bl	80038c8 <HAL_GetTick>
 8005aa0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005aa4:	e009      	b.n	8005aba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aa6:	f7fd ff0f 	bl	80038c8 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e09e      	b.n	8005bf8 <HAL_RCC_OscConfig+0x106c>
 8005aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005abe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005ac2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005ac6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005acc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	fa93 f2a3 	rbit	r2, r3
 8005ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ada:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005ade:	601a      	str	r2, [r3, #0]
  return result;
 8005ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ae4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005ae8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005aea:	fab3 f383 	clz	r3, r3
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	f043 0301 	orr.w	r3, r3, #1
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d104      	bne.n	8005b08 <HAL_RCC_OscConfig+0xf7c>
 8005afe:	4b01      	ldr	r3, [pc, #4]	@ (8005b04 <HAL_RCC_OscConfig+0xf78>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	e029      	b.n	8005b58 <HAL_RCC_OscConfig+0xfcc>
 8005b04:	40021000 	.word	0x40021000
 8005b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b0c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005b10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b1a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	fa93 f2a3 	rbit	r2, r3
 8005b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b28:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b32:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005b36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b40:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	fa93 f2a3 	rbit	r2, r3
 8005b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b4e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	4b2b      	ldr	r3, [pc, #172]	@ (8005c04 <HAL_RCC_OscConfig+0x1078>)
 8005b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005b5c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005b60:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005b64:	6011      	str	r1, [r2, #0]
 8005b66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005b6a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005b6e:	6812      	ldr	r2, [r2, #0]
 8005b70:	fa92 f1a2 	rbit	r1, r2
 8005b74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005b78:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005b7c:	6011      	str	r1, [r2, #0]
  return result;
 8005b7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005b82:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	fab2 f282 	clz	r2, r2
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	f042 0220 	orr.w	r2, r2, #32
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	f002 021f 	and.w	r2, r2, #31
 8005b98:	2101      	movs	r1, #1
 8005b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d180      	bne.n	8005aa6 <HAL_RCC_OscConfig+0xf1a>
 8005ba4:	e027      	b.n	8005bf6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005baa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d101      	bne.n	8005bba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e01e      	b.n	8005bf8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bba:	4b12      	ldr	r3, [pc, #72]	@ (8005c04 <HAL_RCC_OscConfig+0x1078>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005bc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005bc6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d10b      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005bda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005bde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005be6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d001      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	40021000 	.word	0x40021000

08005c08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b09e      	sub	sp, #120	@ 0x78
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e162      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c20:	4b90      	ldr	r3, [pc, #576]	@ (8005e64 <HAL_RCC_ClockConfig+0x25c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d910      	bls.n	8005c50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c2e:	4b8d      	ldr	r3, [pc, #564]	@ (8005e64 <HAL_RCC_ClockConfig+0x25c>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f023 0207 	bic.w	r2, r3, #7
 8005c36:	498b      	ldr	r1, [pc, #556]	@ (8005e64 <HAL_RCC_ClockConfig+0x25c>)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3e:	4b89      	ldr	r3, [pc, #548]	@ (8005e64 <HAL_RCC_ClockConfig+0x25c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d001      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e14a      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d008      	beq.n	8005c6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c5c:	4b82      	ldr	r3, [pc, #520]	@ (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	497f      	ldr	r1, [pc, #508]	@ (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 80dc 	beq.w	8005e34 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d13c      	bne.n	8005cfe <HAL_RCC_ClockConfig+0xf6>
 8005c84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c88:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c8c:	fa93 f3a3 	rbit	r3, r3
 8005c90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c94:	fab3 f383 	clz	r3, r3
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d102      	bne.n	8005cae <HAL_RCC_ClockConfig+0xa6>
 8005ca8:	4b6f      	ldr	r3, [pc, #444]	@ (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	e00f      	b.n	8005cce <HAL_RCC_ClockConfig+0xc6>
 8005cae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005cb2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cb6:	fa93 f3a3 	rbit	r3, r3
 8005cba:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005cc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cc4:	fa93 f3a3 	rbit	r3, r3
 8005cc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cca:	4b67      	ldr	r3, [pc, #412]	@ (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005cd2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005cd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cd6:	fa92 f2a2 	rbit	r2, r2
 8005cda:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005cdc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005cde:	fab2 f282 	clz	r2, r2
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	f042 0220 	orr.w	r2, r2, #32
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	f002 021f 	and.w	r2, r2, #31
 8005cee:	2101      	movs	r1, #1
 8005cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d17b      	bne.n	8005df2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e0f3      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d13c      	bne.n	8005d80 <HAL_RCC_ClockConfig+0x178>
 8005d06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d0a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d0e:	fa93 f3a3 	rbit	r3, r3
 8005d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005d14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d16:	fab3 f383 	clz	r3, r3
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	095b      	lsrs	r3, r3, #5
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d102      	bne.n	8005d30 <HAL_RCC_ClockConfig+0x128>
 8005d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	e00f      	b.n	8005d50 <HAL_RCC_ClockConfig+0x148>
 8005d30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d34:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d38:	fa93 f3a3 	rbit	r3, r3
 8005d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d42:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d46:	fa93 f3a3 	rbit	r3, r3
 8005d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d4c:	4b46      	ldr	r3, [pc, #280]	@ (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005d54:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005d56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d58:	fa92 f2a2 	rbit	r2, r2
 8005d5c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005d5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d60:	fab2 f282 	clz	r2, r2
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	f042 0220 	orr.w	r2, r2, #32
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	f002 021f 	and.w	r2, r2, #31
 8005d70:	2101      	movs	r1, #1
 8005d72:	fa01 f202 	lsl.w	r2, r1, r2
 8005d76:	4013      	ands	r3, r2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d13a      	bne.n	8005df2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e0b2      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x2de>
 8005d80:	2302      	movs	r3, #2
 8005d82:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d86:	fa93 f3a3 	rbit	r3, r3
 8005d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8e:	fab3 f383 	clz	r3, r3
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	f043 0301 	orr.w	r3, r3, #1
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d102      	bne.n	8005da8 <HAL_RCC_ClockConfig+0x1a0>
 8005da2:	4b31      	ldr	r3, [pc, #196]	@ (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	e00d      	b.n	8005dc4 <HAL_RCC_ClockConfig+0x1bc>
 8005da8:	2302      	movs	r3, #2
 8005daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dae:	fa93 f3a3 	rbit	r3, r3
 8005db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005db4:	2302      	movs	r3, #2
 8005db6:	623b      	str	r3, [r7, #32]
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	fa93 f3a3 	rbit	r3, r3
 8005dbe:	61fb      	str	r3, [r7, #28]
 8005dc0:	4b29      	ldr	r3, [pc, #164]	@ (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	61ba      	str	r2, [r7, #24]
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	fa92 f2a2 	rbit	r2, r2
 8005dce:	617a      	str	r2, [r7, #20]
  return result;
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	fab2 f282 	clz	r2, r2
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	f042 0220 	orr.w	r2, r2, #32
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	f002 021f 	and.w	r2, r2, #31
 8005de2:	2101      	movs	r1, #1
 8005de4:	fa01 f202 	lsl.w	r2, r1, r2
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e079      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005df2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f023 0203 	bic.w	r2, r3, #3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	491a      	ldr	r1, [pc, #104]	@ (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e04:	f7fd fd60 	bl	80038c8 <HAL_GetTick>
 8005e08:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e0a:	e00a      	b.n	8005e22 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e0c:	f7fd fd5c 	bl	80038c8 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e061      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e22:	4b11      	ldr	r3, [pc, #68]	@ (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f003 020c 	and.w	r2, r3, #12
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d1eb      	bne.n	8005e0c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e34:	4b0b      	ldr	r3, [pc, #44]	@ (8005e64 <HAL_RCC_ClockConfig+0x25c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d214      	bcs.n	8005e6c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e42:	4b08      	ldr	r3, [pc, #32]	@ (8005e64 <HAL_RCC_ClockConfig+0x25c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f023 0207 	bic.w	r2, r3, #7
 8005e4a:	4906      	ldr	r1, [pc, #24]	@ (8005e64 <HAL_RCC_ClockConfig+0x25c>)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e52:	4b04      	ldr	r3, [pc, #16]	@ (8005e64 <HAL_RCC_ClockConfig+0x25c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d005      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e040      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x2de>
 8005e64:	40022000 	.word	0x40022000
 8005e68:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d008      	beq.n	8005e8a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e78:	4b1d      	ldr	r3, [pc, #116]	@ (8005ef0 <HAL_RCC_ClockConfig+0x2e8>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	491a      	ldr	r1, [pc, #104]	@ (8005ef0 <HAL_RCC_ClockConfig+0x2e8>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d009      	beq.n	8005eaa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e96:	4b16      	ldr	r3, [pc, #88]	@ (8005ef0 <HAL_RCC_ClockConfig+0x2e8>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4912      	ldr	r1, [pc, #72]	@ (8005ef0 <HAL_RCC_ClockConfig+0x2e8>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005eaa:	f000 f829 	bl	8005f00 <HAL_RCC_GetSysClockFreq>
 8005eae:	4601      	mov	r1, r0
 8005eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8005ef0 <HAL_RCC_ClockConfig+0x2e8>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005eb8:	22f0      	movs	r2, #240	@ 0xf0
 8005eba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	fa92 f2a2 	rbit	r2, r2
 8005ec2:	60fa      	str	r2, [r7, #12]
  return result;
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	fab2 f282 	clz	r2, r2
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	40d3      	lsrs	r3, r2
 8005ece:	4a09      	ldr	r2, [pc, #36]	@ (8005ef4 <HAL_RCC_ClockConfig+0x2ec>)
 8005ed0:	5cd3      	ldrb	r3, [r2, r3]
 8005ed2:	fa21 f303 	lsr.w	r3, r1, r3
 8005ed6:	4a08      	ldr	r2, [pc, #32]	@ (8005ef8 <HAL_RCC_ClockConfig+0x2f0>)
 8005ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005eda:	4b08      	ldr	r3, [pc, #32]	@ (8005efc <HAL_RCC_ClockConfig+0x2f4>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fd fcae 	bl	8003840 <HAL_InitTick>
  
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3778      	adds	r7, #120	@ 0x78
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	0801607c 	.word	0x0801607c
 8005ef8:	20000010 	.word	0x20000010
 8005efc:	20000014 	.word	0x20000014

08005f00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60bb      	str	r3, [r7, #8]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]
 8005f12:	2300      	movs	r3, #0
 8005f14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f003 030c 	and.w	r3, r3, #12
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d002      	beq.n	8005f30 <HAL_RCC_GetSysClockFreq+0x30>
 8005f2a:	2b08      	cmp	r3, #8
 8005f2c:	d003      	beq.n	8005f36 <HAL_RCC_GetSysClockFreq+0x36>
 8005f2e:	e026      	b.n	8005f7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f30:	4b19      	ldr	r3, [pc, #100]	@ (8005f98 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f32:	613b      	str	r3, [r7, #16]
      break;
 8005f34:	e026      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	0c9b      	lsrs	r3, r3, #18
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	4a17      	ldr	r2, [pc, #92]	@ (8005f9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005f40:	5cd3      	ldrb	r3, [r2, r3]
 8005f42:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005f44:	4b13      	ldr	r3, [pc, #76]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x94>)
 8005f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f48:	f003 030f 	and.w	r3, r3, #15
 8005f4c:	4a14      	ldr	r2, [pc, #80]	@ (8005fa0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005f4e:	5cd3      	ldrb	r3, [r2, r3]
 8005f50:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d008      	beq.n	8005f6e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005f5c:	4a0e      	ldr	r2, [pc, #56]	@ (8005f98 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	fb02 f303 	mul.w	r3, r2, r3
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	e004      	b.n	8005f78 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a0c      	ldr	r2, [pc, #48]	@ (8005fa4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f72:	fb02 f303 	mul.w	r3, r2, r3
 8005f76:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	613b      	str	r3, [r7, #16]
      break;
 8005f7c:	e002      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f7e:	4b06      	ldr	r3, [pc, #24]	@ (8005f98 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f80:	613b      	str	r3, [r7, #16]
      break;
 8005f82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f84:	693b      	ldr	r3, [r7, #16]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40021000 	.word	0x40021000
 8005f98:	007a1200 	.word	0x007a1200
 8005f9c:	0801608c 	.word	0x0801608c
 8005fa0:	0801609c 	.word	0x0801609c
 8005fa4:	003d0900 	.word	0x003d0900

08005fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b092      	sub	sp, #72	@ 0x48
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 80d4 	beq.w	8006174 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fcc:	4b4e      	ldr	r3, [pc, #312]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10e      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fd8:	4b4b      	ldr	r3, [pc, #300]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	4a4a      	ldr	r2, [pc, #296]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fe2:	61d3      	str	r3, [r2, #28]
 8005fe4:	4b48      	ldr	r3, [pc, #288]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fec:	60bb      	str	r3, [r7, #8]
 8005fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff6:	4b45      	ldr	r3, [pc, #276]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d118      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006002:	4b42      	ldr	r3, [pc, #264]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a41      	ldr	r2, [pc, #260]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800600c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800600e:	f7fd fc5b 	bl	80038c8 <HAL_GetTick>
 8006012:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006014:	e008      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006016:	f7fd fc57 	bl	80038c8 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b64      	cmp	r3, #100	@ 0x64
 8006022:	d901      	bls.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e169      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006028:	4b38      	ldr	r3, [pc, #224]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0f0      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006034:	4b34      	ldr	r3, [pc, #208]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800603c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800603e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8084 	beq.w	800614e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800604e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006050:	429a      	cmp	r2, r3
 8006052:	d07c      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006054:	4b2c      	ldr	r3, [pc, #176]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800605c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800605e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006062:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006066:	fa93 f3a3 	rbit	r3, r3
 800606a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800606c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800606e:	fab3 f383 	clz	r3, r3
 8006072:	b2db      	uxtb	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	4b26      	ldr	r3, [pc, #152]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	461a      	mov	r2, r3
 800607e:	2301      	movs	r3, #1
 8006080:	6013      	str	r3, [r2, #0]
 8006082:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006086:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608a:	fa93 f3a3 	rbit	r3, r3
 800608e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006092:	fab3 f383 	clz	r3, r3
 8006096:	b2db      	uxtb	r3, r3
 8006098:	461a      	mov	r2, r3
 800609a:	4b1d      	ldr	r3, [pc, #116]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	461a      	mov	r2, r3
 80060a2:	2300      	movs	r3, #0
 80060a4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80060a6:	4a18      	ldr	r2, [pc, #96]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060aa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80060ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d04b      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b6:	f7fd fc07 	bl	80038c8 <HAL_GetTick>
 80060ba:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060bc:	e00a      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060be:	f7fd fc03 	bl	80038c8 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e113      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x354>
 80060d4:	2302      	movs	r3, #2
 80060d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060da:	fa93 f3a3 	rbit	r3, r3
 80060de:	627b      	str	r3, [r7, #36]	@ 0x24
 80060e0:	2302      	movs	r3, #2
 80060e2:	623b      	str	r3, [r7, #32]
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	fa93 f3a3 	rbit	r3, r3
 80060ea:	61fb      	str	r3, [r7, #28]
  return result;
 80060ec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ee:	fab3 f383 	clz	r3, r3
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	095b      	lsrs	r3, r3, #5
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	f043 0302 	orr.w	r3, r3, #2
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d108      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006102:	4b01      	ldr	r3, [pc, #4]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	e00d      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006108:	40021000 	.word	0x40021000
 800610c:	40007000 	.word	0x40007000
 8006110:	10908100 	.word	0x10908100
 8006114:	2302      	movs	r3, #2
 8006116:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	fa93 f3a3 	rbit	r3, r3
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	4b78      	ldr	r3, [pc, #480]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006124:	2202      	movs	r2, #2
 8006126:	613a      	str	r2, [r7, #16]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	fa92 f2a2 	rbit	r2, r2
 800612e:	60fa      	str	r2, [r7, #12]
  return result;
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	fab2 f282 	clz	r2, r2
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	f002 021f 	and.w	r2, r2, #31
 8006142:	2101      	movs	r1, #1
 8006144:	fa01 f202 	lsl.w	r2, r1, r2
 8006148:	4013      	ands	r3, r2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0b7      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800614e:	4b6d      	ldr	r3, [pc, #436]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	496a      	ldr	r1, [pc, #424]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800615c:	4313      	orrs	r3, r2
 800615e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006160:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006164:	2b01      	cmp	r3, #1
 8006166:	d105      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006168:	4b66      	ldr	r3, [pc, #408]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	4a65      	ldr	r2, [pc, #404]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800616e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006172:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d008      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006180:	4b60      	ldr	r3, [pc, #384]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006184:	f023 0203 	bic.w	r2, r3, #3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	495d      	ldr	r1, [pc, #372]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800618e:	4313      	orrs	r3, r2
 8006190:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d008      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800619e:	4b59      	ldr	r3, [pc, #356]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	4956      	ldr	r1, [pc, #344]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d008      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061bc:	4b51      	ldr	r3, [pc, #324]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	494e      	ldr	r1, [pc, #312]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d008      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061da:	4b4a      	ldr	r3, [pc, #296]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061de:	f023 0210 	bic.w	r2, r3, #16
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	4947      	ldr	r1, [pc, #284]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d008      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80061f8:	4b42      	ldr	r3, [pc, #264]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006204:	493f      	ldr	r1, [pc, #252]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006206:	4313      	orrs	r3, r2
 8006208:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006212:	2b00      	cmp	r3, #0
 8006214:	d008      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006216:	4b3b      	ldr	r3, [pc, #236]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800621a:	f023 0220 	bic.w	r2, r3, #32
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	4938      	ldr	r1, [pc, #224]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006224:	4313      	orrs	r3, r2
 8006226:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	2b00      	cmp	r3, #0
 8006232:	d008      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006234:	4b33      	ldr	r3, [pc, #204]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006238:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	4930      	ldr	r1, [pc, #192]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006242:	4313      	orrs	r3, r2
 8006244:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0310 	and.w	r3, r3, #16
 800624e:	2b00      	cmp	r3, #0
 8006250:	d008      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006252:	4b2c      	ldr	r3, [pc, #176]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006256:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	4929      	ldr	r1, [pc, #164]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006260:	4313      	orrs	r3, r2
 8006262:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800626c:	2b00      	cmp	r3, #0
 800626e:	d008      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006270:	4b24      	ldr	r3, [pc, #144]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627c:	4921      	ldr	r1, [pc, #132]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800627e:	4313      	orrs	r3, r2
 8006280:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800628a:	2b00      	cmp	r3, #0
 800628c:	d008      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800628e:	4b1d      	ldr	r3, [pc, #116]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006292:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629a:	491a      	ldr	r1, [pc, #104]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800629c:	4313      	orrs	r3, r2
 800629e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d008      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80062ac:	4b15      	ldr	r3, [pc, #84]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b0:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b8:	4912      	ldr	r1, [pc, #72]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d008      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80062ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d6:	490b      	ldr	r1, [pc, #44]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d008      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80062e8:	4b06      	ldr	r3, [pc, #24]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062f4:	4903      	ldr	r1, [pc, #12]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3748      	adds	r7, #72	@ 0x48
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	40021000 	.word	0x40021000

08006308 <rand>:
 8006308:	4b16      	ldr	r3, [pc, #88]	@ (8006364 <rand+0x5c>)
 800630a:	b510      	push	{r4, lr}
 800630c:	681c      	ldr	r4, [r3, #0]
 800630e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006310:	b9b3      	cbnz	r3, 8006340 <rand+0x38>
 8006312:	2018      	movs	r0, #24
 8006314:	f002 f816 	bl	8008344 <malloc>
 8006318:	4602      	mov	r2, r0
 800631a:	6320      	str	r0, [r4, #48]	@ 0x30
 800631c:	b920      	cbnz	r0, 8006328 <rand+0x20>
 800631e:	4b12      	ldr	r3, [pc, #72]	@ (8006368 <rand+0x60>)
 8006320:	4812      	ldr	r0, [pc, #72]	@ (800636c <rand+0x64>)
 8006322:	2152      	movs	r1, #82	@ 0x52
 8006324:	f001 f958 	bl	80075d8 <__assert_func>
 8006328:	4911      	ldr	r1, [pc, #68]	@ (8006370 <rand+0x68>)
 800632a:	4b12      	ldr	r3, [pc, #72]	@ (8006374 <rand+0x6c>)
 800632c:	e9c0 1300 	strd	r1, r3, [r0]
 8006330:	4b11      	ldr	r3, [pc, #68]	@ (8006378 <rand+0x70>)
 8006332:	6083      	str	r3, [r0, #8]
 8006334:	230b      	movs	r3, #11
 8006336:	8183      	strh	r3, [r0, #12]
 8006338:	2100      	movs	r1, #0
 800633a:	2001      	movs	r0, #1
 800633c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006340:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006342:	480e      	ldr	r0, [pc, #56]	@ (800637c <rand+0x74>)
 8006344:	690b      	ldr	r3, [r1, #16]
 8006346:	694c      	ldr	r4, [r1, #20]
 8006348:	4a0d      	ldr	r2, [pc, #52]	@ (8006380 <rand+0x78>)
 800634a:	4358      	muls	r0, r3
 800634c:	fb02 0004 	mla	r0, r2, r4, r0
 8006350:	fba3 3202 	umull	r3, r2, r3, r2
 8006354:	3301      	adds	r3, #1
 8006356:	eb40 0002 	adc.w	r0, r0, r2
 800635a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800635e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006362:	bd10      	pop	{r4, pc}
 8006364:	20000028 	.word	0x20000028
 8006368:	080160ac 	.word	0x080160ac
 800636c:	080160c3 	.word	0x080160c3
 8006370:	abcd330e 	.word	0xabcd330e
 8006374:	e66d1234 	.word	0xe66d1234
 8006378:	0005deec 	.word	0x0005deec
 800637c:	5851f42d 	.word	0x5851f42d
 8006380:	4c957f2d 	.word	0x4c957f2d

08006384 <__cvt>:
 8006384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006388:	ec57 6b10 	vmov	r6, r7, d0
 800638c:	2f00      	cmp	r7, #0
 800638e:	460c      	mov	r4, r1
 8006390:	4619      	mov	r1, r3
 8006392:	463b      	mov	r3, r7
 8006394:	bfbb      	ittet	lt
 8006396:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800639a:	461f      	movlt	r7, r3
 800639c:	2300      	movge	r3, #0
 800639e:	232d      	movlt	r3, #45	@ 0x2d
 80063a0:	700b      	strb	r3, [r1, #0]
 80063a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80063a8:	4691      	mov	r9, r2
 80063aa:	f023 0820 	bic.w	r8, r3, #32
 80063ae:	bfbc      	itt	lt
 80063b0:	4632      	movlt	r2, r6
 80063b2:	4616      	movlt	r6, r2
 80063b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063b8:	d005      	beq.n	80063c6 <__cvt+0x42>
 80063ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80063be:	d100      	bne.n	80063c2 <__cvt+0x3e>
 80063c0:	3401      	adds	r4, #1
 80063c2:	2102      	movs	r1, #2
 80063c4:	e000      	b.n	80063c8 <__cvt+0x44>
 80063c6:	2103      	movs	r1, #3
 80063c8:	ab03      	add	r3, sp, #12
 80063ca:	9301      	str	r3, [sp, #4]
 80063cc:	ab02      	add	r3, sp, #8
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	ec47 6b10 	vmov	d0, r6, r7
 80063d4:	4653      	mov	r3, sl
 80063d6:	4622      	mov	r2, r4
 80063d8:	f001 f9a6 	bl	8007728 <_dtoa_r>
 80063dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80063e0:	4605      	mov	r5, r0
 80063e2:	d119      	bne.n	8006418 <__cvt+0x94>
 80063e4:	f019 0f01 	tst.w	r9, #1
 80063e8:	d00e      	beq.n	8006408 <__cvt+0x84>
 80063ea:	eb00 0904 	add.w	r9, r0, r4
 80063ee:	2200      	movs	r2, #0
 80063f0:	2300      	movs	r3, #0
 80063f2:	4630      	mov	r0, r6
 80063f4:	4639      	mov	r1, r7
 80063f6:	f7fa fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 80063fa:	b108      	cbz	r0, 8006400 <__cvt+0x7c>
 80063fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006400:	2230      	movs	r2, #48	@ 0x30
 8006402:	9b03      	ldr	r3, [sp, #12]
 8006404:	454b      	cmp	r3, r9
 8006406:	d31e      	bcc.n	8006446 <__cvt+0xc2>
 8006408:	9b03      	ldr	r3, [sp, #12]
 800640a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800640c:	1b5b      	subs	r3, r3, r5
 800640e:	4628      	mov	r0, r5
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	b004      	add	sp, #16
 8006414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006418:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800641c:	eb00 0904 	add.w	r9, r0, r4
 8006420:	d1e5      	bne.n	80063ee <__cvt+0x6a>
 8006422:	7803      	ldrb	r3, [r0, #0]
 8006424:	2b30      	cmp	r3, #48	@ 0x30
 8006426:	d10a      	bne.n	800643e <__cvt+0xba>
 8006428:	2200      	movs	r2, #0
 800642a:	2300      	movs	r3, #0
 800642c:	4630      	mov	r0, r6
 800642e:	4639      	mov	r1, r7
 8006430:	f7fa fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006434:	b918      	cbnz	r0, 800643e <__cvt+0xba>
 8006436:	f1c4 0401 	rsb	r4, r4, #1
 800643a:	f8ca 4000 	str.w	r4, [sl]
 800643e:	f8da 3000 	ldr.w	r3, [sl]
 8006442:	4499      	add	r9, r3
 8006444:	e7d3      	b.n	80063ee <__cvt+0x6a>
 8006446:	1c59      	adds	r1, r3, #1
 8006448:	9103      	str	r1, [sp, #12]
 800644a:	701a      	strb	r2, [r3, #0]
 800644c:	e7d9      	b.n	8006402 <__cvt+0x7e>

0800644e <__exponent>:
 800644e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006450:	2900      	cmp	r1, #0
 8006452:	bfba      	itte	lt
 8006454:	4249      	neglt	r1, r1
 8006456:	232d      	movlt	r3, #45	@ 0x2d
 8006458:	232b      	movge	r3, #43	@ 0x2b
 800645a:	2909      	cmp	r1, #9
 800645c:	7002      	strb	r2, [r0, #0]
 800645e:	7043      	strb	r3, [r0, #1]
 8006460:	dd29      	ble.n	80064b6 <__exponent+0x68>
 8006462:	f10d 0307 	add.w	r3, sp, #7
 8006466:	461d      	mov	r5, r3
 8006468:	270a      	movs	r7, #10
 800646a:	461a      	mov	r2, r3
 800646c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006470:	fb07 1416 	mls	r4, r7, r6, r1
 8006474:	3430      	adds	r4, #48	@ 0x30
 8006476:	f802 4c01 	strb.w	r4, [r2, #-1]
 800647a:	460c      	mov	r4, r1
 800647c:	2c63      	cmp	r4, #99	@ 0x63
 800647e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006482:	4631      	mov	r1, r6
 8006484:	dcf1      	bgt.n	800646a <__exponent+0x1c>
 8006486:	3130      	adds	r1, #48	@ 0x30
 8006488:	1e94      	subs	r4, r2, #2
 800648a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800648e:	1c41      	adds	r1, r0, #1
 8006490:	4623      	mov	r3, r4
 8006492:	42ab      	cmp	r3, r5
 8006494:	d30a      	bcc.n	80064ac <__exponent+0x5e>
 8006496:	f10d 0309 	add.w	r3, sp, #9
 800649a:	1a9b      	subs	r3, r3, r2
 800649c:	42ac      	cmp	r4, r5
 800649e:	bf88      	it	hi
 80064a0:	2300      	movhi	r3, #0
 80064a2:	3302      	adds	r3, #2
 80064a4:	4403      	add	r3, r0
 80064a6:	1a18      	subs	r0, r3, r0
 80064a8:	b003      	add	sp, #12
 80064aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 80064b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80064b4:	e7ed      	b.n	8006492 <__exponent+0x44>
 80064b6:	2330      	movs	r3, #48	@ 0x30
 80064b8:	3130      	adds	r1, #48	@ 0x30
 80064ba:	7083      	strb	r3, [r0, #2]
 80064bc:	70c1      	strb	r1, [r0, #3]
 80064be:	1d03      	adds	r3, r0, #4
 80064c0:	e7f1      	b.n	80064a6 <__exponent+0x58>
	...

080064c4 <_printf_float>:
 80064c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c8:	b08d      	sub	sp, #52	@ 0x34
 80064ca:	460c      	mov	r4, r1
 80064cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80064d0:	4616      	mov	r6, r2
 80064d2:	461f      	mov	r7, r3
 80064d4:	4605      	mov	r5, r0
 80064d6:	f000 fff3 	bl	80074c0 <_localeconv_r>
 80064da:	6803      	ldr	r3, [r0, #0]
 80064dc:	9304      	str	r3, [sp, #16]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7f9 fec6 	bl	8000270 <strlen>
 80064e4:	2300      	movs	r3, #0
 80064e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80064e8:	f8d8 3000 	ldr.w	r3, [r8]
 80064ec:	9005      	str	r0, [sp, #20]
 80064ee:	3307      	adds	r3, #7
 80064f0:	f023 0307 	bic.w	r3, r3, #7
 80064f4:	f103 0208 	add.w	r2, r3, #8
 80064f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80064fc:	f8d4 b000 	ldr.w	fp, [r4]
 8006500:	f8c8 2000 	str.w	r2, [r8]
 8006504:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006508:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800650c:	9307      	str	r3, [sp, #28]
 800650e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006512:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006516:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800651a:	4b9c      	ldr	r3, [pc, #624]	@ (800678c <_printf_float+0x2c8>)
 800651c:	f04f 32ff 	mov.w	r2, #4294967295
 8006520:	f7fa fb04 	bl	8000b2c <__aeabi_dcmpun>
 8006524:	bb70      	cbnz	r0, 8006584 <_printf_float+0xc0>
 8006526:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800652a:	4b98      	ldr	r3, [pc, #608]	@ (800678c <_printf_float+0x2c8>)
 800652c:	f04f 32ff 	mov.w	r2, #4294967295
 8006530:	f7fa fade 	bl	8000af0 <__aeabi_dcmple>
 8006534:	bb30      	cbnz	r0, 8006584 <_printf_float+0xc0>
 8006536:	2200      	movs	r2, #0
 8006538:	2300      	movs	r3, #0
 800653a:	4640      	mov	r0, r8
 800653c:	4649      	mov	r1, r9
 800653e:	f7fa facd 	bl	8000adc <__aeabi_dcmplt>
 8006542:	b110      	cbz	r0, 800654a <_printf_float+0x86>
 8006544:	232d      	movs	r3, #45	@ 0x2d
 8006546:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800654a:	4a91      	ldr	r2, [pc, #580]	@ (8006790 <_printf_float+0x2cc>)
 800654c:	4b91      	ldr	r3, [pc, #580]	@ (8006794 <_printf_float+0x2d0>)
 800654e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006552:	bf94      	ite	ls
 8006554:	4690      	movls	r8, r2
 8006556:	4698      	movhi	r8, r3
 8006558:	2303      	movs	r3, #3
 800655a:	6123      	str	r3, [r4, #16]
 800655c:	f02b 0304 	bic.w	r3, fp, #4
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	f04f 0900 	mov.w	r9, #0
 8006566:	9700      	str	r7, [sp, #0]
 8006568:	4633      	mov	r3, r6
 800656a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800656c:	4621      	mov	r1, r4
 800656e:	4628      	mov	r0, r5
 8006570:	f000 f9d2 	bl	8006918 <_printf_common>
 8006574:	3001      	adds	r0, #1
 8006576:	f040 808d 	bne.w	8006694 <_printf_float+0x1d0>
 800657a:	f04f 30ff 	mov.w	r0, #4294967295
 800657e:	b00d      	add	sp, #52	@ 0x34
 8006580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006584:	4642      	mov	r2, r8
 8006586:	464b      	mov	r3, r9
 8006588:	4640      	mov	r0, r8
 800658a:	4649      	mov	r1, r9
 800658c:	f7fa face 	bl	8000b2c <__aeabi_dcmpun>
 8006590:	b140      	cbz	r0, 80065a4 <_printf_float+0xe0>
 8006592:	464b      	mov	r3, r9
 8006594:	2b00      	cmp	r3, #0
 8006596:	bfbc      	itt	lt
 8006598:	232d      	movlt	r3, #45	@ 0x2d
 800659a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800659e:	4a7e      	ldr	r2, [pc, #504]	@ (8006798 <_printf_float+0x2d4>)
 80065a0:	4b7e      	ldr	r3, [pc, #504]	@ (800679c <_printf_float+0x2d8>)
 80065a2:	e7d4      	b.n	800654e <_printf_float+0x8a>
 80065a4:	6863      	ldr	r3, [r4, #4]
 80065a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80065aa:	9206      	str	r2, [sp, #24]
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	d13b      	bne.n	8006628 <_printf_float+0x164>
 80065b0:	2306      	movs	r3, #6
 80065b2:	6063      	str	r3, [r4, #4]
 80065b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80065b8:	2300      	movs	r3, #0
 80065ba:	6022      	str	r2, [r4, #0]
 80065bc:	9303      	str	r3, [sp, #12]
 80065be:	ab0a      	add	r3, sp, #40	@ 0x28
 80065c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80065c4:	ab09      	add	r3, sp, #36	@ 0x24
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	6861      	ldr	r1, [r4, #4]
 80065ca:	ec49 8b10 	vmov	d0, r8, r9
 80065ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80065d2:	4628      	mov	r0, r5
 80065d4:	f7ff fed6 	bl	8006384 <__cvt>
 80065d8:	9b06      	ldr	r3, [sp, #24]
 80065da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065dc:	2b47      	cmp	r3, #71	@ 0x47
 80065de:	4680      	mov	r8, r0
 80065e0:	d129      	bne.n	8006636 <_printf_float+0x172>
 80065e2:	1cc8      	adds	r0, r1, #3
 80065e4:	db02      	blt.n	80065ec <_printf_float+0x128>
 80065e6:	6863      	ldr	r3, [r4, #4]
 80065e8:	4299      	cmp	r1, r3
 80065ea:	dd41      	ble.n	8006670 <_printf_float+0x1ac>
 80065ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80065f0:	fa5f fa8a 	uxtb.w	sl, sl
 80065f4:	3901      	subs	r1, #1
 80065f6:	4652      	mov	r2, sl
 80065f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80065fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80065fe:	f7ff ff26 	bl	800644e <__exponent>
 8006602:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006604:	1813      	adds	r3, r2, r0
 8006606:	2a01      	cmp	r2, #1
 8006608:	4681      	mov	r9, r0
 800660a:	6123      	str	r3, [r4, #16]
 800660c:	dc02      	bgt.n	8006614 <_printf_float+0x150>
 800660e:	6822      	ldr	r2, [r4, #0]
 8006610:	07d2      	lsls	r2, r2, #31
 8006612:	d501      	bpl.n	8006618 <_printf_float+0x154>
 8006614:	3301      	adds	r3, #1
 8006616:	6123      	str	r3, [r4, #16]
 8006618:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0a2      	beq.n	8006566 <_printf_float+0xa2>
 8006620:	232d      	movs	r3, #45	@ 0x2d
 8006622:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006626:	e79e      	b.n	8006566 <_printf_float+0xa2>
 8006628:	9a06      	ldr	r2, [sp, #24]
 800662a:	2a47      	cmp	r2, #71	@ 0x47
 800662c:	d1c2      	bne.n	80065b4 <_printf_float+0xf0>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1c0      	bne.n	80065b4 <_printf_float+0xf0>
 8006632:	2301      	movs	r3, #1
 8006634:	e7bd      	b.n	80065b2 <_printf_float+0xee>
 8006636:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800663a:	d9db      	bls.n	80065f4 <_printf_float+0x130>
 800663c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006640:	d118      	bne.n	8006674 <_printf_float+0x1b0>
 8006642:	2900      	cmp	r1, #0
 8006644:	6863      	ldr	r3, [r4, #4]
 8006646:	dd0b      	ble.n	8006660 <_printf_float+0x19c>
 8006648:	6121      	str	r1, [r4, #16]
 800664a:	b913      	cbnz	r3, 8006652 <_printf_float+0x18e>
 800664c:	6822      	ldr	r2, [r4, #0]
 800664e:	07d0      	lsls	r0, r2, #31
 8006650:	d502      	bpl.n	8006658 <_printf_float+0x194>
 8006652:	3301      	adds	r3, #1
 8006654:	440b      	add	r3, r1
 8006656:	6123      	str	r3, [r4, #16]
 8006658:	65a1      	str	r1, [r4, #88]	@ 0x58
 800665a:	f04f 0900 	mov.w	r9, #0
 800665e:	e7db      	b.n	8006618 <_printf_float+0x154>
 8006660:	b913      	cbnz	r3, 8006668 <_printf_float+0x1a4>
 8006662:	6822      	ldr	r2, [r4, #0]
 8006664:	07d2      	lsls	r2, r2, #31
 8006666:	d501      	bpl.n	800666c <_printf_float+0x1a8>
 8006668:	3302      	adds	r3, #2
 800666a:	e7f4      	b.n	8006656 <_printf_float+0x192>
 800666c:	2301      	movs	r3, #1
 800666e:	e7f2      	b.n	8006656 <_printf_float+0x192>
 8006670:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006676:	4299      	cmp	r1, r3
 8006678:	db05      	blt.n	8006686 <_printf_float+0x1c2>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	6121      	str	r1, [r4, #16]
 800667e:	07d8      	lsls	r0, r3, #31
 8006680:	d5ea      	bpl.n	8006658 <_printf_float+0x194>
 8006682:	1c4b      	adds	r3, r1, #1
 8006684:	e7e7      	b.n	8006656 <_printf_float+0x192>
 8006686:	2900      	cmp	r1, #0
 8006688:	bfd4      	ite	le
 800668a:	f1c1 0202 	rsble	r2, r1, #2
 800668e:	2201      	movgt	r2, #1
 8006690:	4413      	add	r3, r2
 8006692:	e7e0      	b.n	8006656 <_printf_float+0x192>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	055a      	lsls	r2, r3, #21
 8006698:	d407      	bmi.n	80066aa <_printf_float+0x1e6>
 800669a:	6923      	ldr	r3, [r4, #16]
 800669c:	4642      	mov	r2, r8
 800669e:	4631      	mov	r1, r6
 80066a0:	4628      	mov	r0, r5
 80066a2:	47b8      	blx	r7
 80066a4:	3001      	adds	r0, #1
 80066a6:	d12b      	bne.n	8006700 <_printf_float+0x23c>
 80066a8:	e767      	b.n	800657a <_printf_float+0xb6>
 80066aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066ae:	f240 80dd 	bls.w	800686c <_printf_float+0x3a8>
 80066b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066b6:	2200      	movs	r2, #0
 80066b8:	2300      	movs	r3, #0
 80066ba:	f7fa fa05 	bl	8000ac8 <__aeabi_dcmpeq>
 80066be:	2800      	cmp	r0, #0
 80066c0:	d033      	beq.n	800672a <_printf_float+0x266>
 80066c2:	4a37      	ldr	r2, [pc, #220]	@ (80067a0 <_printf_float+0x2dc>)
 80066c4:	2301      	movs	r3, #1
 80066c6:	4631      	mov	r1, r6
 80066c8:	4628      	mov	r0, r5
 80066ca:	47b8      	blx	r7
 80066cc:	3001      	adds	r0, #1
 80066ce:	f43f af54 	beq.w	800657a <_printf_float+0xb6>
 80066d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80066d6:	4543      	cmp	r3, r8
 80066d8:	db02      	blt.n	80066e0 <_printf_float+0x21c>
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	07d8      	lsls	r0, r3, #31
 80066de:	d50f      	bpl.n	8006700 <_printf_float+0x23c>
 80066e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066e4:	4631      	mov	r1, r6
 80066e6:	4628      	mov	r0, r5
 80066e8:	47b8      	blx	r7
 80066ea:	3001      	adds	r0, #1
 80066ec:	f43f af45 	beq.w	800657a <_printf_float+0xb6>
 80066f0:	f04f 0900 	mov.w	r9, #0
 80066f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80066f8:	f104 0a1a 	add.w	sl, r4, #26
 80066fc:	45c8      	cmp	r8, r9
 80066fe:	dc09      	bgt.n	8006714 <_printf_float+0x250>
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	079b      	lsls	r3, r3, #30
 8006704:	f100 8103 	bmi.w	800690e <_printf_float+0x44a>
 8006708:	68e0      	ldr	r0, [r4, #12]
 800670a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800670c:	4298      	cmp	r0, r3
 800670e:	bfb8      	it	lt
 8006710:	4618      	movlt	r0, r3
 8006712:	e734      	b.n	800657e <_printf_float+0xba>
 8006714:	2301      	movs	r3, #1
 8006716:	4652      	mov	r2, sl
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	47b8      	blx	r7
 800671e:	3001      	adds	r0, #1
 8006720:	f43f af2b 	beq.w	800657a <_printf_float+0xb6>
 8006724:	f109 0901 	add.w	r9, r9, #1
 8006728:	e7e8      	b.n	80066fc <_printf_float+0x238>
 800672a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800672c:	2b00      	cmp	r3, #0
 800672e:	dc39      	bgt.n	80067a4 <_printf_float+0x2e0>
 8006730:	4a1b      	ldr	r2, [pc, #108]	@ (80067a0 <_printf_float+0x2dc>)
 8006732:	2301      	movs	r3, #1
 8006734:	4631      	mov	r1, r6
 8006736:	4628      	mov	r0, r5
 8006738:	47b8      	blx	r7
 800673a:	3001      	adds	r0, #1
 800673c:	f43f af1d 	beq.w	800657a <_printf_float+0xb6>
 8006740:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006744:	ea59 0303 	orrs.w	r3, r9, r3
 8006748:	d102      	bne.n	8006750 <_printf_float+0x28c>
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	07d9      	lsls	r1, r3, #31
 800674e:	d5d7      	bpl.n	8006700 <_printf_float+0x23c>
 8006750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006754:	4631      	mov	r1, r6
 8006756:	4628      	mov	r0, r5
 8006758:	47b8      	blx	r7
 800675a:	3001      	adds	r0, #1
 800675c:	f43f af0d 	beq.w	800657a <_printf_float+0xb6>
 8006760:	f04f 0a00 	mov.w	sl, #0
 8006764:	f104 0b1a 	add.w	fp, r4, #26
 8006768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800676a:	425b      	negs	r3, r3
 800676c:	4553      	cmp	r3, sl
 800676e:	dc01      	bgt.n	8006774 <_printf_float+0x2b0>
 8006770:	464b      	mov	r3, r9
 8006772:	e793      	b.n	800669c <_printf_float+0x1d8>
 8006774:	2301      	movs	r3, #1
 8006776:	465a      	mov	r2, fp
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	f43f aefb 	beq.w	800657a <_printf_float+0xb6>
 8006784:	f10a 0a01 	add.w	sl, sl, #1
 8006788:	e7ee      	b.n	8006768 <_printf_float+0x2a4>
 800678a:	bf00      	nop
 800678c:	7fefffff 	.word	0x7fefffff
 8006790:	0801611b 	.word	0x0801611b
 8006794:	0801611f 	.word	0x0801611f
 8006798:	08016123 	.word	0x08016123
 800679c:	08016127 	.word	0x08016127
 80067a0:	0801612b 	.word	0x0801612b
 80067a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067aa:	4553      	cmp	r3, sl
 80067ac:	bfa8      	it	ge
 80067ae:	4653      	movge	r3, sl
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	4699      	mov	r9, r3
 80067b4:	dc36      	bgt.n	8006824 <_printf_float+0x360>
 80067b6:	f04f 0b00 	mov.w	fp, #0
 80067ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067be:	f104 021a 	add.w	r2, r4, #26
 80067c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067c4:	9306      	str	r3, [sp, #24]
 80067c6:	eba3 0309 	sub.w	r3, r3, r9
 80067ca:	455b      	cmp	r3, fp
 80067cc:	dc31      	bgt.n	8006832 <_printf_float+0x36e>
 80067ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067d0:	459a      	cmp	sl, r3
 80067d2:	dc3a      	bgt.n	800684a <_printf_float+0x386>
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	07da      	lsls	r2, r3, #31
 80067d8:	d437      	bmi.n	800684a <_printf_float+0x386>
 80067da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067dc:	ebaa 0903 	sub.w	r9, sl, r3
 80067e0:	9b06      	ldr	r3, [sp, #24]
 80067e2:	ebaa 0303 	sub.w	r3, sl, r3
 80067e6:	4599      	cmp	r9, r3
 80067e8:	bfa8      	it	ge
 80067ea:	4699      	movge	r9, r3
 80067ec:	f1b9 0f00 	cmp.w	r9, #0
 80067f0:	dc33      	bgt.n	800685a <_printf_float+0x396>
 80067f2:	f04f 0800 	mov.w	r8, #0
 80067f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067fa:	f104 0b1a 	add.w	fp, r4, #26
 80067fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006800:	ebaa 0303 	sub.w	r3, sl, r3
 8006804:	eba3 0309 	sub.w	r3, r3, r9
 8006808:	4543      	cmp	r3, r8
 800680a:	f77f af79 	ble.w	8006700 <_printf_float+0x23c>
 800680e:	2301      	movs	r3, #1
 8006810:	465a      	mov	r2, fp
 8006812:	4631      	mov	r1, r6
 8006814:	4628      	mov	r0, r5
 8006816:	47b8      	blx	r7
 8006818:	3001      	adds	r0, #1
 800681a:	f43f aeae 	beq.w	800657a <_printf_float+0xb6>
 800681e:	f108 0801 	add.w	r8, r8, #1
 8006822:	e7ec      	b.n	80067fe <_printf_float+0x33a>
 8006824:	4642      	mov	r2, r8
 8006826:	4631      	mov	r1, r6
 8006828:	4628      	mov	r0, r5
 800682a:	47b8      	blx	r7
 800682c:	3001      	adds	r0, #1
 800682e:	d1c2      	bne.n	80067b6 <_printf_float+0x2f2>
 8006830:	e6a3      	b.n	800657a <_printf_float+0xb6>
 8006832:	2301      	movs	r3, #1
 8006834:	4631      	mov	r1, r6
 8006836:	4628      	mov	r0, r5
 8006838:	9206      	str	r2, [sp, #24]
 800683a:	47b8      	blx	r7
 800683c:	3001      	adds	r0, #1
 800683e:	f43f ae9c 	beq.w	800657a <_printf_float+0xb6>
 8006842:	9a06      	ldr	r2, [sp, #24]
 8006844:	f10b 0b01 	add.w	fp, fp, #1
 8006848:	e7bb      	b.n	80067c2 <_printf_float+0x2fe>
 800684a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800684e:	4631      	mov	r1, r6
 8006850:	4628      	mov	r0, r5
 8006852:	47b8      	blx	r7
 8006854:	3001      	adds	r0, #1
 8006856:	d1c0      	bne.n	80067da <_printf_float+0x316>
 8006858:	e68f      	b.n	800657a <_printf_float+0xb6>
 800685a:	9a06      	ldr	r2, [sp, #24]
 800685c:	464b      	mov	r3, r9
 800685e:	4442      	add	r2, r8
 8006860:	4631      	mov	r1, r6
 8006862:	4628      	mov	r0, r5
 8006864:	47b8      	blx	r7
 8006866:	3001      	adds	r0, #1
 8006868:	d1c3      	bne.n	80067f2 <_printf_float+0x32e>
 800686a:	e686      	b.n	800657a <_printf_float+0xb6>
 800686c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006870:	f1ba 0f01 	cmp.w	sl, #1
 8006874:	dc01      	bgt.n	800687a <_printf_float+0x3b6>
 8006876:	07db      	lsls	r3, r3, #31
 8006878:	d536      	bpl.n	80068e8 <_printf_float+0x424>
 800687a:	2301      	movs	r3, #1
 800687c:	4642      	mov	r2, r8
 800687e:	4631      	mov	r1, r6
 8006880:	4628      	mov	r0, r5
 8006882:	47b8      	blx	r7
 8006884:	3001      	adds	r0, #1
 8006886:	f43f ae78 	beq.w	800657a <_printf_float+0xb6>
 800688a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	47b8      	blx	r7
 8006894:	3001      	adds	r0, #1
 8006896:	f43f ae70 	beq.w	800657a <_printf_float+0xb6>
 800689a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800689e:	2200      	movs	r2, #0
 80068a0:	2300      	movs	r3, #0
 80068a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068a6:	f7fa f90f 	bl	8000ac8 <__aeabi_dcmpeq>
 80068aa:	b9c0      	cbnz	r0, 80068de <_printf_float+0x41a>
 80068ac:	4653      	mov	r3, sl
 80068ae:	f108 0201 	add.w	r2, r8, #1
 80068b2:	4631      	mov	r1, r6
 80068b4:	4628      	mov	r0, r5
 80068b6:	47b8      	blx	r7
 80068b8:	3001      	adds	r0, #1
 80068ba:	d10c      	bne.n	80068d6 <_printf_float+0x412>
 80068bc:	e65d      	b.n	800657a <_printf_float+0xb6>
 80068be:	2301      	movs	r3, #1
 80068c0:	465a      	mov	r2, fp
 80068c2:	4631      	mov	r1, r6
 80068c4:	4628      	mov	r0, r5
 80068c6:	47b8      	blx	r7
 80068c8:	3001      	adds	r0, #1
 80068ca:	f43f ae56 	beq.w	800657a <_printf_float+0xb6>
 80068ce:	f108 0801 	add.w	r8, r8, #1
 80068d2:	45d0      	cmp	r8, sl
 80068d4:	dbf3      	blt.n	80068be <_printf_float+0x3fa>
 80068d6:	464b      	mov	r3, r9
 80068d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80068dc:	e6df      	b.n	800669e <_printf_float+0x1da>
 80068de:	f04f 0800 	mov.w	r8, #0
 80068e2:	f104 0b1a 	add.w	fp, r4, #26
 80068e6:	e7f4      	b.n	80068d2 <_printf_float+0x40e>
 80068e8:	2301      	movs	r3, #1
 80068ea:	4642      	mov	r2, r8
 80068ec:	e7e1      	b.n	80068b2 <_printf_float+0x3ee>
 80068ee:	2301      	movs	r3, #1
 80068f0:	464a      	mov	r2, r9
 80068f2:	4631      	mov	r1, r6
 80068f4:	4628      	mov	r0, r5
 80068f6:	47b8      	blx	r7
 80068f8:	3001      	adds	r0, #1
 80068fa:	f43f ae3e 	beq.w	800657a <_printf_float+0xb6>
 80068fe:	f108 0801 	add.w	r8, r8, #1
 8006902:	68e3      	ldr	r3, [r4, #12]
 8006904:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006906:	1a5b      	subs	r3, r3, r1
 8006908:	4543      	cmp	r3, r8
 800690a:	dcf0      	bgt.n	80068ee <_printf_float+0x42a>
 800690c:	e6fc      	b.n	8006708 <_printf_float+0x244>
 800690e:	f04f 0800 	mov.w	r8, #0
 8006912:	f104 0919 	add.w	r9, r4, #25
 8006916:	e7f4      	b.n	8006902 <_printf_float+0x43e>

08006918 <_printf_common>:
 8006918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800691c:	4616      	mov	r6, r2
 800691e:	4698      	mov	r8, r3
 8006920:	688a      	ldr	r2, [r1, #8]
 8006922:	690b      	ldr	r3, [r1, #16]
 8006924:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006928:	4293      	cmp	r3, r2
 800692a:	bfb8      	it	lt
 800692c:	4613      	movlt	r3, r2
 800692e:	6033      	str	r3, [r6, #0]
 8006930:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006934:	4607      	mov	r7, r0
 8006936:	460c      	mov	r4, r1
 8006938:	b10a      	cbz	r2, 800693e <_printf_common+0x26>
 800693a:	3301      	adds	r3, #1
 800693c:	6033      	str	r3, [r6, #0]
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	0699      	lsls	r1, r3, #26
 8006942:	bf42      	ittt	mi
 8006944:	6833      	ldrmi	r3, [r6, #0]
 8006946:	3302      	addmi	r3, #2
 8006948:	6033      	strmi	r3, [r6, #0]
 800694a:	6825      	ldr	r5, [r4, #0]
 800694c:	f015 0506 	ands.w	r5, r5, #6
 8006950:	d106      	bne.n	8006960 <_printf_common+0x48>
 8006952:	f104 0a19 	add.w	sl, r4, #25
 8006956:	68e3      	ldr	r3, [r4, #12]
 8006958:	6832      	ldr	r2, [r6, #0]
 800695a:	1a9b      	subs	r3, r3, r2
 800695c:	42ab      	cmp	r3, r5
 800695e:	dc26      	bgt.n	80069ae <_printf_common+0x96>
 8006960:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006964:	6822      	ldr	r2, [r4, #0]
 8006966:	3b00      	subs	r3, #0
 8006968:	bf18      	it	ne
 800696a:	2301      	movne	r3, #1
 800696c:	0692      	lsls	r2, r2, #26
 800696e:	d42b      	bmi.n	80069c8 <_printf_common+0xb0>
 8006970:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006974:	4641      	mov	r1, r8
 8006976:	4638      	mov	r0, r7
 8006978:	47c8      	blx	r9
 800697a:	3001      	adds	r0, #1
 800697c:	d01e      	beq.n	80069bc <_printf_common+0xa4>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	6922      	ldr	r2, [r4, #16]
 8006982:	f003 0306 	and.w	r3, r3, #6
 8006986:	2b04      	cmp	r3, #4
 8006988:	bf02      	ittt	eq
 800698a:	68e5      	ldreq	r5, [r4, #12]
 800698c:	6833      	ldreq	r3, [r6, #0]
 800698e:	1aed      	subeq	r5, r5, r3
 8006990:	68a3      	ldr	r3, [r4, #8]
 8006992:	bf0c      	ite	eq
 8006994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006998:	2500      	movne	r5, #0
 800699a:	4293      	cmp	r3, r2
 800699c:	bfc4      	itt	gt
 800699e:	1a9b      	subgt	r3, r3, r2
 80069a0:	18ed      	addgt	r5, r5, r3
 80069a2:	2600      	movs	r6, #0
 80069a4:	341a      	adds	r4, #26
 80069a6:	42b5      	cmp	r5, r6
 80069a8:	d11a      	bne.n	80069e0 <_printf_common+0xc8>
 80069aa:	2000      	movs	r0, #0
 80069ac:	e008      	b.n	80069c0 <_printf_common+0xa8>
 80069ae:	2301      	movs	r3, #1
 80069b0:	4652      	mov	r2, sl
 80069b2:	4641      	mov	r1, r8
 80069b4:	4638      	mov	r0, r7
 80069b6:	47c8      	blx	r9
 80069b8:	3001      	adds	r0, #1
 80069ba:	d103      	bne.n	80069c4 <_printf_common+0xac>
 80069bc:	f04f 30ff 	mov.w	r0, #4294967295
 80069c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c4:	3501      	adds	r5, #1
 80069c6:	e7c6      	b.n	8006956 <_printf_common+0x3e>
 80069c8:	18e1      	adds	r1, r4, r3
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	2030      	movs	r0, #48	@ 0x30
 80069ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069d2:	4422      	add	r2, r4
 80069d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069dc:	3302      	adds	r3, #2
 80069de:	e7c7      	b.n	8006970 <_printf_common+0x58>
 80069e0:	2301      	movs	r3, #1
 80069e2:	4622      	mov	r2, r4
 80069e4:	4641      	mov	r1, r8
 80069e6:	4638      	mov	r0, r7
 80069e8:	47c8      	blx	r9
 80069ea:	3001      	adds	r0, #1
 80069ec:	d0e6      	beq.n	80069bc <_printf_common+0xa4>
 80069ee:	3601      	adds	r6, #1
 80069f0:	e7d9      	b.n	80069a6 <_printf_common+0x8e>
	...

080069f4 <_printf_i>:
 80069f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069f8:	7e0f      	ldrb	r7, [r1, #24]
 80069fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069fc:	2f78      	cmp	r7, #120	@ 0x78
 80069fe:	4691      	mov	r9, r2
 8006a00:	4680      	mov	r8, r0
 8006a02:	460c      	mov	r4, r1
 8006a04:	469a      	mov	sl, r3
 8006a06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a0a:	d807      	bhi.n	8006a1c <_printf_i+0x28>
 8006a0c:	2f62      	cmp	r7, #98	@ 0x62
 8006a0e:	d80a      	bhi.n	8006a26 <_printf_i+0x32>
 8006a10:	2f00      	cmp	r7, #0
 8006a12:	f000 80d2 	beq.w	8006bba <_printf_i+0x1c6>
 8006a16:	2f58      	cmp	r7, #88	@ 0x58
 8006a18:	f000 80b9 	beq.w	8006b8e <_printf_i+0x19a>
 8006a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a24:	e03a      	b.n	8006a9c <_printf_i+0xa8>
 8006a26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a2a:	2b15      	cmp	r3, #21
 8006a2c:	d8f6      	bhi.n	8006a1c <_printf_i+0x28>
 8006a2e:	a101      	add	r1, pc, #4	@ (adr r1, 8006a34 <_printf_i+0x40>)
 8006a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a34:	08006a8d 	.word	0x08006a8d
 8006a38:	08006aa1 	.word	0x08006aa1
 8006a3c:	08006a1d 	.word	0x08006a1d
 8006a40:	08006a1d 	.word	0x08006a1d
 8006a44:	08006a1d 	.word	0x08006a1d
 8006a48:	08006a1d 	.word	0x08006a1d
 8006a4c:	08006aa1 	.word	0x08006aa1
 8006a50:	08006a1d 	.word	0x08006a1d
 8006a54:	08006a1d 	.word	0x08006a1d
 8006a58:	08006a1d 	.word	0x08006a1d
 8006a5c:	08006a1d 	.word	0x08006a1d
 8006a60:	08006ba1 	.word	0x08006ba1
 8006a64:	08006acb 	.word	0x08006acb
 8006a68:	08006b5b 	.word	0x08006b5b
 8006a6c:	08006a1d 	.word	0x08006a1d
 8006a70:	08006a1d 	.word	0x08006a1d
 8006a74:	08006bc3 	.word	0x08006bc3
 8006a78:	08006a1d 	.word	0x08006a1d
 8006a7c:	08006acb 	.word	0x08006acb
 8006a80:	08006a1d 	.word	0x08006a1d
 8006a84:	08006a1d 	.word	0x08006a1d
 8006a88:	08006b63 	.word	0x08006b63
 8006a8c:	6833      	ldr	r3, [r6, #0]
 8006a8e:	1d1a      	adds	r2, r3, #4
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6032      	str	r2, [r6, #0]
 8006a94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e09d      	b.n	8006bdc <_printf_i+0x1e8>
 8006aa0:	6833      	ldr	r3, [r6, #0]
 8006aa2:	6820      	ldr	r0, [r4, #0]
 8006aa4:	1d19      	adds	r1, r3, #4
 8006aa6:	6031      	str	r1, [r6, #0]
 8006aa8:	0606      	lsls	r6, r0, #24
 8006aaa:	d501      	bpl.n	8006ab0 <_printf_i+0xbc>
 8006aac:	681d      	ldr	r5, [r3, #0]
 8006aae:	e003      	b.n	8006ab8 <_printf_i+0xc4>
 8006ab0:	0645      	lsls	r5, r0, #25
 8006ab2:	d5fb      	bpl.n	8006aac <_printf_i+0xb8>
 8006ab4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ab8:	2d00      	cmp	r5, #0
 8006aba:	da03      	bge.n	8006ac4 <_printf_i+0xd0>
 8006abc:	232d      	movs	r3, #45	@ 0x2d
 8006abe:	426d      	negs	r5, r5
 8006ac0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ac4:	4859      	ldr	r0, [pc, #356]	@ (8006c2c <_printf_i+0x238>)
 8006ac6:	230a      	movs	r3, #10
 8006ac8:	e011      	b.n	8006aee <_printf_i+0xfa>
 8006aca:	6821      	ldr	r1, [r4, #0]
 8006acc:	6833      	ldr	r3, [r6, #0]
 8006ace:	0608      	lsls	r0, r1, #24
 8006ad0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ad4:	d402      	bmi.n	8006adc <_printf_i+0xe8>
 8006ad6:	0649      	lsls	r1, r1, #25
 8006ad8:	bf48      	it	mi
 8006ada:	b2ad      	uxthmi	r5, r5
 8006adc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ade:	4853      	ldr	r0, [pc, #332]	@ (8006c2c <_printf_i+0x238>)
 8006ae0:	6033      	str	r3, [r6, #0]
 8006ae2:	bf14      	ite	ne
 8006ae4:	230a      	movne	r3, #10
 8006ae6:	2308      	moveq	r3, #8
 8006ae8:	2100      	movs	r1, #0
 8006aea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006aee:	6866      	ldr	r6, [r4, #4]
 8006af0:	60a6      	str	r6, [r4, #8]
 8006af2:	2e00      	cmp	r6, #0
 8006af4:	bfa2      	ittt	ge
 8006af6:	6821      	ldrge	r1, [r4, #0]
 8006af8:	f021 0104 	bicge.w	r1, r1, #4
 8006afc:	6021      	strge	r1, [r4, #0]
 8006afe:	b90d      	cbnz	r5, 8006b04 <_printf_i+0x110>
 8006b00:	2e00      	cmp	r6, #0
 8006b02:	d04b      	beq.n	8006b9c <_printf_i+0x1a8>
 8006b04:	4616      	mov	r6, r2
 8006b06:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b0a:	fb03 5711 	mls	r7, r3, r1, r5
 8006b0e:	5dc7      	ldrb	r7, [r0, r7]
 8006b10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b14:	462f      	mov	r7, r5
 8006b16:	42bb      	cmp	r3, r7
 8006b18:	460d      	mov	r5, r1
 8006b1a:	d9f4      	bls.n	8006b06 <_printf_i+0x112>
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d10b      	bne.n	8006b38 <_printf_i+0x144>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	07df      	lsls	r7, r3, #31
 8006b24:	d508      	bpl.n	8006b38 <_printf_i+0x144>
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	6861      	ldr	r1, [r4, #4]
 8006b2a:	4299      	cmp	r1, r3
 8006b2c:	bfde      	ittt	le
 8006b2e:	2330      	movle	r3, #48	@ 0x30
 8006b30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b38:	1b92      	subs	r2, r2, r6
 8006b3a:	6122      	str	r2, [r4, #16]
 8006b3c:	f8cd a000 	str.w	sl, [sp]
 8006b40:	464b      	mov	r3, r9
 8006b42:	aa03      	add	r2, sp, #12
 8006b44:	4621      	mov	r1, r4
 8006b46:	4640      	mov	r0, r8
 8006b48:	f7ff fee6 	bl	8006918 <_printf_common>
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d14a      	bne.n	8006be6 <_printf_i+0x1f2>
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	b004      	add	sp, #16
 8006b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	f043 0320 	orr.w	r3, r3, #32
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	4833      	ldr	r0, [pc, #204]	@ (8006c30 <_printf_i+0x23c>)
 8006b64:	2778      	movs	r7, #120	@ 0x78
 8006b66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	6831      	ldr	r1, [r6, #0]
 8006b6e:	061f      	lsls	r7, r3, #24
 8006b70:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b74:	d402      	bmi.n	8006b7c <_printf_i+0x188>
 8006b76:	065f      	lsls	r7, r3, #25
 8006b78:	bf48      	it	mi
 8006b7a:	b2ad      	uxthmi	r5, r5
 8006b7c:	6031      	str	r1, [r6, #0]
 8006b7e:	07d9      	lsls	r1, r3, #31
 8006b80:	bf44      	itt	mi
 8006b82:	f043 0320 	orrmi.w	r3, r3, #32
 8006b86:	6023      	strmi	r3, [r4, #0]
 8006b88:	b11d      	cbz	r5, 8006b92 <_printf_i+0x19e>
 8006b8a:	2310      	movs	r3, #16
 8006b8c:	e7ac      	b.n	8006ae8 <_printf_i+0xf4>
 8006b8e:	4827      	ldr	r0, [pc, #156]	@ (8006c2c <_printf_i+0x238>)
 8006b90:	e7e9      	b.n	8006b66 <_printf_i+0x172>
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	f023 0320 	bic.w	r3, r3, #32
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	e7f6      	b.n	8006b8a <_printf_i+0x196>
 8006b9c:	4616      	mov	r6, r2
 8006b9e:	e7bd      	b.n	8006b1c <_printf_i+0x128>
 8006ba0:	6833      	ldr	r3, [r6, #0]
 8006ba2:	6825      	ldr	r5, [r4, #0]
 8006ba4:	6961      	ldr	r1, [r4, #20]
 8006ba6:	1d18      	adds	r0, r3, #4
 8006ba8:	6030      	str	r0, [r6, #0]
 8006baa:	062e      	lsls	r6, r5, #24
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	d501      	bpl.n	8006bb4 <_printf_i+0x1c0>
 8006bb0:	6019      	str	r1, [r3, #0]
 8006bb2:	e002      	b.n	8006bba <_printf_i+0x1c6>
 8006bb4:	0668      	lsls	r0, r5, #25
 8006bb6:	d5fb      	bpl.n	8006bb0 <_printf_i+0x1bc>
 8006bb8:	8019      	strh	r1, [r3, #0]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	6123      	str	r3, [r4, #16]
 8006bbe:	4616      	mov	r6, r2
 8006bc0:	e7bc      	b.n	8006b3c <_printf_i+0x148>
 8006bc2:	6833      	ldr	r3, [r6, #0]
 8006bc4:	1d1a      	adds	r2, r3, #4
 8006bc6:	6032      	str	r2, [r6, #0]
 8006bc8:	681e      	ldr	r6, [r3, #0]
 8006bca:	6862      	ldr	r2, [r4, #4]
 8006bcc:	2100      	movs	r1, #0
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f7f9 fafe 	bl	80001d0 <memchr>
 8006bd4:	b108      	cbz	r0, 8006bda <_printf_i+0x1e6>
 8006bd6:	1b80      	subs	r0, r0, r6
 8006bd8:	6060      	str	r0, [r4, #4]
 8006bda:	6863      	ldr	r3, [r4, #4]
 8006bdc:	6123      	str	r3, [r4, #16]
 8006bde:	2300      	movs	r3, #0
 8006be0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006be4:	e7aa      	b.n	8006b3c <_printf_i+0x148>
 8006be6:	6923      	ldr	r3, [r4, #16]
 8006be8:	4632      	mov	r2, r6
 8006bea:	4649      	mov	r1, r9
 8006bec:	4640      	mov	r0, r8
 8006bee:	47d0      	blx	sl
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d0ad      	beq.n	8006b50 <_printf_i+0x15c>
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	079b      	lsls	r3, r3, #30
 8006bf8:	d413      	bmi.n	8006c22 <_printf_i+0x22e>
 8006bfa:	68e0      	ldr	r0, [r4, #12]
 8006bfc:	9b03      	ldr	r3, [sp, #12]
 8006bfe:	4298      	cmp	r0, r3
 8006c00:	bfb8      	it	lt
 8006c02:	4618      	movlt	r0, r3
 8006c04:	e7a6      	b.n	8006b54 <_printf_i+0x160>
 8006c06:	2301      	movs	r3, #1
 8006c08:	4632      	mov	r2, r6
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	47d0      	blx	sl
 8006c10:	3001      	adds	r0, #1
 8006c12:	d09d      	beq.n	8006b50 <_printf_i+0x15c>
 8006c14:	3501      	adds	r5, #1
 8006c16:	68e3      	ldr	r3, [r4, #12]
 8006c18:	9903      	ldr	r1, [sp, #12]
 8006c1a:	1a5b      	subs	r3, r3, r1
 8006c1c:	42ab      	cmp	r3, r5
 8006c1e:	dcf2      	bgt.n	8006c06 <_printf_i+0x212>
 8006c20:	e7eb      	b.n	8006bfa <_printf_i+0x206>
 8006c22:	2500      	movs	r5, #0
 8006c24:	f104 0619 	add.w	r6, r4, #25
 8006c28:	e7f5      	b.n	8006c16 <_printf_i+0x222>
 8006c2a:	bf00      	nop
 8006c2c:	0801612d 	.word	0x0801612d
 8006c30:	0801613e 	.word	0x0801613e

08006c34 <_scanf_float>:
 8006c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c38:	b087      	sub	sp, #28
 8006c3a:	4617      	mov	r7, r2
 8006c3c:	9303      	str	r3, [sp, #12]
 8006c3e:	688b      	ldr	r3, [r1, #8]
 8006c40:	1e5a      	subs	r2, r3, #1
 8006c42:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006c46:	bf81      	itttt	hi
 8006c48:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006c4c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006c50:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006c54:	608b      	strhi	r3, [r1, #8]
 8006c56:	680b      	ldr	r3, [r1, #0]
 8006c58:	460a      	mov	r2, r1
 8006c5a:	f04f 0500 	mov.w	r5, #0
 8006c5e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006c62:	f842 3b1c 	str.w	r3, [r2], #28
 8006c66:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c6a:	4680      	mov	r8, r0
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	bf98      	it	ls
 8006c70:	f04f 0b00 	movls.w	fp, #0
 8006c74:	9201      	str	r2, [sp, #4]
 8006c76:	4616      	mov	r6, r2
 8006c78:	46aa      	mov	sl, r5
 8006c7a:	46a9      	mov	r9, r5
 8006c7c:	9502      	str	r5, [sp, #8]
 8006c7e:	68a2      	ldr	r2, [r4, #8]
 8006c80:	b152      	cbz	r2, 8006c98 <_scanf_float+0x64>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	2b4e      	cmp	r3, #78	@ 0x4e
 8006c88:	d864      	bhi.n	8006d54 <_scanf_float+0x120>
 8006c8a:	2b40      	cmp	r3, #64	@ 0x40
 8006c8c:	d83c      	bhi.n	8006d08 <_scanf_float+0xd4>
 8006c8e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006c92:	b2c8      	uxtb	r0, r1
 8006c94:	280e      	cmp	r0, #14
 8006c96:	d93a      	bls.n	8006d0e <_scanf_float+0xda>
 8006c98:	f1b9 0f00 	cmp.w	r9, #0
 8006c9c:	d003      	beq.n	8006ca6 <_scanf_float+0x72>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006caa:	f1ba 0f01 	cmp.w	sl, #1
 8006cae:	f200 8117 	bhi.w	8006ee0 <_scanf_float+0x2ac>
 8006cb2:	9b01      	ldr	r3, [sp, #4]
 8006cb4:	429e      	cmp	r6, r3
 8006cb6:	f200 8108 	bhi.w	8006eca <_scanf_float+0x296>
 8006cba:	2001      	movs	r0, #1
 8006cbc:	b007      	add	sp, #28
 8006cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006cc6:	2a0d      	cmp	r2, #13
 8006cc8:	d8e6      	bhi.n	8006c98 <_scanf_float+0x64>
 8006cca:	a101      	add	r1, pc, #4	@ (adr r1, 8006cd0 <_scanf_float+0x9c>)
 8006ccc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cd0:	08006e17 	.word	0x08006e17
 8006cd4:	08006c99 	.word	0x08006c99
 8006cd8:	08006c99 	.word	0x08006c99
 8006cdc:	08006c99 	.word	0x08006c99
 8006ce0:	08006e77 	.word	0x08006e77
 8006ce4:	08006e4f 	.word	0x08006e4f
 8006ce8:	08006c99 	.word	0x08006c99
 8006cec:	08006c99 	.word	0x08006c99
 8006cf0:	08006e25 	.word	0x08006e25
 8006cf4:	08006c99 	.word	0x08006c99
 8006cf8:	08006c99 	.word	0x08006c99
 8006cfc:	08006c99 	.word	0x08006c99
 8006d00:	08006c99 	.word	0x08006c99
 8006d04:	08006ddd 	.word	0x08006ddd
 8006d08:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006d0c:	e7db      	b.n	8006cc6 <_scanf_float+0x92>
 8006d0e:	290e      	cmp	r1, #14
 8006d10:	d8c2      	bhi.n	8006c98 <_scanf_float+0x64>
 8006d12:	a001      	add	r0, pc, #4	@ (adr r0, 8006d18 <_scanf_float+0xe4>)
 8006d14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d18:	08006dcd 	.word	0x08006dcd
 8006d1c:	08006c99 	.word	0x08006c99
 8006d20:	08006dcd 	.word	0x08006dcd
 8006d24:	08006e63 	.word	0x08006e63
 8006d28:	08006c99 	.word	0x08006c99
 8006d2c:	08006d75 	.word	0x08006d75
 8006d30:	08006db3 	.word	0x08006db3
 8006d34:	08006db3 	.word	0x08006db3
 8006d38:	08006db3 	.word	0x08006db3
 8006d3c:	08006db3 	.word	0x08006db3
 8006d40:	08006db3 	.word	0x08006db3
 8006d44:	08006db3 	.word	0x08006db3
 8006d48:	08006db3 	.word	0x08006db3
 8006d4c:	08006db3 	.word	0x08006db3
 8006d50:	08006db3 	.word	0x08006db3
 8006d54:	2b6e      	cmp	r3, #110	@ 0x6e
 8006d56:	d809      	bhi.n	8006d6c <_scanf_float+0x138>
 8006d58:	2b60      	cmp	r3, #96	@ 0x60
 8006d5a:	d8b2      	bhi.n	8006cc2 <_scanf_float+0x8e>
 8006d5c:	2b54      	cmp	r3, #84	@ 0x54
 8006d5e:	d07b      	beq.n	8006e58 <_scanf_float+0x224>
 8006d60:	2b59      	cmp	r3, #89	@ 0x59
 8006d62:	d199      	bne.n	8006c98 <_scanf_float+0x64>
 8006d64:	2d07      	cmp	r5, #7
 8006d66:	d197      	bne.n	8006c98 <_scanf_float+0x64>
 8006d68:	2508      	movs	r5, #8
 8006d6a:	e02c      	b.n	8006dc6 <_scanf_float+0x192>
 8006d6c:	2b74      	cmp	r3, #116	@ 0x74
 8006d6e:	d073      	beq.n	8006e58 <_scanf_float+0x224>
 8006d70:	2b79      	cmp	r3, #121	@ 0x79
 8006d72:	e7f6      	b.n	8006d62 <_scanf_float+0x12e>
 8006d74:	6821      	ldr	r1, [r4, #0]
 8006d76:	05c8      	lsls	r0, r1, #23
 8006d78:	d51b      	bpl.n	8006db2 <_scanf_float+0x17e>
 8006d7a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006d7e:	6021      	str	r1, [r4, #0]
 8006d80:	f109 0901 	add.w	r9, r9, #1
 8006d84:	f1bb 0f00 	cmp.w	fp, #0
 8006d88:	d003      	beq.n	8006d92 <_scanf_float+0x15e>
 8006d8a:	3201      	adds	r2, #1
 8006d8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d90:	60a2      	str	r2, [r4, #8]
 8006d92:	68a3      	ldr	r3, [r4, #8]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	60a3      	str	r3, [r4, #8]
 8006d98:	6923      	ldr	r3, [r4, #16]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	6123      	str	r3, [r4, #16]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	607b      	str	r3, [r7, #4]
 8006da6:	f340 8087 	ble.w	8006eb8 <_scanf_float+0x284>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	3301      	adds	r3, #1
 8006dae:	603b      	str	r3, [r7, #0]
 8006db0:	e765      	b.n	8006c7e <_scanf_float+0x4a>
 8006db2:	eb1a 0105 	adds.w	r1, sl, r5
 8006db6:	f47f af6f 	bne.w	8006c98 <_scanf_float+0x64>
 8006dba:	6822      	ldr	r2, [r4, #0]
 8006dbc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006dc0:	6022      	str	r2, [r4, #0]
 8006dc2:	460d      	mov	r5, r1
 8006dc4:	468a      	mov	sl, r1
 8006dc6:	f806 3b01 	strb.w	r3, [r6], #1
 8006dca:	e7e2      	b.n	8006d92 <_scanf_float+0x15e>
 8006dcc:	6822      	ldr	r2, [r4, #0]
 8006dce:	0610      	lsls	r0, r2, #24
 8006dd0:	f57f af62 	bpl.w	8006c98 <_scanf_float+0x64>
 8006dd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006dd8:	6022      	str	r2, [r4, #0]
 8006dda:	e7f4      	b.n	8006dc6 <_scanf_float+0x192>
 8006ddc:	f1ba 0f00 	cmp.w	sl, #0
 8006de0:	d10e      	bne.n	8006e00 <_scanf_float+0x1cc>
 8006de2:	f1b9 0f00 	cmp.w	r9, #0
 8006de6:	d10e      	bne.n	8006e06 <_scanf_float+0x1d2>
 8006de8:	6822      	ldr	r2, [r4, #0]
 8006dea:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006dee:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006df2:	d108      	bne.n	8006e06 <_scanf_float+0x1d2>
 8006df4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006df8:	6022      	str	r2, [r4, #0]
 8006dfa:	f04f 0a01 	mov.w	sl, #1
 8006dfe:	e7e2      	b.n	8006dc6 <_scanf_float+0x192>
 8006e00:	f1ba 0f02 	cmp.w	sl, #2
 8006e04:	d055      	beq.n	8006eb2 <_scanf_float+0x27e>
 8006e06:	2d01      	cmp	r5, #1
 8006e08:	d002      	beq.n	8006e10 <_scanf_float+0x1dc>
 8006e0a:	2d04      	cmp	r5, #4
 8006e0c:	f47f af44 	bne.w	8006c98 <_scanf_float+0x64>
 8006e10:	3501      	adds	r5, #1
 8006e12:	b2ed      	uxtb	r5, r5
 8006e14:	e7d7      	b.n	8006dc6 <_scanf_float+0x192>
 8006e16:	f1ba 0f01 	cmp.w	sl, #1
 8006e1a:	f47f af3d 	bne.w	8006c98 <_scanf_float+0x64>
 8006e1e:	f04f 0a02 	mov.w	sl, #2
 8006e22:	e7d0      	b.n	8006dc6 <_scanf_float+0x192>
 8006e24:	b97d      	cbnz	r5, 8006e46 <_scanf_float+0x212>
 8006e26:	f1b9 0f00 	cmp.w	r9, #0
 8006e2a:	f47f af38 	bne.w	8006c9e <_scanf_float+0x6a>
 8006e2e:	6822      	ldr	r2, [r4, #0]
 8006e30:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e34:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e38:	f040 8108 	bne.w	800704c <_scanf_float+0x418>
 8006e3c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e40:	6022      	str	r2, [r4, #0]
 8006e42:	2501      	movs	r5, #1
 8006e44:	e7bf      	b.n	8006dc6 <_scanf_float+0x192>
 8006e46:	2d03      	cmp	r5, #3
 8006e48:	d0e2      	beq.n	8006e10 <_scanf_float+0x1dc>
 8006e4a:	2d05      	cmp	r5, #5
 8006e4c:	e7de      	b.n	8006e0c <_scanf_float+0x1d8>
 8006e4e:	2d02      	cmp	r5, #2
 8006e50:	f47f af22 	bne.w	8006c98 <_scanf_float+0x64>
 8006e54:	2503      	movs	r5, #3
 8006e56:	e7b6      	b.n	8006dc6 <_scanf_float+0x192>
 8006e58:	2d06      	cmp	r5, #6
 8006e5a:	f47f af1d 	bne.w	8006c98 <_scanf_float+0x64>
 8006e5e:	2507      	movs	r5, #7
 8006e60:	e7b1      	b.n	8006dc6 <_scanf_float+0x192>
 8006e62:	6822      	ldr	r2, [r4, #0]
 8006e64:	0591      	lsls	r1, r2, #22
 8006e66:	f57f af17 	bpl.w	8006c98 <_scanf_float+0x64>
 8006e6a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006e6e:	6022      	str	r2, [r4, #0]
 8006e70:	f8cd 9008 	str.w	r9, [sp, #8]
 8006e74:	e7a7      	b.n	8006dc6 <_scanf_float+0x192>
 8006e76:	6822      	ldr	r2, [r4, #0]
 8006e78:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006e7c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006e80:	d006      	beq.n	8006e90 <_scanf_float+0x25c>
 8006e82:	0550      	lsls	r0, r2, #21
 8006e84:	f57f af08 	bpl.w	8006c98 <_scanf_float+0x64>
 8006e88:	f1b9 0f00 	cmp.w	r9, #0
 8006e8c:	f000 80de 	beq.w	800704c <_scanf_float+0x418>
 8006e90:	0591      	lsls	r1, r2, #22
 8006e92:	bf58      	it	pl
 8006e94:	9902      	ldrpl	r1, [sp, #8]
 8006e96:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e9a:	bf58      	it	pl
 8006e9c:	eba9 0101 	subpl.w	r1, r9, r1
 8006ea0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006ea4:	bf58      	it	pl
 8006ea6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006eaa:	6022      	str	r2, [r4, #0]
 8006eac:	f04f 0900 	mov.w	r9, #0
 8006eb0:	e789      	b.n	8006dc6 <_scanf_float+0x192>
 8006eb2:	f04f 0a03 	mov.w	sl, #3
 8006eb6:	e786      	b.n	8006dc6 <_scanf_float+0x192>
 8006eb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006ebc:	4639      	mov	r1, r7
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	4798      	blx	r3
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	f43f aedb 	beq.w	8006c7e <_scanf_float+0x4a>
 8006ec8:	e6e6      	b.n	8006c98 <_scanf_float+0x64>
 8006eca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ece:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ed2:	463a      	mov	r2, r7
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	4798      	blx	r3
 8006ed8:	6923      	ldr	r3, [r4, #16]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	6123      	str	r3, [r4, #16]
 8006ede:	e6e8      	b.n	8006cb2 <_scanf_float+0x7e>
 8006ee0:	1e6b      	subs	r3, r5, #1
 8006ee2:	2b06      	cmp	r3, #6
 8006ee4:	d824      	bhi.n	8006f30 <_scanf_float+0x2fc>
 8006ee6:	2d02      	cmp	r5, #2
 8006ee8:	d836      	bhi.n	8006f58 <_scanf_float+0x324>
 8006eea:	9b01      	ldr	r3, [sp, #4]
 8006eec:	429e      	cmp	r6, r3
 8006eee:	f67f aee4 	bls.w	8006cba <_scanf_float+0x86>
 8006ef2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ef6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006efa:	463a      	mov	r2, r7
 8006efc:	4640      	mov	r0, r8
 8006efe:	4798      	blx	r3
 8006f00:	6923      	ldr	r3, [r4, #16]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	6123      	str	r3, [r4, #16]
 8006f06:	e7f0      	b.n	8006eea <_scanf_float+0x2b6>
 8006f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f0c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006f10:	463a      	mov	r2, r7
 8006f12:	4640      	mov	r0, r8
 8006f14:	4798      	blx	r3
 8006f16:	6923      	ldr	r3, [r4, #16]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	6123      	str	r3, [r4, #16]
 8006f1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f20:	fa5f fa8a 	uxtb.w	sl, sl
 8006f24:	f1ba 0f02 	cmp.w	sl, #2
 8006f28:	d1ee      	bne.n	8006f08 <_scanf_float+0x2d4>
 8006f2a:	3d03      	subs	r5, #3
 8006f2c:	b2ed      	uxtb	r5, r5
 8006f2e:	1b76      	subs	r6, r6, r5
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	05da      	lsls	r2, r3, #23
 8006f34:	d530      	bpl.n	8006f98 <_scanf_float+0x364>
 8006f36:	055b      	lsls	r3, r3, #21
 8006f38:	d511      	bpl.n	8006f5e <_scanf_float+0x32a>
 8006f3a:	9b01      	ldr	r3, [sp, #4]
 8006f3c:	429e      	cmp	r6, r3
 8006f3e:	f67f aebc 	bls.w	8006cba <_scanf_float+0x86>
 8006f42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f4a:	463a      	mov	r2, r7
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	4798      	blx	r3
 8006f50:	6923      	ldr	r3, [r4, #16]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	6123      	str	r3, [r4, #16]
 8006f56:	e7f0      	b.n	8006f3a <_scanf_float+0x306>
 8006f58:	46aa      	mov	sl, r5
 8006f5a:	46b3      	mov	fp, r6
 8006f5c:	e7de      	b.n	8006f1c <_scanf_float+0x2e8>
 8006f5e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f62:	6923      	ldr	r3, [r4, #16]
 8006f64:	2965      	cmp	r1, #101	@ 0x65
 8006f66:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f6a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f6e:	6123      	str	r3, [r4, #16]
 8006f70:	d00c      	beq.n	8006f8c <_scanf_float+0x358>
 8006f72:	2945      	cmp	r1, #69	@ 0x45
 8006f74:	d00a      	beq.n	8006f8c <_scanf_float+0x358>
 8006f76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f7a:	463a      	mov	r2, r7
 8006f7c:	4640      	mov	r0, r8
 8006f7e:	4798      	blx	r3
 8006f80:	6923      	ldr	r3, [r4, #16]
 8006f82:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	1eb5      	subs	r5, r6, #2
 8006f8a:	6123      	str	r3, [r4, #16]
 8006f8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f90:	463a      	mov	r2, r7
 8006f92:	4640      	mov	r0, r8
 8006f94:	4798      	blx	r3
 8006f96:	462e      	mov	r6, r5
 8006f98:	6822      	ldr	r2, [r4, #0]
 8006f9a:	f012 0210 	ands.w	r2, r2, #16
 8006f9e:	d001      	beq.n	8006fa4 <_scanf_float+0x370>
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	e68b      	b.n	8006cbc <_scanf_float+0x88>
 8006fa4:	7032      	strb	r2, [r6, #0]
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fb0:	d11c      	bne.n	8006fec <_scanf_float+0x3b8>
 8006fb2:	9b02      	ldr	r3, [sp, #8]
 8006fb4:	454b      	cmp	r3, r9
 8006fb6:	eba3 0209 	sub.w	r2, r3, r9
 8006fba:	d123      	bne.n	8007004 <_scanf_float+0x3d0>
 8006fbc:	9901      	ldr	r1, [sp, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	4640      	mov	r0, r8
 8006fc2:	f002 fd29 	bl	8009a18 <_strtod_r>
 8006fc6:	9b03      	ldr	r3, [sp, #12]
 8006fc8:	6821      	ldr	r1, [r4, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f011 0f02 	tst.w	r1, #2
 8006fd0:	ec57 6b10 	vmov	r6, r7, d0
 8006fd4:	f103 0204 	add.w	r2, r3, #4
 8006fd8:	d01f      	beq.n	800701a <_scanf_float+0x3e6>
 8006fda:	9903      	ldr	r1, [sp, #12]
 8006fdc:	600a      	str	r2, [r1, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	e9c3 6700 	strd	r6, r7, [r3]
 8006fe4:	68e3      	ldr	r3, [r4, #12]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	60e3      	str	r3, [r4, #12]
 8006fea:	e7d9      	b.n	8006fa0 <_scanf_float+0x36c>
 8006fec:	9b04      	ldr	r3, [sp, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0e4      	beq.n	8006fbc <_scanf_float+0x388>
 8006ff2:	9905      	ldr	r1, [sp, #20]
 8006ff4:	230a      	movs	r3, #10
 8006ff6:	3101      	adds	r1, #1
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	f002 fd8d 	bl	8009b18 <_strtol_r>
 8006ffe:	9b04      	ldr	r3, [sp, #16]
 8007000:	9e05      	ldr	r6, [sp, #20]
 8007002:	1ac2      	subs	r2, r0, r3
 8007004:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007008:	429e      	cmp	r6, r3
 800700a:	bf28      	it	cs
 800700c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007010:	4910      	ldr	r1, [pc, #64]	@ (8007054 <_scanf_float+0x420>)
 8007012:	4630      	mov	r0, r6
 8007014:	f000 f954 	bl	80072c0 <siprintf>
 8007018:	e7d0      	b.n	8006fbc <_scanf_float+0x388>
 800701a:	f011 0f04 	tst.w	r1, #4
 800701e:	9903      	ldr	r1, [sp, #12]
 8007020:	600a      	str	r2, [r1, #0]
 8007022:	d1dc      	bne.n	8006fde <_scanf_float+0x3aa>
 8007024:	681d      	ldr	r5, [r3, #0]
 8007026:	4632      	mov	r2, r6
 8007028:	463b      	mov	r3, r7
 800702a:	4630      	mov	r0, r6
 800702c:	4639      	mov	r1, r7
 800702e:	f7f9 fd7d 	bl	8000b2c <__aeabi_dcmpun>
 8007032:	b128      	cbz	r0, 8007040 <_scanf_float+0x40c>
 8007034:	4808      	ldr	r0, [pc, #32]	@ (8007058 <_scanf_float+0x424>)
 8007036:	f000 fac9 	bl	80075cc <nanf>
 800703a:	ed85 0a00 	vstr	s0, [r5]
 800703e:	e7d1      	b.n	8006fe4 <_scanf_float+0x3b0>
 8007040:	4630      	mov	r0, r6
 8007042:	4639      	mov	r1, r7
 8007044:	f7f9 fdd0 	bl	8000be8 <__aeabi_d2f>
 8007048:	6028      	str	r0, [r5, #0]
 800704a:	e7cb      	b.n	8006fe4 <_scanf_float+0x3b0>
 800704c:	f04f 0900 	mov.w	r9, #0
 8007050:	e629      	b.n	8006ca6 <_scanf_float+0x72>
 8007052:	bf00      	nop
 8007054:	0801614f 	.word	0x0801614f
 8007058:	0801618f 	.word	0x0801618f

0800705c <std>:
 800705c:	2300      	movs	r3, #0
 800705e:	b510      	push	{r4, lr}
 8007060:	4604      	mov	r4, r0
 8007062:	e9c0 3300 	strd	r3, r3, [r0]
 8007066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800706a:	6083      	str	r3, [r0, #8]
 800706c:	8181      	strh	r1, [r0, #12]
 800706e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007070:	81c2      	strh	r2, [r0, #14]
 8007072:	6183      	str	r3, [r0, #24]
 8007074:	4619      	mov	r1, r3
 8007076:	2208      	movs	r2, #8
 8007078:	305c      	adds	r0, #92	@ 0x5c
 800707a:	f000 fa19 	bl	80074b0 <memset>
 800707e:	4b0d      	ldr	r3, [pc, #52]	@ (80070b4 <std+0x58>)
 8007080:	6263      	str	r3, [r4, #36]	@ 0x24
 8007082:	4b0d      	ldr	r3, [pc, #52]	@ (80070b8 <std+0x5c>)
 8007084:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007086:	4b0d      	ldr	r3, [pc, #52]	@ (80070bc <std+0x60>)
 8007088:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800708a:	4b0d      	ldr	r3, [pc, #52]	@ (80070c0 <std+0x64>)
 800708c:	6323      	str	r3, [r4, #48]	@ 0x30
 800708e:	4b0d      	ldr	r3, [pc, #52]	@ (80070c4 <std+0x68>)
 8007090:	6224      	str	r4, [r4, #32]
 8007092:	429c      	cmp	r4, r3
 8007094:	d006      	beq.n	80070a4 <std+0x48>
 8007096:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800709a:	4294      	cmp	r4, r2
 800709c:	d002      	beq.n	80070a4 <std+0x48>
 800709e:	33d0      	adds	r3, #208	@ 0xd0
 80070a0:	429c      	cmp	r4, r3
 80070a2:	d105      	bne.n	80070b0 <std+0x54>
 80070a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ac:	f000 ba7c 	b.w	80075a8 <__retarget_lock_init_recursive>
 80070b0:	bd10      	pop	{r4, pc}
 80070b2:	bf00      	nop
 80070b4:	08007301 	.word	0x08007301
 80070b8:	08007323 	.word	0x08007323
 80070bc:	0800735b 	.word	0x0800735b
 80070c0:	0800737f 	.word	0x0800737f
 80070c4:	200002e8 	.word	0x200002e8

080070c8 <stdio_exit_handler>:
 80070c8:	4a02      	ldr	r2, [pc, #8]	@ (80070d4 <stdio_exit_handler+0xc>)
 80070ca:	4903      	ldr	r1, [pc, #12]	@ (80070d8 <stdio_exit_handler+0x10>)
 80070cc:	4803      	ldr	r0, [pc, #12]	@ (80070dc <stdio_exit_handler+0x14>)
 80070ce:	f000 b869 	b.w	80071a4 <_fwalk_sglue>
 80070d2:	bf00      	nop
 80070d4:	2000001c 	.word	0x2000001c
 80070d8:	0800a159 	.word	0x0800a159
 80070dc:	2000002c 	.word	0x2000002c

080070e0 <cleanup_stdio>:
 80070e0:	6841      	ldr	r1, [r0, #4]
 80070e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007114 <cleanup_stdio+0x34>)
 80070e4:	4299      	cmp	r1, r3
 80070e6:	b510      	push	{r4, lr}
 80070e8:	4604      	mov	r4, r0
 80070ea:	d001      	beq.n	80070f0 <cleanup_stdio+0x10>
 80070ec:	f003 f834 	bl	800a158 <_fflush_r>
 80070f0:	68a1      	ldr	r1, [r4, #8]
 80070f2:	4b09      	ldr	r3, [pc, #36]	@ (8007118 <cleanup_stdio+0x38>)
 80070f4:	4299      	cmp	r1, r3
 80070f6:	d002      	beq.n	80070fe <cleanup_stdio+0x1e>
 80070f8:	4620      	mov	r0, r4
 80070fa:	f003 f82d 	bl	800a158 <_fflush_r>
 80070fe:	68e1      	ldr	r1, [r4, #12]
 8007100:	4b06      	ldr	r3, [pc, #24]	@ (800711c <cleanup_stdio+0x3c>)
 8007102:	4299      	cmp	r1, r3
 8007104:	d004      	beq.n	8007110 <cleanup_stdio+0x30>
 8007106:	4620      	mov	r0, r4
 8007108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800710c:	f003 b824 	b.w	800a158 <_fflush_r>
 8007110:	bd10      	pop	{r4, pc}
 8007112:	bf00      	nop
 8007114:	200002e8 	.word	0x200002e8
 8007118:	20000350 	.word	0x20000350
 800711c:	200003b8 	.word	0x200003b8

08007120 <global_stdio_init.part.0>:
 8007120:	b510      	push	{r4, lr}
 8007122:	4b0b      	ldr	r3, [pc, #44]	@ (8007150 <global_stdio_init.part.0+0x30>)
 8007124:	4c0b      	ldr	r4, [pc, #44]	@ (8007154 <global_stdio_init.part.0+0x34>)
 8007126:	4a0c      	ldr	r2, [pc, #48]	@ (8007158 <global_stdio_init.part.0+0x38>)
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	4620      	mov	r0, r4
 800712c:	2200      	movs	r2, #0
 800712e:	2104      	movs	r1, #4
 8007130:	f7ff ff94 	bl	800705c <std>
 8007134:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007138:	2201      	movs	r2, #1
 800713a:	2109      	movs	r1, #9
 800713c:	f7ff ff8e 	bl	800705c <std>
 8007140:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007144:	2202      	movs	r2, #2
 8007146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800714a:	2112      	movs	r1, #18
 800714c:	f7ff bf86 	b.w	800705c <std>
 8007150:	20000420 	.word	0x20000420
 8007154:	200002e8 	.word	0x200002e8
 8007158:	080070c9 	.word	0x080070c9

0800715c <__sfp_lock_acquire>:
 800715c:	4801      	ldr	r0, [pc, #4]	@ (8007164 <__sfp_lock_acquire+0x8>)
 800715e:	f000 ba24 	b.w	80075aa <__retarget_lock_acquire_recursive>
 8007162:	bf00      	nop
 8007164:	20000429 	.word	0x20000429

08007168 <__sfp_lock_release>:
 8007168:	4801      	ldr	r0, [pc, #4]	@ (8007170 <__sfp_lock_release+0x8>)
 800716a:	f000 ba1f 	b.w	80075ac <__retarget_lock_release_recursive>
 800716e:	bf00      	nop
 8007170:	20000429 	.word	0x20000429

08007174 <__sinit>:
 8007174:	b510      	push	{r4, lr}
 8007176:	4604      	mov	r4, r0
 8007178:	f7ff fff0 	bl	800715c <__sfp_lock_acquire>
 800717c:	6a23      	ldr	r3, [r4, #32]
 800717e:	b11b      	cbz	r3, 8007188 <__sinit+0x14>
 8007180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007184:	f7ff bff0 	b.w	8007168 <__sfp_lock_release>
 8007188:	4b04      	ldr	r3, [pc, #16]	@ (800719c <__sinit+0x28>)
 800718a:	6223      	str	r3, [r4, #32]
 800718c:	4b04      	ldr	r3, [pc, #16]	@ (80071a0 <__sinit+0x2c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1f5      	bne.n	8007180 <__sinit+0xc>
 8007194:	f7ff ffc4 	bl	8007120 <global_stdio_init.part.0>
 8007198:	e7f2      	b.n	8007180 <__sinit+0xc>
 800719a:	bf00      	nop
 800719c:	080070e1 	.word	0x080070e1
 80071a0:	20000420 	.word	0x20000420

080071a4 <_fwalk_sglue>:
 80071a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a8:	4607      	mov	r7, r0
 80071aa:	4688      	mov	r8, r1
 80071ac:	4614      	mov	r4, r2
 80071ae:	2600      	movs	r6, #0
 80071b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071b4:	f1b9 0901 	subs.w	r9, r9, #1
 80071b8:	d505      	bpl.n	80071c6 <_fwalk_sglue+0x22>
 80071ba:	6824      	ldr	r4, [r4, #0]
 80071bc:	2c00      	cmp	r4, #0
 80071be:	d1f7      	bne.n	80071b0 <_fwalk_sglue+0xc>
 80071c0:	4630      	mov	r0, r6
 80071c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c6:	89ab      	ldrh	r3, [r5, #12]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d907      	bls.n	80071dc <_fwalk_sglue+0x38>
 80071cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071d0:	3301      	adds	r3, #1
 80071d2:	d003      	beq.n	80071dc <_fwalk_sglue+0x38>
 80071d4:	4629      	mov	r1, r5
 80071d6:	4638      	mov	r0, r7
 80071d8:	47c0      	blx	r8
 80071da:	4306      	orrs	r6, r0
 80071dc:	3568      	adds	r5, #104	@ 0x68
 80071de:	e7e9      	b.n	80071b4 <_fwalk_sglue+0x10>

080071e0 <iprintf>:
 80071e0:	b40f      	push	{r0, r1, r2, r3}
 80071e2:	b507      	push	{r0, r1, r2, lr}
 80071e4:	4906      	ldr	r1, [pc, #24]	@ (8007200 <iprintf+0x20>)
 80071e6:	ab04      	add	r3, sp, #16
 80071e8:	6808      	ldr	r0, [r1, #0]
 80071ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ee:	6881      	ldr	r1, [r0, #8]
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	f002 fe15 	bl	8009e20 <_vfiprintf_r>
 80071f6:	b003      	add	sp, #12
 80071f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80071fc:	b004      	add	sp, #16
 80071fe:	4770      	bx	lr
 8007200:	20000028 	.word	0x20000028

08007204 <_puts_r>:
 8007204:	6a03      	ldr	r3, [r0, #32]
 8007206:	b570      	push	{r4, r5, r6, lr}
 8007208:	6884      	ldr	r4, [r0, #8]
 800720a:	4605      	mov	r5, r0
 800720c:	460e      	mov	r6, r1
 800720e:	b90b      	cbnz	r3, 8007214 <_puts_r+0x10>
 8007210:	f7ff ffb0 	bl	8007174 <__sinit>
 8007214:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007216:	07db      	lsls	r3, r3, #31
 8007218:	d405      	bmi.n	8007226 <_puts_r+0x22>
 800721a:	89a3      	ldrh	r3, [r4, #12]
 800721c:	0598      	lsls	r0, r3, #22
 800721e:	d402      	bmi.n	8007226 <_puts_r+0x22>
 8007220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007222:	f000 f9c2 	bl	80075aa <__retarget_lock_acquire_recursive>
 8007226:	89a3      	ldrh	r3, [r4, #12]
 8007228:	0719      	lsls	r1, r3, #28
 800722a:	d502      	bpl.n	8007232 <_puts_r+0x2e>
 800722c:	6923      	ldr	r3, [r4, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d135      	bne.n	800729e <_puts_r+0x9a>
 8007232:	4621      	mov	r1, r4
 8007234:	4628      	mov	r0, r5
 8007236:	f000 f8e5 	bl	8007404 <__swsetup_r>
 800723a:	b380      	cbz	r0, 800729e <_puts_r+0x9a>
 800723c:	f04f 35ff 	mov.w	r5, #4294967295
 8007240:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007242:	07da      	lsls	r2, r3, #31
 8007244:	d405      	bmi.n	8007252 <_puts_r+0x4e>
 8007246:	89a3      	ldrh	r3, [r4, #12]
 8007248:	059b      	lsls	r3, r3, #22
 800724a:	d402      	bmi.n	8007252 <_puts_r+0x4e>
 800724c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800724e:	f000 f9ad 	bl	80075ac <__retarget_lock_release_recursive>
 8007252:	4628      	mov	r0, r5
 8007254:	bd70      	pop	{r4, r5, r6, pc}
 8007256:	2b00      	cmp	r3, #0
 8007258:	da04      	bge.n	8007264 <_puts_r+0x60>
 800725a:	69a2      	ldr	r2, [r4, #24]
 800725c:	429a      	cmp	r2, r3
 800725e:	dc17      	bgt.n	8007290 <_puts_r+0x8c>
 8007260:	290a      	cmp	r1, #10
 8007262:	d015      	beq.n	8007290 <_puts_r+0x8c>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	6022      	str	r2, [r4, #0]
 800726a:	7019      	strb	r1, [r3, #0]
 800726c:	68a3      	ldr	r3, [r4, #8]
 800726e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007272:	3b01      	subs	r3, #1
 8007274:	60a3      	str	r3, [r4, #8]
 8007276:	2900      	cmp	r1, #0
 8007278:	d1ed      	bne.n	8007256 <_puts_r+0x52>
 800727a:	2b00      	cmp	r3, #0
 800727c:	da11      	bge.n	80072a2 <_puts_r+0x9e>
 800727e:	4622      	mov	r2, r4
 8007280:	210a      	movs	r1, #10
 8007282:	4628      	mov	r0, r5
 8007284:	f000 f87f 	bl	8007386 <__swbuf_r>
 8007288:	3001      	adds	r0, #1
 800728a:	d0d7      	beq.n	800723c <_puts_r+0x38>
 800728c:	250a      	movs	r5, #10
 800728e:	e7d7      	b.n	8007240 <_puts_r+0x3c>
 8007290:	4622      	mov	r2, r4
 8007292:	4628      	mov	r0, r5
 8007294:	f000 f877 	bl	8007386 <__swbuf_r>
 8007298:	3001      	adds	r0, #1
 800729a:	d1e7      	bne.n	800726c <_puts_r+0x68>
 800729c:	e7ce      	b.n	800723c <_puts_r+0x38>
 800729e:	3e01      	subs	r6, #1
 80072a0:	e7e4      	b.n	800726c <_puts_r+0x68>
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	1c5a      	adds	r2, r3, #1
 80072a6:	6022      	str	r2, [r4, #0]
 80072a8:	220a      	movs	r2, #10
 80072aa:	701a      	strb	r2, [r3, #0]
 80072ac:	e7ee      	b.n	800728c <_puts_r+0x88>
	...

080072b0 <puts>:
 80072b0:	4b02      	ldr	r3, [pc, #8]	@ (80072bc <puts+0xc>)
 80072b2:	4601      	mov	r1, r0
 80072b4:	6818      	ldr	r0, [r3, #0]
 80072b6:	f7ff bfa5 	b.w	8007204 <_puts_r>
 80072ba:	bf00      	nop
 80072bc:	20000028 	.word	0x20000028

080072c0 <siprintf>:
 80072c0:	b40e      	push	{r1, r2, r3}
 80072c2:	b500      	push	{lr}
 80072c4:	b09c      	sub	sp, #112	@ 0x70
 80072c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80072c8:	9002      	str	r0, [sp, #8]
 80072ca:	9006      	str	r0, [sp, #24]
 80072cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80072d0:	4809      	ldr	r0, [pc, #36]	@ (80072f8 <siprintf+0x38>)
 80072d2:	9107      	str	r1, [sp, #28]
 80072d4:	9104      	str	r1, [sp, #16]
 80072d6:	4909      	ldr	r1, [pc, #36]	@ (80072fc <siprintf+0x3c>)
 80072d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072dc:	9105      	str	r1, [sp, #20]
 80072de:	6800      	ldr	r0, [r0, #0]
 80072e0:	9301      	str	r3, [sp, #4]
 80072e2:	a902      	add	r1, sp, #8
 80072e4:	f002 fc76 	bl	8009bd4 <_svfiprintf_r>
 80072e8:	9b02      	ldr	r3, [sp, #8]
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	b01c      	add	sp, #112	@ 0x70
 80072f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072f4:	b003      	add	sp, #12
 80072f6:	4770      	bx	lr
 80072f8:	20000028 	.word	0x20000028
 80072fc:	ffff0208 	.word	0xffff0208

08007300 <__sread>:
 8007300:	b510      	push	{r4, lr}
 8007302:	460c      	mov	r4, r1
 8007304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007308:	f000 f900 	bl	800750c <_read_r>
 800730c:	2800      	cmp	r0, #0
 800730e:	bfab      	itete	ge
 8007310:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007312:	89a3      	ldrhlt	r3, [r4, #12]
 8007314:	181b      	addge	r3, r3, r0
 8007316:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800731a:	bfac      	ite	ge
 800731c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800731e:	81a3      	strhlt	r3, [r4, #12]
 8007320:	bd10      	pop	{r4, pc}

08007322 <__swrite>:
 8007322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007326:	461f      	mov	r7, r3
 8007328:	898b      	ldrh	r3, [r1, #12]
 800732a:	05db      	lsls	r3, r3, #23
 800732c:	4605      	mov	r5, r0
 800732e:	460c      	mov	r4, r1
 8007330:	4616      	mov	r6, r2
 8007332:	d505      	bpl.n	8007340 <__swrite+0x1e>
 8007334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007338:	2302      	movs	r3, #2
 800733a:	2200      	movs	r2, #0
 800733c:	f000 f8d4 	bl	80074e8 <_lseek_r>
 8007340:	89a3      	ldrh	r3, [r4, #12]
 8007342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007346:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800734a:	81a3      	strh	r3, [r4, #12]
 800734c:	4632      	mov	r2, r6
 800734e:	463b      	mov	r3, r7
 8007350:	4628      	mov	r0, r5
 8007352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007356:	f000 b8eb 	b.w	8007530 <_write_r>

0800735a <__sseek>:
 800735a:	b510      	push	{r4, lr}
 800735c:	460c      	mov	r4, r1
 800735e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007362:	f000 f8c1 	bl	80074e8 <_lseek_r>
 8007366:	1c43      	adds	r3, r0, #1
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	bf15      	itete	ne
 800736c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800736e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007372:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007376:	81a3      	strheq	r3, [r4, #12]
 8007378:	bf18      	it	ne
 800737a:	81a3      	strhne	r3, [r4, #12]
 800737c:	bd10      	pop	{r4, pc}

0800737e <__sclose>:
 800737e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007382:	f000 b8a1 	b.w	80074c8 <_close_r>

08007386 <__swbuf_r>:
 8007386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007388:	460e      	mov	r6, r1
 800738a:	4614      	mov	r4, r2
 800738c:	4605      	mov	r5, r0
 800738e:	b118      	cbz	r0, 8007398 <__swbuf_r+0x12>
 8007390:	6a03      	ldr	r3, [r0, #32]
 8007392:	b90b      	cbnz	r3, 8007398 <__swbuf_r+0x12>
 8007394:	f7ff feee 	bl	8007174 <__sinit>
 8007398:	69a3      	ldr	r3, [r4, #24]
 800739a:	60a3      	str	r3, [r4, #8]
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	071a      	lsls	r2, r3, #28
 80073a0:	d501      	bpl.n	80073a6 <__swbuf_r+0x20>
 80073a2:	6923      	ldr	r3, [r4, #16]
 80073a4:	b943      	cbnz	r3, 80073b8 <__swbuf_r+0x32>
 80073a6:	4621      	mov	r1, r4
 80073a8:	4628      	mov	r0, r5
 80073aa:	f000 f82b 	bl	8007404 <__swsetup_r>
 80073ae:	b118      	cbz	r0, 80073b8 <__swbuf_r+0x32>
 80073b0:	f04f 37ff 	mov.w	r7, #4294967295
 80073b4:	4638      	mov	r0, r7
 80073b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	6922      	ldr	r2, [r4, #16]
 80073bc:	1a98      	subs	r0, r3, r2
 80073be:	6963      	ldr	r3, [r4, #20]
 80073c0:	b2f6      	uxtb	r6, r6
 80073c2:	4283      	cmp	r3, r0
 80073c4:	4637      	mov	r7, r6
 80073c6:	dc05      	bgt.n	80073d4 <__swbuf_r+0x4e>
 80073c8:	4621      	mov	r1, r4
 80073ca:	4628      	mov	r0, r5
 80073cc:	f002 fec4 	bl	800a158 <_fflush_r>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d1ed      	bne.n	80073b0 <__swbuf_r+0x2a>
 80073d4:	68a3      	ldr	r3, [r4, #8]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	60a3      	str	r3, [r4, #8]
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	6022      	str	r2, [r4, #0]
 80073e0:	701e      	strb	r6, [r3, #0]
 80073e2:	6962      	ldr	r2, [r4, #20]
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d004      	beq.n	80073f4 <__swbuf_r+0x6e>
 80073ea:	89a3      	ldrh	r3, [r4, #12]
 80073ec:	07db      	lsls	r3, r3, #31
 80073ee:	d5e1      	bpl.n	80073b4 <__swbuf_r+0x2e>
 80073f0:	2e0a      	cmp	r6, #10
 80073f2:	d1df      	bne.n	80073b4 <__swbuf_r+0x2e>
 80073f4:	4621      	mov	r1, r4
 80073f6:	4628      	mov	r0, r5
 80073f8:	f002 feae 	bl	800a158 <_fflush_r>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d0d9      	beq.n	80073b4 <__swbuf_r+0x2e>
 8007400:	e7d6      	b.n	80073b0 <__swbuf_r+0x2a>
	...

08007404 <__swsetup_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	4b29      	ldr	r3, [pc, #164]	@ (80074ac <__swsetup_r+0xa8>)
 8007408:	4605      	mov	r5, r0
 800740a:	6818      	ldr	r0, [r3, #0]
 800740c:	460c      	mov	r4, r1
 800740e:	b118      	cbz	r0, 8007418 <__swsetup_r+0x14>
 8007410:	6a03      	ldr	r3, [r0, #32]
 8007412:	b90b      	cbnz	r3, 8007418 <__swsetup_r+0x14>
 8007414:	f7ff feae 	bl	8007174 <__sinit>
 8007418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800741c:	0719      	lsls	r1, r3, #28
 800741e:	d422      	bmi.n	8007466 <__swsetup_r+0x62>
 8007420:	06da      	lsls	r2, r3, #27
 8007422:	d407      	bmi.n	8007434 <__swsetup_r+0x30>
 8007424:	2209      	movs	r2, #9
 8007426:	602a      	str	r2, [r5, #0]
 8007428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	f04f 30ff 	mov.w	r0, #4294967295
 8007432:	e033      	b.n	800749c <__swsetup_r+0x98>
 8007434:	0758      	lsls	r0, r3, #29
 8007436:	d512      	bpl.n	800745e <__swsetup_r+0x5a>
 8007438:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800743a:	b141      	cbz	r1, 800744e <__swsetup_r+0x4a>
 800743c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007440:	4299      	cmp	r1, r3
 8007442:	d002      	beq.n	800744a <__swsetup_r+0x46>
 8007444:	4628      	mov	r0, r5
 8007446:	f000 ff33 	bl	80082b0 <_free_r>
 800744a:	2300      	movs	r3, #0
 800744c:	6363      	str	r3, [r4, #52]	@ 0x34
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007454:	81a3      	strh	r3, [r4, #12]
 8007456:	2300      	movs	r3, #0
 8007458:	6063      	str	r3, [r4, #4]
 800745a:	6923      	ldr	r3, [r4, #16]
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	89a3      	ldrh	r3, [r4, #12]
 8007460:	f043 0308 	orr.w	r3, r3, #8
 8007464:	81a3      	strh	r3, [r4, #12]
 8007466:	6923      	ldr	r3, [r4, #16]
 8007468:	b94b      	cbnz	r3, 800747e <__swsetup_r+0x7a>
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007474:	d003      	beq.n	800747e <__swsetup_r+0x7a>
 8007476:	4621      	mov	r1, r4
 8007478:	4628      	mov	r0, r5
 800747a:	f002 fecd 	bl	800a218 <__smakebuf_r>
 800747e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007482:	f013 0201 	ands.w	r2, r3, #1
 8007486:	d00a      	beq.n	800749e <__swsetup_r+0x9a>
 8007488:	2200      	movs	r2, #0
 800748a:	60a2      	str	r2, [r4, #8]
 800748c:	6962      	ldr	r2, [r4, #20]
 800748e:	4252      	negs	r2, r2
 8007490:	61a2      	str	r2, [r4, #24]
 8007492:	6922      	ldr	r2, [r4, #16]
 8007494:	b942      	cbnz	r2, 80074a8 <__swsetup_r+0xa4>
 8007496:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800749a:	d1c5      	bne.n	8007428 <__swsetup_r+0x24>
 800749c:	bd38      	pop	{r3, r4, r5, pc}
 800749e:	0799      	lsls	r1, r3, #30
 80074a0:	bf58      	it	pl
 80074a2:	6962      	ldrpl	r2, [r4, #20]
 80074a4:	60a2      	str	r2, [r4, #8]
 80074a6:	e7f4      	b.n	8007492 <__swsetup_r+0x8e>
 80074a8:	2000      	movs	r0, #0
 80074aa:	e7f7      	b.n	800749c <__swsetup_r+0x98>
 80074ac:	20000028 	.word	0x20000028

080074b0 <memset>:
 80074b0:	4402      	add	r2, r0
 80074b2:	4603      	mov	r3, r0
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d100      	bne.n	80074ba <memset+0xa>
 80074b8:	4770      	bx	lr
 80074ba:	f803 1b01 	strb.w	r1, [r3], #1
 80074be:	e7f9      	b.n	80074b4 <memset+0x4>

080074c0 <_localeconv_r>:
 80074c0:	4800      	ldr	r0, [pc, #0]	@ (80074c4 <_localeconv_r+0x4>)
 80074c2:	4770      	bx	lr
 80074c4:	20000168 	.word	0x20000168

080074c8 <_close_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4d06      	ldr	r5, [pc, #24]	@ (80074e4 <_close_r+0x1c>)
 80074cc:	2300      	movs	r3, #0
 80074ce:	4604      	mov	r4, r0
 80074d0:	4608      	mov	r0, r1
 80074d2:	602b      	str	r3, [r5, #0]
 80074d4:	f7fb ff30 	bl	8003338 <_close>
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	d102      	bne.n	80074e2 <_close_r+0x1a>
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	b103      	cbz	r3, 80074e2 <_close_r+0x1a>
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	bd38      	pop	{r3, r4, r5, pc}
 80074e4:	20000424 	.word	0x20000424

080074e8 <_lseek_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	4d07      	ldr	r5, [pc, #28]	@ (8007508 <_lseek_r+0x20>)
 80074ec:	4604      	mov	r4, r0
 80074ee:	4608      	mov	r0, r1
 80074f0:	4611      	mov	r1, r2
 80074f2:	2200      	movs	r2, #0
 80074f4:	602a      	str	r2, [r5, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	f7fb ff45 	bl	8003386 <_lseek>
 80074fc:	1c43      	adds	r3, r0, #1
 80074fe:	d102      	bne.n	8007506 <_lseek_r+0x1e>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	b103      	cbz	r3, 8007506 <_lseek_r+0x1e>
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	bd38      	pop	{r3, r4, r5, pc}
 8007508:	20000424 	.word	0x20000424

0800750c <_read_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	4d07      	ldr	r5, [pc, #28]	@ (800752c <_read_r+0x20>)
 8007510:	4604      	mov	r4, r0
 8007512:	4608      	mov	r0, r1
 8007514:	4611      	mov	r1, r2
 8007516:	2200      	movs	r2, #0
 8007518:	602a      	str	r2, [r5, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	f7fb fed3 	bl	80032c6 <_read>
 8007520:	1c43      	adds	r3, r0, #1
 8007522:	d102      	bne.n	800752a <_read_r+0x1e>
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	b103      	cbz	r3, 800752a <_read_r+0x1e>
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	20000424 	.word	0x20000424

08007530 <_write_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4d07      	ldr	r5, [pc, #28]	@ (8007550 <_write_r+0x20>)
 8007534:	4604      	mov	r4, r0
 8007536:	4608      	mov	r0, r1
 8007538:	4611      	mov	r1, r2
 800753a:	2200      	movs	r2, #0
 800753c:	602a      	str	r2, [r5, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	f7fb fede 	bl	8003300 <_write>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d102      	bne.n	800754e <_write_r+0x1e>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	b103      	cbz	r3, 800754e <_write_r+0x1e>
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	bd38      	pop	{r3, r4, r5, pc}
 8007550:	20000424 	.word	0x20000424

08007554 <__errno>:
 8007554:	4b01      	ldr	r3, [pc, #4]	@ (800755c <__errno+0x8>)
 8007556:	6818      	ldr	r0, [r3, #0]
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	20000028 	.word	0x20000028

08007560 <__libc_init_array>:
 8007560:	b570      	push	{r4, r5, r6, lr}
 8007562:	4d0d      	ldr	r5, [pc, #52]	@ (8007598 <__libc_init_array+0x38>)
 8007564:	4c0d      	ldr	r4, [pc, #52]	@ (800759c <__libc_init_array+0x3c>)
 8007566:	1b64      	subs	r4, r4, r5
 8007568:	10a4      	asrs	r4, r4, #2
 800756a:	2600      	movs	r6, #0
 800756c:	42a6      	cmp	r6, r4
 800756e:	d109      	bne.n	8007584 <__libc_init_array+0x24>
 8007570:	4d0b      	ldr	r5, [pc, #44]	@ (80075a0 <__libc_init_array+0x40>)
 8007572:	4c0c      	ldr	r4, [pc, #48]	@ (80075a4 <__libc_init_array+0x44>)
 8007574:	f003 fe28 	bl	800b1c8 <_init>
 8007578:	1b64      	subs	r4, r4, r5
 800757a:	10a4      	asrs	r4, r4, #2
 800757c:	2600      	movs	r6, #0
 800757e:	42a6      	cmp	r6, r4
 8007580:	d105      	bne.n	800758e <__libc_init_array+0x2e>
 8007582:	bd70      	pop	{r4, r5, r6, pc}
 8007584:	f855 3b04 	ldr.w	r3, [r5], #4
 8007588:	4798      	blx	r3
 800758a:	3601      	adds	r6, #1
 800758c:	e7ee      	b.n	800756c <__libc_init_array+0xc>
 800758e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007592:	4798      	blx	r3
 8007594:	3601      	adds	r6, #1
 8007596:	e7f2      	b.n	800757e <__libc_init_array+0x1e>
 8007598:	0801653c 	.word	0x0801653c
 800759c:	0801653c 	.word	0x0801653c
 80075a0:	0801653c 	.word	0x0801653c
 80075a4:	08016540 	.word	0x08016540

080075a8 <__retarget_lock_init_recursive>:
 80075a8:	4770      	bx	lr

080075aa <__retarget_lock_acquire_recursive>:
 80075aa:	4770      	bx	lr

080075ac <__retarget_lock_release_recursive>:
 80075ac:	4770      	bx	lr

080075ae <memcpy>:
 80075ae:	440a      	add	r2, r1
 80075b0:	4291      	cmp	r1, r2
 80075b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80075b6:	d100      	bne.n	80075ba <memcpy+0xc>
 80075b8:	4770      	bx	lr
 80075ba:	b510      	push	{r4, lr}
 80075bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075c4:	4291      	cmp	r1, r2
 80075c6:	d1f9      	bne.n	80075bc <memcpy+0xe>
 80075c8:	bd10      	pop	{r4, pc}
	...

080075cc <nanf>:
 80075cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80075d4 <nanf+0x8>
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	7fc00000 	.word	0x7fc00000

080075d8 <__assert_func>:
 80075d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075da:	4614      	mov	r4, r2
 80075dc:	461a      	mov	r2, r3
 80075de:	4b09      	ldr	r3, [pc, #36]	@ (8007604 <__assert_func+0x2c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4605      	mov	r5, r0
 80075e4:	68d8      	ldr	r0, [r3, #12]
 80075e6:	b954      	cbnz	r4, 80075fe <__assert_func+0x26>
 80075e8:	4b07      	ldr	r3, [pc, #28]	@ (8007608 <__assert_func+0x30>)
 80075ea:	461c      	mov	r4, r3
 80075ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075f0:	9100      	str	r1, [sp, #0]
 80075f2:	462b      	mov	r3, r5
 80075f4:	4905      	ldr	r1, [pc, #20]	@ (800760c <__assert_func+0x34>)
 80075f6:	f002 fdd7 	bl	800a1a8 <fiprintf>
 80075fa:	f002 feb1 	bl	800a360 <abort>
 80075fe:	4b04      	ldr	r3, [pc, #16]	@ (8007610 <__assert_func+0x38>)
 8007600:	e7f4      	b.n	80075ec <__assert_func+0x14>
 8007602:	bf00      	nop
 8007604:	20000028 	.word	0x20000028
 8007608:	0801618f 	.word	0x0801618f
 800760c:	08016161 	.word	0x08016161
 8007610:	08016154 	.word	0x08016154

08007614 <quorem>:
 8007614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007618:	6903      	ldr	r3, [r0, #16]
 800761a:	690c      	ldr	r4, [r1, #16]
 800761c:	42a3      	cmp	r3, r4
 800761e:	4607      	mov	r7, r0
 8007620:	db7e      	blt.n	8007720 <quorem+0x10c>
 8007622:	3c01      	subs	r4, #1
 8007624:	f101 0814 	add.w	r8, r1, #20
 8007628:	00a3      	lsls	r3, r4, #2
 800762a:	f100 0514 	add.w	r5, r0, #20
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007634:	9301      	str	r3, [sp, #4]
 8007636:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800763a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800763e:	3301      	adds	r3, #1
 8007640:	429a      	cmp	r2, r3
 8007642:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007646:	fbb2 f6f3 	udiv	r6, r2, r3
 800764a:	d32e      	bcc.n	80076aa <quorem+0x96>
 800764c:	f04f 0a00 	mov.w	sl, #0
 8007650:	46c4      	mov	ip, r8
 8007652:	46ae      	mov	lr, r5
 8007654:	46d3      	mov	fp, sl
 8007656:	f85c 3b04 	ldr.w	r3, [ip], #4
 800765a:	b298      	uxth	r0, r3
 800765c:	fb06 a000 	mla	r0, r6, r0, sl
 8007660:	0c02      	lsrs	r2, r0, #16
 8007662:	0c1b      	lsrs	r3, r3, #16
 8007664:	fb06 2303 	mla	r3, r6, r3, r2
 8007668:	f8de 2000 	ldr.w	r2, [lr]
 800766c:	b280      	uxth	r0, r0
 800766e:	b292      	uxth	r2, r2
 8007670:	1a12      	subs	r2, r2, r0
 8007672:	445a      	add	r2, fp
 8007674:	f8de 0000 	ldr.w	r0, [lr]
 8007678:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800767c:	b29b      	uxth	r3, r3
 800767e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007682:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007686:	b292      	uxth	r2, r2
 8007688:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800768c:	45e1      	cmp	r9, ip
 800768e:	f84e 2b04 	str.w	r2, [lr], #4
 8007692:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007696:	d2de      	bcs.n	8007656 <quorem+0x42>
 8007698:	9b00      	ldr	r3, [sp, #0]
 800769a:	58eb      	ldr	r3, [r5, r3]
 800769c:	b92b      	cbnz	r3, 80076aa <quorem+0x96>
 800769e:	9b01      	ldr	r3, [sp, #4]
 80076a0:	3b04      	subs	r3, #4
 80076a2:	429d      	cmp	r5, r3
 80076a4:	461a      	mov	r2, r3
 80076a6:	d32f      	bcc.n	8007708 <quorem+0xf4>
 80076a8:	613c      	str	r4, [r7, #16]
 80076aa:	4638      	mov	r0, r7
 80076ac:	f001 f9c4 	bl	8008a38 <__mcmp>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	db25      	blt.n	8007700 <quorem+0xec>
 80076b4:	4629      	mov	r1, r5
 80076b6:	2000      	movs	r0, #0
 80076b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80076bc:	f8d1 c000 	ldr.w	ip, [r1]
 80076c0:	fa1f fe82 	uxth.w	lr, r2
 80076c4:	fa1f f38c 	uxth.w	r3, ip
 80076c8:	eba3 030e 	sub.w	r3, r3, lr
 80076cc:	4403      	add	r3, r0
 80076ce:	0c12      	lsrs	r2, r2, #16
 80076d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076d8:	b29b      	uxth	r3, r3
 80076da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076de:	45c1      	cmp	r9, r8
 80076e0:	f841 3b04 	str.w	r3, [r1], #4
 80076e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076e8:	d2e6      	bcs.n	80076b8 <quorem+0xa4>
 80076ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076f2:	b922      	cbnz	r2, 80076fe <quorem+0xea>
 80076f4:	3b04      	subs	r3, #4
 80076f6:	429d      	cmp	r5, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	d30b      	bcc.n	8007714 <quorem+0x100>
 80076fc:	613c      	str	r4, [r7, #16]
 80076fe:	3601      	adds	r6, #1
 8007700:	4630      	mov	r0, r6
 8007702:	b003      	add	sp, #12
 8007704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007708:	6812      	ldr	r2, [r2, #0]
 800770a:	3b04      	subs	r3, #4
 800770c:	2a00      	cmp	r2, #0
 800770e:	d1cb      	bne.n	80076a8 <quorem+0x94>
 8007710:	3c01      	subs	r4, #1
 8007712:	e7c6      	b.n	80076a2 <quorem+0x8e>
 8007714:	6812      	ldr	r2, [r2, #0]
 8007716:	3b04      	subs	r3, #4
 8007718:	2a00      	cmp	r2, #0
 800771a:	d1ef      	bne.n	80076fc <quorem+0xe8>
 800771c:	3c01      	subs	r4, #1
 800771e:	e7ea      	b.n	80076f6 <quorem+0xe2>
 8007720:	2000      	movs	r0, #0
 8007722:	e7ee      	b.n	8007702 <quorem+0xee>
 8007724:	0000      	movs	r0, r0
	...

08007728 <_dtoa_r>:
 8007728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772c:	69c7      	ldr	r7, [r0, #28]
 800772e:	b099      	sub	sp, #100	@ 0x64
 8007730:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007734:	ec55 4b10 	vmov	r4, r5, d0
 8007738:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800773a:	9109      	str	r1, [sp, #36]	@ 0x24
 800773c:	4683      	mov	fp, r0
 800773e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007740:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007742:	b97f      	cbnz	r7, 8007764 <_dtoa_r+0x3c>
 8007744:	2010      	movs	r0, #16
 8007746:	f000 fdfd 	bl	8008344 <malloc>
 800774a:	4602      	mov	r2, r0
 800774c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007750:	b920      	cbnz	r0, 800775c <_dtoa_r+0x34>
 8007752:	4ba7      	ldr	r3, [pc, #668]	@ (80079f0 <_dtoa_r+0x2c8>)
 8007754:	21ef      	movs	r1, #239	@ 0xef
 8007756:	48a7      	ldr	r0, [pc, #668]	@ (80079f4 <_dtoa_r+0x2cc>)
 8007758:	f7ff ff3e 	bl	80075d8 <__assert_func>
 800775c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007760:	6007      	str	r7, [r0, #0]
 8007762:	60c7      	str	r7, [r0, #12]
 8007764:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007768:	6819      	ldr	r1, [r3, #0]
 800776a:	b159      	cbz	r1, 8007784 <_dtoa_r+0x5c>
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	604a      	str	r2, [r1, #4]
 8007770:	2301      	movs	r3, #1
 8007772:	4093      	lsls	r3, r2
 8007774:	608b      	str	r3, [r1, #8]
 8007776:	4658      	mov	r0, fp
 8007778:	f000 feda 	bl	8008530 <_Bfree>
 800777c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	1e2b      	subs	r3, r5, #0
 8007786:	bfb9      	ittee	lt
 8007788:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800778c:	9303      	strlt	r3, [sp, #12]
 800778e:	2300      	movge	r3, #0
 8007790:	6033      	strge	r3, [r6, #0]
 8007792:	9f03      	ldr	r7, [sp, #12]
 8007794:	4b98      	ldr	r3, [pc, #608]	@ (80079f8 <_dtoa_r+0x2d0>)
 8007796:	bfbc      	itt	lt
 8007798:	2201      	movlt	r2, #1
 800779a:	6032      	strlt	r2, [r6, #0]
 800779c:	43bb      	bics	r3, r7
 800779e:	d112      	bne.n	80077c6 <_dtoa_r+0x9e>
 80077a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80077a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077ac:	4323      	orrs	r3, r4
 80077ae:	f000 854d 	beq.w	800824c <_dtoa_r+0xb24>
 80077b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007a0c <_dtoa_r+0x2e4>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 854f 	beq.w	800825c <_dtoa_r+0xb34>
 80077be:	f10a 0303 	add.w	r3, sl, #3
 80077c2:	f000 bd49 	b.w	8008258 <_dtoa_r+0xb30>
 80077c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077ca:	2200      	movs	r2, #0
 80077cc:	ec51 0b17 	vmov	r0, r1, d7
 80077d0:	2300      	movs	r3, #0
 80077d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80077d6:	f7f9 f977 	bl	8000ac8 <__aeabi_dcmpeq>
 80077da:	4680      	mov	r8, r0
 80077dc:	b158      	cbz	r0, 80077f6 <_dtoa_r+0xce>
 80077de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80077e0:	2301      	movs	r3, #1
 80077e2:	6013      	str	r3, [r2, #0]
 80077e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077e6:	b113      	cbz	r3, 80077ee <_dtoa_r+0xc6>
 80077e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80077ea:	4b84      	ldr	r3, [pc, #528]	@ (80079fc <_dtoa_r+0x2d4>)
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007a10 <_dtoa_r+0x2e8>
 80077f2:	f000 bd33 	b.w	800825c <_dtoa_r+0xb34>
 80077f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80077fa:	aa16      	add	r2, sp, #88	@ 0x58
 80077fc:	a917      	add	r1, sp, #92	@ 0x5c
 80077fe:	4658      	mov	r0, fp
 8007800:	f001 fa3a 	bl	8008c78 <__d2b>
 8007804:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007808:	4681      	mov	r9, r0
 800780a:	2e00      	cmp	r6, #0
 800780c:	d077      	beq.n	80078fe <_dtoa_r+0x1d6>
 800780e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007810:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800781c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007820:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007824:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007828:	4619      	mov	r1, r3
 800782a:	2200      	movs	r2, #0
 800782c:	4b74      	ldr	r3, [pc, #464]	@ (8007a00 <_dtoa_r+0x2d8>)
 800782e:	f7f8 fd2b 	bl	8000288 <__aeabi_dsub>
 8007832:	a369      	add	r3, pc, #420	@ (adr r3, 80079d8 <_dtoa_r+0x2b0>)
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f7f8 fede 	bl	80005f8 <__aeabi_dmul>
 800783c:	a368      	add	r3, pc, #416	@ (adr r3, 80079e0 <_dtoa_r+0x2b8>)
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	f7f8 fd23 	bl	800028c <__adddf3>
 8007846:	4604      	mov	r4, r0
 8007848:	4630      	mov	r0, r6
 800784a:	460d      	mov	r5, r1
 800784c:	f7f8 fe6a 	bl	8000524 <__aeabi_i2d>
 8007850:	a365      	add	r3, pc, #404	@ (adr r3, 80079e8 <_dtoa_r+0x2c0>)
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	f7f8 fecf 	bl	80005f8 <__aeabi_dmul>
 800785a:	4602      	mov	r2, r0
 800785c:	460b      	mov	r3, r1
 800785e:	4620      	mov	r0, r4
 8007860:	4629      	mov	r1, r5
 8007862:	f7f8 fd13 	bl	800028c <__adddf3>
 8007866:	4604      	mov	r4, r0
 8007868:	460d      	mov	r5, r1
 800786a:	f7f9 f975 	bl	8000b58 <__aeabi_d2iz>
 800786e:	2200      	movs	r2, #0
 8007870:	4607      	mov	r7, r0
 8007872:	2300      	movs	r3, #0
 8007874:	4620      	mov	r0, r4
 8007876:	4629      	mov	r1, r5
 8007878:	f7f9 f930 	bl	8000adc <__aeabi_dcmplt>
 800787c:	b140      	cbz	r0, 8007890 <_dtoa_r+0x168>
 800787e:	4638      	mov	r0, r7
 8007880:	f7f8 fe50 	bl	8000524 <__aeabi_i2d>
 8007884:	4622      	mov	r2, r4
 8007886:	462b      	mov	r3, r5
 8007888:	f7f9 f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800788c:	b900      	cbnz	r0, 8007890 <_dtoa_r+0x168>
 800788e:	3f01      	subs	r7, #1
 8007890:	2f16      	cmp	r7, #22
 8007892:	d851      	bhi.n	8007938 <_dtoa_r+0x210>
 8007894:	4b5b      	ldr	r3, [pc, #364]	@ (8007a04 <_dtoa_r+0x2dc>)
 8007896:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078a2:	f7f9 f91b 	bl	8000adc <__aeabi_dcmplt>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d048      	beq.n	800793c <_dtoa_r+0x214>
 80078aa:	3f01      	subs	r7, #1
 80078ac:	2300      	movs	r3, #0
 80078ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80078b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80078b2:	1b9b      	subs	r3, r3, r6
 80078b4:	1e5a      	subs	r2, r3, #1
 80078b6:	bf44      	itt	mi
 80078b8:	f1c3 0801 	rsbmi	r8, r3, #1
 80078bc:	2300      	movmi	r3, #0
 80078be:	9208      	str	r2, [sp, #32]
 80078c0:	bf54      	ite	pl
 80078c2:	f04f 0800 	movpl.w	r8, #0
 80078c6:	9308      	strmi	r3, [sp, #32]
 80078c8:	2f00      	cmp	r7, #0
 80078ca:	db39      	blt.n	8007940 <_dtoa_r+0x218>
 80078cc:	9b08      	ldr	r3, [sp, #32]
 80078ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 80078d0:	443b      	add	r3, r7
 80078d2:	9308      	str	r3, [sp, #32]
 80078d4:	2300      	movs	r3, #0
 80078d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80078d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078da:	2b09      	cmp	r3, #9
 80078dc:	d864      	bhi.n	80079a8 <_dtoa_r+0x280>
 80078de:	2b05      	cmp	r3, #5
 80078e0:	bfc4      	itt	gt
 80078e2:	3b04      	subgt	r3, #4
 80078e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80078e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e8:	f1a3 0302 	sub.w	r3, r3, #2
 80078ec:	bfcc      	ite	gt
 80078ee:	2400      	movgt	r4, #0
 80078f0:	2401      	movle	r4, #1
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	d863      	bhi.n	80079be <_dtoa_r+0x296>
 80078f6:	e8df f003 	tbb	[pc, r3]
 80078fa:	372a      	.short	0x372a
 80078fc:	5535      	.short	0x5535
 80078fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007902:	441e      	add	r6, r3
 8007904:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007908:	2b20      	cmp	r3, #32
 800790a:	bfc1      	itttt	gt
 800790c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007910:	409f      	lslgt	r7, r3
 8007912:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007916:	fa24 f303 	lsrgt.w	r3, r4, r3
 800791a:	bfd6      	itet	le
 800791c:	f1c3 0320 	rsble	r3, r3, #32
 8007920:	ea47 0003 	orrgt.w	r0, r7, r3
 8007924:	fa04 f003 	lslle.w	r0, r4, r3
 8007928:	f7f8 fdec 	bl	8000504 <__aeabi_ui2d>
 800792c:	2201      	movs	r2, #1
 800792e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007932:	3e01      	subs	r6, #1
 8007934:	9214      	str	r2, [sp, #80]	@ 0x50
 8007936:	e777      	b.n	8007828 <_dtoa_r+0x100>
 8007938:	2301      	movs	r3, #1
 800793a:	e7b8      	b.n	80078ae <_dtoa_r+0x186>
 800793c:	9012      	str	r0, [sp, #72]	@ 0x48
 800793e:	e7b7      	b.n	80078b0 <_dtoa_r+0x188>
 8007940:	427b      	negs	r3, r7
 8007942:	930a      	str	r3, [sp, #40]	@ 0x28
 8007944:	2300      	movs	r3, #0
 8007946:	eba8 0807 	sub.w	r8, r8, r7
 800794a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800794c:	e7c4      	b.n	80078d8 <_dtoa_r+0x1b0>
 800794e:	2300      	movs	r3, #0
 8007950:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007954:	2b00      	cmp	r3, #0
 8007956:	dc35      	bgt.n	80079c4 <_dtoa_r+0x29c>
 8007958:	2301      	movs	r3, #1
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	9307      	str	r3, [sp, #28]
 800795e:	461a      	mov	r2, r3
 8007960:	920e      	str	r2, [sp, #56]	@ 0x38
 8007962:	e00b      	b.n	800797c <_dtoa_r+0x254>
 8007964:	2301      	movs	r3, #1
 8007966:	e7f3      	b.n	8007950 <_dtoa_r+0x228>
 8007968:	2300      	movs	r3, #0
 800796a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800796c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800796e:	18fb      	adds	r3, r7, r3
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	3301      	adds	r3, #1
 8007974:	2b01      	cmp	r3, #1
 8007976:	9307      	str	r3, [sp, #28]
 8007978:	bfb8      	it	lt
 800797a:	2301      	movlt	r3, #1
 800797c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007980:	2100      	movs	r1, #0
 8007982:	2204      	movs	r2, #4
 8007984:	f102 0514 	add.w	r5, r2, #20
 8007988:	429d      	cmp	r5, r3
 800798a:	d91f      	bls.n	80079cc <_dtoa_r+0x2a4>
 800798c:	6041      	str	r1, [r0, #4]
 800798e:	4658      	mov	r0, fp
 8007990:	f000 fd8e 	bl	80084b0 <_Balloc>
 8007994:	4682      	mov	sl, r0
 8007996:	2800      	cmp	r0, #0
 8007998:	d13c      	bne.n	8007a14 <_dtoa_r+0x2ec>
 800799a:	4b1b      	ldr	r3, [pc, #108]	@ (8007a08 <_dtoa_r+0x2e0>)
 800799c:	4602      	mov	r2, r0
 800799e:	f240 11af 	movw	r1, #431	@ 0x1af
 80079a2:	e6d8      	b.n	8007756 <_dtoa_r+0x2e>
 80079a4:	2301      	movs	r3, #1
 80079a6:	e7e0      	b.n	800796a <_dtoa_r+0x242>
 80079a8:	2401      	movs	r4, #1
 80079aa:	2300      	movs	r3, #0
 80079ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 80079b0:	f04f 33ff 	mov.w	r3, #4294967295
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	9307      	str	r3, [sp, #28]
 80079b8:	2200      	movs	r2, #0
 80079ba:	2312      	movs	r3, #18
 80079bc:	e7d0      	b.n	8007960 <_dtoa_r+0x238>
 80079be:	2301      	movs	r3, #1
 80079c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079c2:	e7f5      	b.n	80079b0 <_dtoa_r+0x288>
 80079c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	9307      	str	r3, [sp, #28]
 80079ca:	e7d7      	b.n	800797c <_dtoa_r+0x254>
 80079cc:	3101      	adds	r1, #1
 80079ce:	0052      	lsls	r2, r2, #1
 80079d0:	e7d8      	b.n	8007984 <_dtoa_r+0x25c>
 80079d2:	bf00      	nop
 80079d4:	f3af 8000 	nop.w
 80079d8:	636f4361 	.word	0x636f4361
 80079dc:	3fd287a7 	.word	0x3fd287a7
 80079e0:	8b60c8b3 	.word	0x8b60c8b3
 80079e4:	3fc68a28 	.word	0x3fc68a28
 80079e8:	509f79fb 	.word	0x509f79fb
 80079ec:	3fd34413 	.word	0x3fd34413
 80079f0:	080160ac 	.word	0x080160ac
 80079f4:	0801619d 	.word	0x0801619d
 80079f8:	7ff00000 	.word	0x7ff00000
 80079fc:	0801612c 	.word	0x0801612c
 8007a00:	3ff80000 	.word	0x3ff80000
 8007a04:	08016298 	.word	0x08016298
 8007a08:	080161f5 	.word	0x080161f5
 8007a0c:	08016199 	.word	0x08016199
 8007a10:	0801612b 	.word	0x0801612b
 8007a14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a18:	6018      	str	r0, [r3, #0]
 8007a1a:	9b07      	ldr	r3, [sp, #28]
 8007a1c:	2b0e      	cmp	r3, #14
 8007a1e:	f200 80a4 	bhi.w	8007b6a <_dtoa_r+0x442>
 8007a22:	2c00      	cmp	r4, #0
 8007a24:	f000 80a1 	beq.w	8007b6a <_dtoa_r+0x442>
 8007a28:	2f00      	cmp	r7, #0
 8007a2a:	dd33      	ble.n	8007a94 <_dtoa_r+0x36c>
 8007a2c:	4bad      	ldr	r3, [pc, #692]	@ (8007ce4 <_dtoa_r+0x5bc>)
 8007a2e:	f007 020f 	and.w	r2, r7, #15
 8007a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a36:	ed93 7b00 	vldr	d7, [r3]
 8007a3a:	05f8      	lsls	r0, r7, #23
 8007a3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007a40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a44:	d516      	bpl.n	8007a74 <_dtoa_r+0x34c>
 8007a46:	4ba8      	ldr	r3, [pc, #672]	@ (8007ce8 <_dtoa_r+0x5c0>)
 8007a48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a50:	f7f8 fefc 	bl	800084c <__aeabi_ddiv>
 8007a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a58:	f004 040f 	and.w	r4, r4, #15
 8007a5c:	2603      	movs	r6, #3
 8007a5e:	4da2      	ldr	r5, [pc, #648]	@ (8007ce8 <_dtoa_r+0x5c0>)
 8007a60:	b954      	cbnz	r4, 8007a78 <_dtoa_r+0x350>
 8007a62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a6a:	f7f8 feef 	bl	800084c <__aeabi_ddiv>
 8007a6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a72:	e028      	b.n	8007ac6 <_dtoa_r+0x39e>
 8007a74:	2602      	movs	r6, #2
 8007a76:	e7f2      	b.n	8007a5e <_dtoa_r+0x336>
 8007a78:	07e1      	lsls	r1, r4, #31
 8007a7a:	d508      	bpl.n	8007a8e <_dtoa_r+0x366>
 8007a7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a84:	f7f8 fdb8 	bl	80005f8 <__aeabi_dmul>
 8007a88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a8c:	3601      	adds	r6, #1
 8007a8e:	1064      	asrs	r4, r4, #1
 8007a90:	3508      	adds	r5, #8
 8007a92:	e7e5      	b.n	8007a60 <_dtoa_r+0x338>
 8007a94:	f000 80d2 	beq.w	8007c3c <_dtoa_r+0x514>
 8007a98:	427c      	negs	r4, r7
 8007a9a:	4b92      	ldr	r3, [pc, #584]	@ (8007ce4 <_dtoa_r+0x5bc>)
 8007a9c:	4d92      	ldr	r5, [pc, #584]	@ (8007ce8 <_dtoa_r+0x5c0>)
 8007a9e:	f004 020f 	and.w	r2, r4, #15
 8007aa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aae:	f7f8 fda3 	bl	80005f8 <__aeabi_dmul>
 8007ab2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ab6:	1124      	asrs	r4, r4, #4
 8007ab8:	2300      	movs	r3, #0
 8007aba:	2602      	movs	r6, #2
 8007abc:	2c00      	cmp	r4, #0
 8007abe:	f040 80b2 	bne.w	8007c26 <_dtoa_r+0x4fe>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1d3      	bne.n	8007a6e <_dtoa_r+0x346>
 8007ac6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ac8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 80b7 	beq.w	8007c40 <_dtoa_r+0x518>
 8007ad2:	4b86      	ldr	r3, [pc, #536]	@ (8007cec <_dtoa_r+0x5c4>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	f7f8 ffff 	bl	8000adc <__aeabi_dcmplt>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f000 80ae 	beq.w	8007c40 <_dtoa_r+0x518>
 8007ae4:	9b07      	ldr	r3, [sp, #28]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f000 80aa 	beq.w	8007c40 <_dtoa_r+0x518>
 8007aec:	9b00      	ldr	r3, [sp, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	dd37      	ble.n	8007b62 <_dtoa_r+0x43a>
 8007af2:	1e7b      	subs	r3, r7, #1
 8007af4:	9304      	str	r3, [sp, #16]
 8007af6:	4620      	mov	r0, r4
 8007af8:	4b7d      	ldr	r3, [pc, #500]	@ (8007cf0 <_dtoa_r+0x5c8>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	4629      	mov	r1, r5
 8007afe:	f7f8 fd7b 	bl	80005f8 <__aeabi_dmul>
 8007b02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b06:	9c00      	ldr	r4, [sp, #0]
 8007b08:	3601      	adds	r6, #1
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f7f8 fd0a 	bl	8000524 <__aeabi_i2d>
 8007b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b14:	f7f8 fd70 	bl	80005f8 <__aeabi_dmul>
 8007b18:	4b76      	ldr	r3, [pc, #472]	@ (8007cf4 <_dtoa_r+0x5cc>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f7f8 fbb6 	bl	800028c <__adddf3>
 8007b20:	4605      	mov	r5, r0
 8007b22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b26:	2c00      	cmp	r4, #0
 8007b28:	f040 808d 	bne.w	8007c46 <_dtoa_r+0x51e>
 8007b2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b30:	4b71      	ldr	r3, [pc, #452]	@ (8007cf8 <_dtoa_r+0x5d0>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	f7f8 fba8 	bl	8000288 <__aeabi_dsub>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b40:	462a      	mov	r2, r5
 8007b42:	4633      	mov	r3, r6
 8007b44:	f7f8 ffe8 	bl	8000b18 <__aeabi_dcmpgt>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	f040 828b 	bne.w	8008064 <_dtoa_r+0x93c>
 8007b4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b52:	462a      	mov	r2, r5
 8007b54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b58:	f7f8 ffc0 	bl	8000adc <__aeabi_dcmplt>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	f040 8128 	bne.w	8007db2 <_dtoa_r+0x68a>
 8007b62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007b66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f2c0 815a 	blt.w	8007e26 <_dtoa_r+0x6fe>
 8007b72:	2f0e      	cmp	r7, #14
 8007b74:	f300 8157 	bgt.w	8007e26 <_dtoa_r+0x6fe>
 8007b78:	4b5a      	ldr	r3, [pc, #360]	@ (8007ce4 <_dtoa_r+0x5bc>)
 8007b7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b7e:	ed93 7b00 	vldr	d7, [r3]
 8007b82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	ed8d 7b00 	vstr	d7, [sp]
 8007b8a:	da03      	bge.n	8007b94 <_dtoa_r+0x46c>
 8007b8c:	9b07      	ldr	r3, [sp, #28]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f340 8101 	ble.w	8007d96 <_dtoa_r+0x66e>
 8007b94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b98:	4656      	mov	r6, sl
 8007b9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	f7f8 fe53 	bl	800084c <__aeabi_ddiv>
 8007ba6:	f7f8 ffd7 	bl	8000b58 <__aeabi_d2iz>
 8007baa:	4680      	mov	r8, r0
 8007bac:	f7f8 fcba 	bl	8000524 <__aeabi_i2d>
 8007bb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bb4:	f7f8 fd20 	bl	80005f8 <__aeabi_dmul>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007bc4:	f7f8 fb60 	bl	8000288 <__aeabi_dsub>
 8007bc8:	f806 4b01 	strb.w	r4, [r6], #1
 8007bcc:	9d07      	ldr	r5, [sp, #28]
 8007bce:	eba6 040a 	sub.w	r4, r6, sl
 8007bd2:	42a5      	cmp	r5, r4
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	f040 8117 	bne.w	8007e0a <_dtoa_r+0x6e2>
 8007bdc:	f7f8 fb56 	bl	800028c <__adddf3>
 8007be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007be4:	4604      	mov	r4, r0
 8007be6:	460d      	mov	r5, r1
 8007be8:	f7f8 ff96 	bl	8000b18 <__aeabi_dcmpgt>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	f040 80f9 	bne.w	8007de4 <_dtoa_r+0x6bc>
 8007bf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	f7f8 ff65 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bfe:	b118      	cbz	r0, 8007c08 <_dtoa_r+0x4e0>
 8007c00:	f018 0f01 	tst.w	r8, #1
 8007c04:	f040 80ee 	bne.w	8007de4 <_dtoa_r+0x6bc>
 8007c08:	4649      	mov	r1, r9
 8007c0a:	4658      	mov	r0, fp
 8007c0c:	f000 fc90 	bl	8008530 <_Bfree>
 8007c10:	2300      	movs	r3, #0
 8007c12:	7033      	strb	r3, [r6, #0]
 8007c14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c16:	3701      	adds	r7, #1
 8007c18:	601f      	str	r7, [r3, #0]
 8007c1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 831d 	beq.w	800825c <_dtoa_r+0xb34>
 8007c22:	601e      	str	r6, [r3, #0]
 8007c24:	e31a      	b.n	800825c <_dtoa_r+0xb34>
 8007c26:	07e2      	lsls	r2, r4, #31
 8007c28:	d505      	bpl.n	8007c36 <_dtoa_r+0x50e>
 8007c2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c2e:	f7f8 fce3 	bl	80005f8 <__aeabi_dmul>
 8007c32:	3601      	adds	r6, #1
 8007c34:	2301      	movs	r3, #1
 8007c36:	1064      	asrs	r4, r4, #1
 8007c38:	3508      	adds	r5, #8
 8007c3a:	e73f      	b.n	8007abc <_dtoa_r+0x394>
 8007c3c:	2602      	movs	r6, #2
 8007c3e:	e742      	b.n	8007ac6 <_dtoa_r+0x39e>
 8007c40:	9c07      	ldr	r4, [sp, #28]
 8007c42:	9704      	str	r7, [sp, #16]
 8007c44:	e761      	b.n	8007b0a <_dtoa_r+0x3e2>
 8007c46:	4b27      	ldr	r3, [pc, #156]	@ (8007ce4 <_dtoa_r+0x5bc>)
 8007c48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c52:	4454      	add	r4, sl
 8007c54:	2900      	cmp	r1, #0
 8007c56:	d053      	beq.n	8007d00 <_dtoa_r+0x5d8>
 8007c58:	4928      	ldr	r1, [pc, #160]	@ (8007cfc <_dtoa_r+0x5d4>)
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	f7f8 fdf6 	bl	800084c <__aeabi_ddiv>
 8007c60:	4633      	mov	r3, r6
 8007c62:	462a      	mov	r2, r5
 8007c64:	f7f8 fb10 	bl	8000288 <__aeabi_dsub>
 8007c68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c6c:	4656      	mov	r6, sl
 8007c6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c72:	f7f8 ff71 	bl	8000b58 <__aeabi_d2iz>
 8007c76:	4605      	mov	r5, r0
 8007c78:	f7f8 fc54 	bl	8000524 <__aeabi_i2d>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c84:	f7f8 fb00 	bl	8000288 <__aeabi_dsub>
 8007c88:	3530      	adds	r5, #48	@ 0x30
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c92:	f806 5b01 	strb.w	r5, [r6], #1
 8007c96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c9a:	f7f8 ff1f 	bl	8000adc <__aeabi_dcmplt>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d171      	bne.n	8007d86 <_dtoa_r+0x65e>
 8007ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ca6:	4911      	ldr	r1, [pc, #68]	@ (8007cec <_dtoa_r+0x5c4>)
 8007ca8:	2000      	movs	r0, #0
 8007caa:	f7f8 faed 	bl	8000288 <__aeabi_dsub>
 8007cae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cb2:	f7f8 ff13 	bl	8000adc <__aeabi_dcmplt>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	f040 8095 	bne.w	8007de6 <_dtoa_r+0x6be>
 8007cbc:	42a6      	cmp	r6, r4
 8007cbe:	f43f af50 	beq.w	8007b62 <_dtoa_r+0x43a>
 8007cc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf0 <_dtoa_r+0x5c8>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f7f8 fc95 	bl	80005f8 <__aeabi_dmul>
 8007cce:	4b08      	ldr	r3, [pc, #32]	@ (8007cf0 <_dtoa_r+0x5c8>)
 8007cd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cda:	f7f8 fc8d 	bl	80005f8 <__aeabi_dmul>
 8007cde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ce2:	e7c4      	b.n	8007c6e <_dtoa_r+0x546>
 8007ce4:	08016298 	.word	0x08016298
 8007ce8:	08016270 	.word	0x08016270
 8007cec:	3ff00000 	.word	0x3ff00000
 8007cf0:	40240000 	.word	0x40240000
 8007cf4:	401c0000 	.word	0x401c0000
 8007cf8:	40140000 	.word	0x40140000
 8007cfc:	3fe00000 	.word	0x3fe00000
 8007d00:	4631      	mov	r1, r6
 8007d02:	4628      	mov	r0, r5
 8007d04:	f7f8 fc78 	bl	80005f8 <__aeabi_dmul>
 8007d08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d0c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007d0e:	4656      	mov	r6, sl
 8007d10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d14:	f7f8 ff20 	bl	8000b58 <__aeabi_d2iz>
 8007d18:	4605      	mov	r5, r0
 8007d1a:	f7f8 fc03 	bl	8000524 <__aeabi_i2d>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d26:	f7f8 faaf 	bl	8000288 <__aeabi_dsub>
 8007d2a:	3530      	adds	r5, #48	@ 0x30
 8007d2c:	f806 5b01 	strb.w	r5, [r6], #1
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	42a6      	cmp	r6, r4
 8007d36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d3a:	f04f 0200 	mov.w	r2, #0
 8007d3e:	d124      	bne.n	8007d8a <_dtoa_r+0x662>
 8007d40:	4bac      	ldr	r3, [pc, #688]	@ (8007ff4 <_dtoa_r+0x8cc>)
 8007d42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d46:	f7f8 faa1 	bl	800028c <__adddf3>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d52:	f7f8 fee1 	bl	8000b18 <__aeabi_dcmpgt>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d145      	bne.n	8007de6 <_dtoa_r+0x6be>
 8007d5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d5e:	49a5      	ldr	r1, [pc, #660]	@ (8007ff4 <_dtoa_r+0x8cc>)
 8007d60:	2000      	movs	r0, #0
 8007d62:	f7f8 fa91 	bl	8000288 <__aeabi_dsub>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d6e:	f7f8 feb5 	bl	8000adc <__aeabi_dcmplt>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	f43f aef5 	beq.w	8007b62 <_dtoa_r+0x43a>
 8007d78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007d7a:	1e73      	subs	r3, r6, #1
 8007d7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d82:	2b30      	cmp	r3, #48	@ 0x30
 8007d84:	d0f8      	beq.n	8007d78 <_dtoa_r+0x650>
 8007d86:	9f04      	ldr	r7, [sp, #16]
 8007d88:	e73e      	b.n	8007c08 <_dtoa_r+0x4e0>
 8007d8a:	4b9b      	ldr	r3, [pc, #620]	@ (8007ff8 <_dtoa_r+0x8d0>)
 8007d8c:	f7f8 fc34 	bl	80005f8 <__aeabi_dmul>
 8007d90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d94:	e7bc      	b.n	8007d10 <_dtoa_r+0x5e8>
 8007d96:	d10c      	bne.n	8007db2 <_dtoa_r+0x68a>
 8007d98:	4b98      	ldr	r3, [pc, #608]	@ (8007ffc <_dtoa_r+0x8d4>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007da0:	f7f8 fc2a 	bl	80005f8 <__aeabi_dmul>
 8007da4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007da8:	f7f8 feac 	bl	8000b04 <__aeabi_dcmpge>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	f000 8157 	beq.w	8008060 <_dtoa_r+0x938>
 8007db2:	2400      	movs	r4, #0
 8007db4:	4625      	mov	r5, r4
 8007db6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007db8:	43db      	mvns	r3, r3
 8007dba:	9304      	str	r3, [sp, #16]
 8007dbc:	4656      	mov	r6, sl
 8007dbe:	2700      	movs	r7, #0
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4658      	mov	r0, fp
 8007dc4:	f000 fbb4 	bl	8008530 <_Bfree>
 8007dc8:	2d00      	cmp	r5, #0
 8007dca:	d0dc      	beq.n	8007d86 <_dtoa_r+0x65e>
 8007dcc:	b12f      	cbz	r7, 8007dda <_dtoa_r+0x6b2>
 8007dce:	42af      	cmp	r7, r5
 8007dd0:	d003      	beq.n	8007dda <_dtoa_r+0x6b2>
 8007dd2:	4639      	mov	r1, r7
 8007dd4:	4658      	mov	r0, fp
 8007dd6:	f000 fbab 	bl	8008530 <_Bfree>
 8007dda:	4629      	mov	r1, r5
 8007ddc:	4658      	mov	r0, fp
 8007dde:	f000 fba7 	bl	8008530 <_Bfree>
 8007de2:	e7d0      	b.n	8007d86 <_dtoa_r+0x65e>
 8007de4:	9704      	str	r7, [sp, #16]
 8007de6:	4633      	mov	r3, r6
 8007de8:	461e      	mov	r6, r3
 8007dea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dee:	2a39      	cmp	r2, #57	@ 0x39
 8007df0:	d107      	bne.n	8007e02 <_dtoa_r+0x6da>
 8007df2:	459a      	cmp	sl, r3
 8007df4:	d1f8      	bne.n	8007de8 <_dtoa_r+0x6c0>
 8007df6:	9a04      	ldr	r2, [sp, #16]
 8007df8:	3201      	adds	r2, #1
 8007dfa:	9204      	str	r2, [sp, #16]
 8007dfc:	2230      	movs	r2, #48	@ 0x30
 8007dfe:	f88a 2000 	strb.w	r2, [sl]
 8007e02:	781a      	ldrb	r2, [r3, #0]
 8007e04:	3201      	adds	r2, #1
 8007e06:	701a      	strb	r2, [r3, #0]
 8007e08:	e7bd      	b.n	8007d86 <_dtoa_r+0x65e>
 8007e0a:	4b7b      	ldr	r3, [pc, #492]	@ (8007ff8 <_dtoa_r+0x8d0>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f7f8 fbf3 	bl	80005f8 <__aeabi_dmul>
 8007e12:	2200      	movs	r2, #0
 8007e14:	2300      	movs	r3, #0
 8007e16:	4604      	mov	r4, r0
 8007e18:	460d      	mov	r5, r1
 8007e1a:	f7f8 fe55 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	f43f aebb 	beq.w	8007b9a <_dtoa_r+0x472>
 8007e24:	e6f0      	b.n	8007c08 <_dtoa_r+0x4e0>
 8007e26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e28:	2a00      	cmp	r2, #0
 8007e2a:	f000 80db 	beq.w	8007fe4 <_dtoa_r+0x8bc>
 8007e2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e30:	2a01      	cmp	r2, #1
 8007e32:	f300 80bf 	bgt.w	8007fb4 <_dtoa_r+0x88c>
 8007e36:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007e38:	2a00      	cmp	r2, #0
 8007e3a:	f000 80b7 	beq.w	8007fac <_dtoa_r+0x884>
 8007e3e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e44:	4646      	mov	r6, r8
 8007e46:	9a08      	ldr	r2, [sp, #32]
 8007e48:	2101      	movs	r1, #1
 8007e4a:	441a      	add	r2, r3
 8007e4c:	4658      	mov	r0, fp
 8007e4e:	4498      	add	r8, r3
 8007e50:	9208      	str	r2, [sp, #32]
 8007e52:	f000 fc6b 	bl	800872c <__i2b>
 8007e56:	4605      	mov	r5, r0
 8007e58:	b15e      	cbz	r6, 8007e72 <_dtoa_r+0x74a>
 8007e5a:	9b08      	ldr	r3, [sp, #32]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dd08      	ble.n	8007e72 <_dtoa_r+0x74a>
 8007e60:	42b3      	cmp	r3, r6
 8007e62:	9a08      	ldr	r2, [sp, #32]
 8007e64:	bfa8      	it	ge
 8007e66:	4633      	movge	r3, r6
 8007e68:	eba8 0803 	sub.w	r8, r8, r3
 8007e6c:	1af6      	subs	r6, r6, r3
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	9308      	str	r3, [sp, #32]
 8007e72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e74:	b1f3      	cbz	r3, 8007eb4 <_dtoa_r+0x78c>
 8007e76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 80b7 	beq.w	8007fec <_dtoa_r+0x8c4>
 8007e7e:	b18c      	cbz	r4, 8007ea4 <_dtoa_r+0x77c>
 8007e80:	4629      	mov	r1, r5
 8007e82:	4622      	mov	r2, r4
 8007e84:	4658      	mov	r0, fp
 8007e86:	f000 fd11 	bl	80088ac <__pow5mult>
 8007e8a:	464a      	mov	r2, r9
 8007e8c:	4601      	mov	r1, r0
 8007e8e:	4605      	mov	r5, r0
 8007e90:	4658      	mov	r0, fp
 8007e92:	f000 fc61 	bl	8008758 <__multiply>
 8007e96:	4649      	mov	r1, r9
 8007e98:	9004      	str	r0, [sp, #16]
 8007e9a:	4658      	mov	r0, fp
 8007e9c:	f000 fb48 	bl	8008530 <_Bfree>
 8007ea0:	9b04      	ldr	r3, [sp, #16]
 8007ea2:	4699      	mov	r9, r3
 8007ea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ea6:	1b1a      	subs	r2, r3, r4
 8007ea8:	d004      	beq.n	8007eb4 <_dtoa_r+0x78c>
 8007eaa:	4649      	mov	r1, r9
 8007eac:	4658      	mov	r0, fp
 8007eae:	f000 fcfd 	bl	80088ac <__pow5mult>
 8007eb2:	4681      	mov	r9, r0
 8007eb4:	2101      	movs	r1, #1
 8007eb6:	4658      	mov	r0, fp
 8007eb8:	f000 fc38 	bl	800872c <__i2b>
 8007ebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 81cf 	beq.w	8008264 <_dtoa_r+0xb3c>
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	4601      	mov	r1, r0
 8007eca:	4658      	mov	r0, fp
 8007ecc:	f000 fcee 	bl	80088ac <__pow5mult>
 8007ed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	f300 8095 	bgt.w	8008004 <_dtoa_r+0x8dc>
 8007eda:	9b02      	ldr	r3, [sp, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f040 8087 	bne.w	8007ff0 <_dtoa_r+0x8c8>
 8007ee2:	9b03      	ldr	r3, [sp, #12]
 8007ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f040 8089 	bne.w	8008000 <_dtoa_r+0x8d8>
 8007eee:	9b03      	ldr	r3, [sp, #12]
 8007ef0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ef4:	0d1b      	lsrs	r3, r3, #20
 8007ef6:	051b      	lsls	r3, r3, #20
 8007ef8:	b12b      	cbz	r3, 8007f06 <_dtoa_r+0x7de>
 8007efa:	9b08      	ldr	r3, [sp, #32]
 8007efc:	3301      	adds	r3, #1
 8007efe:	9308      	str	r3, [sp, #32]
 8007f00:	f108 0801 	add.w	r8, r8, #1
 8007f04:	2301      	movs	r3, #1
 8007f06:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 81b0 	beq.w	8008270 <_dtoa_r+0xb48>
 8007f10:	6923      	ldr	r3, [r4, #16]
 8007f12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f16:	6918      	ldr	r0, [r3, #16]
 8007f18:	f000 fbbc 	bl	8008694 <__hi0bits>
 8007f1c:	f1c0 0020 	rsb	r0, r0, #32
 8007f20:	9b08      	ldr	r3, [sp, #32]
 8007f22:	4418      	add	r0, r3
 8007f24:	f010 001f 	ands.w	r0, r0, #31
 8007f28:	d077      	beq.n	800801a <_dtoa_r+0x8f2>
 8007f2a:	f1c0 0320 	rsb	r3, r0, #32
 8007f2e:	2b04      	cmp	r3, #4
 8007f30:	dd6b      	ble.n	800800a <_dtoa_r+0x8e2>
 8007f32:	9b08      	ldr	r3, [sp, #32]
 8007f34:	f1c0 001c 	rsb	r0, r0, #28
 8007f38:	4403      	add	r3, r0
 8007f3a:	4480      	add	r8, r0
 8007f3c:	4406      	add	r6, r0
 8007f3e:	9308      	str	r3, [sp, #32]
 8007f40:	f1b8 0f00 	cmp.w	r8, #0
 8007f44:	dd05      	ble.n	8007f52 <_dtoa_r+0x82a>
 8007f46:	4649      	mov	r1, r9
 8007f48:	4642      	mov	r2, r8
 8007f4a:	4658      	mov	r0, fp
 8007f4c:	f000 fd08 	bl	8008960 <__lshift>
 8007f50:	4681      	mov	r9, r0
 8007f52:	9b08      	ldr	r3, [sp, #32]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	dd05      	ble.n	8007f64 <_dtoa_r+0x83c>
 8007f58:	4621      	mov	r1, r4
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	4658      	mov	r0, fp
 8007f5e:	f000 fcff 	bl	8008960 <__lshift>
 8007f62:	4604      	mov	r4, r0
 8007f64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d059      	beq.n	800801e <_dtoa_r+0x8f6>
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	4648      	mov	r0, r9
 8007f6e:	f000 fd63 	bl	8008a38 <__mcmp>
 8007f72:	2800      	cmp	r0, #0
 8007f74:	da53      	bge.n	800801e <_dtoa_r+0x8f6>
 8007f76:	1e7b      	subs	r3, r7, #1
 8007f78:	9304      	str	r3, [sp, #16]
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	220a      	movs	r2, #10
 8007f80:	4658      	mov	r0, fp
 8007f82:	f000 faf7 	bl	8008574 <__multadd>
 8007f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f88:	4681      	mov	r9, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 8172 	beq.w	8008274 <_dtoa_r+0xb4c>
 8007f90:	2300      	movs	r3, #0
 8007f92:	4629      	mov	r1, r5
 8007f94:	220a      	movs	r2, #10
 8007f96:	4658      	mov	r0, fp
 8007f98:	f000 faec 	bl	8008574 <__multadd>
 8007f9c:	9b00      	ldr	r3, [sp, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	4605      	mov	r5, r0
 8007fa2:	dc67      	bgt.n	8008074 <_dtoa_r+0x94c>
 8007fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	dc41      	bgt.n	800802e <_dtoa_r+0x906>
 8007faa:	e063      	b.n	8008074 <_dtoa_r+0x94c>
 8007fac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007fae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007fb2:	e746      	b.n	8007e42 <_dtoa_r+0x71a>
 8007fb4:	9b07      	ldr	r3, [sp, #28]
 8007fb6:	1e5c      	subs	r4, r3, #1
 8007fb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fba:	42a3      	cmp	r3, r4
 8007fbc:	bfbf      	itttt	lt
 8007fbe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007fc0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007fc2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007fc4:	1ae3      	sublt	r3, r4, r3
 8007fc6:	bfb4      	ite	lt
 8007fc8:	18d2      	addlt	r2, r2, r3
 8007fca:	1b1c      	subge	r4, r3, r4
 8007fcc:	9b07      	ldr	r3, [sp, #28]
 8007fce:	bfbc      	itt	lt
 8007fd0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007fd2:	2400      	movlt	r4, #0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	bfb5      	itete	lt
 8007fd8:	eba8 0603 	sublt.w	r6, r8, r3
 8007fdc:	9b07      	ldrge	r3, [sp, #28]
 8007fde:	2300      	movlt	r3, #0
 8007fe0:	4646      	movge	r6, r8
 8007fe2:	e730      	b.n	8007e46 <_dtoa_r+0x71e>
 8007fe4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007fe6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007fe8:	4646      	mov	r6, r8
 8007fea:	e735      	b.n	8007e58 <_dtoa_r+0x730>
 8007fec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007fee:	e75c      	b.n	8007eaa <_dtoa_r+0x782>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	e788      	b.n	8007f06 <_dtoa_r+0x7de>
 8007ff4:	3fe00000 	.word	0x3fe00000
 8007ff8:	40240000 	.word	0x40240000
 8007ffc:	40140000 	.word	0x40140000
 8008000:	9b02      	ldr	r3, [sp, #8]
 8008002:	e780      	b.n	8007f06 <_dtoa_r+0x7de>
 8008004:	2300      	movs	r3, #0
 8008006:	930a      	str	r3, [sp, #40]	@ 0x28
 8008008:	e782      	b.n	8007f10 <_dtoa_r+0x7e8>
 800800a:	d099      	beq.n	8007f40 <_dtoa_r+0x818>
 800800c:	9a08      	ldr	r2, [sp, #32]
 800800e:	331c      	adds	r3, #28
 8008010:	441a      	add	r2, r3
 8008012:	4498      	add	r8, r3
 8008014:	441e      	add	r6, r3
 8008016:	9208      	str	r2, [sp, #32]
 8008018:	e792      	b.n	8007f40 <_dtoa_r+0x818>
 800801a:	4603      	mov	r3, r0
 800801c:	e7f6      	b.n	800800c <_dtoa_r+0x8e4>
 800801e:	9b07      	ldr	r3, [sp, #28]
 8008020:	9704      	str	r7, [sp, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	dc20      	bgt.n	8008068 <_dtoa_r+0x940>
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800802a:	2b02      	cmp	r3, #2
 800802c:	dd1e      	ble.n	800806c <_dtoa_r+0x944>
 800802e:	9b00      	ldr	r3, [sp, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	f47f aec0 	bne.w	8007db6 <_dtoa_r+0x68e>
 8008036:	4621      	mov	r1, r4
 8008038:	2205      	movs	r2, #5
 800803a:	4658      	mov	r0, fp
 800803c:	f000 fa9a 	bl	8008574 <__multadd>
 8008040:	4601      	mov	r1, r0
 8008042:	4604      	mov	r4, r0
 8008044:	4648      	mov	r0, r9
 8008046:	f000 fcf7 	bl	8008a38 <__mcmp>
 800804a:	2800      	cmp	r0, #0
 800804c:	f77f aeb3 	ble.w	8007db6 <_dtoa_r+0x68e>
 8008050:	4656      	mov	r6, sl
 8008052:	2331      	movs	r3, #49	@ 0x31
 8008054:	f806 3b01 	strb.w	r3, [r6], #1
 8008058:	9b04      	ldr	r3, [sp, #16]
 800805a:	3301      	adds	r3, #1
 800805c:	9304      	str	r3, [sp, #16]
 800805e:	e6ae      	b.n	8007dbe <_dtoa_r+0x696>
 8008060:	9c07      	ldr	r4, [sp, #28]
 8008062:	9704      	str	r7, [sp, #16]
 8008064:	4625      	mov	r5, r4
 8008066:	e7f3      	b.n	8008050 <_dtoa_r+0x928>
 8008068:	9b07      	ldr	r3, [sp, #28]
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 8104 	beq.w	800827c <_dtoa_r+0xb54>
 8008074:	2e00      	cmp	r6, #0
 8008076:	dd05      	ble.n	8008084 <_dtoa_r+0x95c>
 8008078:	4629      	mov	r1, r5
 800807a:	4632      	mov	r2, r6
 800807c:	4658      	mov	r0, fp
 800807e:	f000 fc6f 	bl	8008960 <__lshift>
 8008082:	4605      	mov	r5, r0
 8008084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008086:	2b00      	cmp	r3, #0
 8008088:	d05a      	beq.n	8008140 <_dtoa_r+0xa18>
 800808a:	6869      	ldr	r1, [r5, #4]
 800808c:	4658      	mov	r0, fp
 800808e:	f000 fa0f 	bl	80084b0 <_Balloc>
 8008092:	4606      	mov	r6, r0
 8008094:	b928      	cbnz	r0, 80080a2 <_dtoa_r+0x97a>
 8008096:	4b84      	ldr	r3, [pc, #528]	@ (80082a8 <_dtoa_r+0xb80>)
 8008098:	4602      	mov	r2, r0
 800809a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800809e:	f7ff bb5a 	b.w	8007756 <_dtoa_r+0x2e>
 80080a2:	692a      	ldr	r2, [r5, #16]
 80080a4:	3202      	adds	r2, #2
 80080a6:	0092      	lsls	r2, r2, #2
 80080a8:	f105 010c 	add.w	r1, r5, #12
 80080ac:	300c      	adds	r0, #12
 80080ae:	f7ff fa7e 	bl	80075ae <memcpy>
 80080b2:	2201      	movs	r2, #1
 80080b4:	4631      	mov	r1, r6
 80080b6:	4658      	mov	r0, fp
 80080b8:	f000 fc52 	bl	8008960 <__lshift>
 80080bc:	f10a 0301 	add.w	r3, sl, #1
 80080c0:	9307      	str	r3, [sp, #28]
 80080c2:	9b00      	ldr	r3, [sp, #0]
 80080c4:	4453      	add	r3, sl
 80080c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080c8:	9b02      	ldr	r3, [sp, #8]
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	462f      	mov	r7, r5
 80080d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80080d2:	4605      	mov	r5, r0
 80080d4:	9b07      	ldr	r3, [sp, #28]
 80080d6:	4621      	mov	r1, r4
 80080d8:	3b01      	subs	r3, #1
 80080da:	4648      	mov	r0, r9
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	f7ff fa99 	bl	8007614 <quorem>
 80080e2:	4639      	mov	r1, r7
 80080e4:	9002      	str	r0, [sp, #8]
 80080e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80080ea:	4648      	mov	r0, r9
 80080ec:	f000 fca4 	bl	8008a38 <__mcmp>
 80080f0:	462a      	mov	r2, r5
 80080f2:	9008      	str	r0, [sp, #32]
 80080f4:	4621      	mov	r1, r4
 80080f6:	4658      	mov	r0, fp
 80080f8:	f000 fcba 	bl	8008a70 <__mdiff>
 80080fc:	68c2      	ldr	r2, [r0, #12]
 80080fe:	4606      	mov	r6, r0
 8008100:	bb02      	cbnz	r2, 8008144 <_dtoa_r+0xa1c>
 8008102:	4601      	mov	r1, r0
 8008104:	4648      	mov	r0, r9
 8008106:	f000 fc97 	bl	8008a38 <__mcmp>
 800810a:	4602      	mov	r2, r0
 800810c:	4631      	mov	r1, r6
 800810e:	4658      	mov	r0, fp
 8008110:	920e      	str	r2, [sp, #56]	@ 0x38
 8008112:	f000 fa0d 	bl	8008530 <_Bfree>
 8008116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008118:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800811a:	9e07      	ldr	r6, [sp, #28]
 800811c:	ea43 0102 	orr.w	r1, r3, r2
 8008120:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008122:	4319      	orrs	r1, r3
 8008124:	d110      	bne.n	8008148 <_dtoa_r+0xa20>
 8008126:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800812a:	d029      	beq.n	8008180 <_dtoa_r+0xa58>
 800812c:	9b08      	ldr	r3, [sp, #32]
 800812e:	2b00      	cmp	r3, #0
 8008130:	dd02      	ble.n	8008138 <_dtoa_r+0xa10>
 8008132:	9b02      	ldr	r3, [sp, #8]
 8008134:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008138:	9b00      	ldr	r3, [sp, #0]
 800813a:	f883 8000 	strb.w	r8, [r3]
 800813e:	e63f      	b.n	8007dc0 <_dtoa_r+0x698>
 8008140:	4628      	mov	r0, r5
 8008142:	e7bb      	b.n	80080bc <_dtoa_r+0x994>
 8008144:	2201      	movs	r2, #1
 8008146:	e7e1      	b.n	800810c <_dtoa_r+0x9e4>
 8008148:	9b08      	ldr	r3, [sp, #32]
 800814a:	2b00      	cmp	r3, #0
 800814c:	db04      	blt.n	8008158 <_dtoa_r+0xa30>
 800814e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008150:	430b      	orrs	r3, r1
 8008152:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008154:	430b      	orrs	r3, r1
 8008156:	d120      	bne.n	800819a <_dtoa_r+0xa72>
 8008158:	2a00      	cmp	r2, #0
 800815a:	dded      	ble.n	8008138 <_dtoa_r+0xa10>
 800815c:	4649      	mov	r1, r9
 800815e:	2201      	movs	r2, #1
 8008160:	4658      	mov	r0, fp
 8008162:	f000 fbfd 	bl	8008960 <__lshift>
 8008166:	4621      	mov	r1, r4
 8008168:	4681      	mov	r9, r0
 800816a:	f000 fc65 	bl	8008a38 <__mcmp>
 800816e:	2800      	cmp	r0, #0
 8008170:	dc03      	bgt.n	800817a <_dtoa_r+0xa52>
 8008172:	d1e1      	bne.n	8008138 <_dtoa_r+0xa10>
 8008174:	f018 0f01 	tst.w	r8, #1
 8008178:	d0de      	beq.n	8008138 <_dtoa_r+0xa10>
 800817a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800817e:	d1d8      	bne.n	8008132 <_dtoa_r+0xa0a>
 8008180:	9a00      	ldr	r2, [sp, #0]
 8008182:	2339      	movs	r3, #57	@ 0x39
 8008184:	7013      	strb	r3, [r2, #0]
 8008186:	4633      	mov	r3, r6
 8008188:	461e      	mov	r6, r3
 800818a:	3b01      	subs	r3, #1
 800818c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008190:	2a39      	cmp	r2, #57	@ 0x39
 8008192:	d052      	beq.n	800823a <_dtoa_r+0xb12>
 8008194:	3201      	adds	r2, #1
 8008196:	701a      	strb	r2, [r3, #0]
 8008198:	e612      	b.n	8007dc0 <_dtoa_r+0x698>
 800819a:	2a00      	cmp	r2, #0
 800819c:	dd07      	ble.n	80081ae <_dtoa_r+0xa86>
 800819e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081a2:	d0ed      	beq.n	8008180 <_dtoa_r+0xa58>
 80081a4:	9a00      	ldr	r2, [sp, #0]
 80081a6:	f108 0301 	add.w	r3, r8, #1
 80081aa:	7013      	strb	r3, [r2, #0]
 80081ac:	e608      	b.n	8007dc0 <_dtoa_r+0x698>
 80081ae:	9b07      	ldr	r3, [sp, #28]
 80081b0:	9a07      	ldr	r2, [sp, #28]
 80081b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80081b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d028      	beq.n	800820e <_dtoa_r+0xae6>
 80081bc:	4649      	mov	r1, r9
 80081be:	2300      	movs	r3, #0
 80081c0:	220a      	movs	r2, #10
 80081c2:	4658      	mov	r0, fp
 80081c4:	f000 f9d6 	bl	8008574 <__multadd>
 80081c8:	42af      	cmp	r7, r5
 80081ca:	4681      	mov	r9, r0
 80081cc:	f04f 0300 	mov.w	r3, #0
 80081d0:	f04f 020a 	mov.w	r2, #10
 80081d4:	4639      	mov	r1, r7
 80081d6:	4658      	mov	r0, fp
 80081d8:	d107      	bne.n	80081ea <_dtoa_r+0xac2>
 80081da:	f000 f9cb 	bl	8008574 <__multadd>
 80081de:	4607      	mov	r7, r0
 80081e0:	4605      	mov	r5, r0
 80081e2:	9b07      	ldr	r3, [sp, #28]
 80081e4:	3301      	adds	r3, #1
 80081e6:	9307      	str	r3, [sp, #28]
 80081e8:	e774      	b.n	80080d4 <_dtoa_r+0x9ac>
 80081ea:	f000 f9c3 	bl	8008574 <__multadd>
 80081ee:	4629      	mov	r1, r5
 80081f0:	4607      	mov	r7, r0
 80081f2:	2300      	movs	r3, #0
 80081f4:	220a      	movs	r2, #10
 80081f6:	4658      	mov	r0, fp
 80081f8:	f000 f9bc 	bl	8008574 <__multadd>
 80081fc:	4605      	mov	r5, r0
 80081fe:	e7f0      	b.n	80081e2 <_dtoa_r+0xaba>
 8008200:	9b00      	ldr	r3, [sp, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	bfcc      	ite	gt
 8008206:	461e      	movgt	r6, r3
 8008208:	2601      	movle	r6, #1
 800820a:	4456      	add	r6, sl
 800820c:	2700      	movs	r7, #0
 800820e:	4649      	mov	r1, r9
 8008210:	2201      	movs	r2, #1
 8008212:	4658      	mov	r0, fp
 8008214:	f000 fba4 	bl	8008960 <__lshift>
 8008218:	4621      	mov	r1, r4
 800821a:	4681      	mov	r9, r0
 800821c:	f000 fc0c 	bl	8008a38 <__mcmp>
 8008220:	2800      	cmp	r0, #0
 8008222:	dcb0      	bgt.n	8008186 <_dtoa_r+0xa5e>
 8008224:	d102      	bne.n	800822c <_dtoa_r+0xb04>
 8008226:	f018 0f01 	tst.w	r8, #1
 800822a:	d1ac      	bne.n	8008186 <_dtoa_r+0xa5e>
 800822c:	4633      	mov	r3, r6
 800822e:	461e      	mov	r6, r3
 8008230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008234:	2a30      	cmp	r2, #48	@ 0x30
 8008236:	d0fa      	beq.n	800822e <_dtoa_r+0xb06>
 8008238:	e5c2      	b.n	8007dc0 <_dtoa_r+0x698>
 800823a:	459a      	cmp	sl, r3
 800823c:	d1a4      	bne.n	8008188 <_dtoa_r+0xa60>
 800823e:	9b04      	ldr	r3, [sp, #16]
 8008240:	3301      	adds	r3, #1
 8008242:	9304      	str	r3, [sp, #16]
 8008244:	2331      	movs	r3, #49	@ 0x31
 8008246:	f88a 3000 	strb.w	r3, [sl]
 800824a:	e5b9      	b.n	8007dc0 <_dtoa_r+0x698>
 800824c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800824e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80082ac <_dtoa_r+0xb84>
 8008252:	b11b      	cbz	r3, 800825c <_dtoa_r+0xb34>
 8008254:	f10a 0308 	add.w	r3, sl, #8
 8008258:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	4650      	mov	r0, sl
 800825e:	b019      	add	sp, #100	@ 0x64
 8008260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008266:	2b01      	cmp	r3, #1
 8008268:	f77f ae37 	ble.w	8007eda <_dtoa_r+0x7b2>
 800826c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800826e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008270:	2001      	movs	r0, #1
 8008272:	e655      	b.n	8007f20 <_dtoa_r+0x7f8>
 8008274:	9b00      	ldr	r3, [sp, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	f77f aed6 	ble.w	8008028 <_dtoa_r+0x900>
 800827c:	4656      	mov	r6, sl
 800827e:	4621      	mov	r1, r4
 8008280:	4648      	mov	r0, r9
 8008282:	f7ff f9c7 	bl	8007614 <quorem>
 8008286:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800828a:	f806 8b01 	strb.w	r8, [r6], #1
 800828e:	9b00      	ldr	r3, [sp, #0]
 8008290:	eba6 020a 	sub.w	r2, r6, sl
 8008294:	4293      	cmp	r3, r2
 8008296:	ddb3      	ble.n	8008200 <_dtoa_r+0xad8>
 8008298:	4649      	mov	r1, r9
 800829a:	2300      	movs	r3, #0
 800829c:	220a      	movs	r2, #10
 800829e:	4658      	mov	r0, fp
 80082a0:	f000 f968 	bl	8008574 <__multadd>
 80082a4:	4681      	mov	r9, r0
 80082a6:	e7ea      	b.n	800827e <_dtoa_r+0xb56>
 80082a8:	080161f5 	.word	0x080161f5
 80082ac:	08016190 	.word	0x08016190

080082b0 <_free_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4605      	mov	r5, r0
 80082b4:	2900      	cmp	r1, #0
 80082b6:	d041      	beq.n	800833c <_free_r+0x8c>
 80082b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082bc:	1f0c      	subs	r4, r1, #4
 80082be:	2b00      	cmp	r3, #0
 80082c0:	bfb8      	it	lt
 80082c2:	18e4      	addlt	r4, r4, r3
 80082c4:	f000 f8e8 	bl	8008498 <__malloc_lock>
 80082c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008340 <_free_r+0x90>)
 80082ca:	6813      	ldr	r3, [r2, #0]
 80082cc:	b933      	cbnz	r3, 80082dc <_free_r+0x2c>
 80082ce:	6063      	str	r3, [r4, #4]
 80082d0:	6014      	str	r4, [r2, #0]
 80082d2:	4628      	mov	r0, r5
 80082d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082d8:	f000 b8e4 	b.w	80084a4 <__malloc_unlock>
 80082dc:	42a3      	cmp	r3, r4
 80082de:	d908      	bls.n	80082f2 <_free_r+0x42>
 80082e0:	6820      	ldr	r0, [r4, #0]
 80082e2:	1821      	adds	r1, r4, r0
 80082e4:	428b      	cmp	r3, r1
 80082e6:	bf01      	itttt	eq
 80082e8:	6819      	ldreq	r1, [r3, #0]
 80082ea:	685b      	ldreq	r3, [r3, #4]
 80082ec:	1809      	addeq	r1, r1, r0
 80082ee:	6021      	streq	r1, [r4, #0]
 80082f0:	e7ed      	b.n	80082ce <_free_r+0x1e>
 80082f2:	461a      	mov	r2, r3
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	b10b      	cbz	r3, 80082fc <_free_r+0x4c>
 80082f8:	42a3      	cmp	r3, r4
 80082fa:	d9fa      	bls.n	80082f2 <_free_r+0x42>
 80082fc:	6811      	ldr	r1, [r2, #0]
 80082fe:	1850      	adds	r0, r2, r1
 8008300:	42a0      	cmp	r0, r4
 8008302:	d10b      	bne.n	800831c <_free_r+0x6c>
 8008304:	6820      	ldr	r0, [r4, #0]
 8008306:	4401      	add	r1, r0
 8008308:	1850      	adds	r0, r2, r1
 800830a:	4283      	cmp	r3, r0
 800830c:	6011      	str	r1, [r2, #0]
 800830e:	d1e0      	bne.n	80082d2 <_free_r+0x22>
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	6053      	str	r3, [r2, #4]
 8008316:	4408      	add	r0, r1
 8008318:	6010      	str	r0, [r2, #0]
 800831a:	e7da      	b.n	80082d2 <_free_r+0x22>
 800831c:	d902      	bls.n	8008324 <_free_r+0x74>
 800831e:	230c      	movs	r3, #12
 8008320:	602b      	str	r3, [r5, #0]
 8008322:	e7d6      	b.n	80082d2 <_free_r+0x22>
 8008324:	6820      	ldr	r0, [r4, #0]
 8008326:	1821      	adds	r1, r4, r0
 8008328:	428b      	cmp	r3, r1
 800832a:	bf04      	itt	eq
 800832c:	6819      	ldreq	r1, [r3, #0]
 800832e:	685b      	ldreq	r3, [r3, #4]
 8008330:	6063      	str	r3, [r4, #4]
 8008332:	bf04      	itt	eq
 8008334:	1809      	addeq	r1, r1, r0
 8008336:	6021      	streq	r1, [r4, #0]
 8008338:	6054      	str	r4, [r2, #4]
 800833a:	e7ca      	b.n	80082d2 <_free_r+0x22>
 800833c:	bd38      	pop	{r3, r4, r5, pc}
 800833e:	bf00      	nop
 8008340:	20000430 	.word	0x20000430

08008344 <malloc>:
 8008344:	4b02      	ldr	r3, [pc, #8]	@ (8008350 <malloc+0xc>)
 8008346:	4601      	mov	r1, r0
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	f000 b825 	b.w	8008398 <_malloc_r>
 800834e:	bf00      	nop
 8008350:	20000028 	.word	0x20000028

08008354 <sbrk_aligned>:
 8008354:	b570      	push	{r4, r5, r6, lr}
 8008356:	4e0f      	ldr	r6, [pc, #60]	@ (8008394 <sbrk_aligned+0x40>)
 8008358:	460c      	mov	r4, r1
 800835a:	6831      	ldr	r1, [r6, #0]
 800835c:	4605      	mov	r5, r0
 800835e:	b911      	cbnz	r1, 8008366 <sbrk_aligned+0x12>
 8008360:	f001 ffe4 	bl	800a32c <_sbrk_r>
 8008364:	6030      	str	r0, [r6, #0]
 8008366:	4621      	mov	r1, r4
 8008368:	4628      	mov	r0, r5
 800836a:	f001 ffdf 	bl	800a32c <_sbrk_r>
 800836e:	1c43      	adds	r3, r0, #1
 8008370:	d103      	bne.n	800837a <sbrk_aligned+0x26>
 8008372:	f04f 34ff 	mov.w	r4, #4294967295
 8008376:	4620      	mov	r0, r4
 8008378:	bd70      	pop	{r4, r5, r6, pc}
 800837a:	1cc4      	adds	r4, r0, #3
 800837c:	f024 0403 	bic.w	r4, r4, #3
 8008380:	42a0      	cmp	r0, r4
 8008382:	d0f8      	beq.n	8008376 <sbrk_aligned+0x22>
 8008384:	1a21      	subs	r1, r4, r0
 8008386:	4628      	mov	r0, r5
 8008388:	f001 ffd0 	bl	800a32c <_sbrk_r>
 800838c:	3001      	adds	r0, #1
 800838e:	d1f2      	bne.n	8008376 <sbrk_aligned+0x22>
 8008390:	e7ef      	b.n	8008372 <sbrk_aligned+0x1e>
 8008392:	bf00      	nop
 8008394:	2000042c 	.word	0x2000042c

08008398 <_malloc_r>:
 8008398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800839c:	1ccd      	adds	r5, r1, #3
 800839e:	f025 0503 	bic.w	r5, r5, #3
 80083a2:	3508      	adds	r5, #8
 80083a4:	2d0c      	cmp	r5, #12
 80083a6:	bf38      	it	cc
 80083a8:	250c      	movcc	r5, #12
 80083aa:	2d00      	cmp	r5, #0
 80083ac:	4606      	mov	r6, r0
 80083ae:	db01      	blt.n	80083b4 <_malloc_r+0x1c>
 80083b0:	42a9      	cmp	r1, r5
 80083b2:	d904      	bls.n	80083be <_malloc_r+0x26>
 80083b4:	230c      	movs	r3, #12
 80083b6:	6033      	str	r3, [r6, #0]
 80083b8:	2000      	movs	r0, #0
 80083ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008494 <_malloc_r+0xfc>
 80083c2:	f000 f869 	bl	8008498 <__malloc_lock>
 80083c6:	f8d8 3000 	ldr.w	r3, [r8]
 80083ca:	461c      	mov	r4, r3
 80083cc:	bb44      	cbnz	r4, 8008420 <_malloc_r+0x88>
 80083ce:	4629      	mov	r1, r5
 80083d0:	4630      	mov	r0, r6
 80083d2:	f7ff ffbf 	bl	8008354 <sbrk_aligned>
 80083d6:	1c43      	adds	r3, r0, #1
 80083d8:	4604      	mov	r4, r0
 80083da:	d158      	bne.n	800848e <_malloc_r+0xf6>
 80083dc:	f8d8 4000 	ldr.w	r4, [r8]
 80083e0:	4627      	mov	r7, r4
 80083e2:	2f00      	cmp	r7, #0
 80083e4:	d143      	bne.n	800846e <_malloc_r+0xd6>
 80083e6:	2c00      	cmp	r4, #0
 80083e8:	d04b      	beq.n	8008482 <_malloc_r+0xea>
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	4639      	mov	r1, r7
 80083ee:	4630      	mov	r0, r6
 80083f0:	eb04 0903 	add.w	r9, r4, r3
 80083f4:	f001 ff9a 	bl	800a32c <_sbrk_r>
 80083f8:	4581      	cmp	r9, r0
 80083fa:	d142      	bne.n	8008482 <_malloc_r+0xea>
 80083fc:	6821      	ldr	r1, [r4, #0]
 80083fe:	1a6d      	subs	r5, r5, r1
 8008400:	4629      	mov	r1, r5
 8008402:	4630      	mov	r0, r6
 8008404:	f7ff ffa6 	bl	8008354 <sbrk_aligned>
 8008408:	3001      	adds	r0, #1
 800840a:	d03a      	beq.n	8008482 <_malloc_r+0xea>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	442b      	add	r3, r5
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	f8d8 3000 	ldr.w	r3, [r8]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	bb62      	cbnz	r2, 8008474 <_malloc_r+0xdc>
 800841a:	f8c8 7000 	str.w	r7, [r8]
 800841e:	e00f      	b.n	8008440 <_malloc_r+0xa8>
 8008420:	6822      	ldr	r2, [r4, #0]
 8008422:	1b52      	subs	r2, r2, r5
 8008424:	d420      	bmi.n	8008468 <_malloc_r+0xd0>
 8008426:	2a0b      	cmp	r2, #11
 8008428:	d917      	bls.n	800845a <_malloc_r+0xc2>
 800842a:	1961      	adds	r1, r4, r5
 800842c:	42a3      	cmp	r3, r4
 800842e:	6025      	str	r5, [r4, #0]
 8008430:	bf18      	it	ne
 8008432:	6059      	strne	r1, [r3, #4]
 8008434:	6863      	ldr	r3, [r4, #4]
 8008436:	bf08      	it	eq
 8008438:	f8c8 1000 	streq.w	r1, [r8]
 800843c:	5162      	str	r2, [r4, r5]
 800843e:	604b      	str	r3, [r1, #4]
 8008440:	4630      	mov	r0, r6
 8008442:	f000 f82f 	bl	80084a4 <__malloc_unlock>
 8008446:	f104 000b 	add.w	r0, r4, #11
 800844a:	1d23      	adds	r3, r4, #4
 800844c:	f020 0007 	bic.w	r0, r0, #7
 8008450:	1ac2      	subs	r2, r0, r3
 8008452:	bf1c      	itt	ne
 8008454:	1a1b      	subne	r3, r3, r0
 8008456:	50a3      	strne	r3, [r4, r2]
 8008458:	e7af      	b.n	80083ba <_malloc_r+0x22>
 800845a:	6862      	ldr	r2, [r4, #4]
 800845c:	42a3      	cmp	r3, r4
 800845e:	bf0c      	ite	eq
 8008460:	f8c8 2000 	streq.w	r2, [r8]
 8008464:	605a      	strne	r2, [r3, #4]
 8008466:	e7eb      	b.n	8008440 <_malloc_r+0xa8>
 8008468:	4623      	mov	r3, r4
 800846a:	6864      	ldr	r4, [r4, #4]
 800846c:	e7ae      	b.n	80083cc <_malloc_r+0x34>
 800846e:	463c      	mov	r4, r7
 8008470:	687f      	ldr	r7, [r7, #4]
 8008472:	e7b6      	b.n	80083e2 <_malloc_r+0x4a>
 8008474:	461a      	mov	r2, r3
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	42a3      	cmp	r3, r4
 800847a:	d1fb      	bne.n	8008474 <_malloc_r+0xdc>
 800847c:	2300      	movs	r3, #0
 800847e:	6053      	str	r3, [r2, #4]
 8008480:	e7de      	b.n	8008440 <_malloc_r+0xa8>
 8008482:	230c      	movs	r3, #12
 8008484:	6033      	str	r3, [r6, #0]
 8008486:	4630      	mov	r0, r6
 8008488:	f000 f80c 	bl	80084a4 <__malloc_unlock>
 800848c:	e794      	b.n	80083b8 <_malloc_r+0x20>
 800848e:	6005      	str	r5, [r0, #0]
 8008490:	e7d6      	b.n	8008440 <_malloc_r+0xa8>
 8008492:	bf00      	nop
 8008494:	20000430 	.word	0x20000430

08008498 <__malloc_lock>:
 8008498:	4801      	ldr	r0, [pc, #4]	@ (80084a0 <__malloc_lock+0x8>)
 800849a:	f7ff b886 	b.w	80075aa <__retarget_lock_acquire_recursive>
 800849e:	bf00      	nop
 80084a0:	20000428 	.word	0x20000428

080084a4 <__malloc_unlock>:
 80084a4:	4801      	ldr	r0, [pc, #4]	@ (80084ac <__malloc_unlock+0x8>)
 80084a6:	f7ff b881 	b.w	80075ac <__retarget_lock_release_recursive>
 80084aa:	bf00      	nop
 80084ac:	20000428 	.word	0x20000428

080084b0 <_Balloc>:
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	69c6      	ldr	r6, [r0, #28]
 80084b4:	4604      	mov	r4, r0
 80084b6:	460d      	mov	r5, r1
 80084b8:	b976      	cbnz	r6, 80084d8 <_Balloc+0x28>
 80084ba:	2010      	movs	r0, #16
 80084bc:	f7ff ff42 	bl	8008344 <malloc>
 80084c0:	4602      	mov	r2, r0
 80084c2:	61e0      	str	r0, [r4, #28]
 80084c4:	b920      	cbnz	r0, 80084d0 <_Balloc+0x20>
 80084c6:	4b18      	ldr	r3, [pc, #96]	@ (8008528 <_Balloc+0x78>)
 80084c8:	4818      	ldr	r0, [pc, #96]	@ (800852c <_Balloc+0x7c>)
 80084ca:	216b      	movs	r1, #107	@ 0x6b
 80084cc:	f7ff f884 	bl	80075d8 <__assert_func>
 80084d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084d4:	6006      	str	r6, [r0, #0]
 80084d6:	60c6      	str	r6, [r0, #12]
 80084d8:	69e6      	ldr	r6, [r4, #28]
 80084da:	68f3      	ldr	r3, [r6, #12]
 80084dc:	b183      	cbz	r3, 8008500 <_Balloc+0x50>
 80084de:	69e3      	ldr	r3, [r4, #28]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084e6:	b9b8      	cbnz	r0, 8008518 <_Balloc+0x68>
 80084e8:	2101      	movs	r1, #1
 80084ea:	fa01 f605 	lsl.w	r6, r1, r5
 80084ee:	1d72      	adds	r2, r6, #5
 80084f0:	0092      	lsls	r2, r2, #2
 80084f2:	4620      	mov	r0, r4
 80084f4:	f001 ff3b 	bl	800a36e <_calloc_r>
 80084f8:	b160      	cbz	r0, 8008514 <_Balloc+0x64>
 80084fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084fe:	e00e      	b.n	800851e <_Balloc+0x6e>
 8008500:	2221      	movs	r2, #33	@ 0x21
 8008502:	2104      	movs	r1, #4
 8008504:	4620      	mov	r0, r4
 8008506:	f001 ff32 	bl	800a36e <_calloc_r>
 800850a:	69e3      	ldr	r3, [r4, #28]
 800850c:	60f0      	str	r0, [r6, #12]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e4      	bne.n	80084de <_Balloc+0x2e>
 8008514:	2000      	movs	r0, #0
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	6802      	ldr	r2, [r0, #0]
 800851a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800851e:	2300      	movs	r3, #0
 8008520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008524:	e7f7      	b.n	8008516 <_Balloc+0x66>
 8008526:	bf00      	nop
 8008528:	080160ac 	.word	0x080160ac
 800852c:	08016206 	.word	0x08016206

08008530 <_Bfree>:
 8008530:	b570      	push	{r4, r5, r6, lr}
 8008532:	69c6      	ldr	r6, [r0, #28]
 8008534:	4605      	mov	r5, r0
 8008536:	460c      	mov	r4, r1
 8008538:	b976      	cbnz	r6, 8008558 <_Bfree+0x28>
 800853a:	2010      	movs	r0, #16
 800853c:	f7ff ff02 	bl	8008344 <malloc>
 8008540:	4602      	mov	r2, r0
 8008542:	61e8      	str	r0, [r5, #28]
 8008544:	b920      	cbnz	r0, 8008550 <_Bfree+0x20>
 8008546:	4b09      	ldr	r3, [pc, #36]	@ (800856c <_Bfree+0x3c>)
 8008548:	4809      	ldr	r0, [pc, #36]	@ (8008570 <_Bfree+0x40>)
 800854a:	218f      	movs	r1, #143	@ 0x8f
 800854c:	f7ff f844 	bl	80075d8 <__assert_func>
 8008550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008554:	6006      	str	r6, [r0, #0]
 8008556:	60c6      	str	r6, [r0, #12]
 8008558:	b13c      	cbz	r4, 800856a <_Bfree+0x3a>
 800855a:	69eb      	ldr	r3, [r5, #28]
 800855c:	6862      	ldr	r2, [r4, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008564:	6021      	str	r1, [r4, #0]
 8008566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800856a:	bd70      	pop	{r4, r5, r6, pc}
 800856c:	080160ac 	.word	0x080160ac
 8008570:	08016206 	.word	0x08016206

08008574 <__multadd>:
 8008574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008578:	690d      	ldr	r5, [r1, #16]
 800857a:	4607      	mov	r7, r0
 800857c:	460c      	mov	r4, r1
 800857e:	461e      	mov	r6, r3
 8008580:	f101 0c14 	add.w	ip, r1, #20
 8008584:	2000      	movs	r0, #0
 8008586:	f8dc 3000 	ldr.w	r3, [ip]
 800858a:	b299      	uxth	r1, r3
 800858c:	fb02 6101 	mla	r1, r2, r1, r6
 8008590:	0c1e      	lsrs	r6, r3, #16
 8008592:	0c0b      	lsrs	r3, r1, #16
 8008594:	fb02 3306 	mla	r3, r2, r6, r3
 8008598:	b289      	uxth	r1, r1
 800859a:	3001      	adds	r0, #1
 800859c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085a0:	4285      	cmp	r5, r0
 80085a2:	f84c 1b04 	str.w	r1, [ip], #4
 80085a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085aa:	dcec      	bgt.n	8008586 <__multadd+0x12>
 80085ac:	b30e      	cbz	r6, 80085f2 <__multadd+0x7e>
 80085ae:	68a3      	ldr	r3, [r4, #8]
 80085b0:	42ab      	cmp	r3, r5
 80085b2:	dc19      	bgt.n	80085e8 <__multadd+0x74>
 80085b4:	6861      	ldr	r1, [r4, #4]
 80085b6:	4638      	mov	r0, r7
 80085b8:	3101      	adds	r1, #1
 80085ba:	f7ff ff79 	bl	80084b0 <_Balloc>
 80085be:	4680      	mov	r8, r0
 80085c0:	b928      	cbnz	r0, 80085ce <__multadd+0x5a>
 80085c2:	4602      	mov	r2, r0
 80085c4:	4b0c      	ldr	r3, [pc, #48]	@ (80085f8 <__multadd+0x84>)
 80085c6:	480d      	ldr	r0, [pc, #52]	@ (80085fc <__multadd+0x88>)
 80085c8:	21ba      	movs	r1, #186	@ 0xba
 80085ca:	f7ff f805 	bl	80075d8 <__assert_func>
 80085ce:	6922      	ldr	r2, [r4, #16]
 80085d0:	3202      	adds	r2, #2
 80085d2:	f104 010c 	add.w	r1, r4, #12
 80085d6:	0092      	lsls	r2, r2, #2
 80085d8:	300c      	adds	r0, #12
 80085da:	f7fe ffe8 	bl	80075ae <memcpy>
 80085de:	4621      	mov	r1, r4
 80085e0:	4638      	mov	r0, r7
 80085e2:	f7ff ffa5 	bl	8008530 <_Bfree>
 80085e6:	4644      	mov	r4, r8
 80085e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085ec:	3501      	adds	r5, #1
 80085ee:	615e      	str	r6, [r3, #20]
 80085f0:	6125      	str	r5, [r4, #16]
 80085f2:	4620      	mov	r0, r4
 80085f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f8:	080161f5 	.word	0x080161f5
 80085fc:	08016206 	.word	0x08016206

08008600 <__s2b>:
 8008600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008604:	460c      	mov	r4, r1
 8008606:	4615      	mov	r5, r2
 8008608:	461f      	mov	r7, r3
 800860a:	2209      	movs	r2, #9
 800860c:	3308      	adds	r3, #8
 800860e:	4606      	mov	r6, r0
 8008610:	fb93 f3f2 	sdiv	r3, r3, r2
 8008614:	2100      	movs	r1, #0
 8008616:	2201      	movs	r2, #1
 8008618:	429a      	cmp	r2, r3
 800861a:	db09      	blt.n	8008630 <__s2b+0x30>
 800861c:	4630      	mov	r0, r6
 800861e:	f7ff ff47 	bl	80084b0 <_Balloc>
 8008622:	b940      	cbnz	r0, 8008636 <__s2b+0x36>
 8008624:	4602      	mov	r2, r0
 8008626:	4b19      	ldr	r3, [pc, #100]	@ (800868c <__s2b+0x8c>)
 8008628:	4819      	ldr	r0, [pc, #100]	@ (8008690 <__s2b+0x90>)
 800862a:	21d3      	movs	r1, #211	@ 0xd3
 800862c:	f7fe ffd4 	bl	80075d8 <__assert_func>
 8008630:	0052      	lsls	r2, r2, #1
 8008632:	3101      	adds	r1, #1
 8008634:	e7f0      	b.n	8008618 <__s2b+0x18>
 8008636:	9b08      	ldr	r3, [sp, #32]
 8008638:	6143      	str	r3, [r0, #20]
 800863a:	2d09      	cmp	r5, #9
 800863c:	f04f 0301 	mov.w	r3, #1
 8008640:	6103      	str	r3, [r0, #16]
 8008642:	dd16      	ble.n	8008672 <__s2b+0x72>
 8008644:	f104 0909 	add.w	r9, r4, #9
 8008648:	46c8      	mov	r8, r9
 800864a:	442c      	add	r4, r5
 800864c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008650:	4601      	mov	r1, r0
 8008652:	3b30      	subs	r3, #48	@ 0x30
 8008654:	220a      	movs	r2, #10
 8008656:	4630      	mov	r0, r6
 8008658:	f7ff ff8c 	bl	8008574 <__multadd>
 800865c:	45a0      	cmp	r8, r4
 800865e:	d1f5      	bne.n	800864c <__s2b+0x4c>
 8008660:	f1a5 0408 	sub.w	r4, r5, #8
 8008664:	444c      	add	r4, r9
 8008666:	1b2d      	subs	r5, r5, r4
 8008668:	1963      	adds	r3, r4, r5
 800866a:	42bb      	cmp	r3, r7
 800866c:	db04      	blt.n	8008678 <__s2b+0x78>
 800866e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008672:	340a      	adds	r4, #10
 8008674:	2509      	movs	r5, #9
 8008676:	e7f6      	b.n	8008666 <__s2b+0x66>
 8008678:	f814 3b01 	ldrb.w	r3, [r4], #1
 800867c:	4601      	mov	r1, r0
 800867e:	3b30      	subs	r3, #48	@ 0x30
 8008680:	220a      	movs	r2, #10
 8008682:	4630      	mov	r0, r6
 8008684:	f7ff ff76 	bl	8008574 <__multadd>
 8008688:	e7ee      	b.n	8008668 <__s2b+0x68>
 800868a:	bf00      	nop
 800868c:	080161f5 	.word	0x080161f5
 8008690:	08016206 	.word	0x08016206

08008694 <__hi0bits>:
 8008694:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008698:	4603      	mov	r3, r0
 800869a:	bf36      	itet	cc
 800869c:	0403      	lslcc	r3, r0, #16
 800869e:	2000      	movcs	r0, #0
 80086a0:	2010      	movcc	r0, #16
 80086a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086a6:	bf3c      	itt	cc
 80086a8:	021b      	lslcc	r3, r3, #8
 80086aa:	3008      	addcc	r0, #8
 80086ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086b0:	bf3c      	itt	cc
 80086b2:	011b      	lslcc	r3, r3, #4
 80086b4:	3004      	addcc	r0, #4
 80086b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ba:	bf3c      	itt	cc
 80086bc:	009b      	lslcc	r3, r3, #2
 80086be:	3002      	addcc	r0, #2
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	db05      	blt.n	80086d0 <__hi0bits+0x3c>
 80086c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086c8:	f100 0001 	add.w	r0, r0, #1
 80086cc:	bf08      	it	eq
 80086ce:	2020      	moveq	r0, #32
 80086d0:	4770      	bx	lr

080086d2 <__lo0bits>:
 80086d2:	6803      	ldr	r3, [r0, #0]
 80086d4:	4602      	mov	r2, r0
 80086d6:	f013 0007 	ands.w	r0, r3, #7
 80086da:	d00b      	beq.n	80086f4 <__lo0bits+0x22>
 80086dc:	07d9      	lsls	r1, r3, #31
 80086de:	d421      	bmi.n	8008724 <__lo0bits+0x52>
 80086e0:	0798      	lsls	r0, r3, #30
 80086e2:	bf49      	itett	mi
 80086e4:	085b      	lsrmi	r3, r3, #1
 80086e6:	089b      	lsrpl	r3, r3, #2
 80086e8:	2001      	movmi	r0, #1
 80086ea:	6013      	strmi	r3, [r2, #0]
 80086ec:	bf5c      	itt	pl
 80086ee:	6013      	strpl	r3, [r2, #0]
 80086f0:	2002      	movpl	r0, #2
 80086f2:	4770      	bx	lr
 80086f4:	b299      	uxth	r1, r3
 80086f6:	b909      	cbnz	r1, 80086fc <__lo0bits+0x2a>
 80086f8:	0c1b      	lsrs	r3, r3, #16
 80086fa:	2010      	movs	r0, #16
 80086fc:	b2d9      	uxtb	r1, r3
 80086fe:	b909      	cbnz	r1, 8008704 <__lo0bits+0x32>
 8008700:	3008      	adds	r0, #8
 8008702:	0a1b      	lsrs	r3, r3, #8
 8008704:	0719      	lsls	r1, r3, #28
 8008706:	bf04      	itt	eq
 8008708:	091b      	lsreq	r3, r3, #4
 800870a:	3004      	addeq	r0, #4
 800870c:	0799      	lsls	r1, r3, #30
 800870e:	bf04      	itt	eq
 8008710:	089b      	lsreq	r3, r3, #2
 8008712:	3002      	addeq	r0, #2
 8008714:	07d9      	lsls	r1, r3, #31
 8008716:	d403      	bmi.n	8008720 <__lo0bits+0x4e>
 8008718:	085b      	lsrs	r3, r3, #1
 800871a:	f100 0001 	add.w	r0, r0, #1
 800871e:	d003      	beq.n	8008728 <__lo0bits+0x56>
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	4770      	bx	lr
 8008724:	2000      	movs	r0, #0
 8008726:	4770      	bx	lr
 8008728:	2020      	movs	r0, #32
 800872a:	4770      	bx	lr

0800872c <__i2b>:
 800872c:	b510      	push	{r4, lr}
 800872e:	460c      	mov	r4, r1
 8008730:	2101      	movs	r1, #1
 8008732:	f7ff febd 	bl	80084b0 <_Balloc>
 8008736:	4602      	mov	r2, r0
 8008738:	b928      	cbnz	r0, 8008746 <__i2b+0x1a>
 800873a:	4b05      	ldr	r3, [pc, #20]	@ (8008750 <__i2b+0x24>)
 800873c:	4805      	ldr	r0, [pc, #20]	@ (8008754 <__i2b+0x28>)
 800873e:	f240 1145 	movw	r1, #325	@ 0x145
 8008742:	f7fe ff49 	bl	80075d8 <__assert_func>
 8008746:	2301      	movs	r3, #1
 8008748:	6144      	str	r4, [r0, #20]
 800874a:	6103      	str	r3, [r0, #16]
 800874c:	bd10      	pop	{r4, pc}
 800874e:	bf00      	nop
 8008750:	080161f5 	.word	0x080161f5
 8008754:	08016206 	.word	0x08016206

08008758 <__multiply>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	4614      	mov	r4, r2
 800875e:	690a      	ldr	r2, [r1, #16]
 8008760:	6923      	ldr	r3, [r4, #16]
 8008762:	429a      	cmp	r2, r3
 8008764:	bfa8      	it	ge
 8008766:	4623      	movge	r3, r4
 8008768:	460f      	mov	r7, r1
 800876a:	bfa4      	itt	ge
 800876c:	460c      	movge	r4, r1
 800876e:	461f      	movge	r7, r3
 8008770:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008774:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008778:	68a3      	ldr	r3, [r4, #8]
 800877a:	6861      	ldr	r1, [r4, #4]
 800877c:	eb0a 0609 	add.w	r6, sl, r9
 8008780:	42b3      	cmp	r3, r6
 8008782:	b085      	sub	sp, #20
 8008784:	bfb8      	it	lt
 8008786:	3101      	addlt	r1, #1
 8008788:	f7ff fe92 	bl	80084b0 <_Balloc>
 800878c:	b930      	cbnz	r0, 800879c <__multiply+0x44>
 800878e:	4602      	mov	r2, r0
 8008790:	4b44      	ldr	r3, [pc, #272]	@ (80088a4 <__multiply+0x14c>)
 8008792:	4845      	ldr	r0, [pc, #276]	@ (80088a8 <__multiply+0x150>)
 8008794:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008798:	f7fe ff1e 	bl	80075d8 <__assert_func>
 800879c:	f100 0514 	add.w	r5, r0, #20
 80087a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087a4:	462b      	mov	r3, r5
 80087a6:	2200      	movs	r2, #0
 80087a8:	4543      	cmp	r3, r8
 80087aa:	d321      	bcc.n	80087f0 <__multiply+0x98>
 80087ac:	f107 0114 	add.w	r1, r7, #20
 80087b0:	f104 0214 	add.w	r2, r4, #20
 80087b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80087b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80087bc:	9302      	str	r3, [sp, #8]
 80087be:	1b13      	subs	r3, r2, r4
 80087c0:	3b15      	subs	r3, #21
 80087c2:	f023 0303 	bic.w	r3, r3, #3
 80087c6:	3304      	adds	r3, #4
 80087c8:	f104 0715 	add.w	r7, r4, #21
 80087cc:	42ba      	cmp	r2, r7
 80087ce:	bf38      	it	cc
 80087d0:	2304      	movcc	r3, #4
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	9b02      	ldr	r3, [sp, #8]
 80087d6:	9103      	str	r1, [sp, #12]
 80087d8:	428b      	cmp	r3, r1
 80087da:	d80c      	bhi.n	80087f6 <__multiply+0x9e>
 80087dc:	2e00      	cmp	r6, #0
 80087de:	dd03      	ble.n	80087e8 <__multiply+0x90>
 80087e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d05b      	beq.n	80088a0 <__multiply+0x148>
 80087e8:	6106      	str	r6, [r0, #16]
 80087ea:	b005      	add	sp, #20
 80087ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f0:	f843 2b04 	str.w	r2, [r3], #4
 80087f4:	e7d8      	b.n	80087a8 <__multiply+0x50>
 80087f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80087fa:	f1ba 0f00 	cmp.w	sl, #0
 80087fe:	d024      	beq.n	800884a <__multiply+0xf2>
 8008800:	f104 0e14 	add.w	lr, r4, #20
 8008804:	46a9      	mov	r9, r5
 8008806:	f04f 0c00 	mov.w	ip, #0
 800880a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800880e:	f8d9 3000 	ldr.w	r3, [r9]
 8008812:	fa1f fb87 	uxth.w	fp, r7
 8008816:	b29b      	uxth	r3, r3
 8008818:	fb0a 330b 	mla	r3, sl, fp, r3
 800881c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008820:	f8d9 7000 	ldr.w	r7, [r9]
 8008824:	4463      	add	r3, ip
 8008826:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800882a:	fb0a c70b 	mla	r7, sl, fp, ip
 800882e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008832:	b29b      	uxth	r3, r3
 8008834:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008838:	4572      	cmp	r2, lr
 800883a:	f849 3b04 	str.w	r3, [r9], #4
 800883e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008842:	d8e2      	bhi.n	800880a <__multiply+0xb2>
 8008844:	9b01      	ldr	r3, [sp, #4]
 8008846:	f845 c003 	str.w	ip, [r5, r3]
 800884a:	9b03      	ldr	r3, [sp, #12]
 800884c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008850:	3104      	adds	r1, #4
 8008852:	f1b9 0f00 	cmp.w	r9, #0
 8008856:	d021      	beq.n	800889c <__multiply+0x144>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	f104 0c14 	add.w	ip, r4, #20
 800885e:	46ae      	mov	lr, r5
 8008860:	f04f 0a00 	mov.w	sl, #0
 8008864:	f8bc b000 	ldrh.w	fp, [ip]
 8008868:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800886c:	fb09 770b 	mla	r7, r9, fp, r7
 8008870:	4457      	add	r7, sl
 8008872:	b29b      	uxth	r3, r3
 8008874:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008878:	f84e 3b04 	str.w	r3, [lr], #4
 800887c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008880:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008884:	f8be 3000 	ldrh.w	r3, [lr]
 8008888:	fb09 330a 	mla	r3, r9, sl, r3
 800888c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008890:	4562      	cmp	r2, ip
 8008892:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008896:	d8e5      	bhi.n	8008864 <__multiply+0x10c>
 8008898:	9f01      	ldr	r7, [sp, #4]
 800889a:	51eb      	str	r3, [r5, r7]
 800889c:	3504      	adds	r5, #4
 800889e:	e799      	b.n	80087d4 <__multiply+0x7c>
 80088a0:	3e01      	subs	r6, #1
 80088a2:	e79b      	b.n	80087dc <__multiply+0x84>
 80088a4:	080161f5 	.word	0x080161f5
 80088a8:	08016206 	.word	0x08016206

080088ac <__pow5mult>:
 80088ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b0:	4615      	mov	r5, r2
 80088b2:	f012 0203 	ands.w	r2, r2, #3
 80088b6:	4607      	mov	r7, r0
 80088b8:	460e      	mov	r6, r1
 80088ba:	d007      	beq.n	80088cc <__pow5mult+0x20>
 80088bc:	4c25      	ldr	r4, [pc, #148]	@ (8008954 <__pow5mult+0xa8>)
 80088be:	3a01      	subs	r2, #1
 80088c0:	2300      	movs	r3, #0
 80088c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088c6:	f7ff fe55 	bl	8008574 <__multadd>
 80088ca:	4606      	mov	r6, r0
 80088cc:	10ad      	asrs	r5, r5, #2
 80088ce:	d03d      	beq.n	800894c <__pow5mult+0xa0>
 80088d0:	69fc      	ldr	r4, [r7, #28]
 80088d2:	b97c      	cbnz	r4, 80088f4 <__pow5mult+0x48>
 80088d4:	2010      	movs	r0, #16
 80088d6:	f7ff fd35 	bl	8008344 <malloc>
 80088da:	4602      	mov	r2, r0
 80088dc:	61f8      	str	r0, [r7, #28]
 80088de:	b928      	cbnz	r0, 80088ec <__pow5mult+0x40>
 80088e0:	4b1d      	ldr	r3, [pc, #116]	@ (8008958 <__pow5mult+0xac>)
 80088e2:	481e      	ldr	r0, [pc, #120]	@ (800895c <__pow5mult+0xb0>)
 80088e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80088e8:	f7fe fe76 	bl	80075d8 <__assert_func>
 80088ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088f0:	6004      	str	r4, [r0, #0]
 80088f2:	60c4      	str	r4, [r0, #12]
 80088f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80088f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088fc:	b94c      	cbnz	r4, 8008912 <__pow5mult+0x66>
 80088fe:	f240 2171 	movw	r1, #625	@ 0x271
 8008902:	4638      	mov	r0, r7
 8008904:	f7ff ff12 	bl	800872c <__i2b>
 8008908:	2300      	movs	r3, #0
 800890a:	f8c8 0008 	str.w	r0, [r8, #8]
 800890e:	4604      	mov	r4, r0
 8008910:	6003      	str	r3, [r0, #0]
 8008912:	f04f 0900 	mov.w	r9, #0
 8008916:	07eb      	lsls	r3, r5, #31
 8008918:	d50a      	bpl.n	8008930 <__pow5mult+0x84>
 800891a:	4631      	mov	r1, r6
 800891c:	4622      	mov	r2, r4
 800891e:	4638      	mov	r0, r7
 8008920:	f7ff ff1a 	bl	8008758 <__multiply>
 8008924:	4631      	mov	r1, r6
 8008926:	4680      	mov	r8, r0
 8008928:	4638      	mov	r0, r7
 800892a:	f7ff fe01 	bl	8008530 <_Bfree>
 800892e:	4646      	mov	r6, r8
 8008930:	106d      	asrs	r5, r5, #1
 8008932:	d00b      	beq.n	800894c <__pow5mult+0xa0>
 8008934:	6820      	ldr	r0, [r4, #0]
 8008936:	b938      	cbnz	r0, 8008948 <__pow5mult+0x9c>
 8008938:	4622      	mov	r2, r4
 800893a:	4621      	mov	r1, r4
 800893c:	4638      	mov	r0, r7
 800893e:	f7ff ff0b 	bl	8008758 <__multiply>
 8008942:	6020      	str	r0, [r4, #0]
 8008944:	f8c0 9000 	str.w	r9, [r0]
 8008948:	4604      	mov	r4, r0
 800894a:	e7e4      	b.n	8008916 <__pow5mult+0x6a>
 800894c:	4630      	mov	r0, r6
 800894e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008952:	bf00      	nop
 8008954:	08016260 	.word	0x08016260
 8008958:	080160ac 	.word	0x080160ac
 800895c:	08016206 	.word	0x08016206

08008960 <__lshift>:
 8008960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008964:	460c      	mov	r4, r1
 8008966:	6849      	ldr	r1, [r1, #4]
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800896e:	68a3      	ldr	r3, [r4, #8]
 8008970:	4607      	mov	r7, r0
 8008972:	4691      	mov	r9, r2
 8008974:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008978:	f108 0601 	add.w	r6, r8, #1
 800897c:	42b3      	cmp	r3, r6
 800897e:	db0b      	blt.n	8008998 <__lshift+0x38>
 8008980:	4638      	mov	r0, r7
 8008982:	f7ff fd95 	bl	80084b0 <_Balloc>
 8008986:	4605      	mov	r5, r0
 8008988:	b948      	cbnz	r0, 800899e <__lshift+0x3e>
 800898a:	4602      	mov	r2, r0
 800898c:	4b28      	ldr	r3, [pc, #160]	@ (8008a30 <__lshift+0xd0>)
 800898e:	4829      	ldr	r0, [pc, #164]	@ (8008a34 <__lshift+0xd4>)
 8008990:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008994:	f7fe fe20 	bl	80075d8 <__assert_func>
 8008998:	3101      	adds	r1, #1
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	e7ee      	b.n	800897c <__lshift+0x1c>
 800899e:	2300      	movs	r3, #0
 80089a0:	f100 0114 	add.w	r1, r0, #20
 80089a4:	f100 0210 	add.w	r2, r0, #16
 80089a8:	4618      	mov	r0, r3
 80089aa:	4553      	cmp	r3, sl
 80089ac:	db33      	blt.n	8008a16 <__lshift+0xb6>
 80089ae:	6920      	ldr	r0, [r4, #16]
 80089b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089b4:	f104 0314 	add.w	r3, r4, #20
 80089b8:	f019 091f 	ands.w	r9, r9, #31
 80089bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089c4:	d02b      	beq.n	8008a1e <__lshift+0xbe>
 80089c6:	f1c9 0e20 	rsb	lr, r9, #32
 80089ca:	468a      	mov	sl, r1
 80089cc:	2200      	movs	r2, #0
 80089ce:	6818      	ldr	r0, [r3, #0]
 80089d0:	fa00 f009 	lsl.w	r0, r0, r9
 80089d4:	4310      	orrs	r0, r2
 80089d6:	f84a 0b04 	str.w	r0, [sl], #4
 80089da:	f853 2b04 	ldr.w	r2, [r3], #4
 80089de:	459c      	cmp	ip, r3
 80089e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80089e4:	d8f3      	bhi.n	80089ce <__lshift+0x6e>
 80089e6:	ebac 0304 	sub.w	r3, ip, r4
 80089ea:	3b15      	subs	r3, #21
 80089ec:	f023 0303 	bic.w	r3, r3, #3
 80089f0:	3304      	adds	r3, #4
 80089f2:	f104 0015 	add.w	r0, r4, #21
 80089f6:	4584      	cmp	ip, r0
 80089f8:	bf38      	it	cc
 80089fa:	2304      	movcc	r3, #4
 80089fc:	50ca      	str	r2, [r1, r3]
 80089fe:	b10a      	cbz	r2, 8008a04 <__lshift+0xa4>
 8008a00:	f108 0602 	add.w	r6, r8, #2
 8008a04:	3e01      	subs	r6, #1
 8008a06:	4638      	mov	r0, r7
 8008a08:	612e      	str	r6, [r5, #16]
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	f7ff fd90 	bl	8008530 <_Bfree>
 8008a10:	4628      	mov	r0, r5
 8008a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a16:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	e7c5      	b.n	80089aa <__lshift+0x4a>
 8008a1e:	3904      	subs	r1, #4
 8008a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a24:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a28:	459c      	cmp	ip, r3
 8008a2a:	d8f9      	bhi.n	8008a20 <__lshift+0xc0>
 8008a2c:	e7ea      	b.n	8008a04 <__lshift+0xa4>
 8008a2e:	bf00      	nop
 8008a30:	080161f5 	.word	0x080161f5
 8008a34:	08016206 	.word	0x08016206

08008a38 <__mcmp>:
 8008a38:	690a      	ldr	r2, [r1, #16]
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	6900      	ldr	r0, [r0, #16]
 8008a3e:	1a80      	subs	r0, r0, r2
 8008a40:	b530      	push	{r4, r5, lr}
 8008a42:	d10e      	bne.n	8008a62 <__mcmp+0x2a>
 8008a44:	3314      	adds	r3, #20
 8008a46:	3114      	adds	r1, #20
 8008a48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a58:	4295      	cmp	r5, r2
 8008a5a:	d003      	beq.n	8008a64 <__mcmp+0x2c>
 8008a5c:	d205      	bcs.n	8008a6a <__mcmp+0x32>
 8008a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a62:	bd30      	pop	{r4, r5, pc}
 8008a64:	42a3      	cmp	r3, r4
 8008a66:	d3f3      	bcc.n	8008a50 <__mcmp+0x18>
 8008a68:	e7fb      	b.n	8008a62 <__mcmp+0x2a>
 8008a6a:	2001      	movs	r0, #1
 8008a6c:	e7f9      	b.n	8008a62 <__mcmp+0x2a>
	...

08008a70 <__mdiff>:
 8008a70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	4689      	mov	r9, r1
 8008a76:	4606      	mov	r6, r0
 8008a78:	4611      	mov	r1, r2
 8008a7a:	4648      	mov	r0, r9
 8008a7c:	4614      	mov	r4, r2
 8008a7e:	f7ff ffdb 	bl	8008a38 <__mcmp>
 8008a82:	1e05      	subs	r5, r0, #0
 8008a84:	d112      	bne.n	8008aac <__mdiff+0x3c>
 8008a86:	4629      	mov	r1, r5
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f7ff fd11 	bl	80084b0 <_Balloc>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	b928      	cbnz	r0, 8008a9e <__mdiff+0x2e>
 8008a92:	4b3f      	ldr	r3, [pc, #252]	@ (8008b90 <__mdiff+0x120>)
 8008a94:	f240 2137 	movw	r1, #567	@ 0x237
 8008a98:	483e      	ldr	r0, [pc, #248]	@ (8008b94 <__mdiff+0x124>)
 8008a9a:	f7fe fd9d 	bl	80075d8 <__assert_func>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	b003      	add	sp, #12
 8008aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aac:	bfbc      	itt	lt
 8008aae:	464b      	movlt	r3, r9
 8008ab0:	46a1      	movlt	r9, r4
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ab8:	bfba      	itte	lt
 8008aba:	461c      	movlt	r4, r3
 8008abc:	2501      	movlt	r5, #1
 8008abe:	2500      	movge	r5, #0
 8008ac0:	f7ff fcf6 	bl	80084b0 <_Balloc>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	b918      	cbnz	r0, 8008ad0 <__mdiff+0x60>
 8008ac8:	4b31      	ldr	r3, [pc, #196]	@ (8008b90 <__mdiff+0x120>)
 8008aca:	f240 2145 	movw	r1, #581	@ 0x245
 8008ace:	e7e3      	b.n	8008a98 <__mdiff+0x28>
 8008ad0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ad4:	6926      	ldr	r6, [r4, #16]
 8008ad6:	60c5      	str	r5, [r0, #12]
 8008ad8:	f109 0310 	add.w	r3, r9, #16
 8008adc:	f109 0514 	add.w	r5, r9, #20
 8008ae0:	f104 0e14 	add.w	lr, r4, #20
 8008ae4:	f100 0b14 	add.w	fp, r0, #20
 8008ae8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008aec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008af0:	9301      	str	r3, [sp, #4]
 8008af2:	46d9      	mov	r9, fp
 8008af4:	f04f 0c00 	mov.w	ip, #0
 8008af8:	9b01      	ldr	r3, [sp, #4]
 8008afa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008afe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	fa1f f38a 	uxth.w	r3, sl
 8008b08:	4619      	mov	r1, r3
 8008b0a:	b283      	uxth	r3, r0
 8008b0c:	1acb      	subs	r3, r1, r3
 8008b0e:	0c00      	lsrs	r0, r0, #16
 8008b10:	4463      	add	r3, ip
 8008b12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b20:	4576      	cmp	r6, lr
 8008b22:	f849 3b04 	str.w	r3, [r9], #4
 8008b26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b2a:	d8e5      	bhi.n	8008af8 <__mdiff+0x88>
 8008b2c:	1b33      	subs	r3, r6, r4
 8008b2e:	3b15      	subs	r3, #21
 8008b30:	f023 0303 	bic.w	r3, r3, #3
 8008b34:	3415      	adds	r4, #21
 8008b36:	3304      	adds	r3, #4
 8008b38:	42a6      	cmp	r6, r4
 8008b3a:	bf38      	it	cc
 8008b3c:	2304      	movcc	r3, #4
 8008b3e:	441d      	add	r5, r3
 8008b40:	445b      	add	r3, fp
 8008b42:	461e      	mov	r6, r3
 8008b44:	462c      	mov	r4, r5
 8008b46:	4544      	cmp	r4, r8
 8008b48:	d30e      	bcc.n	8008b68 <__mdiff+0xf8>
 8008b4a:	f108 0103 	add.w	r1, r8, #3
 8008b4e:	1b49      	subs	r1, r1, r5
 8008b50:	f021 0103 	bic.w	r1, r1, #3
 8008b54:	3d03      	subs	r5, #3
 8008b56:	45a8      	cmp	r8, r5
 8008b58:	bf38      	it	cc
 8008b5a:	2100      	movcc	r1, #0
 8008b5c:	440b      	add	r3, r1
 8008b5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b62:	b191      	cbz	r1, 8008b8a <__mdiff+0x11a>
 8008b64:	6117      	str	r7, [r2, #16]
 8008b66:	e79d      	b.n	8008aa4 <__mdiff+0x34>
 8008b68:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b6c:	46e6      	mov	lr, ip
 8008b6e:	0c08      	lsrs	r0, r1, #16
 8008b70:	fa1c fc81 	uxtah	ip, ip, r1
 8008b74:	4471      	add	r1, lr
 8008b76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b7a:	b289      	uxth	r1, r1
 8008b7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b80:	f846 1b04 	str.w	r1, [r6], #4
 8008b84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b88:	e7dd      	b.n	8008b46 <__mdiff+0xd6>
 8008b8a:	3f01      	subs	r7, #1
 8008b8c:	e7e7      	b.n	8008b5e <__mdiff+0xee>
 8008b8e:	bf00      	nop
 8008b90:	080161f5 	.word	0x080161f5
 8008b94:	08016206 	.word	0x08016206

08008b98 <__ulp>:
 8008b98:	b082      	sub	sp, #8
 8008b9a:	ed8d 0b00 	vstr	d0, [sp]
 8008b9e:	9a01      	ldr	r2, [sp, #4]
 8008ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8008be0 <__ulp+0x48>)
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	dc08      	bgt.n	8008bbe <__ulp+0x26>
 8008bac:	425b      	negs	r3, r3
 8008bae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008bb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008bb6:	da04      	bge.n	8008bc2 <__ulp+0x2a>
 8008bb8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008bbc:	4113      	asrs	r3, r2
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	e008      	b.n	8008bd4 <__ulp+0x3c>
 8008bc2:	f1a2 0314 	sub.w	r3, r2, #20
 8008bc6:	2b1e      	cmp	r3, #30
 8008bc8:	bfda      	itte	le
 8008bca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008bce:	40da      	lsrle	r2, r3
 8008bd0:	2201      	movgt	r2, #1
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	ec41 0b10 	vmov	d0, r0, r1
 8008bdc:	b002      	add	sp, #8
 8008bde:	4770      	bx	lr
 8008be0:	7ff00000 	.word	0x7ff00000

08008be4 <__b2d>:
 8008be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be8:	6906      	ldr	r6, [r0, #16]
 8008bea:	f100 0814 	add.w	r8, r0, #20
 8008bee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008bf2:	1f37      	subs	r7, r6, #4
 8008bf4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	f7ff fd4b 	bl	8008694 <__hi0bits>
 8008bfe:	f1c0 0320 	rsb	r3, r0, #32
 8008c02:	280a      	cmp	r0, #10
 8008c04:	600b      	str	r3, [r1, #0]
 8008c06:	491b      	ldr	r1, [pc, #108]	@ (8008c74 <__b2d+0x90>)
 8008c08:	dc15      	bgt.n	8008c36 <__b2d+0x52>
 8008c0a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008c0e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008c12:	45b8      	cmp	r8, r7
 8008c14:	ea43 0501 	orr.w	r5, r3, r1
 8008c18:	bf34      	ite	cc
 8008c1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c1e:	2300      	movcs	r3, #0
 8008c20:	3015      	adds	r0, #21
 8008c22:	fa02 f000 	lsl.w	r0, r2, r0
 8008c26:	fa23 f30c 	lsr.w	r3, r3, ip
 8008c2a:	4303      	orrs	r3, r0
 8008c2c:	461c      	mov	r4, r3
 8008c2e:	ec45 4b10 	vmov	d0, r4, r5
 8008c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c36:	45b8      	cmp	r8, r7
 8008c38:	bf3a      	itte	cc
 8008c3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c3e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008c42:	2300      	movcs	r3, #0
 8008c44:	380b      	subs	r0, #11
 8008c46:	d012      	beq.n	8008c6e <__b2d+0x8a>
 8008c48:	f1c0 0120 	rsb	r1, r0, #32
 8008c4c:	fa23 f401 	lsr.w	r4, r3, r1
 8008c50:	4082      	lsls	r2, r0
 8008c52:	4322      	orrs	r2, r4
 8008c54:	4547      	cmp	r7, r8
 8008c56:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008c5a:	bf8c      	ite	hi
 8008c5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008c60:	2200      	movls	r2, #0
 8008c62:	4083      	lsls	r3, r0
 8008c64:	40ca      	lsrs	r2, r1
 8008c66:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	e7de      	b.n	8008c2c <__b2d+0x48>
 8008c6e:	ea42 0501 	orr.w	r5, r2, r1
 8008c72:	e7db      	b.n	8008c2c <__b2d+0x48>
 8008c74:	3ff00000 	.word	0x3ff00000

08008c78 <__d2b>:
 8008c78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c7c:	460f      	mov	r7, r1
 8008c7e:	2101      	movs	r1, #1
 8008c80:	ec59 8b10 	vmov	r8, r9, d0
 8008c84:	4616      	mov	r6, r2
 8008c86:	f7ff fc13 	bl	80084b0 <_Balloc>
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	b930      	cbnz	r0, 8008c9c <__d2b+0x24>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	4b23      	ldr	r3, [pc, #140]	@ (8008d20 <__d2b+0xa8>)
 8008c92:	4824      	ldr	r0, [pc, #144]	@ (8008d24 <__d2b+0xac>)
 8008c94:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c98:	f7fe fc9e 	bl	80075d8 <__assert_func>
 8008c9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ca0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ca4:	b10d      	cbz	r5, 8008caa <__d2b+0x32>
 8008ca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008caa:	9301      	str	r3, [sp, #4]
 8008cac:	f1b8 0300 	subs.w	r3, r8, #0
 8008cb0:	d023      	beq.n	8008cfa <__d2b+0x82>
 8008cb2:	4668      	mov	r0, sp
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	f7ff fd0c 	bl	80086d2 <__lo0bits>
 8008cba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008cbe:	b1d0      	cbz	r0, 8008cf6 <__d2b+0x7e>
 8008cc0:	f1c0 0320 	rsb	r3, r0, #32
 8008cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc8:	430b      	orrs	r3, r1
 8008cca:	40c2      	lsrs	r2, r0
 8008ccc:	6163      	str	r3, [r4, #20]
 8008cce:	9201      	str	r2, [sp, #4]
 8008cd0:	9b01      	ldr	r3, [sp, #4]
 8008cd2:	61a3      	str	r3, [r4, #24]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	bf0c      	ite	eq
 8008cd8:	2201      	moveq	r2, #1
 8008cda:	2202      	movne	r2, #2
 8008cdc:	6122      	str	r2, [r4, #16]
 8008cde:	b1a5      	cbz	r5, 8008d0a <__d2b+0x92>
 8008ce0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ce4:	4405      	add	r5, r0
 8008ce6:	603d      	str	r5, [r7, #0]
 8008ce8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008cec:	6030      	str	r0, [r6, #0]
 8008cee:	4620      	mov	r0, r4
 8008cf0:	b003      	add	sp, #12
 8008cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cf6:	6161      	str	r1, [r4, #20]
 8008cf8:	e7ea      	b.n	8008cd0 <__d2b+0x58>
 8008cfa:	a801      	add	r0, sp, #4
 8008cfc:	f7ff fce9 	bl	80086d2 <__lo0bits>
 8008d00:	9b01      	ldr	r3, [sp, #4]
 8008d02:	6163      	str	r3, [r4, #20]
 8008d04:	3020      	adds	r0, #32
 8008d06:	2201      	movs	r2, #1
 8008d08:	e7e8      	b.n	8008cdc <__d2b+0x64>
 8008d0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008d12:	6038      	str	r0, [r7, #0]
 8008d14:	6918      	ldr	r0, [r3, #16]
 8008d16:	f7ff fcbd 	bl	8008694 <__hi0bits>
 8008d1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d1e:	e7e5      	b.n	8008cec <__d2b+0x74>
 8008d20:	080161f5 	.word	0x080161f5
 8008d24:	08016206 	.word	0x08016206

08008d28 <__ratio>:
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	b085      	sub	sp, #20
 8008d2e:	e9cd 1000 	strd	r1, r0, [sp]
 8008d32:	a902      	add	r1, sp, #8
 8008d34:	f7ff ff56 	bl	8008be4 <__b2d>
 8008d38:	9800      	ldr	r0, [sp, #0]
 8008d3a:	a903      	add	r1, sp, #12
 8008d3c:	ec55 4b10 	vmov	r4, r5, d0
 8008d40:	f7ff ff50 	bl	8008be4 <__b2d>
 8008d44:	9b01      	ldr	r3, [sp, #4]
 8008d46:	6919      	ldr	r1, [r3, #16]
 8008d48:	9b00      	ldr	r3, [sp, #0]
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	1ac9      	subs	r1, r1, r3
 8008d4e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008d52:	1a9b      	subs	r3, r3, r2
 8008d54:	ec5b ab10 	vmov	sl, fp, d0
 8008d58:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	bfce      	itee	gt
 8008d60:	462a      	movgt	r2, r5
 8008d62:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d66:	465a      	movle	r2, fp
 8008d68:	462f      	mov	r7, r5
 8008d6a:	46d9      	mov	r9, fp
 8008d6c:	bfcc      	ite	gt
 8008d6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d72:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008d76:	464b      	mov	r3, r9
 8008d78:	4652      	mov	r2, sl
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	4639      	mov	r1, r7
 8008d7e:	f7f7 fd65 	bl	800084c <__aeabi_ddiv>
 8008d82:	ec41 0b10 	vmov	d0, r0, r1
 8008d86:	b005      	add	sp, #20
 8008d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d8c <__copybits>:
 8008d8c:	3901      	subs	r1, #1
 8008d8e:	b570      	push	{r4, r5, r6, lr}
 8008d90:	1149      	asrs	r1, r1, #5
 8008d92:	6914      	ldr	r4, [r2, #16]
 8008d94:	3101      	adds	r1, #1
 8008d96:	f102 0314 	add.w	r3, r2, #20
 8008d9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008da2:	1f05      	subs	r5, r0, #4
 8008da4:	42a3      	cmp	r3, r4
 8008da6:	d30c      	bcc.n	8008dc2 <__copybits+0x36>
 8008da8:	1aa3      	subs	r3, r4, r2
 8008daa:	3b11      	subs	r3, #17
 8008dac:	f023 0303 	bic.w	r3, r3, #3
 8008db0:	3211      	adds	r2, #17
 8008db2:	42a2      	cmp	r2, r4
 8008db4:	bf88      	it	hi
 8008db6:	2300      	movhi	r3, #0
 8008db8:	4418      	add	r0, r3
 8008dba:	2300      	movs	r3, #0
 8008dbc:	4288      	cmp	r0, r1
 8008dbe:	d305      	bcc.n	8008dcc <__copybits+0x40>
 8008dc0:	bd70      	pop	{r4, r5, r6, pc}
 8008dc2:	f853 6b04 	ldr.w	r6, [r3], #4
 8008dc6:	f845 6f04 	str.w	r6, [r5, #4]!
 8008dca:	e7eb      	b.n	8008da4 <__copybits+0x18>
 8008dcc:	f840 3b04 	str.w	r3, [r0], #4
 8008dd0:	e7f4      	b.n	8008dbc <__copybits+0x30>

08008dd2 <__any_on>:
 8008dd2:	f100 0214 	add.w	r2, r0, #20
 8008dd6:	6900      	ldr	r0, [r0, #16]
 8008dd8:	114b      	asrs	r3, r1, #5
 8008dda:	4298      	cmp	r0, r3
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	db11      	blt.n	8008e04 <__any_on+0x32>
 8008de0:	dd0a      	ble.n	8008df8 <__any_on+0x26>
 8008de2:	f011 011f 	ands.w	r1, r1, #31
 8008de6:	d007      	beq.n	8008df8 <__any_on+0x26>
 8008de8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008dec:	fa24 f001 	lsr.w	r0, r4, r1
 8008df0:	fa00 f101 	lsl.w	r1, r0, r1
 8008df4:	428c      	cmp	r4, r1
 8008df6:	d10b      	bne.n	8008e10 <__any_on+0x3e>
 8008df8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d803      	bhi.n	8008e08 <__any_on+0x36>
 8008e00:	2000      	movs	r0, #0
 8008e02:	bd10      	pop	{r4, pc}
 8008e04:	4603      	mov	r3, r0
 8008e06:	e7f7      	b.n	8008df8 <__any_on+0x26>
 8008e08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e0c:	2900      	cmp	r1, #0
 8008e0e:	d0f5      	beq.n	8008dfc <__any_on+0x2a>
 8008e10:	2001      	movs	r0, #1
 8008e12:	e7f6      	b.n	8008e02 <__any_on+0x30>

08008e14 <sulp>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	4604      	mov	r4, r0
 8008e18:	460d      	mov	r5, r1
 8008e1a:	ec45 4b10 	vmov	d0, r4, r5
 8008e1e:	4616      	mov	r6, r2
 8008e20:	f7ff feba 	bl	8008b98 <__ulp>
 8008e24:	ec51 0b10 	vmov	r0, r1, d0
 8008e28:	b17e      	cbz	r6, 8008e4a <sulp+0x36>
 8008e2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e2e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	dd09      	ble.n	8008e4a <sulp+0x36>
 8008e36:	051b      	lsls	r3, r3, #20
 8008e38:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008e3c:	2400      	movs	r4, #0
 8008e3e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008e42:	4622      	mov	r2, r4
 8008e44:	462b      	mov	r3, r5
 8008e46:	f7f7 fbd7 	bl	80005f8 <__aeabi_dmul>
 8008e4a:	ec41 0b10 	vmov	d0, r0, r1
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}

08008e50 <_strtod_l>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	b09f      	sub	sp, #124	@ 0x7c
 8008e56:	460c      	mov	r4, r1
 8008e58:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008e5e:	9005      	str	r0, [sp, #20]
 8008e60:	f04f 0a00 	mov.w	sl, #0
 8008e64:	f04f 0b00 	mov.w	fp, #0
 8008e68:	460a      	mov	r2, r1
 8008e6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e6c:	7811      	ldrb	r1, [r2, #0]
 8008e6e:	292b      	cmp	r1, #43	@ 0x2b
 8008e70:	d04a      	beq.n	8008f08 <_strtod_l+0xb8>
 8008e72:	d838      	bhi.n	8008ee6 <_strtod_l+0x96>
 8008e74:	290d      	cmp	r1, #13
 8008e76:	d832      	bhi.n	8008ede <_strtod_l+0x8e>
 8008e78:	2908      	cmp	r1, #8
 8008e7a:	d832      	bhi.n	8008ee2 <_strtod_l+0x92>
 8008e7c:	2900      	cmp	r1, #0
 8008e7e:	d03b      	beq.n	8008ef8 <_strtod_l+0xa8>
 8008e80:	2200      	movs	r2, #0
 8008e82:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008e84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008e86:	782a      	ldrb	r2, [r5, #0]
 8008e88:	2a30      	cmp	r2, #48	@ 0x30
 8008e8a:	f040 80b3 	bne.w	8008ff4 <_strtod_l+0x1a4>
 8008e8e:	786a      	ldrb	r2, [r5, #1]
 8008e90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008e94:	2a58      	cmp	r2, #88	@ 0x58
 8008e96:	d16e      	bne.n	8008f76 <_strtod_l+0x126>
 8008e98:	9302      	str	r3, [sp, #8]
 8008e9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	4a8e      	ldr	r2, [pc, #568]	@ (80090dc <_strtod_l+0x28c>)
 8008ea4:	9805      	ldr	r0, [sp, #20]
 8008ea6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008ea8:	a919      	add	r1, sp, #100	@ 0x64
 8008eaa:	f001 fadb 	bl	800a464 <__gethex>
 8008eae:	f010 060f 	ands.w	r6, r0, #15
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	d005      	beq.n	8008ec2 <_strtod_l+0x72>
 8008eb6:	2e06      	cmp	r6, #6
 8008eb8:	d128      	bne.n	8008f0c <_strtod_l+0xbc>
 8008eba:	3501      	adds	r5, #1
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	9519      	str	r5, [sp, #100]	@ 0x64
 8008ec0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ec2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f040 858e 	bne.w	80099e6 <_strtod_l+0xb96>
 8008eca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ecc:	b1cb      	cbz	r3, 8008f02 <_strtod_l+0xb2>
 8008ece:	4652      	mov	r2, sl
 8008ed0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008ed4:	ec43 2b10 	vmov	d0, r2, r3
 8008ed8:	b01f      	add	sp, #124	@ 0x7c
 8008eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ede:	2920      	cmp	r1, #32
 8008ee0:	d1ce      	bne.n	8008e80 <_strtod_l+0x30>
 8008ee2:	3201      	adds	r2, #1
 8008ee4:	e7c1      	b.n	8008e6a <_strtod_l+0x1a>
 8008ee6:	292d      	cmp	r1, #45	@ 0x2d
 8008ee8:	d1ca      	bne.n	8008e80 <_strtod_l+0x30>
 8008eea:	2101      	movs	r1, #1
 8008eec:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008eee:	1c51      	adds	r1, r2, #1
 8008ef0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ef2:	7852      	ldrb	r2, [r2, #1]
 8008ef4:	2a00      	cmp	r2, #0
 8008ef6:	d1c5      	bne.n	8008e84 <_strtod_l+0x34>
 8008ef8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008efa:	9419      	str	r4, [sp, #100]	@ 0x64
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f040 8570 	bne.w	80099e2 <_strtod_l+0xb92>
 8008f02:	4652      	mov	r2, sl
 8008f04:	465b      	mov	r3, fp
 8008f06:	e7e5      	b.n	8008ed4 <_strtod_l+0x84>
 8008f08:	2100      	movs	r1, #0
 8008f0a:	e7ef      	b.n	8008eec <_strtod_l+0x9c>
 8008f0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f0e:	b13a      	cbz	r2, 8008f20 <_strtod_l+0xd0>
 8008f10:	2135      	movs	r1, #53	@ 0x35
 8008f12:	a81c      	add	r0, sp, #112	@ 0x70
 8008f14:	f7ff ff3a 	bl	8008d8c <__copybits>
 8008f18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f1a:	9805      	ldr	r0, [sp, #20]
 8008f1c:	f7ff fb08 	bl	8008530 <_Bfree>
 8008f20:	3e01      	subs	r6, #1
 8008f22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008f24:	2e04      	cmp	r6, #4
 8008f26:	d806      	bhi.n	8008f36 <_strtod_l+0xe6>
 8008f28:	e8df f006 	tbb	[pc, r6]
 8008f2c:	201d0314 	.word	0x201d0314
 8008f30:	14          	.byte	0x14
 8008f31:	00          	.byte	0x00
 8008f32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008f36:	05e1      	lsls	r1, r4, #23
 8008f38:	bf48      	it	mi
 8008f3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008f3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f42:	0d1b      	lsrs	r3, r3, #20
 8008f44:	051b      	lsls	r3, r3, #20
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1bb      	bne.n	8008ec2 <_strtod_l+0x72>
 8008f4a:	f7fe fb03 	bl	8007554 <__errno>
 8008f4e:	2322      	movs	r3, #34	@ 0x22
 8008f50:	6003      	str	r3, [r0, #0]
 8008f52:	e7b6      	b.n	8008ec2 <_strtod_l+0x72>
 8008f54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008f58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008f5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008f60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f64:	e7e7      	b.n	8008f36 <_strtod_l+0xe6>
 8008f66:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80090e4 <_strtod_l+0x294>
 8008f6a:	e7e4      	b.n	8008f36 <_strtod_l+0xe6>
 8008f6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008f70:	f04f 3aff 	mov.w	sl, #4294967295
 8008f74:	e7df      	b.n	8008f36 <_strtod_l+0xe6>
 8008f76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f7c:	785b      	ldrb	r3, [r3, #1]
 8008f7e:	2b30      	cmp	r3, #48	@ 0x30
 8008f80:	d0f9      	beq.n	8008f76 <_strtod_l+0x126>
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d09d      	beq.n	8008ec2 <_strtod_l+0x72>
 8008f86:	2301      	movs	r3, #1
 8008f88:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f8e:	2300      	movs	r3, #0
 8008f90:	9308      	str	r3, [sp, #32]
 8008f92:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f94:	461f      	mov	r7, r3
 8008f96:	220a      	movs	r2, #10
 8008f98:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008f9a:	7805      	ldrb	r5, [r0, #0]
 8008f9c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008fa0:	b2d9      	uxtb	r1, r3
 8008fa2:	2909      	cmp	r1, #9
 8008fa4:	d928      	bls.n	8008ff8 <_strtod_l+0x1a8>
 8008fa6:	494e      	ldr	r1, [pc, #312]	@ (80090e0 <_strtod_l+0x290>)
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f001 f98b 	bl	800a2c4 <strncmp>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d032      	beq.n	8009018 <_strtod_l+0x1c8>
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	462a      	mov	r2, r5
 8008fb6:	4681      	mov	r9, r0
 8008fb8:	463d      	mov	r5, r7
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2a65      	cmp	r2, #101	@ 0x65
 8008fbe:	d001      	beq.n	8008fc4 <_strtod_l+0x174>
 8008fc0:	2a45      	cmp	r2, #69	@ 0x45
 8008fc2:	d114      	bne.n	8008fee <_strtod_l+0x19e>
 8008fc4:	b91d      	cbnz	r5, 8008fce <_strtod_l+0x17e>
 8008fc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fc8:	4302      	orrs	r2, r0
 8008fca:	d095      	beq.n	8008ef8 <_strtod_l+0xa8>
 8008fcc:	2500      	movs	r5, #0
 8008fce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008fd0:	1c62      	adds	r2, r4, #1
 8008fd2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fd4:	7862      	ldrb	r2, [r4, #1]
 8008fd6:	2a2b      	cmp	r2, #43	@ 0x2b
 8008fd8:	d077      	beq.n	80090ca <_strtod_l+0x27a>
 8008fda:	2a2d      	cmp	r2, #45	@ 0x2d
 8008fdc:	d07b      	beq.n	80090d6 <_strtod_l+0x286>
 8008fde:	f04f 0c00 	mov.w	ip, #0
 8008fe2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008fe6:	2909      	cmp	r1, #9
 8008fe8:	f240 8082 	bls.w	80090f0 <_strtod_l+0x2a0>
 8008fec:	9419      	str	r4, [sp, #100]	@ 0x64
 8008fee:	f04f 0800 	mov.w	r8, #0
 8008ff2:	e0a2      	b.n	800913a <_strtod_l+0x2ea>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	e7c7      	b.n	8008f88 <_strtod_l+0x138>
 8008ff8:	2f08      	cmp	r7, #8
 8008ffa:	bfd5      	itete	le
 8008ffc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008ffe:	9908      	ldrgt	r1, [sp, #32]
 8009000:	fb02 3301 	mlale	r3, r2, r1, r3
 8009004:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009008:	f100 0001 	add.w	r0, r0, #1
 800900c:	bfd4      	ite	le
 800900e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009010:	9308      	strgt	r3, [sp, #32]
 8009012:	3701      	adds	r7, #1
 8009014:	9019      	str	r0, [sp, #100]	@ 0x64
 8009016:	e7bf      	b.n	8008f98 <_strtod_l+0x148>
 8009018:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800901a:	1c5a      	adds	r2, r3, #1
 800901c:	9219      	str	r2, [sp, #100]	@ 0x64
 800901e:	785a      	ldrb	r2, [r3, #1]
 8009020:	b37f      	cbz	r7, 8009082 <_strtod_l+0x232>
 8009022:	4681      	mov	r9, r0
 8009024:	463d      	mov	r5, r7
 8009026:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800902a:	2b09      	cmp	r3, #9
 800902c:	d912      	bls.n	8009054 <_strtod_l+0x204>
 800902e:	2301      	movs	r3, #1
 8009030:	e7c4      	b.n	8008fbc <_strtod_l+0x16c>
 8009032:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009034:	1c5a      	adds	r2, r3, #1
 8009036:	9219      	str	r2, [sp, #100]	@ 0x64
 8009038:	785a      	ldrb	r2, [r3, #1]
 800903a:	3001      	adds	r0, #1
 800903c:	2a30      	cmp	r2, #48	@ 0x30
 800903e:	d0f8      	beq.n	8009032 <_strtod_l+0x1e2>
 8009040:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009044:	2b08      	cmp	r3, #8
 8009046:	f200 84d3 	bhi.w	80099f0 <_strtod_l+0xba0>
 800904a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800904c:	930c      	str	r3, [sp, #48]	@ 0x30
 800904e:	4681      	mov	r9, r0
 8009050:	2000      	movs	r0, #0
 8009052:	4605      	mov	r5, r0
 8009054:	3a30      	subs	r2, #48	@ 0x30
 8009056:	f100 0301 	add.w	r3, r0, #1
 800905a:	d02a      	beq.n	80090b2 <_strtod_l+0x262>
 800905c:	4499      	add	r9, r3
 800905e:	eb00 0c05 	add.w	ip, r0, r5
 8009062:	462b      	mov	r3, r5
 8009064:	210a      	movs	r1, #10
 8009066:	4563      	cmp	r3, ip
 8009068:	d10d      	bne.n	8009086 <_strtod_l+0x236>
 800906a:	1c69      	adds	r1, r5, #1
 800906c:	4401      	add	r1, r0
 800906e:	4428      	add	r0, r5
 8009070:	2808      	cmp	r0, #8
 8009072:	dc16      	bgt.n	80090a2 <_strtod_l+0x252>
 8009074:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009076:	230a      	movs	r3, #10
 8009078:	fb03 2300 	mla	r3, r3, r0, r2
 800907c:	930a      	str	r3, [sp, #40]	@ 0x28
 800907e:	2300      	movs	r3, #0
 8009080:	e018      	b.n	80090b4 <_strtod_l+0x264>
 8009082:	4638      	mov	r0, r7
 8009084:	e7da      	b.n	800903c <_strtod_l+0x1ec>
 8009086:	2b08      	cmp	r3, #8
 8009088:	f103 0301 	add.w	r3, r3, #1
 800908c:	dc03      	bgt.n	8009096 <_strtod_l+0x246>
 800908e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009090:	434e      	muls	r6, r1
 8009092:	960a      	str	r6, [sp, #40]	@ 0x28
 8009094:	e7e7      	b.n	8009066 <_strtod_l+0x216>
 8009096:	2b10      	cmp	r3, #16
 8009098:	bfde      	ittt	le
 800909a:	9e08      	ldrle	r6, [sp, #32]
 800909c:	434e      	mulle	r6, r1
 800909e:	9608      	strle	r6, [sp, #32]
 80090a0:	e7e1      	b.n	8009066 <_strtod_l+0x216>
 80090a2:	280f      	cmp	r0, #15
 80090a4:	dceb      	bgt.n	800907e <_strtod_l+0x22e>
 80090a6:	9808      	ldr	r0, [sp, #32]
 80090a8:	230a      	movs	r3, #10
 80090aa:	fb03 2300 	mla	r3, r3, r0, r2
 80090ae:	9308      	str	r3, [sp, #32]
 80090b0:	e7e5      	b.n	800907e <_strtod_l+0x22e>
 80090b2:	4629      	mov	r1, r5
 80090b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090b6:	1c50      	adds	r0, r2, #1
 80090b8:	9019      	str	r0, [sp, #100]	@ 0x64
 80090ba:	7852      	ldrb	r2, [r2, #1]
 80090bc:	4618      	mov	r0, r3
 80090be:	460d      	mov	r5, r1
 80090c0:	e7b1      	b.n	8009026 <_strtod_l+0x1d6>
 80090c2:	f04f 0900 	mov.w	r9, #0
 80090c6:	2301      	movs	r3, #1
 80090c8:	e77d      	b.n	8008fc6 <_strtod_l+0x176>
 80090ca:	f04f 0c00 	mov.w	ip, #0
 80090ce:	1ca2      	adds	r2, r4, #2
 80090d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80090d2:	78a2      	ldrb	r2, [r4, #2]
 80090d4:	e785      	b.n	8008fe2 <_strtod_l+0x192>
 80090d6:	f04f 0c01 	mov.w	ip, #1
 80090da:	e7f8      	b.n	80090ce <_strtod_l+0x27e>
 80090dc:	08016378 	.word	0x08016378
 80090e0:	08016360 	.word	0x08016360
 80090e4:	7ff00000 	.word	0x7ff00000
 80090e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090ea:	1c51      	adds	r1, r2, #1
 80090ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80090ee:	7852      	ldrb	r2, [r2, #1]
 80090f0:	2a30      	cmp	r2, #48	@ 0x30
 80090f2:	d0f9      	beq.n	80090e8 <_strtod_l+0x298>
 80090f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80090f8:	2908      	cmp	r1, #8
 80090fa:	f63f af78 	bhi.w	8008fee <_strtod_l+0x19e>
 80090fe:	3a30      	subs	r2, #48	@ 0x30
 8009100:	920e      	str	r2, [sp, #56]	@ 0x38
 8009102:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009104:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009106:	f04f 080a 	mov.w	r8, #10
 800910a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800910c:	1c56      	adds	r6, r2, #1
 800910e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009110:	7852      	ldrb	r2, [r2, #1]
 8009112:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009116:	f1be 0f09 	cmp.w	lr, #9
 800911a:	d939      	bls.n	8009190 <_strtod_l+0x340>
 800911c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800911e:	1a76      	subs	r6, r6, r1
 8009120:	2e08      	cmp	r6, #8
 8009122:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009126:	dc03      	bgt.n	8009130 <_strtod_l+0x2e0>
 8009128:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800912a:	4588      	cmp	r8, r1
 800912c:	bfa8      	it	ge
 800912e:	4688      	movge	r8, r1
 8009130:	f1bc 0f00 	cmp.w	ip, #0
 8009134:	d001      	beq.n	800913a <_strtod_l+0x2ea>
 8009136:	f1c8 0800 	rsb	r8, r8, #0
 800913a:	2d00      	cmp	r5, #0
 800913c:	d14e      	bne.n	80091dc <_strtod_l+0x38c>
 800913e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009140:	4308      	orrs	r0, r1
 8009142:	f47f aebe 	bne.w	8008ec2 <_strtod_l+0x72>
 8009146:	2b00      	cmp	r3, #0
 8009148:	f47f aed6 	bne.w	8008ef8 <_strtod_l+0xa8>
 800914c:	2a69      	cmp	r2, #105	@ 0x69
 800914e:	d028      	beq.n	80091a2 <_strtod_l+0x352>
 8009150:	dc25      	bgt.n	800919e <_strtod_l+0x34e>
 8009152:	2a49      	cmp	r2, #73	@ 0x49
 8009154:	d025      	beq.n	80091a2 <_strtod_l+0x352>
 8009156:	2a4e      	cmp	r2, #78	@ 0x4e
 8009158:	f47f aece 	bne.w	8008ef8 <_strtod_l+0xa8>
 800915c:	499b      	ldr	r1, [pc, #620]	@ (80093cc <_strtod_l+0x57c>)
 800915e:	a819      	add	r0, sp, #100	@ 0x64
 8009160:	f001 fba2 	bl	800a8a8 <__match>
 8009164:	2800      	cmp	r0, #0
 8009166:	f43f aec7 	beq.w	8008ef8 <_strtod_l+0xa8>
 800916a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	2b28      	cmp	r3, #40	@ 0x28
 8009170:	d12e      	bne.n	80091d0 <_strtod_l+0x380>
 8009172:	4997      	ldr	r1, [pc, #604]	@ (80093d0 <_strtod_l+0x580>)
 8009174:	aa1c      	add	r2, sp, #112	@ 0x70
 8009176:	a819      	add	r0, sp, #100	@ 0x64
 8009178:	f001 fbaa 	bl	800a8d0 <__hexnan>
 800917c:	2805      	cmp	r0, #5
 800917e:	d127      	bne.n	80091d0 <_strtod_l+0x380>
 8009180:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009182:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009186:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800918a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800918e:	e698      	b.n	8008ec2 <_strtod_l+0x72>
 8009190:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009192:	fb08 2101 	mla	r1, r8, r1, r2
 8009196:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800919a:	920e      	str	r2, [sp, #56]	@ 0x38
 800919c:	e7b5      	b.n	800910a <_strtod_l+0x2ba>
 800919e:	2a6e      	cmp	r2, #110	@ 0x6e
 80091a0:	e7da      	b.n	8009158 <_strtod_l+0x308>
 80091a2:	498c      	ldr	r1, [pc, #560]	@ (80093d4 <_strtod_l+0x584>)
 80091a4:	a819      	add	r0, sp, #100	@ 0x64
 80091a6:	f001 fb7f 	bl	800a8a8 <__match>
 80091aa:	2800      	cmp	r0, #0
 80091ac:	f43f aea4 	beq.w	8008ef8 <_strtod_l+0xa8>
 80091b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091b2:	4989      	ldr	r1, [pc, #548]	@ (80093d8 <_strtod_l+0x588>)
 80091b4:	3b01      	subs	r3, #1
 80091b6:	a819      	add	r0, sp, #100	@ 0x64
 80091b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80091ba:	f001 fb75 	bl	800a8a8 <__match>
 80091be:	b910      	cbnz	r0, 80091c6 <_strtod_l+0x376>
 80091c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091c2:	3301      	adds	r3, #1
 80091c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80091c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80093e8 <_strtod_l+0x598>
 80091ca:	f04f 0a00 	mov.w	sl, #0
 80091ce:	e678      	b.n	8008ec2 <_strtod_l+0x72>
 80091d0:	4882      	ldr	r0, [pc, #520]	@ (80093dc <_strtod_l+0x58c>)
 80091d2:	f001 f8bd 	bl	800a350 <nan>
 80091d6:	ec5b ab10 	vmov	sl, fp, d0
 80091da:	e672      	b.n	8008ec2 <_strtod_l+0x72>
 80091dc:	eba8 0309 	sub.w	r3, r8, r9
 80091e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80091e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091e4:	2f00      	cmp	r7, #0
 80091e6:	bf08      	it	eq
 80091e8:	462f      	moveq	r7, r5
 80091ea:	2d10      	cmp	r5, #16
 80091ec:	462c      	mov	r4, r5
 80091ee:	bfa8      	it	ge
 80091f0:	2410      	movge	r4, #16
 80091f2:	f7f7 f987 	bl	8000504 <__aeabi_ui2d>
 80091f6:	2d09      	cmp	r5, #9
 80091f8:	4682      	mov	sl, r0
 80091fa:	468b      	mov	fp, r1
 80091fc:	dc13      	bgt.n	8009226 <_strtod_l+0x3d6>
 80091fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009200:	2b00      	cmp	r3, #0
 8009202:	f43f ae5e 	beq.w	8008ec2 <_strtod_l+0x72>
 8009206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009208:	dd78      	ble.n	80092fc <_strtod_l+0x4ac>
 800920a:	2b16      	cmp	r3, #22
 800920c:	dc5f      	bgt.n	80092ce <_strtod_l+0x47e>
 800920e:	4974      	ldr	r1, [pc, #464]	@ (80093e0 <_strtod_l+0x590>)
 8009210:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009218:	4652      	mov	r2, sl
 800921a:	465b      	mov	r3, fp
 800921c:	f7f7 f9ec 	bl	80005f8 <__aeabi_dmul>
 8009220:	4682      	mov	sl, r0
 8009222:	468b      	mov	fp, r1
 8009224:	e64d      	b.n	8008ec2 <_strtod_l+0x72>
 8009226:	4b6e      	ldr	r3, [pc, #440]	@ (80093e0 <_strtod_l+0x590>)
 8009228:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800922c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009230:	f7f7 f9e2 	bl	80005f8 <__aeabi_dmul>
 8009234:	4682      	mov	sl, r0
 8009236:	9808      	ldr	r0, [sp, #32]
 8009238:	468b      	mov	fp, r1
 800923a:	f7f7 f963 	bl	8000504 <__aeabi_ui2d>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	4650      	mov	r0, sl
 8009244:	4659      	mov	r1, fp
 8009246:	f7f7 f821 	bl	800028c <__adddf3>
 800924a:	2d0f      	cmp	r5, #15
 800924c:	4682      	mov	sl, r0
 800924e:	468b      	mov	fp, r1
 8009250:	ddd5      	ble.n	80091fe <_strtod_l+0x3ae>
 8009252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009254:	1b2c      	subs	r4, r5, r4
 8009256:	441c      	add	r4, r3
 8009258:	2c00      	cmp	r4, #0
 800925a:	f340 8096 	ble.w	800938a <_strtod_l+0x53a>
 800925e:	f014 030f 	ands.w	r3, r4, #15
 8009262:	d00a      	beq.n	800927a <_strtod_l+0x42a>
 8009264:	495e      	ldr	r1, [pc, #376]	@ (80093e0 <_strtod_l+0x590>)
 8009266:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800926a:	4652      	mov	r2, sl
 800926c:	465b      	mov	r3, fp
 800926e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009272:	f7f7 f9c1 	bl	80005f8 <__aeabi_dmul>
 8009276:	4682      	mov	sl, r0
 8009278:	468b      	mov	fp, r1
 800927a:	f034 040f 	bics.w	r4, r4, #15
 800927e:	d073      	beq.n	8009368 <_strtod_l+0x518>
 8009280:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009284:	dd48      	ble.n	8009318 <_strtod_l+0x4c8>
 8009286:	2400      	movs	r4, #0
 8009288:	46a0      	mov	r8, r4
 800928a:	940a      	str	r4, [sp, #40]	@ 0x28
 800928c:	46a1      	mov	r9, r4
 800928e:	9a05      	ldr	r2, [sp, #20]
 8009290:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80093e8 <_strtod_l+0x598>
 8009294:	2322      	movs	r3, #34	@ 0x22
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	f04f 0a00 	mov.w	sl, #0
 800929c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f43f ae0f 	beq.w	8008ec2 <_strtod_l+0x72>
 80092a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092a6:	9805      	ldr	r0, [sp, #20]
 80092a8:	f7ff f942 	bl	8008530 <_Bfree>
 80092ac:	9805      	ldr	r0, [sp, #20]
 80092ae:	4649      	mov	r1, r9
 80092b0:	f7ff f93e 	bl	8008530 <_Bfree>
 80092b4:	9805      	ldr	r0, [sp, #20]
 80092b6:	4641      	mov	r1, r8
 80092b8:	f7ff f93a 	bl	8008530 <_Bfree>
 80092bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092be:	9805      	ldr	r0, [sp, #20]
 80092c0:	f7ff f936 	bl	8008530 <_Bfree>
 80092c4:	9805      	ldr	r0, [sp, #20]
 80092c6:	4621      	mov	r1, r4
 80092c8:	f7ff f932 	bl	8008530 <_Bfree>
 80092cc:	e5f9      	b.n	8008ec2 <_strtod_l+0x72>
 80092ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80092d4:	4293      	cmp	r3, r2
 80092d6:	dbbc      	blt.n	8009252 <_strtod_l+0x402>
 80092d8:	4c41      	ldr	r4, [pc, #260]	@ (80093e0 <_strtod_l+0x590>)
 80092da:	f1c5 050f 	rsb	r5, r5, #15
 80092de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80092e2:	4652      	mov	r2, sl
 80092e4:	465b      	mov	r3, fp
 80092e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092ea:	f7f7 f985 	bl	80005f8 <__aeabi_dmul>
 80092ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092f0:	1b5d      	subs	r5, r3, r5
 80092f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80092f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80092fa:	e78f      	b.n	800921c <_strtod_l+0x3cc>
 80092fc:	3316      	adds	r3, #22
 80092fe:	dba8      	blt.n	8009252 <_strtod_l+0x402>
 8009300:	4b37      	ldr	r3, [pc, #220]	@ (80093e0 <_strtod_l+0x590>)
 8009302:	eba9 0808 	sub.w	r8, r9, r8
 8009306:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800930a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800930e:	4650      	mov	r0, sl
 8009310:	4659      	mov	r1, fp
 8009312:	f7f7 fa9b 	bl	800084c <__aeabi_ddiv>
 8009316:	e783      	b.n	8009220 <_strtod_l+0x3d0>
 8009318:	4b32      	ldr	r3, [pc, #200]	@ (80093e4 <_strtod_l+0x594>)
 800931a:	9308      	str	r3, [sp, #32]
 800931c:	2300      	movs	r3, #0
 800931e:	1124      	asrs	r4, r4, #4
 8009320:	4650      	mov	r0, sl
 8009322:	4659      	mov	r1, fp
 8009324:	461e      	mov	r6, r3
 8009326:	2c01      	cmp	r4, #1
 8009328:	dc21      	bgt.n	800936e <_strtod_l+0x51e>
 800932a:	b10b      	cbz	r3, 8009330 <_strtod_l+0x4e0>
 800932c:	4682      	mov	sl, r0
 800932e:	468b      	mov	fp, r1
 8009330:	492c      	ldr	r1, [pc, #176]	@ (80093e4 <_strtod_l+0x594>)
 8009332:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009336:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800933a:	4652      	mov	r2, sl
 800933c:	465b      	mov	r3, fp
 800933e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009342:	f7f7 f959 	bl	80005f8 <__aeabi_dmul>
 8009346:	4b28      	ldr	r3, [pc, #160]	@ (80093e8 <_strtod_l+0x598>)
 8009348:	460a      	mov	r2, r1
 800934a:	400b      	ands	r3, r1
 800934c:	4927      	ldr	r1, [pc, #156]	@ (80093ec <_strtod_l+0x59c>)
 800934e:	428b      	cmp	r3, r1
 8009350:	4682      	mov	sl, r0
 8009352:	d898      	bhi.n	8009286 <_strtod_l+0x436>
 8009354:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009358:	428b      	cmp	r3, r1
 800935a:	bf86      	itte	hi
 800935c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80093f0 <_strtod_l+0x5a0>
 8009360:	f04f 3aff 	movhi.w	sl, #4294967295
 8009364:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009368:	2300      	movs	r3, #0
 800936a:	9308      	str	r3, [sp, #32]
 800936c:	e07a      	b.n	8009464 <_strtod_l+0x614>
 800936e:	07e2      	lsls	r2, r4, #31
 8009370:	d505      	bpl.n	800937e <_strtod_l+0x52e>
 8009372:	9b08      	ldr	r3, [sp, #32]
 8009374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009378:	f7f7 f93e 	bl	80005f8 <__aeabi_dmul>
 800937c:	2301      	movs	r3, #1
 800937e:	9a08      	ldr	r2, [sp, #32]
 8009380:	3208      	adds	r2, #8
 8009382:	3601      	adds	r6, #1
 8009384:	1064      	asrs	r4, r4, #1
 8009386:	9208      	str	r2, [sp, #32]
 8009388:	e7cd      	b.n	8009326 <_strtod_l+0x4d6>
 800938a:	d0ed      	beq.n	8009368 <_strtod_l+0x518>
 800938c:	4264      	negs	r4, r4
 800938e:	f014 020f 	ands.w	r2, r4, #15
 8009392:	d00a      	beq.n	80093aa <_strtod_l+0x55a>
 8009394:	4b12      	ldr	r3, [pc, #72]	@ (80093e0 <_strtod_l+0x590>)
 8009396:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800939a:	4650      	mov	r0, sl
 800939c:	4659      	mov	r1, fp
 800939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a2:	f7f7 fa53 	bl	800084c <__aeabi_ddiv>
 80093a6:	4682      	mov	sl, r0
 80093a8:	468b      	mov	fp, r1
 80093aa:	1124      	asrs	r4, r4, #4
 80093ac:	d0dc      	beq.n	8009368 <_strtod_l+0x518>
 80093ae:	2c1f      	cmp	r4, #31
 80093b0:	dd20      	ble.n	80093f4 <_strtod_l+0x5a4>
 80093b2:	2400      	movs	r4, #0
 80093b4:	46a0      	mov	r8, r4
 80093b6:	940a      	str	r4, [sp, #40]	@ 0x28
 80093b8:	46a1      	mov	r9, r4
 80093ba:	9a05      	ldr	r2, [sp, #20]
 80093bc:	2322      	movs	r3, #34	@ 0x22
 80093be:	f04f 0a00 	mov.w	sl, #0
 80093c2:	f04f 0b00 	mov.w	fp, #0
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	e768      	b.n	800929c <_strtod_l+0x44c>
 80093ca:	bf00      	nop
 80093cc:	08016128 	.word	0x08016128
 80093d0:	08016364 	.word	0x08016364
 80093d4:	08016120 	.word	0x08016120
 80093d8:	08016193 	.word	0x08016193
 80093dc:	0801618f 	.word	0x0801618f
 80093e0:	08016298 	.word	0x08016298
 80093e4:	08016270 	.word	0x08016270
 80093e8:	7ff00000 	.word	0x7ff00000
 80093ec:	7ca00000 	.word	0x7ca00000
 80093f0:	7fefffff 	.word	0x7fefffff
 80093f4:	f014 0310 	ands.w	r3, r4, #16
 80093f8:	bf18      	it	ne
 80093fa:	236a      	movne	r3, #106	@ 0x6a
 80093fc:	4ea9      	ldr	r6, [pc, #676]	@ (80096a4 <_strtod_l+0x854>)
 80093fe:	9308      	str	r3, [sp, #32]
 8009400:	4650      	mov	r0, sl
 8009402:	4659      	mov	r1, fp
 8009404:	2300      	movs	r3, #0
 8009406:	07e2      	lsls	r2, r4, #31
 8009408:	d504      	bpl.n	8009414 <_strtod_l+0x5c4>
 800940a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800940e:	f7f7 f8f3 	bl	80005f8 <__aeabi_dmul>
 8009412:	2301      	movs	r3, #1
 8009414:	1064      	asrs	r4, r4, #1
 8009416:	f106 0608 	add.w	r6, r6, #8
 800941a:	d1f4      	bne.n	8009406 <_strtod_l+0x5b6>
 800941c:	b10b      	cbz	r3, 8009422 <_strtod_l+0x5d2>
 800941e:	4682      	mov	sl, r0
 8009420:	468b      	mov	fp, r1
 8009422:	9b08      	ldr	r3, [sp, #32]
 8009424:	b1b3      	cbz	r3, 8009454 <_strtod_l+0x604>
 8009426:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800942a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800942e:	2b00      	cmp	r3, #0
 8009430:	4659      	mov	r1, fp
 8009432:	dd0f      	ble.n	8009454 <_strtod_l+0x604>
 8009434:	2b1f      	cmp	r3, #31
 8009436:	dd55      	ble.n	80094e4 <_strtod_l+0x694>
 8009438:	2b34      	cmp	r3, #52	@ 0x34
 800943a:	bfde      	ittt	le
 800943c:	f04f 33ff 	movle.w	r3, #4294967295
 8009440:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009444:	4093      	lslle	r3, r2
 8009446:	f04f 0a00 	mov.w	sl, #0
 800944a:	bfcc      	ite	gt
 800944c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009450:	ea03 0b01 	andle.w	fp, r3, r1
 8009454:	2200      	movs	r2, #0
 8009456:	2300      	movs	r3, #0
 8009458:	4650      	mov	r0, sl
 800945a:	4659      	mov	r1, fp
 800945c:	f7f7 fb34 	bl	8000ac8 <__aeabi_dcmpeq>
 8009460:	2800      	cmp	r0, #0
 8009462:	d1a6      	bne.n	80093b2 <_strtod_l+0x562>
 8009464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800946a:	9805      	ldr	r0, [sp, #20]
 800946c:	462b      	mov	r3, r5
 800946e:	463a      	mov	r2, r7
 8009470:	f7ff f8c6 	bl	8008600 <__s2b>
 8009474:	900a      	str	r0, [sp, #40]	@ 0x28
 8009476:	2800      	cmp	r0, #0
 8009478:	f43f af05 	beq.w	8009286 <_strtod_l+0x436>
 800947c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800947e:	2a00      	cmp	r2, #0
 8009480:	eba9 0308 	sub.w	r3, r9, r8
 8009484:	bfa8      	it	ge
 8009486:	2300      	movge	r3, #0
 8009488:	9312      	str	r3, [sp, #72]	@ 0x48
 800948a:	2400      	movs	r4, #0
 800948c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009490:	9316      	str	r3, [sp, #88]	@ 0x58
 8009492:	46a0      	mov	r8, r4
 8009494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009496:	9805      	ldr	r0, [sp, #20]
 8009498:	6859      	ldr	r1, [r3, #4]
 800949a:	f7ff f809 	bl	80084b0 <_Balloc>
 800949e:	4681      	mov	r9, r0
 80094a0:	2800      	cmp	r0, #0
 80094a2:	f43f aef4 	beq.w	800928e <_strtod_l+0x43e>
 80094a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094a8:	691a      	ldr	r2, [r3, #16]
 80094aa:	3202      	adds	r2, #2
 80094ac:	f103 010c 	add.w	r1, r3, #12
 80094b0:	0092      	lsls	r2, r2, #2
 80094b2:	300c      	adds	r0, #12
 80094b4:	f7fe f87b 	bl	80075ae <memcpy>
 80094b8:	ec4b ab10 	vmov	d0, sl, fp
 80094bc:	9805      	ldr	r0, [sp, #20]
 80094be:	aa1c      	add	r2, sp, #112	@ 0x70
 80094c0:	a91b      	add	r1, sp, #108	@ 0x6c
 80094c2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80094c6:	f7ff fbd7 	bl	8008c78 <__d2b>
 80094ca:	901a      	str	r0, [sp, #104]	@ 0x68
 80094cc:	2800      	cmp	r0, #0
 80094ce:	f43f aede 	beq.w	800928e <_strtod_l+0x43e>
 80094d2:	9805      	ldr	r0, [sp, #20]
 80094d4:	2101      	movs	r1, #1
 80094d6:	f7ff f929 	bl	800872c <__i2b>
 80094da:	4680      	mov	r8, r0
 80094dc:	b948      	cbnz	r0, 80094f2 <_strtod_l+0x6a2>
 80094de:	f04f 0800 	mov.w	r8, #0
 80094e2:	e6d4      	b.n	800928e <_strtod_l+0x43e>
 80094e4:	f04f 32ff 	mov.w	r2, #4294967295
 80094e8:	fa02 f303 	lsl.w	r3, r2, r3
 80094ec:	ea03 0a0a 	and.w	sl, r3, sl
 80094f0:	e7b0      	b.n	8009454 <_strtod_l+0x604>
 80094f2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80094f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80094f6:	2d00      	cmp	r5, #0
 80094f8:	bfab      	itete	ge
 80094fa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80094fc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80094fe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009500:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009502:	bfac      	ite	ge
 8009504:	18ef      	addge	r7, r5, r3
 8009506:	1b5e      	sublt	r6, r3, r5
 8009508:	9b08      	ldr	r3, [sp, #32]
 800950a:	1aed      	subs	r5, r5, r3
 800950c:	4415      	add	r5, r2
 800950e:	4b66      	ldr	r3, [pc, #408]	@ (80096a8 <_strtod_l+0x858>)
 8009510:	3d01      	subs	r5, #1
 8009512:	429d      	cmp	r5, r3
 8009514:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009518:	da50      	bge.n	80095bc <_strtod_l+0x76c>
 800951a:	1b5b      	subs	r3, r3, r5
 800951c:	2b1f      	cmp	r3, #31
 800951e:	eba2 0203 	sub.w	r2, r2, r3
 8009522:	f04f 0101 	mov.w	r1, #1
 8009526:	dc3d      	bgt.n	80095a4 <_strtod_l+0x754>
 8009528:	fa01 f303 	lsl.w	r3, r1, r3
 800952c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800952e:	2300      	movs	r3, #0
 8009530:	9310      	str	r3, [sp, #64]	@ 0x40
 8009532:	18bd      	adds	r5, r7, r2
 8009534:	9b08      	ldr	r3, [sp, #32]
 8009536:	42af      	cmp	r7, r5
 8009538:	4416      	add	r6, r2
 800953a:	441e      	add	r6, r3
 800953c:	463b      	mov	r3, r7
 800953e:	bfa8      	it	ge
 8009540:	462b      	movge	r3, r5
 8009542:	42b3      	cmp	r3, r6
 8009544:	bfa8      	it	ge
 8009546:	4633      	movge	r3, r6
 8009548:	2b00      	cmp	r3, #0
 800954a:	bfc2      	ittt	gt
 800954c:	1aed      	subgt	r5, r5, r3
 800954e:	1af6      	subgt	r6, r6, r3
 8009550:	1aff      	subgt	r7, r7, r3
 8009552:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009554:	2b00      	cmp	r3, #0
 8009556:	dd16      	ble.n	8009586 <_strtod_l+0x736>
 8009558:	4641      	mov	r1, r8
 800955a:	9805      	ldr	r0, [sp, #20]
 800955c:	461a      	mov	r2, r3
 800955e:	f7ff f9a5 	bl	80088ac <__pow5mult>
 8009562:	4680      	mov	r8, r0
 8009564:	2800      	cmp	r0, #0
 8009566:	d0ba      	beq.n	80094de <_strtod_l+0x68e>
 8009568:	4601      	mov	r1, r0
 800956a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800956c:	9805      	ldr	r0, [sp, #20]
 800956e:	f7ff f8f3 	bl	8008758 <__multiply>
 8009572:	900e      	str	r0, [sp, #56]	@ 0x38
 8009574:	2800      	cmp	r0, #0
 8009576:	f43f ae8a 	beq.w	800928e <_strtod_l+0x43e>
 800957a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800957c:	9805      	ldr	r0, [sp, #20]
 800957e:	f7fe ffd7 	bl	8008530 <_Bfree>
 8009582:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009584:	931a      	str	r3, [sp, #104]	@ 0x68
 8009586:	2d00      	cmp	r5, #0
 8009588:	dc1d      	bgt.n	80095c6 <_strtod_l+0x776>
 800958a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800958c:	2b00      	cmp	r3, #0
 800958e:	dd23      	ble.n	80095d8 <_strtod_l+0x788>
 8009590:	4649      	mov	r1, r9
 8009592:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009594:	9805      	ldr	r0, [sp, #20]
 8009596:	f7ff f989 	bl	80088ac <__pow5mult>
 800959a:	4681      	mov	r9, r0
 800959c:	b9e0      	cbnz	r0, 80095d8 <_strtod_l+0x788>
 800959e:	f04f 0900 	mov.w	r9, #0
 80095a2:	e674      	b.n	800928e <_strtod_l+0x43e>
 80095a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80095a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80095ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80095b0:	35e2      	adds	r5, #226	@ 0xe2
 80095b2:	fa01 f305 	lsl.w	r3, r1, r5
 80095b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80095b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80095ba:	e7ba      	b.n	8009532 <_strtod_l+0x6e2>
 80095bc:	2300      	movs	r3, #0
 80095be:	9310      	str	r3, [sp, #64]	@ 0x40
 80095c0:	2301      	movs	r3, #1
 80095c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095c4:	e7b5      	b.n	8009532 <_strtod_l+0x6e2>
 80095c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095c8:	9805      	ldr	r0, [sp, #20]
 80095ca:	462a      	mov	r2, r5
 80095cc:	f7ff f9c8 	bl	8008960 <__lshift>
 80095d0:	901a      	str	r0, [sp, #104]	@ 0x68
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d1d9      	bne.n	800958a <_strtod_l+0x73a>
 80095d6:	e65a      	b.n	800928e <_strtod_l+0x43e>
 80095d8:	2e00      	cmp	r6, #0
 80095da:	dd07      	ble.n	80095ec <_strtod_l+0x79c>
 80095dc:	4649      	mov	r1, r9
 80095de:	9805      	ldr	r0, [sp, #20]
 80095e0:	4632      	mov	r2, r6
 80095e2:	f7ff f9bd 	bl	8008960 <__lshift>
 80095e6:	4681      	mov	r9, r0
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d0d8      	beq.n	800959e <_strtod_l+0x74e>
 80095ec:	2f00      	cmp	r7, #0
 80095ee:	dd08      	ble.n	8009602 <_strtod_l+0x7b2>
 80095f0:	4641      	mov	r1, r8
 80095f2:	9805      	ldr	r0, [sp, #20]
 80095f4:	463a      	mov	r2, r7
 80095f6:	f7ff f9b3 	bl	8008960 <__lshift>
 80095fa:	4680      	mov	r8, r0
 80095fc:	2800      	cmp	r0, #0
 80095fe:	f43f ae46 	beq.w	800928e <_strtod_l+0x43e>
 8009602:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009604:	9805      	ldr	r0, [sp, #20]
 8009606:	464a      	mov	r2, r9
 8009608:	f7ff fa32 	bl	8008a70 <__mdiff>
 800960c:	4604      	mov	r4, r0
 800960e:	2800      	cmp	r0, #0
 8009610:	f43f ae3d 	beq.w	800928e <_strtod_l+0x43e>
 8009614:	68c3      	ldr	r3, [r0, #12]
 8009616:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009618:	2300      	movs	r3, #0
 800961a:	60c3      	str	r3, [r0, #12]
 800961c:	4641      	mov	r1, r8
 800961e:	f7ff fa0b 	bl	8008a38 <__mcmp>
 8009622:	2800      	cmp	r0, #0
 8009624:	da46      	bge.n	80096b4 <_strtod_l+0x864>
 8009626:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009628:	ea53 030a 	orrs.w	r3, r3, sl
 800962c:	d16c      	bne.n	8009708 <_strtod_l+0x8b8>
 800962e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009632:	2b00      	cmp	r3, #0
 8009634:	d168      	bne.n	8009708 <_strtod_l+0x8b8>
 8009636:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800963a:	0d1b      	lsrs	r3, r3, #20
 800963c:	051b      	lsls	r3, r3, #20
 800963e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009642:	d961      	bls.n	8009708 <_strtod_l+0x8b8>
 8009644:	6963      	ldr	r3, [r4, #20]
 8009646:	b913      	cbnz	r3, 800964e <_strtod_l+0x7fe>
 8009648:	6923      	ldr	r3, [r4, #16]
 800964a:	2b01      	cmp	r3, #1
 800964c:	dd5c      	ble.n	8009708 <_strtod_l+0x8b8>
 800964e:	4621      	mov	r1, r4
 8009650:	2201      	movs	r2, #1
 8009652:	9805      	ldr	r0, [sp, #20]
 8009654:	f7ff f984 	bl	8008960 <__lshift>
 8009658:	4641      	mov	r1, r8
 800965a:	4604      	mov	r4, r0
 800965c:	f7ff f9ec 	bl	8008a38 <__mcmp>
 8009660:	2800      	cmp	r0, #0
 8009662:	dd51      	ble.n	8009708 <_strtod_l+0x8b8>
 8009664:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009668:	9a08      	ldr	r2, [sp, #32]
 800966a:	0d1b      	lsrs	r3, r3, #20
 800966c:	051b      	lsls	r3, r3, #20
 800966e:	2a00      	cmp	r2, #0
 8009670:	d06b      	beq.n	800974a <_strtod_l+0x8fa>
 8009672:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009676:	d868      	bhi.n	800974a <_strtod_l+0x8fa>
 8009678:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800967c:	f67f ae9d 	bls.w	80093ba <_strtod_l+0x56a>
 8009680:	4b0a      	ldr	r3, [pc, #40]	@ (80096ac <_strtod_l+0x85c>)
 8009682:	4650      	mov	r0, sl
 8009684:	4659      	mov	r1, fp
 8009686:	2200      	movs	r2, #0
 8009688:	f7f6 ffb6 	bl	80005f8 <__aeabi_dmul>
 800968c:	4b08      	ldr	r3, [pc, #32]	@ (80096b0 <_strtod_l+0x860>)
 800968e:	400b      	ands	r3, r1
 8009690:	4682      	mov	sl, r0
 8009692:	468b      	mov	fp, r1
 8009694:	2b00      	cmp	r3, #0
 8009696:	f47f ae05 	bne.w	80092a4 <_strtod_l+0x454>
 800969a:	9a05      	ldr	r2, [sp, #20]
 800969c:	2322      	movs	r3, #34	@ 0x22
 800969e:	6013      	str	r3, [r2, #0]
 80096a0:	e600      	b.n	80092a4 <_strtod_l+0x454>
 80096a2:	bf00      	nop
 80096a4:	08016390 	.word	0x08016390
 80096a8:	fffffc02 	.word	0xfffffc02
 80096ac:	39500000 	.word	0x39500000
 80096b0:	7ff00000 	.word	0x7ff00000
 80096b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80096b8:	d165      	bne.n	8009786 <_strtod_l+0x936>
 80096ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80096bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096c0:	b35a      	cbz	r2, 800971a <_strtod_l+0x8ca>
 80096c2:	4a9f      	ldr	r2, [pc, #636]	@ (8009940 <_strtod_l+0xaf0>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d12b      	bne.n	8009720 <_strtod_l+0x8d0>
 80096c8:	9b08      	ldr	r3, [sp, #32]
 80096ca:	4651      	mov	r1, sl
 80096cc:	b303      	cbz	r3, 8009710 <_strtod_l+0x8c0>
 80096ce:	4b9d      	ldr	r3, [pc, #628]	@ (8009944 <_strtod_l+0xaf4>)
 80096d0:	465a      	mov	r2, fp
 80096d2:	4013      	ands	r3, r2
 80096d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80096d8:	f04f 32ff 	mov.w	r2, #4294967295
 80096dc:	d81b      	bhi.n	8009716 <_strtod_l+0x8c6>
 80096de:	0d1b      	lsrs	r3, r3, #20
 80096e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80096e4:	fa02 f303 	lsl.w	r3, r2, r3
 80096e8:	4299      	cmp	r1, r3
 80096ea:	d119      	bne.n	8009720 <_strtod_l+0x8d0>
 80096ec:	4b96      	ldr	r3, [pc, #600]	@ (8009948 <_strtod_l+0xaf8>)
 80096ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d102      	bne.n	80096fa <_strtod_l+0x8aa>
 80096f4:	3101      	adds	r1, #1
 80096f6:	f43f adca 	beq.w	800928e <_strtod_l+0x43e>
 80096fa:	4b92      	ldr	r3, [pc, #584]	@ (8009944 <_strtod_l+0xaf4>)
 80096fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096fe:	401a      	ands	r2, r3
 8009700:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009704:	f04f 0a00 	mov.w	sl, #0
 8009708:	9b08      	ldr	r3, [sp, #32]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1b8      	bne.n	8009680 <_strtod_l+0x830>
 800970e:	e5c9      	b.n	80092a4 <_strtod_l+0x454>
 8009710:	f04f 33ff 	mov.w	r3, #4294967295
 8009714:	e7e8      	b.n	80096e8 <_strtod_l+0x898>
 8009716:	4613      	mov	r3, r2
 8009718:	e7e6      	b.n	80096e8 <_strtod_l+0x898>
 800971a:	ea53 030a 	orrs.w	r3, r3, sl
 800971e:	d0a1      	beq.n	8009664 <_strtod_l+0x814>
 8009720:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009722:	b1db      	cbz	r3, 800975c <_strtod_l+0x90c>
 8009724:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009726:	4213      	tst	r3, r2
 8009728:	d0ee      	beq.n	8009708 <_strtod_l+0x8b8>
 800972a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800972c:	9a08      	ldr	r2, [sp, #32]
 800972e:	4650      	mov	r0, sl
 8009730:	4659      	mov	r1, fp
 8009732:	b1bb      	cbz	r3, 8009764 <_strtod_l+0x914>
 8009734:	f7ff fb6e 	bl	8008e14 <sulp>
 8009738:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800973c:	ec53 2b10 	vmov	r2, r3, d0
 8009740:	f7f6 fda4 	bl	800028c <__adddf3>
 8009744:	4682      	mov	sl, r0
 8009746:	468b      	mov	fp, r1
 8009748:	e7de      	b.n	8009708 <_strtod_l+0x8b8>
 800974a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800974e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009752:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009756:	f04f 3aff 	mov.w	sl, #4294967295
 800975a:	e7d5      	b.n	8009708 <_strtod_l+0x8b8>
 800975c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800975e:	ea13 0f0a 	tst.w	r3, sl
 8009762:	e7e1      	b.n	8009728 <_strtod_l+0x8d8>
 8009764:	f7ff fb56 	bl	8008e14 <sulp>
 8009768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800976c:	ec53 2b10 	vmov	r2, r3, d0
 8009770:	f7f6 fd8a 	bl	8000288 <__aeabi_dsub>
 8009774:	2200      	movs	r2, #0
 8009776:	2300      	movs	r3, #0
 8009778:	4682      	mov	sl, r0
 800977a:	468b      	mov	fp, r1
 800977c:	f7f7 f9a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009780:	2800      	cmp	r0, #0
 8009782:	d0c1      	beq.n	8009708 <_strtod_l+0x8b8>
 8009784:	e619      	b.n	80093ba <_strtod_l+0x56a>
 8009786:	4641      	mov	r1, r8
 8009788:	4620      	mov	r0, r4
 800978a:	f7ff facd 	bl	8008d28 <__ratio>
 800978e:	ec57 6b10 	vmov	r6, r7, d0
 8009792:	2200      	movs	r2, #0
 8009794:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009798:	4630      	mov	r0, r6
 800979a:	4639      	mov	r1, r7
 800979c:	f7f7 f9a8 	bl	8000af0 <__aeabi_dcmple>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d06f      	beq.n	8009884 <_strtod_l+0xa34>
 80097a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d17a      	bne.n	80098a0 <_strtod_l+0xa50>
 80097aa:	f1ba 0f00 	cmp.w	sl, #0
 80097ae:	d158      	bne.n	8009862 <_strtod_l+0xa12>
 80097b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d15a      	bne.n	8009870 <_strtod_l+0xa20>
 80097ba:	4b64      	ldr	r3, [pc, #400]	@ (800994c <_strtod_l+0xafc>)
 80097bc:	2200      	movs	r2, #0
 80097be:	4630      	mov	r0, r6
 80097c0:	4639      	mov	r1, r7
 80097c2:	f7f7 f98b 	bl	8000adc <__aeabi_dcmplt>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d159      	bne.n	800987e <_strtod_l+0xa2e>
 80097ca:	4630      	mov	r0, r6
 80097cc:	4639      	mov	r1, r7
 80097ce:	4b60      	ldr	r3, [pc, #384]	@ (8009950 <_strtod_l+0xb00>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	f7f6 ff11 	bl	80005f8 <__aeabi_dmul>
 80097d6:	4606      	mov	r6, r0
 80097d8:	460f      	mov	r7, r1
 80097da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80097de:	9606      	str	r6, [sp, #24]
 80097e0:	9307      	str	r3, [sp, #28]
 80097e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097e6:	4d57      	ldr	r5, [pc, #348]	@ (8009944 <_strtod_l+0xaf4>)
 80097e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80097ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097ee:	401d      	ands	r5, r3
 80097f0:	4b58      	ldr	r3, [pc, #352]	@ (8009954 <_strtod_l+0xb04>)
 80097f2:	429d      	cmp	r5, r3
 80097f4:	f040 80b2 	bne.w	800995c <_strtod_l+0xb0c>
 80097f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80097fe:	ec4b ab10 	vmov	d0, sl, fp
 8009802:	f7ff f9c9 	bl	8008b98 <__ulp>
 8009806:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800980a:	ec51 0b10 	vmov	r0, r1, d0
 800980e:	f7f6 fef3 	bl	80005f8 <__aeabi_dmul>
 8009812:	4652      	mov	r2, sl
 8009814:	465b      	mov	r3, fp
 8009816:	f7f6 fd39 	bl	800028c <__adddf3>
 800981a:	460b      	mov	r3, r1
 800981c:	4949      	ldr	r1, [pc, #292]	@ (8009944 <_strtod_l+0xaf4>)
 800981e:	4a4e      	ldr	r2, [pc, #312]	@ (8009958 <_strtod_l+0xb08>)
 8009820:	4019      	ands	r1, r3
 8009822:	4291      	cmp	r1, r2
 8009824:	4682      	mov	sl, r0
 8009826:	d942      	bls.n	80098ae <_strtod_l+0xa5e>
 8009828:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800982a:	4b47      	ldr	r3, [pc, #284]	@ (8009948 <_strtod_l+0xaf8>)
 800982c:	429a      	cmp	r2, r3
 800982e:	d103      	bne.n	8009838 <_strtod_l+0x9e8>
 8009830:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009832:	3301      	adds	r3, #1
 8009834:	f43f ad2b 	beq.w	800928e <_strtod_l+0x43e>
 8009838:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009948 <_strtod_l+0xaf8>
 800983c:	f04f 3aff 	mov.w	sl, #4294967295
 8009840:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009842:	9805      	ldr	r0, [sp, #20]
 8009844:	f7fe fe74 	bl	8008530 <_Bfree>
 8009848:	9805      	ldr	r0, [sp, #20]
 800984a:	4649      	mov	r1, r9
 800984c:	f7fe fe70 	bl	8008530 <_Bfree>
 8009850:	9805      	ldr	r0, [sp, #20]
 8009852:	4641      	mov	r1, r8
 8009854:	f7fe fe6c 	bl	8008530 <_Bfree>
 8009858:	9805      	ldr	r0, [sp, #20]
 800985a:	4621      	mov	r1, r4
 800985c:	f7fe fe68 	bl	8008530 <_Bfree>
 8009860:	e618      	b.n	8009494 <_strtod_l+0x644>
 8009862:	f1ba 0f01 	cmp.w	sl, #1
 8009866:	d103      	bne.n	8009870 <_strtod_l+0xa20>
 8009868:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800986a:	2b00      	cmp	r3, #0
 800986c:	f43f ada5 	beq.w	80093ba <_strtod_l+0x56a>
 8009870:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009920 <_strtod_l+0xad0>
 8009874:	4f35      	ldr	r7, [pc, #212]	@ (800994c <_strtod_l+0xafc>)
 8009876:	ed8d 7b06 	vstr	d7, [sp, #24]
 800987a:	2600      	movs	r6, #0
 800987c:	e7b1      	b.n	80097e2 <_strtod_l+0x992>
 800987e:	4f34      	ldr	r7, [pc, #208]	@ (8009950 <_strtod_l+0xb00>)
 8009880:	2600      	movs	r6, #0
 8009882:	e7aa      	b.n	80097da <_strtod_l+0x98a>
 8009884:	4b32      	ldr	r3, [pc, #200]	@ (8009950 <_strtod_l+0xb00>)
 8009886:	4630      	mov	r0, r6
 8009888:	4639      	mov	r1, r7
 800988a:	2200      	movs	r2, #0
 800988c:	f7f6 feb4 	bl	80005f8 <__aeabi_dmul>
 8009890:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009892:	4606      	mov	r6, r0
 8009894:	460f      	mov	r7, r1
 8009896:	2b00      	cmp	r3, #0
 8009898:	d09f      	beq.n	80097da <_strtod_l+0x98a>
 800989a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800989e:	e7a0      	b.n	80097e2 <_strtod_l+0x992>
 80098a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009928 <_strtod_l+0xad8>
 80098a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80098a8:	ec57 6b17 	vmov	r6, r7, d7
 80098ac:	e799      	b.n	80097e2 <_strtod_l+0x992>
 80098ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80098b2:	9b08      	ldr	r3, [sp, #32]
 80098b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1c1      	bne.n	8009840 <_strtod_l+0x9f0>
 80098bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098c0:	0d1b      	lsrs	r3, r3, #20
 80098c2:	051b      	lsls	r3, r3, #20
 80098c4:	429d      	cmp	r5, r3
 80098c6:	d1bb      	bne.n	8009840 <_strtod_l+0x9f0>
 80098c8:	4630      	mov	r0, r6
 80098ca:	4639      	mov	r1, r7
 80098cc:	f7f7 f9dc 	bl	8000c88 <__aeabi_d2lz>
 80098d0:	f7f6 fe64 	bl	800059c <__aeabi_l2d>
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	4630      	mov	r0, r6
 80098da:	4639      	mov	r1, r7
 80098dc:	f7f6 fcd4 	bl	8000288 <__aeabi_dsub>
 80098e0:	460b      	mov	r3, r1
 80098e2:	4602      	mov	r2, r0
 80098e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80098e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80098ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ee:	ea46 060a 	orr.w	r6, r6, sl
 80098f2:	431e      	orrs	r6, r3
 80098f4:	d06f      	beq.n	80099d6 <_strtod_l+0xb86>
 80098f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009930 <_strtod_l+0xae0>)
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	f7f7 f8ee 	bl	8000adc <__aeabi_dcmplt>
 8009900:	2800      	cmp	r0, #0
 8009902:	f47f accf 	bne.w	80092a4 <_strtod_l+0x454>
 8009906:	a30c      	add	r3, pc, #48	@ (adr r3, 8009938 <_strtod_l+0xae8>)
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009910:	f7f7 f902 	bl	8000b18 <__aeabi_dcmpgt>
 8009914:	2800      	cmp	r0, #0
 8009916:	d093      	beq.n	8009840 <_strtod_l+0x9f0>
 8009918:	e4c4      	b.n	80092a4 <_strtod_l+0x454>
 800991a:	bf00      	nop
 800991c:	f3af 8000 	nop.w
 8009920:	00000000 	.word	0x00000000
 8009924:	bff00000 	.word	0xbff00000
 8009928:	00000000 	.word	0x00000000
 800992c:	3ff00000 	.word	0x3ff00000
 8009930:	94a03595 	.word	0x94a03595
 8009934:	3fdfffff 	.word	0x3fdfffff
 8009938:	35afe535 	.word	0x35afe535
 800993c:	3fe00000 	.word	0x3fe00000
 8009940:	000fffff 	.word	0x000fffff
 8009944:	7ff00000 	.word	0x7ff00000
 8009948:	7fefffff 	.word	0x7fefffff
 800994c:	3ff00000 	.word	0x3ff00000
 8009950:	3fe00000 	.word	0x3fe00000
 8009954:	7fe00000 	.word	0x7fe00000
 8009958:	7c9fffff 	.word	0x7c9fffff
 800995c:	9b08      	ldr	r3, [sp, #32]
 800995e:	b323      	cbz	r3, 80099aa <_strtod_l+0xb5a>
 8009960:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009964:	d821      	bhi.n	80099aa <_strtod_l+0xb5a>
 8009966:	a328      	add	r3, pc, #160	@ (adr r3, 8009a08 <_strtod_l+0xbb8>)
 8009968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996c:	4630      	mov	r0, r6
 800996e:	4639      	mov	r1, r7
 8009970:	f7f7 f8be 	bl	8000af0 <__aeabi_dcmple>
 8009974:	b1a0      	cbz	r0, 80099a0 <_strtod_l+0xb50>
 8009976:	4639      	mov	r1, r7
 8009978:	4630      	mov	r0, r6
 800997a:	f7f7 f915 	bl	8000ba8 <__aeabi_d2uiz>
 800997e:	2801      	cmp	r0, #1
 8009980:	bf38      	it	cc
 8009982:	2001      	movcc	r0, #1
 8009984:	f7f6 fdbe 	bl	8000504 <__aeabi_ui2d>
 8009988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800998a:	4606      	mov	r6, r0
 800998c:	460f      	mov	r7, r1
 800998e:	b9fb      	cbnz	r3, 80099d0 <_strtod_l+0xb80>
 8009990:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009994:	9014      	str	r0, [sp, #80]	@ 0x50
 8009996:	9315      	str	r3, [sp, #84]	@ 0x54
 8009998:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800999c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80099a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80099a6:	1b5b      	subs	r3, r3, r5
 80099a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80099aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80099ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80099b2:	f7ff f8f1 	bl	8008b98 <__ulp>
 80099b6:	4650      	mov	r0, sl
 80099b8:	ec53 2b10 	vmov	r2, r3, d0
 80099bc:	4659      	mov	r1, fp
 80099be:	f7f6 fe1b 	bl	80005f8 <__aeabi_dmul>
 80099c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80099c6:	f7f6 fc61 	bl	800028c <__adddf3>
 80099ca:	4682      	mov	sl, r0
 80099cc:	468b      	mov	fp, r1
 80099ce:	e770      	b.n	80098b2 <_strtod_l+0xa62>
 80099d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80099d4:	e7e0      	b.n	8009998 <_strtod_l+0xb48>
 80099d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009a10 <_strtod_l+0xbc0>)
 80099d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099dc:	f7f7 f87e 	bl	8000adc <__aeabi_dcmplt>
 80099e0:	e798      	b.n	8009914 <_strtod_l+0xac4>
 80099e2:	2300      	movs	r3, #0
 80099e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80099e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099ea:	6013      	str	r3, [r2, #0]
 80099ec:	f7ff ba6d 	b.w	8008eca <_strtod_l+0x7a>
 80099f0:	2a65      	cmp	r2, #101	@ 0x65
 80099f2:	f43f ab66 	beq.w	80090c2 <_strtod_l+0x272>
 80099f6:	2a45      	cmp	r2, #69	@ 0x45
 80099f8:	f43f ab63 	beq.w	80090c2 <_strtod_l+0x272>
 80099fc:	2301      	movs	r3, #1
 80099fe:	f7ff bb9e 	b.w	800913e <_strtod_l+0x2ee>
 8009a02:	bf00      	nop
 8009a04:	f3af 8000 	nop.w
 8009a08:	ffc00000 	.word	0xffc00000
 8009a0c:	41dfffff 	.word	0x41dfffff
 8009a10:	94a03595 	.word	0x94a03595
 8009a14:	3fcfffff 	.word	0x3fcfffff

08009a18 <_strtod_r>:
 8009a18:	4b01      	ldr	r3, [pc, #4]	@ (8009a20 <_strtod_r+0x8>)
 8009a1a:	f7ff ba19 	b.w	8008e50 <_strtod_l>
 8009a1e:	bf00      	nop
 8009a20:	20000078 	.word	0x20000078

08009a24 <_strtol_l.constprop.0>:
 8009a24:	2b24      	cmp	r3, #36	@ 0x24
 8009a26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a2a:	4686      	mov	lr, r0
 8009a2c:	4690      	mov	r8, r2
 8009a2e:	d801      	bhi.n	8009a34 <_strtol_l.constprop.0+0x10>
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d106      	bne.n	8009a42 <_strtol_l.constprop.0+0x1e>
 8009a34:	f7fd fd8e 	bl	8007554 <__errno>
 8009a38:	2316      	movs	r3, #22
 8009a3a:	6003      	str	r3, [r0, #0]
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a42:	4834      	ldr	r0, [pc, #208]	@ (8009b14 <_strtol_l.constprop.0+0xf0>)
 8009a44:	460d      	mov	r5, r1
 8009a46:	462a      	mov	r2, r5
 8009a48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a4c:	5d06      	ldrb	r6, [r0, r4]
 8009a4e:	f016 0608 	ands.w	r6, r6, #8
 8009a52:	d1f8      	bne.n	8009a46 <_strtol_l.constprop.0+0x22>
 8009a54:	2c2d      	cmp	r4, #45	@ 0x2d
 8009a56:	d12d      	bne.n	8009ab4 <_strtol_l.constprop.0+0x90>
 8009a58:	782c      	ldrb	r4, [r5, #0]
 8009a5a:	2601      	movs	r6, #1
 8009a5c:	1c95      	adds	r5, r2, #2
 8009a5e:	f033 0210 	bics.w	r2, r3, #16
 8009a62:	d109      	bne.n	8009a78 <_strtol_l.constprop.0+0x54>
 8009a64:	2c30      	cmp	r4, #48	@ 0x30
 8009a66:	d12a      	bne.n	8009abe <_strtol_l.constprop.0+0x9a>
 8009a68:	782a      	ldrb	r2, [r5, #0]
 8009a6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a6e:	2a58      	cmp	r2, #88	@ 0x58
 8009a70:	d125      	bne.n	8009abe <_strtol_l.constprop.0+0x9a>
 8009a72:	786c      	ldrb	r4, [r5, #1]
 8009a74:	2310      	movs	r3, #16
 8009a76:	3502      	adds	r5, #2
 8009a78:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009a7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009a80:	2200      	movs	r2, #0
 8009a82:	fbbc f9f3 	udiv	r9, ip, r3
 8009a86:	4610      	mov	r0, r2
 8009a88:	fb03 ca19 	mls	sl, r3, r9, ip
 8009a8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009a90:	2f09      	cmp	r7, #9
 8009a92:	d81b      	bhi.n	8009acc <_strtol_l.constprop.0+0xa8>
 8009a94:	463c      	mov	r4, r7
 8009a96:	42a3      	cmp	r3, r4
 8009a98:	dd27      	ble.n	8009aea <_strtol_l.constprop.0+0xc6>
 8009a9a:	1c57      	adds	r7, r2, #1
 8009a9c:	d007      	beq.n	8009aae <_strtol_l.constprop.0+0x8a>
 8009a9e:	4581      	cmp	r9, r0
 8009aa0:	d320      	bcc.n	8009ae4 <_strtol_l.constprop.0+0xc0>
 8009aa2:	d101      	bne.n	8009aa8 <_strtol_l.constprop.0+0x84>
 8009aa4:	45a2      	cmp	sl, r4
 8009aa6:	db1d      	blt.n	8009ae4 <_strtol_l.constprop.0+0xc0>
 8009aa8:	fb00 4003 	mla	r0, r0, r3, r4
 8009aac:	2201      	movs	r2, #1
 8009aae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ab2:	e7eb      	b.n	8009a8c <_strtol_l.constprop.0+0x68>
 8009ab4:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ab6:	bf04      	itt	eq
 8009ab8:	782c      	ldrbeq	r4, [r5, #0]
 8009aba:	1c95      	addeq	r5, r2, #2
 8009abc:	e7cf      	b.n	8009a5e <_strtol_l.constprop.0+0x3a>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1da      	bne.n	8009a78 <_strtol_l.constprop.0+0x54>
 8009ac2:	2c30      	cmp	r4, #48	@ 0x30
 8009ac4:	bf0c      	ite	eq
 8009ac6:	2308      	moveq	r3, #8
 8009ac8:	230a      	movne	r3, #10
 8009aca:	e7d5      	b.n	8009a78 <_strtol_l.constprop.0+0x54>
 8009acc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ad0:	2f19      	cmp	r7, #25
 8009ad2:	d801      	bhi.n	8009ad8 <_strtol_l.constprop.0+0xb4>
 8009ad4:	3c37      	subs	r4, #55	@ 0x37
 8009ad6:	e7de      	b.n	8009a96 <_strtol_l.constprop.0+0x72>
 8009ad8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009adc:	2f19      	cmp	r7, #25
 8009ade:	d804      	bhi.n	8009aea <_strtol_l.constprop.0+0xc6>
 8009ae0:	3c57      	subs	r4, #87	@ 0x57
 8009ae2:	e7d8      	b.n	8009a96 <_strtol_l.constprop.0+0x72>
 8009ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae8:	e7e1      	b.n	8009aae <_strtol_l.constprop.0+0x8a>
 8009aea:	1c53      	adds	r3, r2, #1
 8009aec:	d108      	bne.n	8009b00 <_strtol_l.constprop.0+0xdc>
 8009aee:	2322      	movs	r3, #34	@ 0x22
 8009af0:	f8ce 3000 	str.w	r3, [lr]
 8009af4:	4660      	mov	r0, ip
 8009af6:	f1b8 0f00 	cmp.w	r8, #0
 8009afa:	d0a0      	beq.n	8009a3e <_strtol_l.constprop.0+0x1a>
 8009afc:	1e69      	subs	r1, r5, #1
 8009afe:	e006      	b.n	8009b0e <_strtol_l.constprop.0+0xea>
 8009b00:	b106      	cbz	r6, 8009b04 <_strtol_l.constprop.0+0xe0>
 8009b02:	4240      	negs	r0, r0
 8009b04:	f1b8 0f00 	cmp.w	r8, #0
 8009b08:	d099      	beq.n	8009a3e <_strtol_l.constprop.0+0x1a>
 8009b0a:	2a00      	cmp	r2, #0
 8009b0c:	d1f6      	bne.n	8009afc <_strtol_l.constprop.0+0xd8>
 8009b0e:	f8c8 1000 	str.w	r1, [r8]
 8009b12:	e794      	b.n	8009a3e <_strtol_l.constprop.0+0x1a>
 8009b14:	080163b9 	.word	0x080163b9

08009b18 <_strtol_r>:
 8009b18:	f7ff bf84 	b.w	8009a24 <_strtol_l.constprop.0>

08009b1c <__ssputs_r>:
 8009b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b20:	688e      	ldr	r6, [r1, #8]
 8009b22:	461f      	mov	r7, r3
 8009b24:	42be      	cmp	r6, r7
 8009b26:	680b      	ldr	r3, [r1, #0]
 8009b28:	4682      	mov	sl, r0
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	4690      	mov	r8, r2
 8009b2e:	d82d      	bhi.n	8009b8c <__ssputs_r+0x70>
 8009b30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b38:	d026      	beq.n	8009b88 <__ssputs_r+0x6c>
 8009b3a:	6965      	ldr	r5, [r4, #20]
 8009b3c:	6909      	ldr	r1, [r1, #16]
 8009b3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b42:	eba3 0901 	sub.w	r9, r3, r1
 8009b46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b4a:	1c7b      	adds	r3, r7, #1
 8009b4c:	444b      	add	r3, r9
 8009b4e:	106d      	asrs	r5, r5, #1
 8009b50:	429d      	cmp	r5, r3
 8009b52:	bf38      	it	cc
 8009b54:	461d      	movcc	r5, r3
 8009b56:	0553      	lsls	r3, r2, #21
 8009b58:	d527      	bpl.n	8009baa <__ssputs_r+0x8e>
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	f7fe fc1c 	bl	8008398 <_malloc_r>
 8009b60:	4606      	mov	r6, r0
 8009b62:	b360      	cbz	r0, 8009bbe <__ssputs_r+0xa2>
 8009b64:	6921      	ldr	r1, [r4, #16]
 8009b66:	464a      	mov	r2, r9
 8009b68:	f7fd fd21 	bl	80075ae <memcpy>
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b76:	81a3      	strh	r3, [r4, #12]
 8009b78:	6126      	str	r6, [r4, #16]
 8009b7a:	6165      	str	r5, [r4, #20]
 8009b7c:	444e      	add	r6, r9
 8009b7e:	eba5 0509 	sub.w	r5, r5, r9
 8009b82:	6026      	str	r6, [r4, #0]
 8009b84:	60a5      	str	r5, [r4, #8]
 8009b86:	463e      	mov	r6, r7
 8009b88:	42be      	cmp	r6, r7
 8009b8a:	d900      	bls.n	8009b8e <__ssputs_r+0x72>
 8009b8c:	463e      	mov	r6, r7
 8009b8e:	6820      	ldr	r0, [r4, #0]
 8009b90:	4632      	mov	r2, r6
 8009b92:	4641      	mov	r1, r8
 8009b94:	f000 fb7c 	bl	800a290 <memmove>
 8009b98:	68a3      	ldr	r3, [r4, #8]
 8009b9a:	1b9b      	subs	r3, r3, r6
 8009b9c:	60a3      	str	r3, [r4, #8]
 8009b9e:	6823      	ldr	r3, [r4, #0]
 8009ba0:	4433      	add	r3, r6
 8009ba2:	6023      	str	r3, [r4, #0]
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009baa:	462a      	mov	r2, r5
 8009bac:	f000 ff3d 	bl	800aa2a <_realloc_r>
 8009bb0:	4606      	mov	r6, r0
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d1e0      	bne.n	8009b78 <__ssputs_r+0x5c>
 8009bb6:	6921      	ldr	r1, [r4, #16]
 8009bb8:	4650      	mov	r0, sl
 8009bba:	f7fe fb79 	bl	80082b0 <_free_r>
 8009bbe:	230c      	movs	r3, #12
 8009bc0:	f8ca 3000 	str.w	r3, [sl]
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bca:	81a3      	strh	r3, [r4, #12]
 8009bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd0:	e7e9      	b.n	8009ba6 <__ssputs_r+0x8a>
	...

08009bd4 <_svfiprintf_r>:
 8009bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd8:	4698      	mov	r8, r3
 8009bda:	898b      	ldrh	r3, [r1, #12]
 8009bdc:	061b      	lsls	r3, r3, #24
 8009bde:	b09d      	sub	sp, #116	@ 0x74
 8009be0:	4607      	mov	r7, r0
 8009be2:	460d      	mov	r5, r1
 8009be4:	4614      	mov	r4, r2
 8009be6:	d510      	bpl.n	8009c0a <_svfiprintf_r+0x36>
 8009be8:	690b      	ldr	r3, [r1, #16]
 8009bea:	b973      	cbnz	r3, 8009c0a <_svfiprintf_r+0x36>
 8009bec:	2140      	movs	r1, #64	@ 0x40
 8009bee:	f7fe fbd3 	bl	8008398 <_malloc_r>
 8009bf2:	6028      	str	r0, [r5, #0]
 8009bf4:	6128      	str	r0, [r5, #16]
 8009bf6:	b930      	cbnz	r0, 8009c06 <_svfiprintf_r+0x32>
 8009bf8:	230c      	movs	r3, #12
 8009bfa:	603b      	str	r3, [r7, #0]
 8009bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009c00:	b01d      	add	sp, #116	@ 0x74
 8009c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c06:	2340      	movs	r3, #64	@ 0x40
 8009c08:	616b      	str	r3, [r5, #20]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c0e:	2320      	movs	r3, #32
 8009c10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c14:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c18:	2330      	movs	r3, #48	@ 0x30
 8009c1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009db8 <_svfiprintf_r+0x1e4>
 8009c1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c22:	f04f 0901 	mov.w	r9, #1
 8009c26:	4623      	mov	r3, r4
 8009c28:	469a      	mov	sl, r3
 8009c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c2e:	b10a      	cbz	r2, 8009c34 <_svfiprintf_r+0x60>
 8009c30:	2a25      	cmp	r2, #37	@ 0x25
 8009c32:	d1f9      	bne.n	8009c28 <_svfiprintf_r+0x54>
 8009c34:	ebba 0b04 	subs.w	fp, sl, r4
 8009c38:	d00b      	beq.n	8009c52 <_svfiprintf_r+0x7e>
 8009c3a:	465b      	mov	r3, fp
 8009c3c:	4622      	mov	r2, r4
 8009c3e:	4629      	mov	r1, r5
 8009c40:	4638      	mov	r0, r7
 8009c42:	f7ff ff6b 	bl	8009b1c <__ssputs_r>
 8009c46:	3001      	adds	r0, #1
 8009c48:	f000 80a7 	beq.w	8009d9a <_svfiprintf_r+0x1c6>
 8009c4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c4e:	445a      	add	r2, fp
 8009c50:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c52:	f89a 3000 	ldrb.w	r3, [sl]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 809f 	beq.w	8009d9a <_svfiprintf_r+0x1c6>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c66:	f10a 0a01 	add.w	sl, sl, #1
 8009c6a:	9304      	str	r3, [sp, #16]
 8009c6c:	9307      	str	r3, [sp, #28]
 8009c6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c72:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c74:	4654      	mov	r4, sl
 8009c76:	2205      	movs	r2, #5
 8009c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c7c:	484e      	ldr	r0, [pc, #312]	@ (8009db8 <_svfiprintf_r+0x1e4>)
 8009c7e:	f7f6 faa7 	bl	80001d0 <memchr>
 8009c82:	9a04      	ldr	r2, [sp, #16]
 8009c84:	b9d8      	cbnz	r0, 8009cbe <_svfiprintf_r+0xea>
 8009c86:	06d0      	lsls	r0, r2, #27
 8009c88:	bf44      	itt	mi
 8009c8a:	2320      	movmi	r3, #32
 8009c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c90:	0711      	lsls	r1, r2, #28
 8009c92:	bf44      	itt	mi
 8009c94:	232b      	movmi	r3, #43	@ 0x2b
 8009c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ca0:	d015      	beq.n	8009cce <_svfiprintf_r+0xfa>
 8009ca2:	9a07      	ldr	r2, [sp, #28]
 8009ca4:	4654      	mov	r4, sl
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	f04f 0c0a 	mov.w	ip, #10
 8009cac:	4621      	mov	r1, r4
 8009cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cb2:	3b30      	subs	r3, #48	@ 0x30
 8009cb4:	2b09      	cmp	r3, #9
 8009cb6:	d94b      	bls.n	8009d50 <_svfiprintf_r+0x17c>
 8009cb8:	b1b0      	cbz	r0, 8009ce8 <_svfiprintf_r+0x114>
 8009cba:	9207      	str	r2, [sp, #28]
 8009cbc:	e014      	b.n	8009ce8 <_svfiprintf_r+0x114>
 8009cbe:	eba0 0308 	sub.w	r3, r0, r8
 8009cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	9304      	str	r3, [sp, #16]
 8009cca:	46a2      	mov	sl, r4
 8009ccc:	e7d2      	b.n	8009c74 <_svfiprintf_r+0xa0>
 8009cce:	9b03      	ldr	r3, [sp, #12]
 8009cd0:	1d19      	adds	r1, r3, #4
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	9103      	str	r1, [sp, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	bfbb      	ittet	lt
 8009cda:	425b      	neglt	r3, r3
 8009cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8009ce0:	9307      	strge	r3, [sp, #28]
 8009ce2:	9307      	strlt	r3, [sp, #28]
 8009ce4:	bfb8      	it	lt
 8009ce6:	9204      	strlt	r2, [sp, #16]
 8009ce8:	7823      	ldrb	r3, [r4, #0]
 8009cea:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cec:	d10a      	bne.n	8009d04 <_svfiprintf_r+0x130>
 8009cee:	7863      	ldrb	r3, [r4, #1]
 8009cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cf2:	d132      	bne.n	8009d5a <_svfiprintf_r+0x186>
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	1d1a      	adds	r2, r3, #4
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	9203      	str	r2, [sp, #12]
 8009cfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d00:	3402      	adds	r4, #2
 8009d02:	9305      	str	r3, [sp, #20]
 8009d04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009dc8 <_svfiprintf_r+0x1f4>
 8009d08:	7821      	ldrb	r1, [r4, #0]
 8009d0a:	2203      	movs	r2, #3
 8009d0c:	4650      	mov	r0, sl
 8009d0e:	f7f6 fa5f 	bl	80001d0 <memchr>
 8009d12:	b138      	cbz	r0, 8009d24 <_svfiprintf_r+0x150>
 8009d14:	9b04      	ldr	r3, [sp, #16]
 8009d16:	eba0 000a 	sub.w	r0, r0, sl
 8009d1a:	2240      	movs	r2, #64	@ 0x40
 8009d1c:	4082      	lsls	r2, r0
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	3401      	adds	r4, #1
 8009d22:	9304      	str	r3, [sp, #16]
 8009d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d28:	4824      	ldr	r0, [pc, #144]	@ (8009dbc <_svfiprintf_r+0x1e8>)
 8009d2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d2e:	2206      	movs	r2, #6
 8009d30:	f7f6 fa4e 	bl	80001d0 <memchr>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d036      	beq.n	8009da6 <_svfiprintf_r+0x1d2>
 8009d38:	4b21      	ldr	r3, [pc, #132]	@ (8009dc0 <_svfiprintf_r+0x1ec>)
 8009d3a:	bb1b      	cbnz	r3, 8009d84 <_svfiprintf_r+0x1b0>
 8009d3c:	9b03      	ldr	r3, [sp, #12]
 8009d3e:	3307      	adds	r3, #7
 8009d40:	f023 0307 	bic.w	r3, r3, #7
 8009d44:	3308      	adds	r3, #8
 8009d46:	9303      	str	r3, [sp, #12]
 8009d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d4a:	4433      	add	r3, r6
 8009d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d4e:	e76a      	b.n	8009c26 <_svfiprintf_r+0x52>
 8009d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d54:	460c      	mov	r4, r1
 8009d56:	2001      	movs	r0, #1
 8009d58:	e7a8      	b.n	8009cac <_svfiprintf_r+0xd8>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	3401      	adds	r4, #1
 8009d5e:	9305      	str	r3, [sp, #20]
 8009d60:	4619      	mov	r1, r3
 8009d62:	f04f 0c0a 	mov.w	ip, #10
 8009d66:	4620      	mov	r0, r4
 8009d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d6c:	3a30      	subs	r2, #48	@ 0x30
 8009d6e:	2a09      	cmp	r2, #9
 8009d70:	d903      	bls.n	8009d7a <_svfiprintf_r+0x1a6>
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d0c6      	beq.n	8009d04 <_svfiprintf_r+0x130>
 8009d76:	9105      	str	r1, [sp, #20]
 8009d78:	e7c4      	b.n	8009d04 <_svfiprintf_r+0x130>
 8009d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d7e:	4604      	mov	r4, r0
 8009d80:	2301      	movs	r3, #1
 8009d82:	e7f0      	b.n	8009d66 <_svfiprintf_r+0x192>
 8009d84:	ab03      	add	r3, sp, #12
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	462a      	mov	r2, r5
 8009d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8009dc4 <_svfiprintf_r+0x1f0>)
 8009d8c:	a904      	add	r1, sp, #16
 8009d8e:	4638      	mov	r0, r7
 8009d90:	f7fc fb98 	bl	80064c4 <_printf_float>
 8009d94:	1c42      	adds	r2, r0, #1
 8009d96:	4606      	mov	r6, r0
 8009d98:	d1d6      	bne.n	8009d48 <_svfiprintf_r+0x174>
 8009d9a:	89ab      	ldrh	r3, [r5, #12]
 8009d9c:	065b      	lsls	r3, r3, #25
 8009d9e:	f53f af2d 	bmi.w	8009bfc <_svfiprintf_r+0x28>
 8009da2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009da4:	e72c      	b.n	8009c00 <_svfiprintf_r+0x2c>
 8009da6:	ab03      	add	r3, sp, #12
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	462a      	mov	r2, r5
 8009dac:	4b05      	ldr	r3, [pc, #20]	@ (8009dc4 <_svfiprintf_r+0x1f0>)
 8009dae:	a904      	add	r1, sp, #16
 8009db0:	4638      	mov	r0, r7
 8009db2:	f7fc fe1f 	bl	80069f4 <_printf_i>
 8009db6:	e7ed      	b.n	8009d94 <_svfiprintf_r+0x1c0>
 8009db8:	080164b9 	.word	0x080164b9
 8009dbc:	080164c3 	.word	0x080164c3
 8009dc0:	080064c5 	.word	0x080064c5
 8009dc4:	08009b1d 	.word	0x08009b1d
 8009dc8:	080164bf 	.word	0x080164bf

08009dcc <__sfputc_r>:
 8009dcc:	6893      	ldr	r3, [r2, #8]
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	b410      	push	{r4}
 8009dd4:	6093      	str	r3, [r2, #8]
 8009dd6:	da08      	bge.n	8009dea <__sfputc_r+0x1e>
 8009dd8:	6994      	ldr	r4, [r2, #24]
 8009dda:	42a3      	cmp	r3, r4
 8009ddc:	db01      	blt.n	8009de2 <__sfputc_r+0x16>
 8009dde:	290a      	cmp	r1, #10
 8009de0:	d103      	bne.n	8009dea <__sfputc_r+0x1e>
 8009de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009de6:	f7fd bace 	b.w	8007386 <__swbuf_r>
 8009dea:	6813      	ldr	r3, [r2, #0]
 8009dec:	1c58      	adds	r0, r3, #1
 8009dee:	6010      	str	r0, [r2, #0]
 8009df0:	7019      	strb	r1, [r3, #0]
 8009df2:	4608      	mov	r0, r1
 8009df4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <__sfputs_r>:
 8009dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	460f      	mov	r7, r1
 8009e00:	4614      	mov	r4, r2
 8009e02:	18d5      	adds	r5, r2, r3
 8009e04:	42ac      	cmp	r4, r5
 8009e06:	d101      	bne.n	8009e0c <__sfputs_r+0x12>
 8009e08:	2000      	movs	r0, #0
 8009e0a:	e007      	b.n	8009e1c <__sfputs_r+0x22>
 8009e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e10:	463a      	mov	r2, r7
 8009e12:	4630      	mov	r0, r6
 8009e14:	f7ff ffda 	bl	8009dcc <__sfputc_r>
 8009e18:	1c43      	adds	r3, r0, #1
 8009e1a:	d1f3      	bne.n	8009e04 <__sfputs_r+0xa>
 8009e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e20 <_vfiprintf_r>:
 8009e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	460d      	mov	r5, r1
 8009e26:	b09d      	sub	sp, #116	@ 0x74
 8009e28:	4614      	mov	r4, r2
 8009e2a:	4698      	mov	r8, r3
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	b118      	cbz	r0, 8009e38 <_vfiprintf_r+0x18>
 8009e30:	6a03      	ldr	r3, [r0, #32]
 8009e32:	b90b      	cbnz	r3, 8009e38 <_vfiprintf_r+0x18>
 8009e34:	f7fd f99e 	bl	8007174 <__sinit>
 8009e38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e3a:	07d9      	lsls	r1, r3, #31
 8009e3c:	d405      	bmi.n	8009e4a <_vfiprintf_r+0x2a>
 8009e3e:	89ab      	ldrh	r3, [r5, #12]
 8009e40:	059a      	lsls	r2, r3, #22
 8009e42:	d402      	bmi.n	8009e4a <_vfiprintf_r+0x2a>
 8009e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e46:	f7fd fbb0 	bl	80075aa <__retarget_lock_acquire_recursive>
 8009e4a:	89ab      	ldrh	r3, [r5, #12]
 8009e4c:	071b      	lsls	r3, r3, #28
 8009e4e:	d501      	bpl.n	8009e54 <_vfiprintf_r+0x34>
 8009e50:	692b      	ldr	r3, [r5, #16]
 8009e52:	b99b      	cbnz	r3, 8009e7c <_vfiprintf_r+0x5c>
 8009e54:	4629      	mov	r1, r5
 8009e56:	4630      	mov	r0, r6
 8009e58:	f7fd fad4 	bl	8007404 <__swsetup_r>
 8009e5c:	b170      	cbz	r0, 8009e7c <_vfiprintf_r+0x5c>
 8009e5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e60:	07dc      	lsls	r4, r3, #31
 8009e62:	d504      	bpl.n	8009e6e <_vfiprintf_r+0x4e>
 8009e64:	f04f 30ff 	mov.w	r0, #4294967295
 8009e68:	b01d      	add	sp, #116	@ 0x74
 8009e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6e:	89ab      	ldrh	r3, [r5, #12]
 8009e70:	0598      	lsls	r0, r3, #22
 8009e72:	d4f7      	bmi.n	8009e64 <_vfiprintf_r+0x44>
 8009e74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e76:	f7fd fb99 	bl	80075ac <__retarget_lock_release_recursive>
 8009e7a:	e7f3      	b.n	8009e64 <_vfiprintf_r+0x44>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e80:	2320      	movs	r3, #32
 8009e82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e86:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e8a:	2330      	movs	r3, #48	@ 0x30
 8009e8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a03c <_vfiprintf_r+0x21c>
 8009e90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e94:	f04f 0901 	mov.w	r9, #1
 8009e98:	4623      	mov	r3, r4
 8009e9a:	469a      	mov	sl, r3
 8009e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ea0:	b10a      	cbz	r2, 8009ea6 <_vfiprintf_r+0x86>
 8009ea2:	2a25      	cmp	r2, #37	@ 0x25
 8009ea4:	d1f9      	bne.n	8009e9a <_vfiprintf_r+0x7a>
 8009ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8009eaa:	d00b      	beq.n	8009ec4 <_vfiprintf_r+0xa4>
 8009eac:	465b      	mov	r3, fp
 8009eae:	4622      	mov	r2, r4
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f7ff ffa1 	bl	8009dfa <__sfputs_r>
 8009eb8:	3001      	adds	r0, #1
 8009eba:	f000 80a7 	beq.w	800a00c <_vfiprintf_r+0x1ec>
 8009ebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ec0:	445a      	add	r2, fp
 8009ec2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 809f 	beq.w	800a00c <_vfiprintf_r+0x1ec>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ed8:	f10a 0a01 	add.w	sl, sl, #1
 8009edc:	9304      	str	r3, [sp, #16]
 8009ede:	9307      	str	r3, [sp, #28]
 8009ee0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ee4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ee6:	4654      	mov	r4, sl
 8009ee8:	2205      	movs	r2, #5
 8009eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eee:	4853      	ldr	r0, [pc, #332]	@ (800a03c <_vfiprintf_r+0x21c>)
 8009ef0:	f7f6 f96e 	bl	80001d0 <memchr>
 8009ef4:	9a04      	ldr	r2, [sp, #16]
 8009ef6:	b9d8      	cbnz	r0, 8009f30 <_vfiprintf_r+0x110>
 8009ef8:	06d1      	lsls	r1, r2, #27
 8009efa:	bf44      	itt	mi
 8009efc:	2320      	movmi	r3, #32
 8009efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f02:	0713      	lsls	r3, r2, #28
 8009f04:	bf44      	itt	mi
 8009f06:	232b      	movmi	r3, #43	@ 0x2b
 8009f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f10:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f12:	d015      	beq.n	8009f40 <_vfiprintf_r+0x120>
 8009f14:	9a07      	ldr	r2, [sp, #28]
 8009f16:	4654      	mov	r4, sl
 8009f18:	2000      	movs	r0, #0
 8009f1a:	f04f 0c0a 	mov.w	ip, #10
 8009f1e:	4621      	mov	r1, r4
 8009f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f24:	3b30      	subs	r3, #48	@ 0x30
 8009f26:	2b09      	cmp	r3, #9
 8009f28:	d94b      	bls.n	8009fc2 <_vfiprintf_r+0x1a2>
 8009f2a:	b1b0      	cbz	r0, 8009f5a <_vfiprintf_r+0x13a>
 8009f2c:	9207      	str	r2, [sp, #28]
 8009f2e:	e014      	b.n	8009f5a <_vfiprintf_r+0x13a>
 8009f30:	eba0 0308 	sub.w	r3, r0, r8
 8009f34:	fa09 f303 	lsl.w	r3, r9, r3
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	9304      	str	r3, [sp, #16]
 8009f3c:	46a2      	mov	sl, r4
 8009f3e:	e7d2      	b.n	8009ee6 <_vfiprintf_r+0xc6>
 8009f40:	9b03      	ldr	r3, [sp, #12]
 8009f42:	1d19      	adds	r1, r3, #4
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	9103      	str	r1, [sp, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	bfbb      	ittet	lt
 8009f4c:	425b      	neglt	r3, r3
 8009f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f52:	9307      	strge	r3, [sp, #28]
 8009f54:	9307      	strlt	r3, [sp, #28]
 8009f56:	bfb8      	it	lt
 8009f58:	9204      	strlt	r2, [sp, #16]
 8009f5a:	7823      	ldrb	r3, [r4, #0]
 8009f5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f5e:	d10a      	bne.n	8009f76 <_vfiprintf_r+0x156>
 8009f60:	7863      	ldrb	r3, [r4, #1]
 8009f62:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f64:	d132      	bne.n	8009fcc <_vfiprintf_r+0x1ac>
 8009f66:	9b03      	ldr	r3, [sp, #12]
 8009f68:	1d1a      	adds	r2, r3, #4
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	9203      	str	r2, [sp, #12]
 8009f6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f72:	3402      	adds	r4, #2
 8009f74:	9305      	str	r3, [sp, #20]
 8009f76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a04c <_vfiprintf_r+0x22c>
 8009f7a:	7821      	ldrb	r1, [r4, #0]
 8009f7c:	2203      	movs	r2, #3
 8009f7e:	4650      	mov	r0, sl
 8009f80:	f7f6 f926 	bl	80001d0 <memchr>
 8009f84:	b138      	cbz	r0, 8009f96 <_vfiprintf_r+0x176>
 8009f86:	9b04      	ldr	r3, [sp, #16]
 8009f88:	eba0 000a 	sub.w	r0, r0, sl
 8009f8c:	2240      	movs	r2, #64	@ 0x40
 8009f8e:	4082      	lsls	r2, r0
 8009f90:	4313      	orrs	r3, r2
 8009f92:	3401      	adds	r4, #1
 8009f94:	9304      	str	r3, [sp, #16]
 8009f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f9a:	4829      	ldr	r0, [pc, #164]	@ (800a040 <_vfiprintf_r+0x220>)
 8009f9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009fa0:	2206      	movs	r2, #6
 8009fa2:	f7f6 f915 	bl	80001d0 <memchr>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d03f      	beq.n	800a02a <_vfiprintf_r+0x20a>
 8009faa:	4b26      	ldr	r3, [pc, #152]	@ (800a044 <_vfiprintf_r+0x224>)
 8009fac:	bb1b      	cbnz	r3, 8009ff6 <_vfiprintf_r+0x1d6>
 8009fae:	9b03      	ldr	r3, [sp, #12]
 8009fb0:	3307      	adds	r3, #7
 8009fb2:	f023 0307 	bic.w	r3, r3, #7
 8009fb6:	3308      	adds	r3, #8
 8009fb8:	9303      	str	r3, [sp, #12]
 8009fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fbc:	443b      	add	r3, r7
 8009fbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fc0:	e76a      	b.n	8009e98 <_vfiprintf_r+0x78>
 8009fc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	2001      	movs	r0, #1
 8009fca:	e7a8      	b.n	8009f1e <_vfiprintf_r+0xfe>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	3401      	adds	r4, #1
 8009fd0:	9305      	str	r3, [sp, #20]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	f04f 0c0a 	mov.w	ip, #10
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fde:	3a30      	subs	r2, #48	@ 0x30
 8009fe0:	2a09      	cmp	r2, #9
 8009fe2:	d903      	bls.n	8009fec <_vfiprintf_r+0x1cc>
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d0c6      	beq.n	8009f76 <_vfiprintf_r+0x156>
 8009fe8:	9105      	str	r1, [sp, #20]
 8009fea:	e7c4      	b.n	8009f76 <_vfiprintf_r+0x156>
 8009fec:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e7f0      	b.n	8009fd8 <_vfiprintf_r+0x1b8>
 8009ff6:	ab03      	add	r3, sp, #12
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	462a      	mov	r2, r5
 8009ffc:	4b12      	ldr	r3, [pc, #72]	@ (800a048 <_vfiprintf_r+0x228>)
 8009ffe:	a904      	add	r1, sp, #16
 800a000:	4630      	mov	r0, r6
 800a002:	f7fc fa5f 	bl	80064c4 <_printf_float>
 800a006:	4607      	mov	r7, r0
 800a008:	1c78      	adds	r0, r7, #1
 800a00a:	d1d6      	bne.n	8009fba <_vfiprintf_r+0x19a>
 800a00c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a00e:	07d9      	lsls	r1, r3, #31
 800a010:	d405      	bmi.n	800a01e <_vfiprintf_r+0x1fe>
 800a012:	89ab      	ldrh	r3, [r5, #12]
 800a014:	059a      	lsls	r2, r3, #22
 800a016:	d402      	bmi.n	800a01e <_vfiprintf_r+0x1fe>
 800a018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a01a:	f7fd fac7 	bl	80075ac <__retarget_lock_release_recursive>
 800a01e:	89ab      	ldrh	r3, [r5, #12]
 800a020:	065b      	lsls	r3, r3, #25
 800a022:	f53f af1f 	bmi.w	8009e64 <_vfiprintf_r+0x44>
 800a026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a028:	e71e      	b.n	8009e68 <_vfiprintf_r+0x48>
 800a02a:	ab03      	add	r3, sp, #12
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	462a      	mov	r2, r5
 800a030:	4b05      	ldr	r3, [pc, #20]	@ (800a048 <_vfiprintf_r+0x228>)
 800a032:	a904      	add	r1, sp, #16
 800a034:	4630      	mov	r0, r6
 800a036:	f7fc fcdd 	bl	80069f4 <_printf_i>
 800a03a:	e7e4      	b.n	800a006 <_vfiprintf_r+0x1e6>
 800a03c:	080164b9 	.word	0x080164b9
 800a040:	080164c3 	.word	0x080164c3
 800a044:	080064c5 	.word	0x080064c5
 800a048:	08009dfb 	.word	0x08009dfb
 800a04c:	080164bf 	.word	0x080164bf

0800a050 <__sflush_r>:
 800a050:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a058:	0716      	lsls	r6, r2, #28
 800a05a:	4605      	mov	r5, r0
 800a05c:	460c      	mov	r4, r1
 800a05e:	d454      	bmi.n	800a10a <__sflush_r+0xba>
 800a060:	684b      	ldr	r3, [r1, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	dc02      	bgt.n	800a06c <__sflush_r+0x1c>
 800a066:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a068:	2b00      	cmp	r3, #0
 800a06a:	dd48      	ble.n	800a0fe <__sflush_r+0xae>
 800a06c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a06e:	2e00      	cmp	r6, #0
 800a070:	d045      	beq.n	800a0fe <__sflush_r+0xae>
 800a072:	2300      	movs	r3, #0
 800a074:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a078:	682f      	ldr	r7, [r5, #0]
 800a07a:	6a21      	ldr	r1, [r4, #32]
 800a07c:	602b      	str	r3, [r5, #0]
 800a07e:	d030      	beq.n	800a0e2 <__sflush_r+0x92>
 800a080:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a082:	89a3      	ldrh	r3, [r4, #12]
 800a084:	0759      	lsls	r1, r3, #29
 800a086:	d505      	bpl.n	800a094 <__sflush_r+0x44>
 800a088:	6863      	ldr	r3, [r4, #4]
 800a08a:	1ad2      	subs	r2, r2, r3
 800a08c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a08e:	b10b      	cbz	r3, 800a094 <__sflush_r+0x44>
 800a090:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a092:	1ad2      	subs	r2, r2, r3
 800a094:	2300      	movs	r3, #0
 800a096:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a098:	6a21      	ldr	r1, [r4, #32]
 800a09a:	4628      	mov	r0, r5
 800a09c:	47b0      	blx	r6
 800a09e:	1c43      	adds	r3, r0, #1
 800a0a0:	89a3      	ldrh	r3, [r4, #12]
 800a0a2:	d106      	bne.n	800a0b2 <__sflush_r+0x62>
 800a0a4:	6829      	ldr	r1, [r5, #0]
 800a0a6:	291d      	cmp	r1, #29
 800a0a8:	d82b      	bhi.n	800a102 <__sflush_r+0xb2>
 800a0aa:	4a2a      	ldr	r2, [pc, #168]	@ (800a154 <__sflush_r+0x104>)
 800a0ac:	410a      	asrs	r2, r1
 800a0ae:	07d6      	lsls	r6, r2, #31
 800a0b0:	d427      	bmi.n	800a102 <__sflush_r+0xb2>
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	6062      	str	r2, [r4, #4]
 800a0b6:	04d9      	lsls	r1, r3, #19
 800a0b8:	6922      	ldr	r2, [r4, #16]
 800a0ba:	6022      	str	r2, [r4, #0]
 800a0bc:	d504      	bpl.n	800a0c8 <__sflush_r+0x78>
 800a0be:	1c42      	adds	r2, r0, #1
 800a0c0:	d101      	bne.n	800a0c6 <__sflush_r+0x76>
 800a0c2:	682b      	ldr	r3, [r5, #0]
 800a0c4:	b903      	cbnz	r3, 800a0c8 <__sflush_r+0x78>
 800a0c6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0ca:	602f      	str	r7, [r5, #0]
 800a0cc:	b1b9      	cbz	r1, 800a0fe <__sflush_r+0xae>
 800a0ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0d2:	4299      	cmp	r1, r3
 800a0d4:	d002      	beq.n	800a0dc <__sflush_r+0x8c>
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f7fe f8ea 	bl	80082b0 <_free_r>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0e0:	e00d      	b.n	800a0fe <__sflush_r+0xae>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	47b0      	blx	r6
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	1c50      	adds	r0, r2, #1
 800a0ec:	d1c9      	bne.n	800a082 <__sflush_r+0x32>
 800a0ee:	682b      	ldr	r3, [r5, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d0c6      	beq.n	800a082 <__sflush_r+0x32>
 800a0f4:	2b1d      	cmp	r3, #29
 800a0f6:	d001      	beq.n	800a0fc <__sflush_r+0xac>
 800a0f8:	2b16      	cmp	r3, #22
 800a0fa:	d11e      	bne.n	800a13a <__sflush_r+0xea>
 800a0fc:	602f      	str	r7, [r5, #0]
 800a0fe:	2000      	movs	r0, #0
 800a100:	e022      	b.n	800a148 <__sflush_r+0xf8>
 800a102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a106:	b21b      	sxth	r3, r3
 800a108:	e01b      	b.n	800a142 <__sflush_r+0xf2>
 800a10a:	690f      	ldr	r7, [r1, #16]
 800a10c:	2f00      	cmp	r7, #0
 800a10e:	d0f6      	beq.n	800a0fe <__sflush_r+0xae>
 800a110:	0793      	lsls	r3, r2, #30
 800a112:	680e      	ldr	r6, [r1, #0]
 800a114:	bf08      	it	eq
 800a116:	694b      	ldreq	r3, [r1, #20]
 800a118:	600f      	str	r7, [r1, #0]
 800a11a:	bf18      	it	ne
 800a11c:	2300      	movne	r3, #0
 800a11e:	eba6 0807 	sub.w	r8, r6, r7
 800a122:	608b      	str	r3, [r1, #8]
 800a124:	f1b8 0f00 	cmp.w	r8, #0
 800a128:	dde9      	ble.n	800a0fe <__sflush_r+0xae>
 800a12a:	6a21      	ldr	r1, [r4, #32]
 800a12c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a12e:	4643      	mov	r3, r8
 800a130:	463a      	mov	r2, r7
 800a132:	4628      	mov	r0, r5
 800a134:	47b0      	blx	r6
 800a136:	2800      	cmp	r0, #0
 800a138:	dc08      	bgt.n	800a14c <__sflush_r+0xfc>
 800a13a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a13e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a142:	81a3      	strh	r3, [r4, #12]
 800a144:	f04f 30ff 	mov.w	r0, #4294967295
 800a148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a14c:	4407      	add	r7, r0
 800a14e:	eba8 0800 	sub.w	r8, r8, r0
 800a152:	e7e7      	b.n	800a124 <__sflush_r+0xd4>
 800a154:	dfbffffe 	.word	0xdfbffffe

0800a158 <_fflush_r>:
 800a158:	b538      	push	{r3, r4, r5, lr}
 800a15a:	690b      	ldr	r3, [r1, #16]
 800a15c:	4605      	mov	r5, r0
 800a15e:	460c      	mov	r4, r1
 800a160:	b913      	cbnz	r3, 800a168 <_fflush_r+0x10>
 800a162:	2500      	movs	r5, #0
 800a164:	4628      	mov	r0, r5
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	b118      	cbz	r0, 800a172 <_fflush_r+0x1a>
 800a16a:	6a03      	ldr	r3, [r0, #32]
 800a16c:	b90b      	cbnz	r3, 800a172 <_fflush_r+0x1a>
 800a16e:	f7fd f801 	bl	8007174 <__sinit>
 800a172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d0f3      	beq.n	800a162 <_fflush_r+0xa>
 800a17a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a17c:	07d0      	lsls	r0, r2, #31
 800a17e:	d404      	bmi.n	800a18a <_fflush_r+0x32>
 800a180:	0599      	lsls	r1, r3, #22
 800a182:	d402      	bmi.n	800a18a <_fflush_r+0x32>
 800a184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a186:	f7fd fa10 	bl	80075aa <__retarget_lock_acquire_recursive>
 800a18a:	4628      	mov	r0, r5
 800a18c:	4621      	mov	r1, r4
 800a18e:	f7ff ff5f 	bl	800a050 <__sflush_r>
 800a192:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a194:	07da      	lsls	r2, r3, #31
 800a196:	4605      	mov	r5, r0
 800a198:	d4e4      	bmi.n	800a164 <_fflush_r+0xc>
 800a19a:	89a3      	ldrh	r3, [r4, #12]
 800a19c:	059b      	lsls	r3, r3, #22
 800a19e:	d4e1      	bmi.n	800a164 <_fflush_r+0xc>
 800a1a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1a2:	f7fd fa03 	bl	80075ac <__retarget_lock_release_recursive>
 800a1a6:	e7dd      	b.n	800a164 <_fflush_r+0xc>

0800a1a8 <fiprintf>:
 800a1a8:	b40e      	push	{r1, r2, r3}
 800a1aa:	b503      	push	{r0, r1, lr}
 800a1ac:	4601      	mov	r1, r0
 800a1ae:	ab03      	add	r3, sp, #12
 800a1b0:	4805      	ldr	r0, [pc, #20]	@ (800a1c8 <fiprintf+0x20>)
 800a1b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1b6:	6800      	ldr	r0, [r0, #0]
 800a1b8:	9301      	str	r3, [sp, #4]
 800a1ba:	f7ff fe31 	bl	8009e20 <_vfiprintf_r>
 800a1be:	b002      	add	sp, #8
 800a1c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1c4:	b003      	add	sp, #12
 800a1c6:	4770      	bx	lr
 800a1c8:	20000028 	.word	0x20000028

0800a1cc <__swhatbuf_r>:
 800a1cc:	b570      	push	{r4, r5, r6, lr}
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d4:	2900      	cmp	r1, #0
 800a1d6:	b096      	sub	sp, #88	@ 0x58
 800a1d8:	4615      	mov	r5, r2
 800a1da:	461e      	mov	r6, r3
 800a1dc:	da0d      	bge.n	800a1fa <__swhatbuf_r+0x2e>
 800a1de:	89a3      	ldrh	r3, [r4, #12]
 800a1e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1e4:	f04f 0100 	mov.w	r1, #0
 800a1e8:	bf14      	ite	ne
 800a1ea:	2340      	movne	r3, #64	@ 0x40
 800a1ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	6031      	str	r1, [r6, #0]
 800a1f4:	602b      	str	r3, [r5, #0]
 800a1f6:	b016      	add	sp, #88	@ 0x58
 800a1f8:	bd70      	pop	{r4, r5, r6, pc}
 800a1fa:	466a      	mov	r2, sp
 800a1fc:	f000 f874 	bl	800a2e8 <_fstat_r>
 800a200:	2800      	cmp	r0, #0
 800a202:	dbec      	blt.n	800a1de <__swhatbuf_r+0x12>
 800a204:	9901      	ldr	r1, [sp, #4]
 800a206:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a20a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a20e:	4259      	negs	r1, r3
 800a210:	4159      	adcs	r1, r3
 800a212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a216:	e7eb      	b.n	800a1f0 <__swhatbuf_r+0x24>

0800a218 <__smakebuf_r>:
 800a218:	898b      	ldrh	r3, [r1, #12]
 800a21a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a21c:	079d      	lsls	r5, r3, #30
 800a21e:	4606      	mov	r6, r0
 800a220:	460c      	mov	r4, r1
 800a222:	d507      	bpl.n	800a234 <__smakebuf_r+0x1c>
 800a224:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	6123      	str	r3, [r4, #16]
 800a22c:	2301      	movs	r3, #1
 800a22e:	6163      	str	r3, [r4, #20]
 800a230:	b003      	add	sp, #12
 800a232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a234:	ab01      	add	r3, sp, #4
 800a236:	466a      	mov	r2, sp
 800a238:	f7ff ffc8 	bl	800a1cc <__swhatbuf_r>
 800a23c:	9f00      	ldr	r7, [sp, #0]
 800a23e:	4605      	mov	r5, r0
 800a240:	4639      	mov	r1, r7
 800a242:	4630      	mov	r0, r6
 800a244:	f7fe f8a8 	bl	8008398 <_malloc_r>
 800a248:	b948      	cbnz	r0, 800a25e <__smakebuf_r+0x46>
 800a24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a24e:	059a      	lsls	r2, r3, #22
 800a250:	d4ee      	bmi.n	800a230 <__smakebuf_r+0x18>
 800a252:	f023 0303 	bic.w	r3, r3, #3
 800a256:	f043 0302 	orr.w	r3, r3, #2
 800a25a:	81a3      	strh	r3, [r4, #12]
 800a25c:	e7e2      	b.n	800a224 <__smakebuf_r+0xc>
 800a25e:	89a3      	ldrh	r3, [r4, #12]
 800a260:	6020      	str	r0, [r4, #0]
 800a262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a266:	81a3      	strh	r3, [r4, #12]
 800a268:	9b01      	ldr	r3, [sp, #4]
 800a26a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a26e:	b15b      	cbz	r3, 800a288 <__smakebuf_r+0x70>
 800a270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a274:	4630      	mov	r0, r6
 800a276:	f000 f849 	bl	800a30c <_isatty_r>
 800a27a:	b128      	cbz	r0, 800a288 <__smakebuf_r+0x70>
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	f023 0303 	bic.w	r3, r3, #3
 800a282:	f043 0301 	orr.w	r3, r3, #1
 800a286:	81a3      	strh	r3, [r4, #12]
 800a288:	89a3      	ldrh	r3, [r4, #12]
 800a28a:	431d      	orrs	r5, r3
 800a28c:	81a5      	strh	r5, [r4, #12]
 800a28e:	e7cf      	b.n	800a230 <__smakebuf_r+0x18>

0800a290 <memmove>:
 800a290:	4288      	cmp	r0, r1
 800a292:	b510      	push	{r4, lr}
 800a294:	eb01 0402 	add.w	r4, r1, r2
 800a298:	d902      	bls.n	800a2a0 <memmove+0x10>
 800a29a:	4284      	cmp	r4, r0
 800a29c:	4623      	mov	r3, r4
 800a29e:	d807      	bhi.n	800a2b0 <memmove+0x20>
 800a2a0:	1e43      	subs	r3, r0, #1
 800a2a2:	42a1      	cmp	r1, r4
 800a2a4:	d008      	beq.n	800a2b8 <memmove+0x28>
 800a2a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2ae:	e7f8      	b.n	800a2a2 <memmove+0x12>
 800a2b0:	4402      	add	r2, r0
 800a2b2:	4601      	mov	r1, r0
 800a2b4:	428a      	cmp	r2, r1
 800a2b6:	d100      	bne.n	800a2ba <memmove+0x2a>
 800a2b8:	bd10      	pop	{r4, pc}
 800a2ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2c2:	e7f7      	b.n	800a2b4 <memmove+0x24>

0800a2c4 <strncmp>:
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	b16a      	cbz	r2, 800a2e4 <strncmp+0x20>
 800a2c8:	3901      	subs	r1, #1
 800a2ca:	1884      	adds	r4, r0, r2
 800a2cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2d0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d103      	bne.n	800a2e0 <strncmp+0x1c>
 800a2d8:	42a0      	cmp	r0, r4
 800a2da:	d001      	beq.n	800a2e0 <strncmp+0x1c>
 800a2dc:	2a00      	cmp	r2, #0
 800a2de:	d1f5      	bne.n	800a2cc <strncmp+0x8>
 800a2e0:	1ad0      	subs	r0, r2, r3
 800a2e2:	bd10      	pop	{r4, pc}
 800a2e4:	4610      	mov	r0, r2
 800a2e6:	e7fc      	b.n	800a2e2 <strncmp+0x1e>

0800a2e8 <_fstat_r>:
 800a2e8:	b538      	push	{r3, r4, r5, lr}
 800a2ea:	4d07      	ldr	r5, [pc, #28]	@ (800a308 <_fstat_r+0x20>)
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	4608      	mov	r0, r1
 800a2f2:	4611      	mov	r1, r2
 800a2f4:	602b      	str	r3, [r5, #0]
 800a2f6:	f7f9 f82b 	bl	8003350 <_fstat>
 800a2fa:	1c43      	adds	r3, r0, #1
 800a2fc:	d102      	bne.n	800a304 <_fstat_r+0x1c>
 800a2fe:	682b      	ldr	r3, [r5, #0]
 800a300:	b103      	cbz	r3, 800a304 <_fstat_r+0x1c>
 800a302:	6023      	str	r3, [r4, #0]
 800a304:	bd38      	pop	{r3, r4, r5, pc}
 800a306:	bf00      	nop
 800a308:	20000424 	.word	0x20000424

0800a30c <_isatty_r>:
 800a30c:	b538      	push	{r3, r4, r5, lr}
 800a30e:	4d06      	ldr	r5, [pc, #24]	@ (800a328 <_isatty_r+0x1c>)
 800a310:	2300      	movs	r3, #0
 800a312:	4604      	mov	r4, r0
 800a314:	4608      	mov	r0, r1
 800a316:	602b      	str	r3, [r5, #0]
 800a318:	f7f9 f82a 	bl	8003370 <_isatty>
 800a31c:	1c43      	adds	r3, r0, #1
 800a31e:	d102      	bne.n	800a326 <_isatty_r+0x1a>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	b103      	cbz	r3, 800a326 <_isatty_r+0x1a>
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	20000424 	.word	0x20000424

0800a32c <_sbrk_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4d06      	ldr	r5, [pc, #24]	@ (800a348 <_sbrk_r+0x1c>)
 800a330:	2300      	movs	r3, #0
 800a332:	4604      	mov	r4, r0
 800a334:	4608      	mov	r0, r1
 800a336:	602b      	str	r3, [r5, #0]
 800a338:	f7f9 f832 	bl	80033a0 <_sbrk>
 800a33c:	1c43      	adds	r3, r0, #1
 800a33e:	d102      	bne.n	800a346 <_sbrk_r+0x1a>
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	b103      	cbz	r3, 800a346 <_sbrk_r+0x1a>
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	bd38      	pop	{r3, r4, r5, pc}
 800a348:	20000424 	.word	0x20000424
 800a34c:	00000000 	.word	0x00000000

0800a350 <nan>:
 800a350:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a358 <nan+0x8>
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	00000000 	.word	0x00000000
 800a35c:	7ff80000 	.word	0x7ff80000

0800a360 <abort>:
 800a360:	b508      	push	{r3, lr}
 800a362:	2006      	movs	r0, #6
 800a364:	f000 fbc4 	bl	800aaf0 <raise>
 800a368:	2001      	movs	r0, #1
 800a36a:	f7f8 ffa1 	bl	80032b0 <_exit>

0800a36e <_calloc_r>:
 800a36e:	b570      	push	{r4, r5, r6, lr}
 800a370:	fba1 5402 	umull	r5, r4, r1, r2
 800a374:	b93c      	cbnz	r4, 800a386 <_calloc_r+0x18>
 800a376:	4629      	mov	r1, r5
 800a378:	f7fe f80e 	bl	8008398 <_malloc_r>
 800a37c:	4606      	mov	r6, r0
 800a37e:	b928      	cbnz	r0, 800a38c <_calloc_r+0x1e>
 800a380:	2600      	movs	r6, #0
 800a382:	4630      	mov	r0, r6
 800a384:	bd70      	pop	{r4, r5, r6, pc}
 800a386:	220c      	movs	r2, #12
 800a388:	6002      	str	r2, [r0, #0]
 800a38a:	e7f9      	b.n	800a380 <_calloc_r+0x12>
 800a38c:	462a      	mov	r2, r5
 800a38e:	4621      	mov	r1, r4
 800a390:	f7fd f88e 	bl	80074b0 <memset>
 800a394:	e7f5      	b.n	800a382 <_calloc_r+0x14>

0800a396 <rshift>:
 800a396:	6903      	ldr	r3, [r0, #16]
 800a398:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a39c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3a0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3a4:	f100 0414 	add.w	r4, r0, #20
 800a3a8:	dd45      	ble.n	800a436 <rshift+0xa0>
 800a3aa:	f011 011f 	ands.w	r1, r1, #31
 800a3ae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3b2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3b6:	d10c      	bne.n	800a3d2 <rshift+0x3c>
 800a3b8:	f100 0710 	add.w	r7, r0, #16
 800a3bc:	4629      	mov	r1, r5
 800a3be:	42b1      	cmp	r1, r6
 800a3c0:	d334      	bcc.n	800a42c <rshift+0x96>
 800a3c2:	1a9b      	subs	r3, r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	1eea      	subs	r2, r5, #3
 800a3c8:	4296      	cmp	r6, r2
 800a3ca:	bf38      	it	cc
 800a3cc:	2300      	movcc	r3, #0
 800a3ce:	4423      	add	r3, r4
 800a3d0:	e015      	b.n	800a3fe <rshift+0x68>
 800a3d2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a3d6:	f1c1 0820 	rsb	r8, r1, #32
 800a3da:	40cf      	lsrs	r7, r1
 800a3dc:	f105 0e04 	add.w	lr, r5, #4
 800a3e0:	46a1      	mov	r9, r4
 800a3e2:	4576      	cmp	r6, lr
 800a3e4:	46f4      	mov	ip, lr
 800a3e6:	d815      	bhi.n	800a414 <rshift+0x7e>
 800a3e8:	1a9a      	subs	r2, r3, r2
 800a3ea:	0092      	lsls	r2, r2, #2
 800a3ec:	3a04      	subs	r2, #4
 800a3ee:	3501      	adds	r5, #1
 800a3f0:	42ae      	cmp	r6, r5
 800a3f2:	bf38      	it	cc
 800a3f4:	2200      	movcc	r2, #0
 800a3f6:	18a3      	adds	r3, r4, r2
 800a3f8:	50a7      	str	r7, [r4, r2]
 800a3fa:	b107      	cbz	r7, 800a3fe <rshift+0x68>
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	1b1a      	subs	r2, r3, r4
 800a400:	42a3      	cmp	r3, r4
 800a402:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a406:	bf08      	it	eq
 800a408:	2300      	moveq	r3, #0
 800a40a:	6102      	str	r2, [r0, #16]
 800a40c:	bf08      	it	eq
 800a40e:	6143      	streq	r3, [r0, #20]
 800a410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a414:	f8dc c000 	ldr.w	ip, [ip]
 800a418:	fa0c fc08 	lsl.w	ip, ip, r8
 800a41c:	ea4c 0707 	orr.w	r7, ip, r7
 800a420:	f849 7b04 	str.w	r7, [r9], #4
 800a424:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a428:	40cf      	lsrs	r7, r1
 800a42a:	e7da      	b.n	800a3e2 <rshift+0x4c>
 800a42c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a430:	f847 cf04 	str.w	ip, [r7, #4]!
 800a434:	e7c3      	b.n	800a3be <rshift+0x28>
 800a436:	4623      	mov	r3, r4
 800a438:	e7e1      	b.n	800a3fe <rshift+0x68>

0800a43a <__hexdig_fun>:
 800a43a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a43e:	2b09      	cmp	r3, #9
 800a440:	d802      	bhi.n	800a448 <__hexdig_fun+0xe>
 800a442:	3820      	subs	r0, #32
 800a444:	b2c0      	uxtb	r0, r0
 800a446:	4770      	bx	lr
 800a448:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a44c:	2b05      	cmp	r3, #5
 800a44e:	d801      	bhi.n	800a454 <__hexdig_fun+0x1a>
 800a450:	3847      	subs	r0, #71	@ 0x47
 800a452:	e7f7      	b.n	800a444 <__hexdig_fun+0xa>
 800a454:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a458:	2b05      	cmp	r3, #5
 800a45a:	d801      	bhi.n	800a460 <__hexdig_fun+0x26>
 800a45c:	3827      	subs	r0, #39	@ 0x27
 800a45e:	e7f1      	b.n	800a444 <__hexdig_fun+0xa>
 800a460:	2000      	movs	r0, #0
 800a462:	4770      	bx	lr

0800a464 <__gethex>:
 800a464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a468:	b085      	sub	sp, #20
 800a46a:	468a      	mov	sl, r1
 800a46c:	9302      	str	r3, [sp, #8]
 800a46e:	680b      	ldr	r3, [r1, #0]
 800a470:	9001      	str	r0, [sp, #4]
 800a472:	4690      	mov	r8, r2
 800a474:	1c9c      	adds	r4, r3, #2
 800a476:	46a1      	mov	r9, r4
 800a478:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a47c:	2830      	cmp	r0, #48	@ 0x30
 800a47e:	d0fa      	beq.n	800a476 <__gethex+0x12>
 800a480:	eba9 0303 	sub.w	r3, r9, r3
 800a484:	f1a3 0b02 	sub.w	fp, r3, #2
 800a488:	f7ff ffd7 	bl	800a43a <__hexdig_fun>
 800a48c:	4605      	mov	r5, r0
 800a48e:	2800      	cmp	r0, #0
 800a490:	d168      	bne.n	800a564 <__gethex+0x100>
 800a492:	49a0      	ldr	r1, [pc, #640]	@ (800a714 <__gethex+0x2b0>)
 800a494:	2201      	movs	r2, #1
 800a496:	4648      	mov	r0, r9
 800a498:	f7ff ff14 	bl	800a2c4 <strncmp>
 800a49c:	4607      	mov	r7, r0
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	d167      	bne.n	800a572 <__gethex+0x10e>
 800a4a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a4a6:	4626      	mov	r6, r4
 800a4a8:	f7ff ffc7 	bl	800a43a <__hexdig_fun>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d062      	beq.n	800a576 <__gethex+0x112>
 800a4b0:	4623      	mov	r3, r4
 800a4b2:	7818      	ldrb	r0, [r3, #0]
 800a4b4:	2830      	cmp	r0, #48	@ 0x30
 800a4b6:	4699      	mov	r9, r3
 800a4b8:	f103 0301 	add.w	r3, r3, #1
 800a4bc:	d0f9      	beq.n	800a4b2 <__gethex+0x4e>
 800a4be:	f7ff ffbc 	bl	800a43a <__hexdig_fun>
 800a4c2:	fab0 f580 	clz	r5, r0
 800a4c6:	096d      	lsrs	r5, r5, #5
 800a4c8:	f04f 0b01 	mov.w	fp, #1
 800a4cc:	464a      	mov	r2, r9
 800a4ce:	4616      	mov	r6, r2
 800a4d0:	3201      	adds	r2, #1
 800a4d2:	7830      	ldrb	r0, [r6, #0]
 800a4d4:	f7ff ffb1 	bl	800a43a <__hexdig_fun>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d1f8      	bne.n	800a4ce <__gethex+0x6a>
 800a4dc:	498d      	ldr	r1, [pc, #564]	@ (800a714 <__gethex+0x2b0>)
 800a4de:	2201      	movs	r2, #1
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	f7ff feef 	bl	800a2c4 <strncmp>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	d13f      	bne.n	800a56a <__gethex+0x106>
 800a4ea:	b944      	cbnz	r4, 800a4fe <__gethex+0x9a>
 800a4ec:	1c74      	adds	r4, r6, #1
 800a4ee:	4622      	mov	r2, r4
 800a4f0:	4616      	mov	r6, r2
 800a4f2:	3201      	adds	r2, #1
 800a4f4:	7830      	ldrb	r0, [r6, #0]
 800a4f6:	f7ff ffa0 	bl	800a43a <__hexdig_fun>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d1f8      	bne.n	800a4f0 <__gethex+0x8c>
 800a4fe:	1ba4      	subs	r4, r4, r6
 800a500:	00a7      	lsls	r7, r4, #2
 800a502:	7833      	ldrb	r3, [r6, #0]
 800a504:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a508:	2b50      	cmp	r3, #80	@ 0x50
 800a50a:	d13e      	bne.n	800a58a <__gethex+0x126>
 800a50c:	7873      	ldrb	r3, [r6, #1]
 800a50e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a510:	d033      	beq.n	800a57a <__gethex+0x116>
 800a512:	2b2d      	cmp	r3, #45	@ 0x2d
 800a514:	d034      	beq.n	800a580 <__gethex+0x11c>
 800a516:	1c71      	adds	r1, r6, #1
 800a518:	2400      	movs	r4, #0
 800a51a:	7808      	ldrb	r0, [r1, #0]
 800a51c:	f7ff ff8d 	bl	800a43a <__hexdig_fun>
 800a520:	1e43      	subs	r3, r0, #1
 800a522:	b2db      	uxtb	r3, r3
 800a524:	2b18      	cmp	r3, #24
 800a526:	d830      	bhi.n	800a58a <__gethex+0x126>
 800a528:	f1a0 0210 	sub.w	r2, r0, #16
 800a52c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a530:	f7ff ff83 	bl	800a43a <__hexdig_fun>
 800a534:	f100 3cff 	add.w	ip, r0, #4294967295
 800a538:	fa5f fc8c 	uxtb.w	ip, ip
 800a53c:	f1bc 0f18 	cmp.w	ip, #24
 800a540:	f04f 030a 	mov.w	r3, #10
 800a544:	d91e      	bls.n	800a584 <__gethex+0x120>
 800a546:	b104      	cbz	r4, 800a54a <__gethex+0xe6>
 800a548:	4252      	negs	r2, r2
 800a54a:	4417      	add	r7, r2
 800a54c:	f8ca 1000 	str.w	r1, [sl]
 800a550:	b1ed      	cbz	r5, 800a58e <__gethex+0x12a>
 800a552:	f1bb 0f00 	cmp.w	fp, #0
 800a556:	bf0c      	ite	eq
 800a558:	2506      	moveq	r5, #6
 800a55a:	2500      	movne	r5, #0
 800a55c:	4628      	mov	r0, r5
 800a55e:	b005      	add	sp, #20
 800a560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a564:	2500      	movs	r5, #0
 800a566:	462c      	mov	r4, r5
 800a568:	e7b0      	b.n	800a4cc <__gethex+0x68>
 800a56a:	2c00      	cmp	r4, #0
 800a56c:	d1c7      	bne.n	800a4fe <__gethex+0x9a>
 800a56e:	4627      	mov	r7, r4
 800a570:	e7c7      	b.n	800a502 <__gethex+0x9e>
 800a572:	464e      	mov	r6, r9
 800a574:	462f      	mov	r7, r5
 800a576:	2501      	movs	r5, #1
 800a578:	e7c3      	b.n	800a502 <__gethex+0x9e>
 800a57a:	2400      	movs	r4, #0
 800a57c:	1cb1      	adds	r1, r6, #2
 800a57e:	e7cc      	b.n	800a51a <__gethex+0xb6>
 800a580:	2401      	movs	r4, #1
 800a582:	e7fb      	b.n	800a57c <__gethex+0x118>
 800a584:	fb03 0002 	mla	r0, r3, r2, r0
 800a588:	e7ce      	b.n	800a528 <__gethex+0xc4>
 800a58a:	4631      	mov	r1, r6
 800a58c:	e7de      	b.n	800a54c <__gethex+0xe8>
 800a58e:	eba6 0309 	sub.w	r3, r6, r9
 800a592:	3b01      	subs	r3, #1
 800a594:	4629      	mov	r1, r5
 800a596:	2b07      	cmp	r3, #7
 800a598:	dc0a      	bgt.n	800a5b0 <__gethex+0x14c>
 800a59a:	9801      	ldr	r0, [sp, #4]
 800a59c:	f7fd ff88 	bl	80084b0 <_Balloc>
 800a5a0:	4604      	mov	r4, r0
 800a5a2:	b940      	cbnz	r0, 800a5b6 <__gethex+0x152>
 800a5a4:	4b5c      	ldr	r3, [pc, #368]	@ (800a718 <__gethex+0x2b4>)
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	21e4      	movs	r1, #228	@ 0xe4
 800a5aa:	485c      	ldr	r0, [pc, #368]	@ (800a71c <__gethex+0x2b8>)
 800a5ac:	f7fd f814 	bl	80075d8 <__assert_func>
 800a5b0:	3101      	adds	r1, #1
 800a5b2:	105b      	asrs	r3, r3, #1
 800a5b4:	e7ef      	b.n	800a596 <__gethex+0x132>
 800a5b6:	f100 0a14 	add.w	sl, r0, #20
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	4655      	mov	r5, sl
 800a5be:	469b      	mov	fp, r3
 800a5c0:	45b1      	cmp	r9, r6
 800a5c2:	d337      	bcc.n	800a634 <__gethex+0x1d0>
 800a5c4:	f845 bb04 	str.w	fp, [r5], #4
 800a5c8:	eba5 050a 	sub.w	r5, r5, sl
 800a5cc:	10ad      	asrs	r5, r5, #2
 800a5ce:	6125      	str	r5, [r4, #16]
 800a5d0:	4658      	mov	r0, fp
 800a5d2:	f7fe f85f 	bl	8008694 <__hi0bits>
 800a5d6:	016d      	lsls	r5, r5, #5
 800a5d8:	f8d8 6000 	ldr.w	r6, [r8]
 800a5dc:	1a2d      	subs	r5, r5, r0
 800a5de:	42b5      	cmp	r5, r6
 800a5e0:	dd54      	ble.n	800a68c <__gethex+0x228>
 800a5e2:	1bad      	subs	r5, r5, r6
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f7fe fbf3 	bl	8008dd2 <__any_on>
 800a5ec:	4681      	mov	r9, r0
 800a5ee:	b178      	cbz	r0, 800a610 <__gethex+0x1ac>
 800a5f0:	1e6b      	subs	r3, r5, #1
 800a5f2:	1159      	asrs	r1, r3, #5
 800a5f4:	f003 021f 	and.w	r2, r3, #31
 800a5f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a5fc:	f04f 0901 	mov.w	r9, #1
 800a600:	fa09 f202 	lsl.w	r2, r9, r2
 800a604:	420a      	tst	r2, r1
 800a606:	d003      	beq.n	800a610 <__gethex+0x1ac>
 800a608:	454b      	cmp	r3, r9
 800a60a:	dc36      	bgt.n	800a67a <__gethex+0x216>
 800a60c:	f04f 0902 	mov.w	r9, #2
 800a610:	4629      	mov	r1, r5
 800a612:	4620      	mov	r0, r4
 800a614:	f7ff febf 	bl	800a396 <rshift>
 800a618:	442f      	add	r7, r5
 800a61a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a61e:	42bb      	cmp	r3, r7
 800a620:	da42      	bge.n	800a6a8 <__gethex+0x244>
 800a622:	9801      	ldr	r0, [sp, #4]
 800a624:	4621      	mov	r1, r4
 800a626:	f7fd ff83 	bl	8008530 <_Bfree>
 800a62a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a62c:	2300      	movs	r3, #0
 800a62e:	6013      	str	r3, [r2, #0]
 800a630:	25a3      	movs	r5, #163	@ 0xa3
 800a632:	e793      	b.n	800a55c <__gethex+0xf8>
 800a634:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a638:	2a2e      	cmp	r2, #46	@ 0x2e
 800a63a:	d012      	beq.n	800a662 <__gethex+0x1fe>
 800a63c:	2b20      	cmp	r3, #32
 800a63e:	d104      	bne.n	800a64a <__gethex+0x1e6>
 800a640:	f845 bb04 	str.w	fp, [r5], #4
 800a644:	f04f 0b00 	mov.w	fp, #0
 800a648:	465b      	mov	r3, fp
 800a64a:	7830      	ldrb	r0, [r6, #0]
 800a64c:	9303      	str	r3, [sp, #12]
 800a64e:	f7ff fef4 	bl	800a43a <__hexdig_fun>
 800a652:	9b03      	ldr	r3, [sp, #12]
 800a654:	f000 000f 	and.w	r0, r0, #15
 800a658:	4098      	lsls	r0, r3
 800a65a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a65e:	3304      	adds	r3, #4
 800a660:	e7ae      	b.n	800a5c0 <__gethex+0x15c>
 800a662:	45b1      	cmp	r9, r6
 800a664:	d8ea      	bhi.n	800a63c <__gethex+0x1d8>
 800a666:	492b      	ldr	r1, [pc, #172]	@ (800a714 <__gethex+0x2b0>)
 800a668:	9303      	str	r3, [sp, #12]
 800a66a:	2201      	movs	r2, #1
 800a66c:	4630      	mov	r0, r6
 800a66e:	f7ff fe29 	bl	800a2c4 <strncmp>
 800a672:	9b03      	ldr	r3, [sp, #12]
 800a674:	2800      	cmp	r0, #0
 800a676:	d1e1      	bne.n	800a63c <__gethex+0x1d8>
 800a678:	e7a2      	b.n	800a5c0 <__gethex+0x15c>
 800a67a:	1ea9      	subs	r1, r5, #2
 800a67c:	4620      	mov	r0, r4
 800a67e:	f7fe fba8 	bl	8008dd2 <__any_on>
 800a682:	2800      	cmp	r0, #0
 800a684:	d0c2      	beq.n	800a60c <__gethex+0x1a8>
 800a686:	f04f 0903 	mov.w	r9, #3
 800a68a:	e7c1      	b.n	800a610 <__gethex+0x1ac>
 800a68c:	da09      	bge.n	800a6a2 <__gethex+0x23e>
 800a68e:	1b75      	subs	r5, r6, r5
 800a690:	4621      	mov	r1, r4
 800a692:	9801      	ldr	r0, [sp, #4]
 800a694:	462a      	mov	r2, r5
 800a696:	f7fe f963 	bl	8008960 <__lshift>
 800a69a:	1b7f      	subs	r7, r7, r5
 800a69c:	4604      	mov	r4, r0
 800a69e:	f100 0a14 	add.w	sl, r0, #20
 800a6a2:	f04f 0900 	mov.w	r9, #0
 800a6a6:	e7b8      	b.n	800a61a <__gethex+0x1b6>
 800a6a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a6ac:	42bd      	cmp	r5, r7
 800a6ae:	dd6f      	ble.n	800a790 <__gethex+0x32c>
 800a6b0:	1bed      	subs	r5, r5, r7
 800a6b2:	42ae      	cmp	r6, r5
 800a6b4:	dc34      	bgt.n	800a720 <__gethex+0x2bc>
 800a6b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d022      	beq.n	800a704 <__gethex+0x2a0>
 800a6be:	2b03      	cmp	r3, #3
 800a6c0:	d024      	beq.n	800a70c <__gethex+0x2a8>
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d115      	bne.n	800a6f2 <__gethex+0x28e>
 800a6c6:	42ae      	cmp	r6, r5
 800a6c8:	d113      	bne.n	800a6f2 <__gethex+0x28e>
 800a6ca:	2e01      	cmp	r6, #1
 800a6cc:	d10b      	bne.n	800a6e6 <__gethex+0x282>
 800a6ce:	9a02      	ldr	r2, [sp, #8]
 800a6d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	6123      	str	r3, [r4, #16]
 800a6da:	f8ca 3000 	str.w	r3, [sl]
 800a6de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6e0:	2562      	movs	r5, #98	@ 0x62
 800a6e2:	601c      	str	r4, [r3, #0]
 800a6e4:	e73a      	b.n	800a55c <__gethex+0xf8>
 800a6e6:	1e71      	subs	r1, r6, #1
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f7fe fb72 	bl	8008dd2 <__any_on>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d1ed      	bne.n	800a6ce <__gethex+0x26a>
 800a6f2:	9801      	ldr	r0, [sp, #4]
 800a6f4:	4621      	mov	r1, r4
 800a6f6:	f7fd ff1b 	bl	8008530 <_Bfree>
 800a6fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	6013      	str	r3, [r2, #0]
 800a700:	2550      	movs	r5, #80	@ 0x50
 800a702:	e72b      	b.n	800a55c <__gethex+0xf8>
 800a704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1f3      	bne.n	800a6f2 <__gethex+0x28e>
 800a70a:	e7e0      	b.n	800a6ce <__gethex+0x26a>
 800a70c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1dd      	bne.n	800a6ce <__gethex+0x26a>
 800a712:	e7ee      	b.n	800a6f2 <__gethex+0x28e>
 800a714:	08016360 	.word	0x08016360
 800a718:	080161f5 	.word	0x080161f5
 800a71c:	080164d2 	.word	0x080164d2
 800a720:	1e6f      	subs	r7, r5, #1
 800a722:	f1b9 0f00 	cmp.w	r9, #0
 800a726:	d130      	bne.n	800a78a <__gethex+0x326>
 800a728:	b127      	cbz	r7, 800a734 <__gethex+0x2d0>
 800a72a:	4639      	mov	r1, r7
 800a72c:	4620      	mov	r0, r4
 800a72e:	f7fe fb50 	bl	8008dd2 <__any_on>
 800a732:	4681      	mov	r9, r0
 800a734:	117a      	asrs	r2, r7, #5
 800a736:	2301      	movs	r3, #1
 800a738:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a73c:	f007 071f 	and.w	r7, r7, #31
 800a740:	40bb      	lsls	r3, r7
 800a742:	4213      	tst	r3, r2
 800a744:	4629      	mov	r1, r5
 800a746:	4620      	mov	r0, r4
 800a748:	bf18      	it	ne
 800a74a:	f049 0902 	orrne.w	r9, r9, #2
 800a74e:	f7ff fe22 	bl	800a396 <rshift>
 800a752:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a756:	1b76      	subs	r6, r6, r5
 800a758:	2502      	movs	r5, #2
 800a75a:	f1b9 0f00 	cmp.w	r9, #0
 800a75e:	d047      	beq.n	800a7f0 <__gethex+0x38c>
 800a760:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a764:	2b02      	cmp	r3, #2
 800a766:	d015      	beq.n	800a794 <__gethex+0x330>
 800a768:	2b03      	cmp	r3, #3
 800a76a:	d017      	beq.n	800a79c <__gethex+0x338>
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d109      	bne.n	800a784 <__gethex+0x320>
 800a770:	f019 0f02 	tst.w	r9, #2
 800a774:	d006      	beq.n	800a784 <__gethex+0x320>
 800a776:	f8da 3000 	ldr.w	r3, [sl]
 800a77a:	ea49 0903 	orr.w	r9, r9, r3
 800a77e:	f019 0f01 	tst.w	r9, #1
 800a782:	d10e      	bne.n	800a7a2 <__gethex+0x33e>
 800a784:	f045 0510 	orr.w	r5, r5, #16
 800a788:	e032      	b.n	800a7f0 <__gethex+0x38c>
 800a78a:	f04f 0901 	mov.w	r9, #1
 800a78e:	e7d1      	b.n	800a734 <__gethex+0x2d0>
 800a790:	2501      	movs	r5, #1
 800a792:	e7e2      	b.n	800a75a <__gethex+0x2f6>
 800a794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a796:	f1c3 0301 	rsb	r3, r3, #1
 800a79a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d0f0      	beq.n	800a784 <__gethex+0x320>
 800a7a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a7a6:	f104 0314 	add.w	r3, r4, #20
 800a7aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a7ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a7b2:	f04f 0c00 	mov.w	ip, #0
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a7c0:	d01b      	beq.n	800a7fa <__gethex+0x396>
 800a7c2:	3201      	adds	r2, #1
 800a7c4:	6002      	str	r2, [r0, #0]
 800a7c6:	2d02      	cmp	r5, #2
 800a7c8:	f104 0314 	add.w	r3, r4, #20
 800a7cc:	d13c      	bne.n	800a848 <__gethex+0x3e4>
 800a7ce:	f8d8 2000 	ldr.w	r2, [r8]
 800a7d2:	3a01      	subs	r2, #1
 800a7d4:	42b2      	cmp	r2, r6
 800a7d6:	d109      	bne.n	800a7ec <__gethex+0x388>
 800a7d8:	1171      	asrs	r1, r6, #5
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7e0:	f006 061f 	and.w	r6, r6, #31
 800a7e4:	fa02 f606 	lsl.w	r6, r2, r6
 800a7e8:	421e      	tst	r6, r3
 800a7ea:	d13a      	bne.n	800a862 <__gethex+0x3fe>
 800a7ec:	f045 0520 	orr.w	r5, r5, #32
 800a7f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7f2:	601c      	str	r4, [r3, #0]
 800a7f4:	9b02      	ldr	r3, [sp, #8]
 800a7f6:	601f      	str	r7, [r3, #0]
 800a7f8:	e6b0      	b.n	800a55c <__gethex+0xf8>
 800a7fa:	4299      	cmp	r1, r3
 800a7fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a800:	d8d9      	bhi.n	800a7b6 <__gethex+0x352>
 800a802:	68a3      	ldr	r3, [r4, #8]
 800a804:	459b      	cmp	fp, r3
 800a806:	db17      	blt.n	800a838 <__gethex+0x3d4>
 800a808:	6861      	ldr	r1, [r4, #4]
 800a80a:	9801      	ldr	r0, [sp, #4]
 800a80c:	3101      	adds	r1, #1
 800a80e:	f7fd fe4f 	bl	80084b0 <_Balloc>
 800a812:	4681      	mov	r9, r0
 800a814:	b918      	cbnz	r0, 800a81e <__gethex+0x3ba>
 800a816:	4b1a      	ldr	r3, [pc, #104]	@ (800a880 <__gethex+0x41c>)
 800a818:	4602      	mov	r2, r0
 800a81a:	2184      	movs	r1, #132	@ 0x84
 800a81c:	e6c5      	b.n	800a5aa <__gethex+0x146>
 800a81e:	6922      	ldr	r2, [r4, #16]
 800a820:	3202      	adds	r2, #2
 800a822:	f104 010c 	add.w	r1, r4, #12
 800a826:	0092      	lsls	r2, r2, #2
 800a828:	300c      	adds	r0, #12
 800a82a:	f7fc fec0 	bl	80075ae <memcpy>
 800a82e:	4621      	mov	r1, r4
 800a830:	9801      	ldr	r0, [sp, #4]
 800a832:	f7fd fe7d 	bl	8008530 <_Bfree>
 800a836:	464c      	mov	r4, r9
 800a838:	6923      	ldr	r3, [r4, #16]
 800a83a:	1c5a      	adds	r2, r3, #1
 800a83c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a840:	6122      	str	r2, [r4, #16]
 800a842:	2201      	movs	r2, #1
 800a844:	615a      	str	r2, [r3, #20]
 800a846:	e7be      	b.n	800a7c6 <__gethex+0x362>
 800a848:	6922      	ldr	r2, [r4, #16]
 800a84a:	455a      	cmp	r2, fp
 800a84c:	dd0b      	ble.n	800a866 <__gethex+0x402>
 800a84e:	2101      	movs	r1, #1
 800a850:	4620      	mov	r0, r4
 800a852:	f7ff fda0 	bl	800a396 <rshift>
 800a856:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a85a:	3701      	adds	r7, #1
 800a85c:	42bb      	cmp	r3, r7
 800a85e:	f6ff aee0 	blt.w	800a622 <__gethex+0x1be>
 800a862:	2501      	movs	r5, #1
 800a864:	e7c2      	b.n	800a7ec <__gethex+0x388>
 800a866:	f016 061f 	ands.w	r6, r6, #31
 800a86a:	d0fa      	beq.n	800a862 <__gethex+0x3fe>
 800a86c:	4453      	add	r3, sl
 800a86e:	f1c6 0620 	rsb	r6, r6, #32
 800a872:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a876:	f7fd ff0d 	bl	8008694 <__hi0bits>
 800a87a:	42b0      	cmp	r0, r6
 800a87c:	dbe7      	blt.n	800a84e <__gethex+0x3ea>
 800a87e:	e7f0      	b.n	800a862 <__gethex+0x3fe>
 800a880:	080161f5 	.word	0x080161f5

0800a884 <L_shift>:
 800a884:	f1c2 0208 	rsb	r2, r2, #8
 800a888:	0092      	lsls	r2, r2, #2
 800a88a:	b570      	push	{r4, r5, r6, lr}
 800a88c:	f1c2 0620 	rsb	r6, r2, #32
 800a890:	6843      	ldr	r3, [r0, #4]
 800a892:	6804      	ldr	r4, [r0, #0]
 800a894:	fa03 f506 	lsl.w	r5, r3, r6
 800a898:	432c      	orrs	r4, r5
 800a89a:	40d3      	lsrs	r3, r2
 800a89c:	6004      	str	r4, [r0, #0]
 800a89e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8a2:	4288      	cmp	r0, r1
 800a8a4:	d3f4      	bcc.n	800a890 <L_shift+0xc>
 800a8a6:	bd70      	pop	{r4, r5, r6, pc}

0800a8a8 <__match>:
 800a8a8:	b530      	push	{r4, r5, lr}
 800a8aa:	6803      	ldr	r3, [r0, #0]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8b2:	b914      	cbnz	r4, 800a8ba <__match+0x12>
 800a8b4:	6003      	str	r3, [r0, #0]
 800a8b6:	2001      	movs	r0, #1
 800a8b8:	bd30      	pop	{r4, r5, pc}
 800a8ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a8c2:	2d19      	cmp	r5, #25
 800a8c4:	bf98      	it	ls
 800a8c6:	3220      	addls	r2, #32
 800a8c8:	42a2      	cmp	r2, r4
 800a8ca:	d0f0      	beq.n	800a8ae <__match+0x6>
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	e7f3      	b.n	800a8b8 <__match+0x10>

0800a8d0 <__hexnan>:
 800a8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d4:	680b      	ldr	r3, [r1, #0]
 800a8d6:	6801      	ldr	r1, [r0, #0]
 800a8d8:	115e      	asrs	r6, r3, #5
 800a8da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8de:	f013 031f 	ands.w	r3, r3, #31
 800a8e2:	b087      	sub	sp, #28
 800a8e4:	bf18      	it	ne
 800a8e6:	3604      	addne	r6, #4
 800a8e8:	2500      	movs	r5, #0
 800a8ea:	1f37      	subs	r7, r6, #4
 800a8ec:	4682      	mov	sl, r0
 800a8ee:	4690      	mov	r8, r2
 800a8f0:	9301      	str	r3, [sp, #4]
 800a8f2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8f6:	46b9      	mov	r9, r7
 800a8f8:	463c      	mov	r4, r7
 800a8fa:	9502      	str	r5, [sp, #8]
 800a8fc:	46ab      	mov	fp, r5
 800a8fe:	784a      	ldrb	r2, [r1, #1]
 800a900:	1c4b      	adds	r3, r1, #1
 800a902:	9303      	str	r3, [sp, #12]
 800a904:	b342      	cbz	r2, 800a958 <__hexnan+0x88>
 800a906:	4610      	mov	r0, r2
 800a908:	9105      	str	r1, [sp, #20]
 800a90a:	9204      	str	r2, [sp, #16]
 800a90c:	f7ff fd95 	bl	800a43a <__hexdig_fun>
 800a910:	2800      	cmp	r0, #0
 800a912:	d151      	bne.n	800a9b8 <__hexnan+0xe8>
 800a914:	9a04      	ldr	r2, [sp, #16]
 800a916:	9905      	ldr	r1, [sp, #20]
 800a918:	2a20      	cmp	r2, #32
 800a91a:	d818      	bhi.n	800a94e <__hexnan+0x7e>
 800a91c:	9b02      	ldr	r3, [sp, #8]
 800a91e:	459b      	cmp	fp, r3
 800a920:	dd13      	ble.n	800a94a <__hexnan+0x7a>
 800a922:	454c      	cmp	r4, r9
 800a924:	d206      	bcs.n	800a934 <__hexnan+0x64>
 800a926:	2d07      	cmp	r5, #7
 800a928:	dc04      	bgt.n	800a934 <__hexnan+0x64>
 800a92a:	462a      	mov	r2, r5
 800a92c:	4649      	mov	r1, r9
 800a92e:	4620      	mov	r0, r4
 800a930:	f7ff ffa8 	bl	800a884 <L_shift>
 800a934:	4544      	cmp	r4, r8
 800a936:	d952      	bls.n	800a9de <__hexnan+0x10e>
 800a938:	2300      	movs	r3, #0
 800a93a:	f1a4 0904 	sub.w	r9, r4, #4
 800a93e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a942:	f8cd b008 	str.w	fp, [sp, #8]
 800a946:	464c      	mov	r4, r9
 800a948:	461d      	mov	r5, r3
 800a94a:	9903      	ldr	r1, [sp, #12]
 800a94c:	e7d7      	b.n	800a8fe <__hexnan+0x2e>
 800a94e:	2a29      	cmp	r2, #41	@ 0x29
 800a950:	d157      	bne.n	800aa02 <__hexnan+0x132>
 800a952:	3102      	adds	r1, #2
 800a954:	f8ca 1000 	str.w	r1, [sl]
 800a958:	f1bb 0f00 	cmp.w	fp, #0
 800a95c:	d051      	beq.n	800aa02 <__hexnan+0x132>
 800a95e:	454c      	cmp	r4, r9
 800a960:	d206      	bcs.n	800a970 <__hexnan+0xa0>
 800a962:	2d07      	cmp	r5, #7
 800a964:	dc04      	bgt.n	800a970 <__hexnan+0xa0>
 800a966:	462a      	mov	r2, r5
 800a968:	4649      	mov	r1, r9
 800a96a:	4620      	mov	r0, r4
 800a96c:	f7ff ff8a 	bl	800a884 <L_shift>
 800a970:	4544      	cmp	r4, r8
 800a972:	d936      	bls.n	800a9e2 <__hexnan+0x112>
 800a974:	f1a8 0204 	sub.w	r2, r8, #4
 800a978:	4623      	mov	r3, r4
 800a97a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a97e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a982:	429f      	cmp	r7, r3
 800a984:	d2f9      	bcs.n	800a97a <__hexnan+0xaa>
 800a986:	1b3b      	subs	r3, r7, r4
 800a988:	f023 0303 	bic.w	r3, r3, #3
 800a98c:	3304      	adds	r3, #4
 800a98e:	3401      	adds	r4, #1
 800a990:	3e03      	subs	r6, #3
 800a992:	42b4      	cmp	r4, r6
 800a994:	bf88      	it	hi
 800a996:	2304      	movhi	r3, #4
 800a998:	4443      	add	r3, r8
 800a99a:	2200      	movs	r2, #0
 800a99c:	f843 2b04 	str.w	r2, [r3], #4
 800a9a0:	429f      	cmp	r7, r3
 800a9a2:	d2fb      	bcs.n	800a99c <__hexnan+0xcc>
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	b91b      	cbnz	r3, 800a9b0 <__hexnan+0xe0>
 800a9a8:	4547      	cmp	r7, r8
 800a9aa:	d128      	bne.n	800a9fe <__hexnan+0x12e>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	603b      	str	r3, [r7, #0]
 800a9b0:	2005      	movs	r0, #5
 800a9b2:	b007      	add	sp, #28
 800a9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b8:	3501      	adds	r5, #1
 800a9ba:	2d08      	cmp	r5, #8
 800a9bc:	f10b 0b01 	add.w	fp, fp, #1
 800a9c0:	dd06      	ble.n	800a9d0 <__hexnan+0x100>
 800a9c2:	4544      	cmp	r4, r8
 800a9c4:	d9c1      	bls.n	800a94a <__hexnan+0x7a>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9cc:	2501      	movs	r5, #1
 800a9ce:	3c04      	subs	r4, #4
 800a9d0:	6822      	ldr	r2, [r4, #0]
 800a9d2:	f000 000f 	and.w	r0, r0, #15
 800a9d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a9da:	6020      	str	r0, [r4, #0]
 800a9dc:	e7b5      	b.n	800a94a <__hexnan+0x7a>
 800a9de:	2508      	movs	r5, #8
 800a9e0:	e7b3      	b.n	800a94a <__hexnan+0x7a>
 800a9e2:	9b01      	ldr	r3, [sp, #4]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d0dd      	beq.n	800a9a4 <__hexnan+0xd4>
 800a9e8:	f1c3 0320 	rsb	r3, r3, #32
 800a9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f0:	40da      	lsrs	r2, r3
 800a9f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a9fc:	e7d2      	b.n	800a9a4 <__hexnan+0xd4>
 800a9fe:	3f04      	subs	r7, #4
 800aa00:	e7d0      	b.n	800a9a4 <__hexnan+0xd4>
 800aa02:	2004      	movs	r0, #4
 800aa04:	e7d5      	b.n	800a9b2 <__hexnan+0xe2>

0800aa06 <__ascii_mbtowc>:
 800aa06:	b082      	sub	sp, #8
 800aa08:	b901      	cbnz	r1, 800aa0c <__ascii_mbtowc+0x6>
 800aa0a:	a901      	add	r1, sp, #4
 800aa0c:	b142      	cbz	r2, 800aa20 <__ascii_mbtowc+0x1a>
 800aa0e:	b14b      	cbz	r3, 800aa24 <__ascii_mbtowc+0x1e>
 800aa10:	7813      	ldrb	r3, [r2, #0]
 800aa12:	600b      	str	r3, [r1, #0]
 800aa14:	7812      	ldrb	r2, [r2, #0]
 800aa16:	1e10      	subs	r0, r2, #0
 800aa18:	bf18      	it	ne
 800aa1a:	2001      	movne	r0, #1
 800aa1c:	b002      	add	sp, #8
 800aa1e:	4770      	bx	lr
 800aa20:	4610      	mov	r0, r2
 800aa22:	e7fb      	b.n	800aa1c <__ascii_mbtowc+0x16>
 800aa24:	f06f 0001 	mvn.w	r0, #1
 800aa28:	e7f8      	b.n	800aa1c <__ascii_mbtowc+0x16>

0800aa2a <_realloc_r>:
 800aa2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa2e:	4680      	mov	r8, r0
 800aa30:	4615      	mov	r5, r2
 800aa32:	460c      	mov	r4, r1
 800aa34:	b921      	cbnz	r1, 800aa40 <_realloc_r+0x16>
 800aa36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa3a:	4611      	mov	r1, r2
 800aa3c:	f7fd bcac 	b.w	8008398 <_malloc_r>
 800aa40:	b92a      	cbnz	r2, 800aa4e <_realloc_r+0x24>
 800aa42:	f7fd fc35 	bl	80082b0 <_free_r>
 800aa46:	2400      	movs	r4, #0
 800aa48:	4620      	mov	r0, r4
 800aa4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa4e:	f000 f86b 	bl	800ab28 <_malloc_usable_size_r>
 800aa52:	4285      	cmp	r5, r0
 800aa54:	4606      	mov	r6, r0
 800aa56:	d802      	bhi.n	800aa5e <_realloc_r+0x34>
 800aa58:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aa5c:	d8f4      	bhi.n	800aa48 <_realloc_r+0x1e>
 800aa5e:	4629      	mov	r1, r5
 800aa60:	4640      	mov	r0, r8
 800aa62:	f7fd fc99 	bl	8008398 <_malloc_r>
 800aa66:	4607      	mov	r7, r0
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d0ec      	beq.n	800aa46 <_realloc_r+0x1c>
 800aa6c:	42b5      	cmp	r5, r6
 800aa6e:	462a      	mov	r2, r5
 800aa70:	4621      	mov	r1, r4
 800aa72:	bf28      	it	cs
 800aa74:	4632      	movcs	r2, r6
 800aa76:	f7fc fd9a 	bl	80075ae <memcpy>
 800aa7a:	4621      	mov	r1, r4
 800aa7c:	4640      	mov	r0, r8
 800aa7e:	f7fd fc17 	bl	80082b0 <_free_r>
 800aa82:	463c      	mov	r4, r7
 800aa84:	e7e0      	b.n	800aa48 <_realloc_r+0x1e>

0800aa86 <__ascii_wctomb>:
 800aa86:	4603      	mov	r3, r0
 800aa88:	4608      	mov	r0, r1
 800aa8a:	b141      	cbz	r1, 800aa9e <__ascii_wctomb+0x18>
 800aa8c:	2aff      	cmp	r2, #255	@ 0xff
 800aa8e:	d904      	bls.n	800aa9a <__ascii_wctomb+0x14>
 800aa90:	228a      	movs	r2, #138	@ 0x8a
 800aa92:	601a      	str	r2, [r3, #0]
 800aa94:	f04f 30ff 	mov.w	r0, #4294967295
 800aa98:	4770      	bx	lr
 800aa9a:	700a      	strb	r2, [r1, #0]
 800aa9c:	2001      	movs	r0, #1
 800aa9e:	4770      	bx	lr

0800aaa0 <_raise_r>:
 800aaa0:	291f      	cmp	r1, #31
 800aaa2:	b538      	push	{r3, r4, r5, lr}
 800aaa4:	4605      	mov	r5, r0
 800aaa6:	460c      	mov	r4, r1
 800aaa8:	d904      	bls.n	800aab4 <_raise_r+0x14>
 800aaaa:	2316      	movs	r3, #22
 800aaac:	6003      	str	r3, [r0, #0]
 800aaae:	f04f 30ff 	mov.w	r0, #4294967295
 800aab2:	bd38      	pop	{r3, r4, r5, pc}
 800aab4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aab6:	b112      	cbz	r2, 800aabe <_raise_r+0x1e>
 800aab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aabc:	b94b      	cbnz	r3, 800aad2 <_raise_r+0x32>
 800aabe:	4628      	mov	r0, r5
 800aac0:	f000 f830 	bl	800ab24 <_getpid_r>
 800aac4:	4622      	mov	r2, r4
 800aac6:	4601      	mov	r1, r0
 800aac8:	4628      	mov	r0, r5
 800aaca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aace:	f000 b817 	b.w	800ab00 <_kill_r>
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d00a      	beq.n	800aaec <_raise_r+0x4c>
 800aad6:	1c59      	adds	r1, r3, #1
 800aad8:	d103      	bne.n	800aae2 <_raise_r+0x42>
 800aada:	2316      	movs	r3, #22
 800aadc:	6003      	str	r3, [r0, #0]
 800aade:	2001      	movs	r0, #1
 800aae0:	e7e7      	b.n	800aab2 <_raise_r+0x12>
 800aae2:	2100      	movs	r1, #0
 800aae4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aae8:	4620      	mov	r0, r4
 800aaea:	4798      	blx	r3
 800aaec:	2000      	movs	r0, #0
 800aaee:	e7e0      	b.n	800aab2 <_raise_r+0x12>

0800aaf0 <raise>:
 800aaf0:	4b02      	ldr	r3, [pc, #8]	@ (800aafc <raise+0xc>)
 800aaf2:	4601      	mov	r1, r0
 800aaf4:	6818      	ldr	r0, [r3, #0]
 800aaf6:	f7ff bfd3 	b.w	800aaa0 <_raise_r>
 800aafa:	bf00      	nop
 800aafc:	20000028 	.word	0x20000028

0800ab00 <_kill_r>:
 800ab00:	b538      	push	{r3, r4, r5, lr}
 800ab02:	4d07      	ldr	r5, [pc, #28]	@ (800ab20 <_kill_r+0x20>)
 800ab04:	2300      	movs	r3, #0
 800ab06:	4604      	mov	r4, r0
 800ab08:	4608      	mov	r0, r1
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	602b      	str	r3, [r5, #0]
 800ab0e:	f7f8 fbbf 	bl	8003290 <_kill>
 800ab12:	1c43      	adds	r3, r0, #1
 800ab14:	d102      	bne.n	800ab1c <_kill_r+0x1c>
 800ab16:	682b      	ldr	r3, [r5, #0]
 800ab18:	b103      	cbz	r3, 800ab1c <_kill_r+0x1c>
 800ab1a:	6023      	str	r3, [r4, #0]
 800ab1c:	bd38      	pop	{r3, r4, r5, pc}
 800ab1e:	bf00      	nop
 800ab20:	20000424 	.word	0x20000424

0800ab24 <_getpid_r>:
 800ab24:	f7f8 bbac 	b.w	8003280 <_getpid>

0800ab28 <_malloc_usable_size_r>:
 800ab28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab2c:	1f18      	subs	r0, r3, #4
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	bfbc      	itt	lt
 800ab32:	580b      	ldrlt	r3, [r1, r0]
 800ab34:	18c0      	addlt	r0, r0, r3
 800ab36:	4770      	bx	lr

0800ab38 <asin>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	ed2d 8b02 	vpush	{d8}
 800ab3e:	ec55 4b10 	vmov	r4, r5, d0
 800ab42:	f000 f93d 	bl	800adc0 <__ieee754_asin>
 800ab46:	4622      	mov	r2, r4
 800ab48:	462b      	mov	r3, r5
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	eeb0 8a40 	vmov.f32	s16, s0
 800ab52:	eef0 8a60 	vmov.f32	s17, s1
 800ab56:	f7f5 ffe9 	bl	8000b2c <__aeabi_dcmpun>
 800ab5a:	b9a8      	cbnz	r0, 800ab88 <asin+0x50>
 800ab5c:	ec45 4b10 	vmov	d0, r4, r5
 800ab60:	f000 f84a 	bl	800abf8 <fabs>
 800ab64:	4b0c      	ldr	r3, [pc, #48]	@ (800ab98 <asin+0x60>)
 800ab66:	ec51 0b10 	vmov	r0, r1, d0
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f7f5 ffd4 	bl	8000b18 <__aeabi_dcmpgt>
 800ab70:	b150      	cbz	r0, 800ab88 <asin+0x50>
 800ab72:	f7fc fcef 	bl	8007554 <__errno>
 800ab76:	ecbd 8b02 	vpop	{d8}
 800ab7a:	2321      	movs	r3, #33	@ 0x21
 800ab7c:	6003      	str	r3, [r0, #0]
 800ab7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab82:	4806      	ldr	r0, [pc, #24]	@ (800ab9c <asin+0x64>)
 800ab84:	f7ff bbe4 	b.w	800a350 <nan>
 800ab88:	eeb0 0a48 	vmov.f32	s0, s16
 800ab8c:	eef0 0a68 	vmov.f32	s1, s17
 800ab90:	ecbd 8b02 	vpop	{d8}
 800ab94:	bd38      	pop	{r3, r4, r5, pc}
 800ab96:	bf00      	nop
 800ab98:	3ff00000 	.word	0x3ff00000
 800ab9c:	0801618f 	.word	0x0801618f

0800aba0 <sqrt>:
 800aba0:	b538      	push	{r3, r4, r5, lr}
 800aba2:	ed2d 8b02 	vpush	{d8}
 800aba6:	ec55 4b10 	vmov	r4, r5, d0
 800abaa:	f000 f82d 	bl	800ac08 <__ieee754_sqrt>
 800abae:	4622      	mov	r2, r4
 800abb0:	462b      	mov	r3, r5
 800abb2:	4620      	mov	r0, r4
 800abb4:	4629      	mov	r1, r5
 800abb6:	eeb0 8a40 	vmov.f32	s16, s0
 800abba:	eef0 8a60 	vmov.f32	s17, s1
 800abbe:	f7f5 ffb5 	bl	8000b2c <__aeabi_dcmpun>
 800abc2:	b990      	cbnz	r0, 800abea <sqrt+0x4a>
 800abc4:	2200      	movs	r2, #0
 800abc6:	2300      	movs	r3, #0
 800abc8:	4620      	mov	r0, r4
 800abca:	4629      	mov	r1, r5
 800abcc:	f7f5 ff86 	bl	8000adc <__aeabi_dcmplt>
 800abd0:	b158      	cbz	r0, 800abea <sqrt+0x4a>
 800abd2:	f7fc fcbf 	bl	8007554 <__errno>
 800abd6:	2321      	movs	r3, #33	@ 0x21
 800abd8:	6003      	str	r3, [r0, #0]
 800abda:	2200      	movs	r2, #0
 800abdc:	2300      	movs	r3, #0
 800abde:	4610      	mov	r0, r2
 800abe0:	4619      	mov	r1, r3
 800abe2:	f7f5 fe33 	bl	800084c <__aeabi_ddiv>
 800abe6:	ec41 0b18 	vmov	d8, r0, r1
 800abea:	eeb0 0a48 	vmov.f32	s0, s16
 800abee:	eef0 0a68 	vmov.f32	s1, s17
 800abf2:	ecbd 8b02 	vpop	{d8}
 800abf6:	bd38      	pop	{r3, r4, r5, pc}

0800abf8 <fabs>:
 800abf8:	ec51 0b10 	vmov	r0, r1, d0
 800abfc:	4602      	mov	r2, r0
 800abfe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ac02:	ec43 2b10 	vmov	d0, r2, r3
 800ac06:	4770      	bx	lr

0800ac08 <__ieee754_sqrt>:
 800ac08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0c:	4a68      	ldr	r2, [pc, #416]	@ (800adb0 <__ieee754_sqrt+0x1a8>)
 800ac0e:	ec55 4b10 	vmov	r4, r5, d0
 800ac12:	43aa      	bics	r2, r5
 800ac14:	462b      	mov	r3, r5
 800ac16:	4621      	mov	r1, r4
 800ac18:	d110      	bne.n	800ac3c <__ieee754_sqrt+0x34>
 800ac1a:	4622      	mov	r2, r4
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	4629      	mov	r1, r5
 800ac20:	f7f5 fcea 	bl	80005f8 <__aeabi_dmul>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	4620      	mov	r0, r4
 800ac2a:	4629      	mov	r1, r5
 800ac2c:	f7f5 fb2e 	bl	800028c <__adddf3>
 800ac30:	4604      	mov	r4, r0
 800ac32:	460d      	mov	r5, r1
 800ac34:	ec45 4b10 	vmov	d0, r4, r5
 800ac38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3c:	2d00      	cmp	r5, #0
 800ac3e:	dc0e      	bgt.n	800ac5e <__ieee754_sqrt+0x56>
 800ac40:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ac44:	4322      	orrs	r2, r4
 800ac46:	d0f5      	beq.n	800ac34 <__ieee754_sqrt+0x2c>
 800ac48:	b19d      	cbz	r5, 800ac72 <__ieee754_sqrt+0x6a>
 800ac4a:	4622      	mov	r2, r4
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	4629      	mov	r1, r5
 800ac50:	f7f5 fb1a 	bl	8000288 <__aeabi_dsub>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	f7f5 fdf8 	bl	800084c <__aeabi_ddiv>
 800ac5c:	e7e8      	b.n	800ac30 <__ieee754_sqrt+0x28>
 800ac5e:	152a      	asrs	r2, r5, #20
 800ac60:	d115      	bne.n	800ac8e <__ieee754_sqrt+0x86>
 800ac62:	2000      	movs	r0, #0
 800ac64:	e009      	b.n	800ac7a <__ieee754_sqrt+0x72>
 800ac66:	0acb      	lsrs	r3, r1, #11
 800ac68:	3a15      	subs	r2, #21
 800ac6a:	0549      	lsls	r1, r1, #21
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d0fa      	beq.n	800ac66 <__ieee754_sqrt+0x5e>
 800ac70:	e7f7      	b.n	800ac62 <__ieee754_sqrt+0x5a>
 800ac72:	462a      	mov	r2, r5
 800ac74:	e7fa      	b.n	800ac6c <__ieee754_sqrt+0x64>
 800ac76:	005b      	lsls	r3, r3, #1
 800ac78:	3001      	adds	r0, #1
 800ac7a:	02dc      	lsls	r4, r3, #11
 800ac7c:	d5fb      	bpl.n	800ac76 <__ieee754_sqrt+0x6e>
 800ac7e:	1e44      	subs	r4, r0, #1
 800ac80:	1b12      	subs	r2, r2, r4
 800ac82:	f1c0 0420 	rsb	r4, r0, #32
 800ac86:	fa21 f404 	lsr.w	r4, r1, r4
 800ac8a:	4323      	orrs	r3, r4
 800ac8c:	4081      	lsls	r1, r0
 800ac8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac92:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ac96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac9a:	07d2      	lsls	r2, r2, #31
 800ac9c:	bf5c      	itt	pl
 800ac9e:	005b      	lslpl	r3, r3, #1
 800aca0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800aca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aca8:	bf58      	it	pl
 800acaa:	0049      	lslpl	r1, r1, #1
 800acac:	2600      	movs	r6, #0
 800acae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800acb2:	106d      	asrs	r5, r5, #1
 800acb4:	0049      	lsls	r1, r1, #1
 800acb6:	2016      	movs	r0, #22
 800acb8:	4632      	mov	r2, r6
 800acba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800acbe:	1917      	adds	r7, r2, r4
 800acc0:	429f      	cmp	r7, r3
 800acc2:	bfde      	ittt	le
 800acc4:	193a      	addle	r2, r7, r4
 800acc6:	1bdb      	suble	r3, r3, r7
 800acc8:	1936      	addle	r6, r6, r4
 800acca:	0fcf      	lsrs	r7, r1, #31
 800accc:	3801      	subs	r0, #1
 800acce:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800acd2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800acd6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800acda:	d1f0      	bne.n	800acbe <__ieee754_sqrt+0xb6>
 800acdc:	4604      	mov	r4, r0
 800acde:	2720      	movs	r7, #32
 800ace0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ace4:	429a      	cmp	r2, r3
 800ace6:	eb00 0e0c 	add.w	lr, r0, ip
 800acea:	db02      	blt.n	800acf2 <__ieee754_sqrt+0xea>
 800acec:	d113      	bne.n	800ad16 <__ieee754_sqrt+0x10e>
 800acee:	458e      	cmp	lr, r1
 800acf0:	d811      	bhi.n	800ad16 <__ieee754_sqrt+0x10e>
 800acf2:	f1be 0f00 	cmp.w	lr, #0
 800acf6:	eb0e 000c 	add.w	r0, lr, ip
 800acfa:	da42      	bge.n	800ad82 <__ieee754_sqrt+0x17a>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	db40      	blt.n	800ad82 <__ieee754_sqrt+0x17a>
 800ad00:	f102 0801 	add.w	r8, r2, #1
 800ad04:	1a9b      	subs	r3, r3, r2
 800ad06:	458e      	cmp	lr, r1
 800ad08:	bf88      	it	hi
 800ad0a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ad0e:	eba1 010e 	sub.w	r1, r1, lr
 800ad12:	4464      	add	r4, ip
 800ad14:	4642      	mov	r2, r8
 800ad16:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ad1a:	3f01      	subs	r7, #1
 800ad1c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ad20:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ad24:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ad28:	d1dc      	bne.n	800ace4 <__ieee754_sqrt+0xdc>
 800ad2a:	4319      	orrs	r1, r3
 800ad2c:	d01b      	beq.n	800ad66 <__ieee754_sqrt+0x15e>
 800ad2e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800adb4 <__ieee754_sqrt+0x1ac>
 800ad32:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800adb8 <__ieee754_sqrt+0x1b0>
 800ad36:	e9da 0100 	ldrd	r0, r1, [sl]
 800ad3a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ad3e:	f7f5 faa3 	bl	8000288 <__aeabi_dsub>
 800ad42:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad46:	4602      	mov	r2, r0
 800ad48:	460b      	mov	r3, r1
 800ad4a:	4640      	mov	r0, r8
 800ad4c:	4649      	mov	r1, r9
 800ad4e:	f7f5 fecf 	bl	8000af0 <__aeabi_dcmple>
 800ad52:	b140      	cbz	r0, 800ad66 <__ieee754_sqrt+0x15e>
 800ad54:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ad58:	e9da 0100 	ldrd	r0, r1, [sl]
 800ad5c:	e9db 2300 	ldrd	r2, r3, [fp]
 800ad60:	d111      	bne.n	800ad86 <__ieee754_sqrt+0x17e>
 800ad62:	3601      	adds	r6, #1
 800ad64:	463c      	mov	r4, r7
 800ad66:	1072      	asrs	r2, r6, #1
 800ad68:	0863      	lsrs	r3, r4, #1
 800ad6a:	07f1      	lsls	r1, r6, #31
 800ad6c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ad70:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ad74:	bf48      	it	mi
 800ad76:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ad7a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ad7e:	4618      	mov	r0, r3
 800ad80:	e756      	b.n	800ac30 <__ieee754_sqrt+0x28>
 800ad82:	4690      	mov	r8, r2
 800ad84:	e7be      	b.n	800ad04 <__ieee754_sqrt+0xfc>
 800ad86:	f7f5 fa81 	bl	800028c <__adddf3>
 800ad8a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad8e:	4602      	mov	r2, r0
 800ad90:	460b      	mov	r3, r1
 800ad92:	4640      	mov	r0, r8
 800ad94:	4649      	mov	r1, r9
 800ad96:	f7f5 fea1 	bl	8000adc <__aeabi_dcmplt>
 800ad9a:	b120      	cbz	r0, 800ada6 <__ieee754_sqrt+0x19e>
 800ad9c:	1ca0      	adds	r0, r4, #2
 800ad9e:	bf08      	it	eq
 800ada0:	3601      	addeq	r6, #1
 800ada2:	3402      	adds	r4, #2
 800ada4:	e7df      	b.n	800ad66 <__ieee754_sqrt+0x15e>
 800ada6:	1c63      	adds	r3, r4, #1
 800ada8:	f023 0401 	bic.w	r4, r3, #1
 800adac:	e7db      	b.n	800ad66 <__ieee754_sqrt+0x15e>
 800adae:	bf00      	nop
 800adb0:	7ff00000 	.word	0x7ff00000
 800adb4:	200001f0 	.word	0x200001f0
 800adb8:	200001e8 	.word	0x200001e8
 800adbc:	00000000 	.word	0x00000000

0800adc0 <__ieee754_asin>:
 800adc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc4:	ec55 4b10 	vmov	r4, r5, d0
 800adc8:	4bc7      	ldr	r3, [pc, #796]	@ (800b0e8 <__ieee754_asin+0x328>)
 800adca:	b087      	sub	sp, #28
 800adcc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800add0:	429e      	cmp	r6, r3
 800add2:	9501      	str	r5, [sp, #4]
 800add4:	d92d      	bls.n	800ae32 <__ieee754_asin+0x72>
 800add6:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800adda:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800adde:	4326      	orrs	r6, r4
 800ade0:	d116      	bne.n	800ae10 <__ieee754_asin+0x50>
 800ade2:	a3a7      	add	r3, pc, #668	@ (adr r3, 800b080 <__ieee754_asin+0x2c0>)
 800ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade8:	4620      	mov	r0, r4
 800adea:	4629      	mov	r1, r5
 800adec:	f7f5 fc04 	bl	80005f8 <__aeabi_dmul>
 800adf0:	a3a5      	add	r3, pc, #660	@ (adr r3, 800b088 <__ieee754_asin+0x2c8>)
 800adf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf6:	4606      	mov	r6, r0
 800adf8:	460f      	mov	r7, r1
 800adfa:	4620      	mov	r0, r4
 800adfc:	4629      	mov	r1, r5
 800adfe:	f7f5 fbfb 	bl	80005f8 <__aeabi_dmul>
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	4630      	mov	r0, r6
 800ae08:	4639      	mov	r1, r7
 800ae0a:	f7f5 fa3f 	bl	800028c <__adddf3>
 800ae0e:	e009      	b.n	800ae24 <__ieee754_asin+0x64>
 800ae10:	4622      	mov	r2, r4
 800ae12:	462b      	mov	r3, r5
 800ae14:	4620      	mov	r0, r4
 800ae16:	4629      	mov	r1, r5
 800ae18:	f7f5 fa36 	bl	8000288 <__aeabi_dsub>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	f7f5 fd14 	bl	800084c <__aeabi_ddiv>
 800ae24:	4604      	mov	r4, r0
 800ae26:	460d      	mov	r5, r1
 800ae28:	ec45 4b10 	vmov	d0, r4, r5
 800ae2c:	b007      	add	sp, #28
 800ae2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae32:	4bae      	ldr	r3, [pc, #696]	@ (800b0ec <__ieee754_asin+0x32c>)
 800ae34:	429e      	cmp	r6, r3
 800ae36:	d810      	bhi.n	800ae5a <__ieee754_asin+0x9a>
 800ae38:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800ae3c:	f080 80ad 	bcs.w	800af9a <__ieee754_asin+0x1da>
 800ae40:	a393      	add	r3, pc, #588	@ (adr r3, 800b090 <__ieee754_asin+0x2d0>)
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	4620      	mov	r0, r4
 800ae48:	4629      	mov	r1, r5
 800ae4a:	f7f5 fa1f 	bl	800028c <__adddf3>
 800ae4e:	4ba8      	ldr	r3, [pc, #672]	@ (800b0f0 <__ieee754_asin+0x330>)
 800ae50:	2200      	movs	r2, #0
 800ae52:	f7f5 fe61 	bl	8000b18 <__aeabi_dcmpgt>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d1e6      	bne.n	800ae28 <__ieee754_asin+0x68>
 800ae5a:	ec45 4b10 	vmov	d0, r4, r5
 800ae5e:	f7ff fecb 	bl	800abf8 <fabs>
 800ae62:	49a3      	ldr	r1, [pc, #652]	@ (800b0f0 <__ieee754_asin+0x330>)
 800ae64:	ec53 2b10 	vmov	r2, r3, d0
 800ae68:	2000      	movs	r0, #0
 800ae6a:	f7f5 fa0d 	bl	8000288 <__aeabi_dsub>
 800ae6e:	4ba1      	ldr	r3, [pc, #644]	@ (800b0f4 <__ieee754_asin+0x334>)
 800ae70:	2200      	movs	r2, #0
 800ae72:	f7f5 fbc1 	bl	80005f8 <__aeabi_dmul>
 800ae76:	a388      	add	r3, pc, #544	@ (adr r3, 800b098 <__ieee754_asin+0x2d8>)
 800ae78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	460d      	mov	r5, r1
 800ae80:	f7f5 fbba 	bl	80005f8 <__aeabi_dmul>
 800ae84:	a386      	add	r3, pc, #536	@ (adr r3, 800b0a0 <__ieee754_asin+0x2e0>)
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	f7f5 f9ff 	bl	800028c <__adddf3>
 800ae8e:	4622      	mov	r2, r4
 800ae90:	462b      	mov	r3, r5
 800ae92:	f7f5 fbb1 	bl	80005f8 <__aeabi_dmul>
 800ae96:	a384      	add	r3, pc, #528	@ (adr r3, 800b0a8 <__ieee754_asin+0x2e8>)
 800ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9c:	f7f5 f9f4 	bl	8000288 <__aeabi_dsub>
 800aea0:	4622      	mov	r2, r4
 800aea2:	462b      	mov	r3, r5
 800aea4:	f7f5 fba8 	bl	80005f8 <__aeabi_dmul>
 800aea8:	a381      	add	r3, pc, #516	@ (adr r3, 800b0b0 <__ieee754_asin+0x2f0>)
 800aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeae:	f7f5 f9ed 	bl	800028c <__adddf3>
 800aeb2:	4622      	mov	r2, r4
 800aeb4:	462b      	mov	r3, r5
 800aeb6:	f7f5 fb9f 	bl	80005f8 <__aeabi_dmul>
 800aeba:	a37f      	add	r3, pc, #508	@ (adr r3, 800b0b8 <__ieee754_asin+0x2f8>)
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	f7f5 f9e2 	bl	8000288 <__aeabi_dsub>
 800aec4:	4622      	mov	r2, r4
 800aec6:	462b      	mov	r3, r5
 800aec8:	f7f5 fb96 	bl	80005f8 <__aeabi_dmul>
 800aecc:	a37c      	add	r3, pc, #496	@ (adr r3, 800b0c0 <__ieee754_asin+0x300>)
 800aece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed2:	f7f5 f9db 	bl	800028c <__adddf3>
 800aed6:	4622      	mov	r2, r4
 800aed8:	462b      	mov	r3, r5
 800aeda:	f7f5 fb8d 	bl	80005f8 <__aeabi_dmul>
 800aede:	a37a      	add	r3, pc, #488	@ (adr r3, 800b0c8 <__ieee754_asin+0x308>)
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aee8:	4620      	mov	r0, r4
 800aeea:	4629      	mov	r1, r5
 800aeec:	f7f5 fb84 	bl	80005f8 <__aeabi_dmul>
 800aef0:	a377      	add	r3, pc, #476	@ (adr r3, 800b0d0 <__ieee754_asin+0x310>)
 800aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef6:	f7f5 f9c7 	bl	8000288 <__aeabi_dsub>
 800aefa:	4622      	mov	r2, r4
 800aefc:	462b      	mov	r3, r5
 800aefe:	f7f5 fb7b 	bl	80005f8 <__aeabi_dmul>
 800af02:	a375      	add	r3, pc, #468	@ (adr r3, 800b0d8 <__ieee754_asin+0x318>)
 800af04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af08:	f7f5 f9c0 	bl	800028c <__adddf3>
 800af0c:	4622      	mov	r2, r4
 800af0e:	462b      	mov	r3, r5
 800af10:	f7f5 fb72 	bl	80005f8 <__aeabi_dmul>
 800af14:	a372      	add	r3, pc, #456	@ (adr r3, 800b0e0 <__ieee754_asin+0x320>)
 800af16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1a:	f7f5 f9b5 	bl	8000288 <__aeabi_dsub>
 800af1e:	4622      	mov	r2, r4
 800af20:	462b      	mov	r3, r5
 800af22:	f7f5 fb69 	bl	80005f8 <__aeabi_dmul>
 800af26:	4b72      	ldr	r3, [pc, #456]	@ (800b0f0 <__ieee754_asin+0x330>)
 800af28:	2200      	movs	r2, #0
 800af2a:	f7f5 f9af 	bl	800028c <__adddf3>
 800af2e:	ec45 4b10 	vmov	d0, r4, r5
 800af32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af36:	f7ff fe67 	bl	800ac08 <__ieee754_sqrt>
 800af3a:	4b6f      	ldr	r3, [pc, #444]	@ (800b0f8 <__ieee754_asin+0x338>)
 800af3c:	429e      	cmp	r6, r3
 800af3e:	ec5b ab10 	vmov	sl, fp, d0
 800af42:	f240 80db 	bls.w	800b0fc <__ieee754_asin+0x33c>
 800af46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af4e:	f7f5 fc7d 	bl	800084c <__aeabi_ddiv>
 800af52:	4652      	mov	r2, sl
 800af54:	465b      	mov	r3, fp
 800af56:	f7f5 fb4f 	bl	80005f8 <__aeabi_dmul>
 800af5a:	4652      	mov	r2, sl
 800af5c:	465b      	mov	r3, fp
 800af5e:	f7f5 f995 	bl	800028c <__adddf3>
 800af62:	4602      	mov	r2, r0
 800af64:	460b      	mov	r3, r1
 800af66:	f7f5 f991 	bl	800028c <__adddf3>
 800af6a:	a347      	add	r3, pc, #284	@ (adr r3, 800b088 <__ieee754_asin+0x2c8>)
 800af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af70:	f7f5 f98a 	bl	8000288 <__aeabi_dsub>
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	a141      	add	r1, pc, #260	@ (adr r1, 800b080 <__ieee754_asin+0x2c0>)
 800af7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af7e:	f7f5 f983 	bl	8000288 <__aeabi_dsub>
 800af82:	9b01      	ldr	r3, [sp, #4]
 800af84:	2b00      	cmp	r3, #0
 800af86:	bfdc      	itt	le
 800af88:	4602      	movle	r2, r0
 800af8a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800af8e:	4604      	mov	r4, r0
 800af90:	460d      	mov	r5, r1
 800af92:	bfdc      	itt	le
 800af94:	4614      	movle	r4, r2
 800af96:	461d      	movle	r5, r3
 800af98:	e746      	b.n	800ae28 <__ieee754_asin+0x68>
 800af9a:	4622      	mov	r2, r4
 800af9c:	462b      	mov	r3, r5
 800af9e:	4620      	mov	r0, r4
 800afa0:	4629      	mov	r1, r5
 800afa2:	f7f5 fb29 	bl	80005f8 <__aeabi_dmul>
 800afa6:	a33c      	add	r3, pc, #240	@ (adr r3, 800b098 <__ieee754_asin+0x2d8>)
 800afa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afac:	4606      	mov	r6, r0
 800afae:	460f      	mov	r7, r1
 800afb0:	f7f5 fb22 	bl	80005f8 <__aeabi_dmul>
 800afb4:	a33a      	add	r3, pc, #232	@ (adr r3, 800b0a0 <__ieee754_asin+0x2e0>)
 800afb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afba:	f7f5 f967 	bl	800028c <__adddf3>
 800afbe:	4632      	mov	r2, r6
 800afc0:	463b      	mov	r3, r7
 800afc2:	f7f5 fb19 	bl	80005f8 <__aeabi_dmul>
 800afc6:	a338      	add	r3, pc, #224	@ (adr r3, 800b0a8 <__ieee754_asin+0x2e8>)
 800afc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afcc:	f7f5 f95c 	bl	8000288 <__aeabi_dsub>
 800afd0:	4632      	mov	r2, r6
 800afd2:	463b      	mov	r3, r7
 800afd4:	f7f5 fb10 	bl	80005f8 <__aeabi_dmul>
 800afd8:	a335      	add	r3, pc, #212	@ (adr r3, 800b0b0 <__ieee754_asin+0x2f0>)
 800afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afde:	f7f5 f955 	bl	800028c <__adddf3>
 800afe2:	4632      	mov	r2, r6
 800afe4:	463b      	mov	r3, r7
 800afe6:	f7f5 fb07 	bl	80005f8 <__aeabi_dmul>
 800afea:	a333      	add	r3, pc, #204	@ (adr r3, 800b0b8 <__ieee754_asin+0x2f8>)
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	f7f5 f94a 	bl	8000288 <__aeabi_dsub>
 800aff4:	4632      	mov	r2, r6
 800aff6:	463b      	mov	r3, r7
 800aff8:	f7f5 fafe 	bl	80005f8 <__aeabi_dmul>
 800affc:	a330      	add	r3, pc, #192	@ (adr r3, 800b0c0 <__ieee754_asin+0x300>)
 800affe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b002:	f7f5 f943 	bl	800028c <__adddf3>
 800b006:	4632      	mov	r2, r6
 800b008:	463b      	mov	r3, r7
 800b00a:	f7f5 faf5 	bl	80005f8 <__aeabi_dmul>
 800b00e:	a32e      	add	r3, pc, #184	@ (adr r3, 800b0c8 <__ieee754_asin+0x308>)
 800b010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b014:	4680      	mov	r8, r0
 800b016:	4689      	mov	r9, r1
 800b018:	4630      	mov	r0, r6
 800b01a:	4639      	mov	r1, r7
 800b01c:	f7f5 faec 	bl	80005f8 <__aeabi_dmul>
 800b020:	a32b      	add	r3, pc, #172	@ (adr r3, 800b0d0 <__ieee754_asin+0x310>)
 800b022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b026:	f7f5 f92f 	bl	8000288 <__aeabi_dsub>
 800b02a:	4632      	mov	r2, r6
 800b02c:	463b      	mov	r3, r7
 800b02e:	f7f5 fae3 	bl	80005f8 <__aeabi_dmul>
 800b032:	a329      	add	r3, pc, #164	@ (adr r3, 800b0d8 <__ieee754_asin+0x318>)
 800b034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b038:	f7f5 f928 	bl	800028c <__adddf3>
 800b03c:	4632      	mov	r2, r6
 800b03e:	463b      	mov	r3, r7
 800b040:	f7f5 fada 	bl	80005f8 <__aeabi_dmul>
 800b044:	a326      	add	r3, pc, #152	@ (adr r3, 800b0e0 <__ieee754_asin+0x320>)
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	f7f5 f91d 	bl	8000288 <__aeabi_dsub>
 800b04e:	4632      	mov	r2, r6
 800b050:	463b      	mov	r3, r7
 800b052:	f7f5 fad1 	bl	80005f8 <__aeabi_dmul>
 800b056:	4b26      	ldr	r3, [pc, #152]	@ (800b0f0 <__ieee754_asin+0x330>)
 800b058:	2200      	movs	r2, #0
 800b05a:	f7f5 f917 	bl	800028c <__adddf3>
 800b05e:	4602      	mov	r2, r0
 800b060:	460b      	mov	r3, r1
 800b062:	4640      	mov	r0, r8
 800b064:	4649      	mov	r1, r9
 800b066:	f7f5 fbf1 	bl	800084c <__aeabi_ddiv>
 800b06a:	4622      	mov	r2, r4
 800b06c:	462b      	mov	r3, r5
 800b06e:	f7f5 fac3 	bl	80005f8 <__aeabi_dmul>
 800b072:	4602      	mov	r2, r0
 800b074:	460b      	mov	r3, r1
 800b076:	4620      	mov	r0, r4
 800b078:	4629      	mov	r1, r5
 800b07a:	e6c6      	b.n	800ae0a <__ieee754_asin+0x4a>
 800b07c:	f3af 8000 	nop.w
 800b080:	54442d18 	.word	0x54442d18
 800b084:	3ff921fb 	.word	0x3ff921fb
 800b088:	33145c07 	.word	0x33145c07
 800b08c:	3c91a626 	.word	0x3c91a626
 800b090:	8800759c 	.word	0x8800759c
 800b094:	7e37e43c 	.word	0x7e37e43c
 800b098:	0dfdf709 	.word	0x0dfdf709
 800b09c:	3f023de1 	.word	0x3f023de1
 800b0a0:	7501b288 	.word	0x7501b288
 800b0a4:	3f49efe0 	.word	0x3f49efe0
 800b0a8:	b5688f3b 	.word	0xb5688f3b
 800b0ac:	3fa48228 	.word	0x3fa48228
 800b0b0:	0e884455 	.word	0x0e884455
 800b0b4:	3fc9c155 	.word	0x3fc9c155
 800b0b8:	03eb6f7d 	.word	0x03eb6f7d
 800b0bc:	3fd4d612 	.word	0x3fd4d612
 800b0c0:	55555555 	.word	0x55555555
 800b0c4:	3fc55555 	.word	0x3fc55555
 800b0c8:	b12e9282 	.word	0xb12e9282
 800b0cc:	3fb3b8c5 	.word	0x3fb3b8c5
 800b0d0:	1b8d0159 	.word	0x1b8d0159
 800b0d4:	3fe6066c 	.word	0x3fe6066c
 800b0d8:	9c598ac8 	.word	0x9c598ac8
 800b0dc:	40002ae5 	.word	0x40002ae5
 800b0e0:	1c8a2d4b 	.word	0x1c8a2d4b
 800b0e4:	40033a27 	.word	0x40033a27
 800b0e8:	3fefffff 	.word	0x3fefffff
 800b0ec:	3fdfffff 	.word	0x3fdfffff
 800b0f0:	3ff00000 	.word	0x3ff00000
 800b0f4:	3fe00000 	.word	0x3fe00000
 800b0f8:	3fef3332 	.word	0x3fef3332
 800b0fc:	4652      	mov	r2, sl
 800b0fe:	465b      	mov	r3, fp
 800b100:	4650      	mov	r0, sl
 800b102:	4659      	mov	r1, fp
 800b104:	f7f5 f8c2 	bl	800028c <__adddf3>
 800b108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b10c:	4606      	mov	r6, r0
 800b10e:	460f      	mov	r7, r1
 800b110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b114:	f7f5 fb9a 	bl	800084c <__aeabi_ddiv>
 800b118:	4602      	mov	r2, r0
 800b11a:	460b      	mov	r3, r1
 800b11c:	4630      	mov	r0, r6
 800b11e:	4639      	mov	r1, r7
 800b120:	f7f5 fa6a 	bl	80005f8 <__aeabi_dmul>
 800b124:	f04f 0800 	mov.w	r8, #0
 800b128:	4606      	mov	r6, r0
 800b12a:	460f      	mov	r7, r1
 800b12c:	4642      	mov	r2, r8
 800b12e:	465b      	mov	r3, fp
 800b130:	4640      	mov	r0, r8
 800b132:	4659      	mov	r1, fp
 800b134:	f7f5 fa60 	bl	80005f8 <__aeabi_dmul>
 800b138:	4602      	mov	r2, r0
 800b13a:	460b      	mov	r3, r1
 800b13c:	4620      	mov	r0, r4
 800b13e:	4629      	mov	r1, r5
 800b140:	f7f5 f8a2 	bl	8000288 <__aeabi_dsub>
 800b144:	4642      	mov	r2, r8
 800b146:	4604      	mov	r4, r0
 800b148:	460d      	mov	r5, r1
 800b14a:	465b      	mov	r3, fp
 800b14c:	4650      	mov	r0, sl
 800b14e:	4659      	mov	r1, fp
 800b150:	f7f5 f89c 	bl	800028c <__adddf3>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	4620      	mov	r0, r4
 800b15a:	4629      	mov	r1, r5
 800b15c:	f7f5 fb76 	bl	800084c <__aeabi_ddiv>
 800b160:	4602      	mov	r2, r0
 800b162:	460b      	mov	r3, r1
 800b164:	f7f5 f892 	bl	800028c <__adddf3>
 800b168:	4602      	mov	r2, r0
 800b16a:	460b      	mov	r3, r1
 800b16c:	a112      	add	r1, pc, #72	@ (adr r1, 800b1b8 <__ieee754_asin+0x3f8>)
 800b16e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b172:	f7f5 f889 	bl	8000288 <__aeabi_dsub>
 800b176:	4602      	mov	r2, r0
 800b178:	460b      	mov	r3, r1
 800b17a:	4630      	mov	r0, r6
 800b17c:	4639      	mov	r1, r7
 800b17e:	f7f5 f883 	bl	8000288 <__aeabi_dsub>
 800b182:	4642      	mov	r2, r8
 800b184:	4604      	mov	r4, r0
 800b186:	460d      	mov	r5, r1
 800b188:	465b      	mov	r3, fp
 800b18a:	4640      	mov	r0, r8
 800b18c:	4659      	mov	r1, fp
 800b18e:	f7f5 f87d 	bl	800028c <__adddf3>
 800b192:	4602      	mov	r2, r0
 800b194:	460b      	mov	r3, r1
 800b196:	a10a      	add	r1, pc, #40	@ (adr r1, 800b1c0 <__ieee754_asin+0x400>)
 800b198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b19c:	f7f5 f874 	bl	8000288 <__aeabi_dsub>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	4629      	mov	r1, r5
 800b1a8:	f7f5 f86e 	bl	8000288 <__aeabi_dsub>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	a103      	add	r1, pc, #12	@ (adr r1, 800b1c0 <__ieee754_asin+0x400>)
 800b1b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1b6:	e6e2      	b.n	800af7e <__ieee754_asin+0x1be>
 800b1b8:	33145c07 	.word	0x33145c07
 800b1bc:	3c91a626 	.word	0x3c91a626
 800b1c0:	54442d18 	.word	0x54442d18
 800b1c4:	3fe921fb 	.word	0x3fe921fb

0800b1c8 <_init>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	bf00      	nop
 800b1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ce:	bc08      	pop	{r3}
 800b1d0:	469e      	mov	lr, r3
 800b1d2:	4770      	bx	lr

0800b1d4 <_fini>:
 800b1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d6:	bf00      	nop
 800b1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1da:	bc08      	pop	{r3}
 800b1dc:	469e      	mov	lr, r3
 800b1de:	4770      	bx	lr
