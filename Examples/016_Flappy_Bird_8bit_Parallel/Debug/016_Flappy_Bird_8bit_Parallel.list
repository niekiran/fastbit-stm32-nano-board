
016_Flappy_Bird_8bit_Parallel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b038  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b354  0800b1c8  0800b1c8  0000c1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801651c  0801651c  000181f8  2**0
                  CONTENTS
  4 .ARM          00000008  0801651c  0801651c  0001751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016524  08016524  000181f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016524  08016524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016528  08016528  00017528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0801652c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000181f8  2**0
                  CONTENTS
 10 .bss          0000023c  200001f8  200001f8  000181f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000a04  20000434  20000434  000181f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000181f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af60  00000000  00000000  00018228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002676  00000000  00000000  00023188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  00025800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ab  00000000  00000000  00026260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ee99  00000000  00000000  00026a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff52  00000000  00000000  000458a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad434  00000000  00000000  000557f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00102c2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e80  00000000  00000000  00102c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008a  00000000  00000000  00106af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b1b0 	.word	0x0800b1b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800b1b0 	.word	0x0800b1b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <CST816S_i2c_read>:
  * @param  reg_addr: Address of the register to read from.
  * @param  reg_data: Pointer to a buffer where the read data will be stored.
  * @param  length: Number of bytes to read.
  * @retval None
  */
static void CST816S_i2c_read(uint16_t addr, uint8_t reg_addr, uint8_t *reg_data, size_t length) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	60ba      	str	r2, [r7, #8]
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4603      	mov	r3, r0
 8000d00:	81fb      	strh	r3, [r7, #14]
 8000d02:	460b      	mov	r3, r1
 8000d04:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Mem_Read(&hi2c1, addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, length, HAL_MAX_DELAY);
 8000d06:	89fb      	ldrh	r3, [r7, #14]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	b299      	uxth	r1, r3
 8000d0c:	7b7b      	ldrb	r3, [r7, #13]
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	9002      	str	r0, [sp, #8]
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2301      	movs	r3, #1
 8000d22:	4803      	ldr	r0, [pc, #12]	@ (8000d30 <CST816S_i2c_read+0x3c>)
 8000d24:	f003 fa92 	bl	800424c <HAL_I2C_Mem_Read>
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000228 	.word	0x20000228

08000d34 <CST816S_read_touch>:

/**
  * @brief  Reads touch data from the CST816S touch sensor.
  * @retval None
  */
void CST816S_read_touch(void) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
  uint8_t data_raw[8];
  uint8_t reg_addr = 0x01;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]

  CST816S_i2c_read(CST816S_ADDRESS, reg_addr, (uint8_t *)data_raw, 6);
 8000d3e:	1d3a      	adds	r2, r7, #4
 8000d40:	7bf9      	ldrb	r1, [r7, #15]
 8000d42:	2306      	movs	r3, #6
 8000d44:	2015      	movs	r0, #21
 8000d46:	f7ff ffd5 	bl	8000cf4 <CST816S_i2c_read>

  data.gestureID = data_raw[0];
 8000d4a:	793a      	ldrb	r2, [r7, #4]
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <CST816S_read_touch+0x54>)
 8000d4e:	701a      	strb	r2, [r3, #0]
  data.points = data_raw[1];
 8000d50:	797a      	ldrb	r2, [r7, #5]
 8000d52:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <CST816S_read_touch+0x54>)
 8000d54:	705a      	strb	r2, [r3, #1]
  data.event = data_raw[2] >> 6;
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	099b      	lsrs	r3, r3, #6
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <CST816S_read_touch+0x54>)
 8000d5e:	709a      	strb	r2, [r3, #2]
  data.x = ((data_raw[2] & 0xF) << 8) + data_raw[3];
 8000d60:	79bb      	ldrb	r3, [r7, #6]
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000d68:	79fa      	ldrb	r2, [r7, #7]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a06      	ldr	r2, [pc, #24]	@ (8000d88 <CST816S_read_touch+0x54>)
 8000d6e:	6053      	str	r3, [r2, #4]
  data.y = ((data_raw[4] & 0xF) << 8) + data_raw[5];
 8000d70:	7a3b      	ldrb	r3, [r7, #8]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000d78:	7a7a      	ldrb	r2, [r7, #9]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a02      	ldr	r2, [pc, #8]	@ (8000d88 <CST816S_read_touch+0x54>)
 8000d7e:	6093      	str	r3, [r2, #8]
}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000218 	.word	0x20000218

08000d8c <CST816S_get_data>:

/**
  * @brief  Returns a pointer to the structure containing the latest touch data.
  * @retval Pointer to the touch_data structure containing the latest touch information.
  */
struct touch_data* CST816S_get_data(void) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return &data;
 8000d90:	4b02      	ldr	r3, [pc, #8]	@ (8000d9c <CST816S_get_data+0x10>)
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	20000218 	.word	0x20000218

08000da0 <HAL_GPIO_EXTI_Callback>:
/**
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == TP_IN_Pin) {
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	2b20      	cmp	r3, #32
 8000dae:	d102      	bne.n	8000db6 <HAL_GPIO_EXTI_Callback+0x16>
    is_touch_detected = 1;
 8000db0:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <HAL_GPIO_EXTI_Callback+0x24>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
  }
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000214 	.word	0x20000214

08000dc8 <CST816S_hw_reset>:

void CST816S_hw_reset(void) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2110      	movs	r1, #16
 8000dd0:	480b      	ldr	r0, [pc, #44]	@ (8000e00 <CST816S_hw_reset+0x38>)
 8000dd2:	f003 f85b 	bl	8003e8c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000dd6:	2032      	movs	r0, #50	@ 0x32
 8000dd8:	f002 fd76 	bl	80038c8 <HAL_Delay>
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2110      	movs	r1, #16
 8000de0:	4807      	ldr	r0, [pc, #28]	@ (8000e00 <CST816S_hw_reset+0x38>)
 8000de2:	f003 f853 	bl	8003e8c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000de6:	2005      	movs	r0, #5
 8000de8:	f002 fd6e 	bl	80038c8 <HAL_Delay>
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2110      	movs	r1, #16
 8000df0:	4803      	ldr	r0, [pc, #12]	@ (8000e00 <CST816S_hw_reset+0x38>)
 8000df2:	f003 f84b 	bl	8003e8c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000df6:	2032      	movs	r0, #50	@ 0x32
 8000df8:	f002 fd66 	bl	80038c8 <HAL_Delay>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	48000400 	.word	0x48000400

08000e04 <CST816S_init>:
/**
  * @brief  Performs a hardware reset of the CST816S touch sensor.
  *         This function assumes GPIO pins and delays are configured appropriately.
  * @retval None
  */
void CST816S_init(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  CST816S_hw_reset();
 8000e08:	f7ff ffde 	bl	8000dc8 <CST816S_hw_reset>

  CST816S_i2c_read(CST816S_ADDRESS, 0x15, &data.version, 1);
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e4c <CST816S_init+0x48>)
 8000e10:	2115      	movs	r1, #21
 8000e12:	2015      	movs	r0, #21
 8000e14:	f7ff ff6e 	bl	8000cf4 <CST816S_i2c_read>
  HAL_Delay(5);
 8000e18:	2005      	movs	r0, #5
 8000e1a:	f002 fd55 	bl	80038c8 <HAL_Delay>
  CST816S_i2c_read(CST816S_ADDRESS, 0xA7, data.versionInfo, 3);
 8000e1e:	2303      	movs	r3, #3
 8000e20:	4a0b      	ldr	r2, [pc, #44]	@ (8000e50 <CST816S_init+0x4c>)
 8000e22:	21a7      	movs	r1, #167	@ 0xa7
 8000e24:	2015      	movs	r0, #21
 8000e26:	f7ff ff65 	bl	8000cf4 <CST816S_i2c_read>

  if(data.versionInfo[0] == 0xB4){
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <CST816S_init+0x50>)
 8000e2c:	7b5b      	ldrb	r3, [r3, #13]
 8000e2e:	2bb4      	cmp	r3, #180	@ 0xb4
 8000e30:	d103      	bne.n	8000e3a <CST816S_init+0x36>
    printf("CST86S detected.\n\t");
 8000e32:	4809      	ldr	r0, [pc, #36]	@ (8000e58 <CST816S_init+0x54>)
 8000e34:	f006 f9c8 	bl	80071c8 <iprintf>
 8000e38:	e002      	b.n	8000e40 <CST816S_init+0x3c>
  } else {
    printf("CST86S not detected.\n\t");
 8000e3a:	4808      	ldr	r0, [pc, #32]	@ (8000e5c <CST816S_init+0x58>)
 8000e3c:	f006 f9c4 	bl	80071c8 <iprintf>
  }
  HAL_Delay(50);
 8000e40:	2032      	movs	r0, #50	@ 0x32
 8000e42:	f002 fd41 	bl	80038c8 <HAL_Delay>
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000224 	.word	0x20000224
 8000e50:	20000225 	.word	0x20000225
 8000e54:	20000218 	.word	0x20000218
 8000e58:	0800b1c8 	.word	0x0800b1c8
 8000e5c:	0800b1dc 	.word	0x0800b1dc

08000e60 <CST816S_data_available>:

/**
  * @brief  Checks if touch data is available from the CST816S touch sensor.
  * @retval 1 if touch data is available, 0 otherwise.
  */
uint8_t CST816S_data_available(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
  uint8_t data_flag = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000e6a:	2017      	movs	r0, #23
 8000e6c:	f002 fe79 	bl	8003b62 <HAL_NVIC_DisableIRQ>
  if (is_touch_detected) {
 8000e70:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <CST816S_data_available+0x3c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d007      	beq.n	8000e88 <CST816S_data_available+0x28>
    CST816S_read_touch();
 8000e78:	f7ff ff5c 	bl	8000d34 <CST816S_read_touch>
    is_touch_detected = 0;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <CST816S_data_available+0x3c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
    data_flag = 1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	e001      	b.n	8000e8c <CST816S_data_available+0x2c>
  } else {
    data_flag = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	71fb      	strb	r3, [r7, #7]
  }
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e8c:	2017      	movs	r0, #23
 8000e8e:	f002 fe5a 	bl	8003b46 <HAL_NVIC_EnableIRQ>

  return data_flag;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000214 	.word	0x20000214

08000ea0 <gc9a01a_write_cmd>:
/**
  * @brief  Sends a command to the GC9A01A LCD display.
  * @param  cmd: The command byte to be sent to the display.
  * @retval None
  */
static void gc9a01a_write_cmd(uint8_t cmd) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  GC9A01A_DC_CMD;
 8000eaa:	4b24      	ldr	r3, [pc, #144]	@ (8000f3c <gc9a01a_write_cmd+0x9c>)
 8000eac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000eb0:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT(cmd);
 8000eb2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000eb6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000eba:	619a      	str	r2, [r3, #24]
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f3c <gc9a01a_write_cmd+0x9c>)
 8000ebe:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8000ec2:	619a      	str	r2, [r3, #24]
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	029b      	lsls	r3, r3, #10
 8000ec8:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000eda:	619a      	str	r2, [r3, #24]
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	035b      	lsls	r3, r3, #13
 8000ee0:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	02db      	lsls	r3, r3, #11
 8000ee8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eec:	431a      	orrs	r2, r3
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	025b      	lsls	r3, r3, #9
 8000ef2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	01db      	lsls	r3, r3, #7
 8000efc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f00:	431a      	orrs	r2, r3
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	015b      	lsls	r3, r3, #5
 8000f06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f14:	431a      	orrs	r2, r3
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <gc9a01a_write_cmd+0x9c>)
 8000f18:	619a      	str	r2, [r3, #24]
 8000f1a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000f22:	619a      	str	r2, [r3, #24]
 8000f24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f2c:	619a      	str	r2, [r3, #24]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	48000400 	.word	0x48000400

08000f40 <gc9a01a_write_data>:
  * @brief  Sends a buffer of data to the GC9A01A LCD display.
  * @param  buff: Pointer to the buffer containing the data to be sent.
  * @param  buff_size: Size of the buffer.
  * @retval None
  */
static void gc9a01a_write_data(uint8_t* buff, uint32_t buff_size) {
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  GC9A01A_DC_DATA;
 8000f4a:	4b35      	ldr	r3, [pc, #212]	@ (8001020 <gc9a01a_write_data+0xe0>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	619a      	str	r2, [r3, #24]

  for(uint32_t i = 0; i < buff_size; i++) {
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e058      	b.n	8001008 <gc9a01a_write_data+0xc8>
    GC9A01A_WRITE_8BIT(buff[i]);
 8000f56:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f5a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000f5e:	619a      	str	r2, [r3, #24]
 8000f60:	4b2f      	ldr	r3, [pc, #188]	@ (8001020 <gc9a01a_write_data+0xe0>)
 8000f62:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8000f66:	619a      	str	r2, [r3, #24]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	029b      	lsls	r3, r3, #10
 8000f72:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	440b      	add	r3, r1
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f84:	431a      	orrs	r2, r3
 8000f86:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f8a:	619a      	str	r2, [r3, #24]
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4413      	add	r3, r2
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	035b      	lsls	r3, r3, #13
 8000f96:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	440b      	add	r3, r1
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	02db      	lsls	r3, r3, #11
 8000fa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	440b      	add	r3, r1
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	025b      	lsls	r3, r3, #9
 8000fb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	440b      	add	r3, r1
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	01db      	lsls	r3, r3, #7
 8000fc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	440b      	add	r3, r1
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	015b      	lsls	r3, r3, #5
 8000fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	440b      	add	r3, r1
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <gc9a01a_write_data+0xe0>)
 8000fec:	619a      	str	r2, [r3, #24]
 8000fee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ff2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000ff6:	619a      	str	r2, [r3, #24]
 8000ff8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ffc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001000:	619a      	str	r2, [r3, #24]
  for(uint32_t i = 0; i < buff_size; i++) {
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3301      	adds	r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	429a      	cmp	r2, r3
 800100e:	d3a2      	bcc.n	8000f56 <gc9a01a_write_data+0x16>
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	48000400 	.word	0x48000400

08001024 <gc9a01a_hw_reset>:
/**
  * @brief  Hardware reset for GC9A01A LCD
  * @param  None
  * @retval None
  */
static void gc9a01a_hw_reset() {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  GC9A01A_RST_HIGH  ;
 8001028:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <gc9a01a_hw_reset+0x34>)
 800102a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800102e:	619a      	str	r2, [r3, #24]
  HAL_Delay(10);
 8001030:	200a      	movs	r0, #10
 8001032:	f002 fc49 	bl	80038c8 <HAL_Delay>
  GC9A01A_RST_LOW;
 8001036:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <gc9a01a_hw_reset+0x34>)
 8001038:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800103c:	619a      	str	r2, [r3, #24]
  HAL_Delay(10);
 800103e:	200a      	movs	r0, #10
 8001040:	f002 fc42 	bl	80038c8 <HAL_Delay>
  GC9A01A_RST_HIGH ;
 8001044:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <gc9a01a_hw_reset+0x34>)
 8001046:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800104a:	619a      	str	r2, [r3, #24]
  HAL_Delay(10);
 800104c:	200a      	movs	r0, #10
 800104e:	f002 fc3b 	bl	80038c8 <HAL_Delay>
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	48000400 	.word	0x48000400

0800105c <gc9a01a_set_address_window>:
 * @param x0 start column address.
 * @param x1 end column address.
 * @param y0 start row address.
 * @param y1 end row address.
 */
void gc9a01a_set_address_window(uint16_t x0, uint16_t x1, uint16_t y0, uint16_t y1) {
 800105c:	b490      	push	{r4, r7}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	4611      	mov	r1, r2
 8001068:	461a      	mov	r2, r3
 800106a:	4623      	mov	r3, r4
 800106c:	80fb      	strh	r3, [r7, #6]
 800106e:	4603      	mov	r3, r0
 8001070:	80bb      	strh	r3, [r7, #4]
 8001072:	460b      	mov	r3, r1
 8001074:	807b      	strh	r3, [r7, #2]
 8001076:	4613      	mov	r3, r2
 8001078:	803b      	strh	r3, [r7, #0]
  // Send commands to set column address (x2 to x2)
  GC9A01A_DC_CMD;
 800107a:	4bbb      	ldr	r3, [pc, #748]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 800107c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001080:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT(GC9A01A_CASET); // Column address set command
 8001082:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001086:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800108a:	619a      	str	r2, [r3, #24]
 800108c:	4bb6      	ldr	r3, [pc, #728]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 800108e:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8001092:	619a      	str	r2, [r3, #24]
 8001094:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001098:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800109c:	619a      	str	r2, [r3, #24]
 800109e:	4bb2      	ldr	r3, [pc, #712]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 80010a0:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80010a4:	619a      	str	r2, [r3, #24]
 80010a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80010aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80010ae:	619a      	str	r2, [r3, #24]
 80010b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80010b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010b8:	619a      	str	r2, [r3, #24]
  GC9A01A_DC_DATA;
 80010ba:	4bab      	ldr	r3, [pc, #684]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 80010bc:	2202      	movs	r2, #2
 80010be:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT((uint8_t)(x0 >> 8));
 80010c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80010c4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80010c8:	619a      	str	r2, [r3, #24]
 80010ca:	4ba7      	ldr	r3, [pc, #668]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 80010cc:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 80010d0:	619a      	str	r2, [r3, #24]
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	029b      	lsls	r3, r3, #10
 80010dc:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010ee:	431a      	orrs	r2, r3
 80010f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80010f4:	619a      	str	r2, [r3, #24]
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	035b      	lsls	r3, r3, #13
 8001100:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	0a1b      	lsrs	r3, r3, #8
 8001108:	b29b      	uxth	r3, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	02db      	lsls	r3, r3, #11
 800110e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001112:	431a      	orrs	r2, r3
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	0a1b      	lsrs	r3, r3, #8
 8001118:	b29b      	uxth	r3, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	025b      	lsls	r3, r3, #9
 800111e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001122:	431a      	orrs	r2, r3
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	b29b      	uxth	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	01db      	lsls	r3, r3, #7
 800112e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001132:	431a      	orrs	r2, r3
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	0a1b      	lsrs	r3, r3, #8
 8001138:	b29b      	uxth	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	015b      	lsls	r3, r3, #5
 800113e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001142:	431a      	orrs	r2, r3
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	0a1b      	lsrs	r3, r3, #8
 8001148:	b29b      	uxth	r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001152:	431a      	orrs	r2, r3
 8001154:	4b84      	ldr	r3, [pc, #528]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 8001156:	619a      	str	r2, [r3, #24]
 8001158:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800115c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001160:	619a      	str	r2, [r3, #24]
 8001162:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001166:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800116a:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT((uint8_t)x0);
 800116c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001170:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001174:	619a      	str	r2, [r3, #24]
 8001176:	4b7c      	ldr	r3, [pc, #496]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 8001178:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 800117c:	619a      	str	r2, [r3, #24]
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	029b      	lsls	r3, r3, #10
 8001184:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001192:	431a      	orrs	r2, r3
 8001194:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001198:	619a      	str	r2, [r3, #24]
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	035b      	lsls	r3, r3, #13
 80011a0:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	02db      	lsls	r3, r3, #11
 80011aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ae:	431a      	orrs	r2, r3
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011ba:	431a      	orrs	r2, r3
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	01db      	lsls	r3, r3, #7
 80011c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011c6:	431a      	orrs	r2, r3
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	015b      	lsls	r3, r3, #5
 80011ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011d2:	431a      	orrs	r2, r3
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011de:	431a      	orrs	r2, r3
 80011e0:	4b61      	ldr	r3, [pc, #388]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 80011e2:	619a      	str	r2, [r3, #24]
 80011e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011e8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80011ec:	619a      	str	r2, [r3, #24]
 80011ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011f2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011f6:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT((uint8_t)(x1 >> 8));
 80011f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011fc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001200:	619a      	str	r2, [r3, #24]
 8001202:	4b59      	ldr	r3, [pc, #356]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 8001204:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8001208:	619a      	str	r2, [r3, #24]
 800120a:	88bb      	ldrh	r3, [r7, #4]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	b29b      	uxth	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	029b      	lsls	r3, r3, #10
 8001214:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001218:	88bb      	ldrh	r3, [r7, #4]
 800121a:	0a1b      	lsrs	r3, r3, #8
 800121c:	b29b      	uxth	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001226:	431a      	orrs	r2, r3
 8001228:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800122c:	619a      	str	r2, [r3, #24]
 800122e:	88bb      	ldrh	r3, [r7, #4]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	b29b      	uxth	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	035b      	lsls	r3, r3, #13
 8001238:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b29b      	uxth	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	02db      	lsls	r3, r3, #11
 8001246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124a:	431a      	orrs	r2, r3
 800124c:	88bb      	ldrh	r3, [r7, #4]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	b29b      	uxth	r3, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	025b      	lsls	r3, r3, #9
 8001256:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800125a:	431a      	orrs	r2, r3
 800125c:	88bb      	ldrh	r3, [r7, #4]
 800125e:	0a1b      	lsrs	r3, r3, #8
 8001260:	b29b      	uxth	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	01db      	lsls	r3, r3, #7
 8001266:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800126a:	431a      	orrs	r2, r3
 800126c:	88bb      	ldrh	r3, [r7, #4]
 800126e:	0a1b      	lsrs	r3, r3, #8
 8001270:	b29b      	uxth	r3, r3
 8001272:	b2db      	uxtb	r3, r3
 8001274:	015b      	lsls	r3, r3, #5
 8001276:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800127a:	431a      	orrs	r2, r3
 800127c:	88bb      	ldrh	r3, [r7, #4]
 800127e:	0a1b      	lsrs	r3, r3, #8
 8001280:	b29b      	uxth	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800128a:	431a      	orrs	r2, r3
 800128c:	4b36      	ldr	r3, [pc, #216]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 800128e:	619a      	str	r2, [r3, #24]
 8001290:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001294:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001298:	619a      	str	r2, [r3, #24]
 800129a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800129e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012a2:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT((uint8_t)x1);
 80012a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012a8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80012ac:	619a      	str	r2, [r3, #24]
 80012ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 80012b0:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 80012b4:	619a      	str	r2, [r3, #24]
 80012b6:	88bb      	ldrh	r3, [r7, #4]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	029b      	lsls	r3, r3, #10
 80012bc:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012ca:	431a      	orrs	r2, r3
 80012cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012d0:	619a      	str	r2, [r3, #24]
 80012d2:	88bb      	ldrh	r3, [r7, #4]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	035b      	lsls	r3, r3, #13
 80012d8:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	02db      	lsls	r3, r3, #11
 80012e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e6:	431a      	orrs	r2, r3
 80012e8:	88bb      	ldrh	r3, [r7, #4]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	025b      	lsls	r3, r3, #9
 80012ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012f2:	431a      	orrs	r2, r3
 80012f4:	88bb      	ldrh	r3, [r7, #4]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	01db      	lsls	r3, r3, #7
 80012fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012fe:	431a      	orrs	r2, r3
 8001300:	88bb      	ldrh	r3, [r7, #4]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	015b      	lsls	r3, r3, #5
 8001306:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800130a:	431a      	orrs	r2, r3
 800130c:	88bb      	ldrh	r3, [r7, #4]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001316:	431a      	orrs	r2, r3
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 800131a:	619a      	str	r2, [r3, #24]
 800131c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001320:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001324:	619a      	str	r2, [r3, #24]
 8001326:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800132a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800132e:	619a      	str	r2, [r3, #24]

  // Send commands to set row address (y2 to y2)
  GC9A01A_DC_CMD;
 8001330:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 8001332:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001336:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT(GC9A01A_RASET); // Row address set command
 8001338:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800133c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001340:	619a      	str	r2, [r3, #24]
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 8001344:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8001348:	619a      	str	r2, [r3, #24]
 800134a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800134e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001352:	619a      	str	r2, [r3, #24]
 8001354:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <gc9a01a_set_address_window+0x30c>)
 8001356:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800135a:	619a      	str	r2, [r3, #24]
 800135c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001360:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001364:	619a      	str	r2, [r3, #24]
 8001366:	e001      	b.n	800136c <gc9a01a_set_address_window+0x310>
 8001368:	48000400 	.word	0x48000400
 800136c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001370:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001374:	619a      	str	r2, [r3, #24]
  GC9A01A_DC_DATA;
 8001376:	4bb1      	ldr	r3, [pc, #708]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 8001378:	2202      	movs	r2, #2
 800137a:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT((uint8_t)(y0 >> 8));
 800137c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001380:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001384:	619a      	str	r2, [r3, #24]
 8001386:	4bad      	ldr	r3, [pc, #692]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 8001388:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 800138c:	619a      	str	r2, [r3, #24]
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	b29b      	uxth	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	029b      	lsls	r3, r3, #10
 8001398:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	0a1b      	lsrs	r3, r3, #8
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013aa:	431a      	orrs	r2, r3
 80013ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013b0:	619a      	str	r2, [r3, #24]
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	035b      	lsls	r3, r3, #13
 80013bc:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	0a1b      	lsrs	r3, r3, #8
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	02db      	lsls	r3, r3, #11
 80013ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ce:	431a      	orrs	r2, r3
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	0a1b      	lsrs	r3, r3, #8
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	025b      	lsls	r3, r3, #9
 80013da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013de:	431a      	orrs	r2, r3
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	01db      	lsls	r3, r3, #7
 80013ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ee:	431a      	orrs	r2, r3
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	0a1b      	lsrs	r3, r3, #8
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	015b      	lsls	r3, r3, #5
 80013fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013fe:	431a      	orrs	r2, r3
 8001400:	887b      	ldrh	r3, [r7, #2]
 8001402:	0a1b      	lsrs	r3, r3, #8
 8001404:	b29b      	uxth	r3, r3
 8001406:	b2db      	uxtb	r3, r3
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800140e:	431a      	orrs	r2, r3
 8001410:	4b8a      	ldr	r3, [pc, #552]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 8001412:	619a      	str	r2, [r3, #24]
 8001414:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001418:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800141c:	619a      	str	r2, [r3, #24]
 800141e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001422:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001426:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT((uint8_t)y0);
 8001428:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800142c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001430:	619a      	str	r2, [r3, #24]
 8001432:	4b82      	ldr	r3, [pc, #520]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 8001434:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8001438:	619a      	str	r2, [r3, #24]
 800143a:	887b      	ldrh	r3, [r7, #2]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	029b      	lsls	r3, r3, #10
 8001440:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800144e:	431a      	orrs	r2, r3
 8001450:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001454:	619a      	str	r2, [r3, #24]
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	035b      	lsls	r3, r3, #13
 800145c:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8001460:	887b      	ldrh	r3, [r7, #2]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	02db      	lsls	r3, r3, #11
 8001466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800146a:	431a      	orrs	r2, r3
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	025b      	lsls	r3, r3, #9
 8001472:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001476:	431a      	orrs	r2, r3
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	01db      	lsls	r3, r3, #7
 800147e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001482:	431a      	orrs	r2, r3
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	015b      	lsls	r3, r3, #5
 800148a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800148e:	431a      	orrs	r2, r3
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800149a:	431a      	orrs	r2, r3
 800149c:	4b67      	ldr	r3, [pc, #412]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 800149e:	619a      	str	r2, [r3, #24]
 80014a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014a4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80014a8:	619a      	str	r2, [r3, #24]
 80014aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014ae:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014b2:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT((uint8_t)(y1 >> 8));
 80014b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014b8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80014bc:	619a      	str	r2, [r3, #24]
 80014be:	4b5f      	ldr	r3, [pc, #380]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 80014c0:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 80014c4:	619a      	str	r2, [r3, #24]
 80014c6:	883b      	ldrh	r3, [r7, #0]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	029b      	lsls	r3, r3, #10
 80014d0:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80014d4:	883b      	ldrh	r3, [r7, #0]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014e2:	431a      	orrs	r2, r3
 80014e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014e8:	619a      	str	r2, [r3, #24]
 80014ea:	883b      	ldrh	r3, [r7, #0]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	035b      	lsls	r3, r3, #13
 80014f4:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80014f8:	883b      	ldrh	r3, [r7, #0]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	02db      	lsls	r3, r3, #11
 8001502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001506:	431a      	orrs	r2, r3
 8001508:	883b      	ldrh	r3, [r7, #0]
 800150a:	0a1b      	lsrs	r3, r3, #8
 800150c:	b29b      	uxth	r3, r3
 800150e:	b2db      	uxtb	r3, r3
 8001510:	025b      	lsls	r3, r3, #9
 8001512:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001516:	431a      	orrs	r2, r3
 8001518:	883b      	ldrh	r3, [r7, #0]
 800151a:	0a1b      	lsrs	r3, r3, #8
 800151c:	b29b      	uxth	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	01db      	lsls	r3, r3, #7
 8001522:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001526:	431a      	orrs	r2, r3
 8001528:	883b      	ldrh	r3, [r7, #0]
 800152a:	0a1b      	lsrs	r3, r3, #8
 800152c:	b29b      	uxth	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	015b      	lsls	r3, r3, #5
 8001532:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001536:	431a      	orrs	r2, r3
 8001538:	883b      	ldrh	r3, [r7, #0]
 800153a:	0a1b      	lsrs	r3, r3, #8
 800153c:	b29b      	uxth	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001546:	431a      	orrs	r2, r3
 8001548:	4b3c      	ldr	r3, [pc, #240]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 800154a:	619a      	str	r2, [r3, #24]
 800154c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001550:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001554:	619a      	str	r2, [r3, #24]
 8001556:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800155a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800155e:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT((uint8_t)y1);
 8001560:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001564:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001568:	619a      	str	r2, [r3, #24]
 800156a:	4b34      	ldr	r3, [pc, #208]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 800156c:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8001570:	619a      	str	r2, [r3, #24]
 8001572:	883b      	ldrh	r3, [r7, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	029b      	lsls	r3, r3, #10
 8001578:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800157c:	883b      	ldrh	r3, [r7, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001586:	431a      	orrs	r2, r3
 8001588:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800158c:	619a      	str	r2, [r3, #24]
 800158e:	883b      	ldrh	r3, [r7, #0]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	035b      	lsls	r3, r3, #13
 8001594:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8001598:	883b      	ldrh	r3, [r7, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	02db      	lsls	r3, r3, #11
 800159e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a2:	431a      	orrs	r2, r3
 80015a4:	883b      	ldrh	r3, [r7, #0]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015ae:	431a      	orrs	r2, r3
 80015b0:	883b      	ldrh	r3, [r7, #0]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	01db      	lsls	r3, r3, #7
 80015b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ba:	431a      	orrs	r2, r3
 80015bc:	883b      	ldrh	r3, [r7, #0]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	015b      	lsls	r3, r3, #5
 80015c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015c6:	431a      	orrs	r2, r3
 80015c8:	883b      	ldrh	r3, [r7, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d2:	431a      	orrs	r2, r3
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 80015d6:	619a      	str	r2, [r3, #24]
 80015d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015dc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80015e0:	619a      	str	r2, [r3, #24]
 80015e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015ea:	619a      	str	r2, [r3, #24]

  // Send command to write to RAM
  GC9A01A_DC_CMD;
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 80015ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015f2:	619a      	str	r2, [r3, #24]
  GC9A01A_WRITE_8BIT(GC9A01A_RAMWR); // Write to RAM command
 80015f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80015f8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80015fc:	619a      	str	r2, [r3, #24]
 80015fe:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 8001600:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8001604:	619a      	str	r2, [r3, #24]
 8001606:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
 800160e:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 8001610:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8001614:	619a      	str	r2, [r3, #24]
 8001616:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800161a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800161e:	619a      	str	r2, [r3, #24]
 8001620:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001624:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001628:	619a      	str	r2, [r3, #24]
  GC9A01A_DC_DATA;
 800162a:	4b04      	ldr	r3, [pc, #16]	@ (800163c <gc9a01a_set_address_window+0x5e0>)
 800162c:	2202      	movs	r2, #2
 800162e:	619a      	str	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bc90      	pop	{r4, r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	48000400 	.word	0x48000400

08001640 <gc9a01a_init>:
/**
  * @brief  Initialize the GC9A01A LCD
  * @param  None
  * @retval None
  */
static void gc9a01a_init() {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
  uint8_t params[15];
  GC9A01A_CS_LOW;
 8001646:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800164a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800164e:	619a      	str	r2, [r3, #24]

  gc9a01a_write_cmd(GC9A01A_INREGEN1);      ///< Inter register enable 1
 8001650:	20fe      	movs	r0, #254	@ 0xfe
 8001652:	f7ff fc25 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_cmd(GC9A01A_INREGEN2);      ///< Inter register enable 2
 8001656:	20ef      	movs	r0, #239	@ 0xef
 8001658:	f7ff fc22 	bl	8000ea0 <gc9a01a_write_cmd>

  params[0] = 0x14;
 800165c:	2314      	movs	r3, #20
 800165e:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xEB);
 8001660:	20eb      	movs	r0, #235	@ 0xeb
 8001662:	f7ff fc1d 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001666:	463b      	mov	r3, r7
 8001668:	2101      	movs	r1, #1
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fc68 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x60;
 8001670:	2360      	movs	r3, #96	@ 0x60
 8001672:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x84);
 8001674:	2084      	movs	r0, #132	@ 0x84
 8001676:	f7ff fc13 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800167a:	463b      	mov	r3, r7
 800167c:	2101      	movs	r1, #1
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fc5e 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0xFF;
 8001684:	23ff      	movs	r3, #255	@ 0xff
 8001686:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x85);
 8001688:	2085      	movs	r0, #133	@ 0x85
 800168a:	f7ff fc09 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800168e:	463b      	mov	r3, r7
 8001690:	2101      	movs	r1, #1
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fc54 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0xFF;
 8001698:	23ff      	movs	r3, #255	@ 0xff
 800169a:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x86);
 800169c:	2086      	movs	r0, #134	@ 0x86
 800169e:	f7ff fbff 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80016a2:	463b      	mov	r3, r7
 80016a4:	2101      	movs	r1, #1
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fc4a 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0xFF;
 80016ac:	23ff      	movs	r3, #255	@ 0xff
 80016ae:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x87);
 80016b0:	2087      	movs	r0, #135	@ 0x87
 80016b2:	f7ff fbf5 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80016b6:	463b      	mov	r3, r7
 80016b8:	2101      	movs	r1, #1
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fc40 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0xFF;
 80016c0:	23ff      	movs	r3, #255	@ 0xff
 80016c2:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8E);
 80016c4:	208e      	movs	r0, #142	@ 0x8e
 80016c6:	f7ff fbeb 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80016ca:	463b      	mov	r3, r7
 80016cc:	2101      	movs	r1, #1
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fc36 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0xFF;
 80016d4:	23ff      	movs	r3, #255	@ 0xff
 80016d6:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8F);
 80016d8:	208f      	movs	r0, #143	@ 0x8f
 80016da:	f7ff fbe1 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80016de:	463b      	mov	r3, r7
 80016e0:	2101      	movs	r1, #1
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fc2c 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x0A;
 80016e8:	230a      	movs	r3, #10
 80016ea:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x88);
 80016ec:	2088      	movs	r0, #136	@ 0x88
 80016ee:	f7ff fbd7 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80016f2:	463b      	mov	r3, r7
 80016f4:	2101      	movs	r1, #1
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fc22 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x21;
 80016fc:	2321      	movs	r3, #33	@ 0x21
 80016fe:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x89);
 8001700:	2089      	movs	r0, #137	@ 0x89
 8001702:	f7ff fbcd 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001706:	463b      	mov	r3, r7
 8001708:	2101      	movs	r1, #1
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fc18 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x00;
 8001710:	2300      	movs	r3, #0
 8001712:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8A);
 8001714:	208a      	movs	r0, #138	@ 0x8a
 8001716:	f7ff fbc3 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800171a:	463b      	mov	r3, r7
 800171c:	2101      	movs	r1, #1
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fc0e 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x80;
 8001724:	2380      	movs	r3, #128	@ 0x80
 8001726:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8B);
 8001728:	208b      	movs	r0, #139	@ 0x8b
 800172a:	f7ff fbb9 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800172e:	463b      	mov	r3, r7
 8001730:	2101      	movs	r1, #1
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fc04 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x01;
 8001738:	2301      	movs	r3, #1
 800173a:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8C);
 800173c:	208c      	movs	r0, #140	@ 0x8c
 800173e:	f7ff fbaf 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001742:	463b      	mov	r3, r7
 8001744:	2101      	movs	r1, #1
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fbfa 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x03;
 800174c:	2303      	movs	r3, #3
 800174e:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0x8D);
 8001750:	208d      	movs	r0, #141	@ 0x8d
 8001752:	f7ff fba5 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001756:	463b      	mov	r3, r7
 8001758:	2101      	movs	r1, #1
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fbf0 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x08;
 8001760:	2308      	movs	r3, #8
 8001762:	703b      	strb	r3, [r7, #0]
  params[1] = 0x09;
 8001764:	2309      	movs	r3, #9
 8001766:	707b      	strb	r3, [r7, #1]
  params[2] = 0x14;
 8001768:	2314      	movs	r3, #20
 800176a:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x08;
 800176c:	2308      	movs	r3, #8
 800176e:	70fb      	strb	r3, [r7, #3]
  gc9a01a_write_cmd(0xB5);
 8001770:	20b5      	movs	r0, #181	@ 0xb5
 8001772:	f7ff fb95 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 4);
 8001776:	463b      	mov	r3, r7
 8001778:	2104      	movs	r1, #4
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fbe0 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x00;
 8001780:	2300      	movs	r3, #0
 8001782:	703b      	strb	r3, [r7, #0]
  params[1] = 0x00;
 8001784:	2300      	movs	r3, #0
 8001786:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(GC9A01A_DISP_CTRL);     ///<Display Function Control
 8001788:	20b6      	movs	r0, #182	@ 0xb6
 800178a:	f7ff fb89 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 800178e:	463b      	mov	r3, r7
 8001790:	2102      	movs	r1, #2
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fbd4 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x48;
 8001798:	2348      	movs	r3, #72	@ 0x48
 800179a:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A_MADCTL);        ///< Memory Access Control
 800179c:	2036      	movs	r0, #54	@ 0x36
 800179e:	f7ff fb7f 	bl	8000ea0 <gc9a01a_write_cmd>

  gc9a01a_write_data(params, 1);
 80017a2:	463b      	mov	r3, r7
 80017a4:	2101      	movs	r1, #1
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fbca 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x05;
 80017ac:	2305      	movs	r3, #5
 80017ae:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A_COLMOD);        ///< Pixel Format Set
 80017b0:	203a      	movs	r0, #58	@ 0x3a
 80017b2:	f7ff fb75 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80017b6:	463b      	mov	r3, r7
 80017b8:	2101      	movs	r1, #1
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fbc0 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x08;
 80017c0:	2308      	movs	r3, #8
 80017c2:	703b      	strb	r3, [r7, #0]
  params[1] = 0x08;
 80017c4:	2308      	movs	r3, #8
 80017c6:	707b      	strb	r3, [r7, #1]
  params[2] = 0x08;
 80017c8:	2308      	movs	r3, #8
 80017ca:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x08;
 80017cc:	2308      	movs	r3, #8
 80017ce:	70fb      	strb	r3, [r7, #3]
  gc9a01a_write_cmd(0x90);
 80017d0:	2090      	movs	r0, #144	@ 0x90
 80017d2:	f7ff fb65 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 4);
 80017d6:	463b      	mov	r3, r7
 80017d8:	2104      	movs	r1, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fbb0 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x06;
 80017e0:	2306      	movs	r3, #6
 80017e2:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xBD);
 80017e4:	20bd      	movs	r0, #189	@ 0xbd
 80017e6:	f7ff fb5b 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80017ea:	463b      	mov	r3, r7
 80017ec:	2101      	movs	r1, #1
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fba6 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x01;
 80017f4:	2301      	movs	r3, #1
 80017f6:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xBA);
 80017f8:	20ba      	movs	r0, #186	@ 0xba
 80017fa:	f7ff fb51 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80017fe:	463b      	mov	r3, r7
 8001800:	2101      	movs	r1, #1
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fb9c 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x00;
 8001808:	2300      	movs	r3, #0
 800180a:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xBC);
 800180c:	20bc      	movs	r0, #188	@ 0xbc
 800180e:	f7ff fb47 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001812:	463b      	mov	r3, r7
 8001814:	2101      	movs	r1, #1
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fb92 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x60;
 800181c:	2360      	movs	r3, #96	@ 0x60
 800181e:	703b      	strb	r3, [r7, #0]
  params[1] = 0x01;
 8001820:	2301      	movs	r3, #1
 8001822:	707b      	strb	r3, [r7, #1]
  params[2] = 0x04;
 8001824:	2304      	movs	r3, #4
 8001826:	70bb      	strb	r3, [r7, #2]
  gc9a01a_write_cmd(0xFF);
 8001828:	20ff      	movs	r0, #255	@ 0xff
 800182a:	f7ff fb39 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 3);
 800182e:	463b      	mov	r3, r7
 8001830:	2103      	movs	r1, #3
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fb84 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x14;
 8001838:	2314      	movs	r3, #20
 800183a:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A1_POWER2);       ///< Power Control 2
 800183c:	20c3      	movs	r0, #195	@ 0xc3
 800183e:	f7ff fb2f 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001842:	463b      	mov	r3, r7
 8001844:	2101      	movs	r1, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fb7a 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x14;
 800184c:	2314      	movs	r3, #20
 800184e:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A1_POWER3);       ///< Power Control 3
 8001850:	20c4      	movs	r0, #196	@ 0xc4
 8001852:	f7ff fb25 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001856:	463b      	mov	r3, r7
 8001858:	2101      	movs	r1, #1
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fb70 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x25;
 8001860:	2325      	movs	r3, #37	@ 0x25
 8001862:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A1_POWER4);       ///< Power Control 4
 8001864:	20c9      	movs	r0, #201	@ 0xc9
 8001866:	f7ff fb1b 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800186a:	463b      	mov	r3, r7
 800186c:	2101      	movs	r1, #1
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fb66 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x11;
 8001874:	2311      	movs	r3, #17
 8001876:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xBE);
 8001878:	20be      	movs	r0, #190	@ 0xbe
 800187a:	f7ff fb11 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800187e:	463b      	mov	r3, r7
 8001880:	2101      	movs	r1, #1
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fb5c 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x10;
 8001888:	2310      	movs	r3, #16
 800188a:	703b      	strb	r3, [r7, #0]
  params[1] = 0x0e;
 800188c:	230e      	movs	r3, #14
 800188e:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(0xE1);
 8001890:	20e1      	movs	r0, #225	@ 0xe1
 8001892:	f7ff fb05 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 8001896:	463b      	mov	r3, r7
 8001898:	2102      	movs	r1, #2
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fb50 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x21;
 80018a0:	2321      	movs	r3, #33	@ 0x21
 80018a2:	703b      	strb	r3, [r7, #0]
  params[1] = 0x0c;
 80018a4:	230c      	movs	r3, #12
 80018a6:	707b      	strb	r3, [r7, #1]
  params[2] = 0x02;
 80018a8:	2302      	movs	r3, #2
 80018aa:	70bb      	strb	r3, [r7, #2]
  gc9a01a_write_cmd(0xDF);
 80018ac:	20df      	movs	r0, #223	@ 0xdf
 80018ae:	f7ff faf7 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 3);
 80018b2:	463b      	mov	r3, r7
 80018b4:	2103      	movs	r1, #3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fb42 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x45;
 80018bc:	2345      	movs	r3, #69	@ 0x45
 80018be:	703b      	strb	r3, [r7, #0]
  params[1] = 0x09;
 80018c0:	2309      	movs	r3, #9
 80018c2:	707b      	strb	r3, [r7, #1]
  params[2] = 0x08;
 80018c4:	2308      	movs	r3, #8
 80018c6:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x08;
 80018c8:	2308      	movs	r3, #8
 80018ca:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x26;
 80018cc:	2326      	movs	r3, #38	@ 0x26
 80018ce:	713b      	strb	r3, [r7, #4]
  params[5] = 0x2A;
 80018d0:	232a      	movs	r3, #42	@ 0x2a
 80018d2:	717b      	strb	r3, [r7, #5]
  gc9a01a_write_cmd(GC9A01A_GAMMA1);        ///< Set gamma 1
 80018d4:	20f0      	movs	r0, #240	@ 0xf0
 80018d6:	f7ff fae3 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 6);
 80018da:	463b      	mov	r3, r7
 80018dc:	2106      	movs	r1, #6
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fb2e 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x43;
 80018e4:	2343      	movs	r3, #67	@ 0x43
 80018e6:	703b      	strb	r3, [r7, #0]
  params[1] = 0x70;
 80018e8:	2370      	movs	r3, #112	@ 0x70
 80018ea:	707b      	strb	r3, [r7, #1]
  params[2] = 0x72;
 80018ec:	2372      	movs	r3, #114	@ 0x72
 80018ee:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x36;
 80018f0:	2336      	movs	r3, #54	@ 0x36
 80018f2:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x37;
 80018f4:	2337      	movs	r3, #55	@ 0x37
 80018f6:	713b      	strb	r3, [r7, #4]
  params[5] = 0x6F;
 80018f8:	236f      	movs	r3, #111	@ 0x6f
 80018fa:	717b      	strb	r3, [r7, #5]
  gc9a01a_write_cmd(GC9A01A_GAMMA2);        ///< Set gamma 2
 80018fc:	20f1      	movs	r0, #241	@ 0xf1
 80018fe:	f7ff facf 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 6);
 8001902:	463b      	mov	r3, r7
 8001904:	2106      	movs	r1, #6
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fb1a 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x45;
 800190c:	2345      	movs	r3, #69	@ 0x45
 800190e:	703b      	strb	r3, [r7, #0]
  params[1] = 0x09;
 8001910:	2309      	movs	r3, #9
 8001912:	707b      	strb	r3, [r7, #1]
  params[2] = 0x08;
 8001914:	2308      	movs	r3, #8
 8001916:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x08;
 8001918:	2308      	movs	r3, #8
 800191a:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x26;
 800191c:	2326      	movs	r3, #38	@ 0x26
 800191e:	713b      	strb	r3, [r7, #4]
  params[5] = 0x2A;
 8001920:	232a      	movs	r3, #42	@ 0x2a
 8001922:	717b      	strb	r3, [r7, #5]
  gc9a01a_write_cmd(GC9A01A_GAMMA3);        ///< Set gamma 3
 8001924:	20f2      	movs	r0, #242	@ 0xf2
 8001926:	f7ff fabb 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 6);
 800192a:	463b      	mov	r3, r7
 800192c:	2106      	movs	r1, #6
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fb06 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x43;
 8001934:	2343      	movs	r3, #67	@ 0x43
 8001936:	703b      	strb	r3, [r7, #0]
  params[1] = 0x70;
 8001938:	2370      	movs	r3, #112	@ 0x70
 800193a:	707b      	strb	r3, [r7, #1]
  params[2] = 0x72;
 800193c:	2372      	movs	r3, #114	@ 0x72
 800193e:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x36;
 8001940:	2336      	movs	r3, #54	@ 0x36
 8001942:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x37;
 8001944:	2337      	movs	r3, #55	@ 0x37
 8001946:	713b      	strb	r3, [r7, #4]
  params[5] = 0x6F;
 8001948:	236f      	movs	r3, #111	@ 0x6f
 800194a:	717b      	strb	r3, [r7, #5]
  gc9a01a_write_cmd(GC9A01A_GAMMA4);        ///< Set gamma 4
 800194c:	20f3      	movs	r0, #243	@ 0xf3
 800194e:	f7ff faa7 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 6);
 8001952:	463b      	mov	r3, r7
 8001954:	2106      	movs	r1, #6
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff faf2 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x1B;
 800195c:	231b      	movs	r3, #27
 800195e:	703b      	strb	r3, [r7, #0]
  params[1] = 0x0B;
 8001960:	230b      	movs	r3, #11
 8001962:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(0xED);
 8001964:	20ed      	movs	r0, #237	@ 0xed
 8001966:	f7ff fa9b 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 800196a:	463b      	mov	r3, r7
 800196c:	2102      	movs	r1, #2
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fae6 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x77;
 8001974:	2377      	movs	r3, #119	@ 0x77
 8001976:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xAE);
 8001978:	20ae      	movs	r0, #174	@ 0xae
 800197a:	f7ff fa91 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 800197e:	463b      	mov	r3, r7
 8001980:	2101      	movs	r1, #1
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fadc 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x63;
 8001988:	2363      	movs	r3, #99	@ 0x63
 800198a:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(0xCD);
 800198c:	20cd      	movs	r0, #205	@ 0xcd
 800198e:	f7ff fa87 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001992:	463b      	mov	r3, r7
 8001994:	2101      	movs	r1, #1
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fad2 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x07;
 800199c:	2307      	movs	r3, #7
 800199e:	703b      	strb	r3, [r7, #0]
  params[1] = 0x07;
 80019a0:	2307      	movs	r3, #7
 80019a2:	707b      	strb	r3, [r7, #1]
  params[2] = 0x04;
 80019a4:	2304      	movs	r3, #4
 80019a6:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x0E;
 80019a8:	230e      	movs	r3, #14
 80019aa:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x0F;
 80019ac:	230f      	movs	r3, #15
 80019ae:	713b      	strb	r3, [r7, #4]
  params[5] = 0x09;
 80019b0:	2309      	movs	r3, #9
 80019b2:	717b      	strb	r3, [r7, #5]
  params[6] = 0x07;
 80019b4:	2307      	movs	r3, #7
 80019b6:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x08;
 80019b8:	2308      	movs	r3, #8
 80019ba:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x03;
 80019bc:	2303      	movs	r3, #3
 80019be:	723b      	strb	r3, [r7, #8]
  gc9a01a_write_cmd(0x70);
 80019c0:	2070      	movs	r0, #112	@ 0x70
 80019c2:	f7ff fa6d 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 9);
 80019c6:	463b      	mov	r3, r7
 80019c8:	2109      	movs	r1, #9
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fab8 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x34;
 80019d0:	2334      	movs	r3, #52	@ 0x34
 80019d2:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A_FRAMERATE);     ///< Frame rate control
 80019d4:	20e8      	movs	r0, #232	@ 0xe8
 80019d6:	f7ff fa63 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 80019da:	463b      	mov	r3, r7
 80019dc:	2101      	movs	r1, #1
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff faae 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x18;
 80019e4:	2318      	movs	r3, #24
 80019e6:	703b      	strb	r3, [r7, #0]
  params[1] = 0x0D;
 80019e8:	230d      	movs	r3, #13
 80019ea:	707b      	strb	r3, [r7, #1]
  params[2] = 0x71;
 80019ec:	2371      	movs	r3, #113	@ 0x71
 80019ee:	70bb      	strb	r3, [r7, #2]
  params[3] = 0xED;
 80019f0:	23ed      	movs	r3, #237	@ 0xed
 80019f2:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x70;
 80019f4:	2370      	movs	r3, #112	@ 0x70
 80019f6:	713b      	strb	r3, [r7, #4]
  params[5] = 0x70;
 80019f8:	2370      	movs	r3, #112	@ 0x70
 80019fa:	717b      	strb	r3, [r7, #5]
  params[6] = 0x18;
 80019fc:	2318      	movs	r3, #24
 80019fe:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x0F;
 8001a00:	230f      	movs	r3, #15
 8001a02:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x71;
 8001a04:	2371      	movs	r3, #113	@ 0x71
 8001a06:	723b      	strb	r3, [r7, #8]
  params[9] = 0xEF;
 8001a08:	23ef      	movs	r3, #239	@ 0xef
 8001a0a:	727b      	strb	r3, [r7, #9]
  params[10] = 0x70;
 8001a0c:	2370      	movs	r3, #112	@ 0x70
 8001a0e:	72bb      	strb	r3, [r7, #10]
  params[11] = 0x70;
 8001a10:	2370      	movs	r3, #112	@ 0x70
 8001a12:	72fb      	strb	r3, [r7, #11]
  gc9a01a_write_cmd(0x62);
 8001a14:	2062      	movs	r0, #98	@ 0x62
 8001a16:	f7ff fa43 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 12);
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	210c      	movs	r1, #12
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fa8e 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x18;
 8001a24:	2318      	movs	r3, #24
 8001a26:	703b      	strb	r3, [r7, #0]
  params[1] = 0x11;
 8001a28:	2311      	movs	r3, #17
 8001a2a:	707b      	strb	r3, [r7, #1]
  params[2] = 0x71;
 8001a2c:	2371      	movs	r3, #113	@ 0x71
 8001a2e:	70bb      	strb	r3, [r7, #2]
  params[3] = 0xF1;
 8001a30:	23f1      	movs	r3, #241	@ 0xf1
 8001a32:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x70;
 8001a34:	2370      	movs	r3, #112	@ 0x70
 8001a36:	713b      	strb	r3, [r7, #4]
  params[5] = 0x70;
 8001a38:	2370      	movs	r3, #112	@ 0x70
 8001a3a:	717b      	strb	r3, [r7, #5]
  params[6] = 0x18;
 8001a3c:	2318      	movs	r3, #24
 8001a3e:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x13;
 8001a40:	2313      	movs	r3, #19
 8001a42:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x71;
 8001a44:	2371      	movs	r3, #113	@ 0x71
 8001a46:	723b      	strb	r3, [r7, #8]
  params[9] = 0xF3;
 8001a48:	23f3      	movs	r3, #243	@ 0xf3
 8001a4a:	727b      	strb	r3, [r7, #9]
  params[10] = 0x70;
 8001a4c:	2370      	movs	r3, #112	@ 0x70
 8001a4e:	72bb      	strb	r3, [r7, #10]
  params[11] = 0x70;
 8001a50:	2370      	movs	r3, #112	@ 0x70
 8001a52:	72fb      	strb	r3, [r7, #11]
  gc9a01a_write_cmd(0x63);
 8001a54:	2063      	movs	r0, #99	@ 0x63
 8001a56:	f7ff fa23 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 12);
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	210c      	movs	r1, #12
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fa6e 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x28;
 8001a64:	2328      	movs	r3, #40	@ 0x28
 8001a66:	703b      	strb	r3, [r7, #0]
  params[1] = 0x29;
 8001a68:	2329      	movs	r3, #41	@ 0x29
 8001a6a:	707b      	strb	r3, [r7, #1]
  params[2] = 0xF1;
 8001a6c:	23f1      	movs	r3, #241	@ 0xf1
 8001a6e:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x01;
 8001a70:	2301      	movs	r3, #1
 8001a72:	70fb      	strb	r3, [r7, #3]
  params[4] = 0xF1;
 8001a74:	23f1      	movs	r3, #241	@ 0xf1
 8001a76:	713b      	strb	r3, [r7, #4]
  params[5] = 0x00;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	717b      	strb	r3, [r7, #5]
  params[6] = 0x07;
 8001a7c:	2307      	movs	r3, #7
 8001a7e:	71bb      	strb	r3, [r7, #6]
  gc9a01a_write_cmd(0x64);
 8001a80:	2064      	movs	r0, #100	@ 0x64
 8001a82:	f7ff fa0d 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 7);
 8001a86:	463b      	mov	r3, r7
 8001a88:	2107      	movs	r1, #7
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fa58 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x3C;
 8001a90:	233c      	movs	r3, #60	@ 0x3c
 8001a92:	703b      	strb	r3, [r7, #0]
  params[1] = 0x00;
 8001a94:	2300      	movs	r3, #0
 8001a96:	707b      	strb	r3, [r7, #1]
  params[2] = 0xCD;
 8001a98:	23cd      	movs	r3, #205	@ 0xcd
 8001a9a:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x67;
 8001a9c:	2367      	movs	r3, #103	@ 0x67
 8001a9e:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x45;
 8001aa0:	2345      	movs	r3, #69	@ 0x45
 8001aa2:	713b      	strb	r3, [r7, #4]
  params[5] = 0x45;
 8001aa4:	2345      	movs	r3, #69	@ 0x45
 8001aa6:	717b      	strb	r3, [r7, #5]
  params[6] = 0x10;
 8001aa8:	2310      	movs	r3, #16
 8001aaa:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x00;
 8001aac:	2300      	movs	r3, #0
 8001aae:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x00;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	723b      	strb	r3, [r7, #8]
  params[9] = 0x00;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	727b      	strb	r3, [r7, #9]
  gc9a01a_write_cmd(0x66);
 8001ab8:	2066      	movs	r0, #102	@ 0x66
 8001aba:	f7ff f9f1 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 10);
 8001abe:	463b      	mov	r3, r7
 8001ac0:	210a      	movs	r1, #10
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fa3c 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x00;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	703b      	strb	r3, [r7, #0]
  params[1] = 0x3C;
 8001acc:	233c      	movs	r3, #60	@ 0x3c
 8001ace:	707b      	strb	r3, [r7, #1]
  params[2] = 0x00;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x00;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x00;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	713b      	strb	r3, [r7, #4]
  params[5] = 0x01;
 8001adc:	2301      	movs	r3, #1
 8001ade:	717b      	strb	r3, [r7, #5]
  params[6] = 0x54;
 8001ae0:	2354      	movs	r3, #84	@ 0x54
 8001ae2:	71bb      	strb	r3, [r7, #6]
  params[7] = 0x10;
 8001ae4:	2310      	movs	r3, #16
 8001ae6:	71fb      	strb	r3, [r7, #7]
  params[8] = 0x32;
 8001ae8:	2332      	movs	r3, #50	@ 0x32
 8001aea:	723b      	strb	r3, [r7, #8]
  params[9] = 0x98;
 8001aec:	2398      	movs	r3, #152	@ 0x98
 8001aee:	727b      	strb	r3, [r7, #9]
  gc9a01a_write_cmd(0x67);
 8001af0:	2067      	movs	r0, #103	@ 0x67
 8001af2:	f7ff f9d5 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 10);
 8001af6:	463b      	mov	r3, r7
 8001af8:	210a      	movs	r1, #10
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fa20 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x10;
 8001b00:	2310      	movs	r3, #16
 8001b02:	703b      	strb	r3, [r7, #0]
  params[1] = 0x85;
 8001b04:	2385      	movs	r3, #133	@ 0x85
 8001b06:	707b      	strb	r3, [r7, #1]
  params[2] = 0x80;
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	70bb      	strb	r3, [r7, #2]
  params[3] = 0x00;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	70fb      	strb	r3, [r7, #3]
  params[4] = 0x00;
 8001b10:	2300      	movs	r3, #0
 8001b12:	713b      	strb	r3, [r7, #4]
  params[5] = 0x4E;
 8001b14:	234e      	movs	r3, #78	@ 0x4e
 8001b16:	717b      	strb	r3, [r7, #5]
  params[6] = 0x00;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	71bb      	strb	r3, [r7, #6]
  gc9a01a_write_cmd(0x74);
 8001b1c:	2074      	movs	r0, #116	@ 0x74
 8001b1e:	f7ff f9bf 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 7);
 8001b22:	463b      	mov	r3, r7
 8001b24:	2107      	movs	r1, #7
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fa0a 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x3E;
 8001b2c:	233e      	movs	r3, #62	@ 0x3e
 8001b2e:	703b      	strb	r3, [r7, #0]
  params[1] = 0x07;
 8001b30:	2307      	movs	r3, #7
 8001b32:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(0x98);
 8001b34:	2098      	movs	r0, #152	@ 0x98
 8001b36:	f7ff f9b3 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f9fe 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x3E;
 8001b44:	233e      	movs	r3, #62	@ 0x3e
 8001b46:	703b      	strb	r3, [r7, #0]
  params[1] = 0x07;
 8001b48:	2307      	movs	r3, #7
 8001b4a:	707b      	strb	r3, [r7, #1]
  gc9a01a_write_cmd(0x99);
 8001b4c:	2099      	movs	r0, #153	@ 0x99
 8001b4e:	f7ff f9a7 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 2);
 8001b52:	463b      	mov	r3, r7
 8001b54:	2102      	movs	r1, #2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f9f2 	bl	8000f40 <gc9a01a_write_data>

  params[0] = 0x00;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	703b      	strb	r3, [r7, #0]
  gc9a01a_write_cmd(GC9A01A_TEON);          ///< Tearing Effect Line ON
 8001b60:	2035      	movs	r0, #53	@ 0x35
 8001b62:	f7ff f99d 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001b66:	463b      	mov	r3, r7
 8001b68:	2101      	movs	r1, #1
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f9e8 	bl	8000f40 <gc9a01a_write_data>

  gc9a01a_write_cmd(GC9A01A_INVON);         ///< Display Inversion ON
 8001b70:	2021      	movs	r0, #33	@ 0x21
 8001b72:	f7ff f995 	bl	8000ea0 <gc9a01a_write_cmd>
  HAL_Delay(120);
 8001b76:	2078      	movs	r0, #120	@ 0x78
 8001b78:	f001 fea6 	bl	80038c8 <HAL_Delay>
  gc9a01a_write_cmd(GC9A01A_SLPOUT);        ///< Sleep Out
 8001b7c:	2011      	movs	r0, #17
 8001b7e:	f7ff f98f 	bl	8000ea0 <gc9a01a_write_cmd>
  HAL_Delay(120);
 8001b82:	2078      	movs	r0, #120	@ 0x78
 8001b84:	f001 fea0 	bl	80038c8 <HAL_Delay>
  gc9a01a_write_cmd(GC9A01A_DISPON);        ///< Display ON
 8001b88:	2029      	movs	r0, #41	@ 0x29
 8001b8a:	f7ff f989 	bl	8000ea0 <gc9a01a_write_cmd>
  HAL_Delay(20);
 8001b8e:	2014      	movs	r0, #20
 8001b90:	f001 fe9a 	bl	80038c8 <HAL_Delay>


  //GC9A01A_CS_HIGH;
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <bsp_lcd_init>:



void bsp_lcd_init() {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  //GC9A01A_CS_HIGH;
  GC9A01A_BL_ON;
 8001ba0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	619a      	str	r2, [r3, #24]
  GC9A01A_TE_LOW;
 8001ba8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001bac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bb0:	619a      	str	r2, [r3, #24]
  GC9A01A_RD_HIGH;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <bsp_lcd_init+0x30>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	619a      	str	r2, [r3, #24]
  //GC9A01A_CS_LOW;

  gc9a01a_hw_reset();
 8001bb8:	f7ff fa34 	bl	8001024 <gc9a01a_hw_reset>
  gc9a01a_init();
 8001bbc:	f7ff fd40 	bl	8001640 <gc9a01a_init>
  gc9a01a_set_orientation(LANDSCAPE);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f000 f995 	bl	8001ef0 <gc9a01a_set_orientation>
  //gc9a01a_fill_screen(WHITE);
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	48000400 	.word	0x48000400

08001bd0 <gc9a01a_write_char>:
  * @param  font: Font definition structure
  * @param  color: Color of the character (RGB565 format)
  * @param  bgcolor: Background color of the character (RGB565 format)
  * @retval None
  */
static void gc9a01a_write_char(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b088      	sub	sp, #32
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
 8001bde:	460b      	mov	r3, r1
 8001be0:	80bb      	strh	r3, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	70fb      	strb	r3, [r7, #3]
  uint32_t i, b, j;

  gc9a01a_set_address_window(x, x+font.width-1, y, y+font.height-1);
 8001be6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001bea:	461a      	mov	r2, r3
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	4413      	add	r3, r2
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b299      	uxth	r1, r3
 8001bf6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	88bb      	ldrh	r3, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	88ba      	ldrh	r2, [r7, #4]
 8001c08:	88f8      	ldrh	r0, [r7, #6]
 8001c0a:	f7ff fa27 	bl	800105c <gc9a01a_set_address_window>

  for(i = 0; i < font.height; i++) {
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	e041      	b.n	8001c98 <gc9a01a_write_char+0xc8>
    b = font.data[(ch - 32) * font.height + i];
 8001c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	3b20      	subs	r3, #32
 8001c1a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	4619      	mov	r1, r3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	440b      	add	r3, r1
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	617b      	str	r3, [r7, #20]
    for(j = 0; j < font.width; j++) {
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
 8001c34:	e027      	b.n	8001c86 <gc9a01a_write_char+0xb6>
      if((b << j) & 0x8000)  {
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00e      	beq.n	8001c64 <gc9a01a_write_char+0x94>
        uint8_t data[] = { color >> 8, color & 0xFF };
 8001c46:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	743b      	strb	r3, [r7, #16]
 8001c50:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	747b      	strb	r3, [r7, #17]
        gc9a01a_write_data(data, sizeof(data));
 8001c56:	f107 0310 	add.w	r3, r7, #16
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff f96f 	bl	8000f40 <gc9a01a_write_data>
 8001c62:	e00d      	b.n	8001c80 <gc9a01a_write_char+0xb0>
      } else {
        uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001c64:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	733b      	strb	r3, [r7, #12]
 8001c6e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	737b      	strb	r3, [r7, #13]
        gc9a01a_write_data(data, sizeof(data));
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	2102      	movs	r1, #2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f960 	bl	8000f40 <gc9a01a_write_data>
    for(j = 0; j < font.width; j++) {
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	3301      	adds	r3, #1
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d3d1      	bcc.n	8001c36 <gc9a01a_write_char+0x66>
  for(i = 0; i < font.height; i++) {
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3301      	adds	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d3b7      	bcc.n	8001c14 <gc9a01a_write_char+0x44>
      }
    }
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3720      	adds	r7, #32
 8001caa:	46bd      	mov	sp, r7
 8001cac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cb0:	b002      	add	sp, #8
 8001cb2:	4770      	bx	lr

08001cb4 <gc9a01a_write_string>:
  * @param  font: Font definition structure
  * @param  color: Text color (RGB565 format)
  * @param  bgcolor: Background color (RGB565 format)
  * @retval None
  */
void gc9a01a_write_string(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af04      	add	r7, sp, #16
 8001cbc:	603a      	str	r2, [r7, #0]
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	80fb      	strh	r3, [r7, #6]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	80bb      	strh	r3, [r7, #4]
  //GC9A01A_CS_LOW;

  while(*str) {
 8001cc8:	e02d      	b.n	8001d26 <gc9a01a_write_string+0x72>
    if(x + font.width >= GC9A01A_WIDTH) {
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	7d3a      	ldrb	r2, [r7, #20]
 8001cce:	4413      	add	r3, r2
 8001cd0:	2bef      	cmp	r3, #239	@ 0xef
 8001cd2:	dd13      	ble.n	8001cfc <gc9a01a_write_string+0x48>
      x = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	80fb      	strh	r3, [r7, #6]
      y += font.height;
 8001cd8:	7d7b      	ldrb	r3, [r7, #21]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	88bb      	ldrh	r3, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	80bb      	strh	r3, [r7, #4]
      if(y + font.height >= GC9A01A_HEIGHT) {
 8001ce2:	88bb      	ldrh	r3, [r7, #4]
 8001ce4:	7d7a      	ldrb	r2, [r7, #21]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	2bef      	cmp	r3, #239	@ 0xef
 8001cea:	dc21      	bgt.n	8001d30 <gc9a01a_write_string+0x7c>
        break;
      }

      if(*str == ' ') {
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d103      	bne.n	8001cfc <gc9a01a_write_string+0x48>
        // skip spaces in the beginning of the new line
        str++;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	603b      	str	r3, [r7, #0]
        continue;
 8001cfa:	e014      	b.n	8001d26 <gc9a01a_write_string+0x72>
      }
    }

    gc9a01a_write_char(x, y, *str, font, color, bgcolor);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	781a      	ldrb	r2, [r3, #0]
 8001d00:	88b9      	ldrh	r1, [r7, #4]
 8001d02:	88f8      	ldrh	r0, [r7, #6]
 8001d04:	8c3b      	ldrh	r3, [r7, #32]
 8001d06:	9302      	str	r3, [sp, #8]
 8001d08:	8bbb      	ldrh	r3, [r7, #28]
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f7ff ff5d 	bl	8001bd0 <gc9a01a_write_char>
    x += font.width;
 8001d16:	7d3b      	ldrb	r3, [r7, #20]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	80fb      	strh	r3, [r7, #6]
    str++;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	603b      	str	r3, [r7, #0]
  while(*str) {
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1cd      	bne.n	8001cca <gc9a01a_write_string+0x16>
  }

  //GC9A01A_CS_HIGH;
}
 8001d2e:	e000      	b.n	8001d32 <gc9a01a_write_string+0x7e>
        break;
 8001d30:	bf00      	nop
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d3c:	b002      	add	sp, #8
 8001d3e:	4770      	bx	lr

08001d40 <gc9a01a_fill_rect>:
  * @param  y: Y-coordinate of the top-left corner of the rectangle.
  * @param  h: Height of the rectangle.
  * @param  color: Color to fill the rectangle with.
  * @retval None
  */
void gc9a01a_fill_rect(uint16_t x, uint16_t w, uint16_t y, uint16_t h, uint16_t color) {
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4604      	mov	r4, r0
 8001d48:	4608      	mov	r0, r1
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4623      	mov	r3, r4
 8001d50:	80fb      	strh	r3, [r7, #6]
 8001d52:	4603      	mov	r3, r0
 8001d54:	80bb      	strh	r3, [r7, #4]
 8001d56:	460b      	mov	r3, r1
 8001d58:	807b      	strh	r3, [r7, #2]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	803b      	strh	r3, [r7, #0]
  if((x >= BSP_LCD_ACTIVE_WIDTH) || (y >= BSP_LCD_ACTIVE_HEIGHT)) return;
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	2bef      	cmp	r3, #239	@ 0xef
 8001d62:	f200 80bf 	bhi.w	8001ee4 <gc9a01a_fill_rect+0x1a4>
 8001d66:	887b      	ldrh	r3, [r7, #2]
 8001d68:	2bef      	cmp	r3, #239	@ 0xef
 8001d6a:	f200 80bb 	bhi.w	8001ee4 <gc9a01a_fill_rect+0x1a4>
  if((x + w - 1) >= BSP_LCD_ACTIVE_WIDTH) w = BSP_LCD_ACTIVE_WIDTH - x;
 8001d6e:	88fa      	ldrh	r2, [r7, #6]
 8001d70:	88bb      	ldrh	r3, [r7, #4]
 8001d72:	4413      	add	r3, r2
 8001d74:	2bf0      	cmp	r3, #240	@ 0xf0
 8001d76:	dd03      	ble.n	8001d80 <gc9a01a_fill_rect+0x40>
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001d7e:	80bb      	strh	r3, [r7, #4]
  if((y + h - 1) >= BSP_LCD_ACTIVE_HEIGHT) h = BSP_LCD_ACTIVE_HEIGHT - y;
 8001d80:	887a      	ldrh	r2, [r7, #2]
 8001d82:	883b      	ldrh	r3, [r7, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	2bf0      	cmp	r3, #240	@ 0xf0
 8001d88:	dd03      	ble.n	8001d92 <gc9a01a_fill_rect+0x52>
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001d90:	803b      	strh	r3, [r7, #0]
  //GC9A01A_CS_LOW;
  gc9a01a_set_address_window(x,(x+w-1), y, (y+h-1));
 8001d92:	88fa      	ldrh	r2, [r7, #6]
 8001d94:	88bb      	ldrh	r3, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b299      	uxth	r1, r3
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	883b      	ldrh	r3, [r7, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	88f8      	ldrh	r0, [r7, #6]
 8001dae:	f7ff f955 	bl	800105c <gc9a01a_set_address_window>
  uint8_t data[] = { color >> 8, color & 0xFF };
 8001db2:	8c3b      	ldrh	r3, [r7, #32]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	733b      	strb	r3, [r7, #12]
 8001dbc:	8c3b      	ldrh	r3, [r7, #32]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	737b      	strb	r3, [r7, #13]

  for(y = h; y > 0; y--) {
 8001dc2:	883b      	ldrh	r3, [r7, #0]
 8001dc4:	807b      	strh	r3, [r7, #2]
 8001dc6:	e088      	b.n	8001eda <gc9a01a_fill_rect+0x19a>
    for(x = w; x > 0; x--) {
 8001dc8:	88bb      	ldrh	r3, [r7, #4]
 8001dca:	80fb      	strh	r3, [r7, #6]
 8001dcc:	e07e      	b.n	8001ecc <gc9a01a_fill_rect+0x18c>
      GC9A01A_WRITE_8BIT(data[0]);
 8001dce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001dd2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001dd6:	619a      	str	r2, [r3, #24]
 8001dd8:	4b44      	ldr	r3, [pc, #272]	@ (8001eec <gc9a01a_fill_rect+0x1ac>)
 8001dda:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8001dde:	619a      	str	r2, [r3, #24]
 8001de0:	7b3b      	ldrb	r3, [r7, #12]
 8001de2:	029b      	lsls	r3, r3, #10
 8001de4:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001de8:	7b3b      	ldrb	r3, [r7, #12]
 8001dea:	021b      	lsls	r3, r3, #8
 8001dec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001df0:	431a      	orrs	r2, r3
 8001df2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001df6:	619a      	str	r2, [r3, #24]
 8001df8:	7b3b      	ldrb	r3, [r7, #12]
 8001dfa:	035b      	lsls	r3, r3, #13
 8001dfc:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8001e00:	7b3b      	ldrb	r3, [r7, #12]
 8001e02:	02db      	lsls	r3, r3, #11
 8001e04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	7b3b      	ldrb	r3, [r7, #12]
 8001e0c:	025b      	lsls	r3, r3, #9
 8001e0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e12:	431a      	orrs	r2, r3
 8001e14:	7b3b      	ldrb	r3, [r7, #12]
 8001e16:	01db      	lsls	r3, r3, #7
 8001e18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	7b3b      	ldrb	r3, [r7, #12]
 8001e20:	015b      	lsls	r3, r3, #5
 8001e22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e26:	431a      	orrs	r2, r3
 8001e28:	7b3b      	ldrb	r3, [r7, #12]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e30:	431a      	orrs	r2, r3
 8001e32:	4b2e      	ldr	r3, [pc, #184]	@ (8001eec <gc9a01a_fill_rect+0x1ac>)
 8001e34:	619a      	str	r2, [r3, #24]
 8001e36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001e3e:	619a      	str	r2, [r3, #24]
 8001e40:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e44:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e48:	619a      	str	r2, [r3, #24]
      GC9A01A_WRITE_8BIT(data[1]);
 8001e4a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e4e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001e52:	619a      	str	r2, [r3, #24]
 8001e54:	4b25      	ldr	r3, [pc, #148]	@ (8001eec <gc9a01a_fill_rect+0x1ac>)
 8001e56:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8001e5a:	619a      	str	r2, [r3, #24]
 8001e5c:	7b7b      	ldrb	r3, [r7, #13]
 8001e5e:	029b      	lsls	r3, r3, #10
 8001e60:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001e64:	7b7b      	ldrb	r3, [r7, #13]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001e72:	619a      	str	r2, [r3, #24]
 8001e74:	7b7b      	ldrb	r3, [r7, #13]
 8001e76:	035b      	lsls	r3, r3, #13
 8001e78:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8001e7c:	7b7b      	ldrb	r3, [r7, #13]
 8001e7e:	02db      	lsls	r3, r3, #11
 8001e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e84:	431a      	orrs	r2, r3
 8001e86:	7b7b      	ldrb	r3, [r7, #13]
 8001e88:	025b      	lsls	r3, r3, #9
 8001e8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	7b7b      	ldrb	r3, [r7, #13]
 8001e92:	01db      	lsls	r3, r3, #7
 8001e94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	7b7b      	ldrb	r3, [r7, #13]
 8001e9c:	015b      	lsls	r3, r3, #5
 8001e9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	7b7b      	ldrb	r3, [r7, #13]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eac:	431a      	orrs	r2, r3
 8001eae:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <gc9a01a_fill_rect+0x1ac>)
 8001eb0:	619a      	str	r2, [r3, #24]
 8001eb2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001eb6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001eba:	619a      	str	r2, [r3, #24]
 8001ebc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ec0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ec4:	619a      	str	r2, [r3, #24]
    for(x = w; x > 0; x--) {
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	80fb      	strh	r3, [r7, #6]
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f47f af7d 	bne.w	8001dce <gc9a01a_fill_rect+0x8e>
  for(y = h; y > 0; y--) {
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	807b      	strh	r3, [r7, #2]
 8001eda:	887b      	ldrh	r3, [r7, #2]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f47f af73 	bne.w	8001dc8 <gc9a01a_fill_rect+0x88>
 8001ee2:	e000      	b.n	8001ee6 <gc9a01a_fill_rect+0x1a6>
  if((x >= BSP_LCD_ACTIVE_WIDTH) || (y >= BSP_LCD_ACTIVE_HEIGHT)) return;
 8001ee4:	bf00      	nop
    }
  }
  //GC9A01A_CS_HIGH;
}
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd90      	pop	{r4, r7, pc}
 8001eec:	48000400 	.word	0x48000400

08001ef0 <gc9a01a_set_orientation>:
/**
  * @brief  Set the orientation of the GC9A01A LCD display
  * @param  orientation: Orientation mode (LANDSCAPE or PORTRAIT)
  * @retval None
  */
void gc9a01a_set_orientation(uint8_t orientation) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  uint8_t params[4];
  //GC9A01A_CS_LOW;
  if (orientation == LANDSCAPE) {
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d11c      	bne.n	8001f3a <gc9a01a_set_orientation+0x4a>
    // Set column address for landscape orientation
    gc9a01a_write_cmd(GC9A01A_CASET);
 8001f00:	202a      	movs	r0, #42	@ 0x2a
 8001f02:	f7fe ffcd 	bl	8000ea0 <gc9a01a_write_cmd>
    params[0] = 0x00;
 8001f06:	2300      	movs	r3, #0
 8001f08:	733b      	strb	r3, [r7, #12]
    params[1] = 0x00;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	737b      	strb	r3, [r7, #13]
    params[2] = 0x00;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73bb      	strb	r3, [r7, #14]
    params[3] = 0xf0;
 8001f12:	23f0      	movs	r3, #240	@ 0xf0
 8001f14:	73fb      	strb	r3, [r7, #15]
    gc9a01a_write_data(params, 4);
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	2104      	movs	r1, #4
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff f80f 	bl	8000f40 <gc9a01a_write_data>

    // Set row address for landscape orientation
    gc9a01a_write_cmd(GC9A01A_RASET);
 8001f22:	202b      	movs	r0, #43	@ 0x2b
 8001f24:	f7fe ffbc 	bl	8000ea0 <gc9a01a_write_cmd>
    gc9a01a_write_data(params, 4);
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	2104      	movs	r1, #4
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f806 	bl	8000f40 <gc9a01a_write_data>

    // Set orientation parameters for landscape mode
    params[0] = MADCTL_MV | MADCTL_BGR;
 8001f34:	2328      	movs	r3, #40	@ 0x28
 8001f36:	733b      	strb	r3, [r7, #12]
 8001f38:	e01e      	b.n	8001f78 <gc9a01a_set_orientation+0x88>
  } else if (orientation == PORTRAIT) {
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d11b      	bne.n	8001f78 <gc9a01a_set_orientation+0x88>
    // Set column address for portrait orientation
    gc9a01a_write_cmd(GC9A01A_CASET);
 8001f40:	202a      	movs	r0, #42	@ 0x2a
 8001f42:	f7fe ffad 	bl	8000ea0 <gc9a01a_write_cmd>
    params[0] = 0x00;
 8001f46:	2300      	movs	r3, #0
 8001f48:	733b      	strb	r3, [r7, #12]
    params[1] = 0x00;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	737b      	strb	r3, [r7, #13]
    params[2] = 0x00;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	73bb      	strb	r3, [r7, #14]
    params[3] = 0xf0;
 8001f52:	23f0      	movs	r3, #240	@ 0xf0
 8001f54:	73fb      	strb	r3, [r7, #15]
    gc9a01a_write_data(params, 4);
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe ffef 	bl	8000f40 <gc9a01a_write_data>

    // Set row address for portrait orientation
    gc9a01a_write_cmd(GC9A01A_RASET);
 8001f62:	202b      	movs	r0, #43	@ 0x2b
 8001f64:	f7fe ff9c 	bl	8000ea0 <gc9a01a_write_cmd>
    gc9a01a_write_data(params, 4);
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe ffe6 	bl	8000f40 <gc9a01a_write_data>

    // Set orientation parameters for portrait mode
    params[0] =  MADCTL_MX | MADCTL_BGR;
 8001f74:	2348      	movs	r3, #72	@ 0x48
 8001f76:	733b      	strb	r3, [r7, #12]
  }

  // Set MADCTL register with the configured parameters
  gc9a01a_write_cmd(GC9A01A_MADCTL);
 8001f78:	2036      	movs	r0, #54	@ 0x36
 8001f7a:	f7fe ff91 	bl	8000ea0 <gc9a01a_write_cmd>
  gc9a01a_write_data(params, 1);
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	2101      	movs	r1, #1
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe ffdb 	bl	8000f40 <gc9a01a_write_data>
  //GC9A01A_CS_HIGH;
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <gc9a01a_draw_image>:
  * @param  y: Start row address
  * @param  h: Height of the image
  * @param  data: Pointer to the image data (RGB565 format)
  * @retval None
  */
void gc9a01a_draw_image(uint16_t x, uint16_t w, uint16_t y, uint16_t h, const uint16_t* data) {
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4604      	mov	r4, r0
 8001f9c:	4608      	mov	r0, r1
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4623      	mov	r3, r4
 8001fa4:	80fb      	strh	r3, [r7, #6]
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80bb      	strh	r3, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	807b      	strh	r3, [r7, #2]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	803b      	strh	r3, [r7, #0]
  if ((x >= GC9A01A_WIDTH) || (y >= GC9A01A_HEIGHT)) return;
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	2bef      	cmp	r3, #239	@ 0xef
 8001fb6:	f200 80c0 	bhi.w	800213a <gc9a01a_draw_image+0x1a6>
 8001fba:	887b      	ldrh	r3, [r7, #2]
 8001fbc:	2bef      	cmp	r3, #239	@ 0xef
 8001fbe:	f200 80bc 	bhi.w	800213a <gc9a01a_draw_image+0x1a6>
  if ((x + w - 1) >= GC9A01A_WIDTH) w = GC9A01A_HEIGHT - x;
 8001fc2:	88fa      	ldrh	r2, [r7, #6]
 8001fc4:	88bb      	ldrh	r3, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	2bf0      	cmp	r3, #240	@ 0xf0
 8001fca:	dd03      	ble.n	8001fd4 <gc9a01a_draw_image+0x40>
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001fd2:	80bb      	strh	r3, [r7, #4]
  if ((y + h - 1) >= GC9A01A_WIDTH) h = GC9A01A_HEIGHT - y;
 8001fd4:	887a      	ldrh	r2, [r7, #2]
 8001fd6:	883b      	ldrh	r3, [r7, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	2bf0      	cmp	r3, #240	@ 0xf0
 8001fdc:	dd03      	ble.n	8001fe6 <gc9a01a_draw_image+0x52>
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001fe4:	803b      	strh	r3, [r7, #0]
  //GC9A01A_CS_LOW;
  gc9a01a_set_address_window(x, (x+w-1), y, (y+h-1));
 8001fe6:	88fa      	ldrh	r2, [r7, #6]
 8001fe8:	88bb      	ldrh	r3, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b299      	uxth	r1, r3
 8001ff2:	887a      	ldrh	r2, [r7, #2]
 8001ff4:	883b      	ldrh	r3, [r7, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	88f8      	ldrh	r0, [r7, #6]
 8002002:	f7ff f82b 	bl	800105c <gc9a01a_set_address_window>

  for (uint32_t i = 0; i < w * h; i++) {
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	e08c      	b.n	8002126 <gc9a01a_draw_image+0x192>
    uint8_t color_high = (data[i] >> 8) & 0xFF;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	6a3a      	ldr	r2, [r7, #32]
 8002012:	4413      	add	r3, r2
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	b29b      	uxth	r3, r3
 800201a:	72fb      	strb	r3, [r7, #11]
    uint8_t color_low = data[i] & 0xFF;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	6a3a      	ldr	r2, [r7, #32]
 8002022:	4413      	add	r3, r2
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	72bb      	strb	r3, [r7, #10]
    GC9A01A_WRITE_8BIT(color_high);
 8002028:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800202c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002030:	619a      	str	r2, [r3, #24]
 8002032:	4b44      	ldr	r3, [pc, #272]	@ (8002144 <gc9a01a_draw_image+0x1b0>)
 8002034:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 8002038:	619a      	str	r2, [r3, #24]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	029b      	lsls	r3, r3, #10
 800203e:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8002042:	7afb      	ldrb	r3, [r7, #11]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800204a:	431a      	orrs	r2, r3
 800204c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002050:	619a      	str	r2, [r3, #24]
 8002052:	7afb      	ldrb	r3, [r7, #11]
 8002054:	035b      	lsls	r3, r3, #13
 8002056:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 800205a:	7afb      	ldrb	r3, [r7, #11]
 800205c:	02db      	lsls	r3, r3, #11
 800205e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002062:	431a      	orrs	r2, r3
 8002064:	7afb      	ldrb	r3, [r7, #11]
 8002066:	025b      	lsls	r3, r3, #9
 8002068:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800206c:	431a      	orrs	r2, r3
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	01db      	lsls	r3, r3, #7
 8002072:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002076:	431a      	orrs	r2, r3
 8002078:	7afb      	ldrb	r3, [r7, #11]
 800207a:	015b      	lsls	r3, r3, #5
 800207c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002080:	431a      	orrs	r2, r3
 8002082:	7afb      	ldrb	r3, [r7, #11]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800208a:	431a      	orrs	r2, r3
 800208c:	4b2d      	ldr	r3, [pc, #180]	@ (8002144 <gc9a01a_draw_image+0x1b0>)
 800208e:	619a      	str	r2, [r3, #24]
 8002090:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002094:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002098:	619a      	str	r2, [r3, #24]
 800209a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800209e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020a2:	619a      	str	r2, [r3, #24]
    GC9A01A_WRITE_8BIT(color_low);
 80020a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80020a8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80020ac:	619a      	str	r2, [r3, #24]
 80020ae:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <gc9a01a_draw_image+0x1b0>)
 80020b0:	f04f 427c 	mov.w	r2, #4227858432	@ 0xfc000000
 80020b4:	619a      	str	r2, [r3, #24]
 80020b6:	7abb      	ldrb	r3, [r7, #10]
 80020b8:	029b      	lsls	r3, r3, #10
 80020ba:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 80020be:	7abb      	ldrb	r3, [r7, #10]
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c6:	431a      	orrs	r2, r3
 80020c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80020cc:	619a      	str	r2, [r3, #24]
 80020ce:	7abb      	ldrb	r3, [r7, #10]
 80020d0:	035b      	lsls	r3, r3, #13
 80020d2:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80020d6:	7abb      	ldrb	r3, [r7, #10]
 80020d8:	02db      	lsls	r3, r3, #11
 80020da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020de:	431a      	orrs	r2, r3
 80020e0:	7abb      	ldrb	r3, [r7, #10]
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020e8:	431a      	orrs	r2, r3
 80020ea:	7abb      	ldrb	r3, [r7, #10]
 80020ec:	01db      	lsls	r3, r3, #7
 80020ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020f2:	431a      	orrs	r2, r3
 80020f4:	7abb      	ldrb	r3, [r7, #10]
 80020f6:	015b      	lsls	r3, r3, #5
 80020f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020fc:	431a      	orrs	r2, r3
 80020fe:	7abb      	ldrb	r3, [r7, #10]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002106:	431a      	orrs	r2, r3
 8002108:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <gc9a01a_draw_image+0x1b0>)
 800210a:	619a      	str	r2, [r3, #24]
 800210c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002110:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002114:	619a      	str	r2, [r3, #24]
 8002116:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800211a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800211e:	619a      	str	r2, [r3, #24]
  for (uint32_t i = 0; i < w * h; i++) {
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3301      	adds	r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	88bb      	ldrh	r3, [r7, #4]
 8002128:	883a      	ldrh	r2, [r7, #0]
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4293      	cmp	r3, r2
 8002134:	f4ff af6a 	bcc.w	800200c <gc9a01a_draw_image+0x78>
 8002138:	e000      	b.n	800213c <gc9a01a_draw_image+0x1a8>
  if ((x >= GC9A01A_WIDTH) || (y >= GC9A01A_HEIGHT)) return;
 800213a:	bf00      	nop
  }
  //GC9A01A_CS_HIGH;
}
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bd90      	pop	{r4, r7, pc}
 8002142:	bf00      	nop
 8002144:	48000400 	.word	0x48000400

08002148 <bsp_lcd_set_background>:

/**
  * @brief  Set the background color on the LCD.
  * @retval None
  */
void bsp_lcd_set_background() {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af02      	add	r7, sp, #8
	gc9a01a_fill_rect(0,(BSP_LCD_BACKGROUND_WIDTH),0,(BSP_LCD_BACKGROUND_HEIGHT), BACKGROUND);
 800214e:	f649 735e 	movw	r3, #40798	@ 0x9f5e
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	23f0      	movs	r3, #240	@ 0xf0
 8002156:	2200      	movs	r2, #0
 8002158:	21f0      	movs	r1, #240	@ 0xf0
 800215a:	2000      	movs	r0, #0
 800215c:	f7ff fdf0 	bl	8001d40 <gc9a01a_fill_rect>
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <fill_player_trace>:

/**
  * @brief  Fill the player trace area with the background color.
  * @retval None
  */
void fill_player_trace(){
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b083      	sub	sp, #12
 800216c:	af02      	add	r7, sp, #8
  if( obstacle.x >= (player.x + player.w) || obstacle.x + 30 <= player.x) {
 800216e:	4b25      	ldr	r3, [pc, #148]	@ (8002204 <fill_player_trace+0x9c>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <fill_player_trace+0xa0>)
 8002174:	6819      	ldr	r1, [r3, #0]
 8002176:	4b24      	ldr	r3, [pc, #144]	@ (8002208 <fill_player_trace+0xa0>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	440b      	add	r3, r1
 800217c:	429a      	cmp	r2, r3
 800217e:	da07      	bge.n	8002190 <fill_player_trace+0x28>
 8002180:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <fill_player_trace+0x9c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f103 021d 	add.w	r2, r3, #29
 8002188:	4b1f      	ldr	r3, [pc, #124]	@ (8002208 <fill_player_trace+0xa0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	da0d      	bge.n	80021ac <fill_player_trace+0x44>
    gc9a01a_fill_rect(player.x, player.w, 30, 180, BACKGROUND);
 8002190:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <fill_player_trace+0xa0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	b298      	uxth	r0, r3
 8002196:	4b1c      	ldr	r3, [pc, #112]	@ (8002208 <fill_player_trace+0xa0>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	b299      	uxth	r1, r3
 800219c:	f649 735e 	movw	r3, #40798	@ 0x9f5e
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	23b4      	movs	r3, #180	@ 0xb4
 80021a4:	221e      	movs	r2, #30
 80021a6:	f7ff fdcb 	bl	8001d40 <gc9a01a_fill_rect>
  } else if( obstacle.x <= (player.x + player.w) || obstacle.x + 30 >= player.x) {
    gc9a01a_fill_rect(player.x, player.w, (obstacle.y + obstacle.h),  obstacle.g, BACKGROUND);
  }
}
 80021aa:	e026      	b.n	80021fa <fill_player_trace+0x92>
  } else if( obstacle.x <= (player.x + player.w) || obstacle.x + 30 >= player.x) {
 80021ac:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <fill_player_trace+0x9c>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <fill_player_trace+0xa0>)
 80021b2:	6819      	ldr	r1, [r3, #0]
 80021b4:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <fill_player_trace+0xa0>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	440b      	add	r3, r1
 80021ba:	429a      	cmp	r2, r3
 80021bc:	dd07      	ble.n	80021ce <fill_player_trace+0x66>
 80021be:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <fill_player_trace+0x9c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f103 021e 	add.w	r2, r3, #30
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <fill_player_trace+0xa0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	db15      	blt.n	80021fa <fill_player_trace+0x92>
    gc9a01a_fill_rect(player.x, player.w, (obstacle.y + obstacle.h),  obstacle.g, BACKGROUND);
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <fill_player_trace+0xa0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	b298      	uxth	r0, r3
 80021d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <fill_player_trace+0xa0>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	b299      	uxth	r1, r3
 80021da:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <fill_player_trace+0x9c>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <fill_player_trace+0x9c>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <fill_player_trace+0x9c>)
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f649 745e 	movw	r4, #40798	@ 0x9f5e
 80021f4:	9400      	str	r4, [sp, #0]
 80021f6:	f7ff fda3 	bl	8001d40 <gc9a01a_fill_rect>
}
 80021fa:	bf00      	nop
 80021fc:	3704      	adds	r7, #4
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd90      	pop	{r4, r7, pc}
 8002202:	bf00      	nop
 8002204:	200002b0 	.word	0x200002b0
 8002208:	2000029c 	.word	0x2000029c

0800220c <display_bush>:

/**
  * @brief  Display bush images on the LCD.
  * @retval None
  */
void display_bush() {
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af02      	add	r7, sp, #8
  gc9a01a_draw_image(0, 60, 210, 30, (uint16_t *)bush);
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <display_bush+0x4c>)
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	231e      	movs	r3, #30
 8002218:	22d2      	movs	r2, #210	@ 0xd2
 800221a:	213c      	movs	r1, #60	@ 0x3c
 800221c:	2000      	movs	r0, #0
 800221e:	f7ff feb9 	bl	8001f94 <gc9a01a_draw_image>
  gc9a01a_draw_image(60,60, 210, 30, (uint16_t *)bush);
 8002222:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <display_bush+0x4c>)
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	231e      	movs	r3, #30
 8002228:	22d2      	movs	r2, #210	@ 0xd2
 800222a:	213c      	movs	r1, #60	@ 0x3c
 800222c:	203c      	movs	r0, #60	@ 0x3c
 800222e:	f7ff feb1 	bl	8001f94 <gc9a01a_draw_image>
  gc9a01a_draw_image(120, 60, 210, 30, (uint16_t *)bush);
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <display_bush+0x4c>)
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	231e      	movs	r3, #30
 8002238:	22d2      	movs	r2, #210	@ 0xd2
 800223a:	213c      	movs	r1, #60	@ 0x3c
 800223c:	2078      	movs	r0, #120	@ 0x78
 800223e:	f7ff fea9 	bl	8001f94 <gc9a01a_draw_image>
  gc9a01a_draw_image(180, 60, 210, 30, (uint16_t *)bush);
 8002242:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <display_bush+0x4c>)
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	231e      	movs	r3, #30
 8002248:	22d2      	movs	r2, #210	@ 0xd2
 800224a:	213c      	movs	r1, #60	@ 0x3c
 800224c:	20b4      	movs	r0, #180	@ 0xb4
 800224e:	f7ff fea1 	bl	8001f94 <gc9a01a_draw_image>
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	0800b3f8 	.word	0x0800b3f8

0800225c <flappy_game_set_back_ground>:

/**
  * @brief  Set the background and display bush images for the Flappy Bird game.
  * @retval None
  */
void flappy_game_set_back_ground() {
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	bsp_lcd_set_background();
 8002260:	f7ff ff72 	bl	8002148 <bsp_lcd_set_background>
  display_bush();
 8002264:	f7ff ffd2 	bl	800220c <display_bush>
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <fill_countdown_trace>:

/**
  * @brief  Fill the countdown trace area with the background color.
  * @retval None
  */
void fill_countdown_trace() {
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af02      	add	r7, sp, #8
  gc9a01a_fill_rect(0,240,107,26, BACKGROUND);
 8002272:	f649 735e 	movw	r3, #40798	@ 0x9f5e
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	231a      	movs	r3, #26
 800227a:	226b      	movs	r2, #107	@ 0x6b
 800227c:	21f0      	movs	r1, #240	@ 0xf0
 800227e:	2000      	movs	r0, #0
 8002280:	f7ff fd5e 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(116,16,140,26, BACKGROUND);
 8002284:	f649 735e 	movw	r3, #40798	@ 0x9f5e
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	231a      	movs	r3, #26
 800228c:	228c      	movs	r2, #140	@ 0x8c
 800228e:	2110      	movs	r1, #16
 8002290:	2074      	movs	r0, #116	@ 0x74
 8002292:	f7ff fd55 	bl	8001d40 <gc9a01a_fill_rect>
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <set_gameover_background>:

/**
  * @brief  Fill the game over trace area with the background color.
  * @retval None
  */
void set_gameover_background() {
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af02      	add	r7, sp, #8
  gc9a01a_fill_rect(0, 240, 30, 180, BACKGROUND);
 80022a2:	f649 735e 	movw	r3, #40798	@ 0x9f5e
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	23b4      	movs	r3, #180	@ 0xb4
 80022aa:	221e      	movs	r2, #30
 80022ac:	21f0      	movs	r1, #240	@ 0xf0
 80022ae:	2000      	movs	r0, #0
 80022b0:	f7ff fd46 	bl	8001d40 <gc9a01a_fill_rect>
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <display_game_title>:

/**
  * @brief  Display the game title on the LCD.
  * @retval None
  */
void display_game_title() {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af02      	add	r7, sp, #8
  gc9a01a_draw_image(20, 200, 30, 40, (uint16_t *)Flappy_font1);
 80022c2:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <display_game_title+0x2c>)
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	2328      	movs	r3, #40	@ 0x28
 80022c8:	221e      	movs	r2, #30
 80022ca:	21c8      	movs	r1, #200	@ 0xc8
 80022cc:	2014      	movs	r0, #20
 80022ce:	f7ff fe61 	bl	8001f94 <gc9a01a_draw_image>
  gc9a01a_draw_image(20, 200, 70, 39, (uint16_t *)Flappy_font2);
 80022d2:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <display_game_title+0x30>)
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2327      	movs	r3, #39	@ 0x27
 80022d8:	2246      	movs	r2, #70	@ 0x46
 80022da:	21c8      	movs	r1, #200	@ 0xc8
 80022dc:	2014      	movs	r0, #20
 80022de:	f7ff fe59 	bl	8001f94 <gc9a01a_draw_image>
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	0800c208 	.word	0x0800c208
 80022ec:	08010088 	.word	0x08010088

080022f0 <Player_ctor>:
/* USER CODE BEGIN 0 */
GamteState game_state ;
Player player;
Obstacle obstacle;

static void Player_ctor(Player* player, int player_x, int player_w, int player_y, int player_h) {
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
	player->x = player_x;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	601a      	str	r2, [r3, #0]
	player->w = player_w;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	605a      	str	r2, [r3, #4]
	player->y = player_y;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	609a      	str	r2, [r3, #8]
	player->h = player_h;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	60da      	str	r2, [r3, #12]
	player->score = 0;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <Obstacle_ctor>:

static void Obstacle_ctor(Obstacle* obstacle, int obstacle_x, int obstacle_w, int obstacle_y, int obstacle_g,
                            int obstacle_s) {
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
	obstacle->x = obstacle_x;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	601a      	str	r2, [r3, #0]
	obstacle->w = obstacle_w;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	605a      	str	r2, [r3, #4]
	obstacle->y = obstacle_y;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	609a      	str	r2, [r3, #8]
	obstacle->h = 0;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]
	obstacle->g = obstacle_g;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	611a      	str	r2, [r3, #16]
	obstacle->speed  = obstacle_s;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	615a      	str	r2, [r3, #20]
	obstacle->passed = false;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	761a      	strb	r2, [r3, #24]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800236c:	b5b0      	push	{r4, r5, r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	static uint32_t current_time;
	current_time = HAL_GetTick();
 8002372:	f001 fa9d 	bl	80038b0 <HAL_GetTick>
 8002376:	4603      	mov	r3, r0
 8002378:	4a40      	ldr	r2, [pc, #256]	@ (800247c <main+0x110>)
 800237a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800237c:	f001 fa3e 	bl	80037fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002380:	f000 f888 	bl	8002494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002384:	f000 f922 	bl	80025cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8002388:	f000 f8e0 	bl	800254c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Player_ctor(&player, 70, 30, 100, 30);
 800238c:	231e      	movs	r3, #30
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	2364      	movs	r3, #100	@ 0x64
 8002392:	221e      	movs	r2, #30
 8002394:	2146      	movs	r1, #70	@ 0x46
 8002396:	483a      	ldr	r0, [pc, #232]	@ (8002480 <main+0x114>)
 8002398:	f7ff ffaa 	bl	80022f0 <Player_ctor>
  Obstacle_ctor(&obstacle, 240, 30, 30, 80, 5);
 800239c:	2305      	movs	r3, #5
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	2350      	movs	r3, #80	@ 0x50
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	231e      	movs	r3, #30
 80023a6:	221e      	movs	r2, #30
 80023a8:	21f0      	movs	r1, #240	@ 0xf0
 80023aa:	4836      	ldr	r0, [pc, #216]	@ (8002484 <main+0x118>)
 80023ac:	f7ff ffbc 	bl	8002328 <Obstacle_ctor>
  mpu6050_Init();
 80023b0:	f000 fa96 	bl	80028e0 <mpu6050_Init>
  bsp_lcd_init();
 80023b4:	f7ff fbf2 	bl	8001b9c <bsp_lcd_init>
  CST816S_init();
 80023b8:	f7fe fd24 	bl	8000e04 <CST816S_init>
  flappy_game_set_back_ground();
 80023bc:	f7ff ff4e 	bl	800225c <flappy_game_set_back_ground>

  double prev_degreey = degreey; // Initialize previous angle variable
 80023c0:	4b31      	ldr	r3, [pc, #196]	@ (8002488 <main+0x11c>)
 80023c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	mpu6050_read();
 80023ca:	f000 fb0d 	bl	80029e8 <mpu6050_read>

    if(HAL_GetTick() - current_time >= 2) {
 80023ce:	f001 fa6f 	bl	80038b0 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b29      	ldr	r3, [pc, #164]	@ (800247c <main+0x110>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d9f5      	bls.n	80023ca <main+0x5e>

      current_time = HAL_GetTick();
 80023de:	f001 fa67 	bl	80038b0 <HAL_GetTick>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4a25      	ldr	r2, [pc, #148]	@ (800247c <main+0x110>)
 80023e6:	6013      	str	r3, [r2, #0]

      angle_delta = degreey - prev_degreey;
 80023e8:	4b27      	ldr	r3, [pc, #156]	@ (8002488 <main+0x11c>)
 80023ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023f2:	f7fd ff49 	bl	8000288 <__aeabi_dsub>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4924      	ldr	r1, [pc, #144]	@ (800248c <main+0x120>)
 80023fc:	e9c1 2300 	strd	r2, r3, [r1]
      prev_degreey = degreey;
 8002400:	4b21      	ldr	r3, [pc, #132]	@ (8002488 <main+0x11c>)
 8002402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002406:	e9c7 2302 	strd	r2, r3, [r7, #8]
      double smoothing_factor = 6;
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <main+0x124>)
 8002410:	e9c7 2300 	strd	r2, r3, [r7]

      player.y -= smoothing_factor * angle_delta;
 8002414:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <main+0x114>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe f883 	bl	8000524 <__aeabi_i2d>
 800241e:	4604      	mov	r4, r0
 8002420:	460d      	mov	r5, r1
 8002422:	4b1a      	ldr	r3, [pc, #104]	@ (800248c <main+0x120>)
 8002424:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800242c:	f7fe f8e4 	bl	80005f8 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4620      	mov	r0, r4
 8002436:	4629      	mov	r1, r5
 8002438:	f7fd ff26 	bl	8000288 <__aeabi_dsub>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f7fe fb88 	bl	8000b58 <__aeabi_d2iz>
 8002448:	4603      	mov	r3, r0
 800244a:	4a0d      	ldr	r2, [pc, #52]	@ (8002480 <main+0x114>)
 800244c:	6093      	str	r3, [r2, #8]
      player.y += GRAVITY_PULL;
 800244e:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <main+0x114>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	3302      	adds	r3, #2
 8002454:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <main+0x114>)
 8002456:	6093      	str	r3, [r2, #8]

      if (player.y <= PLAYER_ySTART_POINT) {
 8002458:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <main+0x114>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b1e      	cmp	r3, #30
 800245e:	dc03      	bgt.n	8002468 <main+0xfc>
        player.y = PLAYER_ySTART_POINT;
 8002460:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <main+0x114>)
 8002462:	221e      	movs	r2, #30
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	e006      	b.n	8002476 <main+0x10a>
      } else if (player.y >= PLAYER_yEND_POINT) {
 8002468:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <main+0x114>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2bb3      	cmp	r3, #179	@ 0xb3
 800246e:	dd02      	ble.n	8002476 <main+0x10a>
        player.y = PLAYER_yEND_POINT;
 8002470:	4b03      	ldr	r3, [pc, #12]	@ (8002480 <main+0x114>)
 8002472:	22b4      	movs	r2, #180	@ 0xb4
 8002474:	609a      	str	r2, [r3, #8]
      }
      tick();
 8002476:	f000 f925 	bl	80026c4 <tick>
  	mpu6050_read();
 800247a:	e7a6      	b.n	80023ca <main+0x5e>
 800247c:	200002cc 	.word	0x200002cc
 8002480:	2000029c 	.word	0x2000029c
 8002484:	200002b0 	.word	0x200002b0
 8002488:	20000288 	.word	0x20000288
 800248c:	200002d0 	.word	0x200002d0
 8002490:	40180000 	.word	0x40180000

08002494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b09e      	sub	sp, #120	@ 0x78
 8002498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800249a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800249e:	2228      	movs	r2, #40	@ 0x28
 80024a0:	2100      	movs	r1, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f004 fff8 	bl	8007498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024b8:	463b      	mov	r3, r7
 80024ba:	223c      	movs	r2, #60	@ 0x3c
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f004 ffea 	bl	8007498 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80024c4:	2303      	movs	r3, #3
 80024c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024cc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80024ce:	2300      	movs	r3, #0
 80024d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024d2:	2301      	movs	r3, #1
 80024d4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024d6:	2310      	movs	r3, #16
 80024d8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024da:	2302      	movs	r3, #2
 80024dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024e2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024e4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80024e8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80024ee:	4618      	mov	r0, r3
 80024f0:	f002 fb40 	bl	8004b74 <HAL_RCC_OscConfig>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80024fa:	f000 f9eb 	bl	80028d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024fe:	230f      	movs	r3, #15
 8002500:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002502:	2302      	movs	r3, #2
 8002504:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002506:	2300      	movs	r3, #0
 8002508:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800250a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800250e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002510:	2300      	movs	r3, #0
 8002512:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002514:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002518:	2102      	movs	r1, #2
 800251a:	4618      	mov	r0, r3
 800251c:	f003 fb68 	bl	8005bf0 <HAL_RCC_ClockConfig>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002526:	f000 f9d5 	bl	80028d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800252a:	2320      	movs	r3, #32
 800252c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002532:	463b      	mov	r3, r7
 8002534:	4618      	mov	r0, r3
 8002536:	f003 fd2b 	bl	8005f90 <HAL_RCCEx_PeriphCLKConfig>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002540:	f000 f9c8 	bl	80028d4 <Error_Handler>
  }
}
 8002544:	bf00      	nop
 8002546:	3778      	adds	r7, #120	@ 0x78
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002550:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <MX_I2C1_Init+0x74>)
 8002552:	4a1c      	ldr	r2, [pc, #112]	@ (80025c4 <MX_I2C1_Init+0x78>)
 8002554:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002556:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <MX_I2C1_Init+0x74>)
 8002558:	4a1b      	ldr	r2, [pc, #108]	@ (80025c8 <MX_I2C1_Init+0x7c>)
 800255a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800255c:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <MX_I2C1_Init+0x74>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002562:	4b17      	ldr	r3, [pc, #92]	@ (80025c0 <MX_I2C1_Init+0x74>)
 8002564:	2201      	movs	r2, #1
 8002566:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002568:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <MX_I2C1_Init+0x74>)
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800256e:	4b14      	ldr	r3, [pc, #80]	@ (80025c0 <MX_I2C1_Init+0x74>)
 8002570:	2200      	movs	r2, #0
 8002572:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002574:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <MX_I2C1_Init+0x74>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800257a:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <MX_I2C1_Init+0x74>)
 800257c:	2200      	movs	r2, #0
 800257e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002580:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <MX_I2C1_Init+0x74>)
 8002582:	2200      	movs	r2, #0
 8002584:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002586:	480e      	ldr	r0, [pc, #56]	@ (80025c0 <MX_I2C1_Init+0x74>)
 8002588:	f001 fcb0 	bl	8003eec <HAL_I2C_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002592:	f000 f99f 	bl	80028d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002596:	2100      	movs	r1, #0
 8002598:	4809      	ldr	r0, [pc, #36]	@ (80025c0 <MX_I2C1_Init+0x74>)
 800259a:	f002 fa33 	bl	8004a04 <HAL_I2CEx_ConfigAnalogFilter>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80025a4:	f000 f996 	bl	80028d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025a8:	2100      	movs	r1, #0
 80025aa:	4805      	ldr	r0, [pc, #20]	@ (80025c0 <MX_I2C1_Init+0x74>)
 80025ac:	f002 fa75 	bl	8004a9a <HAL_I2CEx_ConfigDigitalFilter>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80025b6:	f000 f98d 	bl	80028d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000228 	.word	0x20000228
 80025c4:	40005400 	.word	0x40005400
 80025c8:	2000090e 	.word	0x2000090e

080025cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025e2:	4b36      	ldr	r3, [pc, #216]	@ (80026bc <MX_GPIO_Init+0xf0>)
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	4a35      	ldr	r2, [pc, #212]	@ (80026bc <MX_GPIO_Init+0xf0>)
 80025e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025ec:	6153      	str	r3, [r2, #20]
 80025ee:	4b33      	ldr	r3, [pc, #204]	@ (80026bc <MX_GPIO_Init+0xf0>)
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	4b30      	ldr	r3, [pc, #192]	@ (80026bc <MX_GPIO_Init+0xf0>)
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	4a2f      	ldr	r2, [pc, #188]	@ (80026bc <MX_GPIO_Init+0xf0>)
 8002600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002604:	6153      	str	r3, [r2, #20]
 8002606:	4b2d      	ldr	r3, [pc, #180]	@ (80026bc <MX_GPIO_Init+0xf0>)
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002612:	4b2a      	ldr	r3, [pc, #168]	@ (80026bc <MX_GPIO_Init+0xf0>)
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	4a29      	ldr	r2, [pc, #164]	@ (80026bc <MX_GPIO_Init+0xf0>)
 8002618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800261c:	6153      	str	r3, [r2, #20]
 800261e:	4b27      	ldr	r3, [pc, #156]	@ (80026bc <MX_GPIO_Init+0xf0>)
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_TE_Pin|LCD_CSX_Pin|BL_A_Pin|BD1_Pin
 800262a:	2200      	movs	r2, #0
 800262c:	f248 611a 	movw	r1, #34330	@ 0x861a
 8002630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002634:	f001 fc2a 	bl	8003e8c <HAL_GPIO_WritePin>
                          |BD0_Pin|WRD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RDX_Pin|DCX_Pin|BD7_Pin|BD6_Pin
 8002638:	2200      	movs	r2, #0
 800263a:	f64f 5113 	movw	r1, #64787	@ 0xfd13
 800263e:	4820      	ldr	r0, [pc, #128]	@ (80026c0 <MX_GPIO_Init+0xf4>)
 8002640:	f001 fc24 	bl	8003e8c <HAL_GPIO_WritePin>
                          |BD5_Pin|BD4_Pin|BD3_Pin|BD2_Pin
                          |TP_RST_Pin|LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_TE_Pin LCD_CSX_Pin BL_A_Pin BD1_Pin
                           BD0_Pin WRD_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin|LCD_CSX_Pin|BL_A_Pin|BD1_Pin
 8002644:	f248 631a 	movw	r3, #34330	@ 0x861a
 8002648:	60fb      	str	r3, [r7, #12]
                          |BD0_Pin|WRD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264a:	2301      	movs	r3, #1
 800264c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002652:	2303      	movs	r3, #3
 8002654:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	4619      	mov	r1, r3
 800265c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002660:	f001 fa9a 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RDX_Pin DCX_Pin BD7_Pin BD6_Pin
                           BD5_Pin BD4_Pin BD3_Pin BD2_Pin
                           TP_RST_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RDX_Pin|DCX_Pin|BD7_Pin|BD6_Pin
 8002664:	f64f 5313 	movw	r3, #64787	@ 0xfd13
 8002668:	60fb      	str	r3, [r7, #12]
                          |BD5_Pin|BD4_Pin|BD3_Pin|BD2_Pin
                          |TP_RST_Pin|LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800266a:	2301      	movs	r3, #1
 800266c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002672:	2303      	movs	r3, #3
 8002674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	4619      	mov	r1, r3
 800267c:	4810      	ldr	r0, [pc, #64]	@ (80026c0 <MX_GPIO_Init+0xf4>)
 800267e:	f001 fa8b 	bl	8003b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IN_Pin */
  GPIO_InitStruct.Pin = TP_IN_Pin;
 8002682:	2320      	movs	r3, #32
 8002684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002686:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800268a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_IN_GPIO_Port, &GPIO_InitStruct);
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	4619      	mov	r1, r3
 8002696:	480a      	ldr	r0, [pc, #40]	@ (80026c0 <MX_GPIO_Init+0xf4>)
 8002698:	f001 fa7e 	bl	8003b98 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB8_FMP);
 800269c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80026a0:	f002 fa48 	bl	8004b34 <HAL_I2CEx_EnableFastModePlus>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80026a4:	2200      	movs	r2, #0
 80026a6:	2100      	movs	r1, #0
 80026a8:	2017      	movs	r0, #23
 80026aa:	f001 fa30 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80026ae:	2017      	movs	r0, #23
 80026b0:	f001 fa49 	bl	8003b46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026b4:	bf00      	nop
 80026b6:	3720      	adds	r7, #32
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	48000400 	.word	0x48000400

080026c4 <tick>:
/**
  * @brief Updates the game state based on events and conditions.
  * @param None
  * @retval None
  */
void tick() {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af02      	add	r7, sp, #8
	switch (game_state) {
 80026ca:	4b4c      	ldr	r3, [pc, #304]	@ (80027fc <tick+0x138>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	f200 8090 	bhi.w	80027f4 <tick+0x130>
 80026d4:	a201      	add	r2, pc, #4	@ (adr r2, 80026dc <tick+0x18>)
 80026d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026da:	bf00      	nop
 80026dc:	080026ed 	.word	0x080026ed
 80026e0:	0800270b 	.word	0x0800270b
 80026e4:	08002729 	.word	0x08002729
 80026e8:	080027a3 	.word	0x080027a3
		case GAME_INIT: {
		  uint8_t start_btn =  start_btn_state();
 80026ec:	f001 f816 	bl	800371c <start_btn_state>
 80026f0:	4603      	mov	r3, r0
 80026f2:	71bb      	strb	r3, [r7, #6]
			game_init_mssg();
 80026f4:	f000 fe90 	bl	8003418 <game_init_mssg>

			if (start_btn == PRESSED) {
 80026f8:	79bb      	ldrb	r3, [r7, #6]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d175      	bne.n	80027ea <tick+0x126>
				flappy_game_set_back_ground();
 80026fe:	f7ff fdad 	bl	800225c <flappy_game_set_back_ground>
				game_state = GAME_PRESTART;
 8002702:	4b3e      	ldr	r3, [pc, #248]	@ (80027fc <tick+0x138>)
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8002708:	e06f      	b.n	80027ea <tick+0x126>

		case GAME_PRESTART: {
			move_player(player.y);
 800270a:	4b3d      	ldr	r3, [pc, #244]	@ (8002800 <tick+0x13c>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fc9e 	bl	8003050 <move_player>
			render_gamestart_countdown();
 8002714:	f000 ff16 	bl	8003544 <render_gamestart_countdown>
			if(countdown_complete == true) {
 8002718:	4b3a      	ldr	r3, [pc, #232]	@ (8002804 <tick+0x140>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d166      	bne.n	80027ee <tick+0x12a>
				game_state = GAME_START;
 8002720:	4b36      	ldr	r3, [pc, #216]	@ (80027fc <tick+0x138>)
 8002722:	2202      	movs	r2, #2
 8002724:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8002726:	e062      	b.n	80027ee <tick+0x12a>

		case GAME_START: {
			is_Collide(&obstacle, &player);
 8002728:	4935      	ldr	r1, [pc, #212]	@ (8002800 <tick+0x13c>)
 800272a:	4837      	ldr	r0, [pc, #220]	@ (8002808 <tick+0x144>)
 800272c:	f000 f870 	bl	8002810 <is_Collide>
			if(collision_detected == true) {
 8002730:	4b36      	ldr	r3, [pc, #216]	@ (800280c <tick+0x148>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d105      	bne.n	8002744 <tick+0x80>
			  set_gameover_background();
 8002738:	f7ff fdb0 	bl	800229c <set_gameover_background>
				game_state = GAME_OVER;
 800273c:	4b2f      	ldr	r3, [pc, #188]	@ (80027fc <tick+0x138>)
 800273e:	2203      	movs	r2, #3
 8002740:	701a      	strb	r2, [r3, #0]
					obstacle.x = 240;
				}
				player_show_score(&player);
			}
		}
		break;
 8002742:	e057      	b.n	80027f4 <tick+0x130>
			  obstacle.speed = get_obstacle_speed(player.score);
 8002744:	4b2e      	ldr	r3, [pc, #184]	@ (8002800 <tick+0x13c>)
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fc61 	bl	8003010 <get_obstacle_speed>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	4b2d      	ldr	r3, [pc, #180]	@ (8002808 <tick+0x144>)
 8002754:	615a      	str	r2, [r3, #20]
			  obstacle.x -= obstacle.speed;
 8002756:	4b2c      	ldr	r3, [pc, #176]	@ (8002808 <tick+0x144>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4b2b      	ldr	r3, [pc, #172]	@ (8002808 <tick+0x144>)
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	4a29      	ldr	r2, [pc, #164]	@ (8002808 <tick+0x144>)
 8002762:	6013      	str	r3, [r2, #0]
			  move_player( player.y);
 8002764:	4b26      	ldr	r3, [pc, #152]	@ (8002800 <tick+0x13c>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fc71 	bl	8003050 <move_player>
				if(obstacle.x >= 0) {
 800276e:	4b26      	ldr	r3, [pc, #152]	@ (8002808 <tick+0x144>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	db05      	blt.n	8002782 <tick+0xbe>
					move_obstacle(obstacle.x);
 8002776:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <tick+0x144>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fc10 	bl	8002fa0 <move_obstacle>
 8002780:	e00b      	b.n	800279a <tick+0xd6>
				  gc9a01a_fill_rect(0, 40, 0, 240,BACKGROUND);
 8002782:	f649 735e 	movw	r3, #40798	@ 0x9f5e
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	23f0      	movs	r3, #240	@ 0xf0
 800278a:	2200      	movs	r2, #0
 800278c:	2128      	movs	r1, #40	@ 0x28
 800278e:	2000      	movs	r0, #0
 8002790:	f7ff fad6 	bl	8001d40 <gc9a01a_fill_rect>
					obstacle.x = 240;
 8002794:	4b1c      	ldr	r3, [pc, #112]	@ (8002808 <tick+0x144>)
 8002796:	22f0      	movs	r2, #240	@ 0xf0
 8002798:	601a      	str	r2, [r3, #0]
				player_show_score(&player);
 800279a:	4819      	ldr	r0, [pc, #100]	@ (8002800 <tick+0x13c>)
 800279c:	f000 ff3a 	bl	8003614 <player_show_score>
		break;
 80027a0:	e028      	b.n	80027f4 <tick+0x130>

		case GAME_OVER: {
			collision_detected = false;
 80027a2:	4b1a      	ldr	r3, [pc, #104]	@ (800280c <tick+0x148>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
			game_over_mssg();
 80027a8:	f000 fe78 	bl	800349c <game_over_mssg>
			uint8_t restart_btn =  restart_btn_state();
 80027ac:	f000 ffd9 	bl	8003762 <restart_btn_state>
 80027b0:	4603      	mov	r3, r0
 80027b2:	71fb      	strb	r3, [r7, #7]
			if (restart_btn == PRESSED) {
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d11b      	bne.n	80027f2 <tick+0x12e>
			  Player_ctor(&player, 70, 30, 100, 30);
 80027ba:	231e      	movs	r3, #30
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	2364      	movs	r3, #100	@ 0x64
 80027c0:	221e      	movs	r2, #30
 80027c2:	2146      	movs	r1, #70	@ 0x46
 80027c4:	480e      	ldr	r0, [pc, #56]	@ (8002800 <tick+0x13c>)
 80027c6:	f7ff fd93 	bl	80022f0 <Player_ctor>
				Obstacle_ctor(&obstacle, 240, 30, 30, 80, 5);
 80027ca:	2305      	movs	r3, #5
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	2350      	movs	r3, #80	@ 0x50
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	231e      	movs	r3, #30
 80027d4:	221e      	movs	r2, #30
 80027d6:	21f0      	movs	r1, #240	@ 0xf0
 80027d8:	480b      	ldr	r0, [pc, #44]	@ (8002808 <tick+0x144>)
 80027da:	f7ff fda5 	bl	8002328 <Obstacle_ctor>
				flappy_game_set_back_ground();
 80027de:	f7ff fd3d 	bl	800225c <flappy_game_set_back_ground>
				game_state = GAME_PRESTART;
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <tick+0x138>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80027e8:	e003      	b.n	80027f2 <tick+0x12e>
		break;
 80027ea:	bf00      	nop
 80027ec:	e002      	b.n	80027f4 <tick+0x130>
		break;
 80027ee:	bf00      	nop
 80027f0:	e000      	b.n	80027f4 <tick+0x130>
		break;
 80027f2:	bf00      	nop
	}
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000298 	.word	0x20000298
 8002800:	2000029c 	.word	0x2000029c
 8002804:	20000294 	.word	0x20000294
 8002808:	200002b0 	.word	0x200002b0
 800280c:	20000290 	.word	0x20000290

08002810 <is_Collide>:
  * @brief Checks for collision between an obstacle and the player.
  * @param obstacle: Pointer to the Obstacle struct containing obstacle information.
  * @param player: Pointer to the Player struct containing player information.
  * @retval None
  */
void is_Collide(Obstacle *obstacle, Player *player) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	@ 0x28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
	int player_left = player->x;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
	int player_right = player->x + player->w -5;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4413      	add	r3, r2
 800282a:	3b05      	subs	r3, #5
 800282c:	623b      	str	r3, [r7, #32]
	int player_top = player->y;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	61fb      	str	r3, [r7, #28]
	int player_bottom = player->y + player->h-5;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4413      	add	r3, r2
 800283e:	3b05      	subs	r3, #5
 8002840:	61bb      	str	r3, [r7, #24]

	int obstacle_left = obstacle->x;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	617b      	str	r3, [r7, #20]
	int obstacle_right = obstacle->x + obstacle->w;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4413      	add	r3, r2
 8002852:	613b      	str	r3, [r7, #16]

	obstacle->h = generate_obstacle_height(obstacle->x);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fa15 	bl	8002c88 <generate_obstacle_height>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	60da      	str	r2, [r3, #12]
	int obstacle_bottom = OBSTACLE_ySTART_POINT + obstacle->h -5;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	3319      	adds	r3, #25
 800286c:	60fb      	str	r3, [r7, #12]

	if (player_right  >= obstacle_left && player_left <= obstacle_right ){
 800286e:	6a3a      	ldr	r2, [r7, #32]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	429a      	cmp	r2, r3
 8002874:	db23      	blt.n	80028be <is_Collide+0xae>
 8002876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	429a      	cmp	r2, r3
 800287c:	dc1f      	bgt.n	80028be <is_Collide+0xae>
		if( (player_top  < obstacle_bottom) || (player_bottom > (obstacle_bottom + obstacle->g +10))) {
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	429a      	cmp	r2, r3
 8002884:	db07      	blt.n	8002896 <is_Collide+0x86>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4413      	add	r3, r2
 800288e:	330a      	adds	r3, #10
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	429a      	cmp	r2, r3
 8002894:	dd03      	ble.n	800289e <is_Collide+0x8e>
			collision_detected = true;
 8002896:	4b0e      	ldr	r3, [pc, #56]	@ (80028d0 <is_Collide+0xc0>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
		if( (player_top  < obstacle_bottom) || (player_bottom > (obstacle_bottom + obstacle->g +10))) {
 800289c:	e013      	b.n	80028c6 <is_Collide+0xb6>
		} else if (!obstacle->passed) {  // Only update score if the obstacle hasn't been passed
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	7e1b      	ldrb	r3, [r3, #24]
 80028a2:	f083 0301 	eor.w	r3, r3, #1
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00c      	beq.n	80028c6 <is_Collide+0xb6>
      player->score += 1;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	611a      	str	r2, [r3, #16]
      obstacle->passed = true;  // Mark the obstacle as passed
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	761a      	strb	r2, [r3, #24]
		if( (player_top  < obstacle_bottom) || (player_bottom > (obstacle_bottom + obstacle->g +10))) {
 80028bc:	e003      	b.n	80028c6 <is_Collide+0xb6>
    }
	} else {
    obstacle->passed = false;   // Reset the flag when the player is not near the obstacle
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	761a      	strb	r2, [r3, #24]
  }
}
 80028c4:	e000      	b.n	80028c8 <is_Collide+0xb8>
		if( (player_top  < obstacle_bottom) || (player_bottom > (obstacle_bottom + obstacle->g +10))) {
 80028c6:	bf00      	nop
}
 80028c8:	bf00      	nop
 80028ca:	3728      	adds	r7, #40	@ 0x28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000290 	.word	0x20000290

080028d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028d8:	b672      	cpsid	i
}
 80028da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <Error_Handler+0x8>

080028e0 <mpu6050_Init>:
/**
  * @brief Initializes the MPU6050 sensor by configuring power management, gyroscope, and accelerometer.
  * @param None
  * @retval None
  */
void mpu6050_Init() {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  PowerManagement_Config();
 80028e4:	f000 f806 	bl	80028f4 <PowerManagement_Config>
  Gyro_Config();
 80028e8:	f000 f82c 	bl	8002944 <Gyro_Config>
  Accelerometer_Config();
 80028ec:	f000 f852 	bl	8002994 <Accelerometer_Config>
}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <PowerManagement_Config>:
  * @brief Configures the power management settings of the MPU6050 sensor to exit sleep mode.
  * @param None
  * @retval None
  */
void PowerManagement_Config()
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af04      	add	r7, sp, #16
  /* Set the value to be written to the power management register */
  temp_data = 0x00;
 80028fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002934 <PowerManagement_Config+0x40>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]

  /* Write the value to the power management register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_USR_CTRL, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 8002900:	f04f 33ff 	mov.w	r3, #4294967295
 8002904:	9302      	str	r3, [sp, #8]
 8002906:	2301      	movs	r3, #1
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	4b0a      	ldr	r3, [pc, #40]	@ (8002934 <PowerManagement_Config+0x40>)
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2301      	movs	r3, #1
 8002910:	226b      	movs	r2, #107	@ 0x6b
 8002912:	21d0      	movs	r1, #208	@ 0xd0
 8002914:	4808      	ldr	r0, [pc, #32]	@ (8002938 <PowerManagement_Config+0x44>)
 8002916:	f001 fb85 	bl	8004024 <HAL_I2C_Mem_Write>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d103      	bne.n	8002928 <PowerManagement_Config+0x34>
    /*print in SWV terminal*/
    printf("Exiting from sleep mode...\n");
 8002920:	4806      	ldr	r0, [pc, #24]	@ (800293c <PowerManagement_Config+0x48>)
 8002922:	f004 fcb9 	bl	8007298 <puts>
  } else {
    printf("Failed to exit from sleep mode...\n");
  }
}
 8002926:	e002      	b.n	800292e <PowerManagement_Config+0x3a>
    printf("Failed to exit from sleep mode...\n");
 8002928:	4805      	ldr	r0, [pc, #20]	@ (8002940 <PowerManagement_Config+0x4c>)
 800292a:	f004 fcb5 	bl	8007298 <puts>
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200002d8 	.word	0x200002d8
 8002938:	20000228 	.word	0x20000228
 800293c:	0800b284 	.word	0x0800b284
 8002940:	0800b2a0 	.word	0x0800b2a0

08002944 <Gyro_Config>:
  * @brief Configures the gyroscope settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Gyro_Config()
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af04      	add	r7, sp, #16
  /* Set the value to be written to the gyroscope configuration register */
  temp_data = FS_GYRO_500;
 800294a:	4b0e      	ldr	r3, [pc, #56]	@ (8002984 <Gyro_Config+0x40>)
 800294c:	2208      	movs	r2, #8
 800294e:	701a      	strb	r2, [r3, #0]

  /* Write the value to the gyroscope configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_GYRO, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 8002950:	f04f 33ff 	mov.w	r3, #4294967295
 8002954:	9302      	str	r3, [sp, #8]
 8002956:	2301      	movs	r3, #1
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	4b0a      	ldr	r3, [pc, #40]	@ (8002984 <Gyro_Config+0x40>)
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2301      	movs	r3, #1
 8002960:	221b      	movs	r2, #27
 8002962:	21d0      	movs	r1, #208	@ 0xd0
 8002964:	4808      	ldr	r0, [pc, #32]	@ (8002988 <Gyro_Config+0x44>)
 8002966:	f001 fb5d 	bl	8004024 <HAL_I2C_Mem_Write>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d103      	bne.n	8002978 <Gyro_Config+0x34>
    printf("Configuring gyroscope...\n");
 8002970:	4806      	ldr	r0, [pc, #24]	@ (800298c <Gyro_Config+0x48>)
 8002972:	f004 fc91 	bl	8007298 <puts>
  } else {
    printf("Failed to configure gyroscope...\n");
  }
}
 8002976:	e002      	b.n	800297e <Gyro_Config+0x3a>
    printf("Failed to configure gyroscope...\n");
 8002978:	4805      	ldr	r0, [pc, #20]	@ (8002990 <Gyro_Config+0x4c>)
 800297a:	f004 fc8d 	bl	8007298 <puts>
}
 800297e:	bf00      	nop
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	200002d8 	.word	0x200002d8
 8002988:	20000228 	.word	0x20000228
 800298c:	0800b2c4 	.word	0x0800b2c4
 8002990:	0800b2e0 	.word	0x0800b2e0

08002994 <Accelerometer_Config>:
  * @brief Configures the accelerometer settings of the MPU6050 sensor.
  * @param None
  * @retval None
  */
void Accelerometer_Config()
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af04      	add	r7, sp, #16
  /* Set the value to be written to the accelerometer configuration register */
  temp_data = FS_ACC_4G;
 800299a:	4b0e      	ldr	r3, [pc, #56]	@ (80029d4 <Accelerometer_Config+0x40>)
 800299c:	2208      	movs	r2, #8
 800299e:	701a      	strb	r2, [r3, #0]

  /* Write the value to the accelerometer configuration register via I2C communication */
  if ( (HAL_I2C_Mem_Write(&hi2c1, (MPU6050_ADDR << 1) + 0, REG_CONFIG_ACC, 1, &temp_data, 1, HAL_MAX_DELAY) == HAL_OK) ) {
 80029a0:	f04f 33ff 	mov.w	r3, #4294967295
 80029a4:	9302      	str	r3, [sp, #8]
 80029a6:	2301      	movs	r3, #1
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	4b0a      	ldr	r3, [pc, #40]	@ (80029d4 <Accelerometer_Config+0x40>)
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2301      	movs	r3, #1
 80029b0:	221c      	movs	r2, #28
 80029b2:	21d0      	movs	r1, #208	@ 0xd0
 80029b4:	4808      	ldr	r0, [pc, #32]	@ (80029d8 <Accelerometer_Config+0x44>)
 80029b6:	f001 fb35 	bl	8004024 <HAL_I2C_Mem_Write>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d103      	bne.n	80029c8 <Accelerometer_Config+0x34>
    printf("Configuring accelerometer...\n");
 80029c0:	4806      	ldr	r0, [pc, #24]	@ (80029dc <Accelerometer_Config+0x48>)
 80029c2:	f004 fc69 	bl	8007298 <puts>
  } else {
    printf("Failed to configure accelerometer...\n");
  }
}
 80029c6:	e002      	b.n	80029ce <Accelerometer_Config+0x3a>
    printf("Failed to configure accelerometer...\n");
 80029c8:	4805      	ldr	r0, [pc, #20]	@ (80029e0 <Accelerometer_Config+0x4c>)
 80029ca:	f004 fc65 	bl	8007298 <puts>
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	200002d8 	.word	0x200002d8
 80029d8:	20000228 	.word	0x20000228
 80029dc:	0800b304 	.word	0x0800b304
 80029e0:	0800b324 	.word	0x0800b324
 80029e4:	00000000 	.word	0x00000000

080029e8 <mpu6050_read>:
  * @brief Reads data from the MPU6050 sensor, including accelerometer and gyroscope values,
  *        and calculates roll and pitch angles using the accelerometer data.
  * @param None
  * @retval None
  */
void mpu6050_read() {
 80029e8:	b5b0      	push	{r4, r5, r7, lr}
 80029ea:	b0a2      	sub	sp, #136	@ 0x88
 80029ec:	af0a      	add	r7, sp, #40	@ 0x28
  int16_t x_acc, y_acc, z_acc;              // Accelerometer data for x, y, and z axes
  int16_t x_gyro, y_gyro, z_gyro;           // Gyroscope data for x, y, and z axes
  double accx,accy,accz,gyrox,gyroy,gyroz;
  double radianx, radiany;
  // Read all sensor data from the MPU6050
  HAL_I2C_Mem_Read(&hi2c1, (MPU6050_ADDR << 1), REG_DATA, 1, data, 14, HAL_MAX_DELAY);
 80029ee:	f04f 33ff 	mov.w	r3, #4294967295
 80029f2:	9302      	str	r3, [sp, #8]
 80029f4:	230e      	movs	r3, #14
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	463b      	mov	r3, r7
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	2301      	movs	r3, #1
 80029fe:	223b      	movs	r2, #59	@ 0x3b
 8002a00:	21d0      	movs	r1, #208	@ 0xd0
 8002a02:	489b      	ldr	r0, [pc, #620]	@ (8002c70 <mpu6050_read+0x288>)
 8002a04:	f001 fc22 	bl	800424c <HAL_I2C_Mem_Read>
  /* Extract accelerometer data (16-bit 2's complement format, high byte first) */
  x_acc = (int16_t)((data[0] << 8) | data[1]);
 8002a08:	783b      	ldrb	r3, [r7, #0]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	b21a      	sxth	r2, r3
 8002a0e:	787b      	ldrb	r3, [r7, #1]
 8002a10:	b21b      	sxth	r3, r3
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  y_acc = (int16_t)((data[2] << 8) | data[3]);
 8002a18:	78bb      	ldrb	r3, [r7, #2]
 8002a1a:	021b      	lsls	r3, r3, #8
 8002a1c:	b21a      	sxth	r2, r3
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	b21b      	sxth	r3, r3
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  z_acc = (int16_t)((data[4] << 8) | data[5]);
 8002a28:	793b      	ldrb	r3, [r7, #4]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	b21a      	sxth	r2, r3
 8002a2e:	797b      	ldrb	r3, [r7, #5]
 8002a30:	b21b      	sxth	r3, r3
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

  /* Extract gyroscope data (16-bit 2's complement format, high byte first) */
  x_gyro = (int16_t)((data[8] << 8) | data[9]);
 8002a38:	7a3b      	ldrb	r3, [r7, #8]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	b21a      	sxth	r2, r3
 8002a3e:	7a7b      	ldrb	r3, [r7, #9]
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  y_gyro = (int16_t)((data[10] << 8) | data[11]);
 8002a48:	7abb      	ldrb	r3, [r7, #10]
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	b21a      	sxth	r2, r3
 8002a4e:	7afb      	ldrb	r3, [r7, #11]
 8002a50:	b21b      	sxth	r3, r3
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  z_gyro = (int16_t)((data[12] << 8) | data[13]);
 8002a58:	7b3b      	ldrb	r3, [r7, #12]
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	b21a      	sxth	r2, r3
 8002a5e:	7b7b      	ldrb	r3, [r7, #13]
 8002a60:	b21b      	sxth	r3, r3
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

  /*Convert accelerometer raw values in to 'g'(acceleration due to gravity) values */
  accx = (double)x_acc / ACC_FS_SENSITIVITY_3;
 8002a68:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd59 	bl	8000524 <__aeabi_i2d>
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	4b7f      	ldr	r3, [pc, #508]	@ (8002c74 <mpu6050_read+0x28c>)
 8002a78:	f7fd fee8 	bl	800084c <__aeabi_ddiv>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  accy = (double)y_acc / ACC_FS_SENSITIVITY_3;
 8002a84:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fd fd4b 	bl	8000524 <__aeabi_i2d>
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	4b78      	ldr	r3, [pc, #480]	@ (8002c74 <mpu6050_read+0x28c>)
 8002a94:	f7fd feda 	bl	800084c <__aeabi_ddiv>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  accz = (double)z_acc / ACC_FS_SENSITIVITY_3;
 8002aa0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fd3d 	bl	8000524 <__aeabi_i2d>
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	4b71      	ldr	r3, [pc, #452]	@ (8002c74 <mpu6050_read+0x28c>)
 8002ab0:	f7fd fecc 	bl	800084c <__aeabi_ddiv>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  /* Convert gyroscope raw values to degrees per second ('°/s') */
  gyrox = (double)x_gyro / GYR_FS_SENSITIVITY_3;
 8002abc:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fd2f 	bl	8000524 <__aeabi_i2d>
 8002ac6:	a366      	add	r3, pc, #408	@ (adr r3, 8002c60 <mpu6050_read+0x278>)
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	f7fd febe 	bl	800084c <__aeabi_ddiv>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  gyroy = (double)y_gyro / GYR_FS_SENSITIVITY_3;
 8002ad8:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fd21 	bl	8000524 <__aeabi_i2d>
 8002ae2:	a35f      	add	r3, pc, #380	@ (adr r3, 8002c60 <mpu6050_read+0x278>)
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	f7fd feb0 	bl	800084c <__aeabi_ddiv>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  gyroz = (double)z_gyro / GYR_FS_SENSITIVITY_3;
 8002af4:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fd fd13 	bl	8000524 <__aeabi_i2d>
 8002afe:	a358      	add	r3, pc, #352	@ (adr r3, 8002c60 <mpu6050_read+0x278>)
 8002b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b04:	f7fd fea2 	bl	800084c <__aeabi_ddiv>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	e9c7 2308 	strd	r2, r3, [r7, #32]

  /* Calculate roll and pitch angles using accelerometer data */
  radianx = asin(accx / sqrt(accx * accx + accz * accz)); // Fix the arguments passed to asin
 8002b10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b14:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002b18:	f7fd fd6e 	bl	80005f8 <__aeabi_dmul>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4614      	mov	r4, r2
 8002b22:	461d      	mov	r5, r3
 8002b24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b28:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002b2c:	f7fd fd64 	bl	80005f8 <__aeabi_dmul>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4620      	mov	r0, r4
 8002b36:	4629      	mov	r1, r5
 8002b38:	f7fd fba8 	bl	800028c <__adddf3>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	ec43 2b17 	vmov	d7, r2, r3
 8002b44:	eeb0 0a47 	vmov.f32	s0, s14
 8002b48:	eef0 0a67 	vmov.f32	s1, s15
 8002b4c:	f008 f81c 	bl	800ab88 <sqrt>
 8002b50:	ec53 2b10 	vmov	r2, r3, d0
 8002b54:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002b58:	f7fd fe78 	bl	800084c <__aeabi_ddiv>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	ec43 2b17 	vmov	d7, r2, r3
 8002b64:	eeb0 0a47 	vmov.f32	s0, s14
 8002b68:	eef0 0a67 	vmov.f32	s1, s15
 8002b6c:	f007 ffd8 	bl	800ab20 <asin>
 8002b70:	ed87 0b06 	vstr	d0, [r7, #24]
  radiany = asin(accy / sqrt(accy * accy + accz * accz)); // Fix the arguments passed to asin
 8002b74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b78:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002b7c:	f7fd fd3c 	bl	80005f8 <__aeabi_dmul>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4614      	mov	r4, r2
 8002b86:	461d      	mov	r5, r3
 8002b88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b8c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002b90:	f7fd fd32 	bl	80005f8 <__aeabi_dmul>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4620      	mov	r0, r4
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	f7fd fb76 	bl	800028c <__adddf3>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	ec43 2b17 	vmov	d7, r2, r3
 8002ba8:	eeb0 0a47 	vmov.f32	s0, s14
 8002bac:	eef0 0a67 	vmov.f32	s1, s15
 8002bb0:	f007 ffea 	bl	800ab88 <sqrt>
 8002bb4:	ec53 2b10 	vmov	r2, r3, d0
 8002bb8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002bbc:	f7fd fe46 	bl	800084c <__aeabi_ddiv>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	ec43 2b17 	vmov	d7, r2, r3
 8002bc8:	eeb0 0a47 	vmov.f32	s0, s14
 8002bcc:	eef0 0a67 	vmov.f32	s1, s15
 8002bd0:	f007 ffa6 	bl	800ab20 <asin>
 8002bd4:	ed87 0b04 	vstr	d0, [r7, #16]

  /* Convert roll and pitch angles from radians to degrees */
  degreex = radianx * (180.0 / M_PI); // Roll
 8002bd8:	a323      	add	r3, pc, #140	@ (adr r3, 8002c68 <mpu6050_read+0x280>)
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002be2:	f7fd fd09 	bl	80005f8 <__aeabi_dmul>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4923      	ldr	r1, [pc, #140]	@ (8002c78 <mpu6050_read+0x290>)
 8002bec:	e9c1 2300 	strd	r2, r3, [r1]
  degreey = radiany * (180.0 / M_PI); // Pitch
 8002bf0:	a31d      	add	r3, pc, #116	@ (adr r3, 8002c68 <mpu6050_read+0x280>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bfa:	f7fd fcfd 	bl	80005f8 <__aeabi_dmul>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	491e      	ldr	r1, [pc, #120]	@ (8002c7c <mpu6050_read+0x294>)
 8002c04:	e9c1 2300 	strd	r2, r3, [r1]

  /* Print out the accelerometer and gyroscope values along with roll and pitch angles in SWV terminal */
  printf("Acc(g)=> X:%.2f Y:%.2f Z:%.2f   Gyro(dps)=> X:%.2f Y:%.2f Z:%.2f\n", accx, accy, accz, gyrox, gyroy, gyroz);
 8002c08:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002c10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002c18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002c1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c2c:	e9cd 2300 	strd	r2, r3, [sp]
 8002c30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c34:	4812      	ldr	r0, [pc, #72]	@ (8002c80 <mpu6050_read+0x298>)
 8002c36:	f004 fac7 	bl	80071c8 <iprintf>
  printf("Roll: %.2f degrees, Pitch: %.2f degrees\n", degreex, degreey);
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <mpu6050_read+0x290>)
 8002c3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c40:	4b0e      	ldr	r3, [pc, #56]	@ (8002c7c <mpu6050_read+0x294>)
 8002c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c46:	e9cd 2300 	strd	r2, r3, [sp]
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	480d      	ldr	r0, [pc, #52]	@ (8002c84 <mpu6050_read+0x29c>)
 8002c50:	f004 faba 	bl	80071c8 <iprintf>
}
 8002c54:	bf00      	nop
 8002c56:	3760      	adds	r7, #96	@ 0x60
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c5c:	f3af 8000 	nop.w
 8002c60:	66666666 	.word	0x66666666
 8002c64:	40306666 	.word	0x40306666
 8002c68:	1a63c1f8 	.word	0x1a63c1f8
 8002c6c:	404ca5dc 	.word	0x404ca5dc
 8002c70:	20000228 	.word	0x20000228
 8002c74:	40a00000 	.word	0x40a00000
 8002c78:	20000280 	.word	0x20000280
 8002c7c:	20000288 	.word	0x20000288
 8002c80:	0800b34c 	.word	0x0800b34c
 8002c84:	0800b390 	.word	0x0800b390

08002c88 <generate_obstacle_height>:
/**
  * @brief  Generate the height of the obstacle.
  * @param  x_start: Starting position of the obstacle.
  * @retval The height of the obstacle.
  */
uint8_t generate_obstacle_height(int x_start) {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	static int top_obstacle_height = -1; // Initialize with -1 to indicate it's not set yet
	// Generate random top_obstacle_height if it's not set yet or x_start is 210
	if (top_obstacle_height == -1 || x_start == 240) {
 8002c90:	4b11      	ldr	r3, [pc, #68]	@ (8002cd8 <generate_obstacle_height+0x50>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d002      	beq.n	8002ca0 <generate_obstacle_height+0x18>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2bf0      	cmp	r3, #240	@ 0xf0
 8002c9e:	d113      	bne.n	8002cc8 <generate_obstacle_height+0x40>
		top_obstacle_height = rand() % (90 - 20 + 1) + 20;
 8002ca0:	f003 fb26 	bl	80062f0 <rand>
 8002ca4:	4601      	mov	r1, r0
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cdc <generate_obstacle_height+0x54>)
 8002ca8:	fb83 2301 	smull	r2, r3, r3, r1
 8002cac:	440b      	add	r3, r1
 8002cae:	119a      	asrs	r2, r3, #6
 8002cb0:	17cb      	asrs	r3, r1, #31
 8002cb2:	1ad2      	subs	r2, r2, r3
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	1aca      	subs	r2, r1, r3
 8002cc0:	f102 0314 	add.w	r3, r2, #20
 8002cc4:	4a04      	ldr	r2, [pc, #16]	@ (8002cd8 <generate_obstacle_height+0x50>)
 8002cc6:	6013      	str	r3, [r2, #0]
	}
	return top_obstacle_height;
 8002cc8:	4b03      	ldr	r3, [pc, #12]	@ (8002cd8 <generate_obstacle_height+0x50>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	b2db      	uxtb	r3, r3
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000008 	.word	0x20000008
 8002cdc:	e6c2b449 	.word	0xe6c2b449

08002ce0 <display_obstacle>:
/**
  * @brief  Display the obstacle on the LCD.
  * @param  x_start: Starting position of the obstacle.
  * @retval None
  */
void display_obstacle(int x_start) {
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af02      	add	r7, sp, #8
 8002ce6:	6078      	str	r0, [r7, #4]
  score_card_background();
 8002ce8:	f000 f967 	bl	8002fba <score_card_background>

  obstacle.h = generate_obstacle_height(x_start);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ffcb 	bl	8002c88 <generate_obstacle_height>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4b9e      	ldr	r3, [pc, #632]	@ (8002f70 <display_obstacle+0x290>)
 8002cf8:	60da      	str	r2, [r3, #12]
  int bottom_obstacle_ystart =  obstacle.h + obstacle.y + obstacle.g;
 8002cfa:	4b9d      	ldr	r3, [pc, #628]	@ (8002f70 <display_obstacle+0x290>)
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	4b9c      	ldr	r3, [pc, #624]	@ (8002f70 <display_obstacle+0x290>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	441a      	add	r2, r3
 8002d04:	4b9a      	ldr	r3, [pc, #616]	@ (8002f70 <display_obstacle+0x290>)
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	4413      	add	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
  int bottom_obstacle_height = OBSTACLE_yEND_POINT - bottom_obstacle_ystart;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f1c3 03d2 	rsb	r3, r3, #210	@ 0xd2
 8002d12:	60bb      	str	r3, [r7, #8]

  gc9a01a_fill_rect(x_start,3, obstacle.y, obstacle.h-2, OBSTACLE_SHADE_1);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	b298      	uxth	r0, r3
 8002d18:	4b95      	ldr	r3, [pc, #596]	@ (8002f70 <display_obstacle+0x290>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	4b94      	ldr	r3, [pc, #592]	@ (8002f70 <display_obstacle+0x290>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b02      	subs	r3, #2
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f245 31c0 	movw	r1, #21440	@ 0x53c0
 8002d2c:	9100      	str	r1, [sp, #0]
 8002d2e:	2103      	movs	r1, #3
 8002d30:	f7ff f806 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start,3,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2), OBSTACLE_SHADE_1);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	b298      	uxth	r0, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b02      	subs	r3, #2
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	f245 31c0 	movw	r1, #21440	@ 0x53c0
 8002d4c:	9100      	str	r1, [sp, #0]
 8002d4e:	2103      	movs	r1, #3
 8002d50:	f7fe fff6 	bl	8001d40 <gc9a01a_fill_rect>

  gc9a01a_fill_rect(x_start,obstacle.w,( obstacle.h+obstacle.y-2),2, OBSTACLE_SHADE_1);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	b298      	uxth	r0, r3
 8002d58:	4b85      	ldr	r3, [pc, #532]	@ (8002f70 <display_obstacle+0x290>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	b299      	uxth	r1, r3
 8002d5e:	4b84      	ldr	r3, [pc, #528]	@ (8002f70 <display_obstacle+0x290>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	4b82      	ldr	r3, [pc, #520]	@ (8002f70 <display_obstacle+0x290>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b02      	subs	r3, #2
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	f245 33c0 	movw	r3, #21440	@ 0x53c0
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	2302      	movs	r3, #2
 8002d7a:	f7fe ffe1 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start,obstacle.w,bottom_obstacle_ystart,2, OBSTACLE_SHADE_1);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	b298      	uxth	r0, r3
 8002d82:	4b7b      	ldr	r3, [pc, #492]	@ (8002f70 <display_obstacle+0x290>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	b299      	uxth	r1, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	f245 33c0 	movw	r3, #21440	@ 0x53c0
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	2302      	movs	r3, #2
 8002d94:	f7fe ffd4 	bl	8001d40 <gc9a01a_fill_rect>

  gc9a01a_fill_rect(x_start+3,2,obstacle.y, obstacle.h-2, OBSTACLE_SHADE_2);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3303      	adds	r3, #3
 8002d9e:	b298      	uxth	r0, r3
 8002da0:	4b73      	ldr	r3, [pc, #460]	@ (8002f70 <display_obstacle+0x290>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	4b72      	ldr	r3, [pc, #456]	@ (8002f70 <display_obstacle+0x290>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b02      	subs	r3, #2
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	f44f 41fb 	mov.w	r1, #32128	@ 0x7d80
 8002db4:	9100      	str	r1, [sp, #0]
 8002db6:	2102      	movs	r1, #2
 8002db8:	f7fe ffc2 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start+3,2,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2), OBSTACLE_SHADE_2);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3303      	adds	r3, #3
 8002dc2:	b298      	uxth	r0, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3302      	adds	r3, #2
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b02      	subs	r3, #2
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f44f 41fb 	mov.w	r1, #32128	@ 0x7d80
 8002dd8:	9100      	str	r1, [sp, #0]
 8002dda:	2102      	movs	r1, #2
 8002ddc:	f7fe ffb0 	bl	8001d40 <gc9a01a_fill_rect>

  gc9a01a_fill_rect(x_start+5,2,obstacle.y, obstacle.h-2, OBSTACLE_SHADE_3);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3305      	adds	r3, #5
 8002de6:	b298      	uxth	r0, r3
 8002de8:	4b61      	ldr	r3, [pc, #388]	@ (8002f70 <display_obstacle+0x290>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	4b60      	ldr	r3, [pc, #384]	@ (8002f70 <display_obstacle+0x290>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	3b02      	subs	r3, #2
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f44f 411f 	mov.w	r1, #40704	@ 0x9f00
 8002dfc:	9100      	str	r1, [sp, #0]
 8002dfe:	2102      	movs	r1, #2
 8002e00:	f7fe ff9e 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start+5,2,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2), OBSTACLE_SHADE_3);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3305      	adds	r3, #5
 8002e0a:	b298      	uxth	r0, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3302      	adds	r3, #2
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b02      	subs	r3, #2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	f44f 411f 	mov.w	r1, #40704	@ 0x9f00
 8002e20:	9100      	str	r1, [sp, #0]
 8002e22:	2102      	movs	r1, #2
 8002e24:	f7fe ff8c 	bl	8001d40 <gc9a01a_fill_rect>

  gc9a01a_fill_rect(x_start+7,10,obstacle.y, obstacle.h-2, WHITE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3307      	adds	r3, #7
 8002e2e:	b298      	uxth	r0, r3
 8002e30:	4b4f      	ldr	r3, [pc, #316]	@ (8002f70 <display_obstacle+0x290>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	4b4e      	ldr	r3, [pc, #312]	@ (8002f70 <display_obstacle+0x290>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b02      	subs	r3, #2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002e44:	9100      	str	r1, [sp, #0]
 8002e46:	210a      	movs	r1, #10
 8002e48:	f7fe ff7a 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start+7,10,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2), WHITE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3307      	adds	r3, #7
 8002e52:	b298      	uxth	r0, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3302      	adds	r3, #2
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b02      	subs	r3, #2
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002e68:	9100      	str	r1, [sp, #0]
 8002e6a:	210a      	movs	r1, #10
 8002e6c:	f7fe ff68 	bl	8001d40 <gc9a01a_fill_rect>

  gc9a01a_fill_rect(x_start+17,3,obstacle.y, obstacle.h-2, OBSTACLE_SHADE_3);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3311      	adds	r3, #17
 8002e76:	b298      	uxth	r0, r3
 8002e78:	4b3d      	ldr	r3, [pc, #244]	@ (8002f70 <display_obstacle+0x290>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f70 <display_obstacle+0x290>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b02      	subs	r3, #2
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	f44f 411f 	mov.w	r1, #40704	@ 0x9f00
 8002e8c:	9100      	str	r1, [sp, #0]
 8002e8e:	2103      	movs	r1, #3
 8002e90:	f7fe ff56 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start+17,3,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2), OBSTACLE_SHADE_3);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3311      	adds	r3, #17
 8002e9a:	b298      	uxth	r0, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b02      	subs	r3, #2
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f44f 411f 	mov.w	r1, #40704	@ 0x9f00
 8002eb0:	9100      	str	r1, [sp, #0]
 8002eb2:	2103      	movs	r1, #3
 8002eb4:	f7fe ff44 	bl	8001d40 <gc9a01a_fill_rect>

  gc9a01a_fill_rect(x_start+20,3,obstacle.y, obstacle.h-2, OBSTACLE_SHADE_2);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3314      	adds	r3, #20
 8002ebe:	b298      	uxth	r0, r3
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f70 <display_obstacle+0x290>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f70 <display_obstacle+0x290>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b02      	subs	r3, #2
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f44f 41fb 	mov.w	r1, #32128	@ 0x7d80
 8002ed4:	9100      	str	r1, [sp, #0]
 8002ed6:	2103      	movs	r1, #3
 8002ed8:	f7fe ff32 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start+20,3,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2), OBSTACLE_SHADE_2);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3314      	adds	r3, #20
 8002ee2:	b298      	uxth	r0, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3302      	adds	r3, #2
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b02      	subs	r3, #2
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	f44f 41fb 	mov.w	r1, #32128	@ 0x7d80
 8002ef8:	9100      	str	r1, [sp, #0]
 8002efa:	2103      	movs	r1, #3
 8002efc:	f7fe ff20 	bl	8001d40 <gc9a01a_fill_rect>

  gc9a01a_fill_rect(x_start+23,7,obstacle.y, obstacle.h-2, OBSTACLE_SHADE_1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3317      	adds	r3, #23
 8002f06:	b298      	uxth	r0, r3
 8002f08:	4b19      	ldr	r3, [pc, #100]	@ (8002f70 <display_obstacle+0x290>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	4b18      	ldr	r3, [pc, #96]	@ (8002f70 <display_obstacle+0x290>)
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b02      	subs	r3, #2
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f245 31c0 	movw	r1, #21440	@ 0x53c0
 8002f1c:	9100      	str	r1, [sp, #0]
 8002f1e:	2107      	movs	r1, #7
 8002f20:	f7fe ff0e 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(x_start+23,7,(bottom_obstacle_ystart+2),(bottom_obstacle_height-2), OBSTACLE_SHADE_1);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3317      	adds	r3, #23
 8002f2a:	b298      	uxth	r0, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3302      	adds	r3, #2
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b02      	subs	r3, #2
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	f245 31c0 	movw	r1, #21440	@ 0x53c0
 8002f40:	9100      	str	r1, [sp, #0]
 8002f42:	2107      	movs	r1, #7
 8002f44:	f7fe fefc 	bl	8001d40 <gc9a01a_fill_rect>

  /* filling traces of obstacle */
  gc9a01a_fill_rect((x_start+30), obstacle.speed, obstacle.y,  obstacle.h, BACKGROUND);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	331e      	adds	r3, #30
 8002f4e:	b298      	uxth	r0, r3
 8002f50:	4b07      	ldr	r3, [pc, #28]	@ (8002f70 <display_obstacle+0x290>)
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	b299      	uxth	r1, r3
 8002f56:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <display_obstacle+0x290>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	4b04      	ldr	r3, [pc, #16]	@ (8002f70 <display_obstacle+0x290>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f649 745e 	movw	r4, #40798	@ 0x9f5e
 8002f66:	9400      	str	r4, [sp, #0]
 8002f68:	f7fe feea 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect((x_start+30), obstacle.speed, bottom_obstacle_ystart, bottom_obstacle_height, BACKGROUND);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	e001      	b.n	8002f74 <display_obstacle+0x294>
 8002f70:	200002b0 	.word	0x200002b0
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	331e      	adds	r3, #30
 8002f78:	b298      	uxth	r0, r3
 8002f7a:	4b08      	ldr	r3, [pc, #32]	@ (8002f9c <display_obstacle+0x2bc>)
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	b299      	uxth	r1, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	f649 745e 	movw	r4, #40798	@ 0x9f5e
 8002f8c:	9400      	str	r4, [sp, #0]
 8002f8e:	f7fe fed7 	bl	8001d40 <gc9a01a_fill_rect>
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd90      	pop	{r4, r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200002b0 	.word	0x200002b0

08002fa0 <move_obstacle>:
/**
  * @brief  Move the obstacle on the LCD.
  * @param  x: Position to move the obstacle to.
  * @retval None
  */
void move_obstacle( int x) {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	display_obstacle(x);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff fe99 	bl	8002ce0 <display_obstacle>
	display_bush();
 8002fae:	f7ff f92d 	bl	800220c <display_bush>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <score_card_background>:

/**
  * @brief  Draw the background for the score card on the LCD.
  * @retval None
  */
void score_card_background() {
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af02      	add	r7, sp, #8
  gc9a01a_fill_rect(0, 96,0,26, SCORE_BOARD_SHADE_3);
 8002fc0:	f24e 731c 	movw	r3, #59164	@ 0xe71c
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	231a      	movs	r3, #26
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2160      	movs	r1, #96	@ 0x60
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f7fe feb7 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(144, 96,0,26, SCORE_BOARD_SHADE_3);
 8002fd2:	f24e 731c 	movw	r3, #59164	@ 0xe71c
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	231a      	movs	r3, #26
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2160      	movs	r1, #96	@ 0x60
 8002fde:	2090      	movs	r0, #144	@ 0x90
 8002fe0:	f7fe feae 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect( 0, 240,26,2, SCORE_BOARD_SHADE_2);
 8002fe4:	f249 43b2 	movw	r3, #38066	@ 0x94b2
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	2302      	movs	r3, #2
 8002fec:	221a      	movs	r2, #26
 8002fee:	21f0      	movs	r1, #240	@ 0xf0
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f7fe fea5 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect( 0, 240,28,2, SCORE_BOARD_SHADE_1);
 8002ff6:	f247 338e 	movw	r3, #29582	@ 0x738e
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	221c      	movs	r2, #28
 8003000:	21f0      	movs	r1, #240	@ 0xf0
 8003002:	2000      	movs	r0, #0
 8003004:	f7fe fe9c 	bl	8001d40 <gc9a01a_fill_rect>
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <get_obstacle_speed>:
/**
  * @brief  Calculates the speed of obstacles based on the player's score.
  * @param  score: The player's score.
  * @retval uint8_t: The calculated obstacle speed.
  */
uint8_t get_obstacle_speed(int score) {
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  int base_speed = 5;
 8003018:	2305      	movs	r3, #5
 800301a:	60fb      	str	r3, [r7, #12]
  float speed_increment = 1.6;
 800301c:	4b0b      	ldr	r3, [pc, #44]	@ (800304c <get_obstacle_speed+0x3c>)
 800301e:	60bb      	str	r3, [r7, #8]
  return base_speed * speed_increment;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800302a:	edd7 7a02 	vldr	s15, [r7, #8]
 800302e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003036:	edc7 7a00 	vstr	s15, [r7]
 800303a:	783b      	ldrb	r3, [r7, #0]
 800303c:	b2db      	uxtb	r3, r3
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	3fcccccd 	.word	0x3fcccccd

08003050 <move_player>:
/**
  * @brief  Move the player on the LCD.
  * @param  y_pos: Starting position of the player.
  * @retval None
  */
void move_player( int y_pos) {
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b085      	sub	sp, #20
 8003054:	af02      	add	r7, sp, #8
 8003056:	6078      	str	r0, [r7, #4]
	static int wing_movement=1;
	fill_player_trace();
 8003058:	f7ff f886 	bl	8002168 <fill_player_trace>
	if(wing_movement%5==0){
 800305c:	4b1a      	ldr	r3, [pc, #104]	@ (80030c8 <move_player+0x78>)
 800305e:	6819      	ldr	r1, [r3, #0]
 8003060:	4b1a      	ldr	r3, [pc, #104]	@ (80030cc <move_player+0x7c>)
 8003062:	fb83 2301 	smull	r2, r3, r3, r1
 8003066:	105a      	asrs	r2, r3, #1
 8003068:	17cb      	asrs	r3, r1, #31
 800306a:	1ad2      	subs	r2, r2, r3
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	1aca      	subs	r2, r1, r3
 8003074:	2a00      	cmp	r2, #0
 8003076:	d10f      	bne.n	8003098 <move_player+0x48>
	  gc9a01a_draw_image( player.x, player.w, y_pos, player.h, (uint16_t *)image_data_bird);
 8003078:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <move_player+0x80>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	b298      	uxth	r0, r3
 800307e:	4b14      	ldr	r3, [pc, #80]	@ (80030d0 <move_player+0x80>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	b299      	uxth	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	b29a      	uxth	r2, r3
 8003088:	4b11      	ldr	r3, [pc, #68]	@ (80030d0 <move_player+0x80>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	b29b      	uxth	r3, r3
 800308e:	4c11      	ldr	r4, [pc, #68]	@ (80030d4 <move_player+0x84>)
 8003090:	9400      	str	r4, [sp, #0]
 8003092:	f7fe ff7f 	bl	8001f94 <gc9a01a_draw_image>
 8003096:	e00e      	b.n	80030b6 <move_player+0x66>
	} else {
	  gc9a01a_draw_image( player.x, player.w, y_pos, player.h, (uint16_t *)image_data_bird2);
 8003098:	4b0d      	ldr	r3, [pc, #52]	@ (80030d0 <move_player+0x80>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	b298      	uxth	r0, r3
 800309e:	4b0c      	ldr	r3, [pc, #48]	@ (80030d0 <move_player+0x80>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	b299      	uxth	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	4b09      	ldr	r3, [pc, #36]	@ (80030d0 <move_player+0x80>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	4c0a      	ldr	r4, [pc, #40]	@ (80030d8 <move_player+0x88>)
 80030b0:	9400      	str	r4, [sp, #0]
 80030b2:	f7fe ff6f 	bl	8001f94 <gc9a01a_draw_image>
	}
	wing_movement++;
 80030b6:	4b04      	ldr	r3, [pc, #16]	@ (80030c8 <move_player+0x78>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3301      	adds	r3, #1
 80030bc:	4a02      	ldr	r2, [pc, #8]	@ (80030c8 <move_player+0x78>)
 80030be:	6013      	str	r3, [r2, #0]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd90      	pop	{r4, r7, pc}
 80030c8:	2000000c 	.word	0x2000000c
 80030cc:	66666667 	.word	0x66666667
 80030d0:	2000029c 	.word	0x2000029c
 80030d4:	08015254 	.word	0x08015254
 80030d8:	0801595c 	.word	0x0801595c

080030dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <HAL_MspInit+0x44>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003120 <HAL_MspInit+0x44>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6193      	str	r3, [r2, #24]
 80030ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003120 <HAL_MspInit+0x44>)
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	607b      	str	r3, [r7, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <HAL_MspInit+0x44>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	4a08      	ldr	r2, [pc, #32]	@ (8003120 <HAL_MspInit+0x44>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003104:	61d3      	str	r3, [r2, #28]
 8003106:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <HAL_MspInit+0x44>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000

08003124 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	@ 0x28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a17      	ldr	r2, [pc, #92]	@ (80031a0 <HAL_I2C_MspInit+0x7c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d127      	bne.n	8003196 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003146:	4b17      	ldr	r3, [pc, #92]	@ (80031a4 <HAL_I2C_MspInit+0x80>)
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	4a16      	ldr	r2, [pc, #88]	@ (80031a4 <HAL_I2C_MspInit+0x80>)
 800314c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003150:	6153      	str	r3, [r2, #20]
 8003152:	4b14      	ldr	r3, [pc, #80]	@ (80031a4 <HAL_I2C_MspInit+0x80>)
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = TP_SCL_Pin|TP_SDA_Pin;
 800315e:	23c0      	movs	r3, #192	@ 0xc0
 8003160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003162:	2312      	movs	r3, #18
 8003164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800316a:	2303      	movs	r3, #3
 800316c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800316e:	2304      	movs	r3, #4
 8003170:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003172:	f107 0314 	add.w	r3, r7, #20
 8003176:	4619      	mov	r1, r3
 8003178:	480b      	ldr	r0, [pc, #44]	@ (80031a8 <HAL_I2C_MspInit+0x84>)
 800317a:	f000 fd0d 	bl	8003b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800317e:	4b09      	ldr	r3, [pc, #36]	@ (80031a4 <HAL_I2C_MspInit+0x80>)
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	4a08      	ldr	r2, [pc, #32]	@ (80031a4 <HAL_I2C_MspInit+0x80>)
 8003184:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003188:	61d3      	str	r3, [r2, #28]
 800318a:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <HAL_I2C_MspInit+0x80>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003196:	bf00      	nop
 8003198:	3728      	adds	r7, #40	@ 0x28
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40005400 	.word	0x40005400
 80031a4:	40021000 	.word	0x40021000
 80031a8:	48000400 	.word	0x48000400

080031ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031b0:	bf00      	nop
 80031b2:	e7fd      	b.n	80031b0 <NMI_Handler+0x4>

080031b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b8:	bf00      	nop
 80031ba:	e7fd      	b.n	80031b8 <HardFault_Handler+0x4>

080031bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031c0:	bf00      	nop
 80031c2:	e7fd      	b.n	80031c0 <MemManage_Handler+0x4>

080031c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c8:	bf00      	nop
 80031ca:	e7fd      	b.n	80031c8 <BusFault_Handler+0x4>

080031cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031d0:	bf00      	nop
 80031d2:	e7fd      	b.n	80031d0 <UsageFault_Handler+0x4>

080031d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003202:	f000 fb41 	bl	8003888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}

0800320a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IN_Pin);
 800320e:	2020      	movs	r0, #32
 8003210:	f000 fe54 	bl	8003ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}

08003218 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN           *((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
  //Enable TRCENA
  DEMCR |= ( 1 << 24);
 8003222:	4b0f      	ldr	r3, [pc, #60]	@ (8003260 <ITM_SendChar+0x48>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a0e      	ldr	r2, [pc, #56]	@ (8003260 <ITM_SendChar+0x48>)
 8003228:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800322c:	6013      	str	r3, [r2, #0]

  //enable stimulus port 0
  ITM_TRACE_EN |= ( 1 << 0);
 800322e:	4b0d      	ldr	r3, [pc, #52]	@ (8003264 <ITM_SendChar+0x4c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a0c      	ldr	r2, [pc, #48]	@ (8003264 <ITM_SendChar+0x4c>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6013      	str	r3, [r2, #0]

  // read FIFO status in bit [0]:
  while(!(ITM_STIMULUS_PORT0 & 1));
 800323a:	bf00      	nop
 800323c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f8      	beq.n	800323c <ITM_SendChar+0x24>

  //Write to ITM stimulus port0
  ITM_STIMULUS_PORT0 = ch;
 800324a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	6013      	str	r3, [r2, #0]
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000edfc 	.word	0xe000edfc
 8003264:	e0000e00 	.word	0xe0000e00

08003268 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return 1;
 800326c:	2301      	movs	r3, #1
}
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <_kill>:

int _kill(int pid, int sig)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003282:	f004 f95b 	bl	800753c <__errno>
 8003286:	4603      	mov	r3, r0
 8003288:	2216      	movs	r2, #22
 800328a:	601a      	str	r2, [r3, #0]
  return -1;
 800328c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <_exit>:

void _exit (int status)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032a0:	f04f 31ff 	mov.w	r1, #4294967295
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ffe7 	bl	8003278 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032aa:	bf00      	nop
 80032ac:	e7fd      	b.n	80032aa <_exit+0x12>

080032ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	e00a      	b.n	80032d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032c0:	f3af 8000 	nop.w
 80032c4:	4601      	mov	r1, r0
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	60ba      	str	r2, [r7, #8]
 80032cc:	b2ca      	uxtb	r2, r1
 80032ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	3301      	adds	r3, #1
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	429a      	cmp	r2, r3
 80032dc:	dbf0      	blt.n	80032c0 <_read+0x12>
  }

  return len;
 80032de:	687b      	ldr	r3, [r7, #4]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	e009      	b.n	800330e <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	60ba      	str	r2, [r7, #8]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff ff88 	bl	8003218 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	3301      	adds	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	429a      	cmp	r2, r3
 8003314:	dbf1      	blt.n	80032fa <_write+0x12>
  }
  return len;
 8003316:	687b      	ldr	r3, [r7, #4]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <_close>:

int _close(int file)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003328:	f04f 33ff 	mov.w	r3, #4294967295
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003348:	605a      	str	r2, [r3, #4]
  return 0;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <_isatty>:

int _isatty(int file)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003360:	2301      	movs	r3, #1
}
 8003362:	4618      	mov	r0, r3
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800336e:	b480      	push	{r7}
 8003370:	b085      	sub	sp, #20
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003390:	4a14      	ldr	r2, [pc, #80]	@ (80033e4 <_sbrk+0x5c>)
 8003392:	4b15      	ldr	r3, [pc, #84]	@ (80033e8 <_sbrk+0x60>)
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800339c:	4b13      	ldr	r3, [pc, #76]	@ (80033ec <_sbrk+0x64>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033a4:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <_sbrk+0x64>)
 80033a6:	4a12      	ldr	r2, [pc, #72]	@ (80033f0 <_sbrk+0x68>)
 80033a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033aa:	4b10      	ldr	r3, [pc, #64]	@ (80033ec <_sbrk+0x64>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d207      	bcs.n	80033c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033b8:	f004 f8c0 	bl	800753c <__errno>
 80033bc:	4603      	mov	r3, r0
 80033be:	220c      	movs	r2, #12
 80033c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033c2:	f04f 33ff 	mov.w	r3, #4294967295
 80033c6:	e009      	b.n	80033dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033c8:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <_sbrk+0x64>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033ce:	4b07      	ldr	r3, [pc, #28]	@ (80033ec <_sbrk+0x64>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	4a05      	ldr	r2, [pc, #20]	@ (80033ec <_sbrk+0x64>)
 80033d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033da:	68fb      	ldr	r3, [r7, #12]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	2000a000 	.word	0x2000a000
 80033e8:	00000600 	.word	0x00000600
 80033ec:	200002dc 	.word	0x200002dc
 80033f0:	20000438 	.word	0x20000438

080033f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033f8:	4b06      	ldr	r3, [pc, #24]	@ (8003414 <SystemInit+0x20>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fe:	4a05      	ldr	r2, [pc, #20]	@ (8003414 <SystemInit+0x20>)
 8003400:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003404:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <game_init_mssg>:
/**
  * @brief Initializes the game message display.
  * @param None
  * @retval None
  */
void game_init_mssg() {
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af04      	add	r7, sp, #16
  const char* game_start_btn = "START";
 800341e:	4b1d      	ldr	r3, [pc, #116]	@ (8003494 <game_init_mssg+0x7c>)
 8003420:	607b      	str	r3, [r7, #4]
  display_game_title();
 8003422:	f7fe ff4b 	bl	80022bc <display_game_title>

  gc9a01a_fill_rect( 70, 10, 140, 26, BUTTON);
 8003426:	f640 3385 	movw	r3, #2949	@ 0xb85
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	231a      	movs	r3, #26
 800342e:	228c      	movs	r2, #140	@ 0x8c
 8003430:	210a      	movs	r1, #10
 8003432:	2046      	movs	r0, #70	@ 0x46
 8003434:	f7fe fc84 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(160, 10, 140, 26, BUTTON);
 8003438:	f640 3385 	movw	r3, #2949	@ 0xb85
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	231a      	movs	r3, #26
 8003440:	228c      	movs	r2, #140	@ 0x8c
 8003442:	210a      	movs	r1, #10
 8003444:	20a0      	movs	r0, #160	@ 0xa0
 8003446:	f7fe fc7b 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect( 70,100, 130, 10, BUTTON);
 800344a:	f640 3385 	movw	r3, #2949	@ 0xb85
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	230a      	movs	r3, #10
 8003452:	2282      	movs	r2, #130	@ 0x82
 8003454:	2164      	movs	r1, #100	@ 0x64
 8003456:	2046      	movs	r0, #70	@ 0x46
 8003458:	f7fe fc72 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect( 70,100, 166, 10, BUTTON);
 800345c:	f640 3385 	movw	r3, #2949	@ 0xb85
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	230a      	movs	r3, #10
 8003464:	22a6      	movs	r2, #166	@ 0xa6
 8003466:	2164      	movs	r1, #100	@ 0x64
 8003468:	2046      	movs	r0, #70	@ 0x46
 800346a:	f7fe fc69 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_write_string(80, 140, (const char*)game_start_btn, Font_16x26, BTN_TXT, BUTTON);
 800346e:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <game_init_mssg+0x80>)
 8003470:	f640 3285 	movw	r2, #2949	@ 0xb85
 8003474:	9202      	str	r2, [sp, #8]
 8003476:	f64f 72fb 	movw	r2, #65531	@ 0xfffb
 800347a:	9201      	str	r2, [sp, #4]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	9200      	str	r2, [sp, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	218c      	movs	r1, #140	@ 0x8c
 8003486:	2050      	movs	r0, #80	@ 0x50
 8003488:	f7fe fc14 	bl	8001cb4 <gc9a01a_write_string>
}
 800348c:	bf00      	nop
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	0800b3bc 	.word	0x0800b3bc
 8003498:	20000000 	.word	0x20000000

0800349c <game_over_mssg>:
/**
  * @brief Displays game over message on the screen.
  * @param None
  * @retval None
  */
void game_over_mssg() {
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af04      	add	r7, sp, #16
	const char* game_over_message = "GAME OVER";
 80034a2:	4b25      	ldr	r3, [pc, #148]	@ (8003538 <game_over_mssg+0x9c>)
 80034a4:	607b      	str	r3, [r7, #4]
	const char* restart_message = "RESTART";
 80034a6:	4b25      	ldr	r3, [pc, #148]	@ (800353c <game_over_mssg+0xa0>)
 80034a8:	603b      	str	r3, [r7, #0]

	gc9a01a_write_string(48, 70, (const char*)game_over_message, Font_16x26, RED, BACKGROUND);
 80034aa:	4b25      	ldr	r3, [pc, #148]	@ (8003540 <game_over_mssg+0xa4>)
 80034ac:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 80034b0:	9202      	str	r2, [sp, #8]
 80034b2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80034b6:	9201      	str	r2, [sp, #4]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	9200      	str	r2, [sp, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	2146      	movs	r1, #70	@ 0x46
 80034c2:	2030      	movs	r0, #48	@ 0x30
 80034c4:	f7fe fbf6 	bl	8001cb4 <gc9a01a_write_string>
  gc9a01a_fill_rect( 54, 10, 140, 26, BUTTON);
 80034c8:	f640 3385 	movw	r3, #2949	@ 0xb85
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	231a      	movs	r3, #26
 80034d0:	228c      	movs	r2, #140	@ 0x8c
 80034d2:	210a      	movs	r1, #10
 80034d4:	2036      	movs	r0, #54	@ 0x36
 80034d6:	f7fe fc33 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect(176, 10, 140, 26, BUTTON);
 80034da:	f640 3385 	movw	r3, #2949	@ 0xb85
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	231a      	movs	r3, #26
 80034e2:	228c      	movs	r2, #140	@ 0x8c
 80034e4:	210a      	movs	r1, #10
 80034e6:	20b0      	movs	r0, #176	@ 0xb0
 80034e8:	f7fe fc2a 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect( 54,132, 130, 10, BUTTON);
 80034ec:	f640 3385 	movw	r3, #2949	@ 0xb85
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	230a      	movs	r3, #10
 80034f4:	2282      	movs	r2, #130	@ 0x82
 80034f6:	2184      	movs	r1, #132	@ 0x84
 80034f8:	2036      	movs	r0, #54	@ 0x36
 80034fa:	f7fe fc21 	bl	8001d40 <gc9a01a_fill_rect>
  gc9a01a_fill_rect( 54,132, 166, 10, BUTTON);
 80034fe:	f640 3385 	movw	r3, #2949	@ 0xb85
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	230a      	movs	r3, #10
 8003506:	22a6      	movs	r2, #166	@ 0xa6
 8003508:	2184      	movs	r1, #132	@ 0x84
 800350a:	2036      	movs	r0, #54	@ 0x36
 800350c:	f7fe fc18 	bl	8001d40 <gc9a01a_fill_rect>
	gc9a01a_write_string(64, 140, (const char*)restart_message, Font_16x26, BTN_TXT, BUTTON);
 8003510:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <game_over_mssg+0xa4>)
 8003512:	f640 3285 	movw	r2, #2949	@ 0xb85
 8003516:	9202      	str	r2, [sp, #8]
 8003518:	f64f 72fb 	movw	r2, #65531	@ 0xfffb
 800351c:	9201      	str	r2, [sp, #4]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	9200      	str	r2, [sp, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	218c      	movs	r1, #140	@ 0x8c
 8003528:	2040      	movs	r0, #64	@ 0x40
 800352a:	f7fe fbc3 	bl	8001cb4 <gc9a01a_write_string>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	0800b3c4 	.word	0x0800b3c4
 800353c:	0800b3d0 	.word	0x0800b3d0
 8003540:	20000000 	.word	0x20000000

08003544 <render_gamestart_countdown>:
/**
  * @brief Renders the countdown before the game starts.
  * @param None
  * @retval None
  */
void render_gamestart_countdown() {
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af04      	add	r7, sp, #16
	static uint32_t prestart_time = 0;
	countdown_complete = false;
 800354a:	4b2c      	ldr	r3, [pc, #176]	@ (80035fc <render_gamestart_countdown+0xb8>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
	prestart_time++;
 8003550:	4b2b      	ldr	r3, [pc, #172]	@ (8003600 <render_gamestart_countdown+0xbc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	4a2a      	ldr	r2, [pc, #168]	@ (8003600 <render_gamestart_countdown+0xbc>)
 8003558:	6013      	str	r3, [r2, #0]
	if (prestart_time < 50) {
 800355a:	4b29      	ldr	r3, [pc, #164]	@ (8003600 <render_gamestart_countdown+0xbc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b31      	cmp	r3, #49	@ 0x31
 8003560:	d80e      	bhi.n	8003580 <render_gamestart_countdown+0x3c>
		gc9a01a_write_string(116, 107, (const char*)"3", Font_16x26, BLACK, BACKGROUND);
 8003562:	4b28      	ldr	r3, [pc, #160]	@ (8003604 <render_gamestart_countdown+0xc0>)
 8003564:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 8003568:	9202      	str	r2, [sp, #8]
 800356a:	2200      	movs	r2, #0
 800356c:	9201      	str	r2, [sp, #4]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	9200      	str	r2, [sp, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a24      	ldr	r2, [pc, #144]	@ (8003608 <render_gamestart_countdown+0xc4>)
 8003576:	216b      	movs	r1, #107	@ 0x6b
 8003578:	2074      	movs	r0, #116	@ 0x74
 800357a:	f7fe fb9b 	bl	8001cb4 <gc9a01a_write_string>
	} else if(prestart_time > 150) {
		prestart_time = 0;
		fill_countdown_trace();
		countdown_complete = true;
	}
}
 800357e:	e03a      	b.n	80035f6 <render_gamestart_countdown+0xb2>
	} else if(prestart_time > 50 && prestart_time < 100) {
 8003580:	4b1f      	ldr	r3, [pc, #124]	@ (8003600 <render_gamestart_countdown+0xbc>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b32      	cmp	r3, #50	@ 0x32
 8003586:	d912      	bls.n	80035ae <render_gamestart_countdown+0x6a>
 8003588:	4b1d      	ldr	r3, [pc, #116]	@ (8003600 <render_gamestart_countdown+0xbc>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b63      	cmp	r3, #99	@ 0x63
 800358e:	d80e      	bhi.n	80035ae <render_gamestart_countdown+0x6a>
		gc9a01a_write_string(116, 107, (const char*)"2", Font_16x26, BLACK, BACKGROUND);
 8003590:	4b1c      	ldr	r3, [pc, #112]	@ (8003604 <render_gamestart_countdown+0xc0>)
 8003592:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 8003596:	9202      	str	r2, [sp, #8]
 8003598:	2200      	movs	r2, #0
 800359a:	9201      	str	r2, [sp, #4]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	9200      	str	r2, [sp, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1a      	ldr	r2, [pc, #104]	@ (800360c <render_gamestart_countdown+0xc8>)
 80035a4:	216b      	movs	r1, #107	@ 0x6b
 80035a6:	2074      	movs	r0, #116	@ 0x74
 80035a8:	f7fe fb84 	bl	8001cb4 <gc9a01a_write_string>
 80035ac:	e023      	b.n	80035f6 <render_gamestart_countdown+0xb2>
	} else if(prestart_time > 100 && prestart_time < 150) {
 80035ae:	4b14      	ldr	r3, [pc, #80]	@ (8003600 <render_gamestart_countdown+0xbc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b64      	cmp	r3, #100	@ 0x64
 80035b4:	d912      	bls.n	80035dc <render_gamestart_countdown+0x98>
 80035b6:	4b12      	ldr	r3, [pc, #72]	@ (8003600 <render_gamestart_countdown+0xbc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b95      	cmp	r3, #149	@ 0x95
 80035bc:	d80e      	bhi.n	80035dc <render_gamestart_countdown+0x98>
		gc9a01a_write_string(116, 107, (const char*)"1", Font_16x26, BLACK, BACKGROUND);
 80035be:	4b11      	ldr	r3, [pc, #68]	@ (8003604 <render_gamestart_countdown+0xc0>)
 80035c0:	f649 725e 	movw	r2, #40798	@ 0x9f5e
 80035c4:	9202      	str	r2, [sp, #8]
 80035c6:	2200      	movs	r2, #0
 80035c8:	9201      	str	r2, [sp, #4]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	9200      	str	r2, [sp, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003610 <render_gamestart_countdown+0xcc>)
 80035d2:	216b      	movs	r1, #107	@ 0x6b
 80035d4:	2074      	movs	r0, #116	@ 0x74
 80035d6:	f7fe fb6d 	bl	8001cb4 <gc9a01a_write_string>
 80035da:	e00c      	b.n	80035f6 <render_gamestart_countdown+0xb2>
	} else if(prestart_time > 150) {
 80035dc:	4b08      	ldr	r3, [pc, #32]	@ (8003600 <render_gamestart_countdown+0xbc>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b96      	cmp	r3, #150	@ 0x96
 80035e2:	d908      	bls.n	80035f6 <render_gamestart_countdown+0xb2>
		prestart_time = 0;
 80035e4:	4b06      	ldr	r3, [pc, #24]	@ (8003600 <render_gamestart_countdown+0xbc>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
		fill_countdown_trace();
 80035ea:	f7fe fe3f 	bl	800226c <fill_countdown_trace>
		countdown_complete = true;
 80035ee:	4b03      	ldr	r3, [pc, #12]	@ (80035fc <render_gamestart_countdown+0xb8>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
}
 80035f4:	e7ff      	b.n	80035f6 <render_gamestart_countdown+0xb2>
 80035f6:	bf00      	nop
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000294 	.word	0x20000294
 8003600:	200002e0 	.word	0x200002e0
 8003604:	20000000 	.word	0x20000000
 8003608:	0800b3d8 	.word	0x0800b3d8
 800360c:	0800b3dc 	.word	0x0800b3dc
 8003610:	0800b3e0 	.word	0x0800b3e0

08003614 <player_show_score>:
/**
  * @brief Displays the player's score on the screen.
  * @param player: Pointer to the Player struct containing player information.
  * @retval None
  */
void player_show_score(Player *player) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b0a0      	sub	sp, #128	@ 0x80
 8003618:	af04      	add	r7, sp, #16
 800361a:	6078      	str	r0, [r7, #4]
	char score_str[100]="000";
 800361c:	4b39      	ldr	r3, [pc, #228]	@ (8003704 <player_show_score+0xf0>)
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	f107 0310 	add.w	r3, r7, #16
 8003624:	2260      	movs	r2, #96	@ 0x60
 8003626:	2100      	movs	r1, #0
 8003628:	4618      	mov	r0, r3
 800362a:	f003 ff35 	bl	8007498 <memset>

	if(( player->score)<10){
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b09      	cmp	r3, #9
 8003634:	dc18      	bgt.n	8003668 <player_show_score+0x54>
		sprintf(score_str, "00%d", player->score);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	f107 030c 	add.w	r3, r7, #12
 800363e:	4932      	ldr	r1, [pc, #200]	@ (8003708 <player_show_score+0xf4>)
 8003640:	4618      	mov	r0, r3
 8003642:	f003 fe31 	bl	80072a8 <siprintf>
		gc9a01a_write_string(96, 0, score_str, Font_16x26, BLACK, SCORE_BOARD);
 8003646:	4b31      	ldr	r3, [pc, #196]	@ (800370c <player_show_score+0xf8>)
 8003648:	f107 010c 	add.w	r1, r7, #12
 800364c:	f24e 721c 	movw	r2, #59164	@ 0xe71c
 8003650:	9202      	str	r2, [sp, #8]
 8003652:	2200      	movs	r2, #0
 8003654:	9201      	str	r2, [sp, #4]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	9200      	str	r2, [sp, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	460a      	mov	r2, r1
 800365e:	2100      	movs	r1, #0
 8003660:	2060      	movs	r0, #96	@ 0x60
 8003662:	f7fe fb27 	bl	8001cb4 <gc9a01a_write_string>
		sprintf(score_str, "%d", player->score);
		gc9a01a_write_string(96, 0, score_str, Font_16x26, BLACK, SCORE_BOARD);
	} else {
		gc9a01a_write_string(96, 0, "WIN", Font_16x26, BLACK, SCORE_BOARD);
	}
}
 8003666:	e048      	b.n	80036fa <player_show_score+0xe6>
	} else if( player->score<100){
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	2b63      	cmp	r3, #99	@ 0x63
 800366e:	dc18      	bgt.n	80036a2 <player_show_score+0x8e>
		sprintf(score_str, "0%d", player->score);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	f107 030c 	add.w	r3, r7, #12
 8003678:	4925      	ldr	r1, [pc, #148]	@ (8003710 <player_show_score+0xfc>)
 800367a:	4618      	mov	r0, r3
 800367c:	f003 fe14 	bl	80072a8 <siprintf>
		gc9a01a_write_string(96, 0, score_str, Font_16x26, BLACK, SCORE_BOARD);
 8003680:	4b22      	ldr	r3, [pc, #136]	@ (800370c <player_show_score+0xf8>)
 8003682:	f107 010c 	add.w	r1, r7, #12
 8003686:	f24e 721c 	movw	r2, #59164	@ 0xe71c
 800368a:	9202      	str	r2, [sp, #8]
 800368c:	2200      	movs	r2, #0
 800368e:	9201      	str	r2, [sp, #4]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	9200      	str	r2, [sp, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	460a      	mov	r2, r1
 8003698:	2100      	movs	r1, #0
 800369a:	2060      	movs	r0, #96	@ 0x60
 800369c:	f7fe fb0a 	bl	8001cb4 <gc9a01a_write_string>
}
 80036a0:	e02b      	b.n	80036fa <player_show_score+0xe6>
	} else if( player->score<1000){
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036aa:	da18      	bge.n	80036de <player_show_score+0xca>
		sprintf(score_str, "%d", player->score);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	f107 030c 	add.w	r3, r7, #12
 80036b4:	4917      	ldr	r1, [pc, #92]	@ (8003714 <player_show_score+0x100>)
 80036b6:	4618      	mov	r0, r3
 80036b8:	f003 fdf6 	bl	80072a8 <siprintf>
		gc9a01a_write_string(96, 0, score_str, Font_16x26, BLACK, SCORE_BOARD);
 80036bc:	4b13      	ldr	r3, [pc, #76]	@ (800370c <player_show_score+0xf8>)
 80036be:	f107 010c 	add.w	r1, r7, #12
 80036c2:	f24e 721c 	movw	r2, #59164	@ 0xe71c
 80036c6:	9202      	str	r2, [sp, #8]
 80036c8:	2200      	movs	r2, #0
 80036ca:	9201      	str	r2, [sp, #4]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	9200      	str	r2, [sp, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	460a      	mov	r2, r1
 80036d4:	2100      	movs	r1, #0
 80036d6:	2060      	movs	r0, #96	@ 0x60
 80036d8:	f7fe faec 	bl	8001cb4 <gc9a01a_write_string>
}
 80036dc:	e00d      	b.n	80036fa <player_show_score+0xe6>
		gc9a01a_write_string(96, 0, "WIN", Font_16x26, BLACK, SCORE_BOARD);
 80036de:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <player_show_score+0xf8>)
 80036e0:	f24e 721c 	movw	r2, #59164	@ 0xe71c
 80036e4:	9202      	str	r2, [sp, #8]
 80036e6:	2200      	movs	r2, #0
 80036e8:	9201      	str	r2, [sp, #4]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	9200      	str	r2, [sp, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a09      	ldr	r2, [pc, #36]	@ (8003718 <player_show_score+0x104>)
 80036f2:	2100      	movs	r1, #0
 80036f4:	2060      	movs	r0, #96	@ 0x60
 80036f6:	f7fe fadd 	bl	8001cb4 <gc9a01a_write_string>
}
 80036fa:	bf00      	nop
 80036fc:	3770      	adds	r7, #112	@ 0x70
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	00303030 	.word	0x00303030
 8003708:	0800b3e4 	.word	0x0800b3e4
 800370c:	20000000 	.word	0x20000000
 8003710:	0800b3ec 	.word	0x0800b3ec
 8003714:	0800b3f0 	.word	0x0800b3f0
 8003718:	0800b3f4 	.word	0x0800b3f4

0800371c <start_btn_state>:

/**
  * @brief  Checks if the start button is pressed based on touch coordinates.
  * @retval uint8_t: PRESSED if the start button is pressed, otherwise NOT_PRESSED.
  */
uint8_t start_btn_state() {
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
  struct touch_data data;
  if(CST816S_data_available()) {
 8003722:	f7fd fb9d 	bl	8000e60 <CST816S_data_available>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d015      	beq.n	8003758 <start_btn_state+0x3c>
    memcpy(&data, CST816S_get_data(), sizeof(struct touch_data));
 800372c:	f7fd fb2e 	bl	8000d8c <CST816S_get_data>
 8003730:	4601      	mov	r1, r0
 8003732:	463b      	mov	r3, r7
 8003734:	2210      	movs	r2, #16
 8003736:	4618      	mov	r0, r3
 8003738:	f003 ff2d 	bl	8007596 <memcpy>
    if(data.y >= 70 && data.y <= 170) {
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b45      	cmp	r3, #69	@ 0x45
 8003740:	dd0a      	ble.n	8003758 <start_btn_state+0x3c>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2baa      	cmp	r3, #170	@ 0xaa
 8003746:	dc07      	bgt.n	8003758 <start_btn_state+0x3c>
      if(data.x >= 130 && data.x <= 176) {
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b81      	cmp	r3, #129	@ 0x81
 800374c:	dd04      	ble.n	8003758 <start_btn_state+0x3c>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2bb0      	cmp	r3, #176	@ 0xb0
 8003752:	dc01      	bgt.n	8003758 <start_btn_state+0x3c>
        return PRESSED;
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <start_btn_state+0x3e>
      }
    }
  }
  return NOT_PRESSED;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <restart_btn_state>:

/**
  * @brief  Checks if the restart button is pressed based on touch coordinates.
  * @retval uint8_t: PRESSED if the restart button is pressed, otherwise NOT_PRESSED.
  */
uint8_t restart_btn_state() {
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
  struct touch_data data;
  if(CST816S_data_available()) {
 8003768:	f7fd fb7a 	bl	8000e60 <CST816S_data_available>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d015      	beq.n	800379e <restart_btn_state+0x3c>
    memcpy(&data, CST816S_get_data(), sizeof(struct touch_data));
 8003772:	f7fd fb0b 	bl	8000d8c <CST816S_get_data>
 8003776:	4601      	mov	r1, r0
 8003778:	463b      	mov	r3, r7
 800377a:	2210      	movs	r2, #16
 800377c:	4618      	mov	r0, r3
 800377e:	f003 ff0a 	bl	8007596 <memcpy>
    if(data.y >= 54 && data.y <= 186) {
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b35      	cmp	r3, #53	@ 0x35
 8003786:	dd0a      	ble.n	800379e <restart_btn_state+0x3c>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2bba      	cmp	r3, #186	@ 0xba
 800378c:	dc07      	bgt.n	800379e <restart_btn_state+0x3c>
      if(data.x >= 130 && data.x <= 176) {
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b81      	cmp	r3, #129	@ 0x81
 8003792:	dd04      	ble.n	800379e <restart_btn_state+0x3c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2bb0      	cmp	r3, #176	@ 0xb0
 8003798:	dc01      	bgt.n	800379e <restart_btn_state+0x3c>
        return PRESSED;
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <restart_btn_state+0x3e>
      }
    }
  }
  return NOT_PRESSED;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80037ac:	f7ff fe22 	bl	80033f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037b0:	480c      	ldr	r0, [pc, #48]	@ (80037e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80037b2:	490d      	ldr	r1, [pc, #52]	@ (80037e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037b4:	4a0d      	ldr	r2, [pc, #52]	@ (80037ec <LoopForever+0xe>)
  movs r3, #0
 80037b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037b8:	e002      	b.n	80037c0 <LoopCopyDataInit>

080037ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037be:	3304      	adds	r3, #4

080037c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037c4:	d3f9      	bcc.n	80037ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037c6:	4a0a      	ldr	r2, [pc, #40]	@ (80037f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037c8:	4c0a      	ldr	r4, [pc, #40]	@ (80037f4 <LoopForever+0x16>)
  movs r3, #0
 80037ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037cc:	e001      	b.n	80037d2 <LoopFillZerobss>

080037ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037d0:	3204      	adds	r2, #4

080037d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037d4:	d3fb      	bcc.n	80037ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037d6:	f003 feb7 	bl	8007548 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037da:	f7fe fdc7 	bl	800236c <main>

080037de <LoopForever>:

LoopForever:
    b LoopForever
 80037de:	e7fe      	b.n	80037de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037e0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80037e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037e8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80037ec:	0801652c 	.word	0x0801652c
  ldr r2, =_sbss
 80037f0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80037f4:	20000434 	.word	0x20000434

080037f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037f8:	e7fe      	b.n	80037f8 <ADC1_2_IRQHandler>
	...

080037fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003800:	4b08      	ldr	r3, [pc, #32]	@ (8003824 <HAL_Init+0x28>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a07      	ldr	r2, [pc, #28]	@ (8003824 <HAL_Init+0x28>)
 8003806:	f043 0310 	orr.w	r3, r3, #16
 800380a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800380c:	2003      	movs	r0, #3
 800380e:	f000 f973 	bl	8003af8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003812:	200f      	movs	r0, #15
 8003814:	f000 f808 	bl	8003828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003818:	f7ff fc60 	bl	80030dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40022000 	.word	0x40022000

08003828 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003830:	4b12      	ldr	r3, [pc, #72]	@ (800387c <HAL_InitTick+0x54>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b12      	ldr	r3, [pc, #72]	@ (8003880 <HAL_InitTick+0x58>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	4619      	mov	r1, r3
 800383a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800383e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f999 	bl	8003b7e <HAL_SYSTICK_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e00e      	b.n	8003874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b0f      	cmp	r3, #15
 800385a:	d80a      	bhi.n	8003872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800385c:	2200      	movs	r2, #0
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
 8003864:	f000 f953 	bl	8003b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003868:	4a06      	ldr	r2, [pc, #24]	@ (8003884 <HAL_InitTick+0x5c>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e000      	b.n	8003874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000010 	.word	0x20000010
 8003880:	20000018 	.word	0x20000018
 8003884:	20000014 	.word	0x20000014

08003888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800388c:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <HAL_IncTick+0x20>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <HAL_IncTick+0x24>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4413      	add	r3, r2
 8003898:	4a04      	ldr	r2, [pc, #16]	@ (80038ac <HAL_IncTick+0x24>)
 800389a:	6013      	str	r3, [r2, #0]
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000018 	.word	0x20000018
 80038ac:	200002e4 	.word	0x200002e4

080038b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80038b4:	4b03      	ldr	r3, [pc, #12]	@ (80038c4 <HAL_GetTick+0x14>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	200002e4 	.word	0x200002e4

080038c8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038d0:	f7ff ffee 	bl	80038b0 <HAL_GetTick>
 80038d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d005      	beq.n	80038ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038e2:	4b0a      	ldr	r3, [pc, #40]	@ (800390c <HAL_Delay+0x44>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80038ee:	bf00      	nop
 80038f0:	f7ff ffde 	bl	80038b0 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d8f7      	bhi.n	80038f0 <HAL_Delay+0x28>
  {
  }
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000018 	.word	0x20000018

08003910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003920:	4b0c      	ldr	r3, [pc, #48]	@ (8003954 <__NVIC_SetPriorityGrouping+0x44>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800392c:	4013      	ands	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800393c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003942:	4a04      	ldr	r2, [pc, #16]	@ (8003954 <__NVIC_SetPriorityGrouping+0x44>)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	60d3      	str	r3, [r2, #12]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800395c:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <__NVIC_GetPriorityGrouping+0x18>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	0a1b      	lsrs	r3, r3, #8
 8003962:	f003 0307 	and.w	r3, r3, #7
}
 8003966:	4618      	mov	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	e000ed00 	.word	0xe000ed00

08003974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	2b00      	cmp	r3, #0
 8003984:	db0b      	blt.n	800399e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	f003 021f 	and.w	r2, r3, #31
 800398c:	4907      	ldr	r1, [pc, #28]	@ (80039ac <__NVIC_EnableIRQ+0x38>)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	2001      	movs	r0, #1
 8003996:	fa00 f202 	lsl.w	r2, r0, r2
 800399a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	e000e100 	.word	0xe000e100

080039b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	db12      	blt.n	80039e8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	f003 021f 	and.w	r2, r3, #31
 80039c8:	490a      	ldr	r1, [pc, #40]	@ (80039f4 <__NVIC_DisableIRQ+0x44>)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	2001      	movs	r0, #1
 80039d2:	fa00 f202 	lsl.w	r2, r0, r2
 80039d6:	3320      	adds	r3, #32
 80039d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80039dc:	f3bf 8f4f 	dsb	sy
}
 80039e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039e2:	f3bf 8f6f 	isb	sy
}
 80039e6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000e100 	.word	0xe000e100

080039f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	6039      	str	r1, [r7, #0]
 8003a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	db0a      	blt.n	8003a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	490c      	ldr	r1, [pc, #48]	@ (8003a44 <__NVIC_SetPriority+0x4c>)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	0112      	lsls	r2, r2, #4
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a20:	e00a      	b.n	8003a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4908      	ldr	r1, [pc, #32]	@ (8003a48 <__NVIC_SetPriority+0x50>)
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	3b04      	subs	r3, #4
 8003a30:	0112      	lsls	r2, r2, #4
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	440b      	add	r3, r1
 8003a36:	761a      	strb	r2, [r3, #24]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	e000e100 	.word	0xe000e100
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b089      	sub	sp, #36	@ 0x24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f1c3 0307 	rsb	r3, r3, #7
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	bf28      	it	cs
 8003a6a:	2304      	movcs	r3, #4
 8003a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3304      	adds	r3, #4
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d902      	bls.n	8003a7c <NVIC_EncodePriority+0x30>
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3b03      	subs	r3, #3
 8003a7a:	e000      	b.n	8003a7e <NVIC_EncodePriority+0x32>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a80:	f04f 32ff 	mov.w	r2, #4294967295
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	401a      	ands	r2, r3
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a94:	f04f 31ff 	mov.w	r1, #4294967295
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9e:	43d9      	mvns	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa4:	4313      	orrs	r3, r2
         );
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3724      	adds	r7, #36	@ 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ac4:	d301      	bcc.n	8003aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e00f      	b.n	8003aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aca:	4a0a      	ldr	r2, [pc, #40]	@ (8003af4 <SysTick_Config+0x40>)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ad2:	210f      	movs	r1, #15
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	f7ff ff8e 	bl	80039f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003adc:	4b05      	ldr	r3, [pc, #20]	@ (8003af4 <SysTick_Config+0x40>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ae2:	4b04      	ldr	r3, [pc, #16]	@ (8003af4 <SysTick_Config+0x40>)
 8003ae4:	2207      	movs	r2, #7
 8003ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	e000e010 	.word	0xe000e010

08003af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ff05 	bl	8003910 <__NVIC_SetPriorityGrouping>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	4603      	mov	r3, r0
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b20:	f7ff ff1a 	bl	8003958 <__NVIC_GetPriorityGrouping>
 8003b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	6978      	ldr	r0, [r7, #20]
 8003b2c:	f7ff ff8e 	bl	8003a4c <NVIC_EncodePriority>
 8003b30:	4602      	mov	r2, r0
 8003b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b36:	4611      	mov	r1, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff5d 	bl	80039f8 <__NVIC_SetPriority>
}
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff ff0d 	bl	8003974 <__NVIC_EnableIRQ>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	4603      	mov	r3, r0
 8003b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff ff1d 	bl	80039b0 <__NVIC_DisableIRQ>
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff ff94 	bl	8003ab4 <SysTick_Config>
 8003b8c:	4603      	mov	r3, r0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ba6:	e154      	b.n	8003e52 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	2101      	movs	r1, #1
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8146 	beq.w	8003e4c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d005      	beq.n	8003bd8 <HAL_GPIO_Init+0x40>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d130      	bne.n	8003c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	2203      	movs	r2, #3
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4013      	ands	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c0e:	2201      	movs	r2, #1
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	091b      	lsrs	r3, r3, #4
 8003c24:	f003 0201 	and.w	r2, r3, #1
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d017      	beq.n	8003c76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	2203      	movs	r2, #3
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d123      	bne.n	8003cca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	08da      	lsrs	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3208      	adds	r2, #8
 8003c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	220f      	movs	r2, #15
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	08da      	lsrs	r2, r3, #3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3208      	adds	r2, #8
 8003cc4:	6939      	ldr	r1, [r7, #16]
 8003cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 0203 	and.w	r2, r3, #3
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80a0 	beq.w	8003e4c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d0c:	4b58      	ldr	r3, [pc, #352]	@ (8003e70 <HAL_GPIO_Init+0x2d8>)
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	4a57      	ldr	r2, [pc, #348]	@ (8003e70 <HAL_GPIO_Init+0x2d8>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6193      	str	r3, [r2, #24]
 8003d18:	4b55      	ldr	r3, [pc, #340]	@ (8003e70 <HAL_GPIO_Init+0x2d8>)
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d24:	4a53      	ldr	r2, [pc, #332]	@ (8003e74 <HAL_GPIO_Init+0x2dc>)
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	3302      	adds	r3, #2
 8003d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	220f      	movs	r2, #15
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4013      	ands	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d4e:	d019      	beq.n	8003d84 <HAL_GPIO_Init+0x1ec>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a49      	ldr	r2, [pc, #292]	@ (8003e78 <HAL_GPIO_Init+0x2e0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d013      	beq.n	8003d80 <HAL_GPIO_Init+0x1e8>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a48      	ldr	r2, [pc, #288]	@ (8003e7c <HAL_GPIO_Init+0x2e4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00d      	beq.n	8003d7c <HAL_GPIO_Init+0x1e4>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a47      	ldr	r2, [pc, #284]	@ (8003e80 <HAL_GPIO_Init+0x2e8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d007      	beq.n	8003d78 <HAL_GPIO_Init+0x1e0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a46      	ldr	r2, [pc, #280]	@ (8003e84 <HAL_GPIO_Init+0x2ec>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d101      	bne.n	8003d74 <HAL_GPIO_Init+0x1dc>
 8003d70:	2304      	movs	r3, #4
 8003d72:	e008      	b.n	8003d86 <HAL_GPIO_Init+0x1ee>
 8003d74:	2305      	movs	r3, #5
 8003d76:	e006      	b.n	8003d86 <HAL_GPIO_Init+0x1ee>
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e004      	b.n	8003d86 <HAL_GPIO_Init+0x1ee>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e002      	b.n	8003d86 <HAL_GPIO_Init+0x1ee>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <HAL_GPIO_Init+0x1ee>
 8003d84:	2300      	movs	r3, #0
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	f002 0203 	and.w	r2, r2, #3
 8003d8c:	0092      	lsls	r2, r2, #2
 8003d8e:	4093      	lsls	r3, r2
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d96:	4937      	ldr	r1, [pc, #220]	@ (8003e74 <HAL_GPIO_Init+0x2dc>)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	089b      	lsrs	r3, r3, #2
 8003d9c:	3302      	adds	r3, #2
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003da4:	4b38      	ldr	r3, [pc, #224]	@ (8003e88 <HAL_GPIO_Init+0x2f0>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4013      	ands	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003dc8:	4a2f      	ldr	r2, [pc, #188]	@ (8003e88 <HAL_GPIO_Init+0x2f0>)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dce:	4b2e      	ldr	r3, [pc, #184]	@ (8003e88 <HAL_GPIO_Init+0x2f0>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003df2:	4a25      	ldr	r2, [pc, #148]	@ (8003e88 <HAL_GPIO_Init+0x2f0>)
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003df8:	4b23      	ldr	r3, [pc, #140]	@ (8003e88 <HAL_GPIO_Init+0x2f0>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	43db      	mvns	r3, r3
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4013      	ands	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8003e88 <HAL_GPIO_Init+0x2f0>)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e22:	4b19      	ldr	r3, [pc, #100]	@ (8003e88 <HAL_GPIO_Init+0x2f0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e46:	4a10      	ldr	r2, [pc, #64]	@ (8003e88 <HAL_GPIO_Init+0x2f0>)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f47f aea3 	bne.w	8003ba8 <HAL_GPIO_Init+0x10>
  }
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40010000 	.word	0x40010000
 8003e78:	48000400 	.word	0x48000400
 8003e7c:	48000800 	.word	0x48000800
 8003e80:	48000c00 	.word	0x48000c00
 8003e84:	48001000 	.word	0x48001000
 8003e88:	40010400 	.word	0x40010400

08003e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	807b      	strh	r3, [r7, #2]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e9c:	787b      	ldrb	r3, [r7, #1]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ea2:	887a      	ldrh	r2, [r7, #2]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ea8:	e002      	b.n	8003eb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003eaa:	887a      	ldrh	r2, [r7, #2]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ec6:	4b08      	ldr	r3, [pc, #32]	@ (8003ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d006      	beq.n	8003ee0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ed2:	4a05      	ldr	r2, [pc, #20]	@ (8003ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc ff60 	bl	8000da0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40010400 	.word	0x40010400

08003eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e08d      	b.n	800401a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff f906 	bl	8003124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2224      	movs	r2, #36	@ 0x24
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d107      	bne.n	8003f66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	e006      	b.n	8003f74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d108      	bne.n	8003f8e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f8a:	605a      	str	r2, [r3, #4]
 8003f8c:	e007      	b.n	8003f9e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69d9      	ldr	r1, [r3, #28]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1a      	ldr	r2, [r3, #32]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	4608      	mov	r0, r1
 800402e:	4611      	mov	r1, r2
 8004030:	461a      	mov	r2, r3
 8004032:	4603      	mov	r3, r0
 8004034:	817b      	strh	r3, [r7, #10]
 8004036:	460b      	mov	r3, r1
 8004038:	813b      	strh	r3, [r7, #8]
 800403a:	4613      	mov	r3, r2
 800403c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b20      	cmp	r3, #32
 8004048:	f040 80f9 	bne.w	800423e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_I2C_Mem_Write+0x34>
 8004052:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004054:	2b00      	cmp	r3, #0
 8004056:	d105      	bne.n	8004064 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800405e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0ed      	b.n	8004240 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_I2C_Mem_Write+0x4e>
 800406e:	2302      	movs	r3, #2
 8004070:	e0e6      	b.n	8004240 <HAL_I2C_Mem_Write+0x21c>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800407a:	f7ff fc19 	bl	80038b0 <HAL_GetTick>
 800407e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	2319      	movs	r3, #25
 8004086:	2201      	movs	r2, #1
 8004088:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 fac3 	bl	8004618 <I2C_WaitOnFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e0d1      	b.n	8004240 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2221      	movs	r2, #33	@ 0x21
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2240      	movs	r2, #64	@ 0x40
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a3a      	ldr	r2, [r7, #32]
 80040b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040c4:	88f8      	ldrh	r0, [r7, #6]
 80040c6:	893a      	ldrh	r2, [r7, #8]
 80040c8:	8979      	ldrh	r1, [r7, #10]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	4603      	mov	r3, r0
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f9d3 	bl	8004480 <I2C_RequestMemoryWrite>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0a9      	b.n	8004240 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2bff      	cmp	r3, #255	@ 0xff
 80040f4:	d90e      	bls.n	8004114 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	22ff      	movs	r2, #255	@ 0xff
 80040fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004100:	b2da      	uxtb	r2, r3
 8004102:	8979      	ldrh	r1, [r7, #10]
 8004104:	2300      	movs	r3, #0
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 fc47 	bl	80049a0 <I2C_TransferConfig>
 8004112:	e00f      	b.n	8004134 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004122:	b2da      	uxtb	r2, r3
 8004124:	8979      	ldrh	r1, [r7, #10]
 8004126:	2300      	movs	r3, #0
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fc36 	bl	80049a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 fac6 	bl	80046ca <I2C_WaitOnTXISFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e07b      	b.n	8004240 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414c:	781a      	ldrb	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d034      	beq.n	80041ec <HAL_I2C_Mem_Write+0x1c8>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004186:	2b00      	cmp	r3, #0
 8004188:	d130      	bne.n	80041ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004190:	2200      	movs	r2, #0
 8004192:	2180      	movs	r1, #128	@ 0x80
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 fa3f 	bl	8004618 <I2C_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e04d      	b.n	8004240 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2bff      	cmp	r3, #255	@ 0xff
 80041ac:	d90e      	bls.n	80041cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	22ff      	movs	r2, #255	@ 0xff
 80041b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	8979      	ldrh	r1, [r7, #10]
 80041bc:	2300      	movs	r3, #0
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fbeb 	bl	80049a0 <I2C_TransferConfig>
 80041ca:	e00f      	b.n	80041ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	8979      	ldrh	r1, [r7, #10]
 80041de:	2300      	movs	r3, #0
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fbda 	bl	80049a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d19e      	bne.n	8004134 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 faac 	bl	8004758 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e01a      	b.n	8004240 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2220      	movs	r2, #32
 8004210:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6859      	ldr	r1, [r3, #4]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4b0a      	ldr	r3, [pc, #40]	@ (8004248 <HAL_I2C_Mem_Write+0x224>)
 800421e:	400b      	ands	r3, r1
 8004220:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e000      	b.n	8004240 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800423e:	2302      	movs	r3, #2
  }
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	fe00e800 	.word	0xfe00e800

0800424c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	4608      	mov	r0, r1
 8004256:	4611      	mov	r1, r2
 8004258:	461a      	mov	r2, r3
 800425a:	4603      	mov	r3, r0
 800425c:	817b      	strh	r3, [r7, #10]
 800425e:	460b      	mov	r3, r1
 8004260:	813b      	strh	r3, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b20      	cmp	r3, #32
 8004270:	f040 80fd 	bne.w	800446e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_I2C_Mem_Read+0x34>
 800427a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800427c:	2b00      	cmp	r3, #0
 800427e:	d105      	bne.n	800428c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004286:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0f1      	b.n	8004470 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_I2C_Mem_Read+0x4e>
 8004296:	2302      	movs	r3, #2
 8004298:	e0ea      	b.n	8004470 <HAL_I2C_Mem_Read+0x224>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042a2:	f7ff fb05 	bl	80038b0 <HAL_GetTick>
 80042a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	2319      	movs	r3, #25
 80042ae:	2201      	movs	r2, #1
 80042b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f9af 	bl	8004618 <I2C_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0d5      	b.n	8004470 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2222      	movs	r2, #34	@ 0x22
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2240      	movs	r2, #64	@ 0x40
 80042d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a3a      	ldr	r2, [r7, #32]
 80042de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042ec:	88f8      	ldrh	r0, [r7, #6]
 80042ee:	893a      	ldrh	r2, [r7, #8]
 80042f0:	8979      	ldrh	r1, [r7, #10]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	9301      	str	r3, [sp, #4]
 80042f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	4603      	mov	r3, r0
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f913 	bl	8004528 <I2C_RequestMemoryRead>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e0ad      	b.n	8004470 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2bff      	cmp	r3, #255	@ 0xff
 800431c:	d90e      	bls.n	800433c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004328:	b2da      	uxtb	r2, r3
 800432a:	8979      	ldrh	r1, [r7, #10]
 800432c:	4b52      	ldr	r3, [pc, #328]	@ (8004478 <HAL_I2C_Mem_Read+0x22c>)
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fb33 	bl	80049a0 <I2C_TransferConfig>
 800433a:	e00f      	b.n	800435c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434a:	b2da      	uxtb	r2, r3
 800434c:	8979      	ldrh	r1, [r7, #10]
 800434e:	4b4a      	ldr	r3, [pc, #296]	@ (8004478 <HAL_I2C_Mem_Read+0x22c>)
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 fb22 	bl	80049a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004362:	2200      	movs	r2, #0
 8004364:	2104      	movs	r1, #4
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f956 	bl	8004618 <I2C_WaitOnFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e07c      	b.n	8004470 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d034      	beq.n	800441c <HAL_I2C_Mem_Read+0x1d0>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d130      	bne.n	800441c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c0:	2200      	movs	r2, #0
 80043c2:	2180      	movs	r1, #128	@ 0x80
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f927 	bl	8004618 <I2C_WaitOnFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e04d      	b.n	8004470 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2bff      	cmp	r3, #255	@ 0xff
 80043dc:	d90e      	bls.n	80043fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	8979      	ldrh	r1, [r7, #10]
 80043ec:	2300      	movs	r3, #0
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 fad3 	bl	80049a0 <I2C_TransferConfig>
 80043fa:	e00f      	b.n	800441c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440a:	b2da      	uxtb	r2, r3
 800440c:	8979      	ldrh	r1, [r7, #10]
 800440e:	2300      	movs	r3, #0
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 fac2 	bl	80049a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d19a      	bne.n	800435c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f994 	bl	8004758 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e01a      	b.n	8004470 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2220      	movs	r2, #32
 8004440:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6859      	ldr	r1, [r3, #4]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <HAL_I2C_Mem_Read+0x230>)
 800444e:	400b      	ands	r3, r1
 8004450:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	e000      	b.n	8004470 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800446e:	2302      	movs	r3, #2
  }
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	80002400 	.word	0x80002400
 800447c:	fe00e800 	.word	0xfe00e800

08004480 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af02      	add	r7, sp, #8
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	4608      	mov	r0, r1
 800448a:	4611      	mov	r1, r2
 800448c:	461a      	mov	r2, r3
 800448e:	4603      	mov	r3, r0
 8004490:	817b      	strh	r3, [r7, #10]
 8004492:	460b      	mov	r3, r1
 8004494:	813b      	strh	r3, [r7, #8]
 8004496:	4613      	mov	r3, r2
 8004498:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	8979      	ldrh	r1, [r7, #10]
 80044a0:	4b20      	ldr	r3, [pc, #128]	@ (8004524 <I2C_RequestMemoryWrite+0xa4>)
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fa79 	bl	80049a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	69b9      	ldr	r1, [r7, #24]
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 f909 	bl	80046ca <I2C_WaitOnTXISFlagUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e02c      	b.n	800451c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d105      	bne.n	80044d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044c8:	893b      	ldrh	r3, [r7, #8]
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80044d2:	e015      	b.n	8004500 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044d4:	893b      	ldrh	r3, [r7, #8]
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	b29b      	uxth	r3, r3
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	69b9      	ldr	r1, [r7, #24]
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 f8ef 	bl	80046ca <I2C_WaitOnTXISFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e012      	b.n	800451c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044f6:	893b      	ldrh	r3, [r7, #8]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	2200      	movs	r2, #0
 8004508:	2180      	movs	r1, #128	@ 0x80
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f884 	bl	8004618 <I2C_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	80002000 	.word	0x80002000

08004528 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	4608      	mov	r0, r1
 8004532:	4611      	mov	r1, r2
 8004534:	461a      	mov	r2, r3
 8004536:	4603      	mov	r3, r0
 8004538:	817b      	strh	r3, [r7, #10]
 800453a:	460b      	mov	r3, r1
 800453c:	813b      	strh	r3, [r7, #8]
 800453e:	4613      	mov	r3, r2
 8004540:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004542:	88fb      	ldrh	r3, [r7, #6]
 8004544:	b2da      	uxtb	r2, r3
 8004546:	8979      	ldrh	r1, [r7, #10]
 8004548:	4b20      	ldr	r3, [pc, #128]	@ (80045cc <I2C_RequestMemoryRead+0xa4>)
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	2300      	movs	r3, #0
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fa26 	bl	80049a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004554:	69fa      	ldr	r2, [r7, #28]
 8004556:	69b9      	ldr	r1, [r7, #24]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f8b6 	bl	80046ca <I2C_WaitOnTXISFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e02c      	b.n	80045c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004568:	88fb      	ldrh	r3, [r7, #6]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d105      	bne.n	800457a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800456e:	893b      	ldrh	r3, [r7, #8]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	629a      	str	r2, [r3, #40]	@ 0x28
 8004578:	e015      	b.n	80045a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800457a:	893b      	ldrh	r3, [r7, #8]
 800457c:	0a1b      	lsrs	r3, r3, #8
 800457e:	b29b      	uxth	r3, r3
 8004580:	b2da      	uxtb	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	69b9      	ldr	r1, [r7, #24]
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f89c 	bl	80046ca <I2C_WaitOnTXISFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e012      	b.n	80045c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800459c:	893b      	ldrh	r3, [r7, #8]
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2200      	movs	r2, #0
 80045ae:	2140      	movs	r1, #64	@ 0x40
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f831 	bl	8004618 <I2C_WaitOnFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	80002000 	.word	0x80002000

080045d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d103      	bne.n	80045ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2200      	movs	r2, #0
 80045ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d007      	beq.n	800460c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	619a      	str	r2, [r3, #24]
  }
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004628:	e03b      	b.n	80046a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	6839      	ldr	r1, [r7, #0]
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f8d6 	bl	80047e0 <I2C_IsErrorOccurred>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e041      	b.n	80046c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d02d      	beq.n	80046a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7ff f933 	bl	80038b0 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d122      	bne.n	80046a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	4013      	ands	r3, r2
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	429a      	cmp	r2, r3
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	429a      	cmp	r2, r3
 8004678:	d113      	bne.n	80046a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467e:	f043 0220 	orr.w	r2, r3, #32
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e00f      	b.n	80046c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699a      	ldr	r2, [r3, #24]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4013      	ands	r3, r2
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	bf0c      	ite	eq
 80046b2:	2301      	moveq	r3, #1
 80046b4:	2300      	movne	r3, #0
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d0b4      	beq.n	800462a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046d6:	e033      	b.n	8004740 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f87f 	bl	80047e0 <I2C_IsErrorOccurred>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e031      	b.n	8004750 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d025      	beq.n	8004740 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f4:	f7ff f8dc 	bl	80038b0 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	429a      	cmp	r2, r3
 8004702:	d302      	bcc.n	800470a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d11a      	bne.n	8004740 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b02      	cmp	r3, #2
 8004716:	d013      	beq.n	8004740 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471c:	f043 0220 	orr.w	r2, r3, #32
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e007      	b.n	8004750 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b02      	cmp	r3, #2
 800474c:	d1c4      	bne.n	80046d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004764:	e02f      	b.n	80047c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f838 	bl	80047e0 <I2C_IsErrorOccurred>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e02d      	b.n	80047d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477a:	f7ff f899 	bl	80038b0 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	d302      	bcc.n	8004790 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d11a      	bne.n	80047c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	f003 0320 	and.w	r3, r3, #32
 800479a:	2b20      	cmp	r3, #32
 800479c:	d013      	beq.n	80047c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a2:	f043 0220 	orr.w	r2, r3, #32
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e007      	b.n	80047d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f003 0320 	and.w	r3, r3, #32
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d1c8      	bne.n	8004766 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08a      	sub	sp, #40	@ 0x28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b00      	cmp	r3, #0
 800480a:	d068      	beq.n	80048de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2210      	movs	r2, #16
 8004812:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004814:	e049      	b.n	80048aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481c:	d045      	beq.n	80048aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800481e:	f7ff f847 	bl	80038b0 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	429a      	cmp	r2, r3
 800482c:	d302      	bcc.n	8004834 <I2C_IsErrorOccurred+0x54>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d13a      	bne.n	80048aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800483e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004846:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004856:	d121      	bne.n	800489c <I2C_IsErrorOccurred+0xbc>
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800485e:	d01d      	beq.n	800489c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004860:	7cfb      	ldrb	r3, [r7, #19]
 8004862:	2b20      	cmp	r3, #32
 8004864:	d01a      	beq.n	800489c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004874:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004876:	f7ff f81b 	bl	80038b0 <HAL_GetTick>
 800487a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800487c:	e00e      	b.n	800489c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800487e:	f7ff f817 	bl	80038b0 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b19      	cmp	r3, #25
 800488a:	d907      	bls.n	800489c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	f043 0320 	orr.w	r3, r3, #32
 8004892:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800489a:	e006      	b.n	80048aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	d1e9      	bne.n	800487e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b20      	cmp	r3, #32
 80048b6:	d003      	beq.n	80048c0 <I2C_IsErrorOccurred+0xe0>
 80048b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0aa      	beq.n	8004816 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80048c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d103      	bne.n	80048d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2220      	movs	r2, #32
 80048ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	f043 0304 	orr.w	r3, r3, #4
 80048d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004900:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	f043 0308 	orr.w	r3, r3, #8
 8004918:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004922:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00b      	beq.n	800494c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	f043 0302 	orr.w	r3, r3, #2
 800493a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004944:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800494c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01c      	beq.n	800498e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f7ff fe3b 	bl	80045d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6859      	ldr	r1, [r3, #4]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b0d      	ldr	r3, [pc, #52]	@ (800499c <I2C_IsErrorOccurred+0x1bc>)
 8004966:	400b      	ands	r3, r1
 8004968:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	431a      	orrs	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800498e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004992:	4618      	mov	r0, r3
 8004994:	3728      	adds	r7, #40	@ 0x28
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	fe00e800 	.word	0xfe00e800

080049a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	607b      	str	r3, [r7, #4]
 80049aa:	460b      	mov	r3, r1
 80049ac:	817b      	strh	r3, [r7, #10]
 80049ae:	4613      	mov	r3, r2
 80049b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049b2:	897b      	ldrh	r3, [r7, #10]
 80049b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049b8:	7a7b      	ldrb	r3, [r7, #9]
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	0d5b      	lsrs	r3, r3, #21
 80049da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80049de:	4b08      	ldr	r3, [pc, #32]	@ (8004a00 <I2C_TransferConfig+0x60>)
 80049e0:	430b      	orrs	r3, r1
 80049e2:	43db      	mvns	r3, r3
 80049e4:	ea02 0103 	and.w	r1, r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80049f2:	bf00      	nop
 80049f4:	371c      	adds	r7, #28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	03ff63ff 	.word	0x03ff63ff

08004a04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	d138      	bne.n	8004a8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e032      	b.n	8004a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2224      	movs	r2, #36	@ 0x24
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0201 	bic.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6819      	ldr	r1, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	e000      	b.n	8004a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a8c:	2302      	movs	r3, #2
  }
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d139      	bne.n	8004b24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e033      	b.n	8004b26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2224      	movs	r2, #36	@ 0x24
 8004aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0201 	bic.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004aec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0201 	orr.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	e000      	b.n	8004b26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b24:	2302      	movs	r3, #2
  }
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
	...

08004b34 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b6c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	4a0a      	ldr	r2, [pc, #40]	@ (8004b6c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	6193      	str	r3, [r2, #24]
 8004b48:	4b08      	ldr	r3, [pc, #32]	@ (8004b6c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8004b54:	4b06      	ldr	r3, [pc, #24]	@ (8004b70 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	4905      	ldr	r1, [pc, #20]	@ (8004b70 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	600b      	str	r3, [r1, #0]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	40010000 	.word	0x40010000

08004b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b84:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	f001 b823 	b.w	8005be0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 817d 	beq.w	8004eaa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004bb0:	4bbc      	ldr	r3, [pc, #752]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f003 030c 	and.w	r3, r3, #12
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d00c      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bbc:	4bb9      	ldr	r3, [pc, #740]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 030c 	and.w	r3, r3, #12
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d15c      	bne.n	8004c82 <HAL_RCC_OscConfig+0x10e>
 8004bc8:	4bb6      	ldr	r3, [pc, #728]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd4:	d155      	bne.n	8004c82 <HAL_RCC_OscConfig+0x10e>
 8004bd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004bda:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bde:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8004be2:	fa93 f3a3 	rbit	r3, r3
 8004be6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004bea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bee:	fab3 f383 	clz	r3, r3
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d102      	bne.n	8004c08 <HAL_RCC_OscConfig+0x94>
 8004c02:	4ba8      	ldr	r3, [pc, #672]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	e015      	b.n	8004c34 <HAL_RCC_OscConfig+0xc0>
 8004c08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c0c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004c14:	fa93 f3a3 	rbit	r3, r3
 8004c18:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004c1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c20:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004c24:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004c28:	fa93 f3a3 	rbit	r3, r3
 8004c2c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004c30:	4b9c      	ldr	r3, [pc, #624]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c38:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8004c3c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004c40:	fa92 f2a2 	rbit	r2, r2
 8004c44:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004c48:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004c4c:	fab2 f282 	clz	r2, r2
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	f042 0220 	orr.w	r2, r2, #32
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	f002 021f 	and.w	r2, r2, #31
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 811f 	beq.w	8004ea8 <HAL_RCC_OscConfig+0x334>
 8004c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f040 8116 	bne.w	8004ea8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f000 bfaf 	b.w	8005be0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c92:	d106      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x12e>
 8004c94:	4b83      	ldr	r3, [pc, #524]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a82      	ldr	r2, [pc, #520]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004c9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	e036      	b.n	8004d10 <HAL_RCC_OscConfig+0x19c>
 8004ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ca6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCC_OscConfig+0x158>
 8004cb2:	4b7c      	ldr	r3, [pc, #496]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a7b      	ldr	r2, [pc, #492]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004cb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	4b79      	ldr	r3, [pc, #484]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a78      	ldr	r2, [pc, #480]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004cc4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	e021      	b.n	8004d10 <HAL_RCC_OscConfig+0x19c>
 8004ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cd0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x184>
 8004cde:	4b71      	ldr	r3, [pc, #452]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a70      	ldr	r2, [pc, #448]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004ce4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4b6e      	ldr	r3, [pc, #440]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a6d      	ldr	r2, [pc, #436]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCC_OscConfig+0x19c>
 8004cf8:	4b6a      	ldr	r3, [pc, #424]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a69      	ldr	r2, [pc, #420]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	4b67      	ldr	r3, [pc, #412]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a66      	ldr	r2, [pc, #408]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004d0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d0e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d10:	4b64      	ldr	r3, [pc, #400]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d14:	f023 020f 	bic.w	r2, r3, #15
 8004d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	495f      	ldr	r1, [pc, #380]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d059      	beq.n	8004dee <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3a:	f7fe fdb9 	bl	80038b0 <HAL_GetTick>
 8004d3e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d42:	e00a      	b.n	8004d5a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d44:	f7fe fdb4 	bl	80038b0 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b64      	cmp	r3, #100	@ 0x64
 8004d52:	d902      	bls.n	8004d5a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	f000 bf43 	b.w	8005be0 <HAL_RCC_OscConfig+0x106c>
 8004d5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d5e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d62:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8004d66:	fa93 f3a3 	rbit	r3, r3
 8004d6a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8004d6e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d72:	fab3 f383 	clz	r3, r3
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d102      	bne.n	8004d8c <HAL_RCC_OscConfig+0x218>
 8004d86:	4b47      	ldr	r3, [pc, #284]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	e015      	b.n	8004db8 <HAL_RCC_OscConfig+0x244>
 8004d8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d90:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d94:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004d98:	fa93 f3a3 	rbit	r3, r3
 8004d9c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004da0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004da4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004da8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004dac:	fa93 f3a3 	rbit	r3, r3
 8004db0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004db4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004dbc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004dc0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004dc4:	fa92 f2a2 	rbit	r2, r2
 8004dc8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004dcc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004dd0:	fab2 f282 	clz	r2, r2
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	f042 0220 	orr.w	r2, r2, #32
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	f002 021f 	and.w	r2, r2, #31
 8004de0:	2101      	movs	r1, #1
 8004de2:	fa01 f202 	lsl.w	r2, r1, r2
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0ab      	beq.n	8004d44 <HAL_RCC_OscConfig+0x1d0>
 8004dec:	e05d      	b.n	8004eaa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dee:	f7fe fd5f 	bl	80038b0 <HAL_GetTick>
 8004df2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004df8:	f7fe fd5a 	bl	80038b0 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b64      	cmp	r3, #100	@ 0x64
 8004e06:	d902      	bls.n	8004e0e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	f000 bee9 	b.w	8005be0 <HAL_RCC_OscConfig+0x106c>
 8004e0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e12:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e16:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004e1a:	fa93 f3a3 	rbit	r3, r3
 8004e1e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8004e22:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e26:	fab3 f383 	clz	r3, r3
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	095b      	lsrs	r3, r3, #5
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f043 0301 	orr.w	r3, r3, #1
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d102      	bne.n	8004e40 <HAL_RCC_OscConfig+0x2cc>
 8004e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	e015      	b.n	8004e6c <HAL_RCC_OscConfig+0x2f8>
 8004e40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e44:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e48:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004e4c:	fa93 f3a3 	rbit	r3, r3
 8004e50:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004e54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e58:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004e5c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004e60:	fa93 f3a3 	rbit	r3, r3
 8004e64:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004e68:	4b0e      	ldr	r3, [pc, #56]	@ (8004ea4 <HAL_RCC_OscConfig+0x330>)
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004e70:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8004e74:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004e78:	fa92 f2a2 	rbit	r2, r2
 8004e7c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8004e80:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004e84:	fab2 f282 	clz	r2, r2
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	f042 0220 	orr.w	r2, r2, #32
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	f002 021f 	and.w	r2, r2, #31
 8004e94:	2101      	movs	r1, #1
 8004e96:	fa01 f202 	lsl.w	r2, r1, r2
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1ab      	bne.n	8004df8 <HAL_RCC_OscConfig+0x284>
 8004ea0:	e003      	b.n	8004eaa <HAL_RCC_OscConfig+0x336>
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 817d 	beq.w	80051ba <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004ec0:	4ba6      	ldr	r3, [pc, #664]	@ (800515c <HAL_RCC_OscConfig+0x5e8>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 030c 	and.w	r3, r3, #12
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00b      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ecc:	4ba3      	ldr	r3, [pc, #652]	@ (800515c <HAL_RCC_OscConfig+0x5e8>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f003 030c 	and.w	r3, r3, #12
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d172      	bne.n	8004fbe <HAL_RCC_OscConfig+0x44a>
 8004ed8:	4ba0      	ldr	r3, [pc, #640]	@ (800515c <HAL_RCC_OscConfig+0x5e8>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d16c      	bne.n	8004fbe <HAL_RCC_OscConfig+0x44a>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eea:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004eee:	fa93 f3a3 	rbit	r3, r3
 8004ef2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8004ef6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004efa:	fab3 f383 	clz	r3, r3
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	f043 0301 	orr.w	r3, r3, #1
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d102      	bne.n	8004f14 <HAL_RCC_OscConfig+0x3a0>
 8004f0e:	4b93      	ldr	r3, [pc, #588]	@ (800515c <HAL_RCC_OscConfig+0x5e8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	e013      	b.n	8004f3c <HAL_RCC_OscConfig+0x3c8>
 8004f14:	2302      	movs	r3, #2
 8004f16:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004f1e:	fa93 f3a3 	rbit	r3, r3
 8004f22:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004f26:	2302      	movs	r3, #2
 8004f28:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004f2c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004f30:	fa93 f3a3 	rbit	r3, r3
 8004f34:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004f38:	4b88      	ldr	r3, [pc, #544]	@ (800515c <HAL_RCC_OscConfig+0x5e8>)
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004f42:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004f46:	fa92 f2a2 	rbit	r2, r2
 8004f4a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8004f4e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004f52:	fab2 f282 	clz	r2, r2
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	f042 0220 	orr.w	r2, r2, #32
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	f002 021f 	and.w	r2, r2, #31
 8004f62:	2101      	movs	r1, #1
 8004f64:	fa01 f202 	lsl.w	r2, r1, r2
 8004f68:	4013      	ands	r3, r2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <HAL_RCC_OscConfig+0x410>
 8004f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d002      	beq.n	8004f84 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f000 be2e 	b.w	8005be0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f84:	4b75      	ldr	r3, [pc, #468]	@ (800515c <HAL_RCC_OscConfig+0x5e8>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	21f8      	movs	r1, #248	@ 0xf8
 8004f9a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004fa2:	fa91 f1a1 	rbit	r1, r1
 8004fa6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004faa:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004fae:	fab1 f181 	clz	r1, r1
 8004fb2:	b2c9      	uxtb	r1, r1
 8004fb4:	408b      	lsls	r3, r1
 8004fb6:	4969      	ldr	r1, [pc, #420]	@ (800515c <HAL_RCC_OscConfig+0x5e8>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fbc:	e0fd      	b.n	80051ba <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 8088 	beq.w	80050e0 <HAL_RCC_OscConfig+0x56c>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004fda:	fa93 f3a3 	rbit	r3, r3
 8004fde:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8004fe2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fe6:	fab3 f383 	clz	r3, r3
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004ff0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffc:	f7fe fc58 	bl	80038b0 <HAL_GetTick>
 8005000:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005004:	e00a      	b.n	800501c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005006:	f7fe fc53 	bl	80038b0 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d902      	bls.n	800501c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	f000 bde2 	b.w	8005be0 <HAL_RCC_OscConfig+0x106c>
 800501c:	2302      	movs	r3, #2
 800501e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005022:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8005026:	fa93 f3a3 	rbit	r3, r3
 800502a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800502e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005032:	fab3 f383 	clz	r3, r3
 8005036:	b2db      	uxtb	r3, r3
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b01      	cmp	r3, #1
 8005044:	d102      	bne.n	800504c <HAL_RCC_OscConfig+0x4d8>
 8005046:	4b45      	ldr	r3, [pc, #276]	@ (800515c <HAL_RCC_OscConfig+0x5e8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	e013      	b.n	8005074 <HAL_RCC_OscConfig+0x500>
 800504c:	2302      	movs	r3, #2
 800504e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005052:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005056:	fa93 f3a3 	rbit	r3, r3
 800505a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800505e:	2302      	movs	r3, #2
 8005060:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005064:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8005068:	fa93 f3a3 	rbit	r3, r3
 800506c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8005070:	4b3a      	ldr	r3, [pc, #232]	@ (800515c <HAL_RCC_OscConfig+0x5e8>)
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	2202      	movs	r2, #2
 8005076:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800507a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800507e:	fa92 f2a2 	rbit	r2, r2
 8005082:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8005086:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800508a:	fab2 f282 	clz	r2, r2
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	f042 0220 	orr.w	r2, r2, #32
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	f002 021f 	and.w	r2, r2, #31
 800509a:	2101      	movs	r1, #1
 800509c:	fa01 f202 	lsl.w	r2, r1, r2
 80050a0:	4013      	ands	r3, r2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0af      	beq.n	8005006 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a6:	4b2d      	ldr	r3, [pc, #180]	@ (800515c <HAL_RCC_OscConfig+0x5e8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	21f8      	movs	r1, #248	@ 0xf8
 80050bc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80050c4:	fa91 f1a1 	rbit	r1, r1
 80050c8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80050cc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80050d0:	fab1 f181 	clz	r1, r1
 80050d4:	b2c9      	uxtb	r1, r1
 80050d6:	408b      	lsls	r3, r1
 80050d8:	4920      	ldr	r1, [pc, #128]	@ (800515c <HAL_RCC_OscConfig+0x5e8>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]
 80050de:	e06c      	b.n	80051ba <HAL_RCC_OscConfig+0x646>
 80050e0:	2301      	movs	r3, #1
 80050e2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80050ea:	fa93 f3a3 	rbit	r3, r3
 80050ee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80050f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050f6:	fab3 f383 	clz	r3, r3
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005100:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	461a      	mov	r2, r3
 8005108:	2300      	movs	r3, #0
 800510a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510c:	f7fe fbd0 	bl	80038b0 <HAL_GetTick>
 8005110:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005114:	e00a      	b.n	800512c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005116:	f7fe fbcb 	bl	80038b0 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d902      	bls.n	800512c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	f000 bd5a 	b.w	8005be0 <HAL_RCC_OscConfig+0x106c>
 800512c:	2302      	movs	r3, #2
 800512e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005132:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005136:	fa93 f3a3 	rbit	r3, r3
 800513a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800513e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005142:	fab3 f383 	clz	r3, r3
 8005146:	b2db      	uxtb	r3, r3
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b01      	cmp	r3, #1
 8005154:	d104      	bne.n	8005160 <HAL_RCC_OscConfig+0x5ec>
 8005156:	4b01      	ldr	r3, [pc, #4]	@ (800515c <HAL_RCC_OscConfig+0x5e8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	e015      	b.n	8005188 <HAL_RCC_OscConfig+0x614>
 800515c:	40021000 	.word	0x40021000
 8005160:	2302      	movs	r3, #2
 8005162:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005166:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800516a:	fa93 f3a3 	rbit	r3, r3
 800516e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005172:	2302      	movs	r3, #2
 8005174:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005178:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800517c:	fa93 f3a3 	rbit	r3, r3
 8005180:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005184:	4bc8      	ldr	r3, [pc, #800]	@ (80054a8 <HAL_RCC_OscConfig+0x934>)
 8005186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005188:	2202      	movs	r2, #2
 800518a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800518e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005192:	fa92 f2a2 	rbit	r2, r2
 8005196:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800519a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800519e:	fab2 f282 	clz	r2, r2
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	f042 0220 	orr.w	r2, r2, #32
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	f002 021f 	and.w	r2, r2, #31
 80051ae:	2101      	movs	r1, #1
 80051b0:	fa01 f202 	lsl.w	r2, r1, r2
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1ad      	bne.n	8005116 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8110 	beq.w	80053f0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d079      	beq.n	80052d4 <HAL_RCC_OscConfig+0x760>
 80051e0:	2301      	movs	r3, #1
 80051e2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80051ea:	fa93 f3a3 	rbit	r3, r3
 80051ee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80051f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051f6:	fab3 f383 	clz	r3, r3
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	461a      	mov	r2, r3
 80051fe:	4bab      	ldr	r3, [pc, #684]	@ (80054ac <HAL_RCC_OscConfig+0x938>)
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	461a      	mov	r2, r3
 8005206:	2301      	movs	r3, #1
 8005208:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800520a:	f7fe fb51 	bl	80038b0 <HAL_GetTick>
 800520e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005212:	e00a      	b.n	800522a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005214:	f7fe fb4c 	bl	80038b0 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d902      	bls.n	800522a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	f000 bcdb 	b.w	8005be0 <HAL_RCC_OscConfig+0x106c>
 800522a:	2302      	movs	r3, #2
 800522c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005230:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005234:	fa93 f3a3 	rbit	r3, r3
 8005238:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800523c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005240:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005244:	2202      	movs	r2, #2
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800524c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	fa93 f2a3 	rbit	r2, r3
 8005256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800525a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005268:	2202      	movs	r2, #2
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	fa93 f2a3 	rbit	r2, r3
 800527a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800527e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005282:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005284:	4b88      	ldr	r3, [pc, #544]	@ (80054a8 <HAL_RCC_OscConfig+0x934>)
 8005286:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800528c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005290:	2102      	movs	r1, #2
 8005292:	6019      	str	r1, [r3, #0]
 8005294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005298:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	fa93 f1a3 	rbit	r1, r3
 80052a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80052aa:	6019      	str	r1, [r3, #0]
  return result;
 80052ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052b0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	fab3 f383 	clz	r3, r3
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f003 031f 	and.w	r3, r3, #31
 80052c6:	2101      	movs	r1, #1
 80052c8:	fa01 f303 	lsl.w	r3, r1, r3
 80052cc:	4013      	ands	r3, r2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0a0      	beq.n	8005214 <HAL_RCC_OscConfig+0x6a0>
 80052d2:	e08d      	b.n	80053f0 <HAL_RCC_OscConfig+0x87c>
 80052d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80052dc:	2201      	movs	r2, #1
 80052de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	fa93 f2a3 	rbit	r2, r3
 80052ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80052f6:	601a      	str	r2, [r3, #0]
  return result;
 80052f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052fc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005300:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005302:	fab3 f383 	clz	r3, r3
 8005306:	b2db      	uxtb	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	4b68      	ldr	r3, [pc, #416]	@ (80054ac <HAL_RCC_OscConfig+0x938>)
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	461a      	mov	r2, r3
 8005312:	2300      	movs	r3, #0
 8005314:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005316:	f7fe facb 	bl	80038b0 <HAL_GetTick>
 800531a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800531e:	e00a      	b.n	8005336 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005320:	f7fe fac6 	bl	80038b0 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d902      	bls.n	8005336 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	f000 bc55 	b.w	8005be0 <HAL_RCC_OscConfig+0x106c>
 8005336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800533a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800533e:	2202      	movs	r2, #2
 8005340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005346:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	fa93 f2a3 	rbit	r2, r3
 8005350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005354:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800535e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005362:	2202      	movs	r2, #2
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800536a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	fa93 f2a3 	rbit	r2, r3
 8005374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005378:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005382:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005386:	2202      	movs	r2, #2
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800538e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	fa93 f2a3 	rbit	r2, r3
 8005398:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800539c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80053a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053a2:	4b41      	ldr	r3, [pc, #260]	@ (80054a8 <HAL_RCC_OscConfig+0x934>)
 80053a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053aa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80053ae:	2102      	movs	r1, #2
 80053b0:	6019      	str	r1, [r3, #0]
 80053b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	fa93 f1a3 	rbit	r1, r3
 80053c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80053c8:	6019      	str	r1, [r3, #0]
  return result;
 80053ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053ce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	fab3 f383 	clz	r3, r3
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f003 031f 	and.w	r3, r3, #31
 80053e4:	2101      	movs	r1, #1
 80053e6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d197      	bne.n	8005320 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 81a1 	beq.w	8005748 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005406:	2300      	movs	r3, #0
 8005408:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800540c:	4b26      	ldr	r3, [pc, #152]	@ (80054a8 <HAL_RCC_OscConfig+0x934>)
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d116      	bne.n	8005446 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005418:	4b23      	ldr	r3, [pc, #140]	@ (80054a8 <HAL_RCC_OscConfig+0x934>)
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	4a22      	ldr	r2, [pc, #136]	@ (80054a8 <HAL_RCC_OscConfig+0x934>)
 800541e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005422:	61d3      	str	r3, [r2, #28]
 8005424:	4b20      	ldr	r3, [pc, #128]	@ (80054a8 <HAL_RCC_OscConfig+0x934>)
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800542c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005430:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800543a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800543e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005440:	2301      	movs	r3, #1
 8005442:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005446:	4b1a      	ldr	r3, [pc, #104]	@ (80054b0 <HAL_RCC_OscConfig+0x93c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544e:	2b00      	cmp	r3, #0
 8005450:	d11a      	bne.n	8005488 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005452:	4b17      	ldr	r3, [pc, #92]	@ (80054b0 <HAL_RCC_OscConfig+0x93c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a16      	ldr	r2, [pc, #88]	@ (80054b0 <HAL_RCC_OscConfig+0x93c>)
 8005458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800545c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800545e:	f7fe fa27 	bl	80038b0 <HAL_GetTick>
 8005462:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005466:	e009      	b.n	800547c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005468:	f7fe fa22 	bl	80038b0 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b64      	cmp	r3, #100	@ 0x64
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e3b1      	b.n	8005be0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547c:	4b0c      	ldr	r3, [pc, #48]	@ (80054b0 <HAL_RCC_OscConfig+0x93c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0ef      	beq.n	8005468 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800548c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d10d      	bne.n	80054b4 <HAL_RCC_OscConfig+0x940>
 8005498:	4b03      	ldr	r3, [pc, #12]	@ (80054a8 <HAL_RCC_OscConfig+0x934>)
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	4a02      	ldr	r2, [pc, #8]	@ (80054a8 <HAL_RCC_OscConfig+0x934>)
 800549e:	f043 0301 	orr.w	r3, r3, #1
 80054a2:	6213      	str	r3, [r2, #32]
 80054a4:	e03c      	b.n	8005520 <HAL_RCC_OscConfig+0x9ac>
 80054a6:	bf00      	nop
 80054a8:	40021000 	.word	0x40021000
 80054ac:	10908120 	.word	0x10908120
 80054b0:	40007000 	.word	0x40007000
 80054b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10c      	bne.n	80054de <HAL_RCC_OscConfig+0x96a>
 80054c4:	4bc1      	ldr	r3, [pc, #772]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	4ac0      	ldr	r2, [pc, #768]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 80054ca:	f023 0301 	bic.w	r3, r3, #1
 80054ce:	6213      	str	r3, [r2, #32]
 80054d0:	4bbe      	ldr	r3, [pc, #760]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	4abd      	ldr	r2, [pc, #756]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 80054d6:	f023 0304 	bic.w	r3, r3, #4
 80054da:	6213      	str	r3, [r2, #32]
 80054dc:	e020      	b.n	8005520 <HAL_RCC_OscConfig+0x9ac>
 80054de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	2b05      	cmp	r3, #5
 80054ec:	d10c      	bne.n	8005508 <HAL_RCC_OscConfig+0x994>
 80054ee:	4bb7      	ldr	r3, [pc, #732]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	4ab6      	ldr	r2, [pc, #728]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 80054f4:	f043 0304 	orr.w	r3, r3, #4
 80054f8:	6213      	str	r3, [r2, #32]
 80054fa:	4bb4      	ldr	r3, [pc, #720]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	4ab3      	ldr	r2, [pc, #716]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 8005500:	f043 0301 	orr.w	r3, r3, #1
 8005504:	6213      	str	r3, [r2, #32]
 8005506:	e00b      	b.n	8005520 <HAL_RCC_OscConfig+0x9ac>
 8005508:	4bb0      	ldr	r3, [pc, #704]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	4aaf      	ldr	r2, [pc, #700]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	6213      	str	r3, [r2, #32]
 8005514:	4bad      	ldr	r3, [pc, #692]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	4aac      	ldr	r2, [pc, #688]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 800551a:	f023 0304 	bic.w	r3, r3, #4
 800551e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005524:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8081 	beq.w	8005634 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005532:	f7fe f9bd 	bl	80038b0 <HAL_GetTick>
 8005536:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800553a:	e00b      	b.n	8005554 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800553c:	f7fe f9b8 	bl	80038b0 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800554c:	4293      	cmp	r3, r2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e345      	b.n	8005be0 <HAL_RCC_OscConfig+0x106c>
 8005554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005558:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800555c:	2202      	movs	r2, #2
 800555e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005564:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	fa93 f2a3 	rbit	r2, r3
 800556e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005572:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800557c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005580:	2202      	movs	r2, #2
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005588:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	fa93 f2a3 	rbit	r2, r3
 8005592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005596:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800559a:	601a      	str	r2, [r3, #0]
  return result;
 800559c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055a0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80055a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a6:	fab3 f383 	clz	r3, r3
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	095b      	lsrs	r3, r3, #5
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	f043 0302 	orr.w	r3, r3, #2
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d102      	bne.n	80055c0 <HAL_RCC_OscConfig+0xa4c>
 80055ba:	4b84      	ldr	r3, [pc, #528]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	e013      	b.n	80055e8 <HAL_RCC_OscConfig+0xa74>
 80055c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055c4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80055c8:	2202      	movs	r2, #2
 80055ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055d0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	fa93 f2a3 	rbit	r2, r3
 80055da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055de:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	4b79      	ldr	r3, [pc, #484]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 80055e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80055ec:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80055f0:	2102      	movs	r1, #2
 80055f2:	6011      	str	r1, [r2, #0]
 80055f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80055f8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80055fc:	6812      	ldr	r2, [r2, #0]
 80055fe:	fa92 f1a2 	rbit	r1, r2
 8005602:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005606:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800560a:	6011      	str	r1, [r2, #0]
  return result;
 800560c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005610:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	fab2 f282 	clz	r2, r2
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	f002 021f 	and.w	r2, r2, #31
 8005626:	2101      	movs	r1, #1
 8005628:	fa01 f202 	lsl.w	r2, r1, r2
 800562c:	4013      	ands	r3, r2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d084      	beq.n	800553c <HAL_RCC_OscConfig+0x9c8>
 8005632:	e07f      	b.n	8005734 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005634:	f7fe f93c 	bl	80038b0 <HAL_GetTick>
 8005638:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800563c:	e00b      	b.n	8005656 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800563e:	f7fe f937 	bl	80038b0 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800564e:	4293      	cmp	r3, r2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e2c4      	b.n	8005be0 <HAL_RCC_OscConfig+0x106c>
 8005656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800565a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800565e:	2202      	movs	r2, #2
 8005660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005666:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	fa93 f2a3 	rbit	r2, r3
 8005670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005674:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800567e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005682:	2202      	movs	r2, #2
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800568a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	fa93 f2a3 	rbit	r2, r3
 8005694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005698:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800569c:	601a      	str	r2, [r3, #0]
  return result;
 800569e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056a2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80056a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056a8:	fab3 f383 	clz	r3, r3
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	f043 0302 	orr.w	r3, r3, #2
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d102      	bne.n	80056c2 <HAL_RCC_OscConfig+0xb4e>
 80056bc:	4b43      	ldr	r3, [pc, #268]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	e013      	b.n	80056ea <HAL_RCC_OscConfig+0xb76>
 80056c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056c6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80056ca:	2202      	movs	r2, #2
 80056cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056d2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	fa93 f2a3 	rbit	r2, r3
 80056dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056e0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	4b39      	ldr	r3, [pc, #228]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 80056e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80056ee:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80056f2:	2102      	movs	r1, #2
 80056f4:	6011      	str	r1, [r2, #0]
 80056f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80056fa:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	fa92 f1a2 	rbit	r1, r2
 8005704:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005708:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800570c:	6011      	str	r1, [r2, #0]
  return result;
 800570e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005712:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	fab2 f282 	clz	r2, r2
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	f002 021f 	and.w	r2, r2, #31
 8005728:	2101      	movs	r1, #1
 800572a:	fa01 f202 	lsl.w	r2, r1, r2
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d184      	bne.n	800563e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005734:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8005738:	2b01      	cmp	r3, #1
 800573a:	d105      	bne.n	8005748 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800573c:	4b23      	ldr	r3, [pc, #140]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	4a22      	ldr	r2, [pc, #136]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 8005742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005746:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800574c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8242 	beq.w	8005bde <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800575a:	4b1c      	ldr	r3, [pc, #112]	@ (80057cc <HAL_RCC_OscConfig+0xc58>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f003 030c 	and.w	r3, r3, #12
 8005762:	2b08      	cmp	r3, #8
 8005764:	f000 8213 	beq.w	8005b8e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800576c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	2b02      	cmp	r3, #2
 8005776:	f040 8162 	bne.w	8005a3e <HAL_RCC_OscConfig+0xeca>
 800577a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800577e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005782:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800578c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	fa93 f2a3 	rbit	r2, r3
 8005796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800579a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800579e:	601a      	str	r2, [r3, #0]
  return result;
 80057a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057a4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80057a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057aa:	fab3 f383 	clz	r3, r3
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80057b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	461a      	mov	r2, r3
 80057bc:	2300      	movs	r3, #0
 80057be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c0:	f7fe f876 	bl	80038b0 <HAL_GetTick>
 80057c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057c8:	e00c      	b.n	80057e4 <HAL_RCC_OscConfig+0xc70>
 80057ca:	bf00      	nop
 80057cc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d0:	f7fe f86e 	bl	80038b0 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e1fd      	b.n	8005be0 <HAL_RCC_OscConfig+0x106c>
 80057e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057e8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80057ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80057f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057f6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	fa93 f2a3 	rbit	r2, r3
 8005800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005804:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005808:	601a      	str	r2, [r3, #0]
  return result;
 800580a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800580e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005812:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005814:	fab3 f383 	clz	r3, r3
 8005818:	b2db      	uxtb	r3, r3
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	b2db      	uxtb	r3, r3
 800581e:	f043 0301 	orr.w	r3, r3, #1
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b01      	cmp	r3, #1
 8005826:	d102      	bne.n	800582e <HAL_RCC_OscConfig+0xcba>
 8005828:	4bb0      	ldr	r3, [pc, #704]	@ (8005aec <HAL_RCC_OscConfig+0xf78>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	e027      	b.n	800587e <HAL_RCC_OscConfig+0xd0a>
 800582e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005832:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005836:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800583a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005840:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	fa93 f2a3 	rbit	r2, r3
 800584a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800584e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005858:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800585c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005866:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	fa93 f2a3 	rbit	r2, r3
 8005870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005874:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	4b9c      	ldr	r3, [pc, #624]	@ (8005aec <HAL_RCC_OscConfig+0xf78>)
 800587c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005882:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005886:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800588a:	6011      	str	r1, [r2, #0]
 800588c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005890:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005894:	6812      	ldr	r2, [r2, #0]
 8005896:	fa92 f1a2 	rbit	r1, r2
 800589a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800589e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80058a2:	6011      	str	r1, [r2, #0]
  return result;
 80058a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80058a8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	fab2 f282 	clz	r2, r2
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	f042 0220 	orr.w	r2, r2, #32
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	f002 021f 	and.w	r2, r2, #31
 80058be:	2101      	movs	r1, #1
 80058c0:	fa01 f202 	lsl.w	r2, r1, r2
 80058c4:	4013      	ands	r3, r2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d182      	bne.n	80057d0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058ca:	4b88      	ldr	r3, [pc, #544]	@ (8005aec <HAL_RCC_OscConfig+0xf78>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80058d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80058de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	430b      	orrs	r3, r1
 80058ec:	497f      	ldr	r1, [pc, #508]	@ (8005aec <HAL_RCC_OscConfig+0xf78>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	604b      	str	r3, [r1, #4]
 80058f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058f6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80058fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80058fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005904:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	fa93 f2a3 	rbit	r2, r3
 800590e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005912:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005916:	601a      	str	r2, [r3, #0]
  return result;
 8005918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800591c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005920:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005922:	fab3 f383 	clz	r3, r3
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800592c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	461a      	mov	r2, r3
 8005934:	2301      	movs	r3, #1
 8005936:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005938:	f7fd ffba 	bl	80038b0 <HAL_GetTick>
 800593c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005940:	e009      	b.n	8005956 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005942:	f7fd ffb5 	bl	80038b0 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e144      	b.n	8005be0 <HAL_RCC_OscConfig+0x106c>
 8005956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800595a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800595e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005962:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005968:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	fa93 f2a3 	rbit	r2, r3
 8005972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005976:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800597a:	601a      	str	r2, [r3, #0]
  return result;
 800597c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005980:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005984:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005986:	fab3 f383 	clz	r3, r3
 800598a:	b2db      	uxtb	r3, r3
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	b2db      	uxtb	r3, r3
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b01      	cmp	r3, #1
 8005998:	d102      	bne.n	80059a0 <HAL_RCC_OscConfig+0xe2c>
 800599a:	4b54      	ldr	r3, [pc, #336]	@ (8005aec <HAL_RCC_OscConfig+0xf78>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	e027      	b.n	80059f0 <HAL_RCC_OscConfig+0xe7c>
 80059a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059a4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80059a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80059ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059b2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	fa93 f2a3 	rbit	r2, r3
 80059bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059ca:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80059ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059d8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	fa93 f2a3 	rbit	r2, r3
 80059e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059e6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	4b3f      	ldr	r3, [pc, #252]	@ (8005aec <HAL_RCC_OscConfig+0xf78>)
 80059ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80059f4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80059f8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80059fc:	6011      	str	r1, [r2, #0]
 80059fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a02:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	fa92 f1a2 	rbit	r1, r2
 8005a0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a10:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005a14:	6011      	str	r1, [r2, #0]
  return result;
 8005a16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005a1a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	fab2 f282 	clz	r2, r2
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	f042 0220 	orr.w	r2, r2, #32
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	f002 021f 	and.w	r2, r2, #31
 8005a30:	2101      	movs	r1, #1
 8005a32:	fa01 f202 	lsl.w	r2, r1, r2
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d082      	beq.n	8005942 <HAL_RCC_OscConfig+0xdce>
 8005a3c:	e0cf      	b.n	8005bde <HAL_RCC_OscConfig+0x106a>
 8005a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a42:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005a46:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005a4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a50:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	fa93 f2a3 	rbit	r2, r3
 8005a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a5e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005a62:	601a      	str	r2, [r3, #0]
  return result;
 8005a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a68:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005a6c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6e:	fab3 f383 	clz	r3, r3
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005a78:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	461a      	mov	r2, r3
 8005a80:	2300      	movs	r3, #0
 8005a82:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a84:	f7fd ff14 	bl	80038b0 <HAL_GetTick>
 8005a88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a8c:	e009      	b.n	8005aa2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a8e:	f7fd ff0f 	bl	80038b0 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e09e      	b.n	8005be0 <HAL_RCC_OscConfig+0x106c>
 8005aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005aa6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005aaa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ab4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	fa93 f2a3 	rbit	r2, r3
 8005abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ac2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005ac6:	601a      	str	r2, [r3, #0]
  return result;
 8005ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005acc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005ad0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ad2:	fab3 f383 	clz	r3, r3
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f043 0301 	orr.w	r3, r3, #1
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d104      	bne.n	8005af0 <HAL_RCC_OscConfig+0xf7c>
 8005ae6:	4b01      	ldr	r3, [pc, #4]	@ (8005aec <HAL_RCC_OscConfig+0xf78>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	e029      	b.n	8005b40 <HAL_RCC_OscConfig+0xfcc>
 8005aec:	40021000 	.word	0x40021000
 8005af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005af4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005af8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005afc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b02:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	fa93 f2a3 	rbit	r2, r3
 8005b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b10:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b1a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005b1e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b28:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	fa93 f2a3 	rbit	r2, r3
 8005b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b36:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005bec <HAL_RCC_OscConfig+0x1078>)
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b40:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005b44:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005b48:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005b4c:	6011      	str	r1, [r2, #0]
 8005b4e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005b52:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	fa92 f1a2 	rbit	r1, r2
 8005b5c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005b60:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005b64:	6011      	str	r1, [r2, #0]
  return result;
 8005b66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005b6a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005b6e:	6812      	ldr	r2, [r2, #0]
 8005b70:	fab2 f282 	clz	r2, r2
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	f042 0220 	orr.w	r2, r2, #32
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	f002 021f 	and.w	r2, r2, #31
 8005b80:	2101      	movs	r1, #1
 8005b82:	fa01 f202 	lsl.w	r2, r1, r2
 8005b86:	4013      	ands	r3, r2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d180      	bne.n	8005a8e <HAL_RCC_OscConfig+0xf1a>
 8005b8c:	e027      	b.n	8005bde <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e01e      	b.n	8005be0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ba2:	4b12      	ldr	r3, [pc, #72]	@ (8005bec <HAL_RCC_OscConfig+0x1078>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005baa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005bae:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d10b      	bne.n	8005bda <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005bc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005bc6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d001      	beq.n	8005bde <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	40021000 	.word	0x40021000

08005bf0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b09e      	sub	sp, #120	@ 0x78
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e162      	b.n	8005ece <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c08:	4b90      	ldr	r3, [pc, #576]	@ (8005e4c <HAL_RCC_ClockConfig+0x25c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d910      	bls.n	8005c38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c16:	4b8d      	ldr	r3, [pc, #564]	@ (8005e4c <HAL_RCC_ClockConfig+0x25c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f023 0207 	bic.w	r2, r3, #7
 8005c1e:	498b      	ldr	r1, [pc, #556]	@ (8005e4c <HAL_RCC_ClockConfig+0x25c>)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c26:	4b89      	ldr	r3, [pc, #548]	@ (8005e4c <HAL_RCC_ClockConfig+0x25c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d001      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e14a      	b.n	8005ece <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d008      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c44:	4b82      	ldr	r3, [pc, #520]	@ (8005e50 <HAL_RCC_ClockConfig+0x260>)
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	497f      	ldr	r1, [pc, #508]	@ (8005e50 <HAL_RCC_ClockConfig+0x260>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 80dc 	beq.w	8005e1c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d13c      	bne.n	8005ce6 <HAL_RCC_ClockConfig+0xf6>
 8005c6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c70:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c74:	fa93 f3a3 	rbit	r3, r3
 8005c78:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c7c:	fab3 f383 	clz	r3, r3
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	f043 0301 	orr.w	r3, r3, #1
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d102      	bne.n	8005c96 <HAL_RCC_ClockConfig+0xa6>
 8005c90:	4b6f      	ldr	r3, [pc, #444]	@ (8005e50 <HAL_RCC_ClockConfig+0x260>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	e00f      	b.n	8005cb6 <HAL_RCC_ClockConfig+0xc6>
 8005c96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c9e:	fa93 f3a3 	rbit	r3, r3
 8005ca2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ca4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005ca8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005caa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cac:	fa93 f3a3 	rbit	r3, r3
 8005cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cb2:	4b67      	ldr	r3, [pc, #412]	@ (8005e50 <HAL_RCC_ClockConfig+0x260>)
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005cba:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005cbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cbe:	fa92 f2a2 	rbit	r2, r2
 8005cc2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005cc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005cc6:	fab2 f282 	clz	r2, r2
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	f042 0220 	orr.w	r2, r2, #32
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	f002 021f 	and.w	r2, r2, #31
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8005cdc:	4013      	ands	r3, r2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d17b      	bne.n	8005dda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e0f3      	b.n	8005ece <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d13c      	bne.n	8005d68 <HAL_RCC_ClockConfig+0x178>
 8005cee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005cf2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cf6:	fa93 f3a3 	rbit	r3, r3
 8005cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cfe:	fab3 f383 	clz	r3, r3
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	095b      	lsrs	r3, r3, #5
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d102      	bne.n	8005d18 <HAL_RCC_ClockConfig+0x128>
 8005d12:	4b4f      	ldr	r3, [pc, #316]	@ (8005e50 <HAL_RCC_ClockConfig+0x260>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	e00f      	b.n	8005d38 <HAL_RCC_ClockConfig+0x148>
 8005d18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d20:	fa93 f3a3 	rbit	r3, r3
 8005d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d2e:	fa93 f3a3 	rbit	r3, r3
 8005d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d34:	4b46      	ldr	r3, [pc, #280]	@ (8005e50 <HAL_RCC_ClockConfig+0x260>)
 8005d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005d3c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005d3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d40:	fa92 f2a2 	rbit	r2, r2
 8005d44:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005d46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d48:	fab2 f282 	clz	r2, r2
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	f042 0220 	orr.w	r2, r2, #32
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	f002 021f 	and.w	r2, r2, #31
 8005d58:	2101      	movs	r1, #1
 8005d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8005d5e:	4013      	ands	r3, r2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d13a      	bne.n	8005dda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e0b2      	b.n	8005ece <HAL_RCC_ClockConfig+0x2de>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6e:	fa93 f3a3 	rbit	r3, r3
 8005d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d76:	fab3 f383 	clz	r3, r3
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	f043 0301 	orr.w	r3, r3, #1
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d102      	bne.n	8005d90 <HAL_RCC_ClockConfig+0x1a0>
 8005d8a:	4b31      	ldr	r3, [pc, #196]	@ (8005e50 <HAL_RCC_ClockConfig+0x260>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	e00d      	b.n	8005dac <HAL_RCC_ClockConfig+0x1bc>
 8005d90:	2302      	movs	r3, #2
 8005d92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d96:	fa93 f3a3 	rbit	r3, r3
 8005d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	623b      	str	r3, [r7, #32]
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	fa93 f3a3 	rbit	r3, r3
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	4b29      	ldr	r3, [pc, #164]	@ (8005e50 <HAL_RCC_ClockConfig+0x260>)
 8005daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dac:	2202      	movs	r2, #2
 8005dae:	61ba      	str	r2, [r7, #24]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	fa92 f2a2 	rbit	r2, r2
 8005db6:	617a      	str	r2, [r7, #20]
  return result;
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	fab2 f282 	clz	r2, r2
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	f042 0220 	orr.w	r2, r2, #32
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	f002 021f 	and.w	r2, r2, #31
 8005dca:	2101      	movs	r1, #1
 8005dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e079      	b.n	8005ece <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dda:	4b1d      	ldr	r3, [pc, #116]	@ (8005e50 <HAL_RCC_ClockConfig+0x260>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f023 0203 	bic.w	r2, r3, #3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	491a      	ldr	r1, [pc, #104]	@ (8005e50 <HAL_RCC_ClockConfig+0x260>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dec:	f7fd fd60 	bl	80038b0 <HAL_GetTick>
 8005df0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005df2:	e00a      	b.n	8005e0a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005df4:	f7fd fd5c 	bl	80038b0 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e061      	b.n	8005ece <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e0a:	4b11      	ldr	r3, [pc, #68]	@ (8005e50 <HAL_RCC_ClockConfig+0x260>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f003 020c 	and.w	r2, r3, #12
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d1eb      	bne.n	8005df4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e4c <HAL_RCC_ClockConfig+0x25c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d214      	bcs.n	8005e54 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e2a:	4b08      	ldr	r3, [pc, #32]	@ (8005e4c <HAL_RCC_ClockConfig+0x25c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f023 0207 	bic.w	r2, r3, #7
 8005e32:	4906      	ldr	r1, [pc, #24]	@ (8005e4c <HAL_RCC_ClockConfig+0x25c>)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3a:	4b04      	ldr	r3, [pc, #16]	@ (8005e4c <HAL_RCC_ClockConfig+0x25c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d005      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e040      	b.n	8005ece <HAL_RCC_ClockConfig+0x2de>
 8005e4c:	40022000 	.word	0x40022000
 8005e50:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e60:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	491a      	ldr	r1, [pc, #104]	@ (8005ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e7e:	4b16      	ldr	r3, [pc, #88]	@ (8005ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	4912      	ldr	r1, [pc, #72]	@ (8005ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005e92:	f000 f829 	bl	8005ee8 <HAL_RCC_GetSysClockFreq>
 8005e96:	4601      	mov	r1, r0
 8005e98:	4b0f      	ldr	r3, [pc, #60]	@ (8005ed8 <HAL_RCC_ClockConfig+0x2e8>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ea0:	22f0      	movs	r2, #240	@ 0xf0
 8005ea2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	fa92 f2a2 	rbit	r2, r2
 8005eaa:	60fa      	str	r2, [r7, #12]
  return result;
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	fab2 f282 	clz	r2, r2
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	40d3      	lsrs	r3, r2
 8005eb6:	4a09      	ldr	r2, [pc, #36]	@ (8005edc <HAL_RCC_ClockConfig+0x2ec>)
 8005eb8:	5cd3      	ldrb	r3, [r2, r3]
 8005eba:	fa21 f303 	lsr.w	r3, r1, r3
 8005ebe:	4a08      	ldr	r2, [pc, #32]	@ (8005ee0 <HAL_RCC_ClockConfig+0x2f0>)
 8005ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005ec2:	4b08      	ldr	r3, [pc, #32]	@ (8005ee4 <HAL_RCC_ClockConfig+0x2f4>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fd fcae 	bl	8003828 <HAL_InitTick>
  
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3778      	adds	r7, #120	@ 0x78
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	08016064 	.word	0x08016064
 8005ee0:	20000010 	.word	0x20000010
 8005ee4:	20000014 	.word	0x20000014

08005ee8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60bb      	str	r3, [r7, #8]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	2300      	movs	r3, #0
 8005efc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005f02:	4b1e      	ldr	r3, [pc, #120]	@ (8005f7c <HAL_RCC_GetSysClockFreq+0x94>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f003 030c 	and.w	r3, r3, #12
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d002      	beq.n	8005f18 <HAL_RCC_GetSysClockFreq+0x30>
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d003      	beq.n	8005f1e <HAL_RCC_GetSysClockFreq+0x36>
 8005f16:	e026      	b.n	8005f66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f18:	4b19      	ldr	r3, [pc, #100]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f1a:	613b      	str	r3, [r7, #16]
      break;
 8005f1c:	e026      	b.n	8005f6c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	0c9b      	lsrs	r3, r3, #18
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	4a17      	ldr	r2, [pc, #92]	@ (8005f84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005f28:	5cd3      	ldrb	r3, [r2, r3]
 8005f2a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005f2c:	4b13      	ldr	r3, [pc, #76]	@ (8005f7c <HAL_RCC_GetSysClockFreq+0x94>)
 8005f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	4a14      	ldr	r2, [pc, #80]	@ (8005f88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005f36:	5cd3      	ldrb	r3, [r2, r3]
 8005f38:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d008      	beq.n	8005f56 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005f44:	4a0e      	ldr	r2, [pc, #56]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	fb02 f303 	mul.w	r3, r2, r3
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	e004      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a0c      	ldr	r2, [pc, #48]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f5a:	fb02 f303 	mul.w	r3, r2, r3
 8005f5e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	613b      	str	r3, [r7, #16]
      break;
 8005f64:	e002      	b.n	8005f6c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f66:	4b06      	ldr	r3, [pc, #24]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f68:	613b      	str	r3, [r7, #16]
      break;
 8005f6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f6c:	693b      	ldr	r3, [r7, #16]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	007a1200 	.word	0x007a1200
 8005f84:	08016074 	.word	0x08016074
 8005f88:	08016084 	.word	0x08016084
 8005f8c:	003d0900 	.word	0x003d0900

08005f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b092      	sub	sp, #72	@ 0x48
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 80d4 	beq.w	800615c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fb4:	4b4e      	ldr	r3, [pc, #312]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10e      	bne.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fca:	61d3      	str	r3, [r2, #28]
 8005fcc:	4b48      	ldr	r3, [pc, #288]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fd4:	60bb      	str	r3, [r7, #8]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fde:	4b45      	ldr	r3, [pc, #276]	@ (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d118      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fea:	4b42      	ldr	r3, [pc, #264]	@ (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a41      	ldr	r2, [pc, #260]	@ (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ff4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ff6:	f7fd fc5b 	bl	80038b0 <HAL_GetTick>
 8005ffa:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ffc:	e008      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ffe:	f7fd fc57 	bl	80038b0 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b64      	cmp	r3, #100	@ 0x64
 800600a:	d901      	bls.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e169      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006010:	4b38      	ldr	r3, [pc, #224]	@ (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0f0      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800601c:	4b34      	ldr	r3, [pc, #208]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006024:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8084 	beq.w	8006136 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006036:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006038:	429a      	cmp	r2, r3
 800603a:	d07c      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800603c:	4b2c      	ldr	r3, [pc, #176]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006044:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006046:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800604a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800604c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604e:	fa93 f3a3 	rbit	r3, r3
 8006052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006056:	fab3 f383 	clz	r3, r3
 800605a:	b2db      	uxtb	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	4b26      	ldr	r3, [pc, #152]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006060:	4413      	add	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	461a      	mov	r2, r3
 8006066:	2301      	movs	r3, #1
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800606e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006072:	fa93 f3a3 	rbit	r3, r3
 8006076:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800607a:	fab3 f383 	clz	r3, r3
 800607e:	b2db      	uxtb	r3, r3
 8006080:	461a      	mov	r2, r3
 8006082:	4b1d      	ldr	r3, [pc, #116]	@ (80060f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	461a      	mov	r2, r3
 800608a:	2300      	movs	r3, #0
 800608c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800608e:	4a18      	ldr	r2, [pc, #96]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006092:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d04b      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800609e:	f7fd fc07 	bl	80038b0 <HAL_GetTick>
 80060a2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a4:	e00a      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a6:	f7fd fc03 	bl	80038b0 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d901      	bls.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e113      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80060bc:	2302      	movs	r3, #2
 80060be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c2:	fa93 f3a3 	rbit	r3, r3
 80060c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060c8:	2302      	movs	r3, #2
 80060ca:	623b      	str	r3, [r7, #32]
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	fa93 f3a3 	rbit	r3, r3
 80060d2:	61fb      	str	r3, [r7, #28]
  return result;
 80060d4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060d6:	fab3 f383 	clz	r3, r3
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	095b      	lsrs	r3, r3, #5
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	f043 0302 	orr.w	r3, r3, #2
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d108      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80060ea:	4b01      	ldr	r3, [pc, #4]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	e00d      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80060f0:	40021000 	.word	0x40021000
 80060f4:	40007000 	.word	0x40007000
 80060f8:	10908100 	.word	0x10908100
 80060fc:	2302      	movs	r3, #2
 80060fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	fa93 f3a3 	rbit	r3, r3
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	4b78      	ldr	r3, [pc, #480]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800610a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610c:	2202      	movs	r2, #2
 800610e:	613a      	str	r2, [r7, #16]
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	fa92 f2a2 	rbit	r2, r2
 8006116:	60fa      	str	r2, [r7, #12]
  return result;
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	fab2 f282 	clz	r2, r2
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	f002 021f 	and.w	r2, r2, #31
 800612a:	2101      	movs	r1, #1
 800612c:	fa01 f202 	lsl.w	r2, r1, r2
 8006130:	4013      	ands	r3, r2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0b7      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006136:	4b6d      	ldr	r3, [pc, #436]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	496a      	ldr	r1, [pc, #424]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006144:	4313      	orrs	r3, r2
 8006146:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006148:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800614c:	2b01      	cmp	r3, #1
 800614e:	d105      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006150:	4b66      	ldr	r3, [pc, #408]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	4a65      	ldr	r2, [pc, #404]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800615a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d008      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006168:	4b60      	ldr	r3, [pc, #384]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800616a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616c:	f023 0203 	bic.w	r2, r3, #3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	495d      	ldr	r1, [pc, #372]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006176:	4313      	orrs	r3, r2
 8006178:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d008      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006186:	4b59      	ldr	r3, [pc, #356]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800618a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	4956      	ldr	r1, [pc, #344]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006194:	4313      	orrs	r3, r2
 8006196:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d008      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061a4:	4b51      	ldr	r3, [pc, #324]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	494e      	ldr	r1, [pc, #312]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0320 	and.w	r3, r3, #32
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d008      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061c2:	4b4a      	ldr	r3, [pc, #296]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c6:	f023 0210 	bic.w	r2, r3, #16
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	4947      	ldr	r1, [pc, #284]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d008      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80061e0:	4b42      	ldr	r3, [pc, #264]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ec:	493f      	ldr	r1, [pc, #252]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d008      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061fe:	4b3b      	ldr	r3, [pc, #236]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006202:	f023 0220 	bic.w	r2, r3, #32
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	4938      	ldr	r1, [pc, #224]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800620c:	4313      	orrs	r3, r2
 800620e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b00      	cmp	r3, #0
 800621a:	d008      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800621c:	4b33      	ldr	r3, [pc, #204]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800621e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006220:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	4930      	ldr	r1, [pc, #192]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800622a:	4313      	orrs	r3, r2
 800622c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0310 	and.w	r3, r3, #16
 8006236:	2b00      	cmp	r3, #0
 8006238:	d008      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800623a:	4b2c      	ldr	r3, [pc, #176]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800623c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	4929      	ldr	r1, [pc, #164]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006248:	4313      	orrs	r3, r2
 800624a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006254:	2b00      	cmp	r3, #0
 8006256:	d008      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006258:	4b24      	ldr	r3, [pc, #144]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006264:	4921      	ldr	r1, [pc, #132]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006266:	4313      	orrs	r3, r2
 8006268:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006272:	2b00      	cmp	r3, #0
 8006274:	d008      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006276:	4b1d      	ldr	r3, [pc, #116]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006282:	491a      	ldr	r1, [pc, #104]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006284:	4313      	orrs	r3, r2
 8006286:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006290:	2b00      	cmp	r3, #0
 8006292:	d008      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006294:	4b15      	ldr	r3, [pc, #84]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006298:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a0:	4912      	ldr	r1, [pc, #72]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d008      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80062b2:	4b0e      	ldr	r3, [pc, #56]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062be:	490b      	ldr	r1, [pc, #44]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d008      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80062d0:	4b06      	ldr	r3, [pc, #24]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062dc:	4903      	ldr	r1, [pc, #12]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3748      	adds	r7, #72	@ 0x48
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40021000 	.word	0x40021000

080062f0 <rand>:
 80062f0:	4b16      	ldr	r3, [pc, #88]	@ (800634c <rand+0x5c>)
 80062f2:	b510      	push	{r4, lr}
 80062f4:	681c      	ldr	r4, [r3, #0]
 80062f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80062f8:	b9b3      	cbnz	r3, 8006328 <rand+0x38>
 80062fa:	2018      	movs	r0, #24
 80062fc:	f002 f816 	bl	800832c <malloc>
 8006300:	4602      	mov	r2, r0
 8006302:	6320      	str	r0, [r4, #48]	@ 0x30
 8006304:	b920      	cbnz	r0, 8006310 <rand+0x20>
 8006306:	4b12      	ldr	r3, [pc, #72]	@ (8006350 <rand+0x60>)
 8006308:	4812      	ldr	r0, [pc, #72]	@ (8006354 <rand+0x64>)
 800630a:	2152      	movs	r1, #82	@ 0x52
 800630c:	f001 f958 	bl	80075c0 <__assert_func>
 8006310:	4911      	ldr	r1, [pc, #68]	@ (8006358 <rand+0x68>)
 8006312:	4b12      	ldr	r3, [pc, #72]	@ (800635c <rand+0x6c>)
 8006314:	e9c0 1300 	strd	r1, r3, [r0]
 8006318:	4b11      	ldr	r3, [pc, #68]	@ (8006360 <rand+0x70>)
 800631a:	6083      	str	r3, [r0, #8]
 800631c:	230b      	movs	r3, #11
 800631e:	8183      	strh	r3, [r0, #12]
 8006320:	2100      	movs	r1, #0
 8006322:	2001      	movs	r0, #1
 8006324:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006328:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800632a:	480e      	ldr	r0, [pc, #56]	@ (8006364 <rand+0x74>)
 800632c:	690b      	ldr	r3, [r1, #16]
 800632e:	694c      	ldr	r4, [r1, #20]
 8006330:	4a0d      	ldr	r2, [pc, #52]	@ (8006368 <rand+0x78>)
 8006332:	4358      	muls	r0, r3
 8006334:	fb02 0004 	mla	r0, r2, r4, r0
 8006338:	fba3 3202 	umull	r3, r2, r3, r2
 800633c:	3301      	adds	r3, #1
 800633e:	eb40 0002 	adc.w	r0, r0, r2
 8006342:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006346:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800634a:	bd10      	pop	{r4, pc}
 800634c:	20000028 	.word	0x20000028
 8006350:	08016094 	.word	0x08016094
 8006354:	080160ab 	.word	0x080160ab
 8006358:	abcd330e 	.word	0xabcd330e
 800635c:	e66d1234 	.word	0xe66d1234
 8006360:	0005deec 	.word	0x0005deec
 8006364:	5851f42d 	.word	0x5851f42d
 8006368:	4c957f2d 	.word	0x4c957f2d

0800636c <__cvt>:
 800636c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006370:	ec57 6b10 	vmov	r6, r7, d0
 8006374:	2f00      	cmp	r7, #0
 8006376:	460c      	mov	r4, r1
 8006378:	4619      	mov	r1, r3
 800637a:	463b      	mov	r3, r7
 800637c:	bfbb      	ittet	lt
 800637e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006382:	461f      	movlt	r7, r3
 8006384:	2300      	movge	r3, #0
 8006386:	232d      	movlt	r3, #45	@ 0x2d
 8006388:	700b      	strb	r3, [r1, #0]
 800638a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800638c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006390:	4691      	mov	r9, r2
 8006392:	f023 0820 	bic.w	r8, r3, #32
 8006396:	bfbc      	itt	lt
 8006398:	4632      	movlt	r2, r6
 800639a:	4616      	movlt	r6, r2
 800639c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063a0:	d005      	beq.n	80063ae <__cvt+0x42>
 80063a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80063a6:	d100      	bne.n	80063aa <__cvt+0x3e>
 80063a8:	3401      	adds	r4, #1
 80063aa:	2102      	movs	r1, #2
 80063ac:	e000      	b.n	80063b0 <__cvt+0x44>
 80063ae:	2103      	movs	r1, #3
 80063b0:	ab03      	add	r3, sp, #12
 80063b2:	9301      	str	r3, [sp, #4]
 80063b4:	ab02      	add	r3, sp, #8
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	ec47 6b10 	vmov	d0, r6, r7
 80063bc:	4653      	mov	r3, sl
 80063be:	4622      	mov	r2, r4
 80063c0:	f001 f9a6 	bl	8007710 <_dtoa_r>
 80063c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80063c8:	4605      	mov	r5, r0
 80063ca:	d119      	bne.n	8006400 <__cvt+0x94>
 80063cc:	f019 0f01 	tst.w	r9, #1
 80063d0:	d00e      	beq.n	80063f0 <__cvt+0x84>
 80063d2:	eb00 0904 	add.w	r9, r0, r4
 80063d6:	2200      	movs	r2, #0
 80063d8:	2300      	movs	r3, #0
 80063da:	4630      	mov	r0, r6
 80063dc:	4639      	mov	r1, r7
 80063de:	f7fa fb73 	bl	8000ac8 <__aeabi_dcmpeq>
 80063e2:	b108      	cbz	r0, 80063e8 <__cvt+0x7c>
 80063e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80063e8:	2230      	movs	r2, #48	@ 0x30
 80063ea:	9b03      	ldr	r3, [sp, #12]
 80063ec:	454b      	cmp	r3, r9
 80063ee:	d31e      	bcc.n	800642e <__cvt+0xc2>
 80063f0:	9b03      	ldr	r3, [sp, #12]
 80063f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80063f4:	1b5b      	subs	r3, r3, r5
 80063f6:	4628      	mov	r0, r5
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	b004      	add	sp, #16
 80063fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006400:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006404:	eb00 0904 	add.w	r9, r0, r4
 8006408:	d1e5      	bne.n	80063d6 <__cvt+0x6a>
 800640a:	7803      	ldrb	r3, [r0, #0]
 800640c:	2b30      	cmp	r3, #48	@ 0x30
 800640e:	d10a      	bne.n	8006426 <__cvt+0xba>
 8006410:	2200      	movs	r2, #0
 8006412:	2300      	movs	r3, #0
 8006414:	4630      	mov	r0, r6
 8006416:	4639      	mov	r1, r7
 8006418:	f7fa fb56 	bl	8000ac8 <__aeabi_dcmpeq>
 800641c:	b918      	cbnz	r0, 8006426 <__cvt+0xba>
 800641e:	f1c4 0401 	rsb	r4, r4, #1
 8006422:	f8ca 4000 	str.w	r4, [sl]
 8006426:	f8da 3000 	ldr.w	r3, [sl]
 800642a:	4499      	add	r9, r3
 800642c:	e7d3      	b.n	80063d6 <__cvt+0x6a>
 800642e:	1c59      	adds	r1, r3, #1
 8006430:	9103      	str	r1, [sp, #12]
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	e7d9      	b.n	80063ea <__cvt+0x7e>

08006436 <__exponent>:
 8006436:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006438:	2900      	cmp	r1, #0
 800643a:	bfba      	itte	lt
 800643c:	4249      	neglt	r1, r1
 800643e:	232d      	movlt	r3, #45	@ 0x2d
 8006440:	232b      	movge	r3, #43	@ 0x2b
 8006442:	2909      	cmp	r1, #9
 8006444:	7002      	strb	r2, [r0, #0]
 8006446:	7043      	strb	r3, [r0, #1]
 8006448:	dd29      	ble.n	800649e <__exponent+0x68>
 800644a:	f10d 0307 	add.w	r3, sp, #7
 800644e:	461d      	mov	r5, r3
 8006450:	270a      	movs	r7, #10
 8006452:	461a      	mov	r2, r3
 8006454:	fbb1 f6f7 	udiv	r6, r1, r7
 8006458:	fb07 1416 	mls	r4, r7, r6, r1
 800645c:	3430      	adds	r4, #48	@ 0x30
 800645e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006462:	460c      	mov	r4, r1
 8006464:	2c63      	cmp	r4, #99	@ 0x63
 8006466:	f103 33ff 	add.w	r3, r3, #4294967295
 800646a:	4631      	mov	r1, r6
 800646c:	dcf1      	bgt.n	8006452 <__exponent+0x1c>
 800646e:	3130      	adds	r1, #48	@ 0x30
 8006470:	1e94      	subs	r4, r2, #2
 8006472:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006476:	1c41      	adds	r1, r0, #1
 8006478:	4623      	mov	r3, r4
 800647a:	42ab      	cmp	r3, r5
 800647c:	d30a      	bcc.n	8006494 <__exponent+0x5e>
 800647e:	f10d 0309 	add.w	r3, sp, #9
 8006482:	1a9b      	subs	r3, r3, r2
 8006484:	42ac      	cmp	r4, r5
 8006486:	bf88      	it	hi
 8006488:	2300      	movhi	r3, #0
 800648a:	3302      	adds	r3, #2
 800648c:	4403      	add	r3, r0
 800648e:	1a18      	subs	r0, r3, r0
 8006490:	b003      	add	sp, #12
 8006492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006494:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006498:	f801 6f01 	strb.w	r6, [r1, #1]!
 800649c:	e7ed      	b.n	800647a <__exponent+0x44>
 800649e:	2330      	movs	r3, #48	@ 0x30
 80064a0:	3130      	adds	r1, #48	@ 0x30
 80064a2:	7083      	strb	r3, [r0, #2]
 80064a4:	70c1      	strb	r1, [r0, #3]
 80064a6:	1d03      	adds	r3, r0, #4
 80064a8:	e7f1      	b.n	800648e <__exponent+0x58>
	...

080064ac <_printf_float>:
 80064ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b0:	b08d      	sub	sp, #52	@ 0x34
 80064b2:	460c      	mov	r4, r1
 80064b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80064b8:	4616      	mov	r6, r2
 80064ba:	461f      	mov	r7, r3
 80064bc:	4605      	mov	r5, r0
 80064be:	f000 fff3 	bl	80074a8 <_localeconv_r>
 80064c2:	6803      	ldr	r3, [r0, #0]
 80064c4:	9304      	str	r3, [sp, #16]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7f9 fed2 	bl	8000270 <strlen>
 80064cc:	2300      	movs	r3, #0
 80064ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80064d0:	f8d8 3000 	ldr.w	r3, [r8]
 80064d4:	9005      	str	r0, [sp, #20]
 80064d6:	3307      	adds	r3, #7
 80064d8:	f023 0307 	bic.w	r3, r3, #7
 80064dc:	f103 0208 	add.w	r2, r3, #8
 80064e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80064e4:	f8d4 b000 	ldr.w	fp, [r4]
 80064e8:	f8c8 2000 	str.w	r2, [r8]
 80064ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80064f4:	9307      	str	r3, [sp, #28]
 80064f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80064fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80064fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006502:	4b9c      	ldr	r3, [pc, #624]	@ (8006774 <_printf_float+0x2c8>)
 8006504:	f04f 32ff 	mov.w	r2, #4294967295
 8006508:	f7fa fb10 	bl	8000b2c <__aeabi_dcmpun>
 800650c:	bb70      	cbnz	r0, 800656c <_printf_float+0xc0>
 800650e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006512:	4b98      	ldr	r3, [pc, #608]	@ (8006774 <_printf_float+0x2c8>)
 8006514:	f04f 32ff 	mov.w	r2, #4294967295
 8006518:	f7fa faea 	bl	8000af0 <__aeabi_dcmple>
 800651c:	bb30      	cbnz	r0, 800656c <_printf_float+0xc0>
 800651e:	2200      	movs	r2, #0
 8006520:	2300      	movs	r3, #0
 8006522:	4640      	mov	r0, r8
 8006524:	4649      	mov	r1, r9
 8006526:	f7fa fad9 	bl	8000adc <__aeabi_dcmplt>
 800652a:	b110      	cbz	r0, 8006532 <_printf_float+0x86>
 800652c:	232d      	movs	r3, #45	@ 0x2d
 800652e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006532:	4a91      	ldr	r2, [pc, #580]	@ (8006778 <_printf_float+0x2cc>)
 8006534:	4b91      	ldr	r3, [pc, #580]	@ (800677c <_printf_float+0x2d0>)
 8006536:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800653a:	bf94      	ite	ls
 800653c:	4690      	movls	r8, r2
 800653e:	4698      	movhi	r8, r3
 8006540:	2303      	movs	r3, #3
 8006542:	6123      	str	r3, [r4, #16]
 8006544:	f02b 0304 	bic.w	r3, fp, #4
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	f04f 0900 	mov.w	r9, #0
 800654e:	9700      	str	r7, [sp, #0]
 8006550:	4633      	mov	r3, r6
 8006552:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006554:	4621      	mov	r1, r4
 8006556:	4628      	mov	r0, r5
 8006558:	f000 f9d2 	bl	8006900 <_printf_common>
 800655c:	3001      	adds	r0, #1
 800655e:	f040 808d 	bne.w	800667c <_printf_float+0x1d0>
 8006562:	f04f 30ff 	mov.w	r0, #4294967295
 8006566:	b00d      	add	sp, #52	@ 0x34
 8006568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656c:	4642      	mov	r2, r8
 800656e:	464b      	mov	r3, r9
 8006570:	4640      	mov	r0, r8
 8006572:	4649      	mov	r1, r9
 8006574:	f7fa fada 	bl	8000b2c <__aeabi_dcmpun>
 8006578:	b140      	cbz	r0, 800658c <_printf_float+0xe0>
 800657a:	464b      	mov	r3, r9
 800657c:	2b00      	cmp	r3, #0
 800657e:	bfbc      	itt	lt
 8006580:	232d      	movlt	r3, #45	@ 0x2d
 8006582:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006586:	4a7e      	ldr	r2, [pc, #504]	@ (8006780 <_printf_float+0x2d4>)
 8006588:	4b7e      	ldr	r3, [pc, #504]	@ (8006784 <_printf_float+0x2d8>)
 800658a:	e7d4      	b.n	8006536 <_printf_float+0x8a>
 800658c:	6863      	ldr	r3, [r4, #4]
 800658e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006592:	9206      	str	r2, [sp, #24]
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	d13b      	bne.n	8006610 <_printf_float+0x164>
 8006598:	2306      	movs	r3, #6
 800659a:	6063      	str	r3, [r4, #4]
 800659c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80065a0:	2300      	movs	r3, #0
 80065a2:	6022      	str	r2, [r4, #0]
 80065a4:	9303      	str	r3, [sp, #12]
 80065a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80065a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80065ac:	ab09      	add	r3, sp, #36	@ 0x24
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	6861      	ldr	r1, [r4, #4]
 80065b2:	ec49 8b10 	vmov	d0, r8, r9
 80065b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80065ba:	4628      	mov	r0, r5
 80065bc:	f7ff fed6 	bl	800636c <__cvt>
 80065c0:	9b06      	ldr	r3, [sp, #24]
 80065c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065c4:	2b47      	cmp	r3, #71	@ 0x47
 80065c6:	4680      	mov	r8, r0
 80065c8:	d129      	bne.n	800661e <_printf_float+0x172>
 80065ca:	1cc8      	adds	r0, r1, #3
 80065cc:	db02      	blt.n	80065d4 <_printf_float+0x128>
 80065ce:	6863      	ldr	r3, [r4, #4]
 80065d0:	4299      	cmp	r1, r3
 80065d2:	dd41      	ble.n	8006658 <_printf_float+0x1ac>
 80065d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80065d8:	fa5f fa8a 	uxtb.w	sl, sl
 80065dc:	3901      	subs	r1, #1
 80065de:	4652      	mov	r2, sl
 80065e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80065e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80065e6:	f7ff ff26 	bl	8006436 <__exponent>
 80065ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065ec:	1813      	adds	r3, r2, r0
 80065ee:	2a01      	cmp	r2, #1
 80065f0:	4681      	mov	r9, r0
 80065f2:	6123      	str	r3, [r4, #16]
 80065f4:	dc02      	bgt.n	80065fc <_printf_float+0x150>
 80065f6:	6822      	ldr	r2, [r4, #0]
 80065f8:	07d2      	lsls	r2, r2, #31
 80065fa:	d501      	bpl.n	8006600 <_printf_float+0x154>
 80065fc:	3301      	adds	r3, #1
 80065fe:	6123      	str	r3, [r4, #16]
 8006600:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0a2      	beq.n	800654e <_printf_float+0xa2>
 8006608:	232d      	movs	r3, #45	@ 0x2d
 800660a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800660e:	e79e      	b.n	800654e <_printf_float+0xa2>
 8006610:	9a06      	ldr	r2, [sp, #24]
 8006612:	2a47      	cmp	r2, #71	@ 0x47
 8006614:	d1c2      	bne.n	800659c <_printf_float+0xf0>
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1c0      	bne.n	800659c <_printf_float+0xf0>
 800661a:	2301      	movs	r3, #1
 800661c:	e7bd      	b.n	800659a <_printf_float+0xee>
 800661e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006622:	d9db      	bls.n	80065dc <_printf_float+0x130>
 8006624:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006628:	d118      	bne.n	800665c <_printf_float+0x1b0>
 800662a:	2900      	cmp	r1, #0
 800662c:	6863      	ldr	r3, [r4, #4]
 800662e:	dd0b      	ble.n	8006648 <_printf_float+0x19c>
 8006630:	6121      	str	r1, [r4, #16]
 8006632:	b913      	cbnz	r3, 800663a <_printf_float+0x18e>
 8006634:	6822      	ldr	r2, [r4, #0]
 8006636:	07d0      	lsls	r0, r2, #31
 8006638:	d502      	bpl.n	8006640 <_printf_float+0x194>
 800663a:	3301      	adds	r3, #1
 800663c:	440b      	add	r3, r1
 800663e:	6123      	str	r3, [r4, #16]
 8006640:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006642:	f04f 0900 	mov.w	r9, #0
 8006646:	e7db      	b.n	8006600 <_printf_float+0x154>
 8006648:	b913      	cbnz	r3, 8006650 <_printf_float+0x1a4>
 800664a:	6822      	ldr	r2, [r4, #0]
 800664c:	07d2      	lsls	r2, r2, #31
 800664e:	d501      	bpl.n	8006654 <_printf_float+0x1a8>
 8006650:	3302      	adds	r3, #2
 8006652:	e7f4      	b.n	800663e <_printf_float+0x192>
 8006654:	2301      	movs	r3, #1
 8006656:	e7f2      	b.n	800663e <_printf_float+0x192>
 8006658:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800665c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800665e:	4299      	cmp	r1, r3
 8006660:	db05      	blt.n	800666e <_printf_float+0x1c2>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	6121      	str	r1, [r4, #16]
 8006666:	07d8      	lsls	r0, r3, #31
 8006668:	d5ea      	bpl.n	8006640 <_printf_float+0x194>
 800666a:	1c4b      	adds	r3, r1, #1
 800666c:	e7e7      	b.n	800663e <_printf_float+0x192>
 800666e:	2900      	cmp	r1, #0
 8006670:	bfd4      	ite	le
 8006672:	f1c1 0202 	rsble	r2, r1, #2
 8006676:	2201      	movgt	r2, #1
 8006678:	4413      	add	r3, r2
 800667a:	e7e0      	b.n	800663e <_printf_float+0x192>
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	055a      	lsls	r2, r3, #21
 8006680:	d407      	bmi.n	8006692 <_printf_float+0x1e6>
 8006682:	6923      	ldr	r3, [r4, #16]
 8006684:	4642      	mov	r2, r8
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	47b8      	blx	r7
 800668c:	3001      	adds	r0, #1
 800668e:	d12b      	bne.n	80066e8 <_printf_float+0x23c>
 8006690:	e767      	b.n	8006562 <_printf_float+0xb6>
 8006692:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006696:	f240 80dd 	bls.w	8006854 <_printf_float+0x3a8>
 800669a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800669e:	2200      	movs	r2, #0
 80066a0:	2300      	movs	r3, #0
 80066a2:	f7fa fa11 	bl	8000ac8 <__aeabi_dcmpeq>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d033      	beq.n	8006712 <_printf_float+0x266>
 80066aa:	4a37      	ldr	r2, [pc, #220]	@ (8006788 <_printf_float+0x2dc>)
 80066ac:	2301      	movs	r3, #1
 80066ae:	4631      	mov	r1, r6
 80066b0:	4628      	mov	r0, r5
 80066b2:	47b8      	blx	r7
 80066b4:	3001      	adds	r0, #1
 80066b6:	f43f af54 	beq.w	8006562 <_printf_float+0xb6>
 80066ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80066be:	4543      	cmp	r3, r8
 80066c0:	db02      	blt.n	80066c8 <_printf_float+0x21c>
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	07d8      	lsls	r0, r3, #31
 80066c6:	d50f      	bpl.n	80066e8 <_printf_float+0x23c>
 80066c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066cc:	4631      	mov	r1, r6
 80066ce:	4628      	mov	r0, r5
 80066d0:	47b8      	blx	r7
 80066d2:	3001      	adds	r0, #1
 80066d4:	f43f af45 	beq.w	8006562 <_printf_float+0xb6>
 80066d8:	f04f 0900 	mov.w	r9, #0
 80066dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80066e0:	f104 0a1a 	add.w	sl, r4, #26
 80066e4:	45c8      	cmp	r8, r9
 80066e6:	dc09      	bgt.n	80066fc <_printf_float+0x250>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	079b      	lsls	r3, r3, #30
 80066ec:	f100 8103 	bmi.w	80068f6 <_printf_float+0x44a>
 80066f0:	68e0      	ldr	r0, [r4, #12]
 80066f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066f4:	4298      	cmp	r0, r3
 80066f6:	bfb8      	it	lt
 80066f8:	4618      	movlt	r0, r3
 80066fa:	e734      	b.n	8006566 <_printf_float+0xba>
 80066fc:	2301      	movs	r3, #1
 80066fe:	4652      	mov	r2, sl
 8006700:	4631      	mov	r1, r6
 8006702:	4628      	mov	r0, r5
 8006704:	47b8      	blx	r7
 8006706:	3001      	adds	r0, #1
 8006708:	f43f af2b 	beq.w	8006562 <_printf_float+0xb6>
 800670c:	f109 0901 	add.w	r9, r9, #1
 8006710:	e7e8      	b.n	80066e4 <_printf_float+0x238>
 8006712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006714:	2b00      	cmp	r3, #0
 8006716:	dc39      	bgt.n	800678c <_printf_float+0x2e0>
 8006718:	4a1b      	ldr	r2, [pc, #108]	@ (8006788 <_printf_float+0x2dc>)
 800671a:	2301      	movs	r3, #1
 800671c:	4631      	mov	r1, r6
 800671e:	4628      	mov	r0, r5
 8006720:	47b8      	blx	r7
 8006722:	3001      	adds	r0, #1
 8006724:	f43f af1d 	beq.w	8006562 <_printf_float+0xb6>
 8006728:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800672c:	ea59 0303 	orrs.w	r3, r9, r3
 8006730:	d102      	bne.n	8006738 <_printf_float+0x28c>
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	07d9      	lsls	r1, r3, #31
 8006736:	d5d7      	bpl.n	80066e8 <_printf_float+0x23c>
 8006738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800673c:	4631      	mov	r1, r6
 800673e:	4628      	mov	r0, r5
 8006740:	47b8      	blx	r7
 8006742:	3001      	adds	r0, #1
 8006744:	f43f af0d 	beq.w	8006562 <_printf_float+0xb6>
 8006748:	f04f 0a00 	mov.w	sl, #0
 800674c:	f104 0b1a 	add.w	fp, r4, #26
 8006750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006752:	425b      	negs	r3, r3
 8006754:	4553      	cmp	r3, sl
 8006756:	dc01      	bgt.n	800675c <_printf_float+0x2b0>
 8006758:	464b      	mov	r3, r9
 800675a:	e793      	b.n	8006684 <_printf_float+0x1d8>
 800675c:	2301      	movs	r3, #1
 800675e:	465a      	mov	r2, fp
 8006760:	4631      	mov	r1, r6
 8006762:	4628      	mov	r0, r5
 8006764:	47b8      	blx	r7
 8006766:	3001      	adds	r0, #1
 8006768:	f43f aefb 	beq.w	8006562 <_printf_float+0xb6>
 800676c:	f10a 0a01 	add.w	sl, sl, #1
 8006770:	e7ee      	b.n	8006750 <_printf_float+0x2a4>
 8006772:	bf00      	nop
 8006774:	7fefffff 	.word	0x7fefffff
 8006778:	08016103 	.word	0x08016103
 800677c:	08016107 	.word	0x08016107
 8006780:	0801610b 	.word	0x0801610b
 8006784:	0801610f 	.word	0x0801610f
 8006788:	08016113 	.word	0x08016113
 800678c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800678e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006792:	4553      	cmp	r3, sl
 8006794:	bfa8      	it	ge
 8006796:	4653      	movge	r3, sl
 8006798:	2b00      	cmp	r3, #0
 800679a:	4699      	mov	r9, r3
 800679c:	dc36      	bgt.n	800680c <_printf_float+0x360>
 800679e:	f04f 0b00 	mov.w	fp, #0
 80067a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067a6:	f104 021a 	add.w	r2, r4, #26
 80067aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067ac:	9306      	str	r3, [sp, #24]
 80067ae:	eba3 0309 	sub.w	r3, r3, r9
 80067b2:	455b      	cmp	r3, fp
 80067b4:	dc31      	bgt.n	800681a <_printf_float+0x36e>
 80067b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067b8:	459a      	cmp	sl, r3
 80067ba:	dc3a      	bgt.n	8006832 <_printf_float+0x386>
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	07da      	lsls	r2, r3, #31
 80067c0:	d437      	bmi.n	8006832 <_printf_float+0x386>
 80067c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c4:	ebaa 0903 	sub.w	r9, sl, r3
 80067c8:	9b06      	ldr	r3, [sp, #24]
 80067ca:	ebaa 0303 	sub.w	r3, sl, r3
 80067ce:	4599      	cmp	r9, r3
 80067d0:	bfa8      	it	ge
 80067d2:	4699      	movge	r9, r3
 80067d4:	f1b9 0f00 	cmp.w	r9, #0
 80067d8:	dc33      	bgt.n	8006842 <_printf_float+0x396>
 80067da:	f04f 0800 	mov.w	r8, #0
 80067de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067e2:	f104 0b1a 	add.w	fp, r4, #26
 80067e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067e8:	ebaa 0303 	sub.w	r3, sl, r3
 80067ec:	eba3 0309 	sub.w	r3, r3, r9
 80067f0:	4543      	cmp	r3, r8
 80067f2:	f77f af79 	ble.w	80066e8 <_printf_float+0x23c>
 80067f6:	2301      	movs	r3, #1
 80067f8:	465a      	mov	r2, fp
 80067fa:	4631      	mov	r1, r6
 80067fc:	4628      	mov	r0, r5
 80067fe:	47b8      	blx	r7
 8006800:	3001      	adds	r0, #1
 8006802:	f43f aeae 	beq.w	8006562 <_printf_float+0xb6>
 8006806:	f108 0801 	add.w	r8, r8, #1
 800680a:	e7ec      	b.n	80067e6 <_printf_float+0x33a>
 800680c:	4642      	mov	r2, r8
 800680e:	4631      	mov	r1, r6
 8006810:	4628      	mov	r0, r5
 8006812:	47b8      	blx	r7
 8006814:	3001      	adds	r0, #1
 8006816:	d1c2      	bne.n	800679e <_printf_float+0x2f2>
 8006818:	e6a3      	b.n	8006562 <_printf_float+0xb6>
 800681a:	2301      	movs	r3, #1
 800681c:	4631      	mov	r1, r6
 800681e:	4628      	mov	r0, r5
 8006820:	9206      	str	r2, [sp, #24]
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	f43f ae9c 	beq.w	8006562 <_printf_float+0xb6>
 800682a:	9a06      	ldr	r2, [sp, #24]
 800682c:	f10b 0b01 	add.w	fp, fp, #1
 8006830:	e7bb      	b.n	80067aa <_printf_float+0x2fe>
 8006832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006836:	4631      	mov	r1, r6
 8006838:	4628      	mov	r0, r5
 800683a:	47b8      	blx	r7
 800683c:	3001      	adds	r0, #1
 800683e:	d1c0      	bne.n	80067c2 <_printf_float+0x316>
 8006840:	e68f      	b.n	8006562 <_printf_float+0xb6>
 8006842:	9a06      	ldr	r2, [sp, #24]
 8006844:	464b      	mov	r3, r9
 8006846:	4442      	add	r2, r8
 8006848:	4631      	mov	r1, r6
 800684a:	4628      	mov	r0, r5
 800684c:	47b8      	blx	r7
 800684e:	3001      	adds	r0, #1
 8006850:	d1c3      	bne.n	80067da <_printf_float+0x32e>
 8006852:	e686      	b.n	8006562 <_printf_float+0xb6>
 8006854:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006858:	f1ba 0f01 	cmp.w	sl, #1
 800685c:	dc01      	bgt.n	8006862 <_printf_float+0x3b6>
 800685e:	07db      	lsls	r3, r3, #31
 8006860:	d536      	bpl.n	80068d0 <_printf_float+0x424>
 8006862:	2301      	movs	r3, #1
 8006864:	4642      	mov	r2, r8
 8006866:	4631      	mov	r1, r6
 8006868:	4628      	mov	r0, r5
 800686a:	47b8      	blx	r7
 800686c:	3001      	adds	r0, #1
 800686e:	f43f ae78 	beq.w	8006562 <_printf_float+0xb6>
 8006872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006876:	4631      	mov	r1, r6
 8006878:	4628      	mov	r0, r5
 800687a:	47b8      	blx	r7
 800687c:	3001      	adds	r0, #1
 800687e:	f43f ae70 	beq.w	8006562 <_printf_float+0xb6>
 8006882:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006886:	2200      	movs	r2, #0
 8006888:	2300      	movs	r3, #0
 800688a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800688e:	f7fa f91b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006892:	b9c0      	cbnz	r0, 80068c6 <_printf_float+0x41a>
 8006894:	4653      	mov	r3, sl
 8006896:	f108 0201 	add.w	r2, r8, #1
 800689a:	4631      	mov	r1, r6
 800689c:	4628      	mov	r0, r5
 800689e:	47b8      	blx	r7
 80068a0:	3001      	adds	r0, #1
 80068a2:	d10c      	bne.n	80068be <_printf_float+0x412>
 80068a4:	e65d      	b.n	8006562 <_printf_float+0xb6>
 80068a6:	2301      	movs	r3, #1
 80068a8:	465a      	mov	r2, fp
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	f43f ae56 	beq.w	8006562 <_printf_float+0xb6>
 80068b6:	f108 0801 	add.w	r8, r8, #1
 80068ba:	45d0      	cmp	r8, sl
 80068bc:	dbf3      	blt.n	80068a6 <_printf_float+0x3fa>
 80068be:	464b      	mov	r3, r9
 80068c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80068c4:	e6df      	b.n	8006686 <_printf_float+0x1da>
 80068c6:	f04f 0800 	mov.w	r8, #0
 80068ca:	f104 0b1a 	add.w	fp, r4, #26
 80068ce:	e7f4      	b.n	80068ba <_printf_float+0x40e>
 80068d0:	2301      	movs	r3, #1
 80068d2:	4642      	mov	r2, r8
 80068d4:	e7e1      	b.n	800689a <_printf_float+0x3ee>
 80068d6:	2301      	movs	r3, #1
 80068d8:	464a      	mov	r2, r9
 80068da:	4631      	mov	r1, r6
 80068dc:	4628      	mov	r0, r5
 80068de:	47b8      	blx	r7
 80068e0:	3001      	adds	r0, #1
 80068e2:	f43f ae3e 	beq.w	8006562 <_printf_float+0xb6>
 80068e6:	f108 0801 	add.w	r8, r8, #1
 80068ea:	68e3      	ldr	r3, [r4, #12]
 80068ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068ee:	1a5b      	subs	r3, r3, r1
 80068f0:	4543      	cmp	r3, r8
 80068f2:	dcf0      	bgt.n	80068d6 <_printf_float+0x42a>
 80068f4:	e6fc      	b.n	80066f0 <_printf_float+0x244>
 80068f6:	f04f 0800 	mov.w	r8, #0
 80068fa:	f104 0919 	add.w	r9, r4, #25
 80068fe:	e7f4      	b.n	80068ea <_printf_float+0x43e>

08006900 <_printf_common>:
 8006900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006904:	4616      	mov	r6, r2
 8006906:	4698      	mov	r8, r3
 8006908:	688a      	ldr	r2, [r1, #8]
 800690a:	690b      	ldr	r3, [r1, #16]
 800690c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006910:	4293      	cmp	r3, r2
 8006912:	bfb8      	it	lt
 8006914:	4613      	movlt	r3, r2
 8006916:	6033      	str	r3, [r6, #0]
 8006918:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800691c:	4607      	mov	r7, r0
 800691e:	460c      	mov	r4, r1
 8006920:	b10a      	cbz	r2, 8006926 <_printf_common+0x26>
 8006922:	3301      	adds	r3, #1
 8006924:	6033      	str	r3, [r6, #0]
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	0699      	lsls	r1, r3, #26
 800692a:	bf42      	ittt	mi
 800692c:	6833      	ldrmi	r3, [r6, #0]
 800692e:	3302      	addmi	r3, #2
 8006930:	6033      	strmi	r3, [r6, #0]
 8006932:	6825      	ldr	r5, [r4, #0]
 8006934:	f015 0506 	ands.w	r5, r5, #6
 8006938:	d106      	bne.n	8006948 <_printf_common+0x48>
 800693a:	f104 0a19 	add.w	sl, r4, #25
 800693e:	68e3      	ldr	r3, [r4, #12]
 8006940:	6832      	ldr	r2, [r6, #0]
 8006942:	1a9b      	subs	r3, r3, r2
 8006944:	42ab      	cmp	r3, r5
 8006946:	dc26      	bgt.n	8006996 <_printf_common+0x96>
 8006948:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800694c:	6822      	ldr	r2, [r4, #0]
 800694e:	3b00      	subs	r3, #0
 8006950:	bf18      	it	ne
 8006952:	2301      	movne	r3, #1
 8006954:	0692      	lsls	r2, r2, #26
 8006956:	d42b      	bmi.n	80069b0 <_printf_common+0xb0>
 8006958:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800695c:	4641      	mov	r1, r8
 800695e:	4638      	mov	r0, r7
 8006960:	47c8      	blx	r9
 8006962:	3001      	adds	r0, #1
 8006964:	d01e      	beq.n	80069a4 <_printf_common+0xa4>
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	6922      	ldr	r2, [r4, #16]
 800696a:	f003 0306 	and.w	r3, r3, #6
 800696e:	2b04      	cmp	r3, #4
 8006970:	bf02      	ittt	eq
 8006972:	68e5      	ldreq	r5, [r4, #12]
 8006974:	6833      	ldreq	r3, [r6, #0]
 8006976:	1aed      	subeq	r5, r5, r3
 8006978:	68a3      	ldr	r3, [r4, #8]
 800697a:	bf0c      	ite	eq
 800697c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006980:	2500      	movne	r5, #0
 8006982:	4293      	cmp	r3, r2
 8006984:	bfc4      	itt	gt
 8006986:	1a9b      	subgt	r3, r3, r2
 8006988:	18ed      	addgt	r5, r5, r3
 800698a:	2600      	movs	r6, #0
 800698c:	341a      	adds	r4, #26
 800698e:	42b5      	cmp	r5, r6
 8006990:	d11a      	bne.n	80069c8 <_printf_common+0xc8>
 8006992:	2000      	movs	r0, #0
 8006994:	e008      	b.n	80069a8 <_printf_common+0xa8>
 8006996:	2301      	movs	r3, #1
 8006998:	4652      	mov	r2, sl
 800699a:	4641      	mov	r1, r8
 800699c:	4638      	mov	r0, r7
 800699e:	47c8      	blx	r9
 80069a0:	3001      	adds	r0, #1
 80069a2:	d103      	bne.n	80069ac <_printf_common+0xac>
 80069a4:	f04f 30ff 	mov.w	r0, #4294967295
 80069a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ac:	3501      	adds	r5, #1
 80069ae:	e7c6      	b.n	800693e <_printf_common+0x3e>
 80069b0:	18e1      	adds	r1, r4, r3
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	2030      	movs	r0, #48	@ 0x30
 80069b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069ba:	4422      	add	r2, r4
 80069bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069c4:	3302      	adds	r3, #2
 80069c6:	e7c7      	b.n	8006958 <_printf_common+0x58>
 80069c8:	2301      	movs	r3, #1
 80069ca:	4622      	mov	r2, r4
 80069cc:	4641      	mov	r1, r8
 80069ce:	4638      	mov	r0, r7
 80069d0:	47c8      	blx	r9
 80069d2:	3001      	adds	r0, #1
 80069d4:	d0e6      	beq.n	80069a4 <_printf_common+0xa4>
 80069d6:	3601      	adds	r6, #1
 80069d8:	e7d9      	b.n	800698e <_printf_common+0x8e>
	...

080069dc <_printf_i>:
 80069dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069e0:	7e0f      	ldrb	r7, [r1, #24]
 80069e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069e4:	2f78      	cmp	r7, #120	@ 0x78
 80069e6:	4691      	mov	r9, r2
 80069e8:	4680      	mov	r8, r0
 80069ea:	460c      	mov	r4, r1
 80069ec:	469a      	mov	sl, r3
 80069ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069f2:	d807      	bhi.n	8006a04 <_printf_i+0x28>
 80069f4:	2f62      	cmp	r7, #98	@ 0x62
 80069f6:	d80a      	bhi.n	8006a0e <_printf_i+0x32>
 80069f8:	2f00      	cmp	r7, #0
 80069fa:	f000 80d2 	beq.w	8006ba2 <_printf_i+0x1c6>
 80069fe:	2f58      	cmp	r7, #88	@ 0x58
 8006a00:	f000 80b9 	beq.w	8006b76 <_printf_i+0x19a>
 8006a04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a0c:	e03a      	b.n	8006a84 <_printf_i+0xa8>
 8006a0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a12:	2b15      	cmp	r3, #21
 8006a14:	d8f6      	bhi.n	8006a04 <_printf_i+0x28>
 8006a16:	a101      	add	r1, pc, #4	@ (adr r1, 8006a1c <_printf_i+0x40>)
 8006a18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a1c:	08006a75 	.word	0x08006a75
 8006a20:	08006a89 	.word	0x08006a89
 8006a24:	08006a05 	.word	0x08006a05
 8006a28:	08006a05 	.word	0x08006a05
 8006a2c:	08006a05 	.word	0x08006a05
 8006a30:	08006a05 	.word	0x08006a05
 8006a34:	08006a89 	.word	0x08006a89
 8006a38:	08006a05 	.word	0x08006a05
 8006a3c:	08006a05 	.word	0x08006a05
 8006a40:	08006a05 	.word	0x08006a05
 8006a44:	08006a05 	.word	0x08006a05
 8006a48:	08006b89 	.word	0x08006b89
 8006a4c:	08006ab3 	.word	0x08006ab3
 8006a50:	08006b43 	.word	0x08006b43
 8006a54:	08006a05 	.word	0x08006a05
 8006a58:	08006a05 	.word	0x08006a05
 8006a5c:	08006bab 	.word	0x08006bab
 8006a60:	08006a05 	.word	0x08006a05
 8006a64:	08006ab3 	.word	0x08006ab3
 8006a68:	08006a05 	.word	0x08006a05
 8006a6c:	08006a05 	.word	0x08006a05
 8006a70:	08006b4b 	.word	0x08006b4b
 8006a74:	6833      	ldr	r3, [r6, #0]
 8006a76:	1d1a      	adds	r2, r3, #4
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6032      	str	r2, [r6, #0]
 8006a7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a84:	2301      	movs	r3, #1
 8006a86:	e09d      	b.n	8006bc4 <_printf_i+0x1e8>
 8006a88:	6833      	ldr	r3, [r6, #0]
 8006a8a:	6820      	ldr	r0, [r4, #0]
 8006a8c:	1d19      	adds	r1, r3, #4
 8006a8e:	6031      	str	r1, [r6, #0]
 8006a90:	0606      	lsls	r6, r0, #24
 8006a92:	d501      	bpl.n	8006a98 <_printf_i+0xbc>
 8006a94:	681d      	ldr	r5, [r3, #0]
 8006a96:	e003      	b.n	8006aa0 <_printf_i+0xc4>
 8006a98:	0645      	lsls	r5, r0, #25
 8006a9a:	d5fb      	bpl.n	8006a94 <_printf_i+0xb8>
 8006a9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006aa0:	2d00      	cmp	r5, #0
 8006aa2:	da03      	bge.n	8006aac <_printf_i+0xd0>
 8006aa4:	232d      	movs	r3, #45	@ 0x2d
 8006aa6:	426d      	negs	r5, r5
 8006aa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006aac:	4859      	ldr	r0, [pc, #356]	@ (8006c14 <_printf_i+0x238>)
 8006aae:	230a      	movs	r3, #10
 8006ab0:	e011      	b.n	8006ad6 <_printf_i+0xfa>
 8006ab2:	6821      	ldr	r1, [r4, #0]
 8006ab4:	6833      	ldr	r3, [r6, #0]
 8006ab6:	0608      	lsls	r0, r1, #24
 8006ab8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006abc:	d402      	bmi.n	8006ac4 <_printf_i+0xe8>
 8006abe:	0649      	lsls	r1, r1, #25
 8006ac0:	bf48      	it	mi
 8006ac2:	b2ad      	uxthmi	r5, r5
 8006ac4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ac6:	4853      	ldr	r0, [pc, #332]	@ (8006c14 <_printf_i+0x238>)
 8006ac8:	6033      	str	r3, [r6, #0]
 8006aca:	bf14      	ite	ne
 8006acc:	230a      	movne	r3, #10
 8006ace:	2308      	moveq	r3, #8
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ad6:	6866      	ldr	r6, [r4, #4]
 8006ad8:	60a6      	str	r6, [r4, #8]
 8006ada:	2e00      	cmp	r6, #0
 8006adc:	bfa2      	ittt	ge
 8006ade:	6821      	ldrge	r1, [r4, #0]
 8006ae0:	f021 0104 	bicge.w	r1, r1, #4
 8006ae4:	6021      	strge	r1, [r4, #0]
 8006ae6:	b90d      	cbnz	r5, 8006aec <_printf_i+0x110>
 8006ae8:	2e00      	cmp	r6, #0
 8006aea:	d04b      	beq.n	8006b84 <_printf_i+0x1a8>
 8006aec:	4616      	mov	r6, r2
 8006aee:	fbb5 f1f3 	udiv	r1, r5, r3
 8006af2:	fb03 5711 	mls	r7, r3, r1, r5
 8006af6:	5dc7      	ldrb	r7, [r0, r7]
 8006af8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006afc:	462f      	mov	r7, r5
 8006afe:	42bb      	cmp	r3, r7
 8006b00:	460d      	mov	r5, r1
 8006b02:	d9f4      	bls.n	8006aee <_printf_i+0x112>
 8006b04:	2b08      	cmp	r3, #8
 8006b06:	d10b      	bne.n	8006b20 <_printf_i+0x144>
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	07df      	lsls	r7, r3, #31
 8006b0c:	d508      	bpl.n	8006b20 <_printf_i+0x144>
 8006b0e:	6923      	ldr	r3, [r4, #16]
 8006b10:	6861      	ldr	r1, [r4, #4]
 8006b12:	4299      	cmp	r1, r3
 8006b14:	bfde      	ittt	le
 8006b16:	2330      	movle	r3, #48	@ 0x30
 8006b18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b20:	1b92      	subs	r2, r2, r6
 8006b22:	6122      	str	r2, [r4, #16]
 8006b24:	f8cd a000 	str.w	sl, [sp]
 8006b28:	464b      	mov	r3, r9
 8006b2a:	aa03      	add	r2, sp, #12
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	4640      	mov	r0, r8
 8006b30:	f7ff fee6 	bl	8006900 <_printf_common>
 8006b34:	3001      	adds	r0, #1
 8006b36:	d14a      	bne.n	8006bce <_printf_i+0x1f2>
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	b004      	add	sp, #16
 8006b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	f043 0320 	orr.w	r3, r3, #32
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	4833      	ldr	r0, [pc, #204]	@ (8006c18 <_printf_i+0x23c>)
 8006b4c:	2778      	movs	r7, #120	@ 0x78
 8006b4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	6831      	ldr	r1, [r6, #0]
 8006b56:	061f      	lsls	r7, r3, #24
 8006b58:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b5c:	d402      	bmi.n	8006b64 <_printf_i+0x188>
 8006b5e:	065f      	lsls	r7, r3, #25
 8006b60:	bf48      	it	mi
 8006b62:	b2ad      	uxthmi	r5, r5
 8006b64:	6031      	str	r1, [r6, #0]
 8006b66:	07d9      	lsls	r1, r3, #31
 8006b68:	bf44      	itt	mi
 8006b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8006b6e:	6023      	strmi	r3, [r4, #0]
 8006b70:	b11d      	cbz	r5, 8006b7a <_printf_i+0x19e>
 8006b72:	2310      	movs	r3, #16
 8006b74:	e7ac      	b.n	8006ad0 <_printf_i+0xf4>
 8006b76:	4827      	ldr	r0, [pc, #156]	@ (8006c14 <_printf_i+0x238>)
 8006b78:	e7e9      	b.n	8006b4e <_printf_i+0x172>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	f023 0320 	bic.w	r3, r3, #32
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	e7f6      	b.n	8006b72 <_printf_i+0x196>
 8006b84:	4616      	mov	r6, r2
 8006b86:	e7bd      	b.n	8006b04 <_printf_i+0x128>
 8006b88:	6833      	ldr	r3, [r6, #0]
 8006b8a:	6825      	ldr	r5, [r4, #0]
 8006b8c:	6961      	ldr	r1, [r4, #20]
 8006b8e:	1d18      	adds	r0, r3, #4
 8006b90:	6030      	str	r0, [r6, #0]
 8006b92:	062e      	lsls	r6, r5, #24
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	d501      	bpl.n	8006b9c <_printf_i+0x1c0>
 8006b98:	6019      	str	r1, [r3, #0]
 8006b9a:	e002      	b.n	8006ba2 <_printf_i+0x1c6>
 8006b9c:	0668      	lsls	r0, r5, #25
 8006b9e:	d5fb      	bpl.n	8006b98 <_printf_i+0x1bc>
 8006ba0:	8019      	strh	r1, [r3, #0]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	6123      	str	r3, [r4, #16]
 8006ba6:	4616      	mov	r6, r2
 8006ba8:	e7bc      	b.n	8006b24 <_printf_i+0x148>
 8006baa:	6833      	ldr	r3, [r6, #0]
 8006bac:	1d1a      	adds	r2, r3, #4
 8006bae:	6032      	str	r2, [r6, #0]
 8006bb0:	681e      	ldr	r6, [r3, #0]
 8006bb2:	6862      	ldr	r2, [r4, #4]
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f7f9 fb0a 	bl	80001d0 <memchr>
 8006bbc:	b108      	cbz	r0, 8006bc2 <_printf_i+0x1e6>
 8006bbe:	1b80      	subs	r0, r0, r6
 8006bc0:	6060      	str	r0, [r4, #4]
 8006bc2:	6863      	ldr	r3, [r4, #4]
 8006bc4:	6123      	str	r3, [r4, #16]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bcc:	e7aa      	b.n	8006b24 <_printf_i+0x148>
 8006bce:	6923      	ldr	r3, [r4, #16]
 8006bd0:	4632      	mov	r2, r6
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	47d0      	blx	sl
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d0ad      	beq.n	8006b38 <_printf_i+0x15c>
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	079b      	lsls	r3, r3, #30
 8006be0:	d413      	bmi.n	8006c0a <_printf_i+0x22e>
 8006be2:	68e0      	ldr	r0, [r4, #12]
 8006be4:	9b03      	ldr	r3, [sp, #12]
 8006be6:	4298      	cmp	r0, r3
 8006be8:	bfb8      	it	lt
 8006bea:	4618      	movlt	r0, r3
 8006bec:	e7a6      	b.n	8006b3c <_printf_i+0x160>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	4632      	mov	r2, r6
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	47d0      	blx	sl
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	d09d      	beq.n	8006b38 <_printf_i+0x15c>
 8006bfc:	3501      	adds	r5, #1
 8006bfe:	68e3      	ldr	r3, [r4, #12]
 8006c00:	9903      	ldr	r1, [sp, #12]
 8006c02:	1a5b      	subs	r3, r3, r1
 8006c04:	42ab      	cmp	r3, r5
 8006c06:	dcf2      	bgt.n	8006bee <_printf_i+0x212>
 8006c08:	e7eb      	b.n	8006be2 <_printf_i+0x206>
 8006c0a:	2500      	movs	r5, #0
 8006c0c:	f104 0619 	add.w	r6, r4, #25
 8006c10:	e7f5      	b.n	8006bfe <_printf_i+0x222>
 8006c12:	bf00      	nop
 8006c14:	08016115 	.word	0x08016115
 8006c18:	08016126 	.word	0x08016126

08006c1c <_scanf_float>:
 8006c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c20:	b087      	sub	sp, #28
 8006c22:	4617      	mov	r7, r2
 8006c24:	9303      	str	r3, [sp, #12]
 8006c26:	688b      	ldr	r3, [r1, #8]
 8006c28:	1e5a      	subs	r2, r3, #1
 8006c2a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006c2e:	bf81      	itttt	hi
 8006c30:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006c34:	eb03 0b05 	addhi.w	fp, r3, r5
 8006c38:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006c3c:	608b      	strhi	r3, [r1, #8]
 8006c3e:	680b      	ldr	r3, [r1, #0]
 8006c40:	460a      	mov	r2, r1
 8006c42:	f04f 0500 	mov.w	r5, #0
 8006c46:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006c4a:	f842 3b1c 	str.w	r3, [r2], #28
 8006c4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c52:	4680      	mov	r8, r0
 8006c54:	460c      	mov	r4, r1
 8006c56:	bf98      	it	ls
 8006c58:	f04f 0b00 	movls.w	fp, #0
 8006c5c:	9201      	str	r2, [sp, #4]
 8006c5e:	4616      	mov	r6, r2
 8006c60:	46aa      	mov	sl, r5
 8006c62:	46a9      	mov	r9, r5
 8006c64:	9502      	str	r5, [sp, #8]
 8006c66:	68a2      	ldr	r2, [r4, #8]
 8006c68:	b152      	cbz	r2, 8006c80 <_scanf_float+0x64>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006c70:	d864      	bhi.n	8006d3c <_scanf_float+0x120>
 8006c72:	2b40      	cmp	r3, #64	@ 0x40
 8006c74:	d83c      	bhi.n	8006cf0 <_scanf_float+0xd4>
 8006c76:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006c7a:	b2c8      	uxtb	r0, r1
 8006c7c:	280e      	cmp	r0, #14
 8006c7e:	d93a      	bls.n	8006cf6 <_scanf_float+0xda>
 8006c80:	f1b9 0f00 	cmp.w	r9, #0
 8006c84:	d003      	beq.n	8006c8e <_scanf_float+0x72>
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c92:	f1ba 0f01 	cmp.w	sl, #1
 8006c96:	f200 8117 	bhi.w	8006ec8 <_scanf_float+0x2ac>
 8006c9a:	9b01      	ldr	r3, [sp, #4]
 8006c9c:	429e      	cmp	r6, r3
 8006c9e:	f200 8108 	bhi.w	8006eb2 <_scanf_float+0x296>
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	b007      	add	sp, #28
 8006ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006caa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006cae:	2a0d      	cmp	r2, #13
 8006cb0:	d8e6      	bhi.n	8006c80 <_scanf_float+0x64>
 8006cb2:	a101      	add	r1, pc, #4	@ (adr r1, 8006cb8 <_scanf_float+0x9c>)
 8006cb4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cb8:	08006dff 	.word	0x08006dff
 8006cbc:	08006c81 	.word	0x08006c81
 8006cc0:	08006c81 	.word	0x08006c81
 8006cc4:	08006c81 	.word	0x08006c81
 8006cc8:	08006e5f 	.word	0x08006e5f
 8006ccc:	08006e37 	.word	0x08006e37
 8006cd0:	08006c81 	.word	0x08006c81
 8006cd4:	08006c81 	.word	0x08006c81
 8006cd8:	08006e0d 	.word	0x08006e0d
 8006cdc:	08006c81 	.word	0x08006c81
 8006ce0:	08006c81 	.word	0x08006c81
 8006ce4:	08006c81 	.word	0x08006c81
 8006ce8:	08006c81 	.word	0x08006c81
 8006cec:	08006dc5 	.word	0x08006dc5
 8006cf0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006cf4:	e7db      	b.n	8006cae <_scanf_float+0x92>
 8006cf6:	290e      	cmp	r1, #14
 8006cf8:	d8c2      	bhi.n	8006c80 <_scanf_float+0x64>
 8006cfa:	a001      	add	r0, pc, #4	@ (adr r0, 8006d00 <_scanf_float+0xe4>)
 8006cfc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d00:	08006db5 	.word	0x08006db5
 8006d04:	08006c81 	.word	0x08006c81
 8006d08:	08006db5 	.word	0x08006db5
 8006d0c:	08006e4b 	.word	0x08006e4b
 8006d10:	08006c81 	.word	0x08006c81
 8006d14:	08006d5d 	.word	0x08006d5d
 8006d18:	08006d9b 	.word	0x08006d9b
 8006d1c:	08006d9b 	.word	0x08006d9b
 8006d20:	08006d9b 	.word	0x08006d9b
 8006d24:	08006d9b 	.word	0x08006d9b
 8006d28:	08006d9b 	.word	0x08006d9b
 8006d2c:	08006d9b 	.word	0x08006d9b
 8006d30:	08006d9b 	.word	0x08006d9b
 8006d34:	08006d9b 	.word	0x08006d9b
 8006d38:	08006d9b 	.word	0x08006d9b
 8006d3c:	2b6e      	cmp	r3, #110	@ 0x6e
 8006d3e:	d809      	bhi.n	8006d54 <_scanf_float+0x138>
 8006d40:	2b60      	cmp	r3, #96	@ 0x60
 8006d42:	d8b2      	bhi.n	8006caa <_scanf_float+0x8e>
 8006d44:	2b54      	cmp	r3, #84	@ 0x54
 8006d46:	d07b      	beq.n	8006e40 <_scanf_float+0x224>
 8006d48:	2b59      	cmp	r3, #89	@ 0x59
 8006d4a:	d199      	bne.n	8006c80 <_scanf_float+0x64>
 8006d4c:	2d07      	cmp	r5, #7
 8006d4e:	d197      	bne.n	8006c80 <_scanf_float+0x64>
 8006d50:	2508      	movs	r5, #8
 8006d52:	e02c      	b.n	8006dae <_scanf_float+0x192>
 8006d54:	2b74      	cmp	r3, #116	@ 0x74
 8006d56:	d073      	beq.n	8006e40 <_scanf_float+0x224>
 8006d58:	2b79      	cmp	r3, #121	@ 0x79
 8006d5a:	e7f6      	b.n	8006d4a <_scanf_float+0x12e>
 8006d5c:	6821      	ldr	r1, [r4, #0]
 8006d5e:	05c8      	lsls	r0, r1, #23
 8006d60:	d51b      	bpl.n	8006d9a <_scanf_float+0x17e>
 8006d62:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006d66:	6021      	str	r1, [r4, #0]
 8006d68:	f109 0901 	add.w	r9, r9, #1
 8006d6c:	f1bb 0f00 	cmp.w	fp, #0
 8006d70:	d003      	beq.n	8006d7a <_scanf_float+0x15e>
 8006d72:	3201      	adds	r2, #1
 8006d74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d78:	60a2      	str	r2, [r4, #8]
 8006d7a:	68a3      	ldr	r3, [r4, #8]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	60a3      	str	r3, [r4, #8]
 8006d80:	6923      	ldr	r3, [r4, #16]
 8006d82:	3301      	adds	r3, #1
 8006d84:	6123      	str	r3, [r4, #16]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	607b      	str	r3, [r7, #4]
 8006d8e:	f340 8087 	ble.w	8006ea0 <_scanf_float+0x284>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	3301      	adds	r3, #1
 8006d96:	603b      	str	r3, [r7, #0]
 8006d98:	e765      	b.n	8006c66 <_scanf_float+0x4a>
 8006d9a:	eb1a 0105 	adds.w	r1, sl, r5
 8006d9e:	f47f af6f 	bne.w	8006c80 <_scanf_float+0x64>
 8006da2:	6822      	ldr	r2, [r4, #0]
 8006da4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006da8:	6022      	str	r2, [r4, #0]
 8006daa:	460d      	mov	r5, r1
 8006dac:	468a      	mov	sl, r1
 8006dae:	f806 3b01 	strb.w	r3, [r6], #1
 8006db2:	e7e2      	b.n	8006d7a <_scanf_float+0x15e>
 8006db4:	6822      	ldr	r2, [r4, #0]
 8006db6:	0610      	lsls	r0, r2, #24
 8006db8:	f57f af62 	bpl.w	8006c80 <_scanf_float+0x64>
 8006dbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006dc0:	6022      	str	r2, [r4, #0]
 8006dc2:	e7f4      	b.n	8006dae <_scanf_float+0x192>
 8006dc4:	f1ba 0f00 	cmp.w	sl, #0
 8006dc8:	d10e      	bne.n	8006de8 <_scanf_float+0x1cc>
 8006dca:	f1b9 0f00 	cmp.w	r9, #0
 8006dce:	d10e      	bne.n	8006dee <_scanf_float+0x1d2>
 8006dd0:	6822      	ldr	r2, [r4, #0]
 8006dd2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006dd6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006dda:	d108      	bne.n	8006dee <_scanf_float+0x1d2>
 8006ddc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006de0:	6022      	str	r2, [r4, #0]
 8006de2:	f04f 0a01 	mov.w	sl, #1
 8006de6:	e7e2      	b.n	8006dae <_scanf_float+0x192>
 8006de8:	f1ba 0f02 	cmp.w	sl, #2
 8006dec:	d055      	beq.n	8006e9a <_scanf_float+0x27e>
 8006dee:	2d01      	cmp	r5, #1
 8006df0:	d002      	beq.n	8006df8 <_scanf_float+0x1dc>
 8006df2:	2d04      	cmp	r5, #4
 8006df4:	f47f af44 	bne.w	8006c80 <_scanf_float+0x64>
 8006df8:	3501      	adds	r5, #1
 8006dfa:	b2ed      	uxtb	r5, r5
 8006dfc:	e7d7      	b.n	8006dae <_scanf_float+0x192>
 8006dfe:	f1ba 0f01 	cmp.w	sl, #1
 8006e02:	f47f af3d 	bne.w	8006c80 <_scanf_float+0x64>
 8006e06:	f04f 0a02 	mov.w	sl, #2
 8006e0a:	e7d0      	b.n	8006dae <_scanf_float+0x192>
 8006e0c:	b97d      	cbnz	r5, 8006e2e <_scanf_float+0x212>
 8006e0e:	f1b9 0f00 	cmp.w	r9, #0
 8006e12:	f47f af38 	bne.w	8006c86 <_scanf_float+0x6a>
 8006e16:	6822      	ldr	r2, [r4, #0]
 8006e18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e20:	f040 8108 	bne.w	8007034 <_scanf_float+0x418>
 8006e24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e28:	6022      	str	r2, [r4, #0]
 8006e2a:	2501      	movs	r5, #1
 8006e2c:	e7bf      	b.n	8006dae <_scanf_float+0x192>
 8006e2e:	2d03      	cmp	r5, #3
 8006e30:	d0e2      	beq.n	8006df8 <_scanf_float+0x1dc>
 8006e32:	2d05      	cmp	r5, #5
 8006e34:	e7de      	b.n	8006df4 <_scanf_float+0x1d8>
 8006e36:	2d02      	cmp	r5, #2
 8006e38:	f47f af22 	bne.w	8006c80 <_scanf_float+0x64>
 8006e3c:	2503      	movs	r5, #3
 8006e3e:	e7b6      	b.n	8006dae <_scanf_float+0x192>
 8006e40:	2d06      	cmp	r5, #6
 8006e42:	f47f af1d 	bne.w	8006c80 <_scanf_float+0x64>
 8006e46:	2507      	movs	r5, #7
 8006e48:	e7b1      	b.n	8006dae <_scanf_float+0x192>
 8006e4a:	6822      	ldr	r2, [r4, #0]
 8006e4c:	0591      	lsls	r1, r2, #22
 8006e4e:	f57f af17 	bpl.w	8006c80 <_scanf_float+0x64>
 8006e52:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006e56:	6022      	str	r2, [r4, #0]
 8006e58:	f8cd 9008 	str.w	r9, [sp, #8]
 8006e5c:	e7a7      	b.n	8006dae <_scanf_float+0x192>
 8006e5e:	6822      	ldr	r2, [r4, #0]
 8006e60:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006e64:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006e68:	d006      	beq.n	8006e78 <_scanf_float+0x25c>
 8006e6a:	0550      	lsls	r0, r2, #21
 8006e6c:	f57f af08 	bpl.w	8006c80 <_scanf_float+0x64>
 8006e70:	f1b9 0f00 	cmp.w	r9, #0
 8006e74:	f000 80de 	beq.w	8007034 <_scanf_float+0x418>
 8006e78:	0591      	lsls	r1, r2, #22
 8006e7a:	bf58      	it	pl
 8006e7c:	9902      	ldrpl	r1, [sp, #8]
 8006e7e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e82:	bf58      	it	pl
 8006e84:	eba9 0101 	subpl.w	r1, r9, r1
 8006e88:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006e8c:	bf58      	it	pl
 8006e8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e92:	6022      	str	r2, [r4, #0]
 8006e94:	f04f 0900 	mov.w	r9, #0
 8006e98:	e789      	b.n	8006dae <_scanf_float+0x192>
 8006e9a:	f04f 0a03 	mov.w	sl, #3
 8006e9e:	e786      	b.n	8006dae <_scanf_float+0x192>
 8006ea0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006ea4:	4639      	mov	r1, r7
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	4798      	blx	r3
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	f43f aedb 	beq.w	8006c66 <_scanf_float+0x4a>
 8006eb0:	e6e6      	b.n	8006c80 <_scanf_float+0x64>
 8006eb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006eb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006eba:	463a      	mov	r2, r7
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	4798      	blx	r3
 8006ec0:	6923      	ldr	r3, [r4, #16]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	6123      	str	r3, [r4, #16]
 8006ec6:	e6e8      	b.n	8006c9a <_scanf_float+0x7e>
 8006ec8:	1e6b      	subs	r3, r5, #1
 8006eca:	2b06      	cmp	r3, #6
 8006ecc:	d824      	bhi.n	8006f18 <_scanf_float+0x2fc>
 8006ece:	2d02      	cmp	r5, #2
 8006ed0:	d836      	bhi.n	8006f40 <_scanf_float+0x324>
 8006ed2:	9b01      	ldr	r3, [sp, #4]
 8006ed4:	429e      	cmp	r6, r3
 8006ed6:	f67f aee4 	bls.w	8006ca2 <_scanf_float+0x86>
 8006eda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ede:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ee2:	463a      	mov	r2, r7
 8006ee4:	4640      	mov	r0, r8
 8006ee6:	4798      	blx	r3
 8006ee8:	6923      	ldr	r3, [r4, #16]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	6123      	str	r3, [r4, #16]
 8006eee:	e7f0      	b.n	8006ed2 <_scanf_float+0x2b6>
 8006ef0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ef4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006ef8:	463a      	mov	r2, r7
 8006efa:	4640      	mov	r0, r8
 8006efc:	4798      	blx	r3
 8006efe:	6923      	ldr	r3, [r4, #16]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	6123      	str	r3, [r4, #16]
 8006f04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f08:	fa5f fa8a 	uxtb.w	sl, sl
 8006f0c:	f1ba 0f02 	cmp.w	sl, #2
 8006f10:	d1ee      	bne.n	8006ef0 <_scanf_float+0x2d4>
 8006f12:	3d03      	subs	r5, #3
 8006f14:	b2ed      	uxtb	r5, r5
 8006f16:	1b76      	subs	r6, r6, r5
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	05da      	lsls	r2, r3, #23
 8006f1c:	d530      	bpl.n	8006f80 <_scanf_float+0x364>
 8006f1e:	055b      	lsls	r3, r3, #21
 8006f20:	d511      	bpl.n	8006f46 <_scanf_float+0x32a>
 8006f22:	9b01      	ldr	r3, [sp, #4]
 8006f24:	429e      	cmp	r6, r3
 8006f26:	f67f aebc 	bls.w	8006ca2 <_scanf_float+0x86>
 8006f2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f32:	463a      	mov	r2, r7
 8006f34:	4640      	mov	r0, r8
 8006f36:	4798      	blx	r3
 8006f38:	6923      	ldr	r3, [r4, #16]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	6123      	str	r3, [r4, #16]
 8006f3e:	e7f0      	b.n	8006f22 <_scanf_float+0x306>
 8006f40:	46aa      	mov	sl, r5
 8006f42:	46b3      	mov	fp, r6
 8006f44:	e7de      	b.n	8006f04 <_scanf_float+0x2e8>
 8006f46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f4a:	6923      	ldr	r3, [r4, #16]
 8006f4c:	2965      	cmp	r1, #101	@ 0x65
 8006f4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f52:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f56:	6123      	str	r3, [r4, #16]
 8006f58:	d00c      	beq.n	8006f74 <_scanf_float+0x358>
 8006f5a:	2945      	cmp	r1, #69	@ 0x45
 8006f5c:	d00a      	beq.n	8006f74 <_scanf_float+0x358>
 8006f5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f62:	463a      	mov	r2, r7
 8006f64:	4640      	mov	r0, r8
 8006f66:	4798      	blx	r3
 8006f68:	6923      	ldr	r3, [r4, #16]
 8006f6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	1eb5      	subs	r5, r6, #2
 8006f72:	6123      	str	r3, [r4, #16]
 8006f74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f78:	463a      	mov	r2, r7
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	4798      	blx	r3
 8006f7e:	462e      	mov	r6, r5
 8006f80:	6822      	ldr	r2, [r4, #0]
 8006f82:	f012 0210 	ands.w	r2, r2, #16
 8006f86:	d001      	beq.n	8006f8c <_scanf_float+0x370>
 8006f88:	2000      	movs	r0, #0
 8006f8a:	e68b      	b.n	8006ca4 <_scanf_float+0x88>
 8006f8c:	7032      	strb	r2, [r6, #0]
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f98:	d11c      	bne.n	8006fd4 <_scanf_float+0x3b8>
 8006f9a:	9b02      	ldr	r3, [sp, #8]
 8006f9c:	454b      	cmp	r3, r9
 8006f9e:	eba3 0209 	sub.w	r2, r3, r9
 8006fa2:	d123      	bne.n	8006fec <_scanf_float+0x3d0>
 8006fa4:	9901      	ldr	r1, [sp, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4640      	mov	r0, r8
 8006faa:	f002 fd29 	bl	8009a00 <_strtod_r>
 8006fae:	9b03      	ldr	r3, [sp, #12]
 8006fb0:	6821      	ldr	r1, [r4, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f011 0f02 	tst.w	r1, #2
 8006fb8:	ec57 6b10 	vmov	r6, r7, d0
 8006fbc:	f103 0204 	add.w	r2, r3, #4
 8006fc0:	d01f      	beq.n	8007002 <_scanf_float+0x3e6>
 8006fc2:	9903      	ldr	r1, [sp, #12]
 8006fc4:	600a      	str	r2, [r1, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	e9c3 6700 	strd	r6, r7, [r3]
 8006fcc:	68e3      	ldr	r3, [r4, #12]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	60e3      	str	r3, [r4, #12]
 8006fd2:	e7d9      	b.n	8006f88 <_scanf_float+0x36c>
 8006fd4:	9b04      	ldr	r3, [sp, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d0e4      	beq.n	8006fa4 <_scanf_float+0x388>
 8006fda:	9905      	ldr	r1, [sp, #20]
 8006fdc:	230a      	movs	r3, #10
 8006fde:	3101      	adds	r1, #1
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	f002 fd8d 	bl	8009b00 <_strtol_r>
 8006fe6:	9b04      	ldr	r3, [sp, #16]
 8006fe8:	9e05      	ldr	r6, [sp, #20]
 8006fea:	1ac2      	subs	r2, r0, r3
 8006fec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006ff0:	429e      	cmp	r6, r3
 8006ff2:	bf28      	it	cs
 8006ff4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006ff8:	4910      	ldr	r1, [pc, #64]	@ (800703c <_scanf_float+0x420>)
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f000 f954 	bl	80072a8 <siprintf>
 8007000:	e7d0      	b.n	8006fa4 <_scanf_float+0x388>
 8007002:	f011 0f04 	tst.w	r1, #4
 8007006:	9903      	ldr	r1, [sp, #12]
 8007008:	600a      	str	r2, [r1, #0]
 800700a:	d1dc      	bne.n	8006fc6 <_scanf_float+0x3aa>
 800700c:	681d      	ldr	r5, [r3, #0]
 800700e:	4632      	mov	r2, r6
 8007010:	463b      	mov	r3, r7
 8007012:	4630      	mov	r0, r6
 8007014:	4639      	mov	r1, r7
 8007016:	f7f9 fd89 	bl	8000b2c <__aeabi_dcmpun>
 800701a:	b128      	cbz	r0, 8007028 <_scanf_float+0x40c>
 800701c:	4808      	ldr	r0, [pc, #32]	@ (8007040 <_scanf_float+0x424>)
 800701e:	f000 fac9 	bl	80075b4 <nanf>
 8007022:	ed85 0a00 	vstr	s0, [r5]
 8007026:	e7d1      	b.n	8006fcc <_scanf_float+0x3b0>
 8007028:	4630      	mov	r0, r6
 800702a:	4639      	mov	r1, r7
 800702c:	f7f9 fddc 	bl	8000be8 <__aeabi_d2f>
 8007030:	6028      	str	r0, [r5, #0]
 8007032:	e7cb      	b.n	8006fcc <_scanf_float+0x3b0>
 8007034:	f04f 0900 	mov.w	r9, #0
 8007038:	e629      	b.n	8006c8e <_scanf_float+0x72>
 800703a:	bf00      	nop
 800703c:	08016137 	.word	0x08016137
 8007040:	08016177 	.word	0x08016177

08007044 <std>:
 8007044:	2300      	movs	r3, #0
 8007046:	b510      	push	{r4, lr}
 8007048:	4604      	mov	r4, r0
 800704a:	e9c0 3300 	strd	r3, r3, [r0]
 800704e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007052:	6083      	str	r3, [r0, #8]
 8007054:	8181      	strh	r1, [r0, #12]
 8007056:	6643      	str	r3, [r0, #100]	@ 0x64
 8007058:	81c2      	strh	r2, [r0, #14]
 800705a:	6183      	str	r3, [r0, #24]
 800705c:	4619      	mov	r1, r3
 800705e:	2208      	movs	r2, #8
 8007060:	305c      	adds	r0, #92	@ 0x5c
 8007062:	f000 fa19 	bl	8007498 <memset>
 8007066:	4b0d      	ldr	r3, [pc, #52]	@ (800709c <std+0x58>)
 8007068:	6263      	str	r3, [r4, #36]	@ 0x24
 800706a:	4b0d      	ldr	r3, [pc, #52]	@ (80070a0 <std+0x5c>)
 800706c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800706e:	4b0d      	ldr	r3, [pc, #52]	@ (80070a4 <std+0x60>)
 8007070:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007072:	4b0d      	ldr	r3, [pc, #52]	@ (80070a8 <std+0x64>)
 8007074:	6323      	str	r3, [r4, #48]	@ 0x30
 8007076:	4b0d      	ldr	r3, [pc, #52]	@ (80070ac <std+0x68>)
 8007078:	6224      	str	r4, [r4, #32]
 800707a:	429c      	cmp	r4, r3
 800707c:	d006      	beq.n	800708c <std+0x48>
 800707e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007082:	4294      	cmp	r4, r2
 8007084:	d002      	beq.n	800708c <std+0x48>
 8007086:	33d0      	adds	r3, #208	@ 0xd0
 8007088:	429c      	cmp	r4, r3
 800708a:	d105      	bne.n	8007098 <std+0x54>
 800708c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007094:	f000 ba7c 	b.w	8007590 <__retarget_lock_init_recursive>
 8007098:	bd10      	pop	{r4, pc}
 800709a:	bf00      	nop
 800709c:	080072e9 	.word	0x080072e9
 80070a0:	0800730b 	.word	0x0800730b
 80070a4:	08007343 	.word	0x08007343
 80070a8:	08007367 	.word	0x08007367
 80070ac:	200002e8 	.word	0x200002e8

080070b0 <stdio_exit_handler>:
 80070b0:	4a02      	ldr	r2, [pc, #8]	@ (80070bc <stdio_exit_handler+0xc>)
 80070b2:	4903      	ldr	r1, [pc, #12]	@ (80070c0 <stdio_exit_handler+0x10>)
 80070b4:	4803      	ldr	r0, [pc, #12]	@ (80070c4 <stdio_exit_handler+0x14>)
 80070b6:	f000 b869 	b.w	800718c <_fwalk_sglue>
 80070ba:	bf00      	nop
 80070bc:	2000001c 	.word	0x2000001c
 80070c0:	0800a141 	.word	0x0800a141
 80070c4:	2000002c 	.word	0x2000002c

080070c8 <cleanup_stdio>:
 80070c8:	6841      	ldr	r1, [r0, #4]
 80070ca:	4b0c      	ldr	r3, [pc, #48]	@ (80070fc <cleanup_stdio+0x34>)
 80070cc:	4299      	cmp	r1, r3
 80070ce:	b510      	push	{r4, lr}
 80070d0:	4604      	mov	r4, r0
 80070d2:	d001      	beq.n	80070d8 <cleanup_stdio+0x10>
 80070d4:	f003 f834 	bl	800a140 <_fflush_r>
 80070d8:	68a1      	ldr	r1, [r4, #8]
 80070da:	4b09      	ldr	r3, [pc, #36]	@ (8007100 <cleanup_stdio+0x38>)
 80070dc:	4299      	cmp	r1, r3
 80070de:	d002      	beq.n	80070e6 <cleanup_stdio+0x1e>
 80070e0:	4620      	mov	r0, r4
 80070e2:	f003 f82d 	bl	800a140 <_fflush_r>
 80070e6:	68e1      	ldr	r1, [r4, #12]
 80070e8:	4b06      	ldr	r3, [pc, #24]	@ (8007104 <cleanup_stdio+0x3c>)
 80070ea:	4299      	cmp	r1, r3
 80070ec:	d004      	beq.n	80070f8 <cleanup_stdio+0x30>
 80070ee:	4620      	mov	r0, r4
 80070f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070f4:	f003 b824 	b.w	800a140 <_fflush_r>
 80070f8:	bd10      	pop	{r4, pc}
 80070fa:	bf00      	nop
 80070fc:	200002e8 	.word	0x200002e8
 8007100:	20000350 	.word	0x20000350
 8007104:	200003b8 	.word	0x200003b8

08007108 <global_stdio_init.part.0>:
 8007108:	b510      	push	{r4, lr}
 800710a:	4b0b      	ldr	r3, [pc, #44]	@ (8007138 <global_stdio_init.part.0+0x30>)
 800710c:	4c0b      	ldr	r4, [pc, #44]	@ (800713c <global_stdio_init.part.0+0x34>)
 800710e:	4a0c      	ldr	r2, [pc, #48]	@ (8007140 <global_stdio_init.part.0+0x38>)
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	4620      	mov	r0, r4
 8007114:	2200      	movs	r2, #0
 8007116:	2104      	movs	r1, #4
 8007118:	f7ff ff94 	bl	8007044 <std>
 800711c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007120:	2201      	movs	r2, #1
 8007122:	2109      	movs	r1, #9
 8007124:	f7ff ff8e 	bl	8007044 <std>
 8007128:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800712c:	2202      	movs	r2, #2
 800712e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007132:	2112      	movs	r1, #18
 8007134:	f7ff bf86 	b.w	8007044 <std>
 8007138:	20000420 	.word	0x20000420
 800713c:	200002e8 	.word	0x200002e8
 8007140:	080070b1 	.word	0x080070b1

08007144 <__sfp_lock_acquire>:
 8007144:	4801      	ldr	r0, [pc, #4]	@ (800714c <__sfp_lock_acquire+0x8>)
 8007146:	f000 ba24 	b.w	8007592 <__retarget_lock_acquire_recursive>
 800714a:	bf00      	nop
 800714c:	20000429 	.word	0x20000429

08007150 <__sfp_lock_release>:
 8007150:	4801      	ldr	r0, [pc, #4]	@ (8007158 <__sfp_lock_release+0x8>)
 8007152:	f000 ba1f 	b.w	8007594 <__retarget_lock_release_recursive>
 8007156:	bf00      	nop
 8007158:	20000429 	.word	0x20000429

0800715c <__sinit>:
 800715c:	b510      	push	{r4, lr}
 800715e:	4604      	mov	r4, r0
 8007160:	f7ff fff0 	bl	8007144 <__sfp_lock_acquire>
 8007164:	6a23      	ldr	r3, [r4, #32]
 8007166:	b11b      	cbz	r3, 8007170 <__sinit+0x14>
 8007168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800716c:	f7ff bff0 	b.w	8007150 <__sfp_lock_release>
 8007170:	4b04      	ldr	r3, [pc, #16]	@ (8007184 <__sinit+0x28>)
 8007172:	6223      	str	r3, [r4, #32]
 8007174:	4b04      	ldr	r3, [pc, #16]	@ (8007188 <__sinit+0x2c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1f5      	bne.n	8007168 <__sinit+0xc>
 800717c:	f7ff ffc4 	bl	8007108 <global_stdio_init.part.0>
 8007180:	e7f2      	b.n	8007168 <__sinit+0xc>
 8007182:	bf00      	nop
 8007184:	080070c9 	.word	0x080070c9
 8007188:	20000420 	.word	0x20000420

0800718c <_fwalk_sglue>:
 800718c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007190:	4607      	mov	r7, r0
 8007192:	4688      	mov	r8, r1
 8007194:	4614      	mov	r4, r2
 8007196:	2600      	movs	r6, #0
 8007198:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800719c:	f1b9 0901 	subs.w	r9, r9, #1
 80071a0:	d505      	bpl.n	80071ae <_fwalk_sglue+0x22>
 80071a2:	6824      	ldr	r4, [r4, #0]
 80071a4:	2c00      	cmp	r4, #0
 80071a6:	d1f7      	bne.n	8007198 <_fwalk_sglue+0xc>
 80071a8:	4630      	mov	r0, r6
 80071aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ae:	89ab      	ldrh	r3, [r5, #12]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d907      	bls.n	80071c4 <_fwalk_sglue+0x38>
 80071b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071b8:	3301      	adds	r3, #1
 80071ba:	d003      	beq.n	80071c4 <_fwalk_sglue+0x38>
 80071bc:	4629      	mov	r1, r5
 80071be:	4638      	mov	r0, r7
 80071c0:	47c0      	blx	r8
 80071c2:	4306      	orrs	r6, r0
 80071c4:	3568      	adds	r5, #104	@ 0x68
 80071c6:	e7e9      	b.n	800719c <_fwalk_sglue+0x10>

080071c8 <iprintf>:
 80071c8:	b40f      	push	{r0, r1, r2, r3}
 80071ca:	b507      	push	{r0, r1, r2, lr}
 80071cc:	4906      	ldr	r1, [pc, #24]	@ (80071e8 <iprintf+0x20>)
 80071ce:	ab04      	add	r3, sp, #16
 80071d0:	6808      	ldr	r0, [r1, #0]
 80071d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071d6:	6881      	ldr	r1, [r0, #8]
 80071d8:	9301      	str	r3, [sp, #4]
 80071da:	f002 fe15 	bl	8009e08 <_vfiprintf_r>
 80071de:	b003      	add	sp, #12
 80071e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071e4:	b004      	add	sp, #16
 80071e6:	4770      	bx	lr
 80071e8:	20000028 	.word	0x20000028

080071ec <_puts_r>:
 80071ec:	6a03      	ldr	r3, [r0, #32]
 80071ee:	b570      	push	{r4, r5, r6, lr}
 80071f0:	6884      	ldr	r4, [r0, #8]
 80071f2:	4605      	mov	r5, r0
 80071f4:	460e      	mov	r6, r1
 80071f6:	b90b      	cbnz	r3, 80071fc <_puts_r+0x10>
 80071f8:	f7ff ffb0 	bl	800715c <__sinit>
 80071fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071fe:	07db      	lsls	r3, r3, #31
 8007200:	d405      	bmi.n	800720e <_puts_r+0x22>
 8007202:	89a3      	ldrh	r3, [r4, #12]
 8007204:	0598      	lsls	r0, r3, #22
 8007206:	d402      	bmi.n	800720e <_puts_r+0x22>
 8007208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800720a:	f000 f9c2 	bl	8007592 <__retarget_lock_acquire_recursive>
 800720e:	89a3      	ldrh	r3, [r4, #12]
 8007210:	0719      	lsls	r1, r3, #28
 8007212:	d502      	bpl.n	800721a <_puts_r+0x2e>
 8007214:	6923      	ldr	r3, [r4, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d135      	bne.n	8007286 <_puts_r+0x9a>
 800721a:	4621      	mov	r1, r4
 800721c:	4628      	mov	r0, r5
 800721e:	f000 f8e5 	bl	80073ec <__swsetup_r>
 8007222:	b380      	cbz	r0, 8007286 <_puts_r+0x9a>
 8007224:	f04f 35ff 	mov.w	r5, #4294967295
 8007228:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800722a:	07da      	lsls	r2, r3, #31
 800722c:	d405      	bmi.n	800723a <_puts_r+0x4e>
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	059b      	lsls	r3, r3, #22
 8007232:	d402      	bmi.n	800723a <_puts_r+0x4e>
 8007234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007236:	f000 f9ad 	bl	8007594 <__retarget_lock_release_recursive>
 800723a:	4628      	mov	r0, r5
 800723c:	bd70      	pop	{r4, r5, r6, pc}
 800723e:	2b00      	cmp	r3, #0
 8007240:	da04      	bge.n	800724c <_puts_r+0x60>
 8007242:	69a2      	ldr	r2, [r4, #24]
 8007244:	429a      	cmp	r2, r3
 8007246:	dc17      	bgt.n	8007278 <_puts_r+0x8c>
 8007248:	290a      	cmp	r1, #10
 800724a:	d015      	beq.n	8007278 <_puts_r+0x8c>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	6022      	str	r2, [r4, #0]
 8007252:	7019      	strb	r1, [r3, #0]
 8007254:	68a3      	ldr	r3, [r4, #8]
 8007256:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800725a:	3b01      	subs	r3, #1
 800725c:	60a3      	str	r3, [r4, #8]
 800725e:	2900      	cmp	r1, #0
 8007260:	d1ed      	bne.n	800723e <_puts_r+0x52>
 8007262:	2b00      	cmp	r3, #0
 8007264:	da11      	bge.n	800728a <_puts_r+0x9e>
 8007266:	4622      	mov	r2, r4
 8007268:	210a      	movs	r1, #10
 800726a:	4628      	mov	r0, r5
 800726c:	f000 f87f 	bl	800736e <__swbuf_r>
 8007270:	3001      	adds	r0, #1
 8007272:	d0d7      	beq.n	8007224 <_puts_r+0x38>
 8007274:	250a      	movs	r5, #10
 8007276:	e7d7      	b.n	8007228 <_puts_r+0x3c>
 8007278:	4622      	mov	r2, r4
 800727a:	4628      	mov	r0, r5
 800727c:	f000 f877 	bl	800736e <__swbuf_r>
 8007280:	3001      	adds	r0, #1
 8007282:	d1e7      	bne.n	8007254 <_puts_r+0x68>
 8007284:	e7ce      	b.n	8007224 <_puts_r+0x38>
 8007286:	3e01      	subs	r6, #1
 8007288:	e7e4      	b.n	8007254 <_puts_r+0x68>
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	6022      	str	r2, [r4, #0]
 8007290:	220a      	movs	r2, #10
 8007292:	701a      	strb	r2, [r3, #0]
 8007294:	e7ee      	b.n	8007274 <_puts_r+0x88>
	...

08007298 <puts>:
 8007298:	4b02      	ldr	r3, [pc, #8]	@ (80072a4 <puts+0xc>)
 800729a:	4601      	mov	r1, r0
 800729c:	6818      	ldr	r0, [r3, #0]
 800729e:	f7ff bfa5 	b.w	80071ec <_puts_r>
 80072a2:	bf00      	nop
 80072a4:	20000028 	.word	0x20000028

080072a8 <siprintf>:
 80072a8:	b40e      	push	{r1, r2, r3}
 80072aa:	b500      	push	{lr}
 80072ac:	b09c      	sub	sp, #112	@ 0x70
 80072ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80072b0:	9002      	str	r0, [sp, #8]
 80072b2:	9006      	str	r0, [sp, #24]
 80072b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80072b8:	4809      	ldr	r0, [pc, #36]	@ (80072e0 <siprintf+0x38>)
 80072ba:	9107      	str	r1, [sp, #28]
 80072bc:	9104      	str	r1, [sp, #16]
 80072be:	4909      	ldr	r1, [pc, #36]	@ (80072e4 <siprintf+0x3c>)
 80072c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80072c4:	9105      	str	r1, [sp, #20]
 80072c6:	6800      	ldr	r0, [r0, #0]
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	a902      	add	r1, sp, #8
 80072cc:	f002 fc76 	bl	8009bbc <_svfiprintf_r>
 80072d0:	9b02      	ldr	r3, [sp, #8]
 80072d2:	2200      	movs	r2, #0
 80072d4:	701a      	strb	r2, [r3, #0]
 80072d6:	b01c      	add	sp, #112	@ 0x70
 80072d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072dc:	b003      	add	sp, #12
 80072de:	4770      	bx	lr
 80072e0:	20000028 	.word	0x20000028
 80072e4:	ffff0208 	.word	0xffff0208

080072e8 <__sread>:
 80072e8:	b510      	push	{r4, lr}
 80072ea:	460c      	mov	r4, r1
 80072ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f0:	f000 f900 	bl	80074f4 <_read_r>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	bfab      	itete	ge
 80072f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80072fa:	89a3      	ldrhlt	r3, [r4, #12]
 80072fc:	181b      	addge	r3, r3, r0
 80072fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007302:	bfac      	ite	ge
 8007304:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007306:	81a3      	strhlt	r3, [r4, #12]
 8007308:	bd10      	pop	{r4, pc}

0800730a <__swrite>:
 800730a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730e:	461f      	mov	r7, r3
 8007310:	898b      	ldrh	r3, [r1, #12]
 8007312:	05db      	lsls	r3, r3, #23
 8007314:	4605      	mov	r5, r0
 8007316:	460c      	mov	r4, r1
 8007318:	4616      	mov	r6, r2
 800731a:	d505      	bpl.n	8007328 <__swrite+0x1e>
 800731c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007320:	2302      	movs	r3, #2
 8007322:	2200      	movs	r2, #0
 8007324:	f000 f8d4 	bl	80074d0 <_lseek_r>
 8007328:	89a3      	ldrh	r3, [r4, #12]
 800732a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800732e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007332:	81a3      	strh	r3, [r4, #12]
 8007334:	4632      	mov	r2, r6
 8007336:	463b      	mov	r3, r7
 8007338:	4628      	mov	r0, r5
 800733a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800733e:	f000 b8eb 	b.w	8007518 <_write_r>

08007342 <__sseek>:
 8007342:	b510      	push	{r4, lr}
 8007344:	460c      	mov	r4, r1
 8007346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734a:	f000 f8c1 	bl	80074d0 <_lseek_r>
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	89a3      	ldrh	r3, [r4, #12]
 8007352:	bf15      	itete	ne
 8007354:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007356:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800735a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800735e:	81a3      	strheq	r3, [r4, #12]
 8007360:	bf18      	it	ne
 8007362:	81a3      	strhne	r3, [r4, #12]
 8007364:	bd10      	pop	{r4, pc}

08007366 <__sclose>:
 8007366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800736a:	f000 b8a1 	b.w	80074b0 <_close_r>

0800736e <__swbuf_r>:
 800736e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007370:	460e      	mov	r6, r1
 8007372:	4614      	mov	r4, r2
 8007374:	4605      	mov	r5, r0
 8007376:	b118      	cbz	r0, 8007380 <__swbuf_r+0x12>
 8007378:	6a03      	ldr	r3, [r0, #32]
 800737a:	b90b      	cbnz	r3, 8007380 <__swbuf_r+0x12>
 800737c:	f7ff feee 	bl	800715c <__sinit>
 8007380:	69a3      	ldr	r3, [r4, #24]
 8007382:	60a3      	str	r3, [r4, #8]
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	071a      	lsls	r2, r3, #28
 8007388:	d501      	bpl.n	800738e <__swbuf_r+0x20>
 800738a:	6923      	ldr	r3, [r4, #16]
 800738c:	b943      	cbnz	r3, 80073a0 <__swbuf_r+0x32>
 800738e:	4621      	mov	r1, r4
 8007390:	4628      	mov	r0, r5
 8007392:	f000 f82b 	bl	80073ec <__swsetup_r>
 8007396:	b118      	cbz	r0, 80073a0 <__swbuf_r+0x32>
 8007398:	f04f 37ff 	mov.w	r7, #4294967295
 800739c:	4638      	mov	r0, r7
 800739e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	6922      	ldr	r2, [r4, #16]
 80073a4:	1a98      	subs	r0, r3, r2
 80073a6:	6963      	ldr	r3, [r4, #20]
 80073a8:	b2f6      	uxtb	r6, r6
 80073aa:	4283      	cmp	r3, r0
 80073ac:	4637      	mov	r7, r6
 80073ae:	dc05      	bgt.n	80073bc <__swbuf_r+0x4e>
 80073b0:	4621      	mov	r1, r4
 80073b2:	4628      	mov	r0, r5
 80073b4:	f002 fec4 	bl	800a140 <_fflush_r>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d1ed      	bne.n	8007398 <__swbuf_r+0x2a>
 80073bc:	68a3      	ldr	r3, [r4, #8]
 80073be:	3b01      	subs	r3, #1
 80073c0:	60a3      	str	r3, [r4, #8]
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	6022      	str	r2, [r4, #0]
 80073c8:	701e      	strb	r6, [r3, #0]
 80073ca:	6962      	ldr	r2, [r4, #20]
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d004      	beq.n	80073dc <__swbuf_r+0x6e>
 80073d2:	89a3      	ldrh	r3, [r4, #12]
 80073d4:	07db      	lsls	r3, r3, #31
 80073d6:	d5e1      	bpl.n	800739c <__swbuf_r+0x2e>
 80073d8:	2e0a      	cmp	r6, #10
 80073da:	d1df      	bne.n	800739c <__swbuf_r+0x2e>
 80073dc:	4621      	mov	r1, r4
 80073de:	4628      	mov	r0, r5
 80073e0:	f002 feae 	bl	800a140 <_fflush_r>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	d0d9      	beq.n	800739c <__swbuf_r+0x2e>
 80073e8:	e7d6      	b.n	8007398 <__swbuf_r+0x2a>
	...

080073ec <__swsetup_r>:
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	4b29      	ldr	r3, [pc, #164]	@ (8007494 <__swsetup_r+0xa8>)
 80073f0:	4605      	mov	r5, r0
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	460c      	mov	r4, r1
 80073f6:	b118      	cbz	r0, 8007400 <__swsetup_r+0x14>
 80073f8:	6a03      	ldr	r3, [r0, #32]
 80073fa:	b90b      	cbnz	r3, 8007400 <__swsetup_r+0x14>
 80073fc:	f7ff feae 	bl	800715c <__sinit>
 8007400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007404:	0719      	lsls	r1, r3, #28
 8007406:	d422      	bmi.n	800744e <__swsetup_r+0x62>
 8007408:	06da      	lsls	r2, r3, #27
 800740a:	d407      	bmi.n	800741c <__swsetup_r+0x30>
 800740c:	2209      	movs	r2, #9
 800740e:	602a      	str	r2, [r5, #0]
 8007410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007414:	81a3      	strh	r3, [r4, #12]
 8007416:	f04f 30ff 	mov.w	r0, #4294967295
 800741a:	e033      	b.n	8007484 <__swsetup_r+0x98>
 800741c:	0758      	lsls	r0, r3, #29
 800741e:	d512      	bpl.n	8007446 <__swsetup_r+0x5a>
 8007420:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007422:	b141      	cbz	r1, 8007436 <__swsetup_r+0x4a>
 8007424:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007428:	4299      	cmp	r1, r3
 800742a:	d002      	beq.n	8007432 <__swsetup_r+0x46>
 800742c:	4628      	mov	r0, r5
 800742e:	f000 ff33 	bl	8008298 <_free_r>
 8007432:	2300      	movs	r3, #0
 8007434:	6363      	str	r3, [r4, #52]	@ 0x34
 8007436:	89a3      	ldrh	r3, [r4, #12]
 8007438:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800743c:	81a3      	strh	r3, [r4, #12]
 800743e:	2300      	movs	r3, #0
 8007440:	6063      	str	r3, [r4, #4]
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	f043 0308 	orr.w	r3, r3, #8
 800744c:	81a3      	strh	r3, [r4, #12]
 800744e:	6923      	ldr	r3, [r4, #16]
 8007450:	b94b      	cbnz	r3, 8007466 <__swsetup_r+0x7a>
 8007452:	89a3      	ldrh	r3, [r4, #12]
 8007454:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800745c:	d003      	beq.n	8007466 <__swsetup_r+0x7a>
 800745e:	4621      	mov	r1, r4
 8007460:	4628      	mov	r0, r5
 8007462:	f002 fecd 	bl	800a200 <__smakebuf_r>
 8007466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800746a:	f013 0201 	ands.w	r2, r3, #1
 800746e:	d00a      	beq.n	8007486 <__swsetup_r+0x9a>
 8007470:	2200      	movs	r2, #0
 8007472:	60a2      	str	r2, [r4, #8]
 8007474:	6962      	ldr	r2, [r4, #20]
 8007476:	4252      	negs	r2, r2
 8007478:	61a2      	str	r2, [r4, #24]
 800747a:	6922      	ldr	r2, [r4, #16]
 800747c:	b942      	cbnz	r2, 8007490 <__swsetup_r+0xa4>
 800747e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007482:	d1c5      	bne.n	8007410 <__swsetup_r+0x24>
 8007484:	bd38      	pop	{r3, r4, r5, pc}
 8007486:	0799      	lsls	r1, r3, #30
 8007488:	bf58      	it	pl
 800748a:	6962      	ldrpl	r2, [r4, #20]
 800748c:	60a2      	str	r2, [r4, #8]
 800748e:	e7f4      	b.n	800747a <__swsetup_r+0x8e>
 8007490:	2000      	movs	r0, #0
 8007492:	e7f7      	b.n	8007484 <__swsetup_r+0x98>
 8007494:	20000028 	.word	0x20000028

08007498 <memset>:
 8007498:	4402      	add	r2, r0
 800749a:	4603      	mov	r3, r0
 800749c:	4293      	cmp	r3, r2
 800749e:	d100      	bne.n	80074a2 <memset+0xa>
 80074a0:	4770      	bx	lr
 80074a2:	f803 1b01 	strb.w	r1, [r3], #1
 80074a6:	e7f9      	b.n	800749c <memset+0x4>

080074a8 <_localeconv_r>:
 80074a8:	4800      	ldr	r0, [pc, #0]	@ (80074ac <_localeconv_r+0x4>)
 80074aa:	4770      	bx	lr
 80074ac:	20000168 	.word	0x20000168

080074b0 <_close_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4d06      	ldr	r5, [pc, #24]	@ (80074cc <_close_r+0x1c>)
 80074b4:	2300      	movs	r3, #0
 80074b6:	4604      	mov	r4, r0
 80074b8:	4608      	mov	r0, r1
 80074ba:	602b      	str	r3, [r5, #0]
 80074bc:	f7fb ff30 	bl	8003320 <_close>
 80074c0:	1c43      	adds	r3, r0, #1
 80074c2:	d102      	bne.n	80074ca <_close_r+0x1a>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	b103      	cbz	r3, 80074ca <_close_r+0x1a>
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	bd38      	pop	{r3, r4, r5, pc}
 80074cc:	20000424 	.word	0x20000424

080074d0 <_lseek_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	4d07      	ldr	r5, [pc, #28]	@ (80074f0 <_lseek_r+0x20>)
 80074d4:	4604      	mov	r4, r0
 80074d6:	4608      	mov	r0, r1
 80074d8:	4611      	mov	r1, r2
 80074da:	2200      	movs	r2, #0
 80074dc:	602a      	str	r2, [r5, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	f7fb ff45 	bl	800336e <_lseek>
 80074e4:	1c43      	adds	r3, r0, #1
 80074e6:	d102      	bne.n	80074ee <_lseek_r+0x1e>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	b103      	cbz	r3, 80074ee <_lseek_r+0x1e>
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
 80074f0:	20000424 	.word	0x20000424

080074f4 <_read_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d07      	ldr	r5, [pc, #28]	@ (8007514 <_read_r+0x20>)
 80074f8:	4604      	mov	r4, r0
 80074fa:	4608      	mov	r0, r1
 80074fc:	4611      	mov	r1, r2
 80074fe:	2200      	movs	r2, #0
 8007500:	602a      	str	r2, [r5, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	f7fb fed3 	bl	80032ae <_read>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d102      	bne.n	8007512 <_read_r+0x1e>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	b103      	cbz	r3, 8007512 <_read_r+0x1e>
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	20000424 	.word	0x20000424

08007518 <_write_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	4d07      	ldr	r5, [pc, #28]	@ (8007538 <_write_r+0x20>)
 800751c:	4604      	mov	r4, r0
 800751e:	4608      	mov	r0, r1
 8007520:	4611      	mov	r1, r2
 8007522:	2200      	movs	r2, #0
 8007524:	602a      	str	r2, [r5, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	f7fb fede 	bl	80032e8 <_write>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_write_r+0x1e>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b103      	cbz	r3, 8007536 <_write_r+0x1e>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	20000424 	.word	0x20000424

0800753c <__errno>:
 800753c:	4b01      	ldr	r3, [pc, #4]	@ (8007544 <__errno+0x8>)
 800753e:	6818      	ldr	r0, [r3, #0]
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20000028 	.word	0x20000028

08007548 <__libc_init_array>:
 8007548:	b570      	push	{r4, r5, r6, lr}
 800754a:	4d0d      	ldr	r5, [pc, #52]	@ (8007580 <__libc_init_array+0x38>)
 800754c:	4c0d      	ldr	r4, [pc, #52]	@ (8007584 <__libc_init_array+0x3c>)
 800754e:	1b64      	subs	r4, r4, r5
 8007550:	10a4      	asrs	r4, r4, #2
 8007552:	2600      	movs	r6, #0
 8007554:	42a6      	cmp	r6, r4
 8007556:	d109      	bne.n	800756c <__libc_init_array+0x24>
 8007558:	4d0b      	ldr	r5, [pc, #44]	@ (8007588 <__libc_init_array+0x40>)
 800755a:	4c0c      	ldr	r4, [pc, #48]	@ (800758c <__libc_init_array+0x44>)
 800755c:	f003 fe28 	bl	800b1b0 <_init>
 8007560:	1b64      	subs	r4, r4, r5
 8007562:	10a4      	asrs	r4, r4, #2
 8007564:	2600      	movs	r6, #0
 8007566:	42a6      	cmp	r6, r4
 8007568:	d105      	bne.n	8007576 <__libc_init_array+0x2e>
 800756a:	bd70      	pop	{r4, r5, r6, pc}
 800756c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007570:	4798      	blx	r3
 8007572:	3601      	adds	r6, #1
 8007574:	e7ee      	b.n	8007554 <__libc_init_array+0xc>
 8007576:	f855 3b04 	ldr.w	r3, [r5], #4
 800757a:	4798      	blx	r3
 800757c:	3601      	adds	r6, #1
 800757e:	e7f2      	b.n	8007566 <__libc_init_array+0x1e>
 8007580:	08016524 	.word	0x08016524
 8007584:	08016524 	.word	0x08016524
 8007588:	08016524 	.word	0x08016524
 800758c:	08016528 	.word	0x08016528

08007590 <__retarget_lock_init_recursive>:
 8007590:	4770      	bx	lr

08007592 <__retarget_lock_acquire_recursive>:
 8007592:	4770      	bx	lr

08007594 <__retarget_lock_release_recursive>:
 8007594:	4770      	bx	lr

08007596 <memcpy>:
 8007596:	440a      	add	r2, r1
 8007598:	4291      	cmp	r1, r2
 800759a:	f100 33ff 	add.w	r3, r0, #4294967295
 800759e:	d100      	bne.n	80075a2 <memcpy+0xc>
 80075a0:	4770      	bx	lr
 80075a2:	b510      	push	{r4, lr}
 80075a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ac:	4291      	cmp	r1, r2
 80075ae:	d1f9      	bne.n	80075a4 <memcpy+0xe>
 80075b0:	bd10      	pop	{r4, pc}
	...

080075b4 <nanf>:
 80075b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80075bc <nanf+0x8>
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	7fc00000 	.word	0x7fc00000

080075c0 <__assert_func>:
 80075c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075c2:	4614      	mov	r4, r2
 80075c4:	461a      	mov	r2, r3
 80075c6:	4b09      	ldr	r3, [pc, #36]	@ (80075ec <__assert_func+0x2c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4605      	mov	r5, r0
 80075cc:	68d8      	ldr	r0, [r3, #12]
 80075ce:	b954      	cbnz	r4, 80075e6 <__assert_func+0x26>
 80075d0:	4b07      	ldr	r3, [pc, #28]	@ (80075f0 <__assert_func+0x30>)
 80075d2:	461c      	mov	r4, r3
 80075d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075d8:	9100      	str	r1, [sp, #0]
 80075da:	462b      	mov	r3, r5
 80075dc:	4905      	ldr	r1, [pc, #20]	@ (80075f4 <__assert_func+0x34>)
 80075de:	f002 fdd7 	bl	800a190 <fiprintf>
 80075e2:	f002 feb1 	bl	800a348 <abort>
 80075e6:	4b04      	ldr	r3, [pc, #16]	@ (80075f8 <__assert_func+0x38>)
 80075e8:	e7f4      	b.n	80075d4 <__assert_func+0x14>
 80075ea:	bf00      	nop
 80075ec:	20000028 	.word	0x20000028
 80075f0:	08016177 	.word	0x08016177
 80075f4:	08016149 	.word	0x08016149
 80075f8:	0801613c 	.word	0x0801613c

080075fc <quorem>:
 80075fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007600:	6903      	ldr	r3, [r0, #16]
 8007602:	690c      	ldr	r4, [r1, #16]
 8007604:	42a3      	cmp	r3, r4
 8007606:	4607      	mov	r7, r0
 8007608:	db7e      	blt.n	8007708 <quorem+0x10c>
 800760a:	3c01      	subs	r4, #1
 800760c:	f101 0814 	add.w	r8, r1, #20
 8007610:	00a3      	lsls	r3, r4, #2
 8007612:	f100 0514 	add.w	r5, r0, #20
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800761c:	9301      	str	r3, [sp, #4]
 800761e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007622:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007626:	3301      	adds	r3, #1
 8007628:	429a      	cmp	r2, r3
 800762a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800762e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007632:	d32e      	bcc.n	8007692 <quorem+0x96>
 8007634:	f04f 0a00 	mov.w	sl, #0
 8007638:	46c4      	mov	ip, r8
 800763a:	46ae      	mov	lr, r5
 800763c:	46d3      	mov	fp, sl
 800763e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007642:	b298      	uxth	r0, r3
 8007644:	fb06 a000 	mla	r0, r6, r0, sl
 8007648:	0c02      	lsrs	r2, r0, #16
 800764a:	0c1b      	lsrs	r3, r3, #16
 800764c:	fb06 2303 	mla	r3, r6, r3, r2
 8007650:	f8de 2000 	ldr.w	r2, [lr]
 8007654:	b280      	uxth	r0, r0
 8007656:	b292      	uxth	r2, r2
 8007658:	1a12      	subs	r2, r2, r0
 800765a:	445a      	add	r2, fp
 800765c:	f8de 0000 	ldr.w	r0, [lr]
 8007660:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007664:	b29b      	uxth	r3, r3
 8007666:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800766a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800766e:	b292      	uxth	r2, r2
 8007670:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007674:	45e1      	cmp	r9, ip
 8007676:	f84e 2b04 	str.w	r2, [lr], #4
 800767a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800767e:	d2de      	bcs.n	800763e <quorem+0x42>
 8007680:	9b00      	ldr	r3, [sp, #0]
 8007682:	58eb      	ldr	r3, [r5, r3]
 8007684:	b92b      	cbnz	r3, 8007692 <quorem+0x96>
 8007686:	9b01      	ldr	r3, [sp, #4]
 8007688:	3b04      	subs	r3, #4
 800768a:	429d      	cmp	r5, r3
 800768c:	461a      	mov	r2, r3
 800768e:	d32f      	bcc.n	80076f0 <quorem+0xf4>
 8007690:	613c      	str	r4, [r7, #16]
 8007692:	4638      	mov	r0, r7
 8007694:	f001 f9c4 	bl	8008a20 <__mcmp>
 8007698:	2800      	cmp	r0, #0
 800769a:	db25      	blt.n	80076e8 <quorem+0xec>
 800769c:	4629      	mov	r1, r5
 800769e:	2000      	movs	r0, #0
 80076a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80076a4:	f8d1 c000 	ldr.w	ip, [r1]
 80076a8:	fa1f fe82 	uxth.w	lr, r2
 80076ac:	fa1f f38c 	uxth.w	r3, ip
 80076b0:	eba3 030e 	sub.w	r3, r3, lr
 80076b4:	4403      	add	r3, r0
 80076b6:	0c12      	lsrs	r2, r2, #16
 80076b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076c6:	45c1      	cmp	r9, r8
 80076c8:	f841 3b04 	str.w	r3, [r1], #4
 80076cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076d0:	d2e6      	bcs.n	80076a0 <quorem+0xa4>
 80076d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076da:	b922      	cbnz	r2, 80076e6 <quorem+0xea>
 80076dc:	3b04      	subs	r3, #4
 80076de:	429d      	cmp	r5, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	d30b      	bcc.n	80076fc <quorem+0x100>
 80076e4:	613c      	str	r4, [r7, #16]
 80076e6:	3601      	adds	r6, #1
 80076e8:	4630      	mov	r0, r6
 80076ea:	b003      	add	sp, #12
 80076ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f0:	6812      	ldr	r2, [r2, #0]
 80076f2:	3b04      	subs	r3, #4
 80076f4:	2a00      	cmp	r2, #0
 80076f6:	d1cb      	bne.n	8007690 <quorem+0x94>
 80076f8:	3c01      	subs	r4, #1
 80076fa:	e7c6      	b.n	800768a <quorem+0x8e>
 80076fc:	6812      	ldr	r2, [r2, #0]
 80076fe:	3b04      	subs	r3, #4
 8007700:	2a00      	cmp	r2, #0
 8007702:	d1ef      	bne.n	80076e4 <quorem+0xe8>
 8007704:	3c01      	subs	r4, #1
 8007706:	e7ea      	b.n	80076de <quorem+0xe2>
 8007708:	2000      	movs	r0, #0
 800770a:	e7ee      	b.n	80076ea <quorem+0xee>
 800770c:	0000      	movs	r0, r0
	...

08007710 <_dtoa_r>:
 8007710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007714:	69c7      	ldr	r7, [r0, #28]
 8007716:	b099      	sub	sp, #100	@ 0x64
 8007718:	ed8d 0b02 	vstr	d0, [sp, #8]
 800771c:	ec55 4b10 	vmov	r4, r5, d0
 8007720:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007722:	9109      	str	r1, [sp, #36]	@ 0x24
 8007724:	4683      	mov	fp, r0
 8007726:	920e      	str	r2, [sp, #56]	@ 0x38
 8007728:	9313      	str	r3, [sp, #76]	@ 0x4c
 800772a:	b97f      	cbnz	r7, 800774c <_dtoa_r+0x3c>
 800772c:	2010      	movs	r0, #16
 800772e:	f000 fdfd 	bl	800832c <malloc>
 8007732:	4602      	mov	r2, r0
 8007734:	f8cb 001c 	str.w	r0, [fp, #28]
 8007738:	b920      	cbnz	r0, 8007744 <_dtoa_r+0x34>
 800773a:	4ba7      	ldr	r3, [pc, #668]	@ (80079d8 <_dtoa_r+0x2c8>)
 800773c:	21ef      	movs	r1, #239	@ 0xef
 800773e:	48a7      	ldr	r0, [pc, #668]	@ (80079dc <_dtoa_r+0x2cc>)
 8007740:	f7ff ff3e 	bl	80075c0 <__assert_func>
 8007744:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007748:	6007      	str	r7, [r0, #0]
 800774a:	60c7      	str	r7, [r0, #12]
 800774c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007750:	6819      	ldr	r1, [r3, #0]
 8007752:	b159      	cbz	r1, 800776c <_dtoa_r+0x5c>
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	604a      	str	r2, [r1, #4]
 8007758:	2301      	movs	r3, #1
 800775a:	4093      	lsls	r3, r2
 800775c:	608b      	str	r3, [r1, #8]
 800775e:	4658      	mov	r0, fp
 8007760:	f000 feda 	bl	8008518 <_Bfree>
 8007764:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007768:	2200      	movs	r2, #0
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	1e2b      	subs	r3, r5, #0
 800776e:	bfb9      	ittee	lt
 8007770:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007774:	9303      	strlt	r3, [sp, #12]
 8007776:	2300      	movge	r3, #0
 8007778:	6033      	strge	r3, [r6, #0]
 800777a:	9f03      	ldr	r7, [sp, #12]
 800777c:	4b98      	ldr	r3, [pc, #608]	@ (80079e0 <_dtoa_r+0x2d0>)
 800777e:	bfbc      	itt	lt
 8007780:	2201      	movlt	r2, #1
 8007782:	6032      	strlt	r2, [r6, #0]
 8007784:	43bb      	bics	r3, r7
 8007786:	d112      	bne.n	80077ae <_dtoa_r+0x9e>
 8007788:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800778a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007794:	4323      	orrs	r3, r4
 8007796:	f000 854d 	beq.w	8008234 <_dtoa_r+0xb24>
 800779a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800779c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80079f4 <_dtoa_r+0x2e4>
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 854f 	beq.w	8008244 <_dtoa_r+0xb34>
 80077a6:	f10a 0303 	add.w	r3, sl, #3
 80077aa:	f000 bd49 	b.w	8008240 <_dtoa_r+0xb30>
 80077ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077b2:	2200      	movs	r2, #0
 80077b4:	ec51 0b17 	vmov	r0, r1, d7
 80077b8:	2300      	movs	r3, #0
 80077ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80077be:	f7f9 f983 	bl	8000ac8 <__aeabi_dcmpeq>
 80077c2:	4680      	mov	r8, r0
 80077c4:	b158      	cbz	r0, 80077de <_dtoa_r+0xce>
 80077c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80077c8:	2301      	movs	r3, #1
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077ce:	b113      	cbz	r3, 80077d6 <_dtoa_r+0xc6>
 80077d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80077d2:	4b84      	ldr	r3, [pc, #528]	@ (80079e4 <_dtoa_r+0x2d4>)
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80079f8 <_dtoa_r+0x2e8>
 80077da:	f000 bd33 	b.w	8008244 <_dtoa_r+0xb34>
 80077de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80077e2:	aa16      	add	r2, sp, #88	@ 0x58
 80077e4:	a917      	add	r1, sp, #92	@ 0x5c
 80077e6:	4658      	mov	r0, fp
 80077e8:	f001 fa3a 	bl	8008c60 <__d2b>
 80077ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80077f0:	4681      	mov	r9, r0
 80077f2:	2e00      	cmp	r6, #0
 80077f4:	d077      	beq.n	80078e6 <_dtoa_r+0x1d6>
 80077f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80077fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007804:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007808:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800780c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007810:	4619      	mov	r1, r3
 8007812:	2200      	movs	r2, #0
 8007814:	4b74      	ldr	r3, [pc, #464]	@ (80079e8 <_dtoa_r+0x2d8>)
 8007816:	f7f8 fd37 	bl	8000288 <__aeabi_dsub>
 800781a:	a369      	add	r3, pc, #420	@ (adr r3, 80079c0 <_dtoa_r+0x2b0>)
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	f7f8 feea 	bl	80005f8 <__aeabi_dmul>
 8007824:	a368      	add	r3, pc, #416	@ (adr r3, 80079c8 <_dtoa_r+0x2b8>)
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f7f8 fd2f 	bl	800028c <__adddf3>
 800782e:	4604      	mov	r4, r0
 8007830:	4630      	mov	r0, r6
 8007832:	460d      	mov	r5, r1
 8007834:	f7f8 fe76 	bl	8000524 <__aeabi_i2d>
 8007838:	a365      	add	r3, pc, #404	@ (adr r3, 80079d0 <_dtoa_r+0x2c0>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f7f8 fedb 	bl	80005f8 <__aeabi_dmul>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4620      	mov	r0, r4
 8007848:	4629      	mov	r1, r5
 800784a:	f7f8 fd1f 	bl	800028c <__adddf3>
 800784e:	4604      	mov	r4, r0
 8007850:	460d      	mov	r5, r1
 8007852:	f7f9 f981 	bl	8000b58 <__aeabi_d2iz>
 8007856:	2200      	movs	r2, #0
 8007858:	4607      	mov	r7, r0
 800785a:	2300      	movs	r3, #0
 800785c:	4620      	mov	r0, r4
 800785e:	4629      	mov	r1, r5
 8007860:	f7f9 f93c 	bl	8000adc <__aeabi_dcmplt>
 8007864:	b140      	cbz	r0, 8007878 <_dtoa_r+0x168>
 8007866:	4638      	mov	r0, r7
 8007868:	f7f8 fe5c 	bl	8000524 <__aeabi_i2d>
 800786c:	4622      	mov	r2, r4
 800786e:	462b      	mov	r3, r5
 8007870:	f7f9 f92a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007874:	b900      	cbnz	r0, 8007878 <_dtoa_r+0x168>
 8007876:	3f01      	subs	r7, #1
 8007878:	2f16      	cmp	r7, #22
 800787a:	d851      	bhi.n	8007920 <_dtoa_r+0x210>
 800787c:	4b5b      	ldr	r3, [pc, #364]	@ (80079ec <_dtoa_r+0x2dc>)
 800787e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800788a:	f7f9 f927 	bl	8000adc <__aeabi_dcmplt>
 800788e:	2800      	cmp	r0, #0
 8007890:	d048      	beq.n	8007924 <_dtoa_r+0x214>
 8007892:	3f01      	subs	r7, #1
 8007894:	2300      	movs	r3, #0
 8007896:	9312      	str	r3, [sp, #72]	@ 0x48
 8007898:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800789a:	1b9b      	subs	r3, r3, r6
 800789c:	1e5a      	subs	r2, r3, #1
 800789e:	bf44      	itt	mi
 80078a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80078a4:	2300      	movmi	r3, #0
 80078a6:	9208      	str	r2, [sp, #32]
 80078a8:	bf54      	ite	pl
 80078aa:	f04f 0800 	movpl.w	r8, #0
 80078ae:	9308      	strmi	r3, [sp, #32]
 80078b0:	2f00      	cmp	r7, #0
 80078b2:	db39      	blt.n	8007928 <_dtoa_r+0x218>
 80078b4:	9b08      	ldr	r3, [sp, #32]
 80078b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80078b8:	443b      	add	r3, r7
 80078ba:	9308      	str	r3, [sp, #32]
 80078bc:	2300      	movs	r3, #0
 80078be:	930a      	str	r3, [sp, #40]	@ 0x28
 80078c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c2:	2b09      	cmp	r3, #9
 80078c4:	d864      	bhi.n	8007990 <_dtoa_r+0x280>
 80078c6:	2b05      	cmp	r3, #5
 80078c8:	bfc4      	itt	gt
 80078ca:	3b04      	subgt	r3, #4
 80078cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80078ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078d0:	f1a3 0302 	sub.w	r3, r3, #2
 80078d4:	bfcc      	ite	gt
 80078d6:	2400      	movgt	r4, #0
 80078d8:	2401      	movle	r4, #1
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d863      	bhi.n	80079a6 <_dtoa_r+0x296>
 80078de:	e8df f003 	tbb	[pc, r3]
 80078e2:	372a      	.short	0x372a
 80078e4:	5535      	.short	0x5535
 80078e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80078ea:	441e      	add	r6, r3
 80078ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80078f0:	2b20      	cmp	r3, #32
 80078f2:	bfc1      	itttt	gt
 80078f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80078f8:	409f      	lslgt	r7, r3
 80078fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80078fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007902:	bfd6      	itet	le
 8007904:	f1c3 0320 	rsble	r3, r3, #32
 8007908:	ea47 0003 	orrgt.w	r0, r7, r3
 800790c:	fa04 f003 	lslle.w	r0, r4, r3
 8007910:	f7f8 fdf8 	bl	8000504 <__aeabi_ui2d>
 8007914:	2201      	movs	r2, #1
 8007916:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800791a:	3e01      	subs	r6, #1
 800791c:	9214      	str	r2, [sp, #80]	@ 0x50
 800791e:	e777      	b.n	8007810 <_dtoa_r+0x100>
 8007920:	2301      	movs	r3, #1
 8007922:	e7b8      	b.n	8007896 <_dtoa_r+0x186>
 8007924:	9012      	str	r0, [sp, #72]	@ 0x48
 8007926:	e7b7      	b.n	8007898 <_dtoa_r+0x188>
 8007928:	427b      	negs	r3, r7
 800792a:	930a      	str	r3, [sp, #40]	@ 0x28
 800792c:	2300      	movs	r3, #0
 800792e:	eba8 0807 	sub.w	r8, r8, r7
 8007932:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007934:	e7c4      	b.n	80078c0 <_dtoa_r+0x1b0>
 8007936:	2300      	movs	r3, #0
 8007938:	930b      	str	r3, [sp, #44]	@ 0x2c
 800793a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800793c:	2b00      	cmp	r3, #0
 800793e:	dc35      	bgt.n	80079ac <_dtoa_r+0x29c>
 8007940:	2301      	movs	r3, #1
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	9307      	str	r3, [sp, #28]
 8007946:	461a      	mov	r2, r3
 8007948:	920e      	str	r2, [sp, #56]	@ 0x38
 800794a:	e00b      	b.n	8007964 <_dtoa_r+0x254>
 800794c:	2301      	movs	r3, #1
 800794e:	e7f3      	b.n	8007938 <_dtoa_r+0x228>
 8007950:	2300      	movs	r3, #0
 8007952:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007954:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007956:	18fb      	adds	r3, r7, r3
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	3301      	adds	r3, #1
 800795c:	2b01      	cmp	r3, #1
 800795e:	9307      	str	r3, [sp, #28]
 8007960:	bfb8      	it	lt
 8007962:	2301      	movlt	r3, #1
 8007964:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007968:	2100      	movs	r1, #0
 800796a:	2204      	movs	r2, #4
 800796c:	f102 0514 	add.w	r5, r2, #20
 8007970:	429d      	cmp	r5, r3
 8007972:	d91f      	bls.n	80079b4 <_dtoa_r+0x2a4>
 8007974:	6041      	str	r1, [r0, #4]
 8007976:	4658      	mov	r0, fp
 8007978:	f000 fd8e 	bl	8008498 <_Balloc>
 800797c:	4682      	mov	sl, r0
 800797e:	2800      	cmp	r0, #0
 8007980:	d13c      	bne.n	80079fc <_dtoa_r+0x2ec>
 8007982:	4b1b      	ldr	r3, [pc, #108]	@ (80079f0 <_dtoa_r+0x2e0>)
 8007984:	4602      	mov	r2, r0
 8007986:	f240 11af 	movw	r1, #431	@ 0x1af
 800798a:	e6d8      	b.n	800773e <_dtoa_r+0x2e>
 800798c:	2301      	movs	r3, #1
 800798e:	e7e0      	b.n	8007952 <_dtoa_r+0x242>
 8007990:	2401      	movs	r4, #1
 8007992:	2300      	movs	r3, #0
 8007994:	9309      	str	r3, [sp, #36]	@ 0x24
 8007996:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007998:	f04f 33ff 	mov.w	r3, #4294967295
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	9307      	str	r3, [sp, #28]
 80079a0:	2200      	movs	r2, #0
 80079a2:	2312      	movs	r3, #18
 80079a4:	e7d0      	b.n	8007948 <_dtoa_r+0x238>
 80079a6:	2301      	movs	r3, #1
 80079a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079aa:	e7f5      	b.n	8007998 <_dtoa_r+0x288>
 80079ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	9307      	str	r3, [sp, #28]
 80079b2:	e7d7      	b.n	8007964 <_dtoa_r+0x254>
 80079b4:	3101      	adds	r1, #1
 80079b6:	0052      	lsls	r2, r2, #1
 80079b8:	e7d8      	b.n	800796c <_dtoa_r+0x25c>
 80079ba:	bf00      	nop
 80079bc:	f3af 8000 	nop.w
 80079c0:	636f4361 	.word	0x636f4361
 80079c4:	3fd287a7 	.word	0x3fd287a7
 80079c8:	8b60c8b3 	.word	0x8b60c8b3
 80079cc:	3fc68a28 	.word	0x3fc68a28
 80079d0:	509f79fb 	.word	0x509f79fb
 80079d4:	3fd34413 	.word	0x3fd34413
 80079d8:	08016094 	.word	0x08016094
 80079dc:	08016185 	.word	0x08016185
 80079e0:	7ff00000 	.word	0x7ff00000
 80079e4:	08016114 	.word	0x08016114
 80079e8:	3ff80000 	.word	0x3ff80000
 80079ec:	08016280 	.word	0x08016280
 80079f0:	080161dd 	.word	0x080161dd
 80079f4:	08016181 	.word	0x08016181
 80079f8:	08016113 	.word	0x08016113
 80079fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a00:	6018      	str	r0, [r3, #0]
 8007a02:	9b07      	ldr	r3, [sp, #28]
 8007a04:	2b0e      	cmp	r3, #14
 8007a06:	f200 80a4 	bhi.w	8007b52 <_dtoa_r+0x442>
 8007a0a:	2c00      	cmp	r4, #0
 8007a0c:	f000 80a1 	beq.w	8007b52 <_dtoa_r+0x442>
 8007a10:	2f00      	cmp	r7, #0
 8007a12:	dd33      	ble.n	8007a7c <_dtoa_r+0x36c>
 8007a14:	4bad      	ldr	r3, [pc, #692]	@ (8007ccc <_dtoa_r+0x5bc>)
 8007a16:	f007 020f 	and.w	r2, r7, #15
 8007a1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a1e:	ed93 7b00 	vldr	d7, [r3]
 8007a22:	05f8      	lsls	r0, r7, #23
 8007a24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007a28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a2c:	d516      	bpl.n	8007a5c <_dtoa_r+0x34c>
 8007a2e:	4ba8      	ldr	r3, [pc, #672]	@ (8007cd0 <_dtoa_r+0x5c0>)
 8007a30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a38:	f7f8 ff08 	bl	800084c <__aeabi_ddiv>
 8007a3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a40:	f004 040f 	and.w	r4, r4, #15
 8007a44:	2603      	movs	r6, #3
 8007a46:	4da2      	ldr	r5, [pc, #648]	@ (8007cd0 <_dtoa_r+0x5c0>)
 8007a48:	b954      	cbnz	r4, 8007a60 <_dtoa_r+0x350>
 8007a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a52:	f7f8 fefb 	bl	800084c <__aeabi_ddiv>
 8007a56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a5a:	e028      	b.n	8007aae <_dtoa_r+0x39e>
 8007a5c:	2602      	movs	r6, #2
 8007a5e:	e7f2      	b.n	8007a46 <_dtoa_r+0x336>
 8007a60:	07e1      	lsls	r1, r4, #31
 8007a62:	d508      	bpl.n	8007a76 <_dtoa_r+0x366>
 8007a64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a6c:	f7f8 fdc4 	bl	80005f8 <__aeabi_dmul>
 8007a70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a74:	3601      	adds	r6, #1
 8007a76:	1064      	asrs	r4, r4, #1
 8007a78:	3508      	adds	r5, #8
 8007a7a:	e7e5      	b.n	8007a48 <_dtoa_r+0x338>
 8007a7c:	f000 80d2 	beq.w	8007c24 <_dtoa_r+0x514>
 8007a80:	427c      	negs	r4, r7
 8007a82:	4b92      	ldr	r3, [pc, #584]	@ (8007ccc <_dtoa_r+0x5bc>)
 8007a84:	4d92      	ldr	r5, [pc, #584]	@ (8007cd0 <_dtoa_r+0x5c0>)
 8007a86:	f004 020f 	and.w	r2, r4, #15
 8007a8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a96:	f7f8 fdaf 	bl	80005f8 <__aeabi_dmul>
 8007a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a9e:	1124      	asrs	r4, r4, #4
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	2602      	movs	r6, #2
 8007aa4:	2c00      	cmp	r4, #0
 8007aa6:	f040 80b2 	bne.w	8007c0e <_dtoa_r+0x4fe>
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1d3      	bne.n	8007a56 <_dtoa_r+0x346>
 8007aae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ab0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 80b7 	beq.w	8007c28 <_dtoa_r+0x518>
 8007aba:	4b86      	ldr	r3, [pc, #536]	@ (8007cd4 <_dtoa_r+0x5c4>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	4620      	mov	r0, r4
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	f7f9 f80b 	bl	8000adc <__aeabi_dcmplt>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	f000 80ae 	beq.w	8007c28 <_dtoa_r+0x518>
 8007acc:	9b07      	ldr	r3, [sp, #28]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 80aa 	beq.w	8007c28 <_dtoa_r+0x518>
 8007ad4:	9b00      	ldr	r3, [sp, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	dd37      	ble.n	8007b4a <_dtoa_r+0x43a>
 8007ada:	1e7b      	subs	r3, r7, #1
 8007adc:	9304      	str	r3, [sp, #16]
 8007ade:	4620      	mov	r0, r4
 8007ae0:	4b7d      	ldr	r3, [pc, #500]	@ (8007cd8 <_dtoa_r+0x5c8>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	f7f8 fd87 	bl	80005f8 <__aeabi_dmul>
 8007aea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aee:	9c00      	ldr	r4, [sp, #0]
 8007af0:	3601      	adds	r6, #1
 8007af2:	4630      	mov	r0, r6
 8007af4:	f7f8 fd16 	bl	8000524 <__aeabi_i2d>
 8007af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007afc:	f7f8 fd7c 	bl	80005f8 <__aeabi_dmul>
 8007b00:	4b76      	ldr	r3, [pc, #472]	@ (8007cdc <_dtoa_r+0x5cc>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	f7f8 fbc2 	bl	800028c <__adddf3>
 8007b08:	4605      	mov	r5, r0
 8007b0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b0e:	2c00      	cmp	r4, #0
 8007b10:	f040 808d 	bne.w	8007c2e <_dtoa_r+0x51e>
 8007b14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b18:	4b71      	ldr	r3, [pc, #452]	@ (8007ce0 <_dtoa_r+0x5d0>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f7f8 fbb4 	bl	8000288 <__aeabi_dsub>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b28:	462a      	mov	r2, r5
 8007b2a:	4633      	mov	r3, r6
 8007b2c:	f7f8 fff4 	bl	8000b18 <__aeabi_dcmpgt>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	f040 828b 	bne.w	800804c <_dtoa_r+0x93c>
 8007b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b3a:	462a      	mov	r2, r5
 8007b3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b40:	f7f8 ffcc 	bl	8000adc <__aeabi_dcmplt>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	f040 8128 	bne.w	8007d9a <_dtoa_r+0x68a>
 8007b4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007b4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f2c0 815a 	blt.w	8007e0e <_dtoa_r+0x6fe>
 8007b5a:	2f0e      	cmp	r7, #14
 8007b5c:	f300 8157 	bgt.w	8007e0e <_dtoa_r+0x6fe>
 8007b60:	4b5a      	ldr	r3, [pc, #360]	@ (8007ccc <_dtoa_r+0x5bc>)
 8007b62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b66:	ed93 7b00 	vldr	d7, [r3]
 8007b6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	ed8d 7b00 	vstr	d7, [sp]
 8007b72:	da03      	bge.n	8007b7c <_dtoa_r+0x46c>
 8007b74:	9b07      	ldr	r3, [sp, #28]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f340 8101 	ble.w	8007d7e <_dtoa_r+0x66e>
 8007b7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b80:	4656      	mov	r6, sl
 8007b82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b86:	4620      	mov	r0, r4
 8007b88:	4629      	mov	r1, r5
 8007b8a:	f7f8 fe5f 	bl	800084c <__aeabi_ddiv>
 8007b8e:	f7f8 ffe3 	bl	8000b58 <__aeabi_d2iz>
 8007b92:	4680      	mov	r8, r0
 8007b94:	f7f8 fcc6 	bl	8000524 <__aeabi_i2d>
 8007b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b9c:	f7f8 fd2c 	bl	80005f8 <__aeabi_dmul>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007bac:	f7f8 fb6c 	bl	8000288 <__aeabi_dsub>
 8007bb0:	f806 4b01 	strb.w	r4, [r6], #1
 8007bb4:	9d07      	ldr	r5, [sp, #28]
 8007bb6:	eba6 040a 	sub.w	r4, r6, sl
 8007bba:	42a5      	cmp	r5, r4
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	f040 8117 	bne.w	8007df2 <_dtoa_r+0x6e2>
 8007bc4:	f7f8 fb62 	bl	800028c <__adddf3>
 8007bc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bcc:	4604      	mov	r4, r0
 8007bce:	460d      	mov	r5, r1
 8007bd0:	f7f8 ffa2 	bl	8000b18 <__aeabi_dcmpgt>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	f040 80f9 	bne.w	8007dcc <_dtoa_r+0x6bc>
 8007bda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bde:	4620      	mov	r0, r4
 8007be0:	4629      	mov	r1, r5
 8007be2:	f7f8 ff71 	bl	8000ac8 <__aeabi_dcmpeq>
 8007be6:	b118      	cbz	r0, 8007bf0 <_dtoa_r+0x4e0>
 8007be8:	f018 0f01 	tst.w	r8, #1
 8007bec:	f040 80ee 	bne.w	8007dcc <_dtoa_r+0x6bc>
 8007bf0:	4649      	mov	r1, r9
 8007bf2:	4658      	mov	r0, fp
 8007bf4:	f000 fc90 	bl	8008518 <_Bfree>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	7033      	strb	r3, [r6, #0]
 8007bfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007bfe:	3701      	adds	r7, #1
 8007c00:	601f      	str	r7, [r3, #0]
 8007c02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 831d 	beq.w	8008244 <_dtoa_r+0xb34>
 8007c0a:	601e      	str	r6, [r3, #0]
 8007c0c:	e31a      	b.n	8008244 <_dtoa_r+0xb34>
 8007c0e:	07e2      	lsls	r2, r4, #31
 8007c10:	d505      	bpl.n	8007c1e <_dtoa_r+0x50e>
 8007c12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c16:	f7f8 fcef 	bl	80005f8 <__aeabi_dmul>
 8007c1a:	3601      	adds	r6, #1
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	1064      	asrs	r4, r4, #1
 8007c20:	3508      	adds	r5, #8
 8007c22:	e73f      	b.n	8007aa4 <_dtoa_r+0x394>
 8007c24:	2602      	movs	r6, #2
 8007c26:	e742      	b.n	8007aae <_dtoa_r+0x39e>
 8007c28:	9c07      	ldr	r4, [sp, #28]
 8007c2a:	9704      	str	r7, [sp, #16]
 8007c2c:	e761      	b.n	8007af2 <_dtoa_r+0x3e2>
 8007c2e:	4b27      	ldr	r3, [pc, #156]	@ (8007ccc <_dtoa_r+0x5bc>)
 8007c30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c3a:	4454      	add	r4, sl
 8007c3c:	2900      	cmp	r1, #0
 8007c3e:	d053      	beq.n	8007ce8 <_dtoa_r+0x5d8>
 8007c40:	4928      	ldr	r1, [pc, #160]	@ (8007ce4 <_dtoa_r+0x5d4>)
 8007c42:	2000      	movs	r0, #0
 8007c44:	f7f8 fe02 	bl	800084c <__aeabi_ddiv>
 8007c48:	4633      	mov	r3, r6
 8007c4a:	462a      	mov	r2, r5
 8007c4c:	f7f8 fb1c 	bl	8000288 <__aeabi_dsub>
 8007c50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c54:	4656      	mov	r6, sl
 8007c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c5a:	f7f8 ff7d 	bl	8000b58 <__aeabi_d2iz>
 8007c5e:	4605      	mov	r5, r0
 8007c60:	f7f8 fc60 	bl	8000524 <__aeabi_i2d>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c6c:	f7f8 fb0c 	bl	8000288 <__aeabi_dsub>
 8007c70:	3530      	adds	r5, #48	@ 0x30
 8007c72:	4602      	mov	r2, r0
 8007c74:	460b      	mov	r3, r1
 8007c76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c7a:	f806 5b01 	strb.w	r5, [r6], #1
 8007c7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c82:	f7f8 ff2b 	bl	8000adc <__aeabi_dcmplt>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d171      	bne.n	8007d6e <_dtoa_r+0x65e>
 8007c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c8e:	4911      	ldr	r1, [pc, #68]	@ (8007cd4 <_dtoa_r+0x5c4>)
 8007c90:	2000      	movs	r0, #0
 8007c92:	f7f8 faf9 	bl	8000288 <__aeabi_dsub>
 8007c96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c9a:	f7f8 ff1f 	bl	8000adc <__aeabi_dcmplt>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f040 8095 	bne.w	8007dce <_dtoa_r+0x6be>
 8007ca4:	42a6      	cmp	r6, r4
 8007ca6:	f43f af50 	beq.w	8007b4a <_dtoa_r+0x43a>
 8007caa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007cae:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd8 <_dtoa_r+0x5c8>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f7f8 fca1 	bl	80005f8 <__aeabi_dmul>
 8007cb6:	4b08      	ldr	r3, [pc, #32]	@ (8007cd8 <_dtoa_r+0x5c8>)
 8007cb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cc2:	f7f8 fc99 	bl	80005f8 <__aeabi_dmul>
 8007cc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cca:	e7c4      	b.n	8007c56 <_dtoa_r+0x546>
 8007ccc:	08016280 	.word	0x08016280
 8007cd0:	08016258 	.word	0x08016258
 8007cd4:	3ff00000 	.word	0x3ff00000
 8007cd8:	40240000 	.word	0x40240000
 8007cdc:	401c0000 	.word	0x401c0000
 8007ce0:	40140000 	.word	0x40140000
 8007ce4:	3fe00000 	.word	0x3fe00000
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4628      	mov	r0, r5
 8007cec:	f7f8 fc84 	bl	80005f8 <__aeabi_dmul>
 8007cf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cf4:	9415      	str	r4, [sp, #84]	@ 0x54
 8007cf6:	4656      	mov	r6, sl
 8007cf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cfc:	f7f8 ff2c 	bl	8000b58 <__aeabi_d2iz>
 8007d00:	4605      	mov	r5, r0
 8007d02:	f7f8 fc0f 	bl	8000524 <__aeabi_i2d>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d0e:	f7f8 fabb 	bl	8000288 <__aeabi_dsub>
 8007d12:	3530      	adds	r5, #48	@ 0x30
 8007d14:	f806 5b01 	strb.w	r5, [r6], #1
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	42a6      	cmp	r6, r4
 8007d1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d22:	f04f 0200 	mov.w	r2, #0
 8007d26:	d124      	bne.n	8007d72 <_dtoa_r+0x662>
 8007d28:	4bac      	ldr	r3, [pc, #688]	@ (8007fdc <_dtoa_r+0x8cc>)
 8007d2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d2e:	f7f8 faad 	bl	800028c <__adddf3>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d3a:	f7f8 feed 	bl	8000b18 <__aeabi_dcmpgt>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d145      	bne.n	8007dce <_dtoa_r+0x6be>
 8007d42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d46:	49a5      	ldr	r1, [pc, #660]	@ (8007fdc <_dtoa_r+0x8cc>)
 8007d48:	2000      	movs	r0, #0
 8007d4a:	f7f8 fa9d 	bl	8000288 <__aeabi_dsub>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d56:	f7f8 fec1 	bl	8000adc <__aeabi_dcmplt>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	f43f aef5 	beq.w	8007b4a <_dtoa_r+0x43a>
 8007d60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007d62:	1e73      	subs	r3, r6, #1
 8007d64:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d6a:	2b30      	cmp	r3, #48	@ 0x30
 8007d6c:	d0f8      	beq.n	8007d60 <_dtoa_r+0x650>
 8007d6e:	9f04      	ldr	r7, [sp, #16]
 8007d70:	e73e      	b.n	8007bf0 <_dtoa_r+0x4e0>
 8007d72:	4b9b      	ldr	r3, [pc, #620]	@ (8007fe0 <_dtoa_r+0x8d0>)
 8007d74:	f7f8 fc40 	bl	80005f8 <__aeabi_dmul>
 8007d78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d7c:	e7bc      	b.n	8007cf8 <_dtoa_r+0x5e8>
 8007d7e:	d10c      	bne.n	8007d9a <_dtoa_r+0x68a>
 8007d80:	4b98      	ldr	r3, [pc, #608]	@ (8007fe4 <_dtoa_r+0x8d4>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d88:	f7f8 fc36 	bl	80005f8 <__aeabi_dmul>
 8007d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d90:	f7f8 feb8 	bl	8000b04 <__aeabi_dcmpge>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	f000 8157 	beq.w	8008048 <_dtoa_r+0x938>
 8007d9a:	2400      	movs	r4, #0
 8007d9c:	4625      	mov	r5, r4
 8007d9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007da0:	43db      	mvns	r3, r3
 8007da2:	9304      	str	r3, [sp, #16]
 8007da4:	4656      	mov	r6, sl
 8007da6:	2700      	movs	r7, #0
 8007da8:	4621      	mov	r1, r4
 8007daa:	4658      	mov	r0, fp
 8007dac:	f000 fbb4 	bl	8008518 <_Bfree>
 8007db0:	2d00      	cmp	r5, #0
 8007db2:	d0dc      	beq.n	8007d6e <_dtoa_r+0x65e>
 8007db4:	b12f      	cbz	r7, 8007dc2 <_dtoa_r+0x6b2>
 8007db6:	42af      	cmp	r7, r5
 8007db8:	d003      	beq.n	8007dc2 <_dtoa_r+0x6b2>
 8007dba:	4639      	mov	r1, r7
 8007dbc:	4658      	mov	r0, fp
 8007dbe:	f000 fbab 	bl	8008518 <_Bfree>
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	4658      	mov	r0, fp
 8007dc6:	f000 fba7 	bl	8008518 <_Bfree>
 8007dca:	e7d0      	b.n	8007d6e <_dtoa_r+0x65e>
 8007dcc:	9704      	str	r7, [sp, #16]
 8007dce:	4633      	mov	r3, r6
 8007dd0:	461e      	mov	r6, r3
 8007dd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dd6:	2a39      	cmp	r2, #57	@ 0x39
 8007dd8:	d107      	bne.n	8007dea <_dtoa_r+0x6da>
 8007dda:	459a      	cmp	sl, r3
 8007ddc:	d1f8      	bne.n	8007dd0 <_dtoa_r+0x6c0>
 8007dde:	9a04      	ldr	r2, [sp, #16]
 8007de0:	3201      	adds	r2, #1
 8007de2:	9204      	str	r2, [sp, #16]
 8007de4:	2230      	movs	r2, #48	@ 0x30
 8007de6:	f88a 2000 	strb.w	r2, [sl]
 8007dea:	781a      	ldrb	r2, [r3, #0]
 8007dec:	3201      	adds	r2, #1
 8007dee:	701a      	strb	r2, [r3, #0]
 8007df0:	e7bd      	b.n	8007d6e <_dtoa_r+0x65e>
 8007df2:	4b7b      	ldr	r3, [pc, #492]	@ (8007fe0 <_dtoa_r+0x8d0>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	f7f8 fbff 	bl	80005f8 <__aeabi_dmul>
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	4604      	mov	r4, r0
 8007e00:	460d      	mov	r5, r1
 8007e02:	f7f8 fe61 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	f43f aebb 	beq.w	8007b82 <_dtoa_r+0x472>
 8007e0c:	e6f0      	b.n	8007bf0 <_dtoa_r+0x4e0>
 8007e0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e10:	2a00      	cmp	r2, #0
 8007e12:	f000 80db 	beq.w	8007fcc <_dtoa_r+0x8bc>
 8007e16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e18:	2a01      	cmp	r2, #1
 8007e1a:	f300 80bf 	bgt.w	8007f9c <_dtoa_r+0x88c>
 8007e1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007e20:	2a00      	cmp	r2, #0
 8007e22:	f000 80b7 	beq.w	8007f94 <_dtoa_r+0x884>
 8007e26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e2c:	4646      	mov	r6, r8
 8007e2e:	9a08      	ldr	r2, [sp, #32]
 8007e30:	2101      	movs	r1, #1
 8007e32:	441a      	add	r2, r3
 8007e34:	4658      	mov	r0, fp
 8007e36:	4498      	add	r8, r3
 8007e38:	9208      	str	r2, [sp, #32]
 8007e3a:	f000 fc6b 	bl	8008714 <__i2b>
 8007e3e:	4605      	mov	r5, r0
 8007e40:	b15e      	cbz	r6, 8007e5a <_dtoa_r+0x74a>
 8007e42:	9b08      	ldr	r3, [sp, #32]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	dd08      	ble.n	8007e5a <_dtoa_r+0x74a>
 8007e48:	42b3      	cmp	r3, r6
 8007e4a:	9a08      	ldr	r2, [sp, #32]
 8007e4c:	bfa8      	it	ge
 8007e4e:	4633      	movge	r3, r6
 8007e50:	eba8 0803 	sub.w	r8, r8, r3
 8007e54:	1af6      	subs	r6, r6, r3
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	9308      	str	r3, [sp, #32]
 8007e5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e5c:	b1f3      	cbz	r3, 8007e9c <_dtoa_r+0x78c>
 8007e5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 80b7 	beq.w	8007fd4 <_dtoa_r+0x8c4>
 8007e66:	b18c      	cbz	r4, 8007e8c <_dtoa_r+0x77c>
 8007e68:	4629      	mov	r1, r5
 8007e6a:	4622      	mov	r2, r4
 8007e6c:	4658      	mov	r0, fp
 8007e6e:	f000 fd11 	bl	8008894 <__pow5mult>
 8007e72:	464a      	mov	r2, r9
 8007e74:	4601      	mov	r1, r0
 8007e76:	4605      	mov	r5, r0
 8007e78:	4658      	mov	r0, fp
 8007e7a:	f000 fc61 	bl	8008740 <__multiply>
 8007e7e:	4649      	mov	r1, r9
 8007e80:	9004      	str	r0, [sp, #16]
 8007e82:	4658      	mov	r0, fp
 8007e84:	f000 fb48 	bl	8008518 <_Bfree>
 8007e88:	9b04      	ldr	r3, [sp, #16]
 8007e8a:	4699      	mov	r9, r3
 8007e8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e8e:	1b1a      	subs	r2, r3, r4
 8007e90:	d004      	beq.n	8007e9c <_dtoa_r+0x78c>
 8007e92:	4649      	mov	r1, r9
 8007e94:	4658      	mov	r0, fp
 8007e96:	f000 fcfd 	bl	8008894 <__pow5mult>
 8007e9a:	4681      	mov	r9, r0
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	4658      	mov	r0, fp
 8007ea0:	f000 fc38 	bl	8008714 <__i2b>
 8007ea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 81cf 	beq.w	800824c <_dtoa_r+0xb3c>
 8007eae:	461a      	mov	r2, r3
 8007eb0:	4601      	mov	r1, r0
 8007eb2:	4658      	mov	r0, fp
 8007eb4:	f000 fcee 	bl	8008894 <__pow5mult>
 8007eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	f300 8095 	bgt.w	8007fec <_dtoa_r+0x8dc>
 8007ec2:	9b02      	ldr	r3, [sp, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f040 8087 	bne.w	8007fd8 <_dtoa_r+0x8c8>
 8007eca:	9b03      	ldr	r3, [sp, #12]
 8007ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f040 8089 	bne.w	8007fe8 <_dtoa_r+0x8d8>
 8007ed6:	9b03      	ldr	r3, [sp, #12]
 8007ed8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007edc:	0d1b      	lsrs	r3, r3, #20
 8007ede:	051b      	lsls	r3, r3, #20
 8007ee0:	b12b      	cbz	r3, 8007eee <_dtoa_r+0x7de>
 8007ee2:	9b08      	ldr	r3, [sp, #32]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	9308      	str	r3, [sp, #32]
 8007ee8:	f108 0801 	add.w	r8, r8, #1
 8007eec:	2301      	movs	r3, #1
 8007eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 81b0 	beq.w	8008258 <_dtoa_r+0xb48>
 8007ef8:	6923      	ldr	r3, [r4, #16]
 8007efa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007efe:	6918      	ldr	r0, [r3, #16]
 8007f00:	f000 fbbc 	bl	800867c <__hi0bits>
 8007f04:	f1c0 0020 	rsb	r0, r0, #32
 8007f08:	9b08      	ldr	r3, [sp, #32]
 8007f0a:	4418      	add	r0, r3
 8007f0c:	f010 001f 	ands.w	r0, r0, #31
 8007f10:	d077      	beq.n	8008002 <_dtoa_r+0x8f2>
 8007f12:	f1c0 0320 	rsb	r3, r0, #32
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	dd6b      	ble.n	8007ff2 <_dtoa_r+0x8e2>
 8007f1a:	9b08      	ldr	r3, [sp, #32]
 8007f1c:	f1c0 001c 	rsb	r0, r0, #28
 8007f20:	4403      	add	r3, r0
 8007f22:	4480      	add	r8, r0
 8007f24:	4406      	add	r6, r0
 8007f26:	9308      	str	r3, [sp, #32]
 8007f28:	f1b8 0f00 	cmp.w	r8, #0
 8007f2c:	dd05      	ble.n	8007f3a <_dtoa_r+0x82a>
 8007f2e:	4649      	mov	r1, r9
 8007f30:	4642      	mov	r2, r8
 8007f32:	4658      	mov	r0, fp
 8007f34:	f000 fd08 	bl	8008948 <__lshift>
 8007f38:	4681      	mov	r9, r0
 8007f3a:	9b08      	ldr	r3, [sp, #32]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	dd05      	ble.n	8007f4c <_dtoa_r+0x83c>
 8007f40:	4621      	mov	r1, r4
 8007f42:	461a      	mov	r2, r3
 8007f44:	4658      	mov	r0, fp
 8007f46:	f000 fcff 	bl	8008948 <__lshift>
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d059      	beq.n	8008006 <_dtoa_r+0x8f6>
 8007f52:	4621      	mov	r1, r4
 8007f54:	4648      	mov	r0, r9
 8007f56:	f000 fd63 	bl	8008a20 <__mcmp>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	da53      	bge.n	8008006 <_dtoa_r+0x8f6>
 8007f5e:	1e7b      	subs	r3, r7, #1
 8007f60:	9304      	str	r3, [sp, #16]
 8007f62:	4649      	mov	r1, r9
 8007f64:	2300      	movs	r3, #0
 8007f66:	220a      	movs	r2, #10
 8007f68:	4658      	mov	r0, fp
 8007f6a:	f000 faf7 	bl	800855c <__multadd>
 8007f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f70:	4681      	mov	r9, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 8172 	beq.w	800825c <_dtoa_r+0xb4c>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	220a      	movs	r2, #10
 8007f7e:	4658      	mov	r0, fp
 8007f80:	f000 faec 	bl	800855c <__multadd>
 8007f84:	9b00      	ldr	r3, [sp, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	4605      	mov	r5, r0
 8007f8a:	dc67      	bgt.n	800805c <_dtoa_r+0x94c>
 8007f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	dc41      	bgt.n	8008016 <_dtoa_r+0x906>
 8007f92:	e063      	b.n	800805c <_dtoa_r+0x94c>
 8007f94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007f96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007f9a:	e746      	b.n	8007e2a <_dtoa_r+0x71a>
 8007f9c:	9b07      	ldr	r3, [sp, #28]
 8007f9e:	1e5c      	subs	r4, r3, #1
 8007fa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fa2:	42a3      	cmp	r3, r4
 8007fa4:	bfbf      	itttt	lt
 8007fa6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007fa8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007faa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007fac:	1ae3      	sublt	r3, r4, r3
 8007fae:	bfb4      	ite	lt
 8007fb0:	18d2      	addlt	r2, r2, r3
 8007fb2:	1b1c      	subge	r4, r3, r4
 8007fb4:	9b07      	ldr	r3, [sp, #28]
 8007fb6:	bfbc      	itt	lt
 8007fb8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007fba:	2400      	movlt	r4, #0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	bfb5      	itete	lt
 8007fc0:	eba8 0603 	sublt.w	r6, r8, r3
 8007fc4:	9b07      	ldrge	r3, [sp, #28]
 8007fc6:	2300      	movlt	r3, #0
 8007fc8:	4646      	movge	r6, r8
 8007fca:	e730      	b.n	8007e2e <_dtoa_r+0x71e>
 8007fcc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007fce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007fd0:	4646      	mov	r6, r8
 8007fd2:	e735      	b.n	8007e40 <_dtoa_r+0x730>
 8007fd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007fd6:	e75c      	b.n	8007e92 <_dtoa_r+0x782>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e788      	b.n	8007eee <_dtoa_r+0x7de>
 8007fdc:	3fe00000 	.word	0x3fe00000
 8007fe0:	40240000 	.word	0x40240000
 8007fe4:	40140000 	.word	0x40140000
 8007fe8:	9b02      	ldr	r3, [sp, #8]
 8007fea:	e780      	b.n	8007eee <_dtoa_r+0x7de>
 8007fec:	2300      	movs	r3, #0
 8007fee:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ff0:	e782      	b.n	8007ef8 <_dtoa_r+0x7e8>
 8007ff2:	d099      	beq.n	8007f28 <_dtoa_r+0x818>
 8007ff4:	9a08      	ldr	r2, [sp, #32]
 8007ff6:	331c      	adds	r3, #28
 8007ff8:	441a      	add	r2, r3
 8007ffa:	4498      	add	r8, r3
 8007ffc:	441e      	add	r6, r3
 8007ffe:	9208      	str	r2, [sp, #32]
 8008000:	e792      	b.n	8007f28 <_dtoa_r+0x818>
 8008002:	4603      	mov	r3, r0
 8008004:	e7f6      	b.n	8007ff4 <_dtoa_r+0x8e4>
 8008006:	9b07      	ldr	r3, [sp, #28]
 8008008:	9704      	str	r7, [sp, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	dc20      	bgt.n	8008050 <_dtoa_r+0x940>
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008012:	2b02      	cmp	r3, #2
 8008014:	dd1e      	ble.n	8008054 <_dtoa_r+0x944>
 8008016:	9b00      	ldr	r3, [sp, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f47f aec0 	bne.w	8007d9e <_dtoa_r+0x68e>
 800801e:	4621      	mov	r1, r4
 8008020:	2205      	movs	r2, #5
 8008022:	4658      	mov	r0, fp
 8008024:	f000 fa9a 	bl	800855c <__multadd>
 8008028:	4601      	mov	r1, r0
 800802a:	4604      	mov	r4, r0
 800802c:	4648      	mov	r0, r9
 800802e:	f000 fcf7 	bl	8008a20 <__mcmp>
 8008032:	2800      	cmp	r0, #0
 8008034:	f77f aeb3 	ble.w	8007d9e <_dtoa_r+0x68e>
 8008038:	4656      	mov	r6, sl
 800803a:	2331      	movs	r3, #49	@ 0x31
 800803c:	f806 3b01 	strb.w	r3, [r6], #1
 8008040:	9b04      	ldr	r3, [sp, #16]
 8008042:	3301      	adds	r3, #1
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	e6ae      	b.n	8007da6 <_dtoa_r+0x696>
 8008048:	9c07      	ldr	r4, [sp, #28]
 800804a:	9704      	str	r7, [sp, #16]
 800804c:	4625      	mov	r5, r4
 800804e:	e7f3      	b.n	8008038 <_dtoa_r+0x928>
 8008050:	9b07      	ldr	r3, [sp, #28]
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008056:	2b00      	cmp	r3, #0
 8008058:	f000 8104 	beq.w	8008264 <_dtoa_r+0xb54>
 800805c:	2e00      	cmp	r6, #0
 800805e:	dd05      	ble.n	800806c <_dtoa_r+0x95c>
 8008060:	4629      	mov	r1, r5
 8008062:	4632      	mov	r2, r6
 8008064:	4658      	mov	r0, fp
 8008066:	f000 fc6f 	bl	8008948 <__lshift>
 800806a:	4605      	mov	r5, r0
 800806c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800806e:	2b00      	cmp	r3, #0
 8008070:	d05a      	beq.n	8008128 <_dtoa_r+0xa18>
 8008072:	6869      	ldr	r1, [r5, #4]
 8008074:	4658      	mov	r0, fp
 8008076:	f000 fa0f 	bl	8008498 <_Balloc>
 800807a:	4606      	mov	r6, r0
 800807c:	b928      	cbnz	r0, 800808a <_dtoa_r+0x97a>
 800807e:	4b84      	ldr	r3, [pc, #528]	@ (8008290 <_dtoa_r+0xb80>)
 8008080:	4602      	mov	r2, r0
 8008082:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008086:	f7ff bb5a 	b.w	800773e <_dtoa_r+0x2e>
 800808a:	692a      	ldr	r2, [r5, #16]
 800808c:	3202      	adds	r2, #2
 800808e:	0092      	lsls	r2, r2, #2
 8008090:	f105 010c 	add.w	r1, r5, #12
 8008094:	300c      	adds	r0, #12
 8008096:	f7ff fa7e 	bl	8007596 <memcpy>
 800809a:	2201      	movs	r2, #1
 800809c:	4631      	mov	r1, r6
 800809e:	4658      	mov	r0, fp
 80080a0:	f000 fc52 	bl	8008948 <__lshift>
 80080a4:	f10a 0301 	add.w	r3, sl, #1
 80080a8:	9307      	str	r3, [sp, #28]
 80080aa:	9b00      	ldr	r3, [sp, #0]
 80080ac:	4453      	add	r3, sl
 80080ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080b0:	9b02      	ldr	r3, [sp, #8]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	462f      	mov	r7, r5
 80080b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80080ba:	4605      	mov	r5, r0
 80080bc:	9b07      	ldr	r3, [sp, #28]
 80080be:	4621      	mov	r1, r4
 80080c0:	3b01      	subs	r3, #1
 80080c2:	4648      	mov	r0, r9
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	f7ff fa99 	bl	80075fc <quorem>
 80080ca:	4639      	mov	r1, r7
 80080cc:	9002      	str	r0, [sp, #8]
 80080ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80080d2:	4648      	mov	r0, r9
 80080d4:	f000 fca4 	bl	8008a20 <__mcmp>
 80080d8:	462a      	mov	r2, r5
 80080da:	9008      	str	r0, [sp, #32]
 80080dc:	4621      	mov	r1, r4
 80080de:	4658      	mov	r0, fp
 80080e0:	f000 fcba 	bl	8008a58 <__mdiff>
 80080e4:	68c2      	ldr	r2, [r0, #12]
 80080e6:	4606      	mov	r6, r0
 80080e8:	bb02      	cbnz	r2, 800812c <_dtoa_r+0xa1c>
 80080ea:	4601      	mov	r1, r0
 80080ec:	4648      	mov	r0, r9
 80080ee:	f000 fc97 	bl	8008a20 <__mcmp>
 80080f2:	4602      	mov	r2, r0
 80080f4:	4631      	mov	r1, r6
 80080f6:	4658      	mov	r0, fp
 80080f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80080fa:	f000 fa0d 	bl	8008518 <_Bfree>
 80080fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008100:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008102:	9e07      	ldr	r6, [sp, #28]
 8008104:	ea43 0102 	orr.w	r1, r3, r2
 8008108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800810a:	4319      	orrs	r1, r3
 800810c:	d110      	bne.n	8008130 <_dtoa_r+0xa20>
 800810e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008112:	d029      	beq.n	8008168 <_dtoa_r+0xa58>
 8008114:	9b08      	ldr	r3, [sp, #32]
 8008116:	2b00      	cmp	r3, #0
 8008118:	dd02      	ble.n	8008120 <_dtoa_r+0xa10>
 800811a:	9b02      	ldr	r3, [sp, #8]
 800811c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008120:	9b00      	ldr	r3, [sp, #0]
 8008122:	f883 8000 	strb.w	r8, [r3]
 8008126:	e63f      	b.n	8007da8 <_dtoa_r+0x698>
 8008128:	4628      	mov	r0, r5
 800812a:	e7bb      	b.n	80080a4 <_dtoa_r+0x994>
 800812c:	2201      	movs	r2, #1
 800812e:	e7e1      	b.n	80080f4 <_dtoa_r+0x9e4>
 8008130:	9b08      	ldr	r3, [sp, #32]
 8008132:	2b00      	cmp	r3, #0
 8008134:	db04      	blt.n	8008140 <_dtoa_r+0xa30>
 8008136:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008138:	430b      	orrs	r3, r1
 800813a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800813c:	430b      	orrs	r3, r1
 800813e:	d120      	bne.n	8008182 <_dtoa_r+0xa72>
 8008140:	2a00      	cmp	r2, #0
 8008142:	dded      	ble.n	8008120 <_dtoa_r+0xa10>
 8008144:	4649      	mov	r1, r9
 8008146:	2201      	movs	r2, #1
 8008148:	4658      	mov	r0, fp
 800814a:	f000 fbfd 	bl	8008948 <__lshift>
 800814e:	4621      	mov	r1, r4
 8008150:	4681      	mov	r9, r0
 8008152:	f000 fc65 	bl	8008a20 <__mcmp>
 8008156:	2800      	cmp	r0, #0
 8008158:	dc03      	bgt.n	8008162 <_dtoa_r+0xa52>
 800815a:	d1e1      	bne.n	8008120 <_dtoa_r+0xa10>
 800815c:	f018 0f01 	tst.w	r8, #1
 8008160:	d0de      	beq.n	8008120 <_dtoa_r+0xa10>
 8008162:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008166:	d1d8      	bne.n	800811a <_dtoa_r+0xa0a>
 8008168:	9a00      	ldr	r2, [sp, #0]
 800816a:	2339      	movs	r3, #57	@ 0x39
 800816c:	7013      	strb	r3, [r2, #0]
 800816e:	4633      	mov	r3, r6
 8008170:	461e      	mov	r6, r3
 8008172:	3b01      	subs	r3, #1
 8008174:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008178:	2a39      	cmp	r2, #57	@ 0x39
 800817a:	d052      	beq.n	8008222 <_dtoa_r+0xb12>
 800817c:	3201      	adds	r2, #1
 800817e:	701a      	strb	r2, [r3, #0]
 8008180:	e612      	b.n	8007da8 <_dtoa_r+0x698>
 8008182:	2a00      	cmp	r2, #0
 8008184:	dd07      	ble.n	8008196 <_dtoa_r+0xa86>
 8008186:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800818a:	d0ed      	beq.n	8008168 <_dtoa_r+0xa58>
 800818c:	9a00      	ldr	r2, [sp, #0]
 800818e:	f108 0301 	add.w	r3, r8, #1
 8008192:	7013      	strb	r3, [r2, #0]
 8008194:	e608      	b.n	8007da8 <_dtoa_r+0x698>
 8008196:	9b07      	ldr	r3, [sp, #28]
 8008198:	9a07      	ldr	r2, [sp, #28]
 800819a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800819e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d028      	beq.n	80081f6 <_dtoa_r+0xae6>
 80081a4:	4649      	mov	r1, r9
 80081a6:	2300      	movs	r3, #0
 80081a8:	220a      	movs	r2, #10
 80081aa:	4658      	mov	r0, fp
 80081ac:	f000 f9d6 	bl	800855c <__multadd>
 80081b0:	42af      	cmp	r7, r5
 80081b2:	4681      	mov	r9, r0
 80081b4:	f04f 0300 	mov.w	r3, #0
 80081b8:	f04f 020a 	mov.w	r2, #10
 80081bc:	4639      	mov	r1, r7
 80081be:	4658      	mov	r0, fp
 80081c0:	d107      	bne.n	80081d2 <_dtoa_r+0xac2>
 80081c2:	f000 f9cb 	bl	800855c <__multadd>
 80081c6:	4607      	mov	r7, r0
 80081c8:	4605      	mov	r5, r0
 80081ca:	9b07      	ldr	r3, [sp, #28]
 80081cc:	3301      	adds	r3, #1
 80081ce:	9307      	str	r3, [sp, #28]
 80081d0:	e774      	b.n	80080bc <_dtoa_r+0x9ac>
 80081d2:	f000 f9c3 	bl	800855c <__multadd>
 80081d6:	4629      	mov	r1, r5
 80081d8:	4607      	mov	r7, r0
 80081da:	2300      	movs	r3, #0
 80081dc:	220a      	movs	r2, #10
 80081de:	4658      	mov	r0, fp
 80081e0:	f000 f9bc 	bl	800855c <__multadd>
 80081e4:	4605      	mov	r5, r0
 80081e6:	e7f0      	b.n	80081ca <_dtoa_r+0xaba>
 80081e8:	9b00      	ldr	r3, [sp, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	bfcc      	ite	gt
 80081ee:	461e      	movgt	r6, r3
 80081f0:	2601      	movle	r6, #1
 80081f2:	4456      	add	r6, sl
 80081f4:	2700      	movs	r7, #0
 80081f6:	4649      	mov	r1, r9
 80081f8:	2201      	movs	r2, #1
 80081fa:	4658      	mov	r0, fp
 80081fc:	f000 fba4 	bl	8008948 <__lshift>
 8008200:	4621      	mov	r1, r4
 8008202:	4681      	mov	r9, r0
 8008204:	f000 fc0c 	bl	8008a20 <__mcmp>
 8008208:	2800      	cmp	r0, #0
 800820a:	dcb0      	bgt.n	800816e <_dtoa_r+0xa5e>
 800820c:	d102      	bne.n	8008214 <_dtoa_r+0xb04>
 800820e:	f018 0f01 	tst.w	r8, #1
 8008212:	d1ac      	bne.n	800816e <_dtoa_r+0xa5e>
 8008214:	4633      	mov	r3, r6
 8008216:	461e      	mov	r6, r3
 8008218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800821c:	2a30      	cmp	r2, #48	@ 0x30
 800821e:	d0fa      	beq.n	8008216 <_dtoa_r+0xb06>
 8008220:	e5c2      	b.n	8007da8 <_dtoa_r+0x698>
 8008222:	459a      	cmp	sl, r3
 8008224:	d1a4      	bne.n	8008170 <_dtoa_r+0xa60>
 8008226:	9b04      	ldr	r3, [sp, #16]
 8008228:	3301      	adds	r3, #1
 800822a:	9304      	str	r3, [sp, #16]
 800822c:	2331      	movs	r3, #49	@ 0x31
 800822e:	f88a 3000 	strb.w	r3, [sl]
 8008232:	e5b9      	b.n	8007da8 <_dtoa_r+0x698>
 8008234:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008236:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008294 <_dtoa_r+0xb84>
 800823a:	b11b      	cbz	r3, 8008244 <_dtoa_r+0xb34>
 800823c:	f10a 0308 	add.w	r3, sl, #8
 8008240:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	4650      	mov	r0, sl
 8008246:	b019      	add	sp, #100	@ 0x64
 8008248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800824e:	2b01      	cmp	r3, #1
 8008250:	f77f ae37 	ble.w	8007ec2 <_dtoa_r+0x7b2>
 8008254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008256:	930a      	str	r3, [sp, #40]	@ 0x28
 8008258:	2001      	movs	r0, #1
 800825a:	e655      	b.n	8007f08 <_dtoa_r+0x7f8>
 800825c:	9b00      	ldr	r3, [sp, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f77f aed6 	ble.w	8008010 <_dtoa_r+0x900>
 8008264:	4656      	mov	r6, sl
 8008266:	4621      	mov	r1, r4
 8008268:	4648      	mov	r0, r9
 800826a:	f7ff f9c7 	bl	80075fc <quorem>
 800826e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008272:	f806 8b01 	strb.w	r8, [r6], #1
 8008276:	9b00      	ldr	r3, [sp, #0]
 8008278:	eba6 020a 	sub.w	r2, r6, sl
 800827c:	4293      	cmp	r3, r2
 800827e:	ddb3      	ble.n	80081e8 <_dtoa_r+0xad8>
 8008280:	4649      	mov	r1, r9
 8008282:	2300      	movs	r3, #0
 8008284:	220a      	movs	r2, #10
 8008286:	4658      	mov	r0, fp
 8008288:	f000 f968 	bl	800855c <__multadd>
 800828c:	4681      	mov	r9, r0
 800828e:	e7ea      	b.n	8008266 <_dtoa_r+0xb56>
 8008290:	080161dd 	.word	0x080161dd
 8008294:	08016178 	.word	0x08016178

08008298 <_free_r>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	4605      	mov	r5, r0
 800829c:	2900      	cmp	r1, #0
 800829e:	d041      	beq.n	8008324 <_free_r+0x8c>
 80082a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a4:	1f0c      	subs	r4, r1, #4
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	bfb8      	it	lt
 80082aa:	18e4      	addlt	r4, r4, r3
 80082ac:	f000 f8e8 	bl	8008480 <__malloc_lock>
 80082b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008328 <_free_r+0x90>)
 80082b2:	6813      	ldr	r3, [r2, #0]
 80082b4:	b933      	cbnz	r3, 80082c4 <_free_r+0x2c>
 80082b6:	6063      	str	r3, [r4, #4]
 80082b8:	6014      	str	r4, [r2, #0]
 80082ba:	4628      	mov	r0, r5
 80082bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082c0:	f000 b8e4 	b.w	800848c <__malloc_unlock>
 80082c4:	42a3      	cmp	r3, r4
 80082c6:	d908      	bls.n	80082da <_free_r+0x42>
 80082c8:	6820      	ldr	r0, [r4, #0]
 80082ca:	1821      	adds	r1, r4, r0
 80082cc:	428b      	cmp	r3, r1
 80082ce:	bf01      	itttt	eq
 80082d0:	6819      	ldreq	r1, [r3, #0]
 80082d2:	685b      	ldreq	r3, [r3, #4]
 80082d4:	1809      	addeq	r1, r1, r0
 80082d6:	6021      	streq	r1, [r4, #0]
 80082d8:	e7ed      	b.n	80082b6 <_free_r+0x1e>
 80082da:	461a      	mov	r2, r3
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	b10b      	cbz	r3, 80082e4 <_free_r+0x4c>
 80082e0:	42a3      	cmp	r3, r4
 80082e2:	d9fa      	bls.n	80082da <_free_r+0x42>
 80082e4:	6811      	ldr	r1, [r2, #0]
 80082e6:	1850      	adds	r0, r2, r1
 80082e8:	42a0      	cmp	r0, r4
 80082ea:	d10b      	bne.n	8008304 <_free_r+0x6c>
 80082ec:	6820      	ldr	r0, [r4, #0]
 80082ee:	4401      	add	r1, r0
 80082f0:	1850      	adds	r0, r2, r1
 80082f2:	4283      	cmp	r3, r0
 80082f4:	6011      	str	r1, [r2, #0]
 80082f6:	d1e0      	bne.n	80082ba <_free_r+0x22>
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	6053      	str	r3, [r2, #4]
 80082fe:	4408      	add	r0, r1
 8008300:	6010      	str	r0, [r2, #0]
 8008302:	e7da      	b.n	80082ba <_free_r+0x22>
 8008304:	d902      	bls.n	800830c <_free_r+0x74>
 8008306:	230c      	movs	r3, #12
 8008308:	602b      	str	r3, [r5, #0]
 800830a:	e7d6      	b.n	80082ba <_free_r+0x22>
 800830c:	6820      	ldr	r0, [r4, #0]
 800830e:	1821      	adds	r1, r4, r0
 8008310:	428b      	cmp	r3, r1
 8008312:	bf04      	itt	eq
 8008314:	6819      	ldreq	r1, [r3, #0]
 8008316:	685b      	ldreq	r3, [r3, #4]
 8008318:	6063      	str	r3, [r4, #4]
 800831a:	bf04      	itt	eq
 800831c:	1809      	addeq	r1, r1, r0
 800831e:	6021      	streq	r1, [r4, #0]
 8008320:	6054      	str	r4, [r2, #4]
 8008322:	e7ca      	b.n	80082ba <_free_r+0x22>
 8008324:	bd38      	pop	{r3, r4, r5, pc}
 8008326:	bf00      	nop
 8008328:	20000430 	.word	0x20000430

0800832c <malloc>:
 800832c:	4b02      	ldr	r3, [pc, #8]	@ (8008338 <malloc+0xc>)
 800832e:	4601      	mov	r1, r0
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	f000 b825 	b.w	8008380 <_malloc_r>
 8008336:	bf00      	nop
 8008338:	20000028 	.word	0x20000028

0800833c <sbrk_aligned>:
 800833c:	b570      	push	{r4, r5, r6, lr}
 800833e:	4e0f      	ldr	r6, [pc, #60]	@ (800837c <sbrk_aligned+0x40>)
 8008340:	460c      	mov	r4, r1
 8008342:	6831      	ldr	r1, [r6, #0]
 8008344:	4605      	mov	r5, r0
 8008346:	b911      	cbnz	r1, 800834e <sbrk_aligned+0x12>
 8008348:	f001 ffe4 	bl	800a314 <_sbrk_r>
 800834c:	6030      	str	r0, [r6, #0]
 800834e:	4621      	mov	r1, r4
 8008350:	4628      	mov	r0, r5
 8008352:	f001 ffdf 	bl	800a314 <_sbrk_r>
 8008356:	1c43      	adds	r3, r0, #1
 8008358:	d103      	bne.n	8008362 <sbrk_aligned+0x26>
 800835a:	f04f 34ff 	mov.w	r4, #4294967295
 800835e:	4620      	mov	r0, r4
 8008360:	bd70      	pop	{r4, r5, r6, pc}
 8008362:	1cc4      	adds	r4, r0, #3
 8008364:	f024 0403 	bic.w	r4, r4, #3
 8008368:	42a0      	cmp	r0, r4
 800836a:	d0f8      	beq.n	800835e <sbrk_aligned+0x22>
 800836c:	1a21      	subs	r1, r4, r0
 800836e:	4628      	mov	r0, r5
 8008370:	f001 ffd0 	bl	800a314 <_sbrk_r>
 8008374:	3001      	adds	r0, #1
 8008376:	d1f2      	bne.n	800835e <sbrk_aligned+0x22>
 8008378:	e7ef      	b.n	800835a <sbrk_aligned+0x1e>
 800837a:	bf00      	nop
 800837c:	2000042c 	.word	0x2000042c

08008380 <_malloc_r>:
 8008380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008384:	1ccd      	adds	r5, r1, #3
 8008386:	f025 0503 	bic.w	r5, r5, #3
 800838a:	3508      	adds	r5, #8
 800838c:	2d0c      	cmp	r5, #12
 800838e:	bf38      	it	cc
 8008390:	250c      	movcc	r5, #12
 8008392:	2d00      	cmp	r5, #0
 8008394:	4606      	mov	r6, r0
 8008396:	db01      	blt.n	800839c <_malloc_r+0x1c>
 8008398:	42a9      	cmp	r1, r5
 800839a:	d904      	bls.n	80083a6 <_malloc_r+0x26>
 800839c:	230c      	movs	r3, #12
 800839e:	6033      	str	r3, [r6, #0]
 80083a0:	2000      	movs	r0, #0
 80083a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800847c <_malloc_r+0xfc>
 80083aa:	f000 f869 	bl	8008480 <__malloc_lock>
 80083ae:	f8d8 3000 	ldr.w	r3, [r8]
 80083b2:	461c      	mov	r4, r3
 80083b4:	bb44      	cbnz	r4, 8008408 <_malloc_r+0x88>
 80083b6:	4629      	mov	r1, r5
 80083b8:	4630      	mov	r0, r6
 80083ba:	f7ff ffbf 	bl	800833c <sbrk_aligned>
 80083be:	1c43      	adds	r3, r0, #1
 80083c0:	4604      	mov	r4, r0
 80083c2:	d158      	bne.n	8008476 <_malloc_r+0xf6>
 80083c4:	f8d8 4000 	ldr.w	r4, [r8]
 80083c8:	4627      	mov	r7, r4
 80083ca:	2f00      	cmp	r7, #0
 80083cc:	d143      	bne.n	8008456 <_malloc_r+0xd6>
 80083ce:	2c00      	cmp	r4, #0
 80083d0:	d04b      	beq.n	800846a <_malloc_r+0xea>
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	4639      	mov	r1, r7
 80083d6:	4630      	mov	r0, r6
 80083d8:	eb04 0903 	add.w	r9, r4, r3
 80083dc:	f001 ff9a 	bl	800a314 <_sbrk_r>
 80083e0:	4581      	cmp	r9, r0
 80083e2:	d142      	bne.n	800846a <_malloc_r+0xea>
 80083e4:	6821      	ldr	r1, [r4, #0]
 80083e6:	1a6d      	subs	r5, r5, r1
 80083e8:	4629      	mov	r1, r5
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7ff ffa6 	bl	800833c <sbrk_aligned>
 80083f0:	3001      	adds	r0, #1
 80083f2:	d03a      	beq.n	800846a <_malloc_r+0xea>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	442b      	add	r3, r5
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	f8d8 3000 	ldr.w	r3, [r8]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	bb62      	cbnz	r2, 800845c <_malloc_r+0xdc>
 8008402:	f8c8 7000 	str.w	r7, [r8]
 8008406:	e00f      	b.n	8008428 <_malloc_r+0xa8>
 8008408:	6822      	ldr	r2, [r4, #0]
 800840a:	1b52      	subs	r2, r2, r5
 800840c:	d420      	bmi.n	8008450 <_malloc_r+0xd0>
 800840e:	2a0b      	cmp	r2, #11
 8008410:	d917      	bls.n	8008442 <_malloc_r+0xc2>
 8008412:	1961      	adds	r1, r4, r5
 8008414:	42a3      	cmp	r3, r4
 8008416:	6025      	str	r5, [r4, #0]
 8008418:	bf18      	it	ne
 800841a:	6059      	strne	r1, [r3, #4]
 800841c:	6863      	ldr	r3, [r4, #4]
 800841e:	bf08      	it	eq
 8008420:	f8c8 1000 	streq.w	r1, [r8]
 8008424:	5162      	str	r2, [r4, r5]
 8008426:	604b      	str	r3, [r1, #4]
 8008428:	4630      	mov	r0, r6
 800842a:	f000 f82f 	bl	800848c <__malloc_unlock>
 800842e:	f104 000b 	add.w	r0, r4, #11
 8008432:	1d23      	adds	r3, r4, #4
 8008434:	f020 0007 	bic.w	r0, r0, #7
 8008438:	1ac2      	subs	r2, r0, r3
 800843a:	bf1c      	itt	ne
 800843c:	1a1b      	subne	r3, r3, r0
 800843e:	50a3      	strne	r3, [r4, r2]
 8008440:	e7af      	b.n	80083a2 <_malloc_r+0x22>
 8008442:	6862      	ldr	r2, [r4, #4]
 8008444:	42a3      	cmp	r3, r4
 8008446:	bf0c      	ite	eq
 8008448:	f8c8 2000 	streq.w	r2, [r8]
 800844c:	605a      	strne	r2, [r3, #4]
 800844e:	e7eb      	b.n	8008428 <_malloc_r+0xa8>
 8008450:	4623      	mov	r3, r4
 8008452:	6864      	ldr	r4, [r4, #4]
 8008454:	e7ae      	b.n	80083b4 <_malloc_r+0x34>
 8008456:	463c      	mov	r4, r7
 8008458:	687f      	ldr	r7, [r7, #4]
 800845a:	e7b6      	b.n	80083ca <_malloc_r+0x4a>
 800845c:	461a      	mov	r2, r3
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	42a3      	cmp	r3, r4
 8008462:	d1fb      	bne.n	800845c <_malloc_r+0xdc>
 8008464:	2300      	movs	r3, #0
 8008466:	6053      	str	r3, [r2, #4]
 8008468:	e7de      	b.n	8008428 <_malloc_r+0xa8>
 800846a:	230c      	movs	r3, #12
 800846c:	6033      	str	r3, [r6, #0]
 800846e:	4630      	mov	r0, r6
 8008470:	f000 f80c 	bl	800848c <__malloc_unlock>
 8008474:	e794      	b.n	80083a0 <_malloc_r+0x20>
 8008476:	6005      	str	r5, [r0, #0]
 8008478:	e7d6      	b.n	8008428 <_malloc_r+0xa8>
 800847a:	bf00      	nop
 800847c:	20000430 	.word	0x20000430

08008480 <__malloc_lock>:
 8008480:	4801      	ldr	r0, [pc, #4]	@ (8008488 <__malloc_lock+0x8>)
 8008482:	f7ff b886 	b.w	8007592 <__retarget_lock_acquire_recursive>
 8008486:	bf00      	nop
 8008488:	20000428 	.word	0x20000428

0800848c <__malloc_unlock>:
 800848c:	4801      	ldr	r0, [pc, #4]	@ (8008494 <__malloc_unlock+0x8>)
 800848e:	f7ff b881 	b.w	8007594 <__retarget_lock_release_recursive>
 8008492:	bf00      	nop
 8008494:	20000428 	.word	0x20000428

08008498 <_Balloc>:
 8008498:	b570      	push	{r4, r5, r6, lr}
 800849a:	69c6      	ldr	r6, [r0, #28]
 800849c:	4604      	mov	r4, r0
 800849e:	460d      	mov	r5, r1
 80084a0:	b976      	cbnz	r6, 80084c0 <_Balloc+0x28>
 80084a2:	2010      	movs	r0, #16
 80084a4:	f7ff ff42 	bl	800832c <malloc>
 80084a8:	4602      	mov	r2, r0
 80084aa:	61e0      	str	r0, [r4, #28]
 80084ac:	b920      	cbnz	r0, 80084b8 <_Balloc+0x20>
 80084ae:	4b18      	ldr	r3, [pc, #96]	@ (8008510 <_Balloc+0x78>)
 80084b0:	4818      	ldr	r0, [pc, #96]	@ (8008514 <_Balloc+0x7c>)
 80084b2:	216b      	movs	r1, #107	@ 0x6b
 80084b4:	f7ff f884 	bl	80075c0 <__assert_func>
 80084b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084bc:	6006      	str	r6, [r0, #0]
 80084be:	60c6      	str	r6, [r0, #12]
 80084c0:	69e6      	ldr	r6, [r4, #28]
 80084c2:	68f3      	ldr	r3, [r6, #12]
 80084c4:	b183      	cbz	r3, 80084e8 <_Balloc+0x50>
 80084c6:	69e3      	ldr	r3, [r4, #28]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084ce:	b9b8      	cbnz	r0, 8008500 <_Balloc+0x68>
 80084d0:	2101      	movs	r1, #1
 80084d2:	fa01 f605 	lsl.w	r6, r1, r5
 80084d6:	1d72      	adds	r2, r6, #5
 80084d8:	0092      	lsls	r2, r2, #2
 80084da:	4620      	mov	r0, r4
 80084dc:	f001 ff3b 	bl	800a356 <_calloc_r>
 80084e0:	b160      	cbz	r0, 80084fc <_Balloc+0x64>
 80084e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084e6:	e00e      	b.n	8008506 <_Balloc+0x6e>
 80084e8:	2221      	movs	r2, #33	@ 0x21
 80084ea:	2104      	movs	r1, #4
 80084ec:	4620      	mov	r0, r4
 80084ee:	f001 ff32 	bl	800a356 <_calloc_r>
 80084f2:	69e3      	ldr	r3, [r4, #28]
 80084f4:	60f0      	str	r0, [r6, #12]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1e4      	bne.n	80084c6 <_Balloc+0x2e>
 80084fc:	2000      	movs	r0, #0
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	6802      	ldr	r2, [r0, #0]
 8008502:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008506:	2300      	movs	r3, #0
 8008508:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800850c:	e7f7      	b.n	80084fe <_Balloc+0x66>
 800850e:	bf00      	nop
 8008510:	08016094 	.word	0x08016094
 8008514:	080161ee 	.word	0x080161ee

08008518 <_Bfree>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	69c6      	ldr	r6, [r0, #28]
 800851c:	4605      	mov	r5, r0
 800851e:	460c      	mov	r4, r1
 8008520:	b976      	cbnz	r6, 8008540 <_Bfree+0x28>
 8008522:	2010      	movs	r0, #16
 8008524:	f7ff ff02 	bl	800832c <malloc>
 8008528:	4602      	mov	r2, r0
 800852a:	61e8      	str	r0, [r5, #28]
 800852c:	b920      	cbnz	r0, 8008538 <_Bfree+0x20>
 800852e:	4b09      	ldr	r3, [pc, #36]	@ (8008554 <_Bfree+0x3c>)
 8008530:	4809      	ldr	r0, [pc, #36]	@ (8008558 <_Bfree+0x40>)
 8008532:	218f      	movs	r1, #143	@ 0x8f
 8008534:	f7ff f844 	bl	80075c0 <__assert_func>
 8008538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800853c:	6006      	str	r6, [r0, #0]
 800853e:	60c6      	str	r6, [r0, #12]
 8008540:	b13c      	cbz	r4, 8008552 <_Bfree+0x3a>
 8008542:	69eb      	ldr	r3, [r5, #28]
 8008544:	6862      	ldr	r2, [r4, #4]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800854c:	6021      	str	r1, [r4, #0]
 800854e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	08016094 	.word	0x08016094
 8008558:	080161ee 	.word	0x080161ee

0800855c <__multadd>:
 800855c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008560:	690d      	ldr	r5, [r1, #16]
 8008562:	4607      	mov	r7, r0
 8008564:	460c      	mov	r4, r1
 8008566:	461e      	mov	r6, r3
 8008568:	f101 0c14 	add.w	ip, r1, #20
 800856c:	2000      	movs	r0, #0
 800856e:	f8dc 3000 	ldr.w	r3, [ip]
 8008572:	b299      	uxth	r1, r3
 8008574:	fb02 6101 	mla	r1, r2, r1, r6
 8008578:	0c1e      	lsrs	r6, r3, #16
 800857a:	0c0b      	lsrs	r3, r1, #16
 800857c:	fb02 3306 	mla	r3, r2, r6, r3
 8008580:	b289      	uxth	r1, r1
 8008582:	3001      	adds	r0, #1
 8008584:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008588:	4285      	cmp	r5, r0
 800858a:	f84c 1b04 	str.w	r1, [ip], #4
 800858e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008592:	dcec      	bgt.n	800856e <__multadd+0x12>
 8008594:	b30e      	cbz	r6, 80085da <__multadd+0x7e>
 8008596:	68a3      	ldr	r3, [r4, #8]
 8008598:	42ab      	cmp	r3, r5
 800859a:	dc19      	bgt.n	80085d0 <__multadd+0x74>
 800859c:	6861      	ldr	r1, [r4, #4]
 800859e:	4638      	mov	r0, r7
 80085a0:	3101      	adds	r1, #1
 80085a2:	f7ff ff79 	bl	8008498 <_Balloc>
 80085a6:	4680      	mov	r8, r0
 80085a8:	b928      	cbnz	r0, 80085b6 <__multadd+0x5a>
 80085aa:	4602      	mov	r2, r0
 80085ac:	4b0c      	ldr	r3, [pc, #48]	@ (80085e0 <__multadd+0x84>)
 80085ae:	480d      	ldr	r0, [pc, #52]	@ (80085e4 <__multadd+0x88>)
 80085b0:	21ba      	movs	r1, #186	@ 0xba
 80085b2:	f7ff f805 	bl	80075c0 <__assert_func>
 80085b6:	6922      	ldr	r2, [r4, #16]
 80085b8:	3202      	adds	r2, #2
 80085ba:	f104 010c 	add.w	r1, r4, #12
 80085be:	0092      	lsls	r2, r2, #2
 80085c0:	300c      	adds	r0, #12
 80085c2:	f7fe ffe8 	bl	8007596 <memcpy>
 80085c6:	4621      	mov	r1, r4
 80085c8:	4638      	mov	r0, r7
 80085ca:	f7ff ffa5 	bl	8008518 <_Bfree>
 80085ce:	4644      	mov	r4, r8
 80085d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085d4:	3501      	adds	r5, #1
 80085d6:	615e      	str	r6, [r3, #20]
 80085d8:	6125      	str	r5, [r4, #16]
 80085da:	4620      	mov	r0, r4
 80085dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e0:	080161dd 	.word	0x080161dd
 80085e4:	080161ee 	.word	0x080161ee

080085e8 <__s2b>:
 80085e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085ec:	460c      	mov	r4, r1
 80085ee:	4615      	mov	r5, r2
 80085f0:	461f      	mov	r7, r3
 80085f2:	2209      	movs	r2, #9
 80085f4:	3308      	adds	r3, #8
 80085f6:	4606      	mov	r6, r0
 80085f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80085fc:	2100      	movs	r1, #0
 80085fe:	2201      	movs	r2, #1
 8008600:	429a      	cmp	r2, r3
 8008602:	db09      	blt.n	8008618 <__s2b+0x30>
 8008604:	4630      	mov	r0, r6
 8008606:	f7ff ff47 	bl	8008498 <_Balloc>
 800860a:	b940      	cbnz	r0, 800861e <__s2b+0x36>
 800860c:	4602      	mov	r2, r0
 800860e:	4b19      	ldr	r3, [pc, #100]	@ (8008674 <__s2b+0x8c>)
 8008610:	4819      	ldr	r0, [pc, #100]	@ (8008678 <__s2b+0x90>)
 8008612:	21d3      	movs	r1, #211	@ 0xd3
 8008614:	f7fe ffd4 	bl	80075c0 <__assert_func>
 8008618:	0052      	lsls	r2, r2, #1
 800861a:	3101      	adds	r1, #1
 800861c:	e7f0      	b.n	8008600 <__s2b+0x18>
 800861e:	9b08      	ldr	r3, [sp, #32]
 8008620:	6143      	str	r3, [r0, #20]
 8008622:	2d09      	cmp	r5, #9
 8008624:	f04f 0301 	mov.w	r3, #1
 8008628:	6103      	str	r3, [r0, #16]
 800862a:	dd16      	ble.n	800865a <__s2b+0x72>
 800862c:	f104 0909 	add.w	r9, r4, #9
 8008630:	46c8      	mov	r8, r9
 8008632:	442c      	add	r4, r5
 8008634:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008638:	4601      	mov	r1, r0
 800863a:	3b30      	subs	r3, #48	@ 0x30
 800863c:	220a      	movs	r2, #10
 800863e:	4630      	mov	r0, r6
 8008640:	f7ff ff8c 	bl	800855c <__multadd>
 8008644:	45a0      	cmp	r8, r4
 8008646:	d1f5      	bne.n	8008634 <__s2b+0x4c>
 8008648:	f1a5 0408 	sub.w	r4, r5, #8
 800864c:	444c      	add	r4, r9
 800864e:	1b2d      	subs	r5, r5, r4
 8008650:	1963      	adds	r3, r4, r5
 8008652:	42bb      	cmp	r3, r7
 8008654:	db04      	blt.n	8008660 <__s2b+0x78>
 8008656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800865a:	340a      	adds	r4, #10
 800865c:	2509      	movs	r5, #9
 800865e:	e7f6      	b.n	800864e <__s2b+0x66>
 8008660:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008664:	4601      	mov	r1, r0
 8008666:	3b30      	subs	r3, #48	@ 0x30
 8008668:	220a      	movs	r2, #10
 800866a:	4630      	mov	r0, r6
 800866c:	f7ff ff76 	bl	800855c <__multadd>
 8008670:	e7ee      	b.n	8008650 <__s2b+0x68>
 8008672:	bf00      	nop
 8008674:	080161dd 	.word	0x080161dd
 8008678:	080161ee 	.word	0x080161ee

0800867c <__hi0bits>:
 800867c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008680:	4603      	mov	r3, r0
 8008682:	bf36      	itet	cc
 8008684:	0403      	lslcc	r3, r0, #16
 8008686:	2000      	movcs	r0, #0
 8008688:	2010      	movcc	r0, #16
 800868a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800868e:	bf3c      	itt	cc
 8008690:	021b      	lslcc	r3, r3, #8
 8008692:	3008      	addcc	r0, #8
 8008694:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008698:	bf3c      	itt	cc
 800869a:	011b      	lslcc	r3, r3, #4
 800869c:	3004      	addcc	r0, #4
 800869e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086a2:	bf3c      	itt	cc
 80086a4:	009b      	lslcc	r3, r3, #2
 80086a6:	3002      	addcc	r0, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	db05      	blt.n	80086b8 <__hi0bits+0x3c>
 80086ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086b0:	f100 0001 	add.w	r0, r0, #1
 80086b4:	bf08      	it	eq
 80086b6:	2020      	moveq	r0, #32
 80086b8:	4770      	bx	lr

080086ba <__lo0bits>:
 80086ba:	6803      	ldr	r3, [r0, #0]
 80086bc:	4602      	mov	r2, r0
 80086be:	f013 0007 	ands.w	r0, r3, #7
 80086c2:	d00b      	beq.n	80086dc <__lo0bits+0x22>
 80086c4:	07d9      	lsls	r1, r3, #31
 80086c6:	d421      	bmi.n	800870c <__lo0bits+0x52>
 80086c8:	0798      	lsls	r0, r3, #30
 80086ca:	bf49      	itett	mi
 80086cc:	085b      	lsrmi	r3, r3, #1
 80086ce:	089b      	lsrpl	r3, r3, #2
 80086d0:	2001      	movmi	r0, #1
 80086d2:	6013      	strmi	r3, [r2, #0]
 80086d4:	bf5c      	itt	pl
 80086d6:	6013      	strpl	r3, [r2, #0]
 80086d8:	2002      	movpl	r0, #2
 80086da:	4770      	bx	lr
 80086dc:	b299      	uxth	r1, r3
 80086de:	b909      	cbnz	r1, 80086e4 <__lo0bits+0x2a>
 80086e0:	0c1b      	lsrs	r3, r3, #16
 80086e2:	2010      	movs	r0, #16
 80086e4:	b2d9      	uxtb	r1, r3
 80086e6:	b909      	cbnz	r1, 80086ec <__lo0bits+0x32>
 80086e8:	3008      	adds	r0, #8
 80086ea:	0a1b      	lsrs	r3, r3, #8
 80086ec:	0719      	lsls	r1, r3, #28
 80086ee:	bf04      	itt	eq
 80086f0:	091b      	lsreq	r3, r3, #4
 80086f2:	3004      	addeq	r0, #4
 80086f4:	0799      	lsls	r1, r3, #30
 80086f6:	bf04      	itt	eq
 80086f8:	089b      	lsreq	r3, r3, #2
 80086fa:	3002      	addeq	r0, #2
 80086fc:	07d9      	lsls	r1, r3, #31
 80086fe:	d403      	bmi.n	8008708 <__lo0bits+0x4e>
 8008700:	085b      	lsrs	r3, r3, #1
 8008702:	f100 0001 	add.w	r0, r0, #1
 8008706:	d003      	beq.n	8008710 <__lo0bits+0x56>
 8008708:	6013      	str	r3, [r2, #0]
 800870a:	4770      	bx	lr
 800870c:	2000      	movs	r0, #0
 800870e:	4770      	bx	lr
 8008710:	2020      	movs	r0, #32
 8008712:	4770      	bx	lr

08008714 <__i2b>:
 8008714:	b510      	push	{r4, lr}
 8008716:	460c      	mov	r4, r1
 8008718:	2101      	movs	r1, #1
 800871a:	f7ff febd 	bl	8008498 <_Balloc>
 800871e:	4602      	mov	r2, r0
 8008720:	b928      	cbnz	r0, 800872e <__i2b+0x1a>
 8008722:	4b05      	ldr	r3, [pc, #20]	@ (8008738 <__i2b+0x24>)
 8008724:	4805      	ldr	r0, [pc, #20]	@ (800873c <__i2b+0x28>)
 8008726:	f240 1145 	movw	r1, #325	@ 0x145
 800872a:	f7fe ff49 	bl	80075c0 <__assert_func>
 800872e:	2301      	movs	r3, #1
 8008730:	6144      	str	r4, [r0, #20]
 8008732:	6103      	str	r3, [r0, #16]
 8008734:	bd10      	pop	{r4, pc}
 8008736:	bf00      	nop
 8008738:	080161dd 	.word	0x080161dd
 800873c:	080161ee 	.word	0x080161ee

08008740 <__multiply>:
 8008740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008744:	4614      	mov	r4, r2
 8008746:	690a      	ldr	r2, [r1, #16]
 8008748:	6923      	ldr	r3, [r4, #16]
 800874a:	429a      	cmp	r2, r3
 800874c:	bfa8      	it	ge
 800874e:	4623      	movge	r3, r4
 8008750:	460f      	mov	r7, r1
 8008752:	bfa4      	itt	ge
 8008754:	460c      	movge	r4, r1
 8008756:	461f      	movge	r7, r3
 8008758:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800875c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008760:	68a3      	ldr	r3, [r4, #8]
 8008762:	6861      	ldr	r1, [r4, #4]
 8008764:	eb0a 0609 	add.w	r6, sl, r9
 8008768:	42b3      	cmp	r3, r6
 800876a:	b085      	sub	sp, #20
 800876c:	bfb8      	it	lt
 800876e:	3101      	addlt	r1, #1
 8008770:	f7ff fe92 	bl	8008498 <_Balloc>
 8008774:	b930      	cbnz	r0, 8008784 <__multiply+0x44>
 8008776:	4602      	mov	r2, r0
 8008778:	4b44      	ldr	r3, [pc, #272]	@ (800888c <__multiply+0x14c>)
 800877a:	4845      	ldr	r0, [pc, #276]	@ (8008890 <__multiply+0x150>)
 800877c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008780:	f7fe ff1e 	bl	80075c0 <__assert_func>
 8008784:	f100 0514 	add.w	r5, r0, #20
 8008788:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800878c:	462b      	mov	r3, r5
 800878e:	2200      	movs	r2, #0
 8008790:	4543      	cmp	r3, r8
 8008792:	d321      	bcc.n	80087d8 <__multiply+0x98>
 8008794:	f107 0114 	add.w	r1, r7, #20
 8008798:	f104 0214 	add.w	r2, r4, #20
 800879c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80087a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80087a4:	9302      	str	r3, [sp, #8]
 80087a6:	1b13      	subs	r3, r2, r4
 80087a8:	3b15      	subs	r3, #21
 80087aa:	f023 0303 	bic.w	r3, r3, #3
 80087ae:	3304      	adds	r3, #4
 80087b0:	f104 0715 	add.w	r7, r4, #21
 80087b4:	42ba      	cmp	r2, r7
 80087b6:	bf38      	it	cc
 80087b8:	2304      	movcc	r3, #4
 80087ba:	9301      	str	r3, [sp, #4]
 80087bc:	9b02      	ldr	r3, [sp, #8]
 80087be:	9103      	str	r1, [sp, #12]
 80087c0:	428b      	cmp	r3, r1
 80087c2:	d80c      	bhi.n	80087de <__multiply+0x9e>
 80087c4:	2e00      	cmp	r6, #0
 80087c6:	dd03      	ble.n	80087d0 <__multiply+0x90>
 80087c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d05b      	beq.n	8008888 <__multiply+0x148>
 80087d0:	6106      	str	r6, [r0, #16]
 80087d2:	b005      	add	sp, #20
 80087d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d8:	f843 2b04 	str.w	r2, [r3], #4
 80087dc:	e7d8      	b.n	8008790 <__multiply+0x50>
 80087de:	f8b1 a000 	ldrh.w	sl, [r1]
 80087e2:	f1ba 0f00 	cmp.w	sl, #0
 80087e6:	d024      	beq.n	8008832 <__multiply+0xf2>
 80087e8:	f104 0e14 	add.w	lr, r4, #20
 80087ec:	46a9      	mov	r9, r5
 80087ee:	f04f 0c00 	mov.w	ip, #0
 80087f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80087f6:	f8d9 3000 	ldr.w	r3, [r9]
 80087fa:	fa1f fb87 	uxth.w	fp, r7
 80087fe:	b29b      	uxth	r3, r3
 8008800:	fb0a 330b 	mla	r3, sl, fp, r3
 8008804:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008808:	f8d9 7000 	ldr.w	r7, [r9]
 800880c:	4463      	add	r3, ip
 800880e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008812:	fb0a c70b 	mla	r7, sl, fp, ip
 8008816:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800881a:	b29b      	uxth	r3, r3
 800881c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008820:	4572      	cmp	r2, lr
 8008822:	f849 3b04 	str.w	r3, [r9], #4
 8008826:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800882a:	d8e2      	bhi.n	80087f2 <__multiply+0xb2>
 800882c:	9b01      	ldr	r3, [sp, #4]
 800882e:	f845 c003 	str.w	ip, [r5, r3]
 8008832:	9b03      	ldr	r3, [sp, #12]
 8008834:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008838:	3104      	adds	r1, #4
 800883a:	f1b9 0f00 	cmp.w	r9, #0
 800883e:	d021      	beq.n	8008884 <__multiply+0x144>
 8008840:	682b      	ldr	r3, [r5, #0]
 8008842:	f104 0c14 	add.w	ip, r4, #20
 8008846:	46ae      	mov	lr, r5
 8008848:	f04f 0a00 	mov.w	sl, #0
 800884c:	f8bc b000 	ldrh.w	fp, [ip]
 8008850:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008854:	fb09 770b 	mla	r7, r9, fp, r7
 8008858:	4457      	add	r7, sl
 800885a:	b29b      	uxth	r3, r3
 800885c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008860:	f84e 3b04 	str.w	r3, [lr], #4
 8008864:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008868:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800886c:	f8be 3000 	ldrh.w	r3, [lr]
 8008870:	fb09 330a 	mla	r3, r9, sl, r3
 8008874:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008878:	4562      	cmp	r2, ip
 800887a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800887e:	d8e5      	bhi.n	800884c <__multiply+0x10c>
 8008880:	9f01      	ldr	r7, [sp, #4]
 8008882:	51eb      	str	r3, [r5, r7]
 8008884:	3504      	adds	r5, #4
 8008886:	e799      	b.n	80087bc <__multiply+0x7c>
 8008888:	3e01      	subs	r6, #1
 800888a:	e79b      	b.n	80087c4 <__multiply+0x84>
 800888c:	080161dd 	.word	0x080161dd
 8008890:	080161ee 	.word	0x080161ee

08008894 <__pow5mult>:
 8008894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008898:	4615      	mov	r5, r2
 800889a:	f012 0203 	ands.w	r2, r2, #3
 800889e:	4607      	mov	r7, r0
 80088a0:	460e      	mov	r6, r1
 80088a2:	d007      	beq.n	80088b4 <__pow5mult+0x20>
 80088a4:	4c25      	ldr	r4, [pc, #148]	@ (800893c <__pow5mult+0xa8>)
 80088a6:	3a01      	subs	r2, #1
 80088a8:	2300      	movs	r3, #0
 80088aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088ae:	f7ff fe55 	bl	800855c <__multadd>
 80088b2:	4606      	mov	r6, r0
 80088b4:	10ad      	asrs	r5, r5, #2
 80088b6:	d03d      	beq.n	8008934 <__pow5mult+0xa0>
 80088b8:	69fc      	ldr	r4, [r7, #28]
 80088ba:	b97c      	cbnz	r4, 80088dc <__pow5mult+0x48>
 80088bc:	2010      	movs	r0, #16
 80088be:	f7ff fd35 	bl	800832c <malloc>
 80088c2:	4602      	mov	r2, r0
 80088c4:	61f8      	str	r0, [r7, #28]
 80088c6:	b928      	cbnz	r0, 80088d4 <__pow5mult+0x40>
 80088c8:	4b1d      	ldr	r3, [pc, #116]	@ (8008940 <__pow5mult+0xac>)
 80088ca:	481e      	ldr	r0, [pc, #120]	@ (8008944 <__pow5mult+0xb0>)
 80088cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80088d0:	f7fe fe76 	bl	80075c0 <__assert_func>
 80088d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088d8:	6004      	str	r4, [r0, #0]
 80088da:	60c4      	str	r4, [r0, #12]
 80088dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80088e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088e4:	b94c      	cbnz	r4, 80088fa <__pow5mult+0x66>
 80088e6:	f240 2171 	movw	r1, #625	@ 0x271
 80088ea:	4638      	mov	r0, r7
 80088ec:	f7ff ff12 	bl	8008714 <__i2b>
 80088f0:	2300      	movs	r3, #0
 80088f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80088f6:	4604      	mov	r4, r0
 80088f8:	6003      	str	r3, [r0, #0]
 80088fa:	f04f 0900 	mov.w	r9, #0
 80088fe:	07eb      	lsls	r3, r5, #31
 8008900:	d50a      	bpl.n	8008918 <__pow5mult+0x84>
 8008902:	4631      	mov	r1, r6
 8008904:	4622      	mov	r2, r4
 8008906:	4638      	mov	r0, r7
 8008908:	f7ff ff1a 	bl	8008740 <__multiply>
 800890c:	4631      	mov	r1, r6
 800890e:	4680      	mov	r8, r0
 8008910:	4638      	mov	r0, r7
 8008912:	f7ff fe01 	bl	8008518 <_Bfree>
 8008916:	4646      	mov	r6, r8
 8008918:	106d      	asrs	r5, r5, #1
 800891a:	d00b      	beq.n	8008934 <__pow5mult+0xa0>
 800891c:	6820      	ldr	r0, [r4, #0]
 800891e:	b938      	cbnz	r0, 8008930 <__pow5mult+0x9c>
 8008920:	4622      	mov	r2, r4
 8008922:	4621      	mov	r1, r4
 8008924:	4638      	mov	r0, r7
 8008926:	f7ff ff0b 	bl	8008740 <__multiply>
 800892a:	6020      	str	r0, [r4, #0]
 800892c:	f8c0 9000 	str.w	r9, [r0]
 8008930:	4604      	mov	r4, r0
 8008932:	e7e4      	b.n	80088fe <__pow5mult+0x6a>
 8008934:	4630      	mov	r0, r6
 8008936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800893a:	bf00      	nop
 800893c:	08016248 	.word	0x08016248
 8008940:	08016094 	.word	0x08016094
 8008944:	080161ee 	.word	0x080161ee

08008948 <__lshift>:
 8008948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800894c:	460c      	mov	r4, r1
 800894e:	6849      	ldr	r1, [r1, #4]
 8008950:	6923      	ldr	r3, [r4, #16]
 8008952:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008956:	68a3      	ldr	r3, [r4, #8]
 8008958:	4607      	mov	r7, r0
 800895a:	4691      	mov	r9, r2
 800895c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008960:	f108 0601 	add.w	r6, r8, #1
 8008964:	42b3      	cmp	r3, r6
 8008966:	db0b      	blt.n	8008980 <__lshift+0x38>
 8008968:	4638      	mov	r0, r7
 800896a:	f7ff fd95 	bl	8008498 <_Balloc>
 800896e:	4605      	mov	r5, r0
 8008970:	b948      	cbnz	r0, 8008986 <__lshift+0x3e>
 8008972:	4602      	mov	r2, r0
 8008974:	4b28      	ldr	r3, [pc, #160]	@ (8008a18 <__lshift+0xd0>)
 8008976:	4829      	ldr	r0, [pc, #164]	@ (8008a1c <__lshift+0xd4>)
 8008978:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800897c:	f7fe fe20 	bl	80075c0 <__assert_func>
 8008980:	3101      	adds	r1, #1
 8008982:	005b      	lsls	r3, r3, #1
 8008984:	e7ee      	b.n	8008964 <__lshift+0x1c>
 8008986:	2300      	movs	r3, #0
 8008988:	f100 0114 	add.w	r1, r0, #20
 800898c:	f100 0210 	add.w	r2, r0, #16
 8008990:	4618      	mov	r0, r3
 8008992:	4553      	cmp	r3, sl
 8008994:	db33      	blt.n	80089fe <__lshift+0xb6>
 8008996:	6920      	ldr	r0, [r4, #16]
 8008998:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800899c:	f104 0314 	add.w	r3, r4, #20
 80089a0:	f019 091f 	ands.w	r9, r9, #31
 80089a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089ac:	d02b      	beq.n	8008a06 <__lshift+0xbe>
 80089ae:	f1c9 0e20 	rsb	lr, r9, #32
 80089b2:	468a      	mov	sl, r1
 80089b4:	2200      	movs	r2, #0
 80089b6:	6818      	ldr	r0, [r3, #0]
 80089b8:	fa00 f009 	lsl.w	r0, r0, r9
 80089bc:	4310      	orrs	r0, r2
 80089be:	f84a 0b04 	str.w	r0, [sl], #4
 80089c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089c6:	459c      	cmp	ip, r3
 80089c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80089cc:	d8f3      	bhi.n	80089b6 <__lshift+0x6e>
 80089ce:	ebac 0304 	sub.w	r3, ip, r4
 80089d2:	3b15      	subs	r3, #21
 80089d4:	f023 0303 	bic.w	r3, r3, #3
 80089d8:	3304      	adds	r3, #4
 80089da:	f104 0015 	add.w	r0, r4, #21
 80089de:	4584      	cmp	ip, r0
 80089e0:	bf38      	it	cc
 80089e2:	2304      	movcc	r3, #4
 80089e4:	50ca      	str	r2, [r1, r3]
 80089e6:	b10a      	cbz	r2, 80089ec <__lshift+0xa4>
 80089e8:	f108 0602 	add.w	r6, r8, #2
 80089ec:	3e01      	subs	r6, #1
 80089ee:	4638      	mov	r0, r7
 80089f0:	612e      	str	r6, [r5, #16]
 80089f2:	4621      	mov	r1, r4
 80089f4:	f7ff fd90 	bl	8008518 <_Bfree>
 80089f8:	4628      	mov	r0, r5
 80089fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a02:	3301      	adds	r3, #1
 8008a04:	e7c5      	b.n	8008992 <__lshift+0x4a>
 8008a06:	3904      	subs	r1, #4
 8008a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a10:	459c      	cmp	ip, r3
 8008a12:	d8f9      	bhi.n	8008a08 <__lshift+0xc0>
 8008a14:	e7ea      	b.n	80089ec <__lshift+0xa4>
 8008a16:	bf00      	nop
 8008a18:	080161dd 	.word	0x080161dd
 8008a1c:	080161ee 	.word	0x080161ee

08008a20 <__mcmp>:
 8008a20:	690a      	ldr	r2, [r1, #16]
 8008a22:	4603      	mov	r3, r0
 8008a24:	6900      	ldr	r0, [r0, #16]
 8008a26:	1a80      	subs	r0, r0, r2
 8008a28:	b530      	push	{r4, r5, lr}
 8008a2a:	d10e      	bne.n	8008a4a <__mcmp+0x2a>
 8008a2c:	3314      	adds	r3, #20
 8008a2e:	3114      	adds	r1, #20
 8008a30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a40:	4295      	cmp	r5, r2
 8008a42:	d003      	beq.n	8008a4c <__mcmp+0x2c>
 8008a44:	d205      	bcs.n	8008a52 <__mcmp+0x32>
 8008a46:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4a:	bd30      	pop	{r4, r5, pc}
 8008a4c:	42a3      	cmp	r3, r4
 8008a4e:	d3f3      	bcc.n	8008a38 <__mcmp+0x18>
 8008a50:	e7fb      	b.n	8008a4a <__mcmp+0x2a>
 8008a52:	2001      	movs	r0, #1
 8008a54:	e7f9      	b.n	8008a4a <__mcmp+0x2a>
	...

08008a58 <__mdiff>:
 8008a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	4689      	mov	r9, r1
 8008a5e:	4606      	mov	r6, r0
 8008a60:	4611      	mov	r1, r2
 8008a62:	4648      	mov	r0, r9
 8008a64:	4614      	mov	r4, r2
 8008a66:	f7ff ffdb 	bl	8008a20 <__mcmp>
 8008a6a:	1e05      	subs	r5, r0, #0
 8008a6c:	d112      	bne.n	8008a94 <__mdiff+0x3c>
 8008a6e:	4629      	mov	r1, r5
 8008a70:	4630      	mov	r0, r6
 8008a72:	f7ff fd11 	bl	8008498 <_Balloc>
 8008a76:	4602      	mov	r2, r0
 8008a78:	b928      	cbnz	r0, 8008a86 <__mdiff+0x2e>
 8008a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8008b78 <__mdiff+0x120>)
 8008a7c:	f240 2137 	movw	r1, #567	@ 0x237
 8008a80:	483e      	ldr	r0, [pc, #248]	@ (8008b7c <__mdiff+0x124>)
 8008a82:	f7fe fd9d 	bl	80075c0 <__assert_func>
 8008a86:	2301      	movs	r3, #1
 8008a88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	b003      	add	sp, #12
 8008a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a94:	bfbc      	itt	lt
 8008a96:	464b      	movlt	r3, r9
 8008a98:	46a1      	movlt	r9, r4
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008aa0:	bfba      	itte	lt
 8008aa2:	461c      	movlt	r4, r3
 8008aa4:	2501      	movlt	r5, #1
 8008aa6:	2500      	movge	r5, #0
 8008aa8:	f7ff fcf6 	bl	8008498 <_Balloc>
 8008aac:	4602      	mov	r2, r0
 8008aae:	b918      	cbnz	r0, 8008ab8 <__mdiff+0x60>
 8008ab0:	4b31      	ldr	r3, [pc, #196]	@ (8008b78 <__mdiff+0x120>)
 8008ab2:	f240 2145 	movw	r1, #581	@ 0x245
 8008ab6:	e7e3      	b.n	8008a80 <__mdiff+0x28>
 8008ab8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008abc:	6926      	ldr	r6, [r4, #16]
 8008abe:	60c5      	str	r5, [r0, #12]
 8008ac0:	f109 0310 	add.w	r3, r9, #16
 8008ac4:	f109 0514 	add.w	r5, r9, #20
 8008ac8:	f104 0e14 	add.w	lr, r4, #20
 8008acc:	f100 0b14 	add.w	fp, r0, #20
 8008ad0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008ad4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ad8:	9301      	str	r3, [sp, #4]
 8008ada:	46d9      	mov	r9, fp
 8008adc:	f04f 0c00 	mov.w	ip, #0
 8008ae0:	9b01      	ldr	r3, [sp, #4]
 8008ae2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008ae6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	fa1f f38a 	uxth.w	r3, sl
 8008af0:	4619      	mov	r1, r3
 8008af2:	b283      	uxth	r3, r0
 8008af4:	1acb      	subs	r3, r1, r3
 8008af6:	0c00      	lsrs	r0, r0, #16
 8008af8:	4463      	add	r3, ip
 8008afa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008afe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b08:	4576      	cmp	r6, lr
 8008b0a:	f849 3b04 	str.w	r3, [r9], #4
 8008b0e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b12:	d8e5      	bhi.n	8008ae0 <__mdiff+0x88>
 8008b14:	1b33      	subs	r3, r6, r4
 8008b16:	3b15      	subs	r3, #21
 8008b18:	f023 0303 	bic.w	r3, r3, #3
 8008b1c:	3415      	adds	r4, #21
 8008b1e:	3304      	adds	r3, #4
 8008b20:	42a6      	cmp	r6, r4
 8008b22:	bf38      	it	cc
 8008b24:	2304      	movcc	r3, #4
 8008b26:	441d      	add	r5, r3
 8008b28:	445b      	add	r3, fp
 8008b2a:	461e      	mov	r6, r3
 8008b2c:	462c      	mov	r4, r5
 8008b2e:	4544      	cmp	r4, r8
 8008b30:	d30e      	bcc.n	8008b50 <__mdiff+0xf8>
 8008b32:	f108 0103 	add.w	r1, r8, #3
 8008b36:	1b49      	subs	r1, r1, r5
 8008b38:	f021 0103 	bic.w	r1, r1, #3
 8008b3c:	3d03      	subs	r5, #3
 8008b3e:	45a8      	cmp	r8, r5
 8008b40:	bf38      	it	cc
 8008b42:	2100      	movcc	r1, #0
 8008b44:	440b      	add	r3, r1
 8008b46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b4a:	b191      	cbz	r1, 8008b72 <__mdiff+0x11a>
 8008b4c:	6117      	str	r7, [r2, #16]
 8008b4e:	e79d      	b.n	8008a8c <__mdiff+0x34>
 8008b50:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b54:	46e6      	mov	lr, ip
 8008b56:	0c08      	lsrs	r0, r1, #16
 8008b58:	fa1c fc81 	uxtah	ip, ip, r1
 8008b5c:	4471      	add	r1, lr
 8008b5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b62:	b289      	uxth	r1, r1
 8008b64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b68:	f846 1b04 	str.w	r1, [r6], #4
 8008b6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b70:	e7dd      	b.n	8008b2e <__mdiff+0xd6>
 8008b72:	3f01      	subs	r7, #1
 8008b74:	e7e7      	b.n	8008b46 <__mdiff+0xee>
 8008b76:	bf00      	nop
 8008b78:	080161dd 	.word	0x080161dd
 8008b7c:	080161ee 	.word	0x080161ee

08008b80 <__ulp>:
 8008b80:	b082      	sub	sp, #8
 8008b82:	ed8d 0b00 	vstr	d0, [sp]
 8008b86:	9a01      	ldr	r2, [sp, #4]
 8008b88:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc8 <__ulp+0x48>)
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	dc08      	bgt.n	8008ba6 <__ulp+0x26>
 8008b94:	425b      	negs	r3, r3
 8008b96:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008b9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008b9e:	da04      	bge.n	8008baa <__ulp+0x2a>
 8008ba0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008ba4:	4113      	asrs	r3, r2
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	e008      	b.n	8008bbc <__ulp+0x3c>
 8008baa:	f1a2 0314 	sub.w	r3, r2, #20
 8008bae:	2b1e      	cmp	r3, #30
 8008bb0:	bfda      	itte	le
 8008bb2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008bb6:	40da      	lsrle	r2, r3
 8008bb8:	2201      	movgt	r2, #1
 8008bba:	2300      	movs	r3, #0
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	ec41 0b10 	vmov	d0, r0, r1
 8008bc4:	b002      	add	sp, #8
 8008bc6:	4770      	bx	lr
 8008bc8:	7ff00000 	.word	0x7ff00000

08008bcc <__b2d>:
 8008bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd0:	6906      	ldr	r6, [r0, #16]
 8008bd2:	f100 0814 	add.w	r8, r0, #20
 8008bd6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008bda:	1f37      	subs	r7, r6, #4
 8008bdc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008be0:	4610      	mov	r0, r2
 8008be2:	f7ff fd4b 	bl	800867c <__hi0bits>
 8008be6:	f1c0 0320 	rsb	r3, r0, #32
 8008bea:	280a      	cmp	r0, #10
 8008bec:	600b      	str	r3, [r1, #0]
 8008bee:	491b      	ldr	r1, [pc, #108]	@ (8008c5c <__b2d+0x90>)
 8008bf0:	dc15      	bgt.n	8008c1e <__b2d+0x52>
 8008bf2:	f1c0 0c0b 	rsb	ip, r0, #11
 8008bf6:	fa22 f30c 	lsr.w	r3, r2, ip
 8008bfa:	45b8      	cmp	r8, r7
 8008bfc:	ea43 0501 	orr.w	r5, r3, r1
 8008c00:	bf34      	ite	cc
 8008c02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c06:	2300      	movcs	r3, #0
 8008c08:	3015      	adds	r0, #21
 8008c0a:	fa02 f000 	lsl.w	r0, r2, r0
 8008c0e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008c12:	4303      	orrs	r3, r0
 8008c14:	461c      	mov	r4, r3
 8008c16:	ec45 4b10 	vmov	d0, r4, r5
 8008c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c1e:	45b8      	cmp	r8, r7
 8008c20:	bf3a      	itte	cc
 8008c22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c26:	f1a6 0708 	subcc.w	r7, r6, #8
 8008c2a:	2300      	movcs	r3, #0
 8008c2c:	380b      	subs	r0, #11
 8008c2e:	d012      	beq.n	8008c56 <__b2d+0x8a>
 8008c30:	f1c0 0120 	rsb	r1, r0, #32
 8008c34:	fa23 f401 	lsr.w	r4, r3, r1
 8008c38:	4082      	lsls	r2, r0
 8008c3a:	4322      	orrs	r2, r4
 8008c3c:	4547      	cmp	r7, r8
 8008c3e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008c42:	bf8c      	ite	hi
 8008c44:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008c48:	2200      	movls	r2, #0
 8008c4a:	4083      	lsls	r3, r0
 8008c4c:	40ca      	lsrs	r2, r1
 8008c4e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008c52:	4313      	orrs	r3, r2
 8008c54:	e7de      	b.n	8008c14 <__b2d+0x48>
 8008c56:	ea42 0501 	orr.w	r5, r2, r1
 8008c5a:	e7db      	b.n	8008c14 <__b2d+0x48>
 8008c5c:	3ff00000 	.word	0x3ff00000

08008c60 <__d2b>:
 8008c60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c64:	460f      	mov	r7, r1
 8008c66:	2101      	movs	r1, #1
 8008c68:	ec59 8b10 	vmov	r8, r9, d0
 8008c6c:	4616      	mov	r6, r2
 8008c6e:	f7ff fc13 	bl	8008498 <_Balloc>
 8008c72:	4604      	mov	r4, r0
 8008c74:	b930      	cbnz	r0, 8008c84 <__d2b+0x24>
 8008c76:	4602      	mov	r2, r0
 8008c78:	4b23      	ldr	r3, [pc, #140]	@ (8008d08 <__d2b+0xa8>)
 8008c7a:	4824      	ldr	r0, [pc, #144]	@ (8008d0c <__d2b+0xac>)
 8008c7c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c80:	f7fe fc9e 	bl	80075c0 <__assert_func>
 8008c84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c8c:	b10d      	cbz	r5, 8008c92 <__d2b+0x32>
 8008c8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c92:	9301      	str	r3, [sp, #4]
 8008c94:	f1b8 0300 	subs.w	r3, r8, #0
 8008c98:	d023      	beq.n	8008ce2 <__d2b+0x82>
 8008c9a:	4668      	mov	r0, sp
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	f7ff fd0c 	bl	80086ba <__lo0bits>
 8008ca2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ca6:	b1d0      	cbz	r0, 8008cde <__d2b+0x7e>
 8008ca8:	f1c0 0320 	rsb	r3, r0, #32
 8008cac:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb0:	430b      	orrs	r3, r1
 8008cb2:	40c2      	lsrs	r2, r0
 8008cb4:	6163      	str	r3, [r4, #20]
 8008cb6:	9201      	str	r2, [sp, #4]
 8008cb8:	9b01      	ldr	r3, [sp, #4]
 8008cba:	61a3      	str	r3, [r4, #24]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	bf0c      	ite	eq
 8008cc0:	2201      	moveq	r2, #1
 8008cc2:	2202      	movne	r2, #2
 8008cc4:	6122      	str	r2, [r4, #16]
 8008cc6:	b1a5      	cbz	r5, 8008cf2 <__d2b+0x92>
 8008cc8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ccc:	4405      	add	r5, r0
 8008cce:	603d      	str	r5, [r7, #0]
 8008cd0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008cd4:	6030      	str	r0, [r6, #0]
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	b003      	add	sp, #12
 8008cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cde:	6161      	str	r1, [r4, #20]
 8008ce0:	e7ea      	b.n	8008cb8 <__d2b+0x58>
 8008ce2:	a801      	add	r0, sp, #4
 8008ce4:	f7ff fce9 	bl	80086ba <__lo0bits>
 8008ce8:	9b01      	ldr	r3, [sp, #4]
 8008cea:	6163      	str	r3, [r4, #20]
 8008cec:	3020      	adds	r0, #32
 8008cee:	2201      	movs	r2, #1
 8008cf0:	e7e8      	b.n	8008cc4 <__d2b+0x64>
 8008cf2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cf6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008cfa:	6038      	str	r0, [r7, #0]
 8008cfc:	6918      	ldr	r0, [r3, #16]
 8008cfe:	f7ff fcbd 	bl	800867c <__hi0bits>
 8008d02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d06:	e7e5      	b.n	8008cd4 <__d2b+0x74>
 8008d08:	080161dd 	.word	0x080161dd
 8008d0c:	080161ee 	.word	0x080161ee

08008d10 <__ratio>:
 8008d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	b085      	sub	sp, #20
 8008d16:	e9cd 1000 	strd	r1, r0, [sp]
 8008d1a:	a902      	add	r1, sp, #8
 8008d1c:	f7ff ff56 	bl	8008bcc <__b2d>
 8008d20:	9800      	ldr	r0, [sp, #0]
 8008d22:	a903      	add	r1, sp, #12
 8008d24:	ec55 4b10 	vmov	r4, r5, d0
 8008d28:	f7ff ff50 	bl	8008bcc <__b2d>
 8008d2c:	9b01      	ldr	r3, [sp, #4]
 8008d2e:	6919      	ldr	r1, [r3, #16]
 8008d30:	9b00      	ldr	r3, [sp, #0]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	1ac9      	subs	r1, r1, r3
 8008d36:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008d3a:	1a9b      	subs	r3, r3, r2
 8008d3c:	ec5b ab10 	vmov	sl, fp, d0
 8008d40:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	bfce      	itee	gt
 8008d48:	462a      	movgt	r2, r5
 8008d4a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d4e:	465a      	movle	r2, fp
 8008d50:	462f      	mov	r7, r5
 8008d52:	46d9      	mov	r9, fp
 8008d54:	bfcc      	ite	gt
 8008d56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d5a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008d5e:	464b      	mov	r3, r9
 8008d60:	4652      	mov	r2, sl
 8008d62:	4620      	mov	r0, r4
 8008d64:	4639      	mov	r1, r7
 8008d66:	f7f7 fd71 	bl	800084c <__aeabi_ddiv>
 8008d6a:	ec41 0b10 	vmov	d0, r0, r1
 8008d6e:	b005      	add	sp, #20
 8008d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d74 <__copybits>:
 8008d74:	3901      	subs	r1, #1
 8008d76:	b570      	push	{r4, r5, r6, lr}
 8008d78:	1149      	asrs	r1, r1, #5
 8008d7a:	6914      	ldr	r4, [r2, #16]
 8008d7c:	3101      	adds	r1, #1
 8008d7e:	f102 0314 	add.w	r3, r2, #20
 8008d82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d8a:	1f05      	subs	r5, r0, #4
 8008d8c:	42a3      	cmp	r3, r4
 8008d8e:	d30c      	bcc.n	8008daa <__copybits+0x36>
 8008d90:	1aa3      	subs	r3, r4, r2
 8008d92:	3b11      	subs	r3, #17
 8008d94:	f023 0303 	bic.w	r3, r3, #3
 8008d98:	3211      	adds	r2, #17
 8008d9a:	42a2      	cmp	r2, r4
 8008d9c:	bf88      	it	hi
 8008d9e:	2300      	movhi	r3, #0
 8008da0:	4418      	add	r0, r3
 8008da2:	2300      	movs	r3, #0
 8008da4:	4288      	cmp	r0, r1
 8008da6:	d305      	bcc.n	8008db4 <__copybits+0x40>
 8008da8:	bd70      	pop	{r4, r5, r6, pc}
 8008daa:	f853 6b04 	ldr.w	r6, [r3], #4
 8008dae:	f845 6f04 	str.w	r6, [r5, #4]!
 8008db2:	e7eb      	b.n	8008d8c <__copybits+0x18>
 8008db4:	f840 3b04 	str.w	r3, [r0], #4
 8008db8:	e7f4      	b.n	8008da4 <__copybits+0x30>

08008dba <__any_on>:
 8008dba:	f100 0214 	add.w	r2, r0, #20
 8008dbe:	6900      	ldr	r0, [r0, #16]
 8008dc0:	114b      	asrs	r3, r1, #5
 8008dc2:	4298      	cmp	r0, r3
 8008dc4:	b510      	push	{r4, lr}
 8008dc6:	db11      	blt.n	8008dec <__any_on+0x32>
 8008dc8:	dd0a      	ble.n	8008de0 <__any_on+0x26>
 8008dca:	f011 011f 	ands.w	r1, r1, #31
 8008dce:	d007      	beq.n	8008de0 <__any_on+0x26>
 8008dd0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008dd4:	fa24 f001 	lsr.w	r0, r4, r1
 8008dd8:	fa00 f101 	lsl.w	r1, r0, r1
 8008ddc:	428c      	cmp	r4, r1
 8008dde:	d10b      	bne.n	8008df8 <__any_on+0x3e>
 8008de0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d803      	bhi.n	8008df0 <__any_on+0x36>
 8008de8:	2000      	movs	r0, #0
 8008dea:	bd10      	pop	{r4, pc}
 8008dec:	4603      	mov	r3, r0
 8008dee:	e7f7      	b.n	8008de0 <__any_on+0x26>
 8008df0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008df4:	2900      	cmp	r1, #0
 8008df6:	d0f5      	beq.n	8008de4 <__any_on+0x2a>
 8008df8:	2001      	movs	r0, #1
 8008dfa:	e7f6      	b.n	8008dea <__any_on+0x30>

08008dfc <sulp>:
 8008dfc:	b570      	push	{r4, r5, r6, lr}
 8008dfe:	4604      	mov	r4, r0
 8008e00:	460d      	mov	r5, r1
 8008e02:	ec45 4b10 	vmov	d0, r4, r5
 8008e06:	4616      	mov	r6, r2
 8008e08:	f7ff feba 	bl	8008b80 <__ulp>
 8008e0c:	ec51 0b10 	vmov	r0, r1, d0
 8008e10:	b17e      	cbz	r6, 8008e32 <sulp+0x36>
 8008e12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e16:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	dd09      	ble.n	8008e32 <sulp+0x36>
 8008e1e:	051b      	lsls	r3, r3, #20
 8008e20:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008e24:	2400      	movs	r4, #0
 8008e26:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008e2a:	4622      	mov	r2, r4
 8008e2c:	462b      	mov	r3, r5
 8008e2e:	f7f7 fbe3 	bl	80005f8 <__aeabi_dmul>
 8008e32:	ec41 0b10 	vmov	d0, r0, r1
 8008e36:	bd70      	pop	{r4, r5, r6, pc}

08008e38 <_strtod_l>:
 8008e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3c:	b09f      	sub	sp, #124	@ 0x7c
 8008e3e:	460c      	mov	r4, r1
 8008e40:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008e42:	2200      	movs	r2, #0
 8008e44:	921a      	str	r2, [sp, #104]	@ 0x68
 8008e46:	9005      	str	r0, [sp, #20]
 8008e48:	f04f 0a00 	mov.w	sl, #0
 8008e4c:	f04f 0b00 	mov.w	fp, #0
 8008e50:	460a      	mov	r2, r1
 8008e52:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e54:	7811      	ldrb	r1, [r2, #0]
 8008e56:	292b      	cmp	r1, #43	@ 0x2b
 8008e58:	d04a      	beq.n	8008ef0 <_strtod_l+0xb8>
 8008e5a:	d838      	bhi.n	8008ece <_strtod_l+0x96>
 8008e5c:	290d      	cmp	r1, #13
 8008e5e:	d832      	bhi.n	8008ec6 <_strtod_l+0x8e>
 8008e60:	2908      	cmp	r1, #8
 8008e62:	d832      	bhi.n	8008eca <_strtod_l+0x92>
 8008e64:	2900      	cmp	r1, #0
 8008e66:	d03b      	beq.n	8008ee0 <_strtod_l+0xa8>
 8008e68:	2200      	movs	r2, #0
 8008e6a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008e6c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008e6e:	782a      	ldrb	r2, [r5, #0]
 8008e70:	2a30      	cmp	r2, #48	@ 0x30
 8008e72:	f040 80b3 	bne.w	8008fdc <_strtod_l+0x1a4>
 8008e76:	786a      	ldrb	r2, [r5, #1]
 8008e78:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008e7c:	2a58      	cmp	r2, #88	@ 0x58
 8008e7e:	d16e      	bne.n	8008f5e <_strtod_l+0x126>
 8008e80:	9302      	str	r3, [sp, #8]
 8008e82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	ab1a      	add	r3, sp, #104	@ 0x68
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	4a8e      	ldr	r2, [pc, #568]	@ (80090c4 <_strtod_l+0x28c>)
 8008e8c:	9805      	ldr	r0, [sp, #20]
 8008e8e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008e90:	a919      	add	r1, sp, #100	@ 0x64
 8008e92:	f001 fadb 	bl	800a44c <__gethex>
 8008e96:	f010 060f 	ands.w	r6, r0, #15
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	d005      	beq.n	8008eaa <_strtod_l+0x72>
 8008e9e:	2e06      	cmp	r6, #6
 8008ea0:	d128      	bne.n	8008ef4 <_strtod_l+0xbc>
 8008ea2:	3501      	adds	r5, #1
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	9519      	str	r5, [sp, #100]	@ 0x64
 8008ea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008eaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f040 858e 	bne.w	80099ce <_strtod_l+0xb96>
 8008eb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008eb4:	b1cb      	cbz	r3, 8008eea <_strtod_l+0xb2>
 8008eb6:	4652      	mov	r2, sl
 8008eb8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008ebc:	ec43 2b10 	vmov	d0, r2, r3
 8008ec0:	b01f      	add	sp, #124	@ 0x7c
 8008ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec6:	2920      	cmp	r1, #32
 8008ec8:	d1ce      	bne.n	8008e68 <_strtod_l+0x30>
 8008eca:	3201      	adds	r2, #1
 8008ecc:	e7c1      	b.n	8008e52 <_strtod_l+0x1a>
 8008ece:	292d      	cmp	r1, #45	@ 0x2d
 8008ed0:	d1ca      	bne.n	8008e68 <_strtod_l+0x30>
 8008ed2:	2101      	movs	r1, #1
 8008ed4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008ed6:	1c51      	adds	r1, r2, #1
 8008ed8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008eda:	7852      	ldrb	r2, [r2, #1]
 8008edc:	2a00      	cmp	r2, #0
 8008ede:	d1c5      	bne.n	8008e6c <_strtod_l+0x34>
 8008ee0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ee2:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f040 8570 	bne.w	80099ca <_strtod_l+0xb92>
 8008eea:	4652      	mov	r2, sl
 8008eec:	465b      	mov	r3, fp
 8008eee:	e7e5      	b.n	8008ebc <_strtod_l+0x84>
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	e7ef      	b.n	8008ed4 <_strtod_l+0x9c>
 8008ef4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ef6:	b13a      	cbz	r2, 8008f08 <_strtod_l+0xd0>
 8008ef8:	2135      	movs	r1, #53	@ 0x35
 8008efa:	a81c      	add	r0, sp, #112	@ 0x70
 8008efc:	f7ff ff3a 	bl	8008d74 <__copybits>
 8008f00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f02:	9805      	ldr	r0, [sp, #20]
 8008f04:	f7ff fb08 	bl	8008518 <_Bfree>
 8008f08:	3e01      	subs	r6, #1
 8008f0a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008f0c:	2e04      	cmp	r6, #4
 8008f0e:	d806      	bhi.n	8008f1e <_strtod_l+0xe6>
 8008f10:	e8df f006 	tbb	[pc, r6]
 8008f14:	201d0314 	.word	0x201d0314
 8008f18:	14          	.byte	0x14
 8008f19:	00          	.byte	0x00
 8008f1a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008f1e:	05e1      	lsls	r1, r4, #23
 8008f20:	bf48      	it	mi
 8008f22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008f26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f2a:	0d1b      	lsrs	r3, r3, #20
 8008f2c:	051b      	lsls	r3, r3, #20
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1bb      	bne.n	8008eaa <_strtod_l+0x72>
 8008f32:	f7fe fb03 	bl	800753c <__errno>
 8008f36:	2322      	movs	r3, #34	@ 0x22
 8008f38:	6003      	str	r3, [r0, #0]
 8008f3a:	e7b6      	b.n	8008eaa <_strtod_l+0x72>
 8008f3c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008f40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008f44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008f48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f4c:	e7e7      	b.n	8008f1e <_strtod_l+0xe6>
 8008f4e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80090cc <_strtod_l+0x294>
 8008f52:	e7e4      	b.n	8008f1e <_strtod_l+0xe6>
 8008f54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008f58:	f04f 3aff 	mov.w	sl, #4294967295
 8008f5c:	e7df      	b.n	8008f1e <_strtod_l+0xe6>
 8008f5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f60:	1c5a      	adds	r2, r3, #1
 8008f62:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f64:	785b      	ldrb	r3, [r3, #1]
 8008f66:	2b30      	cmp	r3, #48	@ 0x30
 8008f68:	d0f9      	beq.n	8008f5e <_strtod_l+0x126>
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d09d      	beq.n	8008eaa <_strtod_l+0x72>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f74:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f76:	2300      	movs	r3, #0
 8008f78:	9308      	str	r3, [sp, #32]
 8008f7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f7c:	461f      	mov	r7, r3
 8008f7e:	220a      	movs	r2, #10
 8008f80:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008f82:	7805      	ldrb	r5, [r0, #0]
 8008f84:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008f88:	b2d9      	uxtb	r1, r3
 8008f8a:	2909      	cmp	r1, #9
 8008f8c:	d928      	bls.n	8008fe0 <_strtod_l+0x1a8>
 8008f8e:	494e      	ldr	r1, [pc, #312]	@ (80090c8 <_strtod_l+0x290>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	f001 f98b 	bl	800a2ac <strncmp>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	d032      	beq.n	8009000 <_strtod_l+0x1c8>
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	462a      	mov	r2, r5
 8008f9e:	4681      	mov	r9, r0
 8008fa0:	463d      	mov	r5, r7
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2a65      	cmp	r2, #101	@ 0x65
 8008fa6:	d001      	beq.n	8008fac <_strtod_l+0x174>
 8008fa8:	2a45      	cmp	r2, #69	@ 0x45
 8008faa:	d114      	bne.n	8008fd6 <_strtod_l+0x19e>
 8008fac:	b91d      	cbnz	r5, 8008fb6 <_strtod_l+0x17e>
 8008fae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fb0:	4302      	orrs	r2, r0
 8008fb2:	d095      	beq.n	8008ee0 <_strtod_l+0xa8>
 8008fb4:	2500      	movs	r5, #0
 8008fb6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008fb8:	1c62      	adds	r2, r4, #1
 8008fba:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fbc:	7862      	ldrb	r2, [r4, #1]
 8008fbe:	2a2b      	cmp	r2, #43	@ 0x2b
 8008fc0:	d077      	beq.n	80090b2 <_strtod_l+0x27a>
 8008fc2:	2a2d      	cmp	r2, #45	@ 0x2d
 8008fc4:	d07b      	beq.n	80090be <_strtod_l+0x286>
 8008fc6:	f04f 0c00 	mov.w	ip, #0
 8008fca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008fce:	2909      	cmp	r1, #9
 8008fd0:	f240 8082 	bls.w	80090d8 <_strtod_l+0x2a0>
 8008fd4:	9419      	str	r4, [sp, #100]	@ 0x64
 8008fd6:	f04f 0800 	mov.w	r8, #0
 8008fda:	e0a2      	b.n	8009122 <_strtod_l+0x2ea>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	e7c7      	b.n	8008f70 <_strtod_l+0x138>
 8008fe0:	2f08      	cmp	r7, #8
 8008fe2:	bfd5      	itete	le
 8008fe4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008fe6:	9908      	ldrgt	r1, [sp, #32]
 8008fe8:	fb02 3301 	mlale	r3, r2, r1, r3
 8008fec:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008ff0:	f100 0001 	add.w	r0, r0, #1
 8008ff4:	bfd4      	ite	le
 8008ff6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008ff8:	9308      	strgt	r3, [sp, #32]
 8008ffa:	3701      	adds	r7, #1
 8008ffc:	9019      	str	r0, [sp, #100]	@ 0x64
 8008ffe:	e7bf      	b.n	8008f80 <_strtod_l+0x148>
 8009000:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009002:	1c5a      	adds	r2, r3, #1
 8009004:	9219      	str	r2, [sp, #100]	@ 0x64
 8009006:	785a      	ldrb	r2, [r3, #1]
 8009008:	b37f      	cbz	r7, 800906a <_strtod_l+0x232>
 800900a:	4681      	mov	r9, r0
 800900c:	463d      	mov	r5, r7
 800900e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009012:	2b09      	cmp	r3, #9
 8009014:	d912      	bls.n	800903c <_strtod_l+0x204>
 8009016:	2301      	movs	r3, #1
 8009018:	e7c4      	b.n	8008fa4 <_strtod_l+0x16c>
 800901a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800901c:	1c5a      	adds	r2, r3, #1
 800901e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009020:	785a      	ldrb	r2, [r3, #1]
 8009022:	3001      	adds	r0, #1
 8009024:	2a30      	cmp	r2, #48	@ 0x30
 8009026:	d0f8      	beq.n	800901a <_strtod_l+0x1e2>
 8009028:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800902c:	2b08      	cmp	r3, #8
 800902e:	f200 84d3 	bhi.w	80099d8 <_strtod_l+0xba0>
 8009032:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009034:	930c      	str	r3, [sp, #48]	@ 0x30
 8009036:	4681      	mov	r9, r0
 8009038:	2000      	movs	r0, #0
 800903a:	4605      	mov	r5, r0
 800903c:	3a30      	subs	r2, #48	@ 0x30
 800903e:	f100 0301 	add.w	r3, r0, #1
 8009042:	d02a      	beq.n	800909a <_strtod_l+0x262>
 8009044:	4499      	add	r9, r3
 8009046:	eb00 0c05 	add.w	ip, r0, r5
 800904a:	462b      	mov	r3, r5
 800904c:	210a      	movs	r1, #10
 800904e:	4563      	cmp	r3, ip
 8009050:	d10d      	bne.n	800906e <_strtod_l+0x236>
 8009052:	1c69      	adds	r1, r5, #1
 8009054:	4401      	add	r1, r0
 8009056:	4428      	add	r0, r5
 8009058:	2808      	cmp	r0, #8
 800905a:	dc16      	bgt.n	800908a <_strtod_l+0x252>
 800905c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800905e:	230a      	movs	r3, #10
 8009060:	fb03 2300 	mla	r3, r3, r0, r2
 8009064:	930a      	str	r3, [sp, #40]	@ 0x28
 8009066:	2300      	movs	r3, #0
 8009068:	e018      	b.n	800909c <_strtod_l+0x264>
 800906a:	4638      	mov	r0, r7
 800906c:	e7da      	b.n	8009024 <_strtod_l+0x1ec>
 800906e:	2b08      	cmp	r3, #8
 8009070:	f103 0301 	add.w	r3, r3, #1
 8009074:	dc03      	bgt.n	800907e <_strtod_l+0x246>
 8009076:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009078:	434e      	muls	r6, r1
 800907a:	960a      	str	r6, [sp, #40]	@ 0x28
 800907c:	e7e7      	b.n	800904e <_strtod_l+0x216>
 800907e:	2b10      	cmp	r3, #16
 8009080:	bfde      	ittt	le
 8009082:	9e08      	ldrle	r6, [sp, #32]
 8009084:	434e      	mulle	r6, r1
 8009086:	9608      	strle	r6, [sp, #32]
 8009088:	e7e1      	b.n	800904e <_strtod_l+0x216>
 800908a:	280f      	cmp	r0, #15
 800908c:	dceb      	bgt.n	8009066 <_strtod_l+0x22e>
 800908e:	9808      	ldr	r0, [sp, #32]
 8009090:	230a      	movs	r3, #10
 8009092:	fb03 2300 	mla	r3, r3, r0, r2
 8009096:	9308      	str	r3, [sp, #32]
 8009098:	e7e5      	b.n	8009066 <_strtod_l+0x22e>
 800909a:	4629      	mov	r1, r5
 800909c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800909e:	1c50      	adds	r0, r2, #1
 80090a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80090a2:	7852      	ldrb	r2, [r2, #1]
 80090a4:	4618      	mov	r0, r3
 80090a6:	460d      	mov	r5, r1
 80090a8:	e7b1      	b.n	800900e <_strtod_l+0x1d6>
 80090aa:	f04f 0900 	mov.w	r9, #0
 80090ae:	2301      	movs	r3, #1
 80090b0:	e77d      	b.n	8008fae <_strtod_l+0x176>
 80090b2:	f04f 0c00 	mov.w	ip, #0
 80090b6:	1ca2      	adds	r2, r4, #2
 80090b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80090ba:	78a2      	ldrb	r2, [r4, #2]
 80090bc:	e785      	b.n	8008fca <_strtod_l+0x192>
 80090be:	f04f 0c01 	mov.w	ip, #1
 80090c2:	e7f8      	b.n	80090b6 <_strtod_l+0x27e>
 80090c4:	08016360 	.word	0x08016360
 80090c8:	08016348 	.word	0x08016348
 80090cc:	7ff00000 	.word	0x7ff00000
 80090d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090d2:	1c51      	adds	r1, r2, #1
 80090d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80090d6:	7852      	ldrb	r2, [r2, #1]
 80090d8:	2a30      	cmp	r2, #48	@ 0x30
 80090da:	d0f9      	beq.n	80090d0 <_strtod_l+0x298>
 80090dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80090e0:	2908      	cmp	r1, #8
 80090e2:	f63f af78 	bhi.w	8008fd6 <_strtod_l+0x19e>
 80090e6:	3a30      	subs	r2, #48	@ 0x30
 80090e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80090ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80090ee:	f04f 080a 	mov.w	r8, #10
 80090f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090f4:	1c56      	adds	r6, r2, #1
 80090f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80090f8:	7852      	ldrb	r2, [r2, #1]
 80090fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80090fe:	f1be 0f09 	cmp.w	lr, #9
 8009102:	d939      	bls.n	8009178 <_strtod_l+0x340>
 8009104:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009106:	1a76      	subs	r6, r6, r1
 8009108:	2e08      	cmp	r6, #8
 800910a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800910e:	dc03      	bgt.n	8009118 <_strtod_l+0x2e0>
 8009110:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009112:	4588      	cmp	r8, r1
 8009114:	bfa8      	it	ge
 8009116:	4688      	movge	r8, r1
 8009118:	f1bc 0f00 	cmp.w	ip, #0
 800911c:	d001      	beq.n	8009122 <_strtod_l+0x2ea>
 800911e:	f1c8 0800 	rsb	r8, r8, #0
 8009122:	2d00      	cmp	r5, #0
 8009124:	d14e      	bne.n	80091c4 <_strtod_l+0x38c>
 8009126:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009128:	4308      	orrs	r0, r1
 800912a:	f47f aebe 	bne.w	8008eaa <_strtod_l+0x72>
 800912e:	2b00      	cmp	r3, #0
 8009130:	f47f aed6 	bne.w	8008ee0 <_strtod_l+0xa8>
 8009134:	2a69      	cmp	r2, #105	@ 0x69
 8009136:	d028      	beq.n	800918a <_strtod_l+0x352>
 8009138:	dc25      	bgt.n	8009186 <_strtod_l+0x34e>
 800913a:	2a49      	cmp	r2, #73	@ 0x49
 800913c:	d025      	beq.n	800918a <_strtod_l+0x352>
 800913e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009140:	f47f aece 	bne.w	8008ee0 <_strtod_l+0xa8>
 8009144:	499b      	ldr	r1, [pc, #620]	@ (80093b4 <_strtod_l+0x57c>)
 8009146:	a819      	add	r0, sp, #100	@ 0x64
 8009148:	f001 fba2 	bl	800a890 <__match>
 800914c:	2800      	cmp	r0, #0
 800914e:	f43f aec7 	beq.w	8008ee0 <_strtod_l+0xa8>
 8009152:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	2b28      	cmp	r3, #40	@ 0x28
 8009158:	d12e      	bne.n	80091b8 <_strtod_l+0x380>
 800915a:	4997      	ldr	r1, [pc, #604]	@ (80093b8 <_strtod_l+0x580>)
 800915c:	aa1c      	add	r2, sp, #112	@ 0x70
 800915e:	a819      	add	r0, sp, #100	@ 0x64
 8009160:	f001 fbaa 	bl	800a8b8 <__hexnan>
 8009164:	2805      	cmp	r0, #5
 8009166:	d127      	bne.n	80091b8 <_strtod_l+0x380>
 8009168:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800916a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800916e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009172:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009176:	e698      	b.n	8008eaa <_strtod_l+0x72>
 8009178:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800917a:	fb08 2101 	mla	r1, r8, r1, r2
 800917e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009182:	920e      	str	r2, [sp, #56]	@ 0x38
 8009184:	e7b5      	b.n	80090f2 <_strtod_l+0x2ba>
 8009186:	2a6e      	cmp	r2, #110	@ 0x6e
 8009188:	e7da      	b.n	8009140 <_strtod_l+0x308>
 800918a:	498c      	ldr	r1, [pc, #560]	@ (80093bc <_strtod_l+0x584>)
 800918c:	a819      	add	r0, sp, #100	@ 0x64
 800918e:	f001 fb7f 	bl	800a890 <__match>
 8009192:	2800      	cmp	r0, #0
 8009194:	f43f aea4 	beq.w	8008ee0 <_strtod_l+0xa8>
 8009198:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800919a:	4989      	ldr	r1, [pc, #548]	@ (80093c0 <_strtod_l+0x588>)
 800919c:	3b01      	subs	r3, #1
 800919e:	a819      	add	r0, sp, #100	@ 0x64
 80091a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80091a2:	f001 fb75 	bl	800a890 <__match>
 80091a6:	b910      	cbnz	r0, 80091ae <_strtod_l+0x376>
 80091a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091aa:	3301      	adds	r3, #1
 80091ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80091ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80093d0 <_strtod_l+0x598>
 80091b2:	f04f 0a00 	mov.w	sl, #0
 80091b6:	e678      	b.n	8008eaa <_strtod_l+0x72>
 80091b8:	4882      	ldr	r0, [pc, #520]	@ (80093c4 <_strtod_l+0x58c>)
 80091ba:	f001 f8bd 	bl	800a338 <nan>
 80091be:	ec5b ab10 	vmov	sl, fp, d0
 80091c2:	e672      	b.n	8008eaa <_strtod_l+0x72>
 80091c4:	eba8 0309 	sub.w	r3, r8, r9
 80091c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80091ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80091cc:	2f00      	cmp	r7, #0
 80091ce:	bf08      	it	eq
 80091d0:	462f      	moveq	r7, r5
 80091d2:	2d10      	cmp	r5, #16
 80091d4:	462c      	mov	r4, r5
 80091d6:	bfa8      	it	ge
 80091d8:	2410      	movge	r4, #16
 80091da:	f7f7 f993 	bl	8000504 <__aeabi_ui2d>
 80091de:	2d09      	cmp	r5, #9
 80091e0:	4682      	mov	sl, r0
 80091e2:	468b      	mov	fp, r1
 80091e4:	dc13      	bgt.n	800920e <_strtod_l+0x3d6>
 80091e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f43f ae5e 	beq.w	8008eaa <_strtod_l+0x72>
 80091ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f0:	dd78      	ble.n	80092e4 <_strtod_l+0x4ac>
 80091f2:	2b16      	cmp	r3, #22
 80091f4:	dc5f      	bgt.n	80092b6 <_strtod_l+0x47e>
 80091f6:	4974      	ldr	r1, [pc, #464]	@ (80093c8 <_strtod_l+0x590>)
 80091f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009200:	4652      	mov	r2, sl
 8009202:	465b      	mov	r3, fp
 8009204:	f7f7 f9f8 	bl	80005f8 <__aeabi_dmul>
 8009208:	4682      	mov	sl, r0
 800920a:	468b      	mov	fp, r1
 800920c:	e64d      	b.n	8008eaa <_strtod_l+0x72>
 800920e:	4b6e      	ldr	r3, [pc, #440]	@ (80093c8 <_strtod_l+0x590>)
 8009210:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009214:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009218:	f7f7 f9ee 	bl	80005f8 <__aeabi_dmul>
 800921c:	4682      	mov	sl, r0
 800921e:	9808      	ldr	r0, [sp, #32]
 8009220:	468b      	mov	fp, r1
 8009222:	f7f7 f96f 	bl	8000504 <__aeabi_ui2d>
 8009226:	4602      	mov	r2, r0
 8009228:	460b      	mov	r3, r1
 800922a:	4650      	mov	r0, sl
 800922c:	4659      	mov	r1, fp
 800922e:	f7f7 f82d 	bl	800028c <__adddf3>
 8009232:	2d0f      	cmp	r5, #15
 8009234:	4682      	mov	sl, r0
 8009236:	468b      	mov	fp, r1
 8009238:	ddd5      	ble.n	80091e6 <_strtod_l+0x3ae>
 800923a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800923c:	1b2c      	subs	r4, r5, r4
 800923e:	441c      	add	r4, r3
 8009240:	2c00      	cmp	r4, #0
 8009242:	f340 8096 	ble.w	8009372 <_strtod_l+0x53a>
 8009246:	f014 030f 	ands.w	r3, r4, #15
 800924a:	d00a      	beq.n	8009262 <_strtod_l+0x42a>
 800924c:	495e      	ldr	r1, [pc, #376]	@ (80093c8 <_strtod_l+0x590>)
 800924e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009252:	4652      	mov	r2, sl
 8009254:	465b      	mov	r3, fp
 8009256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800925a:	f7f7 f9cd 	bl	80005f8 <__aeabi_dmul>
 800925e:	4682      	mov	sl, r0
 8009260:	468b      	mov	fp, r1
 8009262:	f034 040f 	bics.w	r4, r4, #15
 8009266:	d073      	beq.n	8009350 <_strtod_l+0x518>
 8009268:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800926c:	dd48      	ble.n	8009300 <_strtod_l+0x4c8>
 800926e:	2400      	movs	r4, #0
 8009270:	46a0      	mov	r8, r4
 8009272:	940a      	str	r4, [sp, #40]	@ 0x28
 8009274:	46a1      	mov	r9, r4
 8009276:	9a05      	ldr	r2, [sp, #20]
 8009278:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80093d0 <_strtod_l+0x598>
 800927c:	2322      	movs	r3, #34	@ 0x22
 800927e:	6013      	str	r3, [r2, #0]
 8009280:	f04f 0a00 	mov.w	sl, #0
 8009284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009286:	2b00      	cmp	r3, #0
 8009288:	f43f ae0f 	beq.w	8008eaa <_strtod_l+0x72>
 800928c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800928e:	9805      	ldr	r0, [sp, #20]
 8009290:	f7ff f942 	bl	8008518 <_Bfree>
 8009294:	9805      	ldr	r0, [sp, #20]
 8009296:	4649      	mov	r1, r9
 8009298:	f7ff f93e 	bl	8008518 <_Bfree>
 800929c:	9805      	ldr	r0, [sp, #20]
 800929e:	4641      	mov	r1, r8
 80092a0:	f7ff f93a 	bl	8008518 <_Bfree>
 80092a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092a6:	9805      	ldr	r0, [sp, #20]
 80092a8:	f7ff f936 	bl	8008518 <_Bfree>
 80092ac:	9805      	ldr	r0, [sp, #20]
 80092ae:	4621      	mov	r1, r4
 80092b0:	f7ff f932 	bl	8008518 <_Bfree>
 80092b4:	e5f9      	b.n	8008eaa <_strtod_l+0x72>
 80092b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80092bc:	4293      	cmp	r3, r2
 80092be:	dbbc      	blt.n	800923a <_strtod_l+0x402>
 80092c0:	4c41      	ldr	r4, [pc, #260]	@ (80093c8 <_strtod_l+0x590>)
 80092c2:	f1c5 050f 	rsb	r5, r5, #15
 80092c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80092ca:	4652      	mov	r2, sl
 80092cc:	465b      	mov	r3, fp
 80092ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092d2:	f7f7 f991 	bl	80005f8 <__aeabi_dmul>
 80092d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d8:	1b5d      	subs	r5, r3, r5
 80092da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80092de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80092e2:	e78f      	b.n	8009204 <_strtod_l+0x3cc>
 80092e4:	3316      	adds	r3, #22
 80092e6:	dba8      	blt.n	800923a <_strtod_l+0x402>
 80092e8:	4b37      	ldr	r3, [pc, #220]	@ (80093c8 <_strtod_l+0x590>)
 80092ea:	eba9 0808 	sub.w	r8, r9, r8
 80092ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80092f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80092f6:	4650      	mov	r0, sl
 80092f8:	4659      	mov	r1, fp
 80092fa:	f7f7 faa7 	bl	800084c <__aeabi_ddiv>
 80092fe:	e783      	b.n	8009208 <_strtod_l+0x3d0>
 8009300:	4b32      	ldr	r3, [pc, #200]	@ (80093cc <_strtod_l+0x594>)
 8009302:	9308      	str	r3, [sp, #32]
 8009304:	2300      	movs	r3, #0
 8009306:	1124      	asrs	r4, r4, #4
 8009308:	4650      	mov	r0, sl
 800930a:	4659      	mov	r1, fp
 800930c:	461e      	mov	r6, r3
 800930e:	2c01      	cmp	r4, #1
 8009310:	dc21      	bgt.n	8009356 <_strtod_l+0x51e>
 8009312:	b10b      	cbz	r3, 8009318 <_strtod_l+0x4e0>
 8009314:	4682      	mov	sl, r0
 8009316:	468b      	mov	fp, r1
 8009318:	492c      	ldr	r1, [pc, #176]	@ (80093cc <_strtod_l+0x594>)
 800931a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800931e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009322:	4652      	mov	r2, sl
 8009324:	465b      	mov	r3, fp
 8009326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800932a:	f7f7 f965 	bl	80005f8 <__aeabi_dmul>
 800932e:	4b28      	ldr	r3, [pc, #160]	@ (80093d0 <_strtod_l+0x598>)
 8009330:	460a      	mov	r2, r1
 8009332:	400b      	ands	r3, r1
 8009334:	4927      	ldr	r1, [pc, #156]	@ (80093d4 <_strtod_l+0x59c>)
 8009336:	428b      	cmp	r3, r1
 8009338:	4682      	mov	sl, r0
 800933a:	d898      	bhi.n	800926e <_strtod_l+0x436>
 800933c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009340:	428b      	cmp	r3, r1
 8009342:	bf86      	itte	hi
 8009344:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80093d8 <_strtod_l+0x5a0>
 8009348:	f04f 3aff 	movhi.w	sl, #4294967295
 800934c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009350:	2300      	movs	r3, #0
 8009352:	9308      	str	r3, [sp, #32]
 8009354:	e07a      	b.n	800944c <_strtod_l+0x614>
 8009356:	07e2      	lsls	r2, r4, #31
 8009358:	d505      	bpl.n	8009366 <_strtod_l+0x52e>
 800935a:	9b08      	ldr	r3, [sp, #32]
 800935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009360:	f7f7 f94a 	bl	80005f8 <__aeabi_dmul>
 8009364:	2301      	movs	r3, #1
 8009366:	9a08      	ldr	r2, [sp, #32]
 8009368:	3208      	adds	r2, #8
 800936a:	3601      	adds	r6, #1
 800936c:	1064      	asrs	r4, r4, #1
 800936e:	9208      	str	r2, [sp, #32]
 8009370:	e7cd      	b.n	800930e <_strtod_l+0x4d6>
 8009372:	d0ed      	beq.n	8009350 <_strtod_l+0x518>
 8009374:	4264      	negs	r4, r4
 8009376:	f014 020f 	ands.w	r2, r4, #15
 800937a:	d00a      	beq.n	8009392 <_strtod_l+0x55a>
 800937c:	4b12      	ldr	r3, [pc, #72]	@ (80093c8 <_strtod_l+0x590>)
 800937e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009382:	4650      	mov	r0, sl
 8009384:	4659      	mov	r1, fp
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	f7f7 fa5f 	bl	800084c <__aeabi_ddiv>
 800938e:	4682      	mov	sl, r0
 8009390:	468b      	mov	fp, r1
 8009392:	1124      	asrs	r4, r4, #4
 8009394:	d0dc      	beq.n	8009350 <_strtod_l+0x518>
 8009396:	2c1f      	cmp	r4, #31
 8009398:	dd20      	ble.n	80093dc <_strtod_l+0x5a4>
 800939a:	2400      	movs	r4, #0
 800939c:	46a0      	mov	r8, r4
 800939e:	940a      	str	r4, [sp, #40]	@ 0x28
 80093a0:	46a1      	mov	r9, r4
 80093a2:	9a05      	ldr	r2, [sp, #20]
 80093a4:	2322      	movs	r3, #34	@ 0x22
 80093a6:	f04f 0a00 	mov.w	sl, #0
 80093aa:	f04f 0b00 	mov.w	fp, #0
 80093ae:	6013      	str	r3, [r2, #0]
 80093b0:	e768      	b.n	8009284 <_strtod_l+0x44c>
 80093b2:	bf00      	nop
 80093b4:	08016110 	.word	0x08016110
 80093b8:	0801634c 	.word	0x0801634c
 80093bc:	08016108 	.word	0x08016108
 80093c0:	0801617b 	.word	0x0801617b
 80093c4:	08016177 	.word	0x08016177
 80093c8:	08016280 	.word	0x08016280
 80093cc:	08016258 	.word	0x08016258
 80093d0:	7ff00000 	.word	0x7ff00000
 80093d4:	7ca00000 	.word	0x7ca00000
 80093d8:	7fefffff 	.word	0x7fefffff
 80093dc:	f014 0310 	ands.w	r3, r4, #16
 80093e0:	bf18      	it	ne
 80093e2:	236a      	movne	r3, #106	@ 0x6a
 80093e4:	4ea9      	ldr	r6, [pc, #676]	@ (800968c <_strtod_l+0x854>)
 80093e6:	9308      	str	r3, [sp, #32]
 80093e8:	4650      	mov	r0, sl
 80093ea:	4659      	mov	r1, fp
 80093ec:	2300      	movs	r3, #0
 80093ee:	07e2      	lsls	r2, r4, #31
 80093f0:	d504      	bpl.n	80093fc <_strtod_l+0x5c4>
 80093f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093f6:	f7f7 f8ff 	bl	80005f8 <__aeabi_dmul>
 80093fa:	2301      	movs	r3, #1
 80093fc:	1064      	asrs	r4, r4, #1
 80093fe:	f106 0608 	add.w	r6, r6, #8
 8009402:	d1f4      	bne.n	80093ee <_strtod_l+0x5b6>
 8009404:	b10b      	cbz	r3, 800940a <_strtod_l+0x5d2>
 8009406:	4682      	mov	sl, r0
 8009408:	468b      	mov	fp, r1
 800940a:	9b08      	ldr	r3, [sp, #32]
 800940c:	b1b3      	cbz	r3, 800943c <_strtod_l+0x604>
 800940e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009412:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009416:	2b00      	cmp	r3, #0
 8009418:	4659      	mov	r1, fp
 800941a:	dd0f      	ble.n	800943c <_strtod_l+0x604>
 800941c:	2b1f      	cmp	r3, #31
 800941e:	dd55      	ble.n	80094cc <_strtod_l+0x694>
 8009420:	2b34      	cmp	r3, #52	@ 0x34
 8009422:	bfde      	ittt	le
 8009424:	f04f 33ff 	movle.w	r3, #4294967295
 8009428:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800942c:	4093      	lslle	r3, r2
 800942e:	f04f 0a00 	mov.w	sl, #0
 8009432:	bfcc      	ite	gt
 8009434:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009438:	ea03 0b01 	andle.w	fp, r3, r1
 800943c:	2200      	movs	r2, #0
 800943e:	2300      	movs	r3, #0
 8009440:	4650      	mov	r0, sl
 8009442:	4659      	mov	r1, fp
 8009444:	f7f7 fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 8009448:	2800      	cmp	r0, #0
 800944a:	d1a6      	bne.n	800939a <_strtod_l+0x562>
 800944c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009452:	9805      	ldr	r0, [sp, #20]
 8009454:	462b      	mov	r3, r5
 8009456:	463a      	mov	r2, r7
 8009458:	f7ff f8c6 	bl	80085e8 <__s2b>
 800945c:	900a      	str	r0, [sp, #40]	@ 0x28
 800945e:	2800      	cmp	r0, #0
 8009460:	f43f af05 	beq.w	800926e <_strtod_l+0x436>
 8009464:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009466:	2a00      	cmp	r2, #0
 8009468:	eba9 0308 	sub.w	r3, r9, r8
 800946c:	bfa8      	it	ge
 800946e:	2300      	movge	r3, #0
 8009470:	9312      	str	r3, [sp, #72]	@ 0x48
 8009472:	2400      	movs	r4, #0
 8009474:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009478:	9316      	str	r3, [sp, #88]	@ 0x58
 800947a:	46a0      	mov	r8, r4
 800947c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800947e:	9805      	ldr	r0, [sp, #20]
 8009480:	6859      	ldr	r1, [r3, #4]
 8009482:	f7ff f809 	bl	8008498 <_Balloc>
 8009486:	4681      	mov	r9, r0
 8009488:	2800      	cmp	r0, #0
 800948a:	f43f aef4 	beq.w	8009276 <_strtod_l+0x43e>
 800948e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009490:	691a      	ldr	r2, [r3, #16]
 8009492:	3202      	adds	r2, #2
 8009494:	f103 010c 	add.w	r1, r3, #12
 8009498:	0092      	lsls	r2, r2, #2
 800949a:	300c      	adds	r0, #12
 800949c:	f7fe f87b 	bl	8007596 <memcpy>
 80094a0:	ec4b ab10 	vmov	d0, sl, fp
 80094a4:	9805      	ldr	r0, [sp, #20]
 80094a6:	aa1c      	add	r2, sp, #112	@ 0x70
 80094a8:	a91b      	add	r1, sp, #108	@ 0x6c
 80094aa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80094ae:	f7ff fbd7 	bl	8008c60 <__d2b>
 80094b2:	901a      	str	r0, [sp, #104]	@ 0x68
 80094b4:	2800      	cmp	r0, #0
 80094b6:	f43f aede 	beq.w	8009276 <_strtod_l+0x43e>
 80094ba:	9805      	ldr	r0, [sp, #20]
 80094bc:	2101      	movs	r1, #1
 80094be:	f7ff f929 	bl	8008714 <__i2b>
 80094c2:	4680      	mov	r8, r0
 80094c4:	b948      	cbnz	r0, 80094da <_strtod_l+0x6a2>
 80094c6:	f04f 0800 	mov.w	r8, #0
 80094ca:	e6d4      	b.n	8009276 <_strtod_l+0x43e>
 80094cc:	f04f 32ff 	mov.w	r2, #4294967295
 80094d0:	fa02 f303 	lsl.w	r3, r2, r3
 80094d4:	ea03 0a0a 	and.w	sl, r3, sl
 80094d8:	e7b0      	b.n	800943c <_strtod_l+0x604>
 80094da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80094dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80094de:	2d00      	cmp	r5, #0
 80094e0:	bfab      	itete	ge
 80094e2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80094e4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80094e6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80094e8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80094ea:	bfac      	ite	ge
 80094ec:	18ef      	addge	r7, r5, r3
 80094ee:	1b5e      	sublt	r6, r3, r5
 80094f0:	9b08      	ldr	r3, [sp, #32]
 80094f2:	1aed      	subs	r5, r5, r3
 80094f4:	4415      	add	r5, r2
 80094f6:	4b66      	ldr	r3, [pc, #408]	@ (8009690 <_strtod_l+0x858>)
 80094f8:	3d01      	subs	r5, #1
 80094fa:	429d      	cmp	r5, r3
 80094fc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009500:	da50      	bge.n	80095a4 <_strtod_l+0x76c>
 8009502:	1b5b      	subs	r3, r3, r5
 8009504:	2b1f      	cmp	r3, #31
 8009506:	eba2 0203 	sub.w	r2, r2, r3
 800950a:	f04f 0101 	mov.w	r1, #1
 800950e:	dc3d      	bgt.n	800958c <_strtod_l+0x754>
 8009510:	fa01 f303 	lsl.w	r3, r1, r3
 8009514:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009516:	2300      	movs	r3, #0
 8009518:	9310      	str	r3, [sp, #64]	@ 0x40
 800951a:	18bd      	adds	r5, r7, r2
 800951c:	9b08      	ldr	r3, [sp, #32]
 800951e:	42af      	cmp	r7, r5
 8009520:	4416      	add	r6, r2
 8009522:	441e      	add	r6, r3
 8009524:	463b      	mov	r3, r7
 8009526:	bfa8      	it	ge
 8009528:	462b      	movge	r3, r5
 800952a:	42b3      	cmp	r3, r6
 800952c:	bfa8      	it	ge
 800952e:	4633      	movge	r3, r6
 8009530:	2b00      	cmp	r3, #0
 8009532:	bfc2      	ittt	gt
 8009534:	1aed      	subgt	r5, r5, r3
 8009536:	1af6      	subgt	r6, r6, r3
 8009538:	1aff      	subgt	r7, r7, r3
 800953a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800953c:	2b00      	cmp	r3, #0
 800953e:	dd16      	ble.n	800956e <_strtod_l+0x736>
 8009540:	4641      	mov	r1, r8
 8009542:	9805      	ldr	r0, [sp, #20]
 8009544:	461a      	mov	r2, r3
 8009546:	f7ff f9a5 	bl	8008894 <__pow5mult>
 800954a:	4680      	mov	r8, r0
 800954c:	2800      	cmp	r0, #0
 800954e:	d0ba      	beq.n	80094c6 <_strtod_l+0x68e>
 8009550:	4601      	mov	r1, r0
 8009552:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009554:	9805      	ldr	r0, [sp, #20]
 8009556:	f7ff f8f3 	bl	8008740 <__multiply>
 800955a:	900e      	str	r0, [sp, #56]	@ 0x38
 800955c:	2800      	cmp	r0, #0
 800955e:	f43f ae8a 	beq.w	8009276 <_strtod_l+0x43e>
 8009562:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009564:	9805      	ldr	r0, [sp, #20]
 8009566:	f7fe ffd7 	bl	8008518 <_Bfree>
 800956a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800956c:	931a      	str	r3, [sp, #104]	@ 0x68
 800956e:	2d00      	cmp	r5, #0
 8009570:	dc1d      	bgt.n	80095ae <_strtod_l+0x776>
 8009572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009574:	2b00      	cmp	r3, #0
 8009576:	dd23      	ble.n	80095c0 <_strtod_l+0x788>
 8009578:	4649      	mov	r1, r9
 800957a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800957c:	9805      	ldr	r0, [sp, #20]
 800957e:	f7ff f989 	bl	8008894 <__pow5mult>
 8009582:	4681      	mov	r9, r0
 8009584:	b9e0      	cbnz	r0, 80095c0 <_strtod_l+0x788>
 8009586:	f04f 0900 	mov.w	r9, #0
 800958a:	e674      	b.n	8009276 <_strtod_l+0x43e>
 800958c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009590:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009594:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009598:	35e2      	adds	r5, #226	@ 0xe2
 800959a:	fa01 f305 	lsl.w	r3, r1, r5
 800959e:	9310      	str	r3, [sp, #64]	@ 0x40
 80095a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80095a2:	e7ba      	b.n	800951a <_strtod_l+0x6e2>
 80095a4:	2300      	movs	r3, #0
 80095a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80095a8:	2301      	movs	r3, #1
 80095aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095ac:	e7b5      	b.n	800951a <_strtod_l+0x6e2>
 80095ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095b0:	9805      	ldr	r0, [sp, #20]
 80095b2:	462a      	mov	r2, r5
 80095b4:	f7ff f9c8 	bl	8008948 <__lshift>
 80095b8:	901a      	str	r0, [sp, #104]	@ 0x68
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d1d9      	bne.n	8009572 <_strtod_l+0x73a>
 80095be:	e65a      	b.n	8009276 <_strtod_l+0x43e>
 80095c0:	2e00      	cmp	r6, #0
 80095c2:	dd07      	ble.n	80095d4 <_strtod_l+0x79c>
 80095c4:	4649      	mov	r1, r9
 80095c6:	9805      	ldr	r0, [sp, #20]
 80095c8:	4632      	mov	r2, r6
 80095ca:	f7ff f9bd 	bl	8008948 <__lshift>
 80095ce:	4681      	mov	r9, r0
 80095d0:	2800      	cmp	r0, #0
 80095d2:	d0d8      	beq.n	8009586 <_strtod_l+0x74e>
 80095d4:	2f00      	cmp	r7, #0
 80095d6:	dd08      	ble.n	80095ea <_strtod_l+0x7b2>
 80095d8:	4641      	mov	r1, r8
 80095da:	9805      	ldr	r0, [sp, #20]
 80095dc:	463a      	mov	r2, r7
 80095de:	f7ff f9b3 	bl	8008948 <__lshift>
 80095e2:	4680      	mov	r8, r0
 80095e4:	2800      	cmp	r0, #0
 80095e6:	f43f ae46 	beq.w	8009276 <_strtod_l+0x43e>
 80095ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095ec:	9805      	ldr	r0, [sp, #20]
 80095ee:	464a      	mov	r2, r9
 80095f0:	f7ff fa32 	bl	8008a58 <__mdiff>
 80095f4:	4604      	mov	r4, r0
 80095f6:	2800      	cmp	r0, #0
 80095f8:	f43f ae3d 	beq.w	8009276 <_strtod_l+0x43e>
 80095fc:	68c3      	ldr	r3, [r0, #12]
 80095fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009600:	2300      	movs	r3, #0
 8009602:	60c3      	str	r3, [r0, #12]
 8009604:	4641      	mov	r1, r8
 8009606:	f7ff fa0b 	bl	8008a20 <__mcmp>
 800960a:	2800      	cmp	r0, #0
 800960c:	da46      	bge.n	800969c <_strtod_l+0x864>
 800960e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009610:	ea53 030a 	orrs.w	r3, r3, sl
 8009614:	d16c      	bne.n	80096f0 <_strtod_l+0x8b8>
 8009616:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800961a:	2b00      	cmp	r3, #0
 800961c:	d168      	bne.n	80096f0 <_strtod_l+0x8b8>
 800961e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009622:	0d1b      	lsrs	r3, r3, #20
 8009624:	051b      	lsls	r3, r3, #20
 8009626:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800962a:	d961      	bls.n	80096f0 <_strtod_l+0x8b8>
 800962c:	6963      	ldr	r3, [r4, #20]
 800962e:	b913      	cbnz	r3, 8009636 <_strtod_l+0x7fe>
 8009630:	6923      	ldr	r3, [r4, #16]
 8009632:	2b01      	cmp	r3, #1
 8009634:	dd5c      	ble.n	80096f0 <_strtod_l+0x8b8>
 8009636:	4621      	mov	r1, r4
 8009638:	2201      	movs	r2, #1
 800963a:	9805      	ldr	r0, [sp, #20]
 800963c:	f7ff f984 	bl	8008948 <__lshift>
 8009640:	4641      	mov	r1, r8
 8009642:	4604      	mov	r4, r0
 8009644:	f7ff f9ec 	bl	8008a20 <__mcmp>
 8009648:	2800      	cmp	r0, #0
 800964a:	dd51      	ble.n	80096f0 <_strtod_l+0x8b8>
 800964c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009650:	9a08      	ldr	r2, [sp, #32]
 8009652:	0d1b      	lsrs	r3, r3, #20
 8009654:	051b      	lsls	r3, r3, #20
 8009656:	2a00      	cmp	r2, #0
 8009658:	d06b      	beq.n	8009732 <_strtod_l+0x8fa>
 800965a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800965e:	d868      	bhi.n	8009732 <_strtod_l+0x8fa>
 8009660:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009664:	f67f ae9d 	bls.w	80093a2 <_strtod_l+0x56a>
 8009668:	4b0a      	ldr	r3, [pc, #40]	@ (8009694 <_strtod_l+0x85c>)
 800966a:	4650      	mov	r0, sl
 800966c:	4659      	mov	r1, fp
 800966e:	2200      	movs	r2, #0
 8009670:	f7f6 ffc2 	bl	80005f8 <__aeabi_dmul>
 8009674:	4b08      	ldr	r3, [pc, #32]	@ (8009698 <_strtod_l+0x860>)
 8009676:	400b      	ands	r3, r1
 8009678:	4682      	mov	sl, r0
 800967a:	468b      	mov	fp, r1
 800967c:	2b00      	cmp	r3, #0
 800967e:	f47f ae05 	bne.w	800928c <_strtod_l+0x454>
 8009682:	9a05      	ldr	r2, [sp, #20]
 8009684:	2322      	movs	r3, #34	@ 0x22
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	e600      	b.n	800928c <_strtod_l+0x454>
 800968a:	bf00      	nop
 800968c:	08016378 	.word	0x08016378
 8009690:	fffffc02 	.word	0xfffffc02
 8009694:	39500000 	.word	0x39500000
 8009698:	7ff00000 	.word	0x7ff00000
 800969c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80096a0:	d165      	bne.n	800976e <_strtod_l+0x936>
 80096a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80096a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096a8:	b35a      	cbz	r2, 8009702 <_strtod_l+0x8ca>
 80096aa:	4a9f      	ldr	r2, [pc, #636]	@ (8009928 <_strtod_l+0xaf0>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d12b      	bne.n	8009708 <_strtod_l+0x8d0>
 80096b0:	9b08      	ldr	r3, [sp, #32]
 80096b2:	4651      	mov	r1, sl
 80096b4:	b303      	cbz	r3, 80096f8 <_strtod_l+0x8c0>
 80096b6:	4b9d      	ldr	r3, [pc, #628]	@ (800992c <_strtod_l+0xaf4>)
 80096b8:	465a      	mov	r2, fp
 80096ba:	4013      	ands	r3, r2
 80096bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80096c0:	f04f 32ff 	mov.w	r2, #4294967295
 80096c4:	d81b      	bhi.n	80096fe <_strtod_l+0x8c6>
 80096c6:	0d1b      	lsrs	r3, r3, #20
 80096c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80096cc:	fa02 f303 	lsl.w	r3, r2, r3
 80096d0:	4299      	cmp	r1, r3
 80096d2:	d119      	bne.n	8009708 <_strtod_l+0x8d0>
 80096d4:	4b96      	ldr	r3, [pc, #600]	@ (8009930 <_strtod_l+0xaf8>)
 80096d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096d8:	429a      	cmp	r2, r3
 80096da:	d102      	bne.n	80096e2 <_strtod_l+0x8aa>
 80096dc:	3101      	adds	r1, #1
 80096de:	f43f adca 	beq.w	8009276 <_strtod_l+0x43e>
 80096e2:	4b92      	ldr	r3, [pc, #584]	@ (800992c <_strtod_l+0xaf4>)
 80096e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096e6:	401a      	ands	r2, r3
 80096e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80096ec:	f04f 0a00 	mov.w	sl, #0
 80096f0:	9b08      	ldr	r3, [sp, #32]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1b8      	bne.n	8009668 <_strtod_l+0x830>
 80096f6:	e5c9      	b.n	800928c <_strtod_l+0x454>
 80096f8:	f04f 33ff 	mov.w	r3, #4294967295
 80096fc:	e7e8      	b.n	80096d0 <_strtod_l+0x898>
 80096fe:	4613      	mov	r3, r2
 8009700:	e7e6      	b.n	80096d0 <_strtod_l+0x898>
 8009702:	ea53 030a 	orrs.w	r3, r3, sl
 8009706:	d0a1      	beq.n	800964c <_strtod_l+0x814>
 8009708:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800970a:	b1db      	cbz	r3, 8009744 <_strtod_l+0x90c>
 800970c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800970e:	4213      	tst	r3, r2
 8009710:	d0ee      	beq.n	80096f0 <_strtod_l+0x8b8>
 8009712:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009714:	9a08      	ldr	r2, [sp, #32]
 8009716:	4650      	mov	r0, sl
 8009718:	4659      	mov	r1, fp
 800971a:	b1bb      	cbz	r3, 800974c <_strtod_l+0x914>
 800971c:	f7ff fb6e 	bl	8008dfc <sulp>
 8009720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009724:	ec53 2b10 	vmov	r2, r3, d0
 8009728:	f7f6 fdb0 	bl	800028c <__adddf3>
 800972c:	4682      	mov	sl, r0
 800972e:	468b      	mov	fp, r1
 8009730:	e7de      	b.n	80096f0 <_strtod_l+0x8b8>
 8009732:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009736:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800973a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800973e:	f04f 3aff 	mov.w	sl, #4294967295
 8009742:	e7d5      	b.n	80096f0 <_strtod_l+0x8b8>
 8009744:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009746:	ea13 0f0a 	tst.w	r3, sl
 800974a:	e7e1      	b.n	8009710 <_strtod_l+0x8d8>
 800974c:	f7ff fb56 	bl	8008dfc <sulp>
 8009750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009754:	ec53 2b10 	vmov	r2, r3, d0
 8009758:	f7f6 fd96 	bl	8000288 <__aeabi_dsub>
 800975c:	2200      	movs	r2, #0
 800975e:	2300      	movs	r3, #0
 8009760:	4682      	mov	sl, r0
 8009762:	468b      	mov	fp, r1
 8009764:	f7f7 f9b0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009768:	2800      	cmp	r0, #0
 800976a:	d0c1      	beq.n	80096f0 <_strtod_l+0x8b8>
 800976c:	e619      	b.n	80093a2 <_strtod_l+0x56a>
 800976e:	4641      	mov	r1, r8
 8009770:	4620      	mov	r0, r4
 8009772:	f7ff facd 	bl	8008d10 <__ratio>
 8009776:	ec57 6b10 	vmov	r6, r7, d0
 800977a:	2200      	movs	r2, #0
 800977c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009780:	4630      	mov	r0, r6
 8009782:	4639      	mov	r1, r7
 8009784:	f7f7 f9b4 	bl	8000af0 <__aeabi_dcmple>
 8009788:	2800      	cmp	r0, #0
 800978a:	d06f      	beq.n	800986c <_strtod_l+0xa34>
 800978c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800978e:	2b00      	cmp	r3, #0
 8009790:	d17a      	bne.n	8009888 <_strtod_l+0xa50>
 8009792:	f1ba 0f00 	cmp.w	sl, #0
 8009796:	d158      	bne.n	800984a <_strtod_l+0xa12>
 8009798:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800979a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d15a      	bne.n	8009858 <_strtod_l+0xa20>
 80097a2:	4b64      	ldr	r3, [pc, #400]	@ (8009934 <_strtod_l+0xafc>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	4630      	mov	r0, r6
 80097a8:	4639      	mov	r1, r7
 80097aa:	f7f7 f997 	bl	8000adc <__aeabi_dcmplt>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d159      	bne.n	8009866 <_strtod_l+0xa2e>
 80097b2:	4630      	mov	r0, r6
 80097b4:	4639      	mov	r1, r7
 80097b6:	4b60      	ldr	r3, [pc, #384]	@ (8009938 <_strtod_l+0xb00>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	f7f6 ff1d 	bl	80005f8 <__aeabi_dmul>
 80097be:	4606      	mov	r6, r0
 80097c0:	460f      	mov	r7, r1
 80097c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80097c6:	9606      	str	r6, [sp, #24]
 80097c8:	9307      	str	r3, [sp, #28]
 80097ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097ce:	4d57      	ldr	r5, [pc, #348]	@ (800992c <_strtod_l+0xaf4>)
 80097d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80097d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097d6:	401d      	ands	r5, r3
 80097d8:	4b58      	ldr	r3, [pc, #352]	@ (800993c <_strtod_l+0xb04>)
 80097da:	429d      	cmp	r5, r3
 80097dc:	f040 80b2 	bne.w	8009944 <_strtod_l+0xb0c>
 80097e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80097e6:	ec4b ab10 	vmov	d0, sl, fp
 80097ea:	f7ff f9c9 	bl	8008b80 <__ulp>
 80097ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097f2:	ec51 0b10 	vmov	r0, r1, d0
 80097f6:	f7f6 feff 	bl	80005f8 <__aeabi_dmul>
 80097fa:	4652      	mov	r2, sl
 80097fc:	465b      	mov	r3, fp
 80097fe:	f7f6 fd45 	bl	800028c <__adddf3>
 8009802:	460b      	mov	r3, r1
 8009804:	4949      	ldr	r1, [pc, #292]	@ (800992c <_strtod_l+0xaf4>)
 8009806:	4a4e      	ldr	r2, [pc, #312]	@ (8009940 <_strtod_l+0xb08>)
 8009808:	4019      	ands	r1, r3
 800980a:	4291      	cmp	r1, r2
 800980c:	4682      	mov	sl, r0
 800980e:	d942      	bls.n	8009896 <_strtod_l+0xa5e>
 8009810:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009812:	4b47      	ldr	r3, [pc, #284]	@ (8009930 <_strtod_l+0xaf8>)
 8009814:	429a      	cmp	r2, r3
 8009816:	d103      	bne.n	8009820 <_strtod_l+0x9e8>
 8009818:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800981a:	3301      	adds	r3, #1
 800981c:	f43f ad2b 	beq.w	8009276 <_strtod_l+0x43e>
 8009820:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009930 <_strtod_l+0xaf8>
 8009824:	f04f 3aff 	mov.w	sl, #4294967295
 8009828:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800982a:	9805      	ldr	r0, [sp, #20]
 800982c:	f7fe fe74 	bl	8008518 <_Bfree>
 8009830:	9805      	ldr	r0, [sp, #20]
 8009832:	4649      	mov	r1, r9
 8009834:	f7fe fe70 	bl	8008518 <_Bfree>
 8009838:	9805      	ldr	r0, [sp, #20]
 800983a:	4641      	mov	r1, r8
 800983c:	f7fe fe6c 	bl	8008518 <_Bfree>
 8009840:	9805      	ldr	r0, [sp, #20]
 8009842:	4621      	mov	r1, r4
 8009844:	f7fe fe68 	bl	8008518 <_Bfree>
 8009848:	e618      	b.n	800947c <_strtod_l+0x644>
 800984a:	f1ba 0f01 	cmp.w	sl, #1
 800984e:	d103      	bne.n	8009858 <_strtod_l+0xa20>
 8009850:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009852:	2b00      	cmp	r3, #0
 8009854:	f43f ada5 	beq.w	80093a2 <_strtod_l+0x56a>
 8009858:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009908 <_strtod_l+0xad0>
 800985c:	4f35      	ldr	r7, [pc, #212]	@ (8009934 <_strtod_l+0xafc>)
 800985e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009862:	2600      	movs	r6, #0
 8009864:	e7b1      	b.n	80097ca <_strtod_l+0x992>
 8009866:	4f34      	ldr	r7, [pc, #208]	@ (8009938 <_strtod_l+0xb00>)
 8009868:	2600      	movs	r6, #0
 800986a:	e7aa      	b.n	80097c2 <_strtod_l+0x98a>
 800986c:	4b32      	ldr	r3, [pc, #200]	@ (8009938 <_strtod_l+0xb00>)
 800986e:	4630      	mov	r0, r6
 8009870:	4639      	mov	r1, r7
 8009872:	2200      	movs	r2, #0
 8009874:	f7f6 fec0 	bl	80005f8 <__aeabi_dmul>
 8009878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800987a:	4606      	mov	r6, r0
 800987c:	460f      	mov	r7, r1
 800987e:	2b00      	cmp	r3, #0
 8009880:	d09f      	beq.n	80097c2 <_strtod_l+0x98a>
 8009882:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009886:	e7a0      	b.n	80097ca <_strtod_l+0x992>
 8009888:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009910 <_strtod_l+0xad8>
 800988c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009890:	ec57 6b17 	vmov	r6, r7, d7
 8009894:	e799      	b.n	80097ca <_strtod_l+0x992>
 8009896:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800989a:	9b08      	ldr	r3, [sp, #32]
 800989c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1c1      	bne.n	8009828 <_strtod_l+0x9f0>
 80098a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098a8:	0d1b      	lsrs	r3, r3, #20
 80098aa:	051b      	lsls	r3, r3, #20
 80098ac:	429d      	cmp	r5, r3
 80098ae:	d1bb      	bne.n	8009828 <_strtod_l+0x9f0>
 80098b0:	4630      	mov	r0, r6
 80098b2:	4639      	mov	r1, r7
 80098b4:	f7f7 f9e8 	bl	8000c88 <__aeabi_d2lz>
 80098b8:	f7f6 fe70 	bl	800059c <__aeabi_l2d>
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	4630      	mov	r0, r6
 80098c2:	4639      	mov	r1, r7
 80098c4:	f7f6 fce0 	bl	8000288 <__aeabi_dsub>
 80098c8:	460b      	mov	r3, r1
 80098ca:	4602      	mov	r2, r0
 80098cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80098d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80098d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098d6:	ea46 060a 	orr.w	r6, r6, sl
 80098da:	431e      	orrs	r6, r3
 80098dc:	d06f      	beq.n	80099be <_strtod_l+0xb86>
 80098de:	a30e      	add	r3, pc, #56	@ (adr r3, 8009918 <_strtod_l+0xae0>)
 80098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e4:	f7f7 f8fa 	bl	8000adc <__aeabi_dcmplt>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	f47f accf 	bne.w	800928c <_strtod_l+0x454>
 80098ee:	a30c      	add	r3, pc, #48	@ (adr r3, 8009920 <_strtod_l+0xae8>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098f8:	f7f7 f90e 	bl	8000b18 <__aeabi_dcmpgt>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d093      	beq.n	8009828 <_strtod_l+0x9f0>
 8009900:	e4c4      	b.n	800928c <_strtod_l+0x454>
 8009902:	bf00      	nop
 8009904:	f3af 8000 	nop.w
 8009908:	00000000 	.word	0x00000000
 800990c:	bff00000 	.word	0xbff00000
 8009910:	00000000 	.word	0x00000000
 8009914:	3ff00000 	.word	0x3ff00000
 8009918:	94a03595 	.word	0x94a03595
 800991c:	3fdfffff 	.word	0x3fdfffff
 8009920:	35afe535 	.word	0x35afe535
 8009924:	3fe00000 	.word	0x3fe00000
 8009928:	000fffff 	.word	0x000fffff
 800992c:	7ff00000 	.word	0x7ff00000
 8009930:	7fefffff 	.word	0x7fefffff
 8009934:	3ff00000 	.word	0x3ff00000
 8009938:	3fe00000 	.word	0x3fe00000
 800993c:	7fe00000 	.word	0x7fe00000
 8009940:	7c9fffff 	.word	0x7c9fffff
 8009944:	9b08      	ldr	r3, [sp, #32]
 8009946:	b323      	cbz	r3, 8009992 <_strtod_l+0xb5a>
 8009948:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800994c:	d821      	bhi.n	8009992 <_strtod_l+0xb5a>
 800994e:	a328      	add	r3, pc, #160	@ (adr r3, 80099f0 <_strtod_l+0xbb8>)
 8009950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009954:	4630      	mov	r0, r6
 8009956:	4639      	mov	r1, r7
 8009958:	f7f7 f8ca 	bl	8000af0 <__aeabi_dcmple>
 800995c:	b1a0      	cbz	r0, 8009988 <_strtod_l+0xb50>
 800995e:	4639      	mov	r1, r7
 8009960:	4630      	mov	r0, r6
 8009962:	f7f7 f921 	bl	8000ba8 <__aeabi_d2uiz>
 8009966:	2801      	cmp	r0, #1
 8009968:	bf38      	it	cc
 800996a:	2001      	movcc	r0, #1
 800996c:	f7f6 fdca 	bl	8000504 <__aeabi_ui2d>
 8009970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009972:	4606      	mov	r6, r0
 8009974:	460f      	mov	r7, r1
 8009976:	b9fb      	cbnz	r3, 80099b8 <_strtod_l+0xb80>
 8009978:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800997c:	9014      	str	r0, [sp, #80]	@ 0x50
 800997e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009980:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009984:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009988:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800998a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800998e:	1b5b      	subs	r3, r3, r5
 8009990:	9311      	str	r3, [sp, #68]	@ 0x44
 8009992:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009996:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800999a:	f7ff f8f1 	bl	8008b80 <__ulp>
 800999e:	4650      	mov	r0, sl
 80099a0:	ec53 2b10 	vmov	r2, r3, d0
 80099a4:	4659      	mov	r1, fp
 80099a6:	f7f6 fe27 	bl	80005f8 <__aeabi_dmul>
 80099aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80099ae:	f7f6 fc6d 	bl	800028c <__adddf3>
 80099b2:	4682      	mov	sl, r0
 80099b4:	468b      	mov	fp, r1
 80099b6:	e770      	b.n	800989a <_strtod_l+0xa62>
 80099b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80099bc:	e7e0      	b.n	8009980 <_strtod_l+0xb48>
 80099be:	a30e      	add	r3, pc, #56	@ (adr r3, 80099f8 <_strtod_l+0xbc0>)
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f7f7 f88a 	bl	8000adc <__aeabi_dcmplt>
 80099c8:	e798      	b.n	80098fc <_strtod_l+0xac4>
 80099ca:	2300      	movs	r3, #0
 80099cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80099d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	f7ff ba6d 	b.w	8008eb2 <_strtod_l+0x7a>
 80099d8:	2a65      	cmp	r2, #101	@ 0x65
 80099da:	f43f ab66 	beq.w	80090aa <_strtod_l+0x272>
 80099de:	2a45      	cmp	r2, #69	@ 0x45
 80099e0:	f43f ab63 	beq.w	80090aa <_strtod_l+0x272>
 80099e4:	2301      	movs	r3, #1
 80099e6:	f7ff bb9e 	b.w	8009126 <_strtod_l+0x2ee>
 80099ea:	bf00      	nop
 80099ec:	f3af 8000 	nop.w
 80099f0:	ffc00000 	.word	0xffc00000
 80099f4:	41dfffff 	.word	0x41dfffff
 80099f8:	94a03595 	.word	0x94a03595
 80099fc:	3fcfffff 	.word	0x3fcfffff

08009a00 <_strtod_r>:
 8009a00:	4b01      	ldr	r3, [pc, #4]	@ (8009a08 <_strtod_r+0x8>)
 8009a02:	f7ff ba19 	b.w	8008e38 <_strtod_l>
 8009a06:	bf00      	nop
 8009a08:	20000078 	.word	0x20000078

08009a0c <_strtol_l.constprop.0>:
 8009a0c:	2b24      	cmp	r3, #36	@ 0x24
 8009a0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a12:	4686      	mov	lr, r0
 8009a14:	4690      	mov	r8, r2
 8009a16:	d801      	bhi.n	8009a1c <_strtol_l.constprop.0+0x10>
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d106      	bne.n	8009a2a <_strtol_l.constprop.0+0x1e>
 8009a1c:	f7fd fd8e 	bl	800753c <__errno>
 8009a20:	2316      	movs	r3, #22
 8009a22:	6003      	str	r3, [r0, #0]
 8009a24:	2000      	movs	r0, #0
 8009a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a2a:	4834      	ldr	r0, [pc, #208]	@ (8009afc <_strtol_l.constprop.0+0xf0>)
 8009a2c:	460d      	mov	r5, r1
 8009a2e:	462a      	mov	r2, r5
 8009a30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a34:	5d06      	ldrb	r6, [r0, r4]
 8009a36:	f016 0608 	ands.w	r6, r6, #8
 8009a3a:	d1f8      	bne.n	8009a2e <_strtol_l.constprop.0+0x22>
 8009a3c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009a3e:	d12d      	bne.n	8009a9c <_strtol_l.constprop.0+0x90>
 8009a40:	782c      	ldrb	r4, [r5, #0]
 8009a42:	2601      	movs	r6, #1
 8009a44:	1c95      	adds	r5, r2, #2
 8009a46:	f033 0210 	bics.w	r2, r3, #16
 8009a4a:	d109      	bne.n	8009a60 <_strtol_l.constprop.0+0x54>
 8009a4c:	2c30      	cmp	r4, #48	@ 0x30
 8009a4e:	d12a      	bne.n	8009aa6 <_strtol_l.constprop.0+0x9a>
 8009a50:	782a      	ldrb	r2, [r5, #0]
 8009a52:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a56:	2a58      	cmp	r2, #88	@ 0x58
 8009a58:	d125      	bne.n	8009aa6 <_strtol_l.constprop.0+0x9a>
 8009a5a:	786c      	ldrb	r4, [r5, #1]
 8009a5c:	2310      	movs	r3, #16
 8009a5e:	3502      	adds	r5, #2
 8009a60:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009a64:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009a68:	2200      	movs	r2, #0
 8009a6a:	fbbc f9f3 	udiv	r9, ip, r3
 8009a6e:	4610      	mov	r0, r2
 8009a70:	fb03 ca19 	mls	sl, r3, r9, ip
 8009a74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009a78:	2f09      	cmp	r7, #9
 8009a7a:	d81b      	bhi.n	8009ab4 <_strtol_l.constprop.0+0xa8>
 8009a7c:	463c      	mov	r4, r7
 8009a7e:	42a3      	cmp	r3, r4
 8009a80:	dd27      	ble.n	8009ad2 <_strtol_l.constprop.0+0xc6>
 8009a82:	1c57      	adds	r7, r2, #1
 8009a84:	d007      	beq.n	8009a96 <_strtol_l.constprop.0+0x8a>
 8009a86:	4581      	cmp	r9, r0
 8009a88:	d320      	bcc.n	8009acc <_strtol_l.constprop.0+0xc0>
 8009a8a:	d101      	bne.n	8009a90 <_strtol_l.constprop.0+0x84>
 8009a8c:	45a2      	cmp	sl, r4
 8009a8e:	db1d      	blt.n	8009acc <_strtol_l.constprop.0+0xc0>
 8009a90:	fb00 4003 	mla	r0, r0, r3, r4
 8009a94:	2201      	movs	r2, #1
 8009a96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a9a:	e7eb      	b.n	8009a74 <_strtol_l.constprop.0+0x68>
 8009a9c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009a9e:	bf04      	itt	eq
 8009aa0:	782c      	ldrbeq	r4, [r5, #0]
 8009aa2:	1c95      	addeq	r5, r2, #2
 8009aa4:	e7cf      	b.n	8009a46 <_strtol_l.constprop.0+0x3a>
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1da      	bne.n	8009a60 <_strtol_l.constprop.0+0x54>
 8009aaa:	2c30      	cmp	r4, #48	@ 0x30
 8009aac:	bf0c      	ite	eq
 8009aae:	2308      	moveq	r3, #8
 8009ab0:	230a      	movne	r3, #10
 8009ab2:	e7d5      	b.n	8009a60 <_strtol_l.constprop.0+0x54>
 8009ab4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ab8:	2f19      	cmp	r7, #25
 8009aba:	d801      	bhi.n	8009ac0 <_strtol_l.constprop.0+0xb4>
 8009abc:	3c37      	subs	r4, #55	@ 0x37
 8009abe:	e7de      	b.n	8009a7e <_strtol_l.constprop.0+0x72>
 8009ac0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009ac4:	2f19      	cmp	r7, #25
 8009ac6:	d804      	bhi.n	8009ad2 <_strtol_l.constprop.0+0xc6>
 8009ac8:	3c57      	subs	r4, #87	@ 0x57
 8009aca:	e7d8      	b.n	8009a7e <_strtol_l.constprop.0+0x72>
 8009acc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad0:	e7e1      	b.n	8009a96 <_strtol_l.constprop.0+0x8a>
 8009ad2:	1c53      	adds	r3, r2, #1
 8009ad4:	d108      	bne.n	8009ae8 <_strtol_l.constprop.0+0xdc>
 8009ad6:	2322      	movs	r3, #34	@ 0x22
 8009ad8:	f8ce 3000 	str.w	r3, [lr]
 8009adc:	4660      	mov	r0, ip
 8009ade:	f1b8 0f00 	cmp.w	r8, #0
 8009ae2:	d0a0      	beq.n	8009a26 <_strtol_l.constprop.0+0x1a>
 8009ae4:	1e69      	subs	r1, r5, #1
 8009ae6:	e006      	b.n	8009af6 <_strtol_l.constprop.0+0xea>
 8009ae8:	b106      	cbz	r6, 8009aec <_strtol_l.constprop.0+0xe0>
 8009aea:	4240      	negs	r0, r0
 8009aec:	f1b8 0f00 	cmp.w	r8, #0
 8009af0:	d099      	beq.n	8009a26 <_strtol_l.constprop.0+0x1a>
 8009af2:	2a00      	cmp	r2, #0
 8009af4:	d1f6      	bne.n	8009ae4 <_strtol_l.constprop.0+0xd8>
 8009af6:	f8c8 1000 	str.w	r1, [r8]
 8009afa:	e794      	b.n	8009a26 <_strtol_l.constprop.0+0x1a>
 8009afc:	080163a1 	.word	0x080163a1

08009b00 <_strtol_r>:
 8009b00:	f7ff bf84 	b.w	8009a0c <_strtol_l.constprop.0>

08009b04 <__ssputs_r>:
 8009b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b08:	688e      	ldr	r6, [r1, #8]
 8009b0a:	461f      	mov	r7, r3
 8009b0c:	42be      	cmp	r6, r7
 8009b0e:	680b      	ldr	r3, [r1, #0]
 8009b10:	4682      	mov	sl, r0
 8009b12:	460c      	mov	r4, r1
 8009b14:	4690      	mov	r8, r2
 8009b16:	d82d      	bhi.n	8009b74 <__ssputs_r+0x70>
 8009b18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b20:	d026      	beq.n	8009b70 <__ssputs_r+0x6c>
 8009b22:	6965      	ldr	r5, [r4, #20]
 8009b24:	6909      	ldr	r1, [r1, #16]
 8009b26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b2a:	eba3 0901 	sub.w	r9, r3, r1
 8009b2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b32:	1c7b      	adds	r3, r7, #1
 8009b34:	444b      	add	r3, r9
 8009b36:	106d      	asrs	r5, r5, #1
 8009b38:	429d      	cmp	r5, r3
 8009b3a:	bf38      	it	cc
 8009b3c:	461d      	movcc	r5, r3
 8009b3e:	0553      	lsls	r3, r2, #21
 8009b40:	d527      	bpl.n	8009b92 <__ssputs_r+0x8e>
 8009b42:	4629      	mov	r1, r5
 8009b44:	f7fe fc1c 	bl	8008380 <_malloc_r>
 8009b48:	4606      	mov	r6, r0
 8009b4a:	b360      	cbz	r0, 8009ba6 <__ssputs_r+0xa2>
 8009b4c:	6921      	ldr	r1, [r4, #16]
 8009b4e:	464a      	mov	r2, r9
 8009b50:	f7fd fd21 	bl	8007596 <memcpy>
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b5e:	81a3      	strh	r3, [r4, #12]
 8009b60:	6126      	str	r6, [r4, #16]
 8009b62:	6165      	str	r5, [r4, #20]
 8009b64:	444e      	add	r6, r9
 8009b66:	eba5 0509 	sub.w	r5, r5, r9
 8009b6a:	6026      	str	r6, [r4, #0]
 8009b6c:	60a5      	str	r5, [r4, #8]
 8009b6e:	463e      	mov	r6, r7
 8009b70:	42be      	cmp	r6, r7
 8009b72:	d900      	bls.n	8009b76 <__ssputs_r+0x72>
 8009b74:	463e      	mov	r6, r7
 8009b76:	6820      	ldr	r0, [r4, #0]
 8009b78:	4632      	mov	r2, r6
 8009b7a:	4641      	mov	r1, r8
 8009b7c:	f000 fb7c 	bl	800a278 <memmove>
 8009b80:	68a3      	ldr	r3, [r4, #8]
 8009b82:	1b9b      	subs	r3, r3, r6
 8009b84:	60a3      	str	r3, [r4, #8]
 8009b86:	6823      	ldr	r3, [r4, #0]
 8009b88:	4433      	add	r3, r6
 8009b8a:	6023      	str	r3, [r4, #0]
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b92:	462a      	mov	r2, r5
 8009b94:	f000 ff3d 	bl	800aa12 <_realloc_r>
 8009b98:	4606      	mov	r6, r0
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d1e0      	bne.n	8009b60 <__ssputs_r+0x5c>
 8009b9e:	6921      	ldr	r1, [r4, #16]
 8009ba0:	4650      	mov	r0, sl
 8009ba2:	f7fe fb79 	bl	8008298 <_free_r>
 8009ba6:	230c      	movs	r3, #12
 8009ba8:	f8ca 3000 	str.w	r3, [sl]
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bb2:	81a3      	strh	r3, [r4, #12]
 8009bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb8:	e7e9      	b.n	8009b8e <__ssputs_r+0x8a>
	...

08009bbc <_svfiprintf_r>:
 8009bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc0:	4698      	mov	r8, r3
 8009bc2:	898b      	ldrh	r3, [r1, #12]
 8009bc4:	061b      	lsls	r3, r3, #24
 8009bc6:	b09d      	sub	sp, #116	@ 0x74
 8009bc8:	4607      	mov	r7, r0
 8009bca:	460d      	mov	r5, r1
 8009bcc:	4614      	mov	r4, r2
 8009bce:	d510      	bpl.n	8009bf2 <_svfiprintf_r+0x36>
 8009bd0:	690b      	ldr	r3, [r1, #16]
 8009bd2:	b973      	cbnz	r3, 8009bf2 <_svfiprintf_r+0x36>
 8009bd4:	2140      	movs	r1, #64	@ 0x40
 8009bd6:	f7fe fbd3 	bl	8008380 <_malloc_r>
 8009bda:	6028      	str	r0, [r5, #0]
 8009bdc:	6128      	str	r0, [r5, #16]
 8009bde:	b930      	cbnz	r0, 8009bee <_svfiprintf_r+0x32>
 8009be0:	230c      	movs	r3, #12
 8009be2:	603b      	str	r3, [r7, #0]
 8009be4:	f04f 30ff 	mov.w	r0, #4294967295
 8009be8:	b01d      	add	sp, #116	@ 0x74
 8009bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bee:	2340      	movs	r3, #64	@ 0x40
 8009bf0:	616b      	str	r3, [r5, #20]
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bf6:	2320      	movs	r3, #32
 8009bf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c00:	2330      	movs	r3, #48	@ 0x30
 8009c02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009da0 <_svfiprintf_r+0x1e4>
 8009c06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c0a:	f04f 0901 	mov.w	r9, #1
 8009c0e:	4623      	mov	r3, r4
 8009c10:	469a      	mov	sl, r3
 8009c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c16:	b10a      	cbz	r2, 8009c1c <_svfiprintf_r+0x60>
 8009c18:	2a25      	cmp	r2, #37	@ 0x25
 8009c1a:	d1f9      	bne.n	8009c10 <_svfiprintf_r+0x54>
 8009c1c:	ebba 0b04 	subs.w	fp, sl, r4
 8009c20:	d00b      	beq.n	8009c3a <_svfiprintf_r+0x7e>
 8009c22:	465b      	mov	r3, fp
 8009c24:	4622      	mov	r2, r4
 8009c26:	4629      	mov	r1, r5
 8009c28:	4638      	mov	r0, r7
 8009c2a:	f7ff ff6b 	bl	8009b04 <__ssputs_r>
 8009c2e:	3001      	adds	r0, #1
 8009c30:	f000 80a7 	beq.w	8009d82 <_svfiprintf_r+0x1c6>
 8009c34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c36:	445a      	add	r2, fp
 8009c38:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f000 809f 	beq.w	8009d82 <_svfiprintf_r+0x1c6>
 8009c44:	2300      	movs	r3, #0
 8009c46:	f04f 32ff 	mov.w	r2, #4294967295
 8009c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c4e:	f10a 0a01 	add.w	sl, sl, #1
 8009c52:	9304      	str	r3, [sp, #16]
 8009c54:	9307      	str	r3, [sp, #28]
 8009c56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c5c:	4654      	mov	r4, sl
 8009c5e:	2205      	movs	r2, #5
 8009c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c64:	484e      	ldr	r0, [pc, #312]	@ (8009da0 <_svfiprintf_r+0x1e4>)
 8009c66:	f7f6 fab3 	bl	80001d0 <memchr>
 8009c6a:	9a04      	ldr	r2, [sp, #16]
 8009c6c:	b9d8      	cbnz	r0, 8009ca6 <_svfiprintf_r+0xea>
 8009c6e:	06d0      	lsls	r0, r2, #27
 8009c70:	bf44      	itt	mi
 8009c72:	2320      	movmi	r3, #32
 8009c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c78:	0711      	lsls	r1, r2, #28
 8009c7a:	bf44      	itt	mi
 8009c7c:	232b      	movmi	r3, #43	@ 0x2b
 8009c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c82:	f89a 3000 	ldrb.w	r3, [sl]
 8009c86:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c88:	d015      	beq.n	8009cb6 <_svfiprintf_r+0xfa>
 8009c8a:	9a07      	ldr	r2, [sp, #28]
 8009c8c:	4654      	mov	r4, sl
 8009c8e:	2000      	movs	r0, #0
 8009c90:	f04f 0c0a 	mov.w	ip, #10
 8009c94:	4621      	mov	r1, r4
 8009c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c9a:	3b30      	subs	r3, #48	@ 0x30
 8009c9c:	2b09      	cmp	r3, #9
 8009c9e:	d94b      	bls.n	8009d38 <_svfiprintf_r+0x17c>
 8009ca0:	b1b0      	cbz	r0, 8009cd0 <_svfiprintf_r+0x114>
 8009ca2:	9207      	str	r2, [sp, #28]
 8009ca4:	e014      	b.n	8009cd0 <_svfiprintf_r+0x114>
 8009ca6:	eba0 0308 	sub.w	r3, r0, r8
 8009caa:	fa09 f303 	lsl.w	r3, r9, r3
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	9304      	str	r3, [sp, #16]
 8009cb2:	46a2      	mov	sl, r4
 8009cb4:	e7d2      	b.n	8009c5c <_svfiprintf_r+0xa0>
 8009cb6:	9b03      	ldr	r3, [sp, #12]
 8009cb8:	1d19      	adds	r1, r3, #4
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	9103      	str	r1, [sp, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	bfbb      	ittet	lt
 8009cc2:	425b      	neglt	r3, r3
 8009cc4:	f042 0202 	orrlt.w	r2, r2, #2
 8009cc8:	9307      	strge	r3, [sp, #28]
 8009cca:	9307      	strlt	r3, [sp, #28]
 8009ccc:	bfb8      	it	lt
 8009cce:	9204      	strlt	r2, [sp, #16]
 8009cd0:	7823      	ldrb	r3, [r4, #0]
 8009cd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cd4:	d10a      	bne.n	8009cec <_svfiprintf_r+0x130>
 8009cd6:	7863      	ldrb	r3, [r4, #1]
 8009cd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cda:	d132      	bne.n	8009d42 <_svfiprintf_r+0x186>
 8009cdc:	9b03      	ldr	r3, [sp, #12]
 8009cde:	1d1a      	adds	r2, r3, #4
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	9203      	str	r2, [sp, #12]
 8009ce4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ce8:	3402      	adds	r4, #2
 8009cea:	9305      	str	r3, [sp, #20]
 8009cec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009db0 <_svfiprintf_r+0x1f4>
 8009cf0:	7821      	ldrb	r1, [r4, #0]
 8009cf2:	2203      	movs	r2, #3
 8009cf4:	4650      	mov	r0, sl
 8009cf6:	f7f6 fa6b 	bl	80001d0 <memchr>
 8009cfa:	b138      	cbz	r0, 8009d0c <_svfiprintf_r+0x150>
 8009cfc:	9b04      	ldr	r3, [sp, #16]
 8009cfe:	eba0 000a 	sub.w	r0, r0, sl
 8009d02:	2240      	movs	r2, #64	@ 0x40
 8009d04:	4082      	lsls	r2, r0
 8009d06:	4313      	orrs	r3, r2
 8009d08:	3401      	adds	r4, #1
 8009d0a:	9304      	str	r3, [sp, #16]
 8009d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d10:	4824      	ldr	r0, [pc, #144]	@ (8009da4 <_svfiprintf_r+0x1e8>)
 8009d12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d16:	2206      	movs	r2, #6
 8009d18:	f7f6 fa5a 	bl	80001d0 <memchr>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d036      	beq.n	8009d8e <_svfiprintf_r+0x1d2>
 8009d20:	4b21      	ldr	r3, [pc, #132]	@ (8009da8 <_svfiprintf_r+0x1ec>)
 8009d22:	bb1b      	cbnz	r3, 8009d6c <_svfiprintf_r+0x1b0>
 8009d24:	9b03      	ldr	r3, [sp, #12]
 8009d26:	3307      	adds	r3, #7
 8009d28:	f023 0307 	bic.w	r3, r3, #7
 8009d2c:	3308      	adds	r3, #8
 8009d2e:	9303      	str	r3, [sp, #12]
 8009d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d32:	4433      	add	r3, r6
 8009d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d36:	e76a      	b.n	8009c0e <_svfiprintf_r+0x52>
 8009d38:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	2001      	movs	r0, #1
 8009d40:	e7a8      	b.n	8009c94 <_svfiprintf_r+0xd8>
 8009d42:	2300      	movs	r3, #0
 8009d44:	3401      	adds	r4, #1
 8009d46:	9305      	str	r3, [sp, #20]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	f04f 0c0a 	mov.w	ip, #10
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d54:	3a30      	subs	r2, #48	@ 0x30
 8009d56:	2a09      	cmp	r2, #9
 8009d58:	d903      	bls.n	8009d62 <_svfiprintf_r+0x1a6>
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d0c6      	beq.n	8009cec <_svfiprintf_r+0x130>
 8009d5e:	9105      	str	r1, [sp, #20]
 8009d60:	e7c4      	b.n	8009cec <_svfiprintf_r+0x130>
 8009d62:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d66:	4604      	mov	r4, r0
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e7f0      	b.n	8009d4e <_svfiprintf_r+0x192>
 8009d6c:	ab03      	add	r3, sp, #12
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	462a      	mov	r2, r5
 8009d72:	4b0e      	ldr	r3, [pc, #56]	@ (8009dac <_svfiprintf_r+0x1f0>)
 8009d74:	a904      	add	r1, sp, #16
 8009d76:	4638      	mov	r0, r7
 8009d78:	f7fc fb98 	bl	80064ac <_printf_float>
 8009d7c:	1c42      	adds	r2, r0, #1
 8009d7e:	4606      	mov	r6, r0
 8009d80:	d1d6      	bne.n	8009d30 <_svfiprintf_r+0x174>
 8009d82:	89ab      	ldrh	r3, [r5, #12]
 8009d84:	065b      	lsls	r3, r3, #25
 8009d86:	f53f af2d 	bmi.w	8009be4 <_svfiprintf_r+0x28>
 8009d8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d8c:	e72c      	b.n	8009be8 <_svfiprintf_r+0x2c>
 8009d8e:	ab03      	add	r3, sp, #12
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	462a      	mov	r2, r5
 8009d94:	4b05      	ldr	r3, [pc, #20]	@ (8009dac <_svfiprintf_r+0x1f0>)
 8009d96:	a904      	add	r1, sp, #16
 8009d98:	4638      	mov	r0, r7
 8009d9a:	f7fc fe1f 	bl	80069dc <_printf_i>
 8009d9e:	e7ed      	b.n	8009d7c <_svfiprintf_r+0x1c0>
 8009da0:	080164a1 	.word	0x080164a1
 8009da4:	080164ab 	.word	0x080164ab
 8009da8:	080064ad 	.word	0x080064ad
 8009dac:	08009b05 	.word	0x08009b05
 8009db0:	080164a7 	.word	0x080164a7

08009db4 <__sfputc_r>:
 8009db4:	6893      	ldr	r3, [r2, #8]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	b410      	push	{r4}
 8009dbc:	6093      	str	r3, [r2, #8]
 8009dbe:	da08      	bge.n	8009dd2 <__sfputc_r+0x1e>
 8009dc0:	6994      	ldr	r4, [r2, #24]
 8009dc2:	42a3      	cmp	r3, r4
 8009dc4:	db01      	blt.n	8009dca <__sfputc_r+0x16>
 8009dc6:	290a      	cmp	r1, #10
 8009dc8:	d103      	bne.n	8009dd2 <__sfputc_r+0x1e>
 8009dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dce:	f7fd bace 	b.w	800736e <__swbuf_r>
 8009dd2:	6813      	ldr	r3, [r2, #0]
 8009dd4:	1c58      	adds	r0, r3, #1
 8009dd6:	6010      	str	r0, [r2, #0]
 8009dd8:	7019      	strb	r1, [r3, #0]
 8009dda:	4608      	mov	r0, r1
 8009ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <__sfputs_r>:
 8009de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de4:	4606      	mov	r6, r0
 8009de6:	460f      	mov	r7, r1
 8009de8:	4614      	mov	r4, r2
 8009dea:	18d5      	adds	r5, r2, r3
 8009dec:	42ac      	cmp	r4, r5
 8009dee:	d101      	bne.n	8009df4 <__sfputs_r+0x12>
 8009df0:	2000      	movs	r0, #0
 8009df2:	e007      	b.n	8009e04 <__sfputs_r+0x22>
 8009df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df8:	463a      	mov	r2, r7
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f7ff ffda 	bl	8009db4 <__sfputc_r>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d1f3      	bne.n	8009dec <__sfputs_r+0xa>
 8009e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e08 <_vfiprintf_r>:
 8009e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	460d      	mov	r5, r1
 8009e0e:	b09d      	sub	sp, #116	@ 0x74
 8009e10:	4614      	mov	r4, r2
 8009e12:	4698      	mov	r8, r3
 8009e14:	4606      	mov	r6, r0
 8009e16:	b118      	cbz	r0, 8009e20 <_vfiprintf_r+0x18>
 8009e18:	6a03      	ldr	r3, [r0, #32]
 8009e1a:	b90b      	cbnz	r3, 8009e20 <_vfiprintf_r+0x18>
 8009e1c:	f7fd f99e 	bl	800715c <__sinit>
 8009e20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e22:	07d9      	lsls	r1, r3, #31
 8009e24:	d405      	bmi.n	8009e32 <_vfiprintf_r+0x2a>
 8009e26:	89ab      	ldrh	r3, [r5, #12]
 8009e28:	059a      	lsls	r2, r3, #22
 8009e2a:	d402      	bmi.n	8009e32 <_vfiprintf_r+0x2a>
 8009e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e2e:	f7fd fbb0 	bl	8007592 <__retarget_lock_acquire_recursive>
 8009e32:	89ab      	ldrh	r3, [r5, #12]
 8009e34:	071b      	lsls	r3, r3, #28
 8009e36:	d501      	bpl.n	8009e3c <_vfiprintf_r+0x34>
 8009e38:	692b      	ldr	r3, [r5, #16]
 8009e3a:	b99b      	cbnz	r3, 8009e64 <_vfiprintf_r+0x5c>
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	4630      	mov	r0, r6
 8009e40:	f7fd fad4 	bl	80073ec <__swsetup_r>
 8009e44:	b170      	cbz	r0, 8009e64 <_vfiprintf_r+0x5c>
 8009e46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e48:	07dc      	lsls	r4, r3, #31
 8009e4a:	d504      	bpl.n	8009e56 <_vfiprintf_r+0x4e>
 8009e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e50:	b01d      	add	sp, #116	@ 0x74
 8009e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e56:	89ab      	ldrh	r3, [r5, #12]
 8009e58:	0598      	lsls	r0, r3, #22
 8009e5a:	d4f7      	bmi.n	8009e4c <_vfiprintf_r+0x44>
 8009e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e5e:	f7fd fb99 	bl	8007594 <__retarget_lock_release_recursive>
 8009e62:	e7f3      	b.n	8009e4c <_vfiprintf_r+0x44>
 8009e64:	2300      	movs	r3, #0
 8009e66:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e68:	2320      	movs	r3, #32
 8009e6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e72:	2330      	movs	r3, #48	@ 0x30
 8009e74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a024 <_vfiprintf_r+0x21c>
 8009e78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e7c:	f04f 0901 	mov.w	r9, #1
 8009e80:	4623      	mov	r3, r4
 8009e82:	469a      	mov	sl, r3
 8009e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e88:	b10a      	cbz	r2, 8009e8e <_vfiprintf_r+0x86>
 8009e8a:	2a25      	cmp	r2, #37	@ 0x25
 8009e8c:	d1f9      	bne.n	8009e82 <_vfiprintf_r+0x7a>
 8009e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8009e92:	d00b      	beq.n	8009eac <_vfiprintf_r+0xa4>
 8009e94:	465b      	mov	r3, fp
 8009e96:	4622      	mov	r2, r4
 8009e98:	4629      	mov	r1, r5
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	f7ff ffa1 	bl	8009de2 <__sfputs_r>
 8009ea0:	3001      	adds	r0, #1
 8009ea2:	f000 80a7 	beq.w	8009ff4 <_vfiprintf_r+0x1ec>
 8009ea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ea8:	445a      	add	r2, fp
 8009eaa:	9209      	str	r2, [sp, #36]	@ 0x24
 8009eac:	f89a 3000 	ldrb.w	r3, [sl]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 809f 	beq.w	8009ff4 <_vfiprintf_r+0x1ec>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8009ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ec0:	f10a 0a01 	add.w	sl, sl, #1
 8009ec4:	9304      	str	r3, [sp, #16]
 8009ec6:	9307      	str	r3, [sp, #28]
 8009ec8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ecc:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ece:	4654      	mov	r4, sl
 8009ed0:	2205      	movs	r2, #5
 8009ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed6:	4853      	ldr	r0, [pc, #332]	@ (800a024 <_vfiprintf_r+0x21c>)
 8009ed8:	f7f6 f97a 	bl	80001d0 <memchr>
 8009edc:	9a04      	ldr	r2, [sp, #16]
 8009ede:	b9d8      	cbnz	r0, 8009f18 <_vfiprintf_r+0x110>
 8009ee0:	06d1      	lsls	r1, r2, #27
 8009ee2:	bf44      	itt	mi
 8009ee4:	2320      	movmi	r3, #32
 8009ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009eea:	0713      	lsls	r3, r2, #28
 8009eec:	bf44      	itt	mi
 8009eee:	232b      	movmi	r3, #43	@ 0x2b
 8009ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ef8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009efa:	d015      	beq.n	8009f28 <_vfiprintf_r+0x120>
 8009efc:	9a07      	ldr	r2, [sp, #28]
 8009efe:	4654      	mov	r4, sl
 8009f00:	2000      	movs	r0, #0
 8009f02:	f04f 0c0a 	mov.w	ip, #10
 8009f06:	4621      	mov	r1, r4
 8009f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f0c:	3b30      	subs	r3, #48	@ 0x30
 8009f0e:	2b09      	cmp	r3, #9
 8009f10:	d94b      	bls.n	8009faa <_vfiprintf_r+0x1a2>
 8009f12:	b1b0      	cbz	r0, 8009f42 <_vfiprintf_r+0x13a>
 8009f14:	9207      	str	r2, [sp, #28]
 8009f16:	e014      	b.n	8009f42 <_vfiprintf_r+0x13a>
 8009f18:	eba0 0308 	sub.w	r3, r0, r8
 8009f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8009f20:	4313      	orrs	r3, r2
 8009f22:	9304      	str	r3, [sp, #16]
 8009f24:	46a2      	mov	sl, r4
 8009f26:	e7d2      	b.n	8009ece <_vfiprintf_r+0xc6>
 8009f28:	9b03      	ldr	r3, [sp, #12]
 8009f2a:	1d19      	adds	r1, r3, #4
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	9103      	str	r1, [sp, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	bfbb      	ittet	lt
 8009f34:	425b      	neglt	r3, r3
 8009f36:	f042 0202 	orrlt.w	r2, r2, #2
 8009f3a:	9307      	strge	r3, [sp, #28]
 8009f3c:	9307      	strlt	r3, [sp, #28]
 8009f3e:	bfb8      	it	lt
 8009f40:	9204      	strlt	r2, [sp, #16]
 8009f42:	7823      	ldrb	r3, [r4, #0]
 8009f44:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f46:	d10a      	bne.n	8009f5e <_vfiprintf_r+0x156>
 8009f48:	7863      	ldrb	r3, [r4, #1]
 8009f4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f4c:	d132      	bne.n	8009fb4 <_vfiprintf_r+0x1ac>
 8009f4e:	9b03      	ldr	r3, [sp, #12]
 8009f50:	1d1a      	adds	r2, r3, #4
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	9203      	str	r2, [sp, #12]
 8009f56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f5a:	3402      	adds	r4, #2
 8009f5c:	9305      	str	r3, [sp, #20]
 8009f5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a034 <_vfiprintf_r+0x22c>
 8009f62:	7821      	ldrb	r1, [r4, #0]
 8009f64:	2203      	movs	r2, #3
 8009f66:	4650      	mov	r0, sl
 8009f68:	f7f6 f932 	bl	80001d0 <memchr>
 8009f6c:	b138      	cbz	r0, 8009f7e <_vfiprintf_r+0x176>
 8009f6e:	9b04      	ldr	r3, [sp, #16]
 8009f70:	eba0 000a 	sub.w	r0, r0, sl
 8009f74:	2240      	movs	r2, #64	@ 0x40
 8009f76:	4082      	lsls	r2, r0
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	3401      	adds	r4, #1
 8009f7c:	9304      	str	r3, [sp, #16]
 8009f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f82:	4829      	ldr	r0, [pc, #164]	@ (800a028 <_vfiprintf_r+0x220>)
 8009f84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f88:	2206      	movs	r2, #6
 8009f8a:	f7f6 f921 	bl	80001d0 <memchr>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d03f      	beq.n	800a012 <_vfiprintf_r+0x20a>
 8009f92:	4b26      	ldr	r3, [pc, #152]	@ (800a02c <_vfiprintf_r+0x224>)
 8009f94:	bb1b      	cbnz	r3, 8009fde <_vfiprintf_r+0x1d6>
 8009f96:	9b03      	ldr	r3, [sp, #12]
 8009f98:	3307      	adds	r3, #7
 8009f9a:	f023 0307 	bic.w	r3, r3, #7
 8009f9e:	3308      	adds	r3, #8
 8009fa0:	9303      	str	r3, [sp, #12]
 8009fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fa4:	443b      	add	r3, r7
 8009fa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fa8:	e76a      	b.n	8009e80 <_vfiprintf_r+0x78>
 8009faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fae:	460c      	mov	r4, r1
 8009fb0:	2001      	movs	r0, #1
 8009fb2:	e7a8      	b.n	8009f06 <_vfiprintf_r+0xfe>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	3401      	adds	r4, #1
 8009fb8:	9305      	str	r3, [sp, #20]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	f04f 0c0a 	mov.w	ip, #10
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fc6:	3a30      	subs	r2, #48	@ 0x30
 8009fc8:	2a09      	cmp	r2, #9
 8009fca:	d903      	bls.n	8009fd4 <_vfiprintf_r+0x1cc>
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d0c6      	beq.n	8009f5e <_vfiprintf_r+0x156>
 8009fd0:	9105      	str	r1, [sp, #20]
 8009fd2:	e7c4      	b.n	8009f5e <_vfiprintf_r+0x156>
 8009fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fd8:	4604      	mov	r4, r0
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e7f0      	b.n	8009fc0 <_vfiprintf_r+0x1b8>
 8009fde:	ab03      	add	r3, sp, #12
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	462a      	mov	r2, r5
 8009fe4:	4b12      	ldr	r3, [pc, #72]	@ (800a030 <_vfiprintf_r+0x228>)
 8009fe6:	a904      	add	r1, sp, #16
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f7fc fa5f 	bl	80064ac <_printf_float>
 8009fee:	4607      	mov	r7, r0
 8009ff0:	1c78      	adds	r0, r7, #1
 8009ff2:	d1d6      	bne.n	8009fa2 <_vfiprintf_r+0x19a>
 8009ff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ff6:	07d9      	lsls	r1, r3, #31
 8009ff8:	d405      	bmi.n	800a006 <_vfiprintf_r+0x1fe>
 8009ffa:	89ab      	ldrh	r3, [r5, #12]
 8009ffc:	059a      	lsls	r2, r3, #22
 8009ffe:	d402      	bmi.n	800a006 <_vfiprintf_r+0x1fe>
 800a000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a002:	f7fd fac7 	bl	8007594 <__retarget_lock_release_recursive>
 800a006:	89ab      	ldrh	r3, [r5, #12]
 800a008:	065b      	lsls	r3, r3, #25
 800a00a:	f53f af1f 	bmi.w	8009e4c <_vfiprintf_r+0x44>
 800a00e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a010:	e71e      	b.n	8009e50 <_vfiprintf_r+0x48>
 800a012:	ab03      	add	r3, sp, #12
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	462a      	mov	r2, r5
 800a018:	4b05      	ldr	r3, [pc, #20]	@ (800a030 <_vfiprintf_r+0x228>)
 800a01a:	a904      	add	r1, sp, #16
 800a01c:	4630      	mov	r0, r6
 800a01e:	f7fc fcdd 	bl	80069dc <_printf_i>
 800a022:	e7e4      	b.n	8009fee <_vfiprintf_r+0x1e6>
 800a024:	080164a1 	.word	0x080164a1
 800a028:	080164ab 	.word	0x080164ab
 800a02c:	080064ad 	.word	0x080064ad
 800a030:	08009de3 	.word	0x08009de3
 800a034:	080164a7 	.word	0x080164a7

0800a038 <__sflush_r>:
 800a038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a040:	0716      	lsls	r6, r2, #28
 800a042:	4605      	mov	r5, r0
 800a044:	460c      	mov	r4, r1
 800a046:	d454      	bmi.n	800a0f2 <__sflush_r+0xba>
 800a048:	684b      	ldr	r3, [r1, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	dc02      	bgt.n	800a054 <__sflush_r+0x1c>
 800a04e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a050:	2b00      	cmp	r3, #0
 800a052:	dd48      	ble.n	800a0e6 <__sflush_r+0xae>
 800a054:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a056:	2e00      	cmp	r6, #0
 800a058:	d045      	beq.n	800a0e6 <__sflush_r+0xae>
 800a05a:	2300      	movs	r3, #0
 800a05c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a060:	682f      	ldr	r7, [r5, #0]
 800a062:	6a21      	ldr	r1, [r4, #32]
 800a064:	602b      	str	r3, [r5, #0]
 800a066:	d030      	beq.n	800a0ca <__sflush_r+0x92>
 800a068:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a06a:	89a3      	ldrh	r3, [r4, #12]
 800a06c:	0759      	lsls	r1, r3, #29
 800a06e:	d505      	bpl.n	800a07c <__sflush_r+0x44>
 800a070:	6863      	ldr	r3, [r4, #4]
 800a072:	1ad2      	subs	r2, r2, r3
 800a074:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a076:	b10b      	cbz	r3, 800a07c <__sflush_r+0x44>
 800a078:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a07a:	1ad2      	subs	r2, r2, r3
 800a07c:	2300      	movs	r3, #0
 800a07e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a080:	6a21      	ldr	r1, [r4, #32]
 800a082:	4628      	mov	r0, r5
 800a084:	47b0      	blx	r6
 800a086:	1c43      	adds	r3, r0, #1
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	d106      	bne.n	800a09a <__sflush_r+0x62>
 800a08c:	6829      	ldr	r1, [r5, #0]
 800a08e:	291d      	cmp	r1, #29
 800a090:	d82b      	bhi.n	800a0ea <__sflush_r+0xb2>
 800a092:	4a2a      	ldr	r2, [pc, #168]	@ (800a13c <__sflush_r+0x104>)
 800a094:	410a      	asrs	r2, r1
 800a096:	07d6      	lsls	r6, r2, #31
 800a098:	d427      	bmi.n	800a0ea <__sflush_r+0xb2>
 800a09a:	2200      	movs	r2, #0
 800a09c:	6062      	str	r2, [r4, #4]
 800a09e:	04d9      	lsls	r1, r3, #19
 800a0a0:	6922      	ldr	r2, [r4, #16]
 800a0a2:	6022      	str	r2, [r4, #0]
 800a0a4:	d504      	bpl.n	800a0b0 <__sflush_r+0x78>
 800a0a6:	1c42      	adds	r2, r0, #1
 800a0a8:	d101      	bne.n	800a0ae <__sflush_r+0x76>
 800a0aa:	682b      	ldr	r3, [r5, #0]
 800a0ac:	b903      	cbnz	r3, 800a0b0 <__sflush_r+0x78>
 800a0ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0b2:	602f      	str	r7, [r5, #0]
 800a0b4:	b1b9      	cbz	r1, 800a0e6 <__sflush_r+0xae>
 800a0b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0ba:	4299      	cmp	r1, r3
 800a0bc:	d002      	beq.n	800a0c4 <__sflush_r+0x8c>
 800a0be:	4628      	mov	r0, r5
 800a0c0:	f7fe f8ea 	bl	8008298 <_free_r>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0c8:	e00d      	b.n	800a0e6 <__sflush_r+0xae>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	47b0      	blx	r6
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	1c50      	adds	r0, r2, #1
 800a0d4:	d1c9      	bne.n	800a06a <__sflush_r+0x32>
 800a0d6:	682b      	ldr	r3, [r5, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d0c6      	beq.n	800a06a <__sflush_r+0x32>
 800a0dc:	2b1d      	cmp	r3, #29
 800a0de:	d001      	beq.n	800a0e4 <__sflush_r+0xac>
 800a0e0:	2b16      	cmp	r3, #22
 800a0e2:	d11e      	bne.n	800a122 <__sflush_r+0xea>
 800a0e4:	602f      	str	r7, [r5, #0]
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	e022      	b.n	800a130 <__sflush_r+0xf8>
 800a0ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0ee:	b21b      	sxth	r3, r3
 800a0f0:	e01b      	b.n	800a12a <__sflush_r+0xf2>
 800a0f2:	690f      	ldr	r7, [r1, #16]
 800a0f4:	2f00      	cmp	r7, #0
 800a0f6:	d0f6      	beq.n	800a0e6 <__sflush_r+0xae>
 800a0f8:	0793      	lsls	r3, r2, #30
 800a0fa:	680e      	ldr	r6, [r1, #0]
 800a0fc:	bf08      	it	eq
 800a0fe:	694b      	ldreq	r3, [r1, #20]
 800a100:	600f      	str	r7, [r1, #0]
 800a102:	bf18      	it	ne
 800a104:	2300      	movne	r3, #0
 800a106:	eba6 0807 	sub.w	r8, r6, r7
 800a10a:	608b      	str	r3, [r1, #8]
 800a10c:	f1b8 0f00 	cmp.w	r8, #0
 800a110:	dde9      	ble.n	800a0e6 <__sflush_r+0xae>
 800a112:	6a21      	ldr	r1, [r4, #32]
 800a114:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a116:	4643      	mov	r3, r8
 800a118:	463a      	mov	r2, r7
 800a11a:	4628      	mov	r0, r5
 800a11c:	47b0      	blx	r6
 800a11e:	2800      	cmp	r0, #0
 800a120:	dc08      	bgt.n	800a134 <__sflush_r+0xfc>
 800a122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a12a:	81a3      	strh	r3, [r4, #12]
 800a12c:	f04f 30ff 	mov.w	r0, #4294967295
 800a130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a134:	4407      	add	r7, r0
 800a136:	eba8 0800 	sub.w	r8, r8, r0
 800a13a:	e7e7      	b.n	800a10c <__sflush_r+0xd4>
 800a13c:	dfbffffe 	.word	0xdfbffffe

0800a140 <_fflush_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	690b      	ldr	r3, [r1, #16]
 800a144:	4605      	mov	r5, r0
 800a146:	460c      	mov	r4, r1
 800a148:	b913      	cbnz	r3, 800a150 <_fflush_r+0x10>
 800a14a:	2500      	movs	r5, #0
 800a14c:	4628      	mov	r0, r5
 800a14e:	bd38      	pop	{r3, r4, r5, pc}
 800a150:	b118      	cbz	r0, 800a15a <_fflush_r+0x1a>
 800a152:	6a03      	ldr	r3, [r0, #32]
 800a154:	b90b      	cbnz	r3, 800a15a <_fflush_r+0x1a>
 800a156:	f7fd f801 	bl	800715c <__sinit>
 800a15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d0f3      	beq.n	800a14a <_fflush_r+0xa>
 800a162:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a164:	07d0      	lsls	r0, r2, #31
 800a166:	d404      	bmi.n	800a172 <_fflush_r+0x32>
 800a168:	0599      	lsls	r1, r3, #22
 800a16a:	d402      	bmi.n	800a172 <_fflush_r+0x32>
 800a16c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a16e:	f7fd fa10 	bl	8007592 <__retarget_lock_acquire_recursive>
 800a172:	4628      	mov	r0, r5
 800a174:	4621      	mov	r1, r4
 800a176:	f7ff ff5f 	bl	800a038 <__sflush_r>
 800a17a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a17c:	07da      	lsls	r2, r3, #31
 800a17e:	4605      	mov	r5, r0
 800a180:	d4e4      	bmi.n	800a14c <_fflush_r+0xc>
 800a182:	89a3      	ldrh	r3, [r4, #12]
 800a184:	059b      	lsls	r3, r3, #22
 800a186:	d4e1      	bmi.n	800a14c <_fflush_r+0xc>
 800a188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a18a:	f7fd fa03 	bl	8007594 <__retarget_lock_release_recursive>
 800a18e:	e7dd      	b.n	800a14c <_fflush_r+0xc>

0800a190 <fiprintf>:
 800a190:	b40e      	push	{r1, r2, r3}
 800a192:	b503      	push	{r0, r1, lr}
 800a194:	4601      	mov	r1, r0
 800a196:	ab03      	add	r3, sp, #12
 800a198:	4805      	ldr	r0, [pc, #20]	@ (800a1b0 <fiprintf+0x20>)
 800a19a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a19e:	6800      	ldr	r0, [r0, #0]
 800a1a0:	9301      	str	r3, [sp, #4]
 800a1a2:	f7ff fe31 	bl	8009e08 <_vfiprintf_r>
 800a1a6:	b002      	add	sp, #8
 800a1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1ac:	b003      	add	sp, #12
 800a1ae:	4770      	bx	lr
 800a1b0:	20000028 	.word	0x20000028

0800a1b4 <__swhatbuf_r>:
 800a1b4:	b570      	push	{r4, r5, r6, lr}
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1bc:	2900      	cmp	r1, #0
 800a1be:	b096      	sub	sp, #88	@ 0x58
 800a1c0:	4615      	mov	r5, r2
 800a1c2:	461e      	mov	r6, r3
 800a1c4:	da0d      	bge.n	800a1e2 <__swhatbuf_r+0x2e>
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1cc:	f04f 0100 	mov.w	r1, #0
 800a1d0:	bf14      	ite	ne
 800a1d2:	2340      	movne	r3, #64	@ 0x40
 800a1d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1d8:	2000      	movs	r0, #0
 800a1da:	6031      	str	r1, [r6, #0]
 800a1dc:	602b      	str	r3, [r5, #0]
 800a1de:	b016      	add	sp, #88	@ 0x58
 800a1e0:	bd70      	pop	{r4, r5, r6, pc}
 800a1e2:	466a      	mov	r2, sp
 800a1e4:	f000 f874 	bl	800a2d0 <_fstat_r>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	dbec      	blt.n	800a1c6 <__swhatbuf_r+0x12>
 800a1ec:	9901      	ldr	r1, [sp, #4]
 800a1ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1f6:	4259      	negs	r1, r3
 800a1f8:	4159      	adcs	r1, r3
 800a1fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1fe:	e7eb      	b.n	800a1d8 <__swhatbuf_r+0x24>

0800a200 <__smakebuf_r>:
 800a200:	898b      	ldrh	r3, [r1, #12]
 800a202:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a204:	079d      	lsls	r5, r3, #30
 800a206:	4606      	mov	r6, r0
 800a208:	460c      	mov	r4, r1
 800a20a:	d507      	bpl.n	800a21c <__smakebuf_r+0x1c>
 800a20c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	6123      	str	r3, [r4, #16]
 800a214:	2301      	movs	r3, #1
 800a216:	6163      	str	r3, [r4, #20]
 800a218:	b003      	add	sp, #12
 800a21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a21c:	ab01      	add	r3, sp, #4
 800a21e:	466a      	mov	r2, sp
 800a220:	f7ff ffc8 	bl	800a1b4 <__swhatbuf_r>
 800a224:	9f00      	ldr	r7, [sp, #0]
 800a226:	4605      	mov	r5, r0
 800a228:	4639      	mov	r1, r7
 800a22a:	4630      	mov	r0, r6
 800a22c:	f7fe f8a8 	bl	8008380 <_malloc_r>
 800a230:	b948      	cbnz	r0, 800a246 <__smakebuf_r+0x46>
 800a232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a236:	059a      	lsls	r2, r3, #22
 800a238:	d4ee      	bmi.n	800a218 <__smakebuf_r+0x18>
 800a23a:	f023 0303 	bic.w	r3, r3, #3
 800a23e:	f043 0302 	orr.w	r3, r3, #2
 800a242:	81a3      	strh	r3, [r4, #12]
 800a244:	e7e2      	b.n	800a20c <__smakebuf_r+0xc>
 800a246:	89a3      	ldrh	r3, [r4, #12]
 800a248:	6020      	str	r0, [r4, #0]
 800a24a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a24e:	81a3      	strh	r3, [r4, #12]
 800a250:	9b01      	ldr	r3, [sp, #4]
 800a252:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a256:	b15b      	cbz	r3, 800a270 <__smakebuf_r+0x70>
 800a258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a25c:	4630      	mov	r0, r6
 800a25e:	f000 f849 	bl	800a2f4 <_isatty_r>
 800a262:	b128      	cbz	r0, 800a270 <__smakebuf_r+0x70>
 800a264:	89a3      	ldrh	r3, [r4, #12]
 800a266:	f023 0303 	bic.w	r3, r3, #3
 800a26a:	f043 0301 	orr.w	r3, r3, #1
 800a26e:	81a3      	strh	r3, [r4, #12]
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	431d      	orrs	r5, r3
 800a274:	81a5      	strh	r5, [r4, #12]
 800a276:	e7cf      	b.n	800a218 <__smakebuf_r+0x18>

0800a278 <memmove>:
 800a278:	4288      	cmp	r0, r1
 800a27a:	b510      	push	{r4, lr}
 800a27c:	eb01 0402 	add.w	r4, r1, r2
 800a280:	d902      	bls.n	800a288 <memmove+0x10>
 800a282:	4284      	cmp	r4, r0
 800a284:	4623      	mov	r3, r4
 800a286:	d807      	bhi.n	800a298 <memmove+0x20>
 800a288:	1e43      	subs	r3, r0, #1
 800a28a:	42a1      	cmp	r1, r4
 800a28c:	d008      	beq.n	800a2a0 <memmove+0x28>
 800a28e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a292:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a296:	e7f8      	b.n	800a28a <memmove+0x12>
 800a298:	4402      	add	r2, r0
 800a29a:	4601      	mov	r1, r0
 800a29c:	428a      	cmp	r2, r1
 800a29e:	d100      	bne.n	800a2a2 <memmove+0x2a>
 800a2a0:	bd10      	pop	{r4, pc}
 800a2a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2aa:	e7f7      	b.n	800a29c <memmove+0x24>

0800a2ac <strncmp>:
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	b16a      	cbz	r2, 800a2cc <strncmp+0x20>
 800a2b0:	3901      	subs	r1, #1
 800a2b2:	1884      	adds	r4, r0, r2
 800a2b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d103      	bne.n	800a2c8 <strncmp+0x1c>
 800a2c0:	42a0      	cmp	r0, r4
 800a2c2:	d001      	beq.n	800a2c8 <strncmp+0x1c>
 800a2c4:	2a00      	cmp	r2, #0
 800a2c6:	d1f5      	bne.n	800a2b4 <strncmp+0x8>
 800a2c8:	1ad0      	subs	r0, r2, r3
 800a2ca:	bd10      	pop	{r4, pc}
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	e7fc      	b.n	800a2ca <strncmp+0x1e>

0800a2d0 <_fstat_r>:
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	4d07      	ldr	r5, [pc, #28]	@ (800a2f0 <_fstat_r+0x20>)
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	4608      	mov	r0, r1
 800a2da:	4611      	mov	r1, r2
 800a2dc:	602b      	str	r3, [r5, #0]
 800a2de:	f7f9 f82b 	bl	8003338 <_fstat>
 800a2e2:	1c43      	adds	r3, r0, #1
 800a2e4:	d102      	bne.n	800a2ec <_fstat_r+0x1c>
 800a2e6:	682b      	ldr	r3, [r5, #0]
 800a2e8:	b103      	cbz	r3, 800a2ec <_fstat_r+0x1c>
 800a2ea:	6023      	str	r3, [r4, #0]
 800a2ec:	bd38      	pop	{r3, r4, r5, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20000424 	.word	0x20000424

0800a2f4 <_isatty_r>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4d06      	ldr	r5, [pc, #24]	@ (800a310 <_isatty_r+0x1c>)
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	4608      	mov	r0, r1
 800a2fe:	602b      	str	r3, [r5, #0]
 800a300:	f7f9 f82a 	bl	8003358 <_isatty>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d102      	bne.n	800a30e <_isatty_r+0x1a>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	b103      	cbz	r3, 800a30e <_isatty_r+0x1a>
 800a30c:	6023      	str	r3, [r4, #0]
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	20000424 	.word	0x20000424

0800a314 <_sbrk_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4d06      	ldr	r5, [pc, #24]	@ (800a330 <_sbrk_r+0x1c>)
 800a318:	2300      	movs	r3, #0
 800a31a:	4604      	mov	r4, r0
 800a31c:	4608      	mov	r0, r1
 800a31e:	602b      	str	r3, [r5, #0]
 800a320:	f7f9 f832 	bl	8003388 <_sbrk>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_sbrk_r+0x1a>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_sbrk_r+0x1a>
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	20000424 	.word	0x20000424
 800a334:	00000000 	.word	0x00000000

0800a338 <nan>:
 800a338:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a340 <nan+0x8>
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	00000000 	.word	0x00000000
 800a344:	7ff80000 	.word	0x7ff80000

0800a348 <abort>:
 800a348:	b508      	push	{r3, lr}
 800a34a:	2006      	movs	r0, #6
 800a34c:	f000 fbc4 	bl	800aad8 <raise>
 800a350:	2001      	movs	r0, #1
 800a352:	f7f8 ffa1 	bl	8003298 <_exit>

0800a356 <_calloc_r>:
 800a356:	b570      	push	{r4, r5, r6, lr}
 800a358:	fba1 5402 	umull	r5, r4, r1, r2
 800a35c:	b93c      	cbnz	r4, 800a36e <_calloc_r+0x18>
 800a35e:	4629      	mov	r1, r5
 800a360:	f7fe f80e 	bl	8008380 <_malloc_r>
 800a364:	4606      	mov	r6, r0
 800a366:	b928      	cbnz	r0, 800a374 <_calloc_r+0x1e>
 800a368:	2600      	movs	r6, #0
 800a36a:	4630      	mov	r0, r6
 800a36c:	bd70      	pop	{r4, r5, r6, pc}
 800a36e:	220c      	movs	r2, #12
 800a370:	6002      	str	r2, [r0, #0]
 800a372:	e7f9      	b.n	800a368 <_calloc_r+0x12>
 800a374:	462a      	mov	r2, r5
 800a376:	4621      	mov	r1, r4
 800a378:	f7fd f88e 	bl	8007498 <memset>
 800a37c:	e7f5      	b.n	800a36a <_calloc_r+0x14>

0800a37e <rshift>:
 800a37e:	6903      	ldr	r3, [r0, #16]
 800a380:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a388:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a38c:	f100 0414 	add.w	r4, r0, #20
 800a390:	dd45      	ble.n	800a41e <rshift+0xa0>
 800a392:	f011 011f 	ands.w	r1, r1, #31
 800a396:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a39a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a39e:	d10c      	bne.n	800a3ba <rshift+0x3c>
 800a3a0:	f100 0710 	add.w	r7, r0, #16
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	42b1      	cmp	r1, r6
 800a3a8:	d334      	bcc.n	800a414 <rshift+0x96>
 800a3aa:	1a9b      	subs	r3, r3, r2
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	1eea      	subs	r2, r5, #3
 800a3b0:	4296      	cmp	r6, r2
 800a3b2:	bf38      	it	cc
 800a3b4:	2300      	movcc	r3, #0
 800a3b6:	4423      	add	r3, r4
 800a3b8:	e015      	b.n	800a3e6 <rshift+0x68>
 800a3ba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a3be:	f1c1 0820 	rsb	r8, r1, #32
 800a3c2:	40cf      	lsrs	r7, r1
 800a3c4:	f105 0e04 	add.w	lr, r5, #4
 800a3c8:	46a1      	mov	r9, r4
 800a3ca:	4576      	cmp	r6, lr
 800a3cc:	46f4      	mov	ip, lr
 800a3ce:	d815      	bhi.n	800a3fc <rshift+0x7e>
 800a3d0:	1a9a      	subs	r2, r3, r2
 800a3d2:	0092      	lsls	r2, r2, #2
 800a3d4:	3a04      	subs	r2, #4
 800a3d6:	3501      	adds	r5, #1
 800a3d8:	42ae      	cmp	r6, r5
 800a3da:	bf38      	it	cc
 800a3dc:	2200      	movcc	r2, #0
 800a3de:	18a3      	adds	r3, r4, r2
 800a3e0:	50a7      	str	r7, [r4, r2]
 800a3e2:	b107      	cbz	r7, 800a3e6 <rshift+0x68>
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	1b1a      	subs	r2, r3, r4
 800a3e8:	42a3      	cmp	r3, r4
 800a3ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a3ee:	bf08      	it	eq
 800a3f0:	2300      	moveq	r3, #0
 800a3f2:	6102      	str	r2, [r0, #16]
 800a3f4:	bf08      	it	eq
 800a3f6:	6143      	streq	r3, [r0, #20]
 800a3f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3fc:	f8dc c000 	ldr.w	ip, [ip]
 800a400:	fa0c fc08 	lsl.w	ip, ip, r8
 800a404:	ea4c 0707 	orr.w	r7, ip, r7
 800a408:	f849 7b04 	str.w	r7, [r9], #4
 800a40c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a410:	40cf      	lsrs	r7, r1
 800a412:	e7da      	b.n	800a3ca <rshift+0x4c>
 800a414:	f851 cb04 	ldr.w	ip, [r1], #4
 800a418:	f847 cf04 	str.w	ip, [r7, #4]!
 800a41c:	e7c3      	b.n	800a3a6 <rshift+0x28>
 800a41e:	4623      	mov	r3, r4
 800a420:	e7e1      	b.n	800a3e6 <rshift+0x68>

0800a422 <__hexdig_fun>:
 800a422:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a426:	2b09      	cmp	r3, #9
 800a428:	d802      	bhi.n	800a430 <__hexdig_fun+0xe>
 800a42a:	3820      	subs	r0, #32
 800a42c:	b2c0      	uxtb	r0, r0
 800a42e:	4770      	bx	lr
 800a430:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a434:	2b05      	cmp	r3, #5
 800a436:	d801      	bhi.n	800a43c <__hexdig_fun+0x1a>
 800a438:	3847      	subs	r0, #71	@ 0x47
 800a43a:	e7f7      	b.n	800a42c <__hexdig_fun+0xa>
 800a43c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a440:	2b05      	cmp	r3, #5
 800a442:	d801      	bhi.n	800a448 <__hexdig_fun+0x26>
 800a444:	3827      	subs	r0, #39	@ 0x27
 800a446:	e7f1      	b.n	800a42c <__hexdig_fun+0xa>
 800a448:	2000      	movs	r0, #0
 800a44a:	4770      	bx	lr

0800a44c <__gethex>:
 800a44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a450:	b085      	sub	sp, #20
 800a452:	468a      	mov	sl, r1
 800a454:	9302      	str	r3, [sp, #8]
 800a456:	680b      	ldr	r3, [r1, #0]
 800a458:	9001      	str	r0, [sp, #4]
 800a45a:	4690      	mov	r8, r2
 800a45c:	1c9c      	adds	r4, r3, #2
 800a45e:	46a1      	mov	r9, r4
 800a460:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a464:	2830      	cmp	r0, #48	@ 0x30
 800a466:	d0fa      	beq.n	800a45e <__gethex+0x12>
 800a468:	eba9 0303 	sub.w	r3, r9, r3
 800a46c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a470:	f7ff ffd7 	bl	800a422 <__hexdig_fun>
 800a474:	4605      	mov	r5, r0
 800a476:	2800      	cmp	r0, #0
 800a478:	d168      	bne.n	800a54c <__gethex+0x100>
 800a47a:	49a0      	ldr	r1, [pc, #640]	@ (800a6fc <__gethex+0x2b0>)
 800a47c:	2201      	movs	r2, #1
 800a47e:	4648      	mov	r0, r9
 800a480:	f7ff ff14 	bl	800a2ac <strncmp>
 800a484:	4607      	mov	r7, r0
 800a486:	2800      	cmp	r0, #0
 800a488:	d167      	bne.n	800a55a <__gethex+0x10e>
 800a48a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a48e:	4626      	mov	r6, r4
 800a490:	f7ff ffc7 	bl	800a422 <__hexdig_fun>
 800a494:	2800      	cmp	r0, #0
 800a496:	d062      	beq.n	800a55e <__gethex+0x112>
 800a498:	4623      	mov	r3, r4
 800a49a:	7818      	ldrb	r0, [r3, #0]
 800a49c:	2830      	cmp	r0, #48	@ 0x30
 800a49e:	4699      	mov	r9, r3
 800a4a0:	f103 0301 	add.w	r3, r3, #1
 800a4a4:	d0f9      	beq.n	800a49a <__gethex+0x4e>
 800a4a6:	f7ff ffbc 	bl	800a422 <__hexdig_fun>
 800a4aa:	fab0 f580 	clz	r5, r0
 800a4ae:	096d      	lsrs	r5, r5, #5
 800a4b0:	f04f 0b01 	mov.w	fp, #1
 800a4b4:	464a      	mov	r2, r9
 800a4b6:	4616      	mov	r6, r2
 800a4b8:	3201      	adds	r2, #1
 800a4ba:	7830      	ldrb	r0, [r6, #0]
 800a4bc:	f7ff ffb1 	bl	800a422 <__hexdig_fun>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d1f8      	bne.n	800a4b6 <__gethex+0x6a>
 800a4c4:	498d      	ldr	r1, [pc, #564]	@ (800a6fc <__gethex+0x2b0>)
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	f7ff feef 	bl	800a2ac <strncmp>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d13f      	bne.n	800a552 <__gethex+0x106>
 800a4d2:	b944      	cbnz	r4, 800a4e6 <__gethex+0x9a>
 800a4d4:	1c74      	adds	r4, r6, #1
 800a4d6:	4622      	mov	r2, r4
 800a4d8:	4616      	mov	r6, r2
 800a4da:	3201      	adds	r2, #1
 800a4dc:	7830      	ldrb	r0, [r6, #0]
 800a4de:	f7ff ffa0 	bl	800a422 <__hexdig_fun>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d1f8      	bne.n	800a4d8 <__gethex+0x8c>
 800a4e6:	1ba4      	subs	r4, r4, r6
 800a4e8:	00a7      	lsls	r7, r4, #2
 800a4ea:	7833      	ldrb	r3, [r6, #0]
 800a4ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a4f0:	2b50      	cmp	r3, #80	@ 0x50
 800a4f2:	d13e      	bne.n	800a572 <__gethex+0x126>
 800a4f4:	7873      	ldrb	r3, [r6, #1]
 800a4f6:	2b2b      	cmp	r3, #43	@ 0x2b
 800a4f8:	d033      	beq.n	800a562 <__gethex+0x116>
 800a4fa:	2b2d      	cmp	r3, #45	@ 0x2d
 800a4fc:	d034      	beq.n	800a568 <__gethex+0x11c>
 800a4fe:	1c71      	adds	r1, r6, #1
 800a500:	2400      	movs	r4, #0
 800a502:	7808      	ldrb	r0, [r1, #0]
 800a504:	f7ff ff8d 	bl	800a422 <__hexdig_fun>
 800a508:	1e43      	subs	r3, r0, #1
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	2b18      	cmp	r3, #24
 800a50e:	d830      	bhi.n	800a572 <__gethex+0x126>
 800a510:	f1a0 0210 	sub.w	r2, r0, #16
 800a514:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a518:	f7ff ff83 	bl	800a422 <__hexdig_fun>
 800a51c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a520:	fa5f fc8c 	uxtb.w	ip, ip
 800a524:	f1bc 0f18 	cmp.w	ip, #24
 800a528:	f04f 030a 	mov.w	r3, #10
 800a52c:	d91e      	bls.n	800a56c <__gethex+0x120>
 800a52e:	b104      	cbz	r4, 800a532 <__gethex+0xe6>
 800a530:	4252      	negs	r2, r2
 800a532:	4417      	add	r7, r2
 800a534:	f8ca 1000 	str.w	r1, [sl]
 800a538:	b1ed      	cbz	r5, 800a576 <__gethex+0x12a>
 800a53a:	f1bb 0f00 	cmp.w	fp, #0
 800a53e:	bf0c      	ite	eq
 800a540:	2506      	moveq	r5, #6
 800a542:	2500      	movne	r5, #0
 800a544:	4628      	mov	r0, r5
 800a546:	b005      	add	sp, #20
 800a548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54c:	2500      	movs	r5, #0
 800a54e:	462c      	mov	r4, r5
 800a550:	e7b0      	b.n	800a4b4 <__gethex+0x68>
 800a552:	2c00      	cmp	r4, #0
 800a554:	d1c7      	bne.n	800a4e6 <__gethex+0x9a>
 800a556:	4627      	mov	r7, r4
 800a558:	e7c7      	b.n	800a4ea <__gethex+0x9e>
 800a55a:	464e      	mov	r6, r9
 800a55c:	462f      	mov	r7, r5
 800a55e:	2501      	movs	r5, #1
 800a560:	e7c3      	b.n	800a4ea <__gethex+0x9e>
 800a562:	2400      	movs	r4, #0
 800a564:	1cb1      	adds	r1, r6, #2
 800a566:	e7cc      	b.n	800a502 <__gethex+0xb6>
 800a568:	2401      	movs	r4, #1
 800a56a:	e7fb      	b.n	800a564 <__gethex+0x118>
 800a56c:	fb03 0002 	mla	r0, r3, r2, r0
 800a570:	e7ce      	b.n	800a510 <__gethex+0xc4>
 800a572:	4631      	mov	r1, r6
 800a574:	e7de      	b.n	800a534 <__gethex+0xe8>
 800a576:	eba6 0309 	sub.w	r3, r6, r9
 800a57a:	3b01      	subs	r3, #1
 800a57c:	4629      	mov	r1, r5
 800a57e:	2b07      	cmp	r3, #7
 800a580:	dc0a      	bgt.n	800a598 <__gethex+0x14c>
 800a582:	9801      	ldr	r0, [sp, #4]
 800a584:	f7fd ff88 	bl	8008498 <_Balloc>
 800a588:	4604      	mov	r4, r0
 800a58a:	b940      	cbnz	r0, 800a59e <__gethex+0x152>
 800a58c:	4b5c      	ldr	r3, [pc, #368]	@ (800a700 <__gethex+0x2b4>)
 800a58e:	4602      	mov	r2, r0
 800a590:	21e4      	movs	r1, #228	@ 0xe4
 800a592:	485c      	ldr	r0, [pc, #368]	@ (800a704 <__gethex+0x2b8>)
 800a594:	f7fd f814 	bl	80075c0 <__assert_func>
 800a598:	3101      	adds	r1, #1
 800a59a:	105b      	asrs	r3, r3, #1
 800a59c:	e7ef      	b.n	800a57e <__gethex+0x132>
 800a59e:	f100 0a14 	add.w	sl, r0, #20
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	4655      	mov	r5, sl
 800a5a6:	469b      	mov	fp, r3
 800a5a8:	45b1      	cmp	r9, r6
 800a5aa:	d337      	bcc.n	800a61c <__gethex+0x1d0>
 800a5ac:	f845 bb04 	str.w	fp, [r5], #4
 800a5b0:	eba5 050a 	sub.w	r5, r5, sl
 800a5b4:	10ad      	asrs	r5, r5, #2
 800a5b6:	6125      	str	r5, [r4, #16]
 800a5b8:	4658      	mov	r0, fp
 800a5ba:	f7fe f85f 	bl	800867c <__hi0bits>
 800a5be:	016d      	lsls	r5, r5, #5
 800a5c0:	f8d8 6000 	ldr.w	r6, [r8]
 800a5c4:	1a2d      	subs	r5, r5, r0
 800a5c6:	42b5      	cmp	r5, r6
 800a5c8:	dd54      	ble.n	800a674 <__gethex+0x228>
 800a5ca:	1bad      	subs	r5, r5, r6
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f7fe fbf3 	bl	8008dba <__any_on>
 800a5d4:	4681      	mov	r9, r0
 800a5d6:	b178      	cbz	r0, 800a5f8 <__gethex+0x1ac>
 800a5d8:	1e6b      	subs	r3, r5, #1
 800a5da:	1159      	asrs	r1, r3, #5
 800a5dc:	f003 021f 	and.w	r2, r3, #31
 800a5e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a5e4:	f04f 0901 	mov.w	r9, #1
 800a5e8:	fa09 f202 	lsl.w	r2, r9, r2
 800a5ec:	420a      	tst	r2, r1
 800a5ee:	d003      	beq.n	800a5f8 <__gethex+0x1ac>
 800a5f0:	454b      	cmp	r3, r9
 800a5f2:	dc36      	bgt.n	800a662 <__gethex+0x216>
 800a5f4:	f04f 0902 	mov.w	r9, #2
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f7ff febf 	bl	800a37e <rshift>
 800a600:	442f      	add	r7, r5
 800a602:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a606:	42bb      	cmp	r3, r7
 800a608:	da42      	bge.n	800a690 <__gethex+0x244>
 800a60a:	9801      	ldr	r0, [sp, #4]
 800a60c:	4621      	mov	r1, r4
 800a60e:	f7fd ff83 	bl	8008518 <_Bfree>
 800a612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a614:	2300      	movs	r3, #0
 800a616:	6013      	str	r3, [r2, #0]
 800a618:	25a3      	movs	r5, #163	@ 0xa3
 800a61a:	e793      	b.n	800a544 <__gethex+0xf8>
 800a61c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a620:	2a2e      	cmp	r2, #46	@ 0x2e
 800a622:	d012      	beq.n	800a64a <__gethex+0x1fe>
 800a624:	2b20      	cmp	r3, #32
 800a626:	d104      	bne.n	800a632 <__gethex+0x1e6>
 800a628:	f845 bb04 	str.w	fp, [r5], #4
 800a62c:	f04f 0b00 	mov.w	fp, #0
 800a630:	465b      	mov	r3, fp
 800a632:	7830      	ldrb	r0, [r6, #0]
 800a634:	9303      	str	r3, [sp, #12]
 800a636:	f7ff fef4 	bl	800a422 <__hexdig_fun>
 800a63a:	9b03      	ldr	r3, [sp, #12]
 800a63c:	f000 000f 	and.w	r0, r0, #15
 800a640:	4098      	lsls	r0, r3
 800a642:	ea4b 0b00 	orr.w	fp, fp, r0
 800a646:	3304      	adds	r3, #4
 800a648:	e7ae      	b.n	800a5a8 <__gethex+0x15c>
 800a64a:	45b1      	cmp	r9, r6
 800a64c:	d8ea      	bhi.n	800a624 <__gethex+0x1d8>
 800a64e:	492b      	ldr	r1, [pc, #172]	@ (800a6fc <__gethex+0x2b0>)
 800a650:	9303      	str	r3, [sp, #12]
 800a652:	2201      	movs	r2, #1
 800a654:	4630      	mov	r0, r6
 800a656:	f7ff fe29 	bl	800a2ac <strncmp>
 800a65a:	9b03      	ldr	r3, [sp, #12]
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d1e1      	bne.n	800a624 <__gethex+0x1d8>
 800a660:	e7a2      	b.n	800a5a8 <__gethex+0x15c>
 800a662:	1ea9      	subs	r1, r5, #2
 800a664:	4620      	mov	r0, r4
 800a666:	f7fe fba8 	bl	8008dba <__any_on>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d0c2      	beq.n	800a5f4 <__gethex+0x1a8>
 800a66e:	f04f 0903 	mov.w	r9, #3
 800a672:	e7c1      	b.n	800a5f8 <__gethex+0x1ac>
 800a674:	da09      	bge.n	800a68a <__gethex+0x23e>
 800a676:	1b75      	subs	r5, r6, r5
 800a678:	4621      	mov	r1, r4
 800a67a:	9801      	ldr	r0, [sp, #4]
 800a67c:	462a      	mov	r2, r5
 800a67e:	f7fe f963 	bl	8008948 <__lshift>
 800a682:	1b7f      	subs	r7, r7, r5
 800a684:	4604      	mov	r4, r0
 800a686:	f100 0a14 	add.w	sl, r0, #20
 800a68a:	f04f 0900 	mov.w	r9, #0
 800a68e:	e7b8      	b.n	800a602 <__gethex+0x1b6>
 800a690:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a694:	42bd      	cmp	r5, r7
 800a696:	dd6f      	ble.n	800a778 <__gethex+0x32c>
 800a698:	1bed      	subs	r5, r5, r7
 800a69a:	42ae      	cmp	r6, r5
 800a69c:	dc34      	bgt.n	800a708 <__gethex+0x2bc>
 800a69e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d022      	beq.n	800a6ec <__gethex+0x2a0>
 800a6a6:	2b03      	cmp	r3, #3
 800a6a8:	d024      	beq.n	800a6f4 <__gethex+0x2a8>
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d115      	bne.n	800a6da <__gethex+0x28e>
 800a6ae:	42ae      	cmp	r6, r5
 800a6b0:	d113      	bne.n	800a6da <__gethex+0x28e>
 800a6b2:	2e01      	cmp	r6, #1
 800a6b4:	d10b      	bne.n	800a6ce <__gethex+0x282>
 800a6b6:	9a02      	ldr	r2, [sp, #8]
 800a6b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6bc:	6013      	str	r3, [r2, #0]
 800a6be:	2301      	movs	r3, #1
 800a6c0:	6123      	str	r3, [r4, #16]
 800a6c2:	f8ca 3000 	str.w	r3, [sl]
 800a6c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6c8:	2562      	movs	r5, #98	@ 0x62
 800a6ca:	601c      	str	r4, [r3, #0]
 800a6cc:	e73a      	b.n	800a544 <__gethex+0xf8>
 800a6ce:	1e71      	subs	r1, r6, #1
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f7fe fb72 	bl	8008dba <__any_on>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d1ed      	bne.n	800a6b6 <__gethex+0x26a>
 800a6da:	9801      	ldr	r0, [sp, #4]
 800a6dc:	4621      	mov	r1, r4
 800a6de:	f7fd ff1b 	bl	8008518 <_Bfree>
 800a6e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	6013      	str	r3, [r2, #0]
 800a6e8:	2550      	movs	r5, #80	@ 0x50
 800a6ea:	e72b      	b.n	800a544 <__gethex+0xf8>
 800a6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1f3      	bne.n	800a6da <__gethex+0x28e>
 800a6f2:	e7e0      	b.n	800a6b6 <__gethex+0x26a>
 800a6f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1dd      	bne.n	800a6b6 <__gethex+0x26a>
 800a6fa:	e7ee      	b.n	800a6da <__gethex+0x28e>
 800a6fc:	08016348 	.word	0x08016348
 800a700:	080161dd 	.word	0x080161dd
 800a704:	080164ba 	.word	0x080164ba
 800a708:	1e6f      	subs	r7, r5, #1
 800a70a:	f1b9 0f00 	cmp.w	r9, #0
 800a70e:	d130      	bne.n	800a772 <__gethex+0x326>
 800a710:	b127      	cbz	r7, 800a71c <__gethex+0x2d0>
 800a712:	4639      	mov	r1, r7
 800a714:	4620      	mov	r0, r4
 800a716:	f7fe fb50 	bl	8008dba <__any_on>
 800a71a:	4681      	mov	r9, r0
 800a71c:	117a      	asrs	r2, r7, #5
 800a71e:	2301      	movs	r3, #1
 800a720:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a724:	f007 071f 	and.w	r7, r7, #31
 800a728:	40bb      	lsls	r3, r7
 800a72a:	4213      	tst	r3, r2
 800a72c:	4629      	mov	r1, r5
 800a72e:	4620      	mov	r0, r4
 800a730:	bf18      	it	ne
 800a732:	f049 0902 	orrne.w	r9, r9, #2
 800a736:	f7ff fe22 	bl	800a37e <rshift>
 800a73a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a73e:	1b76      	subs	r6, r6, r5
 800a740:	2502      	movs	r5, #2
 800a742:	f1b9 0f00 	cmp.w	r9, #0
 800a746:	d047      	beq.n	800a7d8 <__gethex+0x38c>
 800a748:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d015      	beq.n	800a77c <__gethex+0x330>
 800a750:	2b03      	cmp	r3, #3
 800a752:	d017      	beq.n	800a784 <__gethex+0x338>
 800a754:	2b01      	cmp	r3, #1
 800a756:	d109      	bne.n	800a76c <__gethex+0x320>
 800a758:	f019 0f02 	tst.w	r9, #2
 800a75c:	d006      	beq.n	800a76c <__gethex+0x320>
 800a75e:	f8da 3000 	ldr.w	r3, [sl]
 800a762:	ea49 0903 	orr.w	r9, r9, r3
 800a766:	f019 0f01 	tst.w	r9, #1
 800a76a:	d10e      	bne.n	800a78a <__gethex+0x33e>
 800a76c:	f045 0510 	orr.w	r5, r5, #16
 800a770:	e032      	b.n	800a7d8 <__gethex+0x38c>
 800a772:	f04f 0901 	mov.w	r9, #1
 800a776:	e7d1      	b.n	800a71c <__gethex+0x2d0>
 800a778:	2501      	movs	r5, #1
 800a77a:	e7e2      	b.n	800a742 <__gethex+0x2f6>
 800a77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a77e:	f1c3 0301 	rsb	r3, r3, #1
 800a782:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a786:	2b00      	cmp	r3, #0
 800a788:	d0f0      	beq.n	800a76c <__gethex+0x320>
 800a78a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a78e:	f104 0314 	add.w	r3, r4, #20
 800a792:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a796:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a79a:	f04f 0c00 	mov.w	ip, #0
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a7a8:	d01b      	beq.n	800a7e2 <__gethex+0x396>
 800a7aa:	3201      	adds	r2, #1
 800a7ac:	6002      	str	r2, [r0, #0]
 800a7ae:	2d02      	cmp	r5, #2
 800a7b0:	f104 0314 	add.w	r3, r4, #20
 800a7b4:	d13c      	bne.n	800a830 <__gethex+0x3e4>
 800a7b6:	f8d8 2000 	ldr.w	r2, [r8]
 800a7ba:	3a01      	subs	r2, #1
 800a7bc:	42b2      	cmp	r2, r6
 800a7be:	d109      	bne.n	800a7d4 <__gethex+0x388>
 800a7c0:	1171      	asrs	r1, r6, #5
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7c8:	f006 061f 	and.w	r6, r6, #31
 800a7cc:	fa02 f606 	lsl.w	r6, r2, r6
 800a7d0:	421e      	tst	r6, r3
 800a7d2:	d13a      	bne.n	800a84a <__gethex+0x3fe>
 800a7d4:	f045 0520 	orr.w	r5, r5, #32
 800a7d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7da:	601c      	str	r4, [r3, #0]
 800a7dc:	9b02      	ldr	r3, [sp, #8]
 800a7de:	601f      	str	r7, [r3, #0]
 800a7e0:	e6b0      	b.n	800a544 <__gethex+0xf8>
 800a7e2:	4299      	cmp	r1, r3
 800a7e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a7e8:	d8d9      	bhi.n	800a79e <__gethex+0x352>
 800a7ea:	68a3      	ldr	r3, [r4, #8]
 800a7ec:	459b      	cmp	fp, r3
 800a7ee:	db17      	blt.n	800a820 <__gethex+0x3d4>
 800a7f0:	6861      	ldr	r1, [r4, #4]
 800a7f2:	9801      	ldr	r0, [sp, #4]
 800a7f4:	3101      	adds	r1, #1
 800a7f6:	f7fd fe4f 	bl	8008498 <_Balloc>
 800a7fa:	4681      	mov	r9, r0
 800a7fc:	b918      	cbnz	r0, 800a806 <__gethex+0x3ba>
 800a7fe:	4b1a      	ldr	r3, [pc, #104]	@ (800a868 <__gethex+0x41c>)
 800a800:	4602      	mov	r2, r0
 800a802:	2184      	movs	r1, #132	@ 0x84
 800a804:	e6c5      	b.n	800a592 <__gethex+0x146>
 800a806:	6922      	ldr	r2, [r4, #16]
 800a808:	3202      	adds	r2, #2
 800a80a:	f104 010c 	add.w	r1, r4, #12
 800a80e:	0092      	lsls	r2, r2, #2
 800a810:	300c      	adds	r0, #12
 800a812:	f7fc fec0 	bl	8007596 <memcpy>
 800a816:	4621      	mov	r1, r4
 800a818:	9801      	ldr	r0, [sp, #4]
 800a81a:	f7fd fe7d 	bl	8008518 <_Bfree>
 800a81e:	464c      	mov	r4, r9
 800a820:	6923      	ldr	r3, [r4, #16]
 800a822:	1c5a      	adds	r2, r3, #1
 800a824:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a828:	6122      	str	r2, [r4, #16]
 800a82a:	2201      	movs	r2, #1
 800a82c:	615a      	str	r2, [r3, #20]
 800a82e:	e7be      	b.n	800a7ae <__gethex+0x362>
 800a830:	6922      	ldr	r2, [r4, #16]
 800a832:	455a      	cmp	r2, fp
 800a834:	dd0b      	ble.n	800a84e <__gethex+0x402>
 800a836:	2101      	movs	r1, #1
 800a838:	4620      	mov	r0, r4
 800a83a:	f7ff fda0 	bl	800a37e <rshift>
 800a83e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a842:	3701      	adds	r7, #1
 800a844:	42bb      	cmp	r3, r7
 800a846:	f6ff aee0 	blt.w	800a60a <__gethex+0x1be>
 800a84a:	2501      	movs	r5, #1
 800a84c:	e7c2      	b.n	800a7d4 <__gethex+0x388>
 800a84e:	f016 061f 	ands.w	r6, r6, #31
 800a852:	d0fa      	beq.n	800a84a <__gethex+0x3fe>
 800a854:	4453      	add	r3, sl
 800a856:	f1c6 0620 	rsb	r6, r6, #32
 800a85a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a85e:	f7fd ff0d 	bl	800867c <__hi0bits>
 800a862:	42b0      	cmp	r0, r6
 800a864:	dbe7      	blt.n	800a836 <__gethex+0x3ea>
 800a866:	e7f0      	b.n	800a84a <__gethex+0x3fe>
 800a868:	080161dd 	.word	0x080161dd

0800a86c <L_shift>:
 800a86c:	f1c2 0208 	rsb	r2, r2, #8
 800a870:	0092      	lsls	r2, r2, #2
 800a872:	b570      	push	{r4, r5, r6, lr}
 800a874:	f1c2 0620 	rsb	r6, r2, #32
 800a878:	6843      	ldr	r3, [r0, #4]
 800a87a:	6804      	ldr	r4, [r0, #0]
 800a87c:	fa03 f506 	lsl.w	r5, r3, r6
 800a880:	432c      	orrs	r4, r5
 800a882:	40d3      	lsrs	r3, r2
 800a884:	6004      	str	r4, [r0, #0]
 800a886:	f840 3f04 	str.w	r3, [r0, #4]!
 800a88a:	4288      	cmp	r0, r1
 800a88c:	d3f4      	bcc.n	800a878 <L_shift+0xc>
 800a88e:	bd70      	pop	{r4, r5, r6, pc}

0800a890 <__match>:
 800a890:	b530      	push	{r4, r5, lr}
 800a892:	6803      	ldr	r3, [r0, #0]
 800a894:	3301      	adds	r3, #1
 800a896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a89a:	b914      	cbnz	r4, 800a8a2 <__match+0x12>
 800a89c:	6003      	str	r3, [r0, #0]
 800a89e:	2001      	movs	r0, #1
 800a8a0:	bd30      	pop	{r4, r5, pc}
 800a8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a8aa:	2d19      	cmp	r5, #25
 800a8ac:	bf98      	it	ls
 800a8ae:	3220      	addls	r2, #32
 800a8b0:	42a2      	cmp	r2, r4
 800a8b2:	d0f0      	beq.n	800a896 <__match+0x6>
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	e7f3      	b.n	800a8a0 <__match+0x10>

0800a8b8 <__hexnan>:
 800a8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8bc:	680b      	ldr	r3, [r1, #0]
 800a8be:	6801      	ldr	r1, [r0, #0]
 800a8c0:	115e      	asrs	r6, r3, #5
 800a8c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8c6:	f013 031f 	ands.w	r3, r3, #31
 800a8ca:	b087      	sub	sp, #28
 800a8cc:	bf18      	it	ne
 800a8ce:	3604      	addne	r6, #4
 800a8d0:	2500      	movs	r5, #0
 800a8d2:	1f37      	subs	r7, r6, #4
 800a8d4:	4682      	mov	sl, r0
 800a8d6:	4690      	mov	r8, r2
 800a8d8:	9301      	str	r3, [sp, #4]
 800a8da:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8de:	46b9      	mov	r9, r7
 800a8e0:	463c      	mov	r4, r7
 800a8e2:	9502      	str	r5, [sp, #8]
 800a8e4:	46ab      	mov	fp, r5
 800a8e6:	784a      	ldrb	r2, [r1, #1]
 800a8e8:	1c4b      	adds	r3, r1, #1
 800a8ea:	9303      	str	r3, [sp, #12]
 800a8ec:	b342      	cbz	r2, 800a940 <__hexnan+0x88>
 800a8ee:	4610      	mov	r0, r2
 800a8f0:	9105      	str	r1, [sp, #20]
 800a8f2:	9204      	str	r2, [sp, #16]
 800a8f4:	f7ff fd95 	bl	800a422 <__hexdig_fun>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	d151      	bne.n	800a9a0 <__hexnan+0xe8>
 800a8fc:	9a04      	ldr	r2, [sp, #16]
 800a8fe:	9905      	ldr	r1, [sp, #20]
 800a900:	2a20      	cmp	r2, #32
 800a902:	d818      	bhi.n	800a936 <__hexnan+0x7e>
 800a904:	9b02      	ldr	r3, [sp, #8]
 800a906:	459b      	cmp	fp, r3
 800a908:	dd13      	ble.n	800a932 <__hexnan+0x7a>
 800a90a:	454c      	cmp	r4, r9
 800a90c:	d206      	bcs.n	800a91c <__hexnan+0x64>
 800a90e:	2d07      	cmp	r5, #7
 800a910:	dc04      	bgt.n	800a91c <__hexnan+0x64>
 800a912:	462a      	mov	r2, r5
 800a914:	4649      	mov	r1, r9
 800a916:	4620      	mov	r0, r4
 800a918:	f7ff ffa8 	bl	800a86c <L_shift>
 800a91c:	4544      	cmp	r4, r8
 800a91e:	d952      	bls.n	800a9c6 <__hexnan+0x10e>
 800a920:	2300      	movs	r3, #0
 800a922:	f1a4 0904 	sub.w	r9, r4, #4
 800a926:	f844 3c04 	str.w	r3, [r4, #-4]
 800a92a:	f8cd b008 	str.w	fp, [sp, #8]
 800a92e:	464c      	mov	r4, r9
 800a930:	461d      	mov	r5, r3
 800a932:	9903      	ldr	r1, [sp, #12]
 800a934:	e7d7      	b.n	800a8e6 <__hexnan+0x2e>
 800a936:	2a29      	cmp	r2, #41	@ 0x29
 800a938:	d157      	bne.n	800a9ea <__hexnan+0x132>
 800a93a:	3102      	adds	r1, #2
 800a93c:	f8ca 1000 	str.w	r1, [sl]
 800a940:	f1bb 0f00 	cmp.w	fp, #0
 800a944:	d051      	beq.n	800a9ea <__hexnan+0x132>
 800a946:	454c      	cmp	r4, r9
 800a948:	d206      	bcs.n	800a958 <__hexnan+0xa0>
 800a94a:	2d07      	cmp	r5, #7
 800a94c:	dc04      	bgt.n	800a958 <__hexnan+0xa0>
 800a94e:	462a      	mov	r2, r5
 800a950:	4649      	mov	r1, r9
 800a952:	4620      	mov	r0, r4
 800a954:	f7ff ff8a 	bl	800a86c <L_shift>
 800a958:	4544      	cmp	r4, r8
 800a95a:	d936      	bls.n	800a9ca <__hexnan+0x112>
 800a95c:	f1a8 0204 	sub.w	r2, r8, #4
 800a960:	4623      	mov	r3, r4
 800a962:	f853 1b04 	ldr.w	r1, [r3], #4
 800a966:	f842 1f04 	str.w	r1, [r2, #4]!
 800a96a:	429f      	cmp	r7, r3
 800a96c:	d2f9      	bcs.n	800a962 <__hexnan+0xaa>
 800a96e:	1b3b      	subs	r3, r7, r4
 800a970:	f023 0303 	bic.w	r3, r3, #3
 800a974:	3304      	adds	r3, #4
 800a976:	3401      	adds	r4, #1
 800a978:	3e03      	subs	r6, #3
 800a97a:	42b4      	cmp	r4, r6
 800a97c:	bf88      	it	hi
 800a97e:	2304      	movhi	r3, #4
 800a980:	4443      	add	r3, r8
 800a982:	2200      	movs	r2, #0
 800a984:	f843 2b04 	str.w	r2, [r3], #4
 800a988:	429f      	cmp	r7, r3
 800a98a:	d2fb      	bcs.n	800a984 <__hexnan+0xcc>
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	b91b      	cbnz	r3, 800a998 <__hexnan+0xe0>
 800a990:	4547      	cmp	r7, r8
 800a992:	d128      	bne.n	800a9e6 <__hexnan+0x12e>
 800a994:	2301      	movs	r3, #1
 800a996:	603b      	str	r3, [r7, #0]
 800a998:	2005      	movs	r0, #5
 800a99a:	b007      	add	sp, #28
 800a99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a0:	3501      	adds	r5, #1
 800a9a2:	2d08      	cmp	r5, #8
 800a9a4:	f10b 0b01 	add.w	fp, fp, #1
 800a9a8:	dd06      	ble.n	800a9b8 <__hexnan+0x100>
 800a9aa:	4544      	cmp	r4, r8
 800a9ac:	d9c1      	bls.n	800a932 <__hexnan+0x7a>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9b4:	2501      	movs	r5, #1
 800a9b6:	3c04      	subs	r4, #4
 800a9b8:	6822      	ldr	r2, [r4, #0]
 800a9ba:	f000 000f 	and.w	r0, r0, #15
 800a9be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a9c2:	6020      	str	r0, [r4, #0]
 800a9c4:	e7b5      	b.n	800a932 <__hexnan+0x7a>
 800a9c6:	2508      	movs	r5, #8
 800a9c8:	e7b3      	b.n	800a932 <__hexnan+0x7a>
 800a9ca:	9b01      	ldr	r3, [sp, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d0dd      	beq.n	800a98c <__hexnan+0xd4>
 800a9d0:	f1c3 0320 	rsb	r3, r3, #32
 800a9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9d8:	40da      	lsrs	r2, r3
 800a9da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a9de:	4013      	ands	r3, r2
 800a9e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a9e4:	e7d2      	b.n	800a98c <__hexnan+0xd4>
 800a9e6:	3f04      	subs	r7, #4
 800a9e8:	e7d0      	b.n	800a98c <__hexnan+0xd4>
 800a9ea:	2004      	movs	r0, #4
 800a9ec:	e7d5      	b.n	800a99a <__hexnan+0xe2>

0800a9ee <__ascii_mbtowc>:
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	b901      	cbnz	r1, 800a9f4 <__ascii_mbtowc+0x6>
 800a9f2:	a901      	add	r1, sp, #4
 800a9f4:	b142      	cbz	r2, 800aa08 <__ascii_mbtowc+0x1a>
 800a9f6:	b14b      	cbz	r3, 800aa0c <__ascii_mbtowc+0x1e>
 800a9f8:	7813      	ldrb	r3, [r2, #0]
 800a9fa:	600b      	str	r3, [r1, #0]
 800a9fc:	7812      	ldrb	r2, [r2, #0]
 800a9fe:	1e10      	subs	r0, r2, #0
 800aa00:	bf18      	it	ne
 800aa02:	2001      	movne	r0, #1
 800aa04:	b002      	add	sp, #8
 800aa06:	4770      	bx	lr
 800aa08:	4610      	mov	r0, r2
 800aa0a:	e7fb      	b.n	800aa04 <__ascii_mbtowc+0x16>
 800aa0c:	f06f 0001 	mvn.w	r0, #1
 800aa10:	e7f8      	b.n	800aa04 <__ascii_mbtowc+0x16>

0800aa12 <_realloc_r>:
 800aa12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa16:	4680      	mov	r8, r0
 800aa18:	4615      	mov	r5, r2
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	b921      	cbnz	r1, 800aa28 <_realloc_r+0x16>
 800aa1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa22:	4611      	mov	r1, r2
 800aa24:	f7fd bcac 	b.w	8008380 <_malloc_r>
 800aa28:	b92a      	cbnz	r2, 800aa36 <_realloc_r+0x24>
 800aa2a:	f7fd fc35 	bl	8008298 <_free_r>
 800aa2e:	2400      	movs	r4, #0
 800aa30:	4620      	mov	r0, r4
 800aa32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa36:	f000 f86b 	bl	800ab10 <_malloc_usable_size_r>
 800aa3a:	4285      	cmp	r5, r0
 800aa3c:	4606      	mov	r6, r0
 800aa3e:	d802      	bhi.n	800aa46 <_realloc_r+0x34>
 800aa40:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aa44:	d8f4      	bhi.n	800aa30 <_realloc_r+0x1e>
 800aa46:	4629      	mov	r1, r5
 800aa48:	4640      	mov	r0, r8
 800aa4a:	f7fd fc99 	bl	8008380 <_malloc_r>
 800aa4e:	4607      	mov	r7, r0
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d0ec      	beq.n	800aa2e <_realloc_r+0x1c>
 800aa54:	42b5      	cmp	r5, r6
 800aa56:	462a      	mov	r2, r5
 800aa58:	4621      	mov	r1, r4
 800aa5a:	bf28      	it	cs
 800aa5c:	4632      	movcs	r2, r6
 800aa5e:	f7fc fd9a 	bl	8007596 <memcpy>
 800aa62:	4621      	mov	r1, r4
 800aa64:	4640      	mov	r0, r8
 800aa66:	f7fd fc17 	bl	8008298 <_free_r>
 800aa6a:	463c      	mov	r4, r7
 800aa6c:	e7e0      	b.n	800aa30 <_realloc_r+0x1e>

0800aa6e <__ascii_wctomb>:
 800aa6e:	4603      	mov	r3, r0
 800aa70:	4608      	mov	r0, r1
 800aa72:	b141      	cbz	r1, 800aa86 <__ascii_wctomb+0x18>
 800aa74:	2aff      	cmp	r2, #255	@ 0xff
 800aa76:	d904      	bls.n	800aa82 <__ascii_wctomb+0x14>
 800aa78:	228a      	movs	r2, #138	@ 0x8a
 800aa7a:	601a      	str	r2, [r3, #0]
 800aa7c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa80:	4770      	bx	lr
 800aa82:	700a      	strb	r2, [r1, #0]
 800aa84:	2001      	movs	r0, #1
 800aa86:	4770      	bx	lr

0800aa88 <_raise_r>:
 800aa88:	291f      	cmp	r1, #31
 800aa8a:	b538      	push	{r3, r4, r5, lr}
 800aa8c:	4605      	mov	r5, r0
 800aa8e:	460c      	mov	r4, r1
 800aa90:	d904      	bls.n	800aa9c <_raise_r+0x14>
 800aa92:	2316      	movs	r3, #22
 800aa94:	6003      	str	r3, [r0, #0]
 800aa96:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9a:	bd38      	pop	{r3, r4, r5, pc}
 800aa9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa9e:	b112      	cbz	r2, 800aaa6 <_raise_r+0x1e>
 800aaa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aaa4:	b94b      	cbnz	r3, 800aaba <_raise_r+0x32>
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	f000 f830 	bl	800ab0c <_getpid_r>
 800aaac:	4622      	mov	r2, r4
 800aaae:	4601      	mov	r1, r0
 800aab0:	4628      	mov	r0, r5
 800aab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aab6:	f000 b817 	b.w	800aae8 <_kill_r>
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d00a      	beq.n	800aad4 <_raise_r+0x4c>
 800aabe:	1c59      	adds	r1, r3, #1
 800aac0:	d103      	bne.n	800aaca <_raise_r+0x42>
 800aac2:	2316      	movs	r3, #22
 800aac4:	6003      	str	r3, [r0, #0]
 800aac6:	2001      	movs	r0, #1
 800aac8:	e7e7      	b.n	800aa9a <_raise_r+0x12>
 800aaca:	2100      	movs	r1, #0
 800aacc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aad0:	4620      	mov	r0, r4
 800aad2:	4798      	blx	r3
 800aad4:	2000      	movs	r0, #0
 800aad6:	e7e0      	b.n	800aa9a <_raise_r+0x12>

0800aad8 <raise>:
 800aad8:	4b02      	ldr	r3, [pc, #8]	@ (800aae4 <raise+0xc>)
 800aada:	4601      	mov	r1, r0
 800aadc:	6818      	ldr	r0, [r3, #0]
 800aade:	f7ff bfd3 	b.w	800aa88 <_raise_r>
 800aae2:	bf00      	nop
 800aae4:	20000028 	.word	0x20000028

0800aae8 <_kill_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4d07      	ldr	r5, [pc, #28]	@ (800ab08 <_kill_r+0x20>)
 800aaec:	2300      	movs	r3, #0
 800aaee:	4604      	mov	r4, r0
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	602b      	str	r3, [r5, #0]
 800aaf6:	f7f8 fbbf 	bl	8003278 <_kill>
 800aafa:	1c43      	adds	r3, r0, #1
 800aafc:	d102      	bne.n	800ab04 <_kill_r+0x1c>
 800aafe:	682b      	ldr	r3, [r5, #0]
 800ab00:	b103      	cbz	r3, 800ab04 <_kill_r+0x1c>
 800ab02:	6023      	str	r3, [r4, #0]
 800ab04:	bd38      	pop	{r3, r4, r5, pc}
 800ab06:	bf00      	nop
 800ab08:	20000424 	.word	0x20000424

0800ab0c <_getpid_r>:
 800ab0c:	f7f8 bbac 	b.w	8003268 <_getpid>

0800ab10 <_malloc_usable_size_r>:
 800ab10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab14:	1f18      	subs	r0, r3, #4
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	bfbc      	itt	lt
 800ab1a:	580b      	ldrlt	r3, [r1, r0]
 800ab1c:	18c0      	addlt	r0, r0, r3
 800ab1e:	4770      	bx	lr

0800ab20 <asin>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	ed2d 8b02 	vpush	{d8}
 800ab26:	ec55 4b10 	vmov	r4, r5, d0
 800ab2a:	f000 f93d 	bl	800ada8 <__ieee754_asin>
 800ab2e:	4622      	mov	r2, r4
 800ab30:	462b      	mov	r3, r5
 800ab32:	4620      	mov	r0, r4
 800ab34:	4629      	mov	r1, r5
 800ab36:	eeb0 8a40 	vmov.f32	s16, s0
 800ab3a:	eef0 8a60 	vmov.f32	s17, s1
 800ab3e:	f7f5 fff5 	bl	8000b2c <__aeabi_dcmpun>
 800ab42:	b9a8      	cbnz	r0, 800ab70 <asin+0x50>
 800ab44:	ec45 4b10 	vmov	d0, r4, r5
 800ab48:	f000 f84a 	bl	800abe0 <fabs>
 800ab4c:	4b0c      	ldr	r3, [pc, #48]	@ (800ab80 <asin+0x60>)
 800ab4e:	ec51 0b10 	vmov	r0, r1, d0
 800ab52:	2200      	movs	r2, #0
 800ab54:	f7f5 ffe0 	bl	8000b18 <__aeabi_dcmpgt>
 800ab58:	b150      	cbz	r0, 800ab70 <asin+0x50>
 800ab5a:	f7fc fcef 	bl	800753c <__errno>
 800ab5e:	ecbd 8b02 	vpop	{d8}
 800ab62:	2321      	movs	r3, #33	@ 0x21
 800ab64:	6003      	str	r3, [r0, #0]
 800ab66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab6a:	4806      	ldr	r0, [pc, #24]	@ (800ab84 <asin+0x64>)
 800ab6c:	f7ff bbe4 	b.w	800a338 <nan>
 800ab70:	eeb0 0a48 	vmov.f32	s0, s16
 800ab74:	eef0 0a68 	vmov.f32	s1, s17
 800ab78:	ecbd 8b02 	vpop	{d8}
 800ab7c:	bd38      	pop	{r3, r4, r5, pc}
 800ab7e:	bf00      	nop
 800ab80:	3ff00000 	.word	0x3ff00000
 800ab84:	08016177 	.word	0x08016177

0800ab88 <sqrt>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	ed2d 8b02 	vpush	{d8}
 800ab8e:	ec55 4b10 	vmov	r4, r5, d0
 800ab92:	f000 f82d 	bl	800abf0 <__ieee754_sqrt>
 800ab96:	4622      	mov	r2, r4
 800ab98:	462b      	mov	r3, r5
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	eeb0 8a40 	vmov.f32	s16, s0
 800aba2:	eef0 8a60 	vmov.f32	s17, s1
 800aba6:	f7f5 ffc1 	bl	8000b2c <__aeabi_dcmpun>
 800abaa:	b990      	cbnz	r0, 800abd2 <sqrt+0x4a>
 800abac:	2200      	movs	r2, #0
 800abae:	2300      	movs	r3, #0
 800abb0:	4620      	mov	r0, r4
 800abb2:	4629      	mov	r1, r5
 800abb4:	f7f5 ff92 	bl	8000adc <__aeabi_dcmplt>
 800abb8:	b158      	cbz	r0, 800abd2 <sqrt+0x4a>
 800abba:	f7fc fcbf 	bl	800753c <__errno>
 800abbe:	2321      	movs	r3, #33	@ 0x21
 800abc0:	6003      	str	r3, [r0, #0]
 800abc2:	2200      	movs	r2, #0
 800abc4:	2300      	movs	r3, #0
 800abc6:	4610      	mov	r0, r2
 800abc8:	4619      	mov	r1, r3
 800abca:	f7f5 fe3f 	bl	800084c <__aeabi_ddiv>
 800abce:	ec41 0b18 	vmov	d8, r0, r1
 800abd2:	eeb0 0a48 	vmov.f32	s0, s16
 800abd6:	eef0 0a68 	vmov.f32	s1, s17
 800abda:	ecbd 8b02 	vpop	{d8}
 800abde:	bd38      	pop	{r3, r4, r5, pc}

0800abe0 <fabs>:
 800abe0:	ec51 0b10 	vmov	r0, r1, d0
 800abe4:	4602      	mov	r2, r0
 800abe6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800abea:	ec43 2b10 	vmov	d0, r2, r3
 800abee:	4770      	bx	lr

0800abf0 <__ieee754_sqrt>:
 800abf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	4a68      	ldr	r2, [pc, #416]	@ (800ad98 <__ieee754_sqrt+0x1a8>)
 800abf6:	ec55 4b10 	vmov	r4, r5, d0
 800abfa:	43aa      	bics	r2, r5
 800abfc:	462b      	mov	r3, r5
 800abfe:	4621      	mov	r1, r4
 800ac00:	d110      	bne.n	800ac24 <__ieee754_sqrt+0x34>
 800ac02:	4622      	mov	r2, r4
 800ac04:	4620      	mov	r0, r4
 800ac06:	4629      	mov	r1, r5
 800ac08:	f7f5 fcf6 	bl	80005f8 <__aeabi_dmul>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	460b      	mov	r3, r1
 800ac10:	4620      	mov	r0, r4
 800ac12:	4629      	mov	r1, r5
 800ac14:	f7f5 fb3a 	bl	800028c <__adddf3>
 800ac18:	4604      	mov	r4, r0
 800ac1a:	460d      	mov	r5, r1
 800ac1c:	ec45 4b10 	vmov	d0, r4, r5
 800ac20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac24:	2d00      	cmp	r5, #0
 800ac26:	dc0e      	bgt.n	800ac46 <__ieee754_sqrt+0x56>
 800ac28:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ac2c:	4322      	orrs	r2, r4
 800ac2e:	d0f5      	beq.n	800ac1c <__ieee754_sqrt+0x2c>
 800ac30:	b19d      	cbz	r5, 800ac5a <__ieee754_sqrt+0x6a>
 800ac32:	4622      	mov	r2, r4
 800ac34:	4620      	mov	r0, r4
 800ac36:	4629      	mov	r1, r5
 800ac38:	f7f5 fb26 	bl	8000288 <__aeabi_dsub>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	f7f5 fe04 	bl	800084c <__aeabi_ddiv>
 800ac44:	e7e8      	b.n	800ac18 <__ieee754_sqrt+0x28>
 800ac46:	152a      	asrs	r2, r5, #20
 800ac48:	d115      	bne.n	800ac76 <__ieee754_sqrt+0x86>
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	e009      	b.n	800ac62 <__ieee754_sqrt+0x72>
 800ac4e:	0acb      	lsrs	r3, r1, #11
 800ac50:	3a15      	subs	r2, #21
 800ac52:	0549      	lsls	r1, r1, #21
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d0fa      	beq.n	800ac4e <__ieee754_sqrt+0x5e>
 800ac58:	e7f7      	b.n	800ac4a <__ieee754_sqrt+0x5a>
 800ac5a:	462a      	mov	r2, r5
 800ac5c:	e7fa      	b.n	800ac54 <__ieee754_sqrt+0x64>
 800ac5e:	005b      	lsls	r3, r3, #1
 800ac60:	3001      	adds	r0, #1
 800ac62:	02dc      	lsls	r4, r3, #11
 800ac64:	d5fb      	bpl.n	800ac5e <__ieee754_sqrt+0x6e>
 800ac66:	1e44      	subs	r4, r0, #1
 800ac68:	1b12      	subs	r2, r2, r4
 800ac6a:	f1c0 0420 	rsb	r4, r0, #32
 800ac6e:	fa21 f404 	lsr.w	r4, r1, r4
 800ac72:	4323      	orrs	r3, r4
 800ac74:	4081      	lsls	r1, r0
 800ac76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac7a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ac7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac82:	07d2      	lsls	r2, r2, #31
 800ac84:	bf5c      	itt	pl
 800ac86:	005b      	lslpl	r3, r3, #1
 800ac88:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ac8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ac90:	bf58      	it	pl
 800ac92:	0049      	lslpl	r1, r1, #1
 800ac94:	2600      	movs	r6, #0
 800ac96:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ac9a:	106d      	asrs	r5, r5, #1
 800ac9c:	0049      	lsls	r1, r1, #1
 800ac9e:	2016      	movs	r0, #22
 800aca0:	4632      	mov	r2, r6
 800aca2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800aca6:	1917      	adds	r7, r2, r4
 800aca8:	429f      	cmp	r7, r3
 800acaa:	bfde      	ittt	le
 800acac:	193a      	addle	r2, r7, r4
 800acae:	1bdb      	suble	r3, r3, r7
 800acb0:	1936      	addle	r6, r6, r4
 800acb2:	0fcf      	lsrs	r7, r1, #31
 800acb4:	3801      	subs	r0, #1
 800acb6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800acba:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800acbe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800acc2:	d1f0      	bne.n	800aca6 <__ieee754_sqrt+0xb6>
 800acc4:	4604      	mov	r4, r0
 800acc6:	2720      	movs	r7, #32
 800acc8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800accc:	429a      	cmp	r2, r3
 800acce:	eb00 0e0c 	add.w	lr, r0, ip
 800acd2:	db02      	blt.n	800acda <__ieee754_sqrt+0xea>
 800acd4:	d113      	bne.n	800acfe <__ieee754_sqrt+0x10e>
 800acd6:	458e      	cmp	lr, r1
 800acd8:	d811      	bhi.n	800acfe <__ieee754_sqrt+0x10e>
 800acda:	f1be 0f00 	cmp.w	lr, #0
 800acde:	eb0e 000c 	add.w	r0, lr, ip
 800ace2:	da42      	bge.n	800ad6a <__ieee754_sqrt+0x17a>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	db40      	blt.n	800ad6a <__ieee754_sqrt+0x17a>
 800ace8:	f102 0801 	add.w	r8, r2, #1
 800acec:	1a9b      	subs	r3, r3, r2
 800acee:	458e      	cmp	lr, r1
 800acf0:	bf88      	it	hi
 800acf2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800acf6:	eba1 010e 	sub.w	r1, r1, lr
 800acfa:	4464      	add	r4, ip
 800acfc:	4642      	mov	r2, r8
 800acfe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ad02:	3f01      	subs	r7, #1
 800ad04:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ad08:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ad0c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ad10:	d1dc      	bne.n	800accc <__ieee754_sqrt+0xdc>
 800ad12:	4319      	orrs	r1, r3
 800ad14:	d01b      	beq.n	800ad4e <__ieee754_sqrt+0x15e>
 800ad16:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ad9c <__ieee754_sqrt+0x1ac>
 800ad1a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ada0 <__ieee754_sqrt+0x1b0>
 800ad1e:	e9da 0100 	ldrd	r0, r1, [sl]
 800ad22:	e9db 2300 	ldrd	r2, r3, [fp]
 800ad26:	f7f5 faaf 	bl	8000288 <__aeabi_dsub>
 800ad2a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad2e:	4602      	mov	r2, r0
 800ad30:	460b      	mov	r3, r1
 800ad32:	4640      	mov	r0, r8
 800ad34:	4649      	mov	r1, r9
 800ad36:	f7f5 fedb 	bl	8000af0 <__aeabi_dcmple>
 800ad3a:	b140      	cbz	r0, 800ad4e <__ieee754_sqrt+0x15e>
 800ad3c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ad40:	e9da 0100 	ldrd	r0, r1, [sl]
 800ad44:	e9db 2300 	ldrd	r2, r3, [fp]
 800ad48:	d111      	bne.n	800ad6e <__ieee754_sqrt+0x17e>
 800ad4a:	3601      	adds	r6, #1
 800ad4c:	463c      	mov	r4, r7
 800ad4e:	1072      	asrs	r2, r6, #1
 800ad50:	0863      	lsrs	r3, r4, #1
 800ad52:	07f1      	lsls	r1, r6, #31
 800ad54:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ad58:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ad5c:	bf48      	it	mi
 800ad5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ad62:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ad66:	4618      	mov	r0, r3
 800ad68:	e756      	b.n	800ac18 <__ieee754_sqrt+0x28>
 800ad6a:	4690      	mov	r8, r2
 800ad6c:	e7be      	b.n	800acec <__ieee754_sqrt+0xfc>
 800ad6e:	f7f5 fa8d 	bl	800028c <__adddf3>
 800ad72:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	4640      	mov	r0, r8
 800ad7c:	4649      	mov	r1, r9
 800ad7e:	f7f5 fead 	bl	8000adc <__aeabi_dcmplt>
 800ad82:	b120      	cbz	r0, 800ad8e <__ieee754_sqrt+0x19e>
 800ad84:	1ca0      	adds	r0, r4, #2
 800ad86:	bf08      	it	eq
 800ad88:	3601      	addeq	r6, #1
 800ad8a:	3402      	adds	r4, #2
 800ad8c:	e7df      	b.n	800ad4e <__ieee754_sqrt+0x15e>
 800ad8e:	1c63      	adds	r3, r4, #1
 800ad90:	f023 0401 	bic.w	r4, r3, #1
 800ad94:	e7db      	b.n	800ad4e <__ieee754_sqrt+0x15e>
 800ad96:	bf00      	nop
 800ad98:	7ff00000 	.word	0x7ff00000
 800ad9c:	200001f0 	.word	0x200001f0
 800ada0:	200001e8 	.word	0x200001e8
 800ada4:	00000000 	.word	0x00000000

0800ada8 <__ieee754_asin>:
 800ada8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adac:	ec55 4b10 	vmov	r4, r5, d0
 800adb0:	4bc7      	ldr	r3, [pc, #796]	@ (800b0d0 <__ieee754_asin+0x328>)
 800adb2:	b087      	sub	sp, #28
 800adb4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800adb8:	429e      	cmp	r6, r3
 800adba:	9501      	str	r5, [sp, #4]
 800adbc:	d92d      	bls.n	800ae1a <__ieee754_asin+0x72>
 800adbe:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800adc2:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800adc6:	4326      	orrs	r6, r4
 800adc8:	d116      	bne.n	800adf8 <__ieee754_asin+0x50>
 800adca:	a3a7      	add	r3, pc, #668	@ (adr r3, 800b068 <__ieee754_asin+0x2c0>)
 800adcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add0:	4620      	mov	r0, r4
 800add2:	4629      	mov	r1, r5
 800add4:	f7f5 fc10 	bl	80005f8 <__aeabi_dmul>
 800add8:	a3a5      	add	r3, pc, #660	@ (adr r3, 800b070 <__ieee754_asin+0x2c8>)
 800adda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adde:	4606      	mov	r6, r0
 800ade0:	460f      	mov	r7, r1
 800ade2:	4620      	mov	r0, r4
 800ade4:	4629      	mov	r1, r5
 800ade6:	f7f5 fc07 	bl	80005f8 <__aeabi_dmul>
 800adea:	4602      	mov	r2, r0
 800adec:	460b      	mov	r3, r1
 800adee:	4630      	mov	r0, r6
 800adf0:	4639      	mov	r1, r7
 800adf2:	f7f5 fa4b 	bl	800028c <__adddf3>
 800adf6:	e009      	b.n	800ae0c <__ieee754_asin+0x64>
 800adf8:	4622      	mov	r2, r4
 800adfa:	462b      	mov	r3, r5
 800adfc:	4620      	mov	r0, r4
 800adfe:	4629      	mov	r1, r5
 800ae00:	f7f5 fa42 	bl	8000288 <__aeabi_dsub>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	f7f5 fd20 	bl	800084c <__aeabi_ddiv>
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	460d      	mov	r5, r1
 800ae10:	ec45 4b10 	vmov	d0, r4, r5
 800ae14:	b007      	add	sp, #28
 800ae16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1a:	4bae      	ldr	r3, [pc, #696]	@ (800b0d4 <__ieee754_asin+0x32c>)
 800ae1c:	429e      	cmp	r6, r3
 800ae1e:	d810      	bhi.n	800ae42 <__ieee754_asin+0x9a>
 800ae20:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800ae24:	f080 80ad 	bcs.w	800af82 <__ieee754_asin+0x1da>
 800ae28:	a393      	add	r3, pc, #588	@ (adr r3, 800b078 <__ieee754_asin+0x2d0>)
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	4620      	mov	r0, r4
 800ae30:	4629      	mov	r1, r5
 800ae32:	f7f5 fa2b 	bl	800028c <__adddf3>
 800ae36:	4ba8      	ldr	r3, [pc, #672]	@ (800b0d8 <__ieee754_asin+0x330>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f7f5 fe6d 	bl	8000b18 <__aeabi_dcmpgt>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	d1e6      	bne.n	800ae10 <__ieee754_asin+0x68>
 800ae42:	ec45 4b10 	vmov	d0, r4, r5
 800ae46:	f7ff fecb 	bl	800abe0 <fabs>
 800ae4a:	49a3      	ldr	r1, [pc, #652]	@ (800b0d8 <__ieee754_asin+0x330>)
 800ae4c:	ec53 2b10 	vmov	r2, r3, d0
 800ae50:	2000      	movs	r0, #0
 800ae52:	f7f5 fa19 	bl	8000288 <__aeabi_dsub>
 800ae56:	4ba1      	ldr	r3, [pc, #644]	@ (800b0dc <__ieee754_asin+0x334>)
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f7f5 fbcd 	bl	80005f8 <__aeabi_dmul>
 800ae5e:	a388      	add	r3, pc, #544	@ (adr r3, 800b080 <__ieee754_asin+0x2d8>)
 800ae60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae64:	4604      	mov	r4, r0
 800ae66:	460d      	mov	r5, r1
 800ae68:	f7f5 fbc6 	bl	80005f8 <__aeabi_dmul>
 800ae6c:	a386      	add	r3, pc, #536	@ (adr r3, 800b088 <__ieee754_asin+0x2e0>)
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	f7f5 fa0b 	bl	800028c <__adddf3>
 800ae76:	4622      	mov	r2, r4
 800ae78:	462b      	mov	r3, r5
 800ae7a:	f7f5 fbbd 	bl	80005f8 <__aeabi_dmul>
 800ae7e:	a384      	add	r3, pc, #528	@ (adr r3, 800b090 <__ieee754_asin+0x2e8>)
 800ae80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae84:	f7f5 fa00 	bl	8000288 <__aeabi_dsub>
 800ae88:	4622      	mov	r2, r4
 800ae8a:	462b      	mov	r3, r5
 800ae8c:	f7f5 fbb4 	bl	80005f8 <__aeabi_dmul>
 800ae90:	a381      	add	r3, pc, #516	@ (adr r3, 800b098 <__ieee754_asin+0x2f0>)
 800ae92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae96:	f7f5 f9f9 	bl	800028c <__adddf3>
 800ae9a:	4622      	mov	r2, r4
 800ae9c:	462b      	mov	r3, r5
 800ae9e:	f7f5 fbab 	bl	80005f8 <__aeabi_dmul>
 800aea2:	a37f      	add	r3, pc, #508	@ (adr r3, 800b0a0 <__ieee754_asin+0x2f8>)
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	f7f5 f9ee 	bl	8000288 <__aeabi_dsub>
 800aeac:	4622      	mov	r2, r4
 800aeae:	462b      	mov	r3, r5
 800aeb0:	f7f5 fba2 	bl	80005f8 <__aeabi_dmul>
 800aeb4:	a37c      	add	r3, pc, #496	@ (adr r3, 800b0a8 <__ieee754_asin+0x300>)
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	f7f5 f9e7 	bl	800028c <__adddf3>
 800aebe:	4622      	mov	r2, r4
 800aec0:	462b      	mov	r3, r5
 800aec2:	f7f5 fb99 	bl	80005f8 <__aeabi_dmul>
 800aec6:	a37a      	add	r3, pc, #488	@ (adr r3, 800b0b0 <__ieee754_asin+0x308>)
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aed0:	4620      	mov	r0, r4
 800aed2:	4629      	mov	r1, r5
 800aed4:	f7f5 fb90 	bl	80005f8 <__aeabi_dmul>
 800aed8:	a377      	add	r3, pc, #476	@ (adr r3, 800b0b8 <__ieee754_asin+0x310>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	f7f5 f9d3 	bl	8000288 <__aeabi_dsub>
 800aee2:	4622      	mov	r2, r4
 800aee4:	462b      	mov	r3, r5
 800aee6:	f7f5 fb87 	bl	80005f8 <__aeabi_dmul>
 800aeea:	a375      	add	r3, pc, #468	@ (adr r3, 800b0c0 <__ieee754_asin+0x318>)
 800aeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef0:	f7f5 f9cc 	bl	800028c <__adddf3>
 800aef4:	4622      	mov	r2, r4
 800aef6:	462b      	mov	r3, r5
 800aef8:	f7f5 fb7e 	bl	80005f8 <__aeabi_dmul>
 800aefc:	a372      	add	r3, pc, #456	@ (adr r3, 800b0c8 <__ieee754_asin+0x320>)
 800aefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af02:	f7f5 f9c1 	bl	8000288 <__aeabi_dsub>
 800af06:	4622      	mov	r2, r4
 800af08:	462b      	mov	r3, r5
 800af0a:	f7f5 fb75 	bl	80005f8 <__aeabi_dmul>
 800af0e:	4b72      	ldr	r3, [pc, #456]	@ (800b0d8 <__ieee754_asin+0x330>)
 800af10:	2200      	movs	r2, #0
 800af12:	f7f5 f9bb 	bl	800028c <__adddf3>
 800af16:	ec45 4b10 	vmov	d0, r4, r5
 800af1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af1e:	f7ff fe67 	bl	800abf0 <__ieee754_sqrt>
 800af22:	4b6f      	ldr	r3, [pc, #444]	@ (800b0e0 <__ieee754_asin+0x338>)
 800af24:	429e      	cmp	r6, r3
 800af26:	ec5b ab10 	vmov	sl, fp, d0
 800af2a:	f240 80db 	bls.w	800b0e4 <__ieee754_asin+0x33c>
 800af2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af36:	f7f5 fc89 	bl	800084c <__aeabi_ddiv>
 800af3a:	4652      	mov	r2, sl
 800af3c:	465b      	mov	r3, fp
 800af3e:	f7f5 fb5b 	bl	80005f8 <__aeabi_dmul>
 800af42:	4652      	mov	r2, sl
 800af44:	465b      	mov	r3, fp
 800af46:	f7f5 f9a1 	bl	800028c <__adddf3>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	f7f5 f99d 	bl	800028c <__adddf3>
 800af52:	a347      	add	r3, pc, #284	@ (adr r3, 800b070 <__ieee754_asin+0x2c8>)
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	f7f5 f996 	bl	8000288 <__aeabi_dsub>
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	a141      	add	r1, pc, #260	@ (adr r1, 800b068 <__ieee754_asin+0x2c0>)
 800af62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af66:	f7f5 f98f 	bl	8000288 <__aeabi_dsub>
 800af6a:	9b01      	ldr	r3, [sp, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	bfdc      	itt	le
 800af70:	4602      	movle	r2, r0
 800af72:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800af76:	4604      	mov	r4, r0
 800af78:	460d      	mov	r5, r1
 800af7a:	bfdc      	itt	le
 800af7c:	4614      	movle	r4, r2
 800af7e:	461d      	movle	r5, r3
 800af80:	e746      	b.n	800ae10 <__ieee754_asin+0x68>
 800af82:	4622      	mov	r2, r4
 800af84:	462b      	mov	r3, r5
 800af86:	4620      	mov	r0, r4
 800af88:	4629      	mov	r1, r5
 800af8a:	f7f5 fb35 	bl	80005f8 <__aeabi_dmul>
 800af8e:	a33c      	add	r3, pc, #240	@ (adr r3, 800b080 <__ieee754_asin+0x2d8>)
 800af90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af94:	4606      	mov	r6, r0
 800af96:	460f      	mov	r7, r1
 800af98:	f7f5 fb2e 	bl	80005f8 <__aeabi_dmul>
 800af9c:	a33a      	add	r3, pc, #232	@ (adr r3, 800b088 <__ieee754_asin+0x2e0>)
 800af9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa2:	f7f5 f973 	bl	800028c <__adddf3>
 800afa6:	4632      	mov	r2, r6
 800afa8:	463b      	mov	r3, r7
 800afaa:	f7f5 fb25 	bl	80005f8 <__aeabi_dmul>
 800afae:	a338      	add	r3, pc, #224	@ (adr r3, 800b090 <__ieee754_asin+0x2e8>)
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	f7f5 f968 	bl	8000288 <__aeabi_dsub>
 800afb8:	4632      	mov	r2, r6
 800afba:	463b      	mov	r3, r7
 800afbc:	f7f5 fb1c 	bl	80005f8 <__aeabi_dmul>
 800afc0:	a335      	add	r3, pc, #212	@ (adr r3, 800b098 <__ieee754_asin+0x2f0>)
 800afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc6:	f7f5 f961 	bl	800028c <__adddf3>
 800afca:	4632      	mov	r2, r6
 800afcc:	463b      	mov	r3, r7
 800afce:	f7f5 fb13 	bl	80005f8 <__aeabi_dmul>
 800afd2:	a333      	add	r3, pc, #204	@ (adr r3, 800b0a0 <__ieee754_asin+0x2f8>)
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	f7f5 f956 	bl	8000288 <__aeabi_dsub>
 800afdc:	4632      	mov	r2, r6
 800afde:	463b      	mov	r3, r7
 800afe0:	f7f5 fb0a 	bl	80005f8 <__aeabi_dmul>
 800afe4:	a330      	add	r3, pc, #192	@ (adr r3, 800b0a8 <__ieee754_asin+0x300>)
 800afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afea:	f7f5 f94f 	bl	800028c <__adddf3>
 800afee:	4632      	mov	r2, r6
 800aff0:	463b      	mov	r3, r7
 800aff2:	f7f5 fb01 	bl	80005f8 <__aeabi_dmul>
 800aff6:	a32e      	add	r3, pc, #184	@ (adr r3, 800b0b0 <__ieee754_asin+0x308>)
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	4680      	mov	r8, r0
 800affe:	4689      	mov	r9, r1
 800b000:	4630      	mov	r0, r6
 800b002:	4639      	mov	r1, r7
 800b004:	f7f5 faf8 	bl	80005f8 <__aeabi_dmul>
 800b008:	a32b      	add	r3, pc, #172	@ (adr r3, 800b0b8 <__ieee754_asin+0x310>)
 800b00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00e:	f7f5 f93b 	bl	8000288 <__aeabi_dsub>
 800b012:	4632      	mov	r2, r6
 800b014:	463b      	mov	r3, r7
 800b016:	f7f5 faef 	bl	80005f8 <__aeabi_dmul>
 800b01a:	a329      	add	r3, pc, #164	@ (adr r3, 800b0c0 <__ieee754_asin+0x318>)
 800b01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b020:	f7f5 f934 	bl	800028c <__adddf3>
 800b024:	4632      	mov	r2, r6
 800b026:	463b      	mov	r3, r7
 800b028:	f7f5 fae6 	bl	80005f8 <__aeabi_dmul>
 800b02c:	a326      	add	r3, pc, #152	@ (adr r3, 800b0c8 <__ieee754_asin+0x320>)
 800b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b032:	f7f5 f929 	bl	8000288 <__aeabi_dsub>
 800b036:	4632      	mov	r2, r6
 800b038:	463b      	mov	r3, r7
 800b03a:	f7f5 fadd 	bl	80005f8 <__aeabi_dmul>
 800b03e:	4b26      	ldr	r3, [pc, #152]	@ (800b0d8 <__ieee754_asin+0x330>)
 800b040:	2200      	movs	r2, #0
 800b042:	f7f5 f923 	bl	800028c <__adddf3>
 800b046:	4602      	mov	r2, r0
 800b048:	460b      	mov	r3, r1
 800b04a:	4640      	mov	r0, r8
 800b04c:	4649      	mov	r1, r9
 800b04e:	f7f5 fbfd 	bl	800084c <__aeabi_ddiv>
 800b052:	4622      	mov	r2, r4
 800b054:	462b      	mov	r3, r5
 800b056:	f7f5 facf 	bl	80005f8 <__aeabi_dmul>
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	4620      	mov	r0, r4
 800b060:	4629      	mov	r1, r5
 800b062:	e6c6      	b.n	800adf2 <__ieee754_asin+0x4a>
 800b064:	f3af 8000 	nop.w
 800b068:	54442d18 	.word	0x54442d18
 800b06c:	3ff921fb 	.word	0x3ff921fb
 800b070:	33145c07 	.word	0x33145c07
 800b074:	3c91a626 	.word	0x3c91a626
 800b078:	8800759c 	.word	0x8800759c
 800b07c:	7e37e43c 	.word	0x7e37e43c
 800b080:	0dfdf709 	.word	0x0dfdf709
 800b084:	3f023de1 	.word	0x3f023de1
 800b088:	7501b288 	.word	0x7501b288
 800b08c:	3f49efe0 	.word	0x3f49efe0
 800b090:	b5688f3b 	.word	0xb5688f3b
 800b094:	3fa48228 	.word	0x3fa48228
 800b098:	0e884455 	.word	0x0e884455
 800b09c:	3fc9c155 	.word	0x3fc9c155
 800b0a0:	03eb6f7d 	.word	0x03eb6f7d
 800b0a4:	3fd4d612 	.word	0x3fd4d612
 800b0a8:	55555555 	.word	0x55555555
 800b0ac:	3fc55555 	.word	0x3fc55555
 800b0b0:	b12e9282 	.word	0xb12e9282
 800b0b4:	3fb3b8c5 	.word	0x3fb3b8c5
 800b0b8:	1b8d0159 	.word	0x1b8d0159
 800b0bc:	3fe6066c 	.word	0x3fe6066c
 800b0c0:	9c598ac8 	.word	0x9c598ac8
 800b0c4:	40002ae5 	.word	0x40002ae5
 800b0c8:	1c8a2d4b 	.word	0x1c8a2d4b
 800b0cc:	40033a27 	.word	0x40033a27
 800b0d0:	3fefffff 	.word	0x3fefffff
 800b0d4:	3fdfffff 	.word	0x3fdfffff
 800b0d8:	3ff00000 	.word	0x3ff00000
 800b0dc:	3fe00000 	.word	0x3fe00000
 800b0e0:	3fef3332 	.word	0x3fef3332
 800b0e4:	4652      	mov	r2, sl
 800b0e6:	465b      	mov	r3, fp
 800b0e8:	4650      	mov	r0, sl
 800b0ea:	4659      	mov	r1, fp
 800b0ec:	f7f5 f8ce 	bl	800028c <__adddf3>
 800b0f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0f4:	4606      	mov	r6, r0
 800b0f6:	460f      	mov	r7, r1
 800b0f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0fc:	f7f5 fba6 	bl	800084c <__aeabi_ddiv>
 800b100:	4602      	mov	r2, r0
 800b102:	460b      	mov	r3, r1
 800b104:	4630      	mov	r0, r6
 800b106:	4639      	mov	r1, r7
 800b108:	f7f5 fa76 	bl	80005f8 <__aeabi_dmul>
 800b10c:	f04f 0800 	mov.w	r8, #0
 800b110:	4606      	mov	r6, r0
 800b112:	460f      	mov	r7, r1
 800b114:	4642      	mov	r2, r8
 800b116:	465b      	mov	r3, fp
 800b118:	4640      	mov	r0, r8
 800b11a:	4659      	mov	r1, fp
 800b11c:	f7f5 fa6c 	bl	80005f8 <__aeabi_dmul>
 800b120:	4602      	mov	r2, r0
 800b122:	460b      	mov	r3, r1
 800b124:	4620      	mov	r0, r4
 800b126:	4629      	mov	r1, r5
 800b128:	f7f5 f8ae 	bl	8000288 <__aeabi_dsub>
 800b12c:	4642      	mov	r2, r8
 800b12e:	4604      	mov	r4, r0
 800b130:	460d      	mov	r5, r1
 800b132:	465b      	mov	r3, fp
 800b134:	4650      	mov	r0, sl
 800b136:	4659      	mov	r1, fp
 800b138:	f7f5 f8a8 	bl	800028c <__adddf3>
 800b13c:	4602      	mov	r2, r0
 800b13e:	460b      	mov	r3, r1
 800b140:	4620      	mov	r0, r4
 800b142:	4629      	mov	r1, r5
 800b144:	f7f5 fb82 	bl	800084c <__aeabi_ddiv>
 800b148:	4602      	mov	r2, r0
 800b14a:	460b      	mov	r3, r1
 800b14c:	f7f5 f89e 	bl	800028c <__adddf3>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	a112      	add	r1, pc, #72	@ (adr r1, 800b1a0 <__ieee754_asin+0x3f8>)
 800b156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b15a:	f7f5 f895 	bl	8000288 <__aeabi_dsub>
 800b15e:	4602      	mov	r2, r0
 800b160:	460b      	mov	r3, r1
 800b162:	4630      	mov	r0, r6
 800b164:	4639      	mov	r1, r7
 800b166:	f7f5 f88f 	bl	8000288 <__aeabi_dsub>
 800b16a:	4642      	mov	r2, r8
 800b16c:	4604      	mov	r4, r0
 800b16e:	460d      	mov	r5, r1
 800b170:	465b      	mov	r3, fp
 800b172:	4640      	mov	r0, r8
 800b174:	4659      	mov	r1, fp
 800b176:	f7f5 f889 	bl	800028c <__adddf3>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	a10a      	add	r1, pc, #40	@ (adr r1, 800b1a8 <__ieee754_asin+0x400>)
 800b180:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b184:	f7f5 f880 	bl	8000288 <__aeabi_dsub>
 800b188:	4602      	mov	r2, r0
 800b18a:	460b      	mov	r3, r1
 800b18c:	4620      	mov	r0, r4
 800b18e:	4629      	mov	r1, r5
 800b190:	f7f5 f87a 	bl	8000288 <__aeabi_dsub>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	a103      	add	r1, pc, #12	@ (adr r1, 800b1a8 <__ieee754_asin+0x400>)
 800b19a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b19e:	e6e2      	b.n	800af66 <__ieee754_asin+0x1be>
 800b1a0:	33145c07 	.word	0x33145c07
 800b1a4:	3c91a626 	.word	0x3c91a626
 800b1a8:	54442d18 	.word	0x54442d18
 800b1ac:	3fe921fb 	.word	0x3fe921fb

0800b1b0 <_init>:
 800b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b2:	bf00      	nop
 800b1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1b6:	bc08      	pop	{r3}
 800b1b8:	469e      	mov	lr, r3
 800b1ba:	4770      	bx	lr

0800b1bc <_fini>:
 800b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1be:	bf00      	nop
 800b1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c2:	bc08      	pop	{r3}
 800b1c4:	469e      	mov	lr, r3
 800b1c6:	4770      	bx	lr
